
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022f6c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029cc  08023210  08023210  00024210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025bdc  08025bdc  00026bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000044  08025be4  08025be4  00026be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08025c28  08025c28  00026c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00001474  24000000  08025c2c  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000683d8  24001478  080270a0  00028478  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24069850  080270a0  00028850  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00028474  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fa99  00000000  00000000  000284a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d6a  00000000  00000000  00057f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fe0  00000000  00000000  0005dca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001883  00000000  00000000  0005fc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000445a4  00000000  00000000  0006150b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037300  00000000  00000000  000a5aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00192627  00000000  00000000  000dcdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  0026f3d6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009354  00000000  00000000  0026f44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  002787a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001478 	.word	0x24001478
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080231f4 	.word	0x080231f4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400147c 	.word	0x2400147c
 80002dc:	080231f4 	.word	0x080231f4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000766:	4a38      	ldr	r2, [pc, #224]	@ (8000848 <MX_ADC1_Init+0x108>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x104>)
 800076c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_ADC1_Init+0x104>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x104>)
 800078c:	2201      	movs	r2, #1
 800078e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007c4:	f003 f818 	bl	80037f8 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f001 f9d1 	bl	8001b74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007de:	f004 f83b 	bl	8004858 <HAL_ADCEx_MultiModeConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f001 f9c4 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x10c>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007f4:	2306      	movs	r3, #6
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000810:	f003 fa76 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081a:	f001 f9ab 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_ADC1_Init+0x110>)
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000822:	230c      	movs	r3, #12
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_ADC1_Init+0x104>)
 800082c:	f003 fa68 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000836:	f001 f99d 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	24001494 	.word	0x24001494
 8000848:	40022000 	.word	0x40022000
 800084c:	19200040 	.word	0x19200040
 8000850:	08600004 	.word	0x08600004

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ba      	sub	sp, #232	@ 0xe8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f021 fd5f 	bl	8022338 <memset>
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <HAL_ADC_MspInit+0x140>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f040 8083 	bne.w	800098c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8000896:	2325      	movs	r3, #37	@ 0x25
 8000898:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008aa:	2320      	movs	r3, #32
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f008 fa16 	bl	8008cf0 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80008ca:	f001 f953 	bl	8001b74 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <HAL_ADC_MspInit+0x148>)
 8000926:	f006 ff9d 	bl	8007864 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_ADC_MspInit+0x150>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000932:	2209      	movs	r2, #9
 8000934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800094c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000954:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800095c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000972:	f004 f92f 	bl	8004bd4 <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800097c:	f001 f8fa 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000986:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	37e8      	adds	r7, #232	@ 0xe8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000
 8000998:	58024400 	.word	0x58024400
 800099c:	58021400 	.word	0x58021400
 80009a0:	240014f8 	.word	0x240014f8
 80009a4:	40020410 	.word	0x40020410

080009a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009b4:	f00e ffd8 	bl	800f968 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009c0:	f000 f986 	bl	8000cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8090 	bne.w	8000af2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01e      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009d8:	2208      	movs	r2, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d015      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f023 0307 	bic.w	r3, r3, #7
 80009f0:	3308      	adds	r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d06a      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d865      	bhi.n	8000af2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d903      	bls.n	8000a4e <pvPortMallocMicroROS+0xa6>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d04c      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d920      	bls.n	8000abc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	613b      	str	r3, [r7, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f000 f96e 	bl	8000d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d203      	bcs.n	8000ade <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af2:	f00e ff47 	bl	800f984 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	240322b8 	.word	0x240322b8
 8000b28:	240322c4 	.word	0x240322c4
 8000b2c:	240322bc 	.word	0x240322bc
 8000b30:	240322b0 	.word	0x240322b0
 8000b34:	240322c0 	.word	0x240322c0

08000b38 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d04a      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6a:	f383 8811 	msr	BASEPRI, r3
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f3bf 8f4f 	dsb	sy
 8000b76:	60fb      	str	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00b      	beq.n	8000b9e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	60bb      	str	r3, [r7, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d115      	bne.n	8000be0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bc4:	f00e fed0 	bl	800f968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f000 f8de 	bl	8000d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bdc:	f00e fed2 	bl	800f984 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	240322c4 	.word	0x240322c4
 8000bec:	240322bc 	.word	0x240322bc

08000bf0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	425b      	negs	r3, r3
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <getBlockSize+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	return count;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	240322c4 	.word	0x240322c4

08000c2c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c36:	f00e fe97 	bl	800f968 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <pvPortMallocMicroROS>
 8000c40:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d017      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffce 	bl	8000bf0 <getBlockSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2208      	movs	r2, #8
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d201      	bcs.n	8000c68 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f021 fc82 	bl	8022576 <memcpy>

		vPortFreeMicroROS(pv);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff60 	bl	8000b38 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c78:	f00e fe84 	bl	800f984 <xTaskResumeAll>

	return newmem;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c90:	f00e fe6a 	bl	800f968 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fe82 	bl	80009a8 <pvPortMallocMicroROS>
 8000ca4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000caa:	e004      	b.n	8000cb6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	613a      	str	r2, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	617a      	str	r2, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f5      	bne.n	8000cac <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cc0:	f00e fe60 	bl	800f984 <xTaskResumeAll>
  	return mem;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <prvHeapInit+0xac>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3307      	adds	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <prvHeapInit+0xbc>)
 8000d5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <prvHeapInit+0xc0>)
 8000d64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <prvHeapInit+0xc4>)
 8000d68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	00030d40 	.word	0x00030d40
 8000d80:	24001570 	.word	0x24001570
 8000d84:	240322b0 	.word	0x240322b0
 8000d88:	240322b8 	.word	0x240322b8
 8000d8c:	240322c0 	.word	0x240322c0
 8000d90:	240322bc 	.word	0x240322bc
 8000d94:	240322c4 	.word	0x240322c4

08000d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <prvInsertBlockIntoFreeList+0xac>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e002      	b.n	8000dac <prvInsertBlockIntoFreeList+0x14>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f7      	bhi.n	8000da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d108      	bne.n	8000dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d118      	bne.n	8000e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d00d      	beq.n	8000e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d002      	beq.n	8000e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	240322b0 	.word	0x240322b0
 8000e48:	240322b8 	.word	0x240322b8

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	200b      	movs	r0, #11
 8000e94:	f003 fe76 	bl	8004b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f003 fe8d 	bl	8004bb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f003 fe6e 	bl	8004b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f003 fe85 	bl	8004bb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	2039      	movs	r0, #57	@ 0x39
 8000eb4:	f003 fe66 	bl	8004b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000eb8:	2039      	movs	r0, #57	@ 0x39
 8000eba:	f003 fe7d 	bl	8004bb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	203a      	movs	r0, #58	@ 0x3a
 8000ec4:	f003 fe5e 	bl	8004b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ec8:	203a      	movs	r0, #58	@ 0x3a
 8000eca:	f003 fe75 	bl	8004bb8 <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400

08000edc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eea:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ef0:	4904      	ldr	r1, [pc, #16]	@ (8000f04 <cubemx_transport_open+0x28>)
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f00a ff98 	bl	800be28 <HAL_UART_Receive_DMA>
    return true;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	240322c8 	.word	0x240322c8

08000f08 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f16:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00a ffd1 	bl	800bec0 <HAL_UART_DMAStop>
    return true;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f3c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d11b      	bne.n	8000f80 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f00a fee9 	bl	800bd28 <HAL_UART_Transmit_DMA>
 8000f56:	4603      	mov	r3, r0
 8000f58:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f5a:	e002      	b.n	8000f62 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f00d f977 	bl	800e250 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <cubemx_transport_write+0x4a>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	d1f4      	bne.n	8000f5c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f72:	7cfb      	ldrb	r3, [r7, #19]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <cubemx_transport_write+0x54>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	e002      	b.n	8000f82 <cubemx_transport_write+0x5a>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e000      	b.n	8000f82 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f80:	2300      	movs	r3, #0
    }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000fa0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa6:	b672      	cpsid	i
}
 8000fa8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800111c <cubemx_transport_read+0x190>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d068      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a57      	ldr	r2, [pc, #348]	@ (8001120 <cubemx_transport_read+0x194>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d061      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a55      	ldr	r2, [pc, #340]	@ (8001124 <cubemx_transport_read+0x198>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d05a      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	@ (8001128 <cubemx_transport_read+0x19c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d053      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a50      	ldr	r2, [pc, #320]	@ (800112c <cubemx_transport_read+0x1a0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <cubemx_transport_read+0x1a4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d045      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a4b      	ldr	r2, [pc, #300]	@ (8001134 <cubemx_transport_read+0x1a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d03e      	beq.n	800108a <cubemx_transport_read+0xfe>
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a48      	ldr	r2, [pc, #288]	@ (8001138 <cubemx_transport_read+0x1ac>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d037      	beq.n	800108a <cubemx_transport_read+0xfe>
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a46      	ldr	r2, [pc, #280]	@ (800113c <cubemx_transport_read+0x1b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d030      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a43      	ldr	r2, [pc, #268]	@ (8001140 <cubemx_transport_read+0x1b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d029      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a41      	ldr	r2, [pc, #260]	@ (8001144 <cubemx_transport_read+0x1b8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d022      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <cubemx_transport_read+0x1bc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01b      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3c      	ldr	r2, [pc, #240]	@ (800114c <cubemx_transport_read+0x1c0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d014      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <cubemx_transport_read+0x1c4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <cubemx_transport_read+0xfe>
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a37      	ldr	r2, [pc, #220]	@ (8001154 <cubemx_transport_read+0x1c8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d006      	beq.n	800108a <cubemx_transport_read+0xfe>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a34      	ldr	r2, [pc, #208]	@ (8001158 <cubemx_transport_read+0x1cc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d107      	bne.n	800109a <cubemx_transport_read+0x10e>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001098:	e006      	b.n	80010a8 <cubemx_transport_read+0x11c>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010a8:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010ac:	b662      	cpsie	i
}
 80010ae:	bf00      	nop
        __enable_irq();
        ms_used++;
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	3301      	adds	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00d f8ca 	bl	800e250 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d104      	bne.n	80010d2 <cubemx_transport_read+0x146>
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f6ff af6a 	blt.w	8000fa6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010d6:	e011      	b.n	80010fc <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010d8:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	440b      	add	r3, r1
 80010e2:	4920      	ldr	r1, [pc, #128]	@ (8001164 <cubemx_transport_read+0x1d8>)
 80010e4:	5c8a      	ldrb	r2, [r1, r2]
 80010e6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010f4:	6013      	str	r3, [r2, #0]
        wrote++;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <cubemx_transport_read+0x1d0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d003      	beq.n	8001110 <cubemx_transport_read+0x184>
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3e3      	bcc.n	80010d8 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8001110:	69bb      	ldr	r3, [r7, #24]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020010 	.word	0x40020010
 8001120:	40020028 	.word	0x40020028
 8001124:	40020040 	.word	0x40020040
 8001128:	40020058 	.word	0x40020058
 800112c:	40020070 	.word	0x40020070
 8001130:	40020088 	.word	0x40020088
 8001134:	400200a0 	.word	0x400200a0
 8001138:	400200b8 	.word	0x400200b8
 800113c:	40020410 	.word	0x40020410
 8001140:	40020428 	.word	0x40020428
 8001144:	40020440 	.word	0x40020440
 8001148:	40020458 	.word	0x40020458
 800114c:	40020470 	.word	0x40020470
 8001150:	40020488 	.word	0x40020488
 8001154:	400204a0 	.word	0x400204a0
 8001158:	400204b8 	.word	0x400204b8
 800115c:	24032acc 	.word	0x24032acc
 8001160:	24032ac8 	.word	0x24032ac8
 8001164:	240322c8 	.word	0x240322c8

08001168 <timer_watchdog_agent_callback>:
extern osThreadId_t TaskMicroAutowaHandle;

// Timer callbacks

void timer_watchdog_agent_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	e9c7 2300 	strd	r2, r3, [r7]
	
  if(RMW_RET_OK != rmw_uros_ping_agent(20, 1)) 
 8001174:	2101      	movs	r1, #1
 8001176:	2014      	movs	r0, #20
 8001178:	f014 fa48 	bl	801560c <rmw_uros_ping_agent>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <timer_watchdog_agent_callback+0x32>
  {
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <timer_watchdog_agent_callback+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f00c ff71 	bl	800e070 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <timer_watchdog_agent_callback+0x40>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2110      	movs	r1, #16
 8001194:	4618      	mov	r0, r3
 8001196:	f00c ff6b 	bl	800e070 <osThreadFlagsSet>
  } 

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24032ad0 	.word	0x24032ad0
 80011a8:	24032ad4 	.word	0x24032ad4

080011ac <clock_callback>:
  * @brief  ROS topic subscriber callback to recieve current timestamp
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void clock_callback(const void * xMsgIn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  const rosgraph_msgs__msg__Clock * clock_msg_ = (const rosgraph_msgs__msg__Clock * )xMsgIn;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 0);
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <clock_callback+0x28>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <clock_callback+0x28>)
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	24032b4b 	.word	0x24032b4b

080011d8 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  const autoware_control_msgs__msg__Control * control_cmd_msg_ = (const autoware_control_msgs__msg__Control * )xMsgIn;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 1);
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <control_cmd_callback+0x28>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <control_cmd_callback+0x28>)
 80011f0:	701a      	strb	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	24032b4b 	.word	0x24032b4b

08001204 <gear_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the gear command and save in gear_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void gear_cmd_callback(const void * xMsgIn)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__GearCommand * gear_cmd_msg_ = (const autoware_vehicle_msgs__msg__GearCommand * )xMsgIn;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 2);
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <gear_cmd_callback+0x28>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <gear_cmd_callback+0x28>)
 800121c:	701a      	strb	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	24032b4b 	.word	0x24032b4b

08001230 <turn_indicators_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the turn lights commands and save in turn_indicators_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void turn_indicators_cmd_callback(const void * xMsgIn)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * turn_indicators_cmd_msg_ = (const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * )xMsgIn;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 3);
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <turn_indicators_cmd_callback+0x28>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <turn_indicators_cmd_callback+0x28>)
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	24032b4b 	.word	0x24032b4b

0800125c <hazard_lights_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the hazard lights commands and save in hazard_lights_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void hazard_lights_cmd_callback(const void * xMsgIn)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__HazardLightsCommand * hazard_lights_cmd_msg_ = (const autoware_vehicle_msgs__msg__HazardLightsCommand * )xMsgIn;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 4);
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <hazard_lights_cmd_callback+0x28>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <hazard_lights_cmd_callback+0x28>)
 8001274:	701a      	strb	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	24032b4b 	.word	0x24032b4b

08001288 <actuation_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in actuation_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void actuation_cmd_callback(const void * xMsgIn)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__ActuationCommandStamped * actuation_cmd_msg_ = (const tier4_vehicle_msgs__msg__ActuationCommandStamped * )xMsgIn;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 5);
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <actuation_cmd_callback+0x28>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <actuation_cmd_callback+0x28>)
 80012a0:	701a      	strb	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	24032b4b 	.word	0x24032b4b

080012b4 <emergency_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in emergency_msg_ 
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void emergency_callback(const void * xMsgIn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * emergency_msg_ = (const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * )xMsgIn;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 6);
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <emergency_callback+0x28>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <emergency_callback+0x28>)
 80012cc:	701a      	strb	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	24032b4b 	.word	0x24032b4b

080012e0 <control_mode_cmd_callback>:
  * @param  xRequestMsg: pointer to the request made for the server.
  * @param  xResponseMsg: pointer to the response gave by the server.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, autoware_vehicle_msgs__srv__ControlModeCommand_Response * xResponseMsg)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  const autoware_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  if(AUTOWARE == control_mode_request_msg_->mode)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	7a1b      	ldrb	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10c      	bne.n	8001310 <control_mode_cmd_callback+0x30>
  {
    osThreadFlagsSet(TaskControleHandle, TO_AUTOWARE_MODE_FLAG);
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <control_mode_cmd_callback+0x60>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00c feb7 	bl	800e070 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <control_mode_cmd_callback+0x64>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2101      	movs	r1, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f00c feb1 	bl	800e070 <osThreadFlagsSet>
 800130e:	e00f      	b.n	8001330 <control_mode_cmd_callback+0x50>
  }
  else if(MANUAL == control_mode_request_msg_->mode)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	7a1b      	ldrb	r3, [r3, #8]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d10b      	bne.n	8001330 <control_mode_cmd_callback+0x50>
  {
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <control_mode_cmd_callback+0x60>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2110      	movs	r1, #16
 800131e:	4618      	mov	r0, r3
 8001320:	f00c fea6 	bl	800e070 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <control_mode_cmd_callback+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2110      	movs	r1, #16
 800132a:	4618      	mov	r0, r3
 800132c:	f00c fea0 	bl	800e070 <osThreadFlagsSet>
  }

  xResponseMsg->success = true;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24032ad0 	.word	0x24032ad0
 8001344:	24032ad4 	.word	0x24032ad4

08001348 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 800134c:	480e      	ldr	r0, [pc, #56]	@ (8001388 <MX_FREERTOS_Init+0x40>)
 800134e:	f00c ff9a 	bl	800e286 <osMutexNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <MX_FREERTOS_Init+0x44>)
 8001356:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8001358:	480d      	ldr	r0, [pc, #52]	@ (8001390 <MX_FREERTOS_Init+0x48>)
 800135a:	f00c ff94 	bl	800e286 <osMutexNew>
 800135e:	4603      	mov	r3, r0
 8001360:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <MX_FREERTOS_Init+0x4c>)
 8001362:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8001364:	4a0c      	ldr	r2, [pc, #48]	@ (8001398 <MX_FREERTOS_Init+0x50>)
 8001366:	2100      	movs	r1, #0
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <MX_FREERTOS_Init+0x54>)
 800136a:	f00c fdee 	bl	800df4a <osThreadNew>
 800136e:	4603      	mov	r3, r0
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <MX_FREERTOS_Init+0x58>)
 8001372:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 8001374:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <MX_FREERTOS_Init+0x5c>)
 8001376:	2100      	movs	r1, #0
 8001378:	480b      	ldr	r0, [pc, #44]	@ (80013a8 <MX_FREERTOS_Init+0x60>)
 800137a:	f00c fde6 	bl	800df4a <osThreadNew>
 800137e:	4603      	mov	r3, r0
 8001380:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <MX_FREERTOS_Init+0x64>)
 8001382:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	08023508 	.word	0x08023508
 800138c:	24032ad8 	.word	0x24032ad8
 8001390:	08023518 	.word	0x08023518
 8001394:	24032adc 	.word	0x24032adc
 8001398:	080234c0 	.word	0x080234c0
 800139c:	080028b5 	.word	0x080028b5
 80013a0:	24032ad0 	.word	0x24032ad0
 80013a4:	080234e4 	.word	0x080234e4
 80013a8:	08001b81 	.word	0x08001b81
 80013ac:	24032ad4 	.word	0x24032ad4

080013b0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	@ 0x38
 80013b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b9e      	ldr	r3, [pc, #632]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	4a9c      	ldr	r2, [pc, #624]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d6:	4b9a      	ldr	r3, [pc, #616]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e4:	4b96      	ldr	r3, [pc, #600]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	4a95      	ldr	r2, [pc, #596]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f4:	4b92      	ldr	r3, [pc, #584]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b8f      	ldr	r3, [pc, #572]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001408:	4a8d      	ldr	r2, [pc, #564]	@ (8001640 <MX_GPIO_Init+0x290>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001412:	4b8b      	ldr	r3, [pc, #556]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b87      	ldr	r3, [pc, #540]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	4a86      	ldr	r2, [pc, #536]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001430:	4b83      	ldr	r3, [pc, #524]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143e:	4b80      	ldr	r3, [pc, #512]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001444:	4a7e      	ldr	r2, [pc, #504]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144e:	4b7c      	ldr	r3, [pc, #496]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145c:	4b78      	ldr	r3, [pc, #480]	@ (8001640 <MX_GPIO_Init+0x290>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	4a77      	ldr	r2, [pc, #476]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146c:	4b74      	ldr	r3, [pc, #464]	@ (8001640 <MX_GPIO_Init+0x290>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147a:	4b71      	ldr	r3, [pc, #452]	@ (8001640 <MX_GPIO_Init+0x290>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001480:	4a6f      	ldr	r2, [pc, #444]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800148a:	4b6d      	ldr	r3, [pc, #436]	@ (8001640 <MX_GPIO_Init+0x290>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001498:	4b69      	ldr	r3, [pc, #420]	@ (8001640 <MX_GPIO_Init+0x290>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	4a68      	ldr	r2, [pc, #416]	@ (8001640 <MX_GPIO_Init+0x290>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a8:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <MX_GPIO_Init+0x290>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f244 0101 	movw	r1, #16385	@ 0x4001
 80014bc:	4861      	ldr	r0, [pc, #388]	@ (8001644 <MX_GPIO_Init+0x294>)
 80014be:	f006 fb81 	bl	8007bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014c8:	485f      	ldr	r0, [pc, #380]	@ (8001648 <MX_GPIO_Init+0x298>)
 80014ca:	f006 fb7b 	bl	8007bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2102      	movs	r1, #2
 80014d2:	485e      	ldr	r0, [pc, #376]	@ (800164c <MX_GPIO_Init+0x29c>)
 80014d4:	f006 fb76 	bl	8007bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4858      	ldr	r0, [pc, #352]	@ (8001650 <MX_GPIO_Init+0x2a0>)
 80014ee:	f006 f9b9 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80014f2:	2332      	movs	r3, #50	@ 0x32
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001502:	230b      	movs	r3, #11
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4850      	ldr	r0, [pc, #320]	@ (8001650 <MX_GPIO_Init+0x2a0>)
 800150e:	f006 f9a9 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001512:	2386      	movs	r3, #134	@ 0x86
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001522:	230b      	movs	r3, #11
 8001524:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4849      	ldr	r0, [pc, #292]	@ (8001654 <MX_GPIO_Init+0x2a4>)
 800152e:	f006 f999 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001532:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	483e      	ldr	r0, [pc, #248]	@ (8001644 <MX_GPIO_Init+0x294>)
 800154c:	f006 f98a 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8001550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001556:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155c:	2301      	movs	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	483c      	ldr	r0, [pc, #240]	@ (8001658 <MX_GPIO_Init+0x2a8>)
 8001568:	f006 f97c 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800156c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800157e:	230b      	movs	r3, #11
 8001580:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	482e      	ldr	r0, [pc, #184]	@ (8001644 <MX_GPIO_Init+0x294>)
 800158a:	f006 f96b 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800158e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4828      	ldr	r0, [pc, #160]	@ (8001648 <MX_GPIO_Init+0x298>)
 80015a8:	f006 f95c 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4826      	ldr	r0, [pc, #152]	@ (800165c <MX_GPIO_Init+0x2ac>)
 80015c2:	f006 f94f 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015c6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015d8:	230a      	movs	r3, #10
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	481c      	ldr	r0, [pc, #112]	@ (8001654 <MX_GPIO_Init+0x2a4>)
 80015e4:	f006 f93e 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80015e8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fa:	230b      	movs	r3, #11
 80015fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	4815      	ldr	r0, [pc, #84]	@ (800165c <MX_GPIO_Init+0x2ac>)
 8001606:	f006 f92d 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800160a:	2302      	movs	r3, #2
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	480a      	ldr	r0, [pc, #40]	@ (800164c <MX_GPIO_Init+0x29c>)
 8001622:	f006 f91f 	bl	8007864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2107      	movs	r1, #7
 800162a:	2028      	movs	r0, #40	@ 0x28
 800162c:	f003 faaa 	bl	8004b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001630:	2028      	movs	r0, #40	@ 0x28
 8001632:	f003 fac1 	bl	8004bb8 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3738      	adds	r7, #56	@ 0x38
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	58024400 	.word	0x58024400
 8001644:	58020400 	.word	0x58020400
 8001648:	58020c00 	.word	0x58020c00
 800164c:	58021000 	.word	0x58021000
 8001650:	58020800 	.word	0x58020800
 8001654:	58020000 	.word	0x58020000
 8001658:	58021400 	.word	0x58021400
 800165c:	58021800 	.word	0x58021800

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001664:	f001 fe54 	bl	8003310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001668:	f000 f81c 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166c:	f7ff fea0 	bl	80013b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001670:	f7ff fbec 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001674:	f001 fb1c 	bl	8002cb0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001678:	f7ff f862 	bl	8000740 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800167c:	f001 facc 	bl	8002c18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8001680:	2202      	movs	r2, #2
 8001682:	4906      	ldr	r1, [pc, #24]	@ (800169c <main+0x3c>)
 8001684:	4806      	ldr	r0, [pc, #24]	@ (80016a0 <main+0x40>)
 8001686:	f002 fa59 	bl	8003b3c <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800168a:	f00c fbff 	bl	800de8c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800168e:	f7ff fe5b 	bl	8001348 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001692:	f00c fc1f 	bl	800ded4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001696:	bf00      	nop
 8001698:	e7fd      	b.n	8001696 <main+0x36>
 800169a:	bf00      	nop
 800169c:	24032ae4 	.word	0x24032ae4
 80016a0:	24001494 	.word	0x24001494

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b09e      	sub	sp, #120	@ 0x78
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ae:	224c      	movs	r2, #76	@ 0x4c
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f020 fe40 	bl	8022338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2220      	movs	r2, #32
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f020 fe39 	bl	8022338 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016c6:	2002      	movs	r0, #2
 80016c8:	f006 fab0 	bl	8007c2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b49      	ldr	r3, [pc, #292]	@ (80017f8 <SystemClock_Config+0x154>)
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	4a48      	ldr	r2, [pc, #288]	@ (80017f8 <SystemClock_Config+0x154>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016dc:	4b46      	ldr	r3, [pc, #280]	@ (80017f8 <SystemClock_Config+0x154>)
 80016de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b45      	ldr	r3, [pc, #276]	@ (80017fc <SystemClock_Config+0x158>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	4a44      	ldr	r2, [pc, #272]	@ (80017fc <SystemClock_Config+0x158>)
 80016ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016f0:	6193      	str	r3, [r2, #24]
 80016f2:	4b42      	ldr	r3, [pc, #264]	@ (80017fc <SystemClock_Config+0x158>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016fe:	bf00      	nop
 8001700:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <SystemClock_Config+0x158>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800170c:	d1f8      	bne.n	8001700 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b3c      	ldr	r3, [pc, #240]	@ (8001800 <SystemClock_Config+0x15c>)
 8001710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001714:	4a3a      	ldr	r2, [pc, #232]	@ (8001800 <SystemClock_Config+0x15c>)
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800171e:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <SystemClock_Config+0x15c>)
 8001720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800172c:	2300      	movs	r3, #0
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	4b32      	ldr	r3, [pc, #200]	@ (80017fc <SystemClock_Config+0x158>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a31      	ldr	r2, [pc, #196]	@ (80017fc <SystemClock_Config+0x158>)
 8001736:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <SystemClock_Config+0x158>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b2c      	ldr	r3, [pc, #176]	@ (80017f8 <SystemClock_Config+0x154>)
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	4a2b      	ldr	r2, [pc, #172]	@ (80017f8 <SystemClock_Config+0x154>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001752:	4b29      	ldr	r3, [pc, #164]	@ (80017f8 <SystemClock_Config+0x154>)
 8001754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800175e:	bf00      	nop
 8001760:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <SystemClock_Config+0x158>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800176c:	d1f8      	bne.n	8001760 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800176e:	2310      	movs	r3, #16
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001776:	2320      	movs	r3, #32
 8001778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 800177e:	2301      	movs	r3, #1
 8001780:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001786:	23f0      	movs	r3, #240	@ 0xf0
 8001788:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800178a:	2302      	movs	r3, #2
 800178c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800178e:	2304      	movs	r3, #4
 8001790:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001792:	2302      	movs	r3, #2
 8001794:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001796:	2308      	movs	r3, #8
 8001798:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800179a:	2300      	movs	r3, #0
 800179c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 fa7a 	bl	8007ca0 <HAL_RCC_OscConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80017b2:	f000 f9df 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b6:	233f      	movs	r3, #63	@ 0x3f
 80017b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ba:	2303      	movs	r3, #3
 80017bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017c2:	2308      	movs	r3, #8
 80017c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017c6:	2340      	movs	r3, #64	@ 0x40
 80017c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017ca:	2340      	movs	r3, #64	@ 0x40
 80017cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017d4:	2340      	movs	r3, #64	@ 0x40
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2104      	movs	r1, #4
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 feb8 	bl	8008554 <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80017ea:	f000 f9c3 	bl	8001b74 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3778      	adds	r7, #120	@ 0x78
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	58000400 	.word	0x58000400
 80017fc:	58024800 	.word	0x58024800
 8001800:	58024400 	.word	0x58024400

08001804 <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001814:	d11a      	bne.n	800184c <HAL_GPIO_EXTI_Callback+0x48>

    unsigned int uiTick = osKernelGetTickCount();
 8001816:	f00c fb83 	bl	800df20 <osKernelGetTickCount>
 800181a:	60f8      	str	r0, [r7, #12]

    if(uiTick > (uiJoySWTickOnPress + DEBOUNCE_TICKS)) // DEBOUNCE_TICKS debounce
 800181c:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x50>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	429a      	cmp	r2, r3
 8001828:	d910      	bls.n	800184c <HAL_GPIO_EXTI_Callback+0x48>
    {
      ucButtonState ^= 1;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x54>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f083 0301 	eor.w	r3, r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x54>)
 8001836:	701a      	strb	r2, [r3, #0]
      uiJoySWTickOnPress = uiTick;
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x50>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6013      	str	r3, [r2, #0]
      osThreadFlagsSet(TaskControleHandle, 0x1000);
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_GPIO_EXTI_Callback+0x58>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001846:	4618      	mov	r0, r3
 8001848:	f00c fc12 	bl	800e070 <osThreadFlagsSet>
    }
  }
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	24032aec 	.word	0x24032aec
 8001858:	24032ae0 	.word	0x24032ae0
 800185c:	24032ad0 	.word	0x24032ad0

08001860 <HAL_UART_RxCpltCallback>:
  * @brief  ISR callback for reading msg from UART with UART2_DMA_BUFFER_SIZE bytes.
  * @param  huart: Handle for serial UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4ab5      	ldr	r2, [pc, #724]	@ (8001b40 <HAL_UART_RxCpltCallback+0x2e0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	f040 8163 	bne.w	8001b38 <HAL_UART_RxCpltCallback+0x2d8>
  {

    // State machine state
    unsigned int ucSmState = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	72fb      	strb	r3, [r7, #11]
 800187a:	e154      	b.n	8001b26 <HAL_UART_RxCpltCallback+0x2c6>
    {
      switch (ucSmState)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b2b      	cmp	r3, #43	@ 0x2b
 8001880:	f200 814a 	bhi.w	8001b18 <HAL_UART_RxCpltCallback+0x2b8>
 8001884:	a201      	add	r2, pc, #4	@ (adr r2, 800188c <HAL_UART_RxCpltCallback+0x2c>)
 8001886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188a:	bf00      	nop
 800188c:	0800193d 	.word	0x0800193d
 8001890:	0800194f 	.word	0x0800194f
 8001894:	08001b19 	.word	0x08001b19
 8001898:	08001b19 	.word	0x08001b19
 800189c:	08001b19 	.word	0x08001b19
 80018a0:	08001b19 	.word	0x08001b19
 80018a4:	08001b19 	.word	0x08001b19
 80018a8:	08001b19 	.word	0x08001b19
 80018ac:	08001b19 	.word	0x08001b19
 80018b0:	08001b19 	.word	0x08001b19
 80018b4:	08001a19 	.word	0x08001a19
 80018b8:	08001a29 	.word	0x08001a29
 80018bc:	08001a39 	.word	0x08001a39
 80018c0:	08001a49 	.word	0x08001a49
 80018c4:	08001b19 	.word	0x08001b19
 80018c8:	08001b19 	.word	0x08001b19
 80018cc:	08001b19 	.word	0x08001b19
 80018d0:	08001b19 	.word	0x08001b19
 80018d4:	08001b19 	.word	0x08001b19
 80018d8:	08001b19 	.word	0x08001b19
 80018dc:	08001a59 	.word	0x08001a59
 80018e0:	08001a69 	.word	0x08001a69
 80018e4:	08001a79 	.word	0x08001a79
 80018e8:	08001a89 	.word	0x08001a89
 80018ec:	08001b19 	.word	0x08001b19
 80018f0:	08001b19 	.word	0x08001b19
 80018f4:	08001b19 	.word	0x08001b19
 80018f8:	08001b19 	.word	0x08001b19
 80018fc:	08001b19 	.word	0x08001b19
 8001900:	08001b19 	.word	0x08001b19
 8001904:	08001a99 	.word	0x08001a99
 8001908:	08001aa9 	.word	0x08001aa9
 800190c:	08001ab9 	.word	0x08001ab9
 8001910:	08001ac9 	.word	0x08001ac9
 8001914:	08001b19 	.word	0x08001b19
 8001918:	08001b19 	.word	0x08001b19
 800191c:	08001b19 	.word	0x08001b19
 8001920:	08001b19 	.word	0x08001b19
 8001924:	08001b19 	.word	0x08001b19
 8001928:	08001b19 	.word	0x08001b19
 800192c:	08001ad9 	.word	0x08001ad9
 8001930:	08001ae9 	.word	0x08001ae9
 8001934:	08001af9 	.word	0x08001af9
 8001938:	08001b09 	.word	0x08001b09
      {
        case 0:
          if('#' == ucDmaBuffer[i])
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	4a81      	ldr	r2, [pc, #516]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	2b23      	cmp	r3, #35	@ 0x23
 8001944:	f040 80eb 	bne.w	8001b1e <HAL_UART_RxCpltCallback+0x2be>
          {
            ucSmState = 1;
 8001948:	2301      	movs	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800194c:	e0e7      	b.n	8001b1e <HAL_UART_RxCpltCallback+0x2be>

        case 1:
          switch (ucDmaBuffer[i])
 800194e:	7afb      	ldrb	r3, [r7, #11]
 8001950:	4a7c      	ldr	r2, [pc, #496]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	3b24      	subs	r3, #36	@ 0x24
 8001956:	2b20      	cmp	r3, #32
 8001958:	d85a      	bhi.n	8001a10 <HAL_UART_RxCpltCallback+0x1b0>
 800195a:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <HAL_UART_RxCpltCallback+0x100>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	080019fd 	.word	0x080019fd
 8001964:	08001a11 	.word	0x08001a11
 8001968:	08001a11 	.word	0x08001a11
 800196c:	08001a11 	.word	0x08001a11
 8001970:	08001a11 	.word	0x08001a11
 8001974:	08001a11 	.word	0x08001a11
 8001978:	08001a11 	.word	0x08001a11
 800197c:	08001a11 	.word	0x08001a11
 8001980:	08001a11 	.word	0x08001a11
 8001984:	08001a11 	.word	0x08001a11
 8001988:	08001a11 	.word	0x08001a11
 800198c:	08001a11 	.word	0x08001a11
 8001990:	08001a11 	.word	0x08001a11
 8001994:	08001a11 	.word	0x08001a11
 8001998:	08001a11 	.word	0x08001a11
 800199c:	08001a11 	.word	0x08001a11
 80019a0:	08001a11 	.word	0x08001a11
 80019a4:	08001a11 	.word	0x08001a11
 80019a8:	08001a11 	.word	0x08001a11
 80019ac:	08001a11 	.word	0x08001a11
 80019b0:	08001a11 	.word	0x08001a11
 80019b4:	08001a11 	.word	0x08001a11
 80019b8:	08001a11 	.word	0x08001a11
 80019bc:	08001a11 	.word	0x08001a11
 80019c0:	08001a11 	.word	0x08001a11
 80019c4:	08001a11 	.word	0x08001a11
 80019c8:	08001a11 	.word	0x08001a11
 80019cc:	08001a11 	.word	0x08001a11
 80019d0:	08001a11 	.word	0x08001a11
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019eb 	.word	0x080019eb
 80019dc:	080019f1 	.word	0x080019f1
 80019e0:	080019f7 	.word	0x080019f7
          {
            case 'A':
            ucSmState = 10;
 80019e4:	230a      	movs	r3, #10
 80019e6:	60fb      	str	r3, [r7, #12]
            break;
 80019e8:	e015      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case 'B':
            ucSmState = 20;
 80019ea:	2314      	movs	r3, #20
 80019ec:	60fb      	str	r3, [r7, #12]
            break;
 80019ee:	e012      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case 'C':
            ucSmState = 30;
 80019f0:	231e      	movs	r3, #30
 80019f2:	60fb      	str	r3, [r7, #12]
            break;
 80019f4:	e00f      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case 'D':
            ucSmState = 40;
 80019f6:	2328      	movs	r3, #40	@ 0x28
 80019f8:	60fb      	str	r3, [r7, #12]
            break;
 80019fa:	e00c      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case '$':
            ucSmState = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]

            // Message fully received, setting TaskControle ThreadFlag for sync.
            osThreadFlagsSet(TaskControleHandle, 0x10000);
 8001a00:	4b51      	ldr	r3, [pc, #324]	@ (8001b48 <HAL_UART_RxCpltCallback+0x2e8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00c fb31 	bl	800e070 <osThreadFlagsSet>
            break;
 8001a0e:	e002      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            default:
              ucSmState = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
              break;
 8001a14:	bf00      	nop
          }
          break;
 8001a16:	e083      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 10:
          xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 8001a18:	7afb      	ldrb	r3, [r7, #11]
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a1c:	5cd2      	ldrb	r2, [r2, r3]
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a20:	701a      	strb	r2, [r3, #0]
          ucSmState = 11;
 8001a22:	230b      	movs	r3, #11
 8001a24:	60fb      	str	r3, [r7, #12]
          break;
 8001a26:	e07b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 11:
          xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	4a46      	ldr	r2, [pc, #280]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a2c:	5cd2      	ldrb	r2, [r2, r3]
 8001a2e:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a30:	705a      	strb	r2, [r3, #1]
          ucSmState = 12;
 8001a32:	230c      	movs	r3, #12
 8001a34:	60fb      	str	r3, [r7, #12]
          break;
 8001a36:	e073      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 12:
          xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	4a42      	ldr	r2, [pc, #264]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a3c:	5cd2      	ldrb	r2, [r2, r3]
 8001a3e:	4b43      	ldr	r3, [pc, #268]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a40:	709a      	strb	r2, [r3, #2]
          ucSmState = 13;
 8001a42:	230d      	movs	r3, #13
 8001a44:	60fb      	str	r3, [r7, #12]
          break;
 8001a46:	e06b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 13:
          xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001a48:	7afb      	ldrb	r3, [r7, #11]
 8001a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a4c:	5cd2      	ldrb	r2, [r2, r3]
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a50:	70da      	strb	r2, [r3, #3]
          ucSmState = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
          break;
 8001a56:	e063      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 20:
          xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a5c:	5cd2      	ldrb	r2, [r2, r3]
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a60:	711a      	strb	r2, [r3, #4]
          ucSmState = 21;
 8001a62:	2315      	movs	r3, #21
 8001a64:	60fb      	str	r3, [r7, #12]
          break;
 8001a66:	e05b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 21:
          xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 8001a68:	7afb      	ldrb	r3, [r7, #11]
 8001a6a:	4a36      	ldr	r2, [pc, #216]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a6c:	5cd2      	ldrb	r2, [r2, r3]
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a70:	715a      	strb	r2, [r3, #5]
          ucSmState = 22;
 8001a72:	2316      	movs	r3, #22
 8001a74:	60fb      	str	r3, [r7, #12]
          break;
 8001a76:	e053      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 22:
          xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	4a32      	ldr	r2, [pc, #200]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a7c:	5cd2      	ldrb	r2, [r2, r3]
 8001a7e:	4b33      	ldr	r3, [pc, #204]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a80:	719a      	strb	r2, [r3, #6]
          ucSmState = 23;
 8001a82:	2317      	movs	r3, #23
 8001a84:	60fb      	str	r3, [r7, #12]
          break;
 8001a86:	e04b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 23:
          xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001a88:	7afb      	ldrb	r3, [r7, #11]
 8001a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a8c:	5cd2      	ldrb	r2, [r2, r3]
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a90:	71da      	strb	r2, [r3, #7]
          ucSmState = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
          break;
 8001a96:	e043      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 30:
          xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a9c:	5cd2      	ldrb	r2, [r2, r3]
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001aa0:	721a      	strb	r2, [r3, #8]
          ucSmState = 31;
 8001aa2:	231f      	movs	r3, #31
 8001aa4:	60fb      	str	r3, [r7, #12]
          break;
 8001aa6:	e03b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 31:
          xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
 8001aaa:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001aac:	5cd2      	ldrb	r2, [r2, r3]
 8001aae:	4b27      	ldr	r3, [pc, #156]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ab0:	725a      	strb	r2, [r3, #9]
          ucSmState = 32;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	60fb      	str	r3, [r7, #12]
          break;
 8001ab6:	e033      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 32:
          xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	4a22      	ldr	r2, [pc, #136]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001abc:	5cd2      	ldrb	r2, [r2, r3]
 8001abe:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ac0:	729a      	strb	r2, [r3, #10]
          ucSmState = 33;
 8001ac2:	2321      	movs	r3, #33	@ 0x21
 8001ac4:	60fb      	str	r3, [r7, #12]
          break;
 8001ac6:	e02b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 33:
          xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001acc:	5cd2      	ldrb	r2, [r2, r3]
 8001ace:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ad0:	72da      	strb	r2, [r3, #11]
          ucSmState = 1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
          break;
 8001ad6:	e023      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 40:
          xVehicleStatus.xSteeringStatus.ucBytes[0] = ucDmaBuffer[i];
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	4a1a      	ldr	r2, [pc, #104]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001adc:	5cd2      	ldrb	r2, [r2, r3]
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ae0:	731a      	strb	r2, [r3, #12]
          ucSmState = 41;
 8001ae2:	2329      	movs	r3, #41	@ 0x29
 8001ae4:	60fb      	str	r3, [r7, #12]
          break;
 8001ae6:	e01b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 41:
          xVehicleStatus.xSteeringStatus.ucBytes[1] = ucDmaBuffer[i];
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	4a16      	ldr	r2, [pc, #88]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001aec:	5cd2      	ldrb	r2, [r2, r3]
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001af0:	735a      	strb	r2, [r3, #13]
          ucSmState = 42;
 8001af2:	232a      	movs	r3, #42	@ 0x2a
 8001af4:	60fb      	str	r3, [r7, #12]
          break;
 8001af6:	e013      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 42:
          xVehicleStatus.xSteeringStatus.ucBytes[2] = ucDmaBuffer[i];
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001afc:	5cd2      	ldrb	r2, [r2, r3]
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001b00:	739a      	strb	r2, [r3, #14]
          ucSmState = 43;
 8001b02:	232b      	movs	r3, #43	@ 0x2b
 8001b04:	60fb      	str	r3, [r7, #12]
          break;
 8001b06:	e00b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 43:
          xVehicleStatus.xSteeringStatus.ucBytes[3] = ucDmaBuffer[i];
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001b0c:	5cd2      	ldrb	r2, [r2, r3]
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001b10:	73da      	strb	r2, [r3, #15]
          ucSmState = 1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
          break;
 8001b16:	e003      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        default:
		      ucSmState = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
          break;
 8001b1c:	e000      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>
          break;
 8001b1e:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	3301      	adds	r3, #1
 8001b24:	72fb      	strb	r3, [r7, #11]
 8001b26:	7afb      	ldrb	r3, [r7, #11]
 8001b28:	2b12      	cmp	r3, #18
 8001b2a:	f67f aea7 	bls.w	800187c <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    // Starting other UART reading
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001b2e:	2213      	movs	r2, #19
 8001b30:	4904      	ldr	r1, [pc, #16]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001b32:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <HAL_UART_RxCpltCallback+0x2e0>)
 8001b34:	f00a f978 	bl	800be28 <HAL_UART_Receive_DMA>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	24032ba8 	.word	0x24032ba8
 8001b44:	24032b38 	.word	0x24032b38
 8001b48:	24032ad0 	.word	0x24032ad0
 8001b4c:	24032b28 	.word	0x24032b28

08001b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b62:	f001 fc11 	bl	8003388 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40001000 	.word	0x40001000

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <Error_Handler+0x8>

08001b80 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void * argument)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8001b86:	af02      	add	r7, sp, #8
 8001b88:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001b8c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001b90:	6018      	str	r0, [r3, #0]

  // Variables -- START

  unsigned int uiFlags;
  unsigned char ucControlMode = AUTOWARE;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337

  // micro-ros QoS
  const rmw_qos_profile_t * qos_autoware = &rmw_qos_profile_autoware;
 8001b98:	4bd5      	ldr	r3, [pc, #852]	@ (8001ef0 <StartMicroAutoware+0x370>)
 8001b9a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001b9e:	4bd5      	ldr	r3, [pc, #852]	@ (8001ef4 <StartMicroAutoware+0x374>)
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	4bd5      	ldr	r3, [pc, #852]	@ (8001ef8 <StartMicroAutoware+0x378>)
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4bd5      	ldr	r3, [pc, #852]	@ (8001efc <StartMicroAutoware+0x37c>)
 8001ba8:	4ad5      	ldr	r2, [pc, #852]	@ (8001f00 <StartMicroAutoware+0x380>)
 8001baa:	49d6      	ldr	r1, [pc, #856]	@ (8001f04 <StartMicroAutoware+0x384>)
 8001bac:	2001      	movs	r0, #1
 8001bae:	f013 fd17 	bl	80155e0 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001bb2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bb6:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f013 fc64 	bl	8015488 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001bc0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bc4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001bc8:	4acf      	ldr	r2, [pc, #828]	@ (8001f08 <StartMicroAutoware+0x388>)
 8001bca:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001bcc:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bd0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001bd4:	4acd      	ldr	r2, [pc, #820]	@ (8001f0c <StartMicroAutoware+0x38c>)
 8001bd6:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001bd8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bdc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001be0:	4acb      	ldr	r2, [pc, #812]	@ (8001f10 <StartMicroAutoware+0x390>)
 8001be2:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001be4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001be8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001bec:	4ac9      	ldr	r2, [pc, #804]	@ (8001f14 <StartMicroAutoware+0x394>)
 8001bee:	60da      	str	r2, [r3, #12]

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 8001bf0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bf4:	f5a3 7424 	sub.w	r4, r3, #656	@ 0x290
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f012 ff92 	bl	8014b24 <rclc_executor_get_zero_initialized_executor>
 8001c00:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001c04:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	2388      	movs	r3, #136	@ 0x88
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f020 fcb1 	bl	8022576 <memcpy>

  allocator = rcl_get_default_allocator();
 8001c14:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001c18:	f5a3 7401 	sub.w	r4, r3, #516	@ 0x204
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f013 fc40 	bl	80154a4 <rcutils_get_default_allocator>
 8001c24:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001c28:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c32:	682b      	ldr	r3, [r5, #0]
 8001c34:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001c36:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001c3a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	f013 fa9d 	bl	8015180 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "microautoware", &support);
 8001c46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001c4a:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001c4e:	4ab2      	ldr	r2, [pc, #712]	@ (8001f18 <StartMicroAutoware+0x398>)
 8001c50:	49b2      	ldr	r1, [pc, #712]	@ (8001f1c <StartMicroAutoware+0x39c>)
 8001c52:	f013 fadf 	bl	8015214 <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001c56:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001c5a:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001c5e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001c62:	2201      	movs	r2, #1
 8001c64:	f012 ff68 	bl	8014b38 <rclc_executor_init>

  // create timers
  rclc_timer_init_default(&timer_watchdog_agent, &support, WATCHDOG_AGENT_TIMEOUT, timer_watchdog_agent_callback);
 8001c68:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001c6c:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 8001c70:	4bab      	ldr	r3, [pc, #684]	@ (8001f20 <StartMicroAutoware+0x3a0>)
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	f013 fbcc 	bl	8015418 <rclc_timer_init_default>

  // create subscribers
  // TODO set QoS
  rclc_subscription_init(
 8001c80:	f014 faf4 	bl	801626c <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001c8a:	f507 7049 	add.w	r0, r7, #804	@ 0x324
 8001c8e:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4ba3      	ldr	r3, [pc, #652]	@ (8001f24 <StartMicroAutoware+0x3a4>)
 8001c96:	f013 fb7f 	bl	8015398 <rclc_subscription_init>
    		&clock_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(rosgraph_msgs, msg, Clock),
    		"/clock", qos_autoware);
        
  rclc_subscription_init(
 8001c9a:	f00f fe27 	bl	80118ec <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001ca4:	f507 7048 	add.w	r0, r7, #800	@ 0x320
 8001ca8:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4b9e      	ldr	r3, [pc, #632]	@ (8001f28 <StartMicroAutoware+0x3a8>)
 8001cb0:	f013 fb72 	bl	8015398 <rclc_subscription_init>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_control_msgs, msg, Control),
    		"/control/command/control_cmd", qos_autoware);

  rclc_subscription_init(
 8001cb4:	f010 f930 	bl	8011f18 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001cbe:	f507 7047 	add.w	r0, r7, #796	@ 0x31c
 8001cc2:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4b98      	ldr	r3, [pc, #608]	@ (8001f2c <StartMicroAutoware+0x3ac>)
 8001cca:	f013 fb65 	bl	8015398 <rclc_subscription_init>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd", qos_autoware);

  rclc_subscription_init(
 8001cce:	f010 f99b 	bl	8012008 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001cd8:	f507 7046 	add.w	r0, r7, #792	@ 0x318
 8001cdc:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	4b93      	ldr	r3, [pc, #588]	@ (8001f30 <StartMicroAutoware+0x3b0>)
 8001ce4:	f013 fb58 	bl	8015398 <rclc_subscription_init>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd", qos_autoware);

  rclc_subscription_init(
 8001ce8:	f010 f946 	bl	8011f78 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001cf2:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 8001cf6:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4b8d      	ldr	r3, [pc, #564]	@ (8001f34 <StartMicroAutoware+0x3b4>)
 8001cfe:	f013 fb4b 	bl	8015398 <rclc_subscription_init>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd", qos_autoware);

  rclc_subscription_init(
 8001d02:	f014 fc45 	bl	8016590 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d0c:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001d10:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <StartMicroAutoware+0x3b8>)
 8001d18:	f013 fb3e 	bl	8015398 <rclc_subscription_init>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd", qos_autoware);

  rclc_subscription_init(
 8001d1c:	f014 fc80 	bl	8016620 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d26:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 8001d2a:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4b82      	ldr	r3, [pc, #520]	@ (8001f3c <StartMicroAutoware+0x3bc>)
 8001d32:	f013 fb31 	bl	8015398 <rclc_subscription_init>
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd", qos_autoware);

  // create publishers
  // TODO set QoS
  rclc_publisher_init(
 8001d36:	f010 f8d7 	bl	8011ee8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d40:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 8001d44:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f40 <StartMicroAutoware+0x3c0>)
 8001d4c:	f013 faa4 	bl	8015298 <rclc_publisher_init>
        &control_mode_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, ControlModeReport),
        "/vehicle/status/control_mode", qos_autoware);

  rclc_publisher_init(
 8001d50:	f010 f98a 	bl	8012068 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d5a:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 8001d5e:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	4b77      	ldr	r3, [pc, #476]	@ (8001f44 <StartMicroAutoware+0x3c4>)
 8001d66:	f013 fa97 	bl	8015298 <rclc_publisher_init>
		    &vehicle_twist_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, VelocityReport),
        "/vehicle/status/velocity_status", qos_autoware);

  rclc_publisher_init(
 8001d6a:	f010 f935 	bl	8011fd8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d74:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8001d78:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	4b72      	ldr	r3, [pc, #456]	@ (8001f48 <StartMicroAutoware+0x3c8>)
 8001d80:	f013 fa8a 	bl	8015298 <rclc_publisher_init>
        &steering_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, SteeringReport),
        "/vehicle/status/steering_status", qos_autoware);

  rclc_publisher_init(
 8001d84:	f010 f8e0 	bl	8011f48 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001d8e:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 8001d92:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4b6c      	ldr	r3, [pc, #432]	@ (8001f4c <StartMicroAutoware+0x3cc>)
 8001d9a:	f013 fa7d 	bl	8015298 <rclc_publisher_init>
        &gear_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearReport),
        "/vehicle/status/gear_status", qos_autoware);

  rclc_publisher_init(
 8001d9e:	f010 f94b 	bl	8012038 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001da8:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8001dac:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	4b67      	ldr	r3, [pc, #412]	@ (8001f50 <StartMicroAutoware+0x3d0>)
 8001db4:	f013 fa70 	bl	8015298 <rclc_publisher_init>
        &turn_indicators_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsReport),
        "/vehicle/status/turn_indicators_status", qos_autoware);

  rclc_publisher_init(
 8001db8:	f010 f8f6 	bl	8011fa8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001dc2:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 8001dc6:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4b61      	ldr	r3, [pc, #388]	@ (8001f54 <StartMicroAutoware+0x3d4>)
 8001dce:	f013 fa63 	bl	8015298 <rclc_publisher_init>
        &hazard_lights_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsReport),
        "/vehicle/status/hazard_lights_status", qos_autoware);

  rclc_publisher_init(
 8001dd2:	f014 fbf5 	bl	80165c0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001ddc:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8001de0:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f58 <StartMicroAutoware+0x3d8>)
 8001de8:	f013 fa56 	bl	8015298 <rclc_publisher_init>
        &actuation_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
        "/vehicle/status/actuation_status", qos_autoware);

  rclc_publisher_init(
 8001dec:	f014 fc00 	bl	80165f0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001df6:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8001dfa:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4b56      	ldr	r3, [pc, #344]	@ (8001f5c <StartMicroAutoware+0x3dc>)
 8001e02:	f013 fa49 	bl	8015298 <rclc_publisher_init>
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
        "/vehicle/status/steering_wheel_status", qos_autoware);

  // creating servers
  rclc_service_init(
 8001e06:	f010 f84f 	bl	8011ea8 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001e10:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001e14:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4b51      	ldr	r3, [pc, #324]	@ (8001f60 <StartMicroAutoware+0x3e0>)
 8001e1c:	f013 fa7c 	bl	8015318 <rclc_service_init>
        ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_vehicle_msgs, srv, ControlModeCommand),
        "/control/control_mode_request", qos_autoware);


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &clock_sub_, &clock_msg_, &clock_callback, ON_NEW_DATA);
 8001e20:	f507 7237 	add.w	r2, r7, #732	@ 0x2dc
 8001e24:	f507 7149 	add.w	r1, r7, #804	@ 0x324
 8001e28:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	4b4c      	ldr	r3, [pc, #304]	@ (8001f64 <StartMicroAutoware+0x3e4>)
 8001e32:	f012 fefd 	bl	8014c30 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 8001e36:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8001e3a:	f507 7148 	add.w	r1, r7, #800	@ 0x320
 8001e3e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e42:	2300      	movs	r3, #0
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	4b48      	ldr	r3, [pc, #288]	@ (8001f68 <StartMicroAutoware+0x3e8>)
 8001e48:	f012 fef2 	bl	8014c30 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &gear_cmd_sub_, &gear_cmd_msg_, &gear_cmd_callback, ON_NEW_DATA);
 8001e4c:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 8001e50:	f507 7147 	add.w	r1, r7, #796	@ 0x31c
 8001e54:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	4b43      	ldr	r3, [pc, #268]	@ (8001f6c <StartMicroAutoware+0x3ec>)
 8001e5e:	f012 fee7 	bl	8014c30 <rclc_executor_add_subscription>
  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 8001e62:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001e66:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001e6a:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 8001e6e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e72:	4c3f      	ldr	r4, [pc, #252]	@ (8001f70 <StartMicroAutoware+0x3f0>)
 8001e74:	9400      	str	r4, [sp, #0]
 8001e76:	f012 ff19 	bl	8014cac <rclc_executor_add_service>

  rclc_executor_add_subscription(&executor, &turn_indicators_cmd_sub_, &turn_indicators_cmd_msg_, &turn_indicators_cmd_callback, ON_NEW_DATA);
 8001e7a:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 8001e7e:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8001e82:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e86:	2300      	movs	r3, #0
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f74 <StartMicroAutoware+0x3f4>)
 8001e8c:	f012 fed0 	bl	8014c30 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &hazard_lights_cmd_sub_, &hazard_lights_cmd_msg_, &hazard_lights_cmd_callback, ON_NEW_DATA);
 8001e90:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 8001e94:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 8001e98:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <StartMicroAutoware+0x3f8>)
 8001ea2:	f012 fec5 	bl	8014c30 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
 8001ea6:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001eaa:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8001eae:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <StartMicroAutoware+0x3fc>)
 8001eb8:	f012 feba 	bl	8014c30 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);
 8001ebc:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8001ec0:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 8001ec4:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f80 <StartMicroAutoware+0x400>)
 8001ece:	f012 feaf 	bl	8014c30 <rclc_executor_add_subscription>


  // pinging micro-ros agent
  rmw_ret_t xPingResult = rmw_uros_ping_agent(1000, 20);
 8001ed2:	2114      	movs	r1, #20
 8001ed4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed8:	f013 fb98 	bl	801560c <rmw_uros_ping_agent>
 8001edc:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c

  // Setting flag on TaskControle to enable autonomus mode
  osThreadFlagsSet(TaskControleHandle, MICRO_ROS_AGENT_ONLINE_FLAG);
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <StartMicroAutoware+0x404>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f00c f8c1 	bl	800e070 <osThreadFlagsSet>
 8001eee:	e04b      	b.n	8001f88 <StartMicroAutoware+0x408>
 8001ef0:	08023528 	.word	0x08023528
 8001ef4:	08000f8d 	.word	0x08000f8d
 8001ef8:	08000f29 	.word	0x08000f29
 8001efc:	08000f09 	.word	0x08000f09
 8001f00:	08000edd 	.word	0x08000edd
 8001f04:	24032c3c 	.word	0x24032c3c
 8001f08:	08002169 	.word	0x08002169
 8001f0c:	080021ad 	.word	0x080021ad
 8001f10:	080021e5 	.word	0x080021e5
 8001f14:	08002251 	.word	0x08002251
 8001f18:	08023258 	.word	0x08023258
 8001f1c:	08023268 	.word	0x08023268
 8001f20:	08001169 	.word	0x08001169
 8001f24:	0802327c 	.word	0x0802327c
 8001f28:	08023284 	.word	0x08023284
 8001f2c:	080232a4 	.word	0x080232a4
 8001f30:	080232c0 	.word	0x080232c0
 8001f34:	080232e8 	.word	0x080232e8
 8001f38:	0802330c 	.word	0x0802330c
 8001f3c:	0802332c 	.word	0x0802332c
 8001f40:	0802334c 	.word	0x0802334c
 8001f44:	0802336c 	.word	0x0802336c
 8001f48:	0802338c 	.word	0x0802338c
 8001f4c:	080233ac 	.word	0x080233ac
 8001f50:	080233c8 	.word	0x080233c8
 8001f54:	080233f0 	.word	0x080233f0
 8001f58:	08023418 	.word	0x08023418
 8001f5c:	0802343c 	.word	0x0802343c
 8001f60:	08023464 	.word	0x08023464
 8001f64:	080011ad 	.word	0x080011ad
 8001f68:	080011d9 	.word	0x080011d9
 8001f6c:	08001205 	.word	0x08001205
 8001f70:	080012e1 	.word	0x080012e1
 8001f74:	08001231 	.word	0x08001231
 8001f78:	0800125d 	.word	0x0800125d
 8001f7c:	08001289 	.word	0x08001289
 8001f80:	080012b5 	.word	0x080012b5
 8001f84:	24032ad0 	.word	0x24032ad0
  // Task loop
  for (;;)
  {

    // Sync time with ROS
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 8001f88:	2064      	movs	r0, #100	@ 0x64
 8001f8a:	f013 fd59 	bl	8015a40 <rmw_uros_sync_session>

    rclc_executor_spin_some(&executor, 20 * (1000 * 1000)); // Spinning executor for 20 ms.
 8001f8e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001f92:	a373      	add	r3, pc, #460	@ (adr r3, 8002160 <StartMicroAutoware+0x5e0>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	4608      	mov	r0, r1
 8001f9a:	f013 f8b7 	bl	801510c <rclc_executor_spin_some>

    // Checking if control mode has changed.
    uiFlags = osThreadFlagsGet();
 8001f9e:	f00c f8b5 	bl	800e10c <osThreadFlagsGet>
 8001fa2:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2011      	movs	r0, #17
 8001fac:	f00c f8cf 	bl	800e14e <osThreadFlagsWait>
 8001fb0:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328

    if(TO_AUTOWARE_MODE_FLAG == uiFlags)
 8001fb4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d103      	bne.n	8001fc4 <StartMicroAutoware+0x444>
    {
      ucControlMode = AUTOWARE;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 8001fc2:	e00e      	b.n	8001fe2 <StartMicroAutoware+0x462>
    }
    else if(TO_MANUAL_MODE_FLAG == uiFlags)
 8001fc4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d103      	bne.n	8001fd4 <StartMicroAutoware+0x454>
    {
      ucControlMode = MANUAL;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 8001fd2:	e006      	b.n	8001fe2 <StartMicroAutoware+0x462>
    }
    else if((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG) == uiFlags)
 8001fd4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001fd8:	2b11      	cmp	r3, #17
 8001fda:	d102      	bne.n	8001fe2 <StartMicroAutoware+0x462>
    {
      ucControlMode = MANUAL;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
    }

    control_mode_msg_.stamp = clock_msg_.clock;
 8001fe2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001fe6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fea:	461a      	mov	r2, r3
 8001fec:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8001ff0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ff4:	e882 0003 	stmia.w	r2, {r0, r1}
    control_mode_msg_.mode = ucControlMode;
 8001ff8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001ffc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002000:	f897 2337 	ldrb.w	r2, [r7, #823]	@ 0x337
 8002004:	721a      	strb	r2, [r3, #8]
    rcl_publish(&control_mode_pub_, &control_mode_msg_, NULL);
 8002006:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800200a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800200e:	2200      	movs	r2, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f012 f9f9 	bl	8014408 <rcl_publish>

    // All topics are recieved (maybe not all...)
    if(0b10 & ucSubscribersRecieved) // Checking if control_cmd_sub_ data arrives
 8002016:	4b4c      	ldr	r3, [pc, #304]	@ (8002148 <StartMicroAutoware+0x5c8>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0b1      	beq.n	8001f88 <StartMicroAutoware+0x408>
    {
      // Autonomous mode: Gather all subs data, then compact and send to TaskControle.
      if(AUTOWARE == ucControlMode)
 8002024:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 8002028:	2b01      	cmp	r3, #1
 800202a:	d126      	bne.n	800207a <StartMicroAutoware+0x4fa>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 800202c:	4b47      	ldr	r3, [pc, #284]	@ (800214c <StartMicroAutoware+0x5cc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002034:	4618      	mov	r0, r3
 8002036:	f00c f9ac 	bl	800e392 <osMutexAcquire>
        xControlAction.xSteeringAngle.fFloat = control_cmd_msg_.lateral.steering_tire_angle;
 800203a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800203e:	4a44      	ldr	r2, [pc, #272]	@ (8002150 <StartMicroAutoware+0x5d0>)
 8002040:	6013      	str	r3, [r2, #0]
        xControlAction.xSteeringVelocity.fFloat = control_cmd_msg_.lateral.steering_tire_rotation_rate;
 8002042:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002046:	4a42      	ldr	r2, [pc, #264]	@ (8002150 <StartMicroAutoware+0x5d0>)
 8002048:	6053      	str	r3, [r2, #4]
        xControlAction.xSpeed.fFloat = control_cmd_msg_.longitudinal.velocity;
 800204a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800204e:	4a40      	ldr	r2, [pc, #256]	@ (8002150 <StartMicroAutoware+0x5d0>)
 8002050:	6093      	str	r3, [r2, #8]
        xControlAction.xAcceleration.fFloat = control_cmd_msg_.longitudinal.acceleration;
 8002052:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8002056:	4a3e      	ldr	r2, [pc, #248]	@ (8002150 <StartMicroAutoware+0x5d0>)
 8002058:	60d3      	str	r3, [r2, #12]
        xControlAction.xJerk.fFloat = control_cmd_msg_.longitudinal.jerk;
 800205a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800205e:	4a3c      	ldr	r2, [pc, #240]	@ (8002150 <StartMicroAutoware+0x5d0>)
 8002060:	6113      	str	r3, [r2, #16]
        osMutexRelease(MutexControlSignalHandle);
 8002062:	4b3c      	ldr	r3, [pc, #240]	@ (8002154 <StartMicroAutoware+0x5d4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f00c f9de 	bl	800e428 <osMutexRelease>

        osThreadFlagsSet(TaskControleHandle, DATA_UPDATED_FLAG);
 800206c:	4b3a      	ldr	r3, [pc, #232]	@ (8002158 <StartMicroAutoware+0x5d8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002074:	4618      	mov	r0, r3
 8002076:	f00b fffb 	bl	800e070 <osThreadFlagsSet>
      }

      // WAIT for flag to sync xControlSignal update
      uiFlags = osThreadFlagsGet();
 800207a:	f00c f847 	bl	800e10c <osThreadFlagsGet>
 800207e:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
      uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_SIGNAL);
 8002082:	221e      	movs	r2, #30
 8002084:	2101      	movs	r1, #1
 8002086:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800208a:	f00c f860 	bl	800e14e <osThreadFlagsWait>
 800208e:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
      {

      }

      // xControlSignal updated
      if(0x100 == uiFlags)
 8002092:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8002096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800209a:	f47f af75 	bne.w	8001f88 <StartMicroAutoware+0x408>
      {
        // Assembling microAutoware msgs
        osMutexAcquire(MutexControlSignalHandle, osWaitForever);  
 800209e:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <StartMicroAutoware+0x5d4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020a6:	4618      	mov	r0, r3
 80020a8:	f00c f973 	bl	800e392 <osMutexAcquire>

        // vehicle_twist_msg_ data
        vehicle_twist_msg_.header.stamp = clock_msg_.clock;
 80020ac:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020b0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020b4:	461a      	mov	r2, r3
 80020b6:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 80020ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020be:	e882 0003 	stmia.w	r2, {r0, r1}
        vehicle_twist_msg_.heading_rate = xControlSignal.fHeadingRate;
 80020c2:	4b26      	ldr	r3, [pc, #152]	@ (800215c <StartMicroAutoware+0x5dc>)
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020ca:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020ce:	61da      	str	r2, [r3, #28]
        vehicle_twist_msg_.lateral_velocity = xControlSignal.fLatSpeed;
 80020d0:	4b22      	ldr	r3, [pc, #136]	@ (800215c <StartMicroAutoware+0x5dc>)
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020dc:	619a      	str	r2, [r3, #24]
        vehicle_twist_msg_.longitudinal_velocity = xControlSignal.fLongSpeed;
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <StartMicroAutoware+0x5dc>)
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020e6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020ea:	615a      	str	r2, [r3, #20]

        // steering_status_msg_ data
        steering_status_msg_.stamp = clock_msg_.clock;
 80020ec:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80020f0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020f4:	461a      	mov	r2, r3
 80020f6:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 80020fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020fe:	e882 0003 	stmia.w	r2, {r0, r1}
        steering_status_msg_.steering_tire_angle = xControlSignal.fSteeringStatus;
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <StartMicroAutoware+0x5dc>)
 8002104:	6a1a      	ldr	r2, [r3, #32]
 8002106:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800210a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800210e:	609a      	str	r2, [r3, #8]

        osMutexRelease(MutexControlSignalHandle);
 8002110:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <StartMicroAutoware+0x5d4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f00c f987 	bl	800e428 <osMutexRelease>

        // Publishing in Autoware topics
        rcl_publish(&vehicle_twist_pub_, &vehicle_twist_msg_, NULL);
 800211a:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 800211e:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 8002122:	2200      	movs	r2, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f012 f96f 	bl	8014408 <rcl_publish>
        rcl_publish(&steering_status_pub_, &steering_status_msg_, NULL);
 800212a:	f507 71f2 	add.w	r1, r7, #484	@ 0x1e4
 800212e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8002132:	2200      	movs	r2, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f012 f967 	bl	8014408 <rcl_publish>
        // Reseting subscribers flags
        ucSubscribersRecieved = 0;
 800213a:	4b03      	ldr	r3, [pc, #12]	@ (8002148 <StartMicroAutoware+0x5c8>)
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 8002140:	e722      	b.n	8001f88 <StartMicroAutoware+0x408>
 8002142:	bf00      	nop
 8002144:	f3af 8000 	nop.w
 8002148:	24032b4b 	.word	0x24032b4b
 800214c:	24032adc 	.word	0x24032adc
 8002150:	24032af0 	.word	0x24032af0
 8002154:	24032ad8 	.word	0x24032ad8
 8002158:	24032ad0 	.word	0x24032ad0
 800215c:	24032b04 	.word	0x24032b04
 8002160:	01312d00 	.word	0x01312d00
 8002164:	00000000 	.word	0x00000000

08002168 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <microros_allocate+0x3c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	461a      	mov	r2, r3
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <microros_allocate+0x3c>)
 8002180:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <microros_allocate+0x40>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <microros_allocate+0x40>)
 8002190:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fc08 	bl	80009a8 <pvPortMallocMicroROS>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	24032b4c 	.word	0x24032b4c
 80021a8:	24032b50 	.word	0x24032b50

080021ac <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00c      	beq.n	80021d6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7fe fd17 	bl	8000bf0 <getBlockSize>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4a06      	ldr	r2, [pc, #24]	@ (80021e0 <microros_deallocate+0x34>)
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <microros_deallocate+0x34>)
 80021ce:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7fe fcb1 	bl	8000b38 <vPortFreeMicroROS>
  }
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	24032b50 	.word	0x24032b50

080021e4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80021f0:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <microros_reallocate+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4413      	add	r3, r2
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <microros_reallocate+0x64>)
 80021fe:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <microros_reallocate+0x68>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4413      	add	r3, r2
 800220a:	461a      	mov	r2, r3
 800220c:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <microros_reallocate+0x68>)
 800220e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d104      	bne.n	8002220 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002216:	68b8      	ldr	r0, [r7, #8]
 8002218:	f7fe fbc6 	bl	80009a8 <pvPortMallocMicroROS>
 800221c:	4603      	mov	r3, r0
 800221e:	e00e      	b.n	800223e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7fe fce5 	bl	8000bf0 <getBlockSize>
 8002226:	4603      	mov	r3, r0
 8002228:	4a08      	ldr	r2, [pc, #32]	@ (800224c <microros_reallocate+0x68>)
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	461a      	mov	r2, r3
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <microros_reallocate+0x68>)
 8002232:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7fe fcf8 	bl	8000c2c <pvPortReallocMicroROS>
 800223c:	4603      	mov	r3, r0
  }
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	24032b4c 	.word	0x24032b4c
 800224c:	24032b50 	.word	0x24032b50

08002250 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	4a0c      	ldr	r2, [pc, #48]	@ (8002298 <microros_zero_allocate+0x48>)
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	4413      	add	r3, r2
 800226a:	461a      	mov	r2, r3
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <microros_zero_allocate+0x48>)
 800226e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	4a08      	ldr	r2, [pc, #32]	@ (800229c <microros_zero_allocate+0x4c>)
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	4413      	add	r3, r2
 800227e:	461a      	mov	r2, r3
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <microros_zero_allocate+0x4c>)
 8002282:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7fe fcfd 	bl	8000c86 <pvPortCallocMicroROS>
 800228c:	4603      	mov	r3, r0
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	24032b4c 	.word	0x24032b4c
 800229c:	24032b50 	.word	0x24032b50

080022a0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80022a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80022b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022b6:	a320      	add	r3, pc, #128	@ (adr r3, 8002338 <UTILS_NanosecondsToTimespec+0x98>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fe f878 	bl	80003b0 <__aeabi_ldivmod>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80022ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8002338 <UTILS_NanosecondsToTimespec+0x98>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f7fe f86c 	bl	80003b0 <__aeabi_ldivmod>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	da20      	bge.n	8002326 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a11      	ldr	r2, [pc, #68]	@ (8002330 <UTILS_NanosecondsToTimespec+0x90>)
 80022ea:	fb82 1203 	smull	r1, r2, r2, r3
 80022ee:	1712      	asrs	r2, r2, #28
 80022f0:	17db      	asrs	r3, r3, #31
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	6979      	ldr	r1, [r7, #20]
 8002300:	17c8      	asrs	r0, r1, #31
 8002302:	460c      	mov	r4, r1
 8002304:	4605      	mov	r5, r0
 8002306:	ebb2 0804 	subs.w	r8, r2, r4
 800230a:	eb63 0905 	sbc.w	r9, r3, r5
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4906      	ldr	r1, [pc, #24]	@ (8002334 <UTILS_NanosecondsToTimespec+0x94>)
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	609a      	str	r2, [r3, #8]
    }
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002330:	44b82fa1 	.word	0x44b82fa1
 8002334:	3b9aca00 	.word	0x3b9aca00
 8002338:	3b9aca00 	.word	0x3b9aca00
 800233c:	00000000 	.word	0x00000000

08002340 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002344:	b08e      	sub	sp, #56	@ 0x38
 8002346:	af00      	add	r7, sp, #0
 8002348:	6278      	str	r0, [r7, #36]	@ 0x24
 800234a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800234c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002350:	2300      	movs	r3, #0
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002362:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002366:	4618      	mov	r0, r3
 8002368:	f00d fda2 	bl	800feb0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	17da      	asrs	r2, r3, #31
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	61fa      	str	r2, [r7, #28]
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	69b9      	ldr	r1, [r7, #24]
 800237e:	000b      	movs	r3, r1
 8002380:	2200      	movs	r2, #0
 8002382:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002388:	2200      	movs	r2, #0
 800238a:	461c      	mov	r4, r3
 800238c:	4615      	mov	r5, r2
 800238e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002392:	1911      	adds	r1, r2, r4
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	416b      	adcs	r3, r5
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800239e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80023a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	f04f 0400 	mov.w	r4, #0
 80023ae:	f04f 0500 	mov.w	r5, #0
 80023b2:	015d      	lsls	r5, r3, #5
 80023b4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80023b8:	0154      	lsls	r4, r2, #5
 80023ba:	4622      	mov	r2, r4
 80023bc:	462b      	mov	r3, r5
 80023be:	ebb2 0800 	subs.w	r8, r2, r0
 80023c2:	eb63 0901 	sbc.w	r9, r3, r1
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80023d2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80023d6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80023da:	4690      	mov	r8, r2
 80023dc:	4699      	mov	r9, r3
 80023de:	eb18 0a00 	adds.w	sl, r8, r0
 80023e2:	eb49 0b01 	adc.w	fp, r9, r1
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023f2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023f6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023fa:	ebb2 040a 	subs.w	r4, r2, sl
 80023fe:	603c      	str	r4, [r7, #0]
 8002400:	eb63 030b 	sbc.w	r3, r3, fp
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800240a:	4623      	mov	r3, r4
 800240c:	181b      	adds	r3, r3, r0
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	462b      	mov	r3, r5
 8002412:	eb41 0303 	adc.w	r3, r1, r3
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800241e:	f7ff ff3f 	bl	80022a0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002422:	2300      	movs	r3, #0
 8002424:	4618      	mov	r0, r3
 8002426:	3738      	adds	r7, #56	@ 0x38
 8002428:	46bd      	mov	sp, r7
 800242a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <HAL_MspInit+0x38>)
 8002438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800243c:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <HAL_MspInit+0x38>)
 800243e:	f043 0302 	orr.w	r3, r3, #2
 8002442:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002446:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <HAL_MspInit+0x38>)
 8002448:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	210f      	movs	r1, #15
 8002458:	f06f 0001 	mvn.w	r0, #1
 800245c:	f002 fb92 	bl	8004b84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	58024400 	.word	0x58024400

0800246c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b090      	sub	sp, #64	@ 0x40
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	d827      	bhi.n	80024ca <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800247a:	2200      	movs	r2, #0
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	2036      	movs	r0, #54	@ 0x36
 8002480:	f002 fb80 	bl	8004b84 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002484:	2036      	movs	r0, #54	@ 0x36
 8002486:	f002 fb97 	bl	8004bb8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800248a:	4a29      	ldr	r2, [pc, #164]	@ (8002530 <HAL_InitTick+0xc4>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002490:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <HAL_InitTick+0xc8>)
 8002492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002496:	4a27      	ldr	r2, [pc, #156]	@ (8002534 <HAL_InitTick+0xc8>)
 8002498:	f043 0310 	orr.w	r3, r3, #16
 800249c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024a0:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <HAL_InitTick+0xc8>)
 80024a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024ae:	f107 0210 	add.w	r2, r7, #16
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f006 fbd7 	bl	8008c6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <HAL_InitTick+0x6a>
 80024c8:	e001      	b.n	80024ce <HAL_InitTick+0x62>
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e02b      	b.n	8002526 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024ce:	f006 fba1 	bl	8008c14 <HAL_RCC_GetPCLK1Freq>
 80024d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80024d4:	e004      	b.n	80024e0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024d6:	f006 fb9d 	bl	8008c14 <HAL_RCC_GetPCLK1Freq>
 80024da:	4603      	mov	r3, r0
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024e2:	4a15      	ldr	r2, [pc, #84]	@ (8002538 <HAL_InitTick+0xcc>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	0c9b      	lsrs	r3, r3, #18
 80024ea:	3b01      	subs	r3, #1
 80024ec:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <HAL_InitTick+0xd0>)
 80024f0:	4a13      	ldr	r2, [pc, #76]	@ (8002540 <HAL_InitTick+0xd4>)
 80024f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024f4:	4b11      	ldr	r3, [pc, #68]	@ (800253c <HAL_InitTick+0xd0>)
 80024f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024fc:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <HAL_InitTick+0xd0>)
 80024fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002500:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <HAL_InitTick+0xd0>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <HAL_InitTick+0xd0>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800250e:	480b      	ldr	r0, [pc, #44]	@ (800253c <HAL_InitTick+0xd0>)
 8002510:	f009 f8ec 	bl	800b6ec <HAL_TIM_Base_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d104      	bne.n	8002524 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800251a:	4808      	ldr	r0, [pc, #32]	@ (800253c <HAL_InitTick+0xd0>)
 800251c:	f009 f948 	bl	800b7b0 <HAL_TIM_Base_Start_IT>
 8002520:	4603      	mov	r3, r0
 8002522:	e000      	b.n	8002526 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	3740      	adds	r7, #64	@ 0x40
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2400000c 	.word	0x2400000c
 8002534:	58024400 	.word	0x58024400
 8002538:	431bde83 	.word	0x431bde83
 800253c:	24032b54 	.word	0x24032b54
 8002540:	40001000 	.word	0x40001000

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <NMI_Handler+0x4>

0800254c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <HardFault_Handler+0x4>

08002554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <MemManage_Handler+0x4>

0800255c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <BusFault_Handler+0x4>

08002564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <UsageFault_Handler+0x4>

0800256c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002580:	4802      	ldr	r0, [pc, #8]	@ (800258c <DMA1_Stream0_IRQHandler+0x10>)
 8002582:	f003 fe51 	bl	8006228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	24032dc0 	.word	0x24032dc0

08002590 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002594:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <DMA1_Stream1_IRQHandler+0x10>)
 8002596:	f003 fe47 	bl	8006228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	24032e38 	.word	0x24032e38

080025a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025a8:	4802      	ldr	r0, [pc, #8]	@ (80025b4 <USART2_IRQHandler+0x10>)
 80025aa:	f009 fd1f 	bl	800bfec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	24032ba8 	.word	0x24032ba8

080025b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <USART3_IRQHandler+0x10>)
 80025be:	f009 fd15 	bl	800bfec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	24032c3c 	.word	0x24032c3c

080025cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 80025d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025d4:	f005 fb0f 	bl	8007bf6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025e0:	4802      	ldr	r0, [pc, #8]	@ (80025ec <TIM6_DAC_IRQHandler+0x10>)
 80025e2:	f009 f95d 	bl	800b8a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	24032b54 	.word	0x24032b54

080025f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80025f4:	4802      	ldr	r0, [pc, #8]	@ (8002600 <DMA2_Stream1_IRQHandler+0x10>)
 80025f6:	f003 fe17 	bl	8006228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	24032cd0 	.word	0x24032cd0

08002604 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002608:	4802      	ldr	r0, [pc, #8]	@ (8002614 <DMA2_Stream2_IRQHandler+0x10>)
 800260a:	f003 fe0d 	bl	8006228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	24032d48 	.word	0x24032d48

08002618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return 1;
 800261c:	2301      	movs	r3, #1
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_kill>:

int _kill(int pid, int sig)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002632:	f01f ff6b 	bl	802250c <__errno>
 8002636:	4603      	mov	r3, r0
 8002638:	2216      	movs	r2, #22
 800263a:	601a      	str	r2, [r3, #0]
  return -1;
 800263c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <_exit>:

void _exit (int status)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002650:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ffe7 	bl	8002628 <_kill>
  while (1) {}    /* Make sure we hang here */
 800265a:	bf00      	nop
 800265c:	e7fd      	b.n	800265a <_exit+0x12>

0800265e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	e00a      	b.n	8002686 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002670:	f3af 8000 	nop.w
 8002674:	4601      	mov	r1, r0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	60ba      	str	r2, [r7, #8]
 800267c:	b2ca      	uxtb	r2, r1
 800267e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3301      	adds	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	dbf0      	blt.n	8002670 <_read+0x12>
  }

  return len;
 800268e:	687b      	ldr	r3, [r7, #4]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	e009      	b.n	80026be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	60ba      	str	r2, [r7, #8]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3301      	adds	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	dbf1      	blt.n	80026aa <_write+0x12>
  }
  return len;
 80026c6:	687b      	ldr	r3, [r7, #4]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_close>:

int _close(int file)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026f8:	605a      	str	r2, [r3, #4]
  return 0;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_isatty>:

int _isatty(int file)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002710:	2301      	movs	r3, #1
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002740:	4a14      	ldr	r2, [pc, #80]	@ (8002794 <_sbrk+0x5c>)
 8002742:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <_sbrk+0x60>)
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800274c:	4b13      	ldr	r3, [pc, #76]	@ (800279c <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <_sbrk+0x64>)
 8002756:	4a12      	ldr	r2, [pc, #72]	@ (80027a0 <_sbrk+0x68>)
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d207      	bcs.n	8002778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002768:	f01f fed0 	bl	802250c <__errno>
 800276c:	4603      	mov	r3, r0
 800276e:	220c      	movs	r2, #12
 8002770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002776:	e009      	b.n	800278c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002778:	4b08      	ldr	r3, [pc, #32]	@ (800279c <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	4a05      	ldr	r2, [pc, #20]	@ (800279c <_sbrk+0x64>)
 8002788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	24080000 	.word	0x24080000
 8002798:	00000400 	.word	0x00000400
 800279c:	24032ba4 	.word	0x24032ba4
 80027a0:	24069850 	.word	0x24069850

080027a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027a8:	4b37      	ldr	r3, [pc, #220]	@ (8002888 <SystemInit+0xe4>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ae:	4a36      	ldr	r2, [pc, #216]	@ (8002888 <SystemInit+0xe4>)
 80027b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027b8:	4b34      	ldr	r3, [pc, #208]	@ (800288c <SystemInit+0xe8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d807      	bhi.n	80027d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027c4:	4b31      	ldr	r3, [pc, #196]	@ (800288c <SystemInit+0xe8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 030f 	bic.w	r3, r3, #15
 80027cc:	4a2f      	ldr	r2, [pc, #188]	@ (800288c <SystemInit+0xe8>)
 80027ce:	f043 0307 	orr.w	r3, r3, #7
 80027d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002890 <SystemInit+0xec>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002890 <SystemInit+0xec>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002890 <SystemInit+0xec>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002890 <SystemInit+0xec>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4929      	ldr	r1, [pc, #164]	@ (8002890 <SystemInit+0xec>)
 80027ec:	4b29      	ldr	r3, [pc, #164]	@ (8002894 <SystemInit+0xf0>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027f2:	4b26      	ldr	r3, [pc, #152]	@ (800288c <SystemInit+0xe8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027fe:	4b23      	ldr	r3, [pc, #140]	@ (800288c <SystemInit+0xe8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 030f 	bic.w	r3, r3, #15
 8002806:	4a21      	ldr	r2, [pc, #132]	@ (800288c <SystemInit+0xe8>)
 8002808:	f043 0307 	orr.w	r3, r3, #7
 800280c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800280e:	4b20      	ldr	r3, [pc, #128]	@ (8002890 <SystemInit+0xec>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002814:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <SystemInit+0xec>)
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800281a:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <SystemInit+0xec>)
 800281c:	2200      	movs	r2, #0
 800281e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002820:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <SystemInit+0xec>)
 8002822:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <SystemInit+0xf4>)
 8002824:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002826:	4b1a      	ldr	r3, [pc, #104]	@ (8002890 <SystemInit+0xec>)
 8002828:	4a1c      	ldr	r2, [pc, #112]	@ (800289c <SystemInit+0xf8>)
 800282a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800282c:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <SystemInit+0xec>)
 800282e:	4a1c      	ldr	r2, [pc, #112]	@ (80028a0 <SystemInit+0xfc>)
 8002830:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002832:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <SystemInit+0xec>)
 8002834:	2200      	movs	r2, #0
 8002836:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002838:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <SystemInit+0xec>)
 800283a:	4a19      	ldr	r2, [pc, #100]	@ (80028a0 <SystemInit+0xfc>)
 800283c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800283e:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <SystemInit+0xec>)
 8002840:	2200      	movs	r2, #0
 8002842:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002844:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <SystemInit+0xec>)
 8002846:	4a16      	ldr	r2, [pc, #88]	@ (80028a0 <SystemInit+0xfc>)
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <SystemInit+0xec>)
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002850:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <SystemInit+0xec>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0e      	ldr	r2, [pc, #56]	@ (8002890 <SystemInit+0xec>)
 8002856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800285a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <SystemInit+0xec>)
 800285e:	2200      	movs	r2, #0
 8002860:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <SystemInit+0x100>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <SystemInit+0x104>)
 8002868:	4013      	ands	r3, r2
 800286a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800286e:	d202      	bcs.n	8002876 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002870:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <SystemInit+0x108>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002876:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <SystemInit+0x10c>)
 8002878:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800287c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00
 800288c:	52002000 	.word	0x52002000
 8002890:	58024400 	.word	0x58024400
 8002894:	eaf6ed7f 	.word	0xeaf6ed7f
 8002898:	02020200 	.word	0x02020200
 800289c:	01ff0000 	.word	0x01ff0000
 80028a0:	01010280 	.word	0x01010280
 80028a4:	5c001000 	.word	0x5c001000
 80028a8:	ffff0000 	.word	0xffff0000
 80028ac:	51008108 	.word	0x51008108
 80028b0:	52004000 	.word	0x52004000

080028b4 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void * argument)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b096      	sub	sp, #88	@ 0x58
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 80028bc:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 80028c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned int uiXMin = 1057;
 80028c2:	f240 4321 	movw	r3, #1057	@ 0x421
 80028c6:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMax = 65535;
 80028c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028cc:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiY0   = 33580;
 80028ce:	f248 332c 	movw	r3, #33580	@ 0x832c
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiYMin = 1062;
 80028d4:	f240 4326 	movw	r3, #1062	@ 0x426
 80028d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMax = 65535;
 80028da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028de:	637b      	str	r3, [r7, #52]	@ 0x34

  // Return flags
  unsigned int uiFlags = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 80028e4:	2213      	movs	r2, #19
 80028e6:	4929      	ldr	r1, [pc, #164]	@ (800298c <StartTaskControle+0xd8>)
 80028e8:	4829      	ldr	r0, [pc, #164]	@ (8002990 <StartTaskControle+0xdc>)
 80028ea:	f009 fa9d 	bl	800be28 <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = MANUAL; // ! MANUAL for testing joy + UART
 80028ee:	2304      	movs	r3, #4
 80028f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  
  uiFlags = osThreadFlagsGet();
 80028f4:	f00b fc0a 	bl	800e10c <osThreadFlagsGet>
 80028f8:	6338      	str	r0, [r7, #48]	@ 0x30
  uiFlags = osThreadFlagsWait(MICRO_ROS_AGENT_ONLINE_FLAG, osFlagsWaitAny, 1000 * 20); // Wait 20 seconds for uROS init
 80028fa:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80028fe:	2100      	movs	r1, #0
 8002900:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002904:	f00b fc23 	bl	800e14e <osThreadFlagsWait>
 8002908:	6338      	str	r0, [r7, #48]	@ 0x30

  if(osFlagsErrorTimeout == uiFlags)
 800290a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290c:	f113 0f02 	cmn.w	r3, #2
 8002910:	d102      	bne.n	8002918 <StartTaskControle+0x64>
  {
   ucControlMode = MANUAL;
 8002912:	2304      	movs	r3, #4
 8002914:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  // Task loop
  for(;;)
  {

    // Looking fot operation mode change by Autoware -- START
	  uiFlags = osThreadFlagsGet();
 8002918:	f00b fbf8 	bl	800e10c <osThreadFlagsGet>
 800291c:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	2011      	movs	r0, #17
 8002924:	f00b fc13 	bl	800e14e <osThreadFlagsWait>
 8002928:	6338      	str	r0, [r7, #48]	@ 0x30

    if(TO_AUTOWARE_MODE_FLAG == uiFlags)
 800292a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292c:	2b01      	cmp	r3, #1
 800292e:	d103      	bne.n	8002938 <StartTaskControle+0x84>
    {
      ucControlMode = AUTOWARE;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002936:	e00c      	b.n	8002952 <StartTaskControle+0x9e>
    }
    else if(TO_MANUAL_MODE_FLAG == uiFlags)
 8002938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293a:	2b10      	cmp	r3, #16
 800293c:	d103      	bne.n	8002946 <StartTaskControle+0x92>
    {
      ucControlMode = MANUAL;
 800293e:	2304      	movs	r3, #4
 8002940:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002944:	e005      	b.n	8002952 <StartTaskControle+0x9e>
    }
    else if((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG) == uiFlags)
 8002946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002948:	2b11      	cmp	r3, #17
 800294a:	d102      	bne.n	8002952 <StartTaskControle+0x9e>
    {
      ucControlMode = MANUAL;
 800294c:	2304      	movs	r3, #4
 800294e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    // Looking for operation mode change by Autoware -- END

    // Looking for operation mode change by JoySW -- START
    uiFlags = osThreadFlagsGet();
 8002952:	f00b fbdb 	bl	800e10c <osThreadFlagsGet>
 8002956:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(JOYSW_FLAG, osFlagsWaitAll, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2101      	movs	r1, #1
 800295c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002960:	f00b fbf5 	bl	800e14e <osThreadFlagsWait>
 8002964:	6338      	str	r0, [r7, #48]	@ 0x30

    if(JOYSW_FLAG == uiFlags)
 8002966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296c:	d121      	bne.n	80029b2 <StartTaskControle+0xfe>
    {
      if(AUTOWARE == ucControlMode)
 800296e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002972:	2b01      	cmp	r3, #1
 8002974:	d110      	bne.n	8002998 <StartTaskControle+0xe4>
      {
        ucControlMode = MANUAL;
 8002976:	2304      	movs	r3, #4
 8002978:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <StartTaskControle+0xe0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2110      	movs	r1, #16
 8002982:	4618      	mov	r0, r3
 8002984:	f00b fb74 	bl	800e070 <osThreadFlagsSet>
 8002988:	e013      	b.n	80029b2 <StartTaskControle+0xfe>
 800298a:	bf00      	nop
 800298c:	24032b38 	.word	0x24032b38
 8002990:	24032ba8 	.word	0x24032ba8
 8002994:	24032ad4 	.word	0x24032ad4
      }
      else if(MANUAL == ucControlMode)
 8002998:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800299c:	2b04      	cmp	r3, #4
 800299e:	d108      	bne.n	80029b2 <StartTaskControle+0xfe>
      {
        ucControlMode = AUTOWARE;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 80029a6:	4b94      	ldr	r3, [pc, #592]	@ (8002bf8 <StartTaskControle+0x344>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2101      	movs	r1, #1
 80029ac:	4618      	mov	r0, r3
 80029ae:	f00b fb5f 	bl	800e070 <osThreadFlagsSet>
      }
    }
    // Looking for operation mode change by JoySW -- END

    // Autonomous mode (AUTOWARE) routine -- START
    if(AUTOWARE == ucControlMode)
 80029b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d175      	bne.n	8002aa6 <StartTaskControle+0x1f2>
    {
      // Setting driving mode lights
	    vDrivingModeLights(ucControlMode);
 80029ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fc32 	bl	8003228 <vDrivingModeLights>

      // WAIT for flag to sync xControlAction update
  	  uiFlags = osThreadFlagsGet();
 80029c4:	f00b fba2 	bl	800e10c <osThreadFlagsGet>
 80029c8:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 80029ca:	221e      	movs	r2, #30
 80029cc:	2101      	movs	r1, #1
 80029ce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80029d2:	f00b fbbc 	bl	800e14e <osThreadFlagsWait>
 80029d6:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 80029d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029da:	f113 0f02 	cmn.w	r3, #2
 80029de:	d108      	bne.n	80029f2 <StartTaskControle+0x13e>
      {
        ucControlMode = MANUAL;
 80029e0:	2304      	movs	r3, #4
 80029e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 80029e6:	4b84      	ldr	r3, [pc, #528]	@ (8002bf8 <StartTaskControle+0x344>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2110      	movs	r1, #16
 80029ec:	4618      	mov	r0, r3
 80029ee:	f00b fb3f 	bl	800e070 <osThreadFlagsSet>
      }

      if(DATA_UPDATED_FLAG == uiFlags)
 80029f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029f8:	d155      	bne.n	8002aa6 <StartTaskControle+0x1f2>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 80029fa:	4b80      	ldr	r3, [pc, #512]	@ (8002bfc <StartTaskControle+0x348>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a02:	4618      	mov	r0, r3
 8002a04:	f00b fcc5 	bl	800e392 <osMutexAcquire>
        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002a08:	4b7d      	ldr	r3, [pc, #500]	@ (8002c00 <StartTaskControle+0x34c>)
 8002a0a:	f107 020c 	add.w	r2, r7, #12
 8002a0e:	9201      	str	r2, [sp, #4]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	9200      	str	r2, [sp, #0]
 8002a14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a16:	f000 fb8b 	bl	8003130 <vGetStringFromControlAction>
        osMutexRelease(MutexControlActionHandle);
 8002a1a:	4b78      	ldr	r3, [pc, #480]	@ (8002bfc <StartTaskControle+0x348>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00b fd02 	bl	800e428 <osMutexRelease>

        // Send cTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, strlen((char * ) ucTxMsgToCarla));
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fc63 	bl	80002f4 <strlen>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4619      	mov	r1, r3
 8002a38:	4872      	ldr	r0, [pc, #456]	@ (8002c04 <StartTaskControle+0x350>)
 8002a3a:	f009 f975 	bl	800bd28 <HAL_UART_Transmit_DMA>

        // Wait CARLA full msg xVehicleStatusRx
        uiFlags = osThreadFlagsGet();
 8002a3e:	f00b fb65 	bl	800e10c <osThreadFlagsGet>
 8002a42:	6338      	str	r0, [r7, #48]	@ 0x30
        uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002a44:	2214      	movs	r2, #20
 8002a46:	2101      	movs	r1, #1
 8002a48:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002a4c:	f00b fb7f 	bl	800e14e <osThreadFlagsWait>
 8002a50:	6338      	str	r0, [r7, #48]	@ 0x30

        // Timeout error
        if(osFlagsErrorTimeout == uiFlags)
 8002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a54:	f113 0f02 	cmn.w	r3, #2
 8002a58:	d102      	bne.n	8002a60 <StartTaskControle+0x1ac>
        {
          ucControlMode = EMERGENCY;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }

        osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002a60:	4b69      	ldr	r3, [pc, #420]	@ (8002c08 <StartTaskControle+0x354>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00b fc92 	bl	800e392 <osMutexAcquire>

        xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002a6e:	4b67      	ldr	r3, [pc, #412]	@ (8002c0c <StartTaskControle+0x358>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a67      	ldr	r2, [pc, #412]	@ (8002c10 <StartTaskControle+0x35c>)
 8002a74:	6153      	str	r3, [r2, #20]
        xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002a76:	4b65      	ldr	r3, [pc, #404]	@ (8002c0c <StartTaskControle+0x358>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4a65      	ldr	r2, [pc, #404]	@ (8002c10 <StartTaskControle+0x35c>)
 8002a7c:	6193      	str	r3, [r2, #24]
        xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002a7e:	4b63      	ldr	r3, [pc, #396]	@ (8002c0c <StartTaskControle+0x358>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4a63      	ldr	r2, [pc, #396]	@ (8002c10 <StartTaskControle+0x35c>)
 8002a84:	61d3      	str	r3, [r2, #28]
        xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002a86:	4b61      	ldr	r3, [pc, #388]	@ (8002c0c <StartTaskControle+0x358>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	4a61      	ldr	r2, [pc, #388]	@ (8002c10 <StartTaskControle+0x35c>)
 8002a8c:	6213      	str	r3, [r2, #32]

        osMutexRelease(MutexControlSignalHandle);
 8002a8e:	4b5e      	ldr	r3, [pc, #376]	@ (8002c08 <StartTaskControle+0x354>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f00b fcc8 	bl	800e428 <osMutexRelease>

        osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002a98:	4b57      	ldr	r3, [pc, #348]	@ (8002bf8 <StartTaskControle+0x344>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f00b fae5 	bl	800e070 <osThreadFlagsSet>
    }
    // Autonomous mode (AUTOWARE) routine -- END


    // Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 8002aa6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d169      	bne.n	8002b82 <StartTaskControle+0x2ce>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002aae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fbb8 	bl	8003228 <vDrivingModeLights>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 8002ab8:	4b56      	ldr	r3, [pc, #344]	@ (8002c14 <StartTaskControle+0x360>)
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002abe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ac0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002ac2:	f000 fb01 	bl	80030c8 <fGetJoyPostition>
 8002ac6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 8002aca:	4b52      	ldr	r3, [pc, #328]	@ (8002c14 <StartTaskControle+0x360>)
 8002acc:	6858      	ldr	r0, [r3, #4]
 8002ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ad2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ad4:	f000 faf8 	bl	80030c8 <fGetJoyPostition>
 8002ad8:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      // Assembling xControlAction
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002adc:	4b47      	ldr	r3, [pc, #284]	@ (8002bfc <StartTaskControle+0x348>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f00b fc54 	bl	800e392 <osMutexAcquire>
      // xControlAction.xSteeringVelocity.f = control_cmd_msg_.lateral.steering_tire_rotation_rate;
      // xControlAction.xSpeed.f = control_cmd_msg_.longitudinal.velocity;
      // xControlAction.xAcceleration.f = control_cmd_msg_.longitudinal.acceleration;
      // xControlAction.xJerk.f = control_cmd_msg_.longitudinal.jerk;

      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002aea:	4b45      	ldr	r3, [pc, #276]	@ (8002c00 <StartTaskControle+0x34c>)
 8002aec:	f107 020c 	add.w	r2, r7, #12
 8002af0:	9201      	str	r2, [sp, #4]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	9200      	str	r2, [sp, #0]
 8002af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af8:	f000 fb1a 	bl	8003130 <vGetStringFromControlAction>

      osMutexRelease(MutexControlActionHandle);
 8002afc:	4b3f      	ldr	r3, [pc, #252]	@ (8002bfc <StartTaskControle+0x348>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f00b fc91 	bl	800e428 <osMutexRelease>

      // Send cTxMsgToCarla to CARLA
      HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002b06:	f107 030c 	add.w	r3, r7, #12
 8002b0a:	221c      	movs	r2, #28
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	483d      	ldr	r0, [pc, #244]	@ (8002c04 <StartTaskControle+0x350>)
 8002b10:	f009 f90a 	bl	800bd28 <HAL_UART_Transmit_DMA>

      // Wait CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 8002b14:	f00b fafa 	bl	800e10c <osThreadFlagsGet>
 8002b18:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002b1a:	2214      	movs	r2, #20
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002b22:	f00b fb14 	bl	800e14e <osThreadFlagsWait>
 8002b26:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	f113 0f02 	cmn.w	r3, #2
 8002b2e:	d102      	bne.n	8002b36 <StartTaskControle+0x282>
      {
        ucControlMode = EMERGENCY;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      }

      // Assembling xControlSignal
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002b36:	4b34      	ldr	r3, [pc, #208]	@ (8002c08 <StartTaskControle+0x354>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f00b fc27 	bl	800e392 <osMutexAcquire>

      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002b44:	4b31      	ldr	r3, [pc, #196]	@ (8002c0c <StartTaskControle+0x358>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a31      	ldr	r2, [pc, #196]	@ (8002c10 <StartTaskControle+0x35c>)
 8002b4a:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c0c <StartTaskControle+0x358>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a2f      	ldr	r2, [pc, #188]	@ (8002c10 <StartTaskControle+0x35c>)
 8002b52:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002b54:	4b2d      	ldr	r3, [pc, #180]	@ (8002c0c <StartTaskControle+0x358>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a2d      	ldr	r2, [pc, #180]	@ (8002c10 <StartTaskControle+0x35c>)
 8002b5a:	61d3      	str	r3, [r2, #28]
      xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c0c <StartTaskControle+0x358>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a2b      	ldr	r2, [pc, #172]	@ (8002c10 <StartTaskControle+0x35c>)
 8002b62:	6213      	str	r3, [r2, #32]

      osMutexRelease(MutexControlSignalHandle);
 8002b64:	4b28      	ldr	r3, [pc, #160]	@ (8002c08 <StartTaskControle+0x354>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00b fc5d 	bl	800e428 <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002b6e:	4b22      	ldr	r3, [pc, #136]	@ (8002bf8 <StartTaskControle+0x344>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b76:	4618      	mov	r0, r3
 8002b78:	f00b fa7a 	bl	800e070 <osThreadFlagsSet>

      // WAIT
      osDelay(MANUAL_CONTROL_TIME_COMMAND);
 8002b7c:	20c8      	movs	r0, #200	@ 0xc8
 8002b7e:	f00b fb67 	bl	800e250 <osDelay>
    }
    // Manual mode (MANUAL) routine -- END

    // Emergency mode (EMERGENCY) routine -- START
    if(EMERGENCY == ucControlMode)
 8002b82:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f47f aec6 	bne.w	8002918 <StartTaskControle+0x64>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002b8c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fb49 	bl	8003228 <vDrivingModeLights>
    
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002b96:	4b19      	ldr	r3, [pc, #100]	@ (8002bfc <StartTaskControle+0x348>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f00b fbf7 	bl	800e392 <osMutexAcquire>

      xControlAction.xSteeringAngle.fFloat = 0;
 8002ba4:	4b16      	ldr	r3, [pc, #88]	@ (8002c00 <StartTaskControle+0x34c>)
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
      xControlAction.xSteeringVelocity.fFloat = 0;
 8002bac:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <StartTaskControle+0x34c>)
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = 0;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <StartTaskControle+0x34c>)
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
      xControlAction.xAcceleration.fFloat = 0;
 8002bbc:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <StartTaskControle+0x34c>)
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	60da      	str	r2, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <StartTaskControle+0x34c>)
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]

      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <StartTaskControle+0x34c>)
 8002bce:	f107 020c 	add.w	r2, r7, #12
 8002bd2:	9201      	str	r2, [sp, #4]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	9200      	str	r2, [sp, #0]
 8002bd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bda:	f000 faa9 	bl	8003130 <vGetStringFromControlAction>

      // Try to stop the car whatever it takes
      while(1)
      {

        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	221c      	movs	r2, #28
 8002be4:	4619      	mov	r1, r3
 8002be6:	4807      	ldr	r0, [pc, #28]	@ (8002c04 <StartTaskControle+0x350>)
 8002be8:	f009 f89e 	bl	800bd28 <HAL_UART_Transmit_DMA>

        HAL_Delay(MANUAL_CONTROL_TIME_COMMAND);
 8002bec:	20c8      	movs	r0, #200	@ 0xc8
 8002bee:	f000 fbeb 	bl	80033c8 <HAL_Delay>
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002bf2:	bf00      	nop
 8002bf4:	e7f3      	b.n	8002bde <StartTaskControle+0x32a>
 8002bf6:	bf00      	nop
 8002bf8:	24032ad4 	.word	0x24032ad4
 8002bfc:	24032adc 	.word	0x24032adc
 8002c00:	24032af0 	.word	0x24032af0
 8002c04:	24032ba8 	.word	0x24032ba8
 8002c08:	24032ad8 	.word	0x24032ad8
 8002c0c:	24032b28 	.word	0x24032b28
 8002c10:	24032b04 	.word	0x24032b04
 8002c14:	24032ae4 	.word	0x24032ae4

08002c18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c1e:	4a23      	ldr	r2, [pc, #140]	@ (8002cac <MX_USART2_UART_Init+0x94>)
 8002c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002c22:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c24:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c36:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c3e:	220c      	movs	r2, #12
 8002c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c42:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c48:	4b17      	ldr	r3, [pc, #92]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c54:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c5a:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c60:	4811      	ldr	r0, [pc, #68]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c62:	f009 f811 	bl	800bc88 <HAL_UART_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c6c:	f7fe ff82 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c70:	2100      	movs	r1, #0
 8002c72:	480d      	ldr	r0, [pc, #52]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c74:	f00a fffc 	bl	800dc70 <HAL_UARTEx_SetTxFifoThreshold>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c7e:	f7fe ff79 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c82:	2100      	movs	r1, #0
 8002c84:	4808      	ldr	r0, [pc, #32]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c86:	f00b f831 	bl	800dcec <HAL_UARTEx_SetRxFifoThreshold>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002c90:	f7fe ff70 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c94:	4804      	ldr	r0, [pc, #16]	@ (8002ca8 <MX_USART2_UART_Init+0x90>)
 8002c96:	f00a ffb2 	bl	800dbfe <HAL_UARTEx_DisableFifoMode>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002ca0:	f7fe ff68 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	24032ba8 	.word	0x24032ba8
 8002cac:	40004400 	.word	0x40004400

08002cb0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002cb6:	4a23      	ldr	r2, [pc, #140]	@ (8002d44 <MX_USART3_UART_Init+0x94>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002cba:	4b21      	ldr	r3, [pc, #132]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002cbc:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002cc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b1c      	ldr	r3, [pc, #112]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce0:	4b17      	ldr	r3, [pc, #92]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cec:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cf8:	4811      	ldr	r0, [pc, #68]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002cfa:	f008 ffc5 	bl	800bc88 <HAL_UART_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002d04:	f7fe ff36 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d08:	2100      	movs	r1, #0
 8002d0a:	480d      	ldr	r0, [pc, #52]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002d0c:	f00a ffb0 	bl	800dc70 <HAL_UARTEx_SetTxFifoThreshold>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002d16:	f7fe ff2d 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4808      	ldr	r0, [pc, #32]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002d1e:	f00a ffe5 	bl	800dcec <HAL_UARTEx_SetRxFifoThreshold>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002d28:	f7fe ff24 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002d2c:	4804      	ldr	r0, [pc, #16]	@ (8002d40 <MX_USART3_UART_Init+0x90>)
 8002d2e:	f00a ff66 	bl	800dbfe <HAL_UARTEx_DisableFifoMode>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002d38:	f7fe ff1c 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	24032c3c 	.word	0x24032c3c
 8002d44:	40004800 	.word	0x40004800

08002d48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b0be      	sub	sp, #248	@ 0xf8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d60:	f107 0320 	add.w	r3, r7, #32
 8002d64:	22c0      	movs	r2, #192	@ 0xc0
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f01f fae5 	bl	8022338 <memset>
  if(uartHandle->Instance==USART2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6a      	ldr	r2, [pc, #424]	@ (8002f1c <HAL_UART_MspInit+0x1d4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	f040 80e1 	bne.w	8002f3c <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d7a:	f04f 0202 	mov.w	r2, #2
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	4618      	mov	r0, r3
 8002d92:	f005 ffad 	bl	8008cf0 <HAL_RCCEx_PeriphCLKConfig>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002d9c:	f7fe feea 	bl	8001b74 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da0:	4b5f      	ldr	r3, [pc, #380]	@ (8002f20 <HAL_UART_MspInit+0x1d8>)
 8002da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002da6:	4a5e      	ldr	r2, [pc, #376]	@ (8002f20 <HAL_UART_MspInit+0x1d8>)
 8002da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002db0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f20 <HAL_UART_MspInit+0x1d8>)
 8002db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	4b58      	ldr	r3, [pc, #352]	@ (8002f20 <HAL_UART_MspInit+0x1d8>)
 8002dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dc4:	4a56      	ldr	r2, [pc, #344]	@ (8002f20 <HAL_UART_MspInit+0x1d8>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dce:	4b54      	ldr	r3, [pc, #336]	@ (8002f20 <HAL_UART_MspInit+0x1d8>)
 8002dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ddc:	4b50      	ldr	r3, [pc, #320]	@ (8002f20 <HAL_UART_MspInit+0x1d8>)
 8002dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002de2:	4a4f      	ldr	r2, [pc, #316]	@ (8002f20 <HAL_UART_MspInit+0x1d8>)
 8002de4:	f043 0308 	orr.w	r3, r3, #8
 8002de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dec:	4b4c      	ldr	r3, [pc, #304]	@ (8002f20 <HAL_UART_MspInit+0x1d8>)
 8002dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dfa:	2308      	movs	r3, #8
 8002dfc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e12:	2307      	movs	r3, #7
 8002e14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4841      	ldr	r0, [pc, #260]	@ (8002f24 <HAL_UART_MspInit+0x1dc>)
 8002e20:	f004 fd20 	bl	8007864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e24:	2320      	movs	r3, #32
 8002e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e46:	4619      	mov	r1, r3
 8002e48:	4837      	ldr	r0, [pc, #220]	@ (8002f28 <HAL_UART_MspInit+0x1e0>)
 8002e4a:	f004 fd0b 	bl	8007864 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8002e4e:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e50:	4a37      	ldr	r2, [pc, #220]	@ (8002f30 <HAL_UART_MspInit+0x1e8>)
 8002e52:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002e54:	4b35      	ldr	r3, [pc, #212]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e56:	222b      	movs	r2, #43	@ 0x2b
 8002e58:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e5a:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e60:	4b32      	ldr	r3, [pc, #200]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e66:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e74:	4b2d      	ldr	r3, [pc, #180]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e80:	4b2a      	ldr	r3, [pc, #168]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e82:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002e86:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e88:	4b28      	ldr	r3, [pc, #160]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e8e:	4827      	ldr	r0, [pc, #156]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002e90:	f001 fea0 	bl	8004bd4 <HAL_DMA_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8002e9a:	f7fe fe6b 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a22      	ldr	r2, [pc, #136]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002ea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ea6:	4a21      	ldr	r2, [pc, #132]	@ (8002f2c <HAL_UART_MspInit+0x1e4>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8002eac:	4b21      	ldr	r3, [pc, #132]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002eae:	4a22      	ldr	r2, [pc, #136]	@ (8002f38 <HAL_UART_MspInit+0x1f0>)
 8002eb0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002eb2:	4b20      	ldr	r3, [pc, #128]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002eb4:	222c      	movs	r2, #44	@ 0x2c
 8002eb6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002eba:	2240      	movs	r2, #64	@ 0x40
 8002ebc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002ec6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ed2:	4b18      	ldr	r3, [pc, #96]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ed8:	4b16      	ldr	r3, [pc, #88]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ede:	4b15      	ldr	r3, [pc, #84]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002ee0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002ee4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ee6:	4b13      	ldr	r3, [pc, #76]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002eec:	4811      	ldr	r0, [pc, #68]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002eee:	f001 fe71 	bl	8004bd4 <HAL_DMA_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8002ef8:	f7fe fe3c 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a0d      	ldr	r2, [pc, #52]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002f00:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f02:	4a0c      	ldr	r2, [pc, #48]	@ (8002f34 <HAL_UART_MspInit+0x1ec>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2105      	movs	r1, #5
 8002f0c:	2026      	movs	r0, #38	@ 0x26
 8002f0e:	f001 fe39 	bl	8004b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f12:	2026      	movs	r0, #38	@ 0x26
 8002f14:	f001 fe50 	bl	8004bb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f18:	e0c3      	b.n	80030a2 <HAL_UART_MspInit+0x35a>
 8002f1a:	bf00      	nop
 8002f1c:	40004400 	.word	0x40004400
 8002f20:	58024400 	.word	0x58024400
 8002f24:	58020000 	.word	0x58020000
 8002f28:	58020c00 	.word	0x58020c00
 8002f2c:	24032cd0 	.word	0x24032cd0
 8002f30:	40020428 	.word	0x40020428
 8002f34:	24032d48 	.word	0x24032d48
 8002f38:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a5a      	ldr	r2, [pc, #360]	@ (80030ac <HAL_UART_MspInit+0x364>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	f040 80ad 	bne.w	80030a2 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f48:	f04f 0202 	mov.w	r2, #2
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f5a:	f107 0320 	add.w	r3, r7, #32
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f005 fec6 	bl	8008cf0 <HAL_RCCEx_PeriphCLKConfig>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_UART_MspInit+0x226>
      Error_Handler();
 8002f6a:	f7fe fe03 	bl	8001b74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f6e:	4b50      	ldr	r3, [pc, #320]	@ (80030b0 <HAL_UART_MspInit+0x368>)
 8002f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f74:	4a4e      	ldr	r2, [pc, #312]	@ (80030b0 <HAL_UART_MspInit+0x368>)
 8002f76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80030b0 <HAL_UART_MspInit+0x368>)
 8002f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8c:	4b48      	ldr	r3, [pc, #288]	@ (80030b0 <HAL_UART_MspInit+0x368>)
 8002f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f92:	4a47      	ldr	r2, [pc, #284]	@ (80030b0 <HAL_UART_MspInit+0x368>)
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f9c:	4b44      	ldr	r3, [pc, #272]	@ (80030b0 <HAL_UART_MspInit+0x368>)
 8002f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002faa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fc4:	2307      	movs	r3, #7
 8002fc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fca:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4838      	ldr	r0, [pc, #224]	@ (80030b4 <HAL_UART_MspInit+0x36c>)
 8002fd2:	f004 fc47 	bl	8007864 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002fd6:	4b38      	ldr	r3, [pc, #224]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 8002fd8:	4a38      	ldr	r2, [pc, #224]	@ (80030bc <HAL_UART_MspInit+0x374>)
 8002fda:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002fdc:	4b36      	ldr	r3, [pc, #216]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 8002fde:	222d      	movs	r2, #45	@ 0x2d
 8002fe0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe2:	4b35      	ldr	r3, [pc, #212]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe8:	4b33      	ldr	r3, [pc, #204]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fee:	4b32      	ldr	r3, [pc, #200]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 8002ff0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ff4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff6:	4b30      	ldr	r3, [pc, #192]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003002:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 8003004:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003008:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800300a:	4b2b      	ldr	r3, [pc, #172]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 800300c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003010:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003012:	4b29      	ldr	r3, [pc, #164]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 8003014:	2200      	movs	r2, #0
 8003016:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003018:	4827      	ldr	r0, [pc, #156]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 800301a:	f001 fddb 	bl	8004bd4 <HAL_DMA_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8003024:	f7fe fda6 	bl	8001b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a23      	ldr	r2, [pc, #140]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 800302c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003030:	4a21      	ldr	r2, [pc, #132]	@ (80030b8 <HAL_UART_MspInit+0x370>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003036:	4b22      	ldr	r3, [pc, #136]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 8003038:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <HAL_UART_MspInit+0x37c>)
 800303a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800303c:	4b20      	ldr	r3, [pc, #128]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 800303e:	222e      	movs	r2, #46	@ 0x2e
 8003040:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003042:	4b1f      	ldr	r3, [pc, #124]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 8003044:	2240      	movs	r2, #64	@ 0x40
 8003046:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003048:	4b1d      	ldr	r3, [pc, #116]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 800304a:	2200      	movs	r2, #0
 800304c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800304e:	4b1c      	ldr	r3, [pc, #112]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 8003050:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003054:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003056:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 8003058:	2200      	movs	r2, #0
 800305a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800305c:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 800305e:	2200      	movs	r2, #0
 8003060:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003062:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 8003064:	2200      	movs	r2, #0
 8003066:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003068:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 800306a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800306e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003070:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 8003072:	2200      	movs	r2, #0
 8003074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003076:	4812      	ldr	r0, [pc, #72]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 8003078:	f001 fdac 	bl	8004bd4 <HAL_DMA_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8003082:	f7fe fd77 	bl	8001b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a0d      	ldr	r2, [pc, #52]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 800308a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800308c:	4a0c      	ldr	r2, [pc, #48]	@ (80030c0 <HAL_UART_MspInit+0x378>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2108      	movs	r1, #8
 8003096:	2027      	movs	r0, #39	@ 0x27
 8003098:	f001 fd74 	bl	8004b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800309c:	2027      	movs	r0, #39	@ 0x27
 800309e:	f001 fd8b 	bl	8004bb8 <HAL_NVIC_EnableIRQ>
}
 80030a2:	bf00      	nop
 80030a4:	37f8      	adds	r7, #248	@ 0xf8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40004800 	.word	0x40004800
 80030b0:	58024400 	.word	0x58024400
 80030b4:	58020c00 	.word	0x58020c00
 80030b8:	24032dc0 	.word	0x24032dc0
 80030bc:	40020010 	.word	0x40020010
 80030c0:	24032e38 	.word	0x24032e38
 80030c4:	40020028 	.word	0x40020028

080030c8 <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0))/((float)(uiRefMax - uiRef0)) : ((int)(uiValue - uiRef0))/((float)(uiRef0 - uiRefMin));
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	dd10      	ble.n	8003102 <fGetJoyPostition+0x3a>
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003100:	e00f      	b.n	8003122 <fGetJoyPostition+0x5a>
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	ee07 3a90 	vmov	s15, r3
 800310c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800311e:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8003122:	eeb0 0a67 	vmov.f32	s0, s15
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8003130:	b084      	sub	sp, #16
 8003132:	b490      	push	{r4, r7}
 8003134:	af00      	add	r7, sp, #0
 8003136:	f107 0408 	add.w	r4, r7, #8
 800313a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ucTxMsg[0]  = (unsigned char)'#';
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2223      	movs	r2, #35	@ 0x23
 8003142:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'S';
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	3301      	adds	r3, #1
 8003148:	2253      	movs	r2, #83	@ 0x53
 800314a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xControlActionTx.xSteeringAngle.ucBytes[0];
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	3302      	adds	r3, #2
 8003150:	7a3a      	ldrb	r2, [r7, #8]
 8003152:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xControlActionTx.xSteeringAngle.ucBytes[1];
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	3303      	adds	r3, #3
 8003158:	7a7a      	ldrb	r2, [r7, #9]
 800315a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xControlActionTx.xSteeringAngle.ucBytes[2];
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	3304      	adds	r3, #4
 8003160:	7aba      	ldrb	r2, [r7, #10]
 8003162:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xControlActionTx.xSteeringAngle.ucBytes[3];
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3305      	adds	r3, #5
 8003168:	7afa      	ldrb	r2, [r7, #11]
 800316a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'W';
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3306      	adds	r3, #6
 8003170:	2257      	movs	r2, #87	@ 0x57
 8003172:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xControlActionTx.xSteeringVelocity.ucBytes[0];
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	3307      	adds	r3, #7
 8003178:	7b3a      	ldrb	r2, [r7, #12]
 800317a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xControlActionTx.xSteeringVelocity.ucBytes[1];
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3308      	adds	r3, #8
 8003180:	7b7a      	ldrb	r2, [r7, #13]
 8003182:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xControlActionTx.xSteeringVelocity.ucBytes[2];
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3309      	adds	r3, #9
 8003188:	7bba      	ldrb	r2, [r7, #14]
 800318a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xControlActionTx.xSteeringVelocity.ucBytes[3];
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	330a      	adds	r3, #10
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'V';
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	330b      	adds	r3, #11
 8003198:	2256      	movs	r2, #86	@ 0x56
 800319a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xControlActionTx.xSpeed.ucBytes[0];
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	330c      	adds	r3, #12
 80031a0:	7c3a      	ldrb	r2, [r7, #16]
 80031a2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xControlActionTx.xSpeed.ucBytes[1];
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	330d      	adds	r3, #13
 80031a8:	7c7a      	ldrb	r2, [r7, #17]
 80031aa:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xControlActionTx.xSpeed.ucBytes[2];
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	330e      	adds	r3, #14
 80031b0:	7cba      	ldrb	r2, [r7, #18]
 80031b2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xControlActionTx.xSpeed.ucBytes[3];
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	330f      	adds	r3, #15
 80031b8:	7cfa      	ldrb	r2, [r7, #19]
 80031ba:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'A';
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	3310      	adds	r3, #16
 80031c0:	2241      	movs	r2, #65	@ 0x41
 80031c2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.xAcceleration.ucBytes[0];
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	3311      	adds	r3, #17
 80031c8:	7d3a      	ldrb	r2, [r7, #20]
 80031ca:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = xControlActionTx.xAcceleration.ucBytes[1];
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	3312      	adds	r3, #18
 80031d0:	7d7a      	ldrb	r2, [r7, #21]
 80031d2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.xAcceleration.ucBytes[2];
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	3313      	adds	r3, #19
 80031d8:	7dba      	ldrb	r2, [r7, #22]
 80031da:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = xControlActionTx.xAcceleration.ucBytes[3];
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	3314      	adds	r3, #20
 80031e0:	7dfa      	ldrb	r2, [r7, #23]
 80031e2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = (unsigned char)'J';
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	3315      	adds	r3, #21
 80031e8:	224a      	movs	r2, #74	@ 0x4a
 80031ea:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = xControlActionTx.xJerk.ucBytes[0];
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	3316      	adds	r3, #22
 80031f0:	7e3a      	ldrb	r2, [r7, #24]
 80031f2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.xJerk.ucBytes[1];
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	3317      	adds	r3, #23
 80031f8:	7e7a      	ldrb	r2, [r7, #25]
 80031fa:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = xControlActionTx.xJerk.ucBytes[2];
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	3318      	adds	r3, #24
 8003200:	7eba      	ldrb	r2, [r7, #26]
 8003202:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = xControlActionTx.xJerk.ucBytes[3];
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3319      	adds	r3, #25
 8003208:	7efa      	ldrb	r2, [r7, #27]
 800320a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[26] = (unsigned char)'$';
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	331a      	adds	r3, #26
 8003210:	2224      	movs	r2, #36	@ 0x24
 8003212:	701a      	strb	r2, [r3, #0]
  ucTxMsg[27] = (unsigned char)'\0';
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	331b      	adds	r3, #27
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
  
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	bc90      	pop	{r4, r7}
 8003222:	b004      	add	sp, #16
 8003224:	4770      	bx	lr
	...

08003228 <vDrivingModeLights>:
  * @brief  Update driving mode signaling lights
  * @param  ucDrivingMode:  Driving mode
  * @retval None
  */
void vDrivingModeLights(unsigned char ucDrivingMode)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  switch (ucDrivingMode)
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d016      	beq.n	8003266 <vDrivingModeLights+0x3e>
 8003238:	2b04      	cmp	r3, #4
 800323a:	dc36      	bgt.n	80032aa <vDrivingModeLights+0x82>
 800323c:	2b00      	cmp	r3, #0
 800323e:	d023      	beq.n	8003288 <vDrivingModeLights+0x60>
 8003240:	2b01      	cmp	r3, #1
 8003242:	d132      	bne.n	80032aa <vDrivingModeLights+0x82>
  {
    case AUTOWARE:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Green LED
 8003244:	2200      	movs	r2, #0
 8003246:	2101      	movs	r1, #1
 8003248:	481a      	ldr	r0, [pc, #104]	@ (80032b4 <vDrivingModeLights+0x8c>)
 800324a:	f004 fcbb 	bl	8007bc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1); // Ambar LED
 800324e:	2201      	movs	r2, #1
 8003250:	2102      	movs	r1, #2
 8003252:	4819      	ldr	r0, [pc, #100]	@ (80032b8 <vDrivingModeLights+0x90>)
 8003254:	f004 fcb6 	bl	8007bc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8003258:	2200      	movs	r2, #0
 800325a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800325e:	4815      	ldr	r0, [pc, #84]	@ (80032b4 <vDrivingModeLights+0x8c>)
 8003260:	f004 fcb0 	bl	8007bc4 <HAL_GPIO_WritePin>
      break;
 8003264:	e022      	b.n	80032ac <vDrivingModeLights+0x84>

    case MANUAL:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 1); // Green LED
 8003266:	2201      	movs	r2, #1
 8003268:	2101      	movs	r1, #1
 800326a:	4812      	ldr	r0, [pc, #72]	@ (80032b4 <vDrivingModeLights+0x8c>)
 800326c:	f004 fcaa 	bl	8007bc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Ambar LED
 8003270:	2200      	movs	r2, #0
 8003272:	2102      	movs	r1, #2
 8003274:	4810      	ldr	r0, [pc, #64]	@ (80032b8 <vDrivingModeLights+0x90>)
 8003276:	f004 fca5 	bl	8007bc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 800327a:	2200      	movs	r2, #0
 800327c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003280:	480c      	ldr	r0, [pc, #48]	@ (80032b4 <vDrivingModeLights+0x8c>)
 8003282:	f004 fc9f 	bl	8007bc4 <HAL_GPIO_WritePin>
      break;
 8003286:	e011      	b.n	80032ac <vDrivingModeLights+0x84>

    case EMERGENCY:
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Green LED
 8003288:	2200      	movs	r2, #0
 800328a:	2102      	movs	r1, #2
 800328c:	480a      	ldr	r0, [pc, #40]	@ (80032b8 <vDrivingModeLights+0x90>)
 800328e:	f004 fc99 	bl	8007bc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Ambar LED
 8003292:	2200      	movs	r2, #0
 8003294:	2101      	movs	r1, #1
 8003296:	4807      	ldr	r0, [pc, #28]	@ (80032b4 <vDrivingModeLights+0x8c>)
 8003298:	f004 fc94 	bl	8007bc4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1); // Red LED
 800329c:	2201      	movs	r2, #1
 800329e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80032a2:	4804      	ldr	r0, [pc, #16]	@ (80032b4 <vDrivingModeLights+0x8c>)
 80032a4:	f004 fc8e 	bl	8007bc4 <HAL_GPIO_WritePin>
      break;
 80032a8:	e000      	b.n	80032ac <vDrivingModeLights+0x84>

    default:
      break;
 80032aa:	bf00      	nop
  }

}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	58020400 	.word	0x58020400
 80032b8:	58021000 	.word	0x58021000

080032bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80032bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032c0:	f7ff fa70 	bl	80027a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032c4:	480c      	ldr	r0, [pc, #48]	@ (80032f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032c6:	490d      	ldr	r1, [pc, #52]	@ (80032fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032cc:	e002      	b.n	80032d4 <LoopCopyDataInit>

080032ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032d2:	3304      	adds	r3, #4

080032d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d8:	d3f9      	bcc.n	80032ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032da:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e0:	e001      	b.n	80032e6 <LoopFillZerobss>

080032e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e4:	3204      	adds	r2, #4

080032e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e8:	d3fb      	bcc.n	80032e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032ea:	f01f f915 	bl	8022518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ee:	f7fe f9b7 	bl	8001660 <main>
  bx  lr
 80032f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80032f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80032fc:	24001474 	.word	0x24001474
  ldr r2, =_sidata
 8003300:	08025c2c 	.word	0x08025c2c
  ldr r2, =_sbss
 8003304:	24001478 	.word	0x24001478
  ldr r4, =_ebss
 8003308:	24069850 	.word	0x24069850

0800330c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800330c:	e7fe      	b.n	800330c <ADC3_IRQHandler>
	...

08003310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003316:	2003      	movs	r0, #3
 8003318:	f001 fc29 	bl	8004b6e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800331c:	f005 fad0 	bl	80088c0 <HAL_RCC_GetSysClockFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b15      	ldr	r3, [pc, #84]	@ (8003378 <HAL_Init+0x68>)
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	4913      	ldr	r1, [pc, #76]	@ (800337c <HAL_Init+0x6c>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800333a:	4b0f      	ldr	r3, [pc, #60]	@ (8003378 <HAL_Init+0x68>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	4a0e      	ldr	r2, [pc, #56]	@ (800337c <HAL_Init+0x6c>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	4a0b      	ldr	r2, [pc, #44]	@ (8003380 <HAL_Init+0x70>)
 8003352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003354:	4a0b      	ldr	r2, [pc, #44]	@ (8003384 <HAL_Init+0x74>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800335a:	200f      	movs	r0, #15
 800335c:	f7ff f886 	bl	800246c <HAL_InitTick>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e002      	b.n	8003370 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800336a:	f7ff f861 	bl	8002430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	58024400 	.word	0x58024400
 800337c:	08023578 	.word	0x08023578
 8003380:	24000008 	.word	0x24000008
 8003384:	24000004 	.word	0x24000004

08003388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800338c:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <HAL_IncTick+0x20>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <HAL_IncTick+0x24>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4413      	add	r3, r2
 8003398:	4a04      	ldr	r2, [pc, #16]	@ (80033ac <HAL_IncTick+0x24>)
 800339a:	6013      	str	r3, [r2, #0]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	24000010 	.word	0x24000010
 80033ac:	24032eb0 	.word	0x24032eb0

080033b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return uwTick;
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <HAL_GetTick+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	24032eb0 	.word	0x24032eb0

080033c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d0:	f7ff ffee 	bl	80033b0 <HAL_GetTick>
 80033d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033e0:	d005      	beq.n	80033ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_Delay+0x44>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ee:	bf00      	nop
 80033f0:	f7ff ffde 	bl	80033b0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d8f7      	bhi.n	80033f0 <HAL_Delay+0x28>
  {
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	24000010 	.word	0x24000010

08003410 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003414:	4b03      	ldr	r3, [pc, #12]	@ (8003424 <HAL_GetREVID+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0c1b      	lsrs	r3, r3, #16
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	5c001000 	.word	0x5c001000

08003428 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	609a      	str	r2, [r3, #8]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	609a      	str	r2, [r3, #8]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3360      	adds	r3, #96	@ 0x60
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	430b      	orrs	r3, r1
 80034be:	431a      	orrs	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80034c4:	bf00      	nop
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	431a      	orrs	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	611a      	str	r2, [r3, #16]
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003502:	b480      	push	{r7}
 8003504:	b087      	sub	sp, #28
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3360      	adds	r3, #96	@ 0x60
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	431a      	orrs	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	601a      	str	r2, [r3, #0]
  }
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800355e:	b480      	push	{r7}
 8003560:	b087      	sub	sp, #28
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3330      	adds	r3, #48	@ 0x30
 800356e:	461a      	mov	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	4413      	add	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	211f      	movs	r1, #31
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	401a      	ands	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	f003 011f 	and.w	r1, r3, #31
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	431a      	orrs	r2, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f023 0203 	bic.w	r2, r3, #3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	60da      	str	r2, [r3, #12]
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3314      	adds	r3, #20
 80035ec:	461a      	mov	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	0e5b      	lsrs	r3, r3, #25
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	4413      	add	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	0d1b      	lsrs	r3, r3, #20
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2107      	movs	r1, #7
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	401a      	ands	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	0d1b      	lsrs	r3, r3, #20
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	431a      	orrs	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800364c:	43db      	mvns	r3, r3
 800364e:	401a      	ands	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0318 	and.w	r3, r3, #24
 8003656:	4908      	ldr	r1, [pc, #32]	@ (8003678 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003658:	40d9      	lsrs	r1, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	400b      	ands	r3, r1
 800365e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003662:	431a      	orrs	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	000fffff 	.word	0x000fffff

0800367c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 031f 	and.w	r3, r3, #31
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6093      	str	r3, [r2, #8]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	5fffffc0 	.word	0x5fffffc0

080036bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d0:	d101      	bne.n	80036d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	4b05      	ldr	r3, [pc, #20]	@ (8003708 <LL_ADC_EnableInternalRegulator+0x24>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	6fffffc0 	.word	0x6fffffc0

0800370c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003720:	d101      	bne.n	8003726 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <LL_ADC_Enable+0x24>)
 8003742:	4013      	ands	r3, r2
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	7fffffc0 	.word	0x7fffffc0

0800375c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <LL_ADC_IsEnabled+0x18>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <LL_ADC_IsEnabled+0x1a>
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <LL_ADC_REG_StartConversion+0x24>)
 8003792:	4013      	ands	r3, r2
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	7fffffc0 	.word	0x7fffffc0

080037ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d101      	bne.n	80037c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d101      	bne.n	80037ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b089      	sub	sp, #36	@ 0x24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e18f      	b.n	8003b32 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fd f817 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff3f 	bl	80036bc <LL_ADC_IsDeepPowerDownEnabled>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff25 	bl	8003698 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ff5a 	bl	800370c <LL_ADC_IsInternalRegulatorEnabled>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d114      	bne.n	8003888 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff3e 	bl	80036e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003868:	4b87      	ldr	r3, [pc, #540]	@ (8003a88 <HAL_ADC_Init+0x290>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	099b      	lsrs	r3, r3, #6
 800386e:	4a87      	ldr	r2, [pc, #540]	@ (8003a8c <HAL_ADC_Init+0x294>)
 8003870:	fba2 2303 	umull	r2, r3, r2, r3
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	3301      	adds	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800387a:	e002      	b.n	8003882 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	3b01      	subs	r3, #1
 8003880:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f9      	bne.n	800387c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff3d 	bl	800370c <LL_ADC_IsInternalRegulatorEnabled>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	f043 0210 	orr.w	r2, r3, #16
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	f043 0201 	orr.w	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff77 	bl	80037ac <LL_ADC_REG_IsConversionOngoing>
 80038be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f040 8129 	bne.w	8003b20 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 8125 	bne.w	8003b20 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038da:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038de:	f043 0202 	orr.w	r2, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ff36 	bl	800375c <LL_ADC_IsEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d136      	bne.n	8003964 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a65      	ldr	r2, [pc, #404]	@ (8003a90 <HAL_ADC_Init+0x298>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_ADC_Init+0x112>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a63      	ldr	r2, [pc, #396]	@ (8003a94 <HAL_ADC_Init+0x29c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10e      	bne.n	8003928 <HAL_ADC_Init+0x130>
 800390a:	4861      	ldr	r0, [pc, #388]	@ (8003a90 <HAL_ADC_Init+0x298>)
 800390c:	f7ff ff26 	bl	800375c <LL_ADC_IsEnabled>
 8003910:	4604      	mov	r4, r0
 8003912:	4860      	ldr	r0, [pc, #384]	@ (8003a94 <HAL_ADC_Init+0x29c>)
 8003914:	f7ff ff22 	bl	800375c <LL_ADC_IsEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	4323      	orrs	r3, r4
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e008      	b.n	800393a <HAL_ADC_Init+0x142>
 8003928:	485b      	ldr	r0, [pc, #364]	@ (8003a98 <HAL_ADC_Init+0x2a0>)
 800392a:	f7ff ff17 	bl	800375c <LL_ADC_IsEnabled>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d012      	beq.n	8003964 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a53      	ldr	r2, [pc, #332]	@ (8003a90 <HAL_ADC_Init+0x298>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_ADC_Init+0x15a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a51      	ldr	r2, [pc, #324]	@ (8003a94 <HAL_ADC_Init+0x29c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_ADC_Init+0x15e>
 8003952:	4a52      	ldr	r2, [pc, #328]	@ (8003a9c <HAL_ADC_Init+0x2a4>)
 8003954:	e000      	b.n	8003958 <HAL_ADC_Init+0x160>
 8003956:	4a52      	ldr	r2, [pc, #328]	@ (8003aa0 <HAL_ADC_Init+0x2a8>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f7ff fd62 	bl	8003428 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003964:	f7ff fd54 	bl	8003410 <HAL_GetREVID>
 8003968:	4603      	mov	r3, r0
 800396a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800396e:	4293      	cmp	r3, r2
 8003970:	d914      	bls.n	800399c <HAL_ADC_Init+0x1a4>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b10      	cmp	r3, #16
 8003978:	d110      	bne.n	800399c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7d5b      	ldrb	r3, [r3, #21]
 800397e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003984:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800398a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	7f1b      	ldrb	r3, [r3, #28]
 8003990:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003992:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003994:	f043 030c 	orr.w	r3, r3, #12
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	e00d      	b.n	80039b8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7d5b      	ldrb	r3, [r3, #21]
 80039a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7f1b      	ldrb	r3, [r3, #28]
 80039b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7f1b      	ldrb	r3, [r3, #28]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d106      	bne.n	80039ce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	045b      	lsls	r3, r3, #17
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa4 <HAL_ADC_Init+0x2ac>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	69b9      	ldr	r1, [r7, #24]
 80039fa:	430b      	orrs	r3, r1
 80039fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fed2 	bl	80037ac <LL_ADC_REG_IsConversionOngoing>
 8003a08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fedf 	bl	80037d2 <LL_ADC_INJ_IsConversionOngoing>
 8003a14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d15f      	bne.n	8003adc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d15c      	bne.n	8003adc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	7d1b      	ldrb	r3, [r3, #20]
 8003a26:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa8 <HAL_ADC_Init+0x2b0>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	69b9      	ldr	r1, [r7, #24]
 8003a40:	430b      	orrs	r3, r1
 8003a42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d130      	bne.n	8003ab0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	4b14      	ldr	r3, [pc, #80]	@ (8003aac <HAL_ADC_Init+0x2b4>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a62:	3a01      	subs	r2, #1
 8003a64:	0411      	lsls	r1, r2, #16
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a76:	430a      	orrs	r2, r1
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	611a      	str	r2, [r3, #16]
 8003a84:	e01c      	b.n	8003ac0 <HAL_ADC_Init+0x2c8>
 8003a86:	bf00      	nop
 8003a88:	24000004 	.word	0x24000004
 8003a8c:	053e2d63 	.word	0x053e2d63
 8003a90:	40022000 	.word	0x40022000
 8003a94:	40022100 	.word	0x40022100
 8003a98:	58026000 	.word	0x58026000
 8003a9c:	40022300 	.word	0x40022300
 8003aa0:	58026300 	.word	0x58026300
 8003aa4:	fff0c003 	.word	0xfff0c003
 8003aa8:	ffffbffc 	.word	0xffffbffc
 8003aac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fd8c 	bl	80045f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d10c      	bne.n	8003afe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	f023 010f 	bic.w	r1, r3, #15
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	1e5a      	subs	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003afc:	e007      	b.n	8003b0e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 020f 	bic.w	r2, r2, #15
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b1e:	e007      	b.n	8003b30 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b24:	f043 0210 	orr.w	r2, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3724      	adds	r7, #36	@ 0x24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd90      	pop	{r4, r7, pc}
 8003b3a:	bf00      	nop

08003b3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a55      	ldr	r2, [pc, #340]	@ (8003ca4 <HAL_ADC_Start_DMA+0x168>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_ADC_Start_DMA+0x20>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a54      	ldr	r2, [pc, #336]	@ (8003ca8 <HAL_ADC_Start_DMA+0x16c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <HAL_ADC_Start_DMA+0x24>
 8003b5c:	4b53      	ldr	r3, [pc, #332]	@ (8003cac <HAL_ADC_Start_DMA+0x170>)
 8003b5e:	e000      	b.n	8003b62 <HAL_ADC_Start_DMA+0x26>
 8003b60:	4b53      	ldr	r3, [pc, #332]	@ (8003cb0 <HAL_ADC_Start_DMA+0x174>)
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fd8a 	bl	800367c <LL_ADC_GetMultimode>
 8003b68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fe1c 	bl	80037ac <LL_ADC_REG_IsConversionOngoing>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f040 808c 	bne.w	8003c94 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_ADC_Start_DMA+0x4e>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e087      	b.n	8003c9a <HAL_ADC_Start_DMA+0x15e>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b05      	cmp	r3, #5
 8003b9c:	d002      	beq.n	8003ba4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b09      	cmp	r3, #9
 8003ba2:	d170      	bne.n	8003c86 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fc07 	bl	80043b8 <ADC_Enable>
 8003baa:	4603      	mov	r3, r0
 8003bac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d163      	bne.n	8003c7c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb4 <HAL_ADC_Start_DMA+0x178>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a37      	ldr	r2, [pc, #220]	@ (8003ca8 <HAL_ADC_Start_DMA+0x16c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d002      	beq.n	8003bd4 <HAL_ADC_Start_DMA+0x98>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	e000      	b.n	8003bd6 <HAL_ADC_Start_DMA+0x9a>
 8003bd4:	4b33      	ldr	r3, [pc, #204]	@ (8003ca4 <HAL_ADC_Start_DMA+0x168>)
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d002      	beq.n	8003be4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d006      	beq.n	8003c0a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c00:	f023 0206 	bic.w	r2, r3, #6
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c08:	e002      	b.n	8003c10 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c14:	4a28      	ldr	r2, [pc, #160]	@ (8003cb8 <HAL_ADC_Start_DMA+0x17c>)
 8003c16:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1c:	4a27      	ldr	r2, [pc, #156]	@ (8003cbc <HAL_ADC_Start_DMA+0x180>)
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c24:	4a26      	ldr	r2, [pc, #152]	@ (8003cc0 <HAL_ADC_Start_DMA+0x184>)
 8003c26:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	221c      	movs	r2, #28
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0210 	orr.w	r2, r2, #16
 8003c46:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7ff fcaf 	bl	80035b6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3340      	adds	r3, #64	@ 0x40
 8003c62:	4619      	mov	r1, r3
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f001 fb10 	bl	800528c <HAL_DMA_Start_IT>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fd85 	bl	8003784 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c7a:	e00d      	b.n	8003c98 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003c84:	e008      	b.n	8003c98 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003c92:	e001      	b.n	8003c98 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
 8003c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	40022100 	.word	0x40022100
 8003cac:	40022300 	.word	0x40022300
 8003cb0:	58026300 	.word	0x58026300
 8003cb4:	fffff0fe 	.word	0xfffff0fe
 8003cb8:	080044cd 	.word	0x080044cd
 8003cbc:	080045a5 	.word	0x080045a5
 8003cc0:	080045c1 	.word	0x080045c1

08003cc4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b0a1      	sub	sp, #132	@ 0x84
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a65      	ldr	r2, [pc, #404]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x1b0>)
 8003d1a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x2a>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e32e      	b.n	8004388 <HAL_ADC_ConfigChannel+0x688>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fd38 	bl	80037ac <LL_ADC_REG_IsConversionOngoing>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f040 8313 	bne.w	800436a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db2c      	blt.n	8003da6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d108      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x6a>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0e9b      	lsrs	r3, r3, #26
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	2201      	movs	r2, #1
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	e016      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x98>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d7a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003d82:	2320      	movs	r3, #32
 8003d84:	e003      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003d86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d88:	fab3 f383 	clz	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	2201      	movs	r2, #1
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	69d1      	ldr	r1, [r2, #28]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	430b      	orrs	r3, r1
 8003da4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f7ff fbd3 	bl	800355e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fcf5 	bl	80037ac <LL_ADC_REG_IsConversionOngoing>
 8003dc2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fd02 	bl	80037d2 <LL_ADC_INJ_IsConversionOngoing>
 8003dce:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f040 80b8 	bne.w	8003f48 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 80b4 	bne.w	8003f48 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	461a      	mov	r2, r3
 8003dee:	f7ff fbf5 	bl	80035dc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003df2:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x1b4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dfe:	d10b      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x118>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	e01d      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x154>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x13e>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	e00a      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x154>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d02c      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6919      	ldr	r1, [r3, #16]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e6c:	f7ff fb10 	bl	8003490 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6919      	ldr	r1, [r3, #16]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	7e5b      	ldrb	r3, [r3, #25]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d102      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x186>
 8003e80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e84:	e000      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x188>
 8003e86:	2300      	movs	r3, #0
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f7ff fb3a 	bl	8003502 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6919      	ldr	r1, [r3, #16]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	7e1b      	ldrb	r3, [r3, #24]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1a4>
 8003e9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ea2:	e000      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x1a6>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f7ff fb12 	bl	80034d0 <LL_ADC_SetDataRightShift>
 8003eac:	e04c      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x248>
 8003eae:	bf00      	nop
 8003eb0:	47ff0000 	.word	0x47ff0000
 8003eb4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ebe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	069b      	lsls	r3, r3, #26
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d107      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003eda:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	069b      	lsls	r3, r3, #26
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d107      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003efe:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	069b      	lsls	r3, r3, #26
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d107      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f22:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	069b      	lsls	r3, r3, #26
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d107      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f46:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fc05 	bl	800375c <LL_ADC_IsEnabled>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 8211 	bne.w	800437c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6819      	ldr	r1, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f7ff fb64 	bl	8003634 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4aa1      	ldr	r2, [pc, #644]	@ (80041f8 <HAL_ADC_ConfigChannel+0x4f8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	f040 812e 	bne.w	80041d4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x2a0>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0e9b      	lsrs	r3, r3, #26
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2b09      	cmp	r3, #9
 8003f96:	bf94      	ite	ls
 8003f98:	2301      	movls	r3, #1
 8003f9a:	2300      	movhi	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e019      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x2d4>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003fb8:	2320      	movs	r3, #32
 8003fba:	e003      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003fbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fbe:	fab3 f383 	clz	r3, r3
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	2b09      	cmp	r3, #9
 8003fcc:	bf94      	ite	ls
 8003fce:	2301      	movls	r3, #1
 8003fd0:	2300      	movhi	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d079      	beq.n	80040cc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d107      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x2f4>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	3301      	adds	r3, #1
 8003fec:	069b      	lsls	r3, r3, #26
 8003fee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ff2:	e015      	b.n	8004020 <HAL_ADC_ConfigChannel+0x320>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004004:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800400c:	2320      	movs	r3, #32
 800400e:	e003      	b.n	8004018 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	3301      	adds	r3, #1
 800401a:	069b      	lsls	r3, r3, #26
 800401c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x340>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	0e9b      	lsrs	r3, r3, #26
 8004032:	3301      	adds	r3, #1
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	e017      	b.n	8004070 <HAL_ADC_ConfigChannel+0x370>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800404e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004050:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004058:	2320      	movs	r3, #32
 800405a:	e003      	b.n	8004064 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800405c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	3301      	adds	r3, #1
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	ea42 0103 	orr.w	r1, r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x396>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	3301      	adds	r3, #1
 8004088:	f003 021f 	and.w	r2, r3, #31
 800408c:	4613      	mov	r3, r2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4413      	add	r3, r2
 8004092:	051b      	lsls	r3, r3, #20
 8004094:	e018      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x3c8>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80040a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80040ae:	2320      	movs	r3, #32
 80040b0:	e003      	b.n	80040ba <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80040b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f003 021f 	and.w	r2, r3, #31
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040c8:	430b      	orrs	r3, r1
 80040ca:	e07e      	b.n	80041ca <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x3e8>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0e9b      	lsrs	r3, r3, #26
 80040de:	3301      	adds	r3, #1
 80040e0:	069b      	lsls	r3, r3, #26
 80040e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e6:	e015      	b.n	8004114 <HAL_ADC_ConfigChannel+0x414>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f0:	fa93 f3a3 	rbit	r3, r3
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80040fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004100:	2320      	movs	r3, #32
 8004102:	e003      	b.n	800410c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	fab3 f383 	clz	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	3301      	adds	r3, #1
 800410e:	069b      	lsls	r3, r3, #26
 8004110:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x434>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	3301      	adds	r3, #1
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	e017      	b.n	8004164 <HAL_ADC_ConfigChannel+0x464>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	61bb      	str	r3, [r7, #24]
  return result;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800414c:	2320      	movs	r3, #32
 800414e:	e003      	b.n	8004158 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	3301      	adds	r3, #1
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2101      	movs	r1, #1
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	ea42 0103 	orr.w	r1, r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10d      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x490>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0e9b      	lsrs	r3, r3, #26
 800417a:	3301      	adds	r3, #1
 800417c:	f003 021f 	and.w	r2, r3, #31
 8004180:	4613      	mov	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	3b1e      	subs	r3, #30
 8004188:	051b      	lsls	r3, r3, #20
 800418a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800418e:	e01b      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x4c8>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	60fb      	str	r3, [r7, #12]
  return result;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	e003      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	3301      	adds	r3, #1
 80041b6:	f003 021f 	and.w	r2, r3, #31
 80041ba:	4613      	mov	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4413      	add	r3, r2
 80041c0:	3b1e      	subs	r3, #30
 80041c2:	051b      	lsls	r3, r3, #20
 80041c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c8:	430b      	orrs	r3, r1
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	6892      	ldr	r2, [r2, #8]
 80041ce:	4619      	mov	r1, r3
 80041d0:	f7ff fa04 	bl	80035dc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f280 80cf 	bge.w	800437c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a06      	ldr	r2, [pc, #24]	@ (80041fc <HAL_ADC_ConfigChannel+0x4fc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_ADC_ConfigChannel+0x4f2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a04      	ldr	r2, [pc, #16]	@ (8004200 <HAL_ADC_ConfigChannel+0x500>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10a      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x508>
 80041f2:	4b04      	ldr	r3, [pc, #16]	@ (8004204 <HAL_ADC_ConfigChannel+0x504>)
 80041f4:	e009      	b.n	800420a <HAL_ADC_ConfigChannel+0x50a>
 80041f6:	bf00      	nop
 80041f8:	47ff0000 	.word	0x47ff0000
 80041fc:	40022000 	.word	0x40022000
 8004200:	40022100 	.word	0x40022100
 8004204:	40022300 	.word	0x40022300
 8004208:	4b61      	ldr	r3, [pc, #388]	@ (8004390 <HAL_ADC_ConfigChannel+0x690>)
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f932 	bl	8003474 <LL_ADC_GetCommonPathInternalCh>
 8004210:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a5f      	ldr	r2, [pc, #380]	@ (8004394 <HAL_ADC_ConfigChannel+0x694>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_ADC_ConfigChannel+0x526>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a5d      	ldr	r2, [pc, #372]	@ (8004398 <HAL_ADC_ConfigChannel+0x698>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d10e      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x544>
 8004226:	485b      	ldr	r0, [pc, #364]	@ (8004394 <HAL_ADC_ConfigChannel+0x694>)
 8004228:	f7ff fa98 	bl	800375c <LL_ADC_IsEnabled>
 800422c:	4604      	mov	r4, r0
 800422e:	485a      	ldr	r0, [pc, #360]	@ (8004398 <HAL_ADC_ConfigChannel+0x698>)
 8004230:	f7ff fa94 	bl	800375c <LL_ADC_IsEnabled>
 8004234:	4603      	mov	r3, r0
 8004236:	4323      	orrs	r3, r4
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf0c      	ite	eq
 800423c:	2301      	moveq	r3, #1
 800423e:	2300      	movne	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e008      	b.n	8004256 <HAL_ADC_ConfigChannel+0x556>
 8004244:	4855      	ldr	r0, [pc, #340]	@ (800439c <HAL_ADC_ConfigChannel+0x69c>)
 8004246:	f7ff fa89 	bl	800375c <LL_ADC_IsEnabled>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d07d      	beq.n	8004356 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a50      	ldr	r2, [pc, #320]	@ (80043a0 <HAL_ADC_ConfigChannel+0x6a0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d130      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x5c6>
 8004264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d12b      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a4a      	ldr	r2, [pc, #296]	@ (800439c <HAL_ADC_ConfigChannel+0x69c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	f040 8081 	bne.w	800437c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a45      	ldr	r2, [pc, #276]	@ (8004394 <HAL_ADC_ConfigChannel+0x694>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_ADC_ConfigChannel+0x58e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a43      	ldr	r2, [pc, #268]	@ (8004398 <HAL_ADC_ConfigChannel+0x698>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x592>
 800428e:	4a45      	ldr	r2, [pc, #276]	@ (80043a4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004290:	e000      	b.n	8004294 <HAL_ADC_ConfigChannel+0x594>
 8004292:	4a3f      	ldr	r2, [pc, #252]	@ (8004390 <HAL_ADC_ConfigChannel+0x690>)
 8004294:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004296:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7ff f8d6 	bl	800344e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042a2:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <HAL_ADC_ConfigChannel+0x6a8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	4a40      	ldr	r2, [pc, #256]	@ (80043ac <HAL_ADC_ConfigChannel+0x6ac>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	3301      	adds	r3, #1
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042b6:	e002      	b.n	80042be <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f9      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042c4:	e05a      	b.n	800437c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a39      	ldr	r2, [pc, #228]	@ (80043b0 <HAL_ADC_ConfigChannel+0x6b0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d11e      	bne.n	800430e <HAL_ADC_ConfigChannel+0x60e>
 80042d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d119      	bne.n	800430e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2f      	ldr	r2, [pc, #188]	@ (800439c <HAL_ADC_ConfigChannel+0x69c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d14b      	bne.n	800437c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004394 <HAL_ADC_ConfigChannel+0x694>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_ADC_ConfigChannel+0x5f8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a29      	ldr	r2, [pc, #164]	@ (8004398 <HAL_ADC_ConfigChannel+0x698>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x5fc>
 80042f8:	4a2a      	ldr	r2, [pc, #168]	@ (80043a4 <HAL_ADC_ConfigChannel+0x6a4>)
 80042fa:	e000      	b.n	80042fe <HAL_ADC_ConfigChannel+0x5fe>
 80042fc:	4a24      	ldr	r2, [pc, #144]	@ (8004390 <HAL_ADC_ConfigChannel+0x690>)
 80042fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004300:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7ff f8a1 	bl	800344e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800430c:	e036      	b.n	800437c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a28      	ldr	r2, [pc, #160]	@ (80043b4 <HAL_ADC_ConfigChannel+0x6b4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d131      	bne.n	800437c <HAL_ADC_ConfigChannel+0x67c>
 8004318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800431a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d12c      	bne.n	800437c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1d      	ldr	r2, [pc, #116]	@ (800439c <HAL_ADC_ConfigChannel+0x69c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d127      	bne.n	800437c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a18      	ldr	r2, [pc, #96]	@ (8004394 <HAL_ADC_ConfigChannel+0x694>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_ADC_ConfigChannel+0x640>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a17      	ldr	r2, [pc, #92]	@ (8004398 <HAL_ADC_ConfigChannel+0x698>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d101      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x644>
 8004340:	4a18      	ldr	r2, [pc, #96]	@ (80043a4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004342:	e000      	b.n	8004346 <HAL_ADC_ConfigChannel+0x646>
 8004344:	4a12      	ldr	r2, [pc, #72]	@ (8004390 <HAL_ADC_ConfigChannel+0x690>)
 8004346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004348:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f7ff f87d 	bl	800344e <LL_ADC_SetCommonPathInternalCh>
 8004354:	e012      	b.n	800437c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435a:	f043 0220 	orr.w	r2, r3, #32
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004368:	e008      	b.n	800437c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436e:	f043 0220 	orr.w	r2, r3, #32
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004384:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004388:	4618      	mov	r0, r3
 800438a:	3784      	adds	r7, #132	@ 0x84
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}
 8004390:	58026300 	.word	0x58026300
 8004394:	40022000 	.word	0x40022000
 8004398:	40022100 	.word	0x40022100
 800439c:	58026000 	.word	0x58026000
 80043a0:	cb840000 	.word	0xcb840000
 80043a4:	40022300 	.word	0x40022300
 80043a8:	24000004 	.word	0x24000004
 80043ac:	053e2d63 	.word	0x053e2d63
 80043b0:	c7520000 	.word	0xc7520000
 80043b4:	cfb80000 	.word	0xcfb80000

080043b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff f9c9 	bl	800375c <LL_ADC_IsEnabled>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d16e      	bne.n	80044ae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	4b38      	ldr	r3, [pc, #224]	@ (80044b8 <ADC_Enable+0x100>)
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e2:	f043 0210 	orr.w	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	f043 0201 	orr.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e05a      	b.n	80044b0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff f998 	bl	8003734 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004404:	f7fe ffd4 	bl	80033b0 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2b      	ldr	r2, [pc, #172]	@ (80044bc <ADC_Enable+0x104>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <ADC_Enable+0x66>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a29      	ldr	r2, [pc, #164]	@ (80044c0 <ADC_Enable+0x108>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d101      	bne.n	8004422 <ADC_Enable+0x6a>
 800441e:	4b29      	ldr	r3, [pc, #164]	@ (80044c4 <ADC_Enable+0x10c>)
 8004420:	e000      	b.n	8004424 <ADC_Enable+0x6c>
 8004422:	4b29      	ldr	r3, [pc, #164]	@ (80044c8 <ADC_Enable+0x110>)
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff f929 	bl	800367c <LL_ADC_GetMultimode>
 800442a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a23      	ldr	r2, [pc, #140]	@ (80044c0 <ADC_Enable+0x108>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d002      	beq.n	800443c <ADC_Enable+0x84>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	e000      	b.n	800443e <ADC_Enable+0x86>
 800443c:	4b1f      	ldr	r3, [pc, #124]	@ (80044bc <ADC_Enable+0x104>)
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	4293      	cmp	r3, r2
 8004444:	d02c      	beq.n	80044a0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d130      	bne.n	80044ae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800444c:	e028      	b.n	80044a0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff f982 	bl	800375c <LL_ADC_IsEnabled>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d104      	bne.n	8004468 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff f966 	bl	8003734 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004468:	f7fe ffa2 	bl	80033b0 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d914      	bls.n	80044a0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b01      	cmp	r3, #1
 8004482:	d00d      	beq.n	80044a0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	f043 0210 	orr.w	r2, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004494:	f043 0201 	orr.w	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e007      	b.n	80044b0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d1cf      	bne.n	800444e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	8000003f 	.word	0x8000003f
 80044bc:	40022000 	.word	0x40022000
 80044c0:	40022100 	.word	0x40022100
 80044c4:	40022300 	.word	0x40022300
 80044c8:	58026300 	.word	0x58026300

080044cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d14b      	bne.n	800457e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d021      	beq.n	8004544 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff f817 	bl	8003538 <LL_ADC_REG_IsTriggerSourceSWStart>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d032      	beq.n	8004576 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d12b      	bne.n	8004576 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d11f      	bne.n	8004576 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	655a      	str	r2, [r3, #84]	@ 0x54
 8004542:	e018      	b.n	8004576 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d111      	bne.n	8004576 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d105      	bne.n	8004576 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fba4 	bl	8003cc4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800457c:	e00e      	b.n	800459c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff fbae 	bl	8003cec <HAL_ADC_ErrorCallback>
}
 8004590:	e004      	b.n	800459c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff fb90 	bl	8003cd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045de:	f043 0204 	orr.w	r2, r3, #4
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7ff fb80 	bl	8003cec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a7a      	ldr	r2, [pc, #488]	@ (80047ec <ADC_ConfigureBoostMode+0x1f8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <ADC_ConfigureBoostMode+0x1c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a79      	ldr	r2, [pc, #484]	@ (80047f0 <ADC_ConfigureBoostMode+0x1fc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d109      	bne.n	8004624 <ADC_ConfigureBoostMode+0x30>
 8004610:	4b78      	ldr	r3, [pc, #480]	@ (80047f4 <ADC_ConfigureBoostMode+0x200>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e008      	b.n	8004636 <ADC_ConfigureBoostMode+0x42>
 8004624:	4b74      	ldr	r3, [pc, #464]	@ (80047f8 <ADC_ConfigureBoostMode+0x204>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01c      	beq.n	8004674 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800463a:	f004 fabb 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 800463e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004648:	d010      	beq.n	800466c <ADC_ConfigureBoostMode+0x78>
 800464a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800464e:	d873      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004654:	d002      	beq.n	800465c <ADC_ConfigureBoostMode+0x68>
 8004656:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800465a:	d16d      	bne.n	8004738 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	60fb      	str	r3, [r7, #12]
        break;
 800466a:	e068      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	60fb      	str	r3, [r7, #12]
        break;
 8004672:	e064      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004674:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004678:	f04f 0100 	mov.w	r1, #0
 800467c:	f005 fd42 	bl	800a104 <HAL_RCCEx_GetPeriphCLKFreq>
 8004680:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800468a:	d051      	beq.n	8004730 <ADC_ConfigureBoostMode+0x13c>
 800468c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004690:	d854      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 8004692:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004696:	d047      	beq.n	8004728 <ADC_ConfigureBoostMode+0x134>
 8004698:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800469c:	d84e      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 800469e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046a2:	d03d      	beq.n	8004720 <ADC_ConfigureBoostMode+0x12c>
 80046a4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046a8:	d848      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046ae:	d033      	beq.n	8004718 <ADC_ConfigureBoostMode+0x124>
 80046b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046b4:	d842      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046b6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046ba:	d029      	beq.n	8004710 <ADC_ConfigureBoostMode+0x11c>
 80046bc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046c0:	d83c      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046c2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046c6:	d01a      	beq.n	80046fe <ADC_ConfigureBoostMode+0x10a>
 80046c8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046cc:	d836      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046ce:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046d2:	d014      	beq.n	80046fe <ADC_ConfigureBoostMode+0x10a>
 80046d4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046d8:	d830      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046de:	d00e      	beq.n	80046fe <ADC_ConfigureBoostMode+0x10a>
 80046e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046e4:	d82a      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046ea:	d008      	beq.n	80046fe <ADC_ConfigureBoostMode+0x10a>
 80046ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046f0:	d824      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046f6:	d002      	beq.n	80046fe <ADC_ConfigureBoostMode+0x10a>
 80046f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046fc:	d11e      	bne.n	800473c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	0c9b      	lsrs	r3, r3, #18
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	60fb      	str	r3, [r7, #12]
        break;
 800470e:	e016      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	60fb      	str	r3, [r7, #12]
        break;
 8004716:	e012      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	60fb      	str	r3, [r7, #12]
        break;
 800471e:	e00e      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	60fb      	str	r3, [r7, #12]
        break;
 8004726:	e00a      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	09db      	lsrs	r3, r3, #7
 800472c:	60fb      	str	r3, [r7, #12]
        break;
 800472e:	e006      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	60fb      	str	r3, [r7, #12]
        break;
 8004736:	e002      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800473c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800473e:	f7fe fe67 	bl	8003410 <HAL_GetREVID>
 8004742:	4603      	mov	r3, r0
 8004744:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004748:	4293      	cmp	r3, r2
 800474a:	d815      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a2b      	ldr	r2, [pc, #172]	@ (80047fc <ADC_ConfigureBoostMode+0x208>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d908      	bls.n	8004766 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004762:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004764:	e03e      	b.n	80047e4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004774:	609a      	str	r2, [r3, #8]
}
 8004776:	e035      	b.n	80047e4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a1f      	ldr	r2, [pc, #124]	@ (8004800 <ADC_ConfigureBoostMode+0x20c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d808      	bhi.n	8004798 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004794:	609a      	str	r2, [r3, #8]
}
 8004796:	e025      	b.n	80047e4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a1a      	ldr	r2, [pc, #104]	@ (8004804 <ADC_ConfigureBoostMode+0x210>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d80a      	bhi.n	80047b6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	e016      	b.n	80047e4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a13      	ldr	r2, [pc, #76]	@ (8004808 <ADC_ConfigureBoostMode+0x214>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d80a      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d0:	609a      	str	r2, [r3, #8]
}
 80047d2:	e007      	b.n	80047e4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40022000 	.word	0x40022000
 80047f0:	40022100 	.word	0x40022100
 80047f4:	40022300 	.word	0x40022300
 80047f8:	58026300 	.word	0x58026300
 80047fc:	01312d00 	.word	0x01312d00
 8004800:	005f5e10 	.word	0x005f5e10
 8004804:	00bebc20 	.word	0x00bebc20
 8004808:	017d7840 	.word	0x017d7840

0800480c <LL_ADC_IsEnabled>:
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <LL_ADC_IsEnabled+0x18>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <LL_ADC_IsEnabled+0x1a>
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <LL_ADC_REG_IsConversionOngoing>:
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d101      	bne.n	800484a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b09f      	sub	sp, #124	@ 0x7c
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004872:	2302      	movs	r3, #2
 8004874:	e0be      	b.n	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800487e:	2300      	movs	r3, #0
 8004880:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004882:	2300      	movs	r3, #0
 8004884:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5c      	ldr	r2, [pc, #368]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d102      	bne.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004890:	4b5b      	ldr	r3, [pc, #364]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	e001      	b.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a4:	f043 0220 	orr.w	r2, r3, #32
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e09d      	b.n	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ffb9 	bl	8004832 <LL_ADC_REG_IsConversionOngoing>
 80048c0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff ffb3 	bl	8004832 <LL_ADC_REG_IsConversionOngoing>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d17f      	bne.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d17c      	bne.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a47      	ldr	r2, [pc, #284]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a46      	ldr	r2, [pc, #280]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d101      	bne.n	80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80048ec:	4b45      	ldr	r3, [pc, #276]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048ee:	e000      	b.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048f0:	4b45      	ldr	r3, [pc, #276]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d039      	beq.n	8004970 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	431a      	orrs	r2, r3
 800490a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800490c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3a      	ldr	r2, [pc, #232]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a38      	ldr	r2, [pc, #224]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d10e      	bne.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004922:	4836      	ldr	r0, [pc, #216]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004924:	f7ff ff72 	bl	800480c <LL_ADC_IsEnabled>
 8004928:	4604      	mov	r4, r0
 800492a:	4835      	ldr	r0, [pc, #212]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800492c:	f7ff ff6e 	bl	800480c <LL_ADC_IsEnabled>
 8004930:	4603      	mov	r3, r0
 8004932:	4323      	orrs	r3, r4
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e008      	b.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004940:	4832      	ldr	r0, [pc, #200]	@ (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004942:	f7ff ff63 	bl	800480c <LL_ADC_IsEnabled>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d047      	beq.n	80049e6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800495c:	4013      	ands	r3, r2
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	6811      	ldr	r1, [r2, #0]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	6892      	ldr	r2, [r2, #8]
 8004966:	430a      	orrs	r2, r1
 8004968:	431a      	orrs	r2, r3
 800496a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800496c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800496e:	e03a      	b.n	80049e6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800497a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1e      	ldr	r2, [pc, #120]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d10e      	bne.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004990:	481a      	ldr	r0, [pc, #104]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004992:	f7ff ff3b 	bl	800480c <LL_ADC_IsEnabled>
 8004996:	4604      	mov	r4, r0
 8004998:	4819      	ldr	r0, [pc, #100]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800499a:	f7ff ff37 	bl	800480c <LL_ADC_IsEnabled>
 800499e:	4603      	mov	r3, r0
 80049a0:	4323      	orrs	r3, r4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bf0c      	ite	eq
 80049a6:	2301      	moveq	r3, #1
 80049a8:	2300      	movne	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	e008      	b.n	80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80049ae:	4817      	ldr	r0, [pc, #92]	@ (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049b0:	f7ff ff2c 	bl	800480c <LL_ADC_IsEnabled>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d010      	beq.n	80049e6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	4b11      	ldr	r3, [pc, #68]	@ (8004a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049ce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049d0:	e009      	b.n	80049e6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d6:	f043 0220 	orr.w	r2, r3, #32
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80049e4:	e000      	b.n	80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80049f0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	377c      	adds	r7, #124	@ 0x7c
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd90      	pop	{r4, r7, pc}
 80049fc:	40022000 	.word	0x40022000
 8004a00:	40022100 	.word	0x40022100
 8004a04:	40022300 	.word	0x40022300
 8004a08:	58026300 	.word	0x58026300
 8004a0c:	58026000 	.word	0x58026000
 8004a10:	fffff0e0 	.word	0xfffff0e0

08004a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <__NVIC_SetPriorityGrouping+0x40>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a30:	4013      	ands	r3, r2
 8004a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a3c:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <__NVIC_SetPriorityGrouping+0x44>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a42:	4a04      	ldr	r2, [pc, #16]	@ (8004a54 <__NVIC_SetPriorityGrouping+0x40>)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	60d3      	str	r3, [r2, #12]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000ed00 	.word	0xe000ed00
 8004a58:	05fa0000 	.word	0x05fa0000

08004a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a60:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <__NVIC_GetPriorityGrouping+0x18>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	0a1b      	lsrs	r3, r3, #8
 8004a66:	f003 0307 	and.w	r3, r3, #7
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	db0b      	blt.n	8004aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	f003 021f 	and.w	r2, r3, #31
 8004a90:	4907      	ldr	r1, [pc, #28]	@ (8004ab0 <__NVIC_EnableIRQ+0x38>)
 8004a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2001      	movs	r0, #1
 8004a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	e000e100 	.word	0xe000e100

08004ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	6039      	str	r1, [r7, #0]
 8004abe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	db0a      	blt.n	8004ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	490c      	ldr	r1, [pc, #48]	@ (8004b00 <__NVIC_SetPriority+0x4c>)
 8004ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ad2:	0112      	lsls	r2, r2, #4
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004adc:	e00a      	b.n	8004af4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	4908      	ldr	r1, [pc, #32]	@ (8004b04 <__NVIC_SetPriority+0x50>)
 8004ae4:	88fb      	ldrh	r3, [r7, #6]
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	3b04      	subs	r3, #4
 8004aec:	0112      	lsls	r2, r2, #4
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	440b      	add	r3, r1
 8004af2:	761a      	strb	r2, [r3, #24]
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	e000e100 	.word	0xe000e100
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b089      	sub	sp, #36	@ 0x24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f1c3 0307 	rsb	r3, r3, #7
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	bf28      	it	cs
 8004b26:	2304      	movcs	r3, #4
 8004b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d902      	bls.n	8004b38 <NVIC_EncodePriority+0x30>
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3b03      	subs	r3, #3
 8004b36:	e000      	b.n	8004b3a <NVIC_EncodePriority+0x32>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43da      	mvns	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	43d9      	mvns	r1, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b60:	4313      	orrs	r3, r2
         );
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3724      	adds	r7, #36	@ 0x24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ff4c 	bl	8004a14 <__NVIC_SetPriorityGrouping>
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b92:	f7ff ff63 	bl	8004a5c <__NVIC_GetPriorityGrouping>
 8004b96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	f7ff ffb3 	bl	8004b08 <NVIC_EncodePriority>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ba8:	4611      	mov	r1, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff ff82 	bl	8004ab4 <__NVIC_SetPriority>
}
 8004bb0:	bf00      	nop
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff ff56 	bl	8004a78 <__NVIC_EnableIRQ>
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004bdc:	f7fe fbe8 	bl	80033b0 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e316      	b.n	800521a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a66      	ldr	r2, [pc, #408]	@ (8004d8c <HAL_DMA_Init+0x1b8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d04a      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a65      	ldr	r2, [pc, #404]	@ (8004d90 <HAL_DMA_Init+0x1bc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d045      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a63      	ldr	r2, [pc, #396]	@ (8004d94 <HAL_DMA_Init+0x1c0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d040      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a62      	ldr	r2, [pc, #392]	@ (8004d98 <HAL_DMA_Init+0x1c4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d03b      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a60      	ldr	r2, [pc, #384]	@ (8004d9c <HAL_DMA_Init+0x1c8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d036      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a5f      	ldr	r2, [pc, #380]	@ (8004da0 <HAL_DMA_Init+0x1cc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d031      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8004da4 <HAL_DMA_Init+0x1d0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d02c      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a5c      	ldr	r2, [pc, #368]	@ (8004da8 <HAL_DMA_Init+0x1d4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d027      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a5a      	ldr	r2, [pc, #360]	@ (8004dac <HAL_DMA_Init+0x1d8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d022      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a59      	ldr	r2, [pc, #356]	@ (8004db0 <HAL_DMA_Init+0x1dc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d01d      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a57      	ldr	r2, [pc, #348]	@ (8004db4 <HAL_DMA_Init+0x1e0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d018      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a56      	ldr	r2, [pc, #344]	@ (8004db8 <HAL_DMA_Init+0x1e4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a54      	ldr	r2, [pc, #336]	@ (8004dbc <HAL_DMA_Init+0x1e8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00e      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a53      	ldr	r2, [pc, #332]	@ (8004dc0 <HAL_DMA_Init+0x1ec>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a51      	ldr	r2, [pc, #324]	@ (8004dc4 <HAL_DMA_Init+0x1f0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_DMA_Init+0xb8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a50      	ldr	r2, [pc, #320]	@ (8004dc8 <HAL_DMA_Init+0x1f4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d101      	bne.n	8004c90 <HAL_DMA_Init+0xbc>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <HAL_DMA_Init+0xbe>
 8004c90:	2300      	movs	r3, #0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 813b 	beq.w	8004f0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a37      	ldr	r2, [pc, #220]	@ (8004d8c <HAL_DMA_Init+0x1b8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d04a      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a36      	ldr	r2, [pc, #216]	@ (8004d90 <HAL_DMA_Init+0x1bc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d045      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a34      	ldr	r2, [pc, #208]	@ (8004d94 <HAL_DMA_Init+0x1c0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d040      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a33      	ldr	r2, [pc, #204]	@ (8004d98 <HAL_DMA_Init+0x1c4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d03b      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a31      	ldr	r2, [pc, #196]	@ (8004d9c <HAL_DMA_Init+0x1c8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d036      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a30      	ldr	r2, [pc, #192]	@ (8004da0 <HAL_DMA_Init+0x1cc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d031      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8004da4 <HAL_DMA_Init+0x1d0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02c      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8004da8 <HAL_DMA_Init+0x1d4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d027      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004dac <HAL_DMA_Init+0x1d8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d022      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2a      	ldr	r2, [pc, #168]	@ (8004db0 <HAL_DMA_Init+0x1dc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01d      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a28      	ldr	r2, [pc, #160]	@ (8004db4 <HAL_DMA_Init+0x1e0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d018      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a27      	ldr	r2, [pc, #156]	@ (8004db8 <HAL_DMA_Init+0x1e4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a25      	ldr	r2, [pc, #148]	@ (8004dbc <HAL_DMA_Init+0x1e8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a24      	ldr	r2, [pc, #144]	@ (8004dc0 <HAL_DMA_Init+0x1ec>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a22      	ldr	r2, [pc, #136]	@ (8004dc4 <HAL_DMA_Init+0x1f0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <HAL_DMA_Init+0x174>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a21      	ldr	r2, [pc, #132]	@ (8004dc8 <HAL_DMA_Init+0x1f4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d108      	bne.n	8004d5a <HAL_DMA_Init+0x186>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e007      	b.n	8004d6a <HAL_DMA_Init+0x196>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d6a:	e02f      	b.n	8004dcc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d6c:	f7fe fb20 	bl	80033b0 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b05      	cmp	r3, #5
 8004d78:	d928      	bls.n	8004dcc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2203      	movs	r2, #3
 8004d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e246      	b.n	800521a <HAL_DMA_Init+0x646>
 8004d8c:	40020010 	.word	0x40020010
 8004d90:	40020028 	.word	0x40020028
 8004d94:	40020040 	.word	0x40020040
 8004d98:	40020058 	.word	0x40020058
 8004d9c:	40020070 	.word	0x40020070
 8004da0:	40020088 	.word	0x40020088
 8004da4:	400200a0 	.word	0x400200a0
 8004da8:	400200b8 	.word	0x400200b8
 8004dac:	40020410 	.word	0x40020410
 8004db0:	40020428 	.word	0x40020428
 8004db4:	40020440 	.word	0x40020440
 8004db8:	40020458 	.word	0x40020458
 8004dbc:	40020470 	.word	0x40020470
 8004dc0:	40020488 	.word	0x40020488
 8004dc4:	400204a0 	.word	0x400204a0
 8004dc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1c8      	bne.n	8004d6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4b83      	ldr	r3, [pc, #524]	@ (8004ff4 <HAL_DMA_Init+0x420>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004df2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d107      	bne.n	8004e30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004e30:	4b71      	ldr	r3, [pc, #452]	@ (8004ff8 <HAL_DMA_Init+0x424>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4b71      	ldr	r3, [pc, #452]	@ (8004ffc <HAL_DMA_Init+0x428>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e3c:	d328      	bcc.n	8004e90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b28      	cmp	r3, #40	@ 0x28
 8004e44:	d903      	bls.n	8004e4e <HAL_DMA_Init+0x27a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e4c:	d917      	bls.n	8004e7e <HAL_DMA_Init+0x2aa>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e54:	d903      	bls.n	8004e5e <HAL_DMA_Init+0x28a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b42      	cmp	r3, #66	@ 0x42
 8004e5c:	d90f      	bls.n	8004e7e <HAL_DMA_Init+0x2aa>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b46      	cmp	r3, #70	@ 0x46
 8004e64:	d903      	bls.n	8004e6e <HAL_DMA_Init+0x29a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b48      	cmp	r3, #72	@ 0x48
 8004e6c:	d907      	bls.n	8004e7e <HAL_DMA_Init+0x2aa>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b4e      	cmp	r3, #78	@ 0x4e
 8004e74:	d905      	bls.n	8004e82 <HAL_DMA_Init+0x2ae>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b52      	cmp	r3, #82	@ 0x52
 8004e7c:	d801      	bhi.n	8004e82 <HAL_DMA_Init+0x2ae>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <HAL_DMA_Init+0x2b0>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0307 	bic.w	r3, r3, #7
 8004ea6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d117      	bne.n	8004eea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00e      	beq.n	8004eea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f002 fb3f 	bl	8007550 <DMA_CheckFifoParam>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2240      	movs	r2, #64	@ 0x40
 8004edc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e197      	b.n	800521a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f002 fa7a 	bl	80073ec <DMA_CalcBaseAndBitshift>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	223f      	movs	r2, #63	@ 0x3f
 8004f06:	409a      	lsls	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	e0cd      	b.n	80050aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a3b      	ldr	r2, [pc, #236]	@ (8005000 <HAL_DMA_Init+0x42c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_DMA_Init+0x38a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a39      	ldr	r2, [pc, #228]	@ (8005004 <HAL_DMA_Init+0x430>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_DMA_Init+0x38a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a38      	ldr	r2, [pc, #224]	@ (8005008 <HAL_DMA_Init+0x434>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_DMA_Init+0x38a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a36      	ldr	r2, [pc, #216]	@ (800500c <HAL_DMA_Init+0x438>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_DMA_Init+0x38a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a35      	ldr	r2, [pc, #212]	@ (8005010 <HAL_DMA_Init+0x43c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_DMA_Init+0x38a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a33      	ldr	r2, [pc, #204]	@ (8005014 <HAL_DMA_Init+0x440>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_DMA_Init+0x38a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a32      	ldr	r2, [pc, #200]	@ (8005018 <HAL_DMA_Init+0x444>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_DMA_Init+0x38a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a30      	ldr	r2, [pc, #192]	@ (800501c <HAL_DMA_Init+0x448>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d101      	bne.n	8004f62 <HAL_DMA_Init+0x38e>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <HAL_DMA_Init+0x390>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8097 	beq.w	8005098 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a24      	ldr	r2, [pc, #144]	@ (8005000 <HAL_DMA_Init+0x42c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d021      	beq.n	8004fb8 <HAL_DMA_Init+0x3e4>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a22      	ldr	r2, [pc, #136]	@ (8005004 <HAL_DMA_Init+0x430>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01c      	beq.n	8004fb8 <HAL_DMA_Init+0x3e4>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a21      	ldr	r2, [pc, #132]	@ (8005008 <HAL_DMA_Init+0x434>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d017      	beq.n	8004fb8 <HAL_DMA_Init+0x3e4>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800500c <HAL_DMA_Init+0x438>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d012      	beq.n	8004fb8 <HAL_DMA_Init+0x3e4>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1e      	ldr	r2, [pc, #120]	@ (8005010 <HAL_DMA_Init+0x43c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_DMA_Init+0x3e4>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8005014 <HAL_DMA_Init+0x440>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d008      	beq.n	8004fb8 <HAL_DMA_Init+0x3e4>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1b      	ldr	r2, [pc, #108]	@ (8005018 <HAL_DMA_Init+0x444>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <HAL_DMA_Init+0x3e4>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a19      	ldr	r2, [pc, #100]	@ (800501c <HAL_DMA_Init+0x448>)
 8004fb6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4b13      	ldr	r3, [pc, #76]	@ (8005020 <HAL_DMA_Init+0x44c>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b40      	cmp	r3, #64	@ 0x40
 8004fde:	d021      	beq.n	8005024 <HAL_DMA_Init+0x450>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b80      	cmp	r3, #128	@ 0x80
 8004fe6:	d102      	bne.n	8004fee <HAL_DMA_Init+0x41a>
 8004fe8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004fec:	e01b      	b.n	8005026 <HAL_DMA_Init+0x452>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e019      	b.n	8005026 <HAL_DMA_Init+0x452>
 8004ff2:	bf00      	nop
 8004ff4:	fe10803f 	.word	0xfe10803f
 8004ff8:	5c001000 	.word	0x5c001000
 8004ffc:	ffff0000 	.word	0xffff0000
 8005000:	58025408 	.word	0x58025408
 8005004:	5802541c 	.word	0x5802541c
 8005008:	58025430 	.word	0x58025430
 800500c:	58025444 	.word	0x58025444
 8005010:	58025458 	.word	0x58025458
 8005014:	5802546c 	.word	0x5802546c
 8005018:	58025480 	.word	0x58025480
 800501c:	58025494 	.word	0x58025494
 8005020:	fffe000f 	.word	0xfffe000f
 8005024:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68d2      	ldr	r2, [r2, #12]
 800502a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800502c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005034:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800503c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005044:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800504c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005054:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	4b6e      	ldr	r3, [pc, #440]	@ (8005224 <HAL_DMA_Init+0x650>)
 800506c:	4413      	add	r3, r2
 800506e:	4a6e      	ldr	r2, [pc, #440]	@ (8005228 <HAL_DMA_Init+0x654>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	009a      	lsls	r2, r3, #2
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f002 f9b5 	bl	80073ec <DMA_CalcBaseAndBitshift>
 8005082:	4603      	mov	r3, r0
 8005084:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	2201      	movs	r2, #1
 8005090:	409a      	lsls	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	e008      	b.n	80050aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2240      	movs	r2, #64	@ 0x40
 800509c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2203      	movs	r2, #3
 80050a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0b7      	b.n	800521a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a5f      	ldr	r2, [pc, #380]	@ (800522c <HAL_DMA_Init+0x658>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d072      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005230 <HAL_DMA_Init+0x65c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d06d      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a5c      	ldr	r2, [pc, #368]	@ (8005234 <HAL_DMA_Init+0x660>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d068      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a5a      	ldr	r2, [pc, #360]	@ (8005238 <HAL_DMA_Init+0x664>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d063      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a59      	ldr	r2, [pc, #356]	@ (800523c <HAL_DMA_Init+0x668>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d05e      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a57      	ldr	r2, [pc, #348]	@ (8005240 <HAL_DMA_Init+0x66c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d059      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a56      	ldr	r2, [pc, #344]	@ (8005244 <HAL_DMA_Init+0x670>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d054      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a54      	ldr	r2, [pc, #336]	@ (8005248 <HAL_DMA_Init+0x674>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d04f      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a53      	ldr	r2, [pc, #332]	@ (800524c <HAL_DMA_Init+0x678>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d04a      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a51      	ldr	r2, [pc, #324]	@ (8005250 <HAL_DMA_Init+0x67c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d045      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a50      	ldr	r2, [pc, #320]	@ (8005254 <HAL_DMA_Init+0x680>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d040      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a4e      	ldr	r2, [pc, #312]	@ (8005258 <HAL_DMA_Init+0x684>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d03b      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a4d      	ldr	r2, [pc, #308]	@ (800525c <HAL_DMA_Init+0x688>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d036      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a4b      	ldr	r2, [pc, #300]	@ (8005260 <HAL_DMA_Init+0x68c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d031      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a4a      	ldr	r2, [pc, #296]	@ (8005264 <HAL_DMA_Init+0x690>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d02c      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a48      	ldr	r2, [pc, #288]	@ (8005268 <HAL_DMA_Init+0x694>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d027      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a47      	ldr	r2, [pc, #284]	@ (800526c <HAL_DMA_Init+0x698>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d022      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a45      	ldr	r2, [pc, #276]	@ (8005270 <HAL_DMA_Init+0x69c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01d      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a44      	ldr	r2, [pc, #272]	@ (8005274 <HAL_DMA_Init+0x6a0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d018      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a42      	ldr	r2, [pc, #264]	@ (8005278 <HAL_DMA_Init+0x6a4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a41      	ldr	r2, [pc, #260]	@ (800527c <HAL_DMA_Init+0x6a8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00e      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a3f      	ldr	r2, [pc, #252]	@ (8005280 <HAL_DMA_Init+0x6ac>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d009      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a3e      	ldr	r2, [pc, #248]	@ (8005284 <HAL_DMA_Init+0x6b0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d004      	beq.n	800519a <HAL_DMA_Init+0x5c6>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a3c      	ldr	r2, [pc, #240]	@ (8005288 <HAL_DMA_Init+0x6b4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <HAL_DMA_Init+0x5ca>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <HAL_DMA_Init+0x5cc>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d032      	beq.n	800520a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f002 fa4f 	bl	8007648 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b80      	cmp	r3, #128	@ 0x80
 80051b0:	d102      	bne.n	80051b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d010      	beq.n	80051f8 <HAL_DMA_Init+0x624>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d80c      	bhi.n	80051f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f002 facc 	bl	800777c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	e008      	b.n	800520a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	a7fdabf8 	.word	0xa7fdabf8
 8005228:	cccccccd 	.word	0xcccccccd
 800522c:	40020010 	.word	0x40020010
 8005230:	40020028 	.word	0x40020028
 8005234:	40020040 	.word	0x40020040
 8005238:	40020058 	.word	0x40020058
 800523c:	40020070 	.word	0x40020070
 8005240:	40020088 	.word	0x40020088
 8005244:	400200a0 	.word	0x400200a0
 8005248:	400200b8 	.word	0x400200b8
 800524c:	40020410 	.word	0x40020410
 8005250:	40020428 	.word	0x40020428
 8005254:	40020440 	.word	0x40020440
 8005258:	40020458 	.word	0x40020458
 800525c:	40020470 	.word	0x40020470
 8005260:	40020488 	.word	0x40020488
 8005264:	400204a0 	.word	0x400204a0
 8005268:	400204b8 	.word	0x400204b8
 800526c:	58025408 	.word	0x58025408
 8005270:	5802541c 	.word	0x5802541c
 8005274:	58025430 	.word	0x58025430
 8005278:	58025444 	.word	0x58025444
 800527c:	58025458 	.word	0x58025458
 8005280:	5802546c 	.word	0x5802546c
 8005284:	58025480 	.word	0x58025480
 8005288:	58025494 	.word	0x58025494

0800528c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e226      	b.n	80056f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_DMA_Start_IT+0x2a>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e21f      	b.n	80056f6 <HAL_DMA_Start_IT+0x46a>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	f040 820a 	bne.w	80056e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a68      	ldr	r2, [pc, #416]	@ (8005480 <HAL_DMA_Start_IT+0x1f4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d04a      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a66      	ldr	r2, [pc, #408]	@ (8005484 <HAL_DMA_Start_IT+0x1f8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d045      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a65      	ldr	r2, [pc, #404]	@ (8005488 <HAL_DMA_Start_IT+0x1fc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d040      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a63      	ldr	r2, [pc, #396]	@ (800548c <HAL_DMA_Start_IT+0x200>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d03b      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a62      	ldr	r2, [pc, #392]	@ (8005490 <HAL_DMA_Start_IT+0x204>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d036      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a60      	ldr	r2, [pc, #384]	@ (8005494 <HAL_DMA_Start_IT+0x208>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d031      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a5f      	ldr	r2, [pc, #380]	@ (8005498 <HAL_DMA_Start_IT+0x20c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d02c      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5d      	ldr	r2, [pc, #372]	@ (800549c <HAL_DMA_Start_IT+0x210>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d027      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a5c      	ldr	r2, [pc, #368]	@ (80054a0 <HAL_DMA_Start_IT+0x214>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d022      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a5a      	ldr	r2, [pc, #360]	@ (80054a4 <HAL_DMA_Start_IT+0x218>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d01d      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a59      	ldr	r2, [pc, #356]	@ (80054a8 <HAL_DMA_Start_IT+0x21c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d018      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a57      	ldr	r2, [pc, #348]	@ (80054ac <HAL_DMA_Start_IT+0x220>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d013      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a56      	ldr	r2, [pc, #344]	@ (80054b0 <HAL_DMA_Start_IT+0x224>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00e      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a54      	ldr	r2, [pc, #336]	@ (80054b4 <HAL_DMA_Start_IT+0x228>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d009      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a53      	ldr	r2, [pc, #332]	@ (80054b8 <HAL_DMA_Start_IT+0x22c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d004      	beq.n	800537a <HAL_DMA_Start_IT+0xee>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a51      	ldr	r2, [pc, #324]	@ (80054bc <HAL_DMA_Start_IT+0x230>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <HAL_DMA_Start_IT+0x100>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0201 	bic.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e007      	b.n	800539c <HAL_DMA_Start_IT+0x110>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f001 fe76 	bl	8007094 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a34      	ldr	r2, [pc, #208]	@ (8005480 <HAL_DMA_Start_IT+0x1f4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d04a      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a33      	ldr	r2, [pc, #204]	@ (8005484 <HAL_DMA_Start_IT+0x1f8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d045      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a31      	ldr	r2, [pc, #196]	@ (8005488 <HAL_DMA_Start_IT+0x1fc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d040      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a30      	ldr	r2, [pc, #192]	@ (800548c <HAL_DMA_Start_IT+0x200>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d03b      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005490 <HAL_DMA_Start_IT+0x204>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d036      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a2d      	ldr	r2, [pc, #180]	@ (8005494 <HAL_DMA_Start_IT+0x208>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d031      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005498 <HAL_DMA_Start_IT+0x20c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d02c      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2a      	ldr	r2, [pc, #168]	@ (800549c <HAL_DMA_Start_IT+0x210>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d027      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a28      	ldr	r2, [pc, #160]	@ (80054a0 <HAL_DMA_Start_IT+0x214>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d022      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a27      	ldr	r2, [pc, #156]	@ (80054a4 <HAL_DMA_Start_IT+0x218>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d01d      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a25      	ldr	r2, [pc, #148]	@ (80054a8 <HAL_DMA_Start_IT+0x21c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a24      	ldr	r2, [pc, #144]	@ (80054ac <HAL_DMA_Start_IT+0x220>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d013      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a22      	ldr	r2, [pc, #136]	@ (80054b0 <HAL_DMA_Start_IT+0x224>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a21      	ldr	r2, [pc, #132]	@ (80054b4 <HAL_DMA_Start_IT+0x228>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1f      	ldr	r2, [pc, #124]	@ (80054b8 <HAL_DMA_Start_IT+0x22c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_DMA_Start_IT+0x1bc>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1e      	ldr	r2, [pc, #120]	@ (80054bc <HAL_DMA_Start_IT+0x230>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d101      	bne.n	800544c <HAL_DMA_Start_IT+0x1c0>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_DMA_Start_IT+0x1c2>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d036      	beq.n	80054c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f023 021e 	bic.w	r2, r3, #30
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0216 	orr.w	r2, r2, #22
 8005464:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d03e      	beq.n	80054ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0208 	orr.w	r2, r2, #8
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e035      	b.n	80054ec <HAL_DMA_Start_IT+0x260>
 8005480:	40020010 	.word	0x40020010
 8005484:	40020028 	.word	0x40020028
 8005488:	40020040 	.word	0x40020040
 800548c:	40020058 	.word	0x40020058
 8005490:	40020070 	.word	0x40020070
 8005494:	40020088 	.word	0x40020088
 8005498:	400200a0 	.word	0x400200a0
 800549c:	400200b8 	.word	0x400200b8
 80054a0:	40020410 	.word	0x40020410
 80054a4:	40020428 	.word	0x40020428
 80054a8:	40020440 	.word	0x40020440
 80054ac:	40020458 	.word	0x40020458
 80054b0:	40020470 	.word	0x40020470
 80054b4:	40020488 	.word	0x40020488
 80054b8:	400204a0 	.word	0x400204a0
 80054bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 020e 	bic.w	r2, r3, #14
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 020a 	orr.w	r2, r2, #10
 80054d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0204 	orr.w	r2, r2, #4
 80054ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a83      	ldr	r2, [pc, #524]	@ (8005700 <HAL_DMA_Start_IT+0x474>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d072      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a82      	ldr	r2, [pc, #520]	@ (8005704 <HAL_DMA_Start_IT+0x478>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d06d      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a80      	ldr	r2, [pc, #512]	@ (8005708 <HAL_DMA_Start_IT+0x47c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d068      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a7f      	ldr	r2, [pc, #508]	@ (800570c <HAL_DMA_Start_IT+0x480>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d063      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a7d      	ldr	r2, [pc, #500]	@ (8005710 <HAL_DMA_Start_IT+0x484>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d05e      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a7c      	ldr	r2, [pc, #496]	@ (8005714 <HAL_DMA_Start_IT+0x488>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d059      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a7a      	ldr	r2, [pc, #488]	@ (8005718 <HAL_DMA_Start_IT+0x48c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d054      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a79      	ldr	r2, [pc, #484]	@ (800571c <HAL_DMA_Start_IT+0x490>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d04f      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a77      	ldr	r2, [pc, #476]	@ (8005720 <HAL_DMA_Start_IT+0x494>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d04a      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a76      	ldr	r2, [pc, #472]	@ (8005724 <HAL_DMA_Start_IT+0x498>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d045      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a74      	ldr	r2, [pc, #464]	@ (8005728 <HAL_DMA_Start_IT+0x49c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d040      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a73      	ldr	r2, [pc, #460]	@ (800572c <HAL_DMA_Start_IT+0x4a0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d03b      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a71      	ldr	r2, [pc, #452]	@ (8005730 <HAL_DMA_Start_IT+0x4a4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d036      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a70      	ldr	r2, [pc, #448]	@ (8005734 <HAL_DMA_Start_IT+0x4a8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d031      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a6e      	ldr	r2, [pc, #440]	@ (8005738 <HAL_DMA_Start_IT+0x4ac>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d02c      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a6d      	ldr	r2, [pc, #436]	@ (800573c <HAL_DMA_Start_IT+0x4b0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d027      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a6b      	ldr	r2, [pc, #428]	@ (8005740 <HAL_DMA_Start_IT+0x4b4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d022      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a6a      	ldr	r2, [pc, #424]	@ (8005744 <HAL_DMA_Start_IT+0x4b8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d01d      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a68      	ldr	r2, [pc, #416]	@ (8005748 <HAL_DMA_Start_IT+0x4bc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d018      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a67      	ldr	r2, [pc, #412]	@ (800574c <HAL_DMA_Start_IT+0x4c0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d013      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a65      	ldr	r2, [pc, #404]	@ (8005750 <HAL_DMA_Start_IT+0x4c4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00e      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a64      	ldr	r2, [pc, #400]	@ (8005754 <HAL_DMA_Start_IT+0x4c8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d009      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a62      	ldr	r2, [pc, #392]	@ (8005758 <HAL_DMA_Start_IT+0x4cc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_DMA_Start_IT+0x350>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a61      	ldr	r2, [pc, #388]	@ (800575c <HAL_DMA_Start_IT+0x4d0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d101      	bne.n	80055e0 <HAL_DMA_Start_IT+0x354>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <HAL_DMA_Start_IT+0x356>
 80055e0:	2300      	movs	r3, #0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01a      	beq.n	800561c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005602:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005616:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800561a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a37      	ldr	r2, [pc, #220]	@ (8005700 <HAL_DMA_Start_IT+0x474>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d04a      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a36      	ldr	r2, [pc, #216]	@ (8005704 <HAL_DMA_Start_IT+0x478>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d045      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a34      	ldr	r2, [pc, #208]	@ (8005708 <HAL_DMA_Start_IT+0x47c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d040      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a33      	ldr	r2, [pc, #204]	@ (800570c <HAL_DMA_Start_IT+0x480>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d03b      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a31      	ldr	r2, [pc, #196]	@ (8005710 <HAL_DMA_Start_IT+0x484>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d036      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a30      	ldr	r2, [pc, #192]	@ (8005714 <HAL_DMA_Start_IT+0x488>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d031      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a2e      	ldr	r2, [pc, #184]	@ (8005718 <HAL_DMA_Start_IT+0x48c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d02c      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a2d      	ldr	r2, [pc, #180]	@ (800571c <HAL_DMA_Start_IT+0x490>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d027      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a2b      	ldr	r2, [pc, #172]	@ (8005720 <HAL_DMA_Start_IT+0x494>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d022      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2a      	ldr	r2, [pc, #168]	@ (8005724 <HAL_DMA_Start_IT+0x498>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d01d      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a28      	ldr	r2, [pc, #160]	@ (8005728 <HAL_DMA_Start_IT+0x49c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d018      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a27      	ldr	r2, [pc, #156]	@ (800572c <HAL_DMA_Start_IT+0x4a0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a25      	ldr	r2, [pc, #148]	@ (8005730 <HAL_DMA_Start_IT+0x4a4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00e      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a24      	ldr	r2, [pc, #144]	@ (8005734 <HAL_DMA_Start_IT+0x4a8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d009      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a22      	ldr	r2, [pc, #136]	@ (8005738 <HAL_DMA_Start_IT+0x4ac>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <HAL_DMA_Start_IT+0x430>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a21      	ldr	r2, [pc, #132]	@ (800573c <HAL_DMA_Start_IT+0x4b0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <HAL_DMA_Start_IT+0x442>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e012      	b.n	80056f4 <HAL_DMA_Start_IT+0x468>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0201 	orr.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e009      	b.n	80056f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40020010 	.word	0x40020010
 8005704:	40020028 	.word	0x40020028
 8005708:	40020040 	.word	0x40020040
 800570c:	40020058 	.word	0x40020058
 8005710:	40020070 	.word	0x40020070
 8005714:	40020088 	.word	0x40020088
 8005718:	400200a0 	.word	0x400200a0
 800571c:	400200b8 	.word	0x400200b8
 8005720:	40020410 	.word	0x40020410
 8005724:	40020428 	.word	0x40020428
 8005728:	40020440 	.word	0x40020440
 800572c:	40020458 	.word	0x40020458
 8005730:	40020470 	.word	0x40020470
 8005734:	40020488 	.word	0x40020488
 8005738:	400204a0 	.word	0x400204a0
 800573c:	400204b8 	.word	0x400204b8
 8005740:	58025408 	.word	0x58025408
 8005744:	5802541c 	.word	0x5802541c
 8005748:	58025430 	.word	0x58025430
 800574c:	58025444 	.word	0x58025444
 8005750:	58025458 	.word	0x58025458
 8005754:	5802546c 	.word	0x5802546c
 8005758:	58025480 	.word	0x58025480
 800575c:	58025494 	.word	0x58025494

08005760 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005768:	f7fd fe22 	bl	80033b0 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e2dc      	b.n	8005d32 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d008      	beq.n	8005796 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2280      	movs	r2, #128	@ 0x80
 8005788:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e2cd      	b.n	8005d32 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a76      	ldr	r2, [pc, #472]	@ (8005974 <HAL_DMA_Abort+0x214>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d04a      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a74      	ldr	r2, [pc, #464]	@ (8005978 <HAL_DMA_Abort+0x218>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d045      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a73      	ldr	r2, [pc, #460]	@ (800597c <HAL_DMA_Abort+0x21c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d040      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a71      	ldr	r2, [pc, #452]	@ (8005980 <HAL_DMA_Abort+0x220>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d03b      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a70      	ldr	r2, [pc, #448]	@ (8005984 <HAL_DMA_Abort+0x224>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d036      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005988 <HAL_DMA_Abort+0x228>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d031      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a6d      	ldr	r2, [pc, #436]	@ (800598c <HAL_DMA_Abort+0x22c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d02c      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005990 <HAL_DMA_Abort+0x230>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d027      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a6a      	ldr	r2, [pc, #424]	@ (8005994 <HAL_DMA_Abort+0x234>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d022      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a68      	ldr	r2, [pc, #416]	@ (8005998 <HAL_DMA_Abort+0x238>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01d      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a67      	ldr	r2, [pc, #412]	@ (800599c <HAL_DMA_Abort+0x23c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d018      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a65      	ldr	r2, [pc, #404]	@ (80059a0 <HAL_DMA_Abort+0x240>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a64      	ldr	r2, [pc, #400]	@ (80059a4 <HAL_DMA_Abort+0x244>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a62      	ldr	r2, [pc, #392]	@ (80059a8 <HAL_DMA_Abort+0x248>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a61      	ldr	r2, [pc, #388]	@ (80059ac <HAL_DMA_Abort+0x24c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_DMA_Abort+0xd6>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a5f      	ldr	r2, [pc, #380]	@ (80059b0 <HAL_DMA_Abort+0x250>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d101      	bne.n	800583a <HAL_DMA_Abort+0xda>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <HAL_DMA_Abort+0xdc>
 800583a:	2300      	movs	r3, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d013      	beq.n	8005868 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 021e 	bic.w	r2, r2, #30
 800584e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800585e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e00a      	b.n	800587e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 020e 	bic.w	r2, r2, #14
 8005876:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a3c      	ldr	r2, [pc, #240]	@ (8005974 <HAL_DMA_Abort+0x214>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d072      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a3a      	ldr	r2, [pc, #232]	@ (8005978 <HAL_DMA_Abort+0x218>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d06d      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a39      	ldr	r2, [pc, #228]	@ (800597c <HAL_DMA_Abort+0x21c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d068      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a37      	ldr	r2, [pc, #220]	@ (8005980 <HAL_DMA_Abort+0x220>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d063      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a36      	ldr	r2, [pc, #216]	@ (8005984 <HAL_DMA_Abort+0x224>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d05e      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a34      	ldr	r2, [pc, #208]	@ (8005988 <HAL_DMA_Abort+0x228>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d059      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a33      	ldr	r2, [pc, #204]	@ (800598c <HAL_DMA_Abort+0x22c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d054      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a31      	ldr	r2, [pc, #196]	@ (8005990 <HAL_DMA_Abort+0x230>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d04f      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a30      	ldr	r2, [pc, #192]	@ (8005994 <HAL_DMA_Abort+0x234>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d04a      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005998 <HAL_DMA_Abort+0x238>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d045      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2d      	ldr	r2, [pc, #180]	@ (800599c <HAL_DMA_Abort+0x23c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d040      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2b      	ldr	r2, [pc, #172]	@ (80059a0 <HAL_DMA_Abort+0x240>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d03b      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2a      	ldr	r2, [pc, #168]	@ (80059a4 <HAL_DMA_Abort+0x244>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d036      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a28      	ldr	r2, [pc, #160]	@ (80059a8 <HAL_DMA_Abort+0x248>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d031      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a27      	ldr	r2, [pc, #156]	@ (80059ac <HAL_DMA_Abort+0x24c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d02c      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a25      	ldr	r2, [pc, #148]	@ (80059b0 <HAL_DMA_Abort+0x250>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d027      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a24      	ldr	r2, [pc, #144]	@ (80059b4 <HAL_DMA_Abort+0x254>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a22      	ldr	r2, [pc, #136]	@ (80059b8 <HAL_DMA_Abort+0x258>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01d      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a21      	ldr	r2, [pc, #132]	@ (80059bc <HAL_DMA_Abort+0x25c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1f      	ldr	r2, [pc, #124]	@ (80059c0 <HAL_DMA_Abort+0x260>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1e      	ldr	r2, [pc, #120]	@ (80059c4 <HAL_DMA_Abort+0x264>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1c      	ldr	r2, [pc, #112]	@ (80059c8 <HAL_DMA_Abort+0x268>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1b      	ldr	r2, [pc, #108]	@ (80059cc <HAL_DMA_Abort+0x26c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_DMA_Abort+0x20e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a19      	ldr	r2, [pc, #100]	@ (80059d0 <HAL_DMA_Abort+0x270>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d132      	bne.n	80059d4 <HAL_DMA_Abort+0x274>
 800596e:	2301      	movs	r3, #1
 8005970:	e031      	b.n	80059d6 <HAL_DMA_Abort+0x276>
 8005972:	bf00      	nop
 8005974:	40020010 	.word	0x40020010
 8005978:	40020028 	.word	0x40020028
 800597c:	40020040 	.word	0x40020040
 8005980:	40020058 	.word	0x40020058
 8005984:	40020070 	.word	0x40020070
 8005988:	40020088 	.word	0x40020088
 800598c:	400200a0 	.word	0x400200a0
 8005990:	400200b8 	.word	0x400200b8
 8005994:	40020410 	.word	0x40020410
 8005998:	40020428 	.word	0x40020428
 800599c:	40020440 	.word	0x40020440
 80059a0:	40020458 	.word	0x40020458
 80059a4:	40020470 	.word	0x40020470
 80059a8:	40020488 	.word	0x40020488
 80059ac:	400204a0 	.word	0x400204a0
 80059b0:	400204b8 	.word	0x400204b8
 80059b4:	58025408 	.word	0x58025408
 80059b8:	5802541c 	.word	0x5802541c
 80059bc:	58025430 	.word	0x58025430
 80059c0:	58025444 	.word	0x58025444
 80059c4:	58025458 	.word	0x58025458
 80059c8:	5802546c 	.word	0x5802546c
 80059cc:	58025480 	.word	0x58025480
 80059d0:	58025494 	.word	0x58025494
 80059d4:	2300      	movs	r3, #0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a6d      	ldr	r2, [pc, #436]	@ (8005ba4 <HAL_DMA_Abort+0x444>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d04a      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a6b      	ldr	r2, [pc, #428]	@ (8005ba8 <HAL_DMA_Abort+0x448>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d045      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a6a      	ldr	r2, [pc, #424]	@ (8005bac <HAL_DMA_Abort+0x44c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d040      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a68      	ldr	r2, [pc, #416]	@ (8005bb0 <HAL_DMA_Abort+0x450>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d03b      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a67      	ldr	r2, [pc, #412]	@ (8005bb4 <HAL_DMA_Abort+0x454>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d036      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a65      	ldr	r2, [pc, #404]	@ (8005bb8 <HAL_DMA_Abort+0x458>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d031      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a64      	ldr	r2, [pc, #400]	@ (8005bbc <HAL_DMA_Abort+0x45c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d02c      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a62      	ldr	r2, [pc, #392]	@ (8005bc0 <HAL_DMA_Abort+0x460>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d027      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a61      	ldr	r2, [pc, #388]	@ (8005bc4 <HAL_DMA_Abort+0x464>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d022      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a5f      	ldr	r2, [pc, #380]	@ (8005bc8 <HAL_DMA_Abort+0x468>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01d      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a5e      	ldr	r2, [pc, #376]	@ (8005bcc <HAL_DMA_Abort+0x46c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d018      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8005bd0 <HAL_DMA_Abort+0x470>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a5b      	ldr	r2, [pc, #364]	@ (8005bd4 <HAL_DMA_Abort+0x474>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a59      	ldr	r2, [pc, #356]	@ (8005bd8 <HAL_DMA_Abort+0x478>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a58      	ldr	r2, [pc, #352]	@ (8005bdc <HAL_DMA_Abort+0x47c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_DMA_Abort+0x32a>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a56      	ldr	r2, [pc, #344]	@ (8005be0 <HAL_DMA_Abort+0x480>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d108      	bne.n	8005a9c <HAL_DMA_Abort+0x33c>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0201 	bic.w	r2, r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e007      	b.n	8005aac <HAL_DMA_Abort+0x34c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005aac:	e013      	b.n	8005ad6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aae:	f7fd fc7f 	bl	80033b0 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b05      	cmp	r3, #5
 8005aba:	d90c      	bls.n	8005ad6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e12d      	b.n	8005d32 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e5      	bne.n	8005aae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba4 <HAL_DMA_Abort+0x444>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d04a      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba8 <HAL_DMA_Abort+0x448>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d045      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a2c      	ldr	r2, [pc, #176]	@ (8005bac <HAL_DMA_Abort+0x44c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d040      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb0 <HAL_DMA_Abort+0x450>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d03b      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a29      	ldr	r2, [pc, #164]	@ (8005bb4 <HAL_DMA_Abort+0x454>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d036      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a27      	ldr	r2, [pc, #156]	@ (8005bb8 <HAL_DMA_Abort+0x458>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d031      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a26      	ldr	r2, [pc, #152]	@ (8005bbc <HAL_DMA_Abort+0x45c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d02c      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a24      	ldr	r2, [pc, #144]	@ (8005bc0 <HAL_DMA_Abort+0x460>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d027      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a23      	ldr	r2, [pc, #140]	@ (8005bc4 <HAL_DMA_Abort+0x464>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a21      	ldr	r2, [pc, #132]	@ (8005bc8 <HAL_DMA_Abort+0x468>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01d      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a20      	ldr	r2, [pc, #128]	@ (8005bcc <HAL_DMA_Abort+0x46c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd0 <HAL_DMA_Abort+0x470>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd4 <HAL_DMA_Abort+0x474>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd8 <HAL_DMA_Abort+0x478>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1a      	ldr	r2, [pc, #104]	@ (8005bdc <HAL_DMA_Abort+0x47c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_DMA_Abort+0x422>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a18      	ldr	r2, [pc, #96]	@ (8005be0 <HAL_DMA_Abort+0x480>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d101      	bne.n	8005b86 <HAL_DMA_Abort+0x426>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <HAL_DMA_Abort+0x428>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d02b      	beq.n	8005be4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b90:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	223f      	movs	r2, #63	@ 0x3f
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	609a      	str	r2, [r3, #8]
 8005ba2:	e02a      	b.n	8005bfa <HAL_DMA_Abort+0x49a>
 8005ba4:	40020010 	.word	0x40020010
 8005ba8:	40020028 	.word	0x40020028
 8005bac:	40020040 	.word	0x40020040
 8005bb0:	40020058 	.word	0x40020058
 8005bb4:	40020070 	.word	0x40020070
 8005bb8:	40020088 	.word	0x40020088
 8005bbc:	400200a0 	.word	0x400200a0
 8005bc0:	400200b8 	.word	0x400200b8
 8005bc4:	40020410 	.word	0x40020410
 8005bc8:	40020428 	.word	0x40020428
 8005bcc:	40020440 	.word	0x40020440
 8005bd0:	40020458 	.word	0x40020458
 8005bd4:	40020470 	.word	0x40020470
 8005bd8:	40020488 	.word	0x40020488
 8005bdc:	400204a0 	.word	0x400204a0
 8005be0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bee:	f003 031f 	and.w	r3, r3, #31
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	409a      	lsls	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a4f      	ldr	r2, [pc, #316]	@ (8005d3c <HAL_DMA_Abort+0x5dc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d072      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a4d      	ldr	r2, [pc, #308]	@ (8005d40 <HAL_DMA_Abort+0x5e0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d06d      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a4c      	ldr	r2, [pc, #304]	@ (8005d44 <HAL_DMA_Abort+0x5e4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d068      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d48 <HAL_DMA_Abort+0x5e8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d063      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a49      	ldr	r2, [pc, #292]	@ (8005d4c <HAL_DMA_Abort+0x5ec>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d05e      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a47      	ldr	r2, [pc, #284]	@ (8005d50 <HAL_DMA_Abort+0x5f0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d059      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a46      	ldr	r2, [pc, #280]	@ (8005d54 <HAL_DMA_Abort+0x5f4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d054      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a44      	ldr	r2, [pc, #272]	@ (8005d58 <HAL_DMA_Abort+0x5f8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d04f      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a43      	ldr	r2, [pc, #268]	@ (8005d5c <HAL_DMA_Abort+0x5fc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d04a      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a41      	ldr	r2, [pc, #260]	@ (8005d60 <HAL_DMA_Abort+0x600>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d045      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a40      	ldr	r2, [pc, #256]	@ (8005d64 <HAL_DMA_Abort+0x604>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d040      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d68 <HAL_DMA_Abort+0x608>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d03b      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a3d      	ldr	r2, [pc, #244]	@ (8005d6c <HAL_DMA_Abort+0x60c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d036      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a3b      	ldr	r2, [pc, #236]	@ (8005d70 <HAL_DMA_Abort+0x610>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d031      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a3a      	ldr	r2, [pc, #232]	@ (8005d74 <HAL_DMA_Abort+0x614>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d02c      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a38      	ldr	r2, [pc, #224]	@ (8005d78 <HAL_DMA_Abort+0x618>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d027      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a37      	ldr	r2, [pc, #220]	@ (8005d7c <HAL_DMA_Abort+0x61c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d022      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a35      	ldr	r2, [pc, #212]	@ (8005d80 <HAL_DMA_Abort+0x620>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d01d      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a34      	ldr	r2, [pc, #208]	@ (8005d84 <HAL_DMA_Abort+0x624>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d018      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a32      	ldr	r2, [pc, #200]	@ (8005d88 <HAL_DMA_Abort+0x628>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a31      	ldr	r2, [pc, #196]	@ (8005d8c <HAL_DMA_Abort+0x62c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00e      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8005d90 <HAL_DMA_Abort+0x630>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d009      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a2e      	ldr	r2, [pc, #184]	@ (8005d94 <HAL_DMA_Abort+0x634>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_DMA_Abort+0x58a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d98 <HAL_DMA_Abort+0x638>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d101      	bne.n	8005cee <HAL_DMA_Abort+0x58e>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <HAL_DMA_Abort+0x590>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d015      	beq.n	8005d20 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005cfc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00c      	beq.n	8005d20 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d14:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d1e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40020010 	.word	0x40020010
 8005d40:	40020028 	.word	0x40020028
 8005d44:	40020040 	.word	0x40020040
 8005d48:	40020058 	.word	0x40020058
 8005d4c:	40020070 	.word	0x40020070
 8005d50:	40020088 	.word	0x40020088
 8005d54:	400200a0 	.word	0x400200a0
 8005d58:	400200b8 	.word	0x400200b8
 8005d5c:	40020410 	.word	0x40020410
 8005d60:	40020428 	.word	0x40020428
 8005d64:	40020440 	.word	0x40020440
 8005d68:	40020458 	.word	0x40020458
 8005d6c:	40020470 	.word	0x40020470
 8005d70:	40020488 	.word	0x40020488
 8005d74:	400204a0 	.word	0x400204a0
 8005d78:	400204b8 	.word	0x400204b8
 8005d7c:	58025408 	.word	0x58025408
 8005d80:	5802541c 	.word	0x5802541c
 8005d84:	58025430 	.word	0x58025430
 8005d88:	58025444 	.word	0x58025444
 8005d8c:	58025458 	.word	0x58025458
 8005d90:	5802546c 	.word	0x5802546c
 8005d94:	58025480 	.word	0x58025480
 8005d98:	58025494 	.word	0x58025494

08005d9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e237      	b.n	800621e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d004      	beq.n	8005dc4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2280      	movs	r2, #128	@ 0x80
 8005dbe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e22c      	b.n	800621e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a5c      	ldr	r2, [pc, #368]	@ (8005f3c <HAL_DMA_Abort_IT+0x1a0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d04a      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8005f40 <HAL_DMA_Abort_IT+0x1a4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d045      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a59      	ldr	r2, [pc, #356]	@ (8005f44 <HAL_DMA_Abort_IT+0x1a8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d040      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a58      	ldr	r2, [pc, #352]	@ (8005f48 <HAL_DMA_Abort_IT+0x1ac>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d03b      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a56      	ldr	r2, [pc, #344]	@ (8005f4c <HAL_DMA_Abort_IT+0x1b0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d036      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a55      	ldr	r2, [pc, #340]	@ (8005f50 <HAL_DMA_Abort_IT+0x1b4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d031      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a53      	ldr	r2, [pc, #332]	@ (8005f54 <HAL_DMA_Abort_IT+0x1b8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d02c      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a52      	ldr	r2, [pc, #328]	@ (8005f58 <HAL_DMA_Abort_IT+0x1bc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d027      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a50      	ldr	r2, [pc, #320]	@ (8005f5c <HAL_DMA_Abort_IT+0x1c0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d022      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a4f      	ldr	r2, [pc, #316]	@ (8005f60 <HAL_DMA_Abort_IT+0x1c4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d01d      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8005f64 <HAL_DMA_Abort_IT+0x1c8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d018      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a4c      	ldr	r2, [pc, #304]	@ (8005f68 <HAL_DMA_Abort_IT+0x1cc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a4a      	ldr	r2, [pc, #296]	@ (8005f6c <HAL_DMA_Abort_IT+0x1d0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00e      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a49      	ldr	r2, [pc, #292]	@ (8005f70 <HAL_DMA_Abort_IT+0x1d4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a47      	ldr	r2, [pc, #284]	@ (8005f74 <HAL_DMA_Abort_IT+0x1d8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a46      	ldr	r2, [pc, #280]	@ (8005f78 <HAL_DMA_Abort_IT+0x1dc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d101      	bne.n	8005e68 <HAL_DMA_Abort_IT+0xcc>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <HAL_DMA_Abort_IT+0xce>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8086 	beq.w	8005f7c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2204      	movs	r2, #4
 8005e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8005f3c <HAL_DMA_Abort_IT+0x1a0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d04a      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2e      	ldr	r2, [pc, #184]	@ (8005f40 <HAL_DMA_Abort_IT+0x1a4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d045      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2c      	ldr	r2, [pc, #176]	@ (8005f44 <HAL_DMA_Abort_IT+0x1a8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d040      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f48 <HAL_DMA_Abort_IT+0x1ac>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d03b      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a29      	ldr	r2, [pc, #164]	@ (8005f4c <HAL_DMA_Abort_IT+0x1b0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d036      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a28      	ldr	r2, [pc, #160]	@ (8005f50 <HAL_DMA_Abort_IT+0x1b4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d031      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a26      	ldr	r2, [pc, #152]	@ (8005f54 <HAL_DMA_Abort_IT+0x1b8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d02c      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a25      	ldr	r2, [pc, #148]	@ (8005f58 <HAL_DMA_Abort_IT+0x1bc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d027      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a23      	ldr	r2, [pc, #140]	@ (8005f5c <HAL_DMA_Abort_IT+0x1c0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a22      	ldr	r2, [pc, #136]	@ (8005f60 <HAL_DMA_Abort_IT+0x1c4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d01d      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a20      	ldr	r2, [pc, #128]	@ (8005f64 <HAL_DMA_Abort_IT+0x1c8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1f      	ldr	r2, [pc, #124]	@ (8005f68 <HAL_DMA_Abort_IT+0x1cc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f6c <HAL_DMA_Abort_IT+0x1d0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1c      	ldr	r2, [pc, #112]	@ (8005f70 <HAL_DMA_Abort_IT+0x1d4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1a      	ldr	r2, [pc, #104]	@ (8005f74 <HAL_DMA_Abort_IT+0x1d8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x17c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a19      	ldr	r2, [pc, #100]	@ (8005f78 <HAL_DMA_Abort_IT+0x1dc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d108      	bne.n	8005f2a <HAL_DMA_Abort_IT+0x18e>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e178      	b.n	800621c <HAL_DMA_Abort_IT+0x480>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e16f      	b.n	800621c <HAL_DMA_Abort_IT+0x480>
 8005f3c:	40020010 	.word	0x40020010
 8005f40:	40020028 	.word	0x40020028
 8005f44:	40020040 	.word	0x40020040
 8005f48:	40020058 	.word	0x40020058
 8005f4c:	40020070 	.word	0x40020070
 8005f50:	40020088 	.word	0x40020088
 8005f54:	400200a0 	.word	0x400200a0
 8005f58:	400200b8 	.word	0x400200b8
 8005f5c:	40020410 	.word	0x40020410
 8005f60:	40020428 	.word	0x40020428
 8005f64:	40020440 	.word	0x40020440
 8005f68:	40020458 	.word	0x40020458
 8005f6c:	40020470 	.word	0x40020470
 8005f70:	40020488 	.word	0x40020488
 8005f74:	400204a0 	.word	0x400204a0
 8005f78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 020e 	bic.w	r2, r2, #14
 8005f8a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a6c      	ldr	r2, [pc, #432]	@ (8006144 <HAL_DMA_Abort_IT+0x3a8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d04a      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a6b      	ldr	r2, [pc, #428]	@ (8006148 <HAL_DMA_Abort_IT+0x3ac>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d045      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a69      	ldr	r2, [pc, #420]	@ (800614c <HAL_DMA_Abort_IT+0x3b0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d040      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a68      	ldr	r2, [pc, #416]	@ (8006150 <HAL_DMA_Abort_IT+0x3b4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d03b      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a66      	ldr	r2, [pc, #408]	@ (8006154 <HAL_DMA_Abort_IT+0x3b8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d036      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a65      	ldr	r2, [pc, #404]	@ (8006158 <HAL_DMA_Abort_IT+0x3bc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d031      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a63      	ldr	r2, [pc, #396]	@ (800615c <HAL_DMA_Abort_IT+0x3c0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d02c      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a62      	ldr	r2, [pc, #392]	@ (8006160 <HAL_DMA_Abort_IT+0x3c4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d027      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a60      	ldr	r2, [pc, #384]	@ (8006164 <HAL_DMA_Abort_IT+0x3c8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d022      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a5f      	ldr	r2, [pc, #380]	@ (8006168 <HAL_DMA_Abort_IT+0x3cc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d01d      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a5d      	ldr	r2, [pc, #372]	@ (800616c <HAL_DMA_Abort_IT+0x3d0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d018      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a5c      	ldr	r2, [pc, #368]	@ (8006170 <HAL_DMA_Abort_IT+0x3d4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a5a      	ldr	r2, [pc, #360]	@ (8006174 <HAL_DMA_Abort_IT+0x3d8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a59      	ldr	r2, [pc, #356]	@ (8006178 <HAL_DMA_Abort_IT+0x3dc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d009      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a57      	ldr	r2, [pc, #348]	@ (800617c <HAL_DMA_Abort_IT+0x3e0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_DMA_Abort_IT+0x290>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a56      	ldr	r2, [pc, #344]	@ (8006180 <HAL_DMA_Abort_IT+0x3e4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d108      	bne.n	800603e <HAL_DMA_Abort_IT+0x2a2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e007      	b.n	800604e <HAL_DMA_Abort_IT+0x2b2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a3c      	ldr	r2, [pc, #240]	@ (8006144 <HAL_DMA_Abort_IT+0x3a8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d072      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a3a      	ldr	r2, [pc, #232]	@ (8006148 <HAL_DMA_Abort_IT+0x3ac>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d06d      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a39      	ldr	r2, [pc, #228]	@ (800614c <HAL_DMA_Abort_IT+0x3b0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d068      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a37      	ldr	r2, [pc, #220]	@ (8006150 <HAL_DMA_Abort_IT+0x3b4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d063      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a36      	ldr	r2, [pc, #216]	@ (8006154 <HAL_DMA_Abort_IT+0x3b8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d05e      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a34      	ldr	r2, [pc, #208]	@ (8006158 <HAL_DMA_Abort_IT+0x3bc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d059      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a33      	ldr	r2, [pc, #204]	@ (800615c <HAL_DMA_Abort_IT+0x3c0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d054      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a31      	ldr	r2, [pc, #196]	@ (8006160 <HAL_DMA_Abort_IT+0x3c4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d04f      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a30      	ldr	r2, [pc, #192]	@ (8006164 <HAL_DMA_Abort_IT+0x3c8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d04a      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006168 <HAL_DMA_Abort_IT+0x3cc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d045      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a2d      	ldr	r2, [pc, #180]	@ (800616c <HAL_DMA_Abort_IT+0x3d0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d040      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006170 <HAL_DMA_Abort_IT+0x3d4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d03b      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a2a      	ldr	r2, [pc, #168]	@ (8006174 <HAL_DMA_Abort_IT+0x3d8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d036      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a28      	ldr	r2, [pc, #160]	@ (8006178 <HAL_DMA_Abort_IT+0x3dc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d031      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a27      	ldr	r2, [pc, #156]	@ (800617c <HAL_DMA_Abort_IT+0x3e0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d02c      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a25      	ldr	r2, [pc, #148]	@ (8006180 <HAL_DMA_Abort_IT+0x3e4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d027      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a24      	ldr	r2, [pc, #144]	@ (8006184 <HAL_DMA_Abort_IT+0x3e8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d022      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a22      	ldr	r2, [pc, #136]	@ (8006188 <HAL_DMA_Abort_IT+0x3ec>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d01d      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a21      	ldr	r2, [pc, #132]	@ (800618c <HAL_DMA_Abort_IT+0x3f0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1f      	ldr	r2, [pc, #124]	@ (8006190 <HAL_DMA_Abort_IT+0x3f4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1e      	ldr	r2, [pc, #120]	@ (8006194 <HAL_DMA_Abort_IT+0x3f8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1c      	ldr	r2, [pc, #112]	@ (8006198 <HAL_DMA_Abort_IT+0x3fc>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1b      	ldr	r2, [pc, #108]	@ (800619c <HAL_DMA_Abort_IT+0x400>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_DMA_Abort_IT+0x3a2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a19      	ldr	r2, [pc, #100]	@ (80061a0 <HAL_DMA_Abort_IT+0x404>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d132      	bne.n	80061a4 <HAL_DMA_Abort_IT+0x408>
 800613e:	2301      	movs	r3, #1
 8006140:	e031      	b.n	80061a6 <HAL_DMA_Abort_IT+0x40a>
 8006142:	bf00      	nop
 8006144:	40020010 	.word	0x40020010
 8006148:	40020028 	.word	0x40020028
 800614c:	40020040 	.word	0x40020040
 8006150:	40020058 	.word	0x40020058
 8006154:	40020070 	.word	0x40020070
 8006158:	40020088 	.word	0x40020088
 800615c:	400200a0 	.word	0x400200a0
 8006160:	400200b8 	.word	0x400200b8
 8006164:	40020410 	.word	0x40020410
 8006168:	40020428 	.word	0x40020428
 800616c:	40020440 	.word	0x40020440
 8006170:	40020458 	.word	0x40020458
 8006174:	40020470 	.word	0x40020470
 8006178:	40020488 	.word	0x40020488
 800617c:	400204a0 	.word	0x400204a0
 8006180:	400204b8 	.word	0x400204b8
 8006184:	58025408 	.word	0x58025408
 8006188:	5802541c 	.word	0x5802541c
 800618c:	58025430 	.word	0x58025430
 8006190:	58025444 	.word	0x58025444
 8006194:	58025458 	.word	0x58025458
 8006198:	5802546c 	.word	0x5802546c
 800619c:	58025480 	.word	0x58025480
 80061a0:	58025494 	.word	0x58025494
 80061a4:	2300      	movs	r3, #0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d028      	beq.n	80061fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2201      	movs	r2, #1
 80061ca:	409a      	lsls	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80061d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00c      	beq.n	80061fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80061fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop

08006228 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	@ 0x28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006234:	4b67      	ldr	r3, [pc, #412]	@ (80063d4 <HAL_DMA_IRQHandler+0x1ac>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a67      	ldr	r2, [pc, #412]	@ (80063d8 <HAL_DMA_IRQHandler+0x1b0>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	0a9b      	lsrs	r3, r3, #10
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006246:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5f      	ldr	r2, [pc, #380]	@ (80063dc <HAL_DMA_IRQHandler+0x1b4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d04a      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a5d      	ldr	r2, [pc, #372]	@ (80063e0 <HAL_DMA_IRQHandler+0x1b8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d045      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a5c      	ldr	r2, [pc, #368]	@ (80063e4 <HAL_DMA_IRQHandler+0x1bc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d040      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a5a      	ldr	r2, [pc, #360]	@ (80063e8 <HAL_DMA_IRQHandler+0x1c0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d03b      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a59      	ldr	r2, [pc, #356]	@ (80063ec <HAL_DMA_IRQHandler+0x1c4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d036      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a57      	ldr	r2, [pc, #348]	@ (80063f0 <HAL_DMA_IRQHandler+0x1c8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d031      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a56      	ldr	r2, [pc, #344]	@ (80063f4 <HAL_DMA_IRQHandler+0x1cc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d02c      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a54      	ldr	r2, [pc, #336]	@ (80063f8 <HAL_DMA_IRQHandler+0x1d0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d027      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a53      	ldr	r2, [pc, #332]	@ (80063fc <HAL_DMA_IRQHandler+0x1d4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d022      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a51      	ldr	r2, [pc, #324]	@ (8006400 <HAL_DMA_IRQHandler+0x1d8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01d      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a50      	ldr	r2, [pc, #320]	@ (8006404 <HAL_DMA_IRQHandler+0x1dc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d018      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a4e      	ldr	r2, [pc, #312]	@ (8006408 <HAL_DMA_IRQHandler+0x1e0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a4d      	ldr	r2, [pc, #308]	@ (800640c <HAL_DMA_IRQHandler+0x1e4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00e      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a4b      	ldr	r2, [pc, #300]	@ (8006410 <HAL_DMA_IRQHandler+0x1e8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d009      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a4a      	ldr	r2, [pc, #296]	@ (8006414 <HAL_DMA_IRQHandler+0x1ec>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <HAL_DMA_IRQHandler+0xd2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a48      	ldr	r2, [pc, #288]	@ (8006418 <HAL_DMA_IRQHandler+0x1f0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d101      	bne.n	80062fe <HAL_DMA_IRQHandler+0xd6>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <HAL_DMA_IRQHandler+0xd8>
 80062fe:	2300      	movs	r3, #0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 842b 	beq.w	8006b5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2208      	movs	r2, #8
 8006310:	409a      	lsls	r2, r3
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 80a2 	beq.w	8006460 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a2e      	ldr	r2, [pc, #184]	@ (80063dc <HAL_DMA_IRQHandler+0x1b4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d04a      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a2d      	ldr	r2, [pc, #180]	@ (80063e0 <HAL_DMA_IRQHandler+0x1b8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d045      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a2b      	ldr	r2, [pc, #172]	@ (80063e4 <HAL_DMA_IRQHandler+0x1bc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d040      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a2a      	ldr	r2, [pc, #168]	@ (80063e8 <HAL_DMA_IRQHandler+0x1c0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d03b      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a28      	ldr	r2, [pc, #160]	@ (80063ec <HAL_DMA_IRQHandler+0x1c4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d036      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a27      	ldr	r2, [pc, #156]	@ (80063f0 <HAL_DMA_IRQHandler+0x1c8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d031      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a25      	ldr	r2, [pc, #148]	@ (80063f4 <HAL_DMA_IRQHandler+0x1cc>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d02c      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a24      	ldr	r2, [pc, #144]	@ (80063f8 <HAL_DMA_IRQHandler+0x1d0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d027      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a22      	ldr	r2, [pc, #136]	@ (80063fc <HAL_DMA_IRQHandler+0x1d4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d022      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a21      	ldr	r2, [pc, #132]	@ (8006400 <HAL_DMA_IRQHandler+0x1d8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d01d      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1f      	ldr	r2, [pc, #124]	@ (8006404 <HAL_DMA_IRQHandler+0x1dc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d018      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1e      	ldr	r2, [pc, #120]	@ (8006408 <HAL_DMA_IRQHandler+0x1e0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d013      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1c      	ldr	r2, [pc, #112]	@ (800640c <HAL_DMA_IRQHandler+0x1e4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00e      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006410 <HAL_DMA_IRQHandler+0x1e8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d009      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a19      	ldr	r2, [pc, #100]	@ (8006414 <HAL_DMA_IRQHandler+0x1ec>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <HAL_DMA_IRQHandler+0x194>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a18      	ldr	r2, [pc, #96]	@ (8006418 <HAL_DMA_IRQHandler+0x1f0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d12f      	bne.n	800641c <HAL_DMA_IRQHandler+0x1f4>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bf14      	ite	ne
 80063ca:	2301      	movne	r3, #1
 80063cc:	2300      	moveq	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	e02e      	b.n	8006430 <HAL_DMA_IRQHandler+0x208>
 80063d2:	bf00      	nop
 80063d4:	24000004 	.word	0x24000004
 80063d8:	1b4e81b5 	.word	0x1b4e81b5
 80063dc:	40020010 	.word	0x40020010
 80063e0:	40020028 	.word	0x40020028
 80063e4:	40020040 	.word	0x40020040
 80063e8:	40020058 	.word	0x40020058
 80063ec:	40020070 	.word	0x40020070
 80063f0:	40020088 	.word	0x40020088
 80063f4:	400200a0 	.word	0x400200a0
 80063f8:	400200b8 	.word	0x400200b8
 80063fc:	40020410 	.word	0x40020410
 8006400:	40020428 	.word	0x40020428
 8006404:	40020440 	.word	0x40020440
 8006408:	40020458 	.word	0x40020458
 800640c:	40020470 	.word	0x40020470
 8006410:	40020488 	.word	0x40020488
 8006414:	400204a0 	.word	0x400204a0
 8006418:	400204b8 	.word	0x400204b8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b00      	cmp	r3, #0
 8006428:	bf14      	ite	ne
 800642a:	2301      	movne	r3, #1
 800642c:	2300      	moveq	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d015      	beq.n	8006460 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0204 	bic.w	r2, r2, #4
 8006442:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006448:	f003 031f 	and.w	r3, r3, #31
 800644c:	2208      	movs	r2, #8
 800644e:	409a      	lsls	r2, r3
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006458:	f043 0201 	orr.w	r2, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	fa22 f303 	lsr.w	r3, r2, r3
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d06e      	beq.n	8006554 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a69      	ldr	r2, [pc, #420]	@ (8006620 <HAL_DMA_IRQHandler+0x3f8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d04a      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a67      	ldr	r2, [pc, #412]	@ (8006624 <HAL_DMA_IRQHandler+0x3fc>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d045      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a66      	ldr	r2, [pc, #408]	@ (8006628 <HAL_DMA_IRQHandler+0x400>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d040      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a64      	ldr	r2, [pc, #400]	@ (800662c <HAL_DMA_IRQHandler+0x404>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d03b      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a63      	ldr	r2, [pc, #396]	@ (8006630 <HAL_DMA_IRQHandler+0x408>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d036      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a61      	ldr	r2, [pc, #388]	@ (8006634 <HAL_DMA_IRQHandler+0x40c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d031      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a60      	ldr	r2, [pc, #384]	@ (8006638 <HAL_DMA_IRQHandler+0x410>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d02c      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a5e      	ldr	r2, [pc, #376]	@ (800663c <HAL_DMA_IRQHandler+0x414>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d027      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a5d      	ldr	r2, [pc, #372]	@ (8006640 <HAL_DMA_IRQHandler+0x418>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a5b      	ldr	r2, [pc, #364]	@ (8006644 <HAL_DMA_IRQHandler+0x41c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a5a      	ldr	r2, [pc, #360]	@ (8006648 <HAL_DMA_IRQHandler+0x420>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a58      	ldr	r2, [pc, #352]	@ (800664c <HAL_DMA_IRQHandler+0x424>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a57      	ldr	r2, [pc, #348]	@ (8006650 <HAL_DMA_IRQHandler+0x428>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a55      	ldr	r2, [pc, #340]	@ (8006654 <HAL_DMA_IRQHandler+0x42c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a54      	ldr	r2, [pc, #336]	@ (8006658 <HAL_DMA_IRQHandler+0x430>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_DMA_IRQHandler+0x2ee>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a52      	ldr	r2, [pc, #328]	@ (800665c <HAL_DMA_IRQHandler+0x434>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d10a      	bne.n	800652c <HAL_DMA_IRQHandler+0x304>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006520:	2b00      	cmp	r3, #0
 8006522:	bf14      	ite	ne
 8006524:	2301      	movne	r3, #1
 8006526:	2300      	moveq	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	e003      	b.n	8006534 <HAL_DMA_IRQHandler+0x30c>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00d      	beq.n	8006554 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	2201      	movs	r2, #1
 8006542:	409a      	lsls	r2, r3
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800654c:	f043 0202 	orr.w	r2, r3, #2
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006558:	f003 031f 	and.w	r3, r3, #31
 800655c:	2204      	movs	r2, #4
 800655e:	409a      	lsls	r2, r3
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	4013      	ands	r3, r2
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 808f 	beq.w	8006688 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2c      	ldr	r2, [pc, #176]	@ (8006620 <HAL_DMA_IRQHandler+0x3f8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d04a      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a2a      	ldr	r2, [pc, #168]	@ (8006624 <HAL_DMA_IRQHandler+0x3fc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d045      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a29      	ldr	r2, [pc, #164]	@ (8006628 <HAL_DMA_IRQHandler+0x400>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d040      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a27      	ldr	r2, [pc, #156]	@ (800662c <HAL_DMA_IRQHandler+0x404>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d03b      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a26      	ldr	r2, [pc, #152]	@ (8006630 <HAL_DMA_IRQHandler+0x408>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d036      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a24      	ldr	r2, [pc, #144]	@ (8006634 <HAL_DMA_IRQHandler+0x40c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d031      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a23      	ldr	r2, [pc, #140]	@ (8006638 <HAL_DMA_IRQHandler+0x410>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d02c      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a21      	ldr	r2, [pc, #132]	@ (800663c <HAL_DMA_IRQHandler+0x414>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d027      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a20      	ldr	r2, [pc, #128]	@ (8006640 <HAL_DMA_IRQHandler+0x418>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d022      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006644 <HAL_DMA_IRQHandler+0x41c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d01d      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006648 <HAL_DMA_IRQHandler+0x420>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d018      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1b      	ldr	r2, [pc, #108]	@ (800664c <HAL_DMA_IRQHandler+0x424>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d013      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006650 <HAL_DMA_IRQHandler+0x428>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00e      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <HAL_DMA_IRQHandler+0x42c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a17      	ldr	r2, [pc, #92]	@ (8006658 <HAL_DMA_IRQHandler+0x430>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d004      	beq.n	800660a <HAL_DMA_IRQHandler+0x3e2>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a15      	ldr	r2, [pc, #84]	@ (800665c <HAL_DMA_IRQHandler+0x434>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d12a      	bne.n	8006660 <HAL_DMA_IRQHandler+0x438>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	bf14      	ite	ne
 8006618:	2301      	movne	r3, #1
 800661a:	2300      	moveq	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	e023      	b.n	8006668 <HAL_DMA_IRQHandler+0x440>
 8006620:	40020010 	.word	0x40020010
 8006624:	40020028 	.word	0x40020028
 8006628:	40020040 	.word	0x40020040
 800662c:	40020058 	.word	0x40020058
 8006630:	40020070 	.word	0x40020070
 8006634:	40020088 	.word	0x40020088
 8006638:	400200a0 	.word	0x400200a0
 800663c:	400200b8 	.word	0x400200b8
 8006640:	40020410 	.word	0x40020410
 8006644:	40020428 	.word	0x40020428
 8006648:	40020440 	.word	0x40020440
 800664c:	40020458 	.word	0x40020458
 8006650:	40020470 	.word	0x40020470
 8006654:	40020488 	.word	0x40020488
 8006658:	400204a0 	.word	0x400204a0
 800665c:	400204b8 	.word	0x400204b8
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2300      	movs	r3, #0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00d      	beq.n	8006688 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	2204      	movs	r2, #4
 8006676:	409a      	lsls	r2, r3
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006680:	f043 0204 	orr.w	r2, r3, #4
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	2210      	movs	r2, #16
 8006692:	409a      	lsls	r2, r3
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	4013      	ands	r3, r2
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 80a6 	beq.w	80067ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a85      	ldr	r2, [pc, #532]	@ (80068b8 <HAL_DMA_IRQHandler+0x690>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d04a      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a83      	ldr	r2, [pc, #524]	@ (80068bc <HAL_DMA_IRQHandler+0x694>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d045      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a82      	ldr	r2, [pc, #520]	@ (80068c0 <HAL_DMA_IRQHandler+0x698>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d040      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a80      	ldr	r2, [pc, #512]	@ (80068c4 <HAL_DMA_IRQHandler+0x69c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d03b      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a7f      	ldr	r2, [pc, #508]	@ (80068c8 <HAL_DMA_IRQHandler+0x6a0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d036      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a7d      	ldr	r2, [pc, #500]	@ (80068cc <HAL_DMA_IRQHandler+0x6a4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d031      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a7c      	ldr	r2, [pc, #496]	@ (80068d0 <HAL_DMA_IRQHandler+0x6a8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d02c      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a7a      	ldr	r2, [pc, #488]	@ (80068d4 <HAL_DMA_IRQHandler+0x6ac>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d027      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a79      	ldr	r2, [pc, #484]	@ (80068d8 <HAL_DMA_IRQHandler+0x6b0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d022      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a77      	ldr	r2, [pc, #476]	@ (80068dc <HAL_DMA_IRQHandler+0x6b4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d01d      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a76      	ldr	r2, [pc, #472]	@ (80068e0 <HAL_DMA_IRQHandler+0x6b8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d018      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a74      	ldr	r2, [pc, #464]	@ (80068e4 <HAL_DMA_IRQHandler+0x6bc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a73      	ldr	r2, [pc, #460]	@ (80068e8 <HAL_DMA_IRQHandler+0x6c0>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00e      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a71      	ldr	r2, [pc, #452]	@ (80068ec <HAL_DMA_IRQHandler+0x6c4>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d009      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a70      	ldr	r2, [pc, #448]	@ (80068f0 <HAL_DMA_IRQHandler+0x6c8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d004      	beq.n	800673e <HAL_DMA_IRQHandler+0x516>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a6e      	ldr	r2, [pc, #440]	@ (80068f4 <HAL_DMA_IRQHandler+0x6cc>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d10a      	bne.n	8006754 <HAL_DMA_IRQHandler+0x52c>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	bf14      	ite	ne
 800674c:	2301      	movne	r3, #1
 800674e:	2300      	moveq	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	e009      	b.n	8006768 <HAL_DMA_IRQHandler+0x540>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	bf14      	ite	ne
 8006762:	2301      	movne	r3, #1
 8006764:	2300      	moveq	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d03e      	beq.n	80067ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006770:	f003 031f 	and.w	r3, r3, #31
 8006774:	2210      	movs	r2, #16
 8006776:	409a      	lsls	r2, r3
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d018      	beq.n	80067bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d108      	bne.n	80067aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d024      	beq.n	80067ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	4798      	blx	r3
 80067a8:	e01f      	b.n	80067ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d01b      	beq.n	80067ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	4798      	blx	r3
 80067ba:	e016      	b.n	80067ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d107      	bne.n	80067da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0208 	bic.w	r2, r2, #8
 80067d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	2220      	movs	r2, #32
 80067f4:	409a      	lsls	r2, r3
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 8110 	beq.w	8006a20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a2c      	ldr	r2, [pc, #176]	@ (80068b8 <HAL_DMA_IRQHandler+0x690>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d04a      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a2b      	ldr	r2, [pc, #172]	@ (80068bc <HAL_DMA_IRQHandler+0x694>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d045      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a29      	ldr	r2, [pc, #164]	@ (80068c0 <HAL_DMA_IRQHandler+0x698>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d040      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a28      	ldr	r2, [pc, #160]	@ (80068c4 <HAL_DMA_IRQHandler+0x69c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d03b      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a26      	ldr	r2, [pc, #152]	@ (80068c8 <HAL_DMA_IRQHandler+0x6a0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d036      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a25      	ldr	r2, [pc, #148]	@ (80068cc <HAL_DMA_IRQHandler+0x6a4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d031      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a23      	ldr	r2, [pc, #140]	@ (80068d0 <HAL_DMA_IRQHandler+0x6a8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d02c      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a22      	ldr	r2, [pc, #136]	@ (80068d4 <HAL_DMA_IRQHandler+0x6ac>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d027      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a20      	ldr	r2, [pc, #128]	@ (80068d8 <HAL_DMA_IRQHandler+0x6b0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d022      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1f      	ldr	r2, [pc, #124]	@ (80068dc <HAL_DMA_IRQHandler+0x6b4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d01d      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1d      	ldr	r2, [pc, #116]	@ (80068e0 <HAL_DMA_IRQHandler+0x6b8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d018      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1c      	ldr	r2, [pc, #112]	@ (80068e4 <HAL_DMA_IRQHandler+0x6bc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d013      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1a      	ldr	r2, [pc, #104]	@ (80068e8 <HAL_DMA_IRQHandler+0x6c0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00e      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a19      	ldr	r2, [pc, #100]	@ (80068ec <HAL_DMA_IRQHandler+0x6c4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d009      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <HAL_DMA_IRQHandler+0x6c8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d004      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x678>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a16      	ldr	r2, [pc, #88]	@ (80068f4 <HAL_DMA_IRQHandler+0x6cc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d12b      	bne.n	80068f8 <HAL_DMA_IRQHandler+0x6d0>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0310 	and.w	r3, r3, #16
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bf14      	ite	ne
 80068ae:	2301      	movne	r3, #1
 80068b0:	2300      	moveq	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	e02a      	b.n	800690c <HAL_DMA_IRQHandler+0x6e4>
 80068b6:	bf00      	nop
 80068b8:	40020010 	.word	0x40020010
 80068bc:	40020028 	.word	0x40020028
 80068c0:	40020040 	.word	0x40020040
 80068c4:	40020058 	.word	0x40020058
 80068c8:	40020070 	.word	0x40020070
 80068cc:	40020088 	.word	0x40020088
 80068d0:	400200a0 	.word	0x400200a0
 80068d4:	400200b8 	.word	0x400200b8
 80068d8:	40020410 	.word	0x40020410
 80068dc:	40020428 	.word	0x40020428
 80068e0:	40020440 	.word	0x40020440
 80068e4:	40020458 	.word	0x40020458
 80068e8:	40020470 	.word	0x40020470
 80068ec:	40020488 	.word	0x40020488
 80068f0:	400204a0 	.word	0x400204a0
 80068f4:	400204b8 	.word	0x400204b8
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	bf14      	ite	ne
 8006906:	2301      	movne	r3, #1
 8006908:	2300      	moveq	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8087 	beq.w	8006a20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	2220      	movs	r2, #32
 800691c:	409a      	lsls	r2, r3
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b04      	cmp	r3, #4
 800692c:	d139      	bne.n	80069a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0216 	bic.w	r2, r2, #22
 800693c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695a      	ldr	r2, [r3, #20]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800694c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d103      	bne.n	800695e <HAL_DMA_IRQHandler+0x736>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0208 	bic.w	r2, r2, #8
 800696c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	223f      	movs	r2, #63	@ 0x3f
 8006978:	409a      	lsls	r2, r3
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 834a 	beq.w	800702c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	4798      	blx	r3
          }
          return;
 80069a0:	e344      	b.n	800702c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d018      	beq.n	80069e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d108      	bne.n	80069d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d02c      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	4798      	blx	r3
 80069ce:	e027      	b.n	8006a20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d023      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
 80069e0:	e01e      	b.n	8006a20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10f      	bne.n	8006a10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0210 	bic.w	r2, r2, #16
 80069fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8306 	beq.w	8007036 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 8088 	beq.w	8006b48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a7a      	ldr	r2, [pc, #488]	@ (8006c30 <HAL_DMA_IRQHandler+0xa08>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d04a      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a79      	ldr	r2, [pc, #484]	@ (8006c34 <HAL_DMA_IRQHandler+0xa0c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d045      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a77      	ldr	r2, [pc, #476]	@ (8006c38 <HAL_DMA_IRQHandler+0xa10>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d040      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a76      	ldr	r2, [pc, #472]	@ (8006c3c <HAL_DMA_IRQHandler+0xa14>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d03b      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a74      	ldr	r2, [pc, #464]	@ (8006c40 <HAL_DMA_IRQHandler+0xa18>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d036      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a73      	ldr	r2, [pc, #460]	@ (8006c44 <HAL_DMA_IRQHandler+0xa1c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d031      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a71      	ldr	r2, [pc, #452]	@ (8006c48 <HAL_DMA_IRQHandler+0xa20>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d02c      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a70      	ldr	r2, [pc, #448]	@ (8006c4c <HAL_DMA_IRQHandler+0xa24>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d027      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a6e      	ldr	r2, [pc, #440]	@ (8006c50 <HAL_DMA_IRQHandler+0xa28>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d022      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a6d      	ldr	r2, [pc, #436]	@ (8006c54 <HAL_DMA_IRQHandler+0xa2c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d01d      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a6b      	ldr	r2, [pc, #428]	@ (8006c58 <HAL_DMA_IRQHandler+0xa30>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d018      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a6a      	ldr	r2, [pc, #424]	@ (8006c5c <HAL_DMA_IRQHandler+0xa34>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d013      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a68      	ldr	r2, [pc, #416]	@ (8006c60 <HAL_DMA_IRQHandler+0xa38>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00e      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a67      	ldr	r2, [pc, #412]	@ (8006c64 <HAL_DMA_IRQHandler+0xa3c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d009      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a65      	ldr	r2, [pc, #404]	@ (8006c68 <HAL_DMA_IRQHandler+0xa40>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d004      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x8b8>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a64      	ldr	r2, [pc, #400]	@ (8006c6c <HAL_DMA_IRQHandler+0xa44>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d108      	bne.n	8006af2 <HAL_DMA_IRQHandler+0x8ca>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	e007      	b.n	8006b02 <HAL_DMA_IRQHandler+0x8da>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0201 	bic.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3301      	adds	r3, #1
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d307      	bcc.n	8006b1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1f2      	bne.n	8006b02 <HAL_DMA_IRQHandler+0x8da>
 8006b1c:	e000      	b.n	8006b20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b1e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d004      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2203      	movs	r2, #3
 8006b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006b36:	e003      	b.n	8006b40 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8272 	beq.w	8007036 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
 8006b5a:	e26c      	b.n	8007036 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a43      	ldr	r2, [pc, #268]	@ (8006c70 <HAL_DMA_IRQHandler+0xa48>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <HAL_DMA_IRQHandler+0x984>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a42      	ldr	r2, [pc, #264]	@ (8006c74 <HAL_DMA_IRQHandler+0xa4c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d01d      	beq.n	8006bac <HAL_DMA_IRQHandler+0x984>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a40      	ldr	r2, [pc, #256]	@ (8006c78 <HAL_DMA_IRQHandler+0xa50>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <HAL_DMA_IRQHandler+0x984>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8006c7c <HAL_DMA_IRQHandler+0xa54>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_DMA_IRQHandler+0x984>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a3d      	ldr	r2, [pc, #244]	@ (8006c80 <HAL_DMA_IRQHandler+0xa58>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <HAL_DMA_IRQHandler+0x984>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a3c      	ldr	r2, [pc, #240]	@ (8006c84 <HAL_DMA_IRQHandler+0xa5c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_DMA_IRQHandler+0x984>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8006c88 <HAL_DMA_IRQHandler+0xa60>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_DMA_IRQHandler+0x984>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a39      	ldr	r2, [pc, #228]	@ (8006c8c <HAL_DMA_IRQHandler+0xa64>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d101      	bne.n	8006bb0 <HAL_DMA_IRQHandler+0x988>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <HAL_DMA_IRQHandler+0x98a>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 823f 	beq.w	8007036 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	2204      	movs	r2, #4
 8006bca:	409a      	lsls	r2, r3
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80cd 	beq.w	8006d70 <HAL_DMA_IRQHandler+0xb48>
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80c7 	beq.w	8006d70 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006be6:	f003 031f 	and.w	r3, r3, #31
 8006bea:	2204      	movs	r2, #4
 8006bec:	409a      	lsls	r2, r3
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d049      	beq.n	8006c90 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8210 	beq.w	8007030 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c18:	e20a      	b.n	8007030 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 8206 	beq.w	8007030 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c2c:	e200      	b.n	8007030 <HAL_DMA_IRQHandler+0xe08>
 8006c2e:	bf00      	nop
 8006c30:	40020010 	.word	0x40020010
 8006c34:	40020028 	.word	0x40020028
 8006c38:	40020040 	.word	0x40020040
 8006c3c:	40020058 	.word	0x40020058
 8006c40:	40020070 	.word	0x40020070
 8006c44:	40020088 	.word	0x40020088
 8006c48:	400200a0 	.word	0x400200a0
 8006c4c:	400200b8 	.word	0x400200b8
 8006c50:	40020410 	.word	0x40020410
 8006c54:	40020428 	.word	0x40020428
 8006c58:	40020440 	.word	0x40020440
 8006c5c:	40020458 	.word	0x40020458
 8006c60:	40020470 	.word	0x40020470
 8006c64:	40020488 	.word	0x40020488
 8006c68:	400204a0 	.word	0x400204a0
 8006c6c:	400204b8 	.word	0x400204b8
 8006c70:	58025408 	.word	0x58025408
 8006c74:	5802541c 	.word	0x5802541c
 8006c78:	58025430 	.word	0x58025430
 8006c7c:	58025444 	.word	0x58025444
 8006c80:	58025458 	.word	0x58025458
 8006c84:	5802546c 	.word	0x5802546c
 8006c88:	58025480 	.word	0x58025480
 8006c8c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d160      	bne.n	8006d5c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a7f      	ldr	r2, [pc, #508]	@ (8006e9c <HAL_DMA_IRQHandler+0xc74>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d04a      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a7d      	ldr	r2, [pc, #500]	@ (8006ea0 <HAL_DMA_IRQHandler+0xc78>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d045      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ea4 <HAL_DMA_IRQHandler+0xc7c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d040      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a7a      	ldr	r2, [pc, #488]	@ (8006ea8 <HAL_DMA_IRQHandler+0xc80>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d03b      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a79      	ldr	r2, [pc, #484]	@ (8006eac <HAL_DMA_IRQHandler+0xc84>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d036      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a77      	ldr	r2, [pc, #476]	@ (8006eb0 <HAL_DMA_IRQHandler+0xc88>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d031      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a76      	ldr	r2, [pc, #472]	@ (8006eb4 <HAL_DMA_IRQHandler+0xc8c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d02c      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a74      	ldr	r2, [pc, #464]	@ (8006eb8 <HAL_DMA_IRQHandler+0xc90>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d027      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a73      	ldr	r2, [pc, #460]	@ (8006ebc <HAL_DMA_IRQHandler+0xc94>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d022      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a71      	ldr	r2, [pc, #452]	@ (8006ec0 <HAL_DMA_IRQHandler+0xc98>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01d      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a70      	ldr	r2, [pc, #448]	@ (8006ec4 <HAL_DMA_IRQHandler+0xc9c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d018      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a6e      	ldr	r2, [pc, #440]	@ (8006ec8 <HAL_DMA_IRQHandler+0xca0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a6d      	ldr	r2, [pc, #436]	@ (8006ecc <HAL_DMA_IRQHandler+0xca4>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d00e      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a6b      	ldr	r2, [pc, #428]	@ (8006ed0 <HAL_DMA_IRQHandler+0xca8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d009      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a6a      	ldr	r2, [pc, #424]	@ (8006ed4 <HAL_DMA_IRQHandler+0xcac>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d004      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xb12>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a68      	ldr	r2, [pc, #416]	@ (8006ed8 <HAL_DMA_IRQHandler+0xcb0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d108      	bne.n	8006d4c <HAL_DMA_IRQHandler+0xb24>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0208 	bic.w	r2, r2, #8
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e007      	b.n	8006d5c <HAL_DMA_IRQHandler+0xb34>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0204 	bic.w	r2, r2, #4
 8006d5a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8165 	beq.w	8007030 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d6e:	e15f      	b.n	8007030 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2202      	movs	r2, #2
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80c5 	beq.w	8006f10 <HAL_DMA_IRQHandler+0xce8>
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 80bf 	beq.w	8006f10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	409a      	lsls	r2, r3
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d018      	beq.n	8006dde <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 813a 	beq.w	8007034 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc8:	e134      	b.n	8007034 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8130 	beq.w	8007034 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ddc:	e12a      	b.n	8007034 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f040 8089 	bne.w	8006efc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2b      	ldr	r2, [pc, #172]	@ (8006e9c <HAL_DMA_IRQHandler+0xc74>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d04a      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a29      	ldr	r2, [pc, #164]	@ (8006ea0 <HAL_DMA_IRQHandler+0xc78>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d045      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a28      	ldr	r2, [pc, #160]	@ (8006ea4 <HAL_DMA_IRQHandler+0xc7c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d040      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a26      	ldr	r2, [pc, #152]	@ (8006ea8 <HAL_DMA_IRQHandler+0xc80>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d03b      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a25      	ldr	r2, [pc, #148]	@ (8006eac <HAL_DMA_IRQHandler+0xc84>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d036      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a23      	ldr	r2, [pc, #140]	@ (8006eb0 <HAL_DMA_IRQHandler+0xc88>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d031      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a22      	ldr	r2, [pc, #136]	@ (8006eb4 <HAL_DMA_IRQHandler+0xc8c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d02c      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a20      	ldr	r2, [pc, #128]	@ (8006eb8 <HAL_DMA_IRQHandler+0xc90>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d027      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ebc <HAL_DMA_IRQHandler+0xc94>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d022      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1d      	ldr	r2, [pc, #116]	@ (8006ec0 <HAL_DMA_IRQHandler+0xc98>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d01d      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec4 <HAL_DMA_IRQHandler+0xc9c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d018      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec8 <HAL_DMA_IRQHandler+0xca0>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a19      	ldr	r2, [pc, #100]	@ (8006ecc <HAL_DMA_IRQHandler+0xca4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00e      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a17      	ldr	r2, [pc, #92]	@ (8006ed0 <HAL_DMA_IRQHandler+0xca8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a16      	ldr	r2, [pc, #88]	@ (8006ed4 <HAL_DMA_IRQHandler+0xcac>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <HAL_DMA_IRQHandler+0xc62>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a14      	ldr	r2, [pc, #80]	@ (8006ed8 <HAL_DMA_IRQHandler+0xcb0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d128      	bne.n	8006edc <HAL_DMA_IRQHandler+0xcb4>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0214 	bic.w	r2, r2, #20
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	e027      	b.n	8006eec <HAL_DMA_IRQHandler+0xcc4>
 8006e9c:	40020010 	.word	0x40020010
 8006ea0:	40020028 	.word	0x40020028
 8006ea4:	40020040 	.word	0x40020040
 8006ea8:	40020058 	.word	0x40020058
 8006eac:	40020070 	.word	0x40020070
 8006eb0:	40020088 	.word	0x40020088
 8006eb4:	400200a0 	.word	0x400200a0
 8006eb8:	400200b8 	.word	0x400200b8
 8006ebc:	40020410 	.word	0x40020410
 8006ec0:	40020428 	.word	0x40020428
 8006ec4:	40020440 	.word	0x40020440
 8006ec8:	40020458 	.word	0x40020458
 8006ecc:	40020470 	.word	0x40020470
 8006ed0:	40020488 	.word	0x40020488
 8006ed4:	400204a0 	.word	0x400204a0
 8006ed8:	400204b8 	.word	0x400204b8
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 020a 	bic.w	r2, r2, #10
 8006eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 8097 	beq.w	8007034 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f0e:	e091      	b.n	8007034 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	2208      	movs	r2, #8
 8006f1a:	409a      	lsls	r2, r3
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8088 	beq.w	8007036 <HAL_DMA_IRQHandler+0xe0e>
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8082 	beq.w	8007036 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a41      	ldr	r2, [pc, #260]	@ (800703c <HAL_DMA_IRQHandler+0xe14>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d04a      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a3f      	ldr	r2, [pc, #252]	@ (8007040 <HAL_DMA_IRQHandler+0xe18>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d045      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8007044 <HAL_DMA_IRQHandler+0xe1c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d040      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a3c      	ldr	r2, [pc, #240]	@ (8007048 <HAL_DMA_IRQHandler+0xe20>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d03b      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800704c <HAL_DMA_IRQHandler+0xe24>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d036      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a39      	ldr	r2, [pc, #228]	@ (8007050 <HAL_DMA_IRQHandler+0xe28>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d031      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a38      	ldr	r2, [pc, #224]	@ (8007054 <HAL_DMA_IRQHandler+0xe2c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d02c      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a36      	ldr	r2, [pc, #216]	@ (8007058 <HAL_DMA_IRQHandler+0xe30>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d027      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a35      	ldr	r2, [pc, #212]	@ (800705c <HAL_DMA_IRQHandler+0xe34>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d022      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a33      	ldr	r2, [pc, #204]	@ (8007060 <HAL_DMA_IRQHandler+0xe38>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01d      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a32      	ldr	r2, [pc, #200]	@ (8007064 <HAL_DMA_IRQHandler+0xe3c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d018      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a30      	ldr	r2, [pc, #192]	@ (8007068 <HAL_DMA_IRQHandler+0xe40>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a2f      	ldr	r2, [pc, #188]	@ (800706c <HAL_DMA_IRQHandler+0xe44>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8007070 <HAL_DMA_IRQHandler+0xe48>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8007074 <HAL_DMA_IRQHandler+0xe4c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xdaa>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8007078 <HAL_DMA_IRQHandler+0xe50>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d108      	bne.n	8006fe4 <HAL_DMA_IRQHandler+0xdbc>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 021c 	bic.w	r2, r2, #28
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e007      	b.n	8006ff4 <HAL_DMA_IRQHandler+0xdcc>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 020e 	bic.w	r2, r2, #14
 8006ff2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff8:	f003 031f 	and.w	r3, r3, #31
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	409a      	lsls	r2, r3
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d009      	beq.n	8007036 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
 800702a:	e004      	b.n	8007036 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800702c:	bf00      	nop
 800702e:	e002      	b.n	8007036 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007030:	bf00      	nop
 8007032:	e000      	b.n	8007036 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007034:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007036:	3728      	adds	r7, #40	@ 0x28
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	40020010 	.word	0x40020010
 8007040:	40020028 	.word	0x40020028
 8007044:	40020040 	.word	0x40020040
 8007048:	40020058 	.word	0x40020058
 800704c:	40020070 	.word	0x40020070
 8007050:	40020088 	.word	0x40020088
 8007054:	400200a0 	.word	0x400200a0
 8007058:	400200b8 	.word	0x400200b8
 800705c:	40020410 	.word	0x40020410
 8007060:	40020428 	.word	0x40020428
 8007064:	40020440 	.word	0x40020440
 8007068:	40020458 	.word	0x40020458
 800706c:	40020470 	.word	0x40020470
 8007070:	40020488 	.word	0x40020488
 8007074:	400204a0 	.word	0x400204a0
 8007078:	400204b8 	.word	0x400204b8

0800707c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a7f      	ldr	r2, [pc, #508]	@ (80072b0 <DMA_SetConfig+0x21c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d072      	beq.n	800719e <DMA_SetConfig+0x10a>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a7d      	ldr	r2, [pc, #500]	@ (80072b4 <DMA_SetConfig+0x220>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d06d      	beq.n	800719e <DMA_SetConfig+0x10a>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a7c      	ldr	r2, [pc, #496]	@ (80072b8 <DMA_SetConfig+0x224>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d068      	beq.n	800719e <DMA_SetConfig+0x10a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a7a      	ldr	r2, [pc, #488]	@ (80072bc <DMA_SetConfig+0x228>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d063      	beq.n	800719e <DMA_SetConfig+0x10a>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a79      	ldr	r2, [pc, #484]	@ (80072c0 <DMA_SetConfig+0x22c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d05e      	beq.n	800719e <DMA_SetConfig+0x10a>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a77      	ldr	r2, [pc, #476]	@ (80072c4 <DMA_SetConfig+0x230>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d059      	beq.n	800719e <DMA_SetConfig+0x10a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a76      	ldr	r2, [pc, #472]	@ (80072c8 <DMA_SetConfig+0x234>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d054      	beq.n	800719e <DMA_SetConfig+0x10a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a74      	ldr	r2, [pc, #464]	@ (80072cc <DMA_SetConfig+0x238>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d04f      	beq.n	800719e <DMA_SetConfig+0x10a>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a73      	ldr	r2, [pc, #460]	@ (80072d0 <DMA_SetConfig+0x23c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d04a      	beq.n	800719e <DMA_SetConfig+0x10a>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a71      	ldr	r2, [pc, #452]	@ (80072d4 <DMA_SetConfig+0x240>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d045      	beq.n	800719e <DMA_SetConfig+0x10a>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a70      	ldr	r2, [pc, #448]	@ (80072d8 <DMA_SetConfig+0x244>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d040      	beq.n	800719e <DMA_SetConfig+0x10a>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a6e      	ldr	r2, [pc, #440]	@ (80072dc <DMA_SetConfig+0x248>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d03b      	beq.n	800719e <DMA_SetConfig+0x10a>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a6d      	ldr	r2, [pc, #436]	@ (80072e0 <DMA_SetConfig+0x24c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d036      	beq.n	800719e <DMA_SetConfig+0x10a>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a6b      	ldr	r2, [pc, #428]	@ (80072e4 <DMA_SetConfig+0x250>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d031      	beq.n	800719e <DMA_SetConfig+0x10a>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a6a      	ldr	r2, [pc, #424]	@ (80072e8 <DMA_SetConfig+0x254>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d02c      	beq.n	800719e <DMA_SetConfig+0x10a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a68      	ldr	r2, [pc, #416]	@ (80072ec <DMA_SetConfig+0x258>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d027      	beq.n	800719e <DMA_SetConfig+0x10a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a67      	ldr	r2, [pc, #412]	@ (80072f0 <DMA_SetConfig+0x25c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d022      	beq.n	800719e <DMA_SetConfig+0x10a>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a65      	ldr	r2, [pc, #404]	@ (80072f4 <DMA_SetConfig+0x260>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d01d      	beq.n	800719e <DMA_SetConfig+0x10a>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a64      	ldr	r2, [pc, #400]	@ (80072f8 <DMA_SetConfig+0x264>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d018      	beq.n	800719e <DMA_SetConfig+0x10a>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a62      	ldr	r2, [pc, #392]	@ (80072fc <DMA_SetConfig+0x268>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d013      	beq.n	800719e <DMA_SetConfig+0x10a>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a61      	ldr	r2, [pc, #388]	@ (8007300 <DMA_SetConfig+0x26c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00e      	beq.n	800719e <DMA_SetConfig+0x10a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a5f      	ldr	r2, [pc, #380]	@ (8007304 <DMA_SetConfig+0x270>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d009      	beq.n	800719e <DMA_SetConfig+0x10a>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a5e      	ldr	r2, [pc, #376]	@ (8007308 <DMA_SetConfig+0x274>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d004      	beq.n	800719e <DMA_SetConfig+0x10a>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a5c      	ldr	r2, [pc, #368]	@ (800730c <DMA_SetConfig+0x278>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d101      	bne.n	80071a2 <DMA_SetConfig+0x10e>
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <DMA_SetConfig+0x110>
 80071a2:	2300      	movs	r3, #0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00d      	beq.n	80071c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80071b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80071c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a39      	ldr	r2, [pc, #228]	@ (80072b0 <DMA_SetConfig+0x21c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d04a      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a38      	ldr	r2, [pc, #224]	@ (80072b4 <DMA_SetConfig+0x220>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d045      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a36      	ldr	r2, [pc, #216]	@ (80072b8 <DMA_SetConfig+0x224>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d040      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a35      	ldr	r2, [pc, #212]	@ (80072bc <DMA_SetConfig+0x228>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d03b      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a33      	ldr	r2, [pc, #204]	@ (80072c0 <DMA_SetConfig+0x22c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d036      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a32      	ldr	r2, [pc, #200]	@ (80072c4 <DMA_SetConfig+0x230>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d031      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a30      	ldr	r2, [pc, #192]	@ (80072c8 <DMA_SetConfig+0x234>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d02c      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2f      	ldr	r2, [pc, #188]	@ (80072cc <DMA_SetConfig+0x238>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d027      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2d      	ldr	r2, [pc, #180]	@ (80072d0 <DMA_SetConfig+0x23c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d022      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a2c      	ldr	r2, [pc, #176]	@ (80072d4 <DMA_SetConfig+0x240>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d01d      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a2a      	ldr	r2, [pc, #168]	@ (80072d8 <DMA_SetConfig+0x244>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d018      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a29      	ldr	r2, [pc, #164]	@ (80072dc <DMA_SetConfig+0x248>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d013      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a27      	ldr	r2, [pc, #156]	@ (80072e0 <DMA_SetConfig+0x24c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00e      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a26      	ldr	r2, [pc, #152]	@ (80072e4 <DMA_SetConfig+0x250>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d009      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a24      	ldr	r2, [pc, #144]	@ (80072e8 <DMA_SetConfig+0x254>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d004      	beq.n	8007264 <DMA_SetConfig+0x1d0>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a23      	ldr	r2, [pc, #140]	@ (80072ec <DMA_SetConfig+0x258>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d101      	bne.n	8007268 <DMA_SetConfig+0x1d4>
 8007264:	2301      	movs	r3, #1
 8007266:	e000      	b.n	800726a <DMA_SetConfig+0x1d6>
 8007268:	2300      	movs	r3, #0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d059      	beq.n	8007322 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007272:	f003 031f 	and.w	r3, r3, #31
 8007276:	223f      	movs	r2, #63	@ 0x3f
 8007278:	409a      	lsls	r2, r3
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800728c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2b40      	cmp	r3, #64	@ 0x40
 800729c:	d138      	bne.n	8007310 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072ae:	e086      	b.n	80073be <DMA_SetConfig+0x32a>
 80072b0:	40020010 	.word	0x40020010
 80072b4:	40020028 	.word	0x40020028
 80072b8:	40020040 	.word	0x40020040
 80072bc:	40020058 	.word	0x40020058
 80072c0:	40020070 	.word	0x40020070
 80072c4:	40020088 	.word	0x40020088
 80072c8:	400200a0 	.word	0x400200a0
 80072cc:	400200b8 	.word	0x400200b8
 80072d0:	40020410 	.word	0x40020410
 80072d4:	40020428 	.word	0x40020428
 80072d8:	40020440 	.word	0x40020440
 80072dc:	40020458 	.word	0x40020458
 80072e0:	40020470 	.word	0x40020470
 80072e4:	40020488 	.word	0x40020488
 80072e8:	400204a0 	.word	0x400204a0
 80072ec:	400204b8 	.word	0x400204b8
 80072f0:	58025408 	.word	0x58025408
 80072f4:	5802541c 	.word	0x5802541c
 80072f8:	58025430 	.word	0x58025430
 80072fc:	58025444 	.word	0x58025444
 8007300:	58025458 	.word	0x58025458
 8007304:	5802546c 	.word	0x5802546c
 8007308:	58025480 	.word	0x58025480
 800730c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	60da      	str	r2, [r3, #12]
}
 8007320:	e04d      	b.n	80073be <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a29      	ldr	r2, [pc, #164]	@ (80073cc <DMA_SetConfig+0x338>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d022      	beq.n	8007372 <DMA_SetConfig+0x2de>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a27      	ldr	r2, [pc, #156]	@ (80073d0 <DMA_SetConfig+0x33c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d01d      	beq.n	8007372 <DMA_SetConfig+0x2de>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a26      	ldr	r2, [pc, #152]	@ (80073d4 <DMA_SetConfig+0x340>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d018      	beq.n	8007372 <DMA_SetConfig+0x2de>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a24      	ldr	r2, [pc, #144]	@ (80073d8 <DMA_SetConfig+0x344>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <DMA_SetConfig+0x2de>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a23      	ldr	r2, [pc, #140]	@ (80073dc <DMA_SetConfig+0x348>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d00e      	beq.n	8007372 <DMA_SetConfig+0x2de>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a21      	ldr	r2, [pc, #132]	@ (80073e0 <DMA_SetConfig+0x34c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d009      	beq.n	8007372 <DMA_SetConfig+0x2de>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a20      	ldr	r2, [pc, #128]	@ (80073e4 <DMA_SetConfig+0x350>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d004      	beq.n	8007372 <DMA_SetConfig+0x2de>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a1e      	ldr	r2, [pc, #120]	@ (80073e8 <DMA_SetConfig+0x354>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d101      	bne.n	8007376 <DMA_SetConfig+0x2e2>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <DMA_SetConfig+0x2e4>
 8007376:	2300      	movs	r3, #0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d020      	beq.n	80073be <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	2201      	movs	r2, #1
 8007386:	409a      	lsls	r2, r3
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b40      	cmp	r3, #64	@ 0x40
 800739a:	d108      	bne.n	80073ae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	60da      	str	r2, [r3, #12]
}
 80073ac:	e007      	b.n	80073be <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	60da      	str	r2, [r3, #12]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	58025408 	.word	0x58025408
 80073d0:	5802541c 	.word	0x5802541c
 80073d4:	58025430 	.word	0x58025430
 80073d8:	58025444 	.word	0x58025444
 80073dc:	58025458 	.word	0x58025458
 80073e0:	5802546c 	.word	0x5802546c
 80073e4:	58025480 	.word	0x58025480
 80073e8:	58025494 	.word	0x58025494

080073ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a42      	ldr	r2, [pc, #264]	@ (8007504 <DMA_CalcBaseAndBitshift+0x118>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d04a      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a41      	ldr	r2, [pc, #260]	@ (8007508 <DMA_CalcBaseAndBitshift+0x11c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d045      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a3f      	ldr	r2, [pc, #252]	@ (800750c <DMA_CalcBaseAndBitshift+0x120>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d040      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a3e      	ldr	r2, [pc, #248]	@ (8007510 <DMA_CalcBaseAndBitshift+0x124>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d03b      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a3c      	ldr	r2, [pc, #240]	@ (8007514 <DMA_CalcBaseAndBitshift+0x128>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d036      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a3b      	ldr	r2, [pc, #236]	@ (8007518 <DMA_CalcBaseAndBitshift+0x12c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d031      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a39      	ldr	r2, [pc, #228]	@ (800751c <DMA_CalcBaseAndBitshift+0x130>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d02c      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a38      	ldr	r2, [pc, #224]	@ (8007520 <DMA_CalcBaseAndBitshift+0x134>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d027      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a36      	ldr	r2, [pc, #216]	@ (8007524 <DMA_CalcBaseAndBitshift+0x138>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d022      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a35      	ldr	r2, [pc, #212]	@ (8007528 <DMA_CalcBaseAndBitshift+0x13c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d01d      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a33      	ldr	r2, [pc, #204]	@ (800752c <DMA_CalcBaseAndBitshift+0x140>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d018      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a32      	ldr	r2, [pc, #200]	@ (8007530 <DMA_CalcBaseAndBitshift+0x144>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d013      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a30      	ldr	r2, [pc, #192]	@ (8007534 <DMA_CalcBaseAndBitshift+0x148>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00e      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a2f      	ldr	r2, [pc, #188]	@ (8007538 <DMA_CalcBaseAndBitshift+0x14c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d009      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a2d      	ldr	r2, [pc, #180]	@ (800753c <DMA_CalcBaseAndBitshift+0x150>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d004      	beq.n	8007494 <DMA_CalcBaseAndBitshift+0xa8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a2c      	ldr	r2, [pc, #176]	@ (8007540 <DMA_CalcBaseAndBitshift+0x154>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d101      	bne.n	8007498 <DMA_CalcBaseAndBitshift+0xac>
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <DMA_CalcBaseAndBitshift+0xae>
 8007498:	2300      	movs	r3, #0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d024      	beq.n	80074e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	3b10      	subs	r3, #16
 80074a6:	4a27      	ldr	r2, [pc, #156]	@ (8007544 <DMA_CalcBaseAndBitshift+0x158>)
 80074a8:	fba2 2303 	umull	r2, r3, r2, r3
 80074ac:	091b      	lsrs	r3, r3, #4
 80074ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	4a24      	ldr	r2, [pc, #144]	@ (8007548 <DMA_CalcBaseAndBitshift+0x15c>)
 80074b8:	5cd3      	ldrb	r3, [r2, r3]
 80074ba:	461a      	mov	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d908      	bls.n	80074d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	4b1f      	ldr	r3, [pc, #124]	@ (800754c <DMA_CalcBaseAndBitshift+0x160>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	1d1a      	adds	r2, r3, #4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80074d6:	e00d      	b.n	80074f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	4b1b      	ldr	r3, [pc, #108]	@ (800754c <DMA_CalcBaseAndBitshift+0x160>)
 80074e0:	4013      	ands	r3, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80074e6:	e005      	b.n	80074f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	40020010 	.word	0x40020010
 8007508:	40020028 	.word	0x40020028
 800750c:	40020040 	.word	0x40020040
 8007510:	40020058 	.word	0x40020058
 8007514:	40020070 	.word	0x40020070
 8007518:	40020088 	.word	0x40020088
 800751c:	400200a0 	.word	0x400200a0
 8007520:	400200b8 	.word	0x400200b8
 8007524:	40020410 	.word	0x40020410
 8007528:	40020428 	.word	0x40020428
 800752c:	40020440 	.word	0x40020440
 8007530:	40020458 	.word	0x40020458
 8007534:	40020470 	.word	0x40020470
 8007538:	40020488 	.word	0x40020488
 800753c:	400204a0 	.word	0x400204a0
 8007540:	400204b8 	.word	0x400204b8
 8007544:	aaaaaaab 	.word	0xaaaaaaab
 8007548:	08023588 	.word	0x08023588
 800754c:	fffffc00 	.word	0xfffffc00

08007550 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d120      	bne.n	80075a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007568:	2b03      	cmp	r3, #3
 800756a:	d858      	bhi.n	800761e <DMA_CheckFifoParam+0xce>
 800756c:	a201      	add	r2, pc, #4	@ (adr r2, 8007574 <DMA_CheckFifoParam+0x24>)
 800756e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007572:	bf00      	nop
 8007574:	08007585 	.word	0x08007585
 8007578:	08007597 	.word	0x08007597
 800757c:	08007585 	.word	0x08007585
 8007580:	0800761f 	.word	0x0800761f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d048      	beq.n	8007622 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007594:	e045      	b.n	8007622 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800759e:	d142      	bne.n	8007626 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075a4:	e03f      	b.n	8007626 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075ae:	d123      	bne.n	80075f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d838      	bhi.n	800762a <DMA_CheckFifoParam+0xda>
 80075b8:	a201      	add	r2, pc, #4	@ (adr r2, 80075c0 <DMA_CheckFifoParam+0x70>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	080075d1 	.word	0x080075d1
 80075c4:	080075d7 	.word	0x080075d7
 80075c8:	080075d1 	.word	0x080075d1
 80075cc:	080075e9 	.word	0x080075e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
        break;
 80075d4:	e030      	b.n	8007638 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d025      	beq.n	800762e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075e6:	e022      	b.n	800762e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075f0:	d11f      	bne.n	8007632 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075f6:	e01c      	b.n	8007632 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d902      	bls.n	8007606 <DMA_CheckFifoParam+0xb6>
 8007600:	2b03      	cmp	r3, #3
 8007602:	d003      	beq.n	800760c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007604:	e018      	b.n	8007638 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	73fb      	strb	r3, [r7, #15]
        break;
 800760a:	e015      	b.n	8007638 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
    break;
 800761c:	e00b      	b.n	8007636 <DMA_CheckFifoParam+0xe6>
        break;
 800761e:	bf00      	nop
 8007620:	e00a      	b.n	8007638 <DMA_CheckFifoParam+0xe8>
        break;
 8007622:	bf00      	nop
 8007624:	e008      	b.n	8007638 <DMA_CheckFifoParam+0xe8>
        break;
 8007626:	bf00      	nop
 8007628:	e006      	b.n	8007638 <DMA_CheckFifoParam+0xe8>
        break;
 800762a:	bf00      	nop
 800762c:	e004      	b.n	8007638 <DMA_CheckFifoParam+0xe8>
        break;
 800762e:	bf00      	nop
 8007630:	e002      	b.n	8007638 <DMA_CheckFifoParam+0xe8>
        break;
 8007632:	bf00      	nop
 8007634:	e000      	b.n	8007638 <DMA_CheckFifoParam+0xe8>
    break;
 8007636:	bf00      	nop
    }
  }

  return status;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop

08007648 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a38      	ldr	r2, [pc, #224]	@ (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d022      	beq.n	80076a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a36      	ldr	r2, [pc, #216]	@ (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d01d      	beq.n	80076a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a35      	ldr	r2, [pc, #212]	@ (8007744 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d018      	beq.n	80076a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a33      	ldr	r2, [pc, #204]	@ (8007748 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d013      	beq.n	80076a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a32      	ldr	r2, [pc, #200]	@ (800774c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00e      	beq.n	80076a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a30      	ldr	r2, [pc, #192]	@ (8007750 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d009      	beq.n	80076a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a2f      	ldr	r2, [pc, #188]	@ (8007754 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d004      	beq.n	80076a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007758 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d101      	bne.n	80076aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80076a6:	2301      	movs	r3, #1
 80076a8:	e000      	b.n	80076ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80076aa:	2300      	movs	r3, #0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01a      	beq.n	80076e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	3b08      	subs	r3, #8
 80076b8:	4a28      	ldr	r2, [pc, #160]	@ (800775c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80076ba:	fba2 2303 	umull	r2, r3, r2, r3
 80076be:	091b      	lsrs	r3, r3, #4
 80076c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	4b26      	ldr	r3, [pc, #152]	@ (8007760 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	461a      	mov	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a24      	ldr	r2, [pc, #144]	@ (8007764 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80076d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	2201      	movs	r2, #1
 80076de:	409a      	lsls	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80076e4:	e024      	b.n	8007730 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	3b10      	subs	r3, #16
 80076ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007768 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076f0:	fba2 2303 	umull	r2, r3, r2, r3
 80076f4:	091b      	lsrs	r3, r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4a1c      	ldr	r2, [pc, #112]	@ (800776c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d806      	bhi.n	800770e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4a1b      	ldr	r2, [pc, #108]	@ (8007770 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d902      	bls.n	800770e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3308      	adds	r3, #8
 800770c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4b18      	ldr	r3, [pc, #96]	@ (8007774 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	461a      	mov	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a16      	ldr	r2, [pc, #88]	@ (8007778 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007720:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f003 031f 	and.w	r3, r3, #31
 8007728:	2201      	movs	r2, #1
 800772a:	409a      	lsls	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007730:	bf00      	nop
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	58025408 	.word	0x58025408
 8007740:	5802541c 	.word	0x5802541c
 8007744:	58025430 	.word	0x58025430
 8007748:	58025444 	.word	0x58025444
 800774c:	58025458 	.word	0x58025458
 8007750:	5802546c 	.word	0x5802546c
 8007754:	58025480 	.word	0x58025480
 8007758:	58025494 	.word	0x58025494
 800775c:	cccccccd 	.word	0xcccccccd
 8007760:	16009600 	.word	0x16009600
 8007764:	58025880 	.word	0x58025880
 8007768:	aaaaaaab 	.word	0xaaaaaaab
 800776c:	400204b8 	.word	0x400204b8
 8007770:	4002040f 	.word	0x4002040f
 8007774:	10008200 	.word	0x10008200
 8007778:	40020880 	.word	0x40020880

0800777c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d04a      	beq.n	8007828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b08      	cmp	r3, #8
 8007796:	d847      	bhi.n	8007828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a25      	ldr	r2, [pc, #148]	@ (8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d022      	beq.n	80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a24      	ldr	r2, [pc, #144]	@ (8007838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d01d      	beq.n	80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a22      	ldr	r2, [pc, #136]	@ (800783c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d018      	beq.n	80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a21      	ldr	r2, [pc, #132]	@ (8007840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00e      	beq.n	80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d009      	beq.n	80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1c      	ldr	r2, [pc, #112]	@ (800784c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d004      	beq.n	80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d101      	bne.n	80077ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80077e8:	2301      	movs	r3, #1
 80077ea:	e000      	b.n	80077ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077ec:	2300      	movs	r3, #0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00a      	beq.n	8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4b17      	ldr	r3, [pc, #92]	@ (8007854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	461a      	mov	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a15      	ldr	r2, [pc, #84]	@ (8007858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007804:	671a      	str	r2, [r3, #112]	@ 0x70
 8007806:	e009      	b.n	800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4b14      	ldr	r3, [pc, #80]	@ (800785c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	461a      	mov	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a11      	ldr	r2, [pc, #68]	@ (8007860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800781a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3b01      	subs	r3, #1
 8007820:	2201      	movs	r2, #1
 8007822:	409a      	lsls	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007828:	bf00      	nop
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	58025408 	.word	0x58025408
 8007838:	5802541c 	.word	0x5802541c
 800783c:	58025430 	.word	0x58025430
 8007840:	58025444 	.word	0x58025444
 8007844:	58025458 	.word	0x58025458
 8007848:	5802546c 	.word	0x5802546c
 800784c:	58025480 	.word	0x58025480
 8007850:	58025494 	.word	0x58025494
 8007854:	1600963f 	.word	0x1600963f
 8007858:	58025940 	.word	0x58025940
 800785c:	1000823f 	.word	0x1000823f
 8007860:	40020940 	.word	0x40020940

08007864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007864:	b480      	push	{r7}
 8007866:	b089      	sub	sp, #36	@ 0x24
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007872:	4b89      	ldr	r3, [pc, #548]	@ (8007a98 <HAL_GPIO_Init+0x234>)
 8007874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007876:	e194      	b.n	8007ba2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	2101      	movs	r1, #1
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	fa01 f303 	lsl.w	r3, r1, r3
 8007884:	4013      	ands	r3, r2
 8007886:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 8186 	beq.w	8007b9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	2b01      	cmp	r3, #1
 800789a:	d005      	beq.n	80078a8 <HAL_GPIO_Init+0x44>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d130      	bne.n	800790a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	2203      	movs	r2, #3
 80078b4:	fa02 f303 	lsl.w	r3, r2, r3
 80078b8:	43db      	mvns	r3, r3
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	4013      	ands	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	fa02 f303 	lsl.w	r3, r2, r3
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078de:	2201      	movs	r2, #1
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	fa02 f303 	lsl.w	r3, r2, r3
 80078e6:	43db      	mvns	r3, r3
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	4013      	ands	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	091b      	lsrs	r3, r3, #4
 80078f4:	f003 0201 	and.w	r2, r3, #1
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	4313      	orrs	r3, r2
 8007902:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f003 0303 	and.w	r3, r3, #3
 8007912:	2b03      	cmp	r3, #3
 8007914:	d017      	beq.n	8007946 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	2203      	movs	r2, #3
 8007922:	fa02 f303 	lsl.w	r3, r2, r3
 8007926:	43db      	mvns	r3, r3
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4013      	ands	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	4313      	orrs	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d123      	bne.n	800799a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	08da      	lsrs	r2, r3, #3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3208      	adds	r2, #8
 800795a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	220f      	movs	r2, #15
 800796a:	fa02 f303 	lsl.w	r3, r2, r3
 800796e:	43db      	mvns	r3, r3
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	4013      	ands	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	691a      	ldr	r2, [r3, #16]
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	4313      	orrs	r3, r2
 800798a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	08da      	lsrs	r2, r3, #3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3208      	adds	r2, #8
 8007994:	69b9      	ldr	r1, [r7, #24]
 8007996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	2203      	movs	r2, #3
 80079a6:	fa02 f303 	lsl.w	r3, r2, r3
 80079aa:	43db      	mvns	r3, r3
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	4013      	ands	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f003 0203 	and.w	r2, r3, #3
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	fa02 f303 	lsl.w	r3, r2, r3
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 80e0 	beq.w	8007b9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079dc:	4b2f      	ldr	r3, [pc, #188]	@ (8007a9c <HAL_GPIO_Init+0x238>)
 80079de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079e2:	4a2e      	ldr	r2, [pc, #184]	@ (8007a9c <HAL_GPIO_Init+0x238>)
 80079e4:	f043 0302 	orr.w	r3, r3, #2
 80079e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80079ec:	4b2b      	ldr	r3, [pc, #172]	@ (8007a9c <HAL_GPIO_Init+0x238>)
 80079ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079fa:	4a29      	ldr	r2, [pc, #164]	@ (8007aa0 <HAL_GPIO_Init+0x23c>)
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	089b      	lsrs	r3, r3, #2
 8007a00:	3302      	adds	r3, #2
 8007a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	220f      	movs	r2, #15
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	43db      	mvns	r3, r3
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a20      	ldr	r2, [pc, #128]	@ (8007aa4 <HAL_GPIO_Init+0x240>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d052      	beq.n	8007acc <HAL_GPIO_Init+0x268>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1f      	ldr	r2, [pc, #124]	@ (8007aa8 <HAL_GPIO_Init+0x244>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d031      	beq.n	8007a92 <HAL_GPIO_Init+0x22e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a1e      	ldr	r2, [pc, #120]	@ (8007aac <HAL_GPIO_Init+0x248>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d02b      	beq.n	8007a8e <HAL_GPIO_Init+0x22a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab0 <HAL_GPIO_Init+0x24c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d025      	beq.n	8007a8a <HAL_GPIO_Init+0x226>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab4 <HAL_GPIO_Init+0x250>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d01f      	beq.n	8007a86 <HAL_GPIO_Init+0x222>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab8 <HAL_GPIO_Init+0x254>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d019      	beq.n	8007a82 <HAL_GPIO_Init+0x21e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a1a      	ldr	r2, [pc, #104]	@ (8007abc <HAL_GPIO_Init+0x258>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d013      	beq.n	8007a7e <HAL_GPIO_Init+0x21a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a19      	ldr	r2, [pc, #100]	@ (8007ac0 <HAL_GPIO_Init+0x25c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00d      	beq.n	8007a7a <HAL_GPIO_Init+0x216>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a18      	ldr	r2, [pc, #96]	@ (8007ac4 <HAL_GPIO_Init+0x260>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <HAL_GPIO_Init+0x212>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a17      	ldr	r2, [pc, #92]	@ (8007ac8 <HAL_GPIO_Init+0x264>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d101      	bne.n	8007a72 <HAL_GPIO_Init+0x20e>
 8007a6e:	2309      	movs	r3, #9
 8007a70:	e02d      	b.n	8007ace <HAL_GPIO_Init+0x26a>
 8007a72:	230a      	movs	r3, #10
 8007a74:	e02b      	b.n	8007ace <HAL_GPIO_Init+0x26a>
 8007a76:	2308      	movs	r3, #8
 8007a78:	e029      	b.n	8007ace <HAL_GPIO_Init+0x26a>
 8007a7a:	2307      	movs	r3, #7
 8007a7c:	e027      	b.n	8007ace <HAL_GPIO_Init+0x26a>
 8007a7e:	2306      	movs	r3, #6
 8007a80:	e025      	b.n	8007ace <HAL_GPIO_Init+0x26a>
 8007a82:	2305      	movs	r3, #5
 8007a84:	e023      	b.n	8007ace <HAL_GPIO_Init+0x26a>
 8007a86:	2304      	movs	r3, #4
 8007a88:	e021      	b.n	8007ace <HAL_GPIO_Init+0x26a>
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e01f      	b.n	8007ace <HAL_GPIO_Init+0x26a>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e01d      	b.n	8007ace <HAL_GPIO_Init+0x26a>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e01b      	b.n	8007ace <HAL_GPIO_Init+0x26a>
 8007a96:	bf00      	nop
 8007a98:	58000080 	.word	0x58000080
 8007a9c:	58024400 	.word	0x58024400
 8007aa0:	58000400 	.word	0x58000400
 8007aa4:	58020000 	.word	0x58020000
 8007aa8:	58020400 	.word	0x58020400
 8007aac:	58020800 	.word	0x58020800
 8007ab0:	58020c00 	.word	0x58020c00
 8007ab4:	58021000 	.word	0x58021000
 8007ab8:	58021400 	.word	0x58021400
 8007abc:	58021800 	.word	0x58021800
 8007ac0:	58021c00 	.word	0x58021c00
 8007ac4:	58022000 	.word	0x58022000
 8007ac8:	58022400 	.word	0x58022400
 8007acc:	2300      	movs	r3, #0
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	f002 0203 	and.w	r2, r2, #3
 8007ad4:	0092      	lsls	r2, r2, #2
 8007ad6:	4093      	lsls	r3, r2
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ade:	4938      	ldr	r1, [pc, #224]	@ (8007bc0 <HAL_GPIO_Init+0x35c>)
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	089b      	lsrs	r3, r3, #2
 8007ae4:	3302      	adds	r3, #2
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	43db      	mvns	r3, r3
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	4013      	ands	r3, r2
 8007afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007b12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	43db      	mvns	r3, r3
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	43db      	mvns	r3, r3
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	4013      	ands	r3, r2
 8007b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	43db      	mvns	r3, r3
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f47f ae63 	bne.w	8007878 <HAL_GPIO_Init+0x14>
  }
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	3724      	adds	r7, #36	@ 0x24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	58000400 	.word	0x58000400

08007bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	807b      	strh	r3, [r7, #2]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007bd4:	787b      	ldrb	r3, [r7, #1]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bda:	887a      	ldrh	r2, [r7, #2]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007be0:	e003      	b.n	8007bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007be2:	887b      	ldrh	r3, [r7, #2]
 8007be4:	041a      	lsls	r2, r3, #16
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	619a      	str	r2, [r3, #24]
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c04:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c08:	88fb      	ldrh	r3, [r7, #6]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d008      	beq.n	8007c22 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7f9 fdf1 	bl	8001804 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c34:	4b19      	ldr	r3, [pc, #100]	@ (8007c9c <HAL_PWREx_ConfigSupply+0x70>)
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d00a      	beq.n	8007c56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c40:	4b16      	ldr	r3, [pc, #88]	@ (8007c9c <HAL_PWREx_ConfigSupply+0x70>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d001      	beq.n	8007c52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e01f      	b.n	8007c92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	e01d      	b.n	8007c92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c56:	4b11      	ldr	r3, [pc, #68]	@ (8007c9c <HAL_PWREx_ConfigSupply+0x70>)
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f023 0207 	bic.w	r2, r3, #7
 8007c5e:	490f      	ldr	r1, [pc, #60]	@ (8007c9c <HAL_PWREx_ConfigSupply+0x70>)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c66:	f7fb fba3 	bl	80033b0 <HAL_GetTick>
 8007c6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c6c:	e009      	b.n	8007c82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c6e:	f7fb fb9f 	bl	80033b0 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c7c:	d901      	bls.n	8007c82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e007      	b.n	8007c92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c82:	4b06      	ldr	r3, [pc, #24]	@ (8007c9c <HAL_PWREx_ConfigSupply+0x70>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c8e:	d1ee      	bne.n	8007c6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	58024800 	.word	0x58024800

08007ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08c      	sub	sp, #48	@ 0x30
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d102      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	f000 bc48 	b.w	8008544 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 8088 	beq.w	8007dd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cc2:	4b99      	ldr	r3, [pc, #612]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ccc:	4b96      	ldr	r3, [pc, #600]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	d007      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x48>
 8007cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cda:	2b18      	cmp	r3, #24
 8007cdc:	d111      	bne.n	8007d02 <HAL_RCC_OscConfig+0x62>
 8007cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d10c      	bne.n	8007d02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce8:	4b8f      	ldr	r3, [pc, #572]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d06d      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x130>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d169      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f000 bc21 	b.w	8008544 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d0a:	d106      	bne.n	8007d1a <HAL_RCC_OscConfig+0x7a>
 8007d0c:	4b86      	ldr	r3, [pc, #536]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a85      	ldr	r2, [pc, #532]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	e02e      	b.n	8007d78 <HAL_RCC_OscConfig+0xd8>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10c      	bne.n	8007d3c <HAL_RCC_OscConfig+0x9c>
 8007d22:	4b81      	ldr	r3, [pc, #516]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a80      	ldr	r2, [pc, #512]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	4b7e      	ldr	r3, [pc, #504]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a7d      	ldr	r2, [pc, #500]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	e01d      	b.n	8007d78 <HAL_RCC_OscConfig+0xd8>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d44:	d10c      	bne.n	8007d60 <HAL_RCC_OscConfig+0xc0>
 8007d46:	4b78      	ldr	r3, [pc, #480]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a77      	ldr	r2, [pc, #476]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	4b75      	ldr	r3, [pc, #468]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a74      	ldr	r2, [pc, #464]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	e00b      	b.n	8007d78 <HAL_RCC_OscConfig+0xd8>
 8007d60:	4b71      	ldr	r3, [pc, #452]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a70      	ldr	r2, [pc, #448]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	4b6e      	ldr	r3, [pc, #440]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a6d      	ldr	r2, [pc, #436]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d013      	beq.n	8007da8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d80:	f7fb fb16 	bl	80033b0 <HAL_GetTick>
 8007d84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d88:	f7fb fb12 	bl	80033b0 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b64      	cmp	r3, #100	@ 0x64
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e3d4      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d9a:	4b63      	ldr	r3, [pc, #396]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0f0      	beq.n	8007d88 <HAL_RCC_OscConfig+0xe8>
 8007da6:	e014      	b.n	8007dd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da8:	f7fb fb02 	bl	80033b0 <HAL_GetTick>
 8007dac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007dae:	e008      	b.n	8007dc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007db0:	f7fb fafe 	bl	80033b0 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b64      	cmp	r3, #100	@ 0x64
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e3c0      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007dc2:	4b59      	ldr	r3, [pc, #356]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1f0      	bne.n	8007db0 <HAL_RCC_OscConfig+0x110>
 8007dce:	e000      	b.n	8007dd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 80ca 	beq.w	8007f74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007de0:	4b51      	ldr	r3, [pc, #324]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007de8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dea:	4b4f      	ldr	r3, [pc, #316]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007df0:	6a3b      	ldr	r3, [r7, #32]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d007      	beq.n	8007e06 <HAL_RCC_OscConfig+0x166>
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	2b18      	cmp	r3, #24
 8007dfa:	d156      	bne.n	8007eaa <HAL_RCC_OscConfig+0x20a>
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d151      	bne.n	8007eaa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e06:	4b48      	ldr	r3, [pc, #288]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0304 	and.w	r3, r3, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d005      	beq.n	8007e1e <HAL_RCC_OscConfig+0x17e>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e392      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e1e:	4b42      	ldr	r3, [pc, #264]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f023 0219 	bic.w	r2, r3, #25
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	493f      	ldr	r1, [pc, #252]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e30:	f7fb fabe 	bl	80033b0 <HAL_GetTick>
 8007e34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e38:	f7fb faba 	bl	80033b0 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e37c      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e4a:	4b37      	ldr	r3, [pc, #220]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0f0      	beq.n	8007e38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e56:	f7fb fadb 	bl	8003410 <HAL_GetREVID>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d817      	bhi.n	8007e94 <HAL_RCC_OscConfig+0x1f4>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	2b40      	cmp	r3, #64	@ 0x40
 8007e6a:	d108      	bne.n	8007e7e <HAL_RCC_OscConfig+0x1de>
 8007e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007e74:	4a2c      	ldr	r2, [pc, #176]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e7c:	e07a      	b.n	8007f74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	031b      	lsls	r3, r3, #12
 8007e8c:	4926      	ldr	r1, [pc, #152]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e92:	e06f      	b.n	8007f74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e94:	4b24      	ldr	r3, [pc, #144]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	061b      	lsls	r3, r3, #24
 8007ea2:	4921      	ldr	r1, [pc, #132]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ea8:	e064      	b.n	8007f74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d047      	beq.n	8007f42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f023 0219 	bic.w	r2, r3, #25
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	491a      	ldr	r1, [pc, #104]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec4:	f7fb fa74 	bl	80033b0 <HAL_GetTick>
 8007ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eca:	e008      	b.n	8007ede <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ecc:	f7fb fa70 	bl	80033b0 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d901      	bls.n	8007ede <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e332      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ede:	4b12      	ldr	r3, [pc, #72]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0f0      	beq.n	8007ecc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eea:	f7fb fa91 	bl	8003410 <HAL_GetREVID>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d819      	bhi.n	8007f2c <HAL_RCC_OscConfig+0x28c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b40      	cmp	r3, #64	@ 0x40
 8007efe:	d108      	bne.n	8007f12 <HAL_RCC_OscConfig+0x272>
 8007f00:	4b09      	ldr	r3, [pc, #36]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007f08:	4a07      	ldr	r2, [pc, #28]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f0e:	6053      	str	r3, [r2, #4]
 8007f10:	e030      	b.n	8007f74 <HAL_RCC_OscConfig+0x2d4>
 8007f12:	4b05      	ldr	r3, [pc, #20]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	031b      	lsls	r3, r3, #12
 8007f20:	4901      	ldr	r1, [pc, #4]	@ (8007f28 <HAL_RCC_OscConfig+0x288>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	604b      	str	r3, [r1, #4]
 8007f26:	e025      	b.n	8007f74 <HAL_RCC_OscConfig+0x2d4>
 8007f28:	58024400 	.word	0x58024400
 8007f2c:	4b9a      	ldr	r3, [pc, #616]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	061b      	lsls	r3, r3, #24
 8007f3a:	4997      	ldr	r1, [pc, #604]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	604b      	str	r3, [r1, #4]
 8007f40:	e018      	b.n	8007f74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f42:	4b95      	ldr	r3, [pc, #596]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a94      	ldr	r2, [pc, #592]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007f48:	f023 0301 	bic.w	r3, r3, #1
 8007f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4e:	f7fb fa2f 	bl	80033b0 <HAL_GetTick>
 8007f52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f54:	e008      	b.n	8007f68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f56:	f7fb fa2b 	bl	80033b0 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e2ed      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f68:	4b8b      	ldr	r3, [pc, #556]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f0      	bne.n	8007f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 80a9 	beq.w	80080d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f82:	4b85      	ldr	r3, [pc, #532]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f8c:	4b82      	ldr	r3, [pc, #520]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d007      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x308>
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b18      	cmp	r3, #24
 8007f9c:	d13a      	bne.n	8008014 <HAL_RCC_OscConfig+0x374>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d135      	bne.n	8008014 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fa8:	4b7b      	ldr	r3, [pc, #492]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x320>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	2b80      	cmp	r3, #128	@ 0x80
 8007fba:	d001      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e2c1      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fc0:	f7fb fa26 	bl	8003410 <HAL_GetREVID>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d817      	bhi.n	8007ffe <HAL_RCC_OscConfig+0x35e>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d108      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x348>
 8007fd6:	4b70      	ldr	r3, [pc, #448]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007fde:	4a6e      	ldr	r2, [pc, #440]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007fe0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fe4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fe6:	e075      	b.n	80080d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fe8:	4b6b      	ldr	r3, [pc, #428]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	069b      	lsls	r3, r3, #26
 8007ff6:	4968      	ldr	r1, [pc, #416]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ffc:	e06a      	b.n	80080d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ffe:	4b66      	ldr	r3, [pc, #408]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	061b      	lsls	r3, r3, #24
 800800c:	4962      	ldr	r1, [pc, #392]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 800800e:	4313      	orrs	r3, r2
 8008010:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008012:	e05f      	b.n	80080d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d042      	beq.n	80080a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800801c:	4b5e      	ldr	r3, [pc, #376]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a5d      	ldr	r2, [pc, #372]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008028:	f7fb f9c2 	bl	80033b0 <HAL_GetTick>
 800802c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008030:	f7fb f9be 	bl	80033b0 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e280      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008042:	4b55      	ldr	r3, [pc, #340]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0f0      	beq.n	8008030 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800804e:	f7fb f9df 	bl	8003410 <HAL_GetREVID>
 8008052:	4603      	mov	r3, r0
 8008054:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008058:	4293      	cmp	r3, r2
 800805a:	d817      	bhi.n	800808c <HAL_RCC_OscConfig+0x3ec>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	2b20      	cmp	r3, #32
 8008062:	d108      	bne.n	8008076 <HAL_RCC_OscConfig+0x3d6>
 8008064:	4b4c      	ldr	r3, [pc, #304]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800806c:	4a4a      	ldr	r2, [pc, #296]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 800806e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008072:	6053      	str	r3, [r2, #4]
 8008074:	e02e      	b.n	80080d4 <HAL_RCC_OscConfig+0x434>
 8008076:	4b48      	ldr	r3, [pc, #288]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	069b      	lsls	r3, r3, #26
 8008084:	4944      	ldr	r1, [pc, #272]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008086:	4313      	orrs	r3, r2
 8008088:	604b      	str	r3, [r1, #4]
 800808a:	e023      	b.n	80080d4 <HAL_RCC_OscConfig+0x434>
 800808c:	4b42      	ldr	r3, [pc, #264]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	061b      	lsls	r3, r3, #24
 800809a:	493f      	ldr	r1, [pc, #252]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 800809c:	4313      	orrs	r3, r2
 800809e:	60cb      	str	r3, [r1, #12]
 80080a0:	e018      	b.n	80080d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080a2:	4b3d      	ldr	r3, [pc, #244]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a3c      	ldr	r2, [pc, #240]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 80080a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ae:	f7fb f97f 	bl	80033b0 <HAL_GetTick>
 80080b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080b4:	e008      	b.n	80080c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080b6:	f7fb f97b 	bl	80033b0 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d901      	bls.n	80080c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e23d      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080c8:	4b33      	ldr	r3, [pc, #204]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1f0      	bne.n	80080b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0308 	and.w	r3, r3, #8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d036      	beq.n	800814e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d019      	beq.n	800811c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 80080ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 80080ee:	f043 0301 	orr.w	r3, r3, #1
 80080f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f4:	f7fb f95c 	bl	80033b0 <HAL_GetTick>
 80080f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080fc:	f7fb f958 	bl	80033b0 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e21a      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800810e:	4b22      	ldr	r3, [pc, #136]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0f0      	beq.n	80080fc <HAL_RCC_OscConfig+0x45c>
 800811a:	e018      	b.n	800814e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800811c:	4b1e      	ldr	r3, [pc, #120]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 800811e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008120:	4a1d      	ldr	r2, [pc, #116]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008122:	f023 0301 	bic.w	r3, r3, #1
 8008126:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008128:	f7fb f942 	bl	80033b0 <HAL_GetTick>
 800812c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008130:	f7fb f93e 	bl	80033b0 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e200      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008142:	4b15      	ldr	r3, [pc, #84]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1f0      	bne.n	8008130 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d039      	beq.n	80081ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d01c      	beq.n	800819c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008162:	4b0d      	ldr	r3, [pc, #52]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a0c      	ldr	r2, [pc, #48]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 8008168:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800816c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800816e:	f7fb f91f 	bl	80033b0 <HAL_GetTick>
 8008172:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008174:	e008      	b.n	8008188 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008176:	f7fb f91b 	bl	80033b0 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	2b02      	cmp	r3, #2
 8008182:	d901      	bls.n	8008188 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e1dd      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008188:	4b03      	ldr	r3, [pc, #12]	@ (8008198 <HAL_RCC_OscConfig+0x4f8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d0f0      	beq.n	8008176 <HAL_RCC_OscConfig+0x4d6>
 8008194:	e01b      	b.n	80081ce <HAL_RCC_OscConfig+0x52e>
 8008196:	bf00      	nop
 8008198:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800819c:	4b9b      	ldr	r3, [pc, #620]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a9a      	ldr	r2, [pc, #616]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80081a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081a8:	f7fb f902 	bl	80033b0 <HAL_GetTick>
 80081ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081b0:	f7fb f8fe 	bl	80033b0 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e1c0      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081c2:	4b92      	ldr	r3, [pc, #584]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f0      	bne.n	80081b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 8081 	beq.w	80082de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081dc:	4b8c      	ldr	r3, [pc, #560]	@ (8008410 <HAL_RCC_OscConfig+0x770>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a8b      	ldr	r2, [pc, #556]	@ (8008410 <HAL_RCC_OscConfig+0x770>)
 80081e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081e8:	f7fb f8e2 	bl	80033b0 <HAL_GetTick>
 80081ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081f0:	f7fb f8de 	bl	80033b0 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b64      	cmp	r3, #100	@ 0x64
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e1a0      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008202:	4b83      	ldr	r3, [pc, #524]	@ (8008410 <HAL_RCC_OscConfig+0x770>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d106      	bne.n	8008224 <HAL_RCC_OscConfig+0x584>
 8008216:	4b7d      	ldr	r3, [pc, #500]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821a:	4a7c      	ldr	r2, [pc, #496]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800821c:	f043 0301 	orr.w	r3, r3, #1
 8008220:	6713      	str	r3, [r2, #112]	@ 0x70
 8008222:	e02d      	b.n	8008280 <HAL_RCC_OscConfig+0x5e0>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10c      	bne.n	8008246 <HAL_RCC_OscConfig+0x5a6>
 800822c:	4b77      	ldr	r3, [pc, #476]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800822e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008230:	4a76      	ldr	r2, [pc, #472]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008232:	f023 0301 	bic.w	r3, r3, #1
 8008236:	6713      	str	r3, [r2, #112]	@ 0x70
 8008238:	4b74      	ldr	r3, [pc, #464]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800823a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800823c:	4a73      	ldr	r2, [pc, #460]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800823e:	f023 0304 	bic.w	r3, r3, #4
 8008242:	6713      	str	r3, [r2, #112]	@ 0x70
 8008244:	e01c      	b.n	8008280 <HAL_RCC_OscConfig+0x5e0>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2b05      	cmp	r3, #5
 800824c:	d10c      	bne.n	8008268 <HAL_RCC_OscConfig+0x5c8>
 800824e:	4b6f      	ldr	r3, [pc, #444]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008252:	4a6e      	ldr	r2, [pc, #440]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008254:	f043 0304 	orr.w	r3, r3, #4
 8008258:	6713      	str	r3, [r2, #112]	@ 0x70
 800825a:	4b6c      	ldr	r3, [pc, #432]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800825c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800825e:	4a6b      	ldr	r2, [pc, #428]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008260:	f043 0301 	orr.w	r3, r3, #1
 8008264:	6713      	str	r3, [r2, #112]	@ 0x70
 8008266:	e00b      	b.n	8008280 <HAL_RCC_OscConfig+0x5e0>
 8008268:	4b68      	ldr	r3, [pc, #416]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800826a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826c:	4a67      	ldr	r2, [pc, #412]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	6713      	str	r3, [r2, #112]	@ 0x70
 8008274:	4b65      	ldr	r3, [pc, #404]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008278:	4a64      	ldr	r2, [pc, #400]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800827a:	f023 0304 	bic.w	r3, r3, #4
 800827e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d015      	beq.n	80082b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008288:	f7fb f892 	bl	80033b0 <HAL_GetTick>
 800828c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800828e:	e00a      	b.n	80082a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008290:	f7fb f88e 	bl	80033b0 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800829e:	4293      	cmp	r3, r2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e14e      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082a6:	4b59      	ldr	r3, [pc, #356]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80082a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0ee      	beq.n	8008290 <HAL_RCC_OscConfig+0x5f0>
 80082b2:	e014      	b.n	80082de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b4:	f7fb f87c 	bl	80033b0 <HAL_GetTick>
 80082b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082ba:	e00a      	b.n	80082d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082bc:	f7fb f878 	bl	80033b0 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e138      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082d2:	4b4e      	ldr	r3, [pc, #312]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80082d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1ee      	bne.n	80082bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 812d 	beq.w	8008542 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082e8:	4b48      	ldr	r3, [pc, #288]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082f0:	2b18      	cmp	r3, #24
 80082f2:	f000 80bd 	beq.w	8008470 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	f040 809e 	bne.w	800843c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008300:	4b42      	ldr	r3, [pc, #264]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a41      	ldr	r2, [pc, #260]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800830a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830c:	f7fb f850 	bl	80033b0 <HAL_GetTick>
 8008310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008314:	f7fb f84c 	bl	80033b0 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e10e      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008326:	4b39      	ldr	r3, [pc, #228]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1f0      	bne.n	8008314 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008332:	4b36      	ldr	r3, [pc, #216]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008334:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008336:	4b37      	ldr	r3, [pc, #220]	@ (8008414 <HAL_RCC_OscConfig+0x774>)
 8008338:	4013      	ands	r3, r2
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008342:	0112      	lsls	r2, r2, #4
 8008344:	430a      	orrs	r2, r1
 8008346:	4931      	ldr	r1, [pc, #196]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008348:	4313      	orrs	r3, r2
 800834a:	628b      	str	r3, [r1, #40]	@ 0x28
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008350:	3b01      	subs	r3, #1
 8008352:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835a:	3b01      	subs	r3, #1
 800835c:	025b      	lsls	r3, r3, #9
 800835e:	b29b      	uxth	r3, r3
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008366:	3b01      	subs	r3, #1
 8008368:	041b      	lsls	r3, r3, #16
 800836a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008374:	3b01      	subs	r3, #1
 8008376:	061b      	lsls	r3, r3, #24
 8008378:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800837c:	4923      	ldr	r1, [pc, #140]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800837e:	4313      	orrs	r3, r2
 8008380:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008382:	4b22      	ldr	r3, [pc, #136]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008386:	4a21      	ldr	r2, [pc, #132]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008388:	f023 0301 	bic.w	r3, r3, #1
 800838c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800838e:	4b1f      	ldr	r3, [pc, #124]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 8008390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008392:	4b21      	ldr	r3, [pc, #132]	@ (8008418 <HAL_RCC_OscConfig+0x778>)
 8008394:	4013      	ands	r3, r2
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800839a:	00d2      	lsls	r2, r2, #3
 800839c:	491b      	ldr	r1, [pc, #108]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083a2:	4b1a      	ldr	r3, [pc, #104]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a6:	f023 020c 	bic.w	r2, r3, #12
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ae:	4917      	ldr	r1, [pc, #92]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083b4:	4b15      	ldr	r3, [pc, #84]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	f023 0202 	bic.w	r2, r3, #2
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c0:	4912      	ldr	r1, [pc, #72]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083c6:	4b11      	ldr	r3, [pc, #68]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ca:	4a10      	ldr	r2, [pc, #64]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d2:	4b0e      	ldr	r3, [pc, #56]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d6:	4a0d      	ldr	r2, [pc, #52]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083de:	4b0b      	ldr	r3, [pc, #44]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e2:	4a0a      	ldr	r2, [pc, #40]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80083ea:	4b08      	ldr	r3, [pc, #32]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ee:	4a07      	ldr	r2, [pc, #28]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083f0:	f043 0301 	orr.w	r3, r3, #1
 80083f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083f6:	4b05      	ldr	r3, [pc, #20]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a04      	ldr	r2, [pc, #16]	@ (800840c <HAL_RCC_OscConfig+0x76c>)
 80083fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008402:	f7fa ffd5 	bl	80033b0 <HAL_GetTick>
 8008406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008408:	e011      	b.n	800842e <HAL_RCC_OscConfig+0x78e>
 800840a:	bf00      	nop
 800840c:	58024400 	.word	0x58024400
 8008410:	58024800 	.word	0x58024800
 8008414:	fffffc0c 	.word	0xfffffc0c
 8008418:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800841c:	f7fa ffc8 	bl	80033b0 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e08a      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800842e:	4b47      	ldr	r3, [pc, #284]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0f0      	beq.n	800841c <HAL_RCC_OscConfig+0x77c>
 800843a:	e082      	b.n	8008542 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800843c:	4b43      	ldr	r3, [pc, #268]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a42      	ldr	r2, [pc, #264]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 8008442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008448:	f7fa ffb2 	bl	80033b0 <HAL_GetTick>
 800844c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7fa ffae 	bl	80033b0 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e070      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008462:	4b3a      	ldr	r3, [pc, #232]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f0      	bne.n	8008450 <HAL_RCC_OscConfig+0x7b0>
 800846e:	e068      	b.n	8008542 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008470:	4b36      	ldr	r3, [pc, #216]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 8008472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008474:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008476:	4b35      	ldr	r3, [pc, #212]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 8008478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008480:	2b01      	cmp	r3, #1
 8008482:	d031      	beq.n	80084e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f003 0203 	and.w	r2, r3, #3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800848e:	429a      	cmp	r2, r3
 8008490:	d12a      	bne.n	80084e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	091b      	lsrs	r3, r3, #4
 8008496:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800849e:	429a      	cmp	r2, r3
 80084a0:	d122      	bne.n	80084e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d11a      	bne.n	80084e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	0a5b      	lsrs	r3, r3, #9
 80084b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d111      	bne.n	80084e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	0c1b      	lsrs	r3, r3, #16
 80084c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d108      	bne.n	80084e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	0e1b      	lsrs	r3, r3, #24
 80084da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d001      	beq.n	80084ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e02b      	b.n	8008544 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80084ec:	4b17      	ldr	r3, [pc, #92]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 80084ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f0:	08db      	lsrs	r3, r3, #3
 80084f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d01f      	beq.n	8008542 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008502:	4b12      	ldr	r3, [pc, #72]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 8008504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008506:	4a11      	ldr	r2, [pc, #68]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 8008508:	f023 0301 	bic.w	r3, r3, #1
 800850c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800850e:	f7fa ff4f 	bl	80033b0 <HAL_GetTick>
 8008512:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008514:	bf00      	nop
 8008516:	f7fa ff4b 	bl	80033b0 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851e:	4293      	cmp	r3, r2
 8008520:	d0f9      	beq.n	8008516 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008522:	4b0a      	ldr	r3, [pc, #40]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 8008524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008526:	4b0a      	ldr	r3, [pc, #40]	@ (8008550 <HAL_RCC_OscConfig+0x8b0>)
 8008528:	4013      	ands	r3, r2
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800852e:	00d2      	lsls	r2, r2, #3
 8008530:	4906      	ldr	r1, [pc, #24]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 8008532:	4313      	orrs	r3, r2
 8008534:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008536:	4b05      	ldr	r3, [pc, #20]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 8008538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853a:	4a04      	ldr	r2, [pc, #16]	@ (800854c <HAL_RCC_OscConfig+0x8ac>)
 800853c:	f043 0301 	orr.w	r3, r3, #1
 8008540:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3730      	adds	r7, #48	@ 0x30
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	58024400 	.word	0x58024400
 8008550:	ffff0007 	.word	0xffff0007

08008554 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e19c      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008568:	4b8a      	ldr	r3, [pc, #552]	@ (8008794 <HAL_RCC_ClockConfig+0x240>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 030f 	and.w	r3, r3, #15
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d910      	bls.n	8008598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008576:	4b87      	ldr	r3, [pc, #540]	@ (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f023 020f 	bic.w	r2, r3, #15
 800857e:	4985      	ldr	r1, [pc, #532]	@ (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	4313      	orrs	r3, r2
 8008584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008586:	4b83      	ldr	r3, [pc, #524]	@ (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d001      	beq.n	8008598 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e184      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d010      	beq.n	80085c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691a      	ldr	r2, [r3, #16]
 80085a8:	4b7b      	ldr	r3, [pc, #492]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d908      	bls.n	80085c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085b4:	4b78      	ldr	r3, [pc, #480]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	4975      	ldr	r1, [pc, #468]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d010      	beq.n	80085f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	4b70      	ldr	r3, [pc, #448]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085de:	429a      	cmp	r2, r3
 80085e0:	d908      	bls.n	80085f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085e2:	4b6d      	ldr	r3, [pc, #436]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	496a      	ldr	r1, [pc, #424]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d010      	beq.n	8008622 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	4b64      	ldr	r3, [pc, #400]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800860c:	429a      	cmp	r2, r3
 800860e:	d908      	bls.n	8008622 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008610:	4b61      	ldr	r3, [pc, #388]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	495e      	ldr	r1, [pc, #376]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 800861e:	4313      	orrs	r3, r2
 8008620:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b00      	cmp	r3, #0
 800862c:	d010      	beq.n	8008650 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	69da      	ldr	r2, [r3, #28]
 8008632:	4b59      	ldr	r3, [pc, #356]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800863a:	429a      	cmp	r2, r3
 800863c:	d908      	bls.n	8008650 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800863e:	4b56      	ldr	r3, [pc, #344]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	4953      	ldr	r1, [pc, #332]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 800864c:	4313      	orrs	r3, r2
 800864e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d010      	beq.n	800867e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68da      	ldr	r2, [r3, #12]
 8008660:	4b4d      	ldr	r3, [pc, #308]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f003 030f 	and.w	r3, r3, #15
 8008668:	429a      	cmp	r2, r3
 800866a:	d908      	bls.n	800867e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800866c:	4b4a      	ldr	r3, [pc, #296]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	f023 020f 	bic.w	r2, r3, #15
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	4947      	ldr	r1, [pc, #284]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 800867a:	4313      	orrs	r3, r2
 800867c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d055      	beq.n	8008736 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800868a:	4b43      	ldr	r3, [pc, #268]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	4940      	ldr	r1, [pc, #256]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008698:	4313      	orrs	r3, r2
 800869a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d107      	bne.n	80086b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086a4:	4b3c      	ldr	r3, [pc, #240]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d121      	bne.n	80086f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e0f6      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d107      	bne.n	80086cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086bc:	4b36      	ldr	r3, [pc, #216]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d115      	bne.n	80086f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e0ea      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d107      	bne.n	80086e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086d4:	4b30      	ldr	r3, [pc, #192]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d109      	bne.n	80086f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e0de      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086e4:	4b2c      	ldr	r3, [pc, #176]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e0d6      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086f4:	4b28      	ldr	r3, [pc, #160]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	f023 0207 	bic.w	r2, r3, #7
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	4925      	ldr	r1, [pc, #148]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008702:	4313      	orrs	r3, r2
 8008704:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008706:	f7fa fe53 	bl	80033b0 <HAL_GetTick>
 800870a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800870c:	e00a      	b.n	8008724 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800870e:	f7fa fe4f 	bl	80033b0 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800871c:	4293      	cmp	r3, r2
 800871e:	d901      	bls.n	8008724 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e0be      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008724:	4b1c      	ldr	r3, [pc, #112]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	429a      	cmp	r2, r3
 8008734:	d1eb      	bne.n	800870e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d010      	beq.n	8008764 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	4b14      	ldr	r3, [pc, #80]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	429a      	cmp	r2, r3
 8008750:	d208      	bcs.n	8008764 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008752:	4b11      	ldr	r3, [pc, #68]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	f023 020f 	bic.w	r2, r3, #15
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	490e      	ldr	r1, [pc, #56]	@ (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008760:	4313      	orrs	r3, r2
 8008762:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008764:	4b0b      	ldr	r3, [pc, #44]	@ (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 030f 	and.w	r3, r3, #15
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d214      	bcs.n	800879c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008772:	4b08      	ldr	r3, [pc, #32]	@ (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f023 020f 	bic.w	r2, r3, #15
 800877a:	4906      	ldr	r1, [pc, #24]	@ (8008794 <HAL_RCC_ClockConfig+0x240>)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	4313      	orrs	r3, r2
 8008780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008782:	4b04      	ldr	r3, [pc, #16]	@ (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d005      	beq.n	800879c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e086      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
 8008794:	52002000 	.word	0x52002000
 8008798:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d010      	beq.n	80087ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691a      	ldr	r2, [r3, #16]
 80087ac:	4b3f      	ldr	r3, [pc, #252]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d208      	bcs.n	80087ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087b8:	4b3c      	ldr	r3, [pc, #240]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	4939      	ldr	r1, [pc, #228]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0308 	and.w	r3, r3, #8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d010      	beq.n	80087f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	695a      	ldr	r2, [r3, #20]
 80087da:	4b34      	ldr	r3, [pc, #208]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d208      	bcs.n	80087f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087e6:	4b31      	ldr	r3, [pc, #196]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	492e      	ldr	r1, [pc, #184]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b00      	cmp	r3, #0
 8008802:	d010      	beq.n	8008826 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	4b28      	ldr	r3, [pc, #160]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008810:	429a      	cmp	r2, r3
 8008812:	d208      	bcs.n	8008826 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008814:	4b25      	ldr	r3, [pc, #148]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	4922      	ldr	r1, [pc, #136]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008822:	4313      	orrs	r3, r2
 8008824:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0320 	and.w	r3, r3, #32
 800882e:	2b00      	cmp	r3, #0
 8008830:	d010      	beq.n	8008854 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	69da      	ldr	r2, [r3, #28]
 8008836:	4b1d      	ldr	r3, [pc, #116]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800883e:	429a      	cmp	r2, r3
 8008840:	d208      	bcs.n	8008854 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008842:	4b1a      	ldr	r3, [pc, #104]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	4917      	ldr	r1, [pc, #92]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008850:	4313      	orrs	r3, r2
 8008852:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008854:	f000 f834 	bl	80088c0 <HAL_RCC_GetSysClockFreq>
 8008858:	4602      	mov	r2, r0
 800885a:	4b14      	ldr	r3, [pc, #80]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	0a1b      	lsrs	r3, r3, #8
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	4912      	ldr	r1, [pc, #72]	@ (80088b0 <HAL_RCC_ClockConfig+0x35c>)
 8008866:	5ccb      	ldrb	r3, [r1, r3]
 8008868:	f003 031f 	and.w	r3, r3, #31
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
 8008870:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008872:	4b0e      	ldr	r3, [pc, #56]	@ (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	f003 030f 	and.w	r3, r3, #15
 800887a:	4a0d      	ldr	r2, [pc, #52]	@ (80088b0 <HAL_RCC_ClockConfig+0x35c>)
 800887c:	5cd3      	ldrb	r3, [r2, r3]
 800887e:	f003 031f 	and.w	r3, r3, #31
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	fa22 f303 	lsr.w	r3, r2, r3
 8008888:	4a0a      	ldr	r2, [pc, #40]	@ (80088b4 <HAL_RCC_ClockConfig+0x360>)
 800888a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800888c:	4a0a      	ldr	r2, [pc, #40]	@ (80088b8 <HAL_RCC_ClockConfig+0x364>)
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008892:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <HAL_RCC_ClockConfig+0x368>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f7f9 fde8 	bl	800246c <HAL_InitTick>
 800889c:	4603      	mov	r3, r0
 800889e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	58024400 	.word	0x58024400
 80088b0:	08023578 	.word	0x08023578
 80088b4:	24000008 	.word	0x24000008
 80088b8:	24000004 	.word	0x24000004
 80088bc:	2400000c 	.word	0x2400000c

080088c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b089      	sub	sp, #36	@ 0x24
 80088c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088c6:	4bb3      	ldr	r3, [pc, #716]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088ce:	2b18      	cmp	r3, #24
 80088d0:	f200 8155 	bhi.w	8008b7e <HAL_RCC_GetSysClockFreq+0x2be>
 80088d4:	a201      	add	r2, pc, #4	@ (adr r2, 80088dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80088d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088da:	bf00      	nop
 80088dc:	08008941 	.word	0x08008941
 80088e0:	08008b7f 	.word	0x08008b7f
 80088e4:	08008b7f 	.word	0x08008b7f
 80088e8:	08008b7f 	.word	0x08008b7f
 80088ec:	08008b7f 	.word	0x08008b7f
 80088f0:	08008b7f 	.word	0x08008b7f
 80088f4:	08008b7f 	.word	0x08008b7f
 80088f8:	08008b7f 	.word	0x08008b7f
 80088fc:	08008967 	.word	0x08008967
 8008900:	08008b7f 	.word	0x08008b7f
 8008904:	08008b7f 	.word	0x08008b7f
 8008908:	08008b7f 	.word	0x08008b7f
 800890c:	08008b7f 	.word	0x08008b7f
 8008910:	08008b7f 	.word	0x08008b7f
 8008914:	08008b7f 	.word	0x08008b7f
 8008918:	08008b7f 	.word	0x08008b7f
 800891c:	0800896d 	.word	0x0800896d
 8008920:	08008b7f 	.word	0x08008b7f
 8008924:	08008b7f 	.word	0x08008b7f
 8008928:	08008b7f 	.word	0x08008b7f
 800892c:	08008b7f 	.word	0x08008b7f
 8008930:	08008b7f 	.word	0x08008b7f
 8008934:	08008b7f 	.word	0x08008b7f
 8008938:	08008b7f 	.word	0x08008b7f
 800893c:	08008973 	.word	0x08008973
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008940:	4b94      	ldr	r3, [pc, #592]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800894c:	4b91      	ldr	r3, [pc, #580]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	08db      	lsrs	r3, r3, #3
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	4a90      	ldr	r2, [pc, #576]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
 800895c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800895e:	e111      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008960:	4b8d      	ldr	r3, [pc, #564]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008962:	61bb      	str	r3, [r7, #24]
      break;
 8008964:	e10e      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008966:	4b8d      	ldr	r3, [pc, #564]	@ (8008b9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008968:	61bb      	str	r3, [r7, #24]
      break;
 800896a:	e10b      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800896c:	4b8c      	ldr	r3, [pc, #560]	@ (8008ba0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800896e:	61bb      	str	r3, [r7, #24]
      break;
 8008970:	e108      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008972:	4b88      	ldr	r3, [pc, #544]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800897c:	4b85      	ldr	r3, [pc, #532]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800897e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008980:	091b      	lsrs	r3, r3, #4
 8008982:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008986:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008988:	4b82      	ldr	r3, [pc, #520]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008992:	4b80      	ldr	r3, [pc, #512]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008996:	08db      	lsrs	r3, r3, #3
 8008998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	fb02 f303 	mul.w	r3, r2, r3
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 80e1 	beq.w	8008b78 <HAL_RCC_GetSysClockFreq+0x2b8>
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	f000 8083 	beq.w	8008ac4 <HAL_RCC_GetSysClockFreq+0x204>
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	f200 80a1 	bhi.w	8008b08 <HAL_RCC_GetSysClockFreq+0x248>
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <HAL_RCC_GetSysClockFreq+0x114>
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d056      	beq.n	8008a80 <HAL_RCC_GetSysClockFreq+0x1c0>
 80089d2:	e099      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d4:	4b6f      	ldr	r3, [pc, #444]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0320 	and.w	r3, r3, #32
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d02d      	beq.n	8008a3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089e0:	4b6c      	ldr	r3, [pc, #432]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	08db      	lsrs	r3, r3, #3
 80089e6:	f003 0303 	and.w	r3, r3, #3
 80089ea:	4a6b      	ldr	r2, [pc, #428]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0a:	4b62      	ldr	r3, [pc, #392]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a3a:	e087      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008ba8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b51      	ldr	r3, [pc, #324]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a7e:	e065      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008bac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a92:	4b40      	ldr	r3, [pc, #256]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aa6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ac2:	e043      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008bb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b06:	e021      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008bac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b4c:	4b11      	ldr	r3, [pc, #68]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b50:	0a5b      	lsrs	r3, r3, #9
 8008b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b56:	3301      	adds	r3, #1
 8008b58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	ee07 3a90 	vmov	s15, r3
 8008b60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b70:	ee17 3a90 	vmov	r3, s15
 8008b74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008b76:	e005      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61bb      	str	r3, [r7, #24]
      break;
 8008b7c:	e002      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008b7e:	4b07      	ldr	r3, [pc, #28]	@ (8008b9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b80:	61bb      	str	r3, [r7, #24]
      break;
 8008b82:	bf00      	nop
  }

  return sysclockfreq;
 8008b84:	69bb      	ldr	r3, [r7, #24]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3724      	adds	r7, #36	@ 0x24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	58024400 	.word	0x58024400
 8008b98:	03d09000 	.word	0x03d09000
 8008b9c:	003d0900 	.word	0x003d0900
 8008ba0:	007a1200 	.word	0x007a1200
 8008ba4:	46000000 	.word	0x46000000
 8008ba8:	4c742400 	.word	0x4c742400
 8008bac:	4a742400 	.word	0x4a742400
 8008bb0:	4af42400 	.word	0x4af42400

08008bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bba:	f7ff fe81 	bl	80088c0 <HAL_RCC_GetSysClockFreq>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	4b10      	ldr	r3, [pc, #64]	@ (8008c04 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	0a1b      	lsrs	r3, r3, #8
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	490f      	ldr	r1, [pc, #60]	@ (8008c08 <HAL_RCC_GetHCLKFreq+0x54>)
 8008bcc:	5ccb      	ldrb	r3, [r1, r3]
 8008bce:	f003 031f 	and.w	r3, r3, #31
 8008bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008c04 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	4a09      	ldr	r2, [pc, #36]	@ (8008c08 <HAL_RCC_GetHCLKFreq+0x54>)
 8008be2:	5cd3      	ldrb	r3, [r2, r3]
 8008be4:	f003 031f 	and.w	r3, r3, #31
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	fa22 f303 	lsr.w	r3, r2, r3
 8008bee:	4a07      	ldr	r2, [pc, #28]	@ (8008c0c <HAL_RCC_GetHCLKFreq+0x58>)
 8008bf0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bf2:	4a07      	ldr	r2, [pc, #28]	@ (8008c10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008bf8:	4b04      	ldr	r3, [pc, #16]	@ (8008c0c <HAL_RCC_GetHCLKFreq+0x58>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	58024400 	.word	0x58024400
 8008c08:	08023578 	.word	0x08023578
 8008c0c:	24000008 	.word	0x24000008
 8008c10:	24000004 	.word	0x24000004

08008c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c18:	f7ff ffcc 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	4b06      	ldr	r3, [pc, #24]	@ (8008c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	091b      	lsrs	r3, r3, #4
 8008c24:	f003 0307 	and.w	r3, r3, #7
 8008c28:	4904      	ldr	r1, [pc, #16]	@ (8008c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c2a:	5ccb      	ldrb	r3, [r1, r3]
 8008c2c:	f003 031f 	and.w	r3, r3, #31
 8008c30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	08023578 	.word	0x08023578

08008c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c44:	f7ff ffb6 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	f003 0307 	and.w	r3, r3, #7
 8008c54:	4904      	ldr	r1, [pc, #16]	@ (8008c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c56:	5ccb      	ldrb	r3, [r1, r3]
 8008c58:	f003 031f 	and.w	r3, r3, #31
 8008c5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	58024400 	.word	0x58024400
 8008c68:	08023578 	.word	0x08023578

08008c6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	223f      	movs	r2, #63	@ 0x3f
 8008c7a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce8 <HAL_RCC_GetClockConfig+0x7c>)
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	f003 0207 	and.w	r2, r3, #7
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008c88:	4b17      	ldr	r3, [pc, #92]	@ (8008ce8 <HAL_RCC_GetClockConfig+0x7c>)
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008c94:	4b14      	ldr	r3, [pc, #80]	@ (8008ce8 <HAL_RCC_GetClockConfig+0x7c>)
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	f003 020f 	and.w	r2, r3, #15
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008ca0:	4b11      	ldr	r3, [pc, #68]	@ (8008ce8 <HAL_RCC_GetClockConfig+0x7c>)
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008cac:	4b0e      	ldr	r3, [pc, #56]	@ (8008ce8 <HAL_RCC_GetClockConfig+0x7c>)
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ce8 <HAL_RCC_GetClockConfig+0x7c>)
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008cc4:	4b08      	ldr	r3, [pc, #32]	@ (8008ce8 <HAL_RCC_GetClockConfig+0x7c>)
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008cd0:	4b06      	ldr	r3, [pc, #24]	@ (8008cec <HAL_RCC_GetClockConfig+0x80>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 020f 	and.w	r2, r3, #15
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	601a      	str	r2, [r3, #0]
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	58024400 	.word	0x58024400
 8008cec:	52002000 	.word	0x52002000

08008cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cf4:	b0ca      	sub	sp, #296	@ 0x128
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d02:	2300      	movs	r3, #0
 8008d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008d14:	2500      	movs	r5, #0
 8008d16:	ea54 0305 	orrs.w	r3, r4, r5
 8008d1a:	d049      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d26:	d02f      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008d28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d2c:	d828      	bhi.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d32:	d01a      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008d34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d38:	d822      	bhi.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d42:	d007      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d44:	e01c      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d46:	4bb8      	ldr	r3, [pc, #736]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4a:	4ab7      	ldr	r2, [pc, #732]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d52:	e01a      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d58:	3308      	adds	r3, #8
 8008d5a:	2102      	movs	r1, #2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f002 fb61 	bl	800b424 <RCCEx_PLL2_Config>
 8008d62:	4603      	mov	r3, r0
 8008d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d68:	e00f      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6e:	3328      	adds	r3, #40	@ 0x28
 8008d70:	2102      	movs	r1, #2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f002 fc08 	bl	800b588 <RCCEx_PLL3_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d7e:	e004      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d86:	e000      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d92:	4ba5      	ldr	r3, [pc, #660]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008da0:	4aa1      	ldr	r2, [pc, #644]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008da2:	430b      	orrs	r3, r1
 8008da4:	6513      	str	r3, [r2, #80]	@ 0x50
 8008da6:	e003      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008dbc:	f04f 0900 	mov.w	r9, #0
 8008dc0:	ea58 0309 	orrs.w	r3, r8, r9
 8008dc4:	d047      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d82a      	bhi.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd6:	bf00      	nop
 8008dd8:	08008ded 	.word	0x08008ded
 8008ddc:	08008dfb 	.word	0x08008dfb
 8008de0:	08008e11 	.word	0x08008e11
 8008de4:	08008e2f 	.word	0x08008e2f
 8008de8:	08008e2f 	.word	0x08008e2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dec:	4b8e      	ldr	r3, [pc, #568]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df0:	4a8d      	ldr	r2, [pc, #564]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008df6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008df8:	e01a      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfe:	3308      	adds	r3, #8
 8008e00:	2100      	movs	r1, #0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f002 fb0e 	bl	800b424 <RCCEx_PLL2_Config>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e0e:	e00f      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e14:	3328      	adds	r3, #40	@ 0x28
 8008e16:	2100      	movs	r1, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f002 fbb5 	bl	800b588 <RCCEx_PLL3_Config>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e24:	e004      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e2c:	e000      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e38:	4b7b      	ldr	r3, [pc, #492]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e3c:	f023 0107 	bic.w	r1, r3, #7
 8008e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e46:	4a78      	ldr	r2, [pc, #480]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e48:	430b      	orrs	r3, r1
 8008e4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e4c:	e003      	b.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008e62:	f04f 0b00 	mov.w	fp, #0
 8008e66:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e6a:	d04c      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e76:	d030      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e7c:	d829      	bhi.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e80:	d02d      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e84:	d825      	bhi.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e86:	2b80      	cmp	r3, #128	@ 0x80
 8008e88:	d018      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008e8a:	2b80      	cmp	r3, #128	@ 0x80
 8008e8c:	d821      	bhi.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008e92:	2b40      	cmp	r3, #64	@ 0x40
 8008e94:	d007      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008e96:	e01c      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e98:	4b63      	ldr	r3, [pc, #396]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9c:	4a62      	ldr	r2, [pc, #392]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ea4:	e01c      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eaa:	3308      	adds	r3, #8
 8008eac:	2100      	movs	r1, #0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f002 fab8 	bl	800b424 <RCCEx_PLL2_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008eba:	e011      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec0:	3328      	adds	r3, #40	@ 0x28
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f002 fb5f 	bl	800b588 <RCCEx_PLL3_Config>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ed0:	e006      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ed8:	e002      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008eda:	bf00      	nop
 8008edc:	e000      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ef6:	4a4c      	ldr	r2, [pc, #304]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	6513      	str	r3, [r2, #80]	@ 0x50
 8008efc:	e003      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008f12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008f1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008f20:	460b      	mov	r3, r1
 8008f22:	4313      	orrs	r3, r2
 8008f24:	d053      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f32:	d035      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008f34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f38:	d82e      	bhi.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f3e:	d031      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008f40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f44:	d828      	bhi.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f4a:	d01a      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f50:	d822      	bhi.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008f56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f5a:	d007      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008f5c:	e01c      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f5e:	4b32      	ldr	r3, [pc, #200]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f62:	4a31      	ldr	r2, [pc, #196]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f6a:	e01c      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f70:	3308      	adds	r3, #8
 8008f72:	2100      	movs	r1, #0
 8008f74:	4618      	mov	r0, r3
 8008f76:	f002 fa55 	bl	800b424 <RCCEx_PLL2_Config>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f80:	e011      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f86:	3328      	adds	r3, #40	@ 0x28
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f002 fafc 	bl	800b588 <RCCEx_PLL3_Config>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f96:	e006      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f9e:	e002      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008fa0:	bf00      	nop
 8008fa2:	e000      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10b      	bne.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008fae:	4b1e      	ldr	r3, [pc, #120]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fb2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fc4:	e003      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008fda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008fe4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4313      	orrs	r3, r2
 8008fec:	d056      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ff6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ffa:	d038      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ffc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009000:	d831      	bhi.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009002:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009006:	d034      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009008:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800900c:	d82b      	bhi.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800900e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009012:	d01d      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009018:	d825      	bhi.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800901a:	2b00      	cmp	r3, #0
 800901c:	d006      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800901e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009022:	d00a      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009024:	e01f      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009026:	bf00      	nop
 8009028:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800902c:	4ba2      	ldr	r3, [pc, #648]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800902e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009030:	4aa1      	ldr	r2, [pc, #644]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009038:	e01c      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800903a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903e:	3308      	adds	r3, #8
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f002 f9ee 	bl	800b424 <RCCEx_PLL2_Config>
 8009048:	4603      	mov	r3, r0
 800904a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800904e:	e011      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009054:	3328      	adds	r3, #40	@ 0x28
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f002 fa95 	bl	800b588 <RCCEx_PLL3_Config>
 800905e:	4603      	mov	r3, r0
 8009060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009064:	e006      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800906c:	e002      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800906e:	bf00      	nop
 8009070:	e000      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10b      	bne.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800907c:	4b8e      	ldr	r3, [pc, #568]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800907e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009080:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009088:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800908c:	4a8a      	ldr	r2, [pc, #552]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800908e:	430b      	orrs	r3, r1
 8009090:	6593      	str	r3, [r2, #88]	@ 0x58
 8009092:	e003      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800909c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80090a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80090ac:	2300      	movs	r3, #0
 80090ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80090b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80090b6:	460b      	mov	r3, r1
 80090b8:	4313      	orrs	r3, r2
 80090ba:	d03a      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80090bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090c2:	2b30      	cmp	r3, #48	@ 0x30
 80090c4:	d01f      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80090c6:	2b30      	cmp	r3, #48	@ 0x30
 80090c8:	d819      	bhi.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80090ca:	2b20      	cmp	r3, #32
 80090cc:	d00c      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	d815      	bhi.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d019      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80090d6:	2b10      	cmp	r3, #16
 80090d8:	d111      	bne.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090da:	4b77      	ldr	r3, [pc, #476]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090de:	4a76      	ldr	r2, [pc, #472]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80090e6:	e011      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ec:	3308      	adds	r3, #8
 80090ee:	2102      	movs	r1, #2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f002 f997 	bl	800b424 <RCCEx_PLL2_Config>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80090fc:	e006      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009104:	e002      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009106:	bf00      	nop
 8009108:	e000      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800910a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800910c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009114:	4b68      	ldr	r3, [pc, #416]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009118:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800911c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009122:	4a65      	ldr	r2, [pc, #404]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009124:	430b      	orrs	r3, r1
 8009126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009128:	e003      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800912e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800913e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009142:	2300      	movs	r3, #0
 8009144:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009148:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800914c:	460b      	mov	r3, r1
 800914e:	4313      	orrs	r3, r2
 8009150:	d051      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800915c:	d035      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800915e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009162:	d82e      	bhi.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009164:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009168:	d031      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800916a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800916e:	d828      	bhi.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009174:	d01a      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800917a:	d822      	bhi.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009184:	d007      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009186:	e01c      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009188:	4b4b      	ldr	r3, [pc, #300]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800918a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918c:	4a4a      	ldr	r2, [pc, #296]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800918e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009194:	e01c      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919a:	3308      	adds	r3, #8
 800919c:	2100      	movs	r1, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f002 f940 	bl	800b424 <RCCEx_PLL2_Config>
 80091a4:	4603      	mov	r3, r0
 80091a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091aa:	e011      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b0:	3328      	adds	r3, #40	@ 0x28
 80091b2:	2100      	movs	r1, #0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f002 f9e7 	bl	800b588 <RCCEx_PLL3_Config>
 80091ba:	4603      	mov	r3, r0
 80091bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091c0:	e006      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091c8:	e002      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80091ca:	bf00      	nop
 80091cc:	e000      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80091ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80091d8:	4b37      	ldr	r3, [pc, #220]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80091e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091e6:	4a34      	ldr	r2, [pc, #208]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091e8:	430b      	orrs	r3, r1
 80091ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80091ec:	e003      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80091f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009206:	2300      	movs	r3, #0
 8009208:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800920c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009210:	460b      	mov	r3, r1
 8009212:	4313      	orrs	r3, r2
 8009214:	d056      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800921c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009220:	d033      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009222:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009226:	d82c      	bhi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009228:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800922c:	d02f      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800922e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009232:	d826      	bhi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009234:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009238:	d02b      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800923a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800923e:	d820      	bhi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009244:	d012      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009246:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800924a:	d81a      	bhi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800924c:	2b00      	cmp	r3, #0
 800924e:	d022      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009254:	d115      	bne.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800925a:	3308      	adds	r3, #8
 800925c:	2101      	movs	r1, #1
 800925e:	4618      	mov	r0, r3
 8009260:	f002 f8e0 	bl	800b424 <RCCEx_PLL2_Config>
 8009264:	4603      	mov	r3, r0
 8009266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800926a:	e015      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009270:	3328      	adds	r3, #40	@ 0x28
 8009272:	2101      	movs	r1, #1
 8009274:	4618      	mov	r0, r3
 8009276:	f002 f987 	bl	800b588 <RCCEx_PLL3_Config>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009280:	e00a      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009288:	e006      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800928a:	bf00      	nop
 800928c:	e004      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800928e:	bf00      	nop
 8009290:	e002      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009292:	bf00      	nop
 8009294:	e000      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10d      	bne.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80092a0:	4b05      	ldr	r3, [pc, #20]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80092a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092ae:	4a02      	ldr	r2, [pc, #8]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092b0:	430b      	orrs	r3, r1
 80092b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80092b4:	e006      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80092b6:	bf00      	nop
 80092b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80092c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80092d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092d4:	2300      	movs	r3, #0
 80092d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80092de:	460b      	mov	r3, r1
 80092e0:	4313      	orrs	r3, r2
 80092e2:	d055      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80092e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80092ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092f0:	d033      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80092f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092f6:	d82c      	bhi.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80092f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092fc:	d02f      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80092fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009302:	d826      	bhi.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009304:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009308:	d02b      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800930a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800930e:	d820      	bhi.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009314:	d012      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800931a:	d81a      	bhi.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800931c:	2b00      	cmp	r3, #0
 800931e:	d022      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009324:	d115      	bne.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800932a:	3308      	adds	r3, #8
 800932c:	2101      	movs	r1, #1
 800932e:	4618      	mov	r0, r3
 8009330:	f002 f878 	bl	800b424 <RCCEx_PLL2_Config>
 8009334:	4603      	mov	r3, r0
 8009336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800933a:	e015      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800933c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009340:	3328      	adds	r3, #40	@ 0x28
 8009342:	2101      	movs	r1, #1
 8009344:	4618      	mov	r0, r3
 8009346:	f002 f91f 	bl	800b588 <RCCEx_PLL3_Config>
 800934a:	4603      	mov	r3, r0
 800934c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009350:	e00a      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009358:	e006      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800935a:	bf00      	nop
 800935c:	e004      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800935e:	bf00      	nop
 8009360:	e002      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009362:	bf00      	nop
 8009364:	e000      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10b      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009370:	4ba3      	ldr	r3, [pc, #652]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009374:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009380:	4a9f      	ldr	r2, [pc, #636]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009382:	430b      	orrs	r3, r1
 8009384:	6593      	str	r3, [r2, #88]	@ 0x58
 8009386:	e003      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800938c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800939c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80093a0:	2300      	movs	r3, #0
 80093a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80093a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80093aa:	460b      	mov	r3, r1
 80093ac:	4313      	orrs	r3, r2
 80093ae:	d037      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80093b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ba:	d00e      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80093bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093c0:	d816      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d018      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80093c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093ca:	d111      	bne.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093cc:	4b8c      	ldr	r3, [pc, #560]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d0:	4a8b      	ldr	r2, [pc, #556]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80093d8:	e00f      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093de:	3308      	adds	r3, #8
 80093e0:	2101      	movs	r1, #1
 80093e2:	4618      	mov	r0, r3
 80093e4:	f002 f81e 	bl	800b424 <RCCEx_PLL2_Config>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80093ee:	e004      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093f6:	e000      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80093f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009402:	4b7f      	ldr	r3, [pc, #508]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009406:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800940a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800940e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009410:	4a7b      	ldr	r2, [pc, #492]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009412:	430b      	orrs	r3, r1
 8009414:	6513      	str	r3, [r2, #80]	@ 0x50
 8009416:	e003      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800941c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800942c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009430:	2300      	movs	r3, #0
 8009432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009436:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800943a:	460b      	mov	r3, r1
 800943c:	4313      	orrs	r3, r2
 800943e:	d039      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009446:	2b03      	cmp	r3, #3
 8009448:	d81c      	bhi.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800944a:	a201      	add	r2, pc, #4	@ (adr r2, 8009450 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800944c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009450:	0800948d 	.word	0x0800948d
 8009454:	08009461 	.word	0x08009461
 8009458:	0800946f 	.word	0x0800946f
 800945c:	0800948d 	.word	0x0800948d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009460:	4b67      	ldr	r3, [pc, #412]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	4a66      	ldr	r2, [pc, #408]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800946a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800946c:	e00f      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800946e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009472:	3308      	adds	r3, #8
 8009474:	2102      	movs	r1, #2
 8009476:	4618      	mov	r0, r3
 8009478:	f001 ffd4 	bl	800b424 <RCCEx_PLL2_Config>
 800947c:	4603      	mov	r3, r0
 800947e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009482:	e004      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800948a:	e000      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800948c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800948e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10a      	bne.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009496:	4b5a      	ldr	r3, [pc, #360]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800949a:	f023 0103 	bic.w	r1, r3, #3
 800949e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094a4:	4a56      	ldr	r2, [pc, #344]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094a6:	430b      	orrs	r3, r1
 80094a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094aa:	e003      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80094c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094c4:	2300      	movs	r3, #0
 80094c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80094ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80094ce:	460b      	mov	r3, r1
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f000 809f 	beq.w	8009614 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094d6:	4b4b      	ldr	r3, [pc, #300]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a4a      	ldr	r2, [pc, #296]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80094dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094e2:	f7f9 ff65 	bl	80033b0 <HAL_GetTick>
 80094e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094ea:	e00b      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094ec:	f7f9 ff60 	bl	80033b0 <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	2b64      	cmp	r3, #100	@ 0x64
 80094fa:	d903      	bls.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009502:	e005      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009504:	4b3f      	ldr	r3, [pc, #252]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0ed      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009514:	2b00      	cmp	r3, #0
 8009516:	d179      	bne.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009518:	4b39      	ldr	r3, [pc, #228]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800951a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800951c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009524:	4053      	eors	r3, r2
 8009526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800952a:	2b00      	cmp	r3, #0
 800952c:	d015      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800952e:	4b34      	ldr	r3, [pc, #208]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009536:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800953a:	4b31      	ldr	r3, [pc, #196]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800953c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800953e:	4a30      	ldr	r2, [pc, #192]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009544:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009546:	4b2e      	ldr	r3, [pc, #184]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800954a:	4a2d      	ldr	r2, [pc, #180]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800954c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009550:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009552:	4a2b      	ldr	r2, [pc, #172]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009554:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009558:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009566:	d118      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009568:	f7f9 ff22 	bl	80033b0 <HAL_GetTick>
 800956c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009570:	e00d      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009572:	f7f9 ff1d 	bl	80033b0 <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800957c:	1ad2      	subs	r2, r2, r3
 800957e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009582:	429a      	cmp	r2, r3
 8009584:	d903      	bls.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800958c:	e005      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800958e:	4b1c      	ldr	r3, [pc, #112]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0eb      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800959a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d129      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095b2:	d10e      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80095b4:	4b12      	ldr	r3, [pc, #72]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80095bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095c4:	091a      	lsrs	r2, r3, #4
 80095c6:	4b10      	ldr	r3, [pc, #64]	@ (8009608 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80095c8:	4013      	ands	r3, r2
 80095ca:	4a0d      	ldr	r2, [pc, #52]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6113      	str	r3, [r2, #16]
 80095d0:	e005      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80095d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80095dc:	6113      	str	r3, [r2, #16]
 80095de:	4b08      	ldr	r3, [pc, #32]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80095e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ee:	4a04      	ldr	r2, [pc, #16]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095f0:	430b      	orrs	r3, r1
 80095f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80095f4:	e00e      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80095fe:	e009      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009600:	58024400 	.word	0x58024400
 8009604:	58024800 	.word	0x58024800
 8009608:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	f002 0301 	and.w	r3, r2, #1
 8009620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009624:	2300      	movs	r3, #0
 8009626:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800962a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800962e:	460b      	mov	r3, r1
 8009630:	4313      	orrs	r3, r2
 8009632:	f000 8089 	beq.w	8009748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800963c:	2b28      	cmp	r3, #40	@ 0x28
 800963e:	d86b      	bhi.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009640:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	08009721 	.word	0x08009721
 800964c:	08009719 	.word	0x08009719
 8009650:	08009719 	.word	0x08009719
 8009654:	08009719 	.word	0x08009719
 8009658:	08009719 	.word	0x08009719
 800965c:	08009719 	.word	0x08009719
 8009660:	08009719 	.word	0x08009719
 8009664:	08009719 	.word	0x08009719
 8009668:	080096ed 	.word	0x080096ed
 800966c:	08009719 	.word	0x08009719
 8009670:	08009719 	.word	0x08009719
 8009674:	08009719 	.word	0x08009719
 8009678:	08009719 	.word	0x08009719
 800967c:	08009719 	.word	0x08009719
 8009680:	08009719 	.word	0x08009719
 8009684:	08009719 	.word	0x08009719
 8009688:	08009703 	.word	0x08009703
 800968c:	08009719 	.word	0x08009719
 8009690:	08009719 	.word	0x08009719
 8009694:	08009719 	.word	0x08009719
 8009698:	08009719 	.word	0x08009719
 800969c:	08009719 	.word	0x08009719
 80096a0:	08009719 	.word	0x08009719
 80096a4:	08009719 	.word	0x08009719
 80096a8:	08009721 	.word	0x08009721
 80096ac:	08009719 	.word	0x08009719
 80096b0:	08009719 	.word	0x08009719
 80096b4:	08009719 	.word	0x08009719
 80096b8:	08009719 	.word	0x08009719
 80096bc:	08009719 	.word	0x08009719
 80096c0:	08009719 	.word	0x08009719
 80096c4:	08009719 	.word	0x08009719
 80096c8:	08009721 	.word	0x08009721
 80096cc:	08009719 	.word	0x08009719
 80096d0:	08009719 	.word	0x08009719
 80096d4:	08009719 	.word	0x08009719
 80096d8:	08009719 	.word	0x08009719
 80096dc:	08009719 	.word	0x08009719
 80096e0:	08009719 	.word	0x08009719
 80096e4:	08009719 	.word	0x08009719
 80096e8:	08009721 	.word	0x08009721
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f0:	3308      	adds	r3, #8
 80096f2:	2101      	movs	r1, #1
 80096f4:	4618      	mov	r0, r3
 80096f6:	f001 fe95 	bl	800b424 <RCCEx_PLL2_Config>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009700:	e00f      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009706:	3328      	adds	r3, #40	@ 0x28
 8009708:	2101      	movs	r1, #1
 800970a:	4618      	mov	r0, r3
 800970c:	f001 ff3c 	bl	800b588 <RCCEx_PLL3_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009716:	e004      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800971e:	e000      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800972a:	4bbf      	ldr	r3, [pc, #764]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800972c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800972e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009736:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009738:	4abb      	ldr	r2, [pc, #748]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800973a:	430b      	orrs	r3, r1
 800973c:	6553      	str	r3, [r2, #84]	@ 0x54
 800973e:	e003      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f002 0302 	and.w	r3, r2, #2
 8009754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009758:	2300      	movs	r3, #0
 800975a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800975e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009762:	460b      	mov	r3, r1
 8009764:	4313      	orrs	r3, r2
 8009766:	d041      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800976e:	2b05      	cmp	r3, #5
 8009770:	d824      	bhi.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009772:	a201      	add	r2, pc, #4	@ (adr r2, 8009778 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	080097c5 	.word	0x080097c5
 800977c:	08009791 	.word	0x08009791
 8009780:	080097a7 	.word	0x080097a7
 8009784:	080097c5 	.word	0x080097c5
 8009788:	080097c5 	.word	0x080097c5
 800978c:	080097c5 	.word	0x080097c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009794:	3308      	adds	r3, #8
 8009796:	2101      	movs	r1, #1
 8009798:	4618      	mov	r0, r3
 800979a:	f001 fe43 	bl	800b424 <RCCEx_PLL2_Config>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097a4:	e00f      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097aa:	3328      	adds	r3, #40	@ 0x28
 80097ac:	2101      	movs	r1, #1
 80097ae:	4618      	mov	r0, r3
 80097b0:	f001 feea 	bl	800b588 <RCCEx_PLL3_Config>
 80097b4:	4603      	mov	r3, r0
 80097b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097ba:	e004      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097c2:	e000      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80097c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10a      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80097ce:	4b96      	ldr	r3, [pc, #600]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d2:	f023 0107 	bic.w	r1, r3, #7
 80097d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097dc:	4a92      	ldr	r2, [pc, #584]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097de:	430b      	orrs	r3, r1
 80097e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80097e2:	e003      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f002 0304 	and.w	r3, r2, #4
 80097f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097fc:	2300      	movs	r3, #0
 80097fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009802:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009806:	460b      	mov	r3, r1
 8009808:	4313      	orrs	r3, r2
 800980a:	d044      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800980c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009814:	2b05      	cmp	r3, #5
 8009816:	d825      	bhi.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009818:	a201      	add	r2, pc, #4	@ (adr r2, 8009820 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800981a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981e:	bf00      	nop
 8009820:	0800986d 	.word	0x0800986d
 8009824:	08009839 	.word	0x08009839
 8009828:	0800984f 	.word	0x0800984f
 800982c:	0800986d 	.word	0x0800986d
 8009830:	0800986d 	.word	0x0800986d
 8009834:	0800986d 	.word	0x0800986d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800983c:	3308      	adds	r3, #8
 800983e:	2101      	movs	r1, #1
 8009840:	4618      	mov	r0, r3
 8009842:	f001 fdef 	bl	800b424 <RCCEx_PLL2_Config>
 8009846:	4603      	mov	r3, r0
 8009848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800984c:	e00f      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800984e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009852:	3328      	adds	r3, #40	@ 0x28
 8009854:	2101      	movs	r1, #1
 8009856:	4618      	mov	r0, r3
 8009858:	f001 fe96 	bl	800b588 <RCCEx_PLL3_Config>
 800985c:	4603      	mov	r3, r0
 800985e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009862:	e004      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800986a:	e000      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800986c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800986e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10b      	bne.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009876:	4b6c      	ldr	r3, [pc, #432]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800987a:	f023 0107 	bic.w	r1, r3, #7
 800987e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009886:	4a68      	ldr	r2, [pc, #416]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009888:	430b      	orrs	r3, r1
 800988a:	6593      	str	r3, [r2, #88]	@ 0x58
 800988c:	e003      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f002 0320 	and.w	r3, r2, #32
 80098a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80098a6:	2300      	movs	r3, #0
 80098a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80098b0:	460b      	mov	r3, r1
 80098b2:	4313      	orrs	r3, r2
 80098b4:	d055      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80098b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098c2:	d033      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80098c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098c8:	d82c      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ce:	d02f      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80098d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098d4:	d826      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098da:	d02b      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80098dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098e0:	d820      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098e6:	d012      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80098e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ec:	d81a      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d022      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80098f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098f6:	d115      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098fc:	3308      	adds	r3, #8
 80098fe:	2100      	movs	r1, #0
 8009900:	4618      	mov	r0, r3
 8009902:	f001 fd8f 	bl	800b424 <RCCEx_PLL2_Config>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800990c:	e015      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800990e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009912:	3328      	adds	r3, #40	@ 0x28
 8009914:	2102      	movs	r1, #2
 8009916:	4618      	mov	r0, r3
 8009918:	f001 fe36 	bl	800b588 <RCCEx_PLL3_Config>
 800991c:	4603      	mov	r3, r0
 800991e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009922:	e00a      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800992a:	e006      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800992c:	bf00      	nop
 800992e:	e004      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009930:	bf00      	nop
 8009932:	e002      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009934:	bf00      	nop
 8009936:	e000      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800993a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10b      	bne.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009942:	4b39      	ldr	r3, [pc, #228]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009946:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800994a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009952:	4a35      	ldr	r2, [pc, #212]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009954:	430b      	orrs	r3, r1
 8009956:	6553      	str	r3, [r2, #84]	@ 0x54
 8009958:	e003      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800995e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800996e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009972:	2300      	movs	r3, #0
 8009974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009978:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800997c:	460b      	mov	r3, r1
 800997e:	4313      	orrs	r3, r2
 8009980:	d058      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800998a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800998e:	d033      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009990:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009994:	d82c      	bhi.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800999a:	d02f      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800999c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099a0:	d826      	bhi.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099a6:	d02b      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80099a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099ac:	d820      	bhi.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099b2:	d012      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80099b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099b8:	d81a      	bhi.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d022      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80099be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099c2:	d115      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c8:	3308      	adds	r3, #8
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f001 fd29 	bl	800b424 <RCCEx_PLL2_Config>
 80099d2:	4603      	mov	r3, r0
 80099d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80099d8:	e015      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099de:	3328      	adds	r3, #40	@ 0x28
 80099e0:	2102      	movs	r1, #2
 80099e2:	4618      	mov	r0, r3
 80099e4:	f001 fdd0 	bl	800b588 <RCCEx_PLL3_Config>
 80099e8:	4603      	mov	r3, r0
 80099ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80099ee:	e00a      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099f6:	e006      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099f8:	bf00      	nop
 80099fa:	e004      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099fc:	bf00      	nop
 80099fe:	e002      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a00:	bf00      	nop
 8009a02:	e000      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10e      	bne.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a0e:	4b06      	ldr	r3, [pc, #24]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a1e:	4a02      	ldr	r2, [pc, #8]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a20:	430b      	orrs	r3, r1
 8009a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a24:	e006      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009a26:	bf00      	nop
 8009a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4313      	orrs	r3, r2
 8009a52:	d055      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009a60:	d033      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009a62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009a66:	d82c      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a6c:	d02f      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a72:	d826      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009a78:	d02b      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009a7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009a7e:	d820      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a84:	d012      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a8a:	d81a      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d022      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a94:	d115      	bne.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f001 fcc0 	bl	800b424 <RCCEx_PLL2_Config>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009aaa:	e015      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab0:	3328      	adds	r3, #40	@ 0x28
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 fd67 	bl	800b588 <RCCEx_PLL3_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ac0:	e00a      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ac8:	e006      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009aca:	bf00      	nop
 8009acc:	e004      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ace:	bf00      	nop
 8009ad0:	e002      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ad2:	bf00      	nop
 8009ad4:	e000      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10b      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ae0:	4ba1      	ldr	r3, [pc, #644]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ae4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009af0:	4a9d      	ldr	r2, [pc, #628]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009af2:	430b      	orrs	r3, r1
 8009af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009af6:	e003      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f002 0308 	and.w	r3, r2, #8
 8009b0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b10:	2300      	movs	r3, #0
 8009b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	d01e      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b2c:	d10c      	bne.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b32:	3328      	adds	r3, #40	@ 0x28
 8009b34:	2102      	movs	r1, #2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 fd26 	bl	800b588 <RCCEx_PLL3_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009b48:	4b87      	ldr	r3, [pc, #540]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b58:	4a83      	ldr	r2, [pc, #524]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b5a:	430b      	orrs	r3, r1
 8009b5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f002 0310 	and.w	r3, r2, #16
 8009b6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	d01e      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b8a:	d10c      	bne.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b90:	3328      	adds	r3, #40	@ 0x28
 8009b92:	2102      	movs	r1, #2
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 fcf7 	bl	800b588 <RCCEx_PLL3_Config>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ba6:	4b70      	ldr	r3, [pc, #448]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009baa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009bb6:	4a6c      	ldr	r2, [pc, #432]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bb8:	430b      	orrs	r3, r1
 8009bba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009bc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	d03e      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009be8:	d022      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009bea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bee:	d81b      	bhi.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bf8:	d00b      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009bfa:	e015      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c00:	3308      	adds	r3, #8
 8009c02:	2100      	movs	r1, #0
 8009c04:	4618      	mov	r0, r3
 8009c06:	f001 fc0d 	bl	800b424 <RCCEx_PLL2_Config>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c10:	e00f      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c16:	3328      	adds	r3, #40	@ 0x28
 8009c18:	2102      	movs	r1, #2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f001 fcb4 	bl	800b588 <RCCEx_PLL3_Config>
 8009c20:	4603      	mov	r3, r0
 8009c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c26:	e004      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c2e:	e000      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10b      	bne.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c4a:	4a47      	ldr	r2, [pc, #284]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c4c:	430b      	orrs	r3, r1
 8009c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c50:	e003      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009c66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c68:	2300      	movs	r3, #0
 8009c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009c70:	460b      	mov	r3, r1
 8009c72:	4313      	orrs	r3, r2
 8009c74:	d03b      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c82:	d01f      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c88:	d818      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c8e:	d003      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c94:	d007      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009c96:	e011      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c98:	4b33      	ldr	r3, [pc, #204]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9c:	4a32      	ldr	r2, [pc, #200]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ca4:	e00f      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009caa:	3328      	adds	r3, #40	@ 0x28
 8009cac:	2101      	movs	r1, #1
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 fc6a 	bl	800b588 <RCCEx_PLL3_Config>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009cba:	e004      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cc2:	e000      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10b      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cce:	4b26      	ldr	r3, [pc, #152]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cde:	4a22      	ldr	r2, [pc, #136]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ce0:	430b      	orrs	r3, r1
 8009ce2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ce4:	e003      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009cfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009d04:	460b      	mov	r3, r1
 8009d06:	4313      	orrs	r3, r2
 8009d08:	d034      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d18:	d007      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009d1a:	e011      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d1c:	4b12      	ldr	r3, [pc, #72]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d20:	4a11      	ldr	r2, [pc, #68]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d28:	e00e      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d2e:	3308      	adds	r3, #8
 8009d30:	2102      	movs	r1, #2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fb76 	bl	800b424 <RCCEx_PLL2_Config>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d3e:	e003      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10d      	bne.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d50:	4b05      	ldr	r3, [pc, #20]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d5e:	4a02      	ldr	r2, [pc, #8]	@ (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d60:	430b      	orrs	r3, r1
 8009d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d64:	e006      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009d66:	bf00      	nop
 8009d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d82:	2300      	movs	r3, #0
 8009d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	d00c      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d94:	3328      	adds	r3, #40	@ 0x28
 8009d96:	2102      	movs	r1, #2
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f001 fbf5 	bl	800b588 <RCCEx_PLL3_Config>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009db6:	663b      	str	r3, [r7, #96]	@ 0x60
 8009db8:	2300      	movs	r3, #0
 8009dba:	667b      	str	r3, [r7, #100]	@ 0x64
 8009dbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	d038      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dd2:	d018      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009dd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dd8:	d811      	bhi.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dde:	d014      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009de4:	d80b      	bhi.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d011      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dee:	d106      	bne.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df0:	4bc3      	ldr	r3, [pc, #780]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df4:	4ac2      	ldr	r2, [pc, #776]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009dfc:	e008      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e04:	e004      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e06:	bf00      	nop
 8009e08:	e002      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e0a:	bf00      	nop
 8009e0c:	e000      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10b      	bne.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e18:	4bb9      	ldr	r3, [pc, #740]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e28:	4ab5      	ldr	r2, [pc, #724]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e2a:	430b      	orrs	r3, r1
 8009e2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e2e:	e003      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009e44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e46:	2300      	movs	r3, #0
 8009e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4313      	orrs	r3, r2
 8009e52:	d009      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e54:	4baa      	ldr	r3, [pc, #680]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e62:	4aa7      	ldr	r2, [pc, #668]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e64:	430b      	orrs	r3, r1
 8009e66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009e74:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e76:	2300      	movs	r3, #0
 8009e78:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4313      	orrs	r3, r2
 8009e82:	d00a      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009e84:	4b9e      	ldr	r3, [pc, #632]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009e94:	4a9a      	ldr	r2, [pc, #616]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e96:	430b      	orrs	r3, r1
 8009e98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	d009      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009eb6:	4b92      	ldr	r3, [pc, #584]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ec4:	4a8e      	ldr	r2, [pc, #568]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ec6:	430b      	orrs	r3, r1
 8009ec8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ed8:	2300      	movs	r3, #0
 8009eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8009edc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	d00e      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ee6:	4b86      	ldr	r3, [pc, #536]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	4a85      	ldr	r2, [pc, #532]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ef0:	6113      	str	r3, [r2, #16]
 8009ef2:	4b83      	ldr	r3, [pc, #524]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ef4:	6919      	ldr	r1, [r3, #16]
 8009ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009efa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009efe:	4a80      	ldr	r2, [pc, #512]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f00:	430b      	orrs	r3, r1
 8009f02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f12:	2300      	movs	r3, #0
 8009f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	d009      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f20:	4b77      	ldr	r3, [pc, #476]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f2e:	4a74      	ldr	r2, [pc, #464]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f30:	430b      	orrs	r3, r1
 8009f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f42:	2300      	movs	r3, #0
 8009f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	d00a      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f50:	4b6b      	ldr	r3, [pc, #428]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f60:	4a67      	ldr	r2, [pc, #412]	@ (800a100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f62:	430b      	orrs	r3, r1
 8009f64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	2100      	movs	r1, #0
 8009f70:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	d011      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f86:	3308      	adds	r3, #8
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 fa4a 	bl	800b424 <RCCEx_PLL2_Config>
 8009f90:	4603      	mov	r3, r0
 8009f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	2100      	movs	r1, #0
 8009fb0:	6239      	str	r1, [r7, #32]
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	d011      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc6:	3308      	adds	r3, #8
 8009fc8:	2101      	movs	r1, #1
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f001 fa2a 	bl	800b424 <RCCEx_PLL2_Config>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	2100      	movs	r1, #0
 8009ff0:	61b9      	str	r1, [r7, #24]
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	61fb      	str	r3, [r7, #28]
 8009ff8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4313      	orrs	r3, r2
 800a000:	d011      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a006:	3308      	adds	r3, #8
 800a008:	2102      	movs	r1, #2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f001 fa0a 	bl	800b424 <RCCEx_PLL2_Config>
 800a010:	4603      	mov	r3, r0
 800a012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a01e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	2100      	movs	r1, #0
 800a030:	6139      	str	r1, [r7, #16]
 800a032:	f003 0308 	and.w	r3, r3, #8
 800a036:	617b      	str	r3, [r7, #20]
 800a038:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a03c:	460b      	mov	r3, r1
 800a03e:	4313      	orrs	r3, r2
 800a040:	d011      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a046:	3328      	adds	r3, #40	@ 0x28
 800a048:	2100      	movs	r1, #0
 800a04a:	4618      	mov	r0, r3
 800a04c:	f001 fa9c 	bl	800b588 <RCCEx_PLL3_Config>
 800a050:	4603      	mov	r3, r0
 800a052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a05e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	2100      	movs	r1, #0
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	f003 0310 	and.w	r3, r3, #16
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a07c:	460b      	mov	r3, r1
 800a07e:	4313      	orrs	r3, r2
 800a080:	d011      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a086:	3328      	adds	r3, #40	@ 0x28
 800a088:	2101      	movs	r1, #1
 800a08a:	4618      	mov	r0, r3
 800a08c:	f001 fa7c 	bl	800b588 <RCCEx_PLL3_Config>
 800a090:	4603      	mov	r3, r0
 800a092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	6039      	str	r1, [r7, #0]
 800a0b2:	f003 0320 	and.w	r3, r3, #32
 800a0b6:	607b      	str	r3, [r7, #4]
 800a0b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	d011      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c6:	3328      	adds	r3, #40	@ 0x28
 800a0c8:	2102      	movs	r1, #2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f001 fa5c 	bl	800b588 <RCCEx_PLL3_Config>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a0e6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e000      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a100:	58024400 	.word	0x58024400

0800a104 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b090      	sub	sp, #64	@ 0x40
 800a108:	af00      	add	r7, sp, #0
 800a10a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a10e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a112:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a116:	430b      	orrs	r3, r1
 800a118:	f040 8094 	bne.w	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a11c:	4b9e      	ldr	r3, [pc, #632]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a11e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a120:	f003 0307 	and.w	r3, r3, #7
 800a124:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a128:	2b04      	cmp	r3, #4
 800a12a:	f200 8087 	bhi.w	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a12e:	a201      	add	r2, pc, #4	@ (adr r2, 800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a149 	.word	0x0800a149
 800a138:	0800a171 	.word	0x0800a171
 800a13c:	0800a199 	.word	0x0800a199
 800a140:	0800a235 	.word	0x0800a235
 800a144:	0800a1c1 	.word	0x0800a1c1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a148:	4b93      	ldr	r3, [pc, #588]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a150:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a154:	d108      	bne.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a15a:	4618      	mov	r0, r3
 800a15c:	f001 f810 	bl	800b180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a164:	f000 bd45 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a16c:	f000 bd41 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a170:	4b89      	ldr	r3, [pc, #548]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a178:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a17c:	d108      	bne.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a17e:	f107 0318 	add.w	r3, r7, #24
 800a182:	4618      	mov	r0, r3
 800a184:	f000 fd54 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a18c:	f000 bd31 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a194:	f000 bd2d 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a198:	4b7f      	ldr	r3, [pc, #508]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1a4:	d108      	bne.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a6:	f107 030c 	add.w	r3, r7, #12
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 fe94 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1b4:	f000 bd1d 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1bc:	f000 bd19 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1c0:	4b75      	ldr	r3, [pc, #468]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1c8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1ca:	4b73      	ldr	r3, [pc, #460]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0304 	and.w	r3, r3, #4
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	d10c      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d109      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1dc:	4b6e      	ldr	r3, [pc, #440]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	08db      	lsrs	r3, r3, #3
 800a1e2:	f003 0303 	and.w	r3, r3, #3
 800a1e6:	4a6d      	ldr	r2, [pc, #436]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a1e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1ee:	e01f      	b.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1f0:	4b69      	ldr	r3, [pc, #420]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1fc:	d106      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a1fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a204:	d102      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a206:	4b66      	ldr	r3, [pc, #408]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a20a:	e011      	b.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a20c:	4b62      	ldr	r3, [pc, #392]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a218:	d106      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a21c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a220:	d102      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a222:	4b60      	ldr	r3, [pc, #384]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a226:	e003      	b.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a22c:	f000 bce1 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a230:	f000 bcdf 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a234:	4b5c      	ldr	r3, [pc, #368]	@ (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a238:	f000 bcdb 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a240:	f000 bcd7 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a244:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a248:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a24c:	430b      	orrs	r3, r1
 800a24e:	f040 80ad 	bne.w	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a252:	4b51      	ldr	r3, [pc, #324]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a256:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a25a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a262:	d056      	beq.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a26a:	f200 8090 	bhi.w	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	2bc0      	cmp	r3, #192	@ 0xc0
 800a272:	f000 8088 	beq.w	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	2bc0      	cmp	r3, #192	@ 0xc0
 800a27a:	f200 8088 	bhi.w	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a280:	2b80      	cmp	r3, #128	@ 0x80
 800a282:	d032      	beq.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	2b80      	cmp	r3, #128	@ 0x80
 800a288:	f200 8081 	bhi.w	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a294:	2b40      	cmp	r3, #64	@ 0x40
 800a296:	d014      	beq.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a298:	e079      	b.n	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a29a:	4b3f      	ldr	r3, [pc, #252]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2a6:	d108      	bne.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 ff67 	bl	800b180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2b6:	f000 bc9c 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2be:	f000 bc98 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2c2:	4b35      	ldr	r3, [pc, #212]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2ce:	d108      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2d0:	f107 0318 	add.w	r3, r7, #24
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 fcab 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2de:	f000 bc88 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e6:	f000 bc84 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2ea:	4b2b      	ldr	r3, [pc, #172]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2f6:	d108      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2f8:	f107 030c 	add.w	r3, r7, #12
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fdeb 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a306:	f000 bc74 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a30e:	f000 bc70 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a312:	4b21      	ldr	r3, [pc, #132]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a316:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a31a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a31c:	4b1e      	ldr	r3, [pc, #120]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0304 	and.w	r3, r3, #4
 800a324:	2b04      	cmp	r3, #4
 800a326:	d10c      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d109      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a32e:	4b1a      	ldr	r3, [pc, #104]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	08db      	lsrs	r3, r3, #3
 800a334:	f003 0303 	and.w	r3, r3, #3
 800a338:	4a18      	ldr	r2, [pc, #96]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a33a:	fa22 f303 	lsr.w	r3, r2, r3
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a340:	e01f      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a342:	4b15      	ldr	r3, [pc, #84]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a34a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a34e:	d106      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a352:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a356:	d102      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a358:	4b11      	ldr	r3, [pc, #68]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a35c:	e011      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a35e:	4b0e      	ldr	r3, [pc, #56]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a36a:	d106      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a36e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a372:	d102      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a374:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a378:	e003      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a37e:	f000 bc38 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a382:	f000 bc36 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a386:	4b08      	ldr	r3, [pc, #32]	@ (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a38a:	f000 bc32 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a392:	f000 bc2e 	b.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a396:	bf00      	nop
 800a398:	58024400 	.word	0x58024400
 800a39c:	03d09000 	.word	0x03d09000
 800a3a0:	003d0900 	.word	0x003d0900
 800a3a4:	007a1200 	.word	0x007a1200
 800a3a8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a3ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a3b4:	430b      	orrs	r3, r1
 800a3b6:	f040 809c 	bne.w	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a3ba:	4b9e      	ldr	r3, [pc, #632]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3be:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a3c2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3ca:	d054      	beq.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3d2:	f200 808b 	bhi.w	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a3dc:	f000 8083 	beq.w	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a3e6:	f200 8081 	bhi.w	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3f0:	d02f      	beq.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3f8:	d878      	bhi.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d004      	beq.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a406:	d012      	beq.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a408:	e070      	b.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a40a:	4b8a      	ldr	r3, [pc, #552]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a412:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a416:	d107      	bne.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 feaf 	bl	800b180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a426:	e3e4      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a42c:	e3e1      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a42e:	4b81      	ldr	r3, [pc, #516]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a43a:	d107      	bne.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a43c:	f107 0318 	add.w	r3, r7, #24
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fbf5 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a44a:	e3d2      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a450:	e3cf      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a452:	4b78      	ldr	r3, [pc, #480]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a45a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a45e:	d107      	bne.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a460:	f107 030c 	add.w	r3, r7, #12
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fd37 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46e:	e3c0      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a474:	e3bd      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a476:	4b6f      	ldr	r3, [pc, #444]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a47a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a47e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a480:	4b6c      	ldr	r3, [pc, #432]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b04      	cmp	r3, #4
 800a48a:	d10c      	bne.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d109      	bne.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a492:	4b68      	ldr	r3, [pc, #416]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	08db      	lsrs	r3, r3, #3
 800a498:	f003 0303 	and.w	r3, r3, #3
 800a49c:	4a66      	ldr	r2, [pc, #408]	@ (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a49e:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4a4:	e01e      	b.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4a6:	4b63      	ldr	r3, [pc, #396]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4b2:	d106      	bne.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4ba:	d102      	bne.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4bc:	4b5f      	ldr	r3, [pc, #380]	@ (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4c0:	e010      	b.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4c2:	4b5c      	ldr	r3, [pc, #368]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ce:	d106      	bne.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4d6:	d102      	bne.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4d8:	4b59      	ldr	r3, [pc, #356]	@ (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4dc:	e002      	b.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4e2:	e386      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4e4:	e385      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4e6:	4b57      	ldr	r3, [pc, #348]	@ (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ea:	e382      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f0:	e37f      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a4f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4f6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a4fa:	430b      	orrs	r3, r1
 800a4fc:	f040 80a7 	bne.w	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a500:	4b4c      	ldr	r3, [pc, #304]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a504:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a508:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a510:	d055      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a518:	f200 8096 	bhi.w	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a522:	f000 8084 	beq.w	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a528:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a52c:	f200 808c 	bhi.w	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a532:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a536:	d030      	beq.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a53e:	f200 8083 	bhi.w	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a544:	2b00      	cmp	r3, #0
 800a546:	d004      	beq.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a54e:	d012      	beq.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a550:	e07a      	b.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a552:	4b38      	ldr	r3, [pc, #224]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a55a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a55e:	d107      	bne.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a564:	4618      	mov	r0, r3
 800a566:	f000 fe0b 	bl	800b180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a56e:	e340      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a570:	2300      	movs	r3, #0
 800a572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a574:	e33d      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a576:	4b2f      	ldr	r3, [pc, #188]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a57e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a582:	d107      	bne.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a584:	f107 0318 	add.w	r3, r7, #24
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 fb51 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a592:	e32e      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a598:	e32b      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a59a:	4b26      	ldr	r3, [pc, #152]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5a6:	d107      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5a8:	f107 030c 	add.w	r3, r7, #12
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fc93 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b6:	e31c      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5bc:	e319      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5be:	4b1d      	ldr	r3, [pc, #116]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5c8:	4b1a      	ldr	r3, [pc, #104]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d10c      	bne.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d109      	bne.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5da:	4b16      	ldr	r3, [pc, #88]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	08db      	lsrs	r3, r3, #3
 800a5e0:	f003 0303 	and.w	r3, r3, #3
 800a5e4:	4a14      	ldr	r2, [pc, #80]	@ (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a5e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5ec:	e01e      	b.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5ee:	4b11      	ldr	r3, [pc, #68]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5fa:	d106      	bne.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a602:	d102      	bne.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a604:	4b0d      	ldr	r3, [pc, #52]	@ (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a608:	e010      	b.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a60a:	4b0a      	ldr	r3, [pc, #40]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a612:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a616:	d106      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a61e:	d102      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a620:	4b07      	ldr	r3, [pc, #28]	@ (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a624:	e002      	b.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a62a:	e2e2      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a62c:	e2e1      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a62e:	4b05      	ldr	r3, [pc, #20]	@ (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a632:	e2de      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a634:	58024400 	.word	0x58024400
 800a638:	03d09000 	.word	0x03d09000
 800a63c:	003d0900 	.word	0x003d0900
 800a640:	007a1200 	.word	0x007a1200
 800a644:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a648:	2300      	movs	r3, #0
 800a64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a64c:	e2d1      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a64e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a652:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a656:	430b      	orrs	r3, r1
 800a658:	f040 809c 	bne.w	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a65c:	4b93      	ldr	r3, [pc, #588]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a65e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a660:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a664:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a668:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a66c:	d054      	beq.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a674:	f200 808b 	bhi.w	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a67e:	f000 8083 	beq.w	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a684:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a688:	f200 8081 	bhi.w	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a692:	d02f      	beq.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a69a:	d878      	bhi.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d004      	beq.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6a8:	d012      	beq.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a6aa:	e070      	b.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6ac:	4b7f      	ldr	r3, [pc, #508]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6b8:	d107      	bne.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fd5e 	bl	800b180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6c8:	e293      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ce:	e290      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6d0:	4b76      	ldr	r3, [pc, #472]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6dc:	d107      	bne.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6de:	f107 0318 	add.w	r3, r7, #24
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 faa4 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ec:	e281      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f2:	e27e      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6f4:	4b6d      	ldr	r3, [pc, #436]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a700:	d107      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a702:	f107 030c 	add.w	r3, r7, #12
 800a706:	4618      	mov	r0, r3
 800a708:	f000 fbe6 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a710:	e26f      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a716:	e26c      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a718:	4b64      	ldr	r3, [pc, #400]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a71a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a71c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a720:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a722:	4b62      	ldr	r3, [pc, #392]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0304 	and.w	r3, r3, #4
 800a72a:	2b04      	cmp	r3, #4
 800a72c:	d10c      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a730:	2b00      	cmp	r3, #0
 800a732:	d109      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a734:	4b5d      	ldr	r3, [pc, #372]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	08db      	lsrs	r3, r3, #3
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	4a5c      	ldr	r2, [pc, #368]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a740:	fa22 f303 	lsr.w	r3, r2, r3
 800a744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a746:	e01e      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a748:	4b58      	ldr	r3, [pc, #352]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a754:	d106      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a75c:	d102      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a75e:	4b55      	ldr	r3, [pc, #340]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a762:	e010      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a764:	4b51      	ldr	r3, [pc, #324]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a76c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a770:	d106      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a778:	d102      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a77a:	4b4f      	ldr	r3, [pc, #316]	@ (800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a77e:	e002      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a784:	e235      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a786:	e234      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a788:	4b4c      	ldr	r3, [pc, #304]	@ (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a78c:	e231      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a792:	e22e      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a794:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a798:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a79c:	430b      	orrs	r3, r1
 800a79e:	f040 808f 	bne.w	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a7a2:	4b42      	ldr	r3, [pc, #264]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7a6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a7aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a7b2:	d06b      	beq.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a7ba:	d874      	bhi.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a7c2:	d056      	beq.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a7ca:	d86c      	bhi.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a7d2:	d03b      	beq.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a7da:	d864      	bhi.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7e2:	d021      	beq.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ea:	d85c      	bhi.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d004      	beq.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7f8:	d004      	beq.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a7fa:	e054      	b.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a7fc:	f7fe fa0a 	bl	8008c14 <HAL_RCC_GetPCLK1Freq>
 800a800:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a802:	e1f6      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a804:	4b29      	ldr	r3, [pc, #164]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a80c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a810:	d107      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a812:	f107 0318 	add.w	r3, r7, #24
 800a816:	4618      	mov	r0, r3
 800a818:	f000 fa0a 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a820:	e1e7      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a826:	e1e4      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a828:	4b20      	ldr	r3, [pc, #128]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a834:	d107      	bne.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a836:	f107 030c 	add.w	r3, r7, #12
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fb4c 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a844:	e1d5      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84a:	e1d2      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a84c:	4b17      	ldr	r3, [pc, #92]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0304 	and.w	r3, r3, #4
 800a854:	2b04      	cmp	r3, #4
 800a856:	d109      	bne.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a858:	4b14      	ldr	r3, [pc, #80]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	08db      	lsrs	r3, r3, #3
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	4a13      	ldr	r2, [pc, #76]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a864:	fa22 f303 	lsr.w	r3, r2, r3
 800a868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a86a:	e1c2      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a870:	e1bf      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a872:	4b0e      	ldr	r3, [pc, #56]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a87a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a87e:	d102      	bne.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a880:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a884:	e1b5      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a88a:	e1b2      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a88c:	4b07      	ldr	r3, [pc, #28]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a898:	d102      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a89a:	4b07      	ldr	r3, [pc, #28]	@ (800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a89e:	e1a8      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a4:	e1a5      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8aa:	e1a2      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8ac:	58024400 	.word	0x58024400
 800a8b0:	03d09000 	.word	0x03d09000
 800a8b4:	003d0900 	.word	0x003d0900
 800a8b8:	007a1200 	.word	0x007a1200
 800a8bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a8c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8c4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a8c8:	430b      	orrs	r3, r1
 800a8ca:	d173      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a8cc:	4b9c      	ldr	r3, [pc, #624]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a8d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8dc:	d02f      	beq.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8e4:	d863      	bhi.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d004      	beq.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8f2:	d012      	beq.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a8f4:	e05b      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8f6:	4b92      	ldr	r3, [pc, #584]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a902:	d107      	bne.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a904:	f107 0318 	add.w	r3, r7, #24
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 f991 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a912:	e16e      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a918:	e16b      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a91a:	4b89      	ldr	r3, [pc, #548]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a926:	d107      	bne.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a928:	f107 030c 	add.w	r3, r7, #12
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 fad3 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a936:	e15c      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a93c:	e159      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a93e:	4b80      	ldr	r3, [pc, #512]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a942:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a946:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a948:	4b7d      	ldr	r3, [pc, #500]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b04      	cmp	r3, #4
 800a952:	d10c      	bne.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a956:	2b00      	cmp	r3, #0
 800a958:	d109      	bne.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a95a:	4b79      	ldr	r3, [pc, #484]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	08db      	lsrs	r3, r3, #3
 800a960:	f003 0303 	and.w	r3, r3, #3
 800a964:	4a77      	ldr	r2, [pc, #476]	@ (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a966:	fa22 f303 	lsr.w	r3, r2, r3
 800a96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a96c:	e01e      	b.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a96e:	4b74      	ldr	r3, [pc, #464]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a97a:	d106      	bne.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a982:	d102      	bne.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a984:	4b70      	ldr	r3, [pc, #448]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a988:	e010      	b.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a98a:	4b6d      	ldr	r3, [pc, #436]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a996:	d106      	bne.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a99a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a99e:	d102      	bne.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9a0:	4b6a      	ldr	r3, [pc, #424]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9a4:	e002      	b.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9aa:	e122      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9ac:	e121      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b2:	e11e      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a9b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9b8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a9bc:	430b      	orrs	r3, r1
 800a9be:	d133      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a9c0:	4b5f      	ldr	r3, [pc, #380]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d004      	beq.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9d6:	d012      	beq.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a9d8:	e023      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9da:	4b59      	ldr	r3, [pc, #356]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9e6:	d107      	bne.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 fbc7 	bl	800b180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9f6:	e0fc      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9fc:	e0f9      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9fe:	4b50      	ldr	r3, [pc, #320]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa0a:	d107      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa0c:	f107 0318 	add.w	r3, r7, #24
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 f90d 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa1a:	e0ea      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa20:	e0e7      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa26:	e0e4      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aa28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa2c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800aa30:	430b      	orrs	r3, r1
 800aa32:	f040 808d 	bne.w	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aa36:	4b42      	ldr	r3, [pc, #264]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa3a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aa3e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa46:	d06b      	beq.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa4e:	d874      	bhi.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa56:	d056      	beq.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800aa58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa5e:	d86c      	bhi.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa66:	d03b      	beq.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa6e:	d864      	bhi.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa76:	d021      	beq.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800aa78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa7e:	d85c      	bhi.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d004      	beq.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800aa86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa8c:	d004      	beq.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800aa8e:	e054      	b.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa90:	f000 f8b8 	bl	800ac04 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa96:	e0ac      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa98:	4b29      	ldr	r3, [pc, #164]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aaa0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaa4:	d107      	bne.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa6:	f107 0318 	add.w	r3, r7, #24
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 f8c0 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aab4:	e09d      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaba:	e09a      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aabc:	4b20      	ldr	r3, [pc, #128]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aac8:	d107      	bne.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaca:	f107 030c 	add.w	r3, r7, #12
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fa02 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aad8:	e08b      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aade:	e088      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aae0:	4b17      	ldr	r3, [pc, #92]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0304 	and.w	r3, r3, #4
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	d109      	bne.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaec:	4b14      	ldr	r3, [pc, #80]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	08db      	lsrs	r3, r3, #3
 800aaf2:	f003 0303 	and.w	r3, r3, #3
 800aaf6:	4a13      	ldr	r2, [pc, #76]	@ (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aaf8:	fa22 f303 	lsr.w	r3, r2, r3
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aafe:	e078      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab04:	e075      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab06:	4b0e      	ldr	r3, [pc, #56]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab12:	d102      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ab14:	4b0c      	ldr	r3, [pc, #48]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab18:	e06b      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab1e:	e068      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab20:	4b07      	ldr	r3, [pc, #28]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab2c:	d102      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ab2e:	4b07      	ldr	r3, [pc, #28]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ab30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab32:	e05e      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab38:	e05b      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab3e:	e058      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab40:	58024400 	.word	0x58024400
 800ab44:	03d09000 	.word	0x03d09000
 800ab48:	003d0900 	.word	0x003d0900
 800ab4c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ab50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab54:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ab58:	430b      	orrs	r3, r1
 800ab5a:	d148      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ab5c:	4b27      	ldr	r3, [pc, #156]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab6c:	d02a      	beq.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab74:	d838      	bhi.n	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d004      	beq.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab82:	d00d      	beq.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ab84:	e030      	b.n	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab86:	4b1d      	ldr	r3, [pc, #116]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab92:	d102      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ab94:	4b1a      	ldr	r3, [pc, #104]	@ (800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ab96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab98:	e02b      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab9e:	e028      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aba0:	4b16      	ldr	r3, [pc, #88]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aba8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abac:	d107      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 fae4 	bl	800b180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abbc:	e019      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc2:	e016      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abc4:	4b0d      	ldr	r3, [pc, #52]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abd0:	d107      	bne.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abd2:	f107 0318 	add.w	r3, r7, #24
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 f82a 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abe0:	e007      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abe6:	e004      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abec:	e001      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800abf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3740      	adds	r7, #64	@ 0x40
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	58024400 	.word	0x58024400
 800ac00:	007a1200 	.word	0x007a1200

0800ac04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ac08:	f7fd ffd4 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4b06      	ldr	r3, [pc, #24]	@ (800ac28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	091b      	lsrs	r3, r3, #4
 800ac14:	f003 0307 	and.w	r3, r3, #7
 800ac18:	4904      	ldr	r1, [pc, #16]	@ (800ac2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ac1a:	5ccb      	ldrb	r3, [r1, r3]
 800ac1c:	f003 031f 	and.w	r3, r3, #31
 800ac20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	58024400 	.word	0x58024400
 800ac2c:	08023578 	.word	0x08023578

0800ac30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b089      	sub	sp, #36	@ 0x24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac38:	4ba1      	ldr	r3, [pc, #644]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac3c:	f003 0303 	and.w	r3, r3, #3
 800ac40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ac42:	4b9f      	ldr	r3, [pc, #636]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac46:	0b1b      	lsrs	r3, r3, #12
 800ac48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ac4e:	4b9c      	ldr	r3, [pc, #624]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac52:	091b      	lsrs	r3, r3, #4
 800ac54:	f003 0301 	and.w	r3, r3, #1
 800ac58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ac5a:	4b99      	ldr	r3, [pc, #612]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac5e:	08db      	lsrs	r3, r3, #3
 800ac60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	fb02 f303 	mul.w	r3, r2, r3
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 8111 	beq.w	800aea0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	f000 8083 	beq.w	800ad8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	f200 80a1 	bhi.w	800add0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d003      	beq.n	800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d056      	beq.n	800ad48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac9a:	e099      	b.n	800add0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac9c:	4b88      	ldr	r3, [pc, #544]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0320 	and.w	r3, r3, #32
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d02d      	beq.n	800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aca8:	4b85      	ldr	r3, [pc, #532]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	08db      	lsrs	r3, r3, #3
 800acae:	f003 0303 	and.w	r3, r3, #3
 800acb2:	4a84      	ldr	r2, [pc, #528]	@ (800aec4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800acb4:	fa22 f303 	lsr.w	r3, r2, r3
 800acb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	ee07 3a90 	vmov	s15, r3
 800acc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd2:	4b7b      	ldr	r3, [pc, #492]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ace6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad02:	e087      	b.n	800ae14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aecc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ad12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad16:	4b6a      	ldr	r3, [pc, #424]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad46:	e065      	b.n	800ae14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad5a:	4b59      	ldr	r3, [pc, #356]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad8a:	e043      	b.n	800ae14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad9e:	4b48      	ldr	r3, [pc, #288]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ada0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ada2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adae:	ed97 6a03 	vldr	s12, [r7, #12]
 800adb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adce:	e021      	b.n	800ae14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800adde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ade2:	4b37      	ldr	r3, [pc, #220]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adea:	ee07 3a90 	vmov	s15, r3
 800adee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800adf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ae14:	4b2a      	ldr	r3, [pc, #168]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae18:	0a5b      	lsrs	r3, r3, #9
 800ae1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae3a:	ee17 2a90 	vmov	r2, s15
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ae42:	4b1f      	ldr	r3, [pc, #124]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae46:	0c1b      	lsrs	r3, r3, #16
 800ae48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae4c:	ee07 3a90 	vmov	s15, r3
 800ae50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae68:	ee17 2a90 	vmov	r2, s15
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ae70:	4b13      	ldr	r3, [pc, #76]	@ (800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae74:	0e1b      	lsrs	r3, r3, #24
 800ae76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae96:	ee17 2a90 	vmov	r2, s15
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae9e:	e008      	b.n	800aeb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	609a      	str	r2, [r3, #8]
}
 800aeb2:	bf00      	nop
 800aeb4:	3724      	adds	r7, #36	@ 0x24
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	58024400 	.word	0x58024400
 800aec4:	03d09000 	.word	0x03d09000
 800aec8:	46000000 	.word	0x46000000
 800aecc:	4c742400 	.word	0x4c742400
 800aed0:	4a742400 	.word	0x4a742400
 800aed4:	4af42400 	.word	0x4af42400

0800aed8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b089      	sub	sp, #36	@ 0x24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aee0:	4ba1      	ldr	r3, [pc, #644]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee4:	f003 0303 	and.w	r3, r3, #3
 800aee8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aeea:	4b9f      	ldr	r3, [pc, #636]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeee:	0d1b      	lsrs	r3, r3, #20
 800aef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aef4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aef6:	4b9c      	ldr	r3, [pc, #624]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefa:	0a1b      	lsrs	r3, r3, #8
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800af02:	4b99      	ldr	r3, [pc, #612]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af06:	08db      	lsrs	r3, r3, #3
 800af08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	fb02 f303 	mul.w	r3, r2, r3
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8111 	beq.w	800b148 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	f000 8083 	beq.w	800b034 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	2b02      	cmp	r3, #2
 800af32:	f200 80a1 	bhi.w	800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d056      	beq.n	800aff0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800af42:	e099      	b.n	800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af44:	4b88      	ldr	r3, [pc, #544]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0320 	and.w	r3, r3, #32
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d02d      	beq.n	800afac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af50:	4b85      	ldr	r3, [pc, #532]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	08db      	lsrs	r3, r3, #3
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	4a84      	ldr	r2, [pc, #528]	@ (800b16c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af5c:	fa22 f303 	lsr.w	r3, r2, r3
 800af60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	ee07 3a90 	vmov	s15, r3
 800af68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	ee07 3a90 	vmov	s15, r3
 800af72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af7a:	4b7b      	ldr	r3, [pc, #492]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afaa:	e087      	b.n	800b0bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b174 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800afba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afbe:	4b6a      	ldr	r3, [pc, #424]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afc6:	ee07 3a90 	vmov	s15, r3
 800afca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afce:	ed97 6a03 	vldr	s12, [r7, #12]
 800afd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afee:	e065      	b.n	800b0bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800affa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800affe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b002:	4b59      	ldr	r3, [pc, #356]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b012:	ed97 6a03 	vldr	s12, [r7, #12]
 800b016:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b02e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b032:	e043      	b.n	800b0bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b17c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b046:	4b48      	ldr	r3, [pc, #288]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b04e:	ee07 3a90 	vmov	s15, r3
 800b052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b056:	ed97 6a03 	vldr	s12, [r7, #12]
 800b05a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b076:	e021      	b.n	800b0bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	ee07 3a90 	vmov	s15, r3
 800b07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b082:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b08a:	4b37      	ldr	r3, [pc, #220]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b092:	ee07 3a90 	vmov	s15, r3
 800b096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b09a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b09e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b0bc:	4b2a      	ldr	r3, [pc, #168]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0c0:	0a5b      	lsrs	r3, r3, #9
 800b0c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0c6:	ee07 3a90 	vmov	s15, r3
 800b0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0e2:	ee17 2a90 	vmov	r2, s15
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b0ea:	4b1f      	ldr	r3, [pc, #124]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ee:	0c1b      	lsrs	r3, r3, #16
 800b0f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0f4:	ee07 3a90 	vmov	s15, r3
 800b0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b100:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b104:	edd7 6a07 	vldr	s13, [r7, #28]
 800b108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b10c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b110:	ee17 2a90 	vmov	r2, s15
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b118:	4b13      	ldr	r3, [pc, #76]	@ (800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b11a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b11c:	0e1b      	lsrs	r3, r3, #24
 800b11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b122:	ee07 3a90 	vmov	s15, r3
 800b126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b12e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b132:	edd7 6a07 	vldr	s13, [r7, #28]
 800b136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b13a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b13e:	ee17 2a90 	vmov	r2, s15
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b146:	e008      	b.n	800b15a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	609a      	str	r2, [r3, #8]
}
 800b15a:	bf00      	nop
 800b15c:	3724      	adds	r7, #36	@ 0x24
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	58024400 	.word	0x58024400
 800b16c:	03d09000 	.word	0x03d09000
 800b170:	46000000 	.word	0x46000000
 800b174:	4c742400 	.word	0x4c742400
 800b178:	4a742400 	.word	0x4a742400
 800b17c:	4af42400 	.word	0x4af42400

0800b180 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b180:	b480      	push	{r7}
 800b182:	b089      	sub	sp, #36	@ 0x24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b188:	4ba0      	ldr	r3, [pc, #640]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b18c:	f003 0303 	and.w	r3, r3, #3
 800b190:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b192:	4b9e      	ldr	r3, [pc, #632]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b196:	091b      	lsrs	r3, r3, #4
 800b198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b19c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b19e:	4b9b      	ldr	r3, [pc, #620]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1a8:	4b98      	ldr	r3, [pc, #608]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1ac:	08db      	lsrs	r3, r3, #3
 800b1ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	fb02 f303 	mul.w	r3, r2, r3
 800b1b8:	ee07 3a90 	vmov	s15, r3
 800b1bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 8111 	beq.w	800b3ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	f000 8083 	beq.w	800b2da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	f200 80a1 	bhi.w	800b31e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d056      	beq.n	800b296 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b1e8:	e099      	b.n	800b31e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1ea:	4b88      	ldr	r3, [pc, #544]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 0320 	and.w	r3, r3, #32
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d02d      	beq.n	800b252 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1f6:	4b85      	ldr	r3, [pc, #532]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	08db      	lsrs	r3, r3, #3
 800b1fc:	f003 0303 	and.w	r3, r3, #3
 800b200:	4a83      	ldr	r2, [pc, #524]	@ (800b410 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b202:	fa22 f303 	lsr.w	r3, r2, r3
 800b206:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	ee07 3a90 	vmov	s15, r3
 800b218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b220:	4b7a      	ldr	r3, [pc, #488]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b228:	ee07 3a90 	vmov	s15, r3
 800b22c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b230:	ed97 6a03 	vldr	s12, [r7, #12]
 800b234:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b414 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b250:	e087      	b.n	800b362 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	ee07 3a90 	vmov	s15, r3
 800b258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b418 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b264:	4b69      	ldr	r3, [pc, #420]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26c:	ee07 3a90 	vmov	s15, r3
 800b270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b274:	ed97 6a03 	vldr	s12, [r7, #12]
 800b278:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b414 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b27c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b284:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b28c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b294:	e065      	b.n	800b362 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	ee07 3a90 	vmov	s15, r3
 800b29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b41c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b2a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2a8:	4b58      	ldr	r3, [pc, #352]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b0:	ee07 3a90 	vmov	s15, r3
 800b2b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2bc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b414 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2d8:	e043      	b.n	800b362 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	ee07 3a90 	vmov	s15, r3
 800b2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b420 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b2e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ec:	4b47      	ldr	r3, [pc, #284]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f4:	ee07 3a90 	vmov	s15, r3
 800b2f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b300:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b414 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b30c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b314:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b318:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b31c:	e021      	b.n	800b362 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	ee07 3a90 	vmov	s15, r3
 800b324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b328:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b418 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b32c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b330:	4b36      	ldr	r3, [pc, #216]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b338:	ee07 3a90 	vmov	s15, r3
 800b33c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b340:	ed97 6a03 	vldr	s12, [r7, #12]
 800b344:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b414 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b34c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b350:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b35c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b360:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b362:	4b2a      	ldr	r3, [pc, #168]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b366:	0a5b      	lsrs	r3, r3, #9
 800b368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b36c:	ee07 3a90 	vmov	s15, r3
 800b370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b374:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b37c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b388:	ee17 2a90 	vmov	r2, s15
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b390:	4b1e      	ldr	r3, [pc, #120]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b394:	0c1b      	lsrs	r3, r3, #16
 800b396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b39a:	ee07 3a90 	vmov	s15, r3
 800b39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3b6:	ee17 2a90 	vmov	r2, s15
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b3be:	4b13      	ldr	r3, [pc, #76]	@ (800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c2:	0e1b      	lsrs	r3, r3, #24
 800b3c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3c8:	ee07 3a90 	vmov	s15, r3
 800b3cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3e4:	ee17 2a90 	vmov	r2, s15
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b3ec:	e008      	b.n	800b400 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	609a      	str	r2, [r3, #8]
}
 800b400:	bf00      	nop
 800b402:	3724      	adds	r7, #36	@ 0x24
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr
 800b40c:	58024400 	.word	0x58024400
 800b410:	03d09000 	.word	0x03d09000
 800b414:	46000000 	.word	0x46000000
 800b418:	4c742400 	.word	0x4c742400
 800b41c:	4a742400 	.word	0x4a742400
 800b420:	4af42400 	.word	0x4af42400

0800b424 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b432:	4b53      	ldr	r3, [pc, #332]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b436:	f003 0303 	and.w	r3, r3, #3
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d101      	bne.n	800b442 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e099      	b.n	800b576 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b442:	4b4f      	ldr	r3, [pc, #316]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a4e      	ldr	r2, [pc, #312]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b448:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b44c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b44e:	f7f7 ffaf 	bl	80033b0 <HAL_GetTick>
 800b452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b454:	e008      	b.n	800b468 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b456:	f7f7 ffab 	bl	80033b0 <HAL_GetTick>
 800b45a:	4602      	mov	r2, r0
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	2b02      	cmp	r3, #2
 800b462:	d901      	bls.n	800b468 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b464:	2303      	movs	r3, #3
 800b466:	e086      	b.n	800b576 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b468:	4b45      	ldr	r3, [pc, #276]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1f0      	bne.n	800b456 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b474:	4b42      	ldr	r3, [pc, #264]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b478:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	031b      	lsls	r3, r3, #12
 800b482:	493f      	ldr	r1, [pc, #252]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b484:	4313      	orrs	r3, r2
 800b486:	628b      	str	r3, [r1, #40]	@ 0x28
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	3b01      	subs	r3, #1
 800b498:	025b      	lsls	r3, r3, #9
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	431a      	orrs	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	041b      	lsls	r3, r3, #16
 800b4a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	061b      	lsls	r3, r3, #24
 800b4b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b4b8:	4931      	ldr	r1, [pc, #196]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b4be:	4b30      	ldr	r3, [pc, #192]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	492d      	ldr	r1, [pc, #180]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b4d0:	4b2b      	ldr	r3, [pc, #172]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d4:	f023 0220 	bic.w	r2, r3, #32
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	699b      	ldr	r3, [r3, #24]
 800b4dc:	4928      	ldr	r1, [pc, #160]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b4e2:	4b27      	ldr	r3, [pc, #156]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e6:	4a26      	ldr	r2, [pc, #152]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b4e8:	f023 0310 	bic.w	r3, r3, #16
 800b4ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b4ee:	4b24      	ldr	r3, [pc, #144]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b4f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4f2:	4b24      	ldr	r3, [pc, #144]	@ (800b584 <RCCEx_PLL2_Config+0x160>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	69d2      	ldr	r2, [r2, #28]
 800b4fa:	00d2      	lsls	r2, r2, #3
 800b4fc:	4920      	ldr	r1, [pc, #128]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b502:	4b1f      	ldr	r3, [pc, #124]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b506:	4a1e      	ldr	r2, [pc, #120]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b508:	f043 0310 	orr.w	r3, r3, #16
 800b50c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d106      	bne.n	800b522 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b514:	4b1a      	ldr	r3, [pc, #104]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b518:	4a19      	ldr	r2, [pc, #100]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b51a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b51e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b520:	e00f      	b.n	800b542 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d106      	bne.n	800b536 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b528:	4b15      	ldr	r3, [pc, #84]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b52c:	4a14      	ldr	r2, [pc, #80]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b52e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b532:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b534:	e005      	b.n	800b542 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b536:	4b12      	ldr	r3, [pc, #72]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53a:	4a11      	ldr	r2, [pc, #68]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b53c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b540:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b542:	4b0f      	ldr	r3, [pc, #60]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a0e      	ldr	r2, [pc, #56]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b548:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b54c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b54e:	f7f7 ff2f 	bl	80033b0 <HAL_GetTick>
 800b552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b554:	e008      	b.n	800b568 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b556:	f7f7 ff2b 	bl	80033b0 <HAL_GetTick>
 800b55a:	4602      	mov	r2, r0
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	2b02      	cmp	r3, #2
 800b562:	d901      	bls.n	800b568 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b564:	2303      	movs	r3, #3
 800b566:	e006      	b.n	800b576 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b568:	4b05      	ldr	r3, [pc, #20]	@ (800b580 <RCCEx_PLL2_Config+0x15c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d0f0      	beq.n	800b556 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b574:	7bfb      	ldrb	r3, [r7, #15]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	58024400 	.word	0x58024400
 800b584:	ffff0007 	.word	0xffff0007

0800b588 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b596:	4b53      	ldr	r3, [pc, #332]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b59a:	f003 0303 	and.w	r3, r3, #3
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d101      	bne.n	800b5a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e099      	b.n	800b6da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b5a6:	4b4f      	ldr	r3, [pc, #316]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a4e      	ldr	r2, [pc, #312]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b5ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5b2:	f7f7 fefd 	bl	80033b0 <HAL_GetTick>
 800b5b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b5b8:	e008      	b.n	800b5cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b5ba:	f7f7 fef9 	bl	80033b0 <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d901      	bls.n	800b5cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e086      	b.n	800b6da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b5cc:	4b45      	ldr	r3, [pc, #276]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1f0      	bne.n	800b5ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b5d8:	4b42      	ldr	r3, [pc, #264]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	051b      	lsls	r3, r3, #20
 800b5e6:	493f      	ldr	r1, [pc, #252]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	628b      	str	r3, [r1, #40]	@ 0x28
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	025b      	lsls	r3, r3, #9
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	3b01      	subs	r3, #1
 800b608:	041b      	lsls	r3, r3, #16
 800b60a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b60e:	431a      	orrs	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	3b01      	subs	r3, #1
 800b616:	061b      	lsls	r3, r3, #24
 800b618:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b61c:	4931      	ldr	r1, [pc, #196]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b61e:	4313      	orrs	r3, r2
 800b620:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b622:	4b30      	ldr	r3, [pc, #192]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b626:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	695b      	ldr	r3, [r3, #20]
 800b62e:	492d      	ldr	r1, [pc, #180]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b630:	4313      	orrs	r3, r2
 800b632:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b634:	4b2b      	ldr	r3, [pc, #172]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b638:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	4928      	ldr	r1, [pc, #160]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b642:	4313      	orrs	r3, r2
 800b644:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b646:	4b27      	ldr	r3, [pc, #156]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64a:	4a26      	ldr	r2, [pc, #152]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b64c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b652:	4b24      	ldr	r3, [pc, #144]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b656:	4b24      	ldr	r3, [pc, #144]	@ (800b6e8 <RCCEx_PLL3_Config+0x160>)
 800b658:	4013      	ands	r3, r2
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	69d2      	ldr	r2, [r2, #28]
 800b65e:	00d2      	lsls	r2, r2, #3
 800b660:	4920      	ldr	r1, [pc, #128]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b662:	4313      	orrs	r3, r2
 800b664:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b666:	4b1f      	ldr	r3, [pc, #124]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66a:	4a1e      	ldr	r2, [pc, #120]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b66c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d106      	bne.n	800b686 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b678:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67c:	4a19      	ldr	r2, [pc, #100]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b67e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b682:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b684:	e00f      	b.n	800b6a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d106      	bne.n	800b69a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b68c:	4b15      	ldr	r3, [pc, #84]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b690:	4a14      	ldr	r2, [pc, #80]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b692:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b696:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b698:	e005      	b.n	800b6a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b69a:	4b12      	ldr	r3, [pc, #72]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b69e:	4a11      	ldr	r2, [pc, #68]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b6a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b6a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b6a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a0e      	ldr	r2, [pc, #56]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b6ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6b2:	f7f7 fe7d 	bl	80033b0 <HAL_GetTick>
 800b6b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b6b8:	e008      	b.n	800b6cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b6ba:	f7f7 fe79 	bl	80033b0 <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d901      	bls.n	800b6cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e006      	b.n	800b6da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b6cc:	4b05      	ldr	r3, [pc, #20]	@ (800b6e4 <RCCEx_PLL3_Config+0x15c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0f0      	beq.n	800b6ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	58024400 	.word	0x58024400
 800b6e8:	ffff0007 	.word	0xffff0007

0800b6ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d101      	bne.n	800b6fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e049      	b.n	800b792 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d106      	bne.n	800b718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f841 	bl	800b79a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2202      	movs	r2, #2
 800b71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3304      	adds	r3, #4
 800b728:	4619      	mov	r1, r3
 800b72a:	4610      	mov	r0, r2
 800b72c:	f000 f9e8 	bl	800bb00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b7a2:	bf00      	nop
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
	...

0800b7b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d001      	beq.n	800b7c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e054      	b.n	800b872 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f042 0201 	orr.w	r2, r2, #1
 800b7de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a26      	ldr	r2, [pc, #152]	@ (800b880 <HAL_TIM_Base_Start_IT+0xd0>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d022      	beq.n	800b830 <HAL_TIM_Base_Start_IT+0x80>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7f2:	d01d      	beq.n	800b830 <HAL_TIM_Base_Start_IT+0x80>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a22      	ldr	r2, [pc, #136]	@ (800b884 <HAL_TIM_Base_Start_IT+0xd4>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d018      	beq.n	800b830 <HAL_TIM_Base_Start_IT+0x80>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a21      	ldr	r2, [pc, #132]	@ (800b888 <HAL_TIM_Base_Start_IT+0xd8>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d013      	beq.n	800b830 <HAL_TIM_Base_Start_IT+0x80>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a1f      	ldr	r2, [pc, #124]	@ (800b88c <HAL_TIM_Base_Start_IT+0xdc>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d00e      	beq.n	800b830 <HAL_TIM_Base_Start_IT+0x80>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a1e      	ldr	r2, [pc, #120]	@ (800b890 <HAL_TIM_Base_Start_IT+0xe0>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d009      	beq.n	800b830 <HAL_TIM_Base_Start_IT+0x80>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a1c      	ldr	r2, [pc, #112]	@ (800b894 <HAL_TIM_Base_Start_IT+0xe4>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d004      	beq.n	800b830 <HAL_TIM_Base_Start_IT+0x80>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a1b      	ldr	r2, [pc, #108]	@ (800b898 <HAL_TIM_Base_Start_IT+0xe8>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d115      	bne.n	800b85c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689a      	ldr	r2, [r3, #8]
 800b836:	4b19      	ldr	r3, [pc, #100]	@ (800b89c <HAL_TIM_Base_Start_IT+0xec>)
 800b838:	4013      	ands	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2b06      	cmp	r3, #6
 800b840:	d015      	beq.n	800b86e <HAL_TIM_Base_Start_IT+0xbe>
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b848:	d011      	beq.n	800b86e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f042 0201 	orr.w	r2, r2, #1
 800b858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b85a:	e008      	b.n	800b86e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f042 0201 	orr.w	r2, r2, #1
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	e000      	b.n	800b870 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b86e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	40010000 	.word	0x40010000
 800b884:	40000400 	.word	0x40000400
 800b888:	40000800 	.word	0x40000800
 800b88c:	40000c00 	.word	0x40000c00
 800b890:	40010400 	.word	0x40010400
 800b894:	40001800 	.word	0x40001800
 800b898:	40014000 	.word	0x40014000
 800b89c:	00010007 	.word	0x00010007

0800b8a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	f003 0302 	and.w	r3, r3, #2
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d020      	beq.n	800b904 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f003 0302 	and.w	r3, r3, #2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d01b      	beq.n	800b904 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f06f 0202 	mvn.w	r2, #2
 800b8d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	f003 0303 	and.w	r3, r3, #3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d003      	beq.n	800b8f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f8e9 	bl	800bac2 <HAL_TIM_IC_CaptureCallback>
 800b8f0:	e005      	b.n	800b8fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f8db 	bl	800baae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f8ec 	bl	800bad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	f003 0304 	and.w	r3, r3, #4
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d020      	beq.n	800b950 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f003 0304 	and.w	r3, r3, #4
 800b914:	2b00      	cmp	r3, #0
 800b916:	d01b      	beq.n	800b950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f06f 0204 	mvn.w	r2, #4
 800b920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2202      	movs	r2, #2
 800b926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f8c3 	bl	800bac2 <HAL_TIM_IC_CaptureCallback>
 800b93c:	e005      	b.n	800b94a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 f8b5 	bl	800baae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f8c6 	bl	800bad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f003 0308 	and.w	r3, r3, #8
 800b956:	2b00      	cmp	r3, #0
 800b958:	d020      	beq.n	800b99c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f003 0308 	and.w	r3, r3, #8
 800b960:	2b00      	cmp	r3, #0
 800b962:	d01b      	beq.n	800b99c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f06f 0208 	mvn.w	r2, #8
 800b96c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2204      	movs	r2, #4
 800b972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	69db      	ldr	r3, [r3, #28]
 800b97a:	f003 0303 	and.w	r3, r3, #3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f89d 	bl	800bac2 <HAL_TIM_IC_CaptureCallback>
 800b988:	e005      	b.n	800b996 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f88f 	bl	800baae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 f8a0 	bl	800bad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f003 0310 	and.w	r3, r3, #16
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d020      	beq.n	800b9e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f003 0310 	and.w	r3, r3, #16
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d01b      	beq.n	800b9e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f06f 0210 	mvn.w	r2, #16
 800b9b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2208      	movs	r2, #8
 800b9be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	69db      	ldr	r3, [r3, #28]
 800b9c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f877 	bl	800bac2 <HAL_TIM_IC_CaptureCallback>
 800b9d4:	e005      	b.n	800b9e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f869 	bl	800baae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 f87a 	bl	800bad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f003 0301 	and.w	r3, r3, #1
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00c      	beq.n	800ba0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d007      	beq.n	800ba0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f06f 0201 	mvn.w	r2, #1
 800ba04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7f6 f8a2 	bl	8001b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d104      	bne.n	800ba20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00c      	beq.n	800ba3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d007      	beq.n	800ba3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ba32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f913 	bl	800bc60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00c      	beq.n	800ba5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d007      	beq.n	800ba5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ba56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f90b 	bl	800bc74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00c      	beq.n	800ba82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d007      	beq.n	800ba82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ba7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 f834 	bl	800baea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	f003 0320 	and.w	r3, r3, #32
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00c      	beq.n	800baa6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f003 0320 	and.w	r3, r3, #32
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d007      	beq.n	800baa6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f06f 0220 	mvn.w	r2, #32
 800ba9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f8d3 	bl	800bc4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800baa6:	bf00      	nop
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800baae:	b480      	push	{r7}
 800bab0:	b083      	sub	sp, #12
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bab6:	bf00      	nop
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bac2:	b480      	push	{r7}
 800bac4:	b083      	sub	sp, #12
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800baca:	bf00      	nop
 800bacc:	370c      	adds	r7, #12
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bade:	bf00      	nop
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800baea:	b480      	push	{r7}
 800baec:	b083      	sub	sp, #12
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
	...

0800bb00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a46      	ldr	r2, [pc, #280]	@ (800bc2c <TIM_Base_SetConfig+0x12c>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d013      	beq.n	800bb40 <TIM_Base_SetConfig+0x40>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb1e:	d00f      	beq.n	800bb40 <TIM_Base_SetConfig+0x40>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a43      	ldr	r2, [pc, #268]	@ (800bc30 <TIM_Base_SetConfig+0x130>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d00b      	beq.n	800bb40 <TIM_Base_SetConfig+0x40>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a42      	ldr	r2, [pc, #264]	@ (800bc34 <TIM_Base_SetConfig+0x134>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d007      	beq.n	800bb40 <TIM_Base_SetConfig+0x40>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a41      	ldr	r2, [pc, #260]	@ (800bc38 <TIM_Base_SetConfig+0x138>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d003      	beq.n	800bb40 <TIM_Base_SetConfig+0x40>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a40      	ldr	r2, [pc, #256]	@ (800bc3c <TIM_Base_SetConfig+0x13c>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d108      	bne.n	800bb52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a35      	ldr	r2, [pc, #212]	@ (800bc2c <TIM_Base_SetConfig+0x12c>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d01f      	beq.n	800bb9a <TIM_Base_SetConfig+0x9a>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb60:	d01b      	beq.n	800bb9a <TIM_Base_SetConfig+0x9a>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a32      	ldr	r2, [pc, #200]	@ (800bc30 <TIM_Base_SetConfig+0x130>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d017      	beq.n	800bb9a <TIM_Base_SetConfig+0x9a>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a31      	ldr	r2, [pc, #196]	@ (800bc34 <TIM_Base_SetConfig+0x134>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d013      	beq.n	800bb9a <TIM_Base_SetConfig+0x9a>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a30      	ldr	r2, [pc, #192]	@ (800bc38 <TIM_Base_SetConfig+0x138>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d00f      	beq.n	800bb9a <TIM_Base_SetConfig+0x9a>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4a2f      	ldr	r2, [pc, #188]	@ (800bc3c <TIM_Base_SetConfig+0x13c>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d00b      	beq.n	800bb9a <TIM_Base_SetConfig+0x9a>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4a2e      	ldr	r2, [pc, #184]	@ (800bc40 <TIM_Base_SetConfig+0x140>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d007      	beq.n	800bb9a <TIM_Base_SetConfig+0x9a>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4a2d      	ldr	r2, [pc, #180]	@ (800bc44 <TIM_Base_SetConfig+0x144>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d003      	beq.n	800bb9a <TIM_Base_SetConfig+0x9a>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4a2c      	ldr	r2, [pc, #176]	@ (800bc48 <TIM_Base_SetConfig+0x148>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d108      	bne.n	800bbac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	689a      	ldr	r2, [r3, #8]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a16      	ldr	r2, [pc, #88]	@ (800bc2c <TIM_Base_SetConfig+0x12c>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d00f      	beq.n	800bbf8 <TIM_Base_SetConfig+0xf8>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a18      	ldr	r2, [pc, #96]	@ (800bc3c <TIM_Base_SetConfig+0x13c>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d00b      	beq.n	800bbf8 <TIM_Base_SetConfig+0xf8>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a17      	ldr	r2, [pc, #92]	@ (800bc40 <TIM_Base_SetConfig+0x140>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d007      	beq.n	800bbf8 <TIM_Base_SetConfig+0xf8>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a16      	ldr	r2, [pc, #88]	@ (800bc44 <TIM_Base_SetConfig+0x144>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d003      	beq.n	800bbf8 <TIM_Base_SetConfig+0xf8>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a15      	ldr	r2, [pc, #84]	@ (800bc48 <TIM_Base_SetConfig+0x148>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d103      	bne.n	800bc00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	691a      	ldr	r2, [r3, #16]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	f003 0301 	and.w	r3, r3, #1
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d105      	bne.n	800bc1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	f023 0201 	bic.w	r2, r3, #1
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	611a      	str	r2, [r3, #16]
  }
}
 800bc1e:	bf00      	nop
 800bc20:	3714      	adds	r7, #20
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	40010000 	.word	0x40010000
 800bc30:	40000400 	.word	0x40000400
 800bc34:	40000800 	.word	0x40000800
 800bc38:	40000c00 	.word	0x40000c00
 800bc3c:	40010400 	.word	0x40010400
 800bc40:	40014000 	.word	0x40014000
 800bc44:	40014400 	.word	0x40014400
 800bc48:	40014800 	.word	0x40014800

0800bc4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc54:	bf00      	nop
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d101      	bne.n	800bc9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc96:	2301      	movs	r3, #1
 800bc98:	e042      	b.n	800bd20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d106      	bne.n	800bcb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7f7 f84b 	bl	8002d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2224      	movs	r2, #36	@ 0x24
 800bcb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 0201 	bic.w	r2, r2, #1
 800bcc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d002      	beq.n	800bcd8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f001 fae0 	bl	800d298 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 fd75 	bl	800c7c8 <UART_SetConfig>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d101      	bne.n	800bce8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e01b      	b.n	800bd20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bcf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	689a      	ldr	r2, [r3, #8]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bd06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0201 	orr.w	r2, r2, #1
 800bd16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f001 fb5f 	bl	800d3dc <UART_CheckIdleState>
 800bd1e:	4603      	mov	r3, r0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08a      	sub	sp, #40	@ 0x28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	4613      	mov	r3, r2
 800bd34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd3c:	2b20      	cmp	r3, #32
 800bd3e:	d167      	bne.n	800be10 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d002      	beq.n	800bd4c <HAL_UART_Transmit_DMA+0x24>
 800bd46:	88fb      	ldrh	r3, [r7, #6]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d101      	bne.n	800bd50 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e060      	b.n	800be12 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	88fa      	ldrh	r2, [r7, #6]
 800bd5a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	88fa      	ldrh	r2, [r7, #6]
 800bd62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2221      	movs	r2, #33	@ 0x21
 800bd72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d028      	beq.n	800bdd0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd82:	4a26      	ldr	r2, [pc, #152]	@ (800be1c <HAL_UART_Transmit_DMA+0xf4>)
 800bd84:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd8a:	4a25      	ldr	r2, [pc, #148]	@ (800be20 <HAL_UART_Transmit_DMA+0xf8>)
 800bd8c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd92:	4a24      	ldr	r2, [pc, #144]	@ (800be24 <HAL_UART_Transmit_DMA+0xfc>)
 800bd94:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bda6:	4619      	mov	r1, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3328      	adds	r3, #40	@ 0x28
 800bdae:	461a      	mov	r2, r3
 800bdb0:	88fb      	ldrh	r3, [r7, #6]
 800bdb2:	f7f9 fa6b 	bl	800528c <HAL_DMA_Start_IT>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d009      	beq.n	800bdd0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2210      	movs	r2, #16
 800bdc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2220      	movs	r2, #32
 800bdc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e020      	b.n	800be12 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2240      	movs	r2, #64	@ 0x40
 800bdd6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3308      	adds	r3, #8
 800bdde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	e853 3f00 	ldrex	r3, [r3]
 800bde6:	613b      	str	r3, [r7, #16]
   return(result);
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdee:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdf8:	623a      	str	r2, [r7, #32]
 800bdfa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfc:	69f9      	ldr	r1, [r7, #28]
 800bdfe:	6a3a      	ldr	r2, [r7, #32]
 800be00:	e841 2300 	strex	r3, r2, [r1]
 800be04:	61bb      	str	r3, [r7, #24]
   return(result);
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1e5      	bne.n	800bdd8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	e000      	b.n	800be12 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800be10:	2302      	movs	r3, #2
  }
}
 800be12:	4618      	mov	r0, r3
 800be14:	3728      	adds	r7, #40	@ 0x28
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	0800d8a9 	.word	0x0800d8a9
 800be20:	0800d93f 	.word	0x0800d93f
 800be24:	0800dac1 	.word	0x0800dac1

0800be28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b08a      	sub	sp, #40	@ 0x28
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	4613      	mov	r3, r2
 800be34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be3c:	2b20      	cmp	r3, #32
 800be3e:	d137      	bne.n	800beb0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d002      	beq.n	800be4c <HAL_UART_Receive_DMA+0x24>
 800be46:	88fb      	ldrh	r3, [r7, #6]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	e030      	b.n	800beb2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a18      	ldr	r2, [pc, #96]	@ (800bebc <HAL_UART_Receive_DMA+0x94>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d01f      	beq.n	800bea0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d018      	beq.n	800bea0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	e853 3f00 	ldrex	r3, [r3]
 800be7a:	613b      	str	r3, [r7, #16]
   return(result);
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be82:	627b      	str	r3, [r7, #36]	@ 0x24
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	461a      	mov	r2, r3
 800be8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8c:	623b      	str	r3, [r7, #32]
 800be8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be90:	69f9      	ldr	r1, [r7, #28]
 800be92:	6a3a      	ldr	r2, [r7, #32]
 800be94:	e841 2300 	strex	r3, r2, [r1]
 800be98:	61bb      	str	r3, [r7, #24]
   return(result);
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1e6      	bne.n	800be6e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bea0:	88fb      	ldrh	r3, [r7, #6]
 800bea2:	461a      	mov	r2, r3
 800bea4:	68b9      	ldr	r1, [r7, #8]
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f001 fbb0 	bl	800d60c <UART_Start_Receive_DMA>
 800beac:	4603      	mov	r3, r0
 800beae:	e000      	b.n	800beb2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800beb0:	2302      	movs	r3, #2
  }
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3728      	adds	r7, #40	@ 0x28
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	58000c00 	.word	0x58000c00

0800bec0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b090      	sub	sp, #64	@ 0x40
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bed6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bee2:	2b80      	cmp	r3, #128	@ 0x80
 800bee4:	d139      	bne.n	800bf5a <HAL_UART_DMAStop+0x9a>
 800bee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bee8:	2b21      	cmp	r3, #33	@ 0x21
 800beea:	d136      	bne.n	800bf5a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	3308      	adds	r3, #8
 800bef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	e853 3f00 	ldrex	r3, [r3]
 800befa:	61fb      	str	r3, [r7, #28]
   return(result);
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf02:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3308      	adds	r3, #8
 800bf0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf14:	e841 2300 	strex	r3, r2, [r1]
 800bf18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1e5      	bne.n	800beec <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d015      	beq.n	800bf54 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7f9 fc17 	bl	8005760 <HAL_DMA_Abort>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00d      	beq.n	800bf54 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fb f89d 	bl	800707c <HAL_DMA_GetError>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b20      	cmp	r3, #32
 800bf46:	d105      	bne.n	800bf54 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2210      	movs	r2, #16
 800bf4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e047      	b.n	800bfe4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 fbff 	bl	800d758 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf64:	2b40      	cmp	r3, #64	@ 0x40
 800bf66:	d13c      	bne.n	800bfe2 <HAL_UART_DMAStop+0x122>
 800bf68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf6a:	2b22      	cmp	r3, #34	@ 0x22
 800bf6c:	d139      	bne.n	800bfe2 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3308      	adds	r3, #8
 800bf74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf84:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf8e:	61ba      	str	r2, [r7, #24]
 800bf90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	6979      	ldr	r1, [r7, #20]
 800bf94:	69ba      	ldr	r2, [r7, #24]
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e5      	bne.n	800bf6e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d017      	beq.n	800bfdc <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7f9 fbd4 	bl	8005760 <HAL_DMA_Abort>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00e      	beq.n	800bfdc <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fb f859 	bl	800707c <HAL_DMA_GetError>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b20      	cmp	r3, #32
 800bfce:	d105      	bne.n	800bfdc <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2210      	movs	r2, #16
 800bfd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	e003      	b.n	800bfe4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f001 fbfd 	bl	800d7dc <UART_EndRxTransfer>
  }

  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3740      	adds	r7, #64	@ 0x40
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b0ba      	sub	sp, #232	@ 0xe8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c012:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c016:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c01a:	4013      	ands	r3, r2
 800c01c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c024:	2b00      	cmp	r3, #0
 800c026:	d11b      	bne.n	800c060 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c02c:	f003 0320 	and.w	r3, r3, #32
 800c030:	2b00      	cmp	r3, #0
 800c032:	d015      	beq.n	800c060 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c038:	f003 0320 	and.w	r3, r3, #32
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d105      	bne.n	800c04c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d009      	beq.n	800c060 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c050:	2b00      	cmp	r3, #0
 800c052:	f000 8377 	beq.w	800c744 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	4798      	blx	r3
      }
      return;
 800c05e:	e371      	b.n	800c744 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c064:	2b00      	cmp	r3, #0
 800c066:	f000 8123 	beq.w	800c2b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c06a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c06e:	4b8d      	ldr	r3, [pc, #564]	@ (800c2a4 <HAL_UART_IRQHandler+0x2b8>)
 800c070:	4013      	ands	r3, r2
 800c072:	2b00      	cmp	r3, #0
 800c074:	d106      	bne.n	800c084 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c076:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c07a:	4b8b      	ldr	r3, [pc, #556]	@ (800c2a8 <HAL_UART_IRQHandler+0x2bc>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 8116 	beq.w	800c2b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c088:	f003 0301 	and.w	r3, r3, #1
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d011      	beq.n	800c0b4 <HAL_UART_IRQHandler+0xc8>
 800c090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00b      	beq.n	800c0b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0aa:	f043 0201 	orr.w	r2, r3, #1
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0b8:	f003 0302 	and.w	r3, r3, #2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d011      	beq.n	800c0e4 <HAL_UART_IRQHandler+0xf8>
 800c0c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0c4:	f003 0301 	and.w	r3, r3, #1
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00b      	beq.n	800c0e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2202      	movs	r2, #2
 800c0d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0da:	f043 0204 	orr.w	r2, r3, #4
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0e8:	f003 0304 	and.w	r3, r3, #4
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d011      	beq.n	800c114 <HAL_UART_IRQHandler+0x128>
 800c0f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0f4:	f003 0301 	and.w	r3, r3, #1
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00b      	beq.n	800c114 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2204      	movs	r2, #4
 800c102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c10a:	f043 0202 	orr.w	r2, r3, #2
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c118:	f003 0308 	and.w	r3, r3, #8
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d017      	beq.n	800c150 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c124:	f003 0320 	and.w	r3, r3, #32
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d105      	bne.n	800c138 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c12c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c130:	4b5c      	ldr	r3, [pc, #368]	@ (800c2a4 <HAL_UART_IRQHandler+0x2b8>)
 800c132:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00b      	beq.n	800c150 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2208      	movs	r2, #8
 800c13e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c146:	f043 0208 	orr.w	r2, r3, #8
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d012      	beq.n	800c182 <HAL_UART_IRQHandler+0x196>
 800c15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c160:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00c      	beq.n	800c182 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c178:	f043 0220 	orr.w	r2, r3, #32
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f000 82dd 	beq.w	800c748 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c192:	f003 0320 	and.w	r3, r3, #32
 800c196:	2b00      	cmp	r3, #0
 800c198:	d013      	beq.n	800c1c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c19e:	f003 0320 	and.w	r3, r3, #32
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d105      	bne.n	800c1b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d007      	beq.n	800c1c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1d6:	2b40      	cmp	r3, #64	@ 0x40
 800c1d8:	d005      	beq.n	800c1e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c1da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c1de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d054      	beq.n	800c290 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f001 faf8 	bl	800d7dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1f6:	2b40      	cmp	r3, #64	@ 0x40
 800c1f8:	d146      	bne.n	800c288 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	3308      	adds	r3, #8
 800c200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c204:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c208:	e853 3f00 	ldrex	r3, [r3]
 800c20c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c210:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3308      	adds	r3, #8
 800c222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c226:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c22a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c236:	e841 2300 	strex	r3, r2, [r1]
 800c23a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c23e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1d9      	bne.n	800c1fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d017      	beq.n	800c280 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c256:	4a15      	ldr	r2, [pc, #84]	@ (800c2ac <HAL_UART_IRQHandler+0x2c0>)
 800c258:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c260:	4618      	mov	r0, r3
 800c262:	f7f9 fd9b 	bl	8005d9c <HAL_DMA_Abort_IT>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d019      	beq.n	800c2a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c27a:	4610      	mov	r0, r2
 800c27c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c27e:	e00f      	b.n	800c2a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fa8b 	bl	800c79c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c286:	e00b      	b.n	800c2a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fa87 	bl	800c79c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c28e:	e007      	b.n	800c2a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 fa83 	bl	800c79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c29e:	e253      	b.n	800c748 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2a0:	bf00      	nop
    return;
 800c2a2:	e251      	b.n	800c748 <HAL_UART_IRQHandler+0x75c>
 800c2a4:	10000001 	.word	0x10000001
 800c2a8:	04000120 	.word	0x04000120
 800c2ac:	0800db41 	.word	0x0800db41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	f040 81e7 	bne.w	800c688 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2be:	f003 0310 	and.w	r3, r3, #16
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 81e0 	beq.w	800c688 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2cc:	f003 0310 	and.w	r3, r3, #16
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 81d9 	beq.w	800c688 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2210      	movs	r2, #16
 800c2dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2e8:	2b40      	cmp	r3, #64	@ 0x40
 800c2ea:	f040 8151 	bne.w	800c590 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a96      	ldr	r2, [pc, #600]	@ (800c550 <HAL_UART_IRQHandler+0x564>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d068      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a93      	ldr	r2, [pc, #588]	@ (800c554 <HAL_UART_IRQHandler+0x568>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d061      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a91      	ldr	r2, [pc, #580]	@ (800c558 <HAL_UART_IRQHandler+0x56c>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d05a      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a8e      	ldr	r2, [pc, #568]	@ (800c55c <HAL_UART_IRQHandler+0x570>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d053      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a8c      	ldr	r2, [pc, #560]	@ (800c560 <HAL_UART_IRQHandler+0x574>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d04c      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a89      	ldr	r2, [pc, #548]	@ (800c564 <HAL_UART_IRQHandler+0x578>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d045      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a87      	ldr	r2, [pc, #540]	@ (800c568 <HAL_UART_IRQHandler+0x57c>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d03e      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a84      	ldr	r2, [pc, #528]	@ (800c56c <HAL_UART_IRQHandler+0x580>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d037      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a82      	ldr	r2, [pc, #520]	@ (800c570 <HAL_UART_IRQHandler+0x584>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d030      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a7f      	ldr	r2, [pc, #508]	@ (800c574 <HAL_UART_IRQHandler+0x588>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d029      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a7d      	ldr	r2, [pc, #500]	@ (800c578 <HAL_UART_IRQHandler+0x58c>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d022      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a7a      	ldr	r2, [pc, #488]	@ (800c57c <HAL_UART_IRQHandler+0x590>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d01b      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a78      	ldr	r2, [pc, #480]	@ (800c580 <HAL_UART_IRQHandler+0x594>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d014      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a75      	ldr	r2, [pc, #468]	@ (800c584 <HAL_UART_IRQHandler+0x598>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d00d      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a73      	ldr	r2, [pc, #460]	@ (800c588 <HAL_UART_IRQHandler+0x59c>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d006      	beq.n	800c3ce <HAL_UART_IRQHandler+0x3e2>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a70      	ldr	r2, [pc, #448]	@ (800c58c <HAL_UART_IRQHandler+0x5a0>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d106      	bne.n	800c3dc <HAL_UART_IRQHandler+0x3f0>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	e005      	b.n	800c3e8 <HAL_UART_IRQHandler+0x3fc>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c3ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 81ab 	beq.w	800c74c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c3fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c400:	429a      	cmp	r2, r3
 800c402:	f080 81a3 	bcs.w	800c74c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c40c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c416:	69db      	ldr	r3, [r3, #28]
 800c418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c41c:	f000 8087 	beq.w	800c52e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c428:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c42c:	e853 3f00 	ldrex	r3, [r3]
 800c430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c434:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c43c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	461a      	mov	r2, r3
 800c446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c44a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c44e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c452:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c456:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c45a:	e841 2300 	strex	r3, r2, [r1]
 800c45e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1da      	bne.n	800c420 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3308      	adds	r3, #8
 800c470:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c474:	e853 3f00 	ldrex	r3, [r3]
 800c478:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c47a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c47c:	f023 0301 	bic.w	r3, r3, #1
 800c480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	3308      	adds	r3, #8
 800c48a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c48e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c492:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c494:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c496:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c49a:	e841 2300 	strex	r3, r2, [r1]
 800c49e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c4a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1e1      	bne.n	800c46a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	3308      	adds	r3, #8
 800c4ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4b0:	e853 3f00 	ldrex	r3, [r3]
 800c4b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c4b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c4ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c4cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c4d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c4d2:	e841 2300 	strex	r3, r2, [r1]
 800c4d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c4d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1e3      	bne.n	800c4a6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2220      	movs	r2, #32
 800c4e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4f4:	e853 3f00 	ldrex	r3, [r3]
 800c4f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c4fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4fc:	f023 0310 	bic.w	r3, r3, #16
 800c500:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	461a      	mov	r2, r3
 800c50a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c50e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c510:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c512:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c514:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c516:	e841 2300 	strex	r3, r2, [r1]
 800c51a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c51c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1e4      	bne.n	800c4ec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c528:	4618      	mov	r0, r3
 800c52a:	f7f9 f919 	bl	8005760 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2202      	movs	r2, #2
 800c532:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c540:	b29b      	uxth	r3, r3
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	b29b      	uxth	r3, r3
 800c546:	4619      	mov	r1, r3
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 f931 	bl	800c7b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c54e:	e0fd      	b.n	800c74c <HAL_UART_IRQHandler+0x760>
 800c550:	40020010 	.word	0x40020010
 800c554:	40020028 	.word	0x40020028
 800c558:	40020040 	.word	0x40020040
 800c55c:	40020058 	.word	0x40020058
 800c560:	40020070 	.word	0x40020070
 800c564:	40020088 	.word	0x40020088
 800c568:	400200a0 	.word	0x400200a0
 800c56c:	400200b8 	.word	0x400200b8
 800c570:	40020410 	.word	0x40020410
 800c574:	40020428 	.word	0x40020428
 800c578:	40020440 	.word	0x40020440
 800c57c:	40020458 	.word	0x40020458
 800c580:	40020470 	.word	0x40020470
 800c584:	40020488 	.word	0x40020488
 800c588:	400204a0 	.word	0x400204a0
 800c58c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f000 80cf 	beq.w	800c750 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c5b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f000 80ca 	beq.w	800c750 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c4:	e853 3f00 	ldrex	r3, [r3]
 800c5c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c5de:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c5e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5e6:	e841 2300 	strex	r3, r2, [r1]
 800c5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1e4      	bne.n	800c5bc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3308      	adds	r3, #8
 800c5f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fc:	e853 3f00 	ldrex	r3, [r3]
 800c600:	623b      	str	r3, [r7, #32]
   return(result);
 800c602:	6a3a      	ldr	r2, [r7, #32]
 800c604:	4b55      	ldr	r3, [pc, #340]	@ (800c75c <HAL_UART_IRQHandler+0x770>)
 800c606:	4013      	ands	r3, r2
 800c608:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3308      	adds	r3, #8
 800c612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c616:	633a      	str	r2, [r7, #48]	@ 0x30
 800c618:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c61c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c61e:	e841 2300 	strex	r3, r2, [r1]
 800c622:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1e3      	bne.n	800c5f2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2220      	movs	r2, #32
 800c62e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	e853 3f00 	ldrex	r3, [r3]
 800c64a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f023 0310 	bic.w	r3, r3, #16
 800c652:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	461a      	mov	r2, r3
 800c65c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c660:	61fb      	str	r3, [r7, #28]
 800c662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c664:	69b9      	ldr	r1, [r7, #24]
 800c666:	69fa      	ldr	r2, [r7, #28]
 800c668:	e841 2300 	strex	r3, r2, [r1]
 800c66c:	617b      	str	r3, [r7, #20]
   return(result);
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1e4      	bne.n	800c63e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2202      	movs	r2, #2
 800c678:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c67a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c67e:	4619      	mov	r1, r3
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f895 	bl	800c7b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c686:	e063      	b.n	800c750 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c68c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00e      	beq.n	800c6b2 <HAL_UART_IRQHandler+0x6c6>
 800c694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c698:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d008      	beq.n	800c6b2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c6a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f001 fa89 	bl	800dbc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6b0:	e051      	b.n	800c756 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d014      	beq.n	800c6e8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d105      	bne.n	800c6d6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c6ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d008      	beq.n	800c6e8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d03a      	beq.n	800c754 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	4798      	blx	r3
    }
    return;
 800c6e6:	e035      	b.n	800c754 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c6e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d009      	beq.n	800c708 <HAL_UART_IRQHandler+0x71c>
 800c6f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d003      	beq.n	800c708 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f001 fa33 	bl	800db6c <UART_EndTransmit_IT>
    return;
 800c706:	e026      	b.n	800c756 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c70c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c710:	2b00      	cmp	r3, #0
 800c712:	d009      	beq.n	800c728 <HAL_UART_IRQHandler+0x73c>
 800c714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c718:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d003      	beq.n	800c728 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f001 fa62 	bl	800dbea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c726:	e016      	b.n	800c756 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c72c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c730:	2b00      	cmp	r3, #0
 800c732:	d010      	beq.n	800c756 <HAL_UART_IRQHandler+0x76a>
 800c734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	da0c      	bge.n	800c756 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f001 fa4a 	bl	800dbd6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c742:	e008      	b.n	800c756 <HAL_UART_IRQHandler+0x76a>
      return;
 800c744:	bf00      	nop
 800c746:	e006      	b.n	800c756 <HAL_UART_IRQHandler+0x76a>
    return;
 800c748:	bf00      	nop
 800c74a:	e004      	b.n	800c756 <HAL_UART_IRQHandler+0x76a>
      return;
 800c74c:	bf00      	nop
 800c74e:	e002      	b.n	800c756 <HAL_UART_IRQHandler+0x76a>
      return;
 800c750:	bf00      	nop
 800c752:	e000      	b.n	800c756 <HAL_UART_IRQHandler+0x76a>
    return;
 800c754:	bf00      	nop
  }
}
 800c756:	37e8      	adds	r7, #232	@ 0xe8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	effffffe 	.word	0xeffffffe

0800c760 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c790:	bf00      	nop
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7cc:	b092      	sub	sp, #72	@ 0x48
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	695b      	ldr	r3, [r3, #20]
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	69db      	ldr	r3, [r3, #28]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	4bbe      	ldr	r3, [pc, #760]	@ (800caf0 <UART_SetConfig+0x328>)
 800c7f8:	4013      	ands	r3, r2
 800c7fa:	697a      	ldr	r2, [r7, #20]
 800c7fc:	6812      	ldr	r2, [r2, #0]
 800c7fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c800:	430b      	orrs	r3, r1
 800c802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	68da      	ldr	r2, [r3, #12]
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	430a      	orrs	r2, r1
 800c818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4ab3      	ldr	r2, [pc, #716]	@ (800caf4 <UART_SetConfig+0x32c>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d004      	beq.n	800c834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	6a1b      	ldr	r3, [r3, #32]
 800c82e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c830:	4313      	orrs	r3, r2
 800c832:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	689a      	ldr	r2, [r3, #8]
 800c83a:	4baf      	ldr	r3, [pc, #700]	@ (800caf8 <UART_SetConfig+0x330>)
 800c83c:	4013      	ands	r3, r2
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	6812      	ldr	r2, [r2, #0]
 800c842:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c844:	430b      	orrs	r3, r1
 800c846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c84e:	f023 010f 	bic.w	r1, r3, #15
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	430a      	orrs	r2, r1
 800c85c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4aa6      	ldr	r2, [pc, #664]	@ (800cafc <UART_SetConfig+0x334>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d177      	bne.n	800c958 <UART_SetConfig+0x190>
 800c868:	4ba5      	ldr	r3, [pc, #660]	@ (800cb00 <UART_SetConfig+0x338>)
 800c86a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c86c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c870:	2b28      	cmp	r3, #40	@ 0x28
 800c872:	d86d      	bhi.n	800c950 <UART_SetConfig+0x188>
 800c874:	a201      	add	r2, pc, #4	@ (adr r2, 800c87c <UART_SetConfig+0xb4>)
 800c876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87a:	bf00      	nop
 800c87c:	0800c921 	.word	0x0800c921
 800c880:	0800c951 	.word	0x0800c951
 800c884:	0800c951 	.word	0x0800c951
 800c888:	0800c951 	.word	0x0800c951
 800c88c:	0800c951 	.word	0x0800c951
 800c890:	0800c951 	.word	0x0800c951
 800c894:	0800c951 	.word	0x0800c951
 800c898:	0800c951 	.word	0x0800c951
 800c89c:	0800c929 	.word	0x0800c929
 800c8a0:	0800c951 	.word	0x0800c951
 800c8a4:	0800c951 	.word	0x0800c951
 800c8a8:	0800c951 	.word	0x0800c951
 800c8ac:	0800c951 	.word	0x0800c951
 800c8b0:	0800c951 	.word	0x0800c951
 800c8b4:	0800c951 	.word	0x0800c951
 800c8b8:	0800c951 	.word	0x0800c951
 800c8bc:	0800c931 	.word	0x0800c931
 800c8c0:	0800c951 	.word	0x0800c951
 800c8c4:	0800c951 	.word	0x0800c951
 800c8c8:	0800c951 	.word	0x0800c951
 800c8cc:	0800c951 	.word	0x0800c951
 800c8d0:	0800c951 	.word	0x0800c951
 800c8d4:	0800c951 	.word	0x0800c951
 800c8d8:	0800c951 	.word	0x0800c951
 800c8dc:	0800c939 	.word	0x0800c939
 800c8e0:	0800c951 	.word	0x0800c951
 800c8e4:	0800c951 	.word	0x0800c951
 800c8e8:	0800c951 	.word	0x0800c951
 800c8ec:	0800c951 	.word	0x0800c951
 800c8f0:	0800c951 	.word	0x0800c951
 800c8f4:	0800c951 	.word	0x0800c951
 800c8f8:	0800c951 	.word	0x0800c951
 800c8fc:	0800c941 	.word	0x0800c941
 800c900:	0800c951 	.word	0x0800c951
 800c904:	0800c951 	.word	0x0800c951
 800c908:	0800c951 	.word	0x0800c951
 800c90c:	0800c951 	.word	0x0800c951
 800c910:	0800c951 	.word	0x0800c951
 800c914:	0800c951 	.word	0x0800c951
 800c918:	0800c951 	.word	0x0800c951
 800c91c:	0800c949 	.word	0x0800c949
 800c920:	2301      	movs	r3, #1
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c926:	e222      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c928:	2304      	movs	r3, #4
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c92e:	e21e      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c930:	2308      	movs	r3, #8
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c936:	e21a      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c938:	2310      	movs	r3, #16
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c93e:	e216      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c940:	2320      	movs	r3, #32
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c946:	e212      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c948:	2340      	movs	r3, #64	@ 0x40
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c94e:	e20e      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c950:	2380      	movs	r3, #128	@ 0x80
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c956:	e20a      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a69      	ldr	r2, [pc, #420]	@ (800cb04 <UART_SetConfig+0x33c>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d130      	bne.n	800c9c4 <UART_SetConfig+0x1fc>
 800c962:	4b67      	ldr	r3, [pc, #412]	@ (800cb00 <UART_SetConfig+0x338>)
 800c964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c966:	f003 0307 	and.w	r3, r3, #7
 800c96a:	2b05      	cmp	r3, #5
 800c96c:	d826      	bhi.n	800c9bc <UART_SetConfig+0x1f4>
 800c96e:	a201      	add	r2, pc, #4	@ (adr r2, 800c974 <UART_SetConfig+0x1ac>)
 800c970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c974:	0800c98d 	.word	0x0800c98d
 800c978:	0800c995 	.word	0x0800c995
 800c97c:	0800c99d 	.word	0x0800c99d
 800c980:	0800c9a5 	.word	0x0800c9a5
 800c984:	0800c9ad 	.word	0x0800c9ad
 800c988:	0800c9b5 	.word	0x0800c9b5
 800c98c:	2300      	movs	r3, #0
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c992:	e1ec      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c994:	2304      	movs	r3, #4
 800c996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c99a:	e1e8      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c99c:	2308      	movs	r3, #8
 800c99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9a2:	e1e4      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c9a4:	2310      	movs	r3, #16
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9aa:	e1e0      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c9ac:	2320      	movs	r3, #32
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9b2:	e1dc      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c9b4:	2340      	movs	r3, #64	@ 0x40
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ba:	e1d8      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c9bc:	2380      	movs	r3, #128	@ 0x80
 800c9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9c2:	e1d4      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a4f      	ldr	r2, [pc, #316]	@ (800cb08 <UART_SetConfig+0x340>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d130      	bne.n	800ca30 <UART_SetConfig+0x268>
 800c9ce:	4b4c      	ldr	r3, [pc, #304]	@ (800cb00 <UART_SetConfig+0x338>)
 800c9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9d2:	f003 0307 	and.w	r3, r3, #7
 800c9d6:	2b05      	cmp	r3, #5
 800c9d8:	d826      	bhi.n	800ca28 <UART_SetConfig+0x260>
 800c9da:	a201      	add	r2, pc, #4	@ (adr r2, 800c9e0 <UART_SetConfig+0x218>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800c9f9 	.word	0x0800c9f9
 800c9e4:	0800ca01 	.word	0x0800ca01
 800c9e8:	0800ca09 	.word	0x0800ca09
 800c9ec:	0800ca11 	.word	0x0800ca11
 800c9f0:	0800ca19 	.word	0x0800ca19
 800c9f4:	0800ca21 	.word	0x0800ca21
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9fe:	e1b6      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca00:	2304      	movs	r3, #4
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca06:	e1b2      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca08:	2308      	movs	r3, #8
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca0e:	e1ae      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca10:	2310      	movs	r3, #16
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca16:	e1aa      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca18:	2320      	movs	r3, #32
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca1e:	e1a6      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca20:	2340      	movs	r3, #64	@ 0x40
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca26:	e1a2      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca28:	2380      	movs	r3, #128	@ 0x80
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca2e:	e19e      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a35      	ldr	r2, [pc, #212]	@ (800cb0c <UART_SetConfig+0x344>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d130      	bne.n	800ca9c <UART_SetConfig+0x2d4>
 800ca3a:	4b31      	ldr	r3, [pc, #196]	@ (800cb00 <UART_SetConfig+0x338>)
 800ca3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca3e:	f003 0307 	and.w	r3, r3, #7
 800ca42:	2b05      	cmp	r3, #5
 800ca44:	d826      	bhi.n	800ca94 <UART_SetConfig+0x2cc>
 800ca46:	a201      	add	r2, pc, #4	@ (adr r2, 800ca4c <UART_SetConfig+0x284>)
 800ca48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4c:	0800ca65 	.word	0x0800ca65
 800ca50:	0800ca6d 	.word	0x0800ca6d
 800ca54:	0800ca75 	.word	0x0800ca75
 800ca58:	0800ca7d 	.word	0x0800ca7d
 800ca5c:	0800ca85 	.word	0x0800ca85
 800ca60:	0800ca8d 	.word	0x0800ca8d
 800ca64:	2300      	movs	r3, #0
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca6a:	e180      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca6c:	2304      	movs	r3, #4
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca72:	e17c      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca74:	2308      	movs	r3, #8
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca7a:	e178      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca7c:	2310      	movs	r3, #16
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca82:	e174      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca84:	2320      	movs	r3, #32
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca8a:	e170      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca8c:	2340      	movs	r3, #64	@ 0x40
 800ca8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca92:	e16c      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca94:	2380      	movs	r3, #128	@ 0x80
 800ca96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca9a:	e168      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a1b      	ldr	r2, [pc, #108]	@ (800cb10 <UART_SetConfig+0x348>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d142      	bne.n	800cb2c <UART_SetConfig+0x364>
 800caa6:	4b16      	ldr	r3, [pc, #88]	@ (800cb00 <UART_SetConfig+0x338>)
 800caa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caaa:	f003 0307 	and.w	r3, r3, #7
 800caae:	2b05      	cmp	r3, #5
 800cab0:	d838      	bhi.n	800cb24 <UART_SetConfig+0x35c>
 800cab2:	a201      	add	r2, pc, #4	@ (adr r2, 800cab8 <UART_SetConfig+0x2f0>)
 800cab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab8:	0800cad1 	.word	0x0800cad1
 800cabc:	0800cad9 	.word	0x0800cad9
 800cac0:	0800cae1 	.word	0x0800cae1
 800cac4:	0800cae9 	.word	0x0800cae9
 800cac8:	0800cb15 	.word	0x0800cb15
 800cacc:	0800cb1d 	.word	0x0800cb1d
 800cad0:	2300      	movs	r3, #0
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad6:	e14a      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cad8:	2304      	movs	r3, #4
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cade:	e146      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cae0:	2308      	movs	r3, #8
 800cae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cae6:	e142      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cae8:	2310      	movs	r3, #16
 800caea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caee:	e13e      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800caf0:	cfff69f3 	.word	0xcfff69f3
 800caf4:	58000c00 	.word	0x58000c00
 800caf8:	11fff4ff 	.word	0x11fff4ff
 800cafc:	40011000 	.word	0x40011000
 800cb00:	58024400 	.word	0x58024400
 800cb04:	40004400 	.word	0x40004400
 800cb08:	40004800 	.word	0x40004800
 800cb0c:	40004c00 	.word	0x40004c00
 800cb10:	40005000 	.word	0x40005000
 800cb14:	2320      	movs	r3, #32
 800cb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb1a:	e128      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cb1c:	2340      	movs	r3, #64	@ 0x40
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb22:	e124      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cb24:	2380      	movs	r3, #128	@ 0x80
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb2a:	e120      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4acb      	ldr	r2, [pc, #812]	@ (800ce60 <UART_SetConfig+0x698>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d176      	bne.n	800cc24 <UART_SetConfig+0x45c>
 800cb36:	4bcb      	ldr	r3, [pc, #812]	@ (800ce64 <UART_SetConfig+0x69c>)
 800cb38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb3e:	2b28      	cmp	r3, #40	@ 0x28
 800cb40:	d86c      	bhi.n	800cc1c <UART_SetConfig+0x454>
 800cb42:	a201      	add	r2, pc, #4	@ (adr r2, 800cb48 <UART_SetConfig+0x380>)
 800cb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb48:	0800cbed 	.word	0x0800cbed
 800cb4c:	0800cc1d 	.word	0x0800cc1d
 800cb50:	0800cc1d 	.word	0x0800cc1d
 800cb54:	0800cc1d 	.word	0x0800cc1d
 800cb58:	0800cc1d 	.word	0x0800cc1d
 800cb5c:	0800cc1d 	.word	0x0800cc1d
 800cb60:	0800cc1d 	.word	0x0800cc1d
 800cb64:	0800cc1d 	.word	0x0800cc1d
 800cb68:	0800cbf5 	.word	0x0800cbf5
 800cb6c:	0800cc1d 	.word	0x0800cc1d
 800cb70:	0800cc1d 	.word	0x0800cc1d
 800cb74:	0800cc1d 	.word	0x0800cc1d
 800cb78:	0800cc1d 	.word	0x0800cc1d
 800cb7c:	0800cc1d 	.word	0x0800cc1d
 800cb80:	0800cc1d 	.word	0x0800cc1d
 800cb84:	0800cc1d 	.word	0x0800cc1d
 800cb88:	0800cbfd 	.word	0x0800cbfd
 800cb8c:	0800cc1d 	.word	0x0800cc1d
 800cb90:	0800cc1d 	.word	0x0800cc1d
 800cb94:	0800cc1d 	.word	0x0800cc1d
 800cb98:	0800cc1d 	.word	0x0800cc1d
 800cb9c:	0800cc1d 	.word	0x0800cc1d
 800cba0:	0800cc1d 	.word	0x0800cc1d
 800cba4:	0800cc1d 	.word	0x0800cc1d
 800cba8:	0800cc05 	.word	0x0800cc05
 800cbac:	0800cc1d 	.word	0x0800cc1d
 800cbb0:	0800cc1d 	.word	0x0800cc1d
 800cbb4:	0800cc1d 	.word	0x0800cc1d
 800cbb8:	0800cc1d 	.word	0x0800cc1d
 800cbbc:	0800cc1d 	.word	0x0800cc1d
 800cbc0:	0800cc1d 	.word	0x0800cc1d
 800cbc4:	0800cc1d 	.word	0x0800cc1d
 800cbc8:	0800cc0d 	.word	0x0800cc0d
 800cbcc:	0800cc1d 	.word	0x0800cc1d
 800cbd0:	0800cc1d 	.word	0x0800cc1d
 800cbd4:	0800cc1d 	.word	0x0800cc1d
 800cbd8:	0800cc1d 	.word	0x0800cc1d
 800cbdc:	0800cc1d 	.word	0x0800cc1d
 800cbe0:	0800cc1d 	.word	0x0800cc1d
 800cbe4:	0800cc1d 	.word	0x0800cc1d
 800cbe8:	0800cc15 	.word	0x0800cc15
 800cbec:	2301      	movs	r3, #1
 800cbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbf2:	e0bc      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cbf4:	2304      	movs	r3, #4
 800cbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfa:	e0b8      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cbfc:	2308      	movs	r3, #8
 800cbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc02:	e0b4      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc04:	2310      	movs	r3, #16
 800cc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc0a:	e0b0      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc0c:	2320      	movs	r3, #32
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc12:	e0ac      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc14:	2340      	movs	r3, #64	@ 0x40
 800cc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc1a:	e0a8      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc1c:	2380      	movs	r3, #128	@ 0x80
 800cc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc22:	e0a4      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a8f      	ldr	r2, [pc, #572]	@ (800ce68 <UART_SetConfig+0x6a0>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d130      	bne.n	800cc90 <UART_SetConfig+0x4c8>
 800cc2e:	4b8d      	ldr	r3, [pc, #564]	@ (800ce64 <UART_SetConfig+0x69c>)
 800cc30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc32:	f003 0307 	and.w	r3, r3, #7
 800cc36:	2b05      	cmp	r3, #5
 800cc38:	d826      	bhi.n	800cc88 <UART_SetConfig+0x4c0>
 800cc3a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc40 <UART_SetConfig+0x478>)
 800cc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc40:	0800cc59 	.word	0x0800cc59
 800cc44:	0800cc61 	.word	0x0800cc61
 800cc48:	0800cc69 	.word	0x0800cc69
 800cc4c:	0800cc71 	.word	0x0800cc71
 800cc50:	0800cc79 	.word	0x0800cc79
 800cc54:	0800cc81 	.word	0x0800cc81
 800cc58:	2300      	movs	r3, #0
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5e:	e086      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc60:	2304      	movs	r3, #4
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc66:	e082      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc68:	2308      	movs	r3, #8
 800cc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc6e:	e07e      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc70:	2310      	movs	r3, #16
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc76:	e07a      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc78:	2320      	movs	r3, #32
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc7e:	e076      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc80:	2340      	movs	r3, #64	@ 0x40
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc86:	e072      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc88:	2380      	movs	r3, #128	@ 0x80
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc8e:	e06e      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a75      	ldr	r2, [pc, #468]	@ (800ce6c <UART_SetConfig+0x6a4>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d130      	bne.n	800ccfc <UART_SetConfig+0x534>
 800cc9a:	4b72      	ldr	r3, [pc, #456]	@ (800ce64 <UART_SetConfig+0x69c>)
 800cc9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc9e:	f003 0307 	and.w	r3, r3, #7
 800cca2:	2b05      	cmp	r3, #5
 800cca4:	d826      	bhi.n	800ccf4 <UART_SetConfig+0x52c>
 800cca6:	a201      	add	r2, pc, #4	@ (adr r2, 800ccac <UART_SetConfig+0x4e4>)
 800cca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccac:	0800ccc5 	.word	0x0800ccc5
 800ccb0:	0800cccd 	.word	0x0800cccd
 800ccb4:	0800ccd5 	.word	0x0800ccd5
 800ccb8:	0800ccdd 	.word	0x0800ccdd
 800ccbc:	0800cce5 	.word	0x0800cce5
 800ccc0:	0800cced 	.word	0x0800cced
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccca:	e050      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cccc:	2304      	movs	r3, #4
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd2:	e04c      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ccd4:	2308      	movs	r3, #8
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccda:	e048      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ccdc:	2310      	movs	r3, #16
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cce2:	e044      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cce4:	2320      	movs	r3, #32
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccea:	e040      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ccec:	2340      	movs	r3, #64	@ 0x40
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccf2:	e03c      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ccf4:	2380      	movs	r3, #128	@ 0x80
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccfa:	e038      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a5b      	ldr	r2, [pc, #364]	@ (800ce70 <UART_SetConfig+0x6a8>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d130      	bne.n	800cd68 <UART_SetConfig+0x5a0>
 800cd06:	4b57      	ldr	r3, [pc, #348]	@ (800ce64 <UART_SetConfig+0x69c>)
 800cd08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd0a:	f003 0307 	and.w	r3, r3, #7
 800cd0e:	2b05      	cmp	r3, #5
 800cd10:	d826      	bhi.n	800cd60 <UART_SetConfig+0x598>
 800cd12:	a201      	add	r2, pc, #4	@ (adr r2, 800cd18 <UART_SetConfig+0x550>)
 800cd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd18:	0800cd31 	.word	0x0800cd31
 800cd1c:	0800cd39 	.word	0x0800cd39
 800cd20:	0800cd41 	.word	0x0800cd41
 800cd24:	0800cd49 	.word	0x0800cd49
 800cd28:	0800cd51 	.word	0x0800cd51
 800cd2c:	0800cd59 	.word	0x0800cd59
 800cd30:	2302      	movs	r3, #2
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd36:	e01a      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cd38:	2304      	movs	r3, #4
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3e:	e016      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cd40:	2308      	movs	r3, #8
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd46:	e012      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cd48:	2310      	movs	r3, #16
 800cd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd4e:	e00e      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cd50:	2320      	movs	r3, #32
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd56:	e00a      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cd58:	2340      	movs	r3, #64	@ 0x40
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd5e:	e006      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cd60:	2380      	movs	r3, #128	@ 0x80
 800cd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd66:	e002      	b.n	800cd6e <UART_SetConfig+0x5a6>
 800cd68:	2380      	movs	r3, #128	@ 0x80
 800cd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a3f      	ldr	r2, [pc, #252]	@ (800ce70 <UART_SetConfig+0x6a8>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	f040 80f8 	bne.w	800cf6a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cd7e:	2b20      	cmp	r3, #32
 800cd80:	dc46      	bgt.n	800ce10 <UART_SetConfig+0x648>
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	f2c0 8082 	blt.w	800ce8c <UART_SetConfig+0x6c4>
 800cd88:	3b02      	subs	r3, #2
 800cd8a:	2b1e      	cmp	r3, #30
 800cd8c:	d87e      	bhi.n	800ce8c <UART_SetConfig+0x6c4>
 800cd8e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd94 <UART_SetConfig+0x5cc>)
 800cd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd94:	0800ce17 	.word	0x0800ce17
 800cd98:	0800ce8d 	.word	0x0800ce8d
 800cd9c:	0800ce1f 	.word	0x0800ce1f
 800cda0:	0800ce8d 	.word	0x0800ce8d
 800cda4:	0800ce8d 	.word	0x0800ce8d
 800cda8:	0800ce8d 	.word	0x0800ce8d
 800cdac:	0800ce2f 	.word	0x0800ce2f
 800cdb0:	0800ce8d 	.word	0x0800ce8d
 800cdb4:	0800ce8d 	.word	0x0800ce8d
 800cdb8:	0800ce8d 	.word	0x0800ce8d
 800cdbc:	0800ce8d 	.word	0x0800ce8d
 800cdc0:	0800ce8d 	.word	0x0800ce8d
 800cdc4:	0800ce8d 	.word	0x0800ce8d
 800cdc8:	0800ce8d 	.word	0x0800ce8d
 800cdcc:	0800ce3f 	.word	0x0800ce3f
 800cdd0:	0800ce8d 	.word	0x0800ce8d
 800cdd4:	0800ce8d 	.word	0x0800ce8d
 800cdd8:	0800ce8d 	.word	0x0800ce8d
 800cddc:	0800ce8d 	.word	0x0800ce8d
 800cde0:	0800ce8d 	.word	0x0800ce8d
 800cde4:	0800ce8d 	.word	0x0800ce8d
 800cde8:	0800ce8d 	.word	0x0800ce8d
 800cdec:	0800ce8d 	.word	0x0800ce8d
 800cdf0:	0800ce8d 	.word	0x0800ce8d
 800cdf4:	0800ce8d 	.word	0x0800ce8d
 800cdf8:	0800ce8d 	.word	0x0800ce8d
 800cdfc:	0800ce8d 	.word	0x0800ce8d
 800ce00:	0800ce8d 	.word	0x0800ce8d
 800ce04:	0800ce8d 	.word	0x0800ce8d
 800ce08:	0800ce8d 	.word	0x0800ce8d
 800ce0c:	0800ce7f 	.word	0x0800ce7f
 800ce10:	2b40      	cmp	r3, #64	@ 0x40
 800ce12:	d037      	beq.n	800ce84 <UART_SetConfig+0x6bc>
 800ce14:	e03a      	b.n	800ce8c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce16:	f7fd fef5 	bl	800ac04 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ce1c:	e03c      	b.n	800ce98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fd ff04 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce2c:	e034      	b.n	800ce98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce2e:	f107 0318 	add.w	r3, r7, #24
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fe f850 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce3c:	e02c      	b.n	800ce98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce3e:	4b09      	ldr	r3, [pc, #36]	@ (800ce64 <UART_SetConfig+0x69c>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f003 0320 	and.w	r3, r3, #32
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d016      	beq.n	800ce78 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce4a:	4b06      	ldr	r3, [pc, #24]	@ (800ce64 <UART_SetConfig+0x69c>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	08db      	lsrs	r3, r3, #3
 800ce50:	f003 0303 	and.w	r3, r3, #3
 800ce54:	4a07      	ldr	r2, [pc, #28]	@ (800ce74 <UART_SetConfig+0x6ac>)
 800ce56:	fa22 f303 	lsr.w	r3, r2, r3
 800ce5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce5c:	e01c      	b.n	800ce98 <UART_SetConfig+0x6d0>
 800ce5e:	bf00      	nop
 800ce60:	40011400 	.word	0x40011400
 800ce64:	58024400 	.word	0x58024400
 800ce68:	40007800 	.word	0x40007800
 800ce6c:	40007c00 	.word	0x40007c00
 800ce70:	58000c00 	.word	0x58000c00
 800ce74:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ce78:	4b9d      	ldr	r3, [pc, #628]	@ (800d0f0 <UART_SetConfig+0x928>)
 800ce7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce7c:	e00c      	b.n	800ce98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce7e:	4b9d      	ldr	r3, [pc, #628]	@ (800d0f4 <UART_SetConfig+0x92c>)
 800ce80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce82:	e009      	b.n	800ce98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce8a:	e005      	b.n	800ce98 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ce90:	2301      	movs	r3, #1
 800ce92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ce96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 81de 	beq.w	800d25c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea4:	4a94      	ldr	r2, [pc, #592]	@ (800d0f8 <UART_SetConfig+0x930>)
 800cea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceae:	fbb3 f3f2 	udiv	r3, r3, r2
 800ceb2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	685a      	ldr	r2, [r3, #4]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	4413      	add	r3, r2
 800cebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d305      	bcc.n	800ced0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ceca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cecc:	429a      	cmp	r2, r3
 800cece:	d903      	bls.n	800ced8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ced0:	2301      	movs	r3, #1
 800ced2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ced6:	e1c1      	b.n	800d25c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ced8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceda:	2200      	movs	r2, #0
 800cedc:	60bb      	str	r3, [r7, #8]
 800cede:	60fa      	str	r2, [r7, #12]
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee4:	4a84      	ldr	r2, [pc, #528]	@ (800d0f8 <UART_SetConfig+0x930>)
 800cee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	2200      	movs	r2, #0
 800ceee:	603b      	str	r3, [r7, #0]
 800cef0:	607a      	str	r2, [r7, #4]
 800cef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cefa:	f7f3 faa9 	bl	8000450 <__aeabi_uldivmod>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	4610      	mov	r0, r2
 800cf04:	4619      	mov	r1, r3
 800cf06:	f04f 0200 	mov.w	r2, #0
 800cf0a:	f04f 0300 	mov.w	r3, #0
 800cf0e:	020b      	lsls	r3, r1, #8
 800cf10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf14:	0202      	lsls	r2, r0, #8
 800cf16:	6979      	ldr	r1, [r7, #20]
 800cf18:	6849      	ldr	r1, [r1, #4]
 800cf1a:	0849      	lsrs	r1, r1, #1
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	4605      	mov	r5, r0
 800cf22:	eb12 0804 	adds.w	r8, r2, r4
 800cf26:	eb43 0905 	adc.w	r9, r3, r5
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	469a      	mov	sl, r3
 800cf32:	4693      	mov	fp, r2
 800cf34:	4652      	mov	r2, sl
 800cf36:	465b      	mov	r3, fp
 800cf38:	4640      	mov	r0, r8
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	f7f3 fa88 	bl	8000450 <__aeabi_uldivmod>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	4613      	mov	r3, r2
 800cf46:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf4e:	d308      	bcc.n	800cf62 <UART_SetConfig+0x79a>
 800cf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf56:	d204      	bcs.n	800cf62 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf5e:	60da      	str	r2, [r3, #12]
 800cf60:	e17c      	b.n	800d25c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cf68:	e178      	b.n	800d25c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	69db      	ldr	r3, [r3, #28]
 800cf6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf72:	f040 80c5 	bne.w	800d100 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cf76:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cf7a:	2b20      	cmp	r3, #32
 800cf7c:	dc48      	bgt.n	800d010 <UART_SetConfig+0x848>
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	db7b      	blt.n	800d07a <UART_SetConfig+0x8b2>
 800cf82:	2b20      	cmp	r3, #32
 800cf84:	d879      	bhi.n	800d07a <UART_SetConfig+0x8b2>
 800cf86:	a201      	add	r2, pc, #4	@ (adr r2, 800cf8c <UART_SetConfig+0x7c4>)
 800cf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8c:	0800d017 	.word	0x0800d017
 800cf90:	0800d01f 	.word	0x0800d01f
 800cf94:	0800d07b 	.word	0x0800d07b
 800cf98:	0800d07b 	.word	0x0800d07b
 800cf9c:	0800d027 	.word	0x0800d027
 800cfa0:	0800d07b 	.word	0x0800d07b
 800cfa4:	0800d07b 	.word	0x0800d07b
 800cfa8:	0800d07b 	.word	0x0800d07b
 800cfac:	0800d037 	.word	0x0800d037
 800cfb0:	0800d07b 	.word	0x0800d07b
 800cfb4:	0800d07b 	.word	0x0800d07b
 800cfb8:	0800d07b 	.word	0x0800d07b
 800cfbc:	0800d07b 	.word	0x0800d07b
 800cfc0:	0800d07b 	.word	0x0800d07b
 800cfc4:	0800d07b 	.word	0x0800d07b
 800cfc8:	0800d07b 	.word	0x0800d07b
 800cfcc:	0800d047 	.word	0x0800d047
 800cfd0:	0800d07b 	.word	0x0800d07b
 800cfd4:	0800d07b 	.word	0x0800d07b
 800cfd8:	0800d07b 	.word	0x0800d07b
 800cfdc:	0800d07b 	.word	0x0800d07b
 800cfe0:	0800d07b 	.word	0x0800d07b
 800cfe4:	0800d07b 	.word	0x0800d07b
 800cfe8:	0800d07b 	.word	0x0800d07b
 800cfec:	0800d07b 	.word	0x0800d07b
 800cff0:	0800d07b 	.word	0x0800d07b
 800cff4:	0800d07b 	.word	0x0800d07b
 800cff8:	0800d07b 	.word	0x0800d07b
 800cffc:	0800d07b 	.word	0x0800d07b
 800d000:	0800d07b 	.word	0x0800d07b
 800d004:	0800d07b 	.word	0x0800d07b
 800d008:	0800d07b 	.word	0x0800d07b
 800d00c:	0800d06d 	.word	0x0800d06d
 800d010:	2b40      	cmp	r3, #64	@ 0x40
 800d012:	d02e      	beq.n	800d072 <UART_SetConfig+0x8aa>
 800d014:	e031      	b.n	800d07a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d016:	f7fb fdfd 	bl	8008c14 <HAL_RCC_GetPCLK1Freq>
 800d01a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d01c:	e033      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d01e:	f7fb fe0f 	bl	8008c40 <HAL_RCC_GetPCLK2Freq>
 800d022:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d024:	e02f      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fd fe00 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d034:	e027      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d036:	f107 0318 	add.w	r3, r7, #24
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fd ff4c 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d044:	e01f      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d046:	4b2d      	ldr	r3, [pc, #180]	@ (800d0fc <UART_SetConfig+0x934>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 0320 	and.w	r3, r3, #32
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d009      	beq.n	800d066 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d052:	4b2a      	ldr	r3, [pc, #168]	@ (800d0fc <UART_SetConfig+0x934>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	08db      	lsrs	r3, r3, #3
 800d058:	f003 0303 	and.w	r3, r3, #3
 800d05c:	4a24      	ldr	r2, [pc, #144]	@ (800d0f0 <UART_SetConfig+0x928>)
 800d05e:	fa22 f303 	lsr.w	r3, r2, r3
 800d062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d064:	e00f      	b.n	800d086 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d066:	4b22      	ldr	r3, [pc, #136]	@ (800d0f0 <UART_SetConfig+0x928>)
 800d068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d06a:	e00c      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d06c:	4b21      	ldr	r3, [pc, #132]	@ (800d0f4 <UART_SetConfig+0x92c>)
 800d06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d070:	e009      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d078:	e005      	b.n	800d086 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d07a:	2300      	movs	r3, #0
 800d07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f000 80e7 	beq.w	800d25c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d092:	4a19      	ldr	r2, [pc, #100]	@ (800d0f8 <UART_SetConfig+0x930>)
 800d094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d098:	461a      	mov	r2, r3
 800d09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d09c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0a0:	005a      	lsls	r2, r3, #1
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	085b      	lsrs	r3, r3, #1
 800d0a8:	441a      	add	r2, r3
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b6:	2b0f      	cmp	r3, #15
 800d0b8:	d916      	bls.n	800d0e8 <UART_SetConfig+0x920>
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0c0:	d212      	bcs.n	800d0e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	f023 030f 	bic.w	r3, r3, #15
 800d0ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ce:	085b      	lsrs	r3, r3, #1
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	f003 0307 	and.w	r3, r3, #7
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d0e4:	60da      	str	r2, [r3, #12]
 800d0e6:	e0b9      	b.n	800d25c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d0ee:	e0b5      	b.n	800d25c <UART_SetConfig+0xa94>
 800d0f0:	03d09000 	.word	0x03d09000
 800d0f4:	003d0900 	.word	0x003d0900
 800d0f8:	08023590 	.word	0x08023590
 800d0fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d100:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d104:	2b20      	cmp	r3, #32
 800d106:	dc49      	bgt.n	800d19c <UART_SetConfig+0x9d4>
 800d108:	2b00      	cmp	r3, #0
 800d10a:	db7c      	blt.n	800d206 <UART_SetConfig+0xa3e>
 800d10c:	2b20      	cmp	r3, #32
 800d10e:	d87a      	bhi.n	800d206 <UART_SetConfig+0xa3e>
 800d110:	a201      	add	r2, pc, #4	@ (adr r2, 800d118 <UART_SetConfig+0x950>)
 800d112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d116:	bf00      	nop
 800d118:	0800d1a3 	.word	0x0800d1a3
 800d11c:	0800d1ab 	.word	0x0800d1ab
 800d120:	0800d207 	.word	0x0800d207
 800d124:	0800d207 	.word	0x0800d207
 800d128:	0800d1b3 	.word	0x0800d1b3
 800d12c:	0800d207 	.word	0x0800d207
 800d130:	0800d207 	.word	0x0800d207
 800d134:	0800d207 	.word	0x0800d207
 800d138:	0800d1c3 	.word	0x0800d1c3
 800d13c:	0800d207 	.word	0x0800d207
 800d140:	0800d207 	.word	0x0800d207
 800d144:	0800d207 	.word	0x0800d207
 800d148:	0800d207 	.word	0x0800d207
 800d14c:	0800d207 	.word	0x0800d207
 800d150:	0800d207 	.word	0x0800d207
 800d154:	0800d207 	.word	0x0800d207
 800d158:	0800d1d3 	.word	0x0800d1d3
 800d15c:	0800d207 	.word	0x0800d207
 800d160:	0800d207 	.word	0x0800d207
 800d164:	0800d207 	.word	0x0800d207
 800d168:	0800d207 	.word	0x0800d207
 800d16c:	0800d207 	.word	0x0800d207
 800d170:	0800d207 	.word	0x0800d207
 800d174:	0800d207 	.word	0x0800d207
 800d178:	0800d207 	.word	0x0800d207
 800d17c:	0800d207 	.word	0x0800d207
 800d180:	0800d207 	.word	0x0800d207
 800d184:	0800d207 	.word	0x0800d207
 800d188:	0800d207 	.word	0x0800d207
 800d18c:	0800d207 	.word	0x0800d207
 800d190:	0800d207 	.word	0x0800d207
 800d194:	0800d207 	.word	0x0800d207
 800d198:	0800d1f9 	.word	0x0800d1f9
 800d19c:	2b40      	cmp	r3, #64	@ 0x40
 800d19e:	d02e      	beq.n	800d1fe <UART_SetConfig+0xa36>
 800d1a0:	e031      	b.n	800d206 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1a2:	f7fb fd37 	bl	8008c14 <HAL_RCC_GetPCLK1Freq>
 800d1a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d1a8:	e033      	b.n	800d212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1aa:	f7fb fd49 	bl	8008c40 <HAL_RCC_GetPCLK2Freq>
 800d1ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d1b0:	e02f      	b.n	800d212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fd fd3a 	bl	800ac30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1c0:	e027      	b.n	800d212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1c2:	f107 0318 	add.w	r3, r7, #24
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fd fe86 	bl	800aed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1d0:	e01f      	b.n	800d212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1d2:	4b2d      	ldr	r3, [pc, #180]	@ (800d288 <UART_SetConfig+0xac0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f003 0320 	and.w	r3, r3, #32
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d009      	beq.n	800d1f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1de:	4b2a      	ldr	r3, [pc, #168]	@ (800d288 <UART_SetConfig+0xac0>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	08db      	lsrs	r3, r3, #3
 800d1e4:	f003 0303 	and.w	r3, r3, #3
 800d1e8:	4a28      	ldr	r2, [pc, #160]	@ (800d28c <UART_SetConfig+0xac4>)
 800d1ea:	fa22 f303 	lsr.w	r3, r2, r3
 800d1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1f0:	e00f      	b.n	800d212 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d1f2:	4b26      	ldr	r3, [pc, #152]	@ (800d28c <UART_SetConfig+0xac4>)
 800d1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1f6:	e00c      	b.n	800d212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1f8:	4b25      	ldr	r3, [pc, #148]	@ (800d290 <UART_SetConfig+0xac8>)
 800d1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1fc:	e009      	b.n	800d212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d204:	e005      	b.n	800d212 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d206:	2300      	movs	r3, #0
 800d208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d210:	bf00      	nop
    }

    if (pclk != 0U)
 800d212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d021      	beq.n	800d25c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d21c:	4a1d      	ldr	r2, [pc, #116]	@ (800d294 <UART_SetConfig+0xacc>)
 800d21e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d222:	461a      	mov	r2, r3
 800d224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d226:	fbb3 f2f2 	udiv	r2, r3, r2
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	085b      	lsrs	r3, r3, #1
 800d230:	441a      	add	r2, r3
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	fbb2 f3f3 	udiv	r3, r2, r3
 800d23a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d23e:	2b0f      	cmp	r3, #15
 800d240:	d909      	bls.n	800d256 <UART_SetConfig+0xa8e>
 800d242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d248:	d205      	bcs.n	800d256 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	60da      	str	r2, [r3, #12]
 800d254:	e002      	b.n	800d25c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	2201      	movs	r2, #1
 800d260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	2201      	movs	r2, #1
 800d268:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	2200      	movs	r2, #0
 800d270:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	2200      	movs	r2, #0
 800d276:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d278:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3748      	adds	r7, #72	@ 0x48
 800d280:	46bd      	mov	sp, r7
 800d282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d286:	bf00      	nop
 800d288:	58024400 	.word	0x58024400
 800d28c:	03d09000 	.word	0x03d09000
 800d290:	003d0900 	.word	0x003d0900
 800d294:	08023590 	.word	0x08023590

0800d298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2a4:	f003 0308 	and.w	r3, r3, #8
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00a      	beq.n	800d2c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	430a      	orrs	r2, r1
 800d2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2c6:	f003 0301 	and.w	r3, r3, #1
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00a      	beq.n	800d2e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	430a      	orrs	r2, r1
 800d2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2e8:	f003 0302 	and.w	r3, r3, #2
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00a      	beq.n	800d306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	430a      	orrs	r2, r1
 800d304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d30a:	f003 0304 	and.w	r3, r3, #4
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00a      	beq.n	800d328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	430a      	orrs	r2, r1
 800d326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d32c:	f003 0310 	and.w	r3, r3, #16
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00a      	beq.n	800d34a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	430a      	orrs	r2, r1
 800d348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d34e:	f003 0320 	and.w	r3, r3, #32
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00a      	beq.n	800d36c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	430a      	orrs	r2, r1
 800d36a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d374:	2b00      	cmp	r3, #0
 800d376:	d01a      	beq.n	800d3ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	430a      	orrs	r2, r1
 800d38c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d396:	d10a      	bne.n	800d3ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	430a      	orrs	r2, r1
 800d3ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00a      	beq.n	800d3d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	430a      	orrs	r2, r1
 800d3ce:	605a      	str	r2, [r3, #4]
  }
}
 800d3d0:	bf00      	nop
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b098      	sub	sp, #96	@ 0x60
 800d3e0:	af02      	add	r7, sp, #8
 800d3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3ec:	f7f5 ffe0 	bl	80033b0 <HAL_GetTick>
 800d3f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 0308 	and.w	r3, r3, #8
 800d3fc:	2b08      	cmp	r3, #8
 800d3fe:	d12f      	bne.n	800d460 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d400:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d408:	2200      	movs	r2, #0
 800d40a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 f88e 	bl	800d530 <UART_WaitOnFlagUntilTimeout>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d022      	beq.n	800d460 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d422:	e853 3f00 	ldrex	r3, [r3]
 800d426:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d42a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d42e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	461a      	mov	r2, r3
 800d436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d438:	647b      	str	r3, [r7, #68]	@ 0x44
 800d43a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d43e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d440:	e841 2300 	strex	r3, r2, [r1]
 800d444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1e6      	bne.n	800d41a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2220      	movs	r2, #32
 800d450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d45c:	2303      	movs	r3, #3
 800d45e:	e063      	b.n	800d528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f003 0304 	and.w	r3, r3, #4
 800d46a:	2b04      	cmp	r3, #4
 800d46c:	d149      	bne.n	800d502 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d46e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d476:	2200      	movs	r2, #0
 800d478:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 f857 	bl	800d530 <UART_WaitOnFlagUntilTimeout>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d03c      	beq.n	800d502 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d490:	e853 3f00 	ldrex	r3, [r3]
 800d494:	623b      	str	r3, [r7, #32]
   return(result);
 800d496:	6a3b      	ldr	r3, [r7, #32]
 800d498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d49c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4ae:	e841 2300 	strex	r3, r2, [r1]
 800d4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1e6      	bne.n	800d488 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	3308      	adds	r3, #8
 800d4c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	e853 3f00 	ldrex	r3, [r3]
 800d4c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f023 0301 	bic.w	r3, r3, #1
 800d4d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	3308      	adds	r3, #8
 800d4d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4da:	61fa      	str	r2, [r7, #28]
 800d4dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4de:	69b9      	ldr	r1, [r7, #24]
 800d4e0:	69fa      	ldr	r2, [r7, #28]
 800d4e2:	e841 2300 	strex	r3, r2, [r1]
 800d4e6:	617b      	str	r3, [r7, #20]
   return(result);
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d1e5      	bne.n	800d4ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2220      	movs	r2, #32
 800d4f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4fe:	2303      	movs	r3, #3
 800d500:	e012      	b.n	800d528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2220      	movs	r2, #32
 800d506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2220      	movs	r2, #32
 800d50e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3758      	adds	r7, #88	@ 0x58
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	603b      	str	r3, [r7, #0]
 800d53c:	4613      	mov	r3, r2
 800d53e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d540:	e04f      	b.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d548:	d04b      	beq.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d54a:	f7f5 ff31 	bl	80033b0 <HAL_GetTick>
 800d54e:	4602      	mov	r2, r0
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	69ba      	ldr	r2, [r7, #24]
 800d556:	429a      	cmp	r2, r3
 800d558:	d302      	bcc.n	800d560 <UART_WaitOnFlagUntilTimeout+0x30>
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d101      	bne.n	800d564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d560:	2303      	movs	r3, #3
 800d562:	e04e      	b.n	800d602 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 0304 	and.w	r3, r3, #4
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d037      	beq.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	2b80      	cmp	r3, #128	@ 0x80
 800d576:	d034      	beq.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2b40      	cmp	r3, #64	@ 0x40
 800d57c:	d031      	beq.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	69db      	ldr	r3, [r3, #28]
 800d584:	f003 0308 	and.w	r3, r3, #8
 800d588:	2b08      	cmp	r3, #8
 800d58a:	d110      	bne.n	800d5ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2208      	movs	r2, #8
 800d592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d594:	68f8      	ldr	r0, [r7, #12]
 800d596:	f000 f921 	bl	800d7dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2208      	movs	r2, #8
 800d59e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e029      	b.n	800d602 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	69db      	ldr	r3, [r3, #28]
 800d5b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5bc:	d111      	bne.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d5c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f000 f907 	bl	800d7dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2220      	movs	r2, #32
 800d5d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	e00f      	b.n	800d602 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	69da      	ldr	r2, [r3, #28]
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	4013      	ands	r3, r2
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	bf0c      	ite	eq
 800d5f2:	2301      	moveq	r3, #1
 800d5f4:	2300      	movne	r3, #0
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	79fb      	ldrb	r3, [r7, #7]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d0a0      	beq.n	800d542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
	...

0800d60c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b096      	sub	sp, #88	@ 0x58
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	4613      	mov	r3, r2
 800d618:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	88fa      	ldrh	r2, [r7, #6]
 800d624:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2222      	movs	r2, #34	@ 0x22
 800d634:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d02d      	beq.n	800d69e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d648:	4a40      	ldr	r2, [pc, #256]	@ (800d74c <UART_Start_Receive_DMA+0x140>)
 800d64a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d652:	4a3f      	ldr	r2, [pc, #252]	@ (800d750 <UART_Start_Receive_DMA+0x144>)
 800d654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d65c:	4a3d      	ldr	r2, [pc, #244]	@ (800d754 <UART_Start_Receive_DMA+0x148>)
 800d65e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d666:	2200      	movs	r2, #0
 800d668:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	3324      	adds	r3, #36	@ 0x24
 800d676:	4619      	mov	r1, r3
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d67c:	461a      	mov	r2, r3
 800d67e:	88fb      	ldrh	r3, [r7, #6]
 800d680:	f7f7 fe04 	bl	800528c <HAL_DMA_Start_IT>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d009      	beq.n	800d69e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2210      	movs	r2, #16
 800d68e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2220      	movs	r2, #32
 800d696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e051      	b.n	800d742 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d018      	beq.n	800d6d8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ae:	e853 3f00 	ldrex	r3, [r3]
 800d6b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d6ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6c6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d6ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6cc:	e841 2300 	strex	r3, r2, [r1]
 800d6d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d6d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1e6      	bne.n	800d6a6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	3308      	adds	r3, #8
 800d6de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e2:	e853 3f00 	ldrex	r3, [r3]
 800d6e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ea:	f043 0301 	orr.w	r3, r3, #1
 800d6ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d6f8:	637a      	str	r2, [r7, #52]	@ 0x34
 800d6fa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d6fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d700:	e841 2300 	strex	r3, r2, [r1]
 800d704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1e5      	bne.n	800d6d8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3308      	adds	r3, #8
 800d712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	e853 3f00 	ldrex	r3, [r3]
 800d71a:	613b      	str	r3, [r7, #16]
   return(result);
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	3308      	adds	r3, #8
 800d72a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d72c:	623a      	str	r2, [r7, #32]
 800d72e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d730:	69f9      	ldr	r1, [r7, #28]
 800d732:	6a3a      	ldr	r2, [r7, #32]
 800d734:	e841 2300 	strex	r3, r2, [r1]
 800d738:	61bb      	str	r3, [r7, #24]
   return(result);
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d1e5      	bne.n	800d70c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d740:	2300      	movs	r3, #0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3758      	adds	r7, #88	@ 0x58
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	0800d95b 	.word	0x0800d95b
 800d750:	0800da83 	.word	0x0800da83
 800d754:	0800dac1 	.word	0x0800dac1

0800d758 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d758:	b480      	push	{r7}
 800d75a:	b08f      	sub	sp, #60	@ 0x3c
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	e853 3f00 	ldrex	r3, [r3]
 800d76c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d774:	637b      	str	r3, [r7, #52]	@ 0x34
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	461a      	mov	r2, r3
 800d77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d77e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d780:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d786:	e841 2300 	strex	r3, r2, [r1]
 800d78a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1e6      	bne.n	800d760 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	3308      	adds	r3, #8
 800d798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	e853 3f00 	ldrex	r3, [r3]
 800d7a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d7a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	3308      	adds	r3, #8
 800d7b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7b2:	61ba      	str	r2, [r7, #24]
 800d7b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b6:	6979      	ldr	r1, [r7, #20]
 800d7b8:	69ba      	ldr	r2, [r7, #24]
 800d7ba:	e841 2300 	strex	r3, r2, [r1]
 800d7be:	613b      	str	r3, [r7, #16]
   return(result);
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1e5      	bne.n	800d792 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2220      	movs	r2, #32
 800d7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d7ce:	bf00      	nop
 800d7d0:	373c      	adds	r7, #60	@ 0x3c
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
	...

0800d7dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b095      	sub	sp, #84	@ 0x54
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ec:	e853 3f00 	ldrex	r3, [r3]
 800d7f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	461a      	mov	r2, r3
 800d800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d802:	643b      	str	r3, [r7, #64]	@ 0x40
 800d804:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d806:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d808:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d80a:	e841 2300 	strex	r3, r2, [r1]
 800d80e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1e6      	bne.n	800d7e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	3308      	adds	r3, #8
 800d81c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	e853 3f00 	ldrex	r3, [r3]
 800d824:	61fb      	str	r3, [r7, #28]
   return(result);
 800d826:	69fa      	ldr	r2, [r7, #28]
 800d828:	4b1e      	ldr	r3, [pc, #120]	@ (800d8a4 <UART_EndRxTransfer+0xc8>)
 800d82a:	4013      	ands	r3, r2
 800d82c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3308      	adds	r3, #8
 800d834:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d836:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d838:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d83c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d83e:	e841 2300 	strex	r3, r2, [r1]
 800d842:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e5      	bne.n	800d816 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d118      	bne.n	800d884 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	e853 3f00 	ldrex	r3, [r3]
 800d85e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	f023 0310 	bic.w	r3, r3, #16
 800d866:	647b      	str	r3, [r7, #68]	@ 0x44
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	461a      	mov	r2, r3
 800d86e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d870:	61bb      	str	r3, [r7, #24]
 800d872:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d874:	6979      	ldr	r1, [r7, #20]
 800d876:	69ba      	ldr	r2, [r7, #24]
 800d878:	e841 2300 	strex	r3, r2, [r1]
 800d87c:	613b      	str	r3, [r7, #16]
   return(result);
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1e6      	bne.n	800d852 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2220      	movs	r2, #32
 800d888:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d898:	bf00      	nop
 800d89a:	3754      	adds	r7, #84	@ 0x54
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	effffffe 	.word	0xeffffffe

0800d8a8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b090      	sub	sp, #64	@ 0x40
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	69db      	ldr	r3, [r3, #28]
 800d8ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8be:	d037      	beq.n	800d930 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d8c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	3308      	adds	r3, #8
 800d8ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d2:	e853 3f00 	ldrex	r3, [r3]
 800d8d6:	623b      	str	r3, [r7, #32]
   return(result);
 800d8d8:	6a3b      	ldr	r3, [r7, #32]
 800d8da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d8e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3308      	adds	r3, #8
 800d8e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d8e8:	633a      	str	r2, [r7, #48]	@ 0x30
 800d8ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8f0:	e841 2300 	strex	r3, r2, [r1]
 800d8f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d1e5      	bne.n	800d8c8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	e853 3f00 	ldrex	r3, [r3]
 800d908:	60fb      	str	r3, [r7, #12]
   return(result);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d910:	637b      	str	r3, [r7, #52]	@ 0x34
 800d912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	461a      	mov	r2, r3
 800d918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d91a:	61fb      	str	r3, [r7, #28]
 800d91c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91e:	69b9      	ldr	r1, [r7, #24]
 800d920:	69fa      	ldr	r2, [r7, #28]
 800d922:	e841 2300 	strex	r3, r2, [r1]
 800d926:	617b      	str	r3, [r7, #20]
   return(result);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e6      	bne.n	800d8fc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d92e:	e002      	b.n	800d936 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d930:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d932:	f7fe ff15 	bl	800c760 <HAL_UART_TxCpltCallback>
}
 800d936:	bf00      	nop
 800d938:	3740      	adds	r7, #64	@ 0x40
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d93e:	b580      	push	{r7, lr}
 800d940:	b084      	sub	sp, #16
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d94a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f7fe ff11 	bl	800c774 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d952:	bf00      	nop
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b09c      	sub	sp, #112	@ 0x70
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d966:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	69db      	ldr	r3, [r3, #28]
 800d96c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d970:	d071      	beq.n	800da56 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d974:	2200      	movs	r2, #0
 800d976:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d97a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d982:	e853 3f00 	ldrex	r3, [r3]
 800d986:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d98a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d98e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	461a      	mov	r2, r3
 800d996:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d998:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d99a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d99e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d9a0:	e841 2300 	strex	r3, r2, [r1]
 800d9a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d9a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d1e6      	bne.n	800d97a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	3308      	adds	r3, #8
 800d9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b6:	e853 3f00 	ldrex	r3, [r3]
 800d9ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9be:	f023 0301 	bic.w	r3, r3, #1
 800d9c2:	667b      	str	r3, [r7, #100]	@ 0x64
 800d9c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	3308      	adds	r3, #8
 800d9ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d9cc:	647a      	str	r2, [r7, #68]	@ 0x44
 800d9ce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9d4:	e841 2300 	strex	r3, r2, [r1]
 800d9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1e5      	bne.n	800d9ac <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3308      	adds	r3, #8
 800d9e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ea:	e853 3f00 	ldrex	r3, [r3]
 800d9ee:	623b      	str	r3, [r7, #32]
   return(result);
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9f6:	663b      	str	r3, [r7, #96]	@ 0x60
 800d9f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	3308      	adds	r3, #8
 800d9fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800da00:	633a      	str	r2, [r7, #48]	@ 0x30
 800da02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da08:	e841 2300 	strex	r3, r2, [r1]
 800da0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1e5      	bne.n	800d9e0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da16:	2220      	movs	r2, #32
 800da18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da20:	2b01      	cmp	r3, #1
 800da22:	d118      	bne.n	800da56 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	e853 3f00 	ldrex	r3, [r3]
 800da30:	60fb      	str	r3, [r7, #12]
   return(result);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f023 0310 	bic.w	r3, r3, #16
 800da38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	461a      	mov	r2, r3
 800da40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da42:	61fb      	str	r3, [r7, #28]
 800da44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da46:	69b9      	ldr	r1, [r7, #24]
 800da48:	69fa      	ldr	r2, [r7, #28]
 800da4a:	e841 2300 	strex	r3, r2, [r1]
 800da4e:	617b      	str	r3, [r7, #20]
   return(result);
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1e6      	bne.n	800da24 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da58:	2200      	movs	r2, #0
 800da5a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da60:	2b01      	cmp	r3, #1
 800da62:	d107      	bne.n	800da74 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800da6a:	4619      	mov	r1, r3
 800da6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800da6e:	f7fe fe9f 	bl	800c7b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da72:	e002      	b.n	800da7a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800da74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800da76:	f7f3 fef3 	bl	8001860 <HAL_UART_RxCpltCallback>
}
 800da7a:	bf00      	nop
 800da7c:	3770      	adds	r7, #112	@ 0x70
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b084      	sub	sp, #16
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da8e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2201      	movs	r2, #1
 800da94:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d109      	bne.n	800dab2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800daa4:	085b      	lsrs	r3, r3, #1
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	4619      	mov	r1, r3
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f7fe fe80 	bl	800c7b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dab0:	e002      	b.n	800dab8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f7fe fe68 	bl	800c788 <HAL_UART_RxHalfCpltCallback>
}
 800dab8:	bf00      	nop
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dacc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dad4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dadc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dae8:	2b80      	cmp	r3, #128	@ 0x80
 800daea:	d109      	bne.n	800db00 <UART_DMAError+0x40>
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	2b21      	cmp	r3, #33	@ 0x21
 800daf0:	d106      	bne.n	800db00 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2200      	movs	r2, #0
 800daf6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dafa:	6978      	ldr	r0, [r7, #20]
 800dafc:	f7ff fe2c 	bl	800d758 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db0a:	2b40      	cmp	r3, #64	@ 0x40
 800db0c:	d109      	bne.n	800db22 <UART_DMAError+0x62>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2b22      	cmp	r3, #34	@ 0x22
 800db12:	d106      	bne.n	800db22 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	2200      	movs	r2, #0
 800db18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800db1c:	6978      	ldr	r0, [r7, #20]
 800db1e:	f7ff fe5d 	bl	800d7dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db28:	f043 0210 	orr.w	r2, r3, #16
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db32:	6978      	ldr	r0, [r7, #20]
 800db34:	f7fe fe32 	bl	800c79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db38:	bf00      	nop
 800db3a:	3718      	adds	r7, #24
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2200      	movs	r2, #0
 800db52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2200      	movs	r2, #0
 800db5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db5e:	68f8      	ldr	r0, [r7, #12]
 800db60:	f7fe fe1c 	bl	800c79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db64:	bf00      	nop
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b088      	sub	sp, #32
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	e853 3f00 	ldrex	r3, [r3]
 800db80:	60bb      	str	r3, [r7, #8]
   return(result);
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db88:	61fb      	str	r3, [r7, #28]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	461a      	mov	r2, r3
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	61bb      	str	r3, [r7, #24]
 800db94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db96:	6979      	ldr	r1, [r7, #20]
 800db98:	69ba      	ldr	r2, [r7, #24]
 800db9a:	e841 2300 	strex	r3, r2, [r1]
 800db9e:	613b      	str	r3, [r7, #16]
   return(result);
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1e6      	bne.n	800db74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2220      	movs	r2, #32
 800dbaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7fe fdd3 	bl	800c760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbba:	bf00      	nop
 800dbbc:	3720      	adds	r7, #32
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dbc2:	b480      	push	{r7}
 800dbc4:	b083      	sub	sp, #12
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dbca:	bf00      	nop
 800dbcc:	370c      	adds	r7, #12
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr

0800dbd6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dbd6:	b480      	push	{r7}
 800dbd8:	b083      	sub	sp, #12
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dbde:	bf00      	nop
 800dbe0:	370c      	adds	r7, #12
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dbf2:	bf00      	nop
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b085      	sub	sp, #20
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d101      	bne.n	800dc14 <HAL_UARTEx_DisableFifoMode+0x16>
 800dc10:	2302      	movs	r3, #2
 800dc12:	e027      	b.n	800dc64 <HAL_UARTEx_DisableFifoMode+0x66>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2224      	movs	r2, #36	@ 0x24
 800dc20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f022 0201 	bic.w	r2, r2, #1
 800dc3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dc42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	68fa      	ldr	r2, [r7, #12]
 800dc50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2220      	movs	r2, #32
 800dc56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc62:	2300      	movs	r3, #0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3714      	adds	r7, #20
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d101      	bne.n	800dc88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc84:	2302      	movs	r3, #2
 800dc86:	e02d      	b.n	800dce4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2224      	movs	r2, #36	@ 0x24
 800dc94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f022 0201 	bic.w	r2, r2, #1
 800dcae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	689b      	ldr	r3, [r3, #8]
 800dcb6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	683a      	ldr	r2, [r7, #0]
 800dcc0:	430a      	orrs	r2, r1
 800dcc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f84f 	bl	800dd68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	68fa      	ldr	r2, [r7, #12]
 800dcd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2220      	movs	r2, #32
 800dcd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d101      	bne.n	800dd04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd00:	2302      	movs	r3, #2
 800dd02:	e02d      	b.n	800dd60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2201      	movs	r2, #1
 800dd08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2224      	movs	r2, #36	@ 0x24
 800dd10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f022 0201 	bic.w	r2, r2, #1
 800dd2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	430a      	orrs	r2, r1
 800dd3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 f811 	bl	800dd68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2220      	movs	r2, #32
 800dd52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd5e:	2300      	movs	r3, #0
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d108      	bne.n	800dd8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2201      	movs	r2, #1
 800dd84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd88:	e031      	b.n	800ddee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd8a:	2310      	movs	r3, #16
 800dd8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd8e:	2310      	movs	r3, #16
 800dd90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	0e5b      	lsrs	r3, r3, #25
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	f003 0307 	and.w	r3, r3, #7
 800dda0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	0f5b      	lsrs	r3, r3, #29
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	f003 0307 	and.w	r3, r3, #7
 800ddb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ddb2:	7bbb      	ldrb	r3, [r7, #14]
 800ddb4:	7b3a      	ldrb	r2, [r7, #12]
 800ddb6:	4911      	ldr	r1, [pc, #68]	@ (800ddfc <UARTEx_SetNbDataToProcess+0x94>)
 800ddb8:	5c8a      	ldrb	r2, [r1, r2]
 800ddba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ddbe:	7b3a      	ldrb	r2, [r7, #12]
 800ddc0:	490f      	ldr	r1, [pc, #60]	@ (800de00 <UARTEx_SetNbDataToProcess+0x98>)
 800ddc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ddc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
 800ddd2:	7b7a      	ldrb	r2, [r7, #13]
 800ddd4:	4909      	ldr	r1, [pc, #36]	@ (800ddfc <UARTEx_SetNbDataToProcess+0x94>)
 800ddd6:	5c8a      	ldrb	r2, [r1, r2]
 800ddd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dddc:	7b7a      	ldrb	r2, [r7, #13]
 800ddde:	4908      	ldr	r1, [pc, #32]	@ (800de00 <UARTEx_SetNbDataToProcess+0x98>)
 800dde0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dde2:	fb93 f3f2 	sdiv	r3, r3, r2
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ddee:	bf00      	nop
 800ddf0:	3714      	adds	r7, #20
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	080235a8 	.word	0x080235a8
 800de00:	080235b0 	.word	0x080235b0

0800de04 <__NVIC_SetPriority>:
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	6039      	str	r1, [r7, #0]
 800de0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800de10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de14:	2b00      	cmp	r3, #0
 800de16:	db0a      	blt.n	800de2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	b2da      	uxtb	r2, r3
 800de1c:	490c      	ldr	r1, [pc, #48]	@ (800de50 <__NVIC_SetPriority+0x4c>)
 800de1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de22:	0112      	lsls	r2, r2, #4
 800de24:	b2d2      	uxtb	r2, r2
 800de26:	440b      	add	r3, r1
 800de28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800de2c:	e00a      	b.n	800de44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	b2da      	uxtb	r2, r3
 800de32:	4908      	ldr	r1, [pc, #32]	@ (800de54 <__NVIC_SetPriority+0x50>)
 800de34:	88fb      	ldrh	r3, [r7, #6]
 800de36:	f003 030f 	and.w	r3, r3, #15
 800de3a:	3b04      	subs	r3, #4
 800de3c:	0112      	lsls	r2, r2, #4
 800de3e:	b2d2      	uxtb	r2, r2
 800de40:	440b      	add	r3, r1
 800de42:	761a      	strb	r2, [r3, #24]
}
 800de44:	bf00      	nop
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	e000e100 	.word	0xe000e100
 800de54:	e000ed00 	.word	0xe000ed00

0800de58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800de58:	b580      	push	{r7, lr}
 800de5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800de5c:	4b05      	ldr	r3, [pc, #20]	@ (800de74 <SysTick_Handler+0x1c>)
 800de5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800de60:	f002 f9c0 	bl	80101e4 <xTaskGetSchedulerState>
 800de64:	4603      	mov	r3, r0
 800de66:	2b01      	cmp	r3, #1
 800de68:	d001      	beq.n	800de6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800de6a:	f003 fabd 	bl	80113e8 <xPortSysTickHandler>
  }
}
 800de6e:	bf00      	nop
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	e000e010 	.word	0xe000e010

0800de78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800de78:	b580      	push	{r7, lr}
 800de7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800de7c:	2100      	movs	r1, #0
 800de7e:	f06f 0004 	mvn.w	r0, #4
 800de82:	f7ff ffbf 	bl	800de04 <__NVIC_SetPriority>
#endif
}
 800de86:	bf00      	nop
 800de88:	bd80      	pop	{r7, pc}
	...

0800de8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de92:	f3ef 8305 	mrs	r3, IPSR
 800de96:	603b      	str	r3, [r7, #0]
  return(result);
 800de98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d003      	beq.n	800dea6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800de9e:	f06f 0305 	mvn.w	r3, #5
 800dea2:	607b      	str	r3, [r7, #4]
 800dea4:	e00c      	b.n	800dec0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dea6:	4b0a      	ldr	r3, [pc, #40]	@ (800ded0 <osKernelInitialize+0x44>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d105      	bne.n	800deba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800deae:	4b08      	ldr	r3, [pc, #32]	@ (800ded0 <osKernelInitialize+0x44>)
 800deb0:	2201      	movs	r2, #1
 800deb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800deb4:	2300      	movs	r3, #0
 800deb6:	607b      	str	r3, [r7, #4]
 800deb8:	e002      	b.n	800dec0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800deba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800debe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dec0:	687b      	ldr	r3, [r7, #4]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	370c      	adds	r7, #12
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr
 800dece:	bf00      	nop
 800ded0:	24032eb4 	.word	0x24032eb4

0800ded4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800deda:	f3ef 8305 	mrs	r3, IPSR
 800dede:	603b      	str	r3, [r7, #0]
  return(result);
 800dee0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d003      	beq.n	800deee <osKernelStart+0x1a>
    stat = osErrorISR;
 800dee6:	f06f 0305 	mvn.w	r3, #5
 800deea:	607b      	str	r3, [r7, #4]
 800deec:	e010      	b.n	800df10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800deee:	4b0b      	ldr	r3, [pc, #44]	@ (800df1c <osKernelStart+0x48>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b01      	cmp	r3, #1
 800def4:	d109      	bne.n	800df0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800def6:	f7ff ffbf 	bl	800de78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800defa:	4b08      	ldr	r3, [pc, #32]	@ (800df1c <osKernelStart+0x48>)
 800defc:	2202      	movs	r2, #2
 800defe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800df00:	f001 fcc2 	bl	800f888 <vTaskStartScheduler>
      stat = osOK;
 800df04:	2300      	movs	r3, #0
 800df06:	607b      	str	r3, [r7, #4]
 800df08:	e002      	b.n	800df10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800df0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800df10:	687b      	ldr	r3, [r7, #4]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	24032eb4 	.word	0x24032eb4

0800df20 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df26:	f3ef 8305 	mrs	r3, IPSR
 800df2a:	603b      	str	r3, [r7, #0]
  return(result);
 800df2c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d003      	beq.n	800df3a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800df32:	f001 fdd5 	bl	800fae0 <xTaskGetTickCountFromISR>
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	e002      	b.n	800df40 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800df3a:	f001 fdc1 	bl	800fac0 <xTaskGetTickCount>
 800df3e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800df40:	687b      	ldr	r3, [r7, #4]
}
 800df42:	4618      	mov	r0, r3
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b08e      	sub	sp, #56	@ 0x38
 800df4e:	af04      	add	r7, sp, #16
 800df50:	60f8      	str	r0, [r7, #12]
 800df52:	60b9      	str	r1, [r7, #8]
 800df54:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800df56:	2300      	movs	r3, #0
 800df58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df5a:	f3ef 8305 	mrs	r3, IPSR
 800df5e:	617b      	str	r3, [r7, #20]
  return(result);
 800df60:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800df62:	2b00      	cmp	r3, #0
 800df64:	d17e      	bne.n	800e064 <osThreadNew+0x11a>
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d07b      	beq.n	800e064 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800df6c:	2380      	movs	r3, #128	@ 0x80
 800df6e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800df70:	2318      	movs	r3, #24
 800df72:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800df74:	2300      	movs	r3, #0
 800df76:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800df78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df7c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d045      	beq.n	800e010 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d002      	beq.n	800df92 <osThreadNew+0x48>
        name = attr->name;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	699b      	ldr	r3, [r3, #24]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d002      	beq.n	800dfa0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	699b      	ldr	r3, [r3, #24]
 800df9e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d008      	beq.n	800dfb8 <osThreadNew+0x6e>
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	2b38      	cmp	r3, #56	@ 0x38
 800dfaa:	d805      	bhi.n	800dfb8 <osThreadNew+0x6e>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	f003 0301 	and.w	r3, r3, #1
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d001      	beq.n	800dfbc <osThreadNew+0x72>
        return (NULL);
 800dfb8:	2300      	movs	r3, #0
 800dfba:	e054      	b.n	800e066 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	695b      	ldr	r3, [r3, #20]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d003      	beq.n	800dfcc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	695b      	ldr	r3, [r3, #20]
 800dfc8:	089b      	lsrs	r3, r3, #2
 800dfca:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00e      	beq.n	800dff2 <osThreadNew+0xa8>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	2ba7      	cmp	r3, #167	@ 0xa7
 800dfda:	d90a      	bls.n	800dff2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d006      	beq.n	800dff2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	695b      	ldr	r3, [r3, #20]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d002      	beq.n	800dff2 <osThreadNew+0xa8>
        mem = 1;
 800dfec:	2301      	movs	r3, #1
 800dfee:	61bb      	str	r3, [r7, #24]
 800dff0:	e010      	b.n	800e014 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10c      	bne.n	800e014 <osThreadNew+0xca>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d108      	bne.n	800e014 <osThreadNew+0xca>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d104      	bne.n	800e014 <osThreadNew+0xca>
          mem = 0;
 800e00a:	2300      	movs	r3, #0
 800e00c:	61bb      	str	r3, [r7, #24]
 800e00e:	e001      	b.n	800e014 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d110      	bne.n	800e03c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e022:	9202      	str	r2, [sp, #8]
 800e024:	9301      	str	r3, [sp, #4]
 800e026:	69fb      	ldr	r3, [r7, #28]
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	6a3a      	ldr	r2, [r7, #32]
 800e02e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f001 fa35 	bl	800f4a0 <xTaskCreateStatic>
 800e036:	4603      	mov	r3, r0
 800e038:	613b      	str	r3, [r7, #16]
 800e03a:	e013      	b.n	800e064 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d110      	bne.n	800e064 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e042:	6a3b      	ldr	r3, [r7, #32]
 800e044:	b29a      	uxth	r2, r3
 800e046:	f107 0310 	add.w	r3, r7, #16
 800e04a:	9301      	str	r3, [sp, #4]
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f001 fa83 	bl	800f560 <xTaskCreate>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d001      	beq.n	800e064 <osThreadNew+0x11a>
            hTask = NULL;
 800e060:	2300      	movs	r3, #0
 800e062:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e064:	693b      	ldr	r3, [r7, #16]
}
 800e066:	4618      	mov	r0, r3
 800e068:	3728      	adds	r7, #40	@ 0x28
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
	...

0800e070 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e070:	b580      	push	{r7, lr}
 800e072:	b088      	sub	sp, #32
 800e074:	af02      	add	r7, sp, #8
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <osThreadFlagsSet+0x1a>
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	da03      	bge.n	800e092 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e08a:	f06f 0303 	mvn.w	r3, #3
 800e08e:	60fb      	str	r3, [r7, #12]
 800e090:	e035      	b.n	800e0fe <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800e092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e096:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e098:	f3ef 8305 	mrs	r3, IPSR
 800e09c:	613b      	str	r3, [r7, #16]
  return(result);
 800e09e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d01f      	beq.n	800e0e4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e0a8:	f107 0308 	add.w	r3, r7, #8
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	6978      	ldr	r0, [r7, #20]
 800e0b6:	f002 fb45 	bl	8010744 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e0ba:	f107 030c 	add.w	r3, r7, #12
 800e0be:	2200      	movs	r2, #0
 800e0c0:	9200      	str	r2, [sp, #0]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	2100      	movs	r1, #0
 800e0c6:	6978      	ldr	r0, [r7, #20]
 800e0c8:	f002 fb3c 	bl	8010744 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d015      	beq.n	800e0fe <osThreadFlagsSet+0x8e>
 800e0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e108 <osThreadFlagsSet+0x98>)
 800e0d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	f3bf 8f6f 	isb	sy
 800e0e2:	e00c      	b.n	800e0fe <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	6839      	ldr	r1, [r7, #0]
 800e0ea:	6978      	ldr	r0, [r7, #20]
 800e0ec:	f002 fa68 	bl	80105c0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e0f0:	f107 030c 	add.w	r3, r7, #12
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	6978      	ldr	r0, [r7, #20]
 800e0fa:	f002 fa61 	bl	80105c0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
}
 800e100:	4618      	mov	r0, r3
 800e102:	3718      	adds	r7, #24
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	e000ed04 	.word	0xe000ed04

0800e10c <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e112:	f3ef 8305 	mrs	r3, IPSR
 800e116:	60bb      	str	r3, [r7, #8]
  return(result);
 800e118:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d003      	beq.n	800e126 <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800e11e:	f06f 0305 	mvn.w	r3, #5
 800e122:	607b      	str	r3, [r7, #4]
 800e124:	e00e      	b.n	800e144 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800e126:	f002 f84d 	bl	80101c4 <xTaskGetCurrentTaskHandle>
 800e12a:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800e12c:	1d3b      	adds	r3, r7, #4
 800e12e:	2200      	movs	r2, #0
 800e130:	2100      	movs	r1, #0
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f002 fa44 	bl	80105c0 <xTaskGenericNotify>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d002      	beq.n	800e144 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800e13e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e142:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800e144:	687b      	ldr	r3, [r7, #4]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3710      	adds	r7, #16
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e14e:	b580      	push	{r7, lr}
 800e150:	b08c      	sub	sp, #48	@ 0x30
 800e152:	af00      	add	r7, sp, #0
 800e154:	60f8      	str	r0, [r7, #12]
 800e156:	60b9      	str	r1, [r7, #8]
 800e158:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e15a:	f3ef 8305 	mrs	r3, IPSR
 800e15e:	617b      	str	r3, [r7, #20]
  return(result);
 800e160:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e162:	2b00      	cmp	r3, #0
 800e164:	d003      	beq.n	800e16e <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800e166:	f06f 0305 	mvn.w	r3, #5
 800e16a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e16c:	e06b      	b.n	800e246 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2b00      	cmp	r3, #0
 800e172:	da03      	bge.n	800e17c <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800e174:	f06f 0303 	mvn.w	r3, #3
 800e178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e17a:	e064      	b.n	800e246 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	f003 0302 	and.w	r3, r3, #2
 800e182:	2b00      	cmp	r3, #0
 800e184:	d002      	beq.n	800e18c <osThreadFlagsWait+0x3e>
      clear = 0U;
 800e186:	2300      	movs	r3, #0
 800e188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e18a:	e001      	b.n	800e190 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800e190:	2300      	movs	r3, #0
 800e192:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800e198:	f001 fc92 	bl	800fac0 <xTaskGetTickCount>
 800e19c:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e19e:	f107 0210 	add.w	r2, r7, #16
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	f002 f9aa 	bl	8010500 <xTaskNotifyWait>
 800e1ac:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d137      	bne.n	800e224 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800e1b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	4013      	ands	r3, r2
 800e1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00c      	beq.n	800e1e8 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d2:	4013      	ands	r3, r2
 800e1d4:	68fa      	ldr	r2, [r7, #12]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d032      	beq.n	800e240 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d10f      	bne.n	800e200 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e1e0:	f06f 0302 	mvn.w	r3, #2
 800e1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e1e6:	e02e      	b.n	800e246 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d128      	bne.n	800e244 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d103      	bne.n	800e200 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e1f8:	f06f 0302 	mvn.w	r3, #2
 800e1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e1fe:	e022      	b.n	800e246 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e200:	f001 fc5e 	bl	800fac0 <xTaskGetTickCount>
 800e204:	4602      	mov	r2, r0
 800e206:	6a3b      	ldr	r3, [r7, #32]
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800e20c:	69ba      	ldr	r2, [r7, #24]
 800e20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e210:	429a      	cmp	r2, r3
 800e212:	d902      	bls.n	800e21a <osThreadFlagsWait+0xcc>
          tout  = 0;
 800e214:	2300      	movs	r3, #0
 800e216:	627b      	str	r3, [r7, #36]	@ 0x24
 800e218:	e00e      	b.n	800e238 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800e21a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	627b      	str	r3, [r7, #36]	@ 0x24
 800e222:	e009      	b.n	800e238 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d103      	bne.n	800e232 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800e22a:	f06f 0302 	mvn.w	r3, #2
 800e22e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e230:	e002      	b.n	800e238 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e232:	f06f 0301 	mvn.w	r3, #1
 800e236:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1af      	bne.n	800e19e <osThreadFlagsWait+0x50>
 800e23e:	e002      	b.n	800e246 <osThreadFlagsWait+0xf8>
            break;
 800e240:	bf00      	nop
 800e242:	e000      	b.n	800e246 <osThreadFlagsWait+0xf8>
            break;
 800e244:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3730      	adds	r7, #48	@ 0x30
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e258:	f3ef 8305 	mrs	r3, IPSR
 800e25c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e25e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e260:	2b00      	cmp	r3, #0
 800e262:	d003      	beq.n	800e26c <osDelay+0x1c>
    stat = osErrorISR;
 800e264:	f06f 0305 	mvn.w	r3, #5
 800e268:	60fb      	str	r3, [r7, #12]
 800e26a:	e007      	b.n	800e27c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e26c:	2300      	movs	r3, #0
 800e26e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d002      	beq.n	800e27c <osDelay+0x2c>
      vTaskDelay(ticks);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f001 fad0 	bl	800f81c <vTaskDelay>
    }
  }

  return (stat);
 800e27c:	68fb      	ldr	r3, [r7, #12]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e286:	b580      	push	{r7, lr}
 800e288:	b088      	sub	sp, #32
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e28e:	2300      	movs	r3, #0
 800e290:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e292:	f3ef 8305 	mrs	r3, IPSR
 800e296:	60bb      	str	r3, [r7, #8]
  return(result);
 800e298:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d174      	bne.n	800e388 <osMutexNew+0x102>
    if (attr != NULL) {
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d003      	beq.n	800e2ac <osMutexNew+0x26>
      type = attr->attr_bits;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	61bb      	str	r3, [r7, #24]
 800e2aa:	e001      	b.n	800e2b0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	f003 0301 	and.w	r3, r3, #1
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d002      	beq.n	800e2c0 <osMutexNew+0x3a>
      rmtx = 1U;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	e001      	b.n	800e2c4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	f003 0308 	and.w	r3, r3, #8
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d15c      	bne.n	800e388 <osMutexNew+0x102>
      mem = -1;
 800e2ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e2d2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d015      	beq.n	800e306 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d006      	beq.n	800e2f0 <osMutexNew+0x6a>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	2b4f      	cmp	r3, #79	@ 0x4f
 800e2e8:	d902      	bls.n	800e2f0 <osMutexNew+0x6a>
          mem = 1;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	613b      	str	r3, [r7, #16]
 800e2ee:	e00c      	b.n	800e30a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d108      	bne.n	800e30a <osMutexNew+0x84>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d104      	bne.n	800e30a <osMutexNew+0x84>
            mem = 0;
 800e300:	2300      	movs	r3, #0
 800e302:	613b      	str	r3, [r7, #16]
 800e304:	e001      	b.n	800e30a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e306:	2300      	movs	r3, #0
 800e308:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d112      	bne.n	800e336 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d007      	beq.n	800e326 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	689b      	ldr	r3, [r3, #8]
 800e31a:	4619      	mov	r1, r3
 800e31c:	2004      	movs	r0, #4
 800e31e:	f000 fb20 	bl	800e962 <xQueueCreateMutexStatic>
 800e322:	61f8      	str	r0, [r7, #28]
 800e324:	e016      	b.n	800e354 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	4619      	mov	r1, r3
 800e32c:	2001      	movs	r0, #1
 800e32e:	f000 fb18 	bl	800e962 <xQueueCreateMutexStatic>
 800e332:	61f8      	str	r0, [r7, #28]
 800e334:	e00e      	b.n	800e354 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d10b      	bne.n	800e354 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d004      	beq.n	800e34c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e342:	2004      	movs	r0, #4
 800e344:	f000 faf5 	bl	800e932 <xQueueCreateMutex>
 800e348:	61f8      	str	r0, [r7, #28]
 800e34a:	e003      	b.n	800e354 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e34c:	2001      	movs	r0, #1
 800e34e:	f000 faf0 	bl	800e932 <xQueueCreateMutex>
 800e352:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00c      	beq.n	800e374 <osMutexNew+0xee>
        if (attr != NULL) {
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d003      	beq.n	800e368 <osMutexNew+0xe2>
          name = attr->name;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	60fb      	str	r3, [r7, #12]
 800e366:	e001      	b.n	800e36c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e368:	2300      	movs	r3, #0
 800e36a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e36c:	68f9      	ldr	r1, [r7, #12]
 800e36e:	69f8      	ldr	r0, [r7, #28]
 800e370:	f001 f838 	bl	800f3e4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d006      	beq.n	800e388 <osMutexNew+0x102>
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d003      	beq.n	800e388 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	f043 0301 	orr.w	r3, r3, #1
 800e386:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e388:	69fb      	ldr	r3, [r7, #28]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3720      	adds	r7, #32
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e392:	b580      	push	{r7, lr}
 800e394:	b086      	sub	sp, #24
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f023 0301 	bic.w	r3, r3, #1
 800e3a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f003 0301 	and.w	r3, r3, #1
 800e3aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3b0:	f3ef 8305 	mrs	r3, IPSR
 800e3b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d003      	beq.n	800e3c4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800e3bc:	f06f 0305 	mvn.w	r3, #5
 800e3c0:	617b      	str	r3, [r7, #20]
 800e3c2:	e02c      	b.n	800e41e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d103      	bne.n	800e3d2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800e3ca:	f06f 0303 	mvn.w	r3, #3
 800e3ce:	617b      	str	r3, [r7, #20]
 800e3d0:	e025      	b.n	800e41e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d011      	beq.n	800e3fc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	6938      	ldr	r0, [r7, #16]
 800e3dc:	f000 fb11 	bl	800ea02 <xQueueTakeMutexRecursive>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d01b      	beq.n	800e41e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d003      	beq.n	800e3f4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800e3ec:	f06f 0301 	mvn.w	r3, #1
 800e3f0:	617b      	str	r3, [r7, #20]
 800e3f2:	e014      	b.n	800e41e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e3f4:	f06f 0302 	mvn.w	r3, #2
 800e3f8:	617b      	str	r3, [r7, #20]
 800e3fa:	e010      	b.n	800e41e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e3fc:	6839      	ldr	r1, [r7, #0]
 800e3fe:	6938      	ldr	r0, [r7, #16]
 800e400:	f000 fdb8 	bl	800ef74 <xQueueSemaphoreTake>
 800e404:	4603      	mov	r3, r0
 800e406:	2b01      	cmp	r3, #1
 800e408:	d009      	beq.n	800e41e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d003      	beq.n	800e418 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800e410:	f06f 0301 	mvn.w	r3, #1
 800e414:	617b      	str	r3, [r7, #20]
 800e416:	e002      	b.n	800e41e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e418:	f06f 0302 	mvn.w	r3, #2
 800e41c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800e41e:	697b      	ldr	r3, [r7, #20]
}
 800e420:	4618      	mov	r0, r3
 800e422:	3718      	adds	r7, #24
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e428:	b580      	push	{r7, lr}
 800e42a:	b086      	sub	sp, #24
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f023 0301 	bic.w	r3, r3, #1
 800e436:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f003 0301 	and.w	r3, r3, #1
 800e43e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e440:	2300      	movs	r3, #0
 800e442:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e444:	f3ef 8305 	mrs	r3, IPSR
 800e448:	60bb      	str	r3, [r7, #8]
  return(result);
 800e44a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d003      	beq.n	800e458 <osMutexRelease+0x30>
    stat = osErrorISR;
 800e450:	f06f 0305 	mvn.w	r3, #5
 800e454:	617b      	str	r3, [r7, #20]
 800e456:	e01f      	b.n	800e498 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d103      	bne.n	800e466 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800e45e:	f06f 0303 	mvn.w	r3, #3
 800e462:	617b      	str	r3, [r7, #20]
 800e464:	e018      	b.n	800e498 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d009      	beq.n	800e480 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e46c:	6938      	ldr	r0, [r7, #16]
 800e46e:	f000 fa93 	bl	800e998 <xQueueGiveMutexRecursive>
 800e472:	4603      	mov	r3, r0
 800e474:	2b01      	cmp	r3, #1
 800e476:	d00f      	beq.n	800e498 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e478:	f06f 0302 	mvn.w	r3, #2
 800e47c:	617b      	str	r3, [r7, #20]
 800e47e:	e00b      	b.n	800e498 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e480:	2300      	movs	r3, #0
 800e482:	2200      	movs	r2, #0
 800e484:	2100      	movs	r1, #0
 800e486:	6938      	ldr	r0, [r7, #16]
 800e488:	f000 faf2 	bl	800ea70 <xQueueGenericSend>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d002      	beq.n	800e498 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e492:	f06f 0302 	mvn.w	r3, #2
 800e496:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e498:	697b      	ldr	r3, [r7, #20]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3718      	adds	r7, #24
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
	...

0800e4a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e4a4:	b480      	push	{r7}
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	4a07      	ldr	r2, [pc, #28]	@ (800e4d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800e4b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	4a06      	ldr	r2, [pc, #24]	@ (800e4d4 <vApplicationGetIdleTaskMemory+0x30>)
 800e4ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2280      	movs	r2, #128	@ 0x80
 800e4c0:	601a      	str	r2, [r3, #0]
}
 800e4c2:	bf00      	nop
 800e4c4:	3714      	adds	r7, #20
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	24032eb8 	.word	0x24032eb8
 800e4d4:	24032f60 	.word	0x24032f60

0800e4d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	4a07      	ldr	r2, [pc, #28]	@ (800e504 <vApplicationGetTimerTaskMemory+0x2c>)
 800e4e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	4a06      	ldr	r2, [pc, #24]	@ (800e508 <vApplicationGetTimerTaskMemory+0x30>)
 800e4ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e4f6:	601a      	str	r2, [r3, #0]
}
 800e4f8:	bf00      	nop
 800e4fa:	3714      	adds	r7, #20
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr
 800e504:	24033160 	.word	0x24033160
 800e508:	24033208 	.word	0x24033208

0800e50c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f103 0208 	add.w	r2, r3, #8
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f103 0208 	add.w	r2, r3, #8
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f103 0208 	add.w	r2, r3, #8
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr

0800e54c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2200      	movs	r2, #0
 800e558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e55a:	bf00      	nop
 800e55c:	370c      	adds	r7, #12
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr

0800e566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e566:	b480      	push	{r7}
 800e568:	b085      	sub	sp, #20
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
 800e56e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	68fa      	ldr	r2, [r7, #12]
 800e57a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	689a      	ldr	r2, [r3, #8]
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	683a      	ldr	r2, [r7, #0]
 800e58a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	601a      	str	r2, [r3, #0]
}
 800e5a2:	bf00      	nop
 800e5a4:	3714      	adds	r7, #20
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr

0800e5ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e5ae:	b480      	push	{r7}
 800e5b0:	b085      	sub	sp, #20
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
 800e5b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5c4:	d103      	bne.n	800e5ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	691b      	ldr	r3, [r3, #16]
 800e5ca:	60fb      	str	r3, [r7, #12]
 800e5cc:	e00c      	b.n	800e5e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3308      	adds	r3, #8
 800e5d2:	60fb      	str	r3, [r7, #12]
 800e5d4:	e002      	b.n	800e5dc <vListInsert+0x2e>
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	60fb      	str	r3, [r7, #12]
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68ba      	ldr	r2, [r7, #8]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d2f6      	bcs.n	800e5d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	685a      	ldr	r2, [r3, #4]
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	683a      	ldr	r2, [r7, #0]
 800e5f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	683a      	ldr	r2, [r7, #0]
 800e602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	1c5a      	adds	r2, r3, #1
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	601a      	str	r2, [r3, #0]
}
 800e614:	bf00      	nop
 800e616:	3714      	adds	r7, #20
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e620:	b480      	push	{r7}
 800e622:	b085      	sub	sp, #20
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	6892      	ldr	r2, [r2, #8]
 800e636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	6852      	ldr	r2, [r2, #4]
 800e640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d103      	bne.n	800e654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	689a      	ldr	r2, [r3, #8]
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	1e5a      	subs	r2, r3, #1
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3714      	adds	r7, #20
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr

0800e674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d10b      	bne.n	800e6a0 <xQueueGenericReset+0x2c>
	__asm volatile
 800e688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e68c:	f383 8811 	msr	BASEPRI, r3
 800e690:	f3bf 8f6f 	isb	sy
 800e694:	f3bf 8f4f 	dsb	sy
 800e698:	60bb      	str	r3, [r7, #8]
}
 800e69a:	bf00      	nop
 800e69c:	bf00      	nop
 800e69e:	e7fd      	b.n	800e69c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e6a0:	f002 fe12 	bl	80112c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6ac:	68f9      	ldr	r1, [r7, #12]
 800e6ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e6b0:	fb01 f303 	mul.w	r3, r1, r3
 800e6b4:	441a      	add	r2, r3
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	68f9      	ldr	r1, [r7, #12]
 800e6d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e6d6:	fb01 f303 	mul.w	r3, r1, r3
 800e6da:	441a      	add	r2, r3
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	22ff      	movs	r2, #255	@ 0xff
 800e6e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	22ff      	movs	r2, #255	@ 0xff
 800e6ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d114      	bne.n	800e720 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	691b      	ldr	r3, [r3, #16]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d01a      	beq.n	800e734 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3310      	adds	r3, #16
 800e702:	4618      	mov	r0, r3
 800e704:	f001 fb70 	bl	800fde8 <xTaskRemoveFromEventList>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d012      	beq.n	800e734 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e70e:	4b0d      	ldr	r3, [pc, #52]	@ (800e744 <xQueueGenericReset+0xd0>)
 800e710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e714:	601a      	str	r2, [r3, #0]
 800e716:	f3bf 8f4f 	dsb	sy
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	e009      	b.n	800e734 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	3310      	adds	r3, #16
 800e724:	4618      	mov	r0, r3
 800e726:	f7ff fef1 	bl	800e50c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	3324      	adds	r3, #36	@ 0x24
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff feec 	bl	800e50c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e734:	f002 fdfa 	bl	801132c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e738:	2301      	movs	r3, #1
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	e000ed04 	.word	0xe000ed04

0800e748 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b08e      	sub	sp, #56	@ 0x38
 800e74c:	af02      	add	r7, sp, #8
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	607a      	str	r2, [r7, #4]
 800e754:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d10b      	bne.n	800e774 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e76e:	bf00      	nop
 800e770:	bf00      	nop
 800e772:	e7fd      	b.n	800e770 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10b      	bne.n	800e792 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e77e:	f383 8811 	msr	BASEPRI, r3
 800e782:	f3bf 8f6f 	isb	sy
 800e786:	f3bf 8f4f 	dsb	sy
 800e78a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e78c:	bf00      	nop
 800e78e:	bf00      	nop
 800e790:	e7fd      	b.n	800e78e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d002      	beq.n	800e79e <xQueueGenericCreateStatic+0x56>
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <xQueueGenericCreateStatic+0x5a>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e000      	b.n	800e7a4 <xQueueGenericCreateStatic+0x5c>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10b      	bne.n	800e7c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ac:	f383 8811 	msr	BASEPRI, r3
 800e7b0:	f3bf 8f6f 	isb	sy
 800e7b4:	f3bf 8f4f 	dsb	sy
 800e7b8:	623b      	str	r3, [r7, #32]
}
 800e7ba:	bf00      	nop
 800e7bc:	bf00      	nop
 800e7be:	e7fd      	b.n	800e7bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d102      	bne.n	800e7cc <xQueueGenericCreateStatic+0x84>
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d101      	bne.n	800e7d0 <xQueueGenericCreateStatic+0x88>
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e000      	b.n	800e7d2 <xQueueGenericCreateStatic+0x8a>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10b      	bne.n	800e7ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	61fb      	str	r3, [r7, #28]
}
 800e7e8:	bf00      	nop
 800e7ea:	bf00      	nop
 800e7ec:	e7fd      	b.n	800e7ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e7ee:	2350      	movs	r3, #80	@ 0x50
 800e7f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2b50      	cmp	r3, #80	@ 0x50
 800e7f6:	d00b      	beq.n	800e810 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7fc:	f383 8811 	msr	BASEPRI, r3
 800e800:	f3bf 8f6f 	isb	sy
 800e804:	f3bf 8f4f 	dsb	sy
 800e808:	61bb      	str	r3, [r7, #24]
}
 800e80a:	bf00      	nop
 800e80c:	bf00      	nop
 800e80e:	e7fd      	b.n	800e80c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e810:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d00d      	beq.n	800e838 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81e:	2201      	movs	r2, #1
 800e820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e824:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82a:	9300      	str	r3, [sp, #0]
 800e82c:	4613      	mov	r3, r2
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	68b9      	ldr	r1, [r7, #8]
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	f000 f840 	bl	800e8b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3730      	adds	r7, #48	@ 0x30
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e842:	b580      	push	{r7, lr}
 800e844:	b08a      	sub	sp, #40	@ 0x28
 800e846:	af02      	add	r7, sp, #8
 800e848:	60f8      	str	r0, [r7, #12]
 800e84a:	60b9      	str	r1, [r7, #8]
 800e84c:	4613      	mov	r3, r2
 800e84e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d10b      	bne.n	800e86e <xQueueGenericCreate+0x2c>
	__asm volatile
 800e856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	613b      	str	r3, [r7, #16]
}
 800e868:	bf00      	nop
 800e86a:	bf00      	nop
 800e86c:	e7fd      	b.n	800e86a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	68ba      	ldr	r2, [r7, #8]
 800e872:	fb02 f303 	mul.w	r3, r2, r3
 800e876:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	3350      	adds	r3, #80	@ 0x50
 800e87c:	4618      	mov	r0, r3
 800e87e:	f002 fe45 	bl	801150c <pvPortMalloc>
 800e882:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d011      	beq.n	800e8ae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	3350      	adds	r3, #80	@ 0x50
 800e892:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	2200      	movs	r2, #0
 800e898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e89c:	79fa      	ldrb	r2, [r7, #7]
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	697a      	ldr	r2, [r7, #20]
 800e8a6:	68b9      	ldr	r1, [r7, #8]
 800e8a8:	68f8      	ldr	r0, [r7, #12]
 800e8aa:	f000 f805 	bl	800e8b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e8ae:	69bb      	ldr	r3, [r7, #24]
	}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3720      	adds	r7, #32
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]
 800e8c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d103      	bne.n	800e8d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	69ba      	ldr	r2, [r7, #24]
 800e8d0:	601a      	str	r2, [r3, #0]
 800e8d2:	e002      	b.n	800e8da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e8e6:	2101      	movs	r1, #1
 800e8e8:	69b8      	ldr	r0, [r7, #24]
 800e8ea:	f7ff fec3 	bl	800e674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	78fa      	ldrb	r2, [r7, #3]
 800e8f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e8f6:	bf00      	nop
 800e8f8:	3710      	adds	r7, #16
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}

0800e8fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b082      	sub	sp, #8
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00e      	beq.n	800e92a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e91e:	2300      	movs	r3, #0
 800e920:	2200      	movs	r2, #0
 800e922:	2100      	movs	r1, #0
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 f8a3 	bl	800ea70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e92a:	bf00      	nop
 800e92c:	3708      	adds	r7, #8
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}

0800e932 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e932:	b580      	push	{r7, lr}
 800e934:	b086      	sub	sp, #24
 800e936:	af00      	add	r7, sp, #0
 800e938:	4603      	mov	r3, r0
 800e93a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e93c:	2301      	movs	r3, #1
 800e93e:	617b      	str	r3, [r7, #20]
 800e940:	2300      	movs	r3, #0
 800e942:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e944:	79fb      	ldrb	r3, [r7, #7]
 800e946:	461a      	mov	r2, r3
 800e948:	6939      	ldr	r1, [r7, #16]
 800e94a:	6978      	ldr	r0, [r7, #20]
 800e94c:	f7ff ff79 	bl	800e842 <xQueueGenericCreate>
 800e950:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f7ff ffd3 	bl	800e8fe <prvInitialiseMutex>

		return xNewQueue;
 800e958:	68fb      	ldr	r3, [r7, #12]
	}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3718      	adds	r7, #24
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e962:	b580      	push	{r7, lr}
 800e964:	b088      	sub	sp, #32
 800e966:	af02      	add	r7, sp, #8
 800e968:	4603      	mov	r3, r0
 800e96a:	6039      	str	r1, [r7, #0]
 800e96c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e96e:	2301      	movs	r3, #1
 800e970:	617b      	str	r3, [r7, #20]
 800e972:	2300      	movs	r3, #0
 800e974:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e976:	79fb      	ldrb	r3, [r7, #7]
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	2200      	movs	r2, #0
 800e97e:	6939      	ldr	r1, [r7, #16]
 800e980:	6978      	ldr	r0, [r7, #20]
 800e982:	f7ff fee1 	bl	800e748 <xQueueGenericCreateStatic>
 800e986:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f7ff ffb8 	bl	800e8fe <prvInitialiseMutex>

		return xNewQueue;
 800e98e:	68fb      	ldr	r3, [r7, #12]
	}
 800e990:	4618      	mov	r0, r3
 800e992:	3718      	adds	r7, #24
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e998:	b590      	push	{r4, r7, lr}
 800e99a:	b087      	sub	sp, #28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d10b      	bne.n	800e9c2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800e9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	60fb      	str	r3, [r7, #12]
}
 800e9bc:	bf00      	nop
 800e9be:	bf00      	nop
 800e9c0:	e7fd      	b.n	800e9be <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	689c      	ldr	r4, [r3, #8]
 800e9c6:	f001 fbfd 	bl	80101c4 <xTaskGetCurrentTaskHandle>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	429c      	cmp	r4, r3
 800e9ce:	d111      	bne.n	800e9f4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	1e5a      	subs	r2, r3, #1
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d105      	bne.n	800e9ee <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	6938      	ldr	r0, [r7, #16]
 800e9ea:	f000 f841 	bl	800ea70 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	617b      	str	r3, [r7, #20]
 800e9f2:	e001      	b.n	800e9f8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e9f8:	697b      	ldr	r3, [r7, #20]
	}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	371c      	adds	r7, #28
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd90      	pop	{r4, r7, pc}

0800ea02 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ea02:	b590      	push	{r4, r7, lr}
 800ea04:	b087      	sub	sp, #28
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
 800ea0a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d10b      	bne.n	800ea2e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800ea16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea1a:	f383 8811 	msr	BASEPRI, r3
 800ea1e:	f3bf 8f6f 	isb	sy
 800ea22:	f3bf 8f4f 	dsb	sy
 800ea26:	60fb      	str	r3, [r7, #12]
}
 800ea28:	bf00      	nop
 800ea2a:	bf00      	nop
 800ea2c:	e7fd      	b.n	800ea2a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	689c      	ldr	r4, [r3, #8]
 800ea32:	f001 fbc7 	bl	80101c4 <xTaskGetCurrentTaskHandle>
 800ea36:	4603      	mov	r3, r0
 800ea38:	429c      	cmp	r4, r3
 800ea3a:	d107      	bne.n	800ea4c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	1c5a      	adds	r2, r3, #1
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ea46:	2301      	movs	r3, #1
 800ea48:	617b      	str	r3, [r7, #20]
 800ea4a:	e00c      	b.n	800ea66 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	6938      	ldr	r0, [r7, #16]
 800ea50:	f000 fa90 	bl	800ef74 <xQueueSemaphoreTake>
 800ea54:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d004      	beq.n	800ea66 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	1c5a      	adds	r2, r3, #1
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ea66:	697b      	ldr	r3, [r7, #20]
	}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	371c      	adds	r7, #28
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd90      	pop	{r4, r7, pc}

0800ea70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b08e      	sub	sp, #56	@ 0x38
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ea86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10b      	bne.n	800eaa4 <xQueueGenericSend+0x34>
	__asm volatile
 800ea8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea90:	f383 8811 	msr	BASEPRI, r3
 800ea94:	f3bf 8f6f 	isb	sy
 800ea98:	f3bf 8f4f 	dsb	sy
 800ea9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ea9e:	bf00      	nop
 800eaa0:	bf00      	nop
 800eaa2:	e7fd      	b.n	800eaa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d103      	bne.n	800eab2 <xQueueGenericSend+0x42>
 800eaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d101      	bne.n	800eab6 <xQueueGenericSend+0x46>
 800eab2:	2301      	movs	r3, #1
 800eab4:	e000      	b.n	800eab8 <xQueueGenericSend+0x48>
 800eab6:	2300      	movs	r3, #0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d10b      	bne.n	800ead4 <xQueueGenericSend+0x64>
	__asm volatile
 800eabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac0:	f383 8811 	msr	BASEPRI, r3
 800eac4:	f3bf 8f6f 	isb	sy
 800eac8:	f3bf 8f4f 	dsb	sy
 800eacc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eace:	bf00      	nop
 800ead0:	bf00      	nop
 800ead2:	e7fd      	b.n	800ead0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d103      	bne.n	800eae2 <xQueueGenericSend+0x72>
 800eada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eadc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d101      	bne.n	800eae6 <xQueueGenericSend+0x76>
 800eae2:	2301      	movs	r3, #1
 800eae4:	e000      	b.n	800eae8 <xQueueGenericSend+0x78>
 800eae6:	2300      	movs	r3, #0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10b      	bne.n	800eb04 <xQueueGenericSend+0x94>
	__asm volatile
 800eaec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf0:	f383 8811 	msr	BASEPRI, r3
 800eaf4:	f3bf 8f6f 	isb	sy
 800eaf8:	f3bf 8f4f 	dsb	sy
 800eafc:	623b      	str	r3, [r7, #32]
}
 800eafe:	bf00      	nop
 800eb00:	bf00      	nop
 800eb02:	e7fd      	b.n	800eb00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb04:	f001 fb6e 	bl	80101e4 <xTaskGetSchedulerState>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d102      	bne.n	800eb14 <xQueueGenericSend+0xa4>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d101      	bne.n	800eb18 <xQueueGenericSend+0xa8>
 800eb14:	2301      	movs	r3, #1
 800eb16:	e000      	b.n	800eb1a <xQueueGenericSend+0xaa>
 800eb18:	2300      	movs	r3, #0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d10b      	bne.n	800eb36 <xQueueGenericSend+0xc6>
	__asm volatile
 800eb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	61fb      	str	r3, [r7, #28]
}
 800eb30:	bf00      	nop
 800eb32:	bf00      	nop
 800eb34:	e7fd      	b.n	800eb32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb36:	f002 fbc7 	bl	80112c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d302      	bcc.n	800eb4c <xQueueGenericSend+0xdc>
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	2b02      	cmp	r3, #2
 800eb4a:	d129      	bne.n	800eba0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb4c:	683a      	ldr	r2, [r7, #0]
 800eb4e:	68b9      	ldr	r1, [r7, #8]
 800eb50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb52:	f000 fb37 	bl	800f1c4 <prvCopyDataToQueue>
 800eb56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d010      	beq.n	800eb82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb62:	3324      	adds	r3, #36	@ 0x24
 800eb64:	4618      	mov	r0, r3
 800eb66:	f001 f93f 	bl	800fde8 <xTaskRemoveFromEventList>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d013      	beq.n	800eb98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eb70:	4b3f      	ldr	r3, [pc, #252]	@ (800ec70 <xQueueGenericSend+0x200>)
 800eb72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb76:	601a      	str	r2, [r3, #0]
 800eb78:	f3bf 8f4f 	dsb	sy
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	e00a      	b.n	800eb98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d007      	beq.n	800eb98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eb88:	4b39      	ldr	r3, [pc, #228]	@ (800ec70 <xQueueGenericSend+0x200>)
 800eb8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb8e:	601a      	str	r2, [r3, #0]
 800eb90:	f3bf 8f4f 	dsb	sy
 800eb94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eb98:	f002 fbc8 	bl	801132c <vPortExitCritical>
				return pdPASS;
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e063      	b.n	800ec68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d103      	bne.n	800ebae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eba6:	f002 fbc1 	bl	801132c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	e05c      	b.n	800ec68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d106      	bne.n	800ebc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebb4:	f107 0314 	add.w	r3, r7, #20
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f001 f9a1 	bl	800ff00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebc2:	f002 fbb3 	bl	801132c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebc6:	f000 fecf 	bl	800f968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebca:	f002 fb7d 	bl	80112c8 <vPortEnterCritical>
 800ebce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ebd4:	b25b      	sxtb	r3, r3
 800ebd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ebda:	d103      	bne.n	800ebe4 <xQueueGenericSend+0x174>
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ebe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ebea:	b25b      	sxtb	r3, r3
 800ebec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ebf0:	d103      	bne.n	800ebfa <xQueueGenericSend+0x18a>
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebfa:	f002 fb97 	bl	801132c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebfe:	1d3a      	adds	r2, r7, #4
 800ec00:	f107 0314 	add.w	r3, r7, #20
 800ec04:	4611      	mov	r1, r2
 800ec06:	4618      	mov	r0, r3
 800ec08:	f001 f990 	bl	800ff2c <xTaskCheckForTimeOut>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d124      	bne.n	800ec5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ec12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec14:	f000 fbce 	bl	800f3b4 <prvIsQueueFull>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d018      	beq.n	800ec50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec20:	3310      	adds	r3, #16
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	4611      	mov	r1, r2
 800ec26:	4618      	mov	r0, r3
 800ec28:	f001 f88c 	bl	800fd44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ec2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec2e:	f000 fb59 	bl	800f2e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ec32:	f000 fea7 	bl	800f984 <xTaskResumeAll>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f47f af7c 	bne.w	800eb36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ec3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ec70 <xQueueGenericSend+0x200>)
 800ec40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	e772      	b.n	800eb36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec52:	f000 fb47 	bl	800f2e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec56:	f000 fe95 	bl	800f984 <xTaskResumeAll>
 800ec5a:	e76c      	b.n	800eb36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ec5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec5e:	f000 fb41 	bl	800f2e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec62:	f000 fe8f 	bl	800f984 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ec66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3738      	adds	r7, #56	@ 0x38
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	e000ed04 	.word	0xe000ed04

0800ec74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b090      	sub	sp, #64	@ 0x40
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
 800ec80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ec86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10b      	bne.n	800eca4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ec8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec90:	f383 8811 	msr	BASEPRI, r3
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ec9e:	bf00      	nop
 800eca0:	bf00      	nop
 800eca2:	e7fd      	b.n	800eca0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d103      	bne.n	800ecb2 <xQueueGenericSendFromISR+0x3e>
 800ecaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d101      	bne.n	800ecb6 <xQueueGenericSendFromISR+0x42>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	e000      	b.n	800ecb8 <xQueueGenericSendFromISR+0x44>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d10b      	bne.n	800ecd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ecbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc0:	f383 8811 	msr	BASEPRI, r3
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	f3bf 8f4f 	dsb	sy
 800eccc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ecce:	bf00      	nop
 800ecd0:	bf00      	nop
 800ecd2:	e7fd      	b.n	800ecd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	2b02      	cmp	r3, #2
 800ecd8:	d103      	bne.n	800ece2 <xQueueGenericSendFromISR+0x6e>
 800ecda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d101      	bne.n	800ece6 <xQueueGenericSendFromISR+0x72>
 800ece2:	2301      	movs	r3, #1
 800ece4:	e000      	b.n	800ece8 <xQueueGenericSendFromISR+0x74>
 800ece6:	2300      	movs	r3, #0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10b      	bne.n	800ed04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ecec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	623b      	str	r3, [r7, #32]
}
 800ecfe:	bf00      	nop
 800ed00:	bf00      	nop
 800ed02:	e7fd      	b.n	800ed00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed04:	f002 fbc0 	bl	8011488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ed08:	f3ef 8211 	mrs	r2, BASEPRI
 800ed0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed10:	f383 8811 	msr	BASEPRI, r3
 800ed14:	f3bf 8f6f 	isb	sy
 800ed18:	f3bf 8f4f 	dsb	sy
 800ed1c:	61fa      	str	r2, [r7, #28]
 800ed1e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ed20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d302      	bcc.n	800ed36 <xQueueGenericSendFromISR+0xc2>
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	d12f      	bne.n	800ed96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ed3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed46:	683a      	ldr	r2, [r7, #0]
 800ed48:	68b9      	ldr	r1, [r7, #8]
 800ed4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ed4c:	f000 fa3a 	bl	800f1c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ed54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed58:	d112      	bne.n	800ed80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d016      	beq.n	800ed90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed64:	3324      	adds	r3, #36	@ 0x24
 800ed66:	4618      	mov	r0, r3
 800ed68:	f001 f83e 	bl	800fde8 <xTaskRemoveFromEventList>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00e      	beq.n	800ed90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d00b      	beq.n	800ed90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	601a      	str	r2, [r3, #0]
 800ed7e:	e007      	b.n	800ed90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ed84:	3301      	adds	r3, #1
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	b25a      	sxtb	r2, r3
 800ed8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ed90:	2301      	movs	r3, #1
 800ed92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ed94:	e001      	b.n	800ed9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed96:	2300      	movs	r3, #0
 800ed98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eda4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eda6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3740      	adds	r7, #64	@ 0x40
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b08c      	sub	sp, #48	@ 0x30
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800edbc:	2300      	movs	r3, #0
 800edbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800edc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d10b      	bne.n	800ede2 <xQueueReceive+0x32>
	__asm volatile
 800edca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edce:	f383 8811 	msr	BASEPRI, r3
 800edd2:	f3bf 8f6f 	isb	sy
 800edd6:	f3bf 8f4f 	dsb	sy
 800edda:	623b      	str	r3, [r7, #32]
}
 800eddc:	bf00      	nop
 800edde:	bf00      	nop
 800ede0:	e7fd      	b.n	800edde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d103      	bne.n	800edf0 <xQueueReceive+0x40>
 800ede8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edec:	2b00      	cmp	r3, #0
 800edee:	d101      	bne.n	800edf4 <xQueueReceive+0x44>
 800edf0:	2301      	movs	r3, #1
 800edf2:	e000      	b.n	800edf6 <xQueueReceive+0x46>
 800edf4:	2300      	movs	r3, #0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d10b      	bne.n	800ee12 <xQueueReceive+0x62>
	__asm volatile
 800edfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	61fb      	str	r3, [r7, #28]
}
 800ee0c:	bf00      	nop
 800ee0e:	bf00      	nop
 800ee10:	e7fd      	b.n	800ee0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee12:	f001 f9e7 	bl	80101e4 <xTaskGetSchedulerState>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d102      	bne.n	800ee22 <xQueueReceive+0x72>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d101      	bne.n	800ee26 <xQueueReceive+0x76>
 800ee22:	2301      	movs	r3, #1
 800ee24:	e000      	b.n	800ee28 <xQueueReceive+0x78>
 800ee26:	2300      	movs	r3, #0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d10b      	bne.n	800ee44 <xQueueReceive+0x94>
	__asm volatile
 800ee2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee30:	f383 8811 	msr	BASEPRI, r3
 800ee34:	f3bf 8f6f 	isb	sy
 800ee38:	f3bf 8f4f 	dsb	sy
 800ee3c:	61bb      	str	r3, [r7, #24]
}
 800ee3e:	bf00      	nop
 800ee40:	bf00      	nop
 800ee42:	e7fd      	b.n	800ee40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee44:	f002 fa40 	bl	80112c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d01f      	beq.n	800ee94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee54:	68b9      	ldr	r1, [r7, #8]
 800ee56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee58:	f000 fa1e 	bl	800f298 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee5e:	1e5a      	subs	r2, r3, #1
 800ee60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee66:	691b      	ldr	r3, [r3, #16]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00f      	beq.n	800ee8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee6e:	3310      	adds	r3, #16
 800ee70:	4618      	mov	r0, r3
 800ee72:	f000 ffb9 	bl	800fde8 <xTaskRemoveFromEventList>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d007      	beq.n	800ee8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ee7c:	4b3c      	ldr	r3, [pc, #240]	@ (800ef70 <xQueueReceive+0x1c0>)
 800ee7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee82:	601a      	str	r2, [r3, #0]
 800ee84:	f3bf 8f4f 	dsb	sy
 800ee88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee8c:	f002 fa4e 	bl	801132c <vPortExitCritical>
				return pdPASS;
 800ee90:	2301      	movs	r3, #1
 800ee92:	e069      	b.n	800ef68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d103      	bne.n	800eea2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee9a:	f002 fa47 	bl	801132c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e062      	b.n	800ef68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d106      	bne.n	800eeb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eea8:	f107 0310 	add.w	r3, r7, #16
 800eeac:	4618      	mov	r0, r3
 800eeae:	f001 f827 	bl	800ff00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eeb6:	f002 fa39 	bl	801132c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eeba:	f000 fd55 	bl	800f968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eebe:	f002 fa03 	bl	80112c8 <vPortEnterCritical>
 800eec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eec8:	b25b      	sxtb	r3, r3
 800eeca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eece:	d103      	bne.n	800eed8 <xQueueReceive+0x128>
 800eed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eed2:	2200      	movs	r2, #0
 800eed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eede:	b25b      	sxtb	r3, r3
 800eee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eee4:	d103      	bne.n	800eeee <xQueueReceive+0x13e>
 800eee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eee8:	2200      	movs	r2, #0
 800eeea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eeee:	f002 fa1d 	bl	801132c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eef2:	1d3a      	adds	r2, r7, #4
 800eef4:	f107 0310 	add.w	r3, r7, #16
 800eef8:	4611      	mov	r1, r2
 800eefa:	4618      	mov	r0, r3
 800eefc:	f001 f816 	bl	800ff2c <xTaskCheckForTimeOut>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d123      	bne.n	800ef4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef08:	f000 fa3e 	bl	800f388 <prvIsQueueEmpty>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d017      	beq.n	800ef42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef14:	3324      	adds	r3, #36	@ 0x24
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	4611      	mov	r1, r2
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f000 ff12 	bl	800fd44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef22:	f000 f9df 	bl	800f2e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef26:	f000 fd2d 	bl	800f984 <xTaskResumeAll>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d189      	bne.n	800ee44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ef30:	4b0f      	ldr	r3, [pc, #60]	@ (800ef70 <xQueueReceive+0x1c0>)
 800ef32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef36:	601a      	str	r2, [r3, #0]
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	f3bf 8f6f 	isb	sy
 800ef40:	e780      	b.n	800ee44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ef42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef44:	f000 f9ce 	bl	800f2e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef48:	f000 fd1c 	bl	800f984 <xTaskResumeAll>
 800ef4c:	e77a      	b.n	800ee44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ef4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef50:	f000 f9c8 	bl	800f2e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef54:	f000 fd16 	bl	800f984 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef5a:	f000 fa15 	bl	800f388 <prvIsQueueEmpty>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f43f af6f 	beq.w	800ee44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3730      	adds	r7, #48	@ 0x30
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	e000ed04 	.word	0xe000ed04

0800ef74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b08e      	sub	sp, #56	@ 0x38
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ef86:	2300      	movs	r3, #0
 800ef88:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ef8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d10b      	bne.n	800efa8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ef90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef94:	f383 8811 	msr	BASEPRI, r3
 800ef98:	f3bf 8f6f 	isb	sy
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	623b      	str	r3, [r7, #32]
}
 800efa2:	bf00      	nop
 800efa4:	bf00      	nop
 800efa6:	e7fd      	b.n	800efa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800efa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efac:	2b00      	cmp	r3, #0
 800efae:	d00b      	beq.n	800efc8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800efb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb4:	f383 8811 	msr	BASEPRI, r3
 800efb8:	f3bf 8f6f 	isb	sy
 800efbc:	f3bf 8f4f 	dsb	sy
 800efc0:	61fb      	str	r3, [r7, #28]
}
 800efc2:	bf00      	nop
 800efc4:	bf00      	nop
 800efc6:	e7fd      	b.n	800efc4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800efc8:	f001 f90c 	bl	80101e4 <xTaskGetSchedulerState>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d102      	bne.n	800efd8 <xQueueSemaphoreTake+0x64>
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <xQueueSemaphoreTake+0x68>
 800efd8:	2301      	movs	r3, #1
 800efda:	e000      	b.n	800efde <xQueueSemaphoreTake+0x6a>
 800efdc:	2300      	movs	r3, #0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d10b      	bne.n	800effa <xQueueSemaphoreTake+0x86>
	__asm volatile
 800efe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efe6:	f383 8811 	msr	BASEPRI, r3
 800efea:	f3bf 8f6f 	isb	sy
 800efee:	f3bf 8f4f 	dsb	sy
 800eff2:	61bb      	str	r3, [r7, #24]
}
 800eff4:	bf00      	nop
 800eff6:	bf00      	nop
 800eff8:	e7fd      	b.n	800eff6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800effa:	f002 f965 	bl	80112c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800effe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f002:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f006:	2b00      	cmp	r3, #0
 800f008:	d024      	beq.n	800f054 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f00c:	1e5a      	subs	r2, r3, #1
 800f00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f010:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d104      	bne.n	800f024 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f01a:	f001 fa5d 	bl	80104d8 <pvTaskIncrementMutexHeldCount>
 800f01e:	4602      	mov	r2, r0
 800f020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f022:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f026:	691b      	ldr	r3, [r3, #16]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d00f      	beq.n	800f04c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f02e:	3310      	adds	r3, #16
 800f030:	4618      	mov	r0, r3
 800f032:	f000 fed9 	bl	800fde8 <xTaskRemoveFromEventList>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d007      	beq.n	800f04c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f03c:	4b54      	ldr	r3, [pc, #336]	@ (800f190 <xQueueSemaphoreTake+0x21c>)
 800f03e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f04c:	f002 f96e 	bl	801132c <vPortExitCritical>
				return pdPASS;
 800f050:	2301      	movs	r3, #1
 800f052:	e098      	b.n	800f186 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d112      	bne.n	800f080 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00b      	beq.n	800f078 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f064:	f383 8811 	msr	BASEPRI, r3
 800f068:	f3bf 8f6f 	isb	sy
 800f06c:	f3bf 8f4f 	dsb	sy
 800f070:	617b      	str	r3, [r7, #20]
}
 800f072:	bf00      	nop
 800f074:	bf00      	nop
 800f076:	e7fd      	b.n	800f074 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f078:	f002 f958 	bl	801132c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f07c:	2300      	movs	r3, #0
 800f07e:	e082      	b.n	800f186 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f082:	2b00      	cmp	r3, #0
 800f084:	d106      	bne.n	800f094 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f086:	f107 030c 	add.w	r3, r7, #12
 800f08a:	4618      	mov	r0, r3
 800f08c:	f000 ff38 	bl	800ff00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f090:	2301      	movs	r3, #1
 800f092:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f094:	f002 f94a 	bl	801132c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f098:	f000 fc66 	bl	800f968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f09c:	f002 f914 	bl	80112c8 <vPortEnterCritical>
 800f0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f0a6:	b25b      	sxtb	r3, r3
 800f0a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f0ac:	d103      	bne.n	800f0b6 <xQueueSemaphoreTake+0x142>
 800f0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f0bc:	b25b      	sxtb	r3, r3
 800f0be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f0c2:	d103      	bne.n	800f0cc <xQueueSemaphoreTake+0x158>
 800f0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f0cc:	f002 f92e 	bl	801132c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0d0:	463a      	mov	r2, r7
 800f0d2:	f107 030c 	add.w	r3, r7, #12
 800f0d6:	4611      	mov	r1, r2
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f000 ff27 	bl	800ff2c <xTaskCheckForTimeOut>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d132      	bne.n	800f14a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f0e6:	f000 f94f 	bl	800f388 <prvIsQueueEmpty>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d026      	beq.n	800f13e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d109      	bne.n	800f10c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f0f8:	f002 f8e6 	bl	80112c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	4618      	mov	r0, r3
 800f102:	f001 f88d 	bl	8010220 <xTaskPriorityInherit>
 800f106:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f108:	f002 f910 	bl	801132c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f10e:	3324      	adds	r3, #36	@ 0x24
 800f110:	683a      	ldr	r2, [r7, #0]
 800f112:	4611      	mov	r1, r2
 800f114:	4618      	mov	r0, r3
 800f116:	f000 fe15 	bl	800fd44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f11a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f11c:	f000 f8e2 	bl	800f2e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f120:	f000 fc30 	bl	800f984 <xTaskResumeAll>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	f47f af67 	bne.w	800effa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f12c:	4b18      	ldr	r3, [pc, #96]	@ (800f190 <xQueueSemaphoreTake+0x21c>)
 800f12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f132:	601a      	str	r2, [r3, #0]
 800f134:	f3bf 8f4f 	dsb	sy
 800f138:	f3bf 8f6f 	isb	sy
 800f13c:	e75d      	b.n	800effa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f13e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f140:	f000 f8d0 	bl	800f2e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f144:	f000 fc1e 	bl	800f984 <xTaskResumeAll>
 800f148:	e757      	b.n	800effa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f14a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f14c:	f000 f8ca 	bl	800f2e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f150:	f000 fc18 	bl	800f984 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f154:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f156:	f000 f917 	bl	800f388 <prvIsQueueEmpty>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	f43f af4c 	beq.w	800effa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00d      	beq.n	800f184 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f168:	f002 f8ae 	bl	80112c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f16c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f16e:	f000 f811 	bl	800f194 <prvGetDisinheritPriorityAfterTimeout>
 800f172:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f176:	689b      	ldr	r3, [r3, #8]
 800f178:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f17a:	4618      	mov	r0, r3
 800f17c:	f001 f928 	bl	80103d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f180:	f002 f8d4 	bl	801132c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f184:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f186:	4618      	mov	r0, r3
 800f188:	3738      	adds	r7, #56	@ 0x38
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	e000ed04 	.word	0xe000ed04

0800f194 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f194:	b480      	push	{r7}
 800f196:	b085      	sub	sp, #20
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d006      	beq.n	800f1b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f1ae:	60fb      	str	r3, [r7, #12]
 800f1b0:	e001      	b.n	800f1b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
	}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3714      	adds	r7, #20
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d10d      	bne.n	800f1fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d14d      	bne.n	800f286 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f001 f87e 	bl	80102f0 <xTaskPriorityDisinherit>
 800f1f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	609a      	str	r2, [r3, #8]
 800f1fc:	e043      	b.n	800f286 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d119      	bne.n	800f238 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6858      	ldr	r0, [r3, #4]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f20c:	461a      	mov	r2, r3
 800f20e:	68b9      	ldr	r1, [r7, #8]
 800f210:	f013 f9b1 	bl	8022576 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	685a      	ldr	r2, [r3, #4]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f21c:	441a      	add	r2, r3
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	685a      	ldr	r2, [r3, #4]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d32b      	bcc.n	800f286 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	605a      	str	r2, [r3, #4]
 800f236:	e026      	b.n	800f286 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	68d8      	ldr	r0, [r3, #12]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f240:	461a      	mov	r2, r3
 800f242:	68b9      	ldr	r1, [r7, #8]
 800f244:	f013 f997 	bl	8022576 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	68da      	ldr	r2, [r3, #12]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f250:	425b      	negs	r3, r3
 800f252:	441a      	add	r2, r3
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	68da      	ldr	r2, [r3, #12]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	429a      	cmp	r2, r3
 800f262:	d207      	bcs.n	800f274 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	689a      	ldr	r2, [r3, #8]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f26c:	425b      	negs	r3, r3
 800f26e:	441a      	add	r2, r3
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2b02      	cmp	r3, #2
 800f278:	d105      	bne.n	800f286 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d002      	beq.n	800f286 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	3b01      	subs	r3, #1
 800f284:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	1c5a      	adds	r2, r3, #1
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f28e:	697b      	ldr	r3, [r7, #20]
}
 800f290:	4618      	mov	r0, r3
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d018      	beq.n	800f2dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	68da      	ldr	r2, [r3, #12]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2b2:	441a      	add	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	68da      	ldr	r2, [r3, #12]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	689b      	ldr	r3, [r3, #8]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d303      	bcc.n	800f2cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	68d9      	ldr	r1, [r3, #12]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	6838      	ldr	r0, [r7, #0]
 800f2d8:	f013 f94d 	bl	8022576 <memcpy>
	}
}
 800f2dc:	bf00      	nop
 800f2de:	3708      	adds	r7, #8
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f2ec:	f001 ffec 	bl	80112c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f2f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f2f8:	e011      	b.n	800f31e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d012      	beq.n	800f328 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	3324      	adds	r3, #36	@ 0x24
 800f306:	4618      	mov	r0, r3
 800f308:	f000 fd6e 	bl	800fde8 <xTaskRemoveFromEventList>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d001      	beq.n	800f316 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f312:	f000 fe6f 	bl	800fff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f316:	7bfb      	ldrb	r3, [r7, #15]
 800f318:	3b01      	subs	r3, #1
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f31e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f322:	2b00      	cmp	r3, #0
 800f324:	dce9      	bgt.n	800f2fa <prvUnlockQueue+0x16>
 800f326:	e000      	b.n	800f32a <prvUnlockQueue+0x46>
					break;
 800f328:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	22ff      	movs	r2, #255	@ 0xff
 800f32e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f332:	f001 fffb 	bl	801132c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f336:	f001 ffc7 	bl	80112c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f340:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f342:	e011      	b.n	800f368 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	691b      	ldr	r3, [r3, #16]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d012      	beq.n	800f372 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	3310      	adds	r3, #16
 800f350:	4618      	mov	r0, r3
 800f352:	f000 fd49 	bl	800fde8 <xTaskRemoveFromEventList>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d001      	beq.n	800f360 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f35c:	f000 fe4a 	bl	800fff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f360:	7bbb      	ldrb	r3, [r7, #14]
 800f362:	3b01      	subs	r3, #1
 800f364:	b2db      	uxtb	r3, r3
 800f366:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f368:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	dce9      	bgt.n	800f344 <prvUnlockQueue+0x60>
 800f370:	e000      	b.n	800f374 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f372:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	22ff      	movs	r2, #255	@ 0xff
 800f378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f37c:	f001 ffd6 	bl	801132c <vPortExitCritical>
}
 800f380:	bf00      	nop
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f390:	f001 ff9a 	bl	80112c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d102      	bne.n	800f3a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f39c:	2301      	movs	r3, #1
 800f39e:	60fb      	str	r3, [r7, #12]
 800f3a0:	e001      	b.n	800f3a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3a6:	f001 ffc1 	bl	801132c <vPortExitCritical>

	return xReturn;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3710      	adds	r7, #16
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b084      	sub	sp, #16
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f3bc:	f001 ff84 	bl	80112c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d102      	bne.n	800f3d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	60fb      	str	r3, [r7, #12]
 800f3d0:	e001      	b.n	800f3d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3d6:	f001 ffa9 	bl	801132c <vPortExitCritical>

	return xReturn;
 800f3da:	68fb      	ldr	r3, [r7, #12]
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b085      	sub	sp, #20
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	60fb      	str	r3, [r7, #12]
 800f3f2:	e014      	b.n	800f41e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f3f4:	4a0f      	ldr	r2, [pc, #60]	@ (800f434 <vQueueAddToRegistry+0x50>)
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d10b      	bne.n	800f418 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f400:	490c      	ldr	r1, [pc, #48]	@ (800f434 <vQueueAddToRegistry+0x50>)
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	683a      	ldr	r2, [r7, #0]
 800f406:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f40a:	4a0a      	ldr	r2, [pc, #40]	@ (800f434 <vQueueAddToRegistry+0x50>)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	00db      	lsls	r3, r3, #3
 800f410:	4413      	add	r3, r2
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f416:	e006      	b.n	800f426 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	3301      	adds	r3, #1
 800f41c:	60fb      	str	r3, [r7, #12]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2b07      	cmp	r3, #7
 800f422:	d9e7      	bls.n	800f3f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f424:	bf00      	nop
 800f426:	bf00      	nop
 800f428:	3714      	adds	r7, #20
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr
 800f432:	bf00      	nop
 800f434:	24033608 	.word	0x24033608

0800f438 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b086      	sub	sp, #24
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f448:	f001 ff3e 	bl	80112c8 <vPortEnterCritical>
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f452:	b25b      	sxtb	r3, r3
 800f454:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f458:	d103      	bne.n	800f462 <vQueueWaitForMessageRestricted+0x2a>
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	2200      	movs	r2, #0
 800f45e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f468:	b25b      	sxtb	r3, r3
 800f46a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f46e:	d103      	bne.n	800f478 <vQueueWaitForMessageRestricted+0x40>
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	2200      	movs	r2, #0
 800f474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f478:	f001 ff58 	bl	801132c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f480:	2b00      	cmp	r3, #0
 800f482:	d106      	bne.n	800f492 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	3324      	adds	r3, #36	@ 0x24
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	68b9      	ldr	r1, [r7, #8]
 800f48c:	4618      	mov	r0, r3
 800f48e:	f000 fc7f 	bl	800fd90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f492:	6978      	ldr	r0, [r7, #20]
 800f494:	f7ff ff26 	bl	800f2e4 <prvUnlockQueue>
	}
 800f498:	bf00      	nop
 800f49a:	3718      	adds	r7, #24
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b08e      	sub	sp, #56	@ 0x38
 800f4a4:	af04      	add	r7, sp, #16
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	607a      	str	r2, [r7, #4]
 800f4ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d10b      	bne.n	800f4cc <xTaskCreateStatic+0x2c>
	__asm volatile
 800f4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	623b      	str	r3, [r7, #32]
}
 800f4c6:	bf00      	nop
 800f4c8:	bf00      	nop
 800f4ca:	e7fd      	b.n	800f4c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d10b      	bne.n	800f4ea <xTaskCreateStatic+0x4a>
	__asm volatile
 800f4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	61fb      	str	r3, [r7, #28]
}
 800f4e4:	bf00      	nop
 800f4e6:	bf00      	nop
 800f4e8:	e7fd      	b.n	800f4e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f4ea:	23a8      	movs	r3, #168	@ 0xa8
 800f4ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	2ba8      	cmp	r3, #168	@ 0xa8
 800f4f2:	d00b      	beq.n	800f50c <xTaskCreateStatic+0x6c>
	__asm volatile
 800f4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	61bb      	str	r3, [r7, #24]
}
 800f506:	bf00      	nop
 800f508:	bf00      	nop
 800f50a:	e7fd      	b.n	800f508 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f50c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f510:	2b00      	cmp	r3, #0
 800f512:	d01e      	beq.n	800f552 <xTaskCreateStatic+0xb2>
 800f514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f516:	2b00      	cmp	r3, #0
 800f518:	d01b      	beq.n	800f552 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f51c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f520:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f522:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f526:	2202      	movs	r2, #2
 800f528:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f52c:	2300      	movs	r3, #0
 800f52e:	9303      	str	r3, [sp, #12]
 800f530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f532:	9302      	str	r3, [sp, #8]
 800f534:	f107 0314 	add.w	r3, r7, #20
 800f538:	9301      	str	r3, [sp, #4]
 800f53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	68b9      	ldr	r1, [r7, #8]
 800f544:	68f8      	ldr	r0, [r7, #12]
 800f546:	f000 f851 	bl	800f5ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f54a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f54c:	f000 f8f6 	bl	800f73c <prvAddNewTaskToReadyList>
 800f550:	e001      	b.n	800f556 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f552:	2300      	movs	r3, #0
 800f554:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f556:	697b      	ldr	r3, [r7, #20]
	}
 800f558:	4618      	mov	r0, r3
 800f55a:	3728      	adds	r7, #40	@ 0x28
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f560:	b580      	push	{r7, lr}
 800f562:	b08c      	sub	sp, #48	@ 0x30
 800f564:	af04      	add	r7, sp, #16
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	603b      	str	r3, [r7, #0]
 800f56c:	4613      	mov	r3, r2
 800f56e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f570:	88fb      	ldrh	r3, [r7, #6]
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	4618      	mov	r0, r3
 800f576:	f001 ffc9 	bl	801150c <pvPortMalloc>
 800f57a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d00e      	beq.n	800f5a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f582:	20a8      	movs	r0, #168	@ 0xa8
 800f584:	f001 ffc2 	bl	801150c <pvPortMalloc>
 800f588:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d003      	beq.n	800f598 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	631a      	str	r2, [r3, #48]	@ 0x30
 800f596:	e005      	b.n	800f5a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f598:	6978      	ldr	r0, [r7, #20]
 800f59a:	f002 f885 	bl	80116a8 <vPortFree>
 800f59e:	e001      	b.n	800f5a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d017      	beq.n	800f5da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f5b2:	88fa      	ldrh	r2, [r7, #6]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	9303      	str	r3, [sp, #12]
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	9302      	str	r3, [sp, #8]
 800f5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5be:	9301      	str	r3, [sp, #4]
 800f5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	68b9      	ldr	r1, [r7, #8]
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f000 f80f 	bl	800f5ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5ce:	69f8      	ldr	r0, [r7, #28]
 800f5d0:	f000 f8b4 	bl	800f73c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	61bb      	str	r3, [r7, #24]
 800f5d8:	e002      	b.n	800f5e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f5da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f5de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f5e0:	69bb      	ldr	r3, [r7, #24]
	}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3720      	adds	r7, #32
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
	...

0800f5ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b088      	sub	sp, #32
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	60f8      	str	r0, [r7, #12]
 800f5f4:	60b9      	str	r1, [r7, #8]
 800f5f6:	607a      	str	r2, [r7, #4]
 800f5f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	461a      	mov	r2, r3
 800f604:	21a5      	movs	r1, #165	@ 0xa5
 800f606:	f012 fe97 	bl	8022338 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f60c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f60e:	6879      	ldr	r1, [r7, #4]
 800f610:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f614:	440b      	add	r3, r1
 800f616:	009b      	lsls	r3, r3, #2
 800f618:	4413      	add	r3, r2
 800f61a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	f023 0307 	bic.w	r3, r3, #7
 800f622:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f624:	69bb      	ldr	r3, [r7, #24]
 800f626:	f003 0307 	and.w	r3, r3, #7
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00b      	beq.n	800f646 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f632:	f383 8811 	msr	BASEPRI, r3
 800f636:	f3bf 8f6f 	isb	sy
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	617b      	str	r3, [r7, #20]
}
 800f640:	bf00      	nop
 800f642:	bf00      	nop
 800f644:	e7fd      	b.n	800f642 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d01f      	beq.n	800f68c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f64c:	2300      	movs	r3, #0
 800f64e:	61fb      	str	r3, [r7, #28]
 800f650:	e012      	b.n	800f678 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	4413      	add	r3, r2
 800f658:	7819      	ldrb	r1, [r3, #0]
 800f65a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	4413      	add	r3, r2
 800f660:	3334      	adds	r3, #52	@ 0x34
 800f662:	460a      	mov	r2, r1
 800f664:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	4413      	add	r3, r2
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d006      	beq.n	800f680 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	3301      	adds	r3, #1
 800f676:	61fb      	str	r3, [r7, #28]
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	2b0f      	cmp	r3, #15
 800f67c:	d9e9      	bls.n	800f652 <prvInitialiseNewTask+0x66>
 800f67e:	e000      	b.n	800f682 <prvInitialiseNewTask+0x96>
			{
				break;
 800f680:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f684:	2200      	movs	r2, #0
 800f686:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f68a:	e003      	b.n	800f694 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f68e:	2200      	movs	r2, #0
 800f690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f696:	2b37      	cmp	r3, #55	@ 0x37
 800f698:	d901      	bls.n	800f69e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f69a:	2337      	movs	r3, #55	@ 0x37
 800f69c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b2:	3304      	adds	r3, #4
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fe ff49 	bl	800e54c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6bc:	3318      	adds	r3, #24
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fe ff44 	bl	800e54c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ec:	3354      	adds	r3, #84	@ 0x54
 800f6ee:	224c      	movs	r2, #76	@ 0x4c
 800f6f0:	2100      	movs	r1, #0
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f012 fe20 	bl	8022338 <memset>
 800f6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6fa:	4a0d      	ldr	r2, [pc, #52]	@ (800f730 <prvInitialiseNewTask+0x144>)
 800f6fc:	659a      	str	r2, [r3, #88]	@ 0x58
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f700:	4a0c      	ldr	r2, [pc, #48]	@ (800f734 <prvInitialiseNewTask+0x148>)
 800f702:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f706:	4a0c      	ldr	r2, [pc, #48]	@ (800f738 <prvInitialiseNewTask+0x14c>)
 800f708:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f70a:	683a      	ldr	r2, [r7, #0]
 800f70c:	68f9      	ldr	r1, [r7, #12]
 800f70e:	69b8      	ldr	r0, [r7, #24]
 800f710:	f001 fcac 	bl	801106c <pxPortInitialiseStack>
 800f714:	4602      	mov	r2, r0
 800f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f718:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d002      	beq.n	800f726 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f726:	bf00      	nop
 800f728:	3720      	adds	r7, #32
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	2406970c 	.word	0x2406970c
 800f734:	24069774 	.word	0x24069774
 800f738:	240697dc 	.word	0x240697dc

0800f73c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f744:	f001 fdc0 	bl	80112c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f748:	4b2d      	ldr	r3, [pc, #180]	@ (800f800 <prvAddNewTaskToReadyList+0xc4>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	3301      	adds	r3, #1
 800f74e:	4a2c      	ldr	r2, [pc, #176]	@ (800f800 <prvAddNewTaskToReadyList+0xc4>)
 800f750:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f752:	4b2c      	ldr	r3, [pc, #176]	@ (800f804 <prvAddNewTaskToReadyList+0xc8>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d109      	bne.n	800f76e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f75a:	4a2a      	ldr	r2, [pc, #168]	@ (800f804 <prvAddNewTaskToReadyList+0xc8>)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f760:	4b27      	ldr	r3, [pc, #156]	@ (800f800 <prvAddNewTaskToReadyList+0xc4>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2b01      	cmp	r3, #1
 800f766:	d110      	bne.n	800f78a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f768:	f000 fc68 	bl	801003c <prvInitialiseTaskLists>
 800f76c:	e00d      	b.n	800f78a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f76e:	4b26      	ldr	r3, [pc, #152]	@ (800f808 <prvAddNewTaskToReadyList+0xcc>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d109      	bne.n	800f78a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f776:	4b23      	ldr	r3, [pc, #140]	@ (800f804 <prvAddNewTaskToReadyList+0xc8>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f780:	429a      	cmp	r2, r3
 800f782:	d802      	bhi.n	800f78a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f784:	4a1f      	ldr	r2, [pc, #124]	@ (800f804 <prvAddNewTaskToReadyList+0xc8>)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f78a:	4b20      	ldr	r3, [pc, #128]	@ (800f80c <prvAddNewTaskToReadyList+0xd0>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	3301      	adds	r3, #1
 800f790:	4a1e      	ldr	r2, [pc, #120]	@ (800f80c <prvAddNewTaskToReadyList+0xd0>)
 800f792:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f794:	4b1d      	ldr	r3, [pc, #116]	@ (800f80c <prvAddNewTaskToReadyList+0xd0>)
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7a0:	4b1b      	ldr	r3, [pc, #108]	@ (800f810 <prvAddNewTaskToReadyList+0xd4>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d903      	bls.n	800f7b0 <prvAddNewTaskToReadyList+0x74>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7ac:	4a18      	ldr	r2, [pc, #96]	@ (800f810 <prvAddNewTaskToReadyList+0xd4>)
 800f7ae:	6013      	str	r3, [r2, #0]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7b4:	4613      	mov	r3, r2
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	4413      	add	r3, r2
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	4a15      	ldr	r2, [pc, #84]	@ (800f814 <prvAddNewTaskToReadyList+0xd8>)
 800f7be:	441a      	add	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	3304      	adds	r3, #4
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4610      	mov	r0, r2
 800f7c8:	f7fe fecd 	bl	800e566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f7cc:	f001 fdae 	bl	801132c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f7d0:	4b0d      	ldr	r3, [pc, #52]	@ (800f808 <prvAddNewTaskToReadyList+0xcc>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d00e      	beq.n	800f7f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f7d8:	4b0a      	ldr	r3, [pc, #40]	@ (800f804 <prvAddNewTaskToReadyList+0xc8>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d207      	bcs.n	800f7f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800f818 <prvAddNewTaskToReadyList+0xdc>)
 800f7e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7ec:	601a      	str	r2, [r3, #0]
 800f7ee:	f3bf 8f4f 	dsb	sy
 800f7f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7f6:	bf00      	nop
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	24033b1c 	.word	0x24033b1c
 800f804:	24033648 	.word	0x24033648
 800f808:	24033b28 	.word	0x24033b28
 800f80c:	24033b38 	.word	0x24033b38
 800f810:	24033b24 	.word	0x24033b24
 800f814:	2403364c 	.word	0x2403364c
 800f818:	e000ed04 	.word	0xe000ed04

0800f81c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f824:	2300      	movs	r3, #0
 800f826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d018      	beq.n	800f860 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f82e:	4b14      	ldr	r3, [pc, #80]	@ (800f880 <vTaskDelay+0x64>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d00b      	beq.n	800f84e <vTaskDelay+0x32>
	__asm volatile
 800f836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f83a:	f383 8811 	msr	BASEPRI, r3
 800f83e:	f3bf 8f6f 	isb	sy
 800f842:	f3bf 8f4f 	dsb	sy
 800f846:	60bb      	str	r3, [r7, #8]
}
 800f848:	bf00      	nop
 800f84a:	bf00      	nop
 800f84c:	e7fd      	b.n	800f84a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f84e:	f000 f88b 	bl	800f968 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f852:	2100      	movs	r1, #0
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f001 f85b 	bl	8010910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f85a:	f000 f893 	bl	800f984 <xTaskResumeAll>
 800f85e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d107      	bne.n	800f876 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f866:	4b07      	ldr	r3, [pc, #28]	@ (800f884 <vTaskDelay+0x68>)
 800f868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f86c:	601a      	str	r2, [r3, #0]
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f876:	bf00      	nop
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	24033b44 	.word	0x24033b44
 800f884:	e000ed04 	.word	0xe000ed04

0800f888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b08a      	sub	sp, #40	@ 0x28
 800f88c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f88e:	2300      	movs	r3, #0
 800f890:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f892:	2300      	movs	r3, #0
 800f894:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f896:	463a      	mov	r2, r7
 800f898:	1d39      	adds	r1, r7, #4
 800f89a:	f107 0308 	add.w	r3, r7, #8
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fe fe00 	bl	800e4a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f8a4:	6839      	ldr	r1, [r7, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	9202      	str	r2, [sp, #8]
 800f8ac:	9301      	str	r3, [sp, #4]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	9300      	str	r3, [sp, #0]
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	460a      	mov	r2, r1
 800f8b6:	4924      	ldr	r1, [pc, #144]	@ (800f948 <vTaskStartScheduler+0xc0>)
 800f8b8:	4824      	ldr	r0, [pc, #144]	@ (800f94c <vTaskStartScheduler+0xc4>)
 800f8ba:	f7ff fdf1 	bl	800f4a0 <xTaskCreateStatic>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	4a23      	ldr	r2, [pc, #140]	@ (800f950 <vTaskStartScheduler+0xc8>)
 800f8c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f8c4:	4b22      	ldr	r3, [pc, #136]	@ (800f950 <vTaskStartScheduler+0xc8>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d002      	beq.n	800f8d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	617b      	str	r3, [r7, #20]
 800f8d0:	e001      	b.n	800f8d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d102      	bne.n	800f8e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f8dc:	f001 f86c 	bl	80109b8 <xTimerCreateTimerTask>
 800f8e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d11b      	bne.n	800f920 <vTaskStartScheduler+0x98>
	__asm volatile
 800f8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ec:	f383 8811 	msr	BASEPRI, r3
 800f8f0:	f3bf 8f6f 	isb	sy
 800f8f4:	f3bf 8f4f 	dsb	sy
 800f8f8:	613b      	str	r3, [r7, #16]
}
 800f8fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f8fc:	4b15      	ldr	r3, [pc, #84]	@ (800f954 <vTaskStartScheduler+0xcc>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	3354      	adds	r3, #84	@ 0x54
 800f902:	4a15      	ldr	r2, [pc, #84]	@ (800f958 <vTaskStartScheduler+0xd0>)
 800f904:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f906:	4b15      	ldr	r3, [pc, #84]	@ (800f95c <vTaskStartScheduler+0xd4>)
 800f908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f90c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f90e:	4b14      	ldr	r3, [pc, #80]	@ (800f960 <vTaskStartScheduler+0xd8>)
 800f910:	2201      	movs	r2, #1
 800f912:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f914:	4b13      	ldr	r3, [pc, #76]	@ (800f964 <vTaskStartScheduler+0xdc>)
 800f916:	2200      	movs	r2, #0
 800f918:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f91a:	f001 fc31 	bl	8011180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f91e:	e00f      	b.n	800f940 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f926:	d10b      	bne.n	800f940 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f92c:	f383 8811 	msr	BASEPRI, r3
 800f930:	f3bf 8f6f 	isb	sy
 800f934:	f3bf 8f4f 	dsb	sy
 800f938:	60fb      	str	r3, [r7, #12]
}
 800f93a:	bf00      	nop
 800f93c:	bf00      	nop
 800f93e:	e7fd      	b.n	800f93c <vTaskStartScheduler+0xb4>
}
 800f940:	bf00      	nop
 800f942:	3718      	adds	r7, #24
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	08023484 	.word	0x08023484
 800f94c:	0801000d 	.word	0x0801000d
 800f950:	24033b40 	.word	0x24033b40
 800f954:	24033648 	.word	0x24033648
 800f958:	24001424 	.word	0x24001424
 800f95c:	24033b3c 	.word	0x24033b3c
 800f960:	24033b28 	.word	0x24033b28
 800f964:	24033b20 	.word	0x24033b20

0800f968 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f968:	b480      	push	{r7}
 800f96a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f96c:	4b04      	ldr	r3, [pc, #16]	@ (800f980 <vTaskSuspendAll+0x18>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	3301      	adds	r3, #1
 800f972:	4a03      	ldr	r2, [pc, #12]	@ (800f980 <vTaskSuspendAll+0x18>)
 800f974:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f976:	bf00      	nop
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr
 800f980:	24033b44 	.word	0x24033b44

0800f984 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f98a:	2300      	movs	r3, #0
 800f98c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f98e:	2300      	movs	r3, #0
 800f990:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f992:	4b42      	ldr	r3, [pc, #264]	@ (800fa9c <xTaskResumeAll+0x118>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d10b      	bne.n	800f9b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800f99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99e:	f383 8811 	msr	BASEPRI, r3
 800f9a2:	f3bf 8f6f 	isb	sy
 800f9a6:	f3bf 8f4f 	dsb	sy
 800f9aa:	603b      	str	r3, [r7, #0]
}
 800f9ac:	bf00      	nop
 800f9ae:	bf00      	nop
 800f9b0:	e7fd      	b.n	800f9ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f9b2:	f001 fc89 	bl	80112c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f9b6:	4b39      	ldr	r3, [pc, #228]	@ (800fa9c <xTaskResumeAll+0x118>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	4a37      	ldr	r2, [pc, #220]	@ (800fa9c <xTaskResumeAll+0x118>)
 800f9be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9c0:	4b36      	ldr	r3, [pc, #216]	@ (800fa9c <xTaskResumeAll+0x118>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d162      	bne.n	800fa8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f9c8:	4b35      	ldr	r3, [pc, #212]	@ (800faa0 <xTaskResumeAll+0x11c>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d05e      	beq.n	800fa8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9d0:	e02f      	b.n	800fa32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9d2:	4b34      	ldr	r3, [pc, #208]	@ (800faa4 <xTaskResumeAll+0x120>)
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	3318      	adds	r3, #24
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fe fe1e 	bl	800e620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	3304      	adds	r3, #4
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7fe fe19 	bl	800e620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9f2:	4b2d      	ldr	r3, [pc, #180]	@ (800faa8 <xTaskResumeAll+0x124>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d903      	bls.n	800fa02 <xTaskResumeAll+0x7e>
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9fe:	4a2a      	ldr	r2, [pc, #168]	@ (800faa8 <xTaskResumeAll+0x124>)
 800fa00:	6013      	str	r3, [r2, #0]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa06:	4613      	mov	r3, r2
 800fa08:	009b      	lsls	r3, r3, #2
 800fa0a:	4413      	add	r3, r2
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	4a27      	ldr	r2, [pc, #156]	@ (800faac <xTaskResumeAll+0x128>)
 800fa10:	441a      	add	r2, r3
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	3304      	adds	r3, #4
 800fa16:	4619      	mov	r1, r3
 800fa18:	4610      	mov	r0, r2
 800fa1a:	f7fe fda4 	bl	800e566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa22:	4b23      	ldr	r3, [pc, #140]	@ (800fab0 <xTaskResumeAll+0x12c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d302      	bcc.n	800fa32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fa2c:	4b21      	ldr	r3, [pc, #132]	@ (800fab4 <xTaskResumeAll+0x130>)
 800fa2e:	2201      	movs	r2, #1
 800fa30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa32:	4b1c      	ldr	r3, [pc, #112]	@ (800faa4 <xTaskResumeAll+0x120>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1cb      	bne.n	800f9d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d001      	beq.n	800fa44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fa40:	f000 fba0 	bl	8010184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fa44:	4b1c      	ldr	r3, [pc, #112]	@ (800fab8 <xTaskResumeAll+0x134>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d010      	beq.n	800fa72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fa50:	f000 f858 	bl	800fb04 <xTaskIncrementTick>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d002      	beq.n	800fa60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fa5a:	4b16      	ldr	r3, [pc, #88]	@ (800fab4 <xTaskResumeAll+0x130>)
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	3b01      	subs	r3, #1
 800fa64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1f1      	bne.n	800fa50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fa6c:	4b12      	ldr	r3, [pc, #72]	@ (800fab8 <xTaskResumeAll+0x134>)
 800fa6e:	2200      	movs	r2, #0
 800fa70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fa72:	4b10      	ldr	r3, [pc, #64]	@ (800fab4 <xTaskResumeAll+0x130>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d009      	beq.n	800fa8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fa7e:	4b0f      	ldr	r3, [pc, #60]	@ (800fabc <xTaskResumeAll+0x138>)
 800fa80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa84:	601a      	str	r2, [r3, #0]
 800fa86:	f3bf 8f4f 	dsb	sy
 800fa8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa8e:	f001 fc4d 	bl	801132c <vPortExitCritical>

	return xAlreadyYielded;
 800fa92:	68bb      	ldr	r3, [r7, #8]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	24033b44 	.word	0x24033b44
 800faa0:	24033b1c 	.word	0x24033b1c
 800faa4:	24033adc 	.word	0x24033adc
 800faa8:	24033b24 	.word	0x24033b24
 800faac:	2403364c 	.word	0x2403364c
 800fab0:	24033648 	.word	0x24033648
 800fab4:	24033b30 	.word	0x24033b30
 800fab8:	24033b2c 	.word	0x24033b2c
 800fabc:	e000ed04 	.word	0xe000ed04

0800fac0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fac6:	4b05      	ldr	r3, [pc, #20]	@ (800fadc <xTaskGetTickCount+0x1c>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800facc:	687b      	ldr	r3, [r7, #4]
}
 800face:	4618      	mov	r0, r3
 800fad0:	370c      	adds	r7, #12
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	24033b20 	.word	0x24033b20

0800fae0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fae6:	f001 fccf 	bl	8011488 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800faea:	2300      	movs	r3, #0
 800faec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800faee:	4b04      	ldr	r3, [pc, #16]	@ (800fb00 <xTaskGetTickCountFromISR+0x20>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800faf4:	683b      	ldr	r3, [r7, #0]
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3708      	adds	r7, #8
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	24033b20 	.word	0x24033b20

0800fb04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b086      	sub	sp, #24
 800fb08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb0e:	4b4f      	ldr	r3, [pc, #316]	@ (800fc4c <xTaskIncrementTick+0x148>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f040 8090 	bne.w	800fc38 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb18:	4b4d      	ldr	r3, [pc, #308]	@ (800fc50 <xTaskIncrementTick+0x14c>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb20:	4a4b      	ldr	r2, [pc, #300]	@ (800fc50 <xTaskIncrementTick+0x14c>)
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d121      	bne.n	800fb70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb2c:	4b49      	ldr	r3, [pc, #292]	@ (800fc54 <xTaskIncrementTick+0x150>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00b      	beq.n	800fb4e <xTaskIncrementTick+0x4a>
	__asm volatile
 800fb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb3a:	f383 8811 	msr	BASEPRI, r3
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	f3bf 8f4f 	dsb	sy
 800fb46:	603b      	str	r3, [r7, #0]
}
 800fb48:	bf00      	nop
 800fb4a:	bf00      	nop
 800fb4c:	e7fd      	b.n	800fb4a <xTaskIncrementTick+0x46>
 800fb4e:	4b41      	ldr	r3, [pc, #260]	@ (800fc54 <xTaskIncrementTick+0x150>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	60fb      	str	r3, [r7, #12]
 800fb54:	4b40      	ldr	r3, [pc, #256]	@ (800fc58 <xTaskIncrementTick+0x154>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a3e      	ldr	r2, [pc, #248]	@ (800fc54 <xTaskIncrementTick+0x150>)
 800fb5a:	6013      	str	r3, [r2, #0]
 800fb5c:	4a3e      	ldr	r2, [pc, #248]	@ (800fc58 <xTaskIncrementTick+0x154>)
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	6013      	str	r3, [r2, #0]
 800fb62:	4b3e      	ldr	r3, [pc, #248]	@ (800fc5c <xTaskIncrementTick+0x158>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	3301      	adds	r3, #1
 800fb68:	4a3c      	ldr	r2, [pc, #240]	@ (800fc5c <xTaskIncrementTick+0x158>)
 800fb6a:	6013      	str	r3, [r2, #0]
 800fb6c:	f000 fb0a 	bl	8010184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fb70:	4b3b      	ldr	r3, [pc, #236]	@ (800fc60 <xTaskIncrementTick+0x15c>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	693a      	ldr	r2, [r7, #16]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d349      	bcc.n	800fc0e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb7a:	4b36      	ldr	r3, [pc, #216]	@ (800fc54 <xTaskIncrementTick+0x150>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d104      	bne.n	800fb8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb84:	4b36      	ldr	r3, [pc, #216]	@ (800fc60 <xTaskIncrementTick+0x15c>)
 800fb86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb8a:	601a      	str	r2, [r3, #0]
					break;
 800fb8c:	e03f      	b.n	800fc0e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb8e:	4b31      	ldr	r3, [pc, #196]	@ (800fc54 <xTaskIncrementTick+0x150>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fb9e:	693a      	ldr	r2, [r7, #16]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d203      	bcs.n	800fbae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fba6:	4a2e      	ldr	r2, [pc, #184]	@ (800fc60 <xTaskIncrementTick+0x15c>)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fbac:	e02f      	b.n	800fc0e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	3304      	adds	r3, #4
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe fd34 	bl	800e620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d004      	beq.n	800fbca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	3318      	adds	r3, #24
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fe fd2b 	bl	800e620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbce:	4b25      	ldr	r3, [pc, #148]	@ (800fc64 <xTaskIncrementTick+0x160>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d903      	bls.n	800fbde <xTaskIncrementTick+0xda>
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbda:	4a22      	ldr	r2, [pc, #136]	@ (800fc64 <xTaskIncrementTick+0x160>)
 800fbdc:	6013      	str	r3, [r2, #0]
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	4413      	add	r3, r2
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	4a1f      	ldr	r2, [pc, #124]	@ (800fc68 <xTaskIncrementTick+0x164>)
 800fbec:	441a      	add	r2, r3
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	3304      	adds	r3, #4
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	f7fe fcb6 	bl	800e566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbfe:	4b1b      	ldr	r3, [pc, #108]	@ (800fc6c <xTaskIncrementTick+0x168>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d3b8      	bcc.n	800fb7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc0c:	e7b5      	b.n	800fb7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc0e:	4b17      	ldr	r3, [pc, #92]	@ (800fc6c <xTaskIncrementTick+0x168>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc14:	4914      	ldr	r1, [pc, #80]	@ (800fc68 <xTaskIncrementTick+0x164>)
 800fc16:	4613      	mov	r3, r2
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	4413      	add	r3, r2
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	440b      	add	r3, r1
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d901      	bls.n	800fc2a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fc26:	2301      	movs	r3, #1
 800fc28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fc2a:	4b11      	ldr	r3, [pc, #68]	@ (800fc70 <xTaskIncrementTick+0x16c>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d007      	beq.n	800fc42 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800fc32:	2301      	movs	r3, #1
 800fc34:	617b      	str	r3, [r7, #20]
 800fc36:	e004      	b.n	800fc42 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fc38:	4b0e      	ldr	r3, [pc, #56]	@ (800fc74 <xTaskIncrementTick+0x170>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	4a0d      	ldr	r2, [pc, #52]	@ (800fc74 <xTaskIncrementTick+0x170>)
 800fc40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fc42:	697b      	ldr	r3, [r7, #20]
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3718      	adds	r7, #24
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	24033b44 	.word	0x24033b44
 800fc50:	24033b20 	.word	0x24033b20
 800fc54:	24033ad4 	.word	0x24033ad4
 800fc58:	24033ad8 	.word	0x24033ad8
 800fc5c:	24033b34 	.word	0x24033b34
 800fc60:	24033b3c 	.word	0x24033b3c
 800fc64:	24033b24 	.word	0x24033b24
 800fc68:	2403364c 	.word	0x2403364c
 800fc6c:	24033648 	.word	0x24033648
 800fc70:	24033b30 	.word	0x24033b30
 800fc74:	24033b2c 	.word	0x24033b2c

0800fc78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b085      	sub	sp, #20
 800fc7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fc7e:	4b2b      	ldr	r3, [pc, #172]	@ (800fd2c <vTaskSwitchContext+0xb4>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d003      	beq.n	800fc8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fc86:	4b2a      	ldr	r3, [pc, #168]	@ (800fd30 <vTaskSwitchContext+0xb8>)
 800fc88:	2201      	movs	r2, #1
 800fc8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fc8c:	e047      	b.n	800fd1e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800fc8e:	4b28      	ldr	r3, [pc, #160]	@ (800fd30 <vTaskSwitchContext+0xb8>)
 800fc90:	2200      	movs	r2, #0
 800fc92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc94:	4b27      	ldr	r3, [pc, #156]	@ (800fd34 <vTaskSwitchContext+0xbc>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	60fb      	str	r3, [r7, #12]
 800fc9a:	e011      	b.n	800fcc0 <vTaskSwitchContext+0x48>
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d10b      	bne.n	800fcba <vTaskSwitchContext+0x42>
	__asm volatile
 800fca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca6:	f383 8811 	msr	BASEPRI, r3
 800fcaa:	f3bf 8f6f 	isb	sy
 800fcae:	f3bf 8f4f 	dsb	sy
 800fcb2:	607b      	str	r3, [r7, #4]
}
 800fcb4:	bf00      	nop
 800fcb6:	bf00      	nop
 800fcb8:	e7fd      	b.n	800fcb6 <vTaskSwitchContext+0x3e>
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	3b01      	subs	r3, #1
 800fcbe:	60fb      	str	r3, [r7, #12]
 800fcc0:	491d      	ldr	r1, [pc, #116]	@ (800fd38 <vTaskSwitchContext+0xc0>)
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	4413      	add	r3, r2
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	440b      	add	r3, r1
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d0e3      	beq.n	800fc9c <vTaskSwitchContext+0x24>
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	4613      	mov	r3, r2
 800fcd8:	009b      	lsls	r3, r3, #2
 800fcda:	4413      	add	r3, r2
 800fcdc:	009b      	lsls	r3, r3, #2
 800fcde:	4a16      	ldr	r2, [pc, #88]	@ (800fd38 <vTaskSwitchContext+0xc0>)
 800fce0:	4413      	add	r3, r2
 800fce2:	60bb      	str	r3, [r7, #8]
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	685a      	ldr	r2, [r3, #4]
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	605a      	str	r2, [r3, #4]
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	685a      	ldr	r2, [r3, #4]
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	3308      	adds	r3, #8
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d104      	bne.n	800fd04 <vTaskSwitchContext+0x8c>
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	685a      	ldr	r2, [r3, #4]
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	605a      	str	r2, [r3, #4]
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	68db      	ldr	r3, [r3, #12]
 800fd0a:	4a0c      	ldr	r2, [pc, #48]	@ (800fd3c <vTaskSwitchContext+0xc4>)
 800fd0c:	6013      	str	r3, [r2, #0]
 800fd0e:	4a09      	ldr	r2, [pc, #36]	@ (800fd34 <vTaskSwitchContext+0xbc>)
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fd14:	4b09      	ldr	r3, [pc, #36]	@ (800fd3c <vTaskSwitchContext+0xc4>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	3354      	adds	r3, #84	@ 0x54
 800fd1a:	4a09      	ldr	r2, [pc, #36]	@ (800fd40 <vTaskSwitchContext+0xc8>)
 800fd1c:	6013      	str	r3, [r2, #0]
}
 800fd1e:	bf00      	nop
 800fd20:	3714      	adds	r7, #20
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr
 800fd2a:	bf00      	nop
 800fd2c:	24033b44 	.word	0x24033b44
 800fd30:	24033b30 	.word	0x24033b30
 800fd34:	24033b24 	.word	0x24033b24
 800fd38:	2403364c 	.word	0x2403364c
 800fd3c:	24033648 	.word	0x24033648
 800fd40:	24001424 	.word	0x24001424

0800fd44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d10b      	bne.n	800fd6c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800fd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd58:	f383 8811 	msr	BASEPRI, r3
 800fd5c:	f3bf 8f6f 	isb	sy
 800fd60:	f3bf 8f4f 	dsb	sy
 800fd64:	60fb      	str	r3, [r7, #12]
}
 800fd66:	bf00      	nop
 800fd68:	bf00      	nop
 800fd6a:	e7fd      	b.n	800fd68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd6c:	4b07      	ldr	r3, [pc, #28]	@ (800fd8c <vTaskPlaceOnEventList+0x48>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	3318      	adds	r3, #24
 800fd72:	4619      	mov	r1, r3
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7fe fc1a 	bl	800e5ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd7a:	2101      	movs	r1, #1
 800fd7c:	6838      	ldr	r0, [r7, #0]
 800fd7e:	f000 fdc7 	bl	8010910 <prvAddCurrentTaskToDelayedList>
}
 800fd82:	bf00      	nop
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	24033648 	.word	0x24033648

0800fd90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d10b      	bne.n	800fdba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800fda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	617b      	str	r3, [r7, #20]
}
 800fdb4:	bf00      	nop
 800fdb6:	bf00      	nop
 800fdb8:	e7fd      	b.n	800fdb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fdba:	4b0a      	ldr	r3, [pc, #40]	@ (800fde4 <vTaskPlaceOnEventListRestricted+0x54>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	3318      	adds	r3, #24
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f7fe fbcf 	bl	800e566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d002      	beq.n	800fdd4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800fdce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fdd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fdd4:	6879      	ldr	r1, [r7, #4]
 800fdd6:	68b8      	ldr	r0, [r7, #8]
 800fdd8:	f000 fd9a 	bl	8010910 <prvAddCurrentTaskToDelayedList>
	}
 800fddc:	bf00      	nop
 800fdde:	3718      	adds	r7, #24
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	24033648 	.word	0x24033648

0800fde8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	68db      	ldr	r3, [r3, #12]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10b      	bne.n	800fe16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800fdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe02:	f383 8811 	msr	BASEPRI, r3
 800fe06:	f3bf 8f6f 	isb	sy
 800fe0a:	f3bf 8f4f 	dsb	sy
 800fe0e:	60fb      	str	r3, [r7, #12]
}
 800fe10:	bf00      	nop
 800fe12:	bf00      	nop
 800fe14:	e7fd      	b.n	800fe12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	3318      	adds	r3, #24
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7fe fc00 	bl	800e620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe20:	4b1d      	ldr	r3, [pc, #116]	@ (800fe98 <xTaskRemoveFromEventList+0xb0>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d11d      	bne.n	800fe64 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	3304      	adds	r3, #4
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fe fbf7 	bl	800e620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe36:	4b19      	ldr	r3, [pc, #100]	@ (800fe9c <xTaskRemoveFromEventList+0xb4>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d903      	bls.n	800fe46 <xTaskRemoveFromEventList+0x5e>
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe42:	4a16      	ldr	r2, [pc, #88]	@ (800fe9c <xTaskRemoveFromEventList+0xb4>)
 800fe44:	6013      	str	r3, [r2, #0]
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	4413      	add	r3, r2
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	4a13      	ldr	r2, [pc, #76]	@ (800fea0 <xTaskRemoveFromEventList+0xb8>)
 800fe54:	441a      	add	r2, r3
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	3304      	adds	r3, #4
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	f7fe fb82 	bl	800e566 <vListInsertEnd>
 800fe62:	e005      	b.n	800fe70 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	3318      	adds	r3, #24
 800fe68:	4619      	mov	r1, r3
 800fe6a:	480e      	ldr	r0, [pc, #56]	@ (800fea4 <xTaskRemoveFromEventList+0xbc>)
 800fe6c:	f7fe fb7b 	bl	800e566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe74:	4b0c      	ldr	r3, [pc, #48]	@ (800fea8 <xTaskRemoveFromEventList+0xc0>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d905      	bls.n	800fe8a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fe82:	4b0a      	ldr	r3, [pc, #40]	@ (800feac <xTaskRemoveFromEventList+0xc4>)
 800fe84:	2201      	movs	r2, #1
 800fe86:	601a      	str	r2, [r3, #0]
 800fe88:	e001      	b.n	800fe8e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fe8e:	697b      	ldr	r3, [r7, #20]
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3718      	adds	r7, #24
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	24033b44 	.word	0x24033b44
 800fe9c:	24033b24 	.word	0x24033b24
 800fea0:	2403364c 	.word	0x2403364c
 800fea4:	24033adc 	.word	0x24033adc
 800fea8:	24033648 	.word	0x24033648
 800feac:	24033b30 	.word	0x24033b30

0800feb0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d10b      	bne.n	800fed6 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800febe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fec2:	f383 8811 	msr	BASEPRI, r3
 800fec6:	f3bf 8f6f 	isb	sy
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	60fb      	str	r3, [r7, #12]
}
 800fed0:	bf00      	nop
 800fed2:	bf00      	nop
 800fed4:	e7fd      	b.n	800fed2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800fed6:	f001 f9f7 	bl	80112c8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800feda:	4b07      	ldr	r3, [pc, #28]	@ (800fef8 <vTaskSetTimeOutState+0x48>)
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800fee2:	4b06      	ldr	r3, [pc, #24]	@ (800fefc <vTaskSetTimeOutState+0x4c>)
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800feea:	f001 fa1f 	bl	801132c <vPortExitCritical>
}
 800feee:	bf00      	nop
 800fef0:	3710      	adds	r7, #16
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	24033b34 	.word	0x24033b34
 800fefc:	24033b20 	.word	0x24033b20

0800ff00 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff08:	4b06      	ldr	r3, [pc, #24]	@ (800ff24 <vTaskInternalSetTimeOutState+0x24>)
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ff10:	4b05      	ldr	r3, [pc, #20]	@ (800ff28 <vTaskInternalSetTimeOutState+0x28>)
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	605a      	str	r2, [r3, #4]
}
 800ff18:	bf00      	nop
 800ff1a:	370c      	adds	r7, #12
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	24033b34 	.word	0x24033b34
 800ff28:	24033b20 	.word	0x24033b20

0800ff2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b088      	sub	sp, #32
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d10b      	bne.n	800ff54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ff3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	613b      	str	r3, [r7, #16]
}
 800ff4e:	bf00      	nop
 800ff50:	bf00      	nop
 800ff52:	e7fd      	b.n	800ff50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d10b      	bne.n	800ff72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ff5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff5e:	f383 8811 	msr	BASEPRI, r3
 800ff62:	f3bf 8f6f 	isb	sy
 800ff66:	f3bf 8f4f 	dsb	sy
 800ff6a:	60fb      	str	r3, [r7, #12]
}
 800ff6c:	bf00      	nop
 800ff6e:	bf00      	nop
 800ff70:	e7fd      	b.n	800ff6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ff72:	f001 f9a9 	bl	80112c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ff76:	4b1d      	ldr	r3, [pc, #116]	@ (800ffec <xTaskCheckForTimeOut+0xc0>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	69ba      	ldr	r2, [r7, #24]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff8e:	d102      	bne.n	800ff96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff90:	2300      	movs	r3, #0
 800ff92:	61fb      	str	r3, [r7, #28]
 800ff94:	e023      	b.n	800ffde <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681a      	ldr	r2, [r3, #0]
 800ff9a:	4b15      	ldr	r3, [pc, #84]	@ (800fff0 <xTaskCheckForTimeOut+0xc4>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d007      	beq.n	800ffb2 <xTaskCheckForTimeOut+0x86>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	69ba      	ldr	r2, [r7, #24]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d302      	bcc.n	800ffb2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ffac:	2301      	movs	r3, #1
 800ffae:	61fb      	str	r3, [r7, #28]
 800ffb0:	e015      	b.n	800ffde <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	697a      	ldr	r2, [r7, #20]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d20b      	bcs.n	800ffd4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	681a      	ldr	r2, [r3, #0]
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	1ad2      	subs	r2, r2, r3
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7ff ff99 	bl	800ff00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	61fb      	str	r3, [r7, #28]
 800ffd2:	e004      	b.n	800ffde <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ffde:	f001 f9a5 	bl	801132c <vPortExitCritical>

	return xReturn;
 800ffe2:	69fb      	ldr	r3, [r7, #28]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3720      	adds	r7, #32
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	24033b20 	.word	0x24033b20
 800fff0:	24033b34 	.word	0x24033b34

0800fff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fff4:	b480      	push	{r7}
 800fff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fff8:	4b03      	ldr	r3, [pc, #12]	@ (8010008 <vTaskMissedYield+0x14>)
 800fffa:	2201      	movs	r2, #1
 800fffc:	601a      	str	r2, [r3, #0]
}
 800fffe:	bf00      	nop
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr
 8010008:	24033b30 	.word	0x24033b30

0801000c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010014:	f000 f852 	bl	80100bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010018:	4b06      	ldr	r3, [pc, #24]	@ (8010034 <prvIdleTask+0x28>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2b01      	cmp	r3, #1
 801001e:	d9f9      	bls.n	8010014 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010020:	4b05      	ldr	r3, [pc, #20]	@ (8010038 <prvIdleTask+0x2c>)
 8010022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010026:	601a      	str	r2, [r3, #0]
 8010028:	f3bf 8f4f 	dsb	sy
 801002c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010030:	e7f0      	b.n	8010014 <prvIdleTask+0x8>
 8010032:	bf00      	nop
 8010034:	2403364c 	.word	0x2403364c
 8010038:	e000ed04 	.word	0xe000ed04

0801003c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010042:	2300      	movs	r3, #0
 8010044:	607b      	str	r3, [r7, #4]
 8010046:	e00c      	b.n	8010062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	4613      	mov	r3, r2
 801004c:	009b      	lsls	r3, r3, #2
 801004e:	4413      	add	r3, r2
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	4a12      	ldr	r2, [pc, #72]	@ (801009c <prvInitialiseTaskLists+0x60>)
 8010054:	4413      	add	r3, r2
 8010056:	4618      	mov	r0, r3
 8010058:	f7fe fa58 	bl	800e50c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	3301      	adds	r3, #1
 8010060:	607b      	str	r3, [r7, #4]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2b37      	cmp	r3, #55	@ 0x37
 8010066:	d9ef      	bls.n	8010048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010068:	480d      	ldr	r0, [pc, #52]	@ (80100a0 <prvInitialiseTaskLists+0x64>)
 801006a:	f7fe fa4f 	bl	800e50c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801006e:	480d      	ldr	r0, [pc, #52]	@ (80100a4 <prvInitialiseTaskLists+0x68>)
 8010070:	f7fe fa4c 	bl	800e50c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010074:	480c      	ldr	r0, [pc, #48]	@ (80100a8 <prvInitialiseTaskLists+0x6c>)
 8010076:	f7fe fa49 	bl	800e50c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801007a:	480c      	ldr	r0, [pc, #48]	@ (80100ac <prvInitialiseTaskLists+0x70>)
 801007c:	f7fe fa46 	bl	800e50c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010080:	480b      	ldr	r0, [pc, #44]	@ (80100b0 <prvInitialiseTaskLists+0x74>)
 8010082:	f7fe fa43 	bl	800e50c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010086:	4b0b      	ldr	r3, [pc, #44]	@ (80100b4 <prvInitialiseTaskLists+0x78>)
 8010088:	4a05      	ldr	r2, [pc, #20]	@ (80100a0 <prvInitialiseTaskLists+0x64>)
 801008a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801008c:	4b0a      	ldr	r3, [pc, #40]	@ (80100b8 <prvInitialiseTaskLists+0x7c>)
 801008e:	4a05      	ldr	r2, [pc, #20]	@ (80100a4 <prvInitialiseTaskLists+0x68>)
 8010090:	601a      	str	r2, [r3, #0]
}
 8010092:	bf00      	nop
 8010094:	3708      	adds	r7, #8
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	2403364c 	.word	0x2403364c
 80100a0:	24033aac 	.word	0x24033aac
 80100a4:	24033ac0 	.word	0x24033ac0
 80100a8:	24033adc 	.word	0x24033adc
 80100ac:	24033af0 	.word	0x24033af0
 80100b0:	24033b08 	.word	0x24033b08
 80100b4:	24033ad4 	.word	0x24033ad4
 80100b8:	24033ad8 	.word	0x24033ad8

080100bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100c2:	e019      	b.n	80100f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80100c4:	f001 f900 	bl	80112c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100c8:	4b10      	ldr	r3, [pc, #64]	@ (801010c <prvCheckTasksWaitingTermination+0x50>)
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	3304      	adds	r3, #4
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7fe faa3 	bl	800e620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80100da:	4b0d      	ldr	r3, [pc, #52]	@ (8010110 <prvCheckTasksWaitingTermination+0x54>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	3b01      	subs	r3, #1
 80100e0:	4a0b      	ldr	r2, [pc, #44]	@ (8010110 <prvCheckTasksWaitingTermination+0x54>)
 80100e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80100e4:	4b0b      	ldr	r3, [pc, #44]	@ (8010114 <prvCheckTasksWaitingTermination+0x58>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	3b01      	subs	r3, #1
 80100ea:	4a0a      	ldr	r2, [pc, #40]	@ (8010114 <prvCheckTasksWaitingTermination+0x58>)
 80100ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80100ee:	f001 f91d 	bl	801132c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 f810 	bl	8010118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100f8:	4b06      	ldr	r3, [pc, #24]	@ (8010114 <prvCheckTasksWaitingTermination+0x58>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d1e1      	bne.n	80100c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010100:	bf00      	nop
 8010102:	bf00      	nop
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	24033af0 	.word	0x24033af0
 8010110:	24033b1c 	.word	0x24033b1c
 8010114:	24033b04 	.word	0x24033b04

08010118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	3354      	adds	r3, #84	@ 0x54
 8010124:	4618      	mov	r0, r3
 8010126:	f012 f955 	bl	80223d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010130:	2b00      	cmp	r3, #0
 8010132:	d108      	bne.n	8010146 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010138:	4618      	mov	r0, r3
 801013a:	f001 fab5 	bl	80116a8 <vPortFree>
				vPortFree( pxTCB );
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f001 fab2 	bl	80116a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010144:	e019      	b.n	801017a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801014c:	2b01      	cmp	r3, #1
 801014e:	d103      	bne.n	8010158 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f001 faa9 	bl	80116a8 <vPortFree>
	}
 8010156:	e010      	b.n	801017a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801015e:	2b02      	cmp	r3, #2
 8010160:	d00b      	beq.n	801017a <prvDeleteTCB+0x62>
	__asm volatile
 8010162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010166:	f383 8811 	msr	BASEPRI, r3
 801016a:	f3bf 8f6f 	isb	sy
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	60fb      	str	r3, [r7, #12]
}
 8010174:	bf00      	nop
 8010176:	bf00      	nop
 8010178:	e7fd      	b.n	8010176 <prvDeleteTCB+0x5e>
	}
 801017a:	bf00      	nop
 801017c:	3710      	adds	r7, #16
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
	...

08010184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801018a:	4b0c      	ldr	r3, [pc, #48]	@ (80101bc <prvResetNextTaskUnblockTime+0x38>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d104      	bne.n	801019e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010194:	4b0a      	ldr	r3, [pc, #40]	@ (80101c0 <prvResetNextTaskUnblockTime+0x3c>)
 8010196:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801019a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801019c:	e008      	b.n	80101b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801019e:	4b07      	ldr	r3, [pc, #28]	@ (80101bc <prvResetNextTaskUnblockTime+0x38>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	68db      	ldr	r3, [r3, #12]
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	4a04      	ldr	r2, [pc, #16]	@ (80101c0 <prvResetNextTaskUnblockTime+0x3c>)
 80101ae:	6013      	str	r3, [r2, #0]
}
 80101b0:	bf00      	nop
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr
 80101bc:	24033ad4 	.word	0x24033ad4
 80101c0:	24033b3c 	.word	0x24033b3c

080101c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80101ca:	4b05      	ldr	r3, [pc, #20]	@ (80101e0 <xTaskGetCurrentTaskHandle+0x1c>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 80101d0:	687b      	ldr	r3, [r7, #4]
	}
 80101d2:	4618      	mov	r0, r3
 80101d4:	370c      	adds	r7, #12
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr
 80101de:	bf00      	nop
 80101e0:	24033648 	.word	0x24033648

080101e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80101e4:	b480      	push	{r7}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80101ea:	4b0b      	ldr	r3, [pc, #44]	@ (8010218 <xTaskGetSchedulerState+0x34>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d102      	bne.n	80101f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80101f2:	2301      	movs	r3, #1
 80101f4:	607b      	str	r3, [r7, #4]
 80101f6:	e008      	b.n	801020a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101f8:	4b08      	ldr	r3, [pc, #32]	@ (801021c <xTaskGetSchedulerState+0x38>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d102      	bne.n	8010206 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010200:	2302      	movs	r3, #2
 8010202:	607b      	str	r3, [r7, #4]
 8010204:	e001      	b.n	801020a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010206:	2300      	movs	r3, #0
 8010208:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801020a:	687b      	ldr	r3, [r7, #4]
	}
 801020c:	4618      	mov	r0, r3
 801020e:	370c      	adds	r7, #12
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr
 8010218:	24033b28 	.word	0x24033b28
 801021c:	24033b44 	.word	0x24033b44

08010220 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010220:	b580      	push	{r7, lr}
 8010222:	b084      	sub	sp, #16
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801022c:	2300      	movs	r3, #0
 801022e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d051      	beq.n	80102da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801023a:	4b2a      	ldr	r3, [pc, #168]	@ (80102e4 <xTaskPriorityInherit+0xc4>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010240:	429a      	cmp	r2, r3
 8010242:	d241      	bcs.n	80102c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	699b      	ldr	r3, [r3, #24]
 8010248:	2b00      	cmp	r3, #0
 801024a:	db06      	blt.n	801025a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801024c:	4b25      	ldr	r3, [pc, #148]	@ (80102e4 <xTaskPriorityInherit+0xc4>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010252:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	6959      	ldr	r1, [r3, #20]
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010262:	4613      	mov	r3, r2
 8010264:	009b      	lsls	r3, r3, #2
 8010266:	4413      	add	r3, r2
 8010268:	009b      	lsls	r3, r3, #2
 801026a:	4a1f      	ldr	r2, [pc, #124]	@ (80102e8 <xTaskPriorityInherit+0xc8>)
 801026c:	4413      	add	r3, r2
 801026e:	4299      	cmp	r1, r3
 8010270:	d122      	bne.n	80102b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	3304      	adds	r3, #4
 8010276:	4618      	mov	r0, r3
 8010278:	f7fe f9d2 	bl	800e620 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801027c:	4b19      	ldr	r3, [pc, #100]	@ (80102e4 <xTaskPriorityInherit+0xc4>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801028a:	4b18      	ldr	r3, [pc, #96]	@ (80102ec <xTaskPriorityInherit+0xcc>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	429a      	cmp	r2, r3
 8010290:	d903      	bls.n	801029a <xTaskPriorityInherit+0x7a>
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010296:	4a15      	ldr	r2, [pc, #84]	@ (80102ec <xTaskPriorityInherit+0xcc>)
 8010298:	6013      	str	r3, [r2, #0]
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801029e:	4613      	mov	r3, r2
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	4413      	add	r3, r2
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	4a10      	ldr	r2, [pc, #64]	@ (80102e8 <xTaskPriorityInherit+0xc8>)
 80102a8:	441a      	add	r2, r3
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	3304      	adds	r3, #4
 80102ae:	4619      	mov	r1, r3
 80102b0:	4610      	mov	r0, r2
 80102b2:	f7fe f958 	bl	800e566 <vListInsertEnd>
 80102b6:	e004      	b.n	80102c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80102b8:	4b0a      	ldr	r3, [pc, #40]	@ (80102e4 <xTaskPriorityInherit+0xc4>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80102c2:	2301      	movs	r3, #1
 80102c4:	60fb      	str	r3, [r7, #12]
 80102c6:	e008      	b.n	80102da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80102cc:	4b05      	ldr	r3, [pc, #20]	@ (80102e4 <xTaskPriorityInherit+0xc4>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d201      	bcs.n	80102da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80102d6:	2301      	movs	r3, #1
 80102d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80102da:	68fb      	ldr	r3, [r7, #12]
	}
 80102dc:	4618      	mov	r0, r3
 80102de:	3710      	adds	r7, #16
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	24033648 	.word	0x24033648
 80102e8:	2403364c 	.word	0x2403364c
 80102ec:	24033b24 	.word	0x24033b24

080102f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b086      	sub	sp, #24
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80102fc:	2300      	movs	r3, #0
 80102fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d058      	beq.n	80103b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010306:	4b2f      	ldr	r3, [pc, #188]	@ (80103c4 <xTaskPriorityDisinherit+0xd4>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	693a      	ldr	r2, [r7, #16]
 801030c:	429a      	cmp	r2, r3
 801030e:	d00b      	beq.n	8010328 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010314:	f383 8811 	msr	BASEPRI, r3
 8010318:	f3bf 8f6f 	isb	sy
 801031c:	f3bf 8f4f 	dsb	sy
 8010320:	60fb      	str	r3, [r7, #12]
}
 8010322:	bf00      	nop
 8010324:	bf00      	nop
 8010326:	e7fd      	b.n	8010324 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801032c:	2b00      	cmp	r3, #0
 801032e:	d10b      	bne.n	8010348 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010334:	f383 8811 	msr	BASEPRI, r3
 8010338:	f3bf 8f6f 	isb	sy
 801033c:	f3bf 8f4f 	dsb	sy
 8010340:	60bb      	str	r3, [r7, #8]
}
 8010342:	bf00      	nop
 8010344:	bf00      	nop
 8010346:	e7fd      	b.n	8010344 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801034c:	1e5a      	subs	r2, r3, #1
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801035a:	429a      	cmp	r2, r3
 801035c:	d02c      	beq.n	80103b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010362:	2b00      	cmp	r3, #0
 8010364:	d128      	bne.n	80103b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	3304      	adds	r3, #4
 801036a:	4618      	mov	r0, r3
 801036c:	f7fe f958 	bl	800e620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801037c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010388:	4b0f      	ldr	r3, [pc, #60]	@ (80103c8 <xTaskPriorityDisinherit+0xd8>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	429a      	cmp	r2, r3
 801038e:	d903      	bls.n	8010398 <xTaskPriorityDisinherit+0xa8>
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010394:	4a0c      	ldr	r2, [pc, #48]	@ (80103c8 <xTaskPriorityDisinherit+0xd8>)
 8010396:	6013      	str	r3, [r2, #0]
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801039c:	4613      	mov	r3, r2
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	4a09      	ldr	r2, [pc, #36]	@ (80103cc <xTaskPriorityDisinherit+0xdc>)
 80103a6:	441a      	add	r2, r3
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	3304      	adds	r3, #4
 80103ac:	4619      	mov	r1, r3
 80103ae:	4610      	mov	r0, r2
 80103b0:	f7fe f8d9 	bl	800e566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80103b4:	2301      	movs	r3, #1
 80103b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103b8:	697b      	ldr	r3, [r7, #20]
	}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3718      	adds	r7, #24
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	24033648 	.word	0x24033648
 80103c8:	24033b24 	.word	0x24033b24
 80103cc:	2403364c 	.word	0x2403364c

080103d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b088      	sub	sp, #32
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80103de:	2301      	movs	r3, #1
 80103e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d06c      	beq.n	80104c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d10b      	bne.n	8010408 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80103f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103f4:	f383 8811 	msr	BASEPRI, r3
 80103f8:	f3bf 8f6f 	isb	sy
 80103fc:	f3bf 8f4f 	dsb	sy
 8010400:	60fb      	str	r3, [r7, #12]
}
 8010402:	bf00      	nop
 8010404:	bf00      	nop
 8010406:	e7fd      	b.n	8010404 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801040c:	683a      	ldr	r2, [r7, #0]
 801040e:	429a      	cmp	r2, r3
 8010410:	d902      	bls.n	8010418 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	61fb      	str	r3, [r7, #28]
 8010416:	e002      	b.n	801041e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801041c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010422:	69fa      	ldr	r2, [r7, #28]
 8010424:	429a      	cmp	r2, r3
 8010426:	d04c      	beq.n	80104c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010428:	69bb      	ldr	r3, [r7, #24]
 801042a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801042c:	697a      	ldr	r2, [r7, #20]
 801042e:	429a      	cmp	r2, r3
 8010430:	d147      	bne.n	80104c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010432:	4b26      	ldr	r3, [pc, #152]	@ (80104cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	69ba      	ldr	r2, [r7, #24]
 8010438:	429a      	cmp	r2, r3
 801043a:	d10b      	bne.n	8010454 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801043c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010440:	f383 8811 	msr	BASEPRI, r3
 8010444:	f3bf 8f6f 	isb	sy
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	60bb      	str	r3, [r7, #8]
}
 801044e:	bf00      	nop
 8010450:	bf00      	nop
 8010452:	e7fd      	b.n	8010450 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010458:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	69fa      	ldr	r2, [r7, #28]
 801045e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010460:	69bb      	ldr	r3, [r7, #24]
 8010462:	699b      	ldr	r3, [r3, #24]
 8010464:	2b00      	cmp	r3, #0
 8010466:	db04      	blt.n	8010472 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	6959      	ldr	r1, [r3, #20]
 8010476:	693a      	ldr	r2, [r7, #16]
 8010478:	4613      	mov	r3, r2
 801047a:	009b      	lsls	r3, r3, #2
 801047c:	4413      	add	r3, r2
 801047e:	009b      	lsls	r3, r3, #2
 8010480:	4a13      	ldr	r2, [pc, #76]	@ (80104d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010482:	4413      	add	r3, r2
 8010484:	4299      	cmp	r1, r3
 8010486:	d11c      	bne.n	80104c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010488:	69bb      	ldr	r3, [r7, #24]
 801048a:	3304      	adds	r3, #4
 801048c:	4618      	mov	r0, r3
 801048e:	f7fe f8c7 	bl	800e620 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010496:	4b0f      	ldr	r3, [pc, #60]	@ (80104d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	429a      	cmp	r2, r3
 801049c:	d903      	bls.n	80104a6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104a2:	4a0c      	ldr	r2, [pc, #48]	@ (80104d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80104a4:	6013      	str	r3, [r2, #0]
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104aa:	4613      	mov	r3, r2
 80104ac:	009b      	lsls	r3, r3, #2
 80104ae:	4413      	add	r3, r2
 80104b0:	009b      	lsls	r3, r3, #2
 80104b2:	4a07      	ldr	r2, [pc, #28]	@ (80104d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80104b4:	441a      	add	r2, r3
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	3304      	adds	r3, #4
 80104ba:	4619      	mov	r1, r3
 80104bc:	4610      	mov	r0, r2
 80104be:	f7fe f852 	bl	800e566 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104c2:	bf00      	nop
 80104c4:	3720      	adds	r7, #32
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	24033648 	.word	0x24033648
 80104d0:	2403364c 	.word	0x2403364c
 80104d4:	24033b24 	.word	0x24033b24

080104d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80104d8:	b480      	push	{r7}
 80104da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80104dc:	4b07      	ldr	r3, [pc, #28]	@ (80104fc <pvTaskIncrementMutexHeldCount+0x24>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d004      	beq.n	80104ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80104e4:	4b05      	ldr	r3, [pc, #20]	@ (80104fc <pvTaskIncrementMutexHeldCount+0x24>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80104ea:	3201      	adds	r2, #1
 80104ec:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80104ee:	4b03      	ldr	r3, [pc, #12]	@ (80104fc <pvTaskIncrementMutexHeldCount+0x24>)
 80104f0:	681b      	ldr	r3, [r3, #0]
	}
 80104f2:	4618      	mov	r0, r3
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr
 80104fc:	24033648 	.word	0x24033648

08010500 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010500:	b580      	push	{r7, lr}
 8010502:	b086      	sub	sp, #24
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
 801050c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801050e:	f000 fedb 	bl	80112c8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010512:	4b29      	ldr	r3, [pc, #164]	@ (80105b8 <xTaskNotifyWait+0xb8>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801051a:	b2db      	uxtb	r3, r3
 801051c:	2b02      	cmp	r3, #2
 801051e:	d01c      	beq.n	801055a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010520:	4b25      	ldr	r3, [pc, #148]	@ (80105b8 <xTaskNotifyWait+0xb8>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8010528:	68fa      	ldr	r2, [r7, #12]
 801052a:	43d2      	mvns	r2, r2
 801052c:	400a      	ands	r2, r1
 801052e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010532:	4b21      	ldr	r3, [pc, #132]	@ (80105b8 <xTaskNotifyWait+0xb8>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	2201      	movs	r2, #1
 8010538:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00b      	beq.n	801055a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010542:	2101      	movs	r1, #1
 8010544:	6838      	ldr	r0, [r7, #0]
 8010546:	f000 f9e3 	bl	8010910 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801054a:	4b1c      	ldr	r3, [pc, #112]	@ (80105bc <xTaskNotifyWait+0xbc>)
 801054c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010550:	601a      	str	r2, [r3, #0]
 8010552:	f3bf 8f4f 	dsb	sy
 8010556:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801055a:	f000 fee7 	bl	801132c <vPortExitCritical>

		taskENTER_CRITICAL();
 801055e:	f000 feb3 	bl	80112c8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d005      	beq.n	8010574 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010568:	4b13      	ldr	r3, [pc, #76]	@ (80105b8 <xTaskNotifyWait+0xb8>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010574:	4b10      	ldr	r3, [pc, #64]	@ (80105b8 <xTaskNotifyWait+0xb8>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801057c:	b2db      	uxtb	r3, r3
 801057e:	2b02      	cmp	r3, #2
 8010580:	d002      	beq.n	8010588 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010582:	2300      	movs	r3, #0
 8010584:	617b      	str	r3, [r7, #20]
 8010586:	e00a      	b.n	801059e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010588:	4b0b      	ldr	r3, [pc, #44]	@ (80105b8 <xTaskNotifyWait+0xb8>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8010590:	68ba      	ldr	r2, [r7, #8]
 8010592:	43d2      	mvns	r2, r2
 8010594:	400a      	ands	r2, r1
 8010596:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 801059a:	2301      	movs	r3, #1
 801059c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801059e:	4b06      	ldr	r3, [pc, #24]	@ (80105b8 <xTaskNotifyWait+0xb8>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	2200      	movs	r2, #0
 80105a4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80105a8:	f000 fec0 	bl	801132c <vPortExitCritical>

		return xReturn;
 80105ac:	697b      	ldr	r3, [r7, #20]
	}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3718      	adds	r7, #24
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	24033648 	.word	0x24033648
 80105bc:	e000ed04 	.word	0xe000ed04

080105c0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b08a      	sub	sp, #40	@ 0x28
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	60b9      	str	r1, [r7, #8]
 80105ca:	603b      	str	r3, [r7, #0]
 80105cc:	4613      	mov	r3, r2
 80105ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80105d0:	2301      	movs	r3, #1
 80105d2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d10b      	bne.n	80105f2 <xTaskGenericNotify+0x32>
	__asm volatile
 80105da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105de:	f383 8811 	msr	BASEPRI, r3
 80105e2:	f3bf 8f6f 	isb	sy
 80105e6:	f3bf 8f4f 	dsb	sy
 80105ea:	61bb      	str	r3, [r7, #24]
}
 80105ec:	bf00      	nop
 80105ee:	bf00      	nop
 80105f0:	e7fd      	b.n	80105ee <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80105f6:	f000 fe67 	bl	80112c8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d004      	beq.n	801060a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010600:	6a3b      	ldr	r3, [r7, #32]
 8010602:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801060a:	6a3b      	ldr	r3, [r7, #32]
 801060c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010610:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010612:	6a3b      	ldr	r3, [r7, #32]
 8010614:	2202      	movs	r2, #2
 8010616:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801061a:	79fb      	ldrb	r3, [r7, #7]
 801061c:	2b04      	cmp	r3, #4
 801061e:	d82e      	bhi.n	801067e <xTaskGenericNotify+0xbe>
 8010620:	a201      	add	r2, pc, #4	@ (adr r2, 8010628 <xTaskGenericNotify+0x68>)
 8010622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010626:	bf00      	nop
 8010628:	080106a3 	.word	0x080106a3
 801062c:	0801063d 	.word	0x0801063d
 8010630:	0801064f 	.word	0x0801064f
 8010634:	0801065f 	.word	0x0801065f
 8010638:	08010669 	.word	0x08010669
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801063c:	6a3b      	ldr	r3, [r7, #32]
 801063e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	431a      	orrs	r2, r3
 8010646:	6a3b      	ldr	r3, [r7, #32]
 8010648:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801064c:	e02c      	b.n	80106a8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801064e:	6a3b      	ldr	r3, [r7, #32]
 8010650:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010654:	1c5a      	adds	r2, r3, #1
 8010656:	6a3b      	ldr	r3, [r7, #32]
 8010658:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801065c:	e024      	b.n	80106a8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801065e:	6a3b      	ldr	r3, [r7, #32]
 8010660:	68ba      	ldr	r2, [r7, #8]
 8010662:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010666:	e01f      	b.n	80106a8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010668:	7ffb      	ldrb	r3, [r7, #31]
 801066a:	2b02      	cmp	r3, #2
 801066c:	d004      	beq.n	8010678 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801066e:	6a3b      	ldr	r3, [r7, #32]
 8010670:	68ba      	ldr	r2, [r7, #8]
 8010672:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010676:	e017      	b.n	80106a8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8010678:	2300      	movs	r3, #0
 801067a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 801067c:	e014      	b.n	80106a8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010688:	d00d      	beq.n	80106a6 <xTaskGenericNotify+0xe6>
	__asm volatile
 801068a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801068e:	f383 8811 	msr	BASEPRI, r3
 8010692:	f3bf 8f6f 	isb	sy
 8010696:	f3bf 8f4f 	dsb	sy
 801069a:	617b      	str	r3, [r7, #20]
}
 801069c:	bf00      	nop
 801069e:	bf00      	nop
 80106a0:	e7fd      	b.n	801069e <xTaskGenericNotify+0xde>
					break;
 80106a2:	bf00      	nop
 80106a4:	e000      	b.n	80106a8 <xTaskGenericNotify+0xe8>

					break;
 80106a6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80106a8:	7ffb      	ldrb	r3, [r7, #31]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d13b      	bne.n	8010726 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80106ae:	6a3b      	ldr	r3, [r7, #32]
 80106b0:	3304      	adds	r3, #4
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7fd ffb4 	bl	800e620 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80106b8:	6a3b      	ldr	r3, [r7, #32]
 80106ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106bc:	4b1d      	ldr	r3, [pc, #116]	@ (8010734 <xTaskGenericNotify+0x174>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d903      	bls.n	80106cc <xTaskGenericNotify+0x10c>
 80106c4:	6a3b      	ldr	r3, [r7, #32]
 80106c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106c8:	4a1a      	ldr	r2, [pc, #104]	@ (8010734 <xTaskGenericNotify+0x174>)
 80106ca:	6013      	str	r3, [r2, #0]
 80106cc:	6a3b      	ldr	r3, [r7, #32]
 80106ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106d0:	4613      	mov	r3, r2
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	4413      	add	r3, r2
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	4a17      	ldr	r2, [pc, #92]	@ (8010738 <xTaskGenericNotify+0x178>)
 80106da:	441a      	add	r2, r3
 80106dc:	6a3b      	ldr	r3, [r7, #32]
 80106de:	3304      	adds	r3, #4
 80106e0:	4619      	mov	r1, r3
 80106e2:	4610      	mov	r0, r2
 80106e4:	f7fd ff3f 	bl	800e566 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80106e8:	6a3b      	ldr	r3, [r7, #32]
 80106ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d00b      	beq.n	8010708 <xTaskGenericNotify+0x148>
	__asm volatile
 80106f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106f4:	f383 8811 	msr	BASEPRI, r3
 80106f8:	f3bf 8f6f 	isb	sy
 80106fc:	f3bf 8f4f 	dsb	sy
 8010700:	613b      	str	r3, [r7, #16]
}
 8010702:	bf00      	nop
 8010704:	bf00      	nop
 8010706:	e7fd      	b.n	8010704 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010708:	6a3b      	ldr	r3, [r7, #32]
 801070a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801070c:	4b0b      	ldr	r3, [pc, #44]	@ (801073c <xTaskGenericNotify+0x17c>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010712:	429a      	cmp	r2, r3
 8010714:	d907      	bls.n	8010726 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010716:	4b0a      	ldr	r3, [pc, #40]	@ (8010740 <xTaskGenericNotify+0x180>)
 8010718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801071c:	601a      	str	r2, [r3, #0]
 801071e:	f3bf 8f4f 	dsb	sy
 8010722:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010726:	f000 fe01 	bl	801132c <vPortExitCritical>

		return xReturn;
 801072a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801072c:	4618      	mov	r0, r3
 801072e:	3728      	adds	r7, #40	@ 0x28
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	24033b24 	.word	0x24033b24
 8010738:	2403364c 	.word	0x2403364c
 801073c:	24033648 	.word	0x24033648
 8010740:	e000ed04 	.word	0xe000ed04

08010744 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010744:	b580      	push	{r7, lr}
 8010746:	b08e      	sub	sp, #56	@ 0x38
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	603b      	str	r3, [r7, #0]
 8010750:	4613      	mov	r3, r2
 8010752:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010754:	2301      	movs	r3, #1
 8010756:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d10b      	bne.n	8010776 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 801075e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010762:	f383 8811 	msr	BASEPRI, r3
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	f3bf 8f4f 	dsb	sy
 801076e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010770:	bf00      	nop
 8010772:	bf00      	nop
 8010774:	e7fd      	b.n	8010772 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010776:	f000 fe87 	bl	8011488 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801077e:	f3ef 8211 	mrs	r2, BASEPRI
 8010782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010786:	f383 8811 	msr	BASEPRI, r3
 801078a:	f3bf 8f6f 	isb	sy
 801078e:	f3bf 8f4f 	dsb	sy
 8010792:	623a      	str	r2, [r7, #32]
 8010794:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010796:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010798:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d004      	beq.n	80107aa <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80107a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80107aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ac:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80107b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80107b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107b6:	2202      	movs	r2, #2
 80107b8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80107bc:	79fb      	ldrb	r3, [r7, #7]
 80107be:	2b04      	cmp	r3, #4
 80107c0:	d82e      	bhi.n	8010820 <xTaskGenericNotifyFromISR+0xdc>
 80107c2:	a201      	add	r2, pc, #4	@ (adr r2, 80107c8 <xTaskGenericNotifyFromISR+0x84>)
 80107c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c8:	08010845 	.word	0x08010845
 80107cc:	080107dd 	.word	0x080107dd
 80107d0:	080107ef 	.word	0x080107ef
 80107d4:	080107ff 	.word	0x080107ff
 80107d8:	08010809 	.word	0x08010809
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80107dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107de:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	431a      	orrs	r2, r3
 80107e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80107ec:	e02d      	b.n	801084a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80107ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80107f4:	1c5a      	adds	r2, r3, #1
 80107f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80107fc:	e025      	b.n	801084a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80107fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010800:	68ba      	ldr	r2, [r7, #8]
 8010802:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010806:	e020      	b.n	801084a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010808:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801080c:	2b02      	cmp	r3, #2
 801080e:	d004      	beq.n	801081a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010812:	68ba      	ldr	r2, [r7, #8]
 8010814:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010818:	e017      	b.n	801084a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 801081a:	2300      	movs	r3, #0
 801081c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 801081e:	e014      	b.n	801084a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010826:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801082a:	d00d      	beq.n	8010848 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 801082c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010830:	f383 8811 	msr	BASEPRI, r3
 8010834:	f3bf 8f6f 	isb	sy
 8010838:	f3bf 8f4f 	dsb	sy
 801083c:	61bb      	str	r3, [r7, #24]
}
 801083e:	bf00      	nop
 8010840:	bf00      	nop
 8010842:	e7fd      	b.n	8010840 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8010844:	bf00      	nop
 8010846:	e000      	b.n	801084a <xTaskGenericNotifyFromISR+0x106>
					break;
 8010848:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801084a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801084e:	2b01      	cmp	r3, #1
 8010850:	d147      	bne.n	80108e2 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00b      	beq.n	8010872 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801085a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085e:	f383 8811 	msr	BASEPRI, r3
 8010862:	f3bf 8f6f 	isb	sy
 8010866:	f3bf 8f4f 	dsb	sy
 801086a:	617b      	str	r3, [r7, #20]
}
 801086c:	bf00      	nop
 801086e:	bf00      	nop
 8010870:	e7fd      	b.n	801086e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010872:	4b21      	ldr	r3, [pc, #132]	@ (80108f8 <xTaskGenericNotifyFromISR+0x1b4>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d11d      	bne.n	80108b6 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801087a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801087c:	3304      	adds	r3, #4
 801087e:	4618      	mov	r0, r3
 8010880:	f7fd fece 	bl	800e620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010888:	4b1c      	ldr	r3, [pc, #112]	@ (80108fc <xTaskGenericNotifyFromISR+0x1b8>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	429a      	cmp	r2, r3
 801088e:	d903      	bls.n	8010898 <xTaskGenericNotifyFromISR+0x154>
 8010890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010894:	4a19      	ldr	r2, [pc, #100]	@ (80108fc <xTaskGenericNotifyFromISR+0x1b8>)
 8010896:	6013      	str	r3, [r2, #0]
 8010898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801089a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801089c:	4613      	mov	r3, r2
 801089e:	009b      	lsls	r3, r3, #2
 80108a0:	4413      	add	r3, r2
 80108a2:	009b      	lsls	r3, r3, #2
 80108a4:	4a16      	ldr	r2, [pc, #88]	@ (8010900 <xTaskGenericNotifyFromISR+0x1bc>)
 80108a6:	441a      	add	r2, r3
 80108a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108aa:	3304      	adds	r3, #4
 80108ac:	4619      	mov	r1, r3
 80108ae:	4610      	mov	r0, r2
 80108b0:	f7fd fe59 	bl	800e566 <vListInsertEnd>
 80108b4:	e005      	b.n	80108c2 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80108b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b8:	3318      	adds	r3, #24
 80108ba:	4619      	mov	r1, r3
 80108bc:	4811      	ldr	r0, [pc, #68]	@ (8010904 <xTaskGenericNotifyFromISR+0x1c0>)
 80108be:	f7fd fe52 	bl	800e566 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80108c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108c6:	4b10      	ldr	r3, [pc, #64]	@ (8010908 <xTaskGenericNotifyFromISR+0x1c4>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d908      	bls.n	80108e2 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80108d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d002      	beq.n	80108dc <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80108d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108d8:	2201      	movs	r2, #1
 80108da:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80108dc:	4b0b      	ldr	r3, [pc, #44]	@ (801090c <xTaskGenericNotifyFromISR+0x1c8>)
 80108de:	2201      	movs	r2, #1
 80108e0:	601a      	str	r2, [r3, #0]
 80108e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	f383 8811 	msr	BASEPRI, r3
}
 80108ec:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80108ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3738      	adds	r7, #56	@ 0x38
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	24033b44 	.word	0x24033b44
 80108fc:	24033b24 	.word	0x24033b24
 8010900:	2403364c 	.word	0x2403364c
 8010904:	24033adc 	.word	0x24033adc
 8010908:	24033648 	.word	0x24033648
 801090c:	24033b30 	.word	0x24033b30

08010910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801091a:	4b21      	ldr	r3, [pc, #132]	@ (80109a0 <prvAddCurrentTaskToDelayedList+0x90>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010920:	4b20      	ldr	r3, [pc, #128]	@ (80109a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	3304      	adds	r3, #4
 8010926:	4618      	mov	r0, r3
 8010928:	f7fd fe7a 	bl	800e620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010932:	d10a      	bne.n	801094a <prvAddCurrentTaskToDelayedList+0x3a>
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d007      	beq.n	801094a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801093a:	4b1a      	ldr	r3, [pc, #104]	@ (80109a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	3304      	adds	r3, #4
 8010940:	4619      	mov	r1, r3
 8010942:	4819      	ldr	r0, [pc, #100]	@ (80109a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010944:	f7fd fe0f 	bl	800e566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010948:	e026      	b.n	8010998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	4413      	add	r3, r2
 8010950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010952:	4b14      	ldr	r3, [pc, #80]	@ (80109a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	68ba      	ldr	r2, [r7, #8]
 8010958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801095a:	68ba      	ldr	r2, [r7, #8]
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	429a      	cmp	r2, r3
 8010960:	d209      	bcs.n	8010976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010962:	4b12      	ldr	r3, [pc, #72]	@ (80109ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	4b0f      	ldr	r3, [pc, #60]	@ (80109a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	3304      	adds	r3, #4
 801096c:	4619      	mov	r1, r3
 801096e:	4610      	mov	r0, r2
 8010970:	f7fd fe1d 	bl	800e5ae <vListInsert>
}
 8010974:	e010      	b.n	8010998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010976:	4b0e      	ldr	r3, [pc, #56]	@ (80109b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	4b0a      	ldr	r3, [pc, #40]	@ (80109a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	3304      	adds	r3, #4
 8010980:	4619      	mov	r1, r3
 8010982:	4610      	mov	r0, r2
 8010984:	f7fd fe13 	bl	800e5ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010988:	4b0a      	ldr	r3, [pc, #40]	@ (80109b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	429a      	cmp	r2, r3
 8010990:	d202      	bcs.n	8010998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010992:	4a08      	ldr	r2, [pc, #32]	@ (80109b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	6013      	str	r3, [r2, #0]
}
 8010998:	bf00      	nop
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	24033b20 	.word	0x24033b20
 80109a4:	24033648 	.word	0x24033648
 80109a8:	24033b08 	.word	0x24033b08
 80109ac:	24033ad8 	.word	0x24033ad8
 80109b0:	24033ad4 	.word	0x24033ad4
 80109b4:	24033b3c 	.word	0x24033b3c

080109b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b08a      	sub	sp, #40	@ 0x28
 80109bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80109be:	2300      	movs	r3, #0
 80109c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80109c2:	f000 fb13 	bl	8010fec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80109c6:	4b1d      	ldr	r3, [pc, #116]	@ (8010a3c <xTimerCreateTimerTask+0x84>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d021      	beq.n	8010a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80109ce:	2300      	movs	r3, #0
 80109d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80109d2:	2300      	movs	r3, #0
 80109d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80109d6:	1d3a      	adds	r2, r7, #4
 80109d8:	f107 0108 	add.w	r1, r7, #8
 80109dc:	f107 030c 	add.w	r3, r7, #12
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7fd fd79 	bl	800e4d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80109e6:	6879      	ldr	r1, [r7, #4]
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	68fa      	ldr	r2, [r7, #12]
 80109ec:	9202      	str	r2, [sp, #8]
 80109ee:	9301      	str	r3, [sp, #4]
 80109f0:	2302      	movs	r3, #2
 80109f2:	9300      	str	r3, [sp, #0]
 80109f4:	2300      	movs	r3, #0
 80109f6:	460a      	mov	r2, r1
 80109f8:	4911      	ldr	r1, [pc, #68]	@ (8010a40 <xTimerCreateTimerTask+0x88>)
 80109fa:	4812      	ldr	r0, [pc, #72]	@ (8010a44 <xTimerCreateTimerTask+0x8c>)
 80109fc:	f7fe fd50 	bl	800f4a0 <xTaskCreateStatic>
 8010a00:	4603      	mov	r3, r0
 8010a02:	4a11      	ldr	r2, [pc, #68]	@ (8010a48 <xTimerCreateTimerTask+0x90>)
 8010a04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010a06:	4b10      	ldr	r3, [pc, #64]	@ (8010a48 <xTimerCreateTimerTask+0x90>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d001      	beq.n	8010a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010a0e:	2301      	movs	r3, #1
 8010a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10b      	bne.n	8010a30 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a1c:	f383 8811 	msr	BASEPRI, r3
 8010a20:	f3bf 8f6f 	isb	sy
 8010a24:	f3bf 8f4f 	dsb	sy
 8010a28:	613b      	str	r3, [r7, #16]
}
 8010a2a:	bf00      	nop
 8010a2c:	bf00      	nop
 8010a2e:	e7fd      	b.n	8010a2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010a30:	697b      	ldr	r3, [r7, #20]
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3718      	adds	r7, #24
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	24033b78 	.word	0x24033b78
 8010a40:	0802348c 	.word	0x0802348c
 8010a44:	08010b85 	.word	0x08010b85
 8010a48:	24033b7c 	.word	0x24033b7c

08010a4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b08a      	sub	sp, #40	@ 0x28
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	60f8      	str	r0, [r7, #12]
 8010a54:	60b9      	str	r1, [r7, #8]
 8010a56:	607a      	str	r2, [r7, #4]
 8010a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d10b      	bne.n	8010a7c <xTimerGenericCommand+0x30>
	__asm volatile
 8010a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a68:	f383 8811 	msr	BASEPRI, r3
 8010a6c:	f3bf 8f6f 	isb	sy
 8010a70:	f3bf 8f4f 	dsb	sy
 8010a74:	623b      	str	r3, [r7, #32]
}
 8010a76:	bf00      	nop
 8010a78:	bf00      	nop
 8010a7a:	e7fd      	b.n	8010a78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010a7c:	4b19      	ldr	r3, [pc, #100]	@ (8010ae4 <xTimerGenericCommand+0x98>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d02a      	beq.n	8010ada <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	2b05      	cmp	r3, #5
 8010a94:	dc18      	bgt.n	8010ac8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010a96:	f7ff fba5 	bl	80101e4 <xTaskGetSchedulerState>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2b02      	cmp	r3, #2
 8010a9e:	d109      	bne.n	8010ab4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010aa0:	4b10      	ldr	r3, [pc, #64]	@ (8010ae4 <xTimerGenericCommand+0x98>)
 8010aa2:	6818      	ldr	r0, [r3, #0]
 8010aa4:	f107 0110 	add.w	r1, r7, #16
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010aac:	f7fd ffe0 	bl	800ea70 <xQueueGenericSend>
 8010ab0:	6278      	str	r0, [r7, #36]	@ 0x24
 8010ab2:	e012      	b.n	8010ada <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8010ae4 <xTimerGenericCommand+0x98>)
 8010ab6:	6818      	ldr	r0, [r3, #0]
 8010ab8:	f107 0110 	add.w	r1, r7, #16
 8010abc:	2300      	movs	r3, #0
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f7fd ffd6 	bl	800ea70 <xQueueGenericSend>
 8010ac4:	6278      	str	r0, [r7, #36]	@ 0x24
 8010ac6:	e008      	b.n	8010ada <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010ac8:	4b06      	ldr	r3, [pc, #24]	@ (8010ae4 <xTimerGenericCommand+0x98>)
 8010aca:	6818      	ldr	r0, [r3, #0]
 8010acc:	f107 0110 	add.w	r1, r7, #16
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	683a      	ldr	r2, [r7, #0]
 8010ad4:	f7fe f8ce 	bl	800ec74 <xQueueGenericSendFromISR>
 8010ad8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3728      	adds	r7, #40	@ 0x28
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	24033b78 	.word	0x24033b78

08010ae8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b088      	sub	sp, #32
 8010aec:	af02      	add	r7, sp, #8
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010af2:	4b23      	ldr	r3, [pc, #140]	@ (8010b80 <prvProcessExpiredTimer+0x98>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	68db      	ldr	r3, [r3, #12]
 8010afa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	3304      	adds	r3, #4
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7fd fd8d 	bl	800e620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010b0c:	f003 0304 	and.w	r3, r3, #4
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d023      	beq.n	8010b5c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	699a      	ldr	r2, [r3, #24]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	18d1      	adds	r1, r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	683a      	ldr	r2, [r7, #0]
 8010b20:	6978      	ldr	r0, [r7, #20]
 8010b22:	f000 f8d5 	bl	8010cd0 <prvInsertTimerInActiveList>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d020      	beq.n	8010b6e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	9300      	str	r3, [sp, #0]
 8010b30:	2300      	movs	r3, #0
 8010b32:	687a      	ldr	r2, [r7, #4]
 8010b34:	2100      	movs	r1, #0
 8010b36:	6978      	ldr	r0, [r7, #20]
 8010b38:	f7ff ff88 	bl	8010a4c <xTimerGenericCommand>
 8010b3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d114      	bne.n	8010b6e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b48:	f383 8811 	msr	BASEPRI, r3
 8010b4c:	f3bf 8f6f 	isb	sy
 8010b50:	f3bf 8f4f 	dsb	sy
 8010b54:	60fb      	str	r3, [r7, #12]
}
 8010b56:	bf00      	nop
 8010b58:	bf00      	nop
 8010b5a:	e7fd      	b.n	8010b58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010b62:	f023 0301 	bic.w	r3, r3, #1
 8010b66:	b2da      	uxtb	r2, r3
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	6a1b      	ldr	r3, [r3, #32]
 8010b72:	6978      	ldr	r0, [r7, #20]
 8010b74:	4798      	blx	r3
}
 8010b76:	bf00      	nop
 8010b78:	3718      	adds	r7, #24
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	24033b70 	.word	0x24033b70

08010b84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b084      	sub	sp, #16
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b8c:	f107 0308 	add.w	r3, r7, #8
 8010b90:	4618      	mov	r0, r3
 8010b92:	f000 f859 	bl	8010c48 <prvGetNextExpireTime>
 8010b96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f000 f805 	bl	8010bac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010ba2:	f000 f8d7 	bl	8010d54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010ba6:	bf00      	nop
 8010ba8:	e7f0      	b.n	8010b8c <prvTimerTask+0x8>
	...

08010bac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010bb6:	f7fe fed7 	bl	800f968 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010bba:	f107 0308 	add.w	r3, r7, #8
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f000 f866 	bl	8010c90 <prvSampleTimeNow>
 8010bc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d130      	bne.n	8010c2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d10a      	bne.n	8010be8 <prvProcessTimerOrBlockTask+0x3c>
 8010bd2:	687a      	ldr	r2, [r7, #4]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d806      	bhi.n	8010be8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010bda:	f7fe fed3 	bl	800f984 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010bde:	68f9      	ldr	r1, [r7, #12]
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7ff ff81 	bl	8010ae8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010be6:	e024      	b.n	8010c32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d008      	beq.n	8010c00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010bee:	4b13      	ldr	r3, [pc, #76]	@ (8010c3c <prvProcessTimerOrBlockTask+0x90>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d101      	bne.n	8010bfc <prvProcessTimerOrBlockTask+0x50>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e000      	b.n	8010bfe <prvProcessTimerOrBlockTask+0x52>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010c00:	4b0f      	ldr	r3, [pc, #60]	@ (8010c40 <prvProcessTimerOrBlockTask+0x94>)
 8010c02:	6818      	ldr	r0, [r3, #0]
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	1ad3      	subs	r3, r2, r3
 8010c0a:	683a      	ldr	r2, [r7, #0]
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	f7fe fc13 	bl	800f438 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010c12:	f7fe feb7 	bl	800f984 <xTaskResumeAll>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10a      	bne.n	8010c32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010c1c:	4b09      	ldr	r3, [pc, #36]	@ (8010c44 <prvProcessTimerOrBlockTask+0x98>)
 8010c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c22:	601a      	str	r2, [r3, #0]
 8010c24:	f3bf 8f4f 	dsb	sy
 8010c28:	f3bf 8f6f 	isb	sy
}
 8010c2c:	e001      	b.n	8010c32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010c2e:	f7fe fea9 	bl	800f984 <xTaskResumeAll>
}
 8010c32:	bf00      	nop
 8010c34:	3710      	adds	r7, #16
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	24033b74 	.word	0x24033b74
 8010c40:	24033b78 	.word	0x24033b78
 8010c44:	e000ed04 	.word	0xe000ed04

08010c48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b085      	sub	sp, #20
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010c50:	4b0e      	ldr	r3, [pc, #56]	@ (8010c8c <prvGetNextExpireTime+0x44>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d101      	bne.n	8010c5e <prvGetNextExpireTime+0x16>
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	e000      	b.n	8010c60 <prvGetNextExpireTime+0x18>
 8010c5e:	2200      	movs	r2, #0
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d105      	bne.n	8010c78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c6c:	4b07      	ldr	r3, [pc, #28]	@ (8010c8c <prvGetNextExpireTime+0x44>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	60fb      	str	r3, [r7, #12]
 8010c76:	e001      	b.n	8010c7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3714      	adds	r7, #20
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	24033b70 	.word	0x24033b70

08010c90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010c98:	f7fe ff12 	bl	800fac0 <xTaskGetTickCount>
 8010c9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8010ccc <prvSampleTimeNow+0x3c>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	68fa      	ldr	r2, [r7, #12]
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d205      	bcs.n	8010cb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010ca8:	f000 f93a 	bl	8010f20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2201      	movs	r2, #1
 8010cb0:	601a      	str	r2, [r3, #0]
 8010cb2:	e002      	b.n	8010cba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010cba:	4a04      	ldr	r2, [pc, #16]	@ (8010ccc <prvSampleTimeNow+0x3c>)
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3710      	adds	r7, #16
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	24033b80 	.word	0x24033b80

08010cd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b086      	sub	sp, #24
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	60b9      	str	r1, [r7, #8]
 8010cda:	607a      	str	r2, [r7, #4]
 8010cdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	68fa      	ldr	r2, [r7, #12]
 8010cec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010cee:	68ba      	ldr	r2, [r7, #8]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d812      	bhi.n	8010d1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	1ad2      	subs	r2, r2, r3
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	699b      	ldr	r3, [r3, #24]
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d302      	bcc.n	8010d0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010d04:	2301      	movs	r3, #1
 8010d06:	617b      	str	r3, [r7, #20]
 8010d08:	e01b      	b.n	8010d42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010d0a:	4b10      	ldr	r3, [pc, #64]	@ (8010d4c <prvInsertTimerInActiveList+0x7c>)
 8010d0c:	681a      	ldr	r2, [r3, #0]
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	3304      	adds	r3, #4
 8010d12:	4619      	mov	r1, r3
 8010d14:	4610      	mov	r0, r2
 8010d16:	f7fd fc4a 	bl	800e5ae <vListInsert>
 8010d1a:	e012      	b.n	8010d42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d206      	bcs.n	8010d32 <prvInsertTimerInActiveList+0x62>
 8010d24:	68ba      	ldr	r2, [r7, #8]
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d302      	bcc.n	8010d32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	617b      	str	r3, [r7, #20]
 8010d30:	e007      	b.n	8010d42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010d32:	4b07      	ldr	r3, [pc, #28]	@ (8010d50 <prvInsertTimerInActiveList+0x80>)
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	3304      	adds	r3, #4
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	4610      	mov	r0, r2
 8010d3e:	f7fd fc36 	bl	800e5ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010d42:	697b      	ldr	r3, [r7, #20]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3718      	adds	r7, #24
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	24033b74 	.word	0x24033b74
 8010d50:	24033b70 	.word	0x24033b70

08010d54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b08e      	sub	sp, #56	@ 0x38
 8010d58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d5a:	e0ce      	b.n	8010efa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	da19      	bge.n	8010d96 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010d62:	1d3b      	adds	r3, r7, #4
 8010d64:	3304      	adds	r3, #4
 8010d66:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d10b      	bne.n	8010d86 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d72:	f383 8811 	msr	BASEPRI, r3
 8010d76:	f3bf 8f6f 	isb	sy
 8010d7a:	f3bf 8f4f 	dsb	sy
 8010d7e:	61fb      	str	r3, [r7, #28]
}
 8010d80:	bf00      	nop
 8010d82:	bf00      	nop
 8010d84:	e7fd      	b.n	8010d82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d8c:	6850      	ldr	r0, [r2, #4]
 8010d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d90:	6892      	ldr	r2, [r2, #8]
 8010d92:	4611      	mov	r1, r2
 8010d94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	f2c0 80ae 	blt.w	8010efa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da4:	695b      	ldr	r3, [r3, #20]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d004      	beq.n	8010db4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dac:	3304      	adds	r3, #4
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7fd fc36 	bl	800e620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010db4:	463b      	mov	r3, r7
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7ff ff6a 	bl	8010c90 <prvSampleTimeNow>
 8010dbc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2b09      	cmp	r3, #9
 8010dc2:	f200 8097 	bhi.w	8010ef4 <prvProcessReceivedCommands+0x1a0>
 8010dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8010dcc <prvProcessReceivedCommands+0x78>)
 8010dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dcc:	08010df5 	.word	0x08010df5
 8010dd0:	08010df5 	.word	0x08010df5
 8010dd4:	08010df5 	.word	0x08010df5
 8010dd8:	08010e6b 	.word	0x08010e6b
 8010ddc:	08010e7f 	.word	0x08010e7f
 8010de0:	08010ecb 	.word	0x08010ecb
 8010de4:	08010df5 	.word	0x08010df5
 8010de8:	08010df5 	.word	0x08010df5
 8010dec:	08010e6b 	.word	0x08010e6b
 8010df0:	08010e7f 	.word	0x08010e7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010df6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010dfa:	f043 0301 	orr.w	r3, r3, #1
 8010dfe:	b2da      	uxtb	r2, r3
 8010e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e0a:	699b      	ldr	r3, [r3, #24]
 8010e0c:	18d1      	adds	r1, r2, r3
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e14:	f7ff ff5c 	bl	8010cd0 <prvInsertTimerInActiveList>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d06c      	beq.n	8010ef8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e20:	6a1b      	ldr	r3, [r3, #32]
 8010e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e2c:	f003 0304 	and.w	r3, r3, #4
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d061      	beq.n	8010ef8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010e34:	68ba      	ldr	r2, [r7, #8]
 8010e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e38:	699b      	ldr	r3, [r3, #24]
 8010e3a:	441a      	add	r2, r3
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	9300      	str	r3, [sp, #0]
 8010e40:	2300      	movs	r3, #0
 8010e42:	2100      	movs	r1, #0
 8010e44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e46:	f7ff fe01 	bl	8010a4c <xTimerGenericCommand>
 8010e4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010e4c:	6a3b      	ldr	r3, [r7, #32]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d152      	bne.n	8010ef8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e56:	f383 8811 	msr	BASEPRI, r3
 8010e5a:	f3bf 8f6f 	isb	sy
 8010e5e:	f3bf 8f4f 	dsb	sy
 8010e62:	61bb      	str	r3, [r7, #24]
}
 8010e64:	bf00      	nop
 8010e66:	bf00      	nop
 8010e68:	e7fd      	b.n	8010e66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e70:	f023 0301 	bic.w	r3, r3, #1
 8010e74:	b2da      	uxtb	r2, r3
 8010e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010e7c:	e03d      	b.n	8010efa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e84:	f043 0301 	orr.w	r3, r3, #1
 8010e88:	b2da      	uxtb	r2, r3
 8010e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010e90:	68ba      	ldr	r2, [r7, #8]
 8010e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e98:	699b      	ldr	r3, [r3, #24]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d10b      	bne.n	8010eb6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ea2:	f383 8811 	msr	BASEPRI, r3
 8010ea6:	f3bf 8f6f 	isb	sy
 8010eaa:	f3bf 8f4f 	dsb	sy
 8010eae:	617b      	str	r3, [r7, #20]
}
 8010eb0:	bf00      	nop
 8010eb2:	bf00      	nop
 8010eb4:	e7fd      	b.n	8010eb2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eb8:	699a      	ldr	r2, [r3, #24]
 8010eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ebc:	18d1      	adds	r1, r2, r3
 8010ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ec4:	f7ff ff04 	bl	8010cd0 <prvInsertTimerInActiveList>
					break;
 8010ec8:	e017      	b.n	8010efa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010ed0:	f003 0302 	and.w	r3, r3, #2
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d103      	bne.n	8010ee0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010ed8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010eda:	f000 fbe5 	bl	80116a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010ede:	e00c      	b.n	8010efa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010ee6:	f023 0301 	bic.w	r3, r3, #1
 8010eea:	b2da      	uxtb	r2, r3
 8010eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010ef2:	e002      	b.n	8010efa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010ef4:	bf00      	nop
 8010ef6:	e000      	b.n	8010efa <prvProcessReceivedCommands+0x1a6>
					break;
 8010ef8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010efa:	4b08      	ldr	r3, [pc, #32]	@ (8010f1c <prvProcessReceivedCommands+0x1c8>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	1d39      	adds	r1, r7, #4
 8010f00:	2200      	movs	r2, #0
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7fd ff54 	bl	800edb0 <xQueueReceive>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	f47f af26 	bne.w	8010d5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010f10:	bf00      	nop
 8010f12:	bf00      	nop
 8010f14:	3730      	adds	r7, #48	@ 0x30
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	24033b78 	.word	0x24033b78

08010f20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b088      	sub	sp, #32
 8010f24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f26:	e049      	b.n	8010fbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010f28:	4b2e      	ldr	r3, [pc, #184]	@ (8010fe4 <prvSwitchTimerLists+0xc4>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	68db      	ldr	r3, [r3, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f32:	4b2c      	ldr	r3, [pc, #176]	@ (8010fe4 <prvSwitchTimerLists+0xc4>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	68db      	ldr	r3, [r3, #12]
 8010f38:	68db      	ldr	r3, [r3, #12]
 8010f3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	3304      	adds	r3, #4
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fd fb6d 	bl	800e620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	6a1b      	ldr	r3, [r3, #32]
 8010f4a:	68f8      	ldr	r0, [r7, #12]
 8010f4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f54:	f003 0304 	and.w	r3, r3, #4
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d02f      	beq.n	8010fbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	699b      	ldr	r3, [r3, #24]
 8010f60:	693a      	ldr	r2, [r7, #16]
 8010f62:	4413      	add	r3, r2
 8010f64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010f66:	68ba      	ldr	r2, [r7, #8]
 8010f68:	693b      	ldr	r3, [r7, #16]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d90e      	bls.n	8010f8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	68ba      	ldr	r2, [r7, #8]
 8010f72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	68fa      	ldr	r2, [r7, #12]
 8010f78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8010fe4 <prvSwitchTimerLists+0xc4>)
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	3304      	adds	r3, #4
 8010f82:	4619      	mov	r1, r3
 8010f84:	4610      	mov	r0, r2
 8010f86:	f7fd fb12 	bl	800e5ae <vListInsert>
 8010f8a:	e017      	b.n	8010fbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	2300      	movs	r3, #0
 8010f92:	693a      	ldr	r2, [r7, #16]
 8010f94:	2100      	movs	r1, #0
 8010f96:	68f8      	ldr	r0, [r7, #12]
 8010f98:	f7ff fd58 	bl	8010a4c <xTimerGenericCommand>
 8010f9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d10b      	bne.n	8010fbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fa8:	f383 8811 	msr	BASEPRI, r3
 8010fac:	f3bf 8f6f 	isb	sy
 8010fb0:	f3bf 8f4f 	dsb	sy
 8010fb4:	603b      	str	r3, [r7, #0]
}
 8010fb6:	bf00      	nop
 8010fb8:	bf00      	nop
 8010fba:	e7fd      	b.n	8010fb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010fbc:	4b09      	ldr	r3, [pc, #36]	@ (8010fe4 <prvSwitchTimerLists+0xc4>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d1b0      	bne.n	8010f28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010fc6:	4b07      	ldr	r3, [pc, #28]	@ (8010fe4 <prvSwitchTimerLists+0xc4>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010fcc:	4b06      	ldr	r3, [pc, #24]	@ (8010fe8 <prvSwitchTimerLists+0xc8>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	4a04      	ldr	r2, [pc, #16]	@ (8010fe4 <prvSwitchTimerLists+0xc4>)
 8010fd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010fd4:	4a04      	ldr	r2, [pc, #16]	@ (8010fe8 <prvSwitchTimerLists+0xc8>)
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	6013      	str	r3, [r2, #0]
}
 8010fda:	bf00      	nop
 8010fdc:	3718      	adds	r7, #24
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	24033b70 	.word	0x24033b70
 8010fe8:	24033b74 	.word	0x24033b74

08010fec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010ff2:	f000 f969 	bl	80112c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010ff6:	4b15      	ldr	r3, [pc, #84]	@ (801104c <prvCheckForValidListAndQueue+0x60>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d120      	bne.n	8011040 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010ffe:	4814      	ldr	r0, [pc, #80]	@ (8011050 <prvCheckForValidListAndQueue+0x64>)
 8011000:	f7fd fa84 	bl	800e50c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011004:	4813      	ldr	r0, [pc, #76]	@ (8011054 <prvCheckForValidListAndQueue+0x68>)
 8011006:	f7fd fa81 	bl	800e50c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801100a:	4b13      	ldr	r3, [pc, #76]	@ (8011058 <prvCheckForValidListAndQueue+0x6c>)
 801100c:	4a10      	ldr	r2, [pc, #64]	@ (8011050 <prvCheckForValidListAndQueue+0x64>)
 801100e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011010:	4b12      	ldr	r3, [pc, #72]	@ (801105c <prvCheckForValidListAndQueue+0x70>)
 8011012:	4a10      	ldr	r2, [pc, #64]	@ (8011054 <prvCheckForValidListAndQueue+0x68>)
 8011014:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011016:	2300      	movs	r3, #0
 8011018:	9300      	str	r3, [sp, #0]
 801101a:	4b11      	ldr	r3, [pc, #68]	@ (8011060 <prvCheckForValidListAndQueue+0x74>)
 801101c:	4a11      	ldr	r2, [pc, #68]	@ (8011064 <prvCheckForValidListAndQueue+0x78>)
 801101e:	2110      	movs	r1, #16
 8011020:	200a      	movs	r0, #10
 8011022:	f7fd fb91 	bl	800e748 <xQueueGenericCreateStatic>
 8011026:	4603      	mov	r3, r0
 8011028:	4a08      	ldr	r2, [pc, #32]	@ (801104c <prvCheckForValidListAndQueue+0x60>)
 801102a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801102c:	4b07      	ldr	r3, [pc, #28]	@ (801104c <prvCheckForValidListAndQueue+0x60>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d005      	beq.n	8011040 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011034:	4b05      	ldr	r3, [pc, #20]	@ (801104c <prvCheckForValidListAndQueue+0x60>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	490b      	ldr	r1, [pc, #44]	@ (8011068 <prvCheckForValidListAndQueue+0x7c>)
 801103a:	4618      	mov	r0, r3
 801103c:	f7fe f9d2 	bl	800f3e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011040:	f000 f974 	bl	801132c <vPortExitCritical>
}
 8011044:	bf00      	nop
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	24033b78 	.word	0x24033b78
 8011050:	24033b48 	.word	0x24033b48
 8011054:	24033b5c 	.word	0x24033b5c
 8011058:	24033b70 	.word	0x24033b70
 801105c:	24033b74 	.word	0x24033b74
 8011060:	24033c24 	.word	0x24033c24
 8011064:	24033b84 	.word	0x24033b84
 8011068:	08023494 	.word	0x08023494

0801106c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801106c:	b480      	push	{r7}
 801106e:	b085      	sub	sp, #20
 8011070:	af00      	add	r7, sp, #0
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	60b9      	str	r1, [r7, #8]
 8011076:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	3b04      	subs	r3, #4
 801107c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	3b04      	subs	r3, #4
 801108a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	f023 0201 	bic.w	r2, r3, #1
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	3b04      	subs	r3, #4
 801109a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801109c:	4a0c      	ldr	r2, [pc, #48]	@ (80110d0 <pxPortInitialiseStack+0x64>)
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	3b14      	subs	r3, #20
 80110a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	3b04      	subs	r3, #4
 80110b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f06f 0202 	mvn.w	r2, #2
 80110ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	3b20      	subs	r3, #32
 80110c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80110c2:	68fb      	ldr	r3, [r7, #12]
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3714      	adds	r7, #20
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr
 80110d0:	080110d5 	.word	0x080110d5

080110d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80110d4:	b480      	push	{r7}
 80110d6:	b085      	sub	sp, #20
 80110d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80110da:	2300      	movs	r3, #0
 80110dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80110de:	4b13      	ldr	r3, [pc, #76]	@ (801112c <prvTaskExitError+0x58>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80110e6:	d00b      	beq.n	8011100 <prvTaskExitError+0x2c>
	__asm volatile
 80110e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ec:	f383 8811 	msr	BASEPRI, r3
 80110f0:	f3bf 8f6f 	isb	sy
 80110f4:	f3bf 8f4f 	dsb	sy
 80110f8:	60fb      	str	r3, [r7, #12]
}
 80110fa:	bf00      	nop
 80110fc:	bf00      	nop
 80110fe:	e7fd      	b.n	80110fc <prvTaskExitError+0x28>
	__asm volatile
 8011100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011104:	f383 8811 	msr	BASEPRI, r3
 8011108:	f3bf 8f6f 	isb	sy
 801110c:	f3bf 8f4f 	dsb	sy
 8011110:	60bb      	str	r3, [r7, #8]
}
 8011112:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011114:	bf00      	nop
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d0fc      	beq.n	8011116 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801111c:	bf00      	nop
 801111e:	bf00      	nop
 8011120:	3714      	adds	r7, #20
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	24000014 	.word	0x24000014

08011130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011130:	4b07      	ldr	r3, [pc, #28]	@ (8011150 <pxCurrentTCBConst2>)
 8011132:	6819      	ldr	r1, [r3, #0]
 8011134:	6808      	ldr	r0, [r1, #0]
 8011136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801113a:	f380 8809 	msr	PSP, r0
 801113e:	f3bf 8f6f 	isb	sy
 8011142:	f04f 0000 	mov.w	r0, #0
 8011146:	f380 8811 	msr	BASEPRI, r0
 801114a:	4770      	bx	lr
 801114c:	f3af 8000 	nop.w

08011150 <pxCurrentTCBConst2>:
 8011150:	24033648 	.word	0x24033648
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011154:	bf00      	nop
 8011156:	bf00      	nop

08011158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011158:	4808      	ldr	r0, [pc, #32]	@ (801117c <prvPortStartFirstTask+0x24>)
 801115a:	6800      	ldr	r0, [r0, #0]
 801115c:	6800      	ldr	r0, [r0, #0]
 801115e:	f380 8808 	msr	MSP, r0
 8011162:	f04f 0000 	mov.w	r0, #0
 8011166:	f380 8814 	msr	CONTROL, r0
 801116a:	b662      	cpsie	i
 801116c:	b661      	cpsie	f
 801116e:	f3bf 8f4f 	dsb	sy
 8011172:	f3bf 8f6f 	isb	sy
 8011176:	df00      	svc	0
 8011178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801117a:	bf00      	nop
 801117c:	e000ed08 	.word	0xe000ed08

08011180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b086      	sub	sp, #24
 8011184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011186:	4b47      	ldr	r3, [pc, #284]	@ (80112a4 <xPortStartScheduler+0x124>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	4a47      	ldr	r2, [pc, #284]	@ (80112a8 <xPortStartScheduler+0x128>)
 801118c:	4293      	cmp	r3, r2
 801118e:	d10b      	bne.n	80111a8 <xPortStartScheduler+0x28>
	__asm volatile
 8011190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011194:	f383 8811 	msr	BASEPRI, r3
 8011198:	f3bf 8f6f 	isb	sy
 801119c:	f3bf 8f4f 	dsb	sy
 80111a0:	613b      	str	r3, [r7, #16]
}
 80111a2:	bf00      	nop
 80111a4:	bf00      	nop
 80111a6:	e7fd      	b.n	80111a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80111a8:	4b3e      	ldr	r3, [pc, #248]	@ (80112a4 <xPortStartScheduler+0x124>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	4a3f      	ldr	r2, [pc, #252]	@ (80112ac <xPortStartScheduler+0x12c>)
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d10b      	bne.n	80111ca <xPortStartScheduler+0x4a>
	__asm volatile
 80111b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111b6:	f383 8811 	msr	BASEPRI, r3
 80111ba:	f3bf 8f6f 	isb	sy
 80111be:	f3bf 8f4f 	dsb	sy
 80111c2:	60fb      	str	r3, [r7, #12]
}
 80111c4:	bf00      	nop
 80111c6:	bf00      	nop
 80111c8:	e7fd      	b.n	80111c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80111ca:	4b39      	ldr	r3, [pc, #228]	@ (80112b0 <xPortStartScheduler+0x130>)
 80111cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	22ff      	movs	r2, #255	@ 0xff
 80111da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80111e4:	78fb      	ldrb	r3, [r7, #3]
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80111ec:	b2da      	uxtb	r2, r3
 80111ee:	4b31      	ldr	r3, [pc, #196]	@ (80112b4 <xPortStartScheduler+0x134>)
 80111f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80111f2:	4b31      	ldr	r3, [pc, #196]	@ (80112b8 <xPortStartScheduler+0x138>)
 80111f4:	2207      	movs	r2, #7
 80111f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80111f8:	e009      	b.n	801120e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80111fa:	4b2f      	ldr	r3, [pc, #188]	@ (80112b8 <xPortStartScheduler+0x138>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	3b01      	subs	r3, #1
 8011200:	4a2d      	ldr	r2, [pc, #180]	@ (80112b8 <xPortStartScheduler+0x138>)
 8011202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011204:	78fb      	ldrb	r3, [r7, #3]
 8011206:	b2db      	uxtb	r3, r3
 8011208:	005b      	lsls	r3, r3, #1
 801120a:	b2db      	uxtb	r3, r3
 801120c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801120e:	78fb      	ldrb	r3, [r7, #3]
 8011210:	b2db      	uxtb	r3, r3
 8011212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011216:	2b80      	cmp	r3, #128	@ 0x80
 8011218:	d0ef      	beq.n	80111fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801121a:	4b27      	ldr	r3, [pc, #156]	@ (80112b8 <xPortStartScheduler+0x138>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f1c3 0307 	rsb	r3, r3, #7
 8011222:	2b04      	cmp	r3, #4
 8011224:	d00b      	beq.n	801123e <xPortStartScheduler+0xbe>
	__asm volatile
 8011226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801122a:	f383 8811 	msr	BASEPRI, r3
 801122e:	f3bf 8f6f 	isb	sy
 8011232:	f3bf 8f4f 	dsb	sy
 8011236:	60bb      	str	r3, [r7, #8]
}
 8011238:	bf00      	nop
 801123a:	bf00      	nop
 801123c:	e7fd      	b.n	801123a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801123e:	4b1e      	ldr	r3, [pc, #120]	@ (80112b8 <xPortStartScheduler+0x138>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	021b      	lsls	r3, r3, #8
 8011244:	4a1c      	ldr	r2, [pc, #112]	@ (80112b8 <xPortStartScheduler+0x138>)
 8011246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011248:	4b1b      	ldr	r3, [pc, #108]	@ (80112b8 <xPortStartScheduler+0x138>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011250:	4a19      	ldr	r2, [pc, #100]	@ (80112b8 <xPortStartScheduler+0x138>)
 8011252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	b2da      	uxtb	r2, r3
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801125c:	4b17      	ldr	r3, [pc, #92]	@ (80112bc <xPortStartScheduler+0x13c>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	4a16      	ldr	r2, [pc, #88]	@ (80112bc <xPortStartScheduler+0x13c>)
 8011262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011268:	4b14      	ldr	r3, [pc, #80]	@ (80112bc <xPortStartScheduler+0x13c>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4a13      	ldr	r2, [pc, #76]	@ (80112bc <xPortStartScheduler+0x13c>)
 801126e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011274:	f000 f8da 	bl	801142c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011278:	4b11      	ldr	r3, [pc, #68]	@ (80112c0 <xPortStartScheduler+0x140>)
 801127a:	2200      	movs	r2, #0
 801127c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801127e:	f000 f8f9 	bl	8011474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011282:	4b10      	ldr	r3, [pc, #64]	@ (80112c4 <xPortStartScheduler+0x144>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	4a0f      	ldr	r2, [pc, #60]	@ (80112c4 <xPortStartScheduler+0x144>)
 8011288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801128c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801128e:	f7ff ff63 	bl	8011158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011292:	f7fe fcf1 	bl	800fc78 <vTaskSwitchContext>
	prvTaskExitError();
 8011296:	f7ff ff1d 	bl	80110d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801129a:	2300      	movs	r3, #0
}
 801129c:	4618      	mov	r0, r3
 801129e:	3718      	adds	r7, #24
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	e000ed00 	.word	0xe000ed00
 80112a8:	410fc271 	.word	0x410fc271
 80112ac:	410fc270 	.word	0x410fc270
 80112b0:	e000e400 	.word	0xe000e400
 80112b4:	24033c74 	.word	0x24033c74
 80112b8:	24033c78 	.word	0x24033c78
 80112bc:	e000ed20 	.word	0xe000ed20
 80112c0:	24000014 	.word	0x24000014
 80112c4:	e000ef34 	.word	0xe000ef34

080112c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
	__asm volatile
 80112ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112d2:	f383 8811 	msr	BASEPRI, r3
 80112d6:	f3bf 8f6f 	isb	sy
 80112da:	f3bf 8f4f 	dsb	sy
 80112de:	607b      	str	r3, [r7, #4]
}
 80112e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80112e2:	4b10      	ldr	r3, [pc, #64]	@ (8011324 <vPortEnterCritical+0x5c>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	3301      	adds	r3, #1
 80112e8:	4a0e      	ldr	r2, [pc, #56]	@ (8011324 <vPortEnterCritical+0x5c>)
 80112ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80112ec:	4b0d      	ldr	r3, [pc, #52]	@ (8011324 <vPortEnterCritical+0x5c>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d110      	bne.n	8011316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80112f4:	4b0c      	ldr	r3, [pc, #48]	@ (8011328 <vPortEnterCritical+0x60>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	b2db      	uxtb	r3, r3
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d00b      	beq.n	8011316 <vPortEnterCritical+0x4e>
	__asm volatile
 80112fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011302:	f383 8811 	msr	BASEPRI, r3
 8011306:	f3bf 8f6f 	isb	sy
 801130a:	f3bf 8f4f 	dsb	sy
 801130e:	603b      	str	r3, [r7, #0]
}
 8011310:	bf00      	nop
 8011312:	bf00      	nop
 8011314:	e7fd      	b.n	8011312 <vPortEnterCritical+0x4a>
	}
}
 8011316:	bf00      	nop
 8011318:	370c      	adds	r7, #12
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr
 8011322:	bf00      	nop
 8011324:	24000014 	.word	0x24000014
 8011328:	e000ed04 	.word	0xe000ed04

0801132c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801132c:	b480      	push	{r7}
 801132e:	b083      	sub	sp, #12
 8011330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011332:	4b12      	ldr	r3, [pc, #72]	@ (801137c <vPortExitCritical+0x50>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d10b      	bne.n	8011352 <vPortExitCritical+0x26>
	__asm volatile
 801133a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801133e:	f383 8811 	msr	BASEPRI, r3
 8011342:	f3bf 8f6f 	isb	sy
 8011346:	f3bf 8f4f 	dsb	sy
 801134a:	607b      	str	r3, [r7, #4]
}
 801134c:	bf00      	nop
 801134e:	bf00      	nop
 8011350:	e7fd      	b.n	801134e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011352:	4b0a      	ldr	r3, [pc, #40]	@ (801137c <vPortExitCritical+0x50>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	3b01      	subs	r3, #1
 8011358:	4a08      	ldr	r2, [pc, #32]	@ (801137c <vPortExitCritical+0x50>)
 801135a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801135c:	4b07      	ldr	r3, [pc, #28]	@ (801137c <vPortExitCritical+0x50>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d105      	bne.n	8011370 <vPortExitCritical+0x44>
 8011364:	2300      	movs	r3, #0
 8011366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	f383 8811 	msr	BASEPRI, r3
}
 801136e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011370:	bf00      	nop
 8011372:	370c      	adds	r7, #12
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr
 801137c:	24000014 	.word	0x24000014

08011380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011380:	f3ef 8009 	mrs	r0, PSP
 8011384:	f3bf 8f6f 	isb	sy
 8011388:	4b15      	ldr	r3, [pc, #84]	@ (80113e0 <pxCurrentTCBConst>)
 801138a:	681a      	ldr	r2, [r3, #0]
 801138c:	f01e 0f10 	tst.w	lr, #16
 8011390:	bf08      	it	eq
 8011392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801139a:	6010      	str	r0, [r2, #0]
 801139c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80113a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80113a4:	f380 8811 	msr	BASEPRI, r0
 80113a8:	f3bf 8f4f 	dsb	sy
 80113ac:	f3bf 8f6f 	isb	sy
 80113b0:	f7fe fc62 	bl	800fc78 <vTaskSwitchContext>
 80113b4:	f04f 0000 	mov.w	r0, #0
 80113b8:	f380 8811 	msr	BASEPRI, r0
 80113bc:	bc09      	pop	{r0, r3}
 80113be:	6819      	ldr	r1, [r3, #0]
 80113c0:	6808      	ldr	r0, [r1, #0]
 80113c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c6:	f01e 0f10 	tst.w	lr, #16
 80113ca:	bf08      	it	eq
 80113cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80113d0:	f380 8809 	msr	PSP, r0
 80113d4:	f3bf 8f6f 	isb	sy
 80113d8:	4770      	bx	lr
 80113da:	bf00      	nop
 80113dc:	f3af 8000 	nop.w

080113e0 <pxCurrentTCBConst>:
 80113e0:	24033648 	.word	0x24033648
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80113e4:	bf00      	nop
 80113e6:	bf00      	nop

080113e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
	__asm volatile
 80113ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113f2:	f383 8811 	msr	BASEPRI, r3
 80113f6:	f3bf 8f6f 	isb	sy
 80113fa:	f3bf 8f4f 	dsb	sy
 80113fe:	607b      	str	r3, [r7, #4]
}
 8011400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011402:	f7fe fb7f 	bl	800fb04 <xTaskIncrementTick>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	d003      	beq.n	8011414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801140c:	4b06      	ldr	r3, [pc, #24]	@ (8011428 <xPortSysTickHandler+0x40>)
 801140e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011412:	601a      	str	r2, [r3, #0]
 8011414:	2300      	movs	r3, #0
 8011416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	f383 8811 	msr	BASEPRI, r3
}
 801141e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011420:	bf00      	nop
 8011422:	3708      	adds	r7, #8
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}
 8011428:	e000ed04 	.word	0xe000ed04

0801142c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801142c:	b480      	push	{r7}
 801142e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011430:	4b0b      	ldr	r3, [pc, #44]	@ (8011460 <vPortSetupTimerInterrupt+0x34>)
 8011432:	2200      	movs	r2, #0
 8011434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011436:	4b0b      	ldr	r3, [pc, #44]	@ (8011464 <vPortSetupTimerInterrupt+0x38>)
 8011438:	2200      	movs	r2, #0
 801143a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801143c:	4b0a      	ldr	r3, [pc, #40]	@ (8011468 <vPortSetupTimerInterrupt+0x3c>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	4a0a      	ldr	r2, [pc, #40]	@ (801146c <vPortSetupTimerInterrupt+0x40>)
 8011442:	fba2 2303 	umull	r2, r3, r2, r3
 8011446:	099b      	lsrs	r3, r3, #6
 8011448:	4a09      	ldr	r2, [pc, #36]	@ (8011470 <vPortSetupTimerInterrupt+0x44>)
 801144a:	3b01      	subs	r3, #1
 801144c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801144e:	4b04      	ldr	r3, [pc, #16]	@ (8011460 <vPortSetupTimerInterrupt+0x34>)
 8011450:	2207      	movs	r2, #7
 8011452:	601a      	str	r2, [r3, #0]
}
 8011454:	bf00      	nop
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr
 801145e:	bf00      	nop
 8011460:	e000e010 	.word	0xe000e010
 8011464:	e000e018 	.word	0xe000e018
 8011468:	24000004 	.word	0x24000004
 801146c:	10624dd3 	.word	0x10624dd3
 8011470:	e000e014 	.word	0xe000e014

08011474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011484 <vPortEnableVFP+0x10>
 8011478:	6801      	ldr	r1, [r0, #0]
 801147a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801147e:	6001      	str	r1, [r0, #0]
 8011480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011482:	bf00      	nop
 8011484:	e000ed88 	.word	0xe000ed88

08011488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011488:	b480      	push	{r7}
 801148a:	b085      	sub	sp, #20
 801148c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801148e:	f3ef 8305 	mrs	r3, IPSR
 8011492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	2b0f      	cmp	r3, #15
 8011498:	d915      	bls.n	80114c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801149a:	4a18      	ldr	r2, [pc, #96]	@ (80114fc <vPortValidateInterruptPriority+0x74>)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	4413      	add	r3, r2
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80114a4:	4b16      	ldr	r3, [pc, #88]	@ (8011500 <vPortValidateInterruptPriority+0x78>)
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	7afa      	ldrb	r2, [r7, #11]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d20b      	bcs.n	80114c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80114ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114b2:	f383 8811 	msr	BASEPRI, r3
 80114b6:	f3bf 8f6f 	isb	sy
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	607b      	str	r3, [r7, #4]
}
 80114c0:	bf00      	nop
 80114c2:	bf00      	nop
 80114c4:	e7fd      	b.n	80114c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80114c6:	4b0f      	ldr	r3, [pc, #60]	@ (8011504 <vPortValidateInterruptPriority+0x7c>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80114ce:	4b0e      	ldr	r3, [pc, #56]	@ (8011508 <vPortValidateInterruptPriority+0x80>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d90b      	bls.n	80114ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80114d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114da:	f383 8811 	msr	BASEPRI, r3
 80114de:	f3bf 8f6f 	isb	sy
 80114e2:	f3bf 8f4f 	dsb	sy
 80114e6:	603b      	str	r3, [r7, #0]
}
 80114e8:	bf00      	nop
 80114ea:	bf00      	nop
 80114ec:	e7fd      	b.n	80114ea <vPortValidateInterruptPriority+0x62>
	}
 80114ee:	bf00      	nop
 80114f0:	3714      	adds	r7, #20
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr
 80114fa:	bf00      	nop
 80114fc:	e000e3f0 	.word	0xe000e3f0
 8011500:	24033c74 	.word	0x24033c74
 8011504:	e000ed0c 	.word	0xe000ed0c
 8011508:	24033c78 	.word	0x24033c78

0801150c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b08a      	sub	sp, #40	@ 0x28
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011514:	2300      	movs	r3, #0
 8011516:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011518:	f7fe fa26 	bl	800f968 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801151c:	4b5c      	ldr	r3, [pc, #368]	@ (8011690 <pvPortMalloc+0x184>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011524:	f000 f924 	bl	8011770 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011528:	4b5a      	ldr	r3, [pc, #360]	@ (8011694 <pvPortMalloc+0x188>)
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	4013      	ands	r3, r2
 8011530:	2b00      	cmp	r3, #0
 8011532:	f040 8095 	bne.w	8011660 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d01e      	beq.n	801157a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801153c:	2208      	movs	r2, #8
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	4413      	add	r3, r2
 8011542:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f003 0307 	and.w	r3, r3, #7
 801154a:	2b00      	cmp	r3, #0
 801154c:	d015      	beq.n	801157a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f023 0307 	bic.w	r3, r3, #7
 8011554:	3308      	adds	r3, #8
 8011556:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f003 0307 	and.w	r3, r3, #7
 801155e:	2b00      	cmp	r3, #0
 8011560:	d00b      	beq.n	801157a <pvPortMalloc+0x6e>
	__asm volatile
 8011562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011566:	f383 8811 	msr	BASEPRI, r3
 801156a:	f3bf 8f6f 	isb	sy
 801156e:	f3bf 8f4f 	dsb	sy
 8011572:	617b      	str	r3, [r7, #20]
}
 8011574:	bf00      	nop
 8011576:	bf00      	nop
 8011578:	e7fd      	b.n	8011576 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d06f      	beq.n	8011660 <pvPortMalloc+0x154>
 8011580:	4b45      	ldr	r3, [pc, #276]	@ (8011698 <pvPortMalloc+0x18c>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	429a      	cmp	r2, r3
 8011588:	d86a      	bhi.n	8011660 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801158a:	4b44      	ldr	r3, [pc, #272]	@ (801169c <pvPortMalloc+0x190>)
 801158c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801158e:	4b43      	ldr	r3, [pc, #268]	@ (801169c <pvPortMalloc+0x190>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011594:	e004      	b.n	80115a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d903      	bls.n	80115b2 <pvPortMalloc+0xa6>
 80115aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d1f1      	bne.n	8011596 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80115b2:	4b37      	ldr	r3, [pc, #220]	@ (8011690 <pvPortMalloc+0x184>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d051      	beq.n	8011660 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80115bc:	6a3b      	ldr	r3, [r7, #32]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	2208      	movs	r2, #8
 80115c2:	4413      	add	r3, r2
 80115c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80115c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	6a3b      	ldr	r3, [r7, #32]
 80115cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80115ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d0:	685a      	ldr	r2, [r3, #4]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	1ad2      	subs	r2, r2, r3
 80115d6:	2308      	movs	r3, #8
 80115d8:	005b      	lsls	r3, r3, #1
 80115da:	429a      	cmp	r2, r3
 80115dc:	d920      	bls.n	8011620 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80115de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	4413      	add	r3, r2
 80115e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80115e6:	69bb      	ldr	r3, [r7, #24]
 80115e8:	f003 0307 	and.w	r3, r3, #7
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00b      	beq.n	8011608 <pvPortMalloc+0xfc>
	__asm volatile
 80115f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115f4:	f383 8811 	msr	BASEPRI, r3
 80115f8:	f3bf 8f6f 	isb	sy
 80115fc:	f3bf 8f4f 	dsb	sy
 8011600:	613b      	str	r3, [r7, #16]
}
 8011602:	bf00      	nop
 8011604:	bf00      	nop
 8011606:	e7fd      	b.n	8011604 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801160a:	685a      	ldr	r2, [r3, #4]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	1ad2      	subs	r2, r2, r3
 8011610:	69bb      	ldr	r3, [r7, #24]
 8011612:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801161a:	69b8      	ldr	r0, [r7, #24]
 801161c:	f000 f90c 	bl	8011838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011620:	4b1d      	ldr	r3, [pc, #116]	@ (8011698 <pvPortMalloc+0x18c>)
 8011622:	681a      	ldr	r2, [r3, #0]
 8011624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	1ad3      	subs	r3, r2, r3
 801162a:	4a1b      	ldr	r2, [pc, #108]	@ (8011698 <pvPortMalloc+0x18c>)
 801162c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801162e:	4b1a      	ldr	r3, [pc, #104]	@ (8011698 <pvPortMalloc+0x18c>)
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	4b1b      	ldr	r3, [pc, #108]	@ (80116a0 <pvPortMalloc+0x194>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	429a      	cmp	r2, r3
 8011638:	d203      	bcs.n	8011642 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801163a:	4b17      	ldr	r3, [pc, #92]	@ (8011698 <pvPortMalloc+0x18c>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	4a18      	ldr	r2, [pc, #96]	@ (80116a0 <pvPortMalloc+0x194>)
 8011640:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011644:	685a      	ldr	r2, [r3, #4]
 8011646:	4b13      	ldr	r3, [pc, #76]	@ (8011694 <pvPortMalloc+0x188>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	431a      	orrs	r2, r3
 801164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801164e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011652:	2200      	movs	r2, #0
 8011654:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011656:	4b13      	ldr	r3, [pc, #76]	@ (80116a4 <pvPortMalloc+0x198>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	3301      	adds	r3, #1
 801165c:	4a11      	ldr	r2, [pc, #68]	@ (80116a4 <pvPortMalloc+0x198>)
 801165e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011660:	f7fe f990 	bl	800f984 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	f003 0307 	and.w	r3, r3, #7
 801166a:	2b00      	cmp	r3, #0
 801166c:	d00b      	beq.n	8011686 <pvPortMalloc+0x17a>
	__asm volatile
 801166e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011672:	f383 8811 	msr	BASEPRI, r3
 8011676:	f3bf 8f6f 	isb	sy
 801167a:	f3bf 8f4f 	dsb	sy
 801167e:	60fb      	str	r3, [r7, #12]
}
 8011680:	bf00      	nop
 8011682:	bf00      	nop
 8011684:	e7fd      	b.n	8011682 <pvPortMalloc+0x176>
	return pvReturn;
 8011686:	69fb      	ldr	r3, [r7, #28]
}
 8011688:	4618      	mov	r0, r3
 801168a:	3728      	adds	r7, #40	@ 0x28
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	240649c4 	.word	0x240649c4
 8011694:	240649d8 	.word	0x240649d8
 8011698:	240649c8 	.word	0x240649c8
 801169c:	240649bc 	.word	0x240649bc
 80116a0:	240649cc 	.word	0x240649cc
 80116a4:	240649d0 	.word	0x240649d0

080116a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b086      	sub	sp, #24
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d04f      	beq.n	801175a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80116ba:	2308      	movs	r3, #8
 80116bc:	425b      	negs	r3, r3
 80116be:	697a      	ldr	r2, [r7, #20]
 80116c0:	4413      	add	r3, r2
 80116c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80116c8:	693b      	ldr	r3, [r7, #16]
 80116ca:	685a      	ldr	r2, [r3, #4]
 80116cc:	4b25      	ldr	r3, [pc, #148]	@ (8011764 <vPortFree+0xbc>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	4013      	ands	r3, r2
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d10b      	bne.n	80116ee <vPortFree+0x46>
	__asm volatile
 80116d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116da:	f383 8811 	msr	BASEPRI, r3
 80116de:	f3bf 8f6f 	isb	sy
 80116e2:	f3bf 8f4f 	dsb	sy
 80116e6:	60fb      	str	r3, [r7, #12]
}
 80116e8:	bf00      	nop
 80116ea:	bf00      	nop
 80116ec:	e7fd      	b.n	80116ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00b      	beq.n	801170e <vPortFree+0x66>
	__asm volatile
 80116f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116fa:	f383 8811 	msr	BASEPRI, r3
 80116fe:	f3bf 8f6f 	isb	sy
 8011702:	f3bf 8f4f 	dsb	sy
 8011706:	60bb      	str	r3, [r7, #8]
}
 8011708:	bf00      	nop
 801170a:	bf00      	nop
 801170c:	e7fd      	b.n	801170a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	685a      	ldr	r2, [r3, #4]
 8011712:	4b14      	ldr	r3, [pc, #80]	@ (8011764 <vPortFree+0xbc>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	4013      	ands	r3, r2
 8011718:	2b00      	cmp	r3, #0
 801171a:	d01e      	beq.n	801175a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d11a      	bne.n	801175a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	685a      	ldr	r2, [r3, #4]
 8011728:	4b0e      	ldr	r3, [pc, #56]	@ (8011764 <vPortFree+0xbc>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	43db      	mvns	r3, r3
 801172e:	401a      	ands	r2, r3
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011734:	f7fe f918 	bl	800f968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	685a      	ldr	r2, [r3, #4]
 801173c:	4b0a      	ldr	r3, [pc, #40]	@ (8011768 <vPortFree+0xc0>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4413      	add	r3, r2
 8011742:	4a09      	ldr	r2, [pc, #36]	@ (8011768 <vPortFree+0xc0>)
 8011744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011746:	6938      	ldr	r0, [r7, #16]
 8011748:	f000 f876 	bl	8011838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801174c:	4b07      	ldr	r3, [pc, #28]	@ (801176c <vPortFree+0xc4>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	3301      	adds	r3, #1
 8011752:	4a06      	ldr	r2, [pc, #24]	@ (801176c <vPortFree+0xc4>)
 8011754:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011756:	f7fe f915 	bl	800f984 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801175a:	bf00      	nop
 801175c:	3718      	adds	r7, #24
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	240649d8 	.word	0x240649d8
 8011768:	240649c8 	.word	0x240649c8
 801176c:	240649d4 	.word	0x240649d4

08011770 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011770:	b480      	push	{r7}
 8011772:	b085      	sub	sp, #20
 8011774:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011776:	4b29      	ldr	r3, [pc, #164]	@ (801181c <prvHeapInit+0xac>)
 8011778:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801177a:	4b29      	ldr	r3, [pc, #164]	@ (8011820 <prvHeapInit+0xb0>)
 801177c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	f003 0307 	and.w	r3, r3, #7
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00c      	beq.n	80117a2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	3307      	adds	r3, #7
 801178c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	f023 0307 	bic.w	r3, r3, #7
 8011794:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011796:	68ba      	ldr	r2, [r7, #8]
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	4a20      	ldr	r2, [pc, #128]	@ (8011820 <prvHeapInit+0xb0>)
 801179e:	4413      	add	r3, r2
 80117a0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80117a6:	4a1f      	ldr	r2, [pc, #124]	@ (8011824 <prvHeapInit+0xb4>)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80117ac:	4b1d      	ldr	r3, [pc, #116]	@ (8011824 <prvHeapInit+0xb4>)
 80117ae:	2200      	movs	r2, #0
 80117b0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	68ba      	ldr	r2, [r7, #8]
 80117b6:	4413      	add	r3, r2
 80117b8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80117ba:	2208      	movs	r2, #8
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	1a9b      	subs	r3, r3, r2
 80117c0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f023 0307 	bic.w	r3, r3, #7
 80117c8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	4a16      	ldr	r2, [pc, #88]	@ (8011828 <prvHeapInit+0xb8>)
 80117ce:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80117d0:	4b15      	ldr	r3, [pc, #84]	@ (8011828 <prvHeapInit+0xb8>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2200      	movs	r2, #0
 80117d6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80117d8:	4b13      	ldr	r3, [pc, #76]	@ (8011828 <prvHeapInit+0xb8>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2200      	movs	r2, #0
 80117de:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	68fa      	ldr	r2, [r7, #12]
 80117e8:	1ad2      	subs	r2, r2, r3
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80117ee:	4b0e      	ldr	r3, [pc, #56]	@ (8011828 <prvHeapInit+0xb8>)
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	4a0c      	ldr	r2, [pc, #48]	@ (801182c <prvHeapInit+0xbc>)
 80117fc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	4a0b      	ldr	r2, [pc, #44]	@ (8011830 <prvHeapInit+0xc0>)
 8011804:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011806:	4b0b      	ldr	r3, [pc, #44]	@ (8011834 <prvHeapInit+0xc4>)
 8011808:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801180c:	601a      	str	r2, [r3, #0]
}
 801180e:	bf00      	nop
 8011810:	3714      	adds	r7, #20
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop
 801181c:	00030d40 	.word	0x00030d40
 8011820:	24033c7c 	.word	0x24033c7c
 8011824:	240649bc 	.word	0x240649bc
 8011828:	240649c4 	.word	0x240649c4
 801182c:	240649cc 	.word	0x240649cc
 8011830:	240649c8 	.word	0x240649c8
 8011834:	240649d8 	.word	0x240649d8

08011838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011838:	b480      	push	{r7}
 801183a:	b085      	sub	sp, #20
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011840:	4b28      	ldr	r3, [pc, #160]	@ (80118e4 <prvInsertBlockIntoFreeList+0xac>)
 8011842:	60fb      	str	r3, [r7, #12]
 8011844:	e002      	b.n	801184c <prvInsertBlockIntoFreeList+0x14>
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	60fb      	str	r3, [r7, #12]
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	429a      	cmp	r2, r3
 8011854:	d8f7      	bhi.n	8011846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	68ba      	ldr	r2, [r7, #8]
 8011860:	4413      	add	r3, r2
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	429a      	cmp	r2, r3
 8011866:	d108      	bne.n	801187a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	685a      	ldr	r2, [r3, #4]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	441a      	add	r2, r3
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	68ba      	ldr	r2, [r7, #8]
 8011884:	441a      	add	r2, r3
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	429a      	cmp	r2, r3
 801188c:	d118      	bne.n	80118c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	4b15      	ldr	r3, [pc, #84]	@ (80118e8 <prvInsertBlockIntoFreeList+0xb0>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	429a      	cmp	r2, r3
 8011898:	d00d      	beq.n	80118b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	685a      	ldr	r2, [r3, #4]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	441a      	add	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	601a      	str	r2, [r3, #0]
 80118b4:	e008      	b.n	80118c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80118b6:	4b0c      	ldr	r3, [pc, #48]	@ (80118e8 <prvInsertBlockIntoFreeList+0xb0>)
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	601a      	str	r2, [r3, #0]
 80118be:	e003      	b.n	80118c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80118c8:	68fa      	ldr	r2, [r7, #12]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d002      	beq.n	80118d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118d6:	bf00      	nop
 80118d8:	3714      	adds	r7, #20
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop
 80118e4:	240649bc 	.word	0x240649bc
 80118e8:	240649c4 	.word	0x240649c4

080118ec <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 80118ec:	4b04      	ldr	r3, [pc, #16]	@ (8011900 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	b10a      	cbz	r2, 80118f6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xa>
 80118f2:	4803      	ldr	r0, [pc, #12]	@ (8011900 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 80118f4:	4770      	bx	lr
 80118f6:	4a03      	ldr	r2, [pc, #12]	@ (8011904 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x18>)
 80118f8:	4801      	ldr	r0, [pc, #4]	@ (8011900 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 80118fa:	6812      	ldr	r2, [r2, #0]
 80118fc:	601a      	str	r2, [r3, #0]
 80118fe:	4770      	bx	lr
 8011900:	24000020 	.word	0x24000020
 8011904:	24000e94 	.word	0x24000e94

08011908 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8011908:	4a02      	ldr	r2, [pc, #8]	@ (8011914 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 801190a:	4b03      	ldr	r3, [pc, #12]	@ (8011918 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 801190c:	6812      	ldr	r2, [r2, #0]
 801190e:	601a      	str	r2, [r3, #0]
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop
 8011914:	24000e94 	.word	0x24000e94
 8011918:	24000020 	.word	0x24000020

0801191c <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 801191c:	f005 b898 	b.w	8016a50 <autoware_control_msgs__msg__Control__init>

08011920 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 8011920:	f005 b8ec 	b.w	8016afc <autoware_control_msgs__msg__Control__fini>

08011924 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8011924:	b510      	push	{r4, lr}
 8011926:	4c0c      	ldr	r4, [pc, #48]	@ (8011958 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 8011928:	f001 f91e 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801192c:	60e0      	str	r0, [r4, #12]
 801192e:	f001 f91b 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011932:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011934:	f000 f81a 	bl	801196c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8011938:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801193c:	f000 f832 	bl	80119a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8011940:	4b06      	ldr	r3, [pc, #24]	@ (801195c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8011942:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	b10a      	cbz	r2, 801194e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 801194a:	4804      	ldr	r0, [pc, #16]	@ (801195c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 801194c:	bd10      	pop	{r4, pc}
 801194e:	4a04      	ldr	r2, [pc, #16]	@ (8011960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 8011950:	4802      	ldr	r0, [pc, #8]	@ (801195c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8011952:	6812      	ldr	r2, [r2, #0]
 8011954:	601a      	str	r2, [r3, #0]
 8011956:	bd10      	pop	{r4, pc}
 8011958:	2400002c 	.word	0x2400002c
 801195c:	2400011c 	.word	0x2400011c
 8011960:	24000e98 	.word	0x24000e98

08011964 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 8011964:	f005 b8de 	b.w	8016b24 <autoware_control_msgs__msg__Lateral__init>

08011968 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 8011968:	f005 b900 	b.w	8016b6c <autoware_control_msgs__msg__Lateral__fini>

0801196c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 801196c:	b510      	push	{r4, lr}
 801196e:	4c08      	ldr	r4, [pc, #32]	@ (8011990 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 8011970:	f001 f8fa 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011974:	60e0      	str	r0, [r4, #12]
 8011976:	f001 f8f7 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801197a:	4b06      	ldr	r3, [pc, #24]	@ (8011994 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 801197c:	64a0      	str	r0, [r4, #72]	@ 0x48
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	b10a      	cbz	r2, 8011986 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 8011982:	4804      	ldr	r0, [pc, #16]	@ (8011994 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8011984:	bd10      	pop	{r4, pc}
 8011986:	4a04      	ldr	r2, [pc, #16]	@ (8011998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 8011988:	4802      	ldr	r0, [pc, #8]	@ (8011994 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 801198a:	6812      	ldr	r2, [r2, #0]
 801198c:	601a      	str	r2, [r3, #0]
 801198e:	bd10      	pop	{r4, pc}
 8011990:	24000128 	.word	0x24000128
 8011994:	24000254 	.word	0x24000254
 8011998:	24000e98 	.word	0x24000e98

0801199c <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 801199c:	f005 b8f2 	b.w	8016b84 <autoware_control_msgs__msg__Longitudinal__init>

080119a0 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 80119a0:	f005 b914 	b.w	8016bcc <autoware_control_msgs__msg__Longitudinal__fini>

080119a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 80119a4:	b510      	push	{r4, lr}
 80119a6:	4c08      	ldr	r4, [pc, #32]	@ (80119c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 80119a8:	f001 f8de 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80119ac:	60e0      	str	r0, [r4, #12]
 80119ae:	f001 f8db 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80119b2:	4b06      	ldr	r3, [pc, #24]	@ (80119cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 80119b4:	64a0      	str	r0, [r4, #72]	@ 0x48
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	b10a      	cbz	r2, 80119be <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 80119ba:	4804      	ldr	r0, [pc, #16]	@ (80119cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 80119bc:	bd10      	pop	{r4, pc}
 80119be:	4a04      	ldr	r2, [pc, #16]	@ (80119d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 80119c0:	4802      	ldr	r0, [pc, #8]	@ (80119cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 80119c2:	6812      	ldr	r2, [r2, #0]
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	bd10      	pop	{r4, pc}
 80119c8:	24000260 	.word	0x24000260
 80119cc:	24000404 	.word	0x24000404
 80119d0:	24000e98 	.word	0x24000e98

080119d4 <get_serialized_size_autoware_control_msgs__msg__Control>:
 80119d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119d6:	4604      	mov	r4, r0
 80119d8:	b1c8      	cbz	r0, 8011a0e <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 80119da:	460f      	mov	r7, r1
 80119dc:	f001 f8d2 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 80119e0:	4606      	mov	r6, r0
 80119e2:	f104 0008 	add.w	r0, r4, #8
 80119e6:	443e      	add	r6, r7
 80119e8:	4631      	mov	r1, r6
 80119ea:	f001 f8cb 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 80119ee:	4605      	mov	r5, r0
 80119f0:	f104 0010 	add.w	r0, r4, #16
 80119f4:	4435      	add	r5, r6
 80119f6:	4629      	mov	r1, r5
 80119f8:	f000 f8a2 	bl	8011b40 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 80119fc:	4601      	mov	r1, r0
 80119fe:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8011a02:	440d      	add	r5, r1
 8011a04:	4629      	mov	r1, r5
 8011a06:	f000 f9a7 	bl	8011d58 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8011a0a:	1bc0      	subs	r0, r0, r7
 8011a0c:	4428      	add	r0, r5
 8011a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011a10 <_Control__cdr_deserialize>:
 8011a10:	b570      	push	{r4, r5, r6, lr}
 8011a12:	460c      	mov	r4, r1
 8011a14:	b329      	cbz	r1, 8011a62 <_Control__cdr_deserialize+0x52>
 8011a16:	4605      	mov	r5, r0
 8011a18:	f001 f918 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	4621      	mov	r1, r4
 8011a20:	4628      	mov	r0, r5
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	68db      	ldr	r3, [r3, #12]
 8011a26:	4798      	blx	r3
 8011a28:	f001 f910 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	f104 0108 	add.w	r1, r4, #8
 8011a32:	4628      	mov	r0, r5
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	68db      	ldr	r3, [r3, #12]
 8011a38:	4798      	blx	r3
 8011a3a:	f000 f95b 	bl	8011cf4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	f104 0110 	add.w	r1, r4, #16
 8011a44:	4628      	mov	r0, r5
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	4798      	blx	r3
 8011a4c:	f000 fa28 	bl	8011ea0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8011a50:	4603      	mov	r3, r0
 8011a52:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 8011a56:	4628      	mov	r0, r5
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a5e:	68db      	ldr	r3, [r3, #12]
 8011a60:	4718      	bx	r3
 8011a62:	4608      	mov	r0, r1
 8011a64:	bd70      	pop	{r4, r5, r6, pc}
 8011a66:	bf00      	nop

08011a68 <_Control__cdr_serialize>:
 8011a68:	b338      	cbz	r0, 8011aba <_Control__cdr_serialize+0x52>
 8011a6a:	b570      	push	{r4, r5, r6, lr}
 8011a6c:	4604      	mov	r4, r0
 8011a6e:	460d      	mov	r5, r1
 8011a70:	f001 f8ec 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a74:	4603      	mov	r3, r0
 8011a76:	4629      	mov	r1, r5
 8011a78:	4620      	mov	r0, r4
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	689b      	ldr	r3, [r3, #8]
 8011a7e:	4798      	blx	r3
 8011a80:	f001 f8e4 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a84:	4603      	mov	r3, r0
 8011a86:	4629      	mov	r1, r5
 8011a88:	f104 0008 	add.w	r0, r4, #8
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	4798      	blx	r3
 8011a92:	f000 f92f 	bl	8011cf4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8011a96:	4603      	mov	r3, r0
 8011a98:	4629      	mov	r1, r5
 8011a9a:	f104 0010 	add.w	r0, r4, #16
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	689b      	ldr	r3, [r3, #8]
 8011aa2:	4798      	blx	r3
 8011aa4:	f000 f9fc 	bl	8011ea0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	4629      	mov	r1, r5
 8011aac:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8011ab0:	685b      	ldr	r3, [r3, #4]
 8011ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ab6:	689b      	ldr	r3, [r3, #8]
 8011ab8:	4718      	bx	r3
 8011aba:	4770      	bx	lr

08011abc <_Control__get_serialized_size>:
 8011abc:	b538      	push	{r3, r4, r5, lr}
 8011abe:	4604      	mov	r4, r0
 8011ac0:	b1b8      	cbz	r0, 8011af2 <_Control__get_serialized_size+0x36>
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	f001 f85e 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8011ac8:	4605      	mov	r5, r0
 8011aca:	f104 0008 	add.w	r0, r4, #8
 8011ace:	4629      	mov	r1, r5
 8011ad0:	f001 f858 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8011ad4:	4601      	mov	r1, r0
 8011ad6:	f104 0010 	add.w	r0, r4, #16
 8011ada:	440d      	add	r5, r1
 8011adc:	4629      	mov	r1, r5
 8011ade:	f000 f82f 	bl	8011b40 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8011ae2:	4601      	mov	r1, r0
 8011ae4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8011ae8:	440d      	add	r5, r1
 8011aea:	4629      	mov	r1, r5
 8011aec:	f000 f934 	bl	8011d58 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8011af0:	4428      	add	r0, r5
 8011af2:	bd38      	pop	{r3, r4, r5, pc}

08011af4 <_Control__max_serialized_size>:
 8011af4:	b530      	push	{r4, r5, lr}
 8011af6:	b083      	sub	sp, #12
 8011af8:	2301      	movs	r3, #1
 8011afa:	2100      	movs	r1, #0
 8011afc:	f10d 0007 	add.w	r0, sp, #7
 8011b00:	f88d 3007 	strb.w	r3, [sp, #7]
 8011b04:	f001 f88e 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8011b08:	4604      	mov	r4, r0
 8011b0a:	f10d 0007 	add.w	r0, sp, #7
 8011b0e:	4621      	mov	r1, r4
 8011b10:	f001 f888 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8011b14:	4605      	mov	r5, r0
 8011b16:	f10d 0007 	add.w	r0, sp, #7
 8011b1a:	4425      	add	r5, r4
 8011b1c:	4629      	mov	r1, r5
 8011b1e:	f000 f8c7 	bl	8011cb0 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 8011b22:	4604      	mov	r4, r0
 8011b24:	f10d 0007 	add.w	r0, sp, #7
 8011b28:	442c      	add	r4, r5
 8011b2a:	4621      	mov	r1, r4
 8011b2c:	f000 f980 	bl	8011e30 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8011b30:	4420      	add	r0, r4
 8011b32:	b003      	add	sp, #12
 8011b34:	bd30      	pop	{r4, r5, pc}
 8011b36:	bf00      	nop

08011b38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8011b38:	4800      	ldr	r0, [pc, #0]	@ (8011b3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 8011b3a:	4770      	bx	lr
 8011b3c:	24000410 	.word	0x24000410

08011b40 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 8011b40:	b5b0      	push	{r4, r5, r7, lr}
 8011b42:	4604      	mov	r4, r0
 8011b44:	b1f0      	cbz	r0, 8011b84 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 8011b46:	460d      	mov	r5, r1
 8011b48:	f001 f81c 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8011b4c:	4607      	mov	r7, r0
 8011b4e:	f104 0008 	add.w	r0, r4, #8
 8011b52:	442f      	add	r7, r5
 8011b54:	f1c5 0501 	rsb	r5, r5, #1
 8011b58:	4639      	mov	r1, r7
 8011b5a:	f001 f813 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8011b5e:	4407      	add	r7, r0
 8011b60:	2104      	movs	r1, #4
 8011b62:	4638      	mov	r0, r7
 8011b64:	f002 fb12 	bl	801418c <ucdr_alignment>
 8011b68:	2104      	movs	r1, #4
 8011b6a:	1844      	adds	r4, r0, r1
 8011b6c:	443c      	add	r4, r7
 8011b6e:	4620      	mov	r0, r4
 8011b70:	f002 fb0c 	bl	801418c <ucdr_alignment>
 8011b74:	3004      	adds	r0, #4
 8011b76:	2101      	movs	r1, #1
 8011b78:	4404      	add	r4, r0
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f002 fb06 	bl	801418c <ucdr_alignment>
 8011b80:	4428      	add	r0, r5
 8011b82:	4420      	add	r0, r4
 8011b84:	bdb0      	pop	{r4, r5, r7, pc}
 8011b86:	bf00      	nop

08011b88 <_Lateral__cdr_deserialize>:
 8011b88:	b538      	push	{r3, r4, r5, lr}
 8011b8a:	460c      	mov	r4, r1
 8011b8c:	b311      	cbz	r1, 8011bd4 <_Lateral__cdr_deserialize+0x4c>
 8011b8e:	4605      	mov	r5, r0
 8011b90:	f001 f85c 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b94:	4603      	mov	r3, r0
 8011b96:	4621      	mov	r1, r4
 8011b98:	4628      	mov	r0, r5
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	4798      	blx	r3
 8011ba0:	f001 f854 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	f104 0108 	add.w	r1, r4, #8
 8011baa:	4628      	mov	r0, r5
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	4798      	blx	r3
 8011bb2:	f104 0110 	add.w	r1, r4, #16
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	f002 f86a 	bl	8013c90 <ucdr_deserialize_float>
 8011bbc:	f104 0114 	add.w	r1, r4, #20
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	f002 f865 	bl	8013c90 <ucdr_deserialize_float>
 8011bc6:	f104 0118 	add.w	r1, r4, #24
 8011bca:	4628      	mov	r0, r5
 8011bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bd0:	f001 b856 	b.w	8012c80 <ucdr_deserialize_bool>
 8011bd4:	4608      	mov	r0, r1
 8011bd6:	bd38      	pop	{r3, r4, r5, pc}

08011bd8 <_Lateral__cdr_serialize>:
 8011bd8:	b318      	cbz	r0, 8011c22 <_Lateral__cdr_serialize+0x4a>
 8011bda:	b538      	push	{r3, r4, r5, lr}
 8011bdc:	4604      	mov	r4, r0
 8011bde:	460d      	mov	r5, r1
 8011be0:	f001 f834 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011be4:	4603      	mov	r3, r0
 8011be6:	4629      	mov	r1, r5
 8011be8:	4620      	mov	r0, r4
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	689b      	ldr	r3, [r3, #8]
 8011bee:	4798      	blx	r3
 8011bf0:	f001 f82c 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	4629      	mov	r1, r5
 8011bf8:	f104 0008 	add.w	r0, r4, #8
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	689b      	ldr	r3, [r3, #8]
 8011c00:	4798      	blx	r3
 8011c02:	ed94 0a04 	vldr	s0, [r4, #16]
 8011c06:	4628      	mov	r0, r5
 8011c08:	f001 ffaa 	bl	8013b60 <ucdr_serialize_float>
 8011c0c:	ed94 0a05 	vldr	s0, [r4, #20]
 8011c10:	4628      	mov	r0, r5
 8011c12:	f001 ffa5 	bl	8013b60 <ucdr_serialize_float>
 8011c16:	7e21      	ldrb	r1, [r4, #24]
 8011c18:	4628      	mov	r0, r5
 8011c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c1e:	f001 b819 	b.w	8012c54 <ucdr_serialize_bool>
 8011c22:	4770      	bx	lr

08011c24 <_Lateral__get_serialized_size>:
 8011c24:	b538      	push	{r3, r4, r5, lr}
 8011c26:	4604      	mov	r4, r0
 8011c28:	b1d8      	cbz	r0, 8011c62 <_Lateral__get_serialized_size+0x3e>
 8011c2a:	2100      	movs	r1, #0
 8011c2c:	f000 ffaa 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c30:	4605      	mov	r5, r0
 8011c32:	f104 0008 	add.w	r0, r4, #8
 8011c36:	4629      	mov	r1, r5
 8011c38:	f000 ffa4 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c3c:	4405      	add	r5, r0
 8011c3e:	2104      	movs	r1, #4
 8011c40:	4628      	mov	r0, r5
 8011c42:	f002 faa3 	bl	801418c <ucdr_alignment>
 8011c46:	2104      	movs	r1, #4
 8011c48:	4408      	add	r0, r1
 8011c4a:	1944      	adds	r4, r0, r5
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f002 fa9d 	bl	801418c <ucdr_alignment>
 8011c52:	3004      	adds	r0, #4
 8011c54:	2101      	movs	r1, #1
 8011c56:	4404      	add	r4, r0
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f002 fa97 	bl	801418c <ucdr_alignment>
 8011c5e:	3001      	adds	r0, #1
 8011c60:	4420      	add	r0, r4
 8011c62:	bd38      	pop	{r3, r4, r5, pc}

08011c64 <_Lateral__max_serialized_size>:
 8011c64:	b530      	push	{r4, r5, lr}
 8011c66:	b083      	sub	sp, #12
 8011c68:	2501      	movs	r5, #1
 8011c6a:	2100      	movs	r1, #0
 8011c6c:	f10d 0007 	add.w	r0, sp, #7
 8011c70:	f88d 5007 	strb.w	r5, [sp, #7]
 8011c74:	f000 ffd6 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8011c78:	4604      	mov	r4, r0
 8011c7a:	f10d 0007 	add.w	r0, sp, #7
 8011c7e:	4621      	mov	r1, r4
 8011c80:	f000 ffd0 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8011c84:	4404      	add	r4, r0
 8011c86:	2104      	movs	r1, #4
 8011c88:	4620      	mov	r0, r4
 8011c8a:	f002 fa7f 	bl	801418c <ucdr_alignment>
 8011c8e:	2104      	movs	r1, #4
 8011c90:	4408      	add	r0, r1
 8011c92:	4404      	add	r4, r0
 8011c94:	4620      	mov	r0, r4
 8011c96:	f002 fa79 	bl	801418c <ucdr_alignment>
 8011c9a:	3004      	adds	r0, #4
 8011c9c:	4629      	mov	r1, r5
 8011c9e:	4404      	add	r4, r0
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	f002 fa73 	bl	801418c <ucdr_alignment>
 8011ca6:	4428      	add	r0, r5
 8011ca8:	4420      	add	r0, r4
 8011caa:	b003      	add	sp, #12
 8011cac:	bd30      	pop	{r4, r5, pc}
 8011cae:	bf00      	nop

08011cb0 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 8011cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cb2:	2701      	movs	r7, #1
 8011cb4:	460c      	mov	r4, r1
 8011cb6:	4606      	mov	r6, r0
 8011cb8:	7007      	strb	r7, [r0, #0]
 8011cba:	f000 ffb3 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8011cbe:	4605      	mov	r5, r0
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	4425      	add	r5, r4
 8011cc4:	1b3c      	subs	r4, r7, r4
 8011cc6:	4629      	mov	r1, r5
 8011cc8:	f000 ffac 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8011ccc:	4405      	add	r5, r0
 8011cce:	2104      	movs	r1, #4
 8011cd0:	4628      	mov	r0, r5
 8011cd2:	f002 fa5b 	bl	801418c <ucdr_alignment>
 8011cd6:	2104      	movs	r1, #4
 8011cd8:	4408      	add	r0, r1
 8011cda:	4405      	add	r5, r0
 8011cdc:	4628      	mov	r0, r5
 8011cde:	f002 fa55 	bl	801418c <ucdr_alignment>
 8011ce2:	3004      	adds	r0, #4
 8011ce4:	4639      	mov	r1, r7
 8011ce6:	4405      	add	r5, r0
 8011ce8:	4628      	mov	r0, r5
 8011cea:	f002 fa4f 	bl	801418c <ucdr_alignment>
 8011cee:	4420      	add	r0, r4
 8011cf0:	4428      	add	r0, r5
 8011cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011cf4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8011cf4:	4800      	ldr	r0, [pc, #0]	@ (8011cf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 8011cf6:	4770      	bx	lr
 8011cf8:	24000438 	.word	0x24000438

08011cfc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 8011cfc:	b570      	push	{r4, r5, r6, lr}
 8011cfe:	460c      	mov	r4, r1
 8011d00:	4606      	mov	r6, r0
 8011d02:	f000 ff3f 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8011d06:	4605      	mov	r5, r0
 8011d08:	f106 0008 	add.w	r0, r6, #8
 8011d0c:	4425      	add	r5, r4
 8011d0e:	f1c4 0401 	rsb	r4, r4, #1
 8011d12:	4629      	mov	r1, r5
 8011d14:	f000 ff36 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8011d18:	4405      	add	r5, r0
 8011d1a:	2104      	movs	r1, #4
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	f002 fa35 	bl	801418c <ucdr_alignment>
 8011d22:	2104      	movs	r1, #4
 8011d24:	4408      	add	r0, r1
 8011d26:	4405      	add	r5, r0
 8011d28:	4628      	mov	r0, r5
 8011d2a:	f002 fa2f 	bl	801418c <ucdr_alignment>
 8011d2e:	2104      	movs	r1, #4
 8011d30:	4408      	add	r0, r1
 8011d32:	1946      	adds	r6, r0, r5
 8011d34:	4630      	mov	r0, r6
 8011d36:	f002 fa29 	bl	801418c <ucdr_alignment>
 8011d3a:	1d05      	adds	r5, r0, #4
 8011d3c:	2101      	movs	r1, #1
 8011d3e:	4435      	add	r5, r6
 8011d40:	4628      	mov	r0, r5
 8011d42:	f002 fa23 	bl	801418c <ucdr_alignment>
 8011d46:	2101      	movs	r1, #1
 8011d48:	4408      	add	r0, r1
 8011d4a:	4405      	add	r5, r0
 8011d4c:	4628      	mov	r0, r5
 8011d4e:	f002 fa1d 	bl	801418c <ucdr_alignment>
 8011d52:	4420      	add	r0, r4
 8011d54:	4428      	add	r0, r5
 8011d56:	bd70      	pop	{r4, r5, r6, pc}

08011d58 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8011d58:	b108      	cbz	r0, 8011d5e <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 8011d5a:	f7ff bfcf 	b.w	8011cfc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 8011d5e:	4770      	bx	lr

08011d60 <_Longitudinal__get_serialized_size>:
 8011d60:	b110      	cbz	r0, 8011d68 <_Longitudinal__get_serialized_size+0x8>
 8011d62:	2100      	movs	r1, #0
 8011d64:	f7ff bfca 	b.w	8011cfc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 8011d68:	4770      	bx	lr
 8011d6a:	bf00      	nop

08011d6c <_Longitudinal__cdr_deserialize>:
 8011d6c:	b538      	push	{r3, r4, r5, lr}
 8011d6e:	460c      	mov	r4, r1
 8011d70:	b361      	cbz	r1, 8011dcc <_Longitudinal__cdr_deserialize+0x60>
 8011d72:	4605      	mov	r5, r0
 8011d74:	f000 ff6a 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	4621      	mov	r1, r4
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	685b      	ldr	r3, [r3, #4]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	4798      	blx	r3
 8011d84:	f000 ff62 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	f104 0108 	add.w	r1, r4, #8
 8011d8e:	4628      	mov	r0, r5
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	4798      	blx	r3
 8011d96:	f104 0110 	add.w	r1, r4, #16
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	f001 ff78 	bl	8013c90 <ucdr_deserialize_float>
 8011da0:	f104 0114 	add.w	r1, r4, #20
 8011da4:	4628      	mov	r0, r5
 8011da6:	f001 ff73 	bl	8013c90 <ucdr_deserialize_float>
 8011daa:	f104 0118 	add.w	r1, r4, #24
 8011dae:	4628      	mov	r0, r5
 8011db0:	f001 ff6e 	bl	8013c90 <ucdr_deserialize_float>
 8011db4:	f104 011c 	add.w	r1, r4, #28
 8011db8:	4628      	mov	r0, r5
 8011dba:	f000 ff61 	bl	8012c80 <ucdr_deserialize_bool>
 8011dbe:	f104 011d 	add.w	r1, r4, #29
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dc8:	f000 bf5a 	b.w	8012c80 <ucdr_deserialize_bool>
 8011dcc:	4608      	mov	r0, r1
 8011dce:	bd38      	pop	{r3, r4, r5, pc}

08011dd0 <_Longitudinal__cdr_serialize>:
 8011dd0:	b360      	cbz	r0, 8011e2c <_Longitudinal__cdr_serialize+0x5c>
 8011dd2:	b538      	push	{r3, r4, r5, lr}
 8011dd4:	4604      	mov	r4, r0
 8011dd6:	460d      	mov	r5, r1
 8011dd8:	f000 ff38 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	4629      	mov	r1, r5
 8011de0:	4620      	mov	r0, r4
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	689b      	ldr	r3, [r3, #8]
 8011de6:	4798      	blx	r3
 8011de8:	f000 ff30 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011dec:	4603      	mov	r3, r0
 8011dee:	4629      	mov	r1, r5
 8011df0:	f104 0008 	add.w	r0, r4, #8
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	689b      	ldr	r3, [r3, #8]
 8011df8:	4798      	blx	r3
 8011dfa:	ed94 0a04 	vldr	s0, [r4, #16]
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f001 feae 	bl	8013b60 <ucdr_serialize_float>
 8011e04:	ed94 0a05 	vldr	s0, [r4, #20]
 8011e08:	4628      	mov	r0, r5
 8011e0a:	f001 fea9 	bl	8013b60 <ucdr_serialize_float>
 8011e0e:	ed94 0a06 	vldr	s0, [r4, #24]
 8011e12:	4628      	mov	r0, r5
 8011e14:	f001 fea4 	bl	8013b60 <ucdr_serialize_float>
 8011e18:	7f21      	ldrb	r1, [r4, #28]
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	f000 ff1a 	bl	8012c54 <ucdr_serialize_bool>
 8011e20:	7f61      	ldrb	r1, [r4, #29]
 8011e22:	4628      	mov	r0, r5
 8011e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e28:	f000 bf14 	b.w	8012c54 <ucdr_serialize_bool>
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop

08011e30 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8011e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e32:	2701      	movs	r7, #1
 8011e34:	460c      	mov	r4, r1
 8011e36:	4606      	mov	r6, r0
 8011e38:	7007      	strb	r7, [r0, #0]
 8011e3a:	f000 fef3 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8011e3e:	4605      	mov	r5, r0
 8011e40:	4630      	mov	r0, r6
 8011e42:	4425      	add	r5, r4
 8011e44:	1b3c      	subs	r4, r7, r4
 8011e46:	4629      	mov	r1, r5
 8011e48:	f000 feec 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8011e4c:	4405      	add	r5, r0
 8011e4e:	2104      	movs	r1, #4
 8011e50:	4628      	mov	r0, r5
 8011e52:	f002 f99b 	bl	801418c <ucdr_alignment>
 8011e56:	2104      	movs	r1, #4
 8011e58:	4408      	add	r0, r1
 8011e5a:	4405      	add	r5, r0
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	f002 f995 	bl	801418c <ucdr_alignment>
 8011e62:	2104      	movs	r1, #4
 8011e64:	4408      	add	r0, r1
 8011e66:	1946      	adds	r6, r0, r5
 8011e68:	4630      	mov	r0, r6
 8011e6a:	f002 f98f 	bl	801418c <ucdr_alignment>
 8011e6e:	1d05      	adds	r5, r0, #4
 8011e70:	4639      	mov	r1, r7
 8011e72:	4435      	add	r5, r6
 8011e74:	4628      	mov	r0, r5
 8011e76:	f002 f989 	bl	801418c <ucdr_alignment>
 8011e7a:	4438      	add	r0, r7
 8011e7c:	4639      	mov	r1, r7
 8011e7e:	4405      	add	r5, r0
 8011e80:	4628      	mov	r0, r5
 8011e82:	f002 f983 	bl	801418c <ucdr_alignment>
 8011e86:	4420      	add	r0, r4
 8011e88:	4428      	add	r0, r5
 8011e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e8c <_Longitudinal__max_serialized_size>:
 8011e8c:	b500      	push	{lr}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	2100      	movs	r1, #0
 8011e92:	f10d 0007 	add.w	r0, sp, #7
 8011e96:	f7ff ffcb 	bl	8011e30 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8011e9a:	b003      	add	sp, #12
 8011e9c:	f85d fb04 	ldr.w	pc, [sp], #4

08011ea0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8011ea0:	4800      	ldr	r0, [pc, #0]	@ (8011ea4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 8011ea2:	4770      	bx	lr
 8011ea4:	24000460 	.word	0x24000460

08011ea8 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8011ea8:	4b04      	ldr	r3, [pc, #16]	@ (8011ebc <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	b10a      	cbz	r2, 8011eb2 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xa>
 8011eae:	4803      	ldr	r0, [pc, #12]	@ (8011ebc <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011eb0:	4770      	bx	lr
 8011eb2:	4a03      	ldr	r2, [pc, #12]	@ (8011ec0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x18>)
 8011eb4:	4801      	ldr	r0, [pc, #4]	@ (8011ebc <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011eb6:	6812      	ldr	r2, [r2, #0]
 8011eb8:	601a      	str	r2, [r3, #0]
 8011eba:	4770      	bx	lr
 8011ebc:	24000490 	.word	0x24000490
 8011ec0:	24000e94 	.word	0x24000e94

08011ec4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011ec4:	4b04      	ldr	r3, [pc, #16]	@ (8011ed8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8011ec6:	4805      	ldr	r0, [pc, #20]	@ (8011edc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	4905      	ldr	r1, [pc, #20]	@ (8011ee0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 8011ecc:	4a05      	ldr	r2, [pc, #20]	@ (8011ee4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011ece:	6003      	str	r3, [r0, #0]
 8011ed0:	600b      	str	r3, [r1, #0]
 8011ed2:	6013      	str	r3, [r2, #0]
 8011ed4:	4770      	bx	lr
 8011ed6:	bf00      	nop
 8011ed8:	24000e94 	.word	0x24000e94
 8011edc:	240004ac 	.word	0x240004ac
 8011ee0:	240004b8 	.word	0x240004b8
 8011ee4:	24000490 	.word	0x24000490

08011ee8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8011ee8:	4b04      	ldr	r3, [pc, #16]	@ (8011efc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011eea:	681a      	ldr	r2, [r3, #0]
 8011eec:	b10a      	cbz	r2, 8011ef2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xa>
 8011eee:	4803      	ldr	r0, [pc, #12]	@ (8011efc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011ef0:	4770      	bx	lr
 8011ef2:	4a03      	ldr	r2, [pc, #12]	@ (8011f00 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x18>)
 8011ef4:	4801      	ldr	r0, [pc, #4]	@ (8011efc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011ef6:	6812      	ldr	r2, [r2, #0]
 8011ef8:	601a      	str	r2, [r3, #0]
 8011efa:	4770      	bx	lr
 8011efc:	240004cc 	.word	0x240004cc
 8011f00:	24000e94 	.word	0x24000e94

08011f04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8011f04:	4a02      	ldr	r2, [pc, #8]	@ (8011f10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 8011f06:	4b03      	ldr	r3, [pc, #12]	@ (8011f14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 8011f08:	6812      	ldr	r2, [r2, #0]
 8011f0a:	601a      	str	r2, [r3, #0]
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	24000e94 	.word	0x24000e94
 8011f14:	240004cc 	.word	0x240004cc

08011f18 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8011f18:	4b04      	ldr	r3, [pc, #16]	@ (8011f2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8011f1a:	681a      	ldr	r2, [r3, #0]
 8011f1c:	b10a      	cbz	r2, 8011f22 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xa>
 8011f1e:	4803      	ldr	r0, [pc, #12]	@ (8011f2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8011f20:	4770      	bx	lr
 8011f22:	4a03      	ldr	r2, [pc, #12]	@ (8011f30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x18>)
 8011f24:	4801      	ldr	r0, [pc, #4]	@ (8011f2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8011f26:	6812      	ldr	r2, [r2, #0]
 8011f28:	601a      	str	r2, [r3, #0]
 8011f2a:	4770      	bx	lr
 8011f2c:	240004e0 	.word	0x240004e0
 8011f30:	24000e94 	.word	0x24000e94

08011f34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8011f34:	4a02      	ldr	r2, [pc, #8]	@ (8011f40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 8011f36:	4b03      	ldr	r3, [pc, #12]	@ (8011f44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 8011f38:	6812      	ldr	r2, [r2, #0]
 8011f3a:	601a      	str	r2, [r3, #0]
 8011f3c:	4770      	bx	lr
 8011f3e:	bf00      	nop
 8011f40:	24000e94 	.word	0x24000e94
 8011f44:	240004e0 	.word	0x240004e0

08011f48 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8011f48:	4b04      	ldr	r3, [pc, #16]	@ (8011f5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8011f4a:	681a      	ldr	r2, [r3, #0]
 8011f4c:	b10a      	cbz	r2, 8011f52 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xa>
 8011f4e:	4803      	ldr	r0, [pc, #12]	@ (8011f5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8011f50:	4770      	bx	lr
 8011f52:	4a03      	ldr	r2, [pc, #12]	@ (8011f60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x18>)
 8011f54:	4801      	ldr	r0, [pc, #4]	@ (8011f5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8011f56:	6812      	ldr	r2, [r2, #0]
 8011f58:	601a      	str	r2, [r3, #0]
 8011f5a:	4770      	bx	lr
 8011f5c:	240004f4 	.word	0x240004f4
 8011f60:	24000e94 	.word	0x24000e94

08011f64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8011f64:	4a02      	ldr	r2, [pc, #8]	@ (8011f70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 8011f66:	4b03      	ldr	r3, [pc, #12]	@ (8011f74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 8011f68:	6812      	ldr	r2, [r2, #0]
 8011f6a:	601a      	str	r2, [r3, #0]
 8011f6c:	4770      	bx	lr
 8011f6e:	bf00      	nop
 8011f70:	24000e94 	.word	0x24000e94
 8011f74:	240004f4 	.word	0x240004f4

08011f78 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011f78:	4b04      	ldr	r3, [pc, #16]	@ (8011f8c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011f7a:	681a      	ldr	r2, [r3, #0]
 8011f7c:	b10a      	cbz	r2, 8011f82 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xa>
 8011f7e:	4803      	ldr	r0, [pc, #12]	@ (8011f8c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011f80:	4770      	bx	lr
 8011f82:	4a03      	ldr	r2, [pc, #12]	@ (8011f90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 8011f84:	4801      	ldr	r0, [pc, #4]	@ (8011f8c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011f86:	6812      	ldr	r2, [r2, #0]
 8011f88:	601a      	str	r2, [r3, #0]
 8011f8a:	4770      	bx	lr
 8011f8c:	24000508 	.word	0x24000508
 8011f90:	24000e94 	.word	0x24000e94

08011f94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011f94:	4a02      	ldr	r2, [pc, #8]	@ (8011fa0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 8011f96:	4b03      	ldr	r3, [pc, #12]	@ (8011fa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8011f98:	6812      	ldr	r2, [r2, #0]
 8011f9a:	601a      	str	r2, [r3, #0]
 8011f9c:	4770      	bx	lr
 8011f9e:	bf00      	nop
 8011fa0:	24000e94 	.word	0x24000e94
 8011fa4:	24000508 	.word	0x24000508

08011fa8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011fa8:	4b04      	ldr	r3, [pc, #16]	@ (8011fbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	b10a      	cbz	r2, 8011fb2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xa>
 8011fae:	4803      	ldr	r0, [pc, #12]	@ (8011fbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011fb0:	4770      	bx	lr
 8011fb2:	4a03      	ldr	r2, [pc, #12]	@ (8011fc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x18>)
 8011fb4:	4801      	ldr	r0, [pc, #4]	@ (8011fbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011fb6:	6812      	ldr	r2, [r2, #0]
 8011fb8:	601a      	str	r2, [r3, #0]
 8011fba:	4770      	bx	lr
 8011fbc:	2400051c 	.word	0x2400051c
 8011fc0:	24000e94 	.word	0x24000e94

08011fc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011fc4:	4a02      	ldr	r2, [pc, #8]	@ (8011fd0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8011fc6:	4b03      	ldr	r3, [pc, #12]	@ (8011fd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8011fc8:	6812      	ldr	r2, [r2, #0]
 8011fca:	601a      	str	r2, [r3, #0]
 8011fcc:	4770      	bx	lr
 8011fce:	bf00      	nop
 8011fd0:	24000e94 	.word	0x24000e94
 8011fd4:	2400051c 	.word	0x2400051c

08011fd8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8011fd8:	4b04      	ldr	r3, [pc, #16]	@ (8011fec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	b10a      	cbz	r2, 8011fe2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xa>
 8011fde:	4803      	ldr	r0, [pc, #12]	@ (8011fec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 8011fe0:	4770      	bx	lr
 8011fe2:	4a03      	ldr	r2, [pc, #12]	@ (8011ff0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x18>)
 8011fe4:	4801      	ldr	r0, [pc, #4]	@ (8011fec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 8011fe6:	6812      	ldr	r2, [r2, #0]
 8011fe8:	601a      	str	r2, [r3, #0]
 8011fea:	4770      	bx	lr
 8011fec:	24000530 	.word	0x24000530
 8011ff0:	24000e94 	.word	0x24000e94

08011ff4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8011ff4:	4a02      	ldr	r2, [pc, #8]	@ (8012000 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 8011ff6:	4b03      	ldr	r3, [pc, #12]	@ (8012004 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 8011ff8:	6812      	ldr	r2, [r2, #0]
 8011ffa:	601a      	str	r2, [r3, #0]
 8011ffc:	4770      	bx	lr
 8011ffe:	bf00      	nop
 8012000:	24000e94 	.word	0x24000e94
 8012004:	24000530 	.word	0x24000530

08012008 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012008:	4b04      	ldr	r3, [pc, #16]	@ (801201c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 801200a:	681a      	ldr	r2, [r3, #0]
 801200c:	b10a      	cbz	r2, 8012012 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 801200e:	4803      	ldr	r0, [pc, #12]	@ (801201c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8012010:	4770      	bx	lr
 8012012:	4a03      	ldr	r2, [pc, #12]	@ (8012020 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 8012014:	4801      	ldr	r0, [pc, #4]	@ (801201c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8012016:	6812      	ldr	r2, [r2, #0]
 8012018:	601a      	str	r2, [r3, #0]
 801201a:	4770      	bx	lr
 801201c:	24000544 	.word	0x24000544
 8012020:	24000e94 	.word	0x24000e94

08012024 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012024:	4a02      	ldr	r2, [pc, #8]	@ (8012030 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 8012026:	4b03      	ldr	r3, [pc, #12]	@ (8012034 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 8012028:	6812      	ldr	r2, [r2, #0]
 801202a:	601a      	str	r2, [r3, #0]
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop
 8012030:	24000e94 	.word	0x24000e94
 8012034:	24000544 	.word	0x24000544

08012038 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012038:	4b04      	ldr	r3, [pc, #16]	@ (801204c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 801203a:	681a      	ldr	r2, [r3, #0]
 801203c:	b10a      	cbz	r2, 8012042 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 801203e:	4803      	ldr	r0, [pc, #12]	@ (801204c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8012040:	4770      	bx	lr
 8012042:	4a03      	ldr	r2, [pc, #12]	@ (8012050 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 8012044:	4801      	ldr	r0, [pc, #4]	@ (801204c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8012046:	6812      	ldr	r2, [r2, #0]
 8012048:	601a      	str	r2, [r3, #0]
 801204a:	4770      	bx	lr
 801204c:	24000558 	.word	0x24000558
 8012050:	24000e94 	.word	0x24000e94

08012054 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012054:	4a02      	ldr	r2, [pc, #8]	@ (8012060 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 8012056:	4b03      	ldr	r3, [pc, #12]	@ (8012064 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 8012058:	6812      	ldr	r2, [r2, #0]
 801205a:	601a      	str	r2, [r3, #0]
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop
 8012060:	24000e94 	.word	0x24000e94
 8012064:	24000558 	.word	0x24000558

08012068 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8012068:	4b04      	ldr	r3, [pc, #16]	@ (801207c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	b10a      	cbz	r2, 8012072 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xa>
 801206e:	4803      	ldr	r0, [pc, #12]	@ (801207c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 8012070:	4770      	bx	lr
 8012072:	4a03      	ldr	r2, [pc, #12]	@ (8012080 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x18>)
 8012074:	4801      	ldr	r0, [pc, #4]	@ (801207c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 8012076:	6812      	ldr	r2, [r2, #0]
 8012078:	601a      	str	r2, [r3, #0]
 801207a:	4770      	bx	lr
 801207c:	2400056c 	.word	0x2400056c
 8012080:	24000e94 	.word	0x24000e94

08012084 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8012084:	4a02      	ldr	r2, [pc, #8]	@ (8012090 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 8012086:	4b03      	ldr	r3, [pc, #12]	@ (8012094 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 8012088:	6812      	ldr	r2, [r2, #0]
 801208a:	601a      	str	r2, [r3, #0]
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	24000e94 	.word	0x24000e94
 8012094:	2400056c 	.word	0x2400056c

08012098 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 8012098:	f004 bda4 	b.w	8016be4 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

0801209c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 801209c:	f004 bdb4 	b.w	8016c08 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

080120a0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 80120a0:	f004 bdb6 	b.w	8016c10 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

080120a4 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 80120a4:	f004 bdb8 	b.w	8016c18 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

080120a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 80120a8:	b508      	push	{r3, lr}
 80120aa:	f000 fd5d 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80120ae:	4b06      	ldr	r3, [pc, #24]	@ (80120c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80120b0:	4906      	ldr	r1, [pc, #24]	@ (80120cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 80120b2:	681a      	ldr	r2, [r3, #0]
 80120b4:	60c8      	str	r0, [r1, #12]
 80120b6:	b10a      	cbz	r2, 80120bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 80120b8:	4803      	ldr	r0, [pc, #12]	@ (80120c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80120ba:	bd08      	pop	{r3, pc}
 80120bc:	4a04      	ldr	r2, [pc, #16]	@ (80120d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 80120be:	4802      	ldr	r0, [pc, #8]	@ (80120c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80120c0:	6812      	ldr	r2, [r2, #0]
 80120c2:	601a      	str	r2, [r3, #0]
 80120c4:	bd08      	pop	{r3, pc}
 80120c6:	bf00      	nop
 80120c8:	240005f0 	.word	0x240005f0
 80120cc:	24000578 	.word	0x24000578
 80120d0:	24000e98 	.word	0x24000e98

080120d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 80120d4:	4b04      	ldr	r3, [pc, #16]	@ (80120e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80120d6:	681a      	ldr	r2, [r3, #0]
 80120d8:	b10a      	cbz	r2, 80120de <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 80120da:	4803      	ldr	r0, [pc, #12]	@ (80120e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80120dc:	4770      	bx	lr
 80120de:	4a03      	ldr	r2, [pc, #12]	@ (80120ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 80120e0:	4801      	ldr	r0, [pc, #4]	@ (80120e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80120e2:	6812      	ldr	r2, [r2, #0]
 80120e4:	601a      	str	r2, [r3, #0]
 80120e6:	4770      	bx	lr
 80120e8:	24000638 	.word	0x24000638
 80120ec:	24000e98 	.word	0x24000e98

080120f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 80120f0:	4b16      	ldr	r3, [pc, #88]	@ (801214c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	b510      	push	{r4, lr}
 80120f6:	b132      	cbz	r2, 8012106 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 80120f8:	685c      	ldr	r4, [r3, #4]
 80120fa:	68a3      	ldr	r3, [r4, #8]
 80120fc:	b153      	cbz	r3, 8012114 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 80120fe:	68e3      	ldr	r3, [r4, #12]
 8012100:	b1a3      	cbz	r3, 801212c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8012102:	4812      	ldr	r0, [pc, #72]	@ (801214c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8012104:	bd10      	pop	{r4, pc}
 8012106:	4a12      	ldr	r2, [pc, #72]	@ (8012150 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012108:	685c      	ldr	r4, [r3, #4]
 801210a:	6812      	ldr	r2, [r2, #0]
 801210c:	601a      	str	r2, [r3, #0]
 801210e:	68a3      	ldr	r3, [r4, #8]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d1f4      	bne.n	80120fe <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 8012114:	f000 fd28 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012118:	4b0e      	ldr	r3, [pc, #56]	@ (8012154 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 801211a:	490f      	ldr	r1, [pc, #60]	@ (8012158 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 801211c:	681a      	ldr	r2, [r3, #0]
 801211e:	60c8      	str	r0, [r1, #12]
 8012120:	b17a      	cbz	r2, 8012142 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 8012122:	685b      	ldr	r3, [r3, #4]
 8012124:	60a3      	str	r3, [r4, #8]
 8012126:	68e3      	ldr	r3, [r4, #12]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1ea      	bne.n	8012102 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 801212c:	4b0b      	ldr	r3, [pc, #44]	@ (801215c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 801212e:	681a      	ldr	r2, [r3, #0]
 8012130:	b11a      	cbz	r2, 801213a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	4805      	ldr	r0, [pc, #20]	@ (801214c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8012136:	60e3      	str	r3, [r4, #12]
 8012138:	bd10      	pop	{r4, pc}
 801213a:	4a05      	ldr	r2, [pc, #20]	@ (8012150 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 801213c:	6812      	ldr	r2, [r2, #0]
 801213e:	601a      	str	r2, [r3, #0]
 8012140:	e7f7      	b.n	8012132 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 8012142:	4a03      	ldr	r2, [pc, #12]	@ (8012150 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012144:	6812      	ldr	r2, [r2, #0]
 8012146:	601a      	str	r2, [r3, #0]
 8012148:	e7eb      	b.n	8012122 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 801214a:	bf00      	nop
 801214c:	24000654 	.word	0x24000654
 8012150:	24000e98 	.word	0x24000e98
 8012154:	240005f0 	.word	0x240005f0
 8012158:	24000578 	.word	0x24000578
 801215c:	24000638 	.word	0x24000638

08012160 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8012160:	f004 bd5c 	b.w	8016c1c <autoware_vehicle_msgs__msg__ControlModeReport__init>

08012164 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8012164:	f004 bd6c 	b.w	8016c40 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

08012168 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8012168:	b508      	push	{r3, lr}
 801216a:	f000 fcfd 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801216e:	4b06      	ldr	r3, [pc, #24]	@ (8012188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8012170:	4906      	ldr	r1, [pc, #24]	@ (801218c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 8012172:	681a      	ldr	r2, [r3, #0]
 8012174:	60c8      	str	r0, [r1, #12]
 8012176:	b10a      	cbz	r2, 801217c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 8012178:	4803      	ldr	r0, [pc, #12]	@ (8012188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 801217a:	bd08      	pop	{r3, pc}
 801217c:	4a04      	ldr	r2, [pc, #16]	@ (8012190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 801217e:	4802      	ldr	r0, [pc, #8]	@ (8012188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8012180:	6812      	ldr	r2, [r2, #0]
 8012182:	601a      	str	r2, [r3, #0]
 8012184:	bd08      	pop	{r3, pc}
 8012186:	bf00      	nop
 8012188:	240006d8 	.word	0x240006d8
 801218c:	24000660 	.word	0x24000660
 8012190:	24000e98 	.word	0x24000e98

08012194 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8012194:	f004 bd58 	b.w	8016c48 <autoware_vehicle_msgs__msg__GearCommand__init>

08012198 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 8012198:	f004 bd68 	b.w	8016c6c <autoware_vehicle_msgs__msg__GearCommand__fini>

0801219c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 801219c:	b508      	push	{r3, lr}
 801219e:	f000 fce3 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121a2:	4b06      	ldr	r3, [pc, #24]	@ (80121bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 80121a4:	4906      	ldr	r1, [pc, #24]	@ (80121c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 80121a6:	681a      	ldr	r2, [r3, #0]
 80121a8:	60c8      	str	r0, [r1, #12]
 80121aa:	b10a      	cbz	r2, 80121b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 80121ac:	4803      	ldr	r0, [pc, #12]	@ (80121bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 80121ae:	bd08      	pop	{r3, pc}
 80121b0:	4a04      	ldr	r2, [pc, #16]	@ (80121c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 80121b2:	4802      	ldr	r0, [pc, #8]	@ (80121bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 80121b4:	6812      	ldr	r2, [r2, #0]
 80121b6:	601a      	str	r2, [r3, #0]
 80121b8:	bd08      	pop	{r3, pc}
 80121ba:	bf00      	nop
 80121bc:	2400075c 	.word	0x2400075c
 80121c0:	240006e4 	.word	0x240006e4
 80121c4:	24000e98 	.word	0x24000e98

080121c8 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 80121c8:	f004 bd54 	b.w	8016c74 <autoware_vehicle_msgs__msg__GearReport__init>

080121cc <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 80121cc:	f004 bd64 	b.w	8016c98 <autoware_vehicle_msgs__msg__GearReport__fini>

080121d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 80121d0:	b508      	push	{r3, lr}
 80121d2:	f000 fcc9 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121d6:	4b06      	ldr	r3, [pc, #24]	@ (80121f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 80121d8:	4906      	ldr	r1, [pc, #24]	@ (80121f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	60c8      	str	r0, [r1, #12]
 80121de:	b10a      	cbz	r2, 80121e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 80121e0:	4803      	ldr	r0, [pc, #12]	@ (80121f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 80121e2:	bd08      	pop	{r3, pc}
 80121e4:	4a04      	ldr	r2, [pc, #16]	@ (80121f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 80121e6:	4802      	ldr	r0, [pc, #8]	@ (80121f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 80121e8:	6812      	ldr	r2, [r2, #0]
 80121ea:	601a      	str	r2, [r3, #0]
 80121ec:	bd08      	pop	{r3, pc}
 80121ee:	bf00      	nop
 80121f0:	240007e0 	.word	0x240007e0
 80121f4:	24000768 	.word	0x24000768
 80121f8:	24000e98 	.word	0x24000e98

080121fc <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 80121fc:	f004 bd50 	b.w	8016ca0 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

08012200 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8012200:	f004 bd60 	b.w	8016cc4 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

08012204 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8012204:	b508      	push	{r3, lr}
 8012206:	f000 fcaf 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801220a:	4b06      	ldr	r3, [pc, #24]	@ (8012224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 801220c:	4906      	ldr	r1, [pc, #24]	@ (8012228 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	60c8      	str	r0, [r1, #12]
 8012212:	b10a      	cbz	r2, 8012218 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8012214:	4803      	ldr	r0, [pc, #12]	@ (8012224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8012216:	bd08      	pop	{r3, pc}
 8012218:	4a04      	ldr	r2, [pc, #16]	@ (801222c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 801221a:	4802      	ldr	r0, [pc, #8]	@ (8012224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 801221c:	6812      	ldr	r2, [r2, #0]
 801221e:	601a      	str	r2, [r3, #0]
 8012220:	bd08      	pop	{r3, pc}
 8012222:	bf00      	nop
 8012224:	24000864 	.word	0x24000864
 8012228:	240007ec 	.word	0x240007ec
 801222c:	24000e98 	.word	0x24000e98

08012230 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8012230:	f004 bd4c 	b.w	8016ccc <autoware_vehicle_msgs__msg__HazardLightsReport__init>

08012234 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8012234:	f004 bd5c 	b.w	8016cf0 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

08012238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8012238:	b508      	push	{r3, lr}
 801223a:	f000 fc95 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801223e:	4b06      	ldr	r3, [pc, #24]	@ (8012258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012240:	4906      	ldr	r1, [pc, #24]	@ (801225c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8012242:	681a      	ldr	r2, [r3, #0]
 8012244:	60c8      	str	r0, [r1, #12]
 8012246:	b10a      	cbz	r2, 801224c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 8012248:	4803      	ldr	r0, [pc, #12]	@ (8012258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 801224a:	bd08      	pop	{r3, pc}
 801224c:	4a04      	ldr	r2, [pc, #16]	@ (8012260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 801224e:	4802      	ldr	r0, [pc, #8]	@ (8012258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012250:	6812      	ldr	r2, [r2, #0]
 8012252:	601a      	str	r2, [r3, #0]
 8012254:	bd08      	pop	{r3, pc}
 8012256:	bf00      	nop
 8012258:	240008e8 	.word	0x240008e8
 801225c:	24000870 	.word	0x24000870
 8012260:	24000e98 	.word	0x24000e98

08012264 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8012264:	f004 bd48 	b.w	8016cf8 <autoware_vehicle_msgs__msg__SteeringReport__init>

08012268 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 8012268:	f004 bd58 	b.w	8016d1c <autoware_vehicle_msgs__msg__SteeringReport__fini>

0801226c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 801226c:	b508      	push	{r3, lr}
 801226e:	f000 fc7b 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012272:	4b06      	ldr	r3, [pc, #24]	@ (801228c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8012274:	4906      	ldr	r1, [pc, #24]	@ (8012290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 8012276:	681a      	ldr	r2, [r3, #0]
 8012278:	60c8      	str	r0, [r1, #12]
 801227a:	b10a      	cbz	r2, 8012280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 801227c:	4803      	ldr	r0, [pc, #12]	@ (801228c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 801227e:	bd08      	pop	{r3, pc}
 8012280:	4a04      	ldr	r2, [pc, #16]	@ (8012294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 8012282:	4802      	ldr	r0, [pc, #8]	@ (801228c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8012284:	6812      	ldr	r2, [r2, #0]
 8012286:	601a      	str	r2, [r3, #0]
 8012288:	bd08      	pop	{r3, pc}
 801228a:	bf00      	nop
 801228c:	2400096c 	.word	0x2400096c
 8012290:	240008f4 	.word	0x240008f4
 8012294:	24000e98 	.word	0x24000e98

08012298 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 8012298:	f004 bd44 	b.w	8016d24 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

0801229c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 801229c:	f004 bd54 	b.w	8016d48 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

080122a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80122a0:	b508      	push	{r3, lr}
 80122a2:	f000 fc61 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122a6:	4b06      	ldr	r3, [pc, #24]	@ (80122c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80122a8:	4906      	ldr	r1, [pc, #24]	@ (80122c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	60c8      	str	r0, [r1, #12]
 80122ae:	b10a      	cbz	r2, 80122b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 80122b0:	4803      	ldr	r0, [pc, #12]	@ (80122c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80122b2:	bd08      	pop	{r3, pc}
 80122b4:	4a04      	ldr	r2, [pc, #16]	@ (80122c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 80122b6:	4802      	ldr	r0, [pc, #8]	@ (80122c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80122b8:	6812      	ldr	r2, [r2, #0]
 80122ba:	601a      	str	r2, [r3, #0]
 80122bc:	bd08      	pop	{r3, pc}
 80122be:	bf00      	nop
 80122c0:	240009f0 	.word	0x240009f0
 80122c4:	24000978 	.word	0x24000978
 80122c8:	24000e98 	.word	0x24000e98

080122cc <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 80122cc:	f004 bd40 	b.w	8016d50 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

080122d0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 80122d0:	f004 bd50 	b.w	8016d74 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

080122d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 80122d4:	b508      	push	{r3, lr}
 80122d6:	f000 fc47 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122da:	4b06      	ldr	r3, [pc, #24]	@ (80122f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80122dc:	4906      	ldr	r1, [pc, #24]	@ (80122f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 80122de:	681a      	ldr	r2, [r3, #0]
 80122e0:	60c8      	str	r0, [r1, #12]
 80122e2:	b10a      	cbz	r2, 80122e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 80122e4:	4803      	ldr	r0, [pc, #12]	@ (80122f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80122e6:	bd08      	pop	{r3, pc}
 80122e8:	4a04      	ldr	r2, [pc, #16]	@ (80122fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 80122ea:	4802      	ldr	r0, [pc, #8]	@ (80122f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80122ec:	6812      	ldr	r2, [r2, #0]
 80122ee:	601a      	str	r2, [r3, #0]
 80122f0:	bd08      	pop	{r3, pc}
 80122f2:	bf00      	nop
 80122f4:	24000a74 	.word	0x24000a74
 80122f8:	240009fc 	.word	0x240009fc
 80122fc:	24000e98 	.word	0x24000e98

08012300 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8012300:	f004 bd3c 	b.w	8016d7c <autoware_vehicle_msgs__msg__VelocityReport__init>

08012304 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8012304:	f004 bd4c 	b.w	8016da0 <autoware_vehicle_msgs__msg__VelocityReport__fini>

08012308 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8012308:	b508      	push	{r3, lr}
 801230a:	f004 f895 	bl	8016438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801230e:	4b06      	ldr	r3, [pc, #24]	@ (8012328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8012310:	4906      	ldr	r1, [pc, #24]	@ (801232c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	60c8      	str	r0, [r1, #12]
 8012316:	b10a      	cbz	r2, 801231c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 8012318:	4803      	ldr	r0, [pc, #12]	@ (8012328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 801231a:	bd08      	pop	{r3, pc}
 801231c:	4a04      	ldr	r2, [pc, #16]	@ (8012330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 801231e:	4802      	ldr	r0, [pc, #8]	@ (8012328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8012320:	6812      	ldr	r2, [r2, #0]
 8012322:	601a      	str	r2, [r3, #0]
 8012324:	bd08      	pop	{r3, pc}
 8012326:	bf00      	nop
 8012328:	24000b70 	.word	0x24000b70
 801232c:	24000a80 	.word	0x24000a80
 8012330:	24000e98 	.word	0x24000e98

08012334 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012334:	4800      	ldr	r0, [pc, #0]	@ (8012338 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 8012336:	4770      	bx	lr
 8012338:	24000b98 	.word	0x24000b98

0801233c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 801233c:	4800      	ldr	r0, [pc, #0]	@ (8012340 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 801233e:	4770      	bx	lr
 8012340:	24000ba4 	.word	0x24000ba4

08012344 <_ControlModeCommand_Response__max_serialized_size>:
 8012344:	2101      	movs	r1, #1
 8012346:	2000      	movs	r0, #0
 8012348:	b508      	push	{r3, lr}
 801234a:	f001 ff1f 	bl	801418c <ucdr_alignment>
 801234e:	3001      	adds	r0, #1
 8012350:	bd08      	pop	{r3, pc}
 8012352:	bf00      	nop

08012354 <_ControlModeCommand_Response__cdr_deserialize>:
 8012354:	b109      	cbz	r1, 801235a <_ControlModeCommand_Response__cdr_deserialize+0x6>
 8012356:	f000 bc93 	b.w	8012c80 <ucdr_deserialize_bool>
 801235a:	4608      	mov	r0, r1
 801235c:	4770      	bx	lr
 801235e:	bf00      	nop

08012360 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012360:	b538      	push	{r3, r4, r5, lr}
 8012362:	b158      	cbz	r0, 801237c <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8012364:	460d      	mov	r5, r1
 8012366:	f000 fc0d 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801236a:	2101      	movs	r1, #1
 801236c:	182c      	adds	r4, r5, r0
 801236e:	f1c5 0501 	rsb	r5, r5, #1
 8012372:	4620      	mov	r0, r4
 8012374:	f001 ff0a 	bl	801418c <ucdr_alignment>
 8012378:	4428      	add	r0, r5
 801237a:	4420      	add	r0, r4
 801237c:	bd38      	pop	{r3, r4, r5, pc}
 801237e:	bf00      	nop

08012380 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012380:	b138      	cbz	r0, 8012392 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8012382:	b508      	push	{r3, lr}
 8012384:	460b      	mov	r3, r1
 8012386:	2101      	movs	r1, #1
 8012388:	4618      	mov	r0, r3
 801238a:	f001 feff 	bl	801418c <ucdr_alignment>
 801238e:	3001      	adds	r0, #1
 8012390:	bd08      	pop	{r3, pc}
 8012392:	4770      	bx	lr

08012394 <_ControlModeCommand_Request__cdr_deserialize>:
 8012394:	b538      	push	{r3, r4, r5, lr}
 8012396:	460c      	mov	r4, r1
 8012398:	b179      	cbz	r1, 80123ba <_ControlModeCommand_Request__cdr_deserialize+0x26>
 801239a:	4605      	mov	r5, r0
 801239c:	f000 fc56 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123a0:	4603      	mov	r3, r0
 80123a2:	4621      	mov	r1, r4
 80123a4:	4628      	mov	r0, r5
 80123a6:	685b      	ldr	r3, [r3, #4]
 80123a8:	68db      	ldr	r3, [r3, #12]
 80123aa:	4798      	blx	r3
 80123ac:	f104 0108 	add.w	r1, r4, #8
 80123b0:	4628      	mov	r0, r5
 80123b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123b6:	f000 bc91 	b.w	8012cdc <ucdr_deserialize_uint8_t>
 80123ba:	4608      	mov	r0, r1
 80123bc:	bd38      	pop	{r3, r4, r5, pc}
 80123be:	bf00      	nop

080123c0 <_ControlModeCommand_Request__cdr_serialize>:
 80123c0:	b180      	cbz	r0, 80123e4 <_ControlModeCommand_Request__cdr_serialize+0x24>
 80123c2:	b538      	push	{r3, r4, r5, lr}
 80123c4:	4604      	mov	r4, r0
 80123c6:	460d      	mov	r5, r1
 80123c8:	f000 fc40 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123cc:	4603      	mov	r3, r0
 80123ce:	4629      	mov	r1, r5
 80123d0:	4620      	mov	r0, r4
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	4798      	blx	r3
 80123d8:	7a21      	ldrb	r1, [r4, #8]
 80123da:	4628      	mov	r0, r5
 80123dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123e0:	f000 bc66 	b.w	8012cb0 <ucdr_serialize_uint8_t>
 80123e4:	4770      	bx	lr
 80123e6:	bf00      	nop

080123e8 <_ControlModeCommand_Response__cdr_serialize>:
 80123e8:	460a      	mov	r2, r1
 80123ea:	b118      	cbz	r0, 80123f4 <_ControlModeCommand_Response__cdr_serialize+0xc>
 80123ec:	7801      	ldrb	r1, [r0, #0]
 80123ee:	4610      	mov	r0, r2
 80123f0:	f000 bc30 	b.w	8012c54 <ucdr_serialize_bool>
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop

080123f8 <_ControlModeCommand_Response__get_serialized_size>:
 80123f8:	b130      	cbz	r0, 8012408 <_ControlModeCommand_Response__get_serialized_size+0x10>
 80123fa:	2101      	movs	r1, #1
 80123fc:	2000      	movs	r0, #0
 80123fe:	b508      	push	{r3, lr}
 8012400:	f001 fec4 	bl	801418c <ucdr_alignment>
 8012404:	3001      	adds	r0, #1
 8012406:	bd08      	pop	{r3, pc}
 8012408:	4770      	bx	lr
 801240a:	bf00      	nop

0801240c <_ControlModeCommand_Request__get_serialized_size>:
 801240c:	b150      	cbz	r0, 8012424 <_ControlModeCommand_Request__get_serialized_size+0x18>
 801240e:	2100      	movs	r1, #0
 8012410:	b510      	push	{r4, lr}
 8012412:	f000 fbb7 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8012416:	4604      	mov	r4, r0
 8012418:	2101      	movs	r1, #1
 801241a:	f001 feb7 	bl	801418c <ucdr_alignment>
 801241e:	4420      	add	r0, r4
 8012420:	3001      	adds	r0, #1
 8012422:	bd10      	pop	{r4, pc}
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop

08012428 <_ControlModeCommand_Request__max_serialized_size>:
 8012428:	b510      	push	{r4, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	2401      	movs	r4, #1
 801242e:	2100      	movs	r1, #0
 8012430:	f10d 0007 	add.w	r0, sp, #7
 8012434:	f88d 4007 	strb.w	r4, [sp, #7]
 8012438:	f000 fbf4 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 801243c:	4621      	mov	r1, r4
 801243e:	4604      	mov	r4, r0
 8012440:	f001 fea4 	bl	801418c <ucdr_alignment>
 8012444:	4420      	add	r0, r4
 8012446:	3001      	adds	r0, #1
 8012448:	b002      	add	sp, #8
 801244a:	bd10      	pop	{r4, pc}

0801244c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 801244c:	4800      	ldr	r0, [pc, #0]	@ (8012450 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 801244e:	4770      	bx	lr
 8012450:	24000b8c 	.word	0x24000b8c

08012454 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 8012454:	b538      	push	{r3, r4, r5, lr}
 8012456:	b158      	cbz	r0, 8012470 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 8012458:	460d      	mov	r5, r1
 801245a:	f000 fb93 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801245e:	2101      	movs	r1, #1
 8012460:	182c      	adds	r4, r5, r0
 8012462:	f1c5 0501 	rsb	r5, r5, #1
 8012466:	4620      	mov	r0, r4
 8012468:	f001 fe90 	bl	801418c <ucdr_alignment>
 801246c:	4428      	add	r0, r5
 801246e:	4420      	add	r0, r4
 8012470:	bd38      	pop	{r3, r4, r5, pc}
 8012472:	bf00      	nop

08012474 <_ControlModeReport__cdr_deserialize>:
 8012474:	b538      	push	{r3, r4, r5, lr}
 8012476:	460c      	mov	r4, r1
 8012478:	b179      	cbz	r1, 801249a <_ControlModeReport__cdr_deserialize+0x26>
 801247a:	4605      	mov	r5, r0
 801247c:	f000 fbe6 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012480:	4603      	mov	r3, r0
 8012482:	4621      	mov	r1, r4
 8012484:	4628      	mov	r0, r5
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	68db      	ldr	r3, [r3, #12]
 801248a:	4798      	blx	r3
 801248c:	f104 0108 	add.w	r1, r4, #8
 8012490:	4628      	mov	r0, r5
 8012492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012496:	f000 bc21 	b.w	8012cdc <ucdr_deserialize_uint8_t>
 801249a:	4608      	mov	r0, r1
 801249c:	bd38      	pop	{r3, r4, r5, pc}
 801249e:	bf00      	nop

080124a0 <_ControlModeReport__cdr_serialize>:
 80124a0:	b180      	cbz	r0, 80124c4 <_ControlModeReport__cdr_serialize+0x24>
 80124a2:	b538      	push	{r3, r4, r5, lr}
 80124a4:	4604      	mov	r4, r0
 80124a6:	460d      	mov	r5, r1
 80124a8:	f000 fbd0 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124ac:	4603      	mov	r3, r0
 80124ae:	4629      	mov	r1, r5
 80124b0:	4620      	mov	r0, r4
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	689b      	ldr	r3, [r3, #8]
 80124b6:	4798      	blx	r3
 80124b8:	7a21      	ldrb	r1, [r4, #8]
 80124ba:	4628      	mov	r0, r5
 80124bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124c0:	f000 bbf6 	b.w	8012cb0 <ucdr_serialize_uint8_t>
 80124c4:	4770      	bx	lr
 80124c6:	bf00      	nop

080124c8 <_ControlModeReport__get_serialized_size>:
 80124c8:	b150      	cbz	r0, 80124e0 <_ControlModeReport__get_serialized_size+0x18>
 80124ca:	2100      	movs	r1, #0
 80124cc:	b510      	push	{r4, lr}
 80124ce:	f000 fb59 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 80124d2:	4604      	mov	r4, r0
 80124d4:	2101      	movs	r1, #1
 80124d6:	f001 fe59 	bl	801418c <ucdr_alignment>
 80124da:	4420      	add	r0, r4
 80124dc:	3001      	adds	r0, #1
 80124de:	bd10      	pop	{r4, pc}
 80124e0:	4770      	bx	lr
 80124e2:	bf00      	nop

080124e4 <_ControlModeReport__max_serialized_size>:
 80124e4:	b510      	push	{r4, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	2401      	movs	r4, #1
 80124ea:	2100      	movs	r1, #0
 80124ec:	f10d 0007 	add.w	r0, sp, #7
 80124f0:	f88d 4007 	strb.w	r4, [sp, #7]
 80124f4:	f000 fb96 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 80124f8:	4621      	mov	r1, r4
 80124fa:	4604      	mov	r4, r0
 80124fc:	f001 fe46 	bl	801418c <ucdr_alignment>
 8012500:	4420      	add	r0, r4
 8012502:	3001      	adds	r0, #1
 8012504:	b002      	add	sp, #8
 8012506:	bd10      	pop	{r4, pc}

08012508 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8012508:	4800      	ldr	r0, [pc, #0]	@ (801250c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 801250a:	4770      	bx	lr
 801250c:	24000be8 	.word	0x24000be8

08012510 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	b158      	cbz	r0, 801252c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 8012514:	460d      	mov	r5, r1
 8012516:	f000 fb35 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801251a:	2101      	movs	r1, #1
 801251c:	182c      	adds	r4, r5, r0
 801251e:	f1c5 0501 	rsb	r5, r5, #1
 8012522:	4620      	mov	r0, r4
 8012524:	f001 fe32 	bl	801418c <ucdr_alignment>
 8012528:	4428      	add	r0, r5
 801252a:	4420      	add	r0, r4
 801252c:	bd38      	pop	{r3, r4, r5, pc}
 801252e:	bf00      	nop

08012530 <_GearCommand__cdr_deserialize>:
 8012530:	b538      	push	{r3, r4, r5, lr}
 8012532:	460c      	mov	r4, r1
 8012534:	b179      	cbz	r1, 8012556 <_GearCommand__cdr_deserialize+0x26>
 8012536:	4605      	mov	r5, r0
 8012538:	f000 fb88 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801253c:	4603      	mov	r3, r0
 801253e:	4621      	mov	r1, r4
 8012540:	4628      	mov	r0, r5
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	4798      	blx	r3
 8012548:	f104 0108 	add.w	r1, r4, #8
 801254c:	4628      	mov	r0, r5
 801254e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012552:	f000 bbc3 	b.w	8012cdc <ucdr_deserialize_uint8_t>
 8012556:	4608      	mov	r0, r1
 8012558:	bd38      	pop	{r3, r4, r5, pc}
 801255a:	bf00      	nop

0801255c <_GearCommand__cdr_serialize>:
 801255c:	b180      	cbz	r0, 8012580 <_GearCommand__cdr_serialize+0x24>
 801255e:	b538      	push	{r3, r4, r5, lr}
 8012560:	4604      	mov	r4, r0
 8012562:	460d      	mov	r5, r1
 8012564:	f000 fb72 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012568:	4603      	mov	r3, r0
 801256a:	4629      	mov	r1, r5
 801256c:	4620      	mov	r0, r4
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	689b      	ldr	r3, [r3, #8]
 8012572:	4798      	blx	r3
 8012574:	7a21      	ldrb	r1, [r4, #8]
 8012576:	4628      	mov	r0, r5
 8012578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801257c:	f000 bb98 	b.w	8012cb0 <ucdr_serialize_uint8_t>
 8012580:	4770      	bx	lr
 8012582:	bf00      	nop

08012584 <_GearCommand__get_serialized_size>:
 8012584:	b150      	cbz	r0, 801259c <_GearCommand__get_serialized_size+0x18>
 8012586:	2100      	movs	r1, #0
 8012588:	b510      	push	{r4, lr}
 801258a:	f000 fafb 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801258e:	4604      	mov	r4, r0
 8012590:	2101      	movs	r1, #1
 8012592:	f001 fdfb 	bl	801418c <ucdr_alignment>
 8012596:	4420      	add	r0, r4
 8012598:	3001      	adds	r0, #1
 801259a:	bd10      	pop	{r4, pc}
 801259c:	4770      	bx	lr
 801259e:	bf00      	nop

080125a0 <_GearCommand__max_serialized_size>:
 80125a0:	b510      	push	{r4, lr}
 80125a2:	b082      	sub	sp, #8
 80125a4:	2401      	movs	r4, #1
 80125a6:	2100      	movs	r1, #0
 80125a8:	f10d 0007 	add.w	r0, sp, #7
 80125ac:	f88d 4007 	strb.w	r4, [sp, #7]
 80125b0:	f000 fb38 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 80125b4:	4621      	mov	r1, r4
 80125b6:	4604      	mov	r4, r0
 80125b8:	f001 fde8 	bl	801418c <ucdr_alignment>
 80125bc:	4420      	add	r0, r4
 80125be:	3001      	adds	r0, #1
 80125c0:	b002      	add	sp, #8
 80125c2:	bd10      	pop	{r4, pc}

080125c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 80125c4:	4800      	ldr	r0, [pc, #0]	@ (80125c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 80125c6:	4770      	bx	lr
 80125c8:	24000c10 	.word	0x24000c10

080125cc <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 80125cc:	b538      	push	{r3, r4, r5, lr}
 80125ce:	b158      	cbz	r0, 80125e8 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 80125d0:	460d      	mov	r5, r1
 80125d2:	f000 fad7 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 80125d6:	2101      	movs	r1, #1
 80125d8:	182c      	adds	r4, r5, r0
 80125da:	f1c5 0501 	rsb	r5, r5, #1
 80125de:	4620      	mov	r0, r4
 80125e0:	f001 fdd4 	bl	801418c <ucdr_alignment>
 80125e4:	4428      	add	r0, r5
 80125e6:	4420      	add	r0, r4
 80125e8:	bd38      	pop	{r3, r4, r5, pc}
 80125ea:	bf00      	nop

080125ec <_GearReport__cdr_deserialize>:
 80125ec:	b538      	push	{r3, r4, r5, lr}
 80125ee:	460c      	mov	r4, r1
 80125f0:	b179      	cbz	r1, 8012612 <_GearReport__cdr_deserialize+0x26>
 80125f2:	4605      	mov	r5, r0
 80125f4:	f000 fb2a 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80125f8:	4603      	mov	r3, r0
 80125fa:	4621      	mov	r1, r4
 80125fc:	4628      	mov	r0, r5
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	4798      	blx	r3
 8012604:	f104 0108 	add.w	r1, r4, #8
 8012608:	4628      	mov	r0, r5
 801260a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801260e:	f000 bb65 	b.w	8012cdc <ucdr_deserialize_uint8_t>
 8012612:	4608      	mov	r0, r1
 8012614:	bd38      	pop	{r3, r4, r5, pc}
 8012616:	bf00      	nop

08012618 <_GearReport__cdr_serialize>:
 8012618:	b180      	cbz	r0, 801263c <_GearReport__cdr_serialize+0x24>
 801261a:	b538      	push	{r3, r4, r5, lr}
 801261c:	4604      	mov	r4, r0
 801261e:	460d      	mov	r5, r1
 8012620:	f000 fb14 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012624:	4603      	mov	r3, r0
 8012626:	4629      	mov	r1, r5
 8012628:	4620      	mov	r0, r4
 801262a:	685b      	ldr	r3, [r3, #4]
 801262c:	689b      	ldr	r3, [r3, #8]
 801262e:	4798      	blx	r3
 8012630:	7a21      	ldrb	r1, [r4, #8]
 8012632:	4628      	mov	r0, r5
 8012634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012638:	f000 bb3a 	b.w	8012cb0 <ucdr_serialize_uint8_t>
 801263c:	4770      	bx	lr
 801263e:	bf00      	nop

08012640 <_GearReport__get_serialized_size>:
 8012640:	b150      	cbz	r0, 8012658 <_GearReport__get_serialized_size+0x18>
 8012642:	2100      	movs	r1, #0
 8012644:	b510      	push	{r4, lr}
 8012646:	f000 fa9d 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801264a:	4604      	mov	r4, r0
 801264c:	2101      	movs	r1, #1
 801264e:	f001 fd9d 	bl	801418c <ucdr_alignment>
 8012652:	4420      	add	r0, r4
 8012654:	3001      	adds	r0, #1
 8012656:	bd10      	pop	{r4, pc}
 8012658:	4770      	bx	lr
 801265a:	bf00      	nop

0801265c <_GearReport__max_serialized_size>:
 801265c:	b510      	push	{r4, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	2401      	movs	r4, #1
 8012662:	2100      	movs	r1, #0
 8012664:	f10d 0007 	add.w	r0, sp, #7
 8012668:	f88d 4007 	strb.w	r4, [sp, #7]
 801266c:	f000 fada 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8012670:	4621      	mov	r1, r4
 8012672:	4604      	mov	r4, r0
 8012674:	f001 fd8a 	bl	801418c <ucdr_alignment>
 8012678:	4420      	add	r0, r4
 801267a:	3001      	adds	r0, #1
 801267c:	b002      	add	sp, #8
 801267e:	bd10      	pop	{r4, pc}

08012680 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8012680:	4800      	ldr	r0, [pc, #0]	@ (8012684 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 8012682:	4770      	bx	lr
 8012684:	24000c38 	.word	0x24000c38

08012688 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8012688:	b538      	push	{r3, r4, r5, lr}
 801268a:	b158      	cbz	r0, 80126a4 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 801268c:	460d      	mov	r5, r1
 801268e:	f000 fa79 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8012692:	2101      	movs	r1, #1
 8012694:	182c      	adds	r4, r5, r0
 8012696:	f1c5 0501 	rsb	r5, r5, #1
 801269a:	4620      	mov	r0, r4
 801269c:	f001 fd76 	bl	801418c <ucdr_alignment>
 80126a0:	4428      	add	r0, r5
 80126a2:	4420      	add	r0, r4
 80126a4:	bd38      	pop	{r3, r4, r5, pc}
 80126a6:	bf00      	nop

080126a8 <_HazardLightsCommand__cdr_deserialize>:
 80126a8:	b538      	push	{r3, r4, r5, lr}
 80126aa:	460c      	mov	r4, r1
 80126ac:	b179      	cbz	r1, 80126ce <_HazardLightsCommand__cdr_deserialize+0x26>
 80126ae:	4605      	mov	r5, r0
 80126b0:	f000 facc 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126b4:	4603      	mov	r3, r0
 80126b6:	4621      	mov	r1, r4
 80126b8:	4628      	mov	r0, r5
 80126ba:	685b      	ldr	r3, [r3, #4]
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	4798      	blx	r3
 80126c0:	f104 0108 	add.w	r1, r4, #8
 80126c4:	4628      	mov	r0, r5
 80126c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126ca:	f000 bb07 	b.w	8012cdc <ucdr_deserialize_uint8_t>
 80126ce:	4608      	mov	r0, r1
 80126d0:	bd38      	pop	{r3, r4, r5, pc}
 80126d2:	bf00      	nop

080126d4 <_HazardLightsCommand__cdr_serialize>:
 80126d4:	b180      	cbz	r0, 80126f8 <_HazardLightsCommand__cdr_serialize+0x24>
 80126d6:	b538      	push	{r3, r4, r5, lr}
 80126d8:	4604      	mov	r4, r0
 80126da:	460d      	mov	r5, r1
 80126dc:	f000 fab6 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126e0:	4603      	mov	r3, r0
 80126e2:	4629      	mov	r1, r5
 80126e4:	4620      	mov	r0, r4
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	689b      	ldr	r3, [r3, #8]
 80126ea:	4798      	blx	r3
 80126ec:	7a21      	ldrb	r1, [r4, #8]
 80126ee:	4628      	mov	r0, r5
 80126f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126f4:	f000 badc 	b.w	8012cb0 <ucdr_serialize_uint8_t>
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop

080126fc <_HazardLightsCommand__get_serialized_size>:
 80126fc:	b150      	cbz	r0, 8012714 <_HazardLightsCommand__get_serialized_size+0x18>
 80126fe:	2100      	movs	r1, #0
 8012700:	b510      	push	{r4, lr}
 8012702:	f000 fa3f 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8012706:	4604      	mov	r4, r0
 8012708:	2101      	movs	r1, #1
 801270a:	f001 fd3f 	bl	801418c <ucdr_alignment>
 801270e:	4420      	add	r0, r4
 8012710:	3001      	adds	r0, #1
 8012712:	bd10      	pop	{r4, pc}
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop

08012718 <_HazardLightsCommand__max_serialized_size>:
 8012718:	b510      	push	{r4, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	2401      	movs	r4, #1
 801271e:	2100      	movs	r1, #0
 8012720:	f10d 0007 	add.w	r0, sp, #7
 8012724:	f88d 4007 	strb.w	r4, [sp, #7]
 8012728:	f000 fa7c 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 801272c:	4621      	mov	r1, r4
 801272e:	4604      	mov	r4, r0
 8012730:	f001 fd2c 	bl	801418c <ucdr_alignment>
 8012734:	4420      	add	r0, r4
 8012736:	3001      	adds	r0, #1
 8012738:	b002      	add	sp, #8
 801273a:	bd10      	pop	{r4, pc}

0801273c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 801273c:	4800      	ldr	r0, [pc, #0]	@ (8012740 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 801273e:	4770      	bx	lr
 8012740:	24000c60 	.word	0x24000c60

08012744 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 8012744:	b538      	push	{r3, r4, r5, lr}
 8012746:	b158      	cbz	r0, 8012760 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 8012748:	460d      	mov	r5, r1
 801274a:	f000 fa1b 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801274e:	2101      	movs	r1, #1
 8012750:	182c      	adds	r4, r5, r0
 8012752:	f1c5 0501 	rsb	r5, r5, #1
 8012756:	4620      	mov	r0, r4
 8012758:	f001 fd18 	bl	801418c <ucdr_alignment>
 801275c:	4428      	add	r0, r5
 801275e:	4420      	add	r0, r4
 8012760:	bd38      	pop	{r3, r4, r5, pc}
 8012762:	bf00      	nop

08012764 <_HazardLightsReport__cdr_deserialize>:
 8012764:	b538      	push	{r3, r4, r5, lr}
 8012766:	460c      	mov	r4, r1
 8012768:	b179      	cbz	r1, 801278a <_HazardLightsReport__cdr_deserialize+0x26>
 801276a:	4605      	mov	r5, r0
 801276c:	f000 fa6e 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012770:	4603      	mov	r3, r0
 8012772:	4621      	mov	r1, r4
 8012774:	4628      	mov	r0, r5
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	68db      	ldr	r3, [r3, #12]
 801277a:	4798      	blx	r3
 801277c:	f104 0108 	add.w	r1, r4, #8
 8012780:	4628      	mov	r0, r5
 8012782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012786:	f000 baa9 	b.w	8012cdc <ucdr_deserialize_uint8_t>
 801278a:	4608      	mov	r0, r1
 801278c:	bd38      	pop	{r3, r4, r5, pc}
 801278e:	bf00      	nop

08012790 <_HazardLightsReport__cdr_serialize>:
 8012790:	b180      	cbz	r0, 80127b4 <_HazardLightsReport__cdr_serialize+0x24>
 8012792:	b538      	push	{r3, r4, r5, lr}
 8012794:	4604      	mov	r4, r0
 8012796:	460d      	mov	r5, r1
 8012798:	f000 fa58 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801279c:	4603      	mov	r3, r0
 801279e:	4629      	mov	r1, r5
 80127a0:	4620      	mov	r0, r4
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	689b      	ldr	r3, [r3, #8]
 80127a6:	4798      	blx	r3
 80127a8:	7a21      	ldrb	r1, [r4, #8]
 80127aa:	4628      	mov	r0, r5
 80127ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127b0:	f000 ba7e 	b.w	8012cb0 <ucdr_serialize_uint8_t>
 80127b4:	4770      	bx	lr
 80127b6:	bf00      	nop

080127b8 <_HazardLightsReport__get_serialized_size>:
 80127b8:	b150      	cbz	r0, 80127d0 <_HazardLightsReport__get_serialized_size+0x18>
 80127ba:	2100      	movs	r1, #0
 80127bc:	b510      	push	{r4, lr}
 80127be:	f000 f9e1 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 80127c2:	4604      	mov	r4, r0
 80127c4:	2101      	movs	r1, #1
 80127c6:	f001 fce1 	bl	801418c <ucdr_alignment>
 80127ca:	4420      	add	r0, r4
 80127cc:	3001      	adds	r0, #1
 80127ce:	bd10      	pop	{r4, pc}
 80127d0:	4770      	bx	lr
 80127d2:	bf00      	nop

080127d4 <_HazardLightsReport__max_serialized_size>:
 80127d4:	b510      	push	{r4, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	2401      	movs	r4, #1
 80127da:	2100      	movs	r1, #0
 80127dc:	f10d 0007 	add.w	r0, sp, #7
 80127e0:	f88d 4007 	strb.w	r4, [sp, #7]
 80127e4:	f000 fa1e 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 80127e8:	4621      	mov	r1, r4
 80127ea:	4604      	mov	r4, r0
 80127ec:	f001 fcce 	bl	801418c <ucdr_alignment>
 80127f0:	4420      	add	r0, r4
 80127f2:	3001      	adds	r0, #1
 80127f4:	b002      	add	sp, #8
 80127f6:	bd10      	pop	{r4, pc}

080127f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 80127f8:	4800      	ldr	r0, [pc, #0]	@ (80127fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 80127fa:	4770      	bx	lr
 80127fc:	24000c88 	.word	0x24000c88

08012800 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 8012800:	b538      	push	{r3, r4, r5, lr}
 8012802:	b158      	cbz	r0, 801281c <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 8012804:	460d      	mov	r5, r1
 8012806:	f000 f9bd 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801280a:	2104      	movs	r1, #4
 801280c:	182c      	adds	r4, r5, r0
 801280e:	f1c5 0504 	rsb	r5, r5, #4
 8012812:	4620      	mov	r0, r4
 8012814:	f001 fcba 	bl	801418c <ucdr_alignment>
 8012818:	4428      	add	r0, r5
 801281a:	4420      	add	r0, r4
 801281c:	bd38      	pop	{r3, r4, r5, pc}
 801281e:	bf00      	nop

08012820 <_SteeringReport__cdr_deserialize>:
 8012820:	b538      	push	{r3, r4, r5, lr}
 8012822:	460c      	mov	r4, r1
 8012824:	b179      	cbz	r1, 8012846 <_SteeringReport__cdr_deserialize+0x26>
 8012826:	4605      	mov	r5, r0
 8012828:	f000 fa10 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801282c:	4603      	mov	r3, r0
 801282e:	4621      	mov	r1, r4
 8012830:	4628      	mov	r0, r5
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	68db      	ldr	r3, [r3, #12]
 8012836:	4798      	blx	r3
 8012838:	f104 0108 	add.w	r1, r4, #8
 801283c:	4628      	mov	r0, r5
 801283e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012842:	f001 ba25 	b.w	8013c90 <ucdr_deserialize_float>
 8012846:	4608      	mov	r0, r1
 8012848:	bd38      	pop	{r3, r4, r5, pc}
 801284a:	bf00      	nop

0801284c <_SteeringReport__cdr_serialize>:
 801284c:	b188      	cbz	r0, 8012872 <_SteeringReport__cdr_serialize+0x26>
 801284e:	b538      	push	{r3, r4, r5, lr}
 8012850:	4604      	mov	r4, r0
 8012852:	460d      	mov	r5, r1
 8012854:	f000 f9fa 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012858:	4603      	mov	r3, r0
 801285a:	4629      	mov	r1, r5
 801285c:	4620      	mov	r0, r4
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	689b      	ldr	r3, [r3, #8]
 8012862:	4798      	blx	r3
 8012864:	ed94 0a02 	vldr	s0, [r4, #8]
 8012868:	4628      	mov	r0, r5
 801286a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801286e:	f001 b977 	b.w	8013b60 <ucdr_serialize_float>
 8012872:	4770      	bx	lr

08012874 <_SteeringReport__get_serialized_size>:
 8012874:	b150      	cbz	r0, 801288c <_SteeringReport__get_serialized_size+0x18>
 8012876:	2100      	movs	r1, #0
 8012878:	b510      	push	{r4, lr}
 801287a:	f000 f983 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801287e:	4604      	mov	r4, r0
 8012880:	2104      	movs	r1, #4
 8012882:	f001 fc83 	bl	801418c <ucdr_alignment>
 8012886:	4420      	add	r0, r4
 8012888:	3004      	adds	r0, #4
 801288a:	bd10      	pop	{r4, pc}
 801288c:	4770      	bx	lr
 801288e:	bf00      	nop

08012890 <_SteeringReport__max_serialized_size>:
 8012890:	b510      	push	{r4, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	2301      	movs	r3, #1
 8012896:	2100      	movs	r1, #0
 8012898:	f10d 0007 	add.w	r0, sp, #7
 801289c:	f88d 3007 	strb.w	r3, [sp, #7]
 80128a0:	f000 f9c0 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 80128a4:	4604      	mov	r4, r0
 80128a6:	2104      	movs	r1, #4
 80128a8:	f001 fc70 	bl	801418c <ucdr_alignment>
 80128ac:	4420      	add	r0, r4
 80128ae:	3004      	adds	r0, #4
 80128b0:	b002      	add	sp, #8
 80128b2:	bd10      	pop	{r4, pc}

080128b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 80128b4:	4800      	ldr	r0, [pc, #0]	@ (80128b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 80128b6:	4770      	bx	lr
 80128b8:	24000cb0 	.word	0x24000cb0

080128bc <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80128bc:	b538      	push	{r3, r4, r5, lr}
 80128be:	b158      	cbz	r0, 80128d8 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 80128c0:	460d      	mov	r5, r1
 80128c2:	f000 f95f 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 80128c6:	2101      	movs	r1, #1
 80128c8:	182c      	adds	r4, r5, r0
 80128ca:	f1c5 0501 	rsb	r5, r5, #1
 80128ce:	4620      	mov	r0, r4
 80128d0:	f001 fc5c 	bl	801418c <ucdr_alignment>
 80128d4:	4428      	add	r0, r5
 80128d6:	4420      	add	r0, r4
 80128d8:	bd38      	pop	{r3, r4, r5, pc}
 80128da:	bf00      	nop

080128dc <_TurnIndicatorsCommand__cdr_deserialize>:
 80128dc:	b538      	push	{r3, r4, r5, lr}
 80128de:	460c      	mov	r4, r1
 80128e0:	b179      	cbz	r1, 8012902 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 80128e2:	4605      	mov	r5, r0
 80128e4:	f000 f9b2 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128e8:	4603      	mov	r3, r0
 80128ea:	4621      	mov	r1, r4
 80128ec:	4628      	mov	r0, r5
 80128ee:	685b      	ldr	r3, [r3, #4]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	4798      	blx	r3
 80128f4:	f104 0108 	add.w	r1, r4, #8
 80128f8:	4628      	mov	r0, r5
 80128fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128fe:	f000 b9ed 	b.w	8012cdc <ucdr_deserialize_uint8_t>
 8012902:	4608      	mov	r0, r1
 8012904:	bd38      	pop	{r3, r4, r5, pc}
 8012906:	bf00      	nop

08012908 <_TurnIndicatorsCommand__cdr_serialize>:
 8012908:	b180      	cbz	r0, 801292c <_TurnIndicatorsCommand__cdr_serialize+0x24>
 801290a:	b538      	push	{r3, r4, r5, lr}
 801290c:	4604      	mov	r4, r0
 801290e:	460d      	mov	r5, r1
 8012910:	f000 f99c 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012914:	4603      	mov	r3, r0
 8012916:	4629      	mov	r1, r5
 8012918:	4620      	mov	r0, r4
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	689b      	ldr	r3, [r3, #8]
 801291e:	4798      	blx	r3
 8012920:	7a21      	ldrb	r1, [r4, #8]
 8012922:	4628      	mov	r0, r5
 8012924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012928:	f000 b9c2 	b.w	8012cb0 <ucdr_serialize_uint8_t>
 801292c:	4770      	bx	lr
 801292e:	bf00      	nop

08012930 <_TurnIndicatorsCommand__get_serialized_size>:
 8012930:	b150      	cbz	r0, 8012948 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8012932:	2100      	movs	r1, #0
 8012934:	b510      	push	{r4, lr}
 8012936:	f000 f925 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801293a:	4604      	mov	r4, r0
 801293c:	2101      	movs	r1, #1
 801293e:	f001 fc25 	bl	801418c <ucdr_alignment>
 8012942:	4420      	add	r0, r4
 8012944:	3001      	adds	r0, #1
 8012946:	bd10      	pop	{r4, pc}
 8012948:	4770      	bx	lr
 801294a:	bf00      	nop

0801294c <_TurnIndicatorsCommand__max_serialized_size>:
 801294c:	b510      	push	{r4, lr}
 801294e:	b082      	sub	sp, #8
 8012950:	2401      	movs	r4, #1
 8012952:	2100      	movs	r1, #0
 8012954:	f10d 0007 	add.w	r0, sp, #7
 8012958:	f88d 4007 	strb.w	r4, [sp, #7]
 801295c:	f000 f962 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8012960:	4621      	mov	r1, r4
 8012962:	4604      	mov	r4, r0
 8012964:	f001 fc12 	bl	801418c <ucdr_alignment>
 8012968:	4420      	add	r0, r4
 801296a:	3001      	adds	r0, #1
 801296c:	b002      	add	sp, #8
 801296e:	bd10      	pop	{r4, pc}

08012970 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012970:	4800      	ldr	r0, [pc, #0]	@ (8012974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 8012972:	4770      	bx	lr
 8012974:	24000cd8 	.word	0x24000cd8

08012978 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012978:	b538      	push	{r3, r4, r5, lr}
 801297a:	b158      	cbz	r0, 8012994 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 801297c:	460d      	mov	r5, r1
 801297e:	f000 f901 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8012982:	2101      	movs	r1, #1
 8012984:	182c      	adds	r4, r5, r0
 8012986:	f1c5 0501 	rsb	r5, r5, #1
 801298a:	4620      	mov	r0, r4
 801298c:	f001 fbfe 	bl	801418c <ucdr_alignment>
 8012990:	4428      	add	r0, r5
 8012992:	4420      	add	r0, r4
 8012994:	bd38      	pop	{r3, r4, r5, pc}
 8012996:	bf00      	nop

08012998 <_TurnIndicatorsReport__cdr_deserialize>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	460c      	mov	r4, r1
 801299c:	b179      	cbz	r1, 80129be <_TurnIndicatorsReport__cdr_deserialize+0x26>
 801299e:	4605      	mov	r5, r0
 80129a0:	f000 f954 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129a4:	4603      	mov	r3, r0
 80129a6:	4621      	mov	r1, r4
 80129a8:	4628      	mov	r0, r5
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	4798      	blx	r3
 80129b0:	f104 0108 	add.w	r1, r4, #8
 80129b4:	4628      	mov	r0, r5
 80129b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129ba:	f000 b98f 	b.w	8012cdc <ucdr_deserialize_uint8_t>
 80129be:	4608      	mov	r0, r1
 80129c0:	bd38      	pop	{r3, r4, r5, pc}
 80129c2:	bf00      	nop

080129c4 <_TurnIndicatorsReport__cdr_serialize>:
 80129c4:	b180      	cbz	r0, 80129e8 <_TurnIndicatorsReport__cdr_serialize+0x24>
 80129c6:	b538      	push	{r3, r4, r5, lr}
 80129c8:	4604      	mov	r4, r0
 80129ca:	460d      	mov	r5, r1
 80129cc:	f000 f93e 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129d0:	4603      	mov	r3, r0
 80129d2:	4629      	mov	r1, r5
 80129d4:	4620      	mov	r0, r4
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	689b      	ldr	r3, [r3, #8]
 80129da:	4798      	blx	r3
 80129dc:	7a21      	ldrb	r1, [r4, #8]
 80129de:	4628      	mov	r0, r5
 80129e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129e4:	f000 b964 	b.w	8012cb0 <ucdr_serialize_uint8_t>
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop

080129ec <_TurnIndicatorsReport__get_serialized_size>:
 80129ec:	b150      	cbz	r0, 8012a04 <_TurnIndicatorsReport__get_serialized_size+0x18>
 80129ee:	2100      	movs	r1, #0
 80129f0:	b510      	push	{r4, lr}
 80129f2:	f000 f8c7 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 80129f6:	4604      	mov	r4, r0
 80129f8:	2101      	movs	r1, #1
 80129fa:	f001 fbc7 	bl	801418c <ucdr_alignment>
 80129fe:	4420      	add	r0, r4
 8012a00:	3001      	adds	r0, #1
 8012a02:	bd10      	pop	{r4, pc}
 8012a04:	4770      	bx	lr
 8012a06:	bf00      	nop

08012a08 <_TurnIndicatorsReport__max_serialized_size>:
 8012a08:	b510      	push	{r4, lr}
 8012a0a:	b082      	sub	sp, #8
 8012a0c:	2401      	movs	r4, #1
 8012a0e:	2100      	movs	r1, #0
 8012a10:	f10d 0007 	add.w	r0, sp, #7
 8012a14:	f88d 4007 	strb.w	r4, [sp, #7]
 8012a18:	f000 f904 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	4604      	mov	r4, r0
 8012a20:	f001 fbb4 	bl	801418c <ucdr_alignment>
 8012a24:	4420      	add	r0, r4
 8012a26:	3001      	adds	r0, #1
 8012a28:	b002      	add	sp, #8
 8012a2a:	bd10      	pop	{r4, pc}

08012a2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012a2c:	4800      	ldr	r0, [pc, #0]	@ (8012a30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 8012a2e:	4770      	bx	lr
 8012a30:	24000d00 	.word	0x24000d00

08012a34 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 8012a34:	b1c8      	cbz	r0, 8012a6a <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 8012a36:	b570      	push	{r4, r5, r6, lr}
 8012a38:	460d      	mov	r5, r1
 8012a3a:	f003 fd21 	bl	8016480 <get_serialized_size_std_msgs__msg__Header>
 8012a3e:	2104      	movs	r1, #4
 8012a40:	182e      	adds	r6, r5, r0
 8012a42:	f1c5 0504 	rsb	r5, r5, #4
 8012a46:	4630      	mov	r0, r6
 8012a48:	f001 fba0 	bl	801418c <ucdr_alignment>
 8012a4c:	2104      	movs	r1, #4
 8012a4e:	1844      	adds	r4, r0, r1
 8012a50:	4434      	add	r4, r6
 8012a52:	4620      	mov	r0, r4
 8012a54:	f001 fb9a 	bl	801418c <ucdr_alignment>
 8012a58:	2104      	movs	r1, #4
 8012a5a:	4408      	add	r0, r1
 8012a5c:	4404      	add	r4, r0
 8012a5e:	4620      	mov	r0, r4
 8012a60:	f001 fb94 	bl	801418c <ucdr_alignment>
 8012a64:	4428      	add	r0, r5
 8012a66:	4420      	add	r0, r4
 8012a68:	bd70      	pop	{r4, r5, r6, pc}
 8012a6a:	4770      	bx	lr

08012a6c <_VelocityReport__cdr_deserialize>:
 8012a6c:	b538      	push	{r3, r4, r5, lr}
 8012a6e:	460c      	mov	r4, r1
 8012a70:	b1c9      	cbz	r1, 8012aa6 <_VelocityReport__cdr_deserialize+0x3a>
 8012a72:	4605      	mov	r5, r0
 8012a74:	f003 fd88 	bl	8016588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	4621      	mov	r1, r4
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	4798      	blx	r3
 8012a84:	f104 0114 	add.w	r1, r4, #20
 8012a88:	4628      	mov	r0, r5
 8012a8a:	f001 f901 	bl	8013c90 <ucdr_deserialize_float>
 8012a8e:	f104 0118 	add.w	r1, r4, #24
 8012a92:	4628      	mov	r0, r5
 8012a94:	f001 f8fc 	bl	8013c90 <ucdr_deserialize_float>
 8012a98:	f104 011c 	add.w	r1, r4, #28
 8012a9c:	4628      	mov	r0, r5
 8012a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aa2:	f001 b8f5 	b.w	8013c90 <ucdr_deserialize_float>
 8012aa6:	4608      	mov	r0, r1
 8012aa8:	bd38      	pop	{r3, r4, r5, pc}
 8012aaa:	bf00      	nop

08012aac <_VelocityReport__cdr_serialize>:
 8012aac:	b1d8      	cbz	r0, 8012ae6 <_VelocityReport__cdr_serialize+0x3a>
 8012aae:	b538      	push	{r3, r4, r5, lr}
 8012ab0:	4604      	mov	r4, r0
 8012ab2:	460d      	mov	r5, r1
 8012ab4:	f003 fd68 	bl	8016588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	4629      	mov	r1, r5
 8012abc:	4620      	mov	r0, r4
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	689b      	ldr	r3, [r3, #8]
 8012ac2:	4798      	blx	r3
 8012ac4:	ed94 0a05 	vldr	s0, [r4, #20]
 8012ac8:	4628      	mov	r0, r5
 8012aca:	f001 f849 	bl	8013b60 <ucdr_serialize_float>
 8012ace:	ed94 0a06 	vldr	s0, [r4, #24]
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	f001 f844 	bl	8013b60 <ucdr_serialize_float>
 8012ad8:	ed94 0a07 	vldr	s0, [r4, #28]
 8012adc:	4628      	mov	r0, r5
 8012ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ae2:	f001 b83d 	b.w	8013b60 <ucdr_serialize_float>
 8012ae6:	4770      	bx	lr

08012ae8 <_VelocityReport__get_serialized_size>:
 8012ae8:	b1b0      	cbz	r0, 8012b18 <_VelocityReport__get_serialized_size+0x30>
 8012aea:	2100      	movs	r1, #0
 8012aec:	b510      	push	{r4, lr}
 8012aee:	f003 fcc7 	bl	8016480 <get_serialized_size_std_msgs__msg__Header>
 8012af2:	4604      	mov	r4, r0
 8012af4:	2104      	movs	r1, #4
 8012af6:	f001 fb49 	bl	801418c <ucdr_alignment>
 8012afa:	2104      	movs	r1, #4
 8012afc:	4420      	add	r0, r4
 8012afe:	1844      	adds	r4, r0, r1
 8012b00:	4620      	mov	r0, r4
 8012b02:	f001 fb43 	bl	801418c <ucdr_alignment>
 8012b06:	2104      	movs	r1, #4
 8012b08:	4408      	add	r0, r1
 8012b0a:	4404      	add	r4, r0
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f001 fb3d 	bl	801418c <ucdr_alignment>
 8012b12:	3004      	adds	r0, #4
 8012b14:	4420      	add	r0, r4
 8012b16:	bd10      	pop	{r4, pc}
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop

08012b1c <_VelocityReport__max_serialized_size>:
 8012b1c:	b510      	push	{r4, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	2301      	movs	r3, #1
 8012b22:	2100      	movs	r1, #0
 8012b24:	f10d 0007 	add.w	r0, sp, #7
 8012b28:	f88d 3007 	strb.w	r3, [sp, #7]
 8012b2c:	f003 fd22 	bl	8016574 <max_serialized_size_std_msgs__msg__Header>
 8012b30:	4604      	mov	r4, r0
 8012b32:	2104      	movs	r1, #4
 8012b34:	f001 fb2a 	bl	801418c <ucdr_alignment>
 8012b38:	2104      	movs	r1, #4
 8012b3a:	4420      	add	r0, r4
 8012b3c:	1844      	adds	r4, r0, r1
 8012b3e:	4620      	mov	r0, r4
 8012b40:	f001 fb24 	bl	801418c <ucdr_alignment>
 8012b44:	2104      	movs	r1, #4
 8012b46:	4408      	add	r0, r1
 8012b48:	4404      	add	r4, r0
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f001 fb1e 	bl	801418c <ucdr_alignment>
 8012b50:	3004      	adds	r0, #4
 8012b52:	4420      	add	r0, r4
 8012b54:	b002      	add	sp, #8
 8012b56:	bd10      	pop	{r4, pc}

08012b58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8012b58:	4800      	ldr	r0, [pc, #0]	@ (8012b5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 8012b5a:	4770      	bx	lr
 8012b5c:	24000d28 	.word	0x24000d28

08012b60 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012b60:	f004 b922 	b.w	8016da8 <builtin_interfaces__msg__Time__init>

08012b64 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012b64:	f004 b924 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>

08012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012b68:	4b04      	ldr	r3, [pc, #16]	@ (8012b7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	b10a      	cbz	r2, 8012b72 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8012b6e:	4803      	ldr	r0, [pc, #12]	@ (8012b7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b70:	4770      	bx	lr
 8012b72:	4a03      	ldr	r2, [pc, #12]	@ (8012b80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012b74:	4801      	ldr	r0, [pc, #4]	@ (8012b7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b76:	6812      	ldr	r2, [r2, #0]
 8012b78:	601a      	str	r2, [r3, #0]
 8012b7a:	4770      	bx	lr
 8012b7c:	24000dc8 	.word	0x24000dc8
 8012b80:	24000e98 	.word	0x24000e98

08012b84 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012b84:	b180      	cbz	r0, 8012ba8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8012b86:	b538      	push	{r3, r4, r5, lr}
 8012b88:	460d      	mov	r5, r1
 8012b8a:	2104      	movs	r1, #4
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	f001 fafd 	bl	801418c <ucdr_alignment>
 8012b92:	1d2b      	adds	r3, r5, #4
 8012b94:	f1c5 0504 	rsb	r5, r5, #4
 8012b98:	2104      	movs	r1, #4
 8012b9a:	181c      	adds	r4, r3, r0
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f001 faf5 	bl	801418c <ucdr_alignment>
 8012ba2:	4428      	add	r0, r5
 8012ba4:	4420      	add	r0, r4
 8012ba6:	bd38      	pop	{r3, r4, r5, pc}
 8012ba8:	4770      	bx	lr
 8012baa:	bf00      	nop

08012bac <_Time__cdr_deserialize>:
 8012bac:	b538      	push	{r3, r4, r5, lr}
 8012bae:	460c      	mov	r4, r1
 8012bb0:	b141      	cbz	r1, 8012bc4 <_Time__cdr_deserialize+0x18>
 8012bb2:	4605      	mov	r5, r0
 8012bb4:	f000 ff44 	bl	8013a40 <ucdr_deserialize_int32_t>
 8012bb8:	1d21      	adds	r1, r4, #4
 8012bba:	4628      	mov	r0, r5
 8012bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bc0:	f000 bbbc 	b.w	801333c <ucdr_deserialize_uint32_t>
 8012bc4:	4608      	mov	r0, r1
 8012bc6:	bd38      	pop	{r3, r4, r5, pc}

08012bc8 <_Time__cdr_serialize>:
 8012bc8:	b160      	cbz	r0, 8012be4 <_Time__cdr_serialize+0x1c>
 8012bca:	b538      	push	{r3, r4, r5, lr}
 8012bcc:	460d      	mov	r5, r1
 8012bce:	4604      	mov	r4, r0
 8012bd0:	6801      	ldr	r1, [r0, #0]
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	f000 fe9c 	bl	8013910 <ucdr_serialize_int32_t>
 8012bd8:	6861      	ldr	r1, [r4, #4]
 8012bda:	4628      	mov	r0, r5
 8012bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012be0:	f000 ba7c 	b.w	80130dc <ucdr_serialize_uint32_t>
 8012be4:	4770      	bx	lr
 8012be6:	bf00      	nop

08012be8 <_Time__get_serialized_size>:
 8012be8:	b160      	cbz	r0, 8012c04 <_Time__get_serialized_size+0x1c>
 8012bea:	2104      	movs	r1, #4
 8012bec:	2000      	movs	r0, #0
 8012bee:	b510      	push	{r4, lr}
 8012bf0:	f001 facc 	bl	801418c <ucdr_alignment>
 8012bf4:	2104      	movs	r1, #4
 8012bf6:	1844      	adds	r4, r0, r1
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	f001 fac7 	bl	801418c <ucdr_alignment>
 8012bfe:	3004      	adds	r0, #4
 8012c00:	4420      	add	r0, r4
 8012c02:	bd10      	pop	{r4, pc}
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop

08012c08 <_Time__max_serialized_size>:
 8012c08:	b510      	push	{r4, lr}
 8012c0a:	2104      	movs	r1, #4
 8012c0c:	2000      	movs	r0, #0
 8012c0e:	f001 fabd 	bl	801418c <ucdr_alignment>
 8012c12:	2104      	movs	r1, #4
 8012c14:	1844      	adds	r4, r0, r1
 8012c16:	4620      	mov	r0, r4
 8012c18:	f001 fab8 	bl	801418c <ucdr_alignment>
 8012c1c:	3004      	adds	r0, #4
 8012c1e:	4420      	add	r0, r4
 8012c20:	bd10      	pop	{r4, pc}
 8012c22:	bf00      	nop

08012c24 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012c24:	b538      	push	{r3, r4, r5, lr}
 8012c26:	460c      	mov	r4, r1
 8012c28:	2301      	movs	r3, #1
 8012c2a:	2104      	movs	r1, #4
 8012c2c:	1d25      	adds	r5, r4, #4
 8012c2e:	7003      	strb	r3, [r0, #0]
 8012c30:	4620      	mov	r0, r4
 8012c32:	f1c4 0404 	rsb	r4, r4, #4
 8012c36:	f001 faa9 	bl	801418c <ucdr_alignment>
 8012c3a:	4405      	add	r5, r0
 8012c3c:	2104      	movs	r1, #4
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f001 faa4 	bl	801418c <ucdr_alignment>
 8012c44:	4420      	add	r0, r4
 8012c46:	4428      	add	r0, r5
 8012c48:	bd38      	pop	{r3, r4, r5, pc}
 8012c4a:	bf00      	nop

08012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012c4c:	4800      	ldr	r0, [pc, #0]	@ (8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8012c4e:	4770      	bx	lr
 8012c50:	24000dd4 	.word	0x24000dd4

08012c54 <ucdr_serialize_bool>:
 8012c54:	b538      	push	{r3, r4, r5, lr}
 8012c56:	460d      	mov	r5, r1
 8012c58:	2101      	movs	r1, #1
 8012c5a:	4604      	mov	r4, r0
 8012c5c:	f001 fa4a 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8012c60:	b148      	cbz	r0, 8012c76 <ucdr_serialize_bool+0x22>
 8012c62:	68a3      	ldr	r3, [r4, #8]
 8012c64:	2101      	movs	r1, #1
 8012c66:	701d      	strb	r5, [r3, #0]
 8012c68:	68a2      	ldr	r2, [r4, #8]
 8012c6a:	6923      	ldr	r3, [r4, #16]
 8012c6c:	440a      	add	r2, r1
 8012c6e:	7561      	strb	r1, [r4, #21]
 8012c70:	440b      	add	r3, r1
 8012c72:	60a2      	str	r2, [r4, #8]
 8012c74:	6123      	str	r3, [r4, #16]
 8012c76:	7da0      	ldrb	r0, [r4, #22]
 8012c78:	f080 0001 	eor.w	r0, r0, #1
 8012c7c:	bd38      	pop	{r3, r4, r5, pc}
 8012c7e:	bf00      	nop

08012c80 <ucdr_deserialize_bool>:
 8012c80:	b538      	push	{r3, r4, r5, lr}
 8012c82:	460d      	mov	r5, r1
 8012c84:	2101      	movs	r1, #1
 8012c86:	4604      	mov	r4, r0
 8012c88:	f001 fa34 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8012c8c:	b160      	cbz	r0, 8012ca8 <ucdr_deserialize_bool+0x28>
 8012c8e:	68a2      	ldr	r2, [r4, #8]
 8012c90:	2101      	movs	r1, #1
 8012c92:	6923      	ldr	r3, [r4, #16]
 8012c94:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012c98:	440b      	add	r3, r1
 8012c9a:	3800      	subs	r0, #0
 8012c9c:	bf18      	it	ne
 8012c9e:	2001      	movne	r0, #1
 8012ca0:	7028      	strb	r0, [r5, #0]
 8012ca2:	60a2      	str	r2, [r4, #8]
 8012ca4:	6123      	str	r3, [r4, #16]
 8012ca6:	7561      	strb	r1, [r4, #21]
 8012ca8:	7da0      	ldrb	r0, [r4, #22]
 8012caa:	f080 0001 	eor.w	r0, r0, #1
 8012cae:	bd38      	pop	{r3, r4, r5, pc}

08012cb0 <ucdr_serialize_uint8_t>:
 8012cb0:	b538      	push	{r3, r4, r5, lr}
 8012cb2:	460d      	mov	r5, r1
 8012cb4:	2101      	movs	r1, #1
 8012cb6:	4604      	mov	r4, r0
 8012cb8:	f001 fa1c 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8012cbc:	b148      	cbz	r0, 8012cd2 <ucdr_serialize_uint8_t+0x22>
 8012cbe:	68a3      	ldr	r3, [r4, #8]
 8012cc0:	2101      	movs	r1, #1
 8012cc2:	701d      	strb	r5, [r3, #0]
 8012cc4:	68a2      	ldr	r2, [r4, #8]
 8012cc6:	6923      	ldr	r3, [r4, #16]
 8012cc8:	440a      	add	r2, r1
 8012cca:	7561      	strb	r1, [r4, #21]
 8012ccc:	440b      	add	r3, r1
 8012cce:	60a2      	str	r2, [r4, #8]
 8012cd0:	6123      	str	r3, [r4, #16]
 8012cd2:	7da0      	ldrb	r0, [r4, #22]
 8012cd4:	f080 0001 	eor.w	r0, r0, #1
 8012cd8:	bd38      	pop	{r3, r4, r5, pc}
 8012cda:	bf00      	nop

08012cdc <ucdr_deserialize_uint8_t>:
 8012cdc:	b538      	push	{r3, r4, r5, lr}
 8012cde:	460d      	mov	r5, r1
 8012ce0:	2101      	movs	r1, #1
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	f001 fa06 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8012ce8:	b150      	cbz	r0, 8012d00 <ucdr_deserialize_uint8_t+0x24>
 8012cea:	68a3      	ldr	r3, [r4, #8]
 8012cec:	2101      	movs	r1, #1
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	702b      	strb	r3, [r5, #0]
 8012cf2:	68a2      	ldr	r2, [r4, #8]
 8012cf4:	6923      	ldr	r3, [r4, #16]
 8012cf6:	440a      	add	r2, r1
 8012cf8:	7561      	strb	r1, [r4, #21]
 8012cfa:	440b      	add	r3, r1
 8012cfc:	60a2      	str	r2, [r4, #8]
 8012cfe:	6123      	str	r3, [r4, #16]
 8012d00:	7da0      	ldrb	r0, [r4, #22]
 8012d02:	f080 0001 	eor.w	r0, r0, #1
 8012d06:	bd38      	pop	{r3, r4, r5, pc}

08012d08 <ucdr_serialize_uint16_t>:
 8012d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0c:	460b      	mov	r3, r1
 8012d0e:	b082      	sub	sp, #8
 8012d10:	4604      	mov	r4, r0
 8012d12:	2102      	movs	r1, #2
 8012d14:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012d18:	f001 fa40 	bl	801419c <ucdr_buffer_alignment>
 8012d1c:	4601      	mov	r1, r0
 8012d1e:	4620      	mov	r0, r4
 8012d20:	7d67      	ldrb	r7, [r4, #21]
 8012d22:	f001 fa83 	bl	801422c <ucdr_advance_buffer>
 8012d26:	2102      	movs	r1, #2
 8012d28:	4620      	mov	r0, r4
 8012d2a:	f001 f9d7 	bl	80140dc <ucdr_check_buffer_available_for>
 8012d2e:	bb78      	cbnz	r0, 8012d90 <ucdr_serialize_uint16_t+0x88>
 8012d30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012d34:	42ab      	cmp	r3, r5
 8012d36:	d926      	bls.n	8012d86 <ucdr_serialize_uint16_t+0x7e>
 8012d38:	1b5e      	subs	r6, r3, r5
 8012d3a:	60a3      	str	r3, [r4, #8]
 8012d3c:	6923      	ldr	r3, [r4, #16]
 8012d3e:	4620      	mov	r0, r4
 8012d40:	f1c6 0802 	rsb	r8, r6, #2
 8012d44:	4433      	add	r3, r6
 8012d46:	4641      	mov	r1, r8
 8012d48:	6123      	str	r3, [r4, #16]
 8012d4a:	f001 f9d3 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d03b      	beq.n	8012dca <ucdr_serialize_uint16_t+0xc2>
 8012d52:	7d23      	ldrb	r3, [r4, #20]
 8012d54:	2b01      	cmp	r3, #1
 8012d56:	d04a      	beq.n	8012dee <ucdr_serialize_uint16_t+0xe6>
 8012d58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d5c:	702b      	strb	r3, [r5, #0]
 8012d5e:	2e00      	cmp	r6, #0
 8012d60:	d040      	beq.n	8012de4 <ucdr_serialize_uint16_t+0xdc>
 8012d62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d66:	706b      	strb	r3, [r5, #1]
 8012d68:	6923      	ldr	r3, [r4, #16]
 8012d6a:	2102      	movs	r1, #2
 8012d6c:	68a2      	ldr	r2, [r4, #8]
 8012d6e:	3302      	adds	r3, #2
 8012d70:	7da0      	ldrb	r0, [r4, #22]
 8012d72:	4442      	add	r2, r8
 8012d74:	7561      	strb	r1, [r4, #21]
 8012d76:	1b9e      	subs	r6, r3, r6
 8012d78:	f080 0001 	eor.w	r0, r0, #1
 8012d7c:	60a2      	str	r2, [r4, #8]
 8012d7e:	6126      	str	r6, [r4, #16]
 8012d80:	b002      	add	sp, #8
 8012d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d86:	2102      	movs	r1, #2
 8012d88:	4620      	mov	r0, r4
 8012d8a:	f001 f9b3 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8012d8e:	b190      	cbz	r0, 8012db6 <ucdr_serialize_uint16_t+0xae>
 8012d90:	7d23      	ldrb	r3, [r4, #20]
 8012d92:	2b01      	cmp	r3, #1
 8012d94:	68a3      	ldr	r3, [r4, #8]
 8012d96:	d014      	beq.n	8012dc2 <ucdr_serialize_uint16_t+0xba>
 8012d98:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012d9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012da0:	7019      	strb	r1, [r3, #0]
 8012da2:	68a3      	ldr	r3, [r4, #8]
 8012da4:	705a      	strb	r2, [r3, #1]
 8012da6:	2102      	movs	r1, #2
 8012da8:	68a2      	ldr	r2, [r4, #8]
 8012daa:	6923      	ldr	r3, [r4, #16]
 8012dac:	440a      	add	r2, r1
 8012dae:	7561      	strb	r1, [r4, #21]
 8012db0:	440b      	add	r3, r1
 8012db2:	60a2      	str	r2, [r4, #8]
 8012db4:	6123      	str	r3, [r4, #16]
 8012db6:	7da0      	ldrb	r0, [r4, #22]
 8012db8:	f080 0001 	eor.w	r0, r0, #1
 8012dbc:	b002      	add	sp, #8
 8012dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012dc6:	801a      	strh	r2, [r3, #0]
 8012dc8:	e7ed      	b.n	8012da6 <ucdr_serialize_uint16_t+0x9e>
 8012dca:	68a2      	ldr	r2, [r4, #8]
 8012dcc:	6923      	ldr	r3, [r4, #16]
 8012dce:	7da0      	ldrb	r0, [r4, #22]
 8012dd0:	1b92      	subs	r2, r2, r6
 8012dd2:	1b9b      	subs	r3, r3, r6
 8012dd4:	7567      	strb	r7, [r4, #21]
 8012dd6:	f080 0001 	eor.w	r0, r0, #1
 8012dda:	60a2      	str	r2, [r4, #8]
 8012ddc:	6123      	str	r3, [r4, #16]
 8012dde:	b002      	add	sp, #8
 8012de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de4:	68a3      	ldr	r3, [r4, #8]
 8012de6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012dea:	701a      	strb	r2, [r3, #0]
 8012dec:	e7bc      	b.n	8012d68 <ucdr_serialize_uint16_t+0x60>
 8012dee:	4628      	mov	r0, r5
 8012df0:	f10d 0506 	add.w	r5, sp, #6
 8012df4:	4632      	mov	r2, r6
 8012df6:	4629      	mov	r1, r5
 8012df8:	f00f fbbd 	bl	8022576 <memcpy>
 8012dfc:	4642      	mov	r2, r8
 8012dfe:	19a9      	adds	r1, r5, r6
 8012e00:	68a0      	ldr	r0, [r4, #8]
 8012e02:	f00f fbb8 	bl	8022576 <memcpy>
 8012e06:	e7af      	b.n	8012d68 <ucdr_serialize_uint16_t+0x60>

08012e08 <ucdr_serialize_endian_uint16_t>:
 8012e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e0c:	4604      	mov	r4, r0
 8012e0e:	b083      	sub	sp, #12
 8012e10:	460d      	mov	r5, r1
 8012e12:	2102      	movs	r1, #2
 8012e14:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012e18:	f001 f9c0 	bl	801419c <ucdr_buffer_alignment>
 8012e1c:	4601      	mov	r1, r0
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012e24:	f001 fa02 	bl	801422c <ucdr_advance_buffer>
 8012e28:	2102      	movs	r1, #2
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f001 f956 	bl	80140dc <ucdr_check_buffer_available_for>
 8012e30:	bb70      	cbnz	r0, 8012e90 <ucdr_serialize_endian_uint16_t+0x88>
 8012e32:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012e36:	42be      	cmp	r6, r7
 8012e38:	d925      	bls.n	8012e86 <ucdr_serialize_endian_uint16_t+0x7e>
 8012e3a:	6923      	ldr	r3, [r4, #16]
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	60a6      	str	r6, [r4, #8]
 8012e40:	1bf6      	subs	r6, r6, r7
 8012e42:	4433      	add	r3, r6
 8012e44:	f1c6 0902 	rsb	r9, r6, #2
 8012e48:	6123      	str	r3, [r4, #16]
 8012e4a:	4649      	mov	r1, r9
 8012e4c:	f001 f952 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8012e50:	2800      	cmp	r0, #0
 8012e52:	d039      	beq.n	8012ec8 <ucdr_serialize_endian_uint16_t+0xc0>
 8012e54:	2d01      	cmp	r5, #1
 8012e56:	d04a      	beq.n	8012eee <ucdr_serialize_endian_uint16_t+0xe6>
 8012e58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012e5c:	703b      	strb	r3, [r7, #0]
 8012e5e:	2e00      	cmp	r6, #0
 8012e60:	d040      	beq.n	8012ee4 <ucdr_serialize_endian_uint16_t+0xdc>
 8012e62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012e66:	707b      	strb	r3, [r7, #1]
 8012e68:	6923      	ldr	r3, [r4, #16]
 8012e6a:	2102      	movs	r1, #2
 8012e6c:	68a2      	ldr	r2, [r4, #8]
 8012e6e:	7da0      	ldrb	r0, [r4, #22]
 8012e70:	3302      	adds	r3, #2
 8012e72:	444a      	add	r2, r9
 8012e74:	7561      	strb	r1, [r4, #21]
 8012e76:	1b9b      	subs	r3, r3, r6
 8012e78:	f080 0001 	eor.w	r0, r0, #1
 8012e7c:	60a2      	str	r2, [r4, #8]
 8012e7e:	6123      	str	r3, [r4, #16]
 8012e80:	b003      	add	sp, #12
 8012e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e86:	2102      	movs	r1, #2
 8012e88:	4620      	mov	r0, r4
 8012e8a:	f001 f933 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8012e8e:	b188      	cbz	r0, 8012eb4 <ucdr_serialize_endian_uint16_t+0xac>
 8012e90:	2d01      	cmp	r5, #1
 8012e92:	68a3      	ldr	r3, [r4, #8]
 8012e94:	d014      	beq.n	8012ec0 <ucdr_serialize_endian_uint16_t+0xb8>
 8012e96:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012e9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012e9e:	7019      	strb	r1, [r3, #0]
 8012ea0:	68a3      	ldr	r3, [r4, #8]
 8012ea2:	705a      	strb	r2, [r3, #1]
 8012ea4:	2102      	movs	r1, #2
 8012ea6:	68a2      	ldr	r2, [r4, #8]
 8012ea8:	6923      	ldr	r3, [r4, #16]
 8012eaa:	440a      	add	r2, r1
 8012eac:	7561      	strb	r1, [r4, #21]
 8012eae:	440b      	add	r3, r1
 8012eb0:	60a2      	str	r2, [r4, #8]
 8012eb2:	6123      	str	r3, [r4, #16]
 8012eb4:	7da0      	ldrb	r0, [r4, #22]
 8012eb6:	f080 0001 	eor.w	r0, r0, #1
 8012eba:	b003      	add	sp, #12
 8012ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ec0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012ec4:	801a      	strh	r2, [r3, #0]
 8012ec6:	e7ed      	b.n	8012ea4 <ucdr_serialize_endian_uint16_t+0x9c>
 8012ec8:	68a2      	ldr	r2, [r4, #8]
 8012eca:	6923      	ldr	r3, [r4, #16]
 8012ecc:	7da0      	ldrb	r0, [r4, #22]
 8012ece:	1b92      	subs	r2, r2, r6
 8012ed0:	1b9b      	subs	r3, r3, r6
 8012ed2:	f884 8015 	strb.w	r8, [r4, #21]
 8012ed6:	f080 0001 	eor.w	r0, r0, #1
 8012eda:	60a2      	str	r2, [r4, #8]
 8012edc:	6123      	str	r3, [r4, #16]
 8012ede:	b003      	add	sp, #12
 8012ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ee4:	68a3      	ldr	r3, [r4, #8]
 8012ee6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012eea:	701a      	strb	r2, [r3, #0]
 8012eec:	e7bc      	b.n	8012e68 <ucdr_serialize_endian_uint16_t+0x60>
 8012eee:	f10d 0506 	add.w	r5, sp, #6
 8012ef2:	4632      	mov	r2, r6
 8012ef4:	4638      	mov	r0, r7
 8012ef6:	4629      	mov	r1, r5
 8012ef8:	f00f fb3d 	bl	8022576 <memcpy>
 8012efc:	464a      	mov	r2, r9
 8012efe:	19a9      	adds	r1, r5, r6
 8012f00:	68a0      	ldr	r0, [r4, #8]
 8012f02:	f00f fb38 	bl	8022576 <memcpy>
 8012f06:	e7af      	b.n	8012e68 <ucdr_serialize_endian_uint16_t+0x60>

08012f08 <ucdr_deserialize_uint16_t>:
 8012f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f0c:	4604      	mov	r4, r0
 8012f0e:	460d      	mov	r5, r1
 8012f10:	2102      	movs	r1, #2
 8012f12:	f001 f943 	bl	801419c <ucdr_buffer_alignment>
 8012f16:	4601      	mov	r1, r0
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012f1e:	f001 f985 	bl	801422c <ucdr_advance_buffer>
 8012f22:	2102      	movs	r1, #2
 8012f24:	4620      	mov	r0, r4
 8012f26:	f001 f8d9 	bl	80140dc <ucdr_check_buffer_available_for>
 8012f2a:	bb60      	cbnz	r0, 8012f86 <ucdr_deserialize_uint16_t+0x7e>
 8012f2c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012f30:	42be      	cmp	r6, r7
 8012f32:	d923      	bls.n	8012f7c <ucdr_deserialize_uint16_t+0x74>
 8012f34:	6923      	ldr	r3, [r4, #16]
 8012f36:	4620      	mov	r0, r4
 8012f38:	60a6      	str	r6, [r4, #8]
 8012f3a:	1bf6      	subs	r6, r6, r7
 8012f3c:	4433      	add	r3, r6
 8012f3e:	f1c6 0902 	rsb	r9, r6, #2
 8012f42:	6123      	str	r3, [r4, #16]
 8012f44:	4649      	mov	r1, r9
 8012f46:	f001 f8d5 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	d034      	beq.n	8012fb8 <ucdr_deserialize_uint16_t+0xb0>
 8012f4e:	7d23      	ldrb	r3, [r4, #20]
 8012f50:	2b01      	cmp	r3, #1
 8012f52:	d042      	beq.n	8012fda <ucdr_deserialize_uint16_t+0xd2>
 8012f54:	787b      	ldrb	r3, [r7, #1]
 8012f56:	702b      	strb	r3, [r5, #0]
 8012f58:	2e00      	cmp	r6, #0
 8012f5a:	d03a      	beq.n	8012fd2 <ucdr_deserialize_uint16_t+0xca>
 8012f5c:	783b      	ldrb	r3, [r7, #0]
 8012f5e:	706b      	strb	r3, [r5, #1]
 8012f60:	6923      	ldr	r3, [r4, #16]
 8012f62:	2102      	movs	r1, #2
 8012f64:	68a2      	ldr	r2, [r4, #8]
 8012f66:	3302      	adds	r3, #2
 8012f68:	7da0      	ldrb	r0, [r4, #22]
 8012f6a:	444a      	add	r2, r9
 8012f6c:	7561      	strb	r1, [r4, #21]
 8012f6e:	1b9b      	subs	r3, r3, r6
 8012f70:	f080 0001 	eor.w	r0, r0, #1
 8012f74:	60a2      	str	r2, [r4, #8]
 8012f76:	6123      	str	r3, [r4, #16]
 8012f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f7c:	2102      	movs	r1, #2
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f001 f8b8 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8012f84:	b180      	cbz	r0, 8012fa8 <ucdr_deserialize_uint16_t+0xa0>
 8012f86:	7d23      	ldrb	r3, [r4, #20]
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	68a3      	ldr	r3, [r4, #8]
 8012f8c:	d011      	beq.n	8012fb2 <ucdr_deserialize_uint16_t+0xaa>
 8012f8e:	785b      	ldrb	r3, [r3, #1]
 8012f90:	702b      	strb	r3, [r5, #0]
 8012f92:	68a3      	ldr	r3, [r4, #8]
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	706b      	strb	r3, [r5, #1]
 8012f98:	2102      	movs	r1, #2
 8012f9a:	68a2      	ldr	r2, [r4, #8]
 8012f9c:	6923      	ldr	r3, [r4, #16]
 8012f9e:	440a      	add	r2, r1
 8012fa0:	7561      	strb	r1, [r4, #21]
 8012fa2:	440b      	add	r3, r1
 8012fa4:	60a2      	str	r2, [r4, #8]
 8012fa6:	6123      	str	r3, [r4, #16]
 8012fa8:	7da0      	ldrb	r0, [r4, #22]
 8012faa:	f080 0001 	eor.w	r0, r0, #1
 8012fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	802b      	strh	r3, [r5, #0]
 8012fb6:	e7ef      	b.n	8012f98 <ucdr_deserialize_uint16_t+0x90>
 8012fb8:	68a2      	ldr	r2, [r4, #8]
 8012fba:	6923      	ldr	r3, [r4, #16]
 8012fbc:	1b92      	subs	r2, r2, r6
 8012fbe:	7da0      	ldrb	r0, [r4, #22]
 8012fc0:	1b9b      	subs	r3, r3, r6
 8012fc2:	f884 8015 	strb.w	r8, [r4, #21]
 8012fc6:	f080 0001 	eor.w	r0, r0, #1
 8012fca:	60a2      	str	r2, [r4, #8]
 8012fcc:	6123      	str	r3, [r4, #16]
 8012fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fd2:	68a3      	ldr	r3, [r4, #8]
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	706b      	strb	r3, [r5, #1]
 8012fd8:	e7c2      	b.n	8012f60 <ucdr_deserialize_uint16_t+0x58>
 8012fda:	4639      	mov	r1, r7
 8012fdc:	4632      	mov	r2, r6
 8012fde:	4628      	mov	r0, r5
 8012fe0:	f00f fac9 	bl	8022576 <memcpy>
 8012fe4:	464a      	mov	r2, r9
 8012fe6:	19a8      	adds	r0, r5, r6
 8012fe8:	68a1      	ldr	r1, [r4, #8]
 8012fea:	f00f fac4 	bl	8022576 <memcpy>
 8012fee:	e7b7      	b.n	8012f60 <ucdr_deserialize_uint16_t+0x58>

08012ff0 <ucdr_deserialize_endian_uint16_t>:
 8012ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ff4:	4604      	mov	r4, r0
 8012ff6:	460e      	mov	r6, r1
 8012ff8:	2102      	movs	r1, #2
 8012ffa:	4615      	mov	r5, r2
 8012ffc:	f001 f8ce 	bl	801419c <ucdr_buffer_alignment>
 8013000:	4601      	mov	r1, r0
 8013002:	4620      	mov	r0, r4
 8013004:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013008:	f001 f910 	bl	801422c <ucdr_advance_buffer>
 801300c:	2102      	movs	r1, #2
 801300e:	4620      	mov	r0, r4
 8013010:	f001 f864 	bl	80140dc <ucdr_check_buffer_available_for>
 8013014:	bb70      	cbnz	r0, 8013074 <ucdr_deserialize_endian_uint16_t+0x84>
 8013016:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801301a:	454f      	cmp	r7, r9
 801301c:	d925      	bls.n	801306a <ucdr_deserialize_endian_uint16_t+0x7a>
 801301e:	6923      	ldr	r3, [r4, #16]
 8013020:	4620      	mov	r0, r4
 8013022:	60a7      	str	r7, [r4, #8]
 8013024:	eba7 0709 	sub.w	r7, r7, r9
 8013028:	443b      	add	r3, r7
 801302a:	f1c7 0a02 	rsb	sl, r7, #2
 801302e:	6123      	str	r3, [r4, #16]
 8013030:	4651      	mov	r1, sl
 8013032:	f001 f85f 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013036:	2800      	cmp	r0, #0
 8013038:	d034      	beq.n	80130a4 <ucdr_deserialize_endian_uint16_t+0xb4>
 801303a:	2e01      	cmp	r6, #1
 801303c:	d043      	beq.n	80130c6 <ucdr_deserialize_endian_uint16_t+0xd6>
 801303e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8013042:	702b      	strb	r3, [r5, #0]
 8013044:	2f00      	cmp	r7, #0
 8013046:	d03a      	beq.n	80130be <ucdr_deserialize_endian_uint16_t+0xce>
 8013048:	f899 3000 	ldrb.w	r3, [r9]
 801304c:	706b      	strb	r3, [r5, #1]
 801304e:	6923      	ldr	r3, [r4, #16]
 8013050:	2102      	movs	r1, #2
 8013052:	68a2      	ldr	r2, [r4, #8]
 8013054:	3302      	adds	r3, #2
 8013056:	7da0      	ldrb	r0, [r4, #22]
 8013058:	4452      	add	r2, sl
 801305a:	7561      	strb	r1, [r4, #21]
 801305c:	1bdb      	subs	r3, r3, r7
 801305e:	f080 0001 	eor.w	r0, r0, #1
 8013062:	60a2      	str	r2, [r4, #8]
 8013064:	6123      	str	r3, [r4, #16]
 8013066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801306a:	2102      	movs	r1, #2
 801306c:	4620      	mov	r0, r4
 801306e:	f001 f841 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013072:	b178      	cbz	r0, 8013094 <ucdr_deserialize_endian_uint16_t+0xa4>
 8013074:	2e01      	cmp	r6, #1
 8013076:	68a3      	ldr	r3, [r4, #8]
 8013078:	d011      	beq.n	801309e <ucdr_deserialize_endian_uint16_t+0xae>
 801307a:	785b      	ldrb	r3, [r3, #1]
 801307c:	702b      	strb	r3, [r5, #0]
 801307e:	68a3      	ldr	r3, [r4, #8]
 8013080:	781b      	ldrb	r3, [r3, #0]
 8013082:	706b      	strb	r3, [r5, #1]
 8013084:	2102      	movs	r1, #2
 8013086:	68a2      	ldr	r2, [r4, #8]
 8013088:	6923      	ldr	r3, [r4, #16]
 801308a:	440a      	add	r2, r1
 801308c:	7561      	strb	r1, [r4, #21]
 801308e:	440b      	add	r3, r1
 8013090:	60a2      	str	r2, [r4, #8]
 8013092:	6123      	str	r3, [r4, #16]
 8013094:	7da0      	ldrb	r0, [r4, #22]
 8013096:	f080 0001 	eor.w	r0, r0, #1
 801309a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801309e:	881b      	ldrh	r3, [r3, #0]
 80130a0:	802b      	strh	r3, [r5, #0]
 80130a2:	e7ef      	b.n	8013084 <ucdr_deserialize_endian_uint16_t+0x94>
 80130a4:	68a2      	ldr	r2, [r4, #8]
 80130a6:	6923      	ldr	r3, [r4, #16]
 80130a8:	1bd2      	subs	r2, r2, r7
 80130aa:	7da0      	ldrb	r0, [r4, #22]
 80130ac:	1bdb      	subs	r3, r3, r7
 80130ae:	f884 8015 	strb.w	r8, [r4, #21]
 80130b2:	f080 0001 	eor.w	r0, r0, #1
 80130b6:	60a2      	str	r2, [r4, #8]
 80130b8:	6123      	str	r3, [r4, #16]
 80130ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130be:	68a3      	ldr	r3, [r4, #8]
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	706b      	strb	r3, [r5, #1]
 80130c4:	e7c3      	b.n	801304e <ucdr_deserialize_endian_uint16_t+0x5e>
 80130c6:	4649      	mov	r1, r9
 80130c8:	463a      	mov	r2, r7
 80130ca:	4628      	mov	r0, r5
 80130cc:	f00f fa53 	bl	8022576 <memcpy>
 80130d0:	4652      	mov	r2, sl
 80130d2:	19e8      	adds	r0, r5, r7
 80130d4:	68a1      	ldr	r1, [r4, #8]
 80130d6:	f00f fa4e 	bl	8022576 <memcpy>
 80130da:	e7b8      	b.n	801304e <ucdr_deserialize_endian_uint16_t+0x5e>

080130dc <ucdr_serialize_uint32_t>:
 80130dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e0:	b082      	sub	sp, #8
 80130e2:	4604      	mov	r4, r0
 80130e4:	9101      	str	r1, [sp, #4]
 80130e6:	2104      	movs	r1, #4
 80130e8:	f001 f858 	bl	801419c <ucdr_buffer_alignment>
 80130ec:	4601      	mov	r1, r0
 80130ee:	4620      	mov	r0, r4
 80130f0:	7d67      	ldrb	r7, [r4, #21]
 80130f2:	f001 f89b 	bl	801422c <ucdr_advance_buffer>
 80130f6:	2104      	movs	r1, #4
 80130f8:	4620      	mov	r0, r4
 80130fa:	f000 ffef 	bl	80140dc <ucdr_check_buffer_available_for>
 80130fe:	2800      	cmp	r0, #0
 8013100:	d139      	bne.n	8013176 <ucdr_serialize_uint32_t+0x9a>
 8013102:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013106:	42ab      	cmp	r3, r5
 8013108:	d930      	bls.n	801316c <ucdr_serialize_uint32_t+0x90>
 801310a:	1b5e      	subs	r6, r3, r5
 801310c:	60a3      	str	r3, [r4, #8]
 801310e:	6923      	ldr	r3, [r4, #16]
 8013110:	4620      	mov	r0, r4
 8013112:	f1c6 0804 	rsb	r8, r6, #4
 8013116:	4433      	add	r3, r6
 8013118:	4641      	mov	r1, r8
 801311a:	6123      	str	r3, [r4, #16]
 801311c:	f000 ffea 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013120:	2800      	cmp	r0, #0
 8013122:	d04c      	beq.n	80131be <ucdr_serialize_uint32_t+0xe2>
 8013124:	7d23      	ldrb	r3, [r4, #20]
 8013126:	2b01      	cmp	r3, #1
 8013128:	d063      	beq.n	80131f2 <ucdr_serialize_uint32_t+0x116>
 801312a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801312e:	702b      	strb	r3, [r5, #0]
 8013130:	2e00      	cmp	r6, #0
 8013132:	d051      	beq.n	80131d8 <ucdr_serialize_uint32_t+0xfc>
 8013134:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013138:	2e01      	cmp	r6, #1
 801313a:	706b      	strb	r3, [r5, #1]
 801313c:	d050      	beq.n	80131e0 <ucdr_serialize_uint32_t+0x104>
 801313e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013142:	2e02      	cmp	r6, #2
 8013144:	70ab      	strb	r3, [r5, #2]
 8013146:	d04f      	beq.n	80131e8 <ucdr_serialize_uint32_t+0x10c>
 8013148:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801314c:	70eb      	strb	r3, [r5, #3]
 801314e:	6923      	ldr	r3, [r4, #16]
 8013150:	2104      	movs	r1, #4
 8013152:	68a2      	ldr	r2, [r4, #8]
 8013154:	3304      	adds	r3, #4
 8013156:	7da0      	ldrb	r0, [r4, #22]
 8013158:	4442      	add	r2, r8
 801315a:	7561      	strb	r1, [r4, #21]
 801315c:	1b9e      	subs	r6, r3, r6
 801315e:	f080 0001 	eor.w	r0, r0, #1
 8013162:	60a2      	str	r2, [r4, #8]
 8013164:	6126      	str	r6, [r4, #16]
 8013166:	b002      	add	sp, #8
 8013168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801316c:	2104      	movs	r1, #4
 801316e:	4620      	mov	r0, r4
 8013170:	f000 ffc0 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013174:	b1d0      	cbz	r0, 80131ac <ucdr_serialize_uint32_t+0xd0>
 8013176:	7d23      	ldrb	r3, [r4, #20]
 8013178:	2b01      	cmp	r3, #1
 801317a:	68a3      	ldr	r3, [r4, #8]
 801317c:	d01c      	beq.n	80131b8 <ucdr_serialize_uint32_t+0xdc>
 801317e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013182:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013186:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801318a:	7018      	strb	r0, [r3, #0]
 801318c:	68a3      	ldr	r3, [r4, #8]
 801318e:	705a      	strb	r2, [r3, #1]
 8013190:	68a3      	ldr	r3, [r4, #8]
 8013192:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013196:	7099      	strb	r1, [r3, #2]
 8013198:	68a3      	ldr	r3, [r4, #8]
 801319a:	70da      	strb	r2, [r3, #3]
 801319c:	2104      	movs	r1, #4
 801319e:	68a2      	ldr	r2, [r4, #8]
 80131a0:	6923      	ldr	r3, [r4, #16]
 80131a2:	440a      	add	r2, r1
 80131a4:	7561      	strb	r1, [r4, #21]
 80131a6:	440b      	add	r3, r1
 80131a8:	60a2      	str	r2, [r4, #8]
 80131aa:	6123      	str	r3, [r4, #16]
 80131ac:	7da0      	ldrb	r0, [r4, #22]
 80131ae:	f080 0001 	eor.w	r0, r0, #1
 80131b2:	b002      	add	sp, #8
 80131b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b8:	9a01      	ldr	r2, [sp, #4]
 80131ba:	601a      	str	r2, [r3, #0]
 80131bc:	e7ee      	b.n	801319c <ucdr_serialize_uint32_t+0xc0>
 80131be:	68a2      	ldr	r2, [r4, #8]
 80131c0:	6923      	ldr	r3, [r4, #16]
 80131c2:	7da0      	ldrb	r0, [r4, #22]
 80131c4:	1b92      	subs	r2, r2, r6
 80131c6:	1b9b      	subs	r3, r3, r6
 80131c8:	7567      	strb	r7, [r4, #21]
 80131ca:	f080 0001 	eor.w	r0, r0, #1
 80131ce:	60a2      	str	r2, [r4, #8]
 80131d0:	6123      	str	r3, [r4, #16]
 80131d2:	b002      	add	sp, #8
 80131d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131d8:	68a3      	ldr	r3, [r4, #8]
 80131da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80131de:	701a      	strb	r2, [r3, #0]
 80131e0:	68a3      	ldr	r3, [r4, #8]
 80131e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80131e6:	701a      	strb	r2, [r3, #0]
 80131e8:	68a3      	ldr	r3, [r4, #8]
 80131ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131ee:	701a      	strb	r2, [r3, #0]
 80131f0:	e7ad      	b.n	801314e <ucdr_serialize_uint32_t+0x72>
 80131f2:	4628      	mov	r0, r5
 80131f4:	ad01      	add	r5, sp, #4
 80131f6:	4632      	mov	r2, r6
 80131f8:	4629      	mov	r1, r5
 80131fa:	f00f f9bc 	bl	8022576 <memcpy>
 80131fe:	4642      	mov	r2, r8
 8013200:	19a9      	adds	r1, r5, r6
 8013202:	68a0      	ldr	r0, [r4, #8]
 8013204:	f00f f9b7 	bl	8022576 <memcpy>
 8013208:	e7a1      	b.n	801314e <ucdr_serialize_uint32_t+0x72>
 801320a:	bf00      	nop

0801320c <ucdr_serialize_endian_uint32_t>:
 801320c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013210:	4604      	mov	r4, r0
 8013212:	b083      	sub	sp, #12
 8013214:	460d      	mov	r5, r1
 8013216:	2104      	movs	r1, #4
 8013218:	9201      	str	r2, [sp, #4]
 801321a:	f000 ffbf 	bl	801419c <ucdr_buffer_alignment>
 801321e:	4601      	mov	r1, r0
 8013220:	4620      	mov	r0, r4
 8013222:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013226:	f001 f801 	bl	801422c <ucdr_advance_buffer>
 801322a:	2104      	movs	r1, #4
 801322c:	4620      	mov	r0, r4
 801322e:	f000 ff55 	bl	80140dc <ucdr_check_buffer_available_for>
 8013232:	2800      	cmp	r0, #0
 8013234:	d138      	bne.n	80132a8 <ucdr_serialize_endian_uint32_t+0x9c>
 8013236:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801323a:	42b7      	cmp	r7, r6
 801323c:	d92f      	bls.n	801329e <ucdr_serialize_endian_uint32_t+0x92>
 801323e:	6923      	ldr	r3, [r4, #16]
 8013240:	4620      	mov	r0, r4
 8013242:	60a7      	str	r7, [r4, #8]
 8013244:	1bbf      	subs	r7, r7, r6
 8013246:	443b      	add	r3, r7
 8013248:	f1c7 0904 	rsb	r9, r7, #4
 801324c:	6123      	str	r3, [r4, #16]
 801324e:	4649      	mov	r1, r9
 8013250:	f000 ff50 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013254:	2800      	cmp	r0, #0
 8013256:	d04a      	beq.n	80132ee <ucdr_serialize_endian_uint32_t+0xe2>
 8013258:	2d01      	cmp	r5, #1
 801325a:	d063      	beq.n	8013324 <ucdr_serialize_endian_uint32_t+0x118>
 801325c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013260:	7033      	strb	r3, [r6, #0]
 8013262:	2f00      	cmp	r7, #0
 8013264:	d051      	beq.n	801330a <ucdr_serialize_endian_uint32_t+0xfe>
 8013266:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801326a:	2f01      	cmp	r7, #1
 801326c:	7073      	strb	r3, [r6, #1]
 801326e:	d050      	beq.n	8013312 <ucdr_serialize_endian_uint32_t+0x106>
 8013270:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013274:	2f02      	cmp	r7, #2
 8013276:	70b3      	strb	r3, [r6, #2]
 8013278:	d04f      	beq.n	801331a <ucdr_serialize_endian_uint32_t+0x10e>
 801327a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801327e:	70f3      	strb	r3, [r6, #3]
 8013280:	6923      	ldr	r3, [r4, #16]
 8013282:	2104      	movs	r1, #4
 8013284:	68a2      	ldr	r2, [r4, #8]
 8013286:	7da0      	ldrb	r0, [r4, #22]
 8013288:	3304      	adds	r3, #4
 801328a:	444a      	add	r2, r9
 801328c:	7561      	strb	r1, [r4, #21]
 801328e:	1bdb      	subs	r3, r3, r7
 8013290:	f080 0001 	eor.w	r0, r0, #1
 8013294:	60a2      	str	r2, [r4, #8]
 8013296:	6123      	str	r3, [r4, #16]
 8013298:	b003      	add	sp, #12
 801329a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801329e:	2104      	movs	r1, #4
 80132a0:	4620      	mov	r0, r4
 80132a2:	f000 ff27 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 80132a6:	b1c8      	cbz	r0, 80132dc <ucdr_serialize_endian_uint32_t+0xd0>
 80132a8:	2d01      	cmp	r5, #1
 80132aa:	68a3      	ldr	r3, [r4, #8]
 80132ac:	d01c      	beq.n	80132e8 <ucdr_serialize_endian_uint32_t+0xdc>
 80132ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80132b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80132b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80132ba:	7018      	strb	r0, [r3, #0]
 80132bc:	68a3      	ldr	r3, [r4, #8]
 80132be:	705a      	strb	r2, [r3, #1]
 80132c0:	68a3      	ldr	r3, [r4, #8]
 80132c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80132c6:	7099      	strb	r1, [r3, #2]
 80132c8:	68a3      	ldr	r3, [r4, #8]
 80132ca:	70da      	strb	r2, [r3, #3]
 80132cc:	2104      	movs	r1, #4
 80132ce:	68a2      	ldr	r2, [r4, #8]
 80132d0:	6923      	ldr	r3, [r4, #16]
 80132d2:	440a      	add	r2, r1
 80132d4:	7561      	strb	r1, [r4, #21]
 80132d6:	440b      	add	r3, r1
 80132d8:	60a2      	str	r2, [r4, #8]
 80132da:	6123      	str	r3, [r4, #16]
 80132dc:	7da0      	ldrb	r0, [r4, #22]
 80132de:	f080 0001 	eor.w	r0, r0, #1
 80132e2:	b003      	add	sp, #12
 80132e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132e8:	9a01      	ldr	r2, [sp, #4]
 80132ea:	601a      	str	r2, [r3, #0]
 80132ec:	e7ee      	b.n	80132cc <ucdr_serialize_endian_uint32_t+0xc0>
 80132ee:	68a2      	ldr	r2, [r4, #8]
 80132f0:	6923      	ldr	r3, [r4, #16]
 80132f2:	7da0      	ldrb	r0, [r4, #22]
 80132f4:	1bd2      	subs	r2, r2, r7
 80132f6:	1bdb      	subs	r3, r3, r7
 80132f8:	f884 8015 	strb.w	r8, [r4, #21]
 80132fc:	f080 0001 	eor.w	r0, r0, #1
 8013300:	60a2      	str	r2, [r4, #8]
 8013302:	6123      	str	r3, [r4, #16]
 8013304:	b003      	add	sp, #12
 8013306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801330a:	68a3      	ldr	r3, [r4, #8]
 801330c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013310:	701a      	strb	r2, [r3, #0]
 8013312:	68a3      	ldr	r3, [r4, #8]
 8013314:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013318:	701a      	strb	r2, [r3, #0]
 801331a:	68a3      	ldr	r3, [r4, #8]
 801331c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013320:	701a      	strb	r2, [r3, #0]
 8013322:	e7ad      	b.n	8013280 <ucdr_serialize_endian_uint32_t+0x74>
 8013324:	ad01      	add	r5, sp, #4
 8013326:	463a      	mov	r2, r7
 8013328:	4630      	mov	r0, r6
 801332a:	4629      	mov	r1, r5
 801332c:	f00f f923 	bl	8022576 <memcpy>
 8013330:	464a      	mov	r2, r9
 8013332:	19e9      	adds	r1, r5, r7
 8013334:	68a0      	ldr	r0, [r4, #8]
 8013336:	f00f f91e 	bl	8022576 <memcpy>
 801333a:	e7a1      	b.n	8013280 <ucdr_serialize_endian_uint32_t+0x74>

0801333c <ucdr_deserialize_uint32_t>:
 801333c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013340:	4604      	mov	r4, r0
 8013342:	460d      	mov	r5, r1
 8013344:	2104      	movs	r1, #4
 8013346:	f000 ff29 	bl	801419c <ucdr_buffer_alignment>
 801334a:	4601      	mov	r1, r0
 801334c:	4620      	mov	r0, r4
 801334e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013352:	f000 ff6b 	bl	801422c <ucdr_advance_buffer>
 8013356:	2104      	movs	r1, #4
 8013358:	4620      	mov	r0, r4
 801335a:	f000 febf 	bl	80140dc <ucdr_check_buffer_available_for>
 801335e:	2800      	cmp	r0, #0
 8013360:	d138      	bne.n	80133d4 <ucdr_deserialize_uint32_t+0x98>
 8013362:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013366:	42b7      	cmp	r7, r6
 8013368:	d92f      	bls.n	80133ca <ucdr_deserialize_uint32_t+0x8e>
 801336a:	6923      	ldr	r3, [r4, #16]
 801336c:	4620      	mov	r0, r4
 801336e:	60a7      	str	r7, [r4, #8]
 8013370:	1bbf      	subs	r7, r7, r6
 8013372:	443b      	add	r3, r7
 8013374:	f1c7 0904 	rsb	r9, r7, #4
 8013378:	6123      	str	r3, [r4, #16]
 801337a:	4649      	mov	r1, r9
 801337c:	f000 feba 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013380:	2800      	cmp	r0, #0
 8013382:	d046      	beq.n	8013412 <ucdr_deserialize_uint32_t+0xd6>
 8013384:	7d23      	ldrb	r3, [r4, #20]
 8013386:	2b01      	cmp	r3, #1
 8013388:	d05c      	beq.n	8013444 <ucdr_deserialize_uint32_t+0x108>
 801338a:	78f3      	ldrb	r3, [r6, #3]
 801338c:	702b      	strb	r3, [r5, #0]
 801338e:	2f00      	cmp	r7, #0
 8013390:	d04c      	beq.n	801342c <ucdr_deserialize_uint32_t+0xf0>
 8013392:	78b3      	ldrb	r3, [r6, #2]
 8013394:	2f01      	cmp	r7, #1
 8013396:	706b      	strb	r3, [r5, #1]
 8013398:	f105 0302 	add.w	r3, r5, #2
 801339c:	d04a      	beq.n	8013434 <ucdr_deserialize_uint32_t+0xf8>
 801339e:	7873      	ldrb	r3, [r6, #1]
 80133a0:	2f02      	cmp	r7, #2
 80133a2:	70ab      	strb	r3, [r5, #2]
 80133a4:	f105 0303 	add.w	r3, r5, #3
 80133a8:	d048      	beq.n	801343c <ucdr_deserialize_uint32_t+0x100>
 80133aa:	7833      	ldrb	r3, [r6, #0]
 80133ac:	70eb      	strb	r3, [r5, #3]
 80133ae:	6923      	ldr	r3, [r4, #16]
 80133b0:	2104      	movs	r1, #4
 80133b2:	68a2      	ldr	r2, [r4, #8]
 80133b4:	3304      	adds	r3, #4
 80133b6:	7da0      	ldrb	r0, [r4, #22]
 80133b8:	444a      	add	r2, r9
 80133ba:	7561      	strb	r1, [r4, #21]
 80133bc:	1bdb      	subs	r3, r3, r7
 80133be:	f080 0001 	eor.w	r0, r0, #1
 80133c2:	60a2      	str	r2, [r4, #8]
 80133c4:	6123      	str	r3, [r4, #16]
 80133c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ca:	2104      	movs	r1, #4
 80133cc:	4620      	mov	r0, r4
 80133ce:	f000 fe91 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 80133d2:	b1b0      	cbz	r0, 8013402 <ucdr_deserialize_uint32_t+0xc6>
 80133d4:	7d23      	ldrb	r3, [r4, #20]
 80133d6:	2b01      	cmp	r3, #1
 80133d8:	68a3      	ldr	r3, [r4, #8]
 80133da:	d017      	beq.n	801340c <ucdr_deserialize_uint32_t+0xd0>
 80133dc:	78db      	ldrb	r3, [r3, #3]
 80133de:	702b      	strb	r3, [r5, #0]
 80133e0:	68a3      	ldr	r3, [r4, #8]
 80133e2:	789b      	ldrb	r3, [r3, #2]
 80133e4:	706b      	strb	r3, [r5, #1]
 80133e6:	68a3      	ldr	r3, [r4, #8]
 80133e8:	785b      	ldrb	r3, [r3, #1]
 80133ea:	70ab      	strb	r3, [r5, #2]
 80133ec:	68a3      	ldr	r3, [r4, #8]
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	70eb      	strb	r3, [r5, #3]
 80133f2:	2104      	movs	r1, #4
 80133f4:	68a2      	ldr	r2, [r4, #8]
 80133f6:	6923      	ldr	r3, [r4, #16]
 80133f8:	440a      	add	r2, r1
 80133fa:	7561      	strb	r1, [r4, #21]
 80133fc:	440b      	add	r3, r1
 80133fe:	60a2      	str	r2, [r4, #8]
 8013400:	6123      	str	r3, [r4, #16]
 8013402:	7da0      	ldrb	r0, [r4, #22]
 8013404:	f080 0001 	eor.w	r0, r0, #1
 8013408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	602b      	str	r3, [r5, #0]
 8013410:	e7ef      	b.n	80133f2 <ucdr_deserialize_uint32_t+0xb6>
 8013412:	68a2      	ldr	r2, [r4, #8]
 8013414:	6923      	ldr	r3, [r4, #16]
 8013416:	1bd2      	subs	r2, r2, r7
 8013418:	7da0      	ldrb	r0, [r4, #22]
 801341a:	1bdb      	subs	r3, r3, r7
 801341c:	f884 8015 	strb.w	r8, [r4, #21]
 8013420:	f080 0001 	eor.w	r0, r0, #1
 8013424:	60a2      	str	r2, [r4, #8]
 8013426:	6123      	str	r3, [r4, #16]
 8013428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801342c:	68a3      	ldr	r3, [r4, #8]
 801342e:	789b      	ldrb	r3, [r3, #2]
 8013430:	706b      	strb	r3, [r5, #1]
 8013432:	1cab      	adds	r3, r5, #2
 8013434:	68a2      	ldr	r2, [r4, #8]
 8013436:	7852      	ldrb	r2, [r2, #1]
 8013438:	f803 2b01 	strb.w	r2, [r3], #1
 801343c:	68a2      	ldr	r2, [r4, #8]
 801343e:	7812      	ldrb	r2, [r2, #0]
 8013440:	701a      	strb	r2, [r3, #0]
 8013442:	e7b4      	b.n	80133ae <ucdr_deserialize_uint32_t+0x72>
 8013444:	4631      	mov	r1, r6
 8013446:	463a      	mov	r2, r7
 8013448:	4628      	mov	r0, r5
 801344a:	f00f f894 	bl	8022576 <memcpy>
 801344e:	464a      	mov	r2, r9
 8013450:	19e8      	adds	r0, r5, r7
 8013452:	68a1      	ldr	r1, [r4, #8]
 8013454:	f00f f88f 	bl	8022576 <memcpy>
 8013458:	e7a9      	b.n	80133ae <ucdr_deserialize_uint32_t+0x72>
 801345a:	bf00      	nop

0801345c <ucdr_deserialize_endian_uint32_t>:
 801345c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013460:	4604      	mov	r4, r0
 8013462:	460e      	mov	r6, r1
 8013464:	2104      	movs	r1, #4
 8013466:	4615      	mov	r5, r2
 8013468:	f000 fe98 	bl	801419c <ucdr_buffer_alignment>
 801346c:	4601      	mov	r1, r0
 801346e:	4620      	mov	r0, r4
 8013470:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013474:	f000 feda 	bl	801422c <ucdr_advance_buffer>
 8013478:	2104      	movs	r1, #4
 801347a:	4620      	mov	r0, r4
 801347c:	f000 fe2e 	bl	80140dc <ucdr_check_buffer_available_for>
 8013480:	2800      	cmp	r0, #0
 8013482:	d13c      	bne.n	80134fe <ucdr_deserialize_endian_uint32_t+0xa2>
 8013484:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013488:	42bb      	cmp	r3, r7
 801348a:	d933      	bls.n	80134f4 <ucdr_deserialize_endian_uint32_t+0x98>
 801348c:	eba3 0907 	sub.w	r9, r3, r7
 8013490:	60a3      	str	r3, [r4, #8]
 8013492:	6923      	ldr	r3, [r4, #16]
 8013494:	4620      	mov	r0, r4
 8013496:	f1c9 0a04 	rsb	sl, r9, #4
 801349a:	444b      	add	r3, r9
 801349c:	4651      	mov	r1, sl
 801349e:	6123      	str	r3, [r4, #16]
 80134a0:	f000 fe28 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 80134a4:	2800      	cmp	r0, #0
 80134a6:	d048      	beq.n	801353a <ucdr_deserialize_endian_uint32_t+0xde>
 80134a8:	2e01      	cmp	r6, #1
 80134aa:	d061      	beq.n	8013570 <ucdr_deserialize_endian_uint32_t+0x114>
 80134ac:	78fb      	ldrb	r3, [r7, #3]
 80134ae:	702b      	strb	r3, [r5, #0]
 80134b0:	f1b9 0f00 	cmp.w	r9, #0
 80134b4:	d050      	beq.n	8013558 <ucdr_deserialize_endian_uint32_t+0xfc>
 80134b6:	78bb      	ldrb	r3, [r7, #2]
 80134b8:	f1b9 0f01 	cmp.w	r9, #1
 80134bc:	706b      	strb	r3, [r5, #1]
 80134be:	f105 0302 	add.w	r3, r5, #2
 80134c2:	d04d      	beq.n	8013560 <ucdr_deserialize_endian_uint32_t+0x104>
 80134c4:	787b      	ldrb	r3, [r7, #1]
 80134c6:	f1b9 0f02 	cmp.w	r9, #2
 80134ca:	70ab      	strb	r3, [r5, #2]
 80134cc:	f105 0303 	add.w	r3, r5, #3
 80134d0:	d04a      	beq.n	8013568 <ucdr_deserialize_endian_uint32_t+0x10c>
 80134d2:	783b      	ldrb	r3, [r7, #0]
 80134d4:	70eb      	strb	r3, [r5, #3]
 80134d6:	6923      	ldr	r3, [r4, #16]
 80134d8:	2104      	movs	r1, #4
 80134da:	68a2      	ldr	r2, [r4, #8]
 80134dc:	3304      	adds	r3, #4
 80134de:	7da0      	ldrb	r0, [r4, #22]
 80134e0:	4452      	add	r2, sl
 80134e2:	7561      	strb	r1, [r4, #21]
 80134e4:	eba3 0309 	sub.w	r3, r3, r9
 80134e8:	f080 0001 	eor.w	r0, r0, #1
 80134ec:	60a2      	str	r2, [r4, #8]
 80134ee:	6123      	str	r3, [r4, #16]
 80134f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134f4:	2104      	movs	r1, #4
 80134f6:	4620      	mov	r0, r4
 80134f8:	f000 fdfc 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 80134fc:	b1a8      	cbz	r0, 801352a <ucdr_deserialize_endian_uint32_t+0xce>
 80134fe:	2e01      	cmp	r6, #1
 8013500:	68a3      	ldr	r3, [r4, #8]
 8013502:	d017      	beq.n	8013534 <ucdr_deserialize_endian_uint32_t+0xd8>
 8013504:	78db      	ldrb	r3, [r3, #3]
 8013506:	702b      	strb	r3, [r5, #0]
 8013508:	68a3      	ldr	r3, [r4, #8]
 801350a:	789b      	ldrb	r3, [r3, #2]
 801350c:	706b      	strb	r3, [r5, #1]
 801350e:	68a3      	ldr	r3, [r4, #8]
 8013510:	785b      	ldrb	r3, [r3, #1]
 8013512:	70ab      	strb	r3, [r5, #2]
 8013514:	68a3      	ldr	r3, [r4, #8]
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	70eb      	strb	r3, [r5, #3]
 801351a:	2104      	movs	r1, #4
 801351c:	68a2      	ldr	r2, [r4, #8]
 801351e:	6923      	ldr	r3, [r4, #16]
 8013520:	440a      	add	r2, r1
 8013522:	7561      	strb	r1, [r4, #21]
 8013524:	440b      	add	r3, r1
 8013526:	60a2      	str	r2, [r4, #8]
 8013528:	6123      	str	r3, [r4, #16]
 801352a:	7da0      	ldrb	r0, [r4, #22]
 801352c:	f080 0001 	eor.w	r0, r0, #1
 8013530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	602b      	str	r3, [r5, #0]
 8013538:	e7ef      	b.n	801351a <ucdr_deserialize_endian_uint32_t+0xbe>
 801353a:	68a2      	ldr	r2, [r4, #8]
 801353c:	6923      	ldr	r3, [r4, #16]
 801353e:	eba2 0209 	sub.w	r2, r2, r9
 8013542:	7da0      	ldrb	r0, [r4, #22]
 8013544:	eba3 0309 	sub.w	r3, r3, r9
 8013548:	f884 8015 	strb.w	r8, [r4, #21]
 801354c:	f080 0001 	eor.w	r0, r0, #1
 8013550:	60a2      	str	r2, [r4, #8]
 8013552:	6123      	str	r3, [r4, #16]
 8013554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013558:	68a3      	ldr	r3, [r4, #8]
 801355a:	789b      	ldrb	r3, [r3, #2]
 801355c:	706b      	strb	r3, [r5, #1]
 801355e:	1cab      	adds	r3, r5, #2
 8013560:	68a2      	ldr	r2, [r4, #8]
 8013562:	7852      	ldrb	r2, [r2, #1]
 8013564:	f803 2b01 	strb.w	r2, [r3], #1
 8013568:	68a2      	ldr	r2, [r4, #8]
 801356a:	7812      	ldrb	r2, [r2, #0]
 801356c:	701a      	strb	r2, [r3, #0]
 801356e:	e7b2      	b.n	80134d6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8013570:	4639      	mov	r1, r7
 8013572:	464a      	mov	r2, r9
 8013574:	4628      	mov	r0, r5
 8013576:	f00e fffe 	bl	8022576 <memcpy>
 801357a:	4652      	mov	r2, sl
 801357c:	eb05 0009 	add.w	r0, r5, r9
 8013580:	68a1      	ldr	r1, [r4, #8]
 8013582:	f00e fff8 	bl	8022576 <memcpy>
 8013586:	e7a6      	b.n	80134d6 <ucdr_deserialize_endian_uint32_t+0x7a>

08013588 <ucdr_serialize_uint64_t>:
 8013588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801358c:	4604      	mov	r4, r0
 801358e:	b082      	sub	sp, #8
 8013590:	2108      	movs	r1, #8
 8013592:	e9cd 2300 	strd	r2, r3, [sp]
 8013596:	f000 fe01 	bl	801419c <ucdr_buffer_alignment>
 801359a:	4601      	mov	r1, r0
 801359c:	4620      	mov	r0, r4
 801359e:	7d67      	ldrb	r7, [r4, #21]
 80135a0:	f000 fe44 	bl	801422c <ucdr_advance_buffer>
 80135a4:	2108      	movs	r1, #8
 80135a6:	4620      	mov	r0, r4
 80135a8:	f000 fd98 	bl	80140dc <ucdr_check_buffer_available_for>
 80135ac:	2800      	cmp	r0, #0
 80135ae:	d14e      	bne.n	801364e <ucdr_serialize_uint64_t+0xc6>
 80135b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80135b4:	42ab      	cmp	r3, r5
 80135b6:	d945      	bls.n	8013644 <ucdr_serialize_uint64_t+0xbc>
 80135b8:	1b5e      	subs	r6, r3, r5
 80135ba:	60a3      	str	r3, [r4, #8]
 80135bc:	6923      	ldr	r3, [r4, #16]
 80135be:	4620      	mov	r0, r4
 80135c0:	f1c6 0808 	rsb	r8, r6, #8
 80135c4:	4433      	add	r3, r6
 80135c6:	4641      	mov	r1, r8
 80135c8:	6123      	str	r3, [r4, #16]
 80135ca:	f000 fd93 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 80135ce:	2800      	cmp	r0, #0
 80135d0:	d074      	beq.n	80136bc <ucdr_serialize_uint64_t+0x134>
 80135d2:	7d23      	ldrb	r3, [r4, #20]
 80135d4:	2b01      	cmp	r3, #1
 80135d6:	f000 809b 	beq.w	8013710 <ucdr_serialize_uint64_t+0x188>
 80135da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80135de:	702b      	strb	r3, [r5, #0]
 80135e0:	2e00      	cmp	r6, #0
 80135e2:	d078      	beq.n	80136d6 <ucdr_serialize_uint64_t+0x14e>
 80135e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80135e8:	2e01      	cmp	r6, #1
 80135ea:	706b      	strb	r3, [r5, #1]
 80135ec:	d077      	beq.n	80136de <ucdr_serialize_uint64_t+0x156>
 80135ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80135f2:	2e02      	cmp	r6, #2
 80135f4:	70ab      	strb	r3, [r5, #2]
 80135f6:	d076      	beq.n	80136e6 <ucdr_serialize_uint64_t+0x15e>
 80135f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80135fc:	2e03      	cmp	r6, #3
 80135fe:	70eb      	strb	r3, [r5, #3]
 8013600:	d075      	beq.n	80136ee <ucdr_serialize_uint64_t+0x166>
 8013602:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013606:	2e04      	cmp	r6, #4
 8013608:	712b      	strb	r3, [r5, #4]
 801360a:	d074      	beq.n	80136f6 <ucdr_serialize_uint64_t+0x16e>
 801360c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013610:	2e05      	cmp	r6, #5
 8013612:	716b      	strb	r3, [r5, #5]
 8013614:	d073      	beq.n	80136fe <ucdr_serialize_uint64_t+0x176>
 8013616:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801361a:	2e06      	cmp	r6, #6
 801361c:	71ab      	strb	r3, [r5, #6]
 801361e:	d072      	beq.n	8013706 <ucdr_serialize_uint64_t+0x17e>
 8013620:	f89d 3000 	ldrb.w	r3, [sp]
 8013624:	71eb      	strb	r3, [r5, #7]
 8013626:	6923      	ldr	r3, [r4, #16]
 8013628:	2108      	movs	r1, #8
 801362a:	68a2      	ldr	r2, [r4, #8]
 801362c:	3308      	adds	r3, #8
 801362e:	7da0      	ldrb	r0, [r4, #22]
 8013630:	4442      	add	r2, r8
 8013632:	7561      	strb	r1, [r4, #21]
 8013634:	1b9e      	subs	r6, r3, r6
 8013636:	f080 0001 	eor.w	r0, r0, #1
 801363a:	60a2      	str	r2, [r4, #8]
 801363c:	6126      	str	r6, [r4, #16]
 801363e:	b002      	add	sp, #8
 8013640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013644:	2108      	movs	r1, #8
 8013646:	4620      	mov	r0, r4
 8013648:	f000 fd54 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 801364c:	b350      	cbz	r0, 80136a4 <ucdr_serialize_uint64_t+0x11c>
 801364e:	7d23      	ldrb	r3, [r4, #20]
 8013650:	2b01      	cmp	r3, #1
 8013652:	d02d      	beq.n	80136b0 <ucdr_serialize_uint64_t+0x128>
 8013654:	68a3      	ldr	r3, [r4, #8]
 8013656:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801365a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801365e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013662:	7018      	strb	r0, [r3, #0]
 8013664:	68a3      	ldr	r3, [r4, #8]
 8013666:	705a      	strb	r2, [r3, #1]
 8013668:	68a3      	ldr	r3, [r4, #8]
 801366a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801366e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013672:	7099      	strb	r1, [r3, #2]
 8013674:	68a3      	ldr	r3, [r4, #8]
 8013676:	70da      	strb	r2, [r3, #3]
 8013678:	68a3      	ldr	r3, [r4, #8]
 801367a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801367e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013682:	7118      	strb	r0, [r3, #4]
 8013684:	68a3      	ldr	r3, [r4, #8]
 8013686:	715a      	strb	r2, [r3, #5]
 8013688:	68a3      	ldr	r3, [r4, #8]
 801368a:	f89d 2000 	ldrb.w	r2, [sp]
 801368e:	7199      	strb	r1, [r3, #6]
 8013690:	68a3      	ldr	r3, [r4, #8]
 8013692:	71da      	strb	r2, [r3, #7]
 8013694:	2108      	movs	r1, #8
 8013696:	68a2      	ldr	r2, [r4, #8]
 8013698:	6923      	ldr	r3, [r4, #16]
 801369a:	440a      	add	r2, r1
 801369c:	7561      	strb	r1, [r4, #21]
 801369e:	440b      	add	r3, r1
 80136a0:	60a2      	str	r2, [r4, #8]
 80136a2:	6123      	str	r3, [r4, #16]
 80136a4:	7da0      	ldrb	r0, [r4, #22]
 80136a6:	f080 0001 	eor.w	r0, r0, #1
 80136aa:	b002      	add	sp, #8
 80136ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b0:	466b      	mov	r3, sp
 80136b2:	68a2      	ldr	r2, [r4, #8]
 80136b4:	cb03      	ldmia	r3!, {r0, r1}
 80136b6:	6010      	str	r0, [r2, #0]
 80136b8:	6051      	str	r1, [r2, #4]
 80136ba:	e7eb      	b.n	8013694 <ucdr_serialize_uint64_t+0x10c>
 80136bc:	68a2      	ldr	r2, [r4, #8]
 80136be:	6923      	ldr	r3, [r4, #16]
 80136c0:	7da0      	ldrb	r0, [r4, #22]
 80136c2:	1b92      	subs	r2, r2, r6
 80136c4:	1b9b      	subs	r3, r3, r6
 80136c6:	7567      	strb	r7, [r4, #21]
 80136c8:	f080 0001 	eor.w	r0, r0, #1
 80136cc:	60a2      	str	r2, [r4, #8]
 80136ce:	6123      	str	r3, [r4, #16]
 80136d0:	b002      	add	sp, #8
 80136d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136d6:	68a3      	ldr	r3, [r4, #8]
 80136d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136dc:	701a      	strb	r2, [r3, #0]
 80136de:	68a3      	ldr	r3, [r4, #8]
 80136e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80136e4:	701a      	strb	r2, [r3, #0]
 80136e6:	68a3      	ldr	r3, [r4, #8]
 80136e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80136ec:	701a      	strb	r2, [r3, #0]
 80136ee:	68a3      	ldr	r3, [r4, #8]
 80136f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80136f4:	701a      	strb	r2, [r3, #0]
 80136f6:	68a3      	ldr	r3, [r4, #8]
 80136f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80136fc:	701a      	strb	r2, [r3, #0]
 80136fe:	68a3      	ldr	r3, [r4, #8]
 8013700:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013704:	701a      	strb	r2, [r3, #0]
 8013706:	68a3      	ldr	r3, [r4, #8]
 8013708:	f89d 2000 	ldrb.w	r2, [sp]
 801370c:	701a      	strb	r2, [r3, #0]
 801370e:	e78a      	b.n	8013626 <ucdr_serialize_uint64_t+0x9e>
 8013710:	4628      	mov	r0, r5
 8013712:	466d      	mov	r5, sp
 8013714:	4632      	mov	r2, r6
 8013716:	4629      	mov	r1, r5
 8013718:	f00e ff2d 	bl	8022576 <memcpy>
 801371c:	4642      	mov	r2, r8
 801371e:	19a9      	adds	r1, r5, r6
 8013720:	68a0      	ldr	r0, [r4, #8]
 8013722:	f00e ff28 	bl	8022576 <memcpy>
 8013726:	e77e      	b.n	8013626 <ucdr_serialize_uint64_t+0x9e>

08013728 <ucdr_serialize_int16_t>:
 8013728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801372c:	460b      	mov	r3, r1
 801372e:	b082      	sub	sp, #8
 8013730:	4604      	mov	r4, r0
 8013732:	2102      	movs	r1, #2
 8013734:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013738:	f000 fd30 	bl	801419c <ucdr_buffer_alignment>
 801373c:	4601      	mov	r1, r0
 801373e:	4620      	mov	r0, r4
 8013740:	7d67      	ldrb	r7, [r4, #21]
 8013742:	f000 fd73 	bl	801422c <ucdr_advance_buffer>
 8013746:	2102      	movs	r1, #2
 8013748:	4620      	mov	r0, r4
 801374a:	f000 fcc7 	bl	80140dc <ucdr_check_buffer_available_for>
 801374e:	bb78      	cbnz	r0, 80137b0 <ucdr_serialize_int16_t+0x88>
 8013750:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013754:	42ab      	cmp	r3, r5
 8013756:	d926      	bls.n	80137a6 <ucdr_serialize_int16_t+0x7e>
 8013758:	1b5e      	subs	r6, r3, r5
 801375a:	60a3      	str	r3, [r4, #8]
 801375c:	6923      	ldr	r3, [r4, #16]
 801375e:	4620      	mov	r0, r4
 8013760:	f1c6 0802 	rsb	r8, r6, #2
 8013764:	4433      	add	r3, r6
 8013766:	4641      	mov	r1, r8
 8013768:	6123      	str	r3, [r4, #16]
 801376a:	f000 fcc3 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 801376e:	2800      	cmp	r0, #0
 8013770:	d03b      	beq.n	80137ea <ucdr_serialize_int16_t+0xc2>
 8013772:	7d23      	ldrb	r3, [r4, #20]
 8013774:	2b01      	cmp	r3, #1
 8013776:	d04a      	beq.n	801380e <ucdr_serialize_int16_t+0xe6>
 8013778:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801377c:	702b      	strb	r3, [r5, #0]
 801377e:	2e00      	cmp	r6, #0
 8013780:	d040      	beq.n	8013804 <ucdr_serialize_int16_t+0xdc>
 8013782:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013786:	706b      	strb	r3, [r5, #1]
 8013788:	6923      	ldr	r3, [r4, #16]
 801378a:	2102      	movs	r1, #2
 801378c:	68a2      	ldr	r2, [r4, #8]
 801378e:	3302      	adds	r3, #2
 8013790:	7da0      	ldrb	r0, [r4, #22]
 8013792:	4442      	add	r2, r8
 8013794:	7561      	strb	r1, [r4, #21]
 8013796:	1b9e      	subs	r6, r3, r6
 8013798:	f080 0001 	eor.w	r0, r0, #1
 801379c:	60a2      	str	r2, [r4, #8]
 801379e:	6126      	str	r6, [r4, #16]
 80137a0:	b002      	add	sp, #8
 80137a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137a6:	2102      	movs	r1, #2
 80137a8:	4620      	mov	r0, r4
 80137aa:	f000 fca3 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 80137ae:	b190      	cbz	r0, 80137d6 <ucdr_serialize_int16_t+0xae>
 80137b0:	7d23      	ldrb	r3, [r4, #20]
 80137b2:	2b01      	cmp	r3, #1
 80137b4:	68a3      	ldr	r3, [r4, #8]
 80137b6:	d014      	beq.n	80137e2 <ucdr_serialize_int16_t+0xba>
 80137b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80137bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80137c0:	7019      	strb	r1, [r3, #0]
 80137c2:	68a3      	ldr	r3, [r4, #8]
 80137c4:	705a      	strb	r2, [r3, #1]
 80137c6:	2102      	movs	r1, #2
 80137c8:	68a2      	ldr	r2, [r4, #8]
 80137ca:	6923      	ldr	r3, [r4, #16]
 80137cc:	440a      	add	r2, r1
 80137ce:	7561      	strb	r1, [r4, #21]
 80137d0:	440b      	add	r3, r1
 80137d2:	60a2      	str	r2, [r4, #8]
 80137d4:	6123      	str	r3, [r4, #16]
 80137d6:	7da0      	ldrb	r0, [r4, #22]
 80137d8:	f080 0001 	eor.w	r0, r0, #1
 80137dc:	b002      	add	sp, #8
 80137de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80137e6:	801a      	strh	r2, [r3, #0]
 80137e8:	e7ed      	b.n	80137c6 <ucdr_serialize_int16_t+0x9e>
 80137ea:	68a2      	ldr	r2, [r4, #8]
 80137ec:	6923      	ldr	r3, [r4, #16]
 80137ee:	7da0      	ldrb	r0, [r4, #22]
 80137f0:	1b92      	subs	r2, r2, r6
 80137f2:	1b9b      	subs	r3, r3, r6
 80137f4:	7567      	strb	r7, [r4, #21]
 80137f6:	f080 0001 	eor.w	r0, r0, #1
 80137fa:	60a2      	str	r2, [r4, #8]
 80137fc:	6123      	str	r3, [r4, #16]
 80137fe:	b002      	add	sp, #8
 8013800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013804:	68a3      	ldr	r3, [r4, #8]
 8013806:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801380a:	701a      	strb	r2, [r3, #0]
 801380c:	e7bc      	b.n	8013788 <ucdr_serialize_int16_t+0x60>
 801380e:	4628      	mov	r0, r5
 8013810:	f10d 0506 	add.w	r5, sp, #6
 8013814:	4632      	mov	r2, r6
 8013816:	4629      	mov	r1, r5
 8013818:	f00e fead 	bl	8022576 <memcpy>
 801381c:	4642      	mov	r2, r8
 801381e:	19a9      	adds	r1, r5, r6
 8013820:	68a0      	ldr	r0, [r4, #8]
 8013822:	f00e fea8 	bl	8022576 <memcpy>
 8013826:	e7af      	b.n	8013788 <ucdr_serialize_int16_t+0x60>

08013828 <ucdr_deserialize_int16_t>:
 8013828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801382c:	4604      	mov	r4, r0
 801382e:	460d      	mov	r5, r1
 8013830:	2102      	movs	r1, #2
 8013832:	f000 fcb3 	bl	801419c <ucdr_buffer_alignment>
 8013836:	4601      	mov	r1, r0
 8013838:	4620      	mov	r0, r4
 801383a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801383e:	f000 fcf5 	bl	801422c <ucdr_advance_buffer>
 8013842:	2102      	movs	r1, #2
 8013844:	4620      	mov	r0, r4
 8013846:	f000 fc49 	bl	80140dc <ucdr_check_buffer_available_for>
 801384a:	bb60      	cbnz	r0, 80138a6 <ucdr_deserialize_int16_t+0x7e>
 801384c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013850:	42be      	cmp	r6, r7
 8013852:	d923      	bls.n	801389c <ucdr_deserialize_int16_t+0x74>
 8013854:	6923      	ldr	r3, [r4, #16]
 8013856:	4620      	mov	r0, r4
 8013858:	60a6      	str	r6, [r4, #8]
 801385a:	1bf6      	subs	r6, r6, r7
 801385c:	4433      	add	r3, r6
 801385e:	f1c6 0902 	rsb	r9, r6, #2
 8013862:	6123      	str	r3, [r4, #16]
 8013864:	4649      	mov	r1, r9
 8013866:	f000 fc45 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 801386a:	2800      	cmp	r0, #0
 801386c:	d034      	beq.n	80138d8 <ucdr_deserialize_int16_t+0xb0>
 801386e:	7d23      	ldrb	r3, [r4, #20]
 8013870:	2b01      	cmp	r3, #1
 8013872:	d042      	beq.n	80138fa <ucdr_deserialize_int16_t+0xd2>
 8013874:	787b      	ldrb	r3, [r7, #1]
 8013876:	702b      	strb	r3, [r5, #0]
 8013878:	2e00      	cmp	r6, #0
 801387a:	d03a      	beq.n	80138f2 <ucdr_deserialize_int16_t+0xca>
 801387c:	783b      	ldrb	r3, [r7, #0]
 801387e:	706b      	strb	r3, [r5, #1]
 8013880:	6923      	ldr	r3, [r4, #16]
 8013882:	2102      	movs	r1, #2
 8013884:	68a2      	ldr	r2, [r4, #8]
 8013886:	3302      	adds	r3, #2
 8013888:	7da0      	ldrb	r0, [r4, #22]
 801388a:	444a      	add	r2, r9
 801388c:	7561      	strb	r1, [r4, #21]
 801388e:	1b9b      	subs	r3, r3, r6
 8013890:	f080 0001 	eor.w	r0, r0, #1
 8013894:	60a2      	str	r2, [r4, #8]
 8013896:	6123      	str	r3, [r4, #16]
 8013898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801389c:	2102      	movs	r1, #2
 801389e:	4620      	mov	r0, r4
 80138a0:	f000 fc28 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 80138a4:	b180      	cbz	r0, 80138c8 <ucdr_deserialize_int16_t+0xa0>
 80138a6:	7d23      	ldrb	r3, [r4, #20]
 80138a8:	2b01      	cmp	r3, #1
 80138aa:	68a3      	ldr	r3, [r4, #8]
 80138ac:	d011      	beq.n	80138d2 <ucdr_deserialize_int16_t+0xaa>
 80138ae:	785b      	ldrb	r3, [r3, #1]
 80138b0:	702b      	strb	r3, [r5, #0]
 80138b2:	68a3      	ldr	r3, [r4, #8]
 80138b4:	781b      	ldrb	r3, [r3, #0]
 80138b6:	706b      	strb	r3, [r5, #1]
 80138b8:	2102      	movs	r1, #2
 80138ba:	68a2      	ldr	r2, [r4, #8]
 80138bc:	6923      	ldr	r3, [r4, #16]
 80138be:	440a      	add	r2, r1
 80138c0:	7561      	strb	r1, [r4, #21]
 80138c2:	440b      	add	r3, r1
 80138c4:	60a2      	str	r2, [r4, #8]
 80138c6:	6123      	str	r3, [r4, #16]
 80138c8:	7da0      	ldrb	r0, [r4, #22]
 80138ca:	f080 0001 	eor.w	r0, r0, #1
 80138ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138d2:	881b      	ldrh	r3, [r3, #0]
 80138d4:	802b      	strh	r3, [r5, #0]
 80138d6:	e7ef      	b.n	80138b8 <ucdr_deserialize_int16_t+0x90>
 80138d8:	68a2      	ldr	r2, [r4, #8]
 80138da:	6923      	ldr	r3, [r4, #16]
 80138dc:	1b92      	subs	r2, r2, r6
 80138de:	7da0      	ldrb	r0, [r4, #22]
 80138e0:	1b9b      	subs	r3, r3, r6
 80138e2:	f884 8015 	strb.w	r8, [r4, #21]
 80138e6:	f080 0001 	eor.w	r0, r0, #1
 80138ea:	60a2      	str	r2, [r4, #8]
 80138ec:	6123      	str	r3, [r4, #16]
 80138ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138f2:	68a3      	ldr	r3, [r4, #8]
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	706b      	strb	r3, [r5, #1]
 80138f8:	e7c2      	b.n	8013880 <ucdr_deserialize_int16_t+0x58>
 80138fa:	4639      	mov	r1, r7
 80138fc:	4632      	mov	r2, r6
 80138fe:	4628      	mov	r0, r5
 8013900:	f00e fe39 	bl	8022576 <memcpy>
 8013904:	464a      	mov	r2, r9
 8013906:	19a8      	adds	r0, r5, r6
 8013908:	68a1      	ldr	r1, [r4, #8]
 801390a:	f00e fe34 	bl	8022576 <memcpy>
 801390e:	e7b7      	b.n	8013880 <ucdr_deserialize_int16_t+0x58>

08013910 <ucdr_serialize_int32_t>:
 8013910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013914:	b082      	sub	sp, #8
 8013916:	4604      	mov	r4, r0
 8013918:	9101      	str	r1, [sp, #4]
 801391a:	2104      	movs	r1, #4
 801391c:	f000 fc3e 	bl	801419c <ucdr_buffer_alignment>
 8013920:	4601      	mov	r1, r0
 8013922:	4620      	mov	r0, r4
 8013924:	7d67      	ldrb	r7, [r4, #21]
 8013926:	f000 fc81 	bl	801422c <ucdr_advance_buffer>
 801392a:	2104      	movs	r1, #4
 801392c:	4620      	mov	r0, r4
 801392e:	f000 fbd5 	bl	80140dc <ucdr_check_buffer_available_for>
 8013932:	2800      	cmp	r0, #0
 8013934:	d139      	bne.n	80139aa <ucdr_serialize_int32_t+0x9a>
 8013936:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801393a:	42ab      	cmp	r3, r5
 801393c:	d930      	bls.n	80139a0 <ucdr_serialize_int32_t+0x90>
 801393e:	1b5e      	subs	r6, r3, r5
 8013940:	60a3      	str	r3, [r4, #8]
 8013942:	6923      	ldr	r3, [r4, #16]
 8013944:	4620      	mov	r0, r4
 8013946:	f1c6 0804 	rsb	r8, r6, #4
 801394a:	4433      	add	r3, r6
 801394c:	4641      	mov	r1, r8
 801394e:	6123      	str	r3, [r4, #16]
 8013950:	f000 fbd0 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013954:	2800      	cmp	r0, #0
 8013956:	d04c      	beq.n	80139f2 <ucdr_serialize_int32_t+0xe2>
 8013958:	7d23      	ldrb	r3, [r4, #20]
 801395a:	2b01      	cmp	r3, #1
 801395c:	d063      	beq.n	8013a26 <ucdr_serialize_int32_t+0x116>
 801395e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013962:	702b      	strb	r3, [r5, #0]
 8013964:	2e00      	cmp	r6, #0
 8013966:	d051      	beq.n	8013a0c <ucdr_serialize_int32_t+0xfc>
 8013968:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801396c:	2e01      	cmp	r6, #1
 801396e:	706b      	strb	r3, [r5, #1]
 8013970:	d050      	beq.n	8013a14 <ucdr_serialize_int32_t+0x104>
 8013972:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013976:	2e02      	cmp	r6, #2
 8013978:	70ab      	strb	r3, [r5, #2]
 801397a:	d04f      	beq.n	8013a1c <ucdr_serialize_int32_t+0x10c>
 801397c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013980:	70eb      	strb	r3, [r5, #3]
 8013982:	6923      	ldr	r3, [r4, #16]
 8013984:	2104      	movs	r1, #4
 8013986:	68a2      	ldr	r2, [r4, #8]
 8013988:	3304      	adds	r3, #4
 801398a:	7da0      	ldrb	r0, [r4, #22]
 801398c:	4442      	add	r2, r8
 801398e:	7561      	strb	r1, [r4, #21]
 8013990:	1b9e      	subs	r6, r3, r6
 8013992:	f080 0001 	eor.w	r0, r0, #1
 8013996:	60a2      	str	r2, [r4, #8]
 8013998:	6126      	str	r6, [r4, #16]
 801399a:	b002      	add	sp, #8
 801399c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139a0:	2104      	movs	r1, #4
 80139a2:	4620      	mov	r0, r4
 80139a4:	f000 fba6 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 80139a8:	b1d0      	cbz	r0, 80139e0 <ucdr_serialize_int32_t+0xd0>
 80139aa:	7d23      	ldrb	r3, [r4, #20]
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	68a3      	ldr	r3, [r4, #8]
 80139b0:	d01c      	beq.n	80139ec <ucdr_serialize_int32_t+0xdc>
 80139b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80139b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80139ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80139be:	7018      	strb	r0, [r3, #0]
 80139c0:	68a3      	ldr	r3, [r4, #8]
 80139c2:	705a      	strb	r2, [r3, #1]
 80139c4:	68a3      	ldr	r3, [r4, #8]
 80139c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80139ca:	7099      	strb	r1, [r3, #2]
 80139cc:	68a3      	ldr	r3, [r4, #8]
 80139ce:	70da      	strb	r2, [r3, #3]
 80139d0:	2104      	movs	r1, #4
 80139d2:	68a2      	ldr	r2, [r4, #8]
 80139d4:	6923      	ldr	r3, [r4, #16]
 80139d6:	440a      	add	r2, r1
 80139d8:	7561      	strb	r1, [r4, #21]
 80139da:	440b      	add	r3, r1
 80139dc:	60a2      	str	r2, [r4, #8]
 80139de:	6123      	str	r3, [r4, #16]
 80139e0:	7da0      	ldrb	r0, [r4, #22]
 80139e2:	f080 0001 	eor.w	r0, r0, #1
 80139e6:	b002      	add	sp, #8
 80139e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139ec:	9a01      	ldr	r2, [sp, #4]
 80139ee:	601a      	str	r2, [r3, #0]
 80139f0:	e7ee      	b.n	80139d0 <ucdr_serialize_int32_t+0xc0>
 80139f2:	68a2      	ldr	r2, [r4, #8]
 80139f4:	6923      	ldr	r3, [r4, #16]
 80139f6:	7da0      	ldrb	r0, [r4, #22]
 80139f8:	1b92      	subs	r2, r2, r6
 80139fa:	1b9b      	subs	r3, r3, r6
 80139fc:	7567      	strb	r7, [r4, #21]
 80139fe:	f080 0001 	eor.w	r0, r0, #1
 8013a02:	60a2      	str	r2, [r4, #8]
 8013a04:	6123      	str	r3, [r4, #16]
 8013a06:	b002      	add	sp, #8
 8013a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a0c:	68a3      	ldr	r3, [r4, #8]
 8013a0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a12:	701a      	strb	r2, [r3, #0]
 8013a14:	68a3      	ldr	r3, [r4, #8]
 8013a16:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013a1a:	701a      	strb	r2, [r3, #0]
 8013a1c:	68a3      	ldr	r3, [r4, #8]
 8013a1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013a22:	701a      	strb	r2, [r3, #0]
 8013a24:	e7ad      	b.n	8013982 <ucdr_serialize_int32_t+0x72>
 8013a26:	4628      	mov	r0, r5
 8013a28:	ad01      	add	r5, sp, #4
 8013a2a:	4632      	mov	r2, r6
 8013a2c:	4629      	mov	r1, r5
 8013a2e:	f00e fda2 	bl	8022576 <memcpy>
 8013a32:	4642      	mov	r2, r8
 8013a34:	19a9      	adds	r1, r5, r6
 8013a36:	68a0      	ldr	r0, [r4, #8]
 8013a38:	f00e fd9d 	bl	8022576 <memcpy>
 8013a3c:	e7a1      	b.n	8013982 <ucdr_serialize_int32_t+0x72>
 8013a3e:	bf00      	nop

08013a40 <ucdr_deserialize_int32_t>:
 8013a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a44:	4604      	mov	r4, r0
 8013a46:	460d      	mov	r5, r1
 8013a48:	2104      	movs	r1, #4
 8013a4a:	f000 fba7 	bl	801419c <ucdr_buffer_alignment>
 8013a4e:	4601      	mov	r1, r0
 8013a50:	4620      	mov	r0, r4
 8013a52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013a56:	f000 fbe9 	bl	801422c <ucdr_advance_buffer>
 8013a5a:	2104      	movs	r1, #4
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	f000 fb3d 	bl	80140dc <ucdr_check_buffer_available_for>
 8013a62:	2800      	cmp	r0, #0
 8013a64:	d138      	bne.n	8013ad8 <ucdr_deserialize_int32_t+0x98>
 8013a66:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013a6a:	42b7      	cmp	r7, r6
 8013a6c:	d92f      	bls.n	8013ace <ucdr_deserialize_int32_t+0x8e>
 8013a6e:	6923      	ldr	r3, [r4, #16]
 8013a70:	4620      	mov	r0, r4
 8013a72:	60a7      	str	r7, [r4, #8]
 8013a74:	1bbf      	subs	r7, r7, r6
 8013a76:	443b      	add	r3, r7
 8013a78:	f1c7 0904 	rsb	r9, r7, #4
 8013a7c:	6123      	str	r3, [r4, #16]
 8013a7e:	4649      	mov	r1, r9
 8013a80:	f000 fb38 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013a84:	2800      	cmp	r0, #0
 8013a86:	d046      	beq.n	8013b16 <ucdr_deserialize_int32_t+0xd6>
 8013a88:	7d23      	ldrb	r3, [r4, #20]
 8013a8a:	2b01      	cmp	r3, #1
 8013a8c:	d05c      	beq.n	8013b48 <ucdr_deserialize_int32_t+0x108>
 8013a8e:	78f3      	ldrb	r3, [r6, #3]
 8013a90:	702b      	strb	r3, [r5, #0]
 8013a92:	2f00      	cmp	r7, #0
 8013a94:	d04c      	beq.n	8013b30 <ucdr_deserialize_int32_t+0xf0>
 8013a96:	78b3      	ldrb	r3, [r6, #2]
 8013a98:	2f01      	cmp	r7, #1
 8013a9a:	706b      	strb	r3, [r5, #1]
 8013a9c:	f105 0302 	add.w	r3, r5, #2
 8013aa0:	d04a      	beq.n	8013b38 <ucdr_deserialize_int32_t+0xf8>
 8013aa2:	7873      	ldrb	r3, [r6, #1]
 8013aa4:	2f02      	cmp	r7, #2
 8013aa6:	70ab      	strb	r3, [r5, #2]
 8013aa8:	f105 0303 	add.w	r3, r5, #3
 8013aac:	d048      	beq.n	8013b40 <ucdr_deserialize_int32_t+0x100>
 8013aae:	7833      	ldrb	r3, [r6, #0]
 8013ab0:	70eb      	strb	r3, [r5, #3]
 8013ab2:	6923      	ldr	r3, [r4, #16]
 8013ab4:	2104      	movs	r1, #4
 8013ab6:	68a2      	ldr	r2, [r4, #8]
 8013ab8:	3304      	adds	r3, #4
 8013aba:	7da0      	ldrb	r0, [r4, #22]
 8013abc:	444a      	add	r2, r9
 8013abe:	7561      	strb	r1, [r4, #21]
 8013ac0:	1bdb      	subs	r3, r3, r7
 8013ac2:	f080 0001 	eor.w	r0, r0, #1
 8013ac6:	60a2      	str	r2, [r4, #8]
 8013ac8:	6123      	str	r3, [r4, #16]
 8013aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ace:	2104      	movs	r1, #4
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	f000 fb0f 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013ad6:	b1b0      	cbz	r0, 8013b06 <ucdr_deserialize_int32_t+0xc6>
 8013ad8:	7d23      	ldrb	r3, [r4, #20]
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	68a3      	ldr	r3, [r4, #8]
 8013ade:	d017      	beq.n	8013b10 <ucdr_deserialize_int32_t+0xd0>
 8013ae0:	78db      	ldrb	r3, [r3, #3]
 8013ae2:	702b      	strb	r3, [r5, #0]
 8013ae4:	68a3      	ldr	r3, [r4, #8]
 8013ae6:	789b      	ldrb	r3, [r3, #2]
 8013ae8:	706b      	strb	r3, [r5, #1]
 8013aea:	68a3      	ldr	r3, [r4, #8]
 8013aec:	785b      	ldrb	r3, [r3, #1]
 8013aee:	70ab      	strb	r3, [r5, #2]
 8013af0:	68a3      	ldr	r3, [r4, #8]
 8013af2:	781b      	ldrb	r3, [r3, #0]
 8013af4:	70eb      	strb	r3, [r5, #3]
 8013af6:	2104      	movs	r1, #4
 8013af8:	68a2      	ldr	r2, [r4, #8]
 8013afa:	6923      	ldr	r3, [r4, #16]
 8013afc:	440a      	add	r2, r1
 8013afe:	7561      	strb	r1, [r4, #21]
 8013b00:	440b      	add	r3, r1
 8013b02:	60a2      	str	r2, [r4, #8]
 8013b04:	6123      	str	r3, [r4, #16]
 8013b06:	7da0      	ldrb	r0, [r4, #22]
 8013b08:	f080 0001 	eor.w	r0, r0, #1
 8013b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	602b      	str	r3, [r5, #0]
 8013b14:	e7ef      	b.n	8013af6 <ucdr_deserialize_int32_t+0xb6>
 8013b16:	68a2      	ldr	r2, [r4, #8]
 8013b18:	6923      	ldr	r3, [r4, #16]
 8013b1a:	1bd2      	subs	r2, r2, r7
 8013b1c:	7da0      	ldrb	r0, [r4, #22]
 8013b1e:	1bdb      	subs	r3, r3, r7
 8013b20:	f884 8015 	strb.w	r8, [r4, #21]
 8013b24:	f080 0001 	eor.w	r0, r0, #1
 8013b28:	60a2      	str	r2, [r4, #8]
 8013b2a:	6123      	str	r3, [r4, #16]
 8013b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b30:	68a3      	ldr	r3, [r4, #8]
 8013b32:	789b      	ldrb	r3, [r3, #2]
 8013b34:	706b      	strb	r3, [r5, #1]
 8013b36:	1cab      	adds	r3, r5, #2
 8013b38:	68a2      	ldr	r2, [r4, #8]
 8013b3a:	7852      	ldrb	r2, [r2, #1]
 8013b3c:	f803 2b01 	strb.w	r2, [r3], #1
 8013b40:	68a2      	ldr	r2, [r4, #8]
 8013b42:	7812      	ldrb	r2, [r2, #0]
 8013b44:	701a      	strb	r2, [r3, #0]
 8013b46:	e7b4      	b.n	8013ab2 <ucdr_deserialize_int32_t+0x72>
 8013b48:	4631      	mov	r1, r6
 8013b4a:	463a      	mov	r2, r7
 8013b4c:	4628      	mov	r0, r5
 8013b4e:	f00e fd12 	bl	8022576 <memcpy>
 8013b52:	464a      	mov	r2, r9
 8013b54:	19e8      	adds	r0, r5, r7
 8013b56:	68a1      	ldr	r1, [r4, #8]
 8013b58:	f00e fd0d 	bl	8022576 <memcpy>
 8013b5c:	e7a9      	b.n	8013ab2 <ucdr_deserialize_int32_t+0x72>
 8013b5e:	bf00      	nop

08013b60 <ucdr_serialize_float>:
 8013b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b64:	4604      	mov	r4, r0
 8013b66:	b082      	sub	sp, #8
 8013b68:	2104      	movs	r1, #4
 8013b6a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013b6e:	f000 fb15 	bl	801419c <ucdr_buffer_alignment>
 8013b72:	4601      	mov	r1, r0
 8013b74:	4620      	mov	r0, r4
 8013b76:	7d67      	ldrb	r7, [r4, #21]
 8013b78:	f000 fb58 	bl	801422c <ucdr_advance_buffer>
 8013b7c:	2104      	movs	r1, #4
 8013b7e:	4620      	mov	r0, r4
 8013b80:	f000 faac 	bl	80140dc <ucdr_check_buffer_available_for>
 8013b84:	2800      	cmp	r0, #0
 8013b86:	d139      	bne.n	8013bfc <ucdr_serialize_float+0x9c>
 8013b88:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013b8c:	42ab      	cmp	r3, r5
 8013b8e:	d930      	bls.n	8013bf2 <ucdr_serialize_float+0x92>
 8013b90:	1b5e      	subs	r6, r3, r5
 8013b92:	60a3      	str	r3, [r4, #8]
 8013b94:	6923      	ldr	r3, [r4, #16]
 8013b96:	4620      	mov	r0, r4
 8013b98:	f1c6 0804 	rsb	r8, r6, #4
 8013b9c:	4433      	add	r3, r6
 8013b9e:	4641      	mov	r1, r8
 8013ba0:	6123      	str	r3, [r4, #16]
 8013ba2:	f000 faa7 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	d04c      	beq.n	8013c44 <ucdr_serialize_float+0xe4>
 8013baa:	7d23      	ldrb	r3, [r4, #20]
 8013bac:	2b01      	cmp	r3, #1
 8013bae:	d063      	beq.n	8013c78 <ucdr_serialize_float+0x118>
 8013bb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013bb4:	702b      	strb	r3, [r5, #0]
 8013bb6:	2e00      	cmp	r6, #0
 8013bb8:	d051      	beq.n	8013c5e <ucdr_serialize_float+0xfe>
 8013bba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013bbe:	2e01      	cmp	r6, #1
 8013bc0:	706b      	strb	r3, [r5, #1]
 8013bc2:	d050      	beq.n	8013c66 <ucdr_serialize_float+0x106>
 8013bc4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013bc8:	2e02      	cmp	r6, #2
 8013bca:	70ab      	strb	r3, [r5, #2]
 8013bcc:	d04f      	beq.n	8013c6e <ucdr_serialize_float+0x10e>
 8013bce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013bd2:	70eb      	strb	r3, [r5, #3]
 8013bd4:	6923      	ldr	r3, [r4, #16]
 8013bd6:	2104      	movs	r1, #4
 8013bd8:	68a2      	ldr	r2, [r4, #8]
 8013bda:	3304      	adds	r3, #4
 8013bdc:	7da0      	ldrb	r0, [r4, #22]
 8013bde:	4442      	add	r2, r8
 8013be0:	7561      	strb	r1, [r4, #21]
 8013be2:	1b9e      	subs	r6, r3, r6
 8013be4:	f080 0001 	eor.w	r0, r0, #1
 8013be8:	60a2      	str	r2, [r4, #8]
 8013bea:	6126      	str	r6, [r4, #16]
 8013bec:	b002      	add	sp, #8
 8013bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bf2:	2104      	movs	r1, #4
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	f000 fa7d 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013bfa:	b1d0      	cbz	r0, 8013c32 <ucdr_serialize_float+0xd2>
 8013bfc:	7d23      	ldrb	r3, [r4, #20]
 8013bfe:	2b01      	cmp	r3, #1
 8013c00:	68a3      	ldr	r3, [r4, #8]
 8013c02:	d01c      	beq.n	8013c3e <ucdr_serialize_float+0xde>
 8013c04:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013c08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013c0c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013c10:	7018      	strb	r0, [r3, #0]
 8013c12:	68a3      	ldr	r3, [r4, #8]
 8013c14:	705a      	strb	r2, [r3, #1]
 8013c16:	68a3      	ldr	r3, [r4, #8]
 8013c18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013c1c:	7099      	strb	r1, [r3, #2]
 8013c1e:	68a3      	ldr	r3, [r4, #8]
 8013c20:	70da      	strb	r2, [r3, #3]
 8013c22:	2104      	movs	r1, #4
 8013c24:	68a2      	ldr	r2, [r4, #8]
 8013c26:	6923      	ldr	r3, [r4, #16]
 8013c28:	440a      	add	r2, r1
 8013c2a:	7561      	strb	r1, [r4, #21]
 8013c2c:	440b      	add	r3, r1
 8013c2e:	60a2      	str	r2, [r4, #8]
 8013c30:	6123      	str	r3, [r4, #16]
 8013c32:	7da0      	ldrb	r0, [r4, #22]
 8013c34:	f080 0001 	eor.w	r0, r0, #1
 8013c38:	b002      	add	sp, #8
 8013c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c3e:	9a01      	ldr	r2, [sp, #4]
 8013c40:	601a      	str	r2, [r3, #0]
 8013c42:	e7ee      	b.n	8013c22 <ucdr_serialize_float+0xc2>
 8013c44:	68a2      	ldr	r2, [r4, #8]
 8013c46:	6923      	ldr	r3, [r4, #16]
 8013c48:	7da0      	ldrb	r0, [r4, #22]
 8013c4a:	1b92      	subs	r2, r2, r6
 8013c4c:	1b9b      	subs	r3, r3, r6
 8013c4e:	7567      	strb	r7, [r4, #21]
 8013c50:	f080 0001 	eor.w	r0, r0, #1
 8013c54:	60a2      	str	r2, [r4, #8]
 8013c56:	6123      	str	r3, [r4, #16]
 8013c58:	b002      	add	sp, #8
 8013c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c5e:	68a3      	ldr	r3, [r4, #8]
 8013c60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013c64:	701a      	strb	r2, [r3, #0]
 8013c66:	68a3      	ldr	r3, [r4, #8]
 8013c68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013c6c:	701a      	strb	r2, [r3, #0]
 8013c6e:	68a3      	ldr	r3, [r4, #8]
 8013c70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013c74:	701a      	strb	r2, [r3, #0]
 8013c76:	e7ad      	b.n	8013bd4 <ucdr_serialize_float+0x74>
 8013c78:	4628      	mov	r0, r5
 8013c7a:	ad01      	add	r5, sp, #4
 8013c7c:	4632      	mov	r2, r6
 8013c7e:	4629      	mov	r1, r5
 8013c80:	f00e fc79 	bl	8022576 <memcpy>
 8013c84:	4642      	mov	r2, r8
 8013c86:	19a9      	adds	r1, r5, r6
 8013c88:	68a0      	ldr	r0, [r4, #8]
 8013c8a:	f00e fc74 	bl	8022576 <memcpy>
 8013c8e:	e7a1      	b.n	8013bd4 <ucdr_serialize_float+0x74>

08013c90 <ucdr_deserialize_float>:
 8013c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c94:	4604      	mov	r4, r0
 8013c96:	460d      	mov	r5, r1
 8013c98:	2104      	movs	r1, #4
 8013c9a:	f000 fa7f 	bl	801419c <ucdr_buffer_alignment>
 8013c9e:	4601      	mov	r1, r0
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013ca6:	f000 fac1 	bl	801422c <ucdr_advance_buffer>
 8013caa:	2104      	movs	r1, #4
 8013cac:	4620      	mov	r0, r4
 8013cae:	f000 fa15 	bl	80140dc <ucdr_check_buffer_available_for>
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d138      	bne.n	8013d28 <ucdr_deserialize_float+0x98>
 8013cb6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013cba:	42b7      	cmp	r7, r6
 8013cbc:	d92f      	bls.n	8013d1e <ucdr_deserialize_float+0x8e>
 8013cbe:	6923      	ldr	r3, [r4, #16]
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	60a7      	str	r7, [r4, #8]
 8013cc4:	1bbf      	subs	r7, r7, r6
 8013cc6:	443b      	add	r3, r7
 8013cc8:	f1c7 0904 	rsb	r9, r7, #4
 8013ccc:	6123      	str	r3, [r4, #16]
 8013cce:	4649      	mov	r1, r9
 8013cd0:	f000 fa10 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	d046      	beq.n	8013d66 <ucdr_deserialize_float+0xd6>
 8013cd8:	7d23      	ldrb	r3, [r4, #20]
 8013cda:	2b01      	cmp	r3, #1
 8013cdc:	d05c      	beq.n	8013d98 <ucdr_deserialize_float+0x108>
 8013cde:	78f3      	ldrb	r3, [r6, #3]
 8013ce0:	702b      	strb	r3, [r5, #0]
 8013ce2:	2f00      	cmp	r7, #0
 8013ce4:	d04c      	beq.n	8013d80 <ucdr_deserialize_float+0xf0>
 8013ce6:	78b3      	ldrb	r3, [r6, #2]
 8013ce8:	2f01      	cmp	r7, #1
 8013cea:	706b      	strb	r3, [r5, #1]
 8013cec:	f105 0302 	add.w	r3, r5, #2
 8013cf0:	d04a      	beq.n	8013d88 <ucdr_deserialize_float+0xf8>
 8013cf2:	7873      	ldrb	r3, [r6, #1]
 8013cf4:	2f02      	cmp	r7, #2
 8013cf6:	70ab      	strb	r3, [r5, #2]
 8013cf8:	f105 0303 	add.w	r3, r5, #3
 8013cfc:	d048      	beq.n	8013d90 <ucdr_deserialize_float+0x100>
 8013cfe:	7833      	ldrb	r3, [r6, #0]
 8013d00:	70eb      	strb	r3, [r5, #3]
 8013d02:	6923      	ldr	r3, [r4, #16]
 8013d04:	2104      	movs	r1, #4
 8013d06:	68a2      	ldr	r2, [r4, #8]
 8013d08:	3304      	adds	r3, #4
 8013d0a:	7da0      	ldrb	r0, [r4, #22]
 8013d0c:	444a      	add	r2, r9
 8013d0e:	7561      	strb	r1, [r4, #21]
 8013d10:	1bdb      	subs	r3, r3, r7
 8013d12:	f080 0001 	eor.w	r0, r0, #1
 8013d16:	60a2      	str	r2, [r4, #8]
 8013d18:	6123      	str	r3, [r4, #16]
 8013d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d1e:	2104      	movs	r1, #4
 8013d20:	4620      	mov	r0, r4
 8013d22:	f000 f9e7 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013d26:	b1b0      	cbz	r0, 8013d56 <ucdr_deserialize_float+0xc6>
 8013d28:	7d23      	ldrb	r3, [r4, #20]
 8013d2a:	2b01      	cmp	r3, #1
 8013d2c:	68a3      	ldr	r3, [r4, #8]
 8013d2e:	d017      	beq.n	8013d60 <ucdr_deserialize_float+0xd0>
 8013d30:	78db      	ldrb	r3, [r3, #3]
 8013d32:	702b      	strb	r3, [r5, #0]
 8013d34:	68a3      	ldr	r3, [r4, #8]
 8013d36:	789b      	ldrb	r3, [r3, #2]
 8013d38:	706b      	strb	r3, [r5, #1]
 8013d3a:	68a3      	ldr	r3, [r4, #8]
 8013d3c:	785b      	ldrb	r3, [r3, #1]
 8013d3e:	70ab      	strb	r3, [r5, #2]
 8013d40:	68a3      	ldr	r3, [r4, #8]
 8013d42:	781b      	ldrb	r3, [r3, #0]
 8013d44:	70eb      	strb	r3, [r5, #3]
 8013d46:	2104      	movs	r1, #4
 8013d48:	68a2      	ldr	r2, [r4, #8]
 8013d4a:	6923      	ldr	r3, [r4, #16]
 8013d4c:	440a      	add	r2, r1
 8013d4e:	7561      	strb	r1, [r4, #21]
 8013d50:	440b      	add	r3, r1
 8013d52:	60a2      	str	r2, [r4, #8]
 8013d54:	6123      	str	r3, [r4, #16]
 8013d56:	7da0      	ldrb	r0, [r4, #22]
 8013d58:	f080 0001 	eor.w	r0, r0, #1
 8013d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	602b      	str	r3, [r5, #0]
 8013d64:	e7ef      	b.n	8013d46 <ucdr_deserialize_float+0xb6>
 8013d66:	68a2      	ldr	r2, [r4, #8]
 8013d68:	6923      	ldr	r3, [r4, #16]
 8013d6a:	1bd2      	subs	r2, r2, r7
 8013d6c:	7da0      	ldrb	r0, [r4, #22]
 8013d6e:	1bdb      	subs	r3, r3, r7
 8013d70:	f884 8015 	strb.w	r8, [r4, #21]
 8013d74:	f080 0001 	eor.w	r0, r0, #1
 8013d78:	60a2      	str	r2, [r4, #8]
 8013d7a:	6123      	str	r3, [r4, #16]
 8013d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d80:	68a3      	ldr	r3, [r4, #8]
 8013d82:	789b      	ldrb	r3, [r3, #2]
 8013d84:	706b      	strb	r3, [r5, #1]
 8013d86:	1cab      	adds	r3, r5, #2
 8013d88:	68a2      	ldr	r2, [r4, #8]
 8013d8a:	7852      	ldrb	r2, [r2, #1]
 8013d8c:	f803 2b01 	strb.w	r2, [r3], #1
 8013d90:	68a2      	ldr	r2, [r4, #8]
 8013d92:	7812      	ldrb	r2, [r2, #0]
 8013d94:	701a      	strb	r2, [r3, #0]
 8013d96:	e7b4      	b.n	8013d02 <ucdr_deserialize_float+0x72>
 8013d98:	4631      	mov	r1, r6
 8013d9a:	463a      	mov	r2, r7
 8013d9c:	4628      	mov	r0, r5
 8013d9e:	f00e fbea 	bl	8022576 <memcpy>
 8013da2:	464a      	mov	r2, r9
 8013da4:	19e8      	adds	r0, r5, r7
 8013da6:	68a1      	ldr	r1, [r4, #8]
 8013da8:	f00e fbe5 	bl	8022576 <memcpy>
 8013dac:	e7a9      	b.n	8013d02 <ucdr_deserialize_float+0x72>
 8013dae:	bf00      	nop

08013db0 <ucdr_serialize_double>:
 8013db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db4:	4604      	mov	r4, r0
 8013db6:	b082      	sub	sp, #8
 8013db8:	2108      	movs	r1, #8
 8013dba:	ed8d 0b00 	vstr	d0, [sp]
 8013dbe:	f000 f9ed 	bl	801419c <ucdr_buffer_alignment>
 8013dc2:	4601      	mov	r1, r0
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	7d67      	ldrb	r7, [r4, #21]
 8013dc8:	f000 fa30 	bl	801422c <ucdr_advance_buffer>
 8013dcc:	2108      	movs	r1, #8
 8013dce:	4620      	mov	r0, r4
 8013dd0:	f000 f984 	bl	80140dc <ucdr_check_buffer_available_for>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d14e      	bne.n	8013e76 <ucdr_serialize_double+0xc6>
 8013dd8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013ddc:	42ab      	cmp	r3, r5
 8013dde:	d945      	bls.n	8013e6c <ucdr_serialize_double+0xbc>
 8013de0:	1b5e      	subs	r6, r3, r5
 8013de2:	60a3      	str	r3, [r4, #8]
 8013de4:	6923      	ldr	r3, [r4, #16]
 8013de6:	4620      	mov	r0, r4
 8013de8:	f1c6 0808 	rsb	r8, r6, #8
 8013dec:	4433      	add	r3, r6
 8013dee:	4641      	mov	r1, r8
 8013df0:	6123      	str	r3, [r4, #16]
 8013df2:	f000 f97f 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d074      	beq.n	8013ee4 <ucdr_serialize_double+0x134>
 8013dfa:	7d23      	ldrb	r3, [r4, #20]
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	f000 809b 	beq.w	8013f38 <ucdr_serialize_double+0x188>
 8013e02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e06:	702b      	strb	r3, [r5, #0]
 8013e08:	2e00      	cmp	r6, #0
 8013e0a:	d078      	beq.n	8013efe <ucdr_serialize_double+0x14e>
 8013e0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013e10:	2e01      	cmp	r6, #1
 8013e12:	706b      	strb	r3, [r5, #1]
 8013e14:	d077      	beq.n	8013f06 <ucdr_serialize_double+0x156>
 8013e16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013e1a:	2e02      	cmp	r6, #2
 8013e1c:	70ab      	strb	r3, [r5, #2]
 8013e1e:	d076      	beq.n	8013f0e <ucdr_serialize_double+0x15e>
 8013e20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013e24:	2e03      	cmp	r6, #3
 8013e26:	70eb      	strb	r3, [r5, #3]
 8013e28:	d075      	beq.n	8013f16 <ucdr_serialize_double+0x166>
 8013e2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013e2e:	2e04      	cmp	r6, #4
 8013e30:	712b      	strb	r3, [r5, #4]
 8013e32:	d074      	beq.n	8013f1e <ucdr_serialize_double+0x16e>
 8013e34:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013e38:	2e05      	cmp	r6, #5
 8013e3a:	716b      	strb	r3, [r5, #5]
 8013e3c:	d073      	beq.n	8013f26 <ucdr_serialize_double+0x176>
 8013e3e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013e42:	2e06      	cmp	r6, #6
 8013e44:	71ab      	strb	r3, [r5, #6]
 8013e46:	d072      	beq.n	8013f2e <ucdr_serialize_double+0x17e>
 8013e48:	f89d 3000 	ldrb.w	r3, [sp]
 8013e4c:	71eb      	strb	r3, [r5, #7]
 8013e4e:	6923      	ldr	r3, [r4, #16]
 8013e50:	2108      	movs	r1, #8
 8013e52:	68a2      	ldr	r2, [r4, #8]
 8013e54:	3308      	adds	r3, #8
 8013e56:	7da0      	ldrb	r0, [r4, #22]
 8013e58:	4442      	add	r2, r8
 8013e5a:	7561      	strb	r1, [r4, #21]
 8013e5c:	1b9e      	subs	r6, r3, r6
 8013e5e:	f080 0001 	eor.w	r0, r0, #1
 8013e62:	60a2      	str	r2, [r4, #8]
 8013e64:	6126      	str	r6, [r4, #16]
 8013e66:	b002      	add	sp, #8
 8013e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e6c:	2108      	movs	r1, #8
 8013e6e:	4620      	mov	r0, r4
 8013e70:	f000 f940 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013e74:	b350      	cbz	r0, 8013ecc <ucdr_serialize_double+0x11c>
 8013e76:	7d23      	ldrb	r3, [r4, #20]
 8013e78:	2b01      	cmp	r3, #1
 8013e7a:	d02d      	beq.n	8013ed8 <ucdr_serialize_double+0x128>
 8013e7c:	68a3      	ldr	r3, [r4, #8]
 8013e7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013e82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013e86:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013e8a:	7018      	strb	r0, [r3, #0]
 8013e8c:	68a3      	ldr	r3, [r4, #8]
 8013e8e:	705a      	strb	r2, [r3, #1]
 8013e90:	68a3      	ldr	r3, [r4, #8]
 8013e92:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013e96:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013e9a:	7099      	strb	r1, [r3, #2]
 8013e9c:	68a3      	ldr	r3, [r4, #8]
 8013e9e:	70da      	strb	r2, [r3, #3]
 8013ea0:	68a3      	ldr	r3, [r4, #8]
 8013ea2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013ea6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013eaa:	7118      	strb	r0, [r3, #4]
 8013eac:	68a3      	ldr	r3, [r4, #8]
 8013eae:	715a      	strb	r2, [r3, #5]
 8013eb0:	68a3      	ldr	r3, [r4, #8]
 8013eb2:	f89d 2000 	ldrb.w	r2, [sp]
 8013eb6:	7199      	strb	r1, [r3, #6]
 8013eb8:	68a3      	ldr	r3, [r4, #8]
 8013eba:	71da      	strb	r2, [r3, #7]
 8013ebc:	2108      	movs	r1, #8
 8013ebe:	68a2      	ldr	r2, [r4, #8]
 8013ec0:	6923      	ldr	r3, [r4, #16]
 8013ec2:	440a      	add	r2, r1
 8013ec4:	7561      	strb	r1, [r4, #21]
 8013ec6:	440b      	add	r3, r1
 8013ec8:	60a2      	str	r2, [r4, #8]
 8013eca:	6123      	str	r3, [r4, #16]
 8013ecc:	7da0      	ldrb	r0, [r4, #22]
 8013ece:	f080 0001 	eor.w	r0, r0, #1
 8013ed2:	b002      	add	sp, #8
 8013ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ed8:	466b      	mov	r3, sp
 8013eda:	68a2      	ldr	r2, [r4, #8]
 8013edc:	cb03      	ldmia	r3!, {r0, r1}
 8013ede:	6010      	str	r0, [r2, #0]
 8013ee0:	6051      	str	r1, [r2, #4]
 8013ee2:	e7eb      	b.n	8013ebc <ucdr_serialize_double+0x10c>
 8013ee4:	68a2      	ldr	r2, [r4, #8]
 8013ee6:	6923      	ldr	r3, [r4, #16]
 8013ee8:	7da0      	ldrb	r0, [r4, #22]
 8013eea:	1b92      	subs	r2, r2, r6
 8013eec:	1b9b      	subs	r3, r3, r6
 8013eee:	7567      	strb	r7, [r4, #21]
 8013ef0:	f080 0001 	eor.w	r0, r0, #1
 8013ef4:	60a2      	str	r2, [r4, #8]
 8013ef6:	6123      	str	r3, [r4, #16]
 8013ef8:	b002      	add	sp, #8
 8013efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013efe:	68a3      	ldr	r3, [r4, #8]
 8013f00:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f04:	701a      	strb	r2, [r3, #0]
 8013f06:	68a3      	ldr	r3, [r4, #8]
 8013f08:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013f0c:	701a      	strb	r2, [r3, #0]
 8013f0e:	68a3      	ldr	r3, [r4, #8]
 8013f10:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013f14:	701a      	strb	r2, [r3, #0]
 8013f16:	68a3      	ldr	r3, [r4, #8]
 8013f18:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013f1c:	701a      	strb	r2, [r3, #0]
 8013f1e:	68a3      	ldr	r3, [r4, #8]
 8013f20:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013f24:	701a      	strb	r2, [r3, #0]
 8013f26:	68a3      	ldr	r3, [r4, #8]
 8013f28:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013f2c:	701a      	strb	r2, [r3, #0]
 8013f2e:	68a3      	ldr	r3, [r4, #8]
 8013f30:	f89d 2000 	ldrb.w	r2, [sp]
 8013f34:	701a      	strb	r2, [r3, #0]
 8013f36:	e78a      	b.n	8013e4e <ucdr_serialize_double+0x9e>
 8013f38:	4628      	mov	r0, r5
 8013f3a:	466d      	mov	r5, sp
 8013f3c:	4632      	mov	r2, r6
 8013f3e:	4629      	mov	r1, r5
 8013f40:	f00e fb19 	bl	8022576 <memcpy>
 8013f44:	4642      	mov	r2, r8
 8013f46:	19a9      	adds	r1, r5, r6
 8013f48:	68a0      	ldr	r0, [r4, #8]
 8013f4a:	f00e fb14 	bl	8022576 <memcpy>
 8013f4e:	e77e      	b.n	8013e4e <ucdr_serialize_double+0x9e>

08013f50 <ucdr_deserialize_double>:
 8013f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f54:	4604      	mov	r4, r0
 8013f56:	460d      	mov	r5, r1
 8013f58:	2108      	movs	r1, #8
 8013f5a:	f000 f91f 	bl	801419c <ucdr_buffer_alignment>
 8013f5e:	4601      	mov	r1, r0
 8013f60:	4620      	mov	r0, r4
 8013f62:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013f66:	f000 f961 	bl	801422c <ucdr_advance_buffer>
 8013f6a:	2108      	movs	r1, #8
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f000 f8b5 	bl	80140dc <ucdr_check_buffer_available_for>
 8013f72:	2800      	cmp	r0, #0
 8013f74:	d151      	bne.n	801401a <ucdr_deserialize_double+0xca>
 8013f76:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013f7a:	42be      	cmp	r6, r7
 8013f7c:	d948      	bls.n	8014010 <ucdr_deserialize_double+0xc0>
 8013f7e:	6923      	ldr	r3, [r4, #16]
 8013f80:	4620      	mov	r0, r4
 8013f82:	60a6      	str	r6, [r4, #8]
 8013f84:	1bf6      	subs	r6, r6, r7
 8013f86:	4433      	add	r3, r6
 8013f88:	f1c6 0908 	rsb	r9, r6, #8
 8013f8c:	6123      	str	r3, [r4, #16]
 8013f8e:	4649      	mov	r1, r9
 8013f90:	f000 f8b0 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8013f94:	2800      	cmp	r0, #0
 8013f96:	d06d      	beq.n	8014074 <ucdr_deserialize_double+0x124>
 8013f98:	7d23      	ldrb	r3, [r4, #20]
 8013f9a:	2b01      	cmp	r3, #1
 8013f9c:	f000 8093 	beq.w	80140c6 <ucdr_deserialize_double+0x176>
 8013fa0:	79fb      	ldrb	r3, [r7, #7]
 8013fa2:	702b      	strb	r3, [r5, #0]
 8013fa4:	2e00      	cmp	r6, #0
 8013fa6:	d072      	beq.n	801408e <ucdr_deserialize_double+0x13e>
 8013fa8:	79bb      	ldrb	r3, [r7, #6]
 8013faa:	2e01      	cmp	r6, #1
 8013fac:	706b      	strb	r3, [r5, #1]
 8013fae:	f105 0302 	add.w	r3, r5, #2
 8013fb2:	d070      	beq.n	8014096 <ucdr_deserialize_double+0x146>
 8013fb4:	797b      	ldrb	r3, [r7, #5]
 8013fb6:	2e02      	cmp	r6, #2
 8013fb8:	70ab      	strb	r3, [r5, #2]
 8013fba:	f105 0303 	add.w	r3, r5, #3
 8013fbe:	d06e      	beq.n	801409e <ucdr_deserialize_double+0x14e>
 8013fc0:	793b      	ldrb	r3, [r7, #4]
 8013fc2:	2e03      	cmp	r6, #3
 8013fc4:	70eb      	strb	r3, [r5, #3]
 8013fc6:	f105 0304 	add.w	r3, r5, #4
 8013fca:	d06c      	beq.n	80140a6 <ucdr_deserialize_double+0x156>
 8013fcc:	78fb      	ldrb	r3, [r7, #3]
 8013fce:	2e04      	cmp	r6, #4
 8013fd0:	712b      	strb	r3, [r5, #4]
 8013fd2:	f105 0305 	add.w	r3, r5, #5
 8013fd6:	d06a      	beq.n	80140ae <ucdr_deserialize_double+0x15e>
 8013fd8:	78bb      	ldrb	r3, [r7, #2]
 8013fda:	2e05      	cmp	r6, #5
 8013fdc:	716b      	strb	r3, [r5, #5]
 8013fde:	f105 0306 	add.w	r3, r5, #6
 8013fe2:	d068      	beq.n	80140b6 <ucdr_deserialize_double+0x166>
 8013fe4:	787b      	ldrb	r3, [r7, #1]
 8013fe6:	2e06      	cmp	r6, #6
 8013fe8:	71ab      	strb	r3, [r5, #6]
 8013fea:	f105 0307 	add.w	r3, r5, #7
 8013fee:	d066      	beq.n	80140be <ucdr_deserialize_double+0x16e>
 8013ff0:	783b      	ldrb	r3, [r7, #0]
 8013ff2:	71eb      	strb	r3, [r5, #7]
 8013ff4:	6923      	ldr	r3, [r4, #16]
 8013ff6:	2108      	movs	r1, #8
 8013ff8:	68a2      	ldr	r2, [r4, #8]
 8013ffa:	3308      	adds	r3, #8
 8013ffc:	7da0      	ldrb	r0, [r4, #22]
 8013ffe:	444a      	add	r2, r9
 8014000:	7561      	strb	r1, [r4, #21]
 8014002:	1b9e      	subs	r6, r3, r6
 8014004:	f080 0001 	eor.w	r0, r0, #1
 8014008:	60a2      	str	r2, [r4, #8]
 801400a:	6126      	str	r6, [r4, #16]
 801400c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014010:	2108      	movs	r1, #8
 8014012:	4620      	mov	r0, r4
 8014014:	f000 f86e 	bl	80140f4 <ucdr_check_final_buffer_behavior>
 8014018:	b310      	cbz	r0, 8014060 <ucdr_deserialize_double+0x110>
 801401a:	7d23      	ldrb	r3, [r4, #20]
 801401c:	2b01      	cmp	r3, #1
 801401e:	68a3      	ldr	r3, [r4, #8]
 8014020:	d023      	beq.n	801406a <ucdr_deserialize_double+0x11a>
 8014022:	79db      	ldrb	r3, [r3, #7]
 8014024:	702b      	strb	r3, [r5, #0]
 8014026:	68a3      	ldr	r3, [r4, #8]
 8014028:	799b      	ldrb	r3, [r3, #6]
 801402a:	706b      	strb	r3, [r5, #1]
 801402c:	68a3      	ldr	r3, [r4, #8]
 801402e:	795b      	ldrb	r3, [r3, #5]
 8014030:	70ab      	strb	r3, [r5, #2]
 8014032:	68a3      	ldr	r3, [r4, #8]
 8014034:	791b      	ldrb	r3, [r3, #4]
 8014036:	70eb      	strb	r3, [r5, #3]
 8014038:	68a3      	ldr	r3, [r4, #8]
 801403a:	78db      	ldrb	r3, [r3, #3]
 801403c:	712b      	strb	r3, [r5, #4]
 801403e:	68a3      	ldr	r3, [r4, #8]
 8014040:	789b      	ldrb	r3, [r3, #2]
 8014042:	716b      	strb	r3, [r5, #5]
 8014044:	68a3      	ldr	r3, [r4, #8]
 8014046:	785b      	ldrb	r3, [r3, #1]
 8014048:	71ab      	strb	r3, [r5, #6]
 801404a:	68a3      	ldr	r3, [r4, #8]
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	71eb      	strb	r3, [r5, #7]
 8014050:	2108      	movs	r1, #8
 8014052:	68a2      	ldr	r2, [r4, #8]
 8014054:	6923      	ldr	r3, [r4, #16]
 8014056:	440a      	add	r2, r1
 8014058:	7561      	strb	r1, [r4, #21]
 801405a:	440b      	add	r3, r1
 801405c:	60a2      	str	r2, [r4, #8]
 801405e:	6123      	str	r3, [r4, #16]
 8014060:	7da0      	ldrb	r0, [r4, #22]
 8014062:	f080 0001 	eor.w	r0, r0, #1
 8014066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801406a:	681a      	ldr	r2, [r3, #0]
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	602a      	str	r2, [r5, #0]
 8014070:	606b      	str	r3, [r5, #4]
 8014072:	e7ed      	b.n	8014050 <ucdr_deserialize_double+0x100>
 8014074:	68a2      	ldr	r2, [r4, #8]
 8014076:	6923      	ldr	r3, [r4, #16]
 8014078:	1b92      	subs	r2, r2, r6
 801407a:	7da0      	ldrb	r0, [r4, #22]
 801407c:	1b9b      	subs	r3, r3, r6
 801407e:	f884 8015 	strb.w	r8, [r4, #21]
 8014082:	f080 0001 	eor.w	r0, r0, #1
 8014086:	60a2      	str	r2, [r4, #8]
 8014088:	6123      	str	r3, [r4, #16]
 801408a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801408e:	68a3      	ldr	r3, [r4, #8]
 8014090:	799b      	ldrb	r3, [r3, #6]
 8014092:	706b      	strb	r3, [r5, #1]
 8014094:	1cab      	adds	r3, r5, #2
 8014096:	68a2      	ldr	r2, [r4, #8]
 8014098:	7952      	ldrb	r2, [r2, #5]
 801409a:	f803 2b01 	strb.w	r2, [r3], #1
 801409e:	68a2      	ldr	r2, [r4, #8]
 80140a0:	7912      	ldrb	r2, [r2, #4]
 80140a2:	f803 2b01 	strb.w	r2, [r3], #1
 80140a6:	68a2      	ldr	r2, [r4, #8]
 80140a8:	78d2      	ldrb	r2, [r2, #3]
 80140aa:	f803 2b01 	strb.w	r2, [r3], #1
 80140ae:	68a2      	ldr	r2, [r4, #8]
 80140b0:	7892      	ldrb	r2, [r2, #2]
 80140b2:	f803 2b01 	strb.w	r2, [r3], #1
 80140b6:	68a2      	ldr	r2, [r4, #8]
 80140b8:	7852      	ldrb	r2, [r2, #1]
 80140ba:	f803 2b01 	strb.w	r2, [r3], #1
 80140be:	68a2      	ldr	r2, [r4, #8]
 80140c0:	7812      	ldrb	r2, [r2, #0]
 80140c2:	701a      	strb	r2, [r3, #0]
 80140c4:	e796      	b.n	8013ff4 <ucdr_deserialize_double+0xa4>
 80140c6:	4639      	mov	r1, r7
 80140c8:	4632      	mov	r2, r6
 80140ca:	4628      	mov	r0, r5
 80140cc:	f00e fa53 	bl	8022576 <memcpy>
 80140d0:	464a      	mov	r2, r9
 80140d2:	19a8      	adds	r0, r5, r6
 80140d4:	68a1      	ldr	r1, [r4, #8]
 80140d6:	f00e fa4e 	bl	8022576 <memcpy>
 80140da:	e78b      	b.n	8013ff4 <ucdr_deserialize_double+0xa4>

080140dc <ucdr_check_buffer_available_for>:
 80140dc:	7d83      	ldrb	r3, [r0, #22]
 80140de:	b93b      	cbnz	r3, 80140f0 <ucdr_check_buffer_available_for+0x14>
 80140e0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80140e4:	4419      	add	r1, r3
 80140e6:	4288      	cmp	r0, r1
 80140e8:	bf34      	ite	cc
 80140ea:	2000      	movcc	r0, #0
 80140ec:	2001      	movcs	r0, #1
 80140ee:	4770      	bx	lr
 80140f0:	2000      	movs	r0, #0
 80140f2:	4770      	bx	lr

080140f4 <ucdr_check_final_buffer_behavior>:
 80140f4:	7d83      	ldrb	r3, [r0, #22]
 80140f6:	b943      	cbnz	r3, 801410a <ucdr_check_final_buffer_behavior+0x16>
 80140f8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80140fc:	b510      	push	{r4, lr}
 80140fe:	4291      	cmp	r1, r2
 8014100:	4604      	mov	r4, r0
 8014102:	d205      	bcs.n	8014110 <ucdr_check_final_buffer_behavior+0x1c>
 8014104:	2301      	movs	r3, #1
 8014106:	4618      	mov	r0, r3
 8014108:	bd10      	pop	{r4, pc}
 801410a:	2300      	movs	r3, #0
 801410c:	4618      	mov	r0, r3
 801410e:	4770      	bx	lr
 8014110:	6982      	ldr	r2, [r0, #24]
 8014112:	b13a      	cbz	r2, 8014124 <ucdr_check_final_buffer_behavior+0x30>
 8014114:	69c1      	ldr	r1, [r0, #28]
 8014116:	4790      	blx	r2
 8014118:	f080 0301 	eor.w	r3, r0, #1
 801411c:	75a0      	strb	r0, [r4, #22]
 801411e:	b2db      	uxtb	r3, r3
 8014120:	4618      	mov	r0, r3
 8014122:	bd10      	pop	{r4, pc}
 8014124:	2001      	movs	r0, #1
 8014126:	75a0      	strb	r0, [r4, #22]
 8014128:	e7fa      	b.n	8014120 <ucdr_check_final_buffer_behavior+0x2c>
 801412a:	bf00      	nop

0801412c <ucdr_set_on_full_buffer_callback>:
 801412c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8014130:	4770      	bx	lr
 8014132:	bf00      	nop

08014134 <ucdr_init_buffer_origin_offset_endian>:
 8014134:	b410      	push	{r4}
 8014136:	9c01      	ldr	r4, [sp, #4]
 8014138:	440a      	add	r2, r1
 801413a:	6001      	str	r1, [r0, #0]
 801413c:	6042      	str	r2, [r0, #4]
 801413e:	190a      	adds	r2, r1, r4
 8014140:	441c      	add	r4, r3
 8014142:	6082      	str	r2, [r0, #8]
 8014144:	2200      	movs	r2, #0
 8014146:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801414a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801414e:	7542      	strb	r2, [r0, #21]
 8014150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014154:	7582      	strb	r2, [r0, #22]
 8014156:	7503      	strb	r3, [r0, #20]
 8014158:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801415c:	4770      	bx	lr
 801415e:	bf00      	nop

08014160 <ucdr_init_buffer_origin_offset>:
 8014160:	b510      	push	{r4, lr}
 8014162:	b082      	sub	sp, #8
 8014164:	9c04      	ldr	r4, [sp, #16]
 8014166:	9400      	str	r4, [sp, #0]
 8014168:	2401      	movs	r4, #1
 801416a:	9401      	str	r4, [sp, #4]
 801416c:	f7ff ffe2 	bl	8014134 <ucdr_init_buffer_origin_offset_endian>
 8014170:	b002      	add	sp, #8
 8014172:	bd10      	pop	{r4, pc}

08014174 <ucdr_init_buffer_origin>:
 8014174:	b510      	push	{r4, lr}
 8014176:	2400      	movs	r4, #0
 8014178:	b082      	sub	sp, #8
 801417a:	9400      	str	r4, [sp, #0]
 801417c:	f7ff fff0 	bl	8014160 <ucdr_init_buffer_origin_offset>
 8014180:	b002      	add	sp, #8
 8014182:	bd10      	pop	{r4, pc}

08014184 <ucdr_init_buffer>:
 8014184:	2300      	movs	r3, #0
 8014186:	f7ff bff5 	b.w	8014174 <ucdr_init_buffer_origin>
 801418a:	bf00      	nop

0801418c <ucdr_alignment>:
 801418c:	fbb0 f2f1 	udiv	r2, r0, r1
 8014190:	fb02 0011 	mls	r0, r2, r1, r0
 8014194:	1e4b      	subs	r3, r1, #1
 8014196:	1a08      	subs	r0, r1, r0
 8014198:	4018      	ands	r0, r3
 801419a:	4770      	bx	lr

0801419c <ucdr_buffer_alignment>:
 801419c:	7d43      	ldrb	r3, [r0, #21]
 801419e:	428b      	cmp	r3, r1
 80141a0:	d209      	bcs.n	80141b6 <ucdr_buffer_alignment+0x1a>
 80141a2:	6903      	ldr	r3, [r0, #16]
 80141a4:	1e4a      	subs	r2, r1, #1
 80141a6:	fbb3 f0f1 	udiv	r0, r3, r1
 80141aa:	fb01 3010 	mls	r0, r1, r0, r3
 80141ae:	1a09      	subs	r1, r1, r0
 80141b0:	ea01 0002 	and.w	r0, r1, r2
 80141b4:	4770      	bx	lr
 80141b6:	2000      	movs	r0, #0
 80141b8:	4770      	bx	lr
 80141ba:	bf00      	nop

080141bc <ucdr_align_to>:
 80141bc:	b538      	push	{r3, r4, r5, lr}
 80141be:	4604      	mov	r4, r0
 80141c0:	460d      	mov	r5, r1
 80141c2:	f7ff ffeb 	bl	801419c <ucdr_buffer_alignment>
 80141c6:	68a3      	ldr	r3, [r4, #8]
 80141c8:	7565      	strb	r5, [r4, #21]
 80141ca:	181a      	adds	r2, r3, r0
 80141cc:	6923      	ldr	r3, [r4, #16]
 80141ce:	4418      	add	r0, r3
 80141d0:	6863      	ldr	r3, [r4, #4]
 80141d2:	4293      	cmp	r3, r2
 80141d4:	6120      	str	r0, [r4, #16]
 80141d6:	bf28      	it	cs
 80141d8:	4613      	movcs	r3, r2
 80141da:	60a3      	str	r3, [r4, #8]
 80141dc:	bd38      	pop	{r3, r4, r5, pc}
 80141de:	bf00      	nop

080141e0 <ucdr_buffer_length>:
 80141e0:	6882      	ldr	r2, [r0, #8]
 80141e2:	6800      	ldr	r0, [r0, #0]
 80141e4:	1a10      	subs	r0, r2, r0
 80141e6:	4770      	bx	lr

080141e8 <ucdr_buffer_remaining>:
 80141e8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80141ec:	1a10      	subs	r0, r2, r0
 80141ee:	4770      	bx	lr

080141f0 <ucdr_check_final_buffer_behavior_array>:
 80141f0:	b538      	push	{r3, r4, r5, lr}
 80141f2:	7d83      	ldrb	r3, [r0, #22]
 80141f4:	b9a3      	cbnz	r3, 8014220 <ucdr_check_final_buffer_behavior_array+0x30>
 80141f6:	4604      	mov	r4, r0
 80141f8:	460d      	mov	r5, r1
 80141fa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80141fe:	429a      	cmp	r2, r3
 8014200:	d300      	bcc.n	8014204 <ucdr_check_final_buffer_behavior_array+0x14>
 8014202:	b931      	cbnz	r1, 8014212 <ucdr_check_final_buffer_behavior_array+0x22>
 8014204:	4620      	mov	r0, r4
 8014206:	f7ff ffef 	bl	80141e8 <ucdr_buffer_remaining>
 801420a:	42a8      	cmp	r0, r5
 801420c:	bf28      	it	cs
 801420e:	4628      	movcs	r0, r5
 8014210:	bd38      	pop	{r3, r4, r5, pc}
 8014212:	6983      	ldr	r3, [r0, #24]
 8014214:	b133      	cbz	r3, 8014224 <ucdr_check_final_buffer_behavior_array+0x34>
 8014216:	69c1      	ldr	r1, [r0, #28]
 8014218:	4798      	blx	r3
 801421a:	75a0      	strb	r0, [r4, #22]
 801421c:	2800      	cmp	r0, #0
 801421e:	d0f1      	beq.n	8014204 <ucdr_check_final_buffer_behavior_array+0x14>
 8014220:	2000      	movs	r0, #0
 8014222:	bd38      	pop	{r3, r4, r5, pc}
 8014224:	2301      	movs	r3, #1
 8014226:	7583      	strb	r3, [r0, #22]
 8014228:	e7fa      	b.n	8014220 <ucdr_check_final_buffer_behavior_array+0x30>
 801422a:	bf00      	nop

0801422c <ucdr_advance_buffer>:
 801422c:	b538      	push	{r3, r4, r5, lr}
 801422e:	4604      	mov	r4, r0
 8014230:	460d      	mov	r5, r1
 8014232:	f7ff ff53 	bl	80140dc <ucdr_check_buffer_available_for>
 8014236:	b178      	cbz	r0, 8014258 <ucdr_advance_buffer+0x2c>
 8014238:	6923      	ldr	r3, [r4, #16]
 801423a:	68a2      	ldr	r2, [r4, #8]
 801423c:	442b      	add	r3, r5
 801423e:	442a      	add	r2, r5
 8014240:	6123      	str	r3, [r4, #16]
 8014242:	2301      	movs	r3, #1
 8014244:	60a2      	str	r2, [r4, #8]
 8014246:	7563      	strb	r3, [r4, #21]
 8014248:	bd38      	pop	{r3, r4, r5, pc}
 801424a:	68a2      	ldr	r2, [r4, #8]
 801424c:	1a2d      	subs	r5, r5, r0
 801424e:	6923      	ldr	r3, [r4, #16]
 8014250:	4402      	add	r2, r0
 8014252:	4418      	add	r0, r3
 8014254:	60a2      	str	r2, [r4, #8]
 8014256:	6120      	str	r0, [r4, #16]
 8014258:	4629      	mov	r1, r5
 801425a:	2201      	movs	r2, #1
 801425c:	4620      	mov	r0, r4
 801425e:	f7ff ffc7 	bl	80141f0 <ucdr_check_final_buffer_behavior_array>
 8014262:	2800      	cmp	r0, #0
 8014264:	d1f1      	bne.n	801424a <ucdr_advance_buffer+0x1e>
 8014266:	2301      	movs	r3, #1
 8014268:	7563      	strb	r3, [r4, #21]
 801426a:	bd38      	pop	{r3, r4, r5, pc}

0801426c <rcl_get_zero_initialized_publisher>:
 801426c:	4b01      	ldr	r3, [pc, #4]	@ (8014274 <rcl_get_zero_initialized_publisher+0x8>)
 801426e:	6818      	ldr	r0, [r3, #0]
 8014270:	4770      	bx	lr
 8014272:	bf00      	nop
 8014274:	08024794 	.word	0x08024794

08014278 <rcl_publisher_init>:
 8014278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801427c:	b088      	sub	sp, #32
 801427e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8014280:	2e00      	cmp	r6, #0
 8014282:	d06b      	beq.n	801435c <rcl_publisher_init+0xe4>
 8014284:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 8014288:	4605      	mov	r5, r0
 801428a:	460f      	mov	r7, r1
 801428c:	4690      	mov	r8, r2
 801428e:	4650      	mov	r0, sl
 8014290:	4699      	mov	r9, r3
 8014292:	f001 f915 	bl	80154c0 <rcutils_allocator_is_valid>
 8014296:	f080 0401 	eor.w	r4, r0, #1
 801429a:	b2e4      	uxtb	r4, r4
 801429c:	2c00      	cmp	r4, #0
 801429e:	d15d      	bne.n	801435c <rcl_publisher_init+0xe4>
 80142a0:	2d00      	cmp	r5, #0
 80142a2:	d05b      	beq.n	801435c <rcl_publisher_init+0xe4>
 80142a4:	682b      	ldr	r3, [r5, #0]
 80142a6:	b123      	cbz	r3, 80142b2 <rcl_publisher_init+0x3a>
 80142a8:	2464      	movs	r4, #100	@ 0x64
 80142aa:	4620      	mov	r0, r4
 80142ac:	b008      	add	sp, #32
 80142ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142b2:	4638      	mov	r0, r7
 80142b4:	f007 f848 	bl	801b348 <rcl_node_is_valid>
 80142b8:	2800      	cmp	r0, #0
 80142ba:	d054      	beq.n	8014366 <rcl_publisher_init+0xee>
 80142bc:	f1b8 0f00 	cmp.w	r8, #0
 80142c0:	d04c      	beq.n	801435c <rcl_publisher_init+0xe4>
 80142c2:	fab9 f389 	clz	r3, r9
 80142c6:	095b      	lsrs	r3, r3, #5
 80142c8:	f1b9 0f00 	cmp.w	r9, #0
 80142cc:	d046      	beq.n	801435c <rcl_publisher_init+0xe4>
 80142ce:	aa07      	add	r2, sp, #28
 80142d0:	9307      	str	r3, [sp, #28]
 80142d2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80142d6:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80142da:	9205      	str	r2, [sp, #20]
 80142dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80142e0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80142e4:	4649      	mov	r1, r9
 80142e6:	4638      	mov	r0, r7
 80142e8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80142ec:	f007 f884 	bl	801b3f8 <rcl_node_resolve_name>
 80142f0:	2800      	cmp	r0, #0
 80142f2:	d14f      	bne.n	8014394 <rcl_publisher_init+0x11c>
 80142f4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80142f6:	20c8      	movs	r0, #200	@ 0xc8
 80142f8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80142fa:	4798      	blx	r3
 80142fc:	6028      	str	r0, [r5, #0]
 80142fe:	2800      	cmp	r0, #0
 8014300:	d050      	beq.n	80143a4 <rcl_publisher_init+0x12c>
 8014302:	4638      	mov	r0, r7
 8014304:	f007 f842 	bl	801b38c <rcl_node_get_rmw_handle>
 8014308:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 801430c:	4641      	mov	r1, r8
 801430e:	9a07      	ldr	r2, [sp, #28]
 8014310:	9300      	str	r3, [sp, #0]
 8014312:	4633      	mov	r3, r6
 8014314:	682c      	ldr	r4, [r5, #0]
 8014316:	f001 fa21 	bl	801575c <rmw_create_publisher>
 801431a:	682b      	ldr	r3, [r5, #0]
 801431c:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8014320:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014324:	b370      	cbz	r0, 8014384 <rcl_publisher_init+0x10c>
 8014326:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801432a:	f001 fafb 	bl	8015924 <rmw_publisher_get_actual_qos>
 801432e:	682b      	ldr	r3, [r5, #0]
 8014330:	4604      	mov	r4, r0
 8014332:	b9d0      	cbnz	r0, 801436a <rcl_publisher_init+0xf2>
 8014334:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8014338:	4631      	mov	r1, r6
 801433a:	4618      	mov	r0, r3
 801433c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8014340:	2270      	movs	r2, #112	@ 0x70
 8014342:	f00e f918 	bl	8022576 <memcpy>
 8014346:	683a      	ldr	r2, [r7, #0]
 8014348:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 801434c:	9807      	ldr	r0, [sp, #28]
 801434e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8014350:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014352:	4798      	blx	r3
 8014354:	4620      	mov	r0, r4
 8014356:	b008      	add	sp, #32
 8014358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801435c:	240b      	movs	r4, #11
 801435e:	4620      	mov	r0, r4
 8014360:	b008      	add	sp, #32
 8014362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014366:	24c8      	movs	r4, #200	@ 0xc8
 8014368:	e79f      	b.n	80142aa <rcl_publisher_init+0x32>
 801436a:	b1cb      	cbz	r3, 80143a0 <rcl_publisher_init+0x128>
 801436c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014370:	b142      	cbz	r2, 8014384 <rcl_publisher_init+0x10c>
 8014372:	4638      	mov	r0, r7
 8014374:	f007 f80a 	bl	801b38c <rcl_node_get_rmw_handle>
 8014378:	682b      	ldr	r3, [r5, #0]
 801437a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 801437e:	f001 fae5 	bl	801594c <rmw_destroy_publisher>
 8014382:	682b      	ldr	r3, [r5, #0]
 8014384:	4618      	mov	r0, r3
 8014386:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8014388:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801438a:	2401      	movs	r4, #1
 801438c:	4790      	blx	r2
 801438e:	2300      	movs	r3, #0
 8014390:	602b      	str	r3, [r5, #0]
 8014392:	e7db      	b.n	801434c <rcl_publisher_init+0xd4>
 8014394:	2867      	cmp	r0, #103	@ 0x67
 8014396:	d007      	beq.n	80143a8 <rcl_publisher_init+0x130>
 8014398:	2869      	cmp	r0, #105	@ 0x69
 801439a:	d005      	beq.n	80143a8 <rcl_publisher_init+0x130>
 801439c:	280a      	cmp	r0, #10
 801439e:	d001      	beq.n	80143a4 <rcl_publisher_init+0x12c>
 80143a0:	2401      	movs	r4, #1
 80143a2:	e7d3      	b.n	801434c <rcl_publisher_init+0xd4>
 80143a4:	240a      	movs	r4, #10
 80143a6:	e7d1      	b.n	801434c <rcl_publisher_init+0xd4>
 80143a8:	2467      	movs	r4, #103	@ 0x67
 80143aa:	e7cf      	b.n	801434c <rcl_publisher_init+0xd4>

080143ac <rcl_publisher_get_default_options>:
 80143ac:	b570      	push	{r4, r5, r6, lr}
 80143ae:	4d14      	ldr	r5, [pc, #80]	@ (8014400 <rcl_publisher_get_default_options+0x54>)
 80143b0:	b088      	sub	sp, #32
 80143b2:	4604      	mov	r4, r0
 80143b4:	2250      	movs	r2, #80	@ 0x50
 80143b6:	4913      	ldr	r1, [pc, #76]	@ (8014404 <rcl_publisher_get_default_options+0x58>)
 80143b8:	4628      	mov	r0, r5
 80143ba:	f00e f8dc 	bl	8022576 <memcpy>
 80143be:	a802      	add	r0, sp, #8
 80143c0:	f001 f870 	bl	80154a4 <rcutils_get_default_allocator>
 80143c4:	f10d 0c08 	add.w	ip, sp, #8
 80143c8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80143cc:	466e      	mov	r6, sp
 80143ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80143d6:	f8dc 3000 	ldr.w	r3, [ip]
 80143da:	4630      	mov	r0, r6
 80143dc:	f8ce 3000 	str.w	r3, [lr]
 80143e0:	f001 f8fa 	bl	80155d8 <rmw_get_default_publisher_options>
 80143e4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80143e8:	2270      	movs	r2, #112	@ 0x70
 80143ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80143ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80143f2:	4629      	mov	r1, r5
 80143f4:	4620      	mov	r0, r4
 80143f6:	f00e f8be 	bl	8022576 <memcpy>
 80143fa:	4620      	mov	r0, r4
 80143fc:	b008      	add	sp, #32
 80143fe:	bd70      	pop	{r4, r5, r6, pc}
 8014400:	240649e0 	.word	0x240649e0
 8014404:	08024798 	.word	0x08024798

08014408 <rcl_publish>:
 8014408:	b1f8      	cbz	r0, 801444a <rcl_publish+0x42>
 801440a:	6803      	ldr	r3, [r0, #0]
 801440c:	b570      	push	{r4, r5, r6, lr}
 801440e:	4604      	mov	r4, r0
 8014410:	b1b3      	cbz	r3, 8014440 <rcl_publish+0x38>
 8014412:	4616      	mov	r6, r2
 8014414:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014418:	b192      	cbz	r2, 8014440 <rcl_publish+0x38>
 801441a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801441e:	460d      	mov	r5, r1
 8014420:	f006 fbb2 	bl	801ab88 <rcl_context_is_valid>
 8014424:	b160      	cbz	r0, 8014440 <rcl_publish+0x38>
 8014426:	6823      	ldr	r3, [r4, #0]
 8014428:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801442c:	b140      	cbz	r0, 8014440 <rcl_publish+0x38>
 801442e:	b155      	cbz	r5, 8014446 <rcl_publish+0x3e>
 8014430:	4632      	mov	r2, r6
 8014432:	4629      	mov	r1, r5
 8014434:	f001 f932 	bl	801569c <rmw_publish>
 8014438:	3800      	subs	r0, #0
 801443a:	bf18      	it	ne
 801443c:	2001      	movne	r0, #1
 801443e:	bd70      	pop	{r4, r5, r6, pc}
 8014440:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8014444:	bd70      	pop	{r4, r5, r6, pc}
 8014446:	200b      	movs	r0, #11
 8014448:	bd70      	pop	{r4, r5, r6, pc}
 801444a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801444e:	4770      	bx	lr

08014450 <rcl_publisher_is_valid>:
 8014450:	b1a0      	cbz	r0, 801447c <rcl_publisher_is_valid+0x2c>
 8014452:	6803      	ldr	r3, [r0, #0]
 8014454:	b510      	push	{r4, lr}
 8014456:	4604      	mov	r4, r0
 8014458:	b173      	cbz	r3, 8014478 <rcl_publisher_is_valid+0x28>
 801445a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801445e:	b15a      	cbz	r2, 8014478 <rcl_publisher_is_valid+0x28>
 8014460:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014464:	f006 fb90 	bl	801ab88 <rcl_context_is_valid>
 8014468:	b130      	cbz	r0, 8014478 <rcl_publisher_is_valid+0x28>
 801446a:	6823      	ldr	r3, [r4, #0]
 801446c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014470:	3800      	subs	r0, #0
 8014472:	bf18      	it	ne
 8014474:	2001      	movne	r0, #1
 8014476:	bd10      	pop	{r4, pc}
 8014478:	2000      	movs	r0, #0
 801447a:	bd10      	pop	{r4, pc}
 801447c:	2000      	movs	r0, #0
 801447e:	4770      	bx	lr

08014480 <rcl_publisher_is_valid_except_context>:
 8014480:	b130      	cbz	r0, 8014490 <rcl_publisher_is_valid_except_context+0x10>
 8014482:	6800      	ldr	r0, [r0, #0]
 8014484:	b120      	cbz	r0, 8014490 <rcl_publisher_is_valid_except_context+0x10>
 8014486:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801448a:	3800      	subs	r0, #0
 801448c:	bf18      	it	ne
 801448e:	2001      	movne	r0, #1
 8014490:	4770      	bx	lr
 8014492:	bf00      	nop

08014494 <_rclc_check_for_new_data>:
 8014494:	2800      	cmp	r0, #0
 8014496:	d046      	beq.n	8014526 <_rclc_check_for_new_data+0x92>
 8014498:	4603      	mov	r3, r0
 801449a:	b530      	push	{r4, r5, lr}
 801449c:	7802      	ldrb	r2, [r0, #0]
 801449e:	b085      	sub	sp, #20
 80144a0:	2a0a      	cmp	r2, #10
 80144a2:	d842      	bhi.n	801452a <_rclc_check_for_new_data+0x96>
 80144a4:	e8df f002 	tbb	[pc, r2]
 80144a8:	14181212 	.word	0x14181212
 80144ac:	06060614 	.word	0x06060614
 80144b0:	2e1a      	.short	0x2e1a
 80144b2:	16          	.byte	0x16
 80144b3:	00          	.byte	0x00
 80144b4:	6a0a      	ldr	r2, [r1, #32]
 80144b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80144b8:	2000      	movs	r0, #0
 80144ba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80144be:	1a12      	subs	r2, r2, r0
 80144c0:	bf18      	it	ne
 80144c2:	2201      	movne	r2, #1
 80144c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80144c8:	b005      	add	sp, #20
 80144ca:	bd30      	pop	{r4, r5, pc}
 80144cc:	680a      	ldr	r2, [r1, #0]
 80144ce:	e7f2      	b.n	80144b6 <_rclc_check_for_new_data+0x22>
 80144d0:	698a      	ldr	r2, [r1, #24]
 80144d2:	e7f0      	b.n	80144b6 <_rclc_check_for_new_data+0x22>
 80144d4:	688a      	ldr	r2, [r1, #8]
 80144d6:	e7ee      	b.n	80144b6 <_rclc_check_for_new_data+0x22>
 80144d8:	690a      	ldr	r2, [r1, #16]
 80144da:	e7ec      	b.n	80144b6 <_rclc_check_for_new_data+0x22>
 80144dc:	685c      	ldr	r4, [r3, #4]
 80144de:	4608      	mov	r0, r1
 80144e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80144e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144e8:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 80144ec:	f104 0110 	add.w	r1, r4, #16
 80144f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80144f4:	9500      	str	r5, [sp, #0]
 80144f6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80144fa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80144fe:	f008 ff73 	bl	801d3e8 <rcl_action_client_wait_set_get_entities_ready>
 8014502:	e7e1      	b.n	80144c8 <_rclc_check_for_new_data+0x34>
 8014504:	685c      	ldr	r4, [r3, #4]
 8014506:	4608      	mov	r0, r1
 8014508:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 801450c:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 8014510:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8014514:	e9cd 2100 	strd	r2, r1, [sp]
 8014518:	f104 0220 	add.w	r2, r4, #32
 801451c:	f104 0110 	add.w	r1, r4, #16
 8014520:	f009 f97c 	bl	801d81c <rcl_action_server_wait_set_get_entities_ready>
 8014524:	e7d0      	b.n	80144c8 <_rclc_check_for_new_data+0x34>
 8014526:	200b      	movs	r0, #11
 8014528:	4770      	bx	lr
 801452a:	2001      	movs	r0, #1
 801452c:	e7cc      	b.n	80144c8 <_rclc_check_for_new_data+0x34>
 801452e:	bf00      	nop

08014530 <_rclc_take_new_data>:
 8014530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014532:	b09b      	sub	sp, #108	@ 0x6c
 8014534:	2800      	cmp	r0, #0
 8014536:	f000 8088 	beq.w	801464a <_rclc_take_new_data+0x11a>
 801453a:	7803      	ldrb	r3, [r0, #0]
 801453c:	4604      	mov	r4, r0
 801453e:	2b0a      	cmp	r3, #10
 8014540:	f200 8167 	bhi.w	8014812 <_rclc_take_new_data+0x2e2>
 8014544:	e8df f003 	tbb	[pc, r3]
 8014548:	44152d2d 	.word	0x44152d2d
 801454c:	19191944 	.word	0x19191944
 8014550:	065a      	.short	0x065a
 8014552:	15          	.byte	0x15
 8014553:	00          	.byte	0x00
 8014554:	6840      	ldr	r0, [r0, #4]
 8014556:	f890 3020 	ldrb.w	r3, [r0, #32]
 801455a:	2b00      	cmp	r3, #0
 801455c:	f040 80b2 	bne.w	80146c4 <_rclc_take_new_data+0x194>
 8014560:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8014564:	2b00      	cmp	r3, #0
 8014566:	f040 80e4 	bne.w	8014732 <_rclc_take_new_data+0x202>
 801456a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801456e:	2b00      	cmp	r3, #0
 8014570:	d16f      	bne.n	8014652 <_rclc_take_new_data+0x122>
 8014572:	2500      	movs	r5, #0
 8014574:	4628      	mov	r0, r5
 8014576:	b01b      	add	sp, #108	@ 0x6c
 8014578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801457a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801457c:	6a0b      	ldr	r3, [r1, #32]
 801457e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d0f5      	beq.n	8014572 <_rclc_take_new_data+0x42>
 8014586:	6882      	ldr	r2, [r0, #8]
 8014588:	f100 0110 	add.w	r1, r0, #16
 801458c:	6840      	ldr	r0, [r0, #4]
 801458e:	f007 f9c9 	bl	801b924 <rcl_take_request>
 8014592:	4605      	mov	r5, r0
 8014594:	2800      	cmp	r0, #0
 8014596:	d0ec      	beq.n	8014572 <_rclc_take_new_data+0x42>
 8014598:	f240 2359 	movw	r3, #601	@ 0x259
 801459c:	4298      	cmp	r0, r3
 801459e:	d013      	beq.n	80145c8 <_rclc_take_new_data+0x98>
 80145a0:	e029      	b.n	80145f6 <_rclc_take_new_data+0xc6>
 80145a2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80145a4:	680b      	ldr	r3, [r1, #0]
 80145a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d0e1      	beq.n	8014572 <_rclc_take_new_data+0x42>
 80145ae:	2300      	movs	r3, #0
 80145b0:	aa0a      	add	r2, sp, #40	@ 0x28
 80145b2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80145b6:	f007 faf9 	bl	801bbac <rcl_take>
 80145ba:	4605      	mov	r5, r0
 80145bc:	2800      	cmp	r0, #0
 80145be:	d0d9      	beq.n	8014574 <_rclc_take_new_data+0x44>
 80145c0:	f240 1391 	movw	r3, #401	@ 0x191
 80145c4:	4298      	cmp	r0, r3
 80145c6:	d116      	bne.n	80145f6 <_rclc_take_new_data+0xc6>
 80145c8:	2300      	movs	r3, #0
 80145ca:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80145ce:	e7d1      	b.n	8014574 <_rclc_take_new_data+0x44>
 80145d0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80145d2:	698b      	ldr	r3, [r1, #24]
 80145d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d0ca      	beq.n	8014572 <_rclc_take_new_data+0x42>
 80145dc:	6882      	ldr	r2, [r0, #8]
 80145de:	f100 0110 	add.w	r1, r0, #16
 80145e2:	6840      	ldr	r0, [r0, #4]
 80145e4:	f006 fa60 	bl	801aaa8 <rcl_take_response>
 80145e8:	4605      	mov	r5, r0
 80145ea:	2800      	cmp	r0, #0
 80145ec:	d0c1      	beq.n	8014572 <_rclc_take_new_data+0x42>
 80145ee:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80145f2:	4298      	cmp	r0, r3
 80145f4:	d0be      	beq.n	8014574 <_rclc_take_new_data+0x44>
 80145f6:	f000 ff87 	bl	8015508 <rcutils_reset_error>
 80145fa:	e7bb      	b.n	8014574 <_rclc_take_new_data+0x44>
 80145fc:	6840      	ldr	r0, [r0, #4]
 80145fe:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8014602:	2b00      	cmp	r3, #0
 8014604:	d17d      	bne.n	8014702 <_rclc_take_new_data+0x1d2>
 8014606:	69c3      	ldr	r3, [r0, #28]
 8014608:	b11b      	cbz	r3, 8014612 <_rclc_take_new_data+0xe2>
 801460a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801460e:	2b00      	cmp	r3, #0
 8014610:	d144      	bne.n	801469c <_rclc_take_new_data+0x16c>
 8014612:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014616:	2b00      	cmp	r3, #0
 8014618:	f040 80ac 	bne.w	8014774 <_rclc_take_new_data+0x244>
 801461c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8014620:	2b00      	cmp	r3, #0
 8014622:	d0a6      	beq.n	8014572 <_rclc_take_new_data+0x42>
 8014624:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8014626:	a90a      	add	r1, sp, #40	@ 0x28
 8014628:	3010      	adds	r0, #16
 801462a:	f008 fdb5 	bl	801d198 <rcl_action_take_result_response>
 801462e:	4605      	mov	r5, r0
 8014630:	2800      	cmp	r0, #0
 8014632:	d1e0      	bne.n	80145f6 <_rclc_take_new_data+0xc6>
 8014634:	6860      	ldr	r0, [r4, #4]
 8014636:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801463a:	f009 fa1f 	bl	801da7c <rclc_action_find_handle_by_result_request_sequence_number>
 801463e:	2800      	cmp	r0, #0
 8014640:	d098      	beq.n	8014574 <_rclc_take_new_data+0x44>
 8014642:	2301      	movs	r3, #1
 8014644:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8014648:	e794      	b.n	8014574 <_rclc_take_new_data+0x44>
 801464a:	250b      	movs	r5, #11
 801464c:	4628      	mov	r0, r5
 801464e:	b01b      	add	sp, #108	@ 0x6c
 8014650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014652:	ae04      	add	r6, sp, #16
 8014654:	3010      	adds	r0, #16
 8014656:	aa0a      	add	r2, sp, #40	@ 0x28
 8014658:	4631      	mov	r1, r6
 801465a:	f009 f813 	bl	801d684 <rcl_action_take_cancel_request>
 801465e:	4605      	mov	r5, r0
 8014660:	2800      	cmp	r0, #0
 8014662:	d1c8      	bne.n	80145f6 <_rclc_take_new_data+0xc6>
 8014664:	a90a      	add	r1, sp, #40	@ 0x28
 8014666:	6860      	ldr	r0, [r4, #4]
 8014668:	f009 f9c8 	bl	801d9fc <rclc_action_find_goal_handle_by_uuid>
 801466c:	4607      	mov	r7, r0
 801466e:	2800      	cmp	r0, #0
 8014670:	f000 80bb 	beq.w	80147ea <_rclc_take_new_data+0x2ba>
 8014674:	2101      	movs	r1, #1
 8014676:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801467a:	f009 f949 	bl	801d910 <rcl_action_transition_goal_state>
 801467e:	2803      	cmp	r0, #3
 8014680:	4684      	mov	ip, r0
 8014682:	f040 80a7 	bne.w	80147d4 <_rclc_take_new_data+0x2a4>
 8014686:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 801468a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801468c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801468e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014692:	e884 0003 	stmia.w	r4, {r0, r1}
 8014696:	f887 c008 	strb.w	ip, [r7, #8]
 801469a:	e76b      	b.n	8014574 <_rclc_take_new_data+0x44>
 801469c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801469e:	3010      	adds	r0, #16
 80146a0:	f008 fdfa 	bl	801d298 <rcl_action_take_feedback>
 80146a4:	4605      	mov	r5, r0
 80146a6:	2800      	cmp	r0, #0
 80146a8:	d1a5      	bne.n	80145f6 <_rclc_take_new_data+0xc6>
 80146aa:	6860      	ldr	r0, [r4, #4]
 80146ac:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80146ae:	f009 f9a5 	bl	801d9fc <rclc_action_find_goal_handle_by_uuid>
 80146b2:	4603      	mov	r3, r0
 80146b4:	2800      	cmp	r0, #0
 80146b6:	f000 80a3 	beq.w	8014800 <_rclc_take_new_data+0x2d0>
 80146ba:	2201      	movs	r2, #1
 80146bc:	6860      	ldr	r0, [r4, #4]
 80146be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80146c2:	e7a6      	b.n	8014612 <_rclc_take_new_data+0xe2>
 80146c4:	f009 f974 	bl	801d9b0 <rclc_action_take_goal_handle>
 80146c8:	4606      	mov	r6, r0
 80146ca:	6860      	ldr	r0, [r4, #4]
 80146cc:	2e00      	cmp	r6, #0
 80146ce:	f43f af47 	beq.w	8014560 <_rclc_take_new_data+0x30>
 80146d2:	6070      	str	r0, [r6, #4]
 80146d4:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80146d8:	69f2      	ldr	r2, [r6, #28]
 80146da:	3010      	adds	r0, #16
 80146dc:	f008 ff1a 	bl	801d514 <rcl_action_take_goal_request>
 80146e0:	4605      	mov	r5, r0
 80146e2:	2800      	cmp	r0, #0
 80146e4:	f040 808e 	bne.w	8014804 <_rclc_take_new_data+0x2d4>
 80146e8:	69f7      	ldr	r7, [r6, #28]
 80146ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80146ec:	7235      	strb	r5, [r6, #8]
 80146ee:	f8c6 0009 	str.w	r0, [r6, #9]
 80146f2:	f8c6 100d 	str.w	r1, [r6, #13]
 80146f6:	6860      	ldr	r0, [r4, #4]
 80146f8:	f8c6 2011 	str.w	r2, [r6, #17]
 80146fc:	f8c6 3015 	str.w	r3, [r6, #21]
 8014700:	e72e      	b.n	8014560 <_rclc_take_new_data+0x30>
 8014702:	aa04      	add	r2, sp, #16
 8014704:	a90a      	add	r1, sp, #40	@ 0x28
 8014706:	3010      	adds	r0, #16
 8014708:	f008 fcce 	bl	801d0a8 <rcl_action_take_goal_response>
 801470c:	4605      	mov	r5, r0
 801470e:	2800      	cmp	r0, #0
 8014710:	f47f af71 	bne.w	80145f6 <_rclc_take_new_data+0xc6>
 8014714:	6860      	ldr	r0, [r4, #4]
 8014716:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801471a:	f009 f99d 	bl	801da58 <rclc_action_find_handle_by_goal_request_sequence_number>
 801471e:	b130      	cbz	r0, 801472e <_rclc_take_new_data+0x1fe>
 8014720:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014724:	2201      	movs	r2, #1
 8014726:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801472a:	f880 2020 	strb.w	r2, [r0, #32]
 801472e:	6860      	ldr	r0, [r4, #4]
 8014730:	e769      	b.n	8014606 <_rclc_take_new_data+0xd6>
 8014732:	3010      	adds	r0, #16
 8014734:	aa04      	add	r2, sp, #16
 8014736:	a90a      	add	r1, sp, #40	@ 0x28
 8014738:	f008 ff64 	bl	801d604 <rcl_action_take_result_request>
 801473c:	4605      	mov	r5, r0
 801473e:	2800      	cmp	r0, #0
 8014740:	f47f af59 	bne.w	80145f6 <_rclc_take_new_data+0xc6>
 8014744:	a904      	add	r1, sp, #16
 8014746:	6860      	ldr	r0, [r4, #4]
 8014748:	f009 f958 	bl	801d9fc <rclc_action_find_goal_handle_by_uuid>
 801474c:	4607      	mov	r7, r0
 801474e:	b160      	cbz	r0, 801476a <_rclc_take_new_data+0x23a>
 8014750:	ad0a      	add	r5, sp, #40	@ 0x28
 8014752:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8014756:	f04f 0c02 	mov.w	ip, #2
 801475a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801475c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801475e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014762:	e886 0003 	stmia.w	r6, {r0, r1}
 8014766:	f887 c008 	strb.w	ip, [r7, #8]
 801476a:	6860      	ldr	r0, [r4, #4]
 801476c:	2300      	movs	r3, #0
 801476e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8014772:	e6fa      	b.n	801456a <_rclc_take_new_data+0x3a>
 8014774:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8014778:	a90a      	add	r1, sp, #40	@ 0x28
 801477a:	3010      	adds	r0, #16
 801477c:	f008 fd4c 	bl	801d218 <rcl_action_take_cancel_response>
 8014780:	4605      	mov	r5, r0
 8014782:	2800      	cmp	r0, #0
 8014784:	f47f af37 	bne.w	80145f6 <_rclc_take_new_data+0xc6>
 8014788:	6860      	ldr	r0, [r4, #4]
 801478a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801478e:	f009 f987 	bl	801daa0 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8014792:	4606      	mov	r6, r0
 8014794:	6860      	ldr	r0, [r4, #4]
 8014796:	2e00      	cmp	r6, #0
 8014798:	f43f af40 	beq.w	801461c <_rclc_take_new_data+0xec>
 801479c:	2701      	movs	r7, #1
 801479e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80147a0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	f43f af3a 	beq.w	801461c <_rclc_take_new_data+0xec>
 80147a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80147aa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80147ae:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80147b2:	f009 f923 	bl	801d9fc <rclc_action_find_goal_handle_by_uuid>
 80147b6:	b138      	cbz	r0, 80147c8 <_rclc_take_new_data+0x298>
 80147b8:	6860      	ldr	r0, [r4, #4]
 80147ba:	3501      	adds	r5, #1
 80147bc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80147c0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80147c2:	42ab      	cmp	r3, r5
 80147c4:	d8f0      	bhi.n	80147a8 <_rclc_take_new_data+0x278>
 80147c6:	e729      	b.n	801461c <_rclc_take_new_data+0xec>
 80147c8:	6860      	ldr	r0, [r4, #4]
 80147ca:	3501      	adds	r5, #1
 80147cc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80147ce:	42ab      	cmp	r3, r5
 80147d0:	d8ea      	bhi.n	80147a8 <_rclc_take_new_data+0x278>
 80147d2:	e723      	b.n	801461c <_rclc_take_new_data+0xec>
 80147d4:	ab06      	add	r3, sp, #24
 80147d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80147dc:	2103      	movs	r1, #3
 80147de:	6860      	ldr	r0, [r4, #4]
 80147e0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147e4:	f009 f9d0 	bl	801db88 <rclc_action_server_goal_cancel_reject>
 80147e8:	e6c4      	b.n	8014574 <_rclc_take_new_data+0x44>
 80147ea:	ab06      	add	r3, sp, #24
 80147ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80147f2:	2102      	movs	r1, #2
 80147f4:	6860      	ldr	r0, [r4, #4]
 80147f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147fa:	f009 f9c5 	bl	801db88 <rclc_action_server_goal_cancel_reject>
 80147fe:	e6b9      	b.n	8014574 <_rclc_take_new_data+0x44>
 8014800:	6860      	ldr	r0, [r4, #4]
 8014802:	e706      	b.n	8014612 <_rclc_take_new_data+0xe2>
 8014804:	4631      	mov	r1, r6
 8014806:	6860      	ldr	r0, [r4, #4]
 8014808:	f009 f8e2 	bl	801d9d0 <rclc_action_remove_used_goal_handle>
 801480c:	f000 fe7c 	bl	8015508 <rcutils_reset_error>
 8014810:	e6b0      	b.n	8014574 <_rclc_take_new_data+0x44>
 8014812:	2501      	movs	r5, #1
 8014814:	e6ae      	b.n	8014574 <_rclc_take_new_data+0x44>
 8014816:	bf00      	nop

08014818 <_rclc_execute.part.0>:
 8014818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801481a:	7803      	ldrb	r3, [r0, #0]
 801481c:	b085      	sub	sp, #20
 801481e:	4604      	mov	r4, r0
 8014820:	2b0a      	cmp	r3, #10
 8014822:	f200 8139 	bhi.w	8014a98 <_rclc_execute.part.0+0x280>
 8014826:	e8df f003 	tbb	[pc, r3]
 801482a:	4268      	.short	0x4268
 801482c:	06a75b4d 	.word	0x06a75b4d
 8014830:	721d0606 	.word	0x721d0606
 8014834:	62          	.byte	0x62
 8014835:	00          	.byte	0x00
 8014836:	2b06      	cmp	r3, #6
 8014838:	f000 8126 	beq.w	8014a88 <_rclc_execute.part.0+0x270>
 801483c:	2b07      	cmp	r3, #7
 801483e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014840:	f040 811c 	bne.w	8014a7c <_rclc_execute.part.0+0x264>
 8014844:	f104 0510 	add.w	r5, r4, #16
 8014848:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 801484c:	6880      	ldr	r0, [r0, #8]
 801484e:	4798      	blx	r3
 8014850:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014852:	4629      	mov	r1, r5
 8014854:	6860      	ldr	r0, [r4, #4]
 8014856:	f007 f8a5 	bl	801b9a4 <rcl_send_response>
 801485a:	4604      	mov	r4, r0
 801485c:	b378      	cbz	r0, 80148be <_rclc_execute.part.0+0xa6>
 801485e:	f000 fe53 	bl	8015508 <rcutils_reset_error>
 8014862:	e02c      	b.n	80148be <_rclc_execute.part.0+0xa6>
 8014864:	6840      	ldr	r0, [r0, #4]
 8014866:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801486a:	2b00      	cmp	r3, #0
 801486c:	f000 808e 	beq.w	801498c <_rclc_execute.part.0+0x174>
 8014870:	2600      	movs	r6, #0
 8014872:	2701      	movs	r7, #1
 8014874:	e004      	b.n	8014880 <_rclc_execute.part.0+0x68>
 8014876:	f009 f875 	bl	801d964 <rclc_action_send_result_request>
 801487a:	b998      	cbnz	r0, 80148a4 <_rclc_execute.part.0+0x8c>
 801487c:	722f      	strb	r7, [r5, #8]
 801487e:	6860      	ldr	r0, [r4, #4]
 8014880:	f009 f920 	bl	801dac4 <rclc_action_find_first_handle_with_goal_response>
 8014884:	4605      	mov	r5, r0
 8014886:	2800      	cmp	r0, #0
 8014888:	d07f      	beq.n	801498a <_rclc_execute.part.0+0x172>
 801488a:	6863      	ldr	r3, [r4, #4]
 801488c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801488e:	699b      	ldr	r3, [r3, #24]
 8014890:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8014894:	f885 6020 	strb.w	r6, [r5, #32]
 8014898:	4798      	blx	r3
 801489a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 801489e:	4628      	mov	r0, r5
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d1e8      	bne.n	8014876 <_rclc_execute.part.0+0x5e>
 80148a4:	6860      	ldr	r0, [r4, #4]
 80148a6:	4629      	mov	r1, r5
 80148a8:	f009 f892 	bl	801d9d0 <rclc_action_remove_used_goal_handle>
 80148ac:	e7e7      	b.n	801487e <_rclc_execute.part.0+0x66>
 80148ae:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80148b2:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 80148b6:	b100      	cbz	r0, 80148ba <_rclc_execute.part.0+0xa2>
 80148b8:	68a0      	ldr	r0, [r4, #8]
 80148ba:	2400      	movs	r4, #0
 80148bc:	4798      	blx	r3
 80148be:	4620      	mov	r0, r4
 80148c0:	b005      	add	sp, #20
 80148c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148c4:	6840      	ldr	r0, [r0, #4]
 80148c6:	f007 fca5 	bl	801c214 <rcl_timer_call>
 80148ca:	f240 3321 	movw	r3, #801	@ 0x321
 80148ce:	4604      	mov	r4, r0
 80148d0:	4298      	cmp	r0, r3
 80148d2:	d001      	beq.n	80148d8 <_rclc_execute.part.0+0xc0>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	d1c2      	bne.n	801485e <_rclc_execute.part.0+0x46>
 80148d8:	2400      	movs	r4, #0
 80148da:	4620      	mov	r0, r4
 80148dc:	b005      	add	sp, #20
 80148de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148e0:	2400      	movs	r4, #0
 80148e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148e4:	6880      	ldr	r0, [r0, #8]
 80148e6:	4798      	blx	r3
 80148e8:	4620      	mov	r0, r4
 80148ea:	b005      	add	sp, #20
 80148ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148ee:	2400      	movs	r4, #0
 80148f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148f2:	4798      	blx	r3
 80148f4:	4620      	mov	r0, r4
 80148f6:	b005      	add	sp, #20
 80148f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148fa:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80148fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014900:	b100      	cbz	r0, 8014904 <_rclc_execute.part.0+0xec>
 8014902:	68a0      	ldr	r0, [r4, #8]
 8014904:	2400      	movs	r4, #0
 8014906:	4798      	blx	r3
 8014908:	4620      	mov	r0, r4
 801490a:	b005      	add	sp, #20
 801490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801490e:	6840      	ldr	r0, [r0, #4]
 8014910:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8014914:	bb3b      	cbnz	r3, 8014966 <_rclc_execute.part.0+0x14e>
 8014916:	f890 3020 	ldrb.w	r3, [r0, #32]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d07d      	beq.n	8014a1a <_rclc_execute.part.0+0x202>
 801491e:	f640 0634 	movw	r6, #2100	@ 0x834
 8014922:	2701      	movs	r7, #1
 8014924:	e007      	b.n	8014936 <_rclc_execute.part.0+0x11e>
 8014926:	4628      	mov	r0, r5
 8014928:	f009 f8e4 	bl	801daf4 <rclc_action_server_response_goal_request>
 801492c:	4629      	mov	r1, r5
 801492e:	6860      	ldr	r0, [r4, #4]
 8014930:	f009 f84e 	bl	801d9d0 <rclc_action_remove_used_goal_handle>
 8014934:	6860      	ldr	r0, [r4, #4]
 8014936:	2100      	movs	r1, #0
 8014938:	f009 f876 	bl	801da28 <rclc_action_find_first_handle_by_status>
 801493c:	4605      	mov	r5, r0
 801493e:	2800      	cmp	r0, #0
 8014940:	d068      	beq.n	8014a14 <_rclc_execute.part.0+0x1fc>
 8014942:	6863      	ldr	r3, [r4, #4]
 8014944:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014946:	699b      	ldr	r3, [r3, #24]
 8014948:	4798      	blx	r3
 801494a:	42b0      	cmp	r0, r6
 801494c:	f04f 0100 	mov.w	r1, #0
 8014950:	d1e9      	bne.n	8014926 <_rclc_execute.part.0+0x10e>
 8014952:	2101      	movs	r1, #1
 8014954:	4628      	mov	r0, r5
 8014956:	f009 f8cd 	bl	801daf4 <rclc_action_server_response_goal_request>
 801495a:	722f      	strb	r7, [r5, #8]
 801495c:	e7ea      	b.n	8014934 <_rclc_execute.part.0+0x11c>
 801495e:	6848      	ldr	r0, [r1, #4]
 8014960:	f009 f836 	bl	801d9d0 <rclc_action_remove_used_goal_handle>
 8014964:	6860      	ldr	r0, [r4, #4]
 8014966:	f009 f86b 	bl	801da40 <rclc_action_find_first_terminated_handle>
 801496a:	4601      	mov	r1, r0
 801496c:	2800      	cmp	r0, #0
 801496e:	d1f6      	bne.n	801495e <_rclc_execute.part.0+0x146>
 8014970:	6860      	ldr	r0, [r4, #4]
 8014972:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8014976:	e7ce      	b.n	8014916 <_rclc_execute.part.0+0xfe>
 8014978:	2400      	movs	r4, #0
 801497a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801497c:	f100 0110 	add.w	r1, r0, #16
 8014980:	6880      	ldr	r0, [r0, #8]
 8014982:	4798      	blx	r3
 8014984:	4620      	mov	r0, r4
 8014986:	b005      	add	sp, #20
 8014988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801498a:	6860      	ldr	r0, [r4, #4]
 801498c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014990:	b18b      	cbz	r3, 80149b6 <_rclc_execute.part.0+0x19e>
 8014992:	68c5      	ldr	r5, [r0, #12]
 8014994:	b32d      	cbz	r5, 80149e2 <_rclc_execute.part.0+0x1ca>
 8014996:	2600      	movs	r6, #0
 8014998:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 801499c:	b143      	cbz	r3, 80149b0 <_rclc_execute.part.0+0x198>
 801499e:	69c3      	ldr	r3, [r0, #28]
 80149a0:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80149a4:	b123      	cbz	r3, 80149b0 <_rclc_execute.part.0+0x198>
 80149a6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80149a8:	4628      	mov	r0, r5
 80149aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80149ac:	4798      	blx	r3
 80149ae:	6860      	ldr	r0, [r4, #4]
 80149b0:	682d      	ldr	r5, [r5, #0]
 80149b2:	2d00      	cmp	r5, #0
 80149b4:	d1f0      	bne.n	8014998 <_rclc_execute.part.0+0x180>
 80149b6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80149ba:	b193      	cbz	r3, 80149e2 <_rclc_execute.part.0+0x1ca>
 80149bc:	68c5      	ldr	r5, [r0, #12]
 80149be:	b185      	cbz	r5, 80149e2 <_rclc_execute.part.0+0x1ca>
 80149c0:	2600      	movs	r6, #0
 80149c2:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80149c6:	b14b      	cbz	r3, 80149dc <_rclc_execute.part.0+0x1c4>
 80149c8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80149ca:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 80149ce:	b12b      	cbz	r3, 80149dc <_rclc_execute.part.0+0x1c4>
 80149d0:	4628      	mov	r0, r5
 80149d2:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80149d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80149d8:	4798      	blx	r3
 80149da:	6860      	ldr	r0, [r4, #4]
 80149dc:	682d      	ldr	r5, [r5, #0]
 80149de:	2d00      	cmp	r5, #0
 80149e0:	d1ef      	bne.n	80149c2 <_rclc_execute.part.0+0x1aa>
 80149e2:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	f43f af76 	beq.w	80148d8 <_rclc_execute.part.0+0xc0>
 80149ec:	2700      	movs	r7, #0
 80149ee:	e00b      	b.n	8014a08 <_rclc_execute.part.0+0x1f0>
 80149f0:	6863      	ldr	r3, [r4, #4]
 80149f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80149f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80149f6:	6a1e      	ldr	r6, [r3, #32]
 80149f8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80149fc:	47b0      	blx	r6
 80149fe:	6860      	ldr	r0, [r4, #4]
 8014a00:	4629      	mov	r1, r5
 8014a02:	f008 ffe5 	bl	801d9d0 <rclc_action_remove_used_goal_handle>
 8014a06:	6860      	ldr	r0, [r4, #4]
 8014a08:	f009 f868 	bl	801dadc <rclc_action_find_first_handle_with_result_response>
 8014a0c:	4605      	mov	r5, r0
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	d1ee      	bne.n	80149f0 <_rclc_execute.part.0+0x1d8>
 8014a12:	e761      	b.n	80148d8 <_rclc_execute.part.0+0xc0>
 8014a14:	6860      	ldr	r0, [r4, #4]
 8014a16:	f880 5020 	strb.w	r5, [r0, #32]
 8014a1a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	f43f af5a 	beq.w	80148d8 <_rclc_execute.part.0+0xc0>
 8014a24:	68c5      	ldr	r5, [r0, #12]
 8014a26:	b1b5      	cbz	r5, 8014a56 <_rclc_execute.part.0+0x23e>
 8014a28:	2602      	movs	r6, #2
 8014a2a:	e001      	b.n	8014a30 <_rclc_execute.part.0+0x218>
 8014a2c:	682d      	ldr	r5, [r5, #0]
 8014a2e:	b195      	cbz	r5, 8014a56 <_rclc_execute.part.0+0x23e>
 8014a30:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014a34:	2b03      	cmp	r3, #3
 8014a36:	d1f9      	bne.n	8014a2c <_rclc_execute.part.0+0x214>
 8014a38:	69c3      	ldr	r3, [r0, #28]
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014a3e:	4798      	blx	r3
 8014a40:	4603      	mov	r3, r0
 8014a42:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8014a46:	4628      	mov	r0, r5
 8014a48:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014a4c:	b143      	cbz	r3, 8014a60 <_rclc_execute.part.0+0x248>
 8014a4e:	f009 f86f 	bl	801db30 <rclc_action_server_goal_cancel_accept>
 8014a52:	6860      	ldr	r0, [r4, #4]
 8014a54:	e7ea      	b.n	8014a2c <_rclc_execute.part.0+0x214>
 8014a56:	2300      	movs	r3, #0
 8014a58:	461c      	mov	r4, r3
 8014a5a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8014a5e:	e72e      	b.n	80148be <_rclc_execute.part.0+0xa6>
 8014a60:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014a62:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8014a66:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a6a:	2101      	movs	r1, #1
 8014a6c:	6860      	ldr	r0, [r4, #4]
 8014a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a72:	f009 f889 	bl	801db88 <rclc_action_server_goal_cancel_reject>
 8014a76:	722e      	strb	r6, [r5, #8]
 8014a78:	6860      	ldr	r0, [r4, #4]
 8014a7a:	e7d7      	b.n	8014a2c <_rclc_execute.part.0+0x214>
 8014a7c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014a7e:	f104 0510 	add.w	r5, r4, #16
 8014a82:	6880      	ldr	r0, [r0, #8]
 8014a84:	4798      	blx	r3
 8014a86:	e6e3      	b.n	8014850 <_rclc_execute.part.0+0x38>
 8014a88:	f100 0510 	add.w	r5, r0, #16
 8014a8c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014a8e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8014a90:	4629      	mov	r1, r5
 8014a92:	6880      	ldr	r0, [r0, #8]
 8014a94:	4798      	blx	r3
 8014a96:	e6db      	b.n	8014850 <_rclc_execute.part.0+0x38>
 8014a98:	2401      	movs	r4, #1
 8014a9a:	e710      	b.n	80148be <_rclc_execute.part.0+0xa6>

08014a9c <rclc_executor_trigger_any>:
 8014a9c:	2800      	cmp	r0, #0
 8014a9e:	d03d      	beq.n	8014b1c <rclc_executor_trigger_any+0x80>
 8014aa0:	2900      	cmp	r1, #0
 8014aa2:	d03c      	beq.n	8014b1e <rclc_executor_trigger_any+0x82>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8014aaa:	2200      	movs	r2, #0
 8014aac:	2800      	cmp	r0, #0
 8014aae:	d035      	beq.n	8014b1c <rclc_executor_trigger_any+0x80>
 8014ab0:	b430      	push	{r4, r5}
 8014ab2:	f893 c000 	ldrb.w	ip, [r3]
 8014ab6:	f1bc 0f08 	cmp.w	ip, #8
 8014aba:	d11d      	bne.n	8014af8 <rclc_executor_trigger_any+0x5c>
 8014abc:	685c      	ldr	r4, [r3, #4]
 8014abe:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8014ac0:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8014ac4:	d105      	bne.n	8014ad2 <rclc_executor_trigger_any+0x36>
 8014ac6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8014aca:	b910      	cbnz	r0, 8014ad2 <rclc_executor_trigger_any+0x36>
 8014acc:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8014ad0:	b128      	cbz	r0, 8014ade <rclc_executor_trigger_any+0x42>
 8014ad2:	bc30      	pop	{r4, r5}
 8014ad4:	4770      	bx	lr
 8014ad6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8014ada:	2800      	cmp	r0, #0
 8014adc:	d1f9      	bne.n	8014ad2 <rclc_executor_trigger_any+0x36>
 8014ade:	3201      	adds	r2, #1
 8014ae0:	3340      	adds	r3, #64	@ 0x40
 8014ae2:	4291      	cmp	r1, r2
 8014ae4:	d017      	beq.n	8014b16 <rclc_executor_trigger_any+0x7a>
 8014ae6:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8014aea:	2800      	cmp	r0, #0
 8014aec:	d0f1      	beq.n	8014ad2 <rclc_executor_trigger_any+0x36>
 8014aee:	f893 c000 	ldrb.w	ip, [r3]
 8014af2:	f1bc 0f08 	cmp.w	ip, #8
 8014af6:	d0e1      	beq.n	8014abc <rclc_executor_trigger_any+0x20>
 8014af8:	f1bc 0f09 	cmp.w	ip, #9
 8014afc:	d1eb      	bne.n	8014ad6 <rclc_executor_trigger_any+0x3a>
 8014afe:	685c      	ldr	r4, [r3, #4]
 8014b00:	6a25      	ldr	r5, [r4, #32]
 8014b02:	2d00      	cmp	r5, #0
 8014b04:	d1e5      	bne.n	8014ad2 <rclc_executor_trigger_any+0x36>
 8014b06:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	d1e1      	bne.n	8014ad2 <rclc_executor_trigger_any+0x36>
 8014b0e:	3201      	adds	r2, #1
 8014b10:	3340      	adds	r3, #64	@ 0x40
 8014b12:	4291      	cmp	r1, r2
 8014b14:	d1e7      	bne.n	8014ae6 <rclc_executor_trigger_any+0x4a>
 8014b16:	2000      	movs	r0, #0
 8014b18:	bc30      	pop	{r4, r5}
 8014b1a:	4770      	bx	lr
 8014b1c:	4770      	bx	lr
 8014b1e:	4608      	mov	r0, r1
 8014b20:	4770      	bx	lr
 8014b22:	bf00      	nop

08014b24 <rclc_executor_get_zero_initialized_executor>:
 8014b24:	b510      	push	{r4, lr}
 8014b26:	4604      	mov	r4, r0
 8014b28:	2288      	movs	r2, #136	@ 0x88
 8014b2a:	4902      	ldr	r1, [pc, #8]	@ (8014b34 <rclc_executor_get_zero_initialized_executor+0x10>)
 8014b2c:	f00d fd23 	bl	8022576 <memcpy>
 8014b30:	4620      	mov	r0, r4
 8014b32:	bd10      	pop	{r4, pc}
 8014b34:	080247e8 	.word	0x080247e8

08014b38 <rclc_executor_init>:
 8014b38:	2900      	cmp	r1, #0
 8014b3a:	d06a      	beq.n	8014c12 <rclc_executor_init+0xda>
 8014b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b40:	4605      	mov	r5, r0
 8014b42:	b0b0      	sub	sp, #192	@ 0xc0
 8014b44:	2800      	cmp	r0, #0
 8014b46:	d05c      	beq.n	8014c02 <rclc_executor_init+0xca>
 8014b48:	4616      	mov	r6, r2
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	4688      	mov	r8, r1
 8014b4e:	461f      	mov	r7, r3
 8014b50:	f000 fcb6 	bl	80154c0 <rcutils_allocator_is_valid>
 8014b54:	2e00      	cmp	r6, #0
 8014b56:	d054      	beq.n	8014c02 <rclc_executor_init+0xca>
 8014b58:	f080 0401 	eor.w	r4, r0, #1
 8014b5c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8014b60:	d14f      	bne.n	8014c02 <rclc_executor_init+0xca>
 8014b62:	2288      	movs	r2, #136	@ 0x88
 8014b64:	4930      	ldr	r1, [pc, #192]	@ (8014c28 <rclc_executor_init+0xf0>)
 8014b66:	a80e      	add	r0, sp, #56	@ 0x38
 8014b68:	f00d fd05 	bl	8022576 <memcpy>
 8014b6c:	a90e      	add	r1, sp, #56	@ 0x38
 8014b6e:	2288      	movs	r2, #136	@ 0x88
 8014b70:	4628      	mov	r0, r5
 8014b72:	f00d fd00 	bl	8022576 <memcpy>
 8014b76:	4668      	mov	r0, sp
 8014b78:	f8c5 8000 	str.w	r8, [r5]
 8014b7c:	60ae      	str	r6, [r5, #8]
 8014b7e:	f007 fcbf 	bl	801c500 <rcl_get_zero_initialized_wait_set>
 8014b82:	46ec      	mov	ip, sp
 8014b84:	f105 0e14 	add.w	lr, r5, #20
 8014b88:	f8d7 8000 	ldr.w	r8, [r7]
 8014b8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ba0:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8014c20 <rclc_executor_init+0xe8>
 8014ba4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014ba8:	f8dc 3000 	ldr.w	r3, [ip]
 8014bac:	01b0      	lsls	r0, r6, #6
 8014bae:	6939      	ldr	r1, [r7, #16]
 8014bb0:	f8ce 3000 	str.w	r3, [lr]
 8014bb4:	612f      	str	r7, [r5, #16]
 8014bb6:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8014bba:	47c0      	blx	r8
 8014bbc:	6068      	str	r0, [r5, #4]
 8014bbe:	b908      	cbnz	r0, 8014bc4 <rclc_executor_init+0x8c>
 8014bc0:	e029      	b.n	8014c16 <rclc_executor_init+0xde>
 8014bc2:	6868      	ldr	r0, [r5, #4]
 8014bc4:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014bc8:	3401      	adds	r4, #1
 8014bca:	4631      	mov	r1, r6
 8014bcc:	f000 fac0 	bl	8015150 <rclc_executor_handle_init>
 8014bd0:	42a6      	cmp	r6, r4
 8014bd2:	d8f6      	bhi.n	8014bc2 <rclc_executor_init+0x8a>
 8014bd4:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8014bd8:	f000 faae 	bl	8015138 <rclc_executor_handle_counters_zero_init>
 8014bdc:	4a13      	ldr	r2, [pc, #76]	@ (8014c2c <rclc_executor_init+0xf4>)
 8014bde:	2300      	movs	r3, #0
 8014be0:	6868      	ldr	r0, [r5, #4]
 8014be2:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8014be6:	b168      	cbz	r0, 8014c04 <rclc_executor_init+0xcc>
 8014be8:	68ab      	ldr	r3, [r5, #8]
 8014bea:	b173      	cbz	r3, 8014c0a <rclc_executor_init+0xd2>
 8014bec:	692a      	ldr	r2, [r5, #16]
 8014bee:	fab2 f382 	clz	r3, r2
 8014bf2:	095b      	lsrs	r3, r3, #5
 8014bf4:	b14a      	cbz	r2, 8014c0a <rclc_executor_init+0xd2>
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8014bfc:	b030      	add	sp, #192	@ 0xc0
 8014bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c02:	200b      	movs	r0, #11
 8014c04:	b030      	add	sp, #192	@ 0xc0
 8014c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c0a:	2000      	movs	r0, #0
 8014c0c:	b030      	add	sp, #192	@ 0xc0
 8014c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c12:	200b      	movs	r0, #11
 8014c14:	4770      	bx	lr
 8014c16:	200a      	movs	r0, #10
 8014c18:	e7f4      	b.n	8014c04 <rclc_executor_init+0xcc>
 8014c1a:	bf00      	nop
 8014c1c:	f3af 8000 	nop.w
 8014c20:	3b9aca00 	.word	0x3b9aca00
 8014c24:	00000000 	.word	0x00000000
 8014c28:	080247e8 	.word	0x080247e8
 8014c2c:	08014a9d 	.word	0x08014a9d

08014c30 <rclc_executor_add_subscription>:
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	bf18      	it	ne
 8014c34:	2a00      	cmpne	r2, #0
 8014c36:	b570      	push	{r4, r5, r6, lr}
 8014c38:	4604      	mov	r4, r0
 8014c3a:	bf0c      	ite	eq
 8014c3c:	2001      	moveq	r0, #1
 8014c3e:	2000      	movne	r0, #0
 8014c40:	f89d c010 	ldrb.w	ip, [sp, #16]
 8014c44:	2900      	cmp	r1, #0
 8014c46:	bf08      	it	eq
 8014c48:	f040 0001 	orreq.w	r0, r0, #1
 8014c4c:	bb28      	cbnz	r0, 8014c9a <rclc_executor_add_subscription+0x6a>
 8014c4e:	fab4 f584 	clz	r5, r4
 8014c52:	096d      	lsrs	r5, r5, #5
 8014c54:	b30c      	cbz	r4, 8014c9a <rclc_executor_add_subscription+0x6a>
 8014c56:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014c5a:	4286      	cmp	r6, r0
 8014c5c:	d301      	bcc.n	8014c62 <rclc_executor_add_subscription+0x32>
 8014c5e:	2001      	movs	r0, #1
 8014c60:	bd70      	pop	{r4, r5, r6, pc}
 8014c62:	6860      	ldr	r0, [r4, #4]
 8014c64:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014c68:	f800 500e 	strb.w	r5, [r0, lr]
 8014c6c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014c70:	3601      	adds	r6, #1
 8014c72:	6303      	str	r3, [r0, #48]	@ 0x30
 8014c74:	2301      	movs	r3, #1
 8014c76:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8014c78:	f104 0514 	add.w	r5, r4, #20
 8014c7c:	f880 c001 	strb.w	ip, [r0, #1]
 8014c80:	8703      	strh	r3, [r0, #56]	@ 0x38
 8014c82:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014c86:	4628      	mov	r0, r5
 8014c88:	60e6      	str	r6, [r4, #12]
 8014c8a:	f007 fc4d 	bl	801c528 <rcl_wait_set_is_valid>
 8014c8e:	b930      	cbnz	r0, 8014c9e <rclc_executor_add_subscription+0x6e>
 8014c90:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8014c92:	2000      	movs	r0, #0
 8014c94:	3301      	adds	r3, #1
 8014c96:	64a3      	str	r3, [r4, #72]	@ 0x48
 8014c98:	bd70      	pop	{r4, r5, r6, pc}
 8014c9a:	200b      	movs	r0, #11
 8014c9c:	bd70      	pop	{r4, r5, r6, pc}
 8014c9e:	4628      	mov	r0, r5
 8014ca0:	f007 fc48 	bl	801c534 <rcl_wait_set_fini>
 8014ca4:	2800      	cmp	r0, #0
 8014ca6:	d0f3      	beq.n	8014c90 <rclc_executor_add_subscription+0x60>
 8014ca8:	bd70      	pop	{r4, r5, r6, pc}
 8014caa:	bf00      	nop

08014cac <rclc_executor_add_service>:
 8014cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cae:	9d06      	ldr	r5, [sp, #24]
 8014cb0:	4604      	mov	r4, r0
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	bf18      	it	ne
 8014cb6:	2d00      	cmpne	r5, #0
 8014cb8:	bf0c      	ite	eq
 8014cba:	2001      	moveq	r0, #1
 8014cbc:	2000      	movne	r0, #0
 8014cbe:	2a00      	cmp	r2, #0
 8014cc0:	bf08      	it	eq
 8014cc2:	f040 0001 	orreq.w	r0, r0, #1
 8014cc6:	2900      	cmp	r1, #0
 8014cc8:	bf08      	it	eq
 8014cca:	f040 0001 	orreq.w	r0, r0, #1
 8014cce:	bb40      	cbnz	r0, 8014d22 <rclc_executor_add_service+0x76>
 8014cd0:	fab4 f684 	clz	r6, r4
 8014cd4:	0976      	lsrs	r6, r6, #5
 8014cd6:	b324      	cbz	r4, 8014d22 <rclc_executor_add_service+0x76>
 8014cd8:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8014cdc:	42b8      	cmp	r0, r7
 8014cde:	d301      	bcc.n	8014ce4 <rclc_executor_add_service+0x38>
 8014ce0:	2001      	movs	r0, #1
 8014ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ce4:	6867      	ldr	r7, [r4, #4]
 8014ce6:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8014cea:	f100 0c01 	add.w	ip, r0, #1
 8014cee:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8014cf2:	6283      	str	r3, [r0, #40]	@ 0x28
 8014cf4:	2305      	movs	r3, #5
 8014cf6:	6305      	str	r5, [r0, #48]	@ 0x30
 8014cf8:	f104 0514 	add.w	r5, r4, #20
 8014cfc:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014d00:	f827 300e 	strh.w	r3, [r7, lr]
 8014d04:	2301      	movs	r3, #1
 8014d06:	62c6      	str	r6, [r0, #44]	@ 0x2c
 8014d08:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014d0c:	4628      	mov	r0, r5
 8014d0e:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014d12:	f007 fc09 	bl	801c528 <rcl_wait_set_is_valid>
 8014d16:	b930      	cbnz	r0, 8014d26 <rclc_executor_add_service+0x7a>
 8014d18:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8014d1a:	2000      	movs	r0, #0
 8014d1c:	3301      	adds	r3, #1
 8014d1e:	6563      	str	r3, [r4, #84]	@ 0x54
 8014d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d22:	200b      	movs	r0, #11
 8014d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d26:	4628      	mov	r0, r5
 8014d28:	f007 fc04 	bl	801c534 <rcl_wait_set_fini>
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	d0f3      	beq.n	8014d18 <rclc_executor_add_service+0x6c>
 8014d30:	e7d7      	b.n	8014ce2 <rclc_executor_add_service+0x36>
 8014d32:	bf00      	nop

08014d34 <rclc_executor_prepare>:
 8014d34:	2800      	cmp	r0, #0
 8014d36:	d044      	beq.n	8014dc2 <rclc_executor_prepare+0x8e>
 8014d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d3a:	f100 0514 	add.w	r5, r0, #20
 8014d3e:	b09b      	sub	sp, #108	@ 0x6c
 8014d40:	4604      	mov	r4, r0
 8014d42:	4628      	mov	r0, r5
 8014d44:	f007 fbf0 	bl	801c528 <rcl_wait_set_is_valid>
 8014d48:	b110      	cbz	r0, 8014d50 <rclc_executor_prepare+0x1c>
 8014d4a:	2000      	movs	r0, #0
 8014d4c:	b01b      	add	sp, #108	@ 0x6c
 8014d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d50:	4628      	mov	r0, r5
 8014d52:	f007 fbef 	bl	801c534 <rcl_wait_set_fini>
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d130      	bne.n	8014dbc <rclc_executor_prepare+0x88>
 8014d5a:	a80c      	add	r0, sp, #48	@ 0x30
 8014d5c:	ae04      	add	r6, sp, #16
 8014d5e:	f007 fbcf 	bl	801c500 <rcl_get_zero_initialized_wait_set>
 8014d62:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014d66:	46ae      	mov	lr, r5
 8014d68:	6927      	ldr	r7, [r4, #16]
 8014d6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d6e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d76:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d82:	f8dc 3000 	ldr.w	r3, [ip]
 8014d86:	f8ce 3000 	str.w	r3, [lr]
 8014d8a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014d8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	4628      	mov	r0, r5
 8014d92:	6822      	ldr	r2, [r4, #0]
 8014d94:	6033      	str	r3, [r6, #0]
 8014d96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014d98:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8014d9a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014d9e:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8014da2:	e9cd 2100 	strd	r2, r1, [sp]
 8014da6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8014da8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014daa:	f007 fec3 	bl	801cb34 <rcl_wait_set_init>
 8014dae:	2800      	cmp	r0, #0
 8014db0:	d0cc      	beq.n	8014d4c <rclc_executor_prepare+0x18>
 8014db2:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014db4:	f000 fba8 	bl	8015508 <rcutils_reset_error>
 8014db8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014dba:	e7c7      	b.n	8014d4c <rclc_executor_prepare+0x18>
 8014dbc:	f000 fba4 	bl	8015508 <rcutils_reset_error>
 8014dc0:	e7cb      	b.n	8014d5a <rclc_executor_prepare+0x26>
 8014dc2:	200b      	movs	r0, #11
 8014dc4:	4770      	bx	lr
 8014dc6:	bf00      	nop

08014dc8 <rclc_executor_spin_some.part.0>:
 8014dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dcc:	4605      	mov	r5, r0
 8014dce:	4691      	mov	r9, r2
 8014dd0:	4698      	mov	r8, r3
 8014dd2:	f7ff ffaf 	bl	8014d34 <rclc_executor_prepare>
 8014dd6:	f105 0614 	add.w	r6, r5, #20
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f007 fc76 	bl	801c6cc <rcl_wait_set_clear>
 8014de0:	4607      	mov	r7, r0
 8014de2:	2800      	cmp	r0, #0
 8014de4:	f040 80a8 	bne.w	8014f38 <rclc_executor_spin_some.part.0+0x170>
 8014de8:	68ab      	ldr	r3, [r5, #8]
 8014dea:	b30b      	cbz	r3, 8014e30 <rclc_executor_spin_some.part.0+0x68>
 8014dec:	4604      	mov	r4, r0
 8014dee:	6869      	ldr	r1, [r5, #4]
 8014df0:	01a2      	lsls	r2, r4, #6
 8014df2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014df6:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8014dfa:	b1cb      	cbz	r3, 8014e30 <rclc_executor_spin_some.part.0+0x68>
 8014dfc:	5c8b      	ldrb	r3, [r1, r2]
 8014dfe:	2b0a      	cmp	r3, #10
 8014e00:	f200 80de 	bhi.w	8014fc0 <rclc_executor_spin_some.part.0+0x1f8>
 8014e04:	e8df f003 	tbb	[pc, r3]
 8014e08:	8da99d9d 	.word	0x8da99d9d
 8014e0c:	0606068d 	.word	0x0606068d
 8014e10:	c1ce      	.short	0xc1ce
 8014e12:	b5          	.byte	0xb5
 8014e13:	00          	.byte	0x00
 8014e14:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014e18:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014e1c:	4630      	mov	r0, r6
 8014e1e:	f007 ffa5 	bl	801cd6c <rcl_wait_set_add_service>
 8014e22:	2800      	cmp	r0, #0
 8014e24:	f040 8087 	bne.w	8014f36 <rclc_executor_spin_some.part.0+0x16e>
 8014e28:	3401      	adds	r4, #1
 8014e2a:	68ab      	ldr	r3, [r5, #8]
 8014e2c:	429c      	cmp	r4, r3
 8014e2e:	d3de      	bcc.n	8014dee <rclc_executor_spin_some.part.0+0x26>
 8014e30:	4643      	mov	r3, r8
 8014e32:	464a      	mov	r2, r9
 8014e34:	4630      	mov	r0, r6
 8014e36:	f007 ffc7 	bl	801cdc8 <rcl_wait>
 8014e3a:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	f000 80c6 	beq.w	8014fd0 <rclc_executor_spin_some.part.0+0x208>
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	f040 80bb 	bne.w	8014fc0 <rclc_executor_spin_some.part.0+0x1f8>
 8014e4a:	68ab      	ldr	r3, [r5, #8]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	f000 8159 	beq.w	8015104 <rclc_executor_spin_some.part.0+0x33c>
 8014e52:	2400      	movs	r4, #0
 8014e54:	f240 1991 	movw	r9, #401	@ 0x191
 8014e58:	46a0      	mov	r8, r4
 8014e5a:	e00a      	b.n	8014e72 <rclc_executor_spin_some.part.0+0xaa>
 8014e5c:	f7ff fb1a 	bl	8014494 <_rclc_check_for_new_data>
 8014e60:	4604      	mov	r4, r0
 8014e62:	b110      	cbz	r0, 8014e6a <rclc_executor_spin_some.part.0+0xa2>
 8014e64:	4548      	cmp	r0, r9
 8014e66:	f040 80b1 	bne.w	8014fcc <rclc_executor_spin_some.part.0+0x204>
 8014e6a:	68ab      	ldr	r3, [r5, #8]
 8014e6c:	4598      	cmp	r8, r3
 8014e6e:	f080 8126 	bcs.w	80150be <rclc_executor_spin_some.part.0+0x2f6>
 8014e72:	686a      	ldr	r2, [r5, #4]
 8014e74:	4631      	mov	r1, r6
 8014e76:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014e7a:	f108 0801 	add.w	r8, r8, #1
 8014e7e:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8014e82:	f1bc 0f00 	cmp.w	ip, #0
 8014e86:	d1e9      	bne.n	8014e5c <rclc_executor_spin_some.part.0+0x94>
 8014e88:	4619      	mov	r1, r3
 8014e8a:	4610      	mov	r0, r2
 8014e8c:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014e90:	4798      	blx	r3
 8014e92:	2800      	cmp	r0, #0
 8014e94:	f000 809a 	beq.w	8014fcc <rclc_executor_spin_some.part.0+0x204>
 8014e98:	68ab      	ldr	r3, [r5, #8]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	f000 8096 	beq.w	8014fcc <rclc_executor_spin_some.part.0+0x204>
 8014ea0:	f04f 0800 	mov.w	r8, #0
 8014ea4:	f240 1991 	movw	r9, #401	@ 0x191
 8014ea8:	e009      	b.n	8014ebe <rclc_executor_spin_some.part.0+0xf6>
 8014eaa:	f7ff fb41 	bl	8014530 <_rclc_take_new_data>
 8014eae:	4604      	mov	r4, r0
 8014eb0:	b110      	cbz	r0, 8014eb8 <rclc_executor_spin_some.part.0+0xf0>
 8014eb2:	4548      	cmp	r0, r9
 8014eb4:	f040 808a 	bne.w	8014fcc <rclc_executor_spin_some.part.0+0x204>
 8014eb8:	68ab      	ldr	r3, [r5, #8]
 8014eba:	4598      	cmp	r8, r3
 8014ebc:	d209      	bcs.n	8014ed2 <rclc_executor_spin_some.part.0+0x10a>
 8014ebe:	6868      	ldr	r0, [r5, #4]
 8014ec0:	4631      	mov	r1, r6
 8014ec2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014ec6:	f108 0801 	add.w	r8, r8, #1
 8014eca:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8014ece:	2a00      	cmp	r2, #0
 8014ed0:	d1eb      	bne.n	8014eaa <rclc_executor_spin_some.part.0+0xe2>
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d07a      	beq.n	8014fcc <rclc_executor_spin_some.part.0+0x204>
 8014ed6:	2600      	movs	r6, #0
 8014ed8:	e00e      	b.n	8014ef8 <rclc_executor_spin_some.part.0+0x130>
 8014eda:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014ede:	2a08      	cmp	r2, #8
 8014ee0:	f000 80fc 	beq.w	80150dc <rclc_executor_spin_some.part.0+0x314>
 8014ee4:	2a09      	cmp	r2, #9
 8014ee6:	f000 80ee 	beq.w	80150c6 <rclc_executor_spin_some.part.0+0x2fe>
 8014eea:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8014eee:	b98a      	cbnz	r2, 8014f14 <rclc_executor_spin_some.part.0+0x14c>
 8014ef0:	3601      	adds	r6, #1
 8014ef2:	429e      	cmp	r6, r3
 8014ef4:	d267      	bcs.n	8014fc6 <rclc_executor_spin_some.part.0+0x1fe>
 8014ef6:	2400      	movs	r4, #0
 8014ef8:	686a      	ldr	r2, [r5, #4]
 8014efa:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014efe:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014f02:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8014f06:	2900      	cmp	r1, #0
 8014f08:	d060      	beq.n	8014fcc <rclc_executor_spin_some.part.0+0x204>
 8014f0a:	7841      	ldrb	r1, [r0, #1]
 8014f0c:	2900      	cmp	r1, #0
 8014f0e:	d0e4      	beq.n	8014eda <rclc_executor_spin_some.part.0+0x112>
 8014f10:	2901      	cmp	r1, #1
 8014f12:	d1ed      	bne.n	8014ef0 <rclc_executor_spin_some.part.0+0x128>
 8014f14:	f7ff fc80 	bl	8014818 <_rclc_execute.part.0>
 8014f18:	2800      	cmp	r0, #0
 8014f1a:	f040 80b5 	bne.w	8015088 <rclc_executor_spin_some.part.0+0x2c0>
 8014f1e:	68ab      	ldr	r3, [r5, #8]
 8014f20:	e7e6      	b.n	8014ef0 <rclc_executor_spin_some.part.0+0x128>
 8014f22:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f26:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f2a:	4630      	mov	r0, r6
 8014f2c:	f007 fef2 	bl	801cd14 <rcl_wait_set_add_client>
 8014f30:	2800      	cmp	r0, #0
 8014f32:	f43f af79 	beq.w	8014e28 <rclc_executor_spin_some.part.0+0x60>
 8014f36:	4607      	mov	r7, r0
 8014f38:	f000 fae6 	bl	8015508 <rcutils_reset_error>
 8014f3c:	4638      	mov	r0, r7
 8014f3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f42:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f46:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f4a:	4630      	mov	r0, r6
 8014f4c:	f007 fb92 	bl	801c674 <rcl_wait_set_add_subscription>
 8014f50:	2800      	cmp	r0, #0
 8014f52:	f43f af69 	beq.w	8014e28 <rclc_executor_spin_some.part.0+0x60>
 8014f56:	4607      	mov	r7, r0
 8014f58:	e7ee      	b.n	8014f38 <rclc_executor_spin_some.part.0+0x170>
 8014f5a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f62:	4630      	mov	r0, r6
 8014f64:	f007 fea6 	bl	801ccb4 <rcl_wait_set_add_timer>
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	f43f af5d 	beq.w	8014e28 <rclc_executor_spin_some.part.0+0x60>
 8014f6e:	4607      	mov	r7, r0
 8014f70:	e7e2      	b.n	8014f38 <rclc_executor_spin_some.part.0+0x170>
 8014f72:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f76:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f7a:	4630      	mov	r0, r6
 8014f7c:	f007 fe6e 	bl	801cc5c <rcl_wait_set_add_guard_condition>
 8014f80:	2800      	cmp	r0, #0
 8014f82:	f43f af51 	beq.w	8014e28 <rclc_executor_spin_some.part.0+0x60>
 8014f86:	4607      	mov	r7, r0
 8014f88:	e7d6      	b.n	8014f38 <rclc_executor_spin_some.part.0+0x170>
 8014f8a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f8e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f92:	4630      	mov	r0, r6
 8014f94:	3110      	adds	r1, #16
 8014f96:	f008 fbed 	bl	801d774 <rcl_action_wait_set_add_action_server>
 8014f9a:	2800      	cmp	r0, #0
 8014f9c:	f43f af44 	beq.w	8014e28 <rclc_executor_spin_some.part.0+0x60>
 8014fa0:	4607      	mov	r7, r0
 8014fa2:	e7c9      	b.n	8014f38 <rclc_executor_spin_some.part.0+0x170>
 8014fa4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014fa8:	2300      	movs	r3, #0
 8014faa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014fae:	4630      	mov	r0, r6
 8014fb0:	3110      	adds	r1, #16
 8014fb2:	f008 f9b5 	bl	801d320 <rcl_action_wait_set_add_action_client>
 8014fb6:	2800      	cmp	r0, #0
 8014fb8:	f43f af36 	beq.w	8014e28 <rclc_executor_spin_some.part.0+0x60>
 8014fbc:	4607      	mov	r7, r0
 8014fbe:	e7bb      	b.n	8014f38 <rclc_executor_spin_some.part.0+0x170>
 8014fc0:	2701      	movs	r7, #1
 8014fc2:	f000 faa1 	bl	8015508 <rcutils_reset_error>
 8014fc6:	4638      	mov	r0, r7
 8014fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fcc:	4627      	mov	r7, r4
 8014fce:	e7fa      	b.n	8014fc6 <rclc_executor_spin_some.part.0+0x1fe>
 8014fd0:	68ab      	ldr	r3, [r5, #8]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	f000 8093 	beq.w	80150fe <rclc_executor_spin_some.part.0+0x336>
 8014fd8:	2400      	movs	r4, #0
 8014fda:	f240 1991 	movw	r9, #401	@ 0x191
 8014fde:	46a0      	mov	r8, r4
 8014fe0:	e008      	b.n	8014ff4 <rclc_executor_spin_some.part.0+0x22c>
 8014fe2:	f7ff fa57 	bl	8014494 <_rclc_check_for_new_data>
 8014fe6:	4604      	mov	r4, r0
 8014fe8:	b108      	cbz	r0, 8014fee <rclc_executor_spin_some.part.0+0x226>
 8014fea:	4548      	cmp	r0, r9
 8014fec:	d1ee      	bne.n	8014fcc <rclc_executor_spin_some.part.0+0x204>
 8014fee:	68ab      	ldr	r3, [r5, #8]
 8014ff0:	4598      	cmp	r8, r3
 8014ff2:	d266      	bcs.n	80150c2 <rclc_executor_spin_some.part.0+0x2fa>
 8014ff4:	686a      	ldr	r2, [r5, #4]
 8014ff6:	4631      	mov	r1, r6
 8014ff8:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014ffc:	f108 0801 	add.w	r8, r8, #1
 8015000:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8015004:	f1bc 0f00 	cmp.w	ip, #0
 8015008:	d1eb      	bne.n	8014fe2 <rclc_executor_spin_some.part.0+0x21a>
 801500a:	4619      	mov	r1, r3
 801500c:	4610      	mov	r0, r2
 801500e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8015012:	4798      	blx	r3
 8015014:	2800      	cmp	r0, #0
 8015016:	d0d9      	beq.n	8014fcc <rclc_executor_spin_some.part.0+0x204>
 8015018:	68ab      	ldr	r3, [r5, #8]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d0d6      	beq.n	8014fcc <rclc_executor_spin_some.part.0+0x204>
 801501e:	f04f 0a00 	mov.w	sl, #0
 8015022:	f240 1891 	movw	r8, #401	@ 0x191
 8015026:	f240 2959 	movw	r9, #601	@ 0x259
 801502a:	e00e      	b.n	801504a <rclc_executor_spin_some.part.0+0x282>
 801502c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8015030:	2b08      	cmp	r3, #8
 8015032:	d034      	beq.n	801509e <rclc_executor_spin_some.part.0+0x2d6>
 8015034:	2b09      	cmp	r3, #9
 8015036:	d029      	beq.n	801508c <rclc_executor_spin_some.part.0+0x2c4>
 8015038:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 801503c:	bb03      	cbnz	r3, 8015080 <rclc_executor_spin_some.part.0+0x2b8>
 801503e:	f10a 0a01 	add.w	sl, sl, #1
 8015042:	68ab      	ldr	r3, [r5, #8]
 8015044:	459a      	cmp	sl, r3
 8015046:	d2be      	bcs.n	8014fc6 <rclc_executor_spin_some.part.0+0x1fe>
 8015048:	2400      	movs	r4, #0
 801504a:	6868      	ldr	r0, [r5, #4]
 801504c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8015050:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8015054:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8015058:	2b00      	cmp	r3, #0
 801505a:	d0b7      	beq.n	8014fcc <rclc_executor_spin_some.part.0+0x204>
 801505c:	4631      	mov	r1, r6
 801505e:	f7ff fa67 	bl	8014530 <_rclc_take_new_data>
 8015062:	2800      	cmp	r0, #0
 8015064:	bf18      	it	ne
 8015066:	4540      	cmpne	r0, r8
 8015068:	d001      	beq.n	801506e <rclc_executor_spin_some.part.0+0x2a6>
 801506a:	4548      	cmp	r0, r9
 801506c:	d10c      	bne.n	8015088 <rclc_executor_spin_some.part.0+0x2c0>
 801506e:	686b      	ldr	r3, [r5, #4]
 8015070:	eb13 000b 	adds.w	r0, r3, fp
 8015074:	d021      	beq.n	80150ba <rclc_executor_spin_some.part.0+0x2f2>
 8015076:	7842      	ldrb	r2, [r0, #1]
 8015078:	2a00      	cmp	r2, #0
 801507a:	d0d7      	beq.n	801502c <rclc_executor_spin_some.part.0+0x264>
 801507c:	2a01      	cmp	r2, #1
 801507e:	d1de      	bne.n	801503e <rclc_executor_spin_some.part.0+0x276>
 8015080:	f7ff fbca 	bl	8014818 <_rclc_execute.part.0>
 8015084:	2800      	cmp	r0, #0
 8015086:	d0da      	beq.n	801503e <rclc_executor_spin_some.part.0+0x276>
 8015088:	4607      	mov	r7, r0
 801508a:	e79c      	b.n	8014fc6 <rclc_executor_spin_some.part.0+0x1fe>
 801508c:	6843      	ldr	r3, [r0, #4]
 801508e:	6a1a      	ldr	r2, [r3, #32]
 8015090:	2a00      	cmp	r2, #0
 8015092:	d1f5      	bne.n	8015080 <rclc_executor_spin_some.part.0+0x2b8>
 8015094:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8015098:	2b00      	cmp	r3, #0
 801509a:	d0d0      	beq.n	801503e <rclc_executor_spin_some.part.0+0x276>
 801509c:	e7f0      	b.n	8015080 <rclc_executor_spin_some.part.0+0x2b8>
 801509e:	6843      	ldr	r3, [r0, #4]
 80150a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80150a2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80150a6:	d1eb      	bne.n	8015080 <rclc_executor_spin_some.part.0+0x2b8>
 80150a8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80150ac:	2a00      	cmp	r2, #0
 80150ae:	d1e7      	bne.n	8015080 <rclc_executor_spin_some.part.0+0x2b8>
 80150b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d0c2      	beq.n	801503e <rclc_executor_spin_some.part.0+0x276>
 80150b8:	e7e2      	b.n	8015080 <rclc_executor_spin_some.part.0+0x2b8>
 80150ba:	270b      	movs	r7, #11
 80150bc:	e783      	b.n	8014fc6 <rclc_executor_spin_some.part.0+0x1fe>
 80150be:	686a      	ldr	r2, [r5, #4]
 80150c0:	e6e2      	b.n	8014e88 <rclc_executor_spin_some.part.0+0xc0>
 80150c2:	686a      	ldr	r2, [r5, #4]
 80150c4:	e7a1      	b.n	801500a <rclc_executor_spin_some.part.0+0x242>
 80150c6:	6842      	ldr	r2, [r0, #4]
 80150c8:	6a11      	ldr	r1, [r2, #32]
 80150ca:	2900      	cmp	r1, #0
 80150cc:	f47f af22 	bne.w	8014f14 <rclc_executor_spin_some.part.0+0x14c>
 80150d0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80150d4:	2a00      	cmp	r2, #0
 80150d6:	f43f af0b 	beq.w	8014ef0 <rclc_executor_spin_some.part.0+0x128>
 80150da:	e71b      	b.n	8014f14 <rclc_executor_spin_some.part.0+0x14c>
 80150dc:	6842      	ldr	r2, [r0, #4]
 80150de:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80150e0:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 80150e4:	f47f af16 	bne.w	8014f14 <rclc_executor_spin_some.part.0+0x14c>
 80150e8:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 80150ec:	2900      	cmp	r1, #0
 80150ee:	f47f af11 	bne.w	8014f14 <rclc_executor_spin_some.part.0+0x14c>
 80150f2:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 80150f6:	2a00      	cmp	r2, #0
 80150f8:	f43f aefa 	beq.w	8014ef0 <rclc_executor_spin_some.part.0+0x128>
 80150fc:	e70a      	b.n	8014f14 <rclc_executor_spin_some.part.0+0x14c>
 80150fe:	686a      	ldr	r2, [r5, #4]
 8015100:	461c      	mov	r4, r3
 8015102:	e782      	b.n	801500a <rclc_executor_spin_some.part.0+0x242>
 8015104:	686a      	ldr	r2, [r5, #4]
 8015106:	461c      	mov	r4, r3
 8015108:	e6be      	b.n	8014e88 <rclc_executor_spin_some.part.0+0xc0>
 801510a:	bf00      	nop

0801510c <rclc_executor_spin_some>:
 801510c:	b190      	cbz	r0, 8015134 <rclc_executor_spin_some+0x28>
 801510e:	b570      	push	{r4, r5, r6, lr}
 8015110:	4604      	mov	r4, r0
 8015112:	6800      	ldr	r0, [r0, #0]
 8015114:	4616      	mov	r6, r2
 8015116:	461d      	mov	r5, r3
 8015118:	f005 fd36 	bl	801ab88 <rcl_context_is_valid>
 801511c:	b130      	cbz	r0, 801512c <rclc_executor_spin_some+0x20>
 801511e:	4632      	mov	r2, r6
 8015120:	462b      	mov	r3, r5
 8015122:	4620      	mov	r0, r4
 8015124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015128:	f7ff be4e 	b.w	8014dc8 <rclc_executor_spin_some.part.0>
 801512c:	f000 f9ec 	bl	8015508 <rcutils_reset_error>
 8015130:	2001      	movs	r0, #1
 8015132:	bd70      	pop	{r4, r5, r6, pc}
 8015134:	200b      	movs	r0, #11
 8015136:	4770      	bx	lr

08015138 <rclc_executor_handle_counters_zero_init>:
 8015138:	b130      	cbz	r0, 8015148 <rclc_executor_handle_counters_zero_init+0x10>
 801513a:	2220      	movs	r2, #32
 801513c:	2100      	movs	r1, #0
 801513e:	b508      	push	{r3, lr}
 8015140:	f00d f8fa 	bl	8022338 <memset>
 8015144:	2000      	movs	r0, #0
 8015146:	bd08      	pop	{r3, pc}
 8015148:	200b      	movs	r0, #11
 801514a:	4770      	bx	lr
 801514c:	0000      	movs	r0, r0
	...

08015150 <rclc_executor_handle_init>:
 8015150:	4603      	mov	r3, r0
 8015152:	b178      	cbz	r0, 8015174 <rclc_executor_handle_init+0x24>
 8015154:	2200      	movs	r2, #0
 8015156:	f04f 0c0b 	mov.w	ip, #11
 801515a:	6341      	str	r1, [r0, #52]	@ 0x34
 801515c:	4610      	mov	r0, r2
 801515e:	f8a3 c000 	strh.w	ip, [r3]
 8015162:	631a      	str	r2, [r3, #48]	@ 0x30
 8015164:	871a      	strh	r2, [r3, #56]	@ 0x38
 8015166:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8015178 <rclc_executor_handle_init+0x28>
 801516a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801516e:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 8015172:	4770      	bx	lr
 8015174:	200b      	movs	r0, #11
 8015176:	4770      	bx	lr
	...

08015180 <rclc_support_init>:
 8015180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015184:	b086      	sub	sp, #24
 8015186:	b3bb      	cbz	r3, 80151f8 <rclc_support_init+0x78>
 8015188:	4606      	mov	r6, r0
 801518a:	b3a8      	cbz	r0, 80151f8 <rclc_support_init+0x78>
 801518c:	461c      	mov	r4, r3
 801518e:	460f      	mov	r7, r1
 8015190:	4690      	mov	r8, r2
 8015192:	f005 fe65 	bl	801ae60 <rcl_get_zero_initialized_init_options>
 8015196:	f104 050c 	add.w	r5, r4, #12
 801519a:	9005      	str	r0, [sp, #20]
 801519c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151a0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80151a4:	a805      	add	r0, sp, #20
 80151a6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80151aa:	f005 fe5b 	bl	801ae64 <rcl_init_options_init>
 80151ae:	4605      	mov	r5, r0
 80151b0:	b9e0      	cbnz	r0, 80151ec <rclc_support_init+0x6c>
 80151b2:	ad02      	add	r5, sp, #8
 80151b4:	4628      	mov	r0, r5
 80151b6:	f005 fcdd 	bl	801ab74 <rcl_get_zero_initialized_context>
 80151ba:	4633      	mov	r3, r6
 80151bc:	aa05      	add	r2, sp, #20
 80151be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151c2:	e886 0003 	stmia.w	r6, {r0, r1}
 80151c6:	4641      	mov	r1, r8
 80151c8:	4638      	mov	r0, r7
 80151ca:	f005 fd43 	bl	801ac54 <rcl_init>
 80151ce:	4605      	mov	r5, r0
 80151d0:	b9b8      	cbnz	r0, 8015202 <rclc_support_init+0x82>
 80151d2:	4622      	mov	r2, r4
 80151d4:	f106 010c 	add.w	r1, r6, #12
 80151d8:	2003      	movs	r0, #3
 80151da:	60b4      	str	r4, [r6, #8]
 80151dc:	f006 fd66 	bl	801bcac <rcl_clock_init>
 80151e0:	4605      	mov	r5, r0
 80151e2:	b970      	cbnz	r0, 8015202 <rclc_support_init+0x82>
 80151e4:	a805      	add	r0, sp, #20
 80151e6:	f005 fea3 	bl	801af30 <rcl_init_options_fini>
 80151ea:	b108      	cbz	r0, 80151f0 <rclc_support_init+0x70>
 80151ec:	f000 f98c 	bl	8015508 <rcutils_reset_error>
 80151f0:	4628      	mov	r0, r5
 80151f2:	b006      	add	sp, #24
 80151f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f8:	250b      	movs	r5, #11
 80151fa:	4628      	mov	r0, r5
 80151fc:	b006      	add	sp, #24
 80151fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015202:	f000 f981 	bl	8015508 <rcutils_reset_error>
 8015206:	a805      	add	r0, sp, #20
 8015208:	f005 fe92 	bl	801af30 <rcl_init_options_fini>
 801520c:	2800      	cmp	r0, #0
 801520e:	d0ef      	beq.n	80151f0 <rclc_support_init+0x70>
 8015210:	e7ec      	b.n	80151ec <rclc_support_init+0x6c>
 8015212:	bf00      	nop

08015214 <rclc_node_init_default>:
 8015214:	2b00      	cmp	r3, #0
 8015216:	bf18      	it	ne
 8015218:	2a00      	cmpne	r2, #0
 801521a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801521e:	4616      	mov	r6, r2
 8015220:	bf0c      	ite	eq
 8015222:	2201      	moveq	r2, #1
 8015224:	2200      	movne	r2, #0
 8015226:	b0a1      	sub	sp, #132	@ 0x84
 8015228:	2900      	cmp	r1, #0
 801522a:	bf08      	it	eq
 801522c:	f042 0201 	orreq.w	r2, r2, #1
 8015230:	bb22      	cbnz	r2, 801527c <rclc_node_init_default+0x68>
 8015232:	4604      	mov	r4, r0
 8015234:	b310      	cbz	r0, 801527c <rclc_node_init_default+0x68>
 8015236:	f10d 0810 	add.w	r8, sp, #16
 801523a:	461f      	mov	r7, r3
 801523c:	460d      	mov	r5, r1
 801523e:	f10d 0918 	add.w	r9, sp, #24
 8015242:	4640      	mov	r0, r8
 8015244:	f005 ff2e 	bl	801b0a4 <rcl_get_zero_initialized_node>
 8015248:	e898 0003 	ldmia.w	r8, {r0, r1}
 801524c:	e884 0003 	stmia.w	r4, {r0, r1}
 8015250:	4648      	mov	r0, r9
 8015252:	f006 f8a1 	bl	801b398 <rcl_node_get_default_options>
 8015256:	4640      	mov	r0, r8
 8015258:	f005 ff24 	bl	801b0a4 <rcl_get_zero_initialized_node>
 801525c:	f8cd 9000 	str.w	r9, [sp]
 8015260:	463b      	mov	r3, r7
 8015262:	4632      	mov	r2, r6
 8015264:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015268:	e884 0003 	stmia.w	r4, {r0, r1}
 801526c:	4629      	mov	r1, r5
 801526e:	4620      	mov	r0, r4
 8015270:	f005 ff22 	bl	801b0b8 <rcl_node_init>
 8015274:	b930      	cbnz	r0, 8015284 <rclc_node_init_default+0x70>
 8015276:	b021      	add	sp, #132	@ 0x84
 8015278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801527c:	200b      	movs	r0, #11
 801527e:	b021      	add	sp, #132	@ 0x84
 8015280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015284:	9003      	str	r0, [sp, #12]
 8015286:	f000 f93f 	bl	8015508 <rcutils_reset_error>
 801528a:	f000 f93d 	bl	8015508 <rcutils_reset_error>
 801528e:	9803      	ldr	r0, [sp, #12]
 8015290:	b021      	add	sp, #132	@ 0x84
 8015292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015296:	bf00      	nop

08015298 <rclc_publisher_init>:
 8015298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801529c:	b0a1      	sub	sp, #132	@ 0x84
 801529e:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 80152a0:	2e00      	cmp	r6, #0
 80152a2:	bf18      	it	ne
 80152a4:	2b00      	cmpne	r3, #0
 80152a6:	bf0c      	ite	eq
 80152a8:	f04f 0c01 	moveq.w	ip, #1
 80152ac:	f04f 0c00 	movne.w	ip, #0
 80152b0:	2a00      	cmp	r2, #0
 80152b2:	bf08      	it	eq
 80152b4:	f04c 0c01 	orreq.w	ip, ip, #1
 80152b8:	2900      	cmp	r1, #0
 80152ba:	bf08      	it	eq
 80152bc:	f04c 0c01 	orreq.w	ip, ip, #1
 80152c0:	f1bc 0f00 	cmp.w	ip, #0
 80152c4:	d11d      	bne.n	8015302 <rclc_publisher_init+0x6a>
 80152c6:	4604      	mov	r4, r0
 80152c8:	b1d8      	cbz	r0, 8015302 <rclc_publisher_init+0x6a>
 80152ca:	f10d 0910 	add.w	r9, sp, #16
 80152ce:	461f      	mov	r7, r3
 80152d0:	4690      	mov	r8, r2
 80152d2:	460d      	mov	r5, r1
 80152d4:	f7fe ffca 	bl	801426c <rcl_get_zero_initialized_publisher>
 80152d8:	6020      	str	r0, [r4, #0]
 80152da:	4648      	mov	r0, r9
 80152dc:	f7ff f866 	bl	80143ac <rcl_publisher_get_default_options>
 80152e0:	4631      	mov	r1, r6
 80152e2:	2250      	movs	r2, #80	@ 0x50
 80152e4:	4648      	mov	r0, r9
 80152e6:	f00d f946 	bl	8022576 <memcpy>
 80152ea:	463b      	mov	r3, r7
 80152ec:	4642      	mov	r2, r8
 80152ee:	4629      	mov	r1, r5
 80152f0:	4620      	mov	r0, r4
 80152f2:	f8cd 9000 	str.w	r9, [sp]
 80152f6:	f7fe ffbf 	bl	8014278 <rcl_publisher_init>
 80152fa:	b930      	cbnz	r0, 801530a <rclc_publisher_init+0x72>
 80152fc:	b021      	add	sp, #132	@ 0x84
 80152fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015302:	200b      	movs	r0, #11
 8015304:	b021      	add	sp, #132	@ 0x84
 8015306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801530a:	9003      	str	r0, [sp, #12]
 801530c:	f000 f8fc 	bl	8015508 <rcutils_reset_error>
 8015310:	9803      	ldr	r0, [sp, #12]
 8015312:	b021      	add	sp, #132	@ 0x84
 8015314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015318 <rclc_service_init>:
 8015318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801531c:	b09f      	sub	sp, #124	@ 0x7c
 801531e:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8015320:	2e00      	cmp	r6, #0
 8015322:	bf18      	it	ne
 8015324:	2b00      	cmpne	r3, #0
 8015326:	bf0c      	ite	eq
 8015328:	f04f 0c01 	moveq.w	ip, #1
 801532c:	f04f 0c00 	movne.w	ip, #0
 8015330:	2a00      	cmp	r2, #0
 8015332:	bf08      	it	eq
 8015334:	f04c 0c01 	orreq.w	ip, ip, #1
 8015338:	2900      	cmp	r1, #0
 801533a:	bf08      	it	eq
 801533c:	f04c 0c01 	orreq.w	ip, ip, #1
 8015340:	f1bc 0f00 	cmp.w	ip, #0
 8015344:	d11d      	bne.n	8015382 <rclc_service_init+0x6a>
 8015346:	4604      	mov	r4, r0
 8015348:	b1d8      	cbz	r0, 8015382 <rclc_service_init+0x6a>
 801534a:	f10d 0910 	add.w	r9, sp, #16
 801534e:	461f      	mov	r7, r3
 8015350:	4690      	mov	r8, r2
 8015352:	460d      	mov	r5, r1
 8015354:	f006 fa24 	bl	801b7a0 <rcl_get_zero_initialized_service>
 8015358:	6020      	str	r0, [r4, #0]
 801535a:	4648      	mov	r0, r9
 801535c:	f006 fab8 	bl	801b8d0 <rcl_service_get_default_options>
 8015360:	4631      	mov	r1, r6
 8015362:	2250      	movs	r2, #80	@ 0x50
 8015364:	4648      	mov	r0, r9
 8015366:	f00d f906 	bl	8022576 <memcpy>
 801536a:	463b      	mov	r3, r7
 801536c:	4642      	mov	r2, r8
 801536e:	4629      	mov	r1, r5
 8015370:	4620      	mov	r0, r4
 8015372:	f8cd 9000 	str.w	r9, [sp]
 8015376:	f006 fa19 	bl	801b7ac <rcl_service_init>
 801537a:	b930      	cbnz	r0, 801538a <rclc_service_init+0x72>
 801537c:	b01f      	add	sp, #124	@ 0x7c
 801537e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015382:	200b      	movs	r0, #11
 8015384:	b01f      	add	sp, #124	@ 0x7c
 8015386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801538a:	9003      	str	r0, [sp, #12]
 801538c:	f000 f8bc 	bl	8015508 <rcutils_reset_error>
 8015390:	9803      	ldr	r0, [sp, #12]
 8015392:	b01f      	add	sp, #124	@ 0x7c
 8015394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015398 <rclc_subscription_init>:
 8015398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801539c:	b0a1      	sub	sp, #132	@ 0x84
 801539e:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 80153a0:	2e00      	cmp	r6, #0
 80153a2:	bf18      	it	ne
 80153a4:	2b00      	cmpne	r3, #0
 80153a6:	bf0c      	ite	eq
 80153a8:	f04f 0c01 	moveq.w	ip, #1
 80153ac:	f04f 0c00 	movne.w	ip, #0
 80153b0:	2a00      	cmp	r2, #0
 80153b2:	bf08      	it	eq
 80153b4:	f04c 0c01 	orreq.w	ip, ip, #1
 80153b8:	2900      	cmp	r1, #0
 80153ba:	bf08      	it	eq
 80153bc:	f04c 0c01 	orreq.w	ip, ip, #1
 80153c0:	f1bc 0f00 	cmp.w	ip, #0
 80153c4:	d11d      	bne.n	8015402 <rclc_subscription_init+0x6a>
 80153c6:	4604      	mov	r4, r0
 80153c8:	b1d8      	cbz	r0, 8015402 <rclc_subscription_init+0x6a>
 80153ca:	f10d 0910 	add.w	r9, sp, #16
 80153ce:	461f      	mov	r7, r3
 80153d0:	4690      	mov	r8, r2
 80153d2:	460d      	mov	r5, r1
 80153d4:	f006 fb08 	bl	801b9e8 <rcl_get_zero_initialized_subscription>
 80153d8:	6020      	str	r0, [r4, #0]
 80153da:	4648      	mov	r0, r9
 80153dc:	f006 fbb8 	bl	801bb50 <rcl_subscription_get_default_options>
 80153e0:	4631      	mov	r1, r6
 80153e2:	2250      	movs	r2, #80	@ 0x50
 80153e4:	4648      	mov	r0, r9
 80153e6:	f00d f8c6 	bl	8022576 <memcpy>
 80153ea:	463b      	mov	r3, r7
 80153ec:	4642      	mov	r2, r8
 80153ee:	4629      	mov	r1, r5
 80153f0:	4620      	mov	r0, r4
 80153f2:	f8cd 9000 	str.w	r9, [sp]
 80153f6:	f006 fafd 	bl	801b9f4 <rcl_subscription_init>
 80153fa:	b930      	cbnz	r0, 801540a <rclc_subscription_init+0x72>
 80153fc:	b021      	add	sp, #132	@ 0x84
 80153fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015402:	200b      	movs	r0, #11
 8015404:	b021      	add	sp, #132	@ 0x84
 8015406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801540a:	9003      	str	r0, [sp, #12]
 801540c:	f000 f87c 	bl	8015508 <rcutils_reset_error>
 8015410:	9803      	ldr	r0, [sp, #12]
 8015412:	b021      	add	sp, #132	@ 0x84
 8015414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015418 <rclc_timer_init_default>:
 8015418:	b361      	cbz	r1, 8015474 <rclc_timer_init_default+0x5c>
 801541a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801541e:	4606      	mov	r6, r0
 8015420:	b08a      	sub	sp, #40	@ 0x28
 8015422:	b318      	cbz	r0, 801546c <rclc_timer_init_default+0x54>
 8015424:	460d      	mov	r5, r1
 8015426:	4690      	mov	r8, r2
 8015428:	461f      	mov	r7, r3
 801542a:	f006 fe37 	bl	801c09c <rcl_get_zero_initialized_timer>
 801542e:	68ac      	ldr	r4, [r5, #8]
 8015430:	f10d 0c0c 	add.w	ip, sp, #12
 8015434:	6030      	str	r0, [r6, #0]
 8015436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015438:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801543c:	6823      	ldr	r3, [r4, #0]
 801543e:	462a      	mov	r2, r5
 8015440:	f105 010c 	add.w	r1, r5, #12
 8015444:	4630      	mov	r0, r6
 8015446:	f8cc 3000 	str.w	r3, [ip]
 801544a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801544c:	e9cd 8700 	strd	r8, r7, [sp]
 8015450:	9302      	str	r3, [sp, #8]
 8015452:	f006 fe29 	bl	801c0a8 <rcl_timer_init>
 8015456:	b910      	cbnz	r0, 801545e <rclc_timer_init_default+0x46>
 8015458:	b00a      	add	sp, #40	@ 0x28
 801545a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801545e:	9009      	str	r0, [sp, #36]	@ 0x24
 8015460:	f000 f852 	bl	8015508 <rcutils_reset_error>
 8015464:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015466:	b00a      	add	sp, #40	@ 0x28
 8015468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801546c:	200b      	movs	r0, #11
 801546e:	b00a      	add	sp, #40	@ 0x28
 8015470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015474:	200b      	movs	r0, #11
 8015476:	4770      	bx	lr

08015478 <__default_zero_allocate>:
 8015478:	f00c ba86 	b.w	8021988 <calloc>

0801547c <__default_reallocate>:
 801547c:	f00c bc24 	b.w	8021cc8 <realloc>

08015480 <__default_deallocate>:
 8015480:	f00c bb00 	b.w	8021a84 <free>

08015484 <__default_allocate>:
 8015484:	f00c baf6 	b.w	8021a74 <malloc>

08015488 <rcutils_get_zero_initialized_allocator>:
 8015488:	b510      	push	{r4, lr}
 801548a:	4c05      	ldr	r4, [pc, #20]	@ (80154a0 <rcutils_get_zero_initialized_allocator+0x18>)
 801548c:	4686      	mov	lr, r0
 801548e:	4684      	mov	ip, r0
 8015490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015492:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015496:	6823      	ldr	r3, [r4, #0]
 8015498:	4670      	mov	r0, lr
 801549a:	f8cc 3000 	str.w	r3, [ip]
 801549e:	bd10      	pop	{r4, pc}
 80154a0:	08024870 	.word	0x08024870

080154a4 <rcutils_get_default_allocator>:
 80154a4:	b510      	push	{r4, lr}
 80154a6:	4c05      	ldr	r4, [pc, #20]	@ (80154bc <rcutils_get_default_allocator+0x18>)
 80154a8:	4686      	mov	lr, r0
 80154aa:	4684      	mov	ip, r0
 80154ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154b2:	6823      	ldr	r3, [r4, #0]
 80154b4:	4670      	mov	r0, lr
 80154b6:	f8cc 3000 	str.w	r3, [ip]
 80154ba:	bd10      	pop	{r4, pc}
 80154bc:	24000dfc 	.word	0x24000dfc

080154c0 <rcutils_allocator_is_valid>:
 80154c0:	b158      	cbz	r0, 80154da <rcutils_allocator_is_valid+0x1a>
 80154c2:	6803      	ldr	r3, [r0, #0]
 80154c4:	b143      	cbz	r3, 80154d8 <rcutils_allocator_is_valid+0x18>
 80154c6:	6843      	ldr	r3, [r0, #4]
 80154c8:	b133      	cbz	r3, 80154d8 <rcutils_allocator_is_valid+0x18>
 80154ca:	68c3      	ldr	r3, [r0, #12]
 80154cc:	b123      	cbz	r3, 80154d8 <rcutils_allocator_is_valid+0x18>
 80154ce:	6880      	ldr	r0, [r0, #8]
 80154d0:	3800      	subs	r0, #0
 80154d2:	bf18      	it	ne
 80154d4:	2001      	movne	r0, #1
 80154d6:	4770      	bx	lr
 80154d8:	4618      	mov	r0, r3
 80154da:	4770      	bx	lr

080154dc <rcutils_get_error_string>:
 80154dc:	4b06      	ldr	r3, [pc, #24]	@ (80154f8 <rcutils_get_error_string+0x1c>)
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	b13b      	cbz	r3, 80154f2 <rcutils_get_error_string+0x16>
 80154e2:	4b06      	ldr	r3, [pc, #24]	@ (80154fc <rcutils_get_error_string+0x20>)
 80154e4:	781a      	ldrb	r2, [r3, #0]
 80154e6:	b90a      	cbnz	r2, 80154ec <rcutils_get_error_string+0x10>
 80154e8:	2201      	movs	r2, #1
 80154ea:	701a      	strb	r2, [r3, #0]
 80154ec:	4b04      	ldr	r3, [pc, #16]	@ (8015500 <rcutils_get_error_string+0x24>)
 80154ee:	7818      	ldrb	r0, [r3, #0]
 80154f0:	4770      	bx	lr
 80154f2:	4b04      	ldr	r3, [pc, #16]	@ (8015504 <rcutils_get_error_string+0x28>)
 80154f4:	7818      	ldrb	r0, [r3, #0]
 80154f6:	4770      	bx	lr
 80154f8:	24064a50 	.word	0x24064a50
 80154fc:	24064a69 	.word	0x24064a69
 8015500:	24064a68 	.word	0x24064a68
 8015504:	08024884 	.word	0x08024884

08015508 <rcutils_reset_error>:
 8015508:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8015528 <rcutils_reset_error+0x20>
 801550c:	2300      	movs	r3, #0
 801550e:	4a08      	ldr	r2, [pc, #32]	@ (8015530 <rcutils_reset_error+0x28>)
 8015510:	4808      	ldr	r0, [pc, #32]	@ (8015534 <rcutils_reset_error+0x2c>)
 8015512:	8013      	strh	r3, [r2, #0]
 8015514:	4908      	ldr	r1, [pc, #32]	@ (8015538 <rcutils_reset_error+0x30>)
 8015516:	7003      	strb	r3, [r0, #0]
 8015518:	700b      	strb	r3, [r1, #0]
 801551a:	ed82 7b02 	vstr	d7, [r2, #8]
 801551e:	4a07      	ldr	r2, [pc, #28]	@ (801553c <rcutils_reset_error+0x34>)
 8015520:	7013      	strb	r3, [r2, #0]
 8015522:	4770      	bx	lr
 8015524:	f3af 8000 	nop.w
	...
 8015530:	24064a58 	.word	0x24064a58
 8015534:	24064a69 	.word	0x24064a69
 8015538:	24064a68 	.word	0x24064a68
 801553c:	24064a50 	.word	0x24064a50

08015540 <rcutils_system_time_now>:
 8015540:	b300      	cbz	r0, 8015584 <rcutils_system_time_now+0x44>
 8015542:	b570      	push	{r4, r5, r6, lr}
 8015544:	b084      	sub	sp, #16
 8015546:	4604      	mov	r4, r0
 8015548:	2001      	movs	r0, #1
 801554a:	4669      	mov	r1, sp
 801554c:	f7ec fef8 	bl	8002340 <clock_gettime>
 8015550:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015554:	2900      	cmp	r1, #0
 8015556:	db12      	blt.n	801557e <rcutils_system_time_now+0x3e>
 8015558:	ea53 0201 	orrs.w	r2, r3, r1
 801555c:	9d02      	ldr	r5, [sp, #8]
 801555e:	d101      	bne.n	8015564 <rcutils_system_time_now+0x24>
 8015560:	2d00      	cmp	r5, #0
 8015562:	db0c      	blt.n	801557e <rcutils_system_time_now+0x3e>
 8015564:	4e08      	ldr	r6, [pc, #32]	@ (8015588 <rcutils_system_time_now+0x48>)
 8015566:	2000      	movs	r0, #0
 8015568:	fba3 3206 	umull	r3, r2, r3, r6
 801556c:	195b      	adds	r3, r3, r5
 801556e:	fb06 2201 	mla	r2, r6, r1, r2
 8015572:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8015576:	e9c4 3200 	strd	r3, r2, [r4]
 801557a:	b004      	add	sp, #16
 801557c:	bd70      	pop	{r4, r5, r6, pc}
 801557e:	2002      	movs	r0, #2
 8015580:	b004      	add	sp, #16
 8015582:	bd70      	pop	{r4, r5, r6, pc}
 8015584:	200b      	movs	r0, #11
 8015586:	4770      	bx	lr
 8015588:	3b9aca00 	.word	0x3b9aca00

0801558c <rcutils_steady_time_now>:
 801558c:	b300      	cbz	r0, 80155d0 <rcutils_steady_time_now+0x44>
 801558e:	b570      	push	{r4, r5, r6, lr}
 8015590:	b084      	sub	sp, #16
 8015592:	4604      	mov	r4, r0
 8015594:	2000      	movs	r0, #0
 8015596:	4669      	mov	r1, sp
 8015598:	f7ec fed2 	bl	8002340 <clock_gettime>
 801559c:	e9dd 3100 	ldrd	r3, r1, [sp]
 80155a0:	2900      	cmp	r1, #0
 80155a2:	db12      	blt.n	80155ca <rcutils_steady_time_now+0x3e>
 80155a4:	ea53 0201 	orrs.w	r2, r3, r1
 80155a8:	9d02      	ldr	r5, [sp, #8]
 80155aa:	d101      	bne.n	80155b0 <rcutils_steady_time_now+0x24>
 80155ac:	2d00      	cmp	r5, #0
 80155ae:	db0c      	blt.n	80155ca <rcutils_steady_time_now+0x3e>
 80155b0:	4e08      	ldr	r6, [pc, #32]	@ (80155d4 <rcutils_steady_time_now+0x48>)
 80155b2:	2000      	movs	r0, #0
 80155b4:	fba3 3206 	umull	r3, r2, r3, r6
 80155b8:	195b      	adds	r3, r3, r5
 80155ba:	fb06 2201 	mla	r2, r6, r1, r2
 80155be:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80155c2:	e9c4 3200 	strd	r3, r2, [r4]
 80155c6:	b004      	add	sp, #16
 80155c8:	bd70      	pop	{r4, r5, r6, pc}
 80155ca:	2002      	movs	r0, #2
 80155cc:	b004      	add	sp, #16
 80155ce:	bd70      	pop	{r4, r5, r6, pc}
 80155d0:	200b      	movs	r0, #11
 80155d2:	4770      	bx	lr
 80155d4:	3b9aca00 	.word	0x3b9aca00

080155d8 <rmw_get_default_publisher_options>:
 80155d8:	2200      	movs	r2, #0
 80155da:	6002      	str	r2, [r0, #0]
 80155dc:	7102      	strb	r2, [r0, #4]
 80155de:	4770      	bx	lr

080155e0 <rmw_uros_set_custom_transport>:
 80155e0:	b470      	push	{r4, r5, r6}
 80155e2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80155e6:	b162      	cbz	r2, 8015602 <rmw_uros_set_custom_transport+0x22>
 80155e8:	b15b      	cbz	r3, 8015602 <rmw_uros_set_custom_transport+0x22>
 80155ea:	b155      	cbz	r5, 8015602 <rmw_uros_set_custom_transport+0x22>
 80155ec:	b14e      	cbz	r6, 8015602 <rmw_uros_set_custom_transport+0x22>
 80155ee:	4c06      	ldr	r4, [pc, #24]	@ (8015608 <rmw_uros_set_custom_transport+0x28>)
 80155f0:	7020      	strb	r0, [r4, #0]
 80155f2:	2000      	movs	r0, #0
 80155f4:	6166      	str	r6, [r4, #20]
 80155f6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80155fa:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80155fe:	bc70      	pop	{r4, r5, r6}
 8015600:	4770      	bx	lr
 8015602:	200b      	movs	r0, #11
 8015604:	bc70      	pop	{r4, r5, r6}
 8015606:	4770      	bx	lr
 8015608:	24064a6c 	.word	0x24064a6c

0801560c <rmw_uros_ping_agent>:
 801560c:	4b1f      	ldr	r3, [pc, #124]	@ (801568c <rmw_uros_ping_agent+0x80>)
 801560e:	7b1a      	ldrb	r2, [r3, #12]
 8015610:	b570      	push	{r4, r5, r6, lr}
 8015612:	4605      	mov	r5, r0
 8015614:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8015618:	460e      	mov	r6, r1
 801561a:	b192      	cbz	r2, 8015642 <rmw_uros_ping_agent+0x36>
 801561c:	681c      	ldr	r4, [r3, #0]
 801561e:	b184      	cbz	r4, 8015642 <rmw_uros_ping_agent+0x36>
 8015620:	68a0      	ldr	r0, [r4, #8]
 8015622:	4632      	mov	r2, r6
 8015624:	4629      	mov	r1, r5
 8015626:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801562a:	f001 ff45 	bl	80174b8 <uxr_ping_agent_session>
 801562e:	6864      	ldr	r4, [r4, #4]
 8015630:	f080 0301 	eor.w	r3, r0, #1
 8015634:	b2d8      	uxtb	r0, r3
 8015636:	b10c      	cbz	r4, 801563c <rmw_uros_ping_agent+0x30>
 8015638:	2800      	cmp	r0, #0
 801563a:	d1f1      	bne.n	8015620 <rmw_uros_ping_agent+0x14>
 801563c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015640:	bd70      	pop	{r4, r5, r6, pc}
 8015642:	4b13      	ldr	r3, [pc, #76]	@ (8015690 <rmw_uros_ping_agent+0x84>)
 8015644:	2100      	movs	r1, #0
 8015646:	781a      	ldrb	r2, [r3, #0]
 8015648:	6918      	ldr	r0, [r3, #16]
 801564a:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 801564e:	685a      	ldr	r2, [r3, #4]
 8015650:	909c      	str	r0, [sp, #624]	@ 0x270
 8015652:	92a3      	str	r2, [sp, #652]	@ 0x28c
 8015654:	6958      	ldr	r0, [r3, #20]
 8015656:	68da      	ldr	r2, [r3, #12]
 8015658:	689b      	ldr	r3, [r3, #8]
 801565a:	929b      	str	r2, [sp, #620]	@ 0x26c
 801565c:	466a      	mov	r2, sp
 801565e:	909d      	str	r0, [sp, #628]	@ 0x274
 8015660:	4608      	mov	r0, r1
 8015662:	939a      	str	r3, [sp, #616]	@ 0x268
 8015664:	f000 f9c6 	bl	80159f4 <rmw_uxrce_transport_init>
 8015668:	2800      	cmp	r0, #0
 801566a:	d1e7      	bne.n	801563c <rmw_uros_ping_agent+0x30>
 801566c:	4632      	mov	r2, r6
 801566e:	4629      	mov	r1, r5
 8015670:	a89e      	add	r0, sp, #632	@ 0x278
 8015672:	f001 ff6d 	bl	8017550 <uxr_ping_agent_attempts>
 8015676:	4604      	mov	r4, r0
 8015678:	4668      	mov	r0, sp
 801567a:	f001 fee9 	bl	8017450 <uxr_close_custom_transport>
 801567e:	f084 0301 	eor.w	r3, r4, #1
 8015682:	b2d8      	uxtb	r0, r3
 8015684:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015688:	bd70      	pop	{r4, r5, r6, pc}
 801568a:	bf00      	nop
 801568c:	24069384 	.word	0x24069384
 8015690:	24064a6c 	.word	0x24064a6c

08015694 <flush_session>:
 8015694:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8015696:	f002 bcef 	b.w	8018078 <uxr_run_session_until_confirm_delivery>
 801569a:	bf00      	nop

0801569c <rmw_publish>:
 801569c:	2800      	cmp	r0, #0
 801569e:	d053      	beq.n	8015748 <rmw_publish+0xac>
 80156a0:	b570      	push	{r4, r5, r6, lr}
 80156a2:	460d      	mov	r5, r1
 80156a4:	b08e      	sub	sp, #56	@ 0x38
 80156a6:	2900      	cmp	r1, #0
 80156a8:	d04b      	beq.n	8015742 <rmw_publish+0xa6>
 80156aa:	4604      	mov	r4, r0
 80156ac:	6800      	ldr	r0, [r0, #0]
 80156ae:	f000 fdcf 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 80156b2:	2800      	cmp	r0, #0
 80156b4:	d045      	beq.n	8015742 <rmw_publish+0xa6>
 80156b6:	6866      	ldr	r6, [r4, #4]
 80156b8:	2e00      	cmp	r6, #0
 80156ba:	d042      	beq.n	8015742 <rmw_publish+0xa6>
 80156bc:	69b4      	ldr	r4, [r6, #24]
 80156be:	4628      	mov	r0, r5
 80156c0:	6923      	ldr	r3, [r4, #16]
 80156c2:	4798      	blx	r3
 80156c4:	69f3      	ldr	r3, [r6, #28]
 80156c6:	9005      	str	r0, [sp, #20]
 80156c8:	b113      	cbz	r3, 80156d0 <rmw_publish+0x34>
 80156ca:	a805      	add	r0, sp, #20
 80156cc:	4798      	blx	r3
 80156ce:	9805      	ldr	r0, [sp, #20]
 80156d0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80156d4:	691b      	ldr	r3, [r3, #16]
 80156d6:	9000      	str	r0, [sp, #0]
 80156d8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80156dc:	6972      	ldr	r2, [r6, #20]
 80156de:	ab06      	add	r3, sp, #24
 80156e0:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80156e2:	f003 ffc3 	bl	801966c <uxr_prepare_output_stream>
 80156e6:	b1d8      	cbz	r0, 8015720 <rmw_publish+0x84>
 80156e8:	68a3      	ldr	r3, [r4, #8]
 80156ea:	a906      	add	r1, sp, #24
 80156ec:	4628      	mov	r0, r5
 80156ee:	4798      	blx	r3
 80156f0:	6a33      	ldr	r3, [r6, #32]
 80156f2:	4604      	mov	r4, r0
 80156f4:	b10b      	cbz	r3, 80156fa <rmw_publish+0x5e>
 80156f6:	a806      	add	r0, sp, #24
 80156f8:	4798      	blx	r3
 80156fa:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80156fe:	2b01      	cmp	r3, #1
 8015700:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015704:	d022      	beq.n	801574c <rmw_publish+0xb0>
 8015706:	6918      	ldr	r0, [r3, #16]
 8015708:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 801570a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801570e:	f002 fcb3 	bl	8018078 <uxr_run_session_until_confirm_delivery>
 8015712:	4020      	ands	r0, r4
 8015714:	b2c4      	uxtb	r4, r0
 8015716:	f084 0001 	eor.w	r0, r4, #1
 801571a:	b2c0      	uxtb	r0, r0
 801571c:	b00e      	add	sp, #56	@ 0x38
 801571e:	bd70      	pop	{r4, r5, r6, pc}
 8015720:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015724:	6918      	ldr	r0, [r3, #16]
 8015726:	9b05      	ldr	r3, [sp, #20]
 8015728:	9602      	str	r6, [sp, #8]
 801572a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801572e:	9300      	str	r3, [sp, #0]
 8015730:	4b09      	ldr	r3, [pc, #36]	@ (8015758 <rmw_publish+0xbc>)
 8015732:	9301      	str	r3, [sp, #4]
 8015734:	ab06      	add	r3, sp, #24
 8015736:	6972      	ldr	r2, [r6, #20]
 8015738:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801573a:	f003 ffc7 	bl	80196cc <uxr_prepare_output_stream_fragmented>
 801573e:	2800      	cmp	r0, #0
 8015740:	d1d2      	bne.n	80156e8 <rmw_publish+0x4c>
 8015742:	2001      	movs	r0, #1
 8015744:	b00e      	add	sp, #56	@ 0x38
 8015746:	bd70      	pop	{r4, r5, r6, pc}
 8015748:	2001      	movs	r0, #1
 801574a:	4770      	bx	lr
 801574c:	6918      	ldr	r0, [r3, #16]
 801574e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015752:	f002 f8d7 	bl	8017904 <uxr_flash_output_streams>
 8015756:	e7de      	b.n	8015716 <rmw_publish+0x7a>
 8015758:	08015695 	.word	0x08015695

0801575c <rmw_create_publisher>:
 801575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015760:	b087      	sub	sp, #28
 8015762:	2800      	cmp	r0, #0
 8015764:	f000 80d2 	beq.w	801590c <rmw_create_publisher+0x1b0>
 8015768:	460e      	mov	r6, r1
 801576a:	2900      	cmp	r1, #0
 801576c:	f000 80ce 	beq.w	801590c <rmw_create_publisher+0x1b0>
 8015770:	4604      	mov	r4, r0
 8015772:	6800      	ldr	r0, [r0, #0]
 8015774:	4615      	mov	r5, r2
 8015776:	461f      	mov	r7, r3
 8015778:	f000 fd6a 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801577c:	f080 0001 	eor.w	r0, r0, #1
 8015780:	b2c0      	uxtb	r0, r0
 8015782:	2800      	cmp	r0, #0
 8015784:	f040 80c2 	bne.w	801590c <rmw_create_publisher+0x1b0>
 8015788:	2d00      	cmp	r5, #0
 801578a:	f000 80bf 	beq.w	801590c <rmw_create_publisher+0x1b0>
 801578e:	782b      	ldrb	r3, [r5, #0]
 8015790:	2b00      	cmp	r3, #0
 8015792:	f000 80bb 	beq.w	801590c <rmw_create_publisher+0x1b0>
 8015796:	2f00      	cmp	r7, #0
 8015798:	f000 80b8 	beq.w	801590c <rmw_create_publisher+0x1b0>
 801579c:	485e      	ldr	r0, [pc, #376]	@ (8015918 <rmw_create_publisher+0x1bc>)
 801579e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80157a2:	f008 ffab 	bl	801e6fc <get_memory>
 80157a6:	2800      	cmp	r0, #0
 80157a8:	f000 80b0 	beq.w	801590c <rmw_create_publisher+0x1b0>
 80157ac:	6884      	ldr	r4, [r0, #8]
 80157ae:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80157b2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80157b6:	f009 f809 	bl	801e7cc <rmw_get_implementation_identifier>
 80157ba:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80157be:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80157c2:	4628      	mov	r0, r5
 80157c4:	f7ea fd96 	bl	80002f4 <strlen>
 80157c8:	3001      	adds	r0, #1
 80157ca:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 80157ce:	283c      	cmp	r0, #60	@ 0x3c
 80157d0:	f200 808f 	bhi.w	80158f2 <rmw_create_publisher+0x196>
 80157d4:	462b      	mov	r3, r5
 80157d6:	4a51      	ldr	r2, [pc, #324]	@ (801591c <rmw_create_publisher+0x1c0>)
 80157d8:	213c      	movs	r1, #60	@ 0x3c
 80157da:	4650      	mov	r0, sl
 80157dc:	f00c fc3e 	bl	802205c <sniprintf>
 80157e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80157e4:	4639      	mov	r1, r7
 80157e6:	2250      	movs	r2, #80	@ 0x50
 80157e8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80157ea:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80157ee:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80157f2:	f00c fec0 	bl	8022576 <memcpy>
 80157f6:	7a3b      	ldrb	r3, [r7, #8]
 80157f8:	4630      	mov	r0, r6
 80157fa:	4949      	ldr	r1, [pc, #292]	@ (8015920 <rmw_create_publisher+0x1c4>)
 80157fc:	2b02      	cmp	r3, #2
 80157fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015802:	bf0c      	ite	eq
 8015804:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8015808:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 801580c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801580e:	2300      	movs	r3, #0
 8015810:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015814:	f000 fd98 	bl	8016348 <get_message_typesupport_handle>
 8015818:	2800      	cmp	r0, #0
 801581a:	d06a      	beq.n	80158f2 <rmw_create_publisher+0x196>
 801581c:	6842      	ldr	r2, [r0, #4]
 801581e:	61a2      	str	r2, [r4, #24]
 8015820:	2a00      	cmp	r2, #0
 8015822:	d066      	beq.n	80158f2 <rmw_create_publisher+0x196>
 8015824:	4629      	mov	r1, r5
 8015826:	463b      	mov	r3, r7
 8015828:	4648      	mov	r0, r9
 801582a:	f009 fa3b 	bl	801eca4 <create_topic>
 801582e:	6260      	str	r0, [r4, #36]	@ 0x24
 8015830:	2800      	cmp	r0, #0
 8015832:	d062      	beq.n	80158fa <rmw_create_publisher+0x19e>
 8015834:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015838:	2103      	movs	r1, #3
 801583a:	2506      	movs	r5, #6
 801583c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015840:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8015844:	1c42      	adds	r2, r0, #1
 8015846:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801584a:	f001 fe05 	bl	8017458 <uxr_object_id>
 801584e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8015852:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015856:	6120      	str	r0, [r4, #16]
 8015858:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 801585c:	6910      	ldr	r0, [r2, #16]
 801585e:	9500      	str	r5, [sp, #0]
 8015860:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015864:	6819      	ldr	r1, [r3, #0]
 8015866:	6922      	ldr	r2, [r4, #16]
 8015868:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801586c:	f001 fbae 	bl	8016fcc <uxr_buffer_create_publisher_bin>
 8015870:	4602      	mov	r2, r0
 8015872:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015876:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801587a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801587e:	f000 fbd5 	bl	801602c <run_xrce_session>
 8015882:	b3b0      	cbz	r0, 80158f2 <rmw_create_publisher+0x196>
 8015884:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015888:	2105      	movs	r1, #5
 801588a:	f10d 0a10 	add.w	sl, sp, #16
 801588e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015892:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8015896:	1c42      	adds	r2, r0, #1
 8015898:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801589c:	f001 fddc 	bl	8017458 <uxr_object_id>
 80158a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80158a4:	4639      	mov	r1, r7
 80158a6:	6160      	str	r0, [r4, #20]
 80158a8:	691e      	ldr	r6, [r3, #16]
 80158aa:	4650      	mov	r0, sl
 80158ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80158b0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80158b4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80158b8:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 80158bc:	f000 fbd2 	bl	8016064 <convert_qos_profile>
 80158c0:	9503      	str	r5, [sp, #12]
 80158c2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80158c6:	9001      	str	r0, [sp, #4]
 80158c8:	4630      	mov	r0, r6
 80158ca:	f8ad 1008 	strh.w	r1, [sp, #8]
 80158ce:	f8db 3010 	ldr.w	r3, [fp, #16]
 80158d2:	9300      	str	r3, [sp, #0]
 80158d4:	6839      	ldr	r1, [r7, #0]
 80158d6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80158da:	f001 fbd7 	bl	801708c <uxr_buffer_create_datawriter_bin>
 80158de:	4602      	mov	r2, r0
 80158e0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80158e4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80158e8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80158ec:	f000 fb9e 	bl	801602c <run_xrce_session>
 80158f0:	b970      	cbnz	r0, 8015910 <rmw_create_publisher+0x1b4>
 80158f2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80158f4:	b108      	cbz	r0, 80158fa <rmw_create_publisher+0x19e>
 80158f6:	f000 fa8b 	bl	8015e10 <rmw_uxrce_fini_topic_memory>
 80158fa:	4640      	mov	r0, r8
 80158fc:	f04f 0800 	mov.w	r8, #0
 8015900:	f000 fa2e 	bl	8015d60 <rmw_uxrce_fini_publisher_memory>
 8015904:	4640      	mov	r0, r8
 8015906:	b007      	add	sp, #28
 8015908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801590c:	f04f 0800 	mov.w	r8, #0
 8015910:	4640      	mov	r0, r8
 8015912:	b007      	add	sp, #28
 8015914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015918:	24069364 	.word	0x24069364
 801591c:	08024898 	.word	0x08024898
 8015920:	080236c8 	.word	0x080236c8

08015924 <rmw_publisher_get_actual_qos>:
 8015924:	b178      	cbz	r0, 8015946 <rmw_publisher_get_actual_qos+0x22>
 8015926:	b510      	push	{r4, lr}
 8015928:	fab1 f481 	clz	r4, r1
 801592c:	0964      	lsrs	r4, r4, #5
 801592e:	b141      	cbz	r1, 8015942 <rmw_publisher_get_actual_qos+0x1e>
 8015930:	6843      	ldr	r3, [r0, #4]
 8015932:	2250      	movs	r2, #80	@ 0x50
 8015934:	4608      	mov	r0, r1
 8015936:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801593a:	f00c fe1c 	bl	8022576 <memcpy>
 801593e:	4620      	mov	r0, r4
 8015940:	bd10      	pop	{r4, pc}
 8015942:	200b      	movs	r0, #11
 8015944:	bd10      	pop	{r4, pc}
 8015946:	200b      	movs	r0, #11
 8015948:	4770      	bx	lr
 801594a:	bf00      	nop

0801594c <rmw_destroy_publisher>:
 801594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015950:	b128      	cbz	r0, 801595e <rmw_destroy_publisher+0x12>
 8015952:	4604      	mov	r4, r0
 8015954:	6800      	ldr	r0, [r0, #0]
 8015956:	460d      	mov	r5, r1
 8015958:	f000 fc7a 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801595c:	b918      	cbnz	r0, 8015966 <rmw_destroy_publisher+0x1a>
 801595e:	2401      	movs	r4, #1
 8015960:	4620      	mov	r0, r4
 8015962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015966:	6863      	ldr	r3, [r4, #4]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d0f8      	beq.n	801595e <rmw_destroy_publisher+0x12>
 801596c:	fab5 f485 	clz	r4, r5
 8015970:	0964      	lsrs	r4, r4, #5
 8015972:	2d00      	cmp	r5, #0
 8015974:	d0f3      	beq.n	801595e <rmw_destroy_publisher+0x12>
 8015976:	6828      	ldr	r0, [r5, #0]
 8015978:	f000 fc6a 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801597c:	2800      	cmp	r0, #0
 801597e:	d0ee      	beq.n	801595e <rmw_destroy_publisher+0x12>
 8015980:	686e      	ldr	r6, [r5, #4]
 8015982:	2e00      	cmp	r6, #0
 8015984:	d0eb      	beq.n	801595e <rmw_destroy_publisher+0x12>
 8015986:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8015988:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 801598c:	f009 f9da 	bl	801ed44 <destroy_topic>
 8015990:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015994:	6972      	ldr	r2, [r6, #20]
 8015996:	6918      	ldr	r0, [r3, #16]
 8015998:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801599c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159a0:	6819      	ldr	r1, [r3, #0]
 80159a2:	f001 fa5f 	bl	8016e64 <uxr_buffer_delete_entity>
 80159a6:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80159aa:	4680      	mov	r8, r0
 80159ac:	6932      	ldr	r2, [r6, #16]
 80159ae:	6918      	ldr	r0, [r3, #16]
 80159b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80159b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159b8:	6819      	ldr	r1, [r3, #0]
 80159ba:	f001 fa53 	bl	8016e64 <uxr_buffer_delete_entity>
 80159be:	4606      	mov	r6, r0
 80159c0:	6938      	ldr	r0, [r7, #16]
 80159c2:	4642      	mov	r2, r8
 80159c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80159c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80159cc:	f000 fb2e 	bl	801602c <run_xrce_session>
 80159d0:	693f      	ldr	r7, [r7, #16]
 80159d2:	4632      	mov	r2, r6
 80159d4:	4606      	mov	r6, r0
 80159d6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80159da:	4638      	mov	r0, r7
 80159dc:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80159e0:	f000 fb24 	bl	801602c <run_xrce_session>
 80159e4:	b126      	cbz	r6, 80159f0 <rmw_destroy_publisher+0xa4>
 80159e6:	b118      	cbz	r0, 80159f0 <rmw_destroy_publisher+0xa4>
 80159e8:	4628      	mov	r0, r5
 80159ea:	f000 f9b9 	bl	8015d60 <rmw_uxrce_fini_publisher_memory>
 80159ee:	e7b7      	b.n	8015960 <rmw_destroy_publisher+0x14>
 80159f0:	2402      	movs	r4, #2
 80159f2:	e7f9      	b.n	80159e8 <rmw_destroy_publisher+0x9c>

080159f4 <rmw_uxrce_transport_init>:
 80159f4:	b508      	push	{r3, lr}
 80159f6:	b108      	cbz	r0, 80159fc <rmw_uxrce_transport_init+0x8>
 80159f8:	f100 0210 	add.w	r2, r0, #16
 80159fc:	b139      	cbz	r1, 8015a0e <rmw_uxrce_transport_init+0x1a>
 80159fe:	6949      	ldr	r1, [r1, #20]
 8015a00:	4610      	mov	r0, r2
 8015a02:	f001 fcf1 	bl	80173e8 <uxr_init_custom_transport>
 8015a06:	f080 0001 	eor.w	r0, r0, #1
 8015a0a:	b2c0      	uxtb	r0, r0
 8015a0c:	bd08      	pop	{r3, pc}
 8015a0e:	4b04      	ldr	r3, [pc, #16]	@ (8015a20 <rmw_uxrce_transport_init+0x2c>)
 8015a10:	4610      	mov	r0, r2
 8015a12:	6859      	ldr	r1, [r3, #4]
 8015a14:	f001 fce8 	bl	80173e8 <uxr_init_custom_transport>
 8015a18:	f080 0001 	eor.w	r0, r0, #1
 8015a1c:	b2c0      	uxtb	r0, r0
 8015a1e:	bd08      	pop	{r3, pc}
 8015a20:	24064a6c 	.word	0x24064a6c

08015a24 <rmw_uros_epoch_nanos>:
 8015a24:	4b05      	ldr	r3, [pc, #20]	@ (8015a3c <rmw_uros_epoch_nanos+0x18>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	b123      	cbz	r3, 8015a34 <rmw_uros_epoch_nanos+0x10>
 8015a2a:	6898      	ldr	r0, [r3, #8]
 8015a2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a30:	f001 bf5e 	b.w	80178f0 <uxr_epoch_nanos>
 8015a34:	2000      	movs	r0, #0
 8015a36:	2100      	movs	r1, #0
 8015a38:	4770      	bx	lr
 8015a3a:	bf00      	nop
 8015a3c:	24069384 	.word	0x24069384

08015a40 <rmw_uros_sync_session>:
 8015a40:	b508      	push	{r3, lr}
 8015a42:	4b07      	ldr	r3, [pc, #28]	@ (8015a60 <rmw_uros_sync_session+0x20>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	b14b      	cbz	r3, 8015a5c <rmw_uros_sync_session+0x1c>
 8015a48:	4601      	mov	r1, r0
 8015a4a:	6898      	ldr	r0, [r3, #8]
 8015a4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a50:	f002 fb8e 	bl	8018170 <uxr_sync_session>
 8015a54:	f080 0001 	eor.w	r0, r0, #1
 8015a58:	b2c0      	uxtb	r0, r0
 8015a5a:	bd08      	pop	{r3, pc}
 8015a5c:	2001      	movs	r0, #1
 8015a5e:	bd08      	pop	{r3, pc}
 8015a60:	24069384 	.word	0x24069384

08015a64 <rmw_uxrce_init_service_memory>:
 8015a64:	b1e2      	cbz	r2, 8015aa0 <rmw_uxrce_init_service_memory+0x3c>
 8015a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a6a:	7b05      	ldrb	r5, [r0, #12]
 8015a6c:	4606      	mov	r6, r0
 8015a6e:	b9ad      	cbnz	r5, 8015a9c <rmw_uxrce_init_service_memory+0x38>
 8015a70:	23c8      	movs	r3, #200	@ 0xc8
 8015a72:	4617      	mov	r7, r2
 8015a74:	460c      	mov	r4, r1
 8015a76:	46a8      	mov	r8, r5
 8015a78:	6083      	str	r3, [r0, #8]
 8015a7a:	f240 1301 	movw	r3, #257	@ 0x101
 8015a7e:	e9c0 5500 	strd	r5, r5, [r0]
 8015a82:	8183      	strh	r3, [r0, #12]
 8015a84:	3501      	adds	r5, #1
 8015a86:	4621      	mov	r1, r4
 8015a88:	4630      	mov	r0, r6
 8015a8a:	f008 fe47 	bl	801e71c <put_memory>
 8015a8e:	42af      	cmp	r7, r5
 8015a90:	60a4      	str	r4, [r4, #8]
 8015a92:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8015a96:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015a9a:	d1f3      	bne.n	8015a84 <rmw_uxrce_init_service_memory+0x20>
 8015a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aa0:	4770      	bx	lr
 8015aa2:	bf00      	nop

08015aa4 <rmw_uxrce_init_client_memory>:
 8015aa4:	b1e2      	cbz	r2, 8015ae0 <rmw_uxrce_init_client_memory+0x3c>
 8015aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aaa:	7b05      	ldrb	r5, [r0, #12]
 8015aac:	4606      	mov	r6, r0
 8015aae:	b9ad      	cbnz	r5, 8015adc <rmw_uxrce_init_client_memory+0x38>
 8015ab0:	23c8      	movs	r3, #200	@ 0xc8
 8015ab2:	4617      	mov	r7, r2
 8015ab4:	460c      	mov	r4, r1
 8015ab6:	46a8      	mov	r8, r5
 8015ab8:	6083      	str	r3, [r0, #8]
 8015aba:	f240 1301 	movw	r3, #257	@ 0x101
 8015abe:	e9c0 5500 	strd	r5, r5, [r0]
 8015ac2:	8183      	strh	r3, [r0, #12]
 8015ac4:	3501      	adds	r5, #1
 8015ac6:	4621      	mov	r1, r4
 8015ac8:	4630      	mov	r0, r6
 8015aca:	f008 fe27 	bl	801e71c <put_memory>
 8015ace:	42af      	cmp	r7, r5
 8015ad0:	60a4      	str	r4, [r4, #8]
 8015ad2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8015ad6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015ada:	d1f3      	bne.n	8015ac4 <rmw_uxrce_init_client_memory+0x20>
 8015adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae0:	4770      	bx	lr
 8015ae2:	bf00      	nop

08015ae4 <rmw_uxrce_init_publisher_memory>:
 8015ae4:	b1e2      	cbz	r2, 8015b20 <rmw_uxrce_init_publisher_memory+0x3c>
 8015ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aea:	7b05      	ldrb	r5, [r0, #12]
 8015aec:	4606      	mov	r6, r0
 8015aee:	b9ad      	cbnz	r5, 8015b1c <rmw_uxrce_init_publisher_memory+0x38>
 8015af0:	23d8      	movs	r3, #216	@ 0xd8
 8015af2:	4617      	mov	r7, r2
 8015af4:	460c      	mov	r4, r1
 8015af6:	46a8      	mov	r8, r5
 8015af8:	6083      	str	r3, [r0, #8]
 8015afa:	f240 1301 	movw	r3, #257	@ 0x101
 8015afe:	e9c0 5500 	strd	r5, r5, [r0]
 8015b02:	8183      	strh	r3, [r0, #12]
 8015b04:	3501      	adds	r5, #1
 8015b06:	4621      	mov	r1, r4
 8015b08:	4630      	mov	r0, r6
 8015b0a:	f008 fe07 	bl	801e71c <put_memory>
 8015b0e:	42af      	cmp	r7, r5
 8015b10:	60a4      	str	r4, [r4, #8]
 8015b12:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015b16:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015b1a:	d1f3      	bne.n	8015b04 <rmw_uxrce_init_publisher_memory+0x20>
 8015b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b20:	4770      	bx	lr
 8015b22:	bf00      	nop

08015b24 <rmw_uxrce_init_subscription_memory>:
 8015b24:	b1e2      	cbz	r2, 8015b60 <rmw_uxrce_init_subscription_memory+0x3c>
 8015b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b2a:	7b05      	ldrb	r5, [r0, #12]
 8015b2c:	4606      	mov	r6, r0
 8015b2e:	b9ad      	cbnz	r5, 8015b5c <rmw_uxrce_init_subscription_memory+0x38>
 8015b30:	23d8      	movs	r3, #216	@ 0xd8
 8015b32:	4617      	mov	r7, r2
 8015b34:	460c      	mov	r4, r1
 8015b36:	46a8      	mov	r8, r5
 8015b38:	6083      	str	r3, [r0, #8]
 8015b3a:	f240 1301 	movw	r3, #257	@ 0x101
 8015b3e:	e9c0 5500 	strd	r5, r5, [r0]
 8015b42:	8183      	strh	r3, [r0, #12]
 8015b44:	3501      	adds	r5, #1
 8015b46:	4621      	mov	r1, r4
 8015b48:	4630      	mov	r0, r6
 8015b4a:	f008 fde7 	bl	801e71c <put_memory>
 8015b4e:	42af      	cmp	r7, r5
 8015b50:	60a4      	str	r4, [r4, #8]
 8015b52:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015b56:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015b5a:	d1f3      	bne.n	8015b44 <rmw_uxrce_init_subscription_memory+0x20>
 8015b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b60:	4770      	bx	lr
 8015b62:	bf00      	nop

08015b64 <rmw_uxrce_init_node_memory>:
 8015b64:	b1e2      	cbz	r2, 8015ba0 <rmw_uxrce_init_node_memory+0x3c>
 8015b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b6a:	7b05      	ldrb	r5, [r0, #12]
 8015b6c:	4606      	mov	r6, r0
 8015b6e:	b9ad      	cbnz	r5, 8015b9c <rmw_uxrce_init_node_memory+0x38>
 8015b70:	23a4      	movs	r3, #164	@ 0xa4
 8015b72:	4617      	mov	r7, r2
 8015b74:	460c      	mov	r4, r1
 8015b76:	46a8      	mov	r8, r5
 8015b78:	6083      	str	r3, [r0, #8]
 8015b7a:	f240 1301 	movw	r3, #257	@ 0x101
 8015b7e:	e9c0 5500 	strd	r5, r5, [r0]
 8015b82:	8183      	strh	r3, [r0, #12]
 8015b84:	3501      	adds	r5, #1
 8015b86:	4621      	mov	r1, r4
 8015b88:	4630      	mov	r0, r6
 8015b8a:	f008 fdc7 	bl	801e71c <put_memory>
 8015b8e:	42af      	cmp	r7, r5
 8015b90:	60a4      	str	r4, [r4, #8]
 8015b92:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8015b96:	f804 8c98 	strb.w	r8, [r4, #-152]
 8015b9a:	d1f3      	bne.n	8015b84 <rmw_uxrce_init_node_memory+0x20>
 8015b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ba0:	4770      	bx	lr
 8015ba2:	bf00      	nop

08015ba4 <rmw_uxrce_init_session_memory>:
 8015ba4:	b1ea      	cbz	r2, 8015be2 <rmw_uxrce_init_session_memory+0x3e>
 8015ba6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015baa:	7b05      	ldrb	r5, [r0, #12]
 8015bac:	4606      	mov	r6, r0
 8015bae:	b9b5      	cbnz	r5, 8015bde <rmw_uxrce_init_session_memory+0x3a>
 8015bb0:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8015bb4:	f240 1301 	movw	r3, #257	@ 0x101
 8015bb8:	4617      	mov	r7, r2
 8015bba:	460c      	mov	r4, r1
 8015bbc:	46a9      	mov	r9, r5
 8015bbe:	f8c0 8008 	str.w	r8, [r0, #8]
 8015bc2:	8183      	strh	r3, [r0, #12]
 8015bc4:	e9c0 5500 	strd	r5, r5, [r0]
 8015bc8:	3501      	adds	r5, #1
 8015bca:	4621      	mov	r1, r4
 8015bcc:	4630      	mov	r0, r6
 8015bce:	f008 fda5 	bl	801e71c <put_memory>
 8015bd2:	42af      	cmp	r7, r5
 8015bd4:	60a4      	str	r4, [r4, #8]
 8015bd6:	f884 900c 	strb.w	r9, [r4, #12]
 8015bda:	4444      	add	r4, r8
 8015bdc:	d1f4      	bne.n	8015bc8 <rmw_uxrce_init_session_memory+0x24>
 8015bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015be2:	4770      	bx	lr

08015be4 <rmw_uxrce_init_topic_memory>:
 8015be4:	b1e2      	cbz	r2, 8015c20 <rmw_uxrce_init_topic_memory+0x3c>
 8015be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bea:	7b05      	ldrb	r5, [r0, #12]
 8015bec:	4606      	mov	r6, r0
 8015bee:	b9ad      	cbnz	r5, 8015c1c <rmw_uxrce_init_topic_memory+0x38>
 8015bf0:	231c      	movs	r3, #28
 8015bf2:	4617      	mov	r7, r2
 8015bf4:	460c      	mov	r4, r1
 8015bf6:	46a8      	mov	r8, r5
 8015bf8:	6083      	str	r3, [r0, #8]
 8015bfa:	f240 1301 	movw	r3, #257	@ 0x101
 8015bfe:	e9c0 5500 	strd	r5, r5, [r0]
 8015c02:	8183      	strh	r3, [r0, #12]
 8015c04:	3501      	adds	r5, #1
 8015c06:	4621      	mov	r1, r4
 8015c08:	4630      	mov	r0, r6
 8015c0a:	f008 fd87 	bl	801e71c <put_memory>
 8015c0e:	42af      	cmp	r7, r5
 8015c10:	60a4      	str	r4, [r4, #8]
 8015c12:	f104 041c 	add.w	r4, r4, #28
 8015c16:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015c1a:	d1f3      	bne.n	8015c04 <rmw_uxrce_init_topic_memory+0x20>
 8015c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c20:	4770      	bx	lr
 8015c22:	bf00      	nop

08015c24 <rmw_uxrce_init_static_input_buffer_memory>:
 8015c24:	b1ea      	cbz	r2, 8015c62 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8015c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c2a:	7b05      	ldrb	r5, [r0, #12]
 8015c2c:	4606      	mov	r6, r0
 8015c2e:	b9b5      	cbnz	r5, 8015c5e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8015c30:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8015c34:	4617      	mov	r7, r2
 8015c36:	460c      	mov	r4, r1
 8015c38:	46a8      	mov	r8, r5
 8015c3a:	6083      	str	r3, [r0, #8]
 8015c3c:	f240 1301 	movw	r3, #257	@ 0x101
 8015c40:	e9c0 5500 	strd	r5, r5, [r0]
 8015c44:	8183      	strh	r3, [r0, #12]
 8015c46:	3501      	adds	r5, #1
 8015c48:	4621      	mov	r1, r4
 8015c4a:	4630      	mov	r0, r6
 8015c4c:	f008 fd66 	bl	801e71c <put_memory>
 8015c50:	42af      	cmp	r7, r5
 8015c52:	60a4      	str	r4, [r4, #8]
 8015c54:	f884 800c 	strb.w	r8, [r4, #12]
 8015c58:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8015c5c:	d1f3      	bne.n	8015c46 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8015c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c62:	4770      	bx	lr

08015c64 <rmw_uxrce_init_init_options_impl_memory>:
 8015c64:	b1e2      	cbz	r2, 8015ca0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8015c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c6a:	7b05      	ldrb	r5, [r0, #12]
 8015c6c:	4606      	mov	r6, r0
 8015c6e:	b9ad      	cbnz	r5, 8015c9c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8015c70:	232c      	movs	r3, #44	@ 0x2c
 8015c72:	4617      	mov	r7, r2
 8015c74:	460c      	mov	r4, r1
 8015c76:	46a8      	mov	r8, r5
 8015c78:	6083      	str	r3, [r0, #8]
 8015c7a:	f240 1301 	movw	r3, #257	@ 0x101
 8015c7e:	e9c0 5500 	strd	r5, r5, [r0]
 8015c82:	8183      	strh	r3, [r0, #12]
 8015c84:	3501      	adds	r5, #1
 8015c86:	4621      	mov	r1, r4
 8015c88:	4630      	mov	r0, r6
 8015c8a:	f008 fd47 	bl	801e71c <put_memory>
 8015c8e:	42af      	cmp	r7, r5
 8015c90:	60a4      	str	r4, [r4, #8]
 8015c92:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8015c96:	f804 8c20 	strb.w	r8, [r4, #-32]
 8015c9a:	d1f3      	bne.n	8015c84 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8015c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ca0:	4770      	bx	lr
 8015ca2:	bf00      	nop

08015ca4 <rmw_uxrce_init_wait_set_memory>:
 8015ca4:	b1e2      	cbz	r2, 8015ce0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8015ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015caa:	7b05      	ldrb	r5, [r0, #12]
 8015cac:	4606      	mov	r6, r0
 8015cae:	b9ad      	cbnz	r5, 8015cdc <rmw_uxrce_init_wait_set_memory+0x38>
 8015cb0:	231c      	movs	r3, #28
 8015cb2:	4617      	mov	r7, r2
 8015cb4:	460c      	mov	r4, r1
 8015cb6:	46a8      	mov	r8, r5
 8015cb8:	6083      	str	r3, [r0, #8]
 8015cba:	f240 1301 	movw	r3, #257	@ 0x101
 8015cbe:	e9c0 5500 	strd	r5, r5, [r0]
 8015cc2:	8183      	strh	r3, [r0, #12]
 8015cc4:	3501      	adds	r5, #1
 8015cc6:	4621      	mov	r1, r4
 8015cc8:	4630      	mov	r0, r6
 8015cca:	f008 fd27 	bl	801e71c <put_memory>
 8015cce:	42af      	cmp	r7, r5
 8015cd0:	60a4      	str	r4, [r4, #8]
 8015cd2:	f104 041c 	add.w	r4, r4, #28
 8015cd6:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015cda:	d1f3      	bne.n	8015cc4 <rmw_uxrce_init_wait_set_memory+0x20>
 8015cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ce0:	4770      	bx	lr
 8015ce2:	bf00      	nop

08015ce4 <rmw_uxrce_init_guard_condition_memory>:
 8015ce4:	b1e2      	cbz	r2, 8015d20 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8015ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cea:	7b05      	ldrb	r5, [r0, #12]
 8015cec:	4606      	mov	r6, r0
 8015cee:	b9ad      	cbnz	r5, 8015d1c <rmw_uxrce_init_guard_condition_memory+0x38>
 8015cf0:	2320      	movs	r3, #32
 8015cf2:	4617      	mov	r7, r2
 8015cf4:	460c      	mov	r4, r1
 8015cf6:	46a8      	mov	r8, r5
 8015cf8:	6083      	str	r3, [r0, #8]
 8015cfa:	f240 1301 	movw	r3, #257	@ 0x101
 8015cfe:	e9c0 5500 	strd	r5, r5, [r0]
 8015d02:	8183      	strh	r3, [r0, #12]
 8015d04:	3501      	adds	r5, #1
 8015d06:	4621      	mov	r1, r4
 8015d08:	4630      	mov	r0, r6
 8015d0a:	f008 fd07 	bl	801e71c <put_memory>
 8015d0e:	42af      	cmp	r7, r5
 8015d10:	60a4      	str	r4, [r4, #8]
 8015d12:	f104 0420 	add.w	r4, r4, #32
 8015d16:	f804 8c14 	strb.w	r8, [r4, #-20]
 8015d1a:	d1f3      	bne.n	8015d04 <rmw_uxrce_init_guard_condition_memory+0x20>
 8015d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d20:	4770      	bx	lr
 8015d22:	bf00      	nop

08015d24 <rmw_uxrce_fini_session_memory>:
 8015d24:	4601      	mov	r1, r0
 8015d26:	4801      	ldr	r0, [pc, #4]	@ (8015d2c <rmw_uxrce_fini_session_memory+0x8>)
 8015d28:	f008 bcf8 	b.w	801e71c <put_memory>
 8015d2c:	24069384 	.word	0x24069384

08015d30 <rmw_uxrce_fini_node_memory>:
 8015d30:	b538      	push	{r3, r4, r5, lr}
 8015d32:	4604      	mov	r4, r0
 8015d34:	6800      	ldr	r0, [r0, #0]
 8015d36:	b128      	cbz	r0, 8015d44 <rmw_uxrce_fini_node_memory+0x14>
 8015d38:	4b07      	ldr	r3, [pc, #28]	@ (8015d58 <rmw_uxrce_fini_node_memory+0x28>)
 8015d3a:	6819      	ldr	r1, [r3, #0]
 8015d3c:	f7ea fad0 	bl	80002e0 <strcmp>
 8015d40:	b940      	cbnz	r0, 8015d54 <rmw_uxrce_fini_node_memory+0x24>
 8015d42:	6020      	str	r0, [r4, #0]
 8015d44:	6861      	ldr	r1, [r4, #4]
 8015d46:	b129      	cbz	r1, 8015d54 <rmw_uxrce_fini_node_memory+0x24>
 8015d48:	2500      	movs	r5, #0
 8015d4a:	4804      	ldr	r0, [pc, #16]	@ (8015d5c <rmw_uxrce_fini_node_memory+0x2c>)
 8015d4c:	610d      	str	r5, [r1, #16]
 8015d4e:	f008 fce5 	bl	801e71c <put_memory>
 8015d52:	6065      	str	r5, [r4, #4]
 8015d54:	bd38      	pop	{r3, r4, r5, pc}
 8015d56:	bf00      	nop
 8015d58:	08025818 	.word	0x08025818
 8015d5c:	24069354 	.word	0x24069354

08015d60 <rmw_uxrce_fini_publisher_memory>:
 8015d60:	b510      	push	{r4, lr}
 8015d62:	4604      	mov	r4, r0
 8015d64:	6800      	ldr	r0, [r0, #0]
 8015d66:	b128      	cbz	r0, 8015d74 <rmw_uxrce_fini_publisher_memory+0x14>
 8015d68:	4b06      	ldr	r3, [pc, #24]	@ (8015d84 <rmw_uxrce_fini_publisher_memory+0x24>)
 8015d6a:	6819      	ldr	r1, [r3, #0]
 8015d6c:	f7ea fab8 	bl	80002e0 <strcmp>
 8015d70:	b938      	cbnz	r0, 8015d82 <rmw_uxrce_fini_publisher_memory+0x22>
 8015d72:	6020      	str	r0, [r4, #0]
 8015d74:	6861      	ldr	r1, [r4, #4]
 8015d76:	b121      	cbz	r1, 8015d82 <rmw_uxrce_fini_publisher_memory+0x22>
 8015d78:	4803      	ldr	r0, [pc, #12]	@ (8015d88 <rmw_uxrce_fini_publisher_memory+0x28>)
 8015d7a:	f008 fccf 	bl	801e71c <put_memory>
 8015d7e:	2300      	movs	r3, #0
 8015d80:	6063      	str	r3, [r4, #4]
 8015d82:	bd10      	pop	{r4, pc}
 8015d84:	08025818 	.word	0x08025818
 8015d88:	24069364 	.word	0x24069364

08015d8c <rmw_uxrce_fini_subscription_memory>:
 8015d8c:	b510      	push	{r4, lr}
 8015d8e:	4604      	mov	r4, r0
 8015d90:	6800      	ldr	r0, [r0, #0]
 8015d92:	b128      	cbz	r0, 8015da0 <rmw_uxrce_fini_subscription_memory+0x14>
 8015d94:	4b06      	ldr	r3, [pc, #24]	@ (8015db0 <rmw_uxrce_fini_subscription_memory+0x24>)
 8015d96:	6819      	ldr	r1, [r3, #0]
 8015d98:	f7ea faa2 	bl	80002e0 <strcmp>
 8015d9c:	b938      	cbnz	r0, 8015dae <rmw_uxrce_fini_subscription_memory+0x22>
 8015d9e:	6020      	str	r0, [r4, #0]
 8015da0:	6861      	ldr	r1, [r4, #4]
 8015da2:	b121      	cbz	r1, 8015dae <rmw_uxrce_fini_subscription_memory+0x22>
 8015da4:	4803      	ldr	r0, [pc, #12]	@ (8015db4 <rmw_uxrce_fini_subscription_memory+0x28>)
 8015da6:	f008 fcb9 	bl	801e71c <put_memory>
 8015daa:	2300      	movs	r3, #0
 8015dac:	6063      	str	r3, [r4, #4]
 8015dae:	bd10      	pop	{r4, pc}
 8015db0:	08025818 	.word	0x08025818
 8015db4:	240693a4 	.word	0x240693a4

08015db8 <rmw_uxrce_fini_service_memory>:
 8015db8:	b510      	push	{r4, lr}
 8015dba:	4604      	mov	r4, r0
 8015dbc:	6800      	ldr	r0, [r0, #0]
 8015dbe:	b128      	cbz	r0, 8015dcc <rmw_uxrce_fini_service_memory+0x14>
 8015dc0:	4b06      	ldr	r3, [pc, #24]	@ (8015ddc <rmw_uxrce_fini_service_memory+0x24>)
 8015dc2:	6819      	ldr	r1, [r3, #0]
 8015dc4:	f7ea fa8c 	bl	80002e0 <strcmp>
 8015dc8:	b938      	cbnz	r0, 8015dda <rmw_uxrce_fini_service_memory+0x22>
 8015dca:	6020      	str	r0, [r4, #0]
 8015dcc:	6861      	ldr	r1, [r4, #4]
 8015dce:	b121      	cbz	r1, 8015dda <rmw_uxrce_fini_service_memory+0x22>
 8015dd0:	4803      	ldr	r0, [pc, #12]	@ (8015de0 <rmw_uxrce_fini_service_memory+0x28>)
 8015dd2:	f008 fca3 	bl	801e71c <put_memory>
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	6063      	str	r3, [r4, #4]
 8015dda:	bd10      	pop	{r4, pc}
 8015ddc:	08025818 	.word	0x08025818
 8015de0:	24069374 	.word	0x24069374

08015de4 <rmw_uxrce_fini_client_memory>:
 8015de4:	b510      	push	{r4, lr}
 8015de6:	4604      	mov	r4, r0
 8015de8:	6800      	ldr	r0, [r0, #0]
 8015dea:	b128      	cbz	r0, 8015df8 <rmw_uxrce_fini_client_memory+0x14>
 8015dec:	4b06      	ldr	r3, [pc, #24]	@ (8015e08 <rmw_uxrce_fini_client_memory+0x24>)
 8015dee:	6819      	ldr	r1, [r3, #0]
 8015df0:	f7ea fa76 	bl	80002e0 <strcmp>
 8015df4:	b938      	cbnz	r0, 8015e06 <rmw_uxrce_fini_client_memory+0x22>
 8015df6:	6020      	str	r0, [r4, #0]
 8015df8:	6861      	ldr	r1, [r4, #4]
 8015dfa:	b121      	cbz	r1, 8015e06 <rmw_uxrce_fini_client_memory+0x22>
 8015dfc:	4803      	ldr	r0, [pc, #12]	@ (8015e0c <rmw_uxrce_fini_client_memory+0x28>)
 8015dfe:	f008 fc8d 	bl	801e71c <put_memory>
 8015e02:	2300      	movs	r3, #0
 8015e04:	6063      	str	r3, [r4, #4]
 8015e06:	bd10      	pop	{r4, pc}
 8015e08:	08025818 	.word	0x08025818
 8015e0c:	24064a88 	.word	0x24064a88

08015e10 <rmw_uxrce_fini_topic_memory>:
 8015e10:	b510      	push	{r4, lr}
 8015e12:	4604      	mov	r4, r0
 8015e14:	4803      	ldr	r0, [pc, #12]	@ (8015e24 <rmw_uxrce_fini_topic_memory+0x14>)
 8015e16:	4621      	mov	r1, r4
 8015e18:	f008 fc80 	bl	801e71c <put_memory>
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	61a3      	str	r3, [r4, #24]
 8015e20:	bd10      	pop	{r4, pc}
 8015e22:	bf00      	nop
 8015e24:	240693b4 	.word	0x240693b4

08015e28 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8015e28:	b082      	sub	sp, #8
 8015e2a:	492b      	ldr	r1, [pc, #172]	@ (8015ed8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015e2c:	b530      	push	{r4, r5, lr}
 8015e2e:	680d      	ldr	r5, [r1, #0]
 8015e30:	ac03      	add	r4, sp, #12
 8015e32:	e884 000c 	stmia.w	r4, {r2, r3}
 8015e36:	461c      	mov	r4, r3
 8015e38:	2d00      	cmp	r5, #0
 8015e3a:	d04b      	beq.n	8015ed4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8015e3c:	462b      	mov	r3, r5
 8015e3e:	2100      	movs	r1, #0
 8015e40:	689a      	ldr	r2, [r3, #8]
 8015e42:	685b      	ldr	r3, [r3, #4]
 8015e44:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8015e48:	4290      	cmp	r0, r2
 8015e4a:	bf08      	it	eq
 8015e4c:	3101      	addeq	r1, #1
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d1f6      	bne.n	8015e40 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8015e52:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015e56:	2b02      	cmp	r3, #2
 8015e58:	d029      	beq.n	8015eae <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8015e5a:	d820      	bhi.n	8015e9e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8015e5c:	428c      	cmp	r4, r1
 8015e5e:	d828      	bhi.n	8015eb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015e60:	fab4 f284 	clz	r2, r4
 8015e64:	0952      	lsrs	r2, r2, #5
 8015e66:	b324      	cbz	r4, 8015eb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015e68:	b1dd      	cbz	r5, 8015ea2 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8015e6a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015e6e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8015e72:	e001      	b.n	8015e78 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8015e74:	686d      	ldr	r5, [r5, #4]
 8015e76:	b1ad      	cbz	r5, 8015ea4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015e78:	68ab      	ldr	r3, [r5, #8]
 8015e7a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8015e7e:	4288      	cmp	r0, r1
 8015e80:	d1f8      	bne.n	8015e74 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e82:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8015e86:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8015e8a:	4561      	cmp	r1, ip
 8015e8c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015e90:	eb73 0e04 	sbcs.w	lr, r3, r4
 8015e94:	daee      	bge.n	8015e74 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e96:	468c      	mov	ip, r1
 8015e98:	461c      	mov	r4, r3
 8015e9a:	462a      	mov	r2, r5
 8015e9c:	e7ea      	b.n	8015e74 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e9e:	2b03      	cmp	r3, #3
 8015ea0:	d0dc      	beq.n	8015e5c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	4610      	mov	r0, r2
 8015ea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015eaa:	b002      	add	sp, #8
 8015eac:	4770      	bx	lr
 8015eae:	428c      	cmp	r4, r1
 8015eb0:	d905      	bls.n	8015ebe <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8015eb2:	4809      	ldr	r0, [pc, #36]	@ (8015ed8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015eb8:	b002      	add	sp, #8
 8015eba:	f008 bc1f 	b.w	801e6fc <get_memory>
 8015ebe:	fab4 f284 	clz	r2, r4
 8015ec2:	0952      	lsrs	r2, r2, #5
 8015ec4:	2c00      	cmp	r4, #0
 8015ec6:	d1ed      	bne.n	8015ea4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015ec8:	4803      	ldr	r0, [pc, #12]	@ (8015ed8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015eca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ece:	b002      	add	sp, #8
 8015ed0:	f008 bc14 	b.w	801e6fc <get_memory>
 8015ed4:	4629      	mov	r1, r5
 8015ed6:	e7bc      	b.n	8015e52 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8015ed8:	24069394 	.word	0x24069394

08015edc <rmw_uxrce_find_static_input_buffer_by_owner>:
 8015edc:	4b12      	ldr	r3, [pc, #72]	@ (8015f28 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	b530      	push	{r4, r5, lr}
 8015ee2:	b1f3      	cbz	r3, 8015f22 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8015ee4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8015ee8:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8015eec:	2400      	movs	r4, #0
 8015eee:	e001      	b.n	8015ef4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015ef0:	685b      	ldr	r3, [r3, #4]
 8015ef2:	b1a3      	cbz	r3, 8015f1e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8015ef4:	689a      	ldr	r2, [r3, #8]
 8015ef6:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8015efa:	4288      	cmp	r0, r1
 8015efc:	d1f8      	bne.n	8015ef0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015efe:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8015f02:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8015f06:	4571      	cmp	r1, lr
 8015f08:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8015f0c:	eb72 050c 	sbcs.w	r5, r2, ip
 8015f10:	daee      	bge.n	8015ef0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015f12:	461c      	mov	r4, r3
 8015f14:	685b      	ldr	r3, [r3, #4]
 8015f16:	468e      	mov	lr, r1
 8015f18:	4694      	mov	ip, r2
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d1ea      	bne.n	8015ef4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015f1e:	4620      	mov	r0, r4
 8015f20:	bd30      	pop	{r4, r5, pc}
 8015f22:	461c      	mov	r4, r3
 8015f24:	4620      	mov	r0, r4
 8015f26:	bd30      	pop	{r4, r5, pc}
 8015f28:	24069394 	.word	0x24069394
 8015f2c:	00000000 	.word	0x00000000

08015f30 <rmw_uxrce_clean_expired_static_input_buffer>:
 8015f30:	4b3d      	ldr	r3, [pc, #244]	@ (8016028 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015f32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f36:	681f      	ldr	r7, [r3, #0]
 8015f38:	ed2d 8b06 	vpush	{d8-d10}
 8015f3c:	b08d      	sub	sp, #52	@ 0x34
 8015f3e:	f7ff fd71 	bl	8015a24 <rmw_uros_epoch_nanos>
 8015f42:	2f00      	cmp	r7, #0
 8015f44:	d05d      	beq.n	8016002 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015f46:	46b8      	mov	r8, r7
 8015f48:	4681      	mov	r9, r0
 8015f4a:	468a      	mov	sl, r1
 8015f4c:	ac04      	add	r4, sp, #16
 8015f4e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015f52:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8015f56:	2b04      	cmp	r3, #4
 8015f58:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8016010 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8015f5c:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8016018 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8015f60:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8016020 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8015f64:	d03f      	beq.n	8015fe6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015f66:	2b05      	cmp	r3, #5
 8015f68:	d044      	beq.n	8015ff4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8015f6a:	2b03      	cmp	r3, #3
 8015f6c:	d03b      	beq.n	8015fe6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015f6e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8015f72:	ed8d ab06 	vstr	d10, [sp, #24]
 8015f76:	ab08      	add	r3, sp, #32
 8015f78:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015f7c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8015f80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f82:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015f86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f8a:	f008 f9d9 	bl	801e340 <rmw_time_equal>
 8015f8e:	b118      	cbz	r0, 8015f98 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8015f90:	ed8d 9b04 	vstr	d9, [sp, #16]
 8015f94:	ed8d 8b06 	vstr	d8, [sp, #24]
 8015f98:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8015f9c:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8015fa0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8015fa4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8015fa8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015fac:	f008 fa1e 	bl	801e3ec <rmw_time_total_nsec>
 8015fb0:	1830      	adds	r0, r6, r0
 8015fb2:	eb47 0101 	adc.w	r1, r7, r1
 8015fb6:	4548      	cmp	r0, r9
 8015fb8:	eb71 030a 	sbcs.w	r3, r1, sl
 8015fbc:	db05      	blt.n	8015fca <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8015fbe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8015fc2:	4591      	cmp	r9, r2
 8015fc4:	eb7a 0303 	sbcs.w	r3, sl, r3
 8015fc8:	da03      	bge.n	8015fd2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8015fca:	4641      	mov	r1, r8
 8015fcc:	4816      	ldr	r0, [pc, #88]	@ (8016028 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015fce:	f008 fba5 	bl	801e71c <put_memory>
 8015fd2:	f1bb 0f00 	cmp.w	fp, #0
 8015fd6:	d014      	beq.n	8016002 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015fd8:	46d8      	mov	r8, fp
 8015fda:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015fde:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8015fe2:	2b04      	cmp	r3, #4
 8015fe4:	d1bf      	bne.n	8015f66 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8015fe6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8015fea:	3340      	adds	r3, #64	@ 0x40
 8015fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015ff2:	e7c0      	b.n	8015f76 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8015ff4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8015ff8:	3348      	adds	r3, #72	@ 0x48
 8015ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016000:	e7b9      	b.n	8015f76 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016002:	b00d      	add	sp, #52	@ 0x34
 8016004:	ecbd 8b06 	vpop	{d8-d10}
 8016008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801600c:	f3af 8000 	nop.w
	...
 8016018:	00000001 	.word	0x00000001
 801601c:	00000000 	.word	0x00000000
 8016020:	0000001e 	.word	0x0000001e
 8016024:	00000000 	.word	0x00000000
 8016028:	24069394 	.word	0x24069394

0801602c <run_xrce_session>:
 801602c:	b510      	push	{r4, lr}
 801602e:	788c      	ldrb	r4, [r1, #2]
 8016030:	b086      	sub	sp, #24
 8016032:	2c01      	cmp	r4, #1
 8016034:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016038:	d00c      	beq.n	8016054 <run_xrce_session+0x28>
 801603a:	2401      	movs	r4, #1
 801603c:	4619      	mov	r1, r3
 801603e:	f10d 020e 	add.w	r2, sp, #14
 8016042:	f10d 0317 	add.w	r3, sp, #23
 8016046:	9400      	str	r4, [sp, #0]
 8016048:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801604c:	f002 f838 	bl	80180c0 <uxr_run_session_until_all_status>
 8016050:	b006      	add	sp, #24
 8016052:	bd10      	pop	{r4, pc}
 8016054:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016058:	f001 fc54 	bl	8017904 <uxr_flash_output_streams>
 801605c:	4620      	mov	r0, r4
 801605e:	b006      	add	sp, #24
 8016060:	bd10      	pop	{r4, pc}
 8016062:	bf00      	nop

08016064 <convert_qos_profile>:
 8016064:	7a4a      	ldrb	r2, [r1, #9]
 8016066:	f891 c008 	ldrb.w	ip, [r1, #8]
 801606a:	2a02      	cmp	r2, #2
 801606c:	bf18      	it	ne
 801606e:	2200      	movne	r2, #0
 8016070:	7002      	strb	r2, [r0, #0]
 8016072:	f1ac 0202 	sub.w	r2, ip, #2
 8016076:	fab2 f282 	clz	r2, r2
 801607a:	0952      	lsrs	r2, r2, #5
 801607c:	7042      	strb	r2, [r0, #1]
 801607e:	780a      	ldrb	r2, [r1, #0]
 8016080:	8889      	ldrh	r1, [r1, #4]
 8016082:	f1a2 0202 	sub.w	r2, r2, #2
 8016086:	8081      	strh	r1, [r0, #4]
 8016088:	fab2 f282 	clz	r2, r2
 801608c:	0952      	lsrs	r2, r2, #5
 801608e:	7082      	strb	r2, [r0, #2]
 8016090:	4770      	bx	lr
 8016092:	bf00      	nop

08016094 <generate_service_topics>:
 8016094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016096:	461d      	mov	r5, r3
 8016098:	b083      	sub	sp, #12
 801609a:	4606      	mov	r6, r0
 801609c:	4c11      	ldr	r4, [pc, #68]	@ (80160e4 <generate_service_topics+0x50>)
 801609e:	4608      	mov	r0, r1
 80160a0:	4b11      	ldr	r3, [pc, #68]	@ (80160e8 <generate_service_topics+0x54>)
 80160a2:	4617      	mov	r7, r2
 80160a4:	4629      	mov	r1, r5
 80160a6:	4a11      	ldr	r2, [pc, #68]	@ (80160ec <generate_service_topics+0x58>)
 80160a8:	9401      	str	r4, [sp, #4]
 80160aa:	9600      	str	r6, [sp, #0]
 80160ac:	f00b ffd6 	bl	802205c <sniprintf>
 80160b0:	4a0f      	ldr	r2, [pc, #60]	@ (80160f0 <generate_service_topics+0x5c>)
 80160b2:	4604      	mov	r4, r0
 80160b4:	4b0f      	ldr	r3, [pc, #60]	@ (80160f4 <generate_service_topics+0x60>)
 80160b6:	9201      	str	r2, [sp, #4]
 80160b8:	4638      	mov	r0, r7
 80160ba:	4a0c      	ldr	r2, [pc, #48]	@ (80160ec <generate_service_topics+0x58>)
 80160bc:	4629      	mov	r1, r5
 80160be:	9600      	str	r6, [sp, #0]
 80160c0:	f00b ffcc 	bl	802205c <sniprintf>
 80160c4:	2c00      	cmp	r4, #0
 80160c6:	bfa8      	it	ge
 80160c8:	42a5      	cmpge	r5, r4
 80160ca:	bfcc      	ite	gt
 80160cc:	2401      	movgt	r4, #1
 80160ce:	2400      	movle	r4, #0
 80160d0:	dd05      	ble.n	80160de <generate_service_topics+0x4a>
 80160d2:	2800      	cmp	r0, #0
 80160d4:	bfa8      	it	ge
 80160d6:	4285      	cmpge	r5, r0
 80160d8:	bfcc      	ite	gt
 80160da:	2401      	movgt	r4, #1
 80160dc:	2400      	movle	r4, #0
 80160de:	4620      	mov	r0, r4
 80160e0:	b003      	add	sp, #12
 80160e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160e4:	080248bc 	.word	0x080248bc
 80160e8:	080248b8 	.word	0x080248b8
 80160ec:	08024894 	.word	0x08024894
 80160f0:	080248b0 	.word	0x080248b0
 80160f4:	080248ac 	.word	0x080248ac

080160f8 <generate_service_types>:
 80160f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160fc:	4606      	mov	r6, r0
 80160fe:	b087      	sub	sp, #28
 8016100:	461c      	mov	r4, r3
 8016102:	6883      	ldr	r3, [r0, #8]
 8016104:	460d      	mov	r5, r1
 8016106:	4617      	mov	r7, r2
 8016108:	4798      	blx	r3
 801610a:	68f3      	ldr	r3, [r6, #12]
 801610c:	4606      	mov	r6, r0
 801610e:	4798      	blx	r3
 8016110:	2300      	movs	r3, #0
 8016112:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8016116:	6872      	ldr	r2, [r6, #4]
 8016118:	702b      	strb	r3, [r5, #0]
 801611a:	6813      	ldr	r3, [r2, #0]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d03f      	beq.n	80161a0 <generate_service_types+0xa8>
 8016120:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80161b4 <generate_service_types+0xbc>
 8016124:	4649      	mov	r1, r9
 8016126:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 80161bc <generate_service_types+0xc4>
 801612a:	4628      	mov	r0, r5
 801612c:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80161c0 <generate_service_types+0xc8>
 8016130:	f8cd 8014 	str.w	r8, [sp, #20]
 8016134:	6852      	ldr	r2, [r2, #4]
 8016136:	9100      	str	r1, [sp, #0]
 8016138:	4621      	mov	r1, r4
 801613a:	f8cd 8008 	str.w	r8, [sp, #8]
 801613e:	f8cd a004 	str.w	sl, [sp, #4]
 8016142:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8016146:	4a1a      	ldr	r2, [pc, #104]	@ (80161b0 <generate_service_types+0xb8>)
 8016148:	f00b ff88 	bl	802205c <sniprintf>
 801614c:	2300      	movs	r3, #0
 801614e:	42a0      	cmp	r0, r4
 8016150:	ea6f 0600 	mvn.w	r6, r0
 8016154:	703b      	strb	r3, [r7, #0]
 8016156:	f8db 3000 	ldr.w	r3, [fp]
 801615a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 801615e:	bfac      	ite	ge
 8016160:	2500      	movge	r5, #0
 8016162:	2501      	movlt	r5, #1
 8016164:	b30b      	cbz	r3, 80161aa <generate_service_types+0xb2>
 8016166:	4a13      	ldr	r2, [pc, #76]	@ (80161b4 <generate_service_types+0xbc>)
 8016168:	f8cd 8014 	str.w	r8, [sp, #20]
 801616c:	402e      	ands	r6, r5
 801616e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8016172:	4638      	mov	r0, r7
 8016174:	9104      	str	r1, [sp, #16]
 8016176:	4621      	mov	r1, r4
 8016178:	e9cd 2a00 	strd	r2, sl, [sp]
 801617c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016180:	4a0b      	ldr	r2, [pc, #44]	@ (80161b0 <generate_service_types+0xb8>)
 8016182:	f00b ff6b 	bl	802205c <sniprintf>
 8016186:	2800      	cmp	r0, #0
 8016188:	bfb4      	ite	lt
 801618a:	2600      	movlt	r6, #0
 801618c:	f006 0601 	andge.w	r6, r6, #1
 8016190:	42a0      	cmp	r0, r4
 8016192:	bfac      	ite	ge
 8016194:	2000      	movge	r0, #0
 8016196:	f006 0001 	andlt.w	r0, r6, #1
 801619a:	b007      	add	sp, #28
 801619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a0:	4b05      	ldr	r3, [pc, #20]	@ (80161b8 <generate_service_types+0xc0>)
 80161a2:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 80161b4 <generate_service_types+0xbc>
 80161a6:	4619      	mov	r1, r3
 80161a8:	e7bd      	b.n	8016126 <generate_service_types+0x2e>
 80161aa:	4b03      	ldr	r3, [pc, #12]	@ (80161b8 <generate_service_types+0xc0>)
 80161ac:	461a      	mov	r2, r3
 80161ae:	e7db      	b.n	8016168 <generate_service_types+0x70>
 80161b0:	0802488c 	.word	0x0802488c
 80161b4:	08024888 	.word	0x08024888
 80161b8:	08025954 	.word	0x08025954
 80161bc:	0802489c 	.word	0x0802489c
 80161c0:	080248a0 	.word	0x080248a0

080161c4 <generate_type_name>:
 80161c4:	2300      	movs	r3, #0
 80161c6:	b530      	push	{r4, r5, lr}
 80161c8:	700b      	strb	r3, [r1, #0]
 80161ca:	b087      	sub	sp, #28
 80161cc:	6803      	ldr	r3, [r0, #0]
 80161ce:	4614      	mov	r4, r2
 80161d0:	b1bb      	cbz	r3, 8016202 <generate_type_name+0x3e>
 80161d2:	4a0e      	ldr	r2, [pc, #56]	@ (801620c <generate_type_name+0x48>)
 80161d4:	4615      	mov	r5, r2
 80161d6:	9500      	str	r5, [sp, #0]
 80161d8:	9203      	str	r2, [sp, #12]
 80161da:	4d0d      	ldr	r5, [pc, #52]	@ (8016210 <generate_type_name+0x4c>)
 80161dc:	6842      	ldr	r2, [r0, #4]
 80161de:	4608      	mov	r0, r1
 80161e0:	490c      	ldr	r1, [pc, #48]	@ (8016214 <generate_type_name+0x50>)
 80161e2:	9204      	str	r2, [sp, #16]
 80161e4:	9105      	str	r1, [sp, #20]
 80161e6:	9102      	str	r1, [sp, #8]
 80161e8:	4621      	mov	r1, r4
 80161ea:	4a0b      	ldr	r2, [pc, #44]	@ (8016218 <generate_type_name+0x54>)
 80161ec:	9501      	str	r5, [sp, #4]
 80161ee:	f00b ff35 	bl	802205c <sniprintf>
 80161f2:	2800      	cmp	r0, #0
 80161f4:	bfa8      	it	ge
 80161f6:	4284      	cmpge	r4, r0
 80161f8:	bfcc      	ite	gt
 80161fa:	2001      	movgt	r0, #1
 80161fc:	2000      	movle	r0, #0
 80161fe:	b007      	add	sp, #28
 8016200:	bd30      	pop	{r4, r5, pc}
 8016202:	4b06      	ldr	r3, [pc, #24]	@ (801621c <generate_type_name+0x58>)
 8016204:	4a01      	ldr	r2, [pc, #4]	@ (801620c <generate_type_name+0x48>)
 8016206:	461d      	mov	r5, r3
 8016208:	e7e5      	b.n	80161d6 <generate_type_name+0x12>
 801620a:	bf00      	nop
 801620c:	08024888 	.word	0x08024888
 8016210:	080248a0 	.word	0x080248a0
 8016214:	0802489c 	.word	0x0802489c
 8016218:	0802488c 	.word	0x0802488c
 801621c:	08025954 	.word	0x08025954

08016220 <generate_topic_name>:
 8016220:	b530      	push	{r4, r5, lr}
 8016222:	4614      	mov	r4, r2
 8016224:	b083      	sub	sp, #12
 8016226:	4605      	mov	r5, r0
 8016228:	4b07      	ldr	r3, [pc, #28]	@ (8016248 <generate_topic_name+0x28>)
 801622a:	4a08      	ldr	r2, [pc, #32]	@ (801624c <generate_topic_name+0x2c>)
 801622c:	4608      	mov	r0, r1
 801622e:	9500      	str	r5, [sp, #0]
 8016230:	4621      	mov	r1, r4
 8016232:	f00b ff13 	bl	802205c <sniprintf>
 8016236:	2800      	cmp	r0, #0
 8016238:	bfa8      	it	ge
 801623a:	4284      	cmpge	r4, r0
 801623c:	bfcc      	ite	gt
 801623e:	2001      	movgt	r0, #1
 8016240:	2000      	movle	r0, #0
 8016242:	b003      	add	sp, #12
 8016244:	bd30      	pop	{r4, r5, pc}
 8016246:	bf00      	nop
 8016248:	080248c4 	.word	0x080248c4
 801624c:	080248a4 	.word	0x080248a4

08016250 <is_uxrce_rmw_identifier_valid>:
 8016250:	b510      	push	{r4, lr}
 8016252:	4604      	mov	r4, r0
 8016254:	b140      	cbz	r0, 8016268 <is_uxrce_rmw_identifier_valid+0x18>
 8016256:	f008 fab9 	bl	801e7cc <rmw_get_implementation_identifier>
 801625a:	4601      	mov	r1, r0
 801625c:	4620      	mov	r0, r4
 801625e:	f7ea f83f 	bl	80002e0 <strcmp>
 8016262:	fab0 f080 	clz	r0, r0
 8016266:	0940      	lsrs	r0, r0, #5
 8016268:	bd10      	pop	{r4, pc}
 801626a:	bf00      	nop

0801626c <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 801626c:	4b04      	ldr	r3, [pc, #16]	@ (8016280 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 801626e:	681a      	ldr	r2, [r3, #0]
 8016270:	b10a      	cbz	r2, 8016276 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xa>
 8016272:	4803      	ldr	r0, [pc, #12]	@ (8016280 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 8016274:	4770      	bx	lr
 8016276:	4a03      	ldr	r2, [pc, #12]	@ (8016284 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x18>)
 8016278:	4801      	ldr	r0, [pc, #4]	@ (8016280 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 801627a:	6812      	ldr	r2, [r2, #0]
 801627c:	601a      	str	r2, [r3, #0]
 801627e:	4770      	bx	lr
 8016280:	24000e18 	.word	0x24000e18
 8016284:	24000e94 	.word	0x24000e94

08016288 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016288:	4a02      	ldr	r2, [pc, #8]	@ (8016294 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xc>)
 801628a:	4b03      	ldr	r3, [pc, #12]	@ (8016298 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x10>)
 801628c:	6812      	ldr	r2, [r2, #0]
 801628e:	601a      	str	r2, [r3, #0]
 8016290:	4770      	bx	lr
 8016292:	bf00      	nop
 8016294:	24000e94 	.word	0x24000e94
 8016298:	24000e18 	.word	0x24000e18

0801629c <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_init_function>:
 801629c:	f009 bc62 	b.w	801fb64 <rosgraph_msgs__msg__Clock__init>

080162a0 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_fini_function>:
 80162a0:	f009 bc72 	b.w	801fb88 <rosgraph_msgs__msg__Clock__fini>

080162a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 80162a4:	b508      	push	{r3, lr}
 80162a6:	f7fc fc5f 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80162aa:	4b06      	ldr	r3, [pc, #24]	@ (80162c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80162ac:	4906      	ldr	r1, [pc, #24]	@ (80162c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x24>)
 80162ae:	681a      	ldr	r2, [r3, #0]
 80162b0:	60c8      	str	r0, [r1, #12]
 80162b2:	b10a      	cbz	r2, 80162b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>
 80162b4:	4803      	ldr	r0, [pc, #12]	@ (80162c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80162b6:	bd08      	pop	{r3, pc}
 80162b8:	4a04      	ldr	r2, [pc, #16]	@ (80162cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x28>)
 80162ba:	4802      	ldr	r0, [pc, #8]	@ (80162c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80162bc:	6812      	ldr	r2, [r2, #0]
 80162be:	601a      	str	r2, [r3, #0]
 80162c0:	bd08      	pop	{r3, pc}
 80162c2:	bf00      	nop
 80162c4:	24000e60 	.word	0x24000e60
 80162c8:	24000e24 	.word	0x24000e24
 80162cc:	24000e98 	.word	0x24000e98

080162d0 <get_serialized_size_rosgraph_msgs__msg__Clock>:
 80162d0:	b108      	cbz	r0, 80162d6 <get_serialized_size_rosgraph_msgs__msg__Clock+0x6>
 80162d2:	f7fc bc57 	b.w	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 80162d6:	4770      	bx	lr

080162d8 <_Clock__max_serialized_size>:
 80162d8:	b500      	push	{lr}
 80162da:	b083      	sub	sp, #12
 80162dc:	2301      	movs	r3, #1
 80162de:	2100      	movs	r1, #0
 80162e0:	f10d 0007 	add.w	r0, sp, #7
 80162e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80162e8:	f7fc fc9c 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 80162ec:	b003      	add	sp, #12
 80162ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80162f2:	bf00      	nop

080162f4 <_Clock__get_serialized_size>:
 80162f4:	b110      	cbz	r0, 80162fc <_Clock__get_serialized_size+0x8>
 80162f6:	2100      	movs	r1, #0
 80162f8:	f7fc bc44 	b.w	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 80162fc:	4770      	bx	lr
 80162fe:	bf00      	nop

08016300 <_Clock__cdr_deserialize>:
 8016300:	b570      	push	{r4, r5, r6, lr}
 8016302:	460c      	mov	r4, r1
 8016304:	b151      	cbz	r1, 801631c <_Clock__cdr_deserialize+0x1c>
 8016306:	4605      	mov	r5, r0
 8016308:	f7fc fca0 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801630c:	4603      	mov	r3, r0
 801630e:	4621      	mov	r1, r4
 8016310:	4628      	mov	r0, r5
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016318:	68db      	ldr	r3, [r3, #12]
 801631a:	4718      	bx	r3
 801631c:	4608      	mov	r0, r1
 801631e:	bd70      	pop	{r4, r5, r6, pc}

08016320 <_Clock__cdr_serialize>:
 8016320:	b160      	cbz	r0, 801633c <_Clock__cdr_serialize+0x1c>
 8016322:	b570      	push	{r4, r5, r6, lr}
 8016324:	4604      	mov	r4, r0
 8016326:	460d      	mov	r5, r1
 8016328:	f7fc fc90 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801632c:	4603      	mov	r3, r0
 801632e:	4629      	mov	r1, r5
 8016330:	4620      	mov	r0, r4
 8016332:	685b      	ldr	r3, [r3, #4]
 8016334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016338:	689b      	ldr	r3, [r3, #8]
 801633a:	4718      	bx	r3
 801633c:	4770      	bx	lr
 801633e:	bf00      	nop

08016340 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016340:	4800      	ldr	r0, [pc, #0]	@ (8016344 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x4>)
 8016342:	4770      	bx	lr
 8016344:	24000e6c 	.word	0x24000e6c

08016348 <get_message_typesupport_handle>:
 8016348:	6883      	ldr	r3, [r0, #8]
 801634a:	4718      	bx	r3

0801634c <get_message_typesupport_handle_function>:
 801634c:	b510      	push	{r4, lr}
 801634e:	4604      	mov	r4, r0
 8016350:	6800      	ldr	r0, [r0, #0]
 8016352:	f7e9 ffc5 	bl	80002e0 <strcmp>
 8016356:	2800      	cmp	r0, #0
 8016358:	bf0c      	ite	eq
 801635a:	4620      	moveq	r0, r4
 801635c:	2000      	movne	r0, #0
 801635e:	bd10      	pop	{r4, pc}

08016360 <get_service_typesupport_handle>:
 8016360:	6883      	ldr	r3, [r0, #8]
 8016362:	4718      	bx	r3

08016364 <get_service_typesupport_handle_function>:
 8016364:	b510      	push	{r4, lr}
 8016366:	4604      	mov	r4, r0
 8016368:	6800      	ldr	r0, [r0, #0]
 801636a:	f7e9 ffb9 	bl	80002e0 <strcmp>
 801636e:	2800      	cmp	r0, #0
 8016370:	bf0c      	ite	eq
 8016372:	4620      	moveq	r0, r4
 8016374:	2000      	movne	r0, #0
 8016376:	bd10      	pop	{r4, pc}

08016378 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801637c:	6805      	ldr	r5, [r0, #0]
 801637e:	4604      	mov	r4, r0
 8016380:	460e      	mov	r6, r1
 8016382:	4628      	mov	r0, r5
 8016384:	f7e9 ffac 	bl	80002e0 <strcmp>
 8016388:	b1c8      	cbz	r0, 80163be <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801638a:	4b11      	ldr	r3, [pc, #68]	@ (80163d0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	429d      	cmp	r5, r3
 8016390:	d112      	bne.n	80163b8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016392:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016396:	f8d8 4000 	ldr.w	r4, [r8]
 801639a:	b16c      	cbz	r4, 80163b8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801639c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80163a0:	2700      	movs	r7, #0
 80163a2:	3d04      	subs	r5, #4
 80163a4:	4631      	mov	r1, r6
 80163a6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80163aa:	f7e9 ff99 	bl	80002e0 <strcmp>
 80163ae:	00bb      	lsls	r3, r7, #2
 80163b0:	b140      	cbz	r0, 80163c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80163b2:	3701      	adds	r7, #1
 80163b4:	42bc      	cmp	r4, r7
 80163b6:	d1f5      	bne.n	80163a4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80163b8:	2000      	movs	r0, #0
 80163ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163be:	4620      	mov	r0, r4
 80163c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80163c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163cc:	58d3      	ldr	r3, [r2, r3]
 80163ce:	4718      	bx	r3
 80163d0:	24000e94 	.word	0x24000e94

080163d4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80163d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163d8:	6805      	ldr	r5, [r0, #0]
 80163da:	4604      	mov	r4, r0
 80163dc:	460e      	mov	r6, r1
 80163de:	4628      	mov	r0, r5
 80163e0:	f7e9 ff7e 	bl	80002e0 <strcmp>
 80163e4:	b1c8      	cbz	r0, 801641a <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80163e6:	4b11      	ldr	r3, [pc, #68]	@ (801642c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	429d      	cmp	r5, r3
 80163ec:	d112      	bne.n	8016414 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80163ee:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80163f2:	f8d8 4000 	ldr.w	r4, [r8]
 80163f6:	b16c      	cbz	r4, 8016414 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80163f8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80163fc:	2700      	movs	r7, #0
 80163fe:	3d04      	subs	r5, #4
 8016400:	4631      	mov	r1, r6
 8016402:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8016406:	f7e9 ff6b 	bl	80002e0 <strcmp>
 801640a:	00bb      	lsls	r3, r7, #2
 801640c:	b140      	cbz	r0, 8016420 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 801640e:	3701      	adds	r7, #1
 8016410:	42bc      	cmp	r4, r7
 8016412:	d1f5      	bne.n	8016400 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8016414:	2000      	movs	r0, #0
 8016416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801641a:	4620      	mov	r0, r4
 801641c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016420:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016428:	58d3      	ldr	r3, [r2, r3]
 801642a:	4718      	bx	r3
 801642c:	24000e94 	.word	0x24000e94

08016430 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8016430:	f009 bbae 	b.w	801fb90 <std_msgs__msg__Header__init>

08016434 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8016434:	f009 bbd0 	b.w	801fbd8 <std_msgs__msg__Header__fini>

08016438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8016438:	b508      	push	{r3, lr}
 801643a:	f7fc fb95 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801643e:	4b06      	ldr	r3, [pc, #24]	@ (8016458 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016440:	4906      	ldr	r1, [pc, #24]	@ (801645c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8016442:	681a      	ldr	r2, [r3, #0]
 8016444:	60c8      	str	r0, [r1, #12]
 8016446:	b10a      	cbz	r2, 801644c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8016448:	4803      	ldr	r0, [pc, #12]	@ (8016458 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801644a:	bd08      	pop	{r3, pc}
 801644c:	4a04      	ldr	r2, [pc, #16]	@ (8016460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801644e:	4802      	ldr	r0, [pc, #8]	@ (8016458 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016450:	6812      	ldr	r2, [r2, #0]
 8016452:	601a      	str	r2, [r3, #0]
 8016454:	bd08      	pop	{r3, pc}
 8016456:	bf00      	nop
 8016458:	24000f14 	.word	0x24000f14
 801645c:	24000e9c 	.word	0x24000e9c
 8016460:	24000e98 	.word	0x24000e98

08016464 <_Header__max_serialized_size>:
 8016464:	b500      	push	{lr}
 8016466:	b083      	sub	sp, #12
 8016468:	2301      	movs	r3, #1
 801646a:	2100      	movs	r1, #0
 801646c:	f10d 0007 	add.w	r0, sp, #7
 8016470:	f88d 3007 	strb.w	r3, [sp, #7]
 8016474:	f7fc fbd6 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8016478:	b003      	add	sp, #12
 801647a:	f85d fb04 	ldr.w	pc, [sp], #4
 801647e:	bf00      	nop

08016480 <get_serialized_size_std_msgs__msg__Header>:
 8016480:	b570      	push	{r4, r5, r6, lr}
 8016482:	4605      	mov	r5, r0
 8016484:	b168      	cbz	r0, 80164a2 <get_serialized_size_std_msgs__msg__Header+0x22>
 8016486:	460c      	mov	r4, r1
 8016488:	f7fc fb7c 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801648c:	2104      	movs	r1, #4
 801648e:	1826      	adds	r6, r4, r0
 8016490:	f1c4 0405 	rsb	r4, r4, #5
 8016494:	4630      	mov	r0, r6
 8016496:	f7fd fe79 	bl	801418c <ucdr_alignment>
 801649a:	68e9      	ldr	r1, [r5, #12]
 801649c:	440c      	add	r4, r1
 801649e:	4404      	add	r4, r0
 80164a0:	19a0      	adds	r0, r4, r6
 80164a2:	bd70      	pop	{r4, r5, r6, pc}

080164a4 <_Header__cdr_deserialize>:
 80164a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164a6:	460c      	mov	r4, r1
 80164a8:	b083      	sub	sp, #12
 80164aa:	b1e9      	cbz	r1, 80164e8 <_Header__cdr_deserialize+0x44>
 80164ac:	4606      	mov	r6, r0
 80164ae:	f7fc fbcd 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80164b2:	4603      	mov	r3, r0
 80164b4:	4621      	mov	r1, r4
 80164b6:	4630      	mov	r0, r6
 80164b8:	685b      	ldr	r3, [r3, #4]
 80164ba:	68db      	ldr	r3, [r3, #12]
 80164bc:	4798      	blx	r3
 80164be:	6927      	ldr	r7, [r4, #16]
 80164c0:	ab01      	add	r3, sp, #4
 80164c2:	68a1      	ldr	r1, [r4, #8]
 80164c4:	463a      	mov	r2, r7
 80164c6:	4630      	mov	r0, r6
 80164c8:	f000 fc86 	bl	8016dd8 <ucdr_deserialize_sequence_char>
 80164cc:	9b01      	ldr	r3, [sp, #4]
 80164ce:	4605      	mov	r5, r0
 80164d0:	b920      	cbnz	r0, 80164dc <_Header__cdr_deserialize+0x38>
 80164d2:	429f      	cmp	r7, r3
 80164d4:	d30c      	bcc.n	80164f0 <_Header__cdr_deserialize+0x4c>
 80164d6:	4628      	mov	r0, r5
 80164d8:	b003      	add	sp, #12
 80164da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164dc:	b103      	cbz	r3, 80164e0 <_Header__cdr_deserialize+0x3c>
 80164de:	3b01      	subs	r3, #1
 80164e0:	4628      	mov	r0, r5
 80164e2:	60e3      	str	r3, [r4, #12]
 80164e4:	b003      	add	sp, #12
 80164e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164e8:	460d      	mov	r5, r1
 80164ea:	4628      	mov	r0, r5
 80164ec:	b003      	add	sp, #12
 80164ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164f0:	2101      	movs	r1, #1
 80164f2:	4630      	mov	r0, r6
 80164f4:	75b5      	strb	r5, [r6, #22]
 80164f6:	7571      	strb	r1, [r6, #21]
 80164f8:	60e5      	str	r5, [r4, #12]
 80164fa:	f7fd fe5f 	bl	80141bc <ucdr_align_to>
 80164fe:	4630      	mov	r0, r6
 8016500:	9901      	ldr	r1, [sp, #4]
 8016502:	f7fd fe93 	bl	801422c <ucdr_advance_buffer>
 8016506:	4628      	mov	r0, r5
 8016508:	b003      	add	sp, #12
 801650a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801650c <_Header__cdr_serialize>:
 801650c:	b308      	cbz	r0, 8016552 <_Header__cdr_serialize+0x46>
 801650e:	b570      	push	{r4, r5, r6, lr}
 8016510:	4604      	mov	r4, r0
 8016512:	460d      	mov	r5, r1
 8016514:	f7fc fb9a 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016518:	4603      	mov	r3, r0
 801651a:	4629      	mov	r1, r5
 801651c:	4620      	mov	r0, r4
 801651e:	685b      	ldr	r3, [r3, #4]
 8016520:	689b      	ldr	r3, [r3, #8]
 8016522:	4798      	blx	r3
 8016524:	68a6      	ldr	r6, [r4, #8]
 8016526:	b15e      	cbz	r6, 8016540 <_Header__cdr_serialize+0x34>
 8016528:	4630      	mov	r0, r6
 801652a:	f7e9 fee3 	bl	80002f4 <strlen>
 801652e:	4603      	mov	r3, r0
 8016530:	1c42      	adds	r2, r0, #1
 8016532:	4631      	mov	r1, r6
 8016534:	4628      	mov	r0, r5
 8016536:	60e3      	str	r3, [r4, #12]
 8016538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801653c:	f000 bc3a 	b.w	8016db4 <ucdr_serialize_sequence_char>
 8016540:	4633      	mov	r3, r6
 8016542:	4632      	mov	r2, r6
 8016544:	4631      	mov	r1, r6
 8016546:	4628      	mov	r0, r5
 8016548:	60e3      	str	r3, [r4, #12]
 801654a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801654e:	f000 bc31 	b.w	8016db4 <ucdr_serialize_sequence_char>
 8016552:	4770      	bx	lr

08016554 <_Header__get_serialized_size>:
 8016554:	b538      	push	{r3, r4, r5, lr}
 8016556:	4604      	mov	r4, r0
 8016558:	b150      	cbz	r0, 8016570 <_Header__get_serialized_size+0x1c>
 801655a:	2100      	movs	r1, #0
 801655c:	f7fc fb12 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8016560:	2104      	movs	r1, #4
 8016562:	4605      	mov	r5, r0
 8016564:	f7fd fe12 	bl	801418c <ucdr_alignment>
 8016568:	68e2      	ldr	r2, [r4, #12]
 801656a:	3205      	adds	r2, #5
 801656c:	1953      	adds	r3, r2, r5
 801656e:	4418      	add	r0, r3
 8016570:	bd38      	pop	{r3, r4, r5, pc}
 8016572:	bf00      	nop

08016574 <max_serialized_size_std_msgs__msg__Header>:
 8016574:	2301      	movs	r3, #1
 8016576:	b510      	push	{r4, lr}
 8016578:	7003      	strb	r3, [r0, #0]
 801657a:	4604      	mov	r4, r0
 801657c:	f7fc fb52 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8016580:	2300      	movs	r3, #0
 8016582:	7023      	strb	r3, [r4, #0]
 8016584:	bd10      	pop	{r4, pc}
 8016586:	bf00      	nop

08016588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8016588:	4800      	ldr	r0, [pc, #0]	@ (801658c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801658a:	4770      	bx	lr
 801658c:	24000f20 	.word	0x24000f20

08016590 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016590:	4b04      	ldr	r3, [pc, #16]	@ (80165a4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8016592:	681a      	ldr	r2, [r3, #0]
 8016594:	b10a      	cbz	r2, 801659a <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 8016596:	4803      	ldr	r0, [pc, #12]	@ (80165a4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8016598:	4770      	bx	lr
 801659a:	4a03      	ldr	r2, [pc, #12]	@ (80165a8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 801659c:	4801      	ldr	r0, [pc, #4]	@ (80165a4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 801659e:	6812      	ldr	r2, [r2, #0]
 80165a0:	601a      	str	r2, [r3, #0]
 80165a2:	4770      	bx	lr
 80165a4:	24000f50 	.word	0x24000f50
 80165a8:	24000e94 	.word	0x24000e94

080165ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80165ac:	4a02      	ldr	r2, [pc, #8]	@ (80165b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 80165ae:	4b03      	ldr	r3, [pc, #12]	@ (80165bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 80165b0:	6812      	ldr	r2, [r2, #0]
 80165b2:	601a      	str	r2, [r3, #0]
 80165b4:	4770      	bx	lr
 80165b6:	bf00      	nop
 80165b8:	24000e94 	.word	0x24000e94
 80165bc:	24000f50 	.word	0x24000f50

080165c0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80165c0:	4b04      	ldr	r3, [pc, #16]	@ (80165d4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80165c2:	681a      	ldr	r2, [r3, #0]
 80165c4:	b10a      	cbz	r2, 80165ca <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 80165c6:	4803      	ldr	r0, [pc, #12]	@ (80165d4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80165c8:	4770      	bx	lr
 80165ca:	4a03      	ldr	r2, [pc, #12]	@ (80165d8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 80165cc:	4801      	ldr	r0, [pc, #4]	@ (80165d4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80165ce:	6812      	ldr	r2, [r2, #0]
 80165d0:	601a      	str	r2, [r3, #0]
 80165d2:	4770      	bx	lr
 80165d4:	24000f64 	.word	0x24000f64
 80165d8:	24000e94 	.word	0x24000e94

080165dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80165dc:	4a02      	ldr	r2, [pc, #8]	@ (80165e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 80165de:	4b03      	ldr	r3, [pc, #12]	@ (80165ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 80165e0:	6812      	ldr	r2, [r2, #0]
 80165e2:	601a      	str	r2, [r3, #0]
 80165e4:	4770      	bx	lr
 80165e6:	bf00      	nop
 80165e8:	24000e94 	.word	0x24000e94
 80165ec:	24000f64 	.word	0x24000f64

080165f0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80165f0:	4b04      	ldr	r3, [pc, #16]	@ (8016604 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80165f2:	681a      	ldr	r2, [r3, #0]
 80165f4:	b10a      	cbz	r2, 80165fa <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 80165f6:	4803      	ldr	r0, [pc, #12]	@ (8016604 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80165f8:	4770      	bx	lr
 80165fa:	4a03      	ldr	r2, [pc, #12]	@ (8016608 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 80165fc:	4801      	ldr	r0, [pc, #4]	@ (8016604 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80165fe:	6812      	ldr	r2, [r2, #0]
 8016600:	601a      	str	r2, [r3, #0]
 8016602:	4770      	bx	lr
 8016604:	24000f78 	.word	0x24000f78
 8016608:	24000e94 	.word	0x24000e94

0801660c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 801660c:	4a02      	ldr	r2, [pc, #8]	@ (8016618 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 801660e:	4b03      	ldr	r3, [pc, #12]	@ (801661c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8016610:	6812      	ldr	r2, [r2, #0]
 8016612:	601a      	str	r2, [r3, #0]
 8016614:	4770      	bx	lr
 8016616:	bf00      	nop
 8016618:	24000e94 	.word	0x24000e94
 801661c:	24000f78 	.word	0x24000f78

08016620 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016620:	4b04      	ldr	r3, [pc, #16]	@ (8016634 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8016622:	681a      	ldr	r2, [r3, #0]
 8016624:	b10a      	cbz	r2, 801662a <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 8016626:	4803      	ldr	r0, [pc, #12]	@ (8016634 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8016628:	4770      	bx	lr
 801662a:	4a03      	ldr	r2, [pc, #12]	@ (8016638 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 801662c:	4801      	ldr	r0, [pc, #4]	@ (8016634 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 801662e:	6812      	ldr	r2, [r2, #0]
 8016630:	601a      	str	r2, [r3, #0]
 8016632:	4770      	bx	lr
 8016634:	24000f8c 	.word	0x24000f8c
 8016638:	24000e94 	.word	0x24000e94

0801663c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801663c:	4a02      	ldr	r2, [pc, #8]	@ (8016648 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 801663e:	4b03      	ldr	r3, [pc, #12]	@ (801664c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8016640:	6812      	ldr	r2, [r2, #0]
 8016642:	601a      	str	r2, [r3, #0]
 8016644:	4770      	bx	lr
 8016646:	bf00      	nop
 8016648:	24000e94 	.word	0x24000e94
 801664c:	24000f8c 	.word	0x24000f8c

08016650 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8016650:	f009 bace 	b.w	801fbf0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08016654 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8016654:	f009 baf0 	b.w	801fc38 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08016658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016658:	b510      	push	{r4, lr}
 801665a:	4c08      	ldr	r4, [pc, #32]	@ (801667c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 801665c:	f7ff feec 	bl	8016438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016660:	60e0      	str	r0, [r4, #12]
 8016662:	f009 fb55 	bl	801fd10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8016666:	4b06      	ldr	r3, [pc, #24]	@ (8016680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016668:	64a0      	str	r0, [r4, #72]	@ 0x48
 801666a:	681a      	ldr	r2, [r3, #0]
 801666c:	b10a      	cbz	r2, 8016672 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 801666e:	4804      	ldr	r0, [pc, #16]	@ (8016680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016670:	bd10      	pop	{r4, pc}
 8016672:	4a04      	ldr	r2, [pc, #16]	@ (8016684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 8016674:	4802      	ldr	r0, [pc, #8]	@ (8016680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016676:	6812      	ldr	r2, [r2, #0]
 8016678:	601a      	str	r2, [r3, #0]
 801667a:	bd10      	pop	{r4, pc}
 801667c:	24000f98 	.word	0x24000f98
 8016680:	24001010 	.word	0x24001010
 8016684:	24000e98 	.word	0x24000e98

08016688 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8016688:	f009 bae2 	b.w	801fc50 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

0801668c <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 801668c:	f009 bb04 	b.w	801fc98 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08016690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016690:	b510      	push	{r4, lr}
 8016692:	4c08      	ldr	r4, [pc, #32]	@ (80166b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8016694:	f7ff fed0 	bl	8016438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016698:	60e0      	str	r0, [r4, #12]
 801669a:	f009 fb4b 	bl	801fd34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801669e:	4b06      	ldr	r3, [pc, #24]	@ (80166b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80166a0:	64a0      	str	r0, [r4, #72]	@ 0x48
 80166a2:	681a      	ldr	r2, [r3, #0]
 80166a4:	b10a      	cbz	r2, 80166aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 80166a6:	4804      	ldr	r0, [pc, #16]	@ (80166b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80166a8:	bd10      	pop	{r4, pc}
 80166aa:	4a04      	ldr	r2, [pc, #16]	@ (80166bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 80166ac:	4802      	ldr	r0, [pc, #8]	@ (80166b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80166ae:	6812      	ldr	r2, [r2, #0]
 80166b0:	601a      	str	r2, [r3, #0]
 80166b2:	bd10      	pop	{r4, pc}
 80166b4:	2400101c 	.word	0x2400101c
 80166b8:	24001094 	.word	0x24001094
 80166bc:	24000e98 	.word	0x24000e98

080166c0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 80166c0:	f009 baf6 	b.w	801fcb0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

080166c4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 80166c4:	f009 bb06 	b.w	801fcd4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

080166c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80166c8:	b508      	push	{r3, lr}
 80166ca:	f7fc fa4d 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80166ce:	4b06      	ldr	r3, [pc, #24]	@ (80166e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80166d0:	4906      	ldr	r1, [pc, #24]	@ (80166ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 80166d2:	681a      	ldr	r2, [r3, #0]
 80166d4:	60c8      	str	r0, [r1, #12]
 80166d6:	b10a      	cbz	r2, 80166dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 80166d8:	4803      	ldr	r0, [pc, #12]	@ (80166e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80166da:	bd08      	pop	{r3, pc}
 80166dc:	4a04      	ldr	r2, [pc, #16]	@ (80166f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 80166de:	4802      	ldr	r0, [pc, #8]	@ (80166e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80166e0:	6812      	ldr	r2, [r2, #0]
 80166e2:	601a      	str	r2, [r3, #0]
 80166e4:	bd08      	pop	{r3, pc}
 80166e6:	bf00      	nop
 80166e8:	24001118 	.word	0x24001118
 80166ec:	240010a0 	.word	0x240010a0
 80166f0:	24000e98 	.word	0x24000e98

080166f4 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 80166f4:	f009 baf2 	b.w	801fcdc <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

080166f8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 80166f8:	f009 bb02 	b.w	801fd00 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

080166fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80166fc:	b508      	push	{r3, lr}
 80166fe:	f7fc fa33 	bl	8012b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016702:	4b06      	ldr	r3, [pc, #24]	@ (801671c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8016704:	4906      	ldr	r1, [pc, #24]	@ (8016720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8016706:	681a      	ldr	r2, [r3, #0]
 8016708:	60c8      	str	r0, [r1, #12]
 801670a:	b10a      	cbz	r2, 8016710 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 801670c:	4803      	ldr	r0, [pc, #12]	@ (801671c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801670e:	bd08      	pop	{r3, pc}
 8016710:	4a04      	ldr	r2, [pc, #16]	@ (8016724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8016712:	4802      	ldr	r0, [pc, #8]	@ (801671c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8016714:	6812      	ldr	r2, [r2, #0]
 8016716:	601a      	str	r2, [r3, #0]
 8016718:	bd08      	pop	{r3, pc}
 801671a:	bf00      	nop
 801671c:	2400119c 	.word	0x2400119c
 8016720:	24001124 	.word	0x24001124
 8016724:	24000e98 	.word	0x24000e98

08016728 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016728:	b538      	push	{r3, r4, r5, lr}
 801672a:	4604      	mov	r4, r0
 801672c:	b150      	cbz	r0, 8016744 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 801672e:	460d      	mov	r5, r1
 8016730:	f7ff fea6 	bl	8016480 <get_serialized_size_std_msgs__msg__Header>
 8016734:	4603      	mov	r3, r0
 8016736:	f104 0018 	add.w	r0, r4, #24
 801673a:	461c      	mov	r4, r3
 801673c:	18e9      	adds	r1, r5, r3
 801673e:	f009 fb07 	bl	801fd50 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8016742:	4420      	add	r0, r4
 8016744:	bd38      	pop	{r3, r4, r5, pc}
 8016746:	bf00      	nop

08016748 <_ActuationCommandStamped__cdr_deserialize>:
 8016748:	b570      	push	{r4, r5, r6, lr}
 801674a:	460c      	mov	r4, r1
 801674c:	b199      	cbz	r1, 8016776 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 801674e:	4605      	mov	r5, r0
 8016750:	f7ff ff1a 	bl	8016588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016754:	4603      	mov	r3, r0
 8016756:	4621      	mov	r1, r4
 8016758:	4628      	mov	r0, r5
 801675a:	685b      	ldr	r3, [r3, #4]
 801675c:	68db      	ldr	r3, [r3, #12]
 801675e:	4798      	blx	r3
 8016760:	f009 fb7e 	bl	801fe60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8016764:	4603      	mov	r3, r0
 8016766:	f104 0118 	add.w	r1, r4, #24
 801676a:	4628      	mov	r0, r5
 801676c:	685b      	ldr	r3, [r3, #4]
 801676e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016772:	68db      	ldr	r3, [r3, #12]
 8016774:	4718      	bx	r3
 8016776:	4608      	mov	r0, r1
 8016778:	bd70      	pop	{r4, r5, r6, pc}
 801677a:	bf00      	nop

0801677c <_ActuationCommandStamped__cdr_serialize>:
 801677c:	b510      	push	{r4, lr}
 801677e:	b082      	sub	sp, #8
 8016780:	9101      	str	r1, [sp, #4]
 8016782:	b1a0      	cbz	r0, 80167ae <_ActuationCommandStamped__cdr_serialize+0x32>
 8016784:	4604      	mov	r4, r0
 8016786:	f7ff feff 	bl	8016588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801678a:	4603      	mov	r3, r0
 801678c:	9901      	ldr	r1, [sp, #4]
 801678e:	4620      	mov	r0, r4
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	4798      	blx	r3
 8016796:	f009 fb63 	bl	801fe60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801679a:	4603      	mov	r3, r0
 801679c:	9901      	ldr	r1, [sp, #4]
 801679e:	f104 0018 	add.w	r0, r4, #24
 80167a2:	685b      	ldr	r3, [r3, #4]
 80167a4:	689b      	ldr	r3, [r3, #8]
 80167a6:	b002      	add	sp, #8
 80167a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167ac:	4718      	bx	r3
 80167ae:	b002      	add	sp, #8
 80167b0:	bd10      	pop	{r4, pc}
 80167b2:	bf00      	nop

080167b4 <_ActuationCommandStamped__get_serialized_size>:
 80167b4:	b510      	push	{r4, lr}
 80167b6:	4604      	mov	r4, r0
 80167b8:	b148      	cbz	r0, 80167ce <_ActuationCommandStamped__get_serialized_size+0x1a>
 80167ba:	2100      	movs	r1, #0
 80167bc:	f7ff fe60 	bl	8016480 <get_serialized_size_std_msgs__msg__Header>
 80167c0:	4601      	mov	r1, r0
 80167c2:	f104 0018 	add.w	r0, r4, #24
 80167c6:	460c      	mov	r4, r1
 80167c8:	f009 fac2 	bl	801fd50 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80167cc:	4420      	add	r0, r4
 80167ce:	bd10      	pop	{r4, pc}

080167d0 <_ActuationCommandStamped__max_serialized_size>:
 80167d0:	b510      	push	{r4, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	2301      	movs	r3, #1
 80167d6:	2100      	movs	r1, #0
 80167d8:	f10d 0007 	add.w	r0, sp, #7
 80167dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80167e0:	f7ff fec8 	bl	8016574 <max_serialized_size_std_msgs__msg__Header>
 80167e4:	4604      	mov	r4, r0
 80167e6:	f10d 0007 	add.w	r0, sp, #7
 80167ea:	4621      	mov	r1, r4
 80167ec:	f009 fb1e 	bl	801fe2c <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80167f0:	4420      	add	r0, r4
 80167f2:	b002      	add	sp, #8
 80167f4:	bd10      	pop	{r4, pc}
 80167f6:	bf00      	nop

080167f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80167f8:	4800      	ldr	r0, [pc, #0]	@ (80167fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 80167fa:	4770      	bx	lr
 80167fc:	240011a8 	.word	0x240011a8

08016800 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016800:	b538      	push	{r3, r4, r5, lr}
 8016802:	4604      	mov	r4, r0
 8016804:	b150      	cbz	r0, 801681c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8016806:	460d      	mov	r5, r1
 8016808:	f7ff fe3a 	bl	8016480 <get_serialized_size_std_msgs__msg__Header>
 801680c:	4603      	mov	r3, r0
 801680e:	f104 0018 	add.w	r0, r4, #24
 8016812:	461c      	mov	r4, r3
 8016814:	18e9      	adds	r1, r5, r3
 8016816:	f009 fb27 	bl	801fe68 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 801681a:	4420      	add	r0, r4
 801681c:	bd38      	pop	{r3, r4, r5, pc}
 801681e:	bf00      	nop

08016820 <_ActuationStatusStamped__cdr_deserialize>:
 8016820:	b570      	push	{r4, r5, r6, lr}
 8016822:	460c      	mov	r4, r1
 8016824:	b199      	cbz	r1, 801684e <_ActuationStatusStamped__cdr_deserialize+0x2e>
 8016826:	4605      	mov	r5, r0
 8016828:	f7ff feae 	bl	8016588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801682c:	4603      	mov	r3, r0
 801682e:	4621      	mov	r1, r4
 8016830:	4628      	mov	r0, r5
 8016832:	685b      	ldr	r3, [r3, #4]
 8016834:	68db      	ldr	r3, [r3, #12]
 8016836:	4798      	blx	r3
 8016838:	f009 fb9e 	bl	801ff78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801683c:	4603      	mov	r3, r0
 801683e:	f104 0118 	add.w	r1, r4, #24
 8016842:	4628      	mov	r0, r5
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801684a:	68db      	ldr	r3, [r3, #12]
 801684c:	4718      	bx	r3
 801684e:	4608      	mov	r0, r1
 8016850:	bd70      	pop	{r4, r5, r6, pc}
 8016852:	bf00      	nop

08016854 <_ActuationStatusStamped__cdr_serialize>:
 8016854:	b510      	push	{r4, lr}
 8016856:	b082      	sub	sp, #8
 8016858:	9101      	str	r1, [sp, #4]
 801685a:	b1a0      	cbz	r0, 8016886 <_ActuationStatusStamped__cdr_serialize+0x32>
 801685c:	4604      	mov	r4, r0
 801685e:	f7ff fe93 	bl	8016588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016862:	4603      	mov	r3, r0
 8016864:	9901      	ldr	r1, [sp, #4]
 8016866:	4620      	mov	r0, r4
 8016868:	685b      	ldr	r3, [r3, #4]
 801686a:	689b      	ldr	r3, [r3, #8]
 801686c:	4798      	blx	r3
 801686e:	f009 fb83 	bl	801ff78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8016872:	4603      	mov	r3, r0
 8016874:	9901      	ldr	r1, [sp, #4]
 8016876:	f104 0018 	add.w	r0, r4, #24
 801687a:	685b      	ldr	r3, [r3, #4]
 801687c:	689b      	ldr	r3, [r3, #8]
 801687e:	b002      	add	sp, #8
 8016880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016884:	4718      	bx	r3
 8016886:	b002      	add	sp, #8
 8016888:	bd10      	pop	{r4, pc}
 801688a:	bf00      	nop

0801688c <_ActuationStatusStamped__get_serialized_size>:
 801688c:	b510      	push	{r4, lr}
 801688e:	4604      	mov	r4, r0
 8016890:	b148      	cbz	r0, 80168a6 <_ActuationStatusStamped__get_serialized_size+0x1a>
 8016892:	2100      	movs	r1, #0
 8016894:	f7ff fdf4 	bl	8016480 <get_serialized_size_std_msgs__msg__Header>
 8016898:	4601      	mov	r1, r0
 801689a:	f104 0018 	add.w	r0, r4, #24
 801689e:	460c      	mov	r4, r1
 80168a0:	f009 fae2 	bl	801fe68 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80168a4:	4420      	add	r0, r4
 80168a6:	bd10      	pop	{r4, pc}

080168a8 <_ActuationStatusStamped__max_serialized_size>:
 80168a8:	b510      	push	{r4, lr}
 80168aa:	b082      	sub	sp, #8
 80168ac:	2301      	movs	r3, #1
 80168ae:	2100      	movs	r1, #0
 80168b0:	f10d 0007 	add.w	r0, sp, #7
 80168b4:	f88d 3007 	strb.w	r3, [sp, #7]
 80168b8:	f7ff fe5c 	bl	8016574 <max_serialized_size_std_msgs__msg__Header>
 80168bc:	4604      	mov	r4, r0
 80168be:	f10d 0007 	add.w	r0, sp, #7
 80168c2:	4621      	mov	r1, r4
 80168c4:	f009 fb3e 	bl	801ff44 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80168c8:	4420      	add	r0, r4
 80168ca:	b002      	add	sp, #8
 80168cc:	bd10      	pop	{r4, pc}
 80168ce:	bf00      	nop

080168d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80168d0:	4800      	ldr	r0, [pc, #0]	@ (80168d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 80168d2:	4770      	bx	lr
 80168d4:	240011d0 	.word	0x240011d0

080168d8 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80168d8:	b538      	push	{r3, r4, r5, lr}
 80168da:	b158      	cbz	r0, 80168f4 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 80168dc:	460d      	mov	r5, r1
 80168de:	f7fc f951 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 80168e2:	2104      	movs	r1, #4
 80168e4:	182c      	adds	r4, r5, r0
 80168e6:	f1c5 0504 	rsb	r5, r5, #4
 80168ea:	4620      	mov	r0, r4
 80168ec:	f7fd fc4e 	bl	801418c <ucdr_alignment>
 80168f0:	4428      	add	r0, r5
 80168f2:	4420      	add	r0, r4
 80168f4:	bd38      	pop	{r3, r4, r5, pc}
 80168f6:	bf00      	nop

080168f8 <_SteeringWheelStatusStamped__cdr_deserialize>:
 80168f8:	b538      	push	{r3, r4, r5, lr}
 80168fa:	460c      	mov	r4, r1
 80168fc:	b179      	cbz	r1, 801691e <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 80168fe:	4605      	mov	r5, r0
 8016900:	f7fc f9a4 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016904:	4603      	mov	r3, r0
 8016906:	4621      	mov	r1, r4
 8016908:	4628      	mov	r0, r5
 801690a:	685b      	ldr	r3, [r3, #4]
 801690c:	68db      	ldr	r3, [r3, #12]
 801690e:	4798      	blx	r3
 8016910:	f104 0108 	add.w	r1, r4, #8
 8016914:	4628      	mov	r0, r5
 8016916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801691a:	f7fd b9b9 	b.w	8013c90 <ucdr_deserialize_float>
 801691e:	4608      	mov	r0, r1
 8016920:	bd38      	pop	{r3, r4, r5, pc}
 8016922:	bf00      	nop

08016924 <_SteeringWheelStatusStamped__cdr_serialize>:
 8016924:	b188      	cbz	r0, 801694a <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8016926:	b538      	push	{r3, r4, r5, lr}
 8016928:	4604      	mov	r4, r0
 801692a:	460d      	mov	r5, r1
 801692c:	f7fc f98e 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016930:	4603      	mov	r3, r0
 8016932:	4629      	mov	r1, r5
 8016934:	4620      	mov	r0, r4
 8016936:	685b      	ldr	r3, [r3, #4]
 8016938:	689b      	ldr	r3, [r3, #8]
 801693a:	4798      	blx	r3
 801693c:	ed94 0a02 	vldr	s0, [r4, #8]
 8016940:	4628      	mov	r0, r5
 8016942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016946:	f7fd b90b 	b.w	8013b60 <ucdr_serialize_float>
 801694a:	4770      	bx	lr

0801694c <_SteeringWheelStatusStamped__get_serialized_size>:
 801694c:	b150      	cbz	r0, 8016964 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 801694e:	2100      	movs	r1, #0
 8016950:	b510      	push	{r4, lr}
 8016952:	f7fc f917 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8016956:	4604      	mov	r4, r0
 8016958:	2104      	movs	r1, #4
 801695a:	f7fd fc17 	bl	801418c <ucdr_alignment>
 801695e:	4420      	add	r0, r4
 8016960:	3004      	adds	r0, #4
 8016962:	bd10      	pop	{r4, pc}
 8016964:	4770      	bx	lr
 8016966:	bf00      	nop

08016968 <_SteeringWheelStatusStamped__max_serialized_size>:
 8016968:	b510      	push	{r4, lr}
 801696a:	b082      	sub	sp, #8
 801696c:	2301      	movs	r3, #1
 801696e:	2100      	movs	r1, #0
 8016970:	f10d 0007 	add.w	r0, sp, #7
 8016974:	f88d 3007 	strb.w	r3, [sp, #7]
 8016978:	f7fc f954 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 801697c:	4604      	mov	r4, r0
 801697e:	2104      	movs	r1, #4
 8016980:	f7fd fc04 	bl	801418c <ucdr_alignment>
 8016984:	4420      	add	r0, r4
 8016986:	3004      	adds	r0, #4
 8016988:	b002      	add	sp, #8
 801698a:	bd10      	pop	{r4, pc}

0801698c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 801698c:	4800      	ldr	r0, [pc, #0]	@ (8016990 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 801698e:	4770      	bx	lr
 8016990:	240011f8 	.word	0x240011f8

08016994 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016994:	b538      	push	{r3, r4, r5, lr}
 8016996:	b158      	cbz	r0, 80169b0 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8016998:	460d      	mov	r5, r1
 801699a:	f7fc f8f3 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 801699e:	2101      	movs	r1, #1
 80169a0:	182c      	adds	r4, r5, r0
 80169a2:	f1c5 0501 	rsb	r5, r5, #1
 80169a6:	4620      	mov	r0, r4
 80169a8:	f7fd fbf0 	bl	801418c <ucdr_alignment>
 80169ac:	4428      	add	r0, r5
 80169ae:	4420      	add	r0, r4
 80169b0:	bd38      	pop	{r3, r4, r5, pc}
 80169b2:	bf00      	nop

080169b4 <_VehicleEmergencyStamped__cdr_deserialize>:
 80169b4:	b538      	push	{r3, r4, r5, lr}
 80169b6:	460c      	mov	r4, r1
 80169b8:	b179      	cbz	r1, 80169da <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 80169ba:	4605      	mov	r5, r0
 80169bc:	f7fc f946 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80169c0:	4603      	mov	r3, r0
 80169c2:	4621      	mov	r1, r4
 80169c4:	4628      	mov	r0, r5
 80169c6:	685b      	ldr	r3, [r3, #4]
 80169c8:	68db      	ldr	r3, [r3, #12]
 80169ca:	4798      	blx	r3
 80169cc:	f104 0108 	add.w	r1, r4, #8
 80169d0:	4628      	mov	r0, r5
 80169d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169d6:	f7fc b953 	b.w	8012c80 <ucdr_deserialize_bool>
 80169da:	4608      	mov	r0, r1
 80169dc:	bd38      	pop	{r3, r4, r5, pc}
 80169de:	bf00      	nop

080169e0 <_VehicleEmergencyStamped__cdr_serialize>:
 80169e0:	b180      	cbz	r0, 8016a04 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 80169e2:	b538      	push	{r3, r4, r5, lr}
 80169e4:	4604      	mov	r4, r0
 80169e6:	460d      	mov	r5, r1
 80169e8:	f7fc f930 	bl	8012c4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80169ec:	4603      	mov	r3, r0
 80169ee:	4629      	mov	r1, r5
 80169f0:	4620      	mov	r0, r4
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	689b      	ldr	r3, [r3, #8]
 80169f6:	4798      	blx	r3
 80169f8:	7a21      	ldrb	r1, [r4, #8]
 80169fa:	4628      	mov	r0, r5
 80169fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a00:	f7fc b928 	b.w	8012c54 <ucdr_serialize_bool>
 8016a04:	4770      	bx	lr
 8016a06:	bf00      	nop

08016a08 <_VehicleEmergencyStamped__get_serialized_size>:
 8016a08:	b150      	cbz	r0, 8016a20 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8016a0a:	2100      	movs	r1, #0
 8016a0c:	b510      	push	{r4, lr}
 8016a0e:	f7fc f8b9 	bl	8012b84 <get_serialized_size_builtin_interfaces__msg__Time>
 8016a12:	4604      	mov	r4, r0
 8016a14:	2101      	movs	r1, #1
 8016a16:	f7fd fbb9 	bl	801418c <ucdr_alignment>
 8016a1a:	4420      	add	r0, r4
 8016a1c:	3001      	adds	r0, #1
 8016a1e:	bd10      	pop	{r4, pc}
 8016a20:	4770      	bx	lr
 8016a22:	bf00      	nop

08016a24 <_VehicleEmergencyStamped__max_serialized_size>:
 8016a24:	b510      	push	{r4, lr}
 8016a26:	b082      	sub	sp, #8
 8016a28:	2401      	movs	r4, #1
 8016a2a:	2100      	movs	r1, #0
 8016a2c:	f10d 0007 	add.w	r0, sp, #7
 8016a30:	f88d 4007 	strb.w	r4, [sp, #7]
 8016a34:	f7fc f8f6 	bl	8012c24 <max_serialized_size_builtin_interfaces__msg__Time>
 8016a38:	4621      	mov	r1, r4
 8016a3a:	4604      	mov	r4, r0
 8016a3c:	f7fd fba6 	bl	801418c <ucdr_alignment>
 8016a40:	4420      	add	r0, r4
 8016a42:	3001      	adds	r0, #1
 8016a44:	b002      	add	sp, #8
 8016a46:	bd10      	pop	{r4, pc}

08016a48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016a48:	4800      	ldr	r0, [pc, #0]	@ (8016a4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8016a4a:	4770      	bx	lr
 8016a4c:	24001220 	.word	0x24001220

08016a50 <autoware_control_msgs__msg__Control__init>:
 8016a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a54:	4605      	mov	r5, r0
 8016a56:	b3c0      	cbz	r0, 8016aca <autoware_control_msgs__msg__Control__init+0x7a>
 8016a58:	f000 f9a6 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016a5c:	4604      	mov	r4, r0
 8016a5e:	b310      	cbz	r0, 8016aa6 <autoware_control_msgs__msg__Control__init+0x56>
 8016a60:	f105 0608 	add.w	r6, r5, #8
 8016a64:	4630      	mov	r0, r6
 8016a66:	f000 f99f 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016a6a:	4604      	mov	r4, r0
 8016a6c:	2800      	cmp	r0, #0
 8016a6e:	d040      	beq.n	8016af2 <autoware_control_msgs__msg__Control__init+0xa2>
 8016a70:	f105 0710 	add.w	r7, r5, #16
 8016a74:	4638      	mov	r0, r7
 8016a76:	f000 f855 	bl	8016b24 <autoware_control_msgs__msg__Lateral__init>
 8016a7a:	4604      	mov	r4, r0
 8016a7c:	b348      	cbz	r0, 8016ad2 <autoware_control_msgs__msg__Control__init+0x82>
 8016a7e:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 8016a82:	4640      	mov	r0, r8
 8016a84:	f000 f87e 	bl	8016b84 <autoware_control_msgs__msg__Longitudinal__init>
 8016a88:	4604      	mov	r4, r0
 8016a8a:	b9d8      	cbnz	r0, 8016ac4 <autoware_control_msgs__msg__Control__init+0x74>
 8016a8c:	4628      	mov	r0, r5
 8016a8e:	f000 f98f 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016a92:	4630      	mov	r0, r6
 8016a94:	f000 f98c 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016a98:	4638      	mov	r0, r7
 8016a9a:	f000 f867 	bl	8016b6c <autoware_control_msgs__msg__Lateral__fini>
 8016a9e:	4640      	mov	r0, r8
 8016aa0:	f000 f894 	bl	8016bcc <autoware_control_msgs__msg__Longitudinal__fini>
 8016aa4:	e00e      	b.n	8016ac4 <autoware_control_msgs__msg__Control__init+0x74>
 8016aa6:	4628      	mov	r0, r5
 8016aa8:	f000 f982 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016aac:	f105 0008 	add.w	r0, r5, #8
 8016ab0:	f000 f97e 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016ab4:	f105 0010 	add.w	r0, r5, #16
 8016ab8:	f000 f858 	bl	8016b6c <autoware_control_msgs__msg__Lateral__fini>
 8016abc:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8016ac0:	f000 f884 	bl	8016bcc <autoware_control_msgs__msg__Longitudinal__fini>
 8016ac4:	4620      	mov	r0, r4
 8016ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aca:	4604      	mov	r4, r0
 8016acc:	4620      	mov	r0, r4
 8016ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	f000 f96c 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016ad8:	4630      	mov	r0, r6
 8016ada:	f000 f969 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016ade:	4638      	mov	r0, r7
 8016ae0:	f000 f844 	bl	8016b6c <autoware_control_msgs__msg__Lateral__fini>
 8016ae4:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8016ae8:	f000 f870 	bl	8016bcc <autoware_control_msgs__msg__Longitudinal__fini>
 8016aec:	4620      	mov	r0, r4
 8016aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016af2:	4628      	mov	r0, r5
 8016af4:	f000 f95c 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016af8:	4630      	mov	r0, r6
 8016afa:	e7d9      	b.n	8016ab0 <autoware_control_msgs__msg__Control__init+0x60>

08016afc <autoware_control_msgs__msg__Control__fini>:
 8016afc:	b188      	cbz	r0, 8016b22 <autoware_control_msgs__msg__Control__fini+0x26>
 8016afe:	b510      	push	{r4, lr}
 8016b00:	4604      	mov	r4, r0
 8016b02:	f000 f955 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016b06:	f104 0008 	add.w	r0, r4, #8
 8016b0a:	f000 f951 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016b0e:	f104 0010 	add.w	r0, r4, #16
 8016b12:	f000 f82b 	bl	8016b6c <autoware_control_msgs__msg__Lateral__fini>
 8016b16:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8016b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b1e:	f000 b855 	b.w	8016bcc <autoware_control_msgs__msg__Longitudinal__fini>
 8016b22:	4770      	bx	lr

08016b24 <autoware_control_msgs__msg__Lateral__init>:
 8016b24:	b570      	push	{r4, r5, r6, lr}
 8016b26:	4605      	mov	r5, r0
 8016b28:	b1a8      	cbz	r0, 8016b56 <autoware_control_msgs__msg__Lateral__init+0x32>
 8016b2a:	f000 f93d 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016b2e:	4604      	mov	r4, r0
 8016b30:	b140      	cbz	r0, 8016b44 <autoware_control_msgs__msg__Lateral__init+0x20>
 8016b32:	f105 0608 	add.w	r6, r5, #8
 8016b36:	4630      	mov	r0, r6
 8016b38:	f000 f936 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	b168      	cbz	r0, 8016b5c <autoware_control_msgs__msg__Lateral__init+0x38>
 8016b40:	4620      	mov	r0, r4
 8016b42:	bd70      	pop	{r4, r5, r6, pc}
 8016b44:	4628      	mov	r0, r5
 8016b46:	f000 f933 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016b4a:	f105 0008 	add.w	r0, r5, #8
 8016b4e:	f000 f92f 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016b52:	4620      	mov	r0, r4
 8016b54:	bd70      	pop	{r4, r5, r6, pc}
 8016b56:	4604      	mov	r4, r0
 8016b58:	4620      	mov	r0, r4
 8016b5a:	bd70      	pop	{r4, r5, r6, pc}
 8016b5c:	4628      	mov	r0, r5
 8016b5e:	f000 f927 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016b62:	4630      	mov	r0, r6
 8016b64:	f000 f924 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016b68:	e7ea      	b.n	8016b40 <autoware_control_msgs__msg__Lateral__init+0x1c>
 8016b6a:	bf00      	nop

08016b6c <autoware_control_msgs__msg__Lateral__fini>:
 8016b6c:	b148      	cbz	r0, 8016b82 <autoware_control_msgs__msg__Lateral__fini+0x16>
 8016b6e:	b510      	push	{r4, lr}
 8016b70:	4604      	mov	r4, r0
 8016b72:	f000 f91d 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016b76:	f104 0008 	add.w	r0, r4, #8
 8016b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b7e:	f000 b917 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016b82:	4770      	bx	lr

08016b84 <autoware_control_msgs__msg__Longitudinal__init>:
 8016b84:	b570      	push	{r4, r5, r6, lr}
 8016b86:	4605      	mov	r5, r0
 8016b88:	b1a8      	cbz	r0, 8016bb6 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 8016b8a:	f000 f90d 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016b8e:	4604      	mov	r4, r0
 8016b90:	b140      	cbz	r0, 8016ba4 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 8016b92:	f105 0608 	add.w	r6, r5, #8
 8016b96:	4630      	mov	r0, r6
 8016b98:	f000 f906 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016b9c:	4604      	mov	r4, r0
 8016b9e:	b168      	cbz	r0, 8016bbc <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	bd70      	pop	{r4, r5, r6, pc}
 8016ba4:	4628      	mov	r0, r5
 8016ba6:	f000 f903 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016baa:	f105 0008 	add.w	r0, r5, #8
 8016bae:	f000 f8ff 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	bd70      	pop	{r4, r5, r6, pc}
 8016bb6:	4604      	mov	r4, r0
 8016bb8:	4620      	mov	r0, r4
 8016bba:	bd70      	pop	{r4, r5, r6, pc}
 8016bbc:	4628      	mov	r0, r5
 8016bbe:	f000 f8f7 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016bc2:	4630      	mov	r0, r6
 8016bc4:	f000 f8f4 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016bc8:	e7ea      	b.n	8016ba0 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 8016bca:	bf00      	nop

08016bcc <autoware_control_msgs__msg__Longitudinal__fini>:
 8016bcc:	b148      	cbz	r0, 8016be2 <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 8016bce:	b510      	push	{r4, lr}
 8016bd0:	4604      	mov	r4, r0
 8016bd2:	f000 f8ed 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016bd6:	f104 0008 	add.w	r0, r4, #8
 8016bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bde:	f000 b8e7 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016be2:	4770      	bx	lr

08016be4 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8016be4:	b538      	push	{r3, r4, r5, lr}
 8016be6:	4604      	mov	r4, r0
 8016be8:	b128      	cbz	r0, 8016bf6 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8016bea:	f000 f8dd 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016bee:	4605      	mov	r5, r0
 8016bf0:	b120      	cbz	r0, 8016bfc <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	bd38      	pop	{r3, r4, r5, pc}
 8016bf6:	4605      	mov	r5, r0
 8016bf8:	4628      	mov	r0, r5
 8016bfa:	bd38      	pop	{r3, r4, r5, pc}
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	f000 f8d7 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016c02:	4628      	mov	r0, r5
 8016c04:	bd38      	pop	{r3, r4, r5, pc}
 8016c06:	bf00      	nop

08016c08 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8016c08:	b108      	cbz	r0, 8016c0e <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8016c0a:	f000 b8d1 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016c0e:	4770      	bx	lr

08016c10 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8016c10:	3800      	subs	r0, #0
 8016c12:	bf18      	it	ne
 8016c14:	2001      	movne	r0, #1
 8016c16:	4770      	bx	lr

08016c18 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8016c18:	4770      	bx	lr
 8016c1a:	bf00      	nop

08016c1c <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 8016c1c:	b538      	push	{r3, r4, r5, lr}
 8016c1e:	4604      	mov	r4, r0
 8016c20:	b128      	cbz	r0, 8016c2e <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8016c22:	f000 f8c1 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016c26:	4605      	mov	r5, r0
 8016c28:	b120      	cbz	r0, 8016c34 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 8016c2a:	4628      	mov	r0, r5
 8016c2c:	bd38      	pop	{r3, r4, r5, pc}
 8016c2e:	4605      	mov	r5, r0
 8016c30:	4628      	mov	r0, r5
 8016c32:	bd38      	pop	{r3, r4, r5, pc}
 8016c34:	4620      	mov	r0, r4
 8016c36:	f000 f8bb 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016c3a:	4628      	mov	r0, r5
 8016c3c:	bd38      	pop	{r3, r4, r5, pc}
 8016c3e:	bf00      	nop

08016c40 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 8016c40:	b108      	cbz	r0, 8016c46 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8016c42:	f000 b8b5 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016c46:	4770      	bx	lr

08016c48 <autoware_vehicle_msgs__msg__GearCommand__init>:
 8016c48:	b538      	push	{r3, r4, r5, lr}
 8016c4a:	4604      	mov	r4, r0
 8016c4c:	b128      	cbz	r0, 8016c5a <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 8016c4e:	f000 f8ab 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016c52:	4605      	mov	r5, r0
 8016c54:	b120      	cbz	r0, 8016c60 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 8016c56:	4628      	mov	r0, r5
 8016c58:	bd38      	pop	{r3, r4, r5, pc}
 8016c5a:	4605      	mov	r5, r0
 8016c5c:	4628      	mov	r0, r5
 8016c5e:	bd38      	pop	{r3, r4, r5, pc}
 8016c60:	4620      	mov	r0, r4
 8016c62:	f000 f8a5 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016c66:	4628      	mov	r0, r5
 8016c68:	bd38      	pop	{r3, r4, r5, pc}
 8016c6a:	bf00      	nop

08016c6c <autoware_vehicle_msgs__msg__GearCommand__fini>:
 8016c6c:	b108      	cbz	r0, 8016c72 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 8016c6e:	f000 b89f 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016c72:	4770      	bx	lr

08016c74 <autoware_vehicle_msgs__msg__GearReport__init>:
 8016c74:	b538      	push	{r3, r4, r5, lr}
 8016c76:	4604      	mov	r4, r0
 8016c78:	b128      	cbz	r0, 8016c86 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 8016c7a:	f000 f895 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016c7e:	4605      	mov	r5, r0
 8016c80:	b120      	cbz	r0, 8016c8c <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 8016c82:	4628      	mov	r0, r5
 8016c84:	bd38      	pop	{r3, r4, r5, pc}
 8016c86:	4605      	mov	r5, r0
 8016c88:	4628      	mov	r0, r5
 8016c8a:	bd38      	pop	{r3, r4, r5, pc}
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	f000 f88f 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016c92:	4628      	mov	r0, r5
 8016c94:	bd38      	pop	{r3, r4, r5, pc}
 8016c96:	bf00      	nop

08016c98 <autoware_vehicle_msgs__msg__GearReport__fini>:
 8016c98:	b108      	cbz	r0, 8016c9e <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 8016c9a:	f000 b889 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016c9e:	4770      	bx	lr

08016ca0 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 8016ca0:	b538      	push	{r3, r4, r5, lr}
 8016ca2:	4604      	mov	r4, r0
 8016ca4:	b128      	cbz	r0, 8016cb2 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 8016ca6:	f000 f87f 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016caa:	4605      	mov	r5, r0
 8016cac:	b120      	cbz	r0, 8016cb8 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 8016cae:	4628      	mov	r0, r5
 8016cb0:	bd38      	pop	{r3, r4, r5, pc}
 8016cb2:	4605      	mov	r5, r0
 8016cb4:	4628      	mov	r0, r5
 8016cb6:	bd38      	pop	{r3, r4, r5, pc}
 8016cb8:	4620      	mov	r0, r4
 8016cba:	f000 f879 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016cbe:	4628      	mov	r0, r5
 8016cc0:	bd38      	pop	{r3, r4, r5, pc}
 8016cc2:	bf00      	nop

08016cc4 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8016cc4:	b108      	cbz	r0, 8016cca <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8016cc6:	f000 b873 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016cca:	4770      	bx	lr

08016ccc <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 8016ccc:	b538      	push	{r3, r4, r5, lr}
 8016cce:	4604      	mov	r4, r0
 8016cd0:	b128      	cbz	r0, 8016cde <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 8016cd2:	f000 f869 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016cd6:	4605      	mov	r5, r0
 8016cd8:	b120      	cbz	r0, 8016ce4 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 8016cda:	4628      	mov	r0, r5
 8016cdc:	bd38      	pop	{r3, r4, r5, pc}
 8016cde:	4605      	mov	r5, r0
 8016ce0:	4628      	mov	r0, r5
 8016ce2:	bd38      	pop	{r3, r4, r5, pc}
 8016ce4:	4620      	mov	r0, r4
 8016ce6:	f000 f863 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016cea:	4628      	mov	r0, r5
 8016cec:	bd38      	pop	{r3, r4, r5, pc}
 8016cee:	bf00      	nop

08016cf0 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8016cf0:	b108      	cbz	r0, 8016cf6 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8016cf2:	f000 b85d 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016cf6:	4770      	bx	lr

08016cf8 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8016cf8:	b538      	push	{r3, r4, r5, lr}
 8016cfa:	4604      	mov	r4, r0
 8016cfc:	b128      	cbz	r0, 8016d0a <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 8016cfe:	f000 f853 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016d02:	4605      	mov	r5, r0
 8016d04:	b120      	cbz	r0, 8016d10 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8016d06:	4628      	mov	r0, r5
 8016d08:	bd38      	pop	{r3, r4, r5, pc}
 8016d0a:	4605      	mov	r5, r0
 8016d0c:	4628      	mov	r0, r5
 8016d0e:	bd38      	pop	{r3, r4, r5, pc}
 8016d10:	4620      	mov	r0, r4
 8016d12:	f000 f84d 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016d16:	4628      	mov	r0, r5
 8016d18:	bd38      	pop	{r3, r4, r5, pc}
 8016d1a:	bf00      	nop

08016d1c <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 8016d1c:	b108      	cbz	r0, 8016d22 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8016d1e:	f000 b847 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016d22:	4770      	bx	lr

08016d24 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8016d24:	b538      	push	{r3, r4, r5, lr}
 8016d26:	4604      	mov	r4, r0
 8016d28:	b128      	cbz	r0, 8016d36 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 8016d2a:	f000 f83d 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016d2e:	4605      	mov	r5, r0
 8016d30:	b120      	cbz	r0, 8016d3c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 8016d32:	4628      	mov	r0, r5
 8016d34:	bd38      	pop	{r3, r4, r5, pc}
 8016d36:	4605      	mov	r5, r0
 8016d38:	4628      	mov	r0, r5
 8016d3a:	bd38      	pop	{r3, r4, r5, pc}
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	f000 f837 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016d42:	4628      	mov	r0, r5
 8016d44:	bd38      	pop	{r3, r4, r5, pc}
 8016d46:	bf00      	nop

08016d48 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8016d48:	b108      	cbz	r0, 8016d4e <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8016d4a:	f000 b831 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016d4e:	4770      	bx	lr

08016d50 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8016d50:	b538      	push	{r3, r4, r5, lr}
 8016d52:	4604      	mov	r4, r0
 8016d54:	b128      	cbz	r0, 8016d62 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 8016d56:	f000 f827 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 8016d5a:	4605      	mov	r5, r0
 8016d5c:	b120      	cbz	r0, 8016d68 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 8016d5e:	4628      	mov	r0, r5
 8016d60:	bd38      	pop	{r3, r4, r5, pc}
 8016d62:	4605      	mov	r5, r0
 8016d64:	4628      	mov	r0, r5
 8016d66:	bd38      	pop	{r3, r4, r5, pc}
 8016d68:	4620      	mov	r0, r4
 8016d6a:	f000 f821 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 8016d6e:	4628      	mov	r0, r5
 8016d70:	bd38      	pop	{r3, r4, r5, pc}
 8016d72:	bf00      	nop

08016d74 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8016d74:	b108      	cbz	r0, 8016d7a <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8016d76:	f000 b81b 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 8016d7a:	4770      	bx	lr

08016d7c <autoware_vehicle_msgs__msg__VelocityReport__init>:
 8016d7c:	b538      	push	{r3, r4, r5, lr}
 8016d7e:	4604      	mov	r4, r0
 8016d80:	b128      	cbz	r0, 8016d8e <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 8016d82:	f008 ff05 	bl	801fb90 <std_msgs__msg__Header__init>
 8016d86:	4605      	mov	r5, r0
 8016d88:	b120      	cbz	r0, 8016d94 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 8016d8a:	4628      	mov	r0, r5
 8016d8c:	bd38      	pop	{r3, r4, r5, pc}
 8016d8e:	4605      	mov	r5, r0
 8016d90:	4628      	mov	r0, r5
 8016d92:	bd38      	pop	{r3, r4, r5, pc}
 8016d94:	4620      	mov	r0, r4
 8016d96:	f008 ff1f 	bl	801fbd8 <std_msgs__msg__Header__fini>
 8016d9a:	4628      	mov	r0, r5
 8016d9c:	bd38      	pop	{r3, r4, r5, pc}
 8016d9e:	bf00      	nop

08016da0 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 8016da0:	b108      	cbz	r0, 8016da6 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8016da2:	f008 bf19 	b.w	801fbd8 <std_msgs__msg__Header__fini>
 8016da6:	4770      	bx	lr

08016da8 <builtin_interfaces__msg__Time__init>:
 8016da8:	3800      	subs	r0, #0
 8016daa:	bf18      	it	ne
 8016dac:	2001      	movne	r0, #1
 8016dae:	4770      	bx	lr

08016db0 <builtin_interfaces__msg__Time__fini>:
 8016db0:	4770      	bx	lr
 8016db2:	bf00      	nop

08016db4 <ucdr_serialize_sequence_char>:
 8016db4:	b570      	push	{r4, r5, r6, lr}
 8016db6:	4615      	mov	r5, r2
 8016db8:	460e      	mov	r6, r1
 8016dba:	7d01      	ldrb	r1, [r0, #20]
 8016dbc:	4604      	mov	r4, r0
 8016dbe:	f7fc fa25 	bl	801320c <ucdr_serialize_endian_uint32_t>
 8016dc2:	b90d      	cbnz	r5, 8016dc8 <ucdr_serialize_sequence_char+0x14>
 8016dc4:	2001      	movs	r0, #1
 8016dc6:	bd70      	pop	{r4, r5, r6, pc}
 8016dc8:	462b      	mov	r3, r5
 8016dca:	4632      	mov	r2, r6
 8016dcc:	7d21      	ldrb	r1, [r4, #20]
 8016dce:	4620      	mov	r0, r4
 8016dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dd4:	f009 b8d4 	b.w	801ff80 <ucdr_serialize_endian_array_char>

08016dd8 <ucdr_deserialize_sequence_char>:
 8016dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ddc:	461d      	mov	r5, r3
 8016dde:	4616      	mov	r6, r2
 8016de0:	460f      	mov	r7, r1
 8016de2:	461a      	mov	r2, r3
 8016de4:	7d01      	ldrb	r1, [r0, #20]
 8016de6:	4604      	mov	r4, r0
 8016de8:	f7fc fb38 	bl	801345c <ucdr_deserialize_endian_uint32_t>
 8016dec:	682b      	ldr	r3, [r5, #0]
 8016dee:	429e      	cmp	r6, r3
 8016df0:	d201      	bcs.n	8016df6 <ucdr_deserialize_sequence_char+0x1e>
 8016df2:	2201      	movs	r2, #1
 8016df4:	75a2      	strb	r2, [r4, #22]
 8016df6:	b913      	cbnz	r3, 8016dfe <ucdr_deserialize_sequence_char+0x26>
 8016df8:	2001      	movs	r0, #1
 8016dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dfe:	463a      	mov	r2, r7
 8016e00:	7d21      	ldrb	r1, [r4, #20]
 8016e02:	4620      	mov	r0, r4
 8016e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e08:	f009 b8ec 	b.w	801ffe4 <ucdr_deserialize_endian_array_char>

08016e0c <ucdr_serialize_sequence_uint8_t>:
 8016e0c:	b570      	push	{r4, r5, r6, lr}
 8016e0e:	4615      	mov	r5, r2
 8016e10:	460e      	mov	r6, r1
 8016e12:	7d01      	ldrb	r1, [r0, #20]
 8016e14:	4604      	mov	r4, r0
 8016e16:	f7fc f9f9 	bl	801320c <ucdr_serialize_endian_uint32_t>
 8016e1a:	b90d      	cbnz	r5, 8016e20 <ucdr_serialize_sequence_uint8_t+0x14>
 8016e1c:	2001      	movs	r0, #1
 8016e1e:	bd70      	pop	{r4, r5, r6, pc}
 8016e20:	462b      	mov	r3, r5
 8016e22:	4632      	mov	r2, r6
 8016e24:	7d21      	ldrb	r1, [r4, #20]
 8016e26:	4620      	mov	r0, r4
 8016e28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e2c:	f009 b940 	b.w	80200b0 <ucdr_serialize_endian_array_uint8_t>

08016e30 <ucdr_deserialize_sequence_uint8_t>:
 8016e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e34:	461d      	mov	r5, r3
 8016e36:	4616      	mov	r6, r2
 8016e38:	460f      	mov	r7, r1
 8016e3a:	461a      	mov	r2, r3
 8016e3c:	7d01      	ldrb	r1, [r0, #20]
 8016e3e:	4604      	mov	r4, r0
 8016e40:	f7fc fb0c 	bl	801345c <ucdr_deserialize_endian_uint32_t>
 8016e44:	682b      	ldr	r3, [r5, #0]
 8016e46:	429e      	cmp	r6, r3
 8016e48:	d201      	bcs.n	8016e4e <ucdr_deserialize_sequence_uint8_t+0x1e>
 8016e4a:	2201      	movs	r2, #1
 8016e4c:	75a2      	strb	r2, [r4, #22]
 8016e4e:	b913      	cbnz	r3, 8016e56 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016e50:	2001      	movs	r0, #1
 8016e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e56:	463a      	mov	r2, r7
 8016e58:	7d21      	ldrb	r1, [r4, #20]
 8016e5a:	4620      	mov	r0, r4
 8016e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e60:	f009 b98c 	b.w	802017c <ucdr_deserialize_endian_array_uint8_t>

08016e64 <uxr_buffer_delete_entity>:
 8016e64:	b510      	push	{r4, lr}
 8016e66:	2300      	movs	r3, #0
 8016e68:	b08e      	sub	sp, #56	@ 0x38
 8016e6a:	4604      	mov	r4, r0
 8016e6c:	9103      	str	r1, [sp, #12]
 8016e6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016e72:	2303      	movs	r3, #3
 8016e74:	2204      	movs	r2, #4
 8016e76:	9300      	str	r3, [sp, #0]
 8016e78:	ab06      	add	r3, sp, #24
 8016e7a:	f001 fbcd 	bl	8018618 <uxr_prepare_stream_to_write_submessage>
 8016e7e:	b918      	cbnz	r0, 8016e88 <uxr_buffer_delete_entity+0x24>
 8016e80:	4604      	mov	r4, r0
 8016e82:	4620      	mov	r0, r4
 8016e84:	b00e      	add	sp, #56	@ 0x38
 8016e86:	bd10      	pop	{r4, pc}
 8016e88:	9902      	ldr	r1, [sp, #8]
 8016e8a:	aa05      	add	r2, sp, #20
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	f001 fcff 	bl	8018890 <uxr_init_base_object_request>
 8016e92:	4604      	mov	r4, r0
 8016e94:	a905      	add	r1, sp, #20
 8016e96:	a806      	add	r0, sp, #24
 8016e98:	f003 fc1a 	bl	801a6d0 <uxr_serialize_DELETE_Payload>
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	b00e      	add	sp, #56	@ 0x38
 8016ea0:	bd10      	pop	{r4, pc}
 8016ea2:	bf00      	nop

08016ea4 <uxr_common_create_entity>:
 8016ea4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016ea8:	b510      	push	{r4, lr}
 8016eaa:	f1bc 0f01 	cmp.w	ip, #1
 8016eae:	b08c      	sub	sp, #48	@ 0x30
 8016eb0:	4604      	mov	r4, r0
 8016eb2:	9202      	str	r2, [sp, #8]
 8016eb4:	bf0c      	ite	eq
 8016eb6:	f003 0201 	andeq.w	r2, r3, #1
 8016eba:	2200      	movne	r2, #0
 8016ebc:	330e      	adds	r3, #14
 8016ebe:	9103      	str	r1, [sp, #12]
 8016ec0:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8016ec4:	441a      	add	r2, r3
 8016ec6:	ab04      	add	r3, sp, #16
 8016ec8:	9101      	str	r1, [sp, #4]
 8016eca:	2101      	movs	r1, #1
 8016ecc:	b292      	uxth	r2, r2
 8016ece:	9100      	str	r1, [sp, #0]
 8016ed0:	9903      	ldr	r1, [sp, #12]
 8016ed2:	f001 fba1 	bl	8018618 <uxr_prepare_stream_to_write_submessage>
 8016ed6:	b918      	cbnz	r0, 8016ee0 <uxr_common_create_entity+0x3c>
 8016ed8:	4604      	mov	r4, r0
 8016eda:	4620      	mov	r0, r4
 8016edc:	b00c      	add	sp, #48	@ 0x30
 8016ede:	bd10      	pop	{r4, pc}
 8016ee0:	9902      	ldr	r1, [sp, #8]
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016ee6:	f001 fcd3 	bl	8018890 <uxr_init_base_object_request>
 8016eea:	4604      	mov	r4, r0
 8016eec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016eee:	a804      	add	r0, sp, #16
 8016ef0:	f003 fb32 	bl	801a558 <uxr_serialize_CREATE_Payload>
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	b00c      	add	sp, #48	@ 0x30
 8016ef8:	bd10      	pop	{r4, pc}
 8016efa:	bf00      	nop

08016efc <uxr_buffer_create_participant_bin>:
 8016efc:	b570      	push	{r4, r5, r6, lr}
 8016efe:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8016f02:	4605      	mov	r5, r0
 8016f04:	ac11      	add	r4, sp, #68	@ 0x44
 8016f06:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8016f0a:	2303      	movs	r3, #3
 8016f0c:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8016f10:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016f14:	7223      	strb	r3, [r4, #8]
 8016f16:	2300      	movs	r3, #0
 8016f18:	2201      	movs	r2, #1
 8016f1a:	f88d 3014 	strb.w	r3, [sp, #20]
 8016f1e:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8016f20:	7122      	strb	r2, [r4, #4]
 8016f22:	b1cb      	cbz	r3, 8016f58 <uxr_buffer_create_participant_bin+0x5c>
 8016f24:	f88d 201c 	strb.w	r2, [sp, #28]
 8016f28:	9308      	str	r3, [sp, #32]
 8016f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016f2e:	a915      	add	r1, sp, #84	@ 0x54
 8016f30:	a809      	add	r0, sp, #36	@ 0x24
 8016f32:	f7fd f927 	bl	8014184 <ucdr_init_buffer>
 8016f36:	a905      	add	r1, sp, #20
 8016f38:	a809      	add	r0, sp, #36	@ 0x24
 8016f3a:	f002 fec3 	bl	8019cc4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8016f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016f40:	9600      	str	r6, [sp, #0]
 8016f42:	4628      	mov	r0, r5
 8016f44:	9401      	str	r4, [sp, #4]
 8016f46:	60e3      	str	r3, [r4, #12]
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016f4e:	f7ff ffa9 	bl	8016ea4 <uxr_common_create_entity>
 8016f52:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8016f56:	bd70      	pop	{r4, r5, r6, pc}
 8016f58:	f88d 301c 	strb.w	r3, [sp, #28]
 8016f5c:	e7e5      	b.n	8016f2a <uxr_buffer_create_participant_bin+0x2e>
 8016f5e:	bf00      	nop

08016f60 <uxr_buffer_create_topic_bin>:
 8016f60:	b570      	push	{r4, r5, r6, lr}
 8016f62:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8016f66:	4605      	mov	r5, r0
 8016f68:	4618      	mov	r0, r3
 8016f6a:	9105      	str	r1, [sp, #20]
 8016f6c:	a997      	add	r1, sp, #604	@ 0x25c
 8016f6e:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8016f72:	ac13      	add	r4, sp, #76	@ 0x4c
 8016f74:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016f78:	2302      	movs	r3, #2
 8016f7a:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8016f7e:	f000 fa8d 	bl	801749c <uxr_object_id_to_raw>
 8016f82:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8016f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016f88:	a917      	add	r1, sp, #92	@ 0x5c
 8016f8a:	a80b      	add	r0, sp, #44	@ 0x2c
 8016f8c:	9306      	str	r3, [sp, #24]
 8016f8e:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8016f90:	930a      	str	r3, [sp, #40]	@ 0x28
 8016f92:	2303      	movs	r3, #3
 8016f94:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8016f98:	2301      	movs	r3, #1
 8016f9a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	f88d 301c 	strb.w	r3, [sp, #28]
 8016fa4:	f7fd f8ee 	bl	8014184 <ucdr_init_buffer>
 8016fa8:	a906      	add	r1, sp, #24
 8016faa:	a80b      	add	r0, sp, #44	@ 0x2c
 8016fac:	f002 feac 	bl	8019d08 <uxr_serialize_OBJK_Topic_Binary>
 8016fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fb2:	4628      	mov	r0, r5
 8016fb4:	9600      	str	r6, [sp, #0]
 8016fb6:	9316      	str	r3, [sp, #88]	@ 0x58
 8016fb8:	b29b      	uxth	r3, r3
 8016fba:	9401      	str	r4, [sp, #4]
 8016fbc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016fc0:	f7ff ff70 	bl	8016ea4 <uxr_common_create_entity>
 8016fc4:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8016fc8:	bd70      	pop	{r4, r5, r6, pc}
 8016fca:	bf00      	nop

08016fcc <uxr_buffer_create_publisher_bin>:
 8016fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fce:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8016fd2:	2603      	movs	r6, #3
 8016fd4:	4605      	mov	r5, r0
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	9105      	str	r1, [sp, #20]
 8016fda:	a992      	add	r1, sp, #584	@ 0x248
 8016fdc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8016fe0:	ac0e      	add	r4, sp, #56	@ 0x38
 8016fe2:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8016fe6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016fea:	f000 fa57 	bl	801749c <uxr_object_id_to_raw>
 8016fee:	2300      	movs	r3, #0
 8016ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016ff4:	a912      	add	r1, sp, #72	@ 0x48
 8016ff6:	a806      	add	r0, sp, #24
 8016ff8:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8016ffc:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8017000:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8017004:	f7fd f8be 	bl	8014184 <ucdr_init_buffer>
 8017008:	a993      	add	r1, sp, #588	@ 0x24c
 801700a:	a806      	add	r0, sp, #24
 801700c:	f002 ff30 	bl	8019e70 <uxr_serialize_OBJK_Publisher_Binary>
 8017010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017012:	4628      	mov	r0, r5
 8017014:	9700      	str	r7, [sp, #0]
 8017016:	9311      	str	r3, [sp, #68]	@ 0x44
 8017018:	b29b      	uxth	r3, r3
 801701a:	9401      	str	r4, [sp, #4]
 801701c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017020:	f7ff ff40 	bl	8016ea4 <uxr_common_create_entity>
 8017024:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8017028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801702a:	bf00      	nop

0801702c <uxr_buffer_create_subscriber_bin>:
 801702c:	b570      	push	{r4, r5, r6, lr}
 801702e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8017032:	4605      	mov	r5, r0
 8017034:	4618      	mov	r0, r3
 8017036:	9105      	str	r1, [sp, #20]
 8017038:	a992      	add	r1, sp, #584	@ 0x248
 801703a:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 801703e:	ac0e      	add	r4, sp, #56	@ 0x38
 8017040:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017044:	2304      	movs	r3, #4
 8017046:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 801704a:	f000 fa27 	bl	801749c <uxr_object_id_to_raw>
 801704e:	2300      	movs	r3, #0
 8017050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017054:	a912      	add	r1, sp, #72	@ 0x48
 8017056:	a806      	add	r0, sp, #24
 8017058:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801705c:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8017060:	2303      	movs	r3, #3
 8017062:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8017066:	f7fd f88d 	bl	8014184 <ucdr_init_buffer>
 801706a:	a993      	add	r1, sp, #588	@ 0x24c
 801706c:	a806      	add	r0, sp, #24
 801706e:	f002 ffaf 	bl	8019fd0 <uxr_serialize_OBJK_Subscriber_Binary>
 8017072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017074:	4628      	mov	r0, r5
 8017076:	9600      	str	r6, [sp, #0]
 8017078:	9311      	str	r3, [sp, #68]	@ 0x44
 801707a:	b29b      	uxth	r3, r3
 801707c:	9401      	str	r4, [sp, #4]
 801707e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017082:	f7ff ff0f 	bl	8016ea4 <uxr_common_create_entity>
 8017086:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801708a:	bd70      	pop	{r4, r5, r6, pc}

0801708c <uxr_buffer_create_datawriter_bin>:
 801708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017090:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8017094:	4606      	mov	r6, r0
 8017096:	4618      	mov	r0, r3
 8017098:	2703      	movs	r7, #3
 801709a:	ac1d      	add	r4, sp, #116	@ 0x74
 801709c:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80170a0:	9105      	str	r1, [sp, #20]
 80170a2:	a9a1      	add	r1, sp, #644	@ 0x284
 80170a4:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80170a8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80170ac:	2305      	movs	r3, #5
 80170ae:	7123      	strb	r3, [r4, #4]
 80170b0:	f000 f9f4 	bl	801749c <uxr_object_id_to_raw>
 80170b4:	a90e      	add	r1, sp, #56	@ 0x38
 80170b6:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80170b8:	7227      	strb	r7, [r4, #8]
 80170ba:	f000 f9ef 	bl	801749c <uxr_object_id_to_raw>
 80170be:	2300      	movs	r3, #0
 80170c0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80170c4:	3d00      	subs	r5, #0
 80170c6:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80170ca:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80170ce:	bf18      	it	ne
 80170d0:	2501      	movne	r5, #1
 80170d2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80170d6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80170da:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80170de:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80170e2:	2301      	movs	r3, #1
 80170e4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80170e8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80170ec:	bb8a      	cbnz	r2, 8017152 <uxr_buffer_create_datawriter_bin+0xc6>
 80170ee:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80170f2:	f04f 0c13 	mov.w	ip, #19
 80170f6:	250b      	movs	r5, #11
 80170f8:	2221      	movs	r2, #33	@ 0x21
 80170fa:	2111      	movs	r1, #17
 80170fc:	2009      	movs	r0, #9
 80170fe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017102:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8017106:	b923      	cbnz	r3, 8017112 <uxr_buffer_create_datawriter_bin+0x86>
 8017108:	4672      	mov	r2, lr
 801710a:	4661      	mov	r1, ip
 801710c:	4628      	mov	r0, r5
 801710e:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8017112:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8017116:	2b01      	cmp	r3, #1
 8017118:	d025      	beq.n	8017166 <uxr_buffer_create_datawriter_bin+0xda>
 801711a:	2b03      	cmp	r3, #3
 801711c:	d029      	beq.n	8017172 <uxr_buffer_create_datawriter_bin+0xe6>
 801711e:	b32b      	cbz	r3, 801716c <uxr_buffer_create_datawriter_bin+0xe0>
 8017120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017124:	a921      	add	r1, sp, #132	@ 0x84
 8017126:	a806      	add	r0, sp, #24
 8017128:	f7fd f82c 	bl	8014184 <ucdr_init_buffer>
 801712c:	a90e      	add	r1, sp, #56	@ 0x38
 801712e:	a806      	add	r0, sp, #24
 8017130:	f003 f800 	bl	801a134 <uxr_serialize_OBJK_DataWriter_Binary>
 8017134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017136:	f8cd 8000 	str.w	r8, [sp]
 801713a:	4630      	mov	r0, r6
 801713c:	9401      	str	r4, [sp, #4]
 801713e:	60e3      	str	r3, [r4, #12]
 8017140:	b29b      	uxth	r3, r3
 8017142:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017146:	f7ff fead 	bl	8016ea4 <uxr_common_create_entity>
 801714a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801714e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017152:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8017156:	f04f 0c12 	mov.w	ip, #18
 801715a:	250a      	movs	r5, #10
 801715c:	2220      	movs	r2, #32
 801715e:	2110      	movs	r1, #16
 8017160:	2008      	movs	r0, #8
 8017162:	2702      	movs	r7, #2
 8017164:	e7cd      	b.n	8017102 <uxr_buffer_create_datawriter_bin+0x76>
 8017166:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801716a:	e7d9      	b.n	8017120 <uxr_buffer_create_datawriter_bin+0x94>
 801716c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8017170:	e7d6      	b.n	8017120 <uxr_buffer_create_datawriter_bin+0x94>
 8017172:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017176:	e7d3      	b.n	8017120 <uxr_buffer_create_datawriter_bin+0x94>

08017178 <uxr_buffer_create_datareader_bin>:
 8017178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801717c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8017180:	4606      	mov	r6, r0
 8017182:	4618      	mov	r0, r3
 8017184:	2703      	movs	r7, #3
 8017186:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017188:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801718c:	9105      	str	r1, [sp, #20]
 801718e:	a9a3      	add	r1, sp, #652	@ 0x28c
 8017190:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8017194:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017198:	2306      	movs	r3, #6
 801719a:	7123      	strb	r3, [r4, #4]
 801719c:	f000 f97e 	bl	801749c <uxr_object_id_to_raw>
 80171a0:	a90e      	add	r1, sp, #56	@ 0x38
 80171a2:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80171a4:	7227      	strb	r7, [r4, #8]
 80171a6:	f000 f979 	bl	801749c <uxr_object_id_to_raw>
 80171aa:	2300      	movs	r3, #0
 80171ac:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80171b0:	3d00      	subs	r5, #0
 80171b2:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 80171b6:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80171ba:	bf18      	it	ne
 80171bc:	2501      	movne	r5, #1
 80171be:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80171c2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80171c6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80171ca:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80171ce:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80171d2:	2301      	movs	r3, #1
 80171d4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80171d8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80171dc:	bb8a      	cbnz	r2, 8017242 <uxr_buffer_create_datareader_bin+0xca>
 80171de:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80171e2:	f04f 0c13 	mov.w	ip, #19
 80171e6:	250b      	movs	r5, #11
 80171e8:	2221      	movs	r2, #33	@ 0x21
 80171ea:	2111      	movs	r1, #17
 80171ec:	2009      	movs	r0, #9
 80171ee:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80171f2:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80171f6:	b923      	cbnz	r3, 8017202 <uxr_buffer_create_datareader_bin+0x8a>
 80171f8:	4672      	mov	r2, lr
 80171fa:	4661      	mov	r1, ip
 80171fc:	4628      	mov	r0, r5
 80171fe:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8017202:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8017206:	2b01      	cmp	r3, #1
 8017208:	d025      	beq.n	8017256 <uxr_buffer_create_datareader_bin+0xde>
 801720a:	2b03      	cmp	r3, #3
 801720c:	d029      	beq.n	8017262 <uxr_buffer_create_datareader_bin+0xea>
 801720e:	b32b      	cbz	r3, 801725c <uxr_buffer_create_datareader_bin+0xe4>
 8017210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017214:	a923      	add	r1, sp, #140	@ 0x8c
 8017216:	a806      	add	r0, sp, #24
 8017218:	f7fc ffb4 	bl	8014184 <ucdr_init_buffer>
 801721c:	a90e      	add	r1, sp, #56	@ 0x38
 801721e:	a806      	add	r0, sp, #24
 8017220:	f002 ff4c 	bl	801a0bc <uxr_serialize_OBJK_DataReader_Binary>
 8017224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017226:	f8cd 8000 	str.w	r8, [sp]
 801722a:	4630      	mov	r0, r6
 801722c:	9401      	str	r4, [sp, #4]
 801722e:	60e3      	str	r3, [r4, #12]
 8017230:	b29b      	uxth	r3, r3
 8017232:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017236:	f7ff fe35 	bl	8016ea4 <uxr_common_create_entity>
 801723a:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801723e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017242:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8017246:	f04f 0c12 	mov.w	ip, #18
 801724a:	250a      	movs	r5, #10
 801724c:	2220      	movs	r2, #32
 801724e:	2110      	movs	r1, #16
 8017250:	2008      	movs	r0, #8
 8017252:	2702      	movs	r7, #2
 8017254:	e7cd      	b.n	80171f2 <uxr_buffer_create_datareader_bin+0x7a>
 8017256:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801725a:	e7d9      	b.n	8017210 <uxr_buffer_create_datareader_bin+0x98>
 801725c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8017260:	e7d6      	b.n	8017210 <uxr_buffer_create_datareader_bin+0x98>
 8017262:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017266:	e7d3      	b.n	8017210 <uxr_buffer_create_datareader_bin+0x98>

08017268 <uxr_buffer_create_replier_bin>:
 8017268:	b570      	push	{r4, r5, r6, lr}
 801726a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801726e:	4605      	mov	r5, r0
 8017270:	4618      	mov	r0, r3
 8017272:	9105      	str	r1, [sp, #20]
 8017274:	a999      	add	r1, sp, #612	@ 0x264
 8017276:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 801727a:	ac15      	add	r4, sp, #84	@ 0x54
 801727c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017280:	2308      	movs	r3, #8
 8017282:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8017286:	f000 f909 	bl	801749c <uxr_object_id_to_raw>
 801728a:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 801728c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017290:	a919      	add	r1, sp, #100	@ 0x64
 8017292:	a80d      	add	r0, sp, #52	@ 0x34
 8017294:	9306      	str	r3, [sp, #24]
 8017296:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8017298:	9307      	str	r3, [sp, #28]
 801729a:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 801729c:	9308      	str	r3, [sp, #32]
 801729e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80172a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80172a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80172a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80172a6:	2301      	movs	r3, #1
 80172a8:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80172ac:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80172b0:	2303      	movs	r3, #3
 80172b2:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 80172b6:	f7fc ff65 	bl	8014184 <ucdr_init_buffer>
 80172ba:	a906      	add	r1, sp, #24
 80172bc:	a80d      	add	r0, sp, #52	@ 0x34
 80172be:	f002 ff65 	bl	801a18c <uxr_serialize_OBJK_Replier_Binary>
 80172c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80172c4:	4628      	mov	r0, r5
 80172c6:	9600      	str	r6, [sp, #0]
 80172c8:	9318      	str	r3, [sp, #96]	@ 0x60
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	9401      	str	r4, [sp, #4]
 80172ce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80172d2:	f7ff fde7 	bl	8016ea4 <uxr_common_create_entity>
 80172d6:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 80172da:	bd70      	pop	{r4, r5, r6, pc}

080172dc <get_custom_error>:
 80172dc:	4b01      	ldr	r3, [pc, #4]	@ (80172e4 <get_custom_error+0x8>)
 80172de:	7818      	ldrb	r0, [r3, #0]
 80172e0:	4770      	bx	lr
 80172e2:	bf00      	nop
 80172e4:	240693d4 	.word	0x240693d4

080172e8 <recv_custom_msg>:
 80172e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ec:	4693      	mov	fp, r2
 80172ee:	b089      	sub	sp, #36	@ 0x24
 80172f0:	2200      	movs	r2, #0
 80172f2:	4604      	mov	r4, r0
 80172f4:	468a      	mov	sl, r1
 80172f6:	9305      	str	r3, [sp, #20]
 80172f8:	f88d 201e 	strb.w	r2, [sp, #30]
 80172fc:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8017300:	b322      	cbz	r2, 801734c <recv_custom_msg+0x64>
 8017302:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8017306:	f10d 081f 	add.w	r8, sp, #31
 801730a:	af05      	add	r7, sp, #20
 801730c:	f10d 061e 	add.w	r6, sp, #30
 8017310:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8017314:	e002      	b.n	801731c <recv_custom_msg+0x34>
 8017316:	9b05      	ldr	r3, [sp, #20]
 8017318:	2b00      	cmp	r3, #0
 801731a:	dd0f      	ble.n	801733c <recv_custom_msg+0x54>
 801731c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8017320:	4623      	mov	r3, r4
 8017322:	4622      	mov	r2, r4
 8017324:	4648      	mov	r0, r9
 8017326:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801732a:	e9cd 5600 	strd	r5, r6, [sp]
 801732e:	f001 fcc5 	bl	8018cbc <uxr_read_framed_msg>
 8017332:	2800      	cmp	r0, #0
 8017334:	d0ef      	beq.n	8017316 <recv_custom_msg+0x2e>
 8017336:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801733a:	b1b3      	cbz	r3, 801736a <recv_custom_msg+0x82>
 801733c:	4b0f      	ldr	r3, [pc, #60]	@ (801737c <recv_custom_msg+0x94>)
 801733e:	2000      	movs	r0, #0
 8017340:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017344:	701a      	strb	r2, [r3, #0]
 8017346:	b009      	add	sp, #36	@ 0x24
 8017348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801734c:	f10d 021f 	add.w	r2, sp, #31
 8017350:	4601      	mov	r1, r0
 8017352:	9200      	str	r2, [sp, #0]
 8017354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017358:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801735c:	47a8      	blx	r5
 801735e:	2800      	cmp	r0, #0
 8017360:	d0ec      	beq.n	801733c <recv_custom_msg+0x54>
 8017362:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d1e8      	bne.n	801733c <recv_custom_msg+0x54>
 801736a:	f8cb 0000 	str.w	r0, [fp]
 801736e:	2001      	movs	r0, #1
 8017370:	f8ca 4000 	str.w	r4, [sl]
 8017374:	b009      	add	sp, #36	@ 0x24
 8017376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801737a:	bf00      	nop
 801737c:	240693d4 	.word	0x240693d4

08017380 <send_custom_msg>:
 8017380:	b530      	push	{r4, r5, lr}
 8017382:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8017386:	b087      	sub	sp, #28
 8017388:	4614      	mov	r4, r2
 801738a:	b995      	cbnz	r5, 80173b2 <send_custom_msg+0x32>
 801738c:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8017390:	f10d 0317 	add.w	r3, sp, #23
 8017394:	47a8      	blx	r5
 8017396:	1e03      	subs	r3, r0, #0
 8017398:	bf18      	it	ne
 801739a:	2301      	movne	r3, #1
 801739c:	42a0      	cmp	r0, r4
 801739e:	bf18      	it	ne
 80173a0:	2300      	movne	r3, #0
 80173a2:	b91b      	cbnz	r3, 80173ac <send_custom_msg+0x2c>
 80173a4:	4a0a      	ldr	r2, [pc, #40]	@ (80173d0 <send_custom_msg+0x50>)
 80173a6:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80173aa:	7011      	strb	r1, [r2, #0]
 80173ac:	4618      	mov	r0, r3
 80173ae:	b007      	add	sp, #28
 80173b0:	bd30      	pop	{r4, r5, pc}
 80173b2:	460b      	mov	r3, r1
 80173b4:	2200      	movs	r2, #0
 80173b6:	f10d 0117 	add.w	r1, sp, #23
 80173ba:	9400      	str	r4, [sp, #0]
 80173bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80173c0:	4602      	mov	r2, r0
 80173c2:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80173c6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80173ca:	f001 fa99 	bl	8018900 <uxr_write_framed_msg>
 80173ce:	e7e2      	b.n	8017396 <send_custom_msg+0x16>
 80173d0:	240693d4 	.word	0x240693d4

080173d4 <uxr_set_custom_transport_callbacks>:
 80173d4:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80173d8:	9901      	ldr	r1, [sp, #4]
 80173da:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80173de:	9b00      	ldr	r3, [sp, #0]
 80173e0:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 80173e4:	4770      	bx	lr
 80173e6:	bf00      	nop

080173e8 <uxr_init_custom_transport>:
 80173e8:	b538      	push	{r3, r4, r5, lr}
 80173ea:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80173ee:	b303      	cbz	r3, 8017432 <uxr_init_custom_transport+0x4a>
 80173f0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80173f4:	4604      	mov	r4, r0
 80173f6:	b1e2      	cbz	r2, 8017432 <uxr_init_custom_transport+0x4a>
 80173f8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80173fc:	b1ca      	cbz	r2, 8017432 <uxr_init_custom_transport+0x4a>
 80173fe:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8017402:	b1b2      	cbz	r2, 8017432 <uxr_init_custom_transport+0x4a>
 8017404:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8017408:	4798      	blx	r3
 801740a:	4605      	mov	r5, r0
 801740c:	b188      	cbz	r0, 8017432 <uxr_init_custom_transport+0x4a>
 801740e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8017412:	b98b      	cbnz	r3, 8017438 <uxr_init_custom_transport+0x50>
 8017414:	4b0b      	ldr	r3, [pc, #44]	@ (8017444 <uxr_init_custom_transport+0x5c>)
 8017416:	4628      	mov	r0, r5
 8017418:	490b      	ldr	r1, [pc, #44]	@ (8017448 <uxr_init_custom_transport+0x60>)
 801741a:	4a0c      	ldr	r2, [pc, #48]	@ (801744c <uxr_init_custom_transport+0x64>)
 801741c:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8017420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017424:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8017428:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801742c:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8017430:	bd38      	pop	{r3, r4, r5, pc}
 8017432:	2500      	movs	r5, #0
 8017434:	4628      	mov	r0, r5
 8017436:	bd38      	pop	{r3, r4, r5, pc}
 8017438:	2100      	movs	r1, #0
 801743a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801743e:	f001 fa59 	bl	80188f4 <uxr_init_framing_io>
 8017442:	e7e7      	b.n	8017414 <uxr_init_custom_transport+0x2c>
 8017444:	080172e9 	.word	0x080172e9
 8017448:	08017381 	.word	0x08017381
 801744c:	080172dd 	.word	0x080172dd

08017450 <uxr_close_custom_transport>:
 8017450:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8017454:	4718      	bx	r3
 8017456:	bf00      	nop

08017458 <uxr_object_id>:
 8017458:	b082      	sub	sp, #8
 801745a:	2300      	movs	r3, #0
 801745c:	f88d 1006 	strb.w	r1, [sp, #6]
 8017460:	f360 030f 	bfi	r3, r0, #0, #16
 8017464:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017468:	f362 431f 	bfi	r3, r2, #16, #16
 801746c:	4618      	mov	r0, r3
 801746e:	b002      	add	sp, #8
 8017470:	4770      	bx	lr
 8017472:	bf00      	nop

08017474 <uxr_object_id_from_raw>:
 8017474:	7843      	ldrb	r3, [r0, #1]
 8017476:	b082      	sub	sp, #8
 8017478:	7801      	ldrb	r1, [r0, #0]
 801747a:	2000      	movs	r0, #0
 801747c:	091a      	lsrs	r2, r3, #4
 801747e:	f003 030f 	and.w	r3, r3, #15
 8017482:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017486:	f88d 3006 	strb.w	r3, [sp, #6]
 801748a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801748e:	f362 000f 	bfi	r0, r2, #0, #16
 8017492:	f363 401f 	bfi	r0, r3, #16, #16
 8017496:	b002      	add	sp, #8
 8017498:	4770      	bx	lr
 801749a:	bf00      	nop

0801749c <uxr_object_id_to_raw>:
 801749c:	4602      	mov	r2, r0
 801749e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80174a2:	b082      	sub	sp, #8
 80174a4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80174a8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80174ac:	f881 c000 	strb.w	ip, [r1]
 80174b0:	7048      	strb	r0, [r1, #1]
 80174b2:	b002      	add	sp, #8
 80174b4:	4770      	bx	lr
 80174b6:	bf00      	nop

080174b8 <uxr_ping_agent_session>:
 80174b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174bc:	4617      	mov	r7, r2
 80174be:	b091      	sub	sp, #68	@ 0x44
 80174c0:	2210      	movs	r2, #16
 80174c2:	4606      	mov	r6, r0
 80174c4:	4688      	mov	r8, r1
 80174c6:	a808      	add	r0, sp, #32
 80174c8:	eb0d 0102 	add.w	r1, sp, r2
 80174cc:	2500      	movs	r5, #0
 80174ce:	f7fc fe59 	bl	8014184 <ucdr_init_buffer>
 80174d2:	4b1e      	ldr	r3, [pc, #120]	@ (801754c <uxr_ping_agent_session+0x94>)
 80174d4:	2402      	movs	r4, #2
 80174d6:	462a      	mov	r2, r5
 80174d8:	881b      	ldrh	r3, [r3, #0]
 80174da:	a808      	add	r0, sp, #32
 80174dc:	9500      	str	r5, [sp, #0]
 80174de:	f8ad 300a 	strh.w	r3, [sp, #10]
 80174e2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80174e6:	7831      	ldrb	r1, [r6, #0]
 80174e8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80174ec:	462b      	mov	r3, r5
 80174ee:	9403      	str	r4, [sp, #12]
 80174f0:	f002 f9b6 	bl	8019860 <uxr_serialize_message_header>
 80174f4:	4621      	mov	r1, r4
 80174f6:	462b      	mov	r3, r5
 80174f8:	2208      	movs	r2, #8
 80174fa:	a808      	add	r0, sp, #32
 80174fc:	f001 ffb4 	bl	8019468 <uxr_buffer_submessage_header>
 8017500:	4604      	mov	r4, r0
 8017502:	a902      	add	r1, sp, #8
 8017504:	a808      	add	r0, sp, #32
 8017506:	f003 f8b7 	bl	801a678 <uxr_serialize_GET_INFO_Payload>
 801750a:	b104      	cbz	r4, 801750e <uxr_ping_agent_session+0x56>
 801750c:	b918      	cbnz	r0, 8017516 <uxr_ping_agent_session+0x5e>
 801750e:	2000      	movs	r0, #0
 8017510:	b011      	add	sp, #68	@ 0x44
 8017512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017516:	a808      	add	r0, sp, #32
 8017518:	f7fc fe62 	bl	80141e0 <ucdr_buffer_length>
 801751c:	4681      	mov	r9, r0
 801751e:	e00d      	b.n	801753c <uxr_ping_agent_session+0x84>
 8017520:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8017522:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017526:	47a0      	blx	r4
 8017528:	4604      	mov	r4, r0
 801752a:	4641      	mov	r1, r8
 801752c:	4630      	mov	r0, r6
 801752e:	f000 fe73 	bl	8018218 <uxr_run_session_until_pong>
 8017532:	ea04 0c00 	and.w	ip, r4, r0
 8017536:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 801753a:	d1e9      	bne.n	8017510 <uxr_ping_agent_session+0x58>
 801753c:	42af      	cmp	r7, r5
 801753e:	464a      	mov	r2, r9
 8017540:	a904      	add	r1, sp, #16
 8017542:	f105 0501 	add.w	r5, r5, #1
 8017546:	d1eb      	bne.n	8017520 <uxr_ping_agent_session+0x68>
 8017548:	e7e1      	b.n	801750e <uxr_ping_agent_session+0x56>
 801754a:	bf00      	nop
 801754c:	0802349c 	.word	0x0802349c

08017550 <uxr_ping_agent_attempts>:
 8017550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017554:	ed2d 8b02 	vpush	{d8}
 8017558:	b0d3      	sub	sp, #332	@ 0x14c
 801755a:	4606      	mov	r6, r0
 801755c:	468a      	mov	sl, r1
 801755e:	2400      	movs	r4, #0
 8017560:	a90c      	add	r1, sp, #48	@ 0x30
 8017562:	a810      	add	r0, sp, #64	@ 0x40
 8017564:	9205      	str	r2, [sp, #20]
 8017566:	2210      	movs	r2, #16
 8017568:	f7fc fe0c 	bl	8014184 <ucdr_init_buffer>
 801756c:	4b53      	ldr	r3, [pc, #332]	@ (80176bc <uxr_ping_agent_attempts+0x16c>)
 801756e:	2502      	movs	r5, #2
 8017570:	4622      	mov	r2, r4
 8017572:	881b      	ldrh	r3, [r3, #0]
 8017574:	2180      	movs	r1, #128	@ 0x80
 8017576:	a810      	add	r0, sp, #64	@ 0x40
 8017578:	9400      	str	r4, [sp, #0]
 801757a:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 801757e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8017582:	9521      	str	r5, [sp, #132]	@ 0x84
 8017584:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 8017588:	4623      	mov	r3, r4
 801758a:	f002 f969 	bl	8019860 <uxr_serialize_message_header>
 801758e:	4623      	mov	r3, r4
 8017590:	4629      	mov	r1, r5
 8017592:	2208      	movs	r2, #8
 8017594:	a810      	add	r0, sp, #64	@ 0x40
 8017596:	f001 ff67 	bl	8019468 <uxr_buffer_submessage_header>
 801759a:	4681      	mov	r9, r0
 801759c:	a920      	add	r1, sp, #128	@ 0x80
 801759e:	a810      	add	r0, sp, #64	@ 0x40
 80175a0:	f003 f86a 	bl	801a678 <uxr_serialize_GET_INFO_Payload>
 80175a4:	ea09 0000 	and.w	r0, r9, r0
 80175a8:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
 80175ac:	d107      	bne.n	80175be <uxr_ping_agent_attempts+0x6e>
 80175ae:	f04f 0b00 	mov.w	fp, #0
 80175b2:	4658      	mov	r0, fp
 80175b4:	b053      	add	sp, #332	@ 0x14c
 80175b6:	ecbd 8b02 	vpop	{d8}
 80175ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175be:	a810      	add	r0, sp, #64	@ 0x40
 80175c0:	9404      	str	r4, [sp, #16]
 80175c2:	f7fc fe0d 	bl	80141e0 <ucdr_buffer_length>
 80175c6:	ee08 0a10 	vmov	s16, r0
 80175ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80175ce:	4293      	cmp	r3, r2
 80175d0:	d0ed      	beq.n	80175ae <uxr_ping_agent_attempts+0x5e>
 80175d2:	ee18 2a10 	vmov	r2, s16
 80175d6:	a90c      	add	r1, sp, #48	@ 0x30
 80175d8:	4655      	mov	r5, sl
 80175da:	f04f 0800 	mov.w	r8, #0
 80175de:	e9d6 0300 	ldrd	r0, r3, [r6]
 80175e2:	4798      	blx	r3
 80175e4:	f001 ff86 	bl	80194f4 <uxr_millis>
 80175e8:	9003      	str	r0, [sp, #12]
 80175ea:	e00b      	b.n	8017604 <uxr_ping_agent_attempts+0xb4>
 80175ec:	f001 ff82 	bl	80194f4 <uxr_millis>
 80175f0:	9b03      	ldr	r3, [sp, #12]
 80175f2:	1ac0      	subs	r0, r0, r3
 80175f4:	1a2d      	subs	r5, r5, r0
 80175f6:	f001 ff7d 	bl	80194f4 <uxr_millis>
 80175fa:	9003      	str	r0, [sp, #12]
 80175fc:	2d00      	cmp	r5, #0
 80175fe:	dd30      	ble.n	8017662 <uxr_ping_agent_attempts+0x112>
 8017600:	2f00      	cmp	r7, #0
 8017602:	d02e      	beq.n	8017662 <uxr_ping_agent_attempts+0x112>
 8017604:	4653      	mov	r3, sl
 8017606:	aa09      	add	r2, sp, #36	@ 0x24
 8017608:	a908      	add	r1, sp, #32
 801760a:	6830      	ldr	r0, [r6, #0]
 801760c:	68b4      	ldr	r4, [r6, #8]
 801760e:	464f      	mov	r7, r9
 8017610:	f8cd 8020 	str.w	r8, [sp, #32]
 8017614:	47a0      	blx	r4
 8017616:	4683      	mov	fp, r0
 8017618:	2800      	cmp	r0, #0
 801761a:	d0e7      	beq.n	80175ec <uxr_ping_agent_attempts+0x9c>
 801761c:	a818      	add	r0, sp, #96	@ 0x60
 801761e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8017622:	f7fc fdaf 	bl	8014184 <ucdr_init_buffer>
 8017626:	ab07      	add	r3, sp, #28
 8017628:	f10d 0219 	add.w	r2, sp, #25
 801762c:	a918      	add	r1, sp, #96	@ 0x60
 801762e:	a80a      	add	r0, sp, #40	@ 0x28
 8017630:	e9cd 880a 	strd	r8, r8, [sp, #40]	@ 0x28
 8017634:	f001 f8e4 	bl	8018800 <uxr_read_session_header>
 8017638:	22c8      	movs	r2, #200	@ 0xc8
 801763a:	2100      	movs	r1, #0
 801763c:	a820      	add	r0, sp, #128	@ 0x80
 801763e:	f00a fe7b 	bl	8022338 <memset>
 8017642:	a818      	add	r0, sp, #96	@ 0x60
 8017644:	f7fc fdd0 	bl	80141e8 <ucdr_buffer_remaining>
 8017648:	2804      	cmp	r0, #4
 801764a:	d816      	bhi.n	801767a <uxr_ping_agent_attempts+0x12a>
 801764c:	f89d 3135 	ldrb.w	r3, [sp, #309]	@ 0x135
 8017650:	2b00      	cmp	r3, #0
 8017652:	bf13      	iteet	ne
 8017654:	f04f 0b01 	movne.w	fp, #1
 8017658:	f04f 0b00 	moveq.w	fp, #0
 801765c:	2701      	moveq	r7, #1
 801765e:	2700      	movne	r7, #0
 8017660:	e7c4      	b.n	80175ec <uxr_ping_agent_attempts+0x9c>
 8017662:	9b04      	ldr	r3, [sp, #16]
 8017664:	3301      	adds	r3, #1
 8017666:	9304      	str	r3, [sp, #16]
 8017668:	f1bb 0f00 	cmp.w	fp, #0
 801766c:	d0ad      	beq.n	80175ca <uxr_ping_agent_attempts+0x7a>
 801766e:	4658      	mov	r0, fp
 8017670:	b053      	add	sp, #332	@ 0x14c
 8017672:	ecbd 8b02 	vpop	{d8}
 8017676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767a:	f10d 031e 	add.w	r3, sp, #30
 801767e:	f10d 021b 	add.w	r2, sp, #27
 8017682:	f10d 011a 	add.w	r1, sp, #26
 8017686:	a818      	add	r0, sp, #96	@ 0x60
 8017688:	f88d 801a 	strb.w	r8, [sp, #26]
 801768c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8017690:	f88d 801b 	strb.w	r8, [sp, #27]
 8017694:	f002 f936 	bl	8019904 <uxr_deserialize_submessage_header>
 8017698:	a818      	add	r0, sp, #96	@ 0x60
 801769a:	f7fc fda5 	bl	80141e8 <ucdr_buffer_remaining>
 801769e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80176a2:	4298      	cmp	r0, r3
 80176a4:	d3d2      	bcc.n	801764c <uxr_ping_agent_attempts+0xfc>
 80176a6:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80176aa:	2b06      	cmp	r3, #6
 80176ac:	d1ce      	bne.n	801764c <uxr_ping_agent_attempts+0xfc>
 80176ae:	a918      	add	r1, sp, #96	@ 0x60
 80176b0:	a820      	add	r0, sp, #128	@ 0x80
 80176b2:	f88d 8135 	strb.w	r8, [sp, #309]	@ 0x135
 80176b6:	f000 f999 	bl	80179ec <read_submessage_info>
 80176ba:	e7c7      	b.n	801764c <uxr_ping_agent_attempts+0xfc>
 80176bc:	0802349c 	.word	0x0802349c

080176c0 <on_get_fragmentation_info>:
 80176c0:	b500      	push	{lr}
 80176c2:	b08b      	sub	sp, #44	@ 0x2c
 80176c4:	4601      	mov	r1, r0
 80176c6:	2204      	movs	r2, #4
 80176c8:	a802      	add	r0, sp, #8
 80176ca:	f7fc fd5b 	bl	8014184 <ucdr_init_buffer>
 80176ce:	f10d 0305 	add.w	r3, sp, #5
 80176d2:	f10d 0206 	add.w	r2, sp, #6
 80176d6:	a901      	add	r1, sp, #4
 80176d8:	a802      	add	r0, sp, #8
 80176da:	f001 fedf 	bl	801949c <uxr_read_submessage_header>
 80176de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80176e2:	2b0d      	cmp	r3, #13
 80176e4:	d003      	beq.n	80176ee <on_get_fragmentation_info+0x2e>
 80176e6:	2000      	movs	r0, #0
 80176e8:	b00b      	add	sp, #44	@ 0x2c
 80176ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80176ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80176f2:	f013 0f02 	tst.w	r3, #2
 80176f6:	bf14      	ite	ne
 80176f8:	2002      	movne	r0, #2
 80176fa:	2001      	moveq	r0, #1
 80176fc:	b00b      	add	sp, #44	@ 0x2c
 80176fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8017702:	bf00      	nop

08017704 <read_submessage_get_info>:
 8017704:	b570      	push	{r4, r5, r6, lr}
 8017706:	2500      	movs	r5, #0
 8017708:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801770c:	460e      	mov	r6, r1
 801770e:	4604      	mov	r4, r0
 8017710:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8017714:	4629      	mov	r1, r5
 8017716:	a810      	add	r0, sp, #64	@ 0x40
 8017718:	9503      	str	r5, [sp, #12]
 801771a:	9504      	str	r5, [sp, #16]
 801771c:	f00a fe0c 	bl	8022338 <memset>
 8017720:	a903      	add	r1, sp, #12
 8017722:	4630      	mov	r0, r6
 8017724:	f002 ffbe 	bl	801a6a4 <uxr_deserialize_GET_INFO_Payload>
 8017728:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801772c:	4620      	mov	r0, r4
 801772e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017732:	f001 f8a5 	bl	8018880 <uxr_session_header_offset>
 8017736:	462b      	mov	r3, r5
 8017738:	220c      	movs	r2, #12
 801773a:	a905      	add	r1, sp, #20
 801773c:	9000      	str	r0, [sp, #0]
 801773e:	a808      	add	r0, sp, #32
 8017740:	f7fc fd0e 	bl	8014160 <ucdr_init_buffer_origin_offset>
 8017744:	a910      	add	r1, sp, #64	@ 0x40
 8017746:	a808      	add	r0, sp, #32
 8017748:	f003 f820 	bl	801a78c <uxr_serialize_INFO_Payload>
 801774c:	9b08      	ldr	r3, [sp, #32]
 801774e:	462a      	mov	r2, r5
 8017750:	4629      	mov	r1, r5
 8017752:	4620      	mov	r0, r4
 8017754:	f001 f840 	bl	80187d8 <uxr_stamp_session_header>
 8017758:	a808      	add	r0, sp, #32
 801775a:	f7fc fd41 	bl	80141e0 <ucdr_buffer_length>
 801775e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017760:	4602      	mov	r2, r0
 8017762:	a905      	add	r1, sp, #20
 8017764:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017768:	47a0      	blx	r4
 801776a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801776e:	bd70      	pop	{r4, r5, r6, pc}

08017770 <write_submessage_acknack.isra.0>:
 8017770:	b570      	push	{r4, r5, r6, lr}
 8017772:	b092      	sub	sp, #72	@ 0x48
 8017774:	4605      	mov	r5, r0
 8017776:	460e      	mov	r6, r1
 8017778:	4614      	mov	r4, r2
 801777a:	f001 f881 	bl	8018880 <uxr_session_header_offset>
 801777e:	a905      	add	r1, sp, #20
 8017780:	9000      	str	r0, [sp, #0]
 8017782:	2300      	movs	r3, #0
 8017784:	a80a      	add	r0, sp, #40	@ 0x28
 8017786:	2211      	movs	r2, #17
 8017788:	f7fc fcea 	bl	8014160 <ucdr_init_buffer_origin_offset>
 801778c:	2218      	movs	r2, #24
 801778e:	2300      	movs	r3, #0
 8017790:	210a      	movs	r1, #10
 8017792:	fb02 5404 	mla	r4, r2, r4, r5
 8017796:	a80a      	add	r0, sp, #40	@ 0x28
 8017798:	2205      	movs	r2, #5
 801779a:	3450      	adds	r4, #80	@ 0x50
 801779c:	f001 fe64 	bl	8019468 <uxr_buffer_submessage_header>
 80177a0:	a903      	add	r1, sp, #12
 80177a2:	4620      	mov	r0, r4
 80177a4:	f008 fed0 	bl	8020548 <uxr_compute_acknack>
 80177a8:	ba40      	rev16	r0, r0
 80177aa:	a903      	add	r1, sp, #12
 80177ac:	f88d 6010 	strb.w	r6, [sp, #16]
 80177b0:	f8ad 000e 	strh.w	r0, [sp, #14]
 80177b4:	a80a      	add	r0, sp, #40	@ 0x28
 80177b6:	f003 f85b 	bl	801a870 <uxr_serialize_ACKNACK_Payload>
 80177ba:	2200      	movs	r2, #0
 80177bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80177be:	4628      	mov	r0, r5
 80177c0:	4611      	mov	r1, r2
 80177c2:	f001 f809 	bl	80187d8 <uxr_stamp_session_header>
 80177c6:	a80a      	add	r0, sp, #40	@ 0x28
 80177c8:	f7fc fd0a 	bl	80141e0 <ucdr_buffer_length>
 80177cc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80177ce:	4602      	mov	r2, r0
 80177d0:	a905      	add	r1, sp, #20
 80177d2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80177d6:	47a0      	blx	r4
 80177d8:	b012      	add	sp, #72	@ 0x48
 80177da:	bd70      	pop	{r4, r5, r6, pc}
 80177dc:	0000      	movs	r0, r0
	...

080177e0 <uxr_init_session>:
 80177e0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8017818 <uxr_init_session+0x38>
 80177e4:	2300      	movs	r3, #0
 80177e6:	b510      	push	{r4, lr}
 80177e8:	4604      	mov	r4, r0
 80177ea:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80177ee:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80177f2:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80177f6:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80177fa:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80177fe:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8017802:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8017806:	2181      	movs	r1, #129	@ 0x81
 8017808:	f000 ff4a 	bl	80186a0 <uxr_init_session_info>
 801780c:	f104 0008 	add.w	r0, r4, #8
 8017810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017814:	f001 bd44 	b.w	80192a0 <uxr_init_stream_storage>
	...

08017820 <uxr_set_status_callback>:
 8017820:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8017824:	4770      	bx	lr
 8017826:	bf00      	nop

08017828 <uxr_set_topic_callback>:
 8017828:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801782c:	4770      	bx	lr
 801782e:	bf00      	nop

08017830 <uxr_set_request_callback>:
 8017830:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8017834:	4770      	bx	lr
 8017836:	bf00      	nop

08017838 <uxr_set_reply_callback>:
 8017838:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801783c:	4770      	bx	lr
 801783e:	bf00      	nop

08017840 <uxr_create_output_best_effort_stream>:
 8017840:	b510      	push	{r4, lr}
 8017842:	4604      	mov	r4, r0
 8017844:	b084      	sub	sp, #16
 8017846:	e9cd 2100 	strd	r2, r1, [sp]
 801784a:	f001 f819 	bl	8018880 <uxr_session_header_offset>
 801784e:	4603      	mov	r3, r0
 8017850:	f104 0008 	add.w	r0, r4, #8
 8017854:	e9dd 2100 	ldrd	r2, r1, [sp]
 8017858:	b004      	add	sp, #16
 801785a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801785e:	f001 bd65 	b.w	801932c <uxr_add_output_best_effort_buffer>
 8017862:	bf00      	nop

08017864 <uxr_create_output_reliable_stream>:
 8017864:	b530      	push	{r4, r5, lr}
 8017866:	b089      	sub	sp, #36	@ 0x24
 8017868:	4604      	mov	r4, r0
 801786a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801786e:	9303      	str	r3, [sp, #12]
 8017870:	f001 f806 	bl	8018880 <uxr_session_header_offset>
 8017874:	4605      	mov	r5, r0
 8017876:	9905      	ldr	r1, [sp, #20]
 8017878:	f104 0008 	add.w	r0, r4, #8
 801787c:	9500      	str	r5, [sp, #0]
 801787e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8017882:	f001 fd67 	bl	8019354 <uxr_add_output_reliable_buffer>
 8017886:	2200      	movs	r2, #0
 8017888:	fa5f fc80 	uxtb.w	ip, r0
 801788c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8017890:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8017894:	0e03      	lsrs	r3, r0, #24
 8017896:	f36c 0207 	bfi	r2, ip, #0, #8
 801789a:	f364 220f 	bfi	r2, r4, #8, #8
 801789e:	f361 4217 	bfi	r2, r1, #16, #8
 80178a2:	f363 621f 	bfi	r2, r3, #24, #8
 80178a6:	4610      	mov	r0, r2
 80178a8:	b009      	add	sp, #36	@ 0x24
 80178aa:	bd30      	pop	{r4, r5, pc}

080178ac <uxr_create_input_best_effort_stream>:
 80178ac:	b082      	sub	sp, #8
 80178ae:	3008      	adds	r0, #8
 80178b0:	b002      	add	sp, #8
 80178b2:	f001 bd69 	b.w	8019388 <uxr_add_input_best_effort_buffer>
 80178b6:	bf00      	nop

080178b8 <uxr_create_input_reliable_stream>:
 80178b8:	b510      	push	{r4, lr}
 80178ba:	4c0c      	ldr	r4, [pc, #48]	@ (80178ec <uxr_create_input_reliable_stream+0x34>)
 80178bc:	b084      	sub	sp, #16
 80178be:	3008      	adds	r0, #8
 80178c0:	9400      	str	r4, [sp, #0]
 80178c2:	f001 fd77 	bl	80193b4 <uxr_add_input_reliable_buffer>
 80178c6:	2200      	movs	r2, #0
 80178c8:	fa5f fe80 	uxtb.w	lr, r0
 80178cc:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80178d0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80178d4:	0e03      	lsrs	r3, r0, #24
 80178d6:	f36e 0207 	bfi	r2, lr, #0, #8
 80178da:	f36c 220f 	bfi	r2, ip, #8, #8
 80178de:	f361 4217 	bfi	r2, r1, #16, #8
 80178e2:	f363 621f 	bfi	r2, r3, #24, #8
 80178e6:	4610      	mov	r0, r2
 80178e8:	b004      	add	sp, #16
 80178ea:	bd10      	pop	{r4, pc}
 80178ec:	080176c1 	.word	0x080176c1

080178f0 <uxr_epoch_nanos>:
 80178f0:	b510      	push	{r4, lr}
 80178f2:	4604      	mov	r4, r0
 80178f4:	f001 fe1a 	bl	801952c <uxr_nanos>
 80178f8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80178fc:	1ac0      	subs	r0, r0, r3
 80178fe:	eb61 0102 	sbc.w	r1, r1, r2
 8017902:	bd10      	pop	{r4, pc}

08017904 <uxr_flash_output_streams>:
 8017904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017908:	7e03      	ldrb	r3, [r0, #24]
 801790a:	b084      	sub	sp, #16
 801790c:	4604      	mov	r4, r0
 801790e:	b1fb      	cbz	r3, 8017950 <uxr_flash_output_streams+0x4c>
 8017910:	f04f 0900 	mov.w	r9, #0
 8017914:	f10d 0802 	add.w	r8, sp, #2
 8017918:	af03      	add	r7, sp, #12
 801791a:	ae02      	add	r6, sp, #8
 801791c:	4648      	mov	r0, r9
 801791e:	2201      	movs	r2, #1
 8017920:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8017924:	4611      	mov	r1, r2
 8017926:	3508      	adds	r5, #8
 8017928:	f001 fc60 	bl	80191ec <uxr_stream_id>
 801792c:	4684      	mov	ip, r0
 801792e:	4643      	mov	r3, r8
 8017930:	463a      	mov	r2, r7
 8017932:	4631      	mov	r1, r6
 8017934:	4628      	mov	r0, r5
 8017936:	f8cd c004 	str.w	ip, [sp, #4]
 801793a:	f008 fe8f 	bl	802065c <uxr_prepare_best_effort_buffer_to_send>
 801793e:	2800      	cmp	r0, #0
 8017940:	d13d      	bne.n	80179be <uxr_flash_output_streams+0xba>
 8017942:	f109 0901 	add.w	r9, r9, #1
 8017946:	7e23      	ldrb	r3, [r4, #24]
 8017948:	fa5f f089 	uxtb.w	r0, r9
 801794c:	4283      	cmp	r3, r0
 801794e:	d8e6      	bhi.n	801791e <uxr_flash_output_streams+0x1a>
 8017950:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8017954:	b383      	cbz	r3, 80179b8 <uxr_flash_output_streams+0xb4>
 8017956:	f04f 0900 	mov.w	r9, #0
 801795a:	f10d 0802 	add.w	r8, sp, #2
 801795e:	af03      	add	r7, sp, #12
 8017960:	ae02      	add	r6, sp, #8
 8017962:	4648      	mov	r0, r9
 8017964:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8017968:	2201      	movs	r2, #1
 801796a:	2102      	movs	r1, #2
 801796c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8017970:	f001 fc3c 	bl	80191ec <uxr_stream_id>
 8017974:	9001      	str	r0, [sp, #4]
 8017976:	3520      	adds	r5, #32
 8017978:	e00c      	b.n	8017994 <uxr_flash_output_streams+0x90>
 801797a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801797e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017982:	9b02      	ldr	r3, [sp, #8]
 8017984:	f000 ff28 	bl	80187d8 <uxr_stamp_session_header>
 8017988:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801798a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801798e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8017992:	47d0      	blx	sl
 8017994:	4643      	mov	r3, r8
 8017996:	463a      	mov	r2, r7
 8017998:	4631      	mov	r1, r6
 801799a:	4628      	mov	r0, r5
 801799c:	f009 f880 	bl	8020aa0 <uxr_prepare_next_reliable_buffer_to_send>
 80179a0:	4603      	mov	r3, r0
 80179a2:	4620      	mov	r0, r4
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d1e8      	bne.n	801797a <uxr_flash_output_streams+0x76>
 80179a8:	f109 0901 	add.w	r9, r9, #1
 80179ac:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80179b0:	fa5f f089 	uxtb.w	r0, r9
 80179b4:	4283      	cmp	r3, r0
 80179b6:	d8d5      	bhi.n	8017964 <uxr_flash_output_streams+0x60>
 80179b8:	b004      	add	sp, #16
 80179ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179be:	9b02      	ldr	r3, [sp, #8]
 80179c0:	4620      	mov	r0, r4
 80179c2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80179c6:	f109 0901 	add.w	r9, r9, #1
 80179ca:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80179ce:	f000 ff03 	bl	80187d8 <uxr_stamp_session_header>
 80179d2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80179d4:	9a03      	ldr	r2, [sp, #12]
 80179d6:	685d      	ldr	r5, [r3, #4]
 80179d8:	6818      	ldr	r0, [r3, #0]
 80179da:	9902      	ldr	r1, [sp, #8]
 80179dc:	47a8      	blx	r5
 80179de:	7e23      	ldrb	r3, [r4, #24]
 80179e0:	fa5f f089 	uxtb.w	r0, r9
 80179e4:	4283      	cmp	r3, r0
 80179e6:	d89a      	bhi.n	801791e <uxr_flash_output_streams+0x1a>
 80179e8:	e7b2      	b.n	8017950 <uxr_flash_output_streams+0x4c>
 80179ea:	bf00      	nop

080179ec <read_submessage_info>:
 80179ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179f0:	460d      	mov	r5, r1
 80179f2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80179f6:	4606      	mov	r6, r0
 80179f8:	4669      	mov	r1, sp
 80179fa:	4628      	mov	r0, r5
 80179fc:	f002 fd4e 	bl	801a49c <uxr_deserialize_BaseObjectReply>
 8017a00:	4604      	mov	r4, r0
 8017a02:	a902      	add	r1, sp, #8
 8017a04:	4628      	mov	r0, r5
 8017a06:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8017a0a:	f7fb f939 	bl	8012c80 <ucdr_deserialize_bool>
 8017a0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8017a12:	4004      	ands	r4, r0
 8017a14:	b2e4      	uxtb	r4, r4
 8017a16:	b95b      	cbnz	r3, 8017a30 <read_submessage_info+0x44>
 8017a18:	a987      	add	r1, sp, #540	@ 0x21c
 8017a1a:	4628      	mov	r0, r5
 8017a1c:	f7fb f930 	bl	8012c80 <ucdr_deserialize_bool>
 8017a20:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8017a24:	4680      	mov	r8, r0
 8017a26:	b94b      	cbnz	r3, 8017a3c <read_submessage_info+0x50>
 8017a28:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8017a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a30:	a903      	add	r1, sp, #12
 8017a32:	4628      	mov	r0, r5
 8017a34:	f002 fbde 	bl	801a1f4 <uxr_deserialize_ObjectVariant>
 8017a38:	4004      	ands	r4, r0
 8017a3a:	e7ed      	b.n	8017a18 <read_submessage_info+0x2c>
 8017a3c:	a988      	add	r1, sp, #544	@ 0x220
 8017a3e:	4628      	mov	r0, r5
 8017a40:	f7fb f94c 	bl	8012cdc <ucdr_deserialize_uint8_t>
 8017a44:	ea14 0f08 	tst.w	r4, r8
 8017a48:	d0ee      	beq.n	8017a28 <read_submessage_info+0x3c>
 8017a4a:	2800      	cmp	r0, #0
 8017a4c:	d0ec      	beq.n	8017a28 <read_submessage_info+0x3c>
 8017a4e:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8017a52:	2b0d      	cmp	r3, #13
 8017a54:	d1e8      	bne.n	8017a28 <read_submessage_info+0x3c>
 8017a56:	a98a      	add	r1, sp, #552	@ 0x228
 8017a58:	4628      	mov	r0, r5
 8017a5a:	f7fb fee5 	bl	8013828 <ucdr_deserialize_int16_t>
 8017a5e:	b138      	cbz	r0, 8017a70 <read_submessage_info+0x84>
 8017a60:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	dd06      	ble.n	8017a76 <read_submessage_info+0x8a>
 8017a68:	2f00      	cmp	r7, #0
 8017a6a:	bf14      	ite	ne
 8017a6c:	2001      	movne	r0, #1
 8017a6e:	2002      	moveq	r0, #2
 8017a70:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8017a74:	e7d8      	b.n	8017a28 <read_submessage_info+0x3c>
 8017a76:	2000      	movs	r0, #0
 8017a78:	e7fa      	b.n	8017a70 <read_submessage_info+0x84>
 8017a7a:	bf00      	nop

08017a7c <read_submessage_list>:
 8017a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a80:	4604      	mov	r4, r0
 8017a82:	b097      	sub	sp, #92	@ 0x5c
 8017a84:	460d      	mov	r5, r1
 8017a86:	4ec1      	ldr	r6, [pc, #772]	@ (8017d8c <read_submessage_list+0x310>)
 8017a88:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a8a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8017a8e:	aa0c      	add	r2, sp, #48	@ 0x30
 8017a90:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8017a94:	4628      	mov	r0, r5
 8017a96:	f001 fd01 	bl	801949c <uxr_read_submessage_header>
 8017a9a:	2800      	cmp	r0, #0
 8017a9c:	f000 8142 	beq.w	8017d24 <read_submessage_list+0x2a8>
 8017aa0:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8017aa4:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8017aa8:	3b02      	subs	r3, #2
 8017aaa:	2b0d      	cmp	r3, #13
 8017aac:	d8ed      	bhi.n	8017a8a <read_submessage_list+0xe>
 8017aae:	a101      	add	r1, pc, #4	@ (adr r1, 8017ab4 <read_submessage_list+0x38>)
 8017ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017ab4:	08017d1b 	.word	0x08017d1b
 8017ab8:	08017a8b 	.word	0x08017a8b
 8017abc:	08017d0b 	.word	0x08017d0b
 8017ac0:	08017ca9 	.word	0x08017ca9
 8017ac4:	08017c9f 	.word	0x08017c9f
 8017ac8:	08017a8b 	.word	0x08017a8b
 8017acc:	08017a8b 	.word	0x08017a8b
 8017ad0:	08017bf5 	.word	0x08017bf5
 8017ad4:	08017b87 	.word	0x08017b87
 8017ad8:	08017b47 	.word	0x08017b47
 8017adc:	08017a8b 	.word	0x08017a8b
 8017ae0:	08017a8b 	.word	0x08017a8b
 8017ae4:	08017a8b 	.word	0x08017a8b
 8017ae8:	08017aed 	.word	0x08017aed
 8017aec:	a910      	add	r1, sp, #64	@ 0x40
 8017aee:	4628      	mov	r0, r5
 8017af0:	f002 ff20 	bl	801a934 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8017af4:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8017af8:	f1b8 0f00 	cmp.w	r8, #0
 8017afc:	f000 811a 	beq.w	8017d34 <read_submessage_list+0x2b8>
 8017b00:	f001 fd14 	bl	801952c <uxr_nanos>
 8017b04:	4602      	mov	r2, r0
 8017b06:	460b      	mov	r3, r1
 8017b08:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8017b0c:	2100      	movs	r1, #0
 8017b0e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017b10:	9006      	str	r0, [sp, #24]
 8017b12:	468c      	mov	ip, r1
 8017b14:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8017b16:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017b1a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017b1c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8017b20:	468c      	mov	ip, r1
 8017b22:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017b24:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017b28:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8017b2c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8017b30:	fbc7 0106 	smlal	r0, r1, r7, r6
 8017b34:	e9cd 0100 	strd	r0, r1, [sp]
 8017b38:	4620      	mov	r0, r4
 8017b3a:	47c0      	blx	r8
 8017b3c:	f04f 0301 	mov.w	r3, #1
 8017b40:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8017b44:	e7a1      	b.n	8017a8a <read_submessage_list+0xe>
 8017b46:	a910      	add	r1, sp, #64	@ 0x40
 8017b48:	4628      	mov	r0, r5
 8017b4a:	f002 fed1 	bl	801a8f0 <uxr_deserialize_HEARTBEAT_Payload>
 8017b4e:	2100      	movs	r1, #0
 8017b50:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017b54:	f001 fb78 	bl	8019248 <uxr_stream_id_from_raw>
 8017b58:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8017b5c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017b5e:	f104 0008 	add.w	r0, r4, #8
 8017b62:	4641      	mov	r1, r8
 8017b64:	f001 fc5e 	bl	8019424 <uxr_get_input_reliable_stream>
 8017b68:	2800      	cmp	r0, #0
 8017b6a:	d08e      	beq.n	8017a8a <read_submessage_list+0xe>
 8017b6c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8017b70:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8017b74:	f008 fcdc 	bl	8020530 <uxr_process_heartbeat>
 8017b78:	4642      	mov	r2, r8
 8017b7a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8017b7e:	4620      	mov	r0, r4
 8017b80:	f7ff fdf6 	bl	8017770 <write_submessage_acknack.isra.0>
 8017b84:	e781      	b.n	8017a8a <read_submessage_list+0xe>
 8017b86:	a910      	add	r1, sp, #64	@ 0x40
 8017b88:	4628      	mov	r0, r5
 8017b8a:	f002 fe89 	bl	801a8a0 <uxr_deserialize_ACKNACK_Payload>
 8017b8e:	2100      	movs	r1, #0
 8017b90:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017b94:	f001 fb58 	bl	8019248 <uxr_stream_id_from_raw>
 8017b98:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8017b9c:	900d      	str	r0, [sp, #52]	@ 0x34
 8017b9e:	f104 0008 	add.w	r0, r4, #8
 8017ba2:	f001 fc29 	bl	80193f8 <uxr_get_output_reliable_stream>
 8017ba6:	4680      	mov	r8, r0
 8017ba8:	2800      	cmp	r0, #0
 8017baa:	f43f af6e 	beq.w	8017a8a <read_submessage_list+0xe>
 8017bae:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8017bb2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017bb6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8017bba:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8017bbe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8017bc2:	b289      	uxth	r1, r1
 8017bc4:	f009 f814 	bl	8020bf0 <uxr_process_acknack>
 8017bc8:	4640      	mov	r0, r8
 8017bca:	f008 ffd5 	bl	8020b78 <uxr_begin_output_nack_buffer_it>
 8017bce:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8017bd2:	e005      	b.n	8017be0 <read_submessage_list+0x164>
 8017bd4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017bd6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8017bda:	e9d3 0900 	ldrd	r0, r9, [r3]
 8017bde:	47c8      	blx	r9
 8017be0:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8017be4:	aa0f      	add	r2, sp, #60	@ 0x3c
 8017be6:	4651      	mov	r1, sl
 8017be8:	4640      	mov	r0, r8
 8017bea:	f008 ffc7 	bl	8020b7c <uxr_next_reliable_nack_buffer_to_send>
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	d1f0      	bne.n	8017bd4 <read_submessage_list+0x158>
 8017bf2:	e74a      	b.n	8017a8a <read_submessage_list+0xe>
 8017bf4:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8017bf8:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017bfc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8017c00:	4628      	mov	r0, r5
 8017c02:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8017c06:	4651      	mov	r1, sl
 8017c08:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8017c0c:	f1a8 0804 	sub.w	r8, r8, #4
 8017c10:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8017c14:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8017c18:	fa1f f888 	uxth.w	r8, r8
 8017c1c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017c20:	f009 090e 	and.w	r9, r9, #14
 8017c24:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8017c28:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8017c2c:	f002 fb84 	bl	801a338 <uxr_deserialize_BaseObjectRequest>
 8017c30:	4650      	mov	r0, sl
 8017c32:	a90f      	add	r1, sp, #60	@ 0x3c
 8017c34:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8017c38:	f000 fe4a 	bl	80188d0 <uxr_parse_base_object_request>
 8017c3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017c3e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8017c42:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8017c46:	9110      	str	r1, [sp, #64]	@ 0x40
 8017c48:	f1bb 0f00 	cmp.w	fp, #0
 8017c4c:	d006      	beq.n	8017c5c <read_submessage_list+0x1e0>
 8017c4e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017c52:	4652      	mov	r2, sl
 8017c54:	4620      	mov	r0, r4
 8017c56:	9300      	str	r3, [sp, #0]
 8017c58:	2300      	movs	r3, #0
 8017c5a:	47d8      	blx	fp
 8017c5c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017c5e:	b182      	cbz	r2, 8017c82 <read_submessage_list+0x206>
 8017c60:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017c62:	f04f 0c00 	mov.w	ip, #0
 8017c66:	3902      	subs	r1, #2
 8017c68:	e003      	b.n	8017c72 <read_submessage_list+0x1f6>
 8017c6a:	f10c 0c01 	add.w	ip, ip, #1
 8017c6e:	4594      	cmp	ip, r2
 8017c70:	d007      	beq.n	8017c82 <read_submessage_list+0x206>
 8017c72:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8017c76:	4553      	cmp	r3, sl
 8017c78:	d1f7      	bne.n	8017c6a <read_submessage_list+0x1ee>
 8017c7a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017c7c:	2200      	movs	r2, #0
 8017c7e:	f803 200c 	strb.w	r2, [r3, ip]
 8017c82:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8017c86:	464b      	mov	r3, r9
 8017c88:	4642      	mov	r2, r8
 8017c8a:	4620      	mov	r0, r4
 8017c8c:	9102      	str	r1, [sp, #8]
 8017c8e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017c90:	9101      	str	r1, [sp, #4]
 8017c92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8017c94:	9100      	str	r1, [sp, #0]
 8017c96:	4629      	mov	r1, r5
 8017c98:	f009 f86c 	bl	8020d74 <read_submessage_format>
 8017c9c:	e6f5      	b.n	8017a8a <read_submessage_list+0xe>
 8017c9e:	4629      	mov	r1, r5
 8017ca0:	4620      	mov	r0, r4
 8017ca2:	f7ff fea3 	bl	80179ec <read_submessage_info>
 8017ca6:	e6f0      	b.n	8017a8a <read_submessage_list+0xe>
 8017ca8:	2a00      	cmp	r2, #0
 8017caa:	d03e      	beq.n	8017d2a <read_submessage_list+0x2ae>
 8017cac:	a910      	add	r1, sp, #64	@ 0x40
 8017cae:	4628      	mov	r0, r5
 8017cb0:	f002 fd4e 	bl	801a750 <uxr_deserialize_STATUS_Payload>
 8017cb4:	a90e      	add	r1, sp, #56	@ 0x38
 8017cb6:	aa0d      	add	r2, sp, #52	@ 0x34
 8017cb8:	a810      	add	r0, sp, #64	@ 0x40
 8017cba:	f000 fe09 	bl	80188d0 <uxr_parse_base_object_request>
 8017cbe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017cc0:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8017cc4:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8017cc8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8017ccc:	910f      	str	r1, [sp, #60]	@ 0x3c
 8017cce:	f1ba 0f00 	cmp.w	sl, #0
 8017cd2:	d006      	beq.n	8017ce2 <read_submessage_list+0x266>
 8017cd4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017cd8:	4642      	mov	r2, r8
 8017cda:	4620      	mov	r0, r4
 8017cdc:	9300      	str	r3, [sp, #0]
 8017cde:	464b      	mov	r3, r9
 8017ce0:	47d0      	blx	sl
 8017ce2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017ce4:	2a00      	cmp	r2, #0
 8017ce6:	f43f aed0 	beq.w	8017a8a <read_submessage_list+0xe>
 8017cea:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8017cec:	2100      	movs	r1, #0
 8017cee:	3802      	subs	r0, #2
 8017cf0:	e003      	b.n	8017cfa <read_submessage_list+0x27e>
 8017cf2:	3101      	adds	r1, #1
 8017cf4:	4291      	cmp	r1, r2
 8017cf6:	f43f aec8 	beq.w	8017a8a <read_submessage_list+0xe>
 8017cfa:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8017cfe:	4543      	cmp	r3, r8
 8017d00:	d1f7      	bne.n	8017cf2 <read_submessage_list+0x276>
 8017d02:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017d04:	f803 9001 	strb.w	r9, [r3, r1]
 8017d08:	e6bf      	b.n	8017a8a <read_submessage_list+0xe>
 8017d0a:	2a00      	cmp	r2, #0
 8017d0c:	f47f aebd 	bne.w	8017a8a <read_submessage_list+0xe>
 8017d10:	4629      	mov	r1, r5
 8017d12:	4620      	mov	r0, r4
 8017d14:	f000 fd20 	bl	8018758 <uxr_read_create_session_status>
 8017d18:	e6b7      	b.n	8017a8a <read_submessage_list+0xe>
 8017d1a:	4629      	mov	r1, r5
 8017d1c:	4620      	mov	r0, r4
 8017d1e:	f7ff fcf1 	bl	8017704 <read_submessage_get_info>
 8017d22:	e6b2      	b.n	8017a8a <read_submessage_list+0xe>
 8017d24:	b017      	add	sp, #92	@ 0x5c
 8017d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d2a:	4629      	mov	r1, r5
 8017d2c:	4620      	mov	r0, r4
 8017d2e:	f000 fd21 	bl	8018774 <uxr_read_delete_session_status>
 8017d32:	e6aa      	b.n	8017a8a <read_submessage_list+0xe>
 8017d34:	f001 fbfa 	bl	801952c <uxr_nanos>
 8017d38:	4642      	mov	r2, r8
 8017d3a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017d3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017d3e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017d42:	1818      	adds	r0, r3, r0
 8017d44:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017d46:	eb42 0101 	adc.w	r1, r2, r1
 8017d4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017d4c:	4642      	mov	r2, r8
 8017d4e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017d52:	469c      	mov	ip, r3
 8017d54:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8017d58:	fbc3 7806 	smlal	r7, r8, r3, r6
 8017d5c:	4643      	mov	r3, r8
 8017d5e:	eb1c 0c07 	adds.w	ip, ip, r7
 8017d62:	eb42 0203 	adc.w	r2, r2, r3
 8017d66:	ebb0 030c 	subs.w	r3, r0, ip
 8017d6a:	eb61 0202 	sbc.w	r2, r1, r2
 8017d6e:	2a00      	cmp	r2, #0
 8017d70:	db08      	blt.n	8017d84 <read_submessage_list+0x308>
 8017d72:	085b      	lsrs	r3, r3, #1
 8017d74:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8017d78:	1052      	asrs	r2, r2, #1
 8017d7a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8017d7e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8017d82:	e6db      	b.n	8017b3c <read_submessage_list+0xc0>
 8017d84:	3301      	adds	r3, #1
 8017d86:	f142 0200 	adc.w	r2, r2, #0
 8017d8a:	e7f2      	b.n	8017d72 <read_submessage_list+0x2f6>
 8017d8c:	3b9aca00 	.word	0x3b9aca00

08017d90 <listen_message_reliably>:
 8017d90:	1e0b      	subs	r3, r1, #0
 8017d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d96:	bfb8      	it	lt
 8017d98:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8017d9c:	b09d      	sub	sp, #116	@ 0x74
 8017d9e:	4680      	mov	r8, r0
 8017da0:	9305      	str	r3, [sp, #20]
 8017da2:	f001 fba7 	bl	80194f4 <uxr_millis>
 8017da6:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8017daa:	4681      	mov	r9, r0
 8017dac:	2a00      	cmp	r2, #0
 8017dae:	f000 809a 	beq.w	8017ee6 <listen_message_reliably+0x156>
 8017db2:	2600      	movs	r6, #0
 8017db4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017db8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8017dbc:	460f      	mov	r7, r1
 8017dbe:	4630      	mov	r0, r6
 8017dc0:	9303      	str	r3, [sp, #12]
 8017dc2:	e00e      	b.n	8017de2 <listen_message_reliably+0x52>
 8017dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017dc6:	3601      	adds	r6, #1
 8017dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017dca:	455a      	cmp	r2, fp
 8017dcc:	9903      	ldr	r1, [sp, #12]
 8017dce:	b2f0      	uxtb	r0, r6
 8017dd0:	eb73 0101 	sbcs.w	r1, r3, r1
 8017dd4:	da01      	bge.n	8017dda <listen_message_reliably+0x4a>
 8017dd6:	4693      	mov	fp, r2
 8017dd8:	9303      	str	r3, [sp, #12]
 8017dda:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017dde:	4283      	cmp	r3, r0
 8017de0:	d95f      	bls.n	8017ea2 <listen_message_reliably+0x112>
 8017de2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8017de6:	2102      	movs	r1, #2
 8017de8:	2201      	movs	r2, #1
 8017dea:	00e4      	lsls	r4, r4, #3
 8017dec:	f001 f9fe 	bl	80191ec <uxr_stream_id>
 8017df0:	4601      	mov	r1, r0
 8017df2:	f104 0520 	add.w	r5, r4, #32
 8017df6:	463b      	mov	r3, r7
 8017df8:	464a      	mov	r2, r9
 8017dfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8017dfc:	4445      	add	r5, r8
 8017dfe:	4628      	mov	r0, r5
 8017e00:	f008 fe8e 	bl	8020b20 <uxr_update_output_stream_heartbeat_timestamp>
 8017e04:	eb08 0304 	add.w	r3, r8, r4
 8017e08:	2800      	cmp	r0, #0
 8017e0a:	d0db      	beq.n	8017dc4 <listen_message_reliably+0x34>
 8017e0c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8017e10:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8017e14:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017e18:	4640      	mov	r0, r8
 8017e1a:	3501      	adds	r5, #1
 8017e1c:	4444      	add	r4, r8
 8017e1e:	9304      	str	r3, [sp, #16]
 8017e20:	f000 fd2e 	bl	8018880 <uxr_session_header_offset>
 8017e24:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017e28:	2300      	movs	r3, #0
 8017e2a:	2211      	movs	r2, #17
 8017e2c:	a90c      	add	r1, sp, #48	@ 0x30
 8017e2e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8017e32:	9000      	str	r0, [sp, #0]
 8017e34:	4650      	mov	r0, sl
 8017e36:	3601      	adds	r6, #1
 8017e38:	f7fc f992 	bl	8014160 <ucdr_init_buffer_origin_offset>
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	2205      	movs	r2, #5
 8017e40:	210b      	movs	r1, #11
 8017e42:	4650      	mov	r0, sl
 8017e44:	f001 fb10 	bl	8019468 <uxr_buffer_submessage_header>
 8017e48:	2101      	movs	r1, #1
 8017e4a:	8968      	ldrh	r0, [r5, #10]
 8017e4c:	f009 f85c 	bl	8020f08 <uxr_seq_num_add>
 8017e50:	892b      	ldrh	r3, [r5, #8]
 8017e52:	4602      	mov	r2, r0
 8017e54:	a90a      	add	r1, sp, #40	@ 0x28
 8017e56:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017e5a:	4650      	mov	r0, sl
 8017e5c:	9b04      	ldr	r3, [sp, #16]
 8017e5e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017e62:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017e66:	f002 fd2f 	bl	801a8c8 <uxr_serialize_HEARTBEAT_Payload>
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017e6e:	4640      	mov	r0, r8
 8017e70:	4611      	mov	r1, r2
 8017e72:	f000 fcb1 	bl	80187d8 <uxr_stamp_session_header>
 8017e76:	4650      	mov	r0, sl
 8017e78:	f7fc f9b2 	bl	80141e0 <ucdr_buffer_length>
 8017e7c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8017e80:	4602      	mov	r2, r0
 8017e82:	a90c      	add	r1, sp, #48	@ 0x30
 8017e84:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017e88:	47a8      	blx	r5
 8017e8a:	9903      	ldr	r1, [sp, #12]
 8017e8c:	b2f0      	uxtb	r0, r6
 8017e8e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8017e92:	455a      	cmp	r2, fp
 8017e94:	eb73 0101 	sbcs.w	r1, r3, r1
 8017e98:	db9d      	blt.n	8017dd6 <listen_message_reliably+0x46>
 8017e9a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017e9e:	4283      	cmp	r3, r0
 8017ea0:	d89f      	bhi.n	8017de2 <listen_message_reliably+0x52>
 8017ea2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017ea6:	9a03      	ldr	r2, [sp, #12]
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	bf08      	it	eq
 8017eac:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8017eb0:	d019      	beq.n	8017ee6 <listen_message_reliably+0x156>
 8017eb2:	ebab 0309 	sub.w	r3, fp, r9
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	9d05      	ldr	r5, [sp, #20]
 8017eba:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8017ebe:	aa08      	add	r2, sp, #32
 8017ec0:	bf08      	it	eq
 8017ec2:	2301      	moveq	r3, #1
 8017ec4:	a907      	add	r1, sp, #28
 8017ec6:	6884      	ldr	r4, [r0, #8]
 8017ec8:	429d      	cmp	r5, r3
 8017eca:	6800      	ldr	r0, [r0, #0]
 8017ecc:	bfa8      	it	ge
 8017ece:	461d      	movge	r5, r3
 8017ed0:	462b      	mov	r3, r5
 8017ed2:	47a0      	blx	r4
 8017ed4:	b948      	cbnz	r0, 8017eea <listen_message_reliably+0x15a>
 8017ed6:	9b05      	ldr	r3, [sp, #20]
 8017ed8:	1b5b      	subs	r3, r3, r5
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	9305      	str	r3, [sp, #20]
 8017ede:	f73f af60 	bgt.w	8017da2 <listen_message_reliably+0x12>
 8017ee2:	4604      	mov	r4, r0
 8017ee4:	e012      	b.n	8017f0c <listen_message_reliably+0x17c>
 8017ee6:	9b05      	ldr	r3, [sp, #20]
 8017ee8:	e7e5      	b.n	8017eb6 <listen_message_reliably+0x126>
 8017eea:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017eee:	4604      	mov	r4, r0
 8017ef0:	2500      	movs	r5, #0
 8017ef2:	a80c      	add	r0, sp, #48	@ 0x30
 8017ef4:	f7fc f946 	bl	8014184 <ucdr_init_buffer>
 8017ef8:	f10d 031a 	add.w	r3, sp, #26
 8017efc:	aa06      	add	r2, sp, #24
 8017efe:	a90c      	add	r1, sp, #48	@ 0x30
 8017f00:	4640      	mov	r0, r8
 8017f02:	f88d 5018 	strb.w	r5, [sp, #24]
 8017f06:	f000 fc7b 	bl	8018800 <uxr_read_session_header>
 8017f0a:	b918      	cbnz	r0, 8017f14 <listen_message_reliably+0x184>
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	b01d      	add	sp, #116	@ 0x74
 8017f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f14:	4629      	mov	r1, r5
 8017f16:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017f1a:	f001 f995 	bl	8019248 <uxr_stream_id_from_raw>
 8017f1e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8017f22:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8017f26:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8017f2a:	2e01      	cmp	r6, #1
 8017f2c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8017f30:	d04b      	beq.n	8017fca <listen_message_reliably+0x23a>
 8017f32:	2e02      	cmp	r6, #2
 8017f34:	d00f      	beq.n	8017f56 <listen_message_reliably+0x1c6>
 8017f36:	2e00      	cmp	r6, #0
 8017f38:	d1e8      	bne.n	8017f0c <listen_message_reliably+0x17c>
 8017f3a:	4631      	mov	r1, r6
 8017f3c:	4630      	mov	r0, r6
 8017f3e:	f001 f983 	bl	8019248 <uxr_stream_id_from_raw>
 8017f42:	4602      	mov	r2, r0
 8017f44:	a90c      	add	r1, sp, #48	@ 0x30
 8017f46:	4640      	mov	r0, r8
 8017f48:	920a      	str	r2, [sp, #40]	@ 0x28
 8017f4a:	f7ff fd97 	bl	8017a7c <read_submessage_list>
 8017f4e:	4620      	mov	r0, r4
 8017f50:	b01d      	add	sp, #116	@ 0x74
 8017f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f56:	4629      	mov	r1, r5
 8017f58:	f108 0008 	add.w	r0, r8, #8
 8017f5c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8017f60:	f001 fa60 	bl	8019424 <uxr_get_input_reliable_stream>
 8017f64:	4607      	mov	r7, r0
 8017f66:	b338      	cbz	r0, 8017fb8 <listen_message_reliably+0x228>
 8017f68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017f6a:	a80c      	add	r0, sp, #48	@ 0x30
 8017f6c:	9203      	str	r2, [sp, #12]
 8017f6e:	f7fc f93b 	bl	80141e8 <ucdr_buffer_remaining>
 8017f72:	4603      	mov	r3, r0
 8017f74:	f10d 0019 	add.w	r0, sp, #25
 8017f78:	9a03      	ldr	r2, [sp, #12]
 8017f7a:	4651      	mov	r1, sl
 8017f7c:	9000      	str	r0, [sp, #0]
 8017f7e:	4638      	mov	r0, r7
 8017f80:	f008 f9da 	bl	8020338 <uxr_receive_reliable_message>
 8017f84:	b1c0      	cbz	r0, 8017fb8 <listen_message_reliably+0x228>
 8017f86:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017f8a:	b393      	cbz	r3, 8017ff2 <listen_message_reliably+0x262>
 8017f8c:	ae14      	add	r6, sp, #80	@ 0x50
 8017f8e:	f04f 0a02 	mov.w	sl, #2
 8017f92:	e00a      	b.n	8017faa <listen_message_reliably+0x21a>
 8017f94:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8017f98:	4631      	mov	r1, r6
 8017f9a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8017f9e:	4640      	mov	r0, r8
 8017fa0:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8017fa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017fa6:	f7ff fd69 	bl	8017a7c <read_submessage_list>
 8017faa:	2204      	movs	r2, #4
 8017fac:	4631      	mov	r1, r6
 8017fae:	4638      	mov	r0, r7
 8017fb0:	f008 fa44 	bl	802043c <uxr_next_input_reliable_buffer_available>
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	d1ed      	bne.n	8017f94 <listen_message_reliably+0x204>
 8017fb8:	4640      	mov	r0, r8
 8017fba:	462a      	mov	r2, r5
 8017fbc:	4649      	mov	r1, r9
 8017fbe:	f7ff fbd7 	bl	8017770 <write_submessage_acknack.isra.0>
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	b01d      	add	sp, #116	@ 0x74
 8017fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fca:	4629      	mov	r1, r5
 8017fcc:	f108 0008 	add.w	r0, r8, #8
 8017fd0:	f001 fa1e 	bl	8019410 <uxr_get_input_best_effort_stream>
 8017fd4:	2800      	cmp	r0, #0
 8017fd6:	d099      	beq.n	8017f0c <listen_message_reliably+0x17c>
 8017fd8:	4651      	mov	r1, sl
 8017fda:	f008 f923 	bl	8020224 <uxr_receive_best_effort_message>
 8017fde:	2800      	cmp	r0, #0
 8017fe0:	d094      	beq.n	8017f0c <listen_message_reliably+0x17c>
 8017fe2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017fe6:	a90c      	add	r1, sp, #48	@ 0x30
 8017fe8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017fea:	4640      	mov	r0, r8
 8017fec:	f7ff fd46 	bl	8017a7c <read_submessage_list>
 8017ff0:	e78c      	b.n	8017f0c <listen_message_reliably+0x17c>
 8017ff2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017ff6:	a90c      	add	r1, sp, #48	@ 0x30
 8017ff8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017ffa:	4640      	mov	r0, r8
 8017ffc:	f7ff fd3e 	bl	8017a7c <read_submessage_list>
 8018000:	e7c4      	b.n	8017f8c <listen_message_reliably+0x1fc>
 8018002:	bf00      	nop

08018004 <uxr_run_session_timeout>:
 8018004:	b570      	push	{r4, r5, r6, lr}
 8018006:	4604      	mov	r4, r0
 8018008:	460d      	mov	r5, r1
 801800a:	f001 fa73 	bl	80194f4 <uxr_millis>
 801800e:	4606      	mov	r6, r0
 8018010:	4620      	mov	r0, r4
 8018012:	f7ff fc77 	bl	8017904 <uxr_flash_output_streams>
 8018016:	4629      	mov	r1, r5
 8018018:	4620      	mov	r0, r4
 801801a:	f7ff feb9 	bl	8017d90 <listen_message_reliably>
 801801e:	f001 fa69 	bl	80194f4 <uxr_millis>
 8018022:	1b83      	subs	r3, r0, r6
 8018024:	1ae9      	subs	r1, r5, r3
 8018026:	2900      	cmp	r1, #0
 8018028:	dcf6      	bgt.n	8018018 <uxr_run_session_timeout+0x14>
 801802a:	f104 0008 	add.w	r0, r4, #8
 801802e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018032:	f001 ba03 	b.w	801943c <uxr_output_streams_confirmed>
 8018036:	bf00      	nop

08018038 <uxr_run_session_until_data>:
 8018038:	b570      	push	{r4, r5, r6, lr}
 801803a:	4604      	mov	r4, r0
 801803c:	460d      	mov	r5, r1
 801803e:	f001 fa59 	bl	80194f4 <uxr_millis>
 8018042:	4606      	mov	r6, r0
 8018044:	4620      	mov	r0, r4
 8018046:	f7ff fc5d 	bl	8017904 <uxr_flash_output_streams>
 801804a:	2300      	movs	r3, #0
 801804c:	4629      	mov	r1, r5
 801804e:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8018052:	e005      	b.n	8018060 <uxr_run_session_until_data+0x28>
 8018054:	f001 fa4e 	bl	80194f4 <uxr_millis>
 8018058:	1b83      	subs	r3, r0, r6
 801805a:	1ae9      	subs	r1, r5, r3
 801805c:	2900      	cmp	r1, #0
 801805e:	dd07      	ble.n	8018070 <uxr_run_session_until_data+0x38>
 8018060:	4620      	mov	r0, r4
 8018062:	f7ff fe95 	bl	8017d90 <listen_message_reliably>
 8018066:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801806a:	2800      	cmp	r0, #0
 801806c:	d0f2      	beq.n	8018054 <uxr_run_session_until_data+0x1c>
 801806e:	bd70      	pop	{r4, r5, r6, pc}
 8018070:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8018074:	bd70      	pop	{r4, r5, r6, pc}
 8018076:	bf00      	nop

08018078 <uxr_run_session_until_confirm_delivery>:
 8018078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801807c:	4606      	mov	r6, r0
 801807e:	460d      	mov	r5, r1
 8018080:	f001 fa38 	bl	80194f4 <uxr_millis>
 8018084:	4607      	mov	r7, r0
 8018086:	4630      	mov	r0, r6
 8018088:	f106 0808 	add.w	r8, r6, #8
 801808c:	f7ff fc3a 	bl	8017904 <uxr_flash_output_streams>
 8018090:	2d00      	cmp	r5, #0
 8018092:	db10      	blt.n	80180b6 <uxr_run_session_until_confirm_delivery+0x3e>
 8018094:	462c      	mov	r4, r5
 8018096:	e006      	b.n	80180a6 <uxr_run_session_until_confirm_delivery+0x2e>
 8018098:	f7ff fe7a 	bl	8017d90 <listen_message_reliably>
 801809c:	f001 fa2a 	bl	80194f4 <uxr_millis>
 80180a0:	1bc3      	subs	r3, r0, r7
 80180a2:	1aec      	subs	r4, r5, r3
 80180a4:	d407      	bmi.n	80180b6 <uxr_run_session_until_confirm_delivery+0x3e>
 80180a6:	4640      	mov	r0, r8
 80180a8:	f001 f9c8 	bl	801943c <uxr_output_streams_confirmed>
 80180ac:	4603      	mov	r3, r0
 80180ae:	4621      	mov	r1, r4
 80180b0:	4630      	mov	r0, r6
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d0f0      	beq.n	8018098 <uxr_run_session_until_confirm_delivery+0x20>
 80180b6:	4640      	mov	r0, r8
 80180b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180bc:	f001 b9be 	b.w	801943c <uxr_output_streams_confirmed>

080180c0 <uxr_run_session_until_all_status>:
 80180c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180c4:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80180c8:	4606      	mov	r6, r0
 80180ca:	4688      	mov	r8, r1
 80180cc:	4692      	mov	sl, r2
 80180ce:	461f      	mov	r7, r3
 80180d0:	f7ff fc18 	bl	8017904 <uxr_flash_output_streams>
 80180d4:	f1bb 0f00 	cmp.w	fp, #0
 80180d8:	d004      	beq.n	80180e4 <uxr_run_session_until_all_status+0x24>
 80180da:	465a      	mov	r2, fp
 80180dc:	21ff      	movs	r1, #255	@ 0xff
 80180de:	4638      	mov	r0, r7
 80180e0:	f00a f92a 	bl	8022338 <memset>
 80180e4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80180e8:	1e7d      	subs	r5, r7, #1
 80180ea:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 80180ee:	f001 fa01 	bl	80194f4 <uxr_millis>
 80180f2:	4641      	mov	r1, r8
 80180f4:	4681      	mov	r9, r0
 80180f6:	4630      	mov	r0, r6
 80180f8:	f7ff fe4a 	bl	8017d90 <listen_message_reliably>
 80180fc:	f001 f9fa 	bl	80194f4 <uxr_millis>
 8018100:	eba0 0009 	sub.w	r0, r0, r9
 8018104:	eba8 0100 	sub.w	r1, r8, r0
 8018108:	f1bb 0f00 	cmp.w	fp, #0
 801810c:	d029      	beq.n	8018162 <uxr_run_session_until_all_status+0xa2>
 801810e:	46ae      	mov	lr, r5
 8018110:	f04f 0c00 	mov.w	ip, #0
 8018114:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018118:	2cff      	cmp	r4, #255	@ 0xff
 801811a:	d015      	beq.n	8018148 <uxr_run_session_until_all_status+0x88>
 801811c:	f10c 0c01 	add.w	ip, ip, #1
 8018120:	45e3      	cmp	fp, ip
 8018122:	d8f7      	bhi.n	8018114 <uxr_run_session_until_all_status+0x54>
 8018124:	2300      	movs	r3, #0
 8018126:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8018128:	e000      	b.n	801812c <uxr_run_session_until_all_status+0x6c>
 801812a:	b158      	cbz	r0, 8018144 <uxr_run_session_until_all_status+0x84>
 801812c:	462b      	mov	r3, r5
 801812e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8018132:	3302      	adds	r3, #2
 8018134:	2801      	cmp	r0, #1
 8018136:	eba3 0307 	sub.w	r3, r3, r7
 801813a:	bf8c      	ite	hi
 801813c:	2000      	movhi	r0, #0
 801813e:	2001      	movls	r0, #1
 8018140:	459b      	cmp	fp, r3
 8018142:	d8f2      	bhi.n	801812a <uxr_run_session_until_all_status+0x6a>
 8018144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018148:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801814c:	f10c 0c01 	add.w	ip, ip, #1
 8018150:	45dc      	cmp	ip, fp
 8018152:	d201      	bcs.n	8018158 <uxr_run_session_until_all_status+0x98>
 8018154:	2b00      	cmp	r3, #0
 8018156:	d0dd      	beq.n	8018114 <uxr_run_session_until_all_status+0x54>
 8018158:	2900      	cmp	r1, #0
 801815a:	dde3      	ble.n	8018124 <uxr_run_session_until_all_status+0x64>
 801815c:	2b00      	cmp	r3, #0
 801815e:	d1ca      	bne.n	80180f6 <uxr_run_session_until_all_status+0x36>
 8018160:	e7e0      	b.n	8018124 <uxr_run_session_until_all_status+0x64>
 8018162:	2001      	movs	r0, #1
 8018164:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801816c:	0000      	movs	r0, r0
	...

08018170 <uxr_sync_session>:
 8018170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018172:	b093      	sub	sp, #76	@ 0x4c
 8018174:	4604      	mov	r4, r0
 8018176:	460d      	mov	r5, r1
 8018178:	f000 fb82 	bl	8018880 <uxr_session_header_offset>
 801817c:	2214      	movs	r2, #20
 801817e:	2300      	movs	r3, #0
 8018180:	9000      	str	r0, [sp, #0]
 8018182:	a80a      	add	r0, sp, #40	@ 0x28
 8018184:	eb0d 0102 	add.w	r1, sp, r2
 8018188:	f7fb ffea 	bl	8014160 <ucdr_init_buffer_origin_offset>
 801818c:	2300      	movs	r3, #0
 801818e:	2208      	movs	r2, #8
 8018190:	210e      	movs	r1, #14
 8018192:	a80a      	add	r0, sp, #40	@ 0x28
 8018194:	f001 f968 	bl	8019468 <uxr_buffer_submessage_header>
 8018198:	f001 f9c8 	bl	801952c <uxr_nanos>
 801819c:	460e      	mov	r6, r1
 801819e:	4607      	mov	r7, r0
 80181a0:	a31b      	add	r3, pc, #108	@ (adr r3, 8018210 <uxr_sync_session+0xa0>)
 80181a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181a6:	f7e8 f903 	bl	80003b0 <__aeabi_ldivmod>
 80181aa:	4631      	mov	r1, r6
 80181ac:	9003      	str	r0, [sp, #12]
 80181ae:	4638      	mov	r0, r7
 80181b0:	a317      	add	r3, pc, #92	@ (adr r3, 8018210 <uxr_sync_session+0xa0>)
 80181b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181b6:	f7e8 f8fb 	bl	80003b0 <__aeabi_ldivmod>
 80181ba:	a903      	add	r1, sp, #12
 80181bc:	a80a      	add	r0, sp, #40	@ 0x28
 80181be:	9204      	str	r2, [sp, #16]
 80181c0:	f002 fbaa 	bl	801a918 <uxr_serialize_TIMESTAMP_Payload>
 80181c4:	2200      	movs	r2, #0
 80181c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80181c8:	4620      	mov	r0, r4
 80181ca:	4611      	mov	r1, r2
 80181cc:	f000 fb04 	bl	80187d8 <uxr_stamp_session_header>
 80181d0:	a80a      	add	r0, sp, #40	@ 0x28
 80181d2:	f7fc f805 	bl	80141e0 <ucdr_buffer_length>
 80181d6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80181d8:	4602      	mov	r2, r0
 80181da:	a905      	add	r1, sp, #20
 80181dc:	e9d3 0600 	ldrd	r0, r6, [r3]
 80181e0:	47b0      	blx	r6
 80181e2:	f001 f987 	bl	80194f4 <uxr_millis>
 80181e6:	2300      	movs	r3, #0
 80181e8:	4606      	mov	r6, r0
 80181ea:	4629      	mov	r1, r5
 80181ec:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80181f0:	e000      	b.n	80181f4 <uxr_sync_session+0x84>
 80181f2:	b950      	cbnz	r0, 801820a <uxr_sync_session+0x9a>
 80181f4:	4620      	mov	r0, r4
 80181f6:	f7ff fdcb 	bl	8017d90 <listen_message_reliably>
 80181fa:	f001 f97b 	bl	80194f4 <uxr_millis>
 80181fe:	1b83      	subs	r3, r0, r6
 8018200:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8018204:	1ae9      	subs	r1, r5, r3
 8018206:	2900      	cmp	r1, #0
 8018208:	dcf3      	bgt.n	80181f2 <uxr_sync_session+0x82>
 801820a:	b013      	add	sp, #76	@ 0x4c
 801820c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801820e:	bf00      	nop
 8018210:	3b9aca00 	.word	0x3b9aca00
 8018214:	00000000 	.word	0x00000000

08018218 <uxr_run_session_until_pong>:
 8018218:	b570      	push	{r4, r5, r6, lr}
 801821a:	4604      	mov	r4, r0
 801821c:	460d      	mov	r5, r1
 801821e:	f001 f969 	bl	80194f4 <uxr_millis>
 8018222:	4606      	mov	r6, r0
 8018224:	4620      	mov	r0, r4
 8018226:	f7ff fb6d 	bl	8017904 <uxr_flash_output_streams>
 801822a:	2300      	movs	r3, #0
 801822c:	4629      	mov	r1, r5
 801822e:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8018232:	e005      	b.n	8018240 <uxr_run_session_until_pong+0x28>
 8018234:	f001 f95e 	bl	80194f4 <uxr_millis>
 8018238:	1b83      	subs	r3, r0, r6
 801823a:	1ae9      	subs	r1, r5, r3
 801823c:	2900      	cmp	r1, #0
 801823e:	dd0c      	ble.n	801825a <uxr_run_session_until_pong+0x42>
 8018240:	4620      	mov	r0, r4
 8018242:	f7ff fda5 	bl	8017d90 <listen_message_reliably>
 8018246:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 801824a:	2800      	cmp	r0, #0
 801824c:	d0f2      	beq.n	8018234 <uxr_run_session_until_pong+0x1c>
 801824e:	f1a0 0001 	sub.w	r0, r0, #1
 8018252:	fab0 f080 	clz	r0, r0
 8018256:	0940      	lsrs	r0, r0, #5
 8018258:	bd70      	pop	{r4, r5, r6, pc}
 801825a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 801825e:	f1a0 0001 	sub.w	r0, r0, #1
 8018262:	fab0 f080 	clz	r0, r0
 8018266:	0940      	lsrs	r0, r0, #5
 8018268:	bd70      	pop	{r4, r5, r6, pc}
 801826a:	bf00      	nop

0801826c <wait_session_status>:
 801826c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018270:	4604      	mov	r4, r0
 8018272:	b09d      	sub	sp, #116	@ 0x74
 8018274:	20ff      	movs	r0, #255	@ 0xff
 8018276:	9303      	str	r3, [sp, #12]
 8018278:	7160      	strb	r0, [r4, #5]
 801827a:	2b00      	cmp	r3, #0
 801827c:	f000 80b6 	beq.w	80183ec <wait_session_status+0x180>
 8018280:	4689      	mov	r9, r1
 8018282:	4692      	mov	sl, r2
 8018284:	f04f 0b00 	mov.w	fp, #0
 8018288:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801828a:	4652      	mov	r2, sl
 801828c:	4649      	mov	r1, r9
 801828e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018292:	47a8      	blx	r5
 8018294:	f001 f92e 	bl	80194f4 <uxr_millis>
 8018298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801829c:	4605      	mov	r5, r0
 801829e:	e009      	b.n	80182b4 <wait_session_status+0x48>
 80182a0:	f001 f928 	bl	80194f4 <uxr_millis>
 80182a4:	1b40      	subs	r0, r0, r5
 80182a6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	dd40      	ble.n	8018330 <wait_session_status+0xc4>
 80182ae:	7960      	ldrb	r0, [r4, #5]
 80182b0:	28ff      	cmp	r0, #255	@ 0xff
 80182b2:	d145      	bne.n	8018340 <wait_session_status+0xd4>
 80182b4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80182b6:	a908      	add	r1, sp, #32
 80182b8:	6896      	ldr	r6, [r2, #8]
 80182ba:	6810      	ldr	r0, [r2, #0]
 80182bc:	aa09      	add	r2, sp, #36	@ 0x24
 80182be:	47b0      	blx	r6
 80182c0:	2800      	cmp	r0, #0
 80182c2:	d0ed      	beq.n	80182a0 <wait_session_status+0x34>
 80182c4:	a80c      	add	r0, sp, #48	@ 0x30
 80182c6:	2600      	movs	r6, #0
 80182c8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80182cc:	f7fb ff5a 	bl	8014184 <ucdr_init_buffer>
 80182d0:	f10d 031e 	add.w	r3, sp, #30
 80182d4:	aa07      	add	r2, sp, #28
 80182d6:	a90c      	add	r1, sp, #48	@ 0x30
 80182d8:	4620      	mov	r0, r4
 80182da:	f88d 601c 	strb.w	r6, [sp, #28]
 80182de:	f000 fa8f 	bl	8018800 <uxr_read_session_header>
 80182e2:	2800      	cmp	r0, #0
 80182e4:	d0dc      	beq.n	80182a0 <wait_session_status+0x34>
 80182e6:	4631      	mov	r1, r6
 80182e8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80182ec:	f000 ffac 	bl	8019248 <uxr_stream_id_from_raw>
 80182f0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80182f4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80182f8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80182fc:	2f01      	cmp	r7, #1
 80182fe:	9302      	str	r3, [sp, #8]
 8018300:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8018304:	d05c      	beq.n	80183c0 <wait_session_status+0x154>
 8018306:	2f02      	cmp	r7, #2
 8018308:	d020      	beq.n	801834c <wait_session_status+0xe0>
 801830a:	2f00      	cmp	r7, #0
 801830c:	d1c8      	bne.n	80182a0 <wait_session_status+0x34>
 801830e:	4639      	mov	r1, r7
 8018310:	4638      	mov	r0, r7
 8018312:	f000 ff99 	bl	8019248 <uxr_stream_id_from_raw>
 8018316:	a90c      	add	r1, sp, #48	@ 0x30
 8018318:	4602      	mov	r2, r0
 801831a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801831c:	4620      	mov	r0, r4
 801831e:	f7ff fbad 	bl	8017a7c <read_submessage_list>
 8018322:	f001 f8e7 	bl	80194f4 <uxr_millis>
 8018326:	1b40      	subs	r0, r0, r5
 8018328:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801832c:	2b00      	cmp	r3, #0
 801832e:	dcbe      	bgt.n	80182ae <wait_session_status+0x42>
 8018330:	f10b 0b01 	add.w	fp, fp, #1
 8018334:	9b03      	ldr	r3, [sp, #12]
 8018336:	7960      	ldrb	r0, [r4, #5]
 8018338:	455b      	cmp	r3, fp
 801833a:	d001      	beq.n	8018340 <wait_session_status+0xd4>
 801833c:	28ff      	cmp	r0, #255	@ 0xff
 801833e:	d0a3      	beq.n	8018288 <wait_session_status+0x1c>
 8018340:	38ff      	subs	r0, #255	@ 0xff
 8018342:	bf18      	it	ne
 8018344:	2001      	movne	r0, #1
 8018346:	b01d      	add	sp, #116	@ 0x74
 8018348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801834c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8018350:	4631      	mov	r1, r6
 8018352:	f104 0008 	add.w	r0, r4, #8
 8018356:	9304      	str	r3, [sp, #16]
 8018358:	f001 f864 	bl	8019424 <uxr_get_input_reliable_stream>
 801835c:	4680      	mov	r8, r0
 801835e:	b348      	cbz	r0, 80183b4 <wait_session_status+0x148>
 8018360:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018362:	a80c      	add	r0, sp, #48	@ 0x30
 8018364:	9205      	str	r2, [sp, #20]
 8018366:	f7fb ff3f 	bl	80141e8 <ucdr_buffer_remaining>
 801836a:	4603      	mov	r3, r0
 801836c:	f10d 001d 	add.w	r0, sp, #29
 8018370:	9a05      	ldr	r2, [sp, #20]
 8018372:	9000      	str	r0, [sp, #0]
 8018374:	4640      	mov	r0, r8
 8018376:	9902      	ldr	r1, [sp, #8]
 8018378:	f007 ffde 	bl	8020338 <uxr_receive_reliable_message>
 801837c:	b1d0      	cbz	r0, 80183b4 <wait_session_status+0x148>
 801837e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d03a      	beq.n	80183fc <wait_session_status+0x190>
 8018386:	9f04      	ldr	r7, [sp, #16]
 8018388:	e00a      	b.n	80183a0 <wait_session_status+0x134>
 801838a:	f04f 0302 	mov.w	r3, #2
 801838e:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8018392:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8018396:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801839a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801839c:	f7ff fb6e 	bl	8017a7c <read_submessage_list>
 80183a0:	a914      	add	r1, sp, #80	@ 0x50
 80183a2:	2204      	movs	r2, #4
 80183a4:	4640      	mov	r0, r8
 80183a6:	f008 f849 	bl	802043c <uxr_next_input_reliable_buffer_available>
 80183aa:	4603      	mov	r3, r0
 80183ac:	a914      	add	r1, sp, #80	@ 0x50
 80183ae:	4620      	mov	r0, r4
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d1ea      	bne.n	801838a <wait_session_status+0x11e>
 80183b4:	4632      	mov	r2, r6
 80183b6:	9904      	ldr	r1, [sp, #16]
 80183b8:	4620      	mov	r0, r4
 80183ba:	f7ff f9d9 	bl	8017770 <write_submessage_acknack.isra.0>
 80183be:	e76f      	b.n	80182a0 <wait_session_status+0x34>
 80183c0:	4631      	mov	r1, r6
 80183c2:	f104 0008 	add.w	r0, r4, #8
 80183c6:	f001 f823 	bl	8019410 <uxr_get_input_best_effort_stream>
 80183ca:	2800      	cmp	r0, #0
 80183cc:	f43f af68 	beq.w	80182a0 <wait_session_status+0x34>
 80183d0:	9902      	ldr	r1, [sp, #8]
 80183d2:	f007 ff27 	bl	8020224 <uxr_receive_best_effort_message>
 80183d6:	2800      	cmp	r0, #0
 80183d8:	f43f af62 	beq.w	80182a0 <wait_session_status+0x34>
 80183dc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80183e0:	a90c      	add	r1, sp, #48	@ 0x30
 80183e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80183e4:	4620      	mov	r0, r4
 80183e6:	f7ff fb49 	bl	8017a7c <read_submessage_list>
 80183ea:	e759      	b.n	80182a0 <wait_session_status+0x34>
 80183ec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80183ee:	e9d3 0400 	ldrd	r0, r4, [r3]
 80183f2:	47a0      	blx	r4
 80183f4:	2001      	movs	r0, #1
 80183f6:	b01d      	add	sp, #116	@ 0x74
 80183f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183fc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018400:	a90c      	add	r1, sp, #48	@ 0x30
 8018402:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018404:	4620      	mov	r0, r4
 8018406:	f7ff fb39 	bl	8017a7c <read_submessage_list>
 801840a:	e7bc      	b.n	8018386 <wait_session_status+0x11a>

0801840c <uxr_delete_session_retries>:
 801840c:	b530      	push	{r4, r5, lr}
 801840e:	b08f      	sub	sp, #60	@ 0x3c
 8018410:	4604      	mov	r4, r0
 8018412:	460d      	mov	r5, r1
 8018414:	f000 fa34 	bl	8018880 <uxr_session_header_offset>
 8018418:	2300      	movs	r3, #0
 801841a:	2210      	movs	r2, #16
 801841c:	a902      	add	r1, sp, #8
 801841e:	9000      	str	r0, [sp, #0]
 8018420:	a806      	add	r0, sp, #24
 8018422:	f7fb fe9d 	bl	8014160 <ucdr_init_buffer_origin_offset>
 8018426:	a906      	add	r1, sp, #24
 8018428:	4620      	mov	r0, r4
 801842a:	f000 f979 	bl	8018720 <uxr_buffer_delete_session>
 801842e:	2200      	movs	r2, #0
 8018430:	9b06      	ldr	r3, [sp, #24]
 8018432:	4620      	mov	r0, r4
 8018434:	4611      	mov	r1, r2
 8018436:	f000 f9cf 	bl	80187d8 <uxr_stamp_session_header>
 801843a:	a806      	add	r0, sp, #24
 801843c:	f7fb fed0 	bl	80141e0 <ucdr_buffer_length>
 8018440:	462b      	mov	r3, r5
 8018442:	4602      	mov	r2, r0
 8018444:	a902      	add	r1, sp, #8
 8018446:	4620      	mov	r0, r4
 8018448:	f7ff ff10 	bl	801826c <wait_session_status>
 801844c:	b118      	cbz	r0, 8018456 <uxr_delete_session_retries+0x4a>
 801844e:	7960      	ldrb	r0, [r4, #5]
 8018450:	fab0 f080 	clz	r0, r0
 8018454:	0940      	lsrs	r0, r0, #5
 8018456:	b00f      	add	sp, #60	@ 0x3c
 8018458:	bd30      	pop	{r4, r5, pc}
 801845a:	bf00      	nop

0801845c <uxr_create_session>:
 801845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018460:	f100 0b08 	add.w	fp, r0, #8
 8018464:	4604      	mov	r4, r0
 8018466:	b0ab      	sub	sp, #172	@ 0xac
 8018468:	4658      	mov	r0, fp
 801846a:	465e      	mov	r6, fp
 801846c:	f000 ff22 	bl	80192b4 <uxr_reset_stream_storage>
 8018470:	4620      	mov	r0, r4
 8018472:	f000 fa05 	bl	8018880 <uxr_session_header_offset>
 8018476:	2300      	movs	r3, #0
 8018478:	221c      	movs	r2, #28
 801847a:	a90b      	add	r1, sp, #44	@ 0x2c
 801847c:	9000      	str	r0, [sp, #0]
 801847e:	a812      	add	r0, sp, #72	@ 0x48
 8018480:	f7fb fe6e 	bl	8014160 <ucdr_init_buffer_origin_offset>
 8018484:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018486:	a912      	add	r1, sp, #72	@ 0x48
 8018488:	4620      	mov	r0, r4
 801848a:	8a1a      	ldrh	r2, [r3, #16]
 801848c:	3a04      	subs	r2, #4
 801848e:	b292      	uxth	r2, r2
 8018490:	f000 f91c 	bl	80186cc <uxr_buffer_create_session>
 8018494:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018496:	4620      	mov	r0, r4
 8018498:	f000 f98a 	bl	80187b0 <uxr_stamp_create_session_header>
 801849c:	a812      	add	r0, sp, #72	@ 0x48
 801849e:	f7fb fe9f 	bl	80141e0 <ucdr_buffer_length>
 80184a2:	23ff      	movs	r3, #255	@ 0xff
 80184a4:	4681      	mov	r9, r0
 80184a6:	7163      	strb	r3, [r4, #5]
 80184a8:	230a      	movs	r3, #10
 80184aa:	9303      	str	r3, [sp, #12]
 80184ac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80184ae:	464a      	mov	r2, r9
 80184b0:	a90b      	add	r1, sp, #44	@ 0x2c
 80184b2:	e9d3 0500 	ldrd	r0, r5, [r3]
 80184b6:	47a8      	blx	r5
 80184b8:	f001 f81c 	bl	80194f4 <uxr_millis>
 80184bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80184c0:	4605      	mov	r5, r0
 80184c2:	e009      	b.n	80184d8 <uxr_create_session+0x7c>
 80184c4:	f001 f816 	bl	80194f4 <uxr_millis>
 80184c8:	1b40      	subs	r0, r0, r5
 80184ca:	7962      	ldrb	r2, [r4, #5]
 80184cc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	dd38      	ble.n	8018546 <uxr_create_session+0xea>
 80184d4:	2aff      	cmp	r2, #255	@ 0xff
 80184d6:	d13c      	bne.n	8018552 <uxr_create_session+0xf6>
 80184d8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80184da:	a907      	add	r1, sp, #28
 80184dc:	6897      	ldr	r7, [r2, #8]
 80184de:	6810      	ldr	r0, [r2, #0]
 80184e0:	aa08      	add	r2, sp, #32
 80184e2:	47b8      	blx	r7
 80184e4:	2800      	cmp	r0, #0
 80184e6:	d0ed      	beq.n	80184c4 <uxr_create_session+0x68>
 80184e8:	a81a      	add	r0, sp, #104	@ 0x68
 80184ea:	2700      	movs	r7, #0
 80184ec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80184f0:	f7fb fe48 	bl	8014184 <ucdr_init_buffer>
 80184f4:	f10d 031a 	add.w	r3, sp, #26
 80184f8:	aa06      	add	r2, sp, #24
 80184fa:	a91a      	add	r1, sp, #104	@ 0x68
 80184fc:	4620      	mov	r0, r4
 80184fe:	f88d 7018 	strb.w	r7, [sp, #24]
 8018502:	f000 f97d 	bl	8018800 <uxr_read_session_header>
 8018506:	2800      	cmp	r0, #0
 8018508:	d0dc      	beq.n	80184c4 <uxr_create_session+0x68>
 801850a:	4639      	mov	r1, r7
 801850c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018510:	f000 fe9a 	bl	8019248 <uxr_stream_id_from_raw>
 8018514:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018518:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801851c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018520:	2f01      	cmp	r7, #1
 8018522:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8018526:	d053      	beq.n	80185d0 <uxr_create_session+0x174>
 8018528:	2f02      	cmp	r7, #2
 801852a:	d018      	beq.n	801855e <uxr_create_session+0x102>
 801852c:	2f00      	cmp	r7, #0
 801852e:	d1c9      	bne.n	80184c4 <uxr_create_session+0x68>
 8018530:	4639      	mov	r1, r7
 8018532:	4638      	mov	r0, r7
 8018534:	f000 fe88 	bl	8019248 <uxr_stream_id_from_raw>
 8018538:	a91a      	add	r1, sp, #104	@ 0x68
 801853a:	4602      	mov	r2, r0
 801853c:	900a      	str	r0, [sp, #40]	@ 0x28
 801853e:	4620      	mov	r0, r4
 8018540:	f7ff fa9c 	bl	8017a7c <read_submessage_list>
 8018544:	e7be      	b.n	80184c4 <uxr_create_session+0x68>
 8018546:	9b03      	ldr	r3, [sp, #12]
 8018548:	3b01      	subs	r3, #1
 801854a:	9303      	str	r3, [sp, #12]
 801854c:	d001      	beq.n	8018552 <uxr_create_session+0xf6>
 801854e:	2aff      	cmp	r2, #255	@ 0xff
 8018550:	d0ac      	beq.n	80184ac <uxr_create_session+0x50>
 8018552:	2a00      	cmp	r2, #0
 8018554:	d051      	beq.n	80185fa <uxr_create_session+0x19e>
 8018556:	2000      	movs	r0, #0
 8018558:	b02b      	add	sp, #172	@ 0xac
 801855a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801855e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8018562:	4641      	mov	r1, r8
 8018564:	4630      	mov	r0, r6
 8018566:	9304      	str	r3, [sp, #16]
 8018568:	f000 ff5c 	bl	8019424 <uxr_get_input_reliable_stream>
 801856c:	4682      	mov	sl, r0
 801856e:	b348      	cbz	r0, 80185c4 <uxr_create_session+0x168>
 8018570:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018572:	a81a      	add	r0, sp, #104	@ 0x68
 8018574:	9205      	str	r2, [sp, #20]
 8018576:	f7fb fe37 	bl	80141e8 <ucdr_buffer_remaining>
 801857a:	4603      	mov	r3, r0
 801857c:	f10d 0019 	add.w	r0, sp, #25
 8018580:	9a05      	ldr	r2, [sp, #20]
 8018582:	4659      	mov	r1, fp
 8018584:	9000      	str	r0, [sp, #0]
 8018586:	4650      	mov	r0, sl
 8018588:	f007 fed6 	bl	8020338 <uxr_receive_reliable_message>
 801858c:	b1d0      	cbz	r0, 80185c4 <uxr_create_session+0x168>
 801858e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d038      	beq.n	8018608 <uxr_create_session+0x1ac>
 8018596:	9f04      	ldr	r7, [sp, #16]
 8018598:	e00a      	b.n	80185b0 <uxr_create_session+0x154>
 801859a:	f04f 0302 	mov.w	r3, #2
 801859e:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 80185a2:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 80185a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80185aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80185ac:	f7ff fa66 	bl	8017a7c <read_submessage_list>
 80185b0:	a922      	add	r1, sp, #136	@ 0x88
 80185b2:	2204      	movs	r2, #4
 80185b4:	4650      	mov	r0, sl
 80185b6:	f007 ff41 	bl	802043c <uxr_next_input_reliable_buffer_available>
 80185ba:	4603      	mov	r3, r0
 80185bc:	a922      	add	r1, sp, #136	@ 0x88
 80185be:	4620      	mov	r0, r4
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d1ea      	bne.n	801859a <uxr_create_session+0x13e>
 80185c4:	4642      	mov	r2, r8
 80185c6:	9904      	ldr	r1, [sp, #16]
 80185c8:	4620      	mov	r0, r4
 80185ca:	f7ff f8d1 	bl	8017770 <write_submessage_acknack.isra.0>
 80185ce:	e779      	b.n	80184c4 <uxr_create_session+0x68>
 80185d0:	4641      	mov	r1, r8
 80185d2:	4630      	mov	r0, r6
 80185d4:	f000 ff1c 	bl	8019410 <uxr_get_input_best_effort_stream>
 80185d8:	2800      	cmp	r0, #0
 80185da:	f43f af73 	beq.w	80184c4 <uxr_create_session+0x68>
 80185de:	4659      	mov	r1, fp
 80185e0:	f007 fe20 	bl	8020224 <uxr_receive_best_effort_message>
 80185e4:	2800      	cmp	r0, #0
 80185e6:	f43f af6d 	beq.w	80184c4 <uxr_create_session+0x68>
 80185ea:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80185ee:	a91a      	add	r1, sp, #104	@ 0x68
 80185f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80185f2:	4620      	mov	r0, r4
 80185f4:	f7ff fa42 	bl	8017a7c <read_submessage_list>
 80185f8:	e764      	b.n	80184c4 <uxr_create_session+0x68>
 80185fa:	4630      	mov	r0, r6
 80185fc:	f000 fe5a 	bl	80192b4 <uxr_reset_stream_storage>
 8018600:	2001      	movs	r0, #1
 8018602:	b02b      	add	sp, #172	@ 0xac
 8018604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018608:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801860c:	a91a      	add	r1, sp, #104	@ 0x68
 801860e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018610:	4620      	mov	r0, r4
 8018612:	f7ff fa33 	bl	8017a7c <read_submessage_list>
 8018616:	e7be      	b.n	8018596 <uxr_create_session+0x13a>

08018618 <uxr_prepare_stream_to_write_submessage>:
 8018618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801861c:	b082      	sub	sp, #8
 801861e:	4604      	mov	r4, r0
 8018620:	4610      	mov	r0, r2
 8018622:	4615      	mov	r5, r2
 8018624:	461e      	mov	r6, r3
 8018626:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801862a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801862e:	f105 0904 	add.w	r9, r5, #4
 8018632:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8018636:	9101      	str	r1, [sp, #4]
 8018638:	f000 ff56 	bl	80194e8 <uxr_submessage_padding>
 801863c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018640:	4481      	add	r9, r0
 8018642:	2b01      	cmp	r3, #1
 8018644:	d01d      	beq.n	8018682 <uxr_prepare_stream_to_write_submessage+0x6a>
 8018646:	2b02      	cmp	r3, #2
 8018648:	d116      	bne.n	8018678 <uxr_prepare_stream_to_write_submessage+0x60>
 801864a:	f104 0008 	add.w	r0, r4, #8
 801864e:	4651      	mov	r1, sl
 8018650:	f000 fed2 	bl	80193f8 <uxr_get_output_reliable_stream>
 8018654:	4604      	mov	r4, r0
 8018656:	b158      	cbz	r0, 8018670 <uxr_prepare_stream_to_write_submessage+0x58>
 8018658:	4649      	mov	r1, r9
 801865a:	4632      	mov	r2, r6
 801865c:	f008 f8b2 	bl	80207c4 <uxr_prepare_reliable_buffer_to_write>
 8018660:	4604      	mov	r4, r0
 8018662:	b12c      	cbz	r4, 8018670 <uxr_prepare_stream_to_write_submessage+0x58>
 8018664:	4643      	mov	r3, r8
 8018666:	b2aa      	uxth	r2, r5
 8018668:	4639      	mov	r1, r7
 801866a:	4630      	mov	r0, r6
 801866c:	f000 fefc 	bl	8019468 <uxr_buffer_submessage_header>
 8018670:	4620      	mov	r0, r4
 8018672:	b002      	add	sp, #8
 8018674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018678:	2400      	movs	r4, #0
 801867a:	4620      	mov	r0, r4
 801867c:	b002      	add	sp, #8
 801867e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018682:	f104 0008 	add.w	r0, r4, #8
 8018686:	4651      	mov	r1, sl
 8018688:	f000 feae 	bl	80193e8 <uxr_get_output_best_effort_stream>
 801868c:	4604      	mov	r4, r0
 801868e:	2800      	cmp	r0, #0
 8018690:	d0ee      	beq.n	8018670 <uxr_prepare_stream_to_write_submessage+0x58>
 8018692:	4649      	mov	r1, r9
 8018694:	4632      	mov	r2, r6
 8018696:	f007 ffc1 	bl	802061c <uxr_prepare_best_effort_buffer_to_write>
 801869a:	4604      	mov	r4, r0
 801869c:	e7e1      	b.n	8018662 <uxr_prepare_stream_to_write_submessage+0x4a>
 801869e:	bf00      	nop

080186a0 <uxr_init_session_info>:
 80186a0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80186a4:	23ff      	movs	r3, #255	@ 0xff
 80186a6:	7102      	strb	r2, [r0, #4]
 80186a8:	f880 c001 	strb.w	ip, [r0, #1]
 80186ac:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80186b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80186b4:	7001      	strb	r1, [r0, #0]
 80186b6:	f880 c002 	strb.w	ip, [r0, #2]
 80186ba:	7143      	strb	r3, [r0, #5]
 80186bc:	70c2      	strb	r2, [r0, #3]
 80186be:	b500      	push	{lr}
 80186c0:	f04f 0e09 	mov.w	lr, #9
 80186c4:	f8a0 e006 	strh.w	lr, [r0, #6]
 80186c8:	f85d fb04 	ldr.w	pc, [sp], #4

080186cc <uxr_buffer_create_session>:
 80186cc:	b530      	push	{r4, r5, lr}
 80186ce:	2300      	movs	r3, #0
 80186d0:	b089      	sub	sp, #36	@ 0x24
 80186d2:	4d12      	ldr	r5, [pc, #72]	@ (801871c <uxr_buffer_create_session+0x50>)
 80186d4:	460c      	mov	r4, r1
 80186d6:	9307      	str	r3, [sp, #28]
 80186d8:	4619      	mov	r1, r3
 80186da:	f8ad 201c 	strh.w	r2, [sp, #28]
 80186de:	2201      	movs	r2, #1
 80186e0:	9301      	str	r3, [sp, #4]
 80186e2:	80c2      	strh	r2, [r0, #6]
 80186e4:	f88d 2004 	strb.w	r2, [sp, #4]
 80186e8:	682a      	ldr	r2, [r5, #0]
 80186ea:	9303      	str	r3, [sp, #12]
 80186ec:	9200      	str	r2, [sp, #0]
 80186ee:	88aa      	ldrh	r2, [r5, #4]
 80186f0:	9306      	str	r3, [sp, #24]
 80186f2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80186f6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80186fa:	9202      	str	r2, [sp, #8]
 80186fc:	7802      	ldrb	r2, [r0, #0]
 80186fe:	4620      	mov	r0, r4
 8018700:	f88d 200c 	strb.w	r2, [sp, #12]
 8018704:	2210      	movs	r2, #16
 8018706:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801870a:	f000 fead 	bl	8019468 <uxr_buffer_submessage_header>
 801870e:	4669      	mov	r1, sp
 8018710:	4620      	mov	r0, r4
 8018712:	f001 ff1f 	bl	801a554 <uxr_serialize_CREATE_CLIENT_Payload>
 8018716:	b009      	add	sp, #36	@ 0x24
 8018718:	bd30      	pop	{r4, r5, pc}
 801871a:	bf00      	nop
 801871c:	080234a0 	.word	0x080234a0

08018720 <uxr_buffer_delete_session>:
 8018720:	4a0c      	ldr	r2, [pc, #48]	@ (8018754 <uxr_buffer_delete_session+0x34>)
 8018722:	2302      	movs	r3, #2
 8018724:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8018728:	b510      	push	{r4, lr}
 801872a:	460c      	mov	r4, r1
 801872c:	b082      	sub	sp, #8
 801872e:	8911      	ldrh	r1, [r2, #8]
 8018730:	2204      	movs	r2, #4
 8018732:	80c3      	strh	r3, [r0, #6]
 8018734:	2300      	movs	r3, #0
 8018736:	f8ad 1006 	strh.w	r1, [sp, #6]
 801873a:	4620      	mov	r0, r4
 801873c:	2103      	movs	r1, #3
 801873e:	f8ad c004 	strh.w	ip, [sp, #4]
 8018742:	f000 fe91 	bl	8019468 <uxr_buffer_submessage_header>
 8018746:	a901      	add	r1, sp, #4
 8018748:	4620      	mov	r0, r4
 801874a:	f001 ffc1 	bl	801a6d0 <uxr_serialize_DELETE_Payload>
 801874e:	b002      	add	sp, #8
 8018750:	bd10      	pop	{r4, pc}
 8018752:	bf00      	nop
 8018754:	080234a0 	.word	0x080234a0

08018758 <uxr_read_create_session_status>:
 8018758:	b510      	push	{r4, lr}
 801875a:	460b      	mov	r3, r1
 801875c:	b088      	sub	sp, #32
 801875e:	4604      	mov	r4, r0
 8018760:	a901      	add	r1, sp, #4
 8018762:	4618      	mov	r0, r3
 8018764:	f001 ffc4 	bl	801a6f0 <uxr_deserialize_STATUS_AGENT_Payload>
 8018768:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801876c:	7163      	strb	r3, [r4, #5]
 801876e:	b008      	add	sp, #32
 8018770:	bd10      	pop	{r4, pc}
 8018772:	bf00      	nop

08018774 <uxr_read_delete_session_status>:
 8018774:	b510      	push	{r4, lr}
 8018776:	b084      	sub	sp, #16
 8018778:	4604      	mov	r4, r0
 801877a:	4608      	mov	r0, r1
 801877c:	a902      	add	r1, sp, #8
 801877e:	f001 ffe7 	bl	801a750 <uxr_deserialize_STATUS_Payload>
 8018782:	88e3      	ldrh	r3, [r4, #6]
 8018784:	2b02      	cmp	r3, #2
 8018786:	d001      	beq.n	801878c <uxr_read_delete_session_status+0x18>
 8018788:	b004      	add	sp, #16
 801878a:	bd10      	pop	{r4, pc}
 801878c:	f10d 000a 	add.w	r0, sp, #10
 8018790:	f7fe fe70 	bl	8017474 <uxr_object_id_from_raw>
 8018794:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8018798:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801879c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80187a0:	b29b      	uxth	r3, r3
 80187a2:	2b02      	cmp	r3, #2
 80187a4:	d1f0      	bne.n	8018788 <uxr_read_delete_session_status+0x14>
 80187a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80187aa:	7163      	strb	r3, [r4, #5]
 80187ac:	e7ec      	b.n	8018788 <uxr_read_delete_session_status+0x14>
 80187ae:	bf00      	nop

080187b0 <uxr_stamp_create_session_header>:
 80187b0:	b510      	push	{r4, lr}
 80187b2:	2208      	movs	r2, #8
 80187b4:	b08a      	sub	sp, #40	@ 0x28
 80187b6:	4604      	mov	r4, r0
 80187b8:	eb0d 0002 	add.w	r0, sp, r2
 80187bc:	f7fb fce2 	bl	8014184 <ucdr_init_buffer>
 80187c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187c4:	2300      	movs	r3, #0
 80187c6:	a802      	add	r0, sp, #8
 80187c8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80187cc:	9400      	str	r4, [sp, #0]
 80187ce:	461a      	mov	r2, r3
 80187d0:	f001 f846 	bl	8019860 <uxr_serialize_message_header>
 80187d4:	b00a      	add	sp, #40	@ 0x28
 80187d6:	bd10      	pop	{r4, pc}

080187d8 <uxr_stamp_session_header>:
 80187d8:	b530      	push	{r4, r5, lr}
 80187da:	b08d      	sub	sp, #52	@ 0x34
 80187dc:	4604      	mov	r4, r0
 80187de:	460d      	mov	r5, r1
 80187e0:	4619      	mov	r1, r3
 80187e2:	a804      	add	r0, sp, #16
 80187e4:	9203      	str	r2, [sp, #12]
 80187e6:	2208      	movs	r2, #8
 80187e8:	f7fb fccc 	bl	8014184 <ucdr_init_buffer>
 80187ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187f0:	9b03      	ldr	r3, [sp, #12]
 80187f2:	462a      	mov	r2, r5
 80187f4:	a804      	add	r0, sp, #16
 80187f6:	9400      	str	r4, [sp, #0]
 80187f8:	f001 f832 	bl	8019860 <uxr_serialize_message_header>
 80187fc:	b00d      	add	sp, #52	@ 0x34
 80187fe:	bd30      	pop	{r4, r5, pc}

08018800 <uxr_read_session_header>:
 8018800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018804:	4607      	mov	r7, r0
 8018806:	b084      	sub	sp, #16
 8018808:	4608      	mov	r0, r1
 801880a:	460c      	mov	r4, r1
 801880c:	4615      	mov	r5, r2
 801880e:	461e      	mov	r6, r3
 8018810:	f7fb fcea 	bl	80141e8 <ucdr_buffer_remaining>
 8018814:	2808      	cmp	r0, #8
 8018816:	d803      	bhi.n	8018820 <uxr_read_session_header+0x20>
 8018818:	2000      	movs	r0, #0
 801881a:	b004      	add	sp, #16
 801881c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018820:	f10d 080c 	add.w	r8, sp, #12
 8018824:	4633      	mov	r3, r6
 8018826:	462a      	mov	r2, r5
 8018828:	4620      	mov	r0, r4
 801882a:	f10d 010b 	add.w	r1, sp, #11
 801882e:	f8cd 8000 	str.w	r8, [sp]
 8018832:	f001 f833 	bl	801989c <uxr_deserialize_message_header>
 8018836:	783a      	ldrb	r2, [r7, #0]
 8018838:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801883c:	4293      	cmp	r3, r2
 801883e:	d1eb      	bne.n	8018818 <uxr_read_session_header+0x18>
 8018840:	061b      	lsls	r3, r3, #24
 8018842:	d41b      	bmi.n	801887c <uxr_read_session_header+0x7c>
 8018844:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8018848:	787b      	ldrb	r3, [r7, #1]
 801884a:	429a      	cmp	r2, r3
 801884c:	d003      	beq.n	8018856 <uxr_read_session_header+0x56>
 801884e:	2001      	movs	r0, #1
 8018850:	f080 0001 	eor.w	r0, r0, #1
 8018854:	e7e1      	b.n	801881a <uxr_read_session_header+0x1a>
 8018856:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801885a:	1cb8      	adds	r0, r7, #2
 801885c:	78bb      	ldrb	r3, [r7, #2]
 801885e:	429a      	cmp	r2, r3
 8018860:	d1f5      	bne.n	801884e <uxr_read_session_header+0x4e>
 8018862:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8018866:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801886a:	429a      	cmp	r2, r3
 801886c:	d1ef      	bne.n	801884e <uxr_read_session_header+0x4e>
 801886e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8018872:	7843      	ldrb	r3, [r0, #1]
 8018874:	429a      	cmp	r2, r3
 8018876:	d1ea      	bne.n	801884e <uxr_read_session_header+0x4e>
 8018878:	2000      	movs	r0, #0
 801887a:	e7e9      	b.n	8018850 <uxr_read_session_header+0x50>
 801887c:	2001      	movs	r0, #1
 801887e:	e7cc      	b.n	801881a <uxr_read_session_header+0x1a>

08018880 <uxr_session_header_offset>:
 8018880:	f990 3000 	ldrsb.w	r3, [r0]
 8018884:	2b00      	cmp	r3, #0
 8018886:	bfac      	ite	ge
 8018888:	2008      	movge	r0, #8
 801888a:	2004      	movlt	r0, #4
 801888c:	4770      	bx	lr
 801888e:	bf00      	nop

08018890 <uxr_init_base_object_request>:
 8018890:	b510      	push	{r4, lr}
 8018892:	b082      	sub	sp, #8
 8018894:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8018898:	9101      	str	r1, [sp, #4]
 801889a:	88c3      	ldrh	r3, [r0, #6]
 801889c:	f1a3 010a 	sub.w	r1, r3, #10
 80188a0:	b289      	uxth	r1, r1
 80188a2:	42a1      	cmp	r1, r4
 80188a4:	d80f      	bhi.n	80188c6 <uxr_init_base_object_request+0x36>
 80188a6:	3301      	adds	r3, #1
 80188a8:	b29c      	uxth	r4, r3
 80188aa:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80188ae:	b2db      	uxtb	r3, r3
 80188b0:	80c4      	strh	r4, [r0, #6]
 80188b2:	1c91      	adds	r1, r2, #2
 80188b4:	9801      	ldr	r0, [sp, #4]
 80188b6:	f882 c000 	strb.w	ip, [r2]
 80188ba:	7053      	strb	r3, [r2, #1]
 80188bc:	f7fe fdee 	bl	801749c <uxr_object_id_to_raw>
 80188c0:	4620      	mov	r0, r4
 80188c2:	b002      	add	sp, #8
 80188c4:	bd10      	pop	{r4, pc}
 80188c6:	230a      	movs	r3, #10
 80188c8:	f04f 0c00 	mov.w	ip, #0
 80188cc:	461c      	mov	r4, r3
 80188ce:	e7ef      	b.n	80188b0 <uxr_init_base_object_request+0x20>

080188d0 <uxr_parse_base_object_request>:
 80188d0:	b570      	push	{r4, r5, r6, lr}
 80188d2:	4604      	mov	r4, r0
 80188d4:	3002      	adds	r0, #2
 80188d6:	460d      	mov	r5, r1
 80188d8:	4616      	mov	r6, r2
 80188da:	f7fe fdcb 	bl	8017474 <uxr_object_id_from_raw>
 80188de:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80188e2:	8028      	strh	r0, [r5, #0]
 80188e4:	806b      	strh	r3, [r5, #2]
 80188e6:	7822      	ldrb	r2, [r4, #0]
 80188e8:	7863      	ldrb	r3, [r4, #1]
 80188ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80188ee:	8033      	strh	r3, [r6, #0]
 80188f0:	bd70      	pop	{r4, r5, r6, pc}
 80188f2:	bf00      	nop

080188f4 <uxr_init_framing_io>:
 80188f4:	2300      	movs	r3, #0
 80188f6:	7041      	strb	r1, [r0, #1]
 80188f8:	7003      	strb	r3, [r0, #0]
 80188fa:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80188fc:	4770      	bx	lr
 80188fe:	bf00      	nop

08018900 <uxr_write_framed_msg>:
 8018900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018904:	4617      	mov	r7, r2
 8018906:	7842      	ldrb	r2, [r0, #1]
 8018908:	460e      	mov	r6, r1
 801890a:	b083      	sub	sp, #12
 801890c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8018910:	469b      	mov	fp, r3
 8018912:	237e      	movs	r3, #126	@ 0x7e
 8018914:	4604      	mov	r4, r0
 8018916:	2901      	cmp	r1, #1
 8018918:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801891c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8018920:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8018924:	f240 8115 	bls.w	8018b52 <uxr_write_framed_msg+0x252>
 8018928:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801892c:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8018930:	2202      	movs	r2, #2
 8018932:	2901      	cmp	r1, #1
 8018934:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018938:	d952      	bls.n	80189e0 <uxr_write_framed_msg+0xe0>
 801893a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801893c:	2103      	movs	r1, #3
 801893e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8018942:	b2dd      	uxtb	r5, r3
 8018944:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018948:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801894c:	2a01      	cmp	r2, #1
 801894e:	d95c      	bls.n	8018a0a <uxr_write_framed_msg+0x10a>
 8018950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018952:	1862      	adds	r2, r4, r1
 8018954:	3101      	adds	r1, #1
 8018956:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801895a:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 801895e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018962:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8018966:	2a01      	cmp	r2, #1
 8018968:	d961      	bls.n	8018a2e <uxr_write_framed_msg+0x12e>
 801896a:	1c4a      	adds	r2, r1, #1
 801896c:	4421      	add	r1, r4
 801896e:	b2d2      	uxtb	r2, r2
 8018970:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8018974:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018978:	2b00      	cmp	r3, #0
 801897a:	d06a      	beq.n	8018a52 <uxr_write_framed_msg+0x152>
 801897c:	f04f 0800 	mov.w	r8, #0
 8018980:	46c1      	mov	r9, r8
 8018982:	e016      	b.n	80189b2 <uxr_write_framed_msg+0xb2>
 8018984:	2a29      	cmp	r2, #41	@ 0x29
 8018986:	d868      	bhi.n	8018a5a <uxr_write_framed_msg+0x15a>
 8018988:	18a0      	adds	r0, r4, r2
 801898a:	3201      	adds	r2, #1
 801898c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018990:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018994:	ea88 0101 	eor.w	r1, r8, r1
 8018998:	4b7d      	ldr	r3, [pc, #500]	@ (8018b90 <uxr_write_framed_msg+0x290>)
 801899a:	f109 0901 	add.w	r9, r9, #1
 801899e:	b2c9      	uxtb	r1, r1
 80189a0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80189a4:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 80189a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189aa:	454b      	cmp	r3, r9
 80189ac:	d969      	bls.n	8018a82 <uxr_write_framed_msg+0x182>
 80189ae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80189b2:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80189b6:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80189ba:	2801      	cmp	r0, #1
 80189bc:	d8e2      	bhi.n	8018984 <uxr_write_framed_msg+0x84>
 80189be:	1c50      	adds	r0, r2, #1
 80189c0:	b2c0      	uxtb	r0, r0
 80189c2:	2829      	cmp	r0, #41	@ 0x29
 80189c4:	d849      	bhi.n	8018a5a <uxr_write_framed_msg+0x15a>
 80189c6:	18a0      	adds	r0, r4, r2
 80189c8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80189cc:	3202      	adds	r2, #2
 80189ce:	f081 0520 	eor.w	r5, r1, #32
 80189d2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80189d6:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80189da:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80189de:	e7d9      	b.n	8018994 <uxr_write_framed_msg+0x94>
 80189e0:	2104      	movs	r1, #4
 80189e2:	f04f 0c03 	mov.w	ip, #3
 80189e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189e8:	4422      	add	r2, r4
 80189ea:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80189ee:	44a4      	add	ip, r4
 80189f0:	b2dd      	uxtb	r5, r3
 80189f2:	f080 0020 	eor.w	r0, r0, #32
 80189f6:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 80189fa:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80189fe:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8018a02:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018a06:	2a01      	cmp	r2, #1
 8018a08:	d8a2      	bhi.n	8018950 <uxr_write_framed_msg+0x50>
 8018a0a:	1862      	adds	r2, r4, r1
 8018a0c:	207d      	movs	r0, #125	@ 0x7d
 8018a0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a10:	f085 0520 	eor.w	r5, r5, #32
 8018a14:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8018a18:	3102      	adds	r1, #2
 8018a1a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8018a1e:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8018a22:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018a26:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8018a2a:	2a01      	cmp	r2, #1
 8018a2c:	d89d      	bhi.n	801896a <uxr_write_framed_msg+0x6a>
 8018a2e:	1c4d      	adds	r5, r1, #1
 8018a30:	1c8a      	adds	r2, r1, #2
 8018a32:	f080 0020 	eor.w	r0, r0, #32
 8018a36:	4421      	add	r1, r4
 8018a38:	fa54 f585 	uxtab	r5, r4, r5
 8018a3c:	b2d2      	uxtb	r2, r2
 8018a3e:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8018a42:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8018a46:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8018a4a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d194      	bne.n	801897c <uxr_write_framed_msg+0x7c>
 8018a52:	4619      	mov	r1, r3
 8018a54:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018a58:	e019      	b.n	8018a8e <uxr_write_framed_msg+0x18e>
 8018a5a:	2500      	movs	r5, #0
 8018a5c:	e000      	b.n	8018a60 <uxr_write_framed_msg+0x160>
 8018a5e:	b160      	cbz	r0, 8018a7a <uxr_write_framed_msg+0x17a>
 8018a60:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018a64:	1b52      	subs	r2, r2, r5
 8018a66:	4653      	mov	r3, sl
 8018a68:	4638      	mov	r0, r7
 8018a6a:	4421      	add	r1, r4
 8018a6c:	47b0      	blx	r6
 8018a6e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a72:	4405      	add	r5, r0
 8018a74:	4295      	cmp	r5, r2
 8018a76:	d3f2      	bcc.n	8018a5e <uxr_write_framed_msg+0x15e>
 8018a78:	d066      	beq.n	8018b48 <uxr_write_framed_msg+0x248>
 8018a7a:	2000      	movs	r0, #0
 8018a7c:	b003      	add	sp, #12
 8018a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a82:	fa5f f188 	uxtb.w	r1, r8
 8018a86:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a8a:	f8ad 8004 	strh.w	r8, [sp, #4]
 8018a8e:	f04f 0900 	mov.w	r9, #0
 8018a92:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8018a96:	46c8      	mov	r8, r9
 8018a98:	e013      	b.n	8018ac2 <uxr_write_framed_msg+0x1c2>
 8018a9a:	2a29      	cmp	r2, #41	@ 0x29
 8018a9c:	d824      	bhi.n	8018ae8 <uxr_write_framed_msg+0x1e8>
 8018a9e:	18a3      	adds	r3, r4, r2
 8018aa0:	3201      	adds	r2, #1
 8018aa2:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8018aa6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018aaa:	f109 0901 	add.w	r9, r9, #1
 8018aae:	f1b9 0f02 	cmp.w	r9, #2
 8018ab2:	d02d      	beq.n	8018b10 <uxr_write_framed_msg+0x210>
 8018ab4:	f109 0308 	add.w	r3, r9, #8
 8018ab8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018abc:	446b      	add	r3, sp
 8018abe:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8018ac2:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8018ac6:	2b01      	cmp	r3, #1
 8018ac8:	d8e7      	bhi.n	8018a9a <uxr_write_framed_msg+0x19a>
 8018aca:	1c53      	adds	r3, r2, #1
 8018acc:	b2db      	uxtb	r3, r3
 8018ace:	2b29      	cmp	r3, #41	@ 0x29
 8018ad0:	d80a      	bhi.n	8018ae8 <uxr_write_framed_msg+0x1e8>
 8018ad2:	18a3      	adds	r3, r4, r2
 8018ad4:	f081 0120 	eor.w	r1, r1, #32
 8018ad8:	3202      	adds	r2, #2
 8018ada:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8018ade:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8018ae2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018ae6:	e7e0      	b.n	8018aaa <uxr_write_framed_msg+0x1aa>
 8018ae8:	2500      	movs	r5, #0
 8018aea:	e001      	b.n	8018af0 <uxr_write_framed_msg+0x1f0>
 8018aec:	2800      	cmp	r0, #0
 8018aee:	d0c4      	beq.n	8018a7a <uxr_write_framed_msg+0x17a>
 8018af0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018af4:	1b52      	subs	r2, r2, r5
 8018af6:	4653      	mov	r3, sl
 8018af8:	4638      	mov	r0, r7
 8018afa:	4421      	add	r1, r4
 8018afc:	47b0      	blx	r6
 8018afe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018b02:	4405      	add	r5, r0
 8018b04:	4295      	cmp	r5, r2
 8018b06:	d3f1      	bcc.n	8018aec <uxr_write_framed_msg+0x1ec>
 8018b08:	d1b7      	bne.n	8018a7a <uxr_write_framed_msg+0x17a>
 8018b0a:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8018b0e:	e7d1      	b.n	8018ab4 <uxr_write_framed_msg+0x1b4>
 8018b10:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018b14:	b19a      	cbz	r2, 8018b3e <uxr_write_framed_msg+0x23e>
 8018b16:	2500      	movs	r5, #0
 8018b18:	e001      	b.n	8018b1e <uxr_write_framed_msg+0x21e>
 8018b1a:	2800      	cmp	r0, #0
 8018b1c:	d0ad      	beq.n	8018a7a <uxr_write_framed_msg+0x17a>
 8018b1e:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018b22:	1b52      	subs	r2, r2, r5
 8018b24:	4653      	mov	r3, sl
 8018b26:	4638      	mov	r0, r7
 8018b28:	4421      	add	r1, r4
 8018b2a:	47b0      	blx	r6
 8018b2c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018b30:	4405      	add	r5, r0
 8018b32:	4295      	cmp	r5, r2
 8018b34:	d3f1      	bcc.n	8018b1a <uxr_write_framed_msg+0x21a>
 8018b36:	d1a0      	bne.n	8018a7a <uxr_write_framed_msg+0x17a>
 8018b38:	2300      	movs	r3, #0
 8018b3a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018b3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b40:	b298      	uxth	r0, r3
 8018b42:	b003      	add	sp, #12
 8018b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b48:	f04f 0300 	mov.w	r3, #0
 8018b4c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018b50:	e72a      	b.n	80189a8 <uxr_write_framed_msg+0xa8>
 8018b52:	217d      	movs	r1, #125	@ 0x7d
 8018b54:	f082 0220 	eor.w	r2, r2, #32
 8018b58:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8018b5c:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8018b60:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8018b64:	2203      	movs	r2, #3
 8018b66:	2901      	cmp	r1, #1
 8018b68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018b6c:	d803      	bhi.n	8018b76 <uxr_write_framed_msg+0x276>
 8018b6e:	2105      	movs	r1, #5
 8018b70:	f04f 0c04 	mov.w	ip, #4
 8018b74:	e737      	b.n	80189e6 <uxr_write_framed_msg+0xe6>
 8018b76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b78:	2104      	movs	r1, #4
 8018b7a:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8018b7e:	b2dd      	uxtb	r5, r3
 8018b80:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018b84:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018b88:	2a01      	cmp	r2, #1
 8018b8a:	f63f aee1 	bhi.w	8018950 <uxr_write_framed_msg+0x50>
 8018b8e:	e73c      	b.n	8018a0a <uxr_write_framed_msg+0x10a>
 8018b90:	08025000 	.word	0x08025000

08018b94 <uxr_framing_read_transport>:
 8018b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b98:	4604      	mov	r4, r0
 8018b9a:	b085      	sub	sp, #20
 8018b9c:	4692      	mov	sl, r2
 8018b9e:	4689      	mov	r9, r1
 8018ba0:	461d      	mov	r5, r3
 8018ba2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018ba4:	f000 fca6 	bl	80194f4 <uxr_millis>
 8018ba8:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018bac:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8018bb0:	4680      	mov	r8, r0
 8018bb2:	42ba      	cmp	r2, r7
 8018bb4:	d05f      	beq.n	8018c76 <uxr_framing_read_transport+0xe2>
 8018bb6:	d817      	bhi.n	8018be8 <uxr_framing_read_transport+0x54>
 8018bb8:	3f01      	subs	r7, #1
 8018bba:	1aba      	subs	r2, r7, r2
 8018bbc:	2700      	movs	r7, #0
 8018bbe:	b2d2      	uxtb	r2, r2
 8018bc0:	42b2      	cmp	r2, r6
 8018bc2:	d81a      	bhi.n	8018bfa <uxr_framing_read_transport+0x66>
 8018bc4:	19d3      	adds	r3, r2, r7
 8018bc6:	42b3      	cmp	r3, r6
 8018bc8:	d852      	bhi.n	8018c70 <uxr_framing_read_transport+0xdc>
 8018bca:	b9d2      	cbnz	r2, 8018c02 <uxr_framing_read_transport+0x6e>
 8018bcc:	2600      	movs	r6, #0
 8018bce:	f000 fc91 	bl	80194f4 <uxr_millis>
 8018bd2:	682b      	ldr	r3, [r5, #0]
 8018bd4:	eba0 0008 	sub.w	r0, r0, r8
 8018bd8:	1a1b      	subs	r3, r3, r0
 8018bda:	4630      	mov	r0, r6
 8018bdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018be0:	602b      	str	r3, [r5, #0]
 8018be2:	b005      	add	sp, #20
 8018be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be8:	2f00      	cmp	r7, #0
 8018bea:	d060      	beq.n	8018cae <uxr_framing_read_transport+0x11a>
 8018bec:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8018bf0:	3f01      	subs	r7, #1
 8018bf2:	b2d2      	uxtb	r2, r2
 8018bf4:	b2ff      	uxtb	r7, r7
 8018bf6:	42b2      	cmp	r2, r6
 8018bf8:	d9e4      	bls.n	8018bc4 <uxr_framing_read_transport+0x30>
 8018bfa:	b2f2      	uxtb	r2, r6
 8018bfc:	2700      	movs	r7, #0
 8018bfe:	2a00      	cmp	r2, #0
 8018c00:	d0e4      	beq.n	8018bcc <uxr_framing_read_transport+0x38>
 8018c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c04:	4650      	mov	r0, sl
 8018c06:	9203      	str	r2, [sp, #12]
 8018c08:	9300      	str	r3, [sp, #0]
 8018c0a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018c0e:	682b      	ldr	r3, [r5, #0]
 8018c10:	3102      	adds	r1, #2
 8018c12:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8018cb8 <uxr_framing_read_transport+0x124>
 8018c16:	4421      	add	r1, r4
 8018c18:	47c8      	blx	r9
 8018c1a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018c1e:	4606      	mov	r6, r0
 8018c20:	4403      	add	r3, r0
 8018c22:	0859      	lsrs	r1, r3, #1
 8018c24:	fbab 2101 	umull	r2, r1, fp, r1
 8018c28:	222a      	movs	r2, #42	@ 0x2a
 8018c2a:	0889      	lsrs	r1, r1, #2
 8018c2c:	fb02 3111 	mls	r1, r2, r1, r3
 8018c30:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8018c34:	2800      	cmp	r0, #0
 8018c36:	d0c9      	beq.n	8018bcc <uxr_framing_read_transport+0x38>
 8018c38:	9a03      	ldr	r2, [sp, #12]
 8018c3a:	4290      	cmp	r0, r2
 8018c3c:	d1c7      	bne.n	8018bce <uxr_framing_read_transport+0x3a>
 8018c3e:	2f00      	cmp	r7, #0
 8018c40:	d0c5      	beq.n	8018bce <uxr_framing_read_transport+0x3a>
 8018c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c44:	3102      	adds	r1, #2
 8018c46:	463a      	mov	r2, r7
 8018c48:	4650      	mov	r0, sl
 8018c4a:	4421      	add	r1, r4
 8018c4c:	9300      	str	r3, [sp, #0]
 8018c4e:	2300      	movs	r3, #0
 8018c50:	47c8      	blx	r9
 8018c52:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018c56:	4406      	add	r6, r0
 8018c58:	1813      	adds	r3, r2, r0
 8018c5a:	085a      	lsrs	r2, r3, #1
 8018c5c:	fbab 1b02 	umull	r1, fp, fp, r2
 8018c60:	222a      	movs	r2, #42	@ 0x2a
 8018c62:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8018c66:	fb02 331b 	mls	r3, r2, fp, r3
 8018c6a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018c6e:	e7ae      	b.n	8018bce <uxr_framing_read_transport+0x3a>
 8018c70:	1ab6      	subs	r6, r6, r2
 8018c72:	b2f7      	uxtb	r7, r6
 8018c74:	e7a9      	b.n	8018bca <uxr_framing_read_transport+0x36>
 8018c76:	2300      	movs	r3, #0
 8018c78:	2e28      	cmp	r6, #40	@ 0x28
 8018c7a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8018c7c:	d9bd      	bls.n	8018bfa <uxr_framing_read_transport+0x66>
 8018c7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c80:	2229      	movs	r2, #41	@ 0x29
 8018c82:	1ca1      	adds	r1, r4, #2
 8018c84:	4650      	mov	r0, sl
 8018c86:	9300      	str	r3, [sp, #0]
 8018c88:	682b      	ldr	r3, [r5, #0]
 8018c8a:	47c8      	blx	r9
 8018c8c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018c90:	4606      	mov	r6, r0
 8018c92:	212a      	movs	r1, #42	@ 0x2a
 8018c94:	4403      	add	r3, r0
 8018c96:	4808      	ldr	r0, [pc, #32]	@ (8018cb8 <uxr_framing_read_transport+0x124>)
 8018c98:	085a      	lsrs	r2, r3, #1
 8018c9a:	fba0 0202 	umull	r0, r2, r0, r2
 8018c9e:	0892      	lsrs	r2, r2, #2
 8018ca0:	fb01 3312 	mls	r3, r1, r2, r3
 8018ca4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018ca8:	2e00      	cmp	r6, #0
 8018caa:	d08f      	beq.n	8018bcc <uxr_framing_read_transport+0x38>
 8018cac:	e78f      	b.n	8018bce <uxr_framing_read_transport+0x3a>
 8018cae:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8018cb2:	b2d2      	uxtb	r2, r2
 8018cb4:	e784      	b.n	8018bc0 <uxr_framing_read_transport+0x2c>
 8018cb6:	bf00      	nop
 8018cb8:	30c30c31 	.word	0x30c30c31

08018cbc <uxr_read_framed_msg>:
 8018cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc0:	461e      	mov	r6, r3
 8018cc2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8018cc6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8018cca:	b083      	sub	sp, #12
 8018ccc:	4604      	mov	r4, r0
 8018cce:	4688      	mov	r8, r1
 8018cd0:	429d      	cmp	r5, r3
 8018cd2:	4691      	mov	r9, r2
 8018cd4:	f000 818c 	beq.w	8018ff0 <uxr_read_framed_msg+0x334>
 8018cd8:	7823      	ldrb	r3, [r4, #0]
 8018cda:	4dc3      	ldr	r5, [pc, #780]	@ (8018fe8 <uxr_read_framed_msg+0x32c>)
 8018cdc:	4fc3      	ldr	r7, [pc, #780]	@ (8018fec <uxr_read_framed_msg+0x330>)
 8018cde:	2b07      	cmp	r3, #7
 8018ce0:	d8fd      	bhi.n	8018cde <uxr_read_framed_msg+0x22>
 8018ce2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018ce6:	011c      	.short	0x011c
 8018ce8:	00d900fb 	.word	0x00d900fb
 8018cec:	008f00ba 	.word	0x008f00ba
 8018cf0:	00320051 	.word	0x00320051
 8018cf4:	0008      	.short	0x0008
 8018cf6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018cfa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018cfe:	4299      	cmp	r1, r3
 8018d00:	f000 814d 	beq.w	8018f9e <uxr_read_framed_msg+0x2e2>
 8018d04:	18e2      	adds	r2, r4, r3
 8018d06:	7892      	ldrb	r2, [r2, #2]
 8018d08:	2a7d      	cmp	r2, #125	@ 0x7d
 8018d0a:	f000 81b8 	beq.w	801907e <uxr_read_framed_msg+0x3c2>
 8018d0e:	3301      	adds	r3, #1
 8018d10:	212a      	movs	r1, #42	@ 0x2a
 8018d12:	2a7e      	cmp	r2, #126	@ 0x7e
 8018d14:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018d18:	fba5 c000 	umull	ip, r0, r5, r0
 8018d1c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018d20:	fb01 3310 	mls	r3, r1, r0, r3
 8018d24:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018d28:	f000 8257 	beq.w	80191da <uxr_read_framed_msg+0x51e>
 8018d2c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018d2e:	2000      	movs	r0, #0
 8018d30:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8018d32:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018d36:	7020      	strb	r0, [r4, #0]
 8018d38:	b29b      	uxth	r3, r3
 8018d3a:	4299      	cmp	r1, r3
 8018d3c:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8018d3e:	f000 8178 	beq.w	8019032 <uxr_read_framed_msg+0x376>
 8018d42:	2000      	movs	r0, #0
 8018d44:	b003      	add	sp, #12
 8018d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d4a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018d4e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018d52:	4298      	cmp	r0, r3
 8018d54:	f000 8132 	beq.w	8018fbc <uxr_read_framed_msg+0x300>
 8018d58:	18e2      	adds	r2, r4, r3
 8018d5a:	7891      	ldrb	r1, [r2, #2]
 8018d5c:	297d      	cmp	r1, #125	@ 0x7d
 8018d5e:	f000 8170 	beq.w	8019042 <uxr_read_framed_msg+0x386>
 8018d62:	3301      	adds	r3, #1
 8018d64:	202a      	movs	r0, #42	@ 0x2a
 8018d66:	297e      	cmp	r1, #126	@ 0x7e
 8018d68:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018d6c:	fba5 c202 	umull	ip, r2, r5, r2
 8018d70:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018d74:	fb00 3312 	mls	r3, r0, r2, r3
 8018d78:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018d7c:	f000 821d 	beq.w	80191ba <uxr_read_framed_msg+0x4fe>
 8018d80:	2307      	movs	r3, #7
 8018d82:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8018d84:	7023      	strb	r3, [r4, #0]
 8018d86:	e7aa      	b.n	8018cde <uxr_read_framed_msg+0x22>
 8018d88:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018d8a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018d8e:	459e      	cmp	lr, r3
 8018d90:	d827      	bhi.n	8018de2 <uxr_read_framed_msg+0x126>
 8018d92:	e032      	b.n	8018dfa <uxr_read_framed_msg+0x13e>
 8018d94:	fba5 b101 	umull	fp, r1, r5, r1
 8018d98:	f89c c002 	ldrb.w	ip, [ip, #2]
 8018d9c:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018da0:	0889      	lsrs	r1, r1, #2
 8018da2:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8018da6:	fb0b 0111 	mls	r1, fp, r1, r0
 8018daa:	f000 80d4 	beq.w	8018f56 <uxr_read_framed_msg+0x29a>
 8018dae:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018db2:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8018db6:	f000 80cb 	beq.w	8018f50 <uxr_read_framed_msg+0x294>
 8018dba:	f806 c003 	strb.w	ip, [r6, r3]
 8018dbe:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8018dc0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018dc2:	ea80 010c 	eor.w	r1, r0, ip
 8018dc6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018dca:	3301      	adds	r3, #1
 8018dcc:	b2c9      	uxtb	r1, r1
 8018dce:	b29b      	uxth	r3, r3
 8018dd0:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8018dd4:	4573      	cmp	r3, lr
 8018dd6:	8663      	strh	r3, [r4, #50]	@ 0x32
 8018dd8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8018ddc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8018dde:	f080 811d 	bcs.w	801901c <uxr_read_framed_msg+0x360>
 8018de2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018de6:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8018dea:	1c50      	adds	r0, r2, #1
 8018dec:	eb04 0c02 	add.w	ip, r4, r2
 8018df0:	4592      	cmp	sl, r2
 8018df2:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8018df6:	d1cd      	bne.n	8018d94 <uxr_read_framed_msg+0xd8>
 8018df8:	459e      	cmp	lr, r3
 8018dfa:	f040 8114 	bne.w	8019026 <uxr_read_framed_msg+0x36a>
 8018dfe:	2306      	movs	r3, #6
 8018e00:	7023      	strb	r3, [r4, #0]
 8018e02:	e76c      	b.n	8018cde <uxr_read_framed_msg+0x22>
 8018e04:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018e08:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018e0c:	4298      	cmp	r0, r3
 8018e0e:	f000 80c6 	beq.w	8018f9e <uxr_read_framed_msg+0x2e2>
 8018e12:	18e2      	adds	r2, r4, r3
 8018e14:	7891      	ldrb	r1, [r2, #2]
 8018e16:	297d      	cmp	r1, #125	@ 0x7d
 8018e18:	f000 8193 	beq.w	8019142 <uxr_read_framed_msg+0x486>
 8018e1c:	3301      	adds	r3, #1
 8018e1e:	202a      	movs	r0, #42	@ 0x2a
 8018e20:	297e      	cmp	r1, #126	@ 0x7e
 8018e22:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018e26:	fba5 c202 	umull	ip, r2, r5, r2
 8018e2a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018e2e:	fb00 3312 	mls	r3, r0, r2, r3
 8018e32:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e36:	f000 81d0 	beq.w	80191da <uxr_read_framed_msg+0x51e>
 8018e3a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8018e3c:	2000      	movs	r0, #0
 8018e3e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018e42:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018e44:	8660      	strh	r0, [r4, #50]	@ 0x32
 8018e46:	b29b      	uxth	r3, r3
 8018e48:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8018e4a:	428b      	cmp	r3, r1
 8018e4c:	8623      	strh	r3, [r4, #48]	@ 0x30
 8018e4e:	f240 80e2 	bls.w	8019016 <uxr_read_framed_msg+0x35a>
 8018e52:	7020      	strb	r0, [r4, #0]
 8018e54:	b003      	add	sp, #12
 8018e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e5a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018e5e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018e62:	4298      	cmp	r0, r3
 8018e64:	f000 80aa 	beq.w	8018fbc <uxr_read_framed_msg+0x300>
 8018e68:	18e2      	adds	r2, r4, r3
 8018e6a:	7891      	ldrb	r1, [r2, #2]
 8018e6c:	297d      	cmp	r1, #125	@ 0x7d
 8018e6e:	f000 8186 	beq.w	801917e <uxr_read_framed_msg+0x4c2>
 8018e72:	3301      	adds	r3, #1
 8018e74:	202a      	movs	r0, #42	@ 0x2a
 8018e76:	297e      	cmp	r1, #126	@ 0x7e
 8018e78:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018e7c:	fba5 c202 	umull	ip, r2, r5, r2
 8018e80:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018e84:	fb00 3312 	mls	r3, r0, r2, r3
 8018e88:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e8c:	f000 8195 	beq.w	80191ba <uxr_read_framed_msg+0x4fe>
 8018e90:	2304      	movs	r3, #4
 8018e92:	8621      	strh	r1, [r4, #48]	@ 0x30
 8018e94:	7023      	strb	r3, [r4, #0]
 8018e96:	e722      	b.n	8018cde <uxr_read_framed_msg+0x22>
 8018e98:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018e9c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018ea0:	4290      	cmp	r0, r2
 8018ea2:	f000 80b4 	beq.w	801900e <uxr_read_framed_msg+0x352>
 8018ea6:	18a3      	adds	r3, r4, r2
 8018ea8:	7899      	ldrb	r1, [r3, #2]
 8018eaa:	297d      	cmp	r1, #125	@ 0x7d
 8018eac:	f000 8107 	beq.w	80190be <uxr_read_framed_msg+0x402>
 8018eb0:	3201      	adds	r2, #1
 8018eb2:	232a      	movs	r3, #42	@ 0x2a
 8018eb4:	297e      	cmp	r1, #126	@ 0x7e
 8018eb6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8018eba:	fba5 c000 	umull	ip, r0, r5, r0
 8018ebe:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018ec2:	fb03 2210 	mls	r2, r3, r0, r2
 8018ec6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018eca:	f000 818a 	beq.w	80191e2 <uxr_read_framed_msg+0x526>
 8018ece:	7863      	ldrb	r3, [r4, #1]
 8018ed0:	428b      	cmp	r3, r1
 8018ed2:	bf0c      	ite	eq
 8018ed4:	2303      	moveq	r3, #3
 8018ed6:	2300      	movne	r3, #0
 8018ed8:	7023      	strb	r3, [r4, #0]
 8018eda:	e700      	b.n	8018cde <uxr_read_framed_msg+0x22>
 8018edc:	2300      	movs	r3, #0
 8018ede:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018ee2:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8018ee6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018eea:	4299      	cmp	r1, r3
 8018eec:	d06a      	beq.n	8018fc4 <uxr_read_framed_msg+0x308>
 8018eee:	18e2      	adds	r2, r4, r3
 8018ef0:	7890      	ldrb	r0, [r2, #2]
 8018ef2:	287d      	cmp	r0, #125	@ 0x7d
 8018ef4:	f000 8100 	beq.w	80190f8 <uxr_read_framed_msg+0x43c>
 8018ef8:	3301      	adds	r3, #1
 8018efa:	212a      	movs	r1, #42	@ 0x2a
 8018efc:	287e      	cmp	r0, #126	@ 0x7e
 8018efe:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8018f02:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018f06:	fba5 c202 	umull	ip, r2, r5, r2
 8018f0a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018f0e:	fb01 3312 	mls	r3, r1, r2, r3
 8018f12:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018f16:	d055      	beq.n	8018fc4 <uxr_read_framed_msg+0x308>
 8018f18:	2302      	movs	r3, #2
 8018f1a:	7023      	strb	r3, [r4, #0]
 8018f1c:	e6df      	b.n	8018cde <uxr_read_framed_msg+0x22>
 8018f1e:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8018f22:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8018f26:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018f2a:	1c5a      	adds	r2, r3, #1
 8018f2c:	459c      	cmp	ip, r3
 8018f2e:	eb04 0103 	add.w	r1, r4, r3
 8018f32:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8018f36:	f43f af04 	beq.w	8018d42 <uxr_read_framed_msg+0x86>
 8018f3a:	fba5 0303 	umull	r0, r3, r5, r3
 8018f3e:	7889      	ldrb	r1, [r1, #2]
 8018f40:	089b      	lsrs	r3, r3, #2
 8018f42:	297e      	cmp	r1, #126	@ 0x7e
 8018f44:	fb0e 2313 	mls	r3, lr, r3, r2
 8018f48:	b2db      	uxtb	r3, r3
 8018f4a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018f4e:	d1ec      	bne.n	8018f2a <uxr_read_framed_msg+0x26e>
 8018f50:	2301      	movs	r3, #1
 8018f52:	7023      	strb	r3, [r4, #0]
 8018f54:	e6c3      	b.n	8018cde <uxr_read_framed_msg+0x22>
 8018f56:	1c50      	adds	r0, r2, #1
 8018f58:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018f5c:	3202      	adds	r2, #2
 8018f5e:	0841      	lsrs	r1, r0, #1
 8018f60:	fba5 c101 	umull	ip, r1, r5, r1
 8018f64:	0889      	lsrs	r1, r1, #2
 8018f66:	fb0b 0111 	mls	r1, fp, r1, r0
 8018f6a:	1860      	adds	r0, r4, r1
 8018f6c:	b2c9      	uxtb	r1, r1
 8018f6e:	458a      	cmp	sl, r1
 8018f70:	f43f af42 	beq.w	8018df8 <uxr_read_framed_msg+0x13c>
 8018f74:	0851      	lsrs	r1, r2, #1
 8018f76:	7880      	ldrb	r0, [r0, #2]
 8018f78:	fba5 a101 	umull	sl, r1, r5, r1
 8018f7c:	287e      	cmp	r0, #126	@ 0x7e
 8018f7e:	f080 0c20 	eor.w	ip, r0, #32
 8018f82:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8018f86:	fb0b 2211 	mls	r2, fp, r1, r2
 8018f8a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018f8e:	f47f af14 	bne.w	8018dba <uxr_read_framed_msg+0xfe>
 8018f92:	459e      	cmp	lr, r3
 8018f94:	f43f af33 	beq.w	8018dfe <uxr_read_framed_msg+0x142>
 8018f98:	2301      	movs	r3, #1
 8018f9a:	7023      	strb	r3, [r4, #0]
 8018f9c:	e69f      	b.n	8018cde <uxr_read_framed_msg+0x22>
 8018f9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018fa0:	9300      	str	r3, [sp, #0]
 8018fa2:	2301      	movs	r3, #1
 8018fa4:	9301      	str	r3, [sp, #4]
 8018fa6:	464a      	mov	r2, r9
 8018fa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018faa:	4641      	mov	r1, r8
 8018fac:	4620      	mov	r0, r4
 8018fae:	f7ff fdf1 	bl	8018b94 <uxr_framing_read_transport>
 8018fb2:	2800      	cmp	r0, #0
 8018fb4:	f43f aec5 	beq.w	8018d42 <uxr_read_framed_msg+0x86>
 8018fb8:	7823      	ldrb	r3, [r4, #0]
 8018fba:	e690      	b.n	8018cde <uxr_read_framed_msg+0x22>
 8018fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018fbe:	9300      	str	r3, [sp, #0]
 8018fc0:	2302      	movs	r3, #2
 8018fc2:	e7ef      	b.n	8018fa4 <uxr_read_framed_msg+0x2e8>
 8018fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018fc6:	464a      	mov	r2, r9
 8018fc8:	4641      	mov	r1, r8
 8018fca:	4620      	mov	r0, r4
 8018fcc:	9300      	str	r3, [sp, #0]
 8018fce:	2304      	movs	r3, #4
 8018fd0:	9301      	str	r3, [sp, #4]
 8018fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018fd4:	f7ff fdde 	bl	8018b94 <uxr_framing_read_transport>
 8018fd8:	2800      	cmp	r0, #0
 8018fda:	d1ed      	bne.n	8018fb8 <uxr_read_framed_msg+0x2fc>
 8018fdc:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018fe0:	2b7e      	cmp	r3, #126	@ 0x7e
 8018fe2:	d0e9      	beq.n	8018fb8 <uxr_read_framed_msg+0x2fc>
 8018fe4:	e6ad      	b.n	8018d42 <uxr_read_framed_msg+0x86>
 8018fe6:	bf00      	nop
 8018fe8:	30c30c31 	.word	0x30c30c31
 8018fec:	08025000 	.word	0x08025000
 8018ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018ff2:	9300      	str	r3, [sp, #0]
 8018ff4:	2305      	movs	r3, #5
 8018ff6:	9301      	str	r3, [sp, #4]
 8018ff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018ffa:	f7ff fdcb 	bl	8018b94 <uxr_framing_read_transport>
 8018ffe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019002:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019006:	429a      	cmp	r2, r3
 8019008:	f43f ae9b 	beq.w	8018d42 <uxr_read_framed_msg+0x86>
 801900c:	e664      	b.n	8018cd8 <uxr_read_framed_msg+0x1c>
 801900e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019010:	9300      	str	r3, [sp, #0]
 8019012:	2303      	movs	r3, #3
 8019014:	e7c6      	b.n	8018fa4 <uxr_read_framed_msg+0x2e8>
 8019016:	2305      	movs	r3, #5
 8019018:	7023      	strb	r3, [r4, #0]
 801901a:	e660      	b.n	8018cde <uxr_read_framed_msg+0x22>
 801901c:	f43f aeef 	beq.w	8018dfe <uxr_read_framed_msg+0x142>
 8019020:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019024:	d094      	beq.n	8018f50 <uxr_read_framed_msg+0x294>
 8019026:	ebae 0303 	sub.w	r3, lr, r3
 801902a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801902c:	3302      	adds	r3, #2
 801902e:	9200      	str	r2, [sp, #0]
 8019030:	e7b8      	b.n	8018fa4 <uxr_read_framed_msg+0x2e8>
 8019032:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8019036:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019038:	7013      	strb	r3, [r2, #0]
 801903a:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801903c:	b003      	add	sp, #12
 801903e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019042:	1c59      	adds	r1, r3, #1
 8019044:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019048:	084a      	lsrs	r2, r1, #1
 801904a:	fba5 e202 	umull	lr, r2, r5, r2
 801904e:	0892      	lsrs	r2, r2, #2
 8019050:	fb0c 1212 	mls	r2, ip, r2, r1
 8019054:	b2d1      	uxtb	r1, r2
 8019056:	4288      	cmp	r0, r1
 8019058:	d0b0      	beq.n	8018fbc <uxr_read_framed_msg+0x300>
 801905a:	3302      	adds	r3, #2
 801905c:	4422      	add	r2, r4
 801905e:	7891      	ldrb	r1, [r2, #2]
 8019060:	085a      	lsrs	r2, r3, #1
 8019062:	fba5 0202 	umull	r0, r2, r5, r2
 8019066:	297e      	cmp	r1, #126	@ 0x7e
 8019068:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801906c:	fb0c 3312 	mls	r3, ip, r2, r3
 8019070:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019074:	f000 80a1 	beq.w	80191ba <uxr_read_framed_msg+0x4fe>
 8019078:	f081 0120 	eor.w	r1, r1, #32
 801907c:	e680      	b.n	8018d80 <uxr_read_framed_msg+0xc4>
 801907e:	f103 0c01 	add.w	ip, r3, #1
 8019082:	202a      	movs	r0, #42	@ 0x2a
 8019084:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019088:	fba5 e202 	umull	lr, r2, r5, r2
 801908c:	0892      	lsrs	r2, r2, #2
 801908e:	fb00 c212 	mls	r2, r0, r2, ip
 8019092:	fa5f fc82 	uxtb.w	ip, r2
 8019096:	4561      	cmp	r1, ip
 8019098:	d081      	beq.n	8018f9e <uxr_read_framed_msg+0x2e2>
 801909a:	3302      	adds	r3, #2
 801909c:	4422      	add	r2, r4
 801909e:	0859      	lsrs	r1, r3, #1
 80190a0:	7892      	ldrb	r2, [r2, #2]
 80190a2:	fba5 c101 	umull	ip, r1, r5, r1
 80190a6:	2a7e      	cmp	r2, #126	@ 0x7e
 80190a8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80190ac:	fb00 3311 	mls	r3, r0, r1, r3
 80190b0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80190b4:	f000 8091 	beq.w	80191da <uxr_read_framed_msg+0x51e>
 80190b8:	f082 0220 	eor.w	r2, r2, #32
 80190bc:	e636      	b.n	8018d2c <uxr_read_framed_msg+0x70>
 80190be:	1c51      	adds	r1, r2, #1
 80190c0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80190c4:	084b      	lsrs	r3, r1, #1
 80190c6:	fba5 e303 	umull	lr, r3, r5, r3
 80190ca:	089b      	lsrs	r3, r3, #2
 80190cc:	fb0c 1313 	mls	r3, ip, r3, r1
 80190d0:	b2d9      	uxtb	r1, r3
 80190d2:	4288      	cmp	r0, r1
 80190d4:	d09b      	beq.n	801900e <uxr_read_framed_msg+0x352>
 80190d6:	3202      	adds	r2, #2
 80190d8:	4423      	add	r3, r4
 80190da:	0850      	lsrs	r0, r2, #1
 80190dc:	789b      	ldrb	r3, [r3, #2]
 80190de:	fba5 1000 	umull	r1, r0, r5, r0
 80190e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80190e4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80190e8:	fb0c 2210 	mls	r2, ip, r0, r2
 80190ec:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80190f0:	d077      	beq.n	80191e2 <uxr_read_framed_msg+0x526>
 80190f2:	f083 0120 	eor.w	r1, r3, #32
 80190f6:	e6ea      	b.n	8018ece <uxr_read_framed_msg+0x212>
 80190f8:	f103 0c01 	add.w	ip, r3, #1
 80190fc:	202a      	movs	r0, #42	@ 0x2a
 80190fe:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019102:	fba5 e202 	umull	lr, r2, r5, r2
 8019106:	0892      	lsrs	r2, r2, #2
 8019108:	fb00 c212 	mls	r2, r0, r2, ip
 801910c:	fa5f fc82 	uxtb.w	ip, r2
 8019110:	4561      	cmp	r1, ip
 8019112:	f43f af57 	beq.w	8018fc4 <uxr_read_framed_msg+0x308>
 8019116:	3302      	adds	r3, #2
 8019118:	4422      	add	r2, r4
 801911a:	7891      	ldrb	r1, [r2, #2]
 801911c:	085a      	lsrs	r2, r3, #1
 801911e:	fba5 c202 	umull	ip, r2, r5, r2
 8019122:	297e      	cmp	r1, #126	@ 0x7e
 8019124:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8019128:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801912c:	fb00 3312 	mls	r3, r0, r2, r3
 8019130:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019134:	f43f af46 	beq.w	8018fc4 <uxr_read_framed_msg+0x308>
 8019138:	f081 0120 	eor.w	r1, r1, #32
 801913c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8019140:	e6ea      	b.n	8018f18 <uxr_read_framed_msg+0x25c>
 8019142:	1c59      	adds	r1, r3, #1
 8019144:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019148:	084a      	lsrs	r2, r1, #1
 801914a:	fba5 e202 	umull	lr, r2, r5, r2
 801914e:	0892      	lsrs	r2, r2, #2
 8019150:	fb0c 1212 	mls	r2, ip, r2, r1
 8019154:	b2d1      	uxtb	r1, r2
 8019156:	4288      	cmp	r0, r1
 8019158:	f43f af21 	beq.w	8018f9e <uxr_read_framed_msg+0x2e2>
 801915c:	3302      	adds	r3, #2
 801915e:	4422      	add	r2, r4
 8019160:	7891      	ldrb	r1, [r2, #2]
 8019162:	085a      	lsrs	r2, r3, #1
 8019164:	fba5 0202 	umull	r0, r2, r5, r2
 8019168:	297e      	cmp	r1, #126	@ 0x7e
 801916a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801916e:	fb0c 3312 	mls	r3, ip, r2, r3
 8019172:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019176:	d030      	beq.n	80191da <uxr_read_framed_msg+0x51e>
 8019178:	f081 0120 	eor.w	r1, r1, #32
 801917c:	e65d      	b.n	8018e3a <uxr_read_framed_msg+0x17e>
 801917e:	1c59      	adds	r1, r3, #1
 8019180:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019184:	084a      	lsrs	r2, r1, #1
 8019186:	fba5 e202 	umull	lr, r2, r5, r2
 801918a:	0892      	lsrs	r2, r2, #2
 801918c:	fb0c 1212 	mls	r2, ip, r2, r1
 8019190:	b2d1      	uxtb	r1, r2
 8019192:	4288      	cmp	r0, r1
 8019194:	f43f af12 	beq.w	8018fbc <uxr_read_framed_msg+0x300>
 8019198:	3302      	adds	r3, #2
 801919a:	4422      	add	r2, r4
 801919c:	7891      	ldrb	r1, [r2, #2]
 801919e:	085a      	lsrs	r2, r3, #1
 80191a0:	fba5 0202 	umull	r0, r2, r5, r2
 80191a4:	297e      	cmp	r1, #126	@ 0x7e
 80191a6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80191aa:	fb0c 3312 	mls	r3, ip, r2, r3
 80191ae:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80191b2:	d002      	beq.n	80191ba <uxr_read_framed_msg+0x4fe>
 80191b4:	f081 0120 	eor.w	r1, r1, #32
 80191b8:	e66a      	b.n	8018e90 <uxr_read_framed_msg+0x1d4>
 80191ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80191bc:	9300      	str	r3, [sp, #0]
 80191be:	2302      	movs	r3, #2
 80191c0:	9301      	str	r3, [sp, #4]
 80191c2:	464a      	mov	r2, r9
 80191c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80191c6:	4641      	mov	r1, r8
 80191c8:	4620      	mov	r0, r4
 80191ca:	f7ff fce3 	bl	8018b94 <uxr_framing_read_transport>
 80191ce:	2800      	cmp	r0, #0
 80191d0:	f47f aef2 	bne.w	8018fb8 <uxr_read_framed_msg+0x2fc>
 80191d4:	2301      	movs	r3, #1
 80191d6:	7023      	strb	r3, [r4, #0]
 80191d8:	e581      	b.n	8018cde <uxr_read_framed_msg+0x22>
 80191da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80191dc:	9300      	str	r3, [sp, #0]
 80191de:	2301      	movs	r3, #1
 80191e0:	e7ee      	b.n	80191c0 <uxr_read_framed_msg+0x504>
 80191e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80191e4:	9300      	str	r3, [sp, #0]
 80191e6:	2303      	movs	r3, #3
 80191e8:	e7ea      	b.n	80191c0 <uxr_read_framed_msg+0x504>
 80191ea:	bf00      	nop

080191ec <uxr_stream_id>:
 80191ec:	2901      	cmp	r1, #1
 80191ee:	4684      	mov	ip, r0
 80191f0:	b500      	push	{lr}
 80191f2:	b083      	sub	sp, #12
 80191f4:	d01f      	beq.n	8019236 <uxr_stream_id+0x4a>
 80191f6:	2902      	cmp	r1, #2
 80191f8:	f04f 0e00 	mov.w	lr, #0
 80191fc:	d020      	beq.n	8019240 <uxr_stream_id+0x54>
 80191fe:	2300      	movs	r3, #0
 8019200:	2000      	movs	r0, #0
 8019202:	f36e 0307 	bfi	r3, lr, #0, #8
 8019206:	f36c 230f 	bfi	r3, ip, #8, #8
 801920a:	f361 4317 	bfi	r3, r1, #16, #8
 801920e:	f362 631f 	bfi	r3, r2, #24, #8
 8019212:	fa5f fc83 	uxtb.w	ip, r3
 8019216:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801921a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801921e:	0e1b      	lsrs	r3, r3, #24
 8019220:	f36c 0007 	bfi	r0, ip, #0, #8
 8019224:	f361 200f 	bfi	r0, r1, #8, #8
 8019228:	f362 4017 	bfi	r0, r2, #16, #8
 801922c:	f363 601f 	bfi	r0, r3, #24, #8
 8019230:	b003      	add	sp, #12
 8019232:	f85d fb04 	ldr.w	pc, [sp], #4
 8019236:	f100 0e01 	add.w	lr, r0, #1
 801923a:	fa5f fe8e 	uxtb.w	lr, lr
 801923e:	e7de      	b.n	80191fe <uxr_stream_id+0x12>
 8019240:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8019244:	e7db      	b.n	80191fe <uxr_stream_id+0x12>
 8019246:	bf00      	nop

08019248 <uxr_stream_id_from_raw>:
 8019248:	b082      	sub	sp, #8
 801924a:	b130      	cbz	r0, 801925a <uxr_stream_id_from_raw+0x12>
 801924c:	0603      	lsls	r3, r0, #24
 801924e:	d421      	bmi.n	8019294 <uxr_stream_id_from_raw+0x4c>
 8019250:	1e42      	subs	r2, r0, #1
 8019252:	f04f 0c01 	mov.w	ip, #1
 8019256:	b2d2      	uxtb	r2, r2
 8019258:	e001      	b.n	801925e <uxr_stream_id_from_raw+0x16>
 801925a:	4684      	mov	ip, r0
 801925c:	4602      	mov	r2, r0
 801925e:	2300      	movs	r3, #0
 8019260:	f360 0307 	bfi	r3, r0, #0, #8
 8019264:	2000      	movs	r0, #0
 8019266:	f362 230f 	bfi	r3, r2, #8, #8
 801926a:	f36c 4317 	bfi	r3, ip, #16, #8
 801926e:	f361 631f 	bfi	r3, r1, #24, #8
 8019272:	fa5f fc83 	uxtb.w	ip, r3
 8019276:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801927a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801927e:	0e1b      	lsrs	r3, r3, #24
 8019280:	f36c 0007 	bfi	r0, ip, #0, #8
 8019284:	f361 200f 	bfi	r0, r1, #8, #8
 8019288:	f362 4017 	bfi	r0, r2, #16, #8
 801928c:	f363 601f 	bfi	r0, r3, #24, #8
 8019290:	b002      	add	sp, #8
 8019292:	4770      	bx	lr
 8019294:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8019298:	f04f 0c02 	mov.w	ip, #2
 801929c:	e7df      	b.n	801925e <uxr_stream_id_from_raw+0x16>
 801929e:	bf00      	nop

080192a0 <uxr_init_stream_storage>:
 80192a0:	2300      	movs	r3, #0
 80192a2:	7403      	strb	r3, [r0, #16]
 80192a4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80192a8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80192ac:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80192b0:	4770      	bx	lr
 80192b2:	bf00      	nop

080192b4 <uxr_reset_stream_storage>:
 80192b4:	b570      	push	{r4, r5, r6, lr}
 80192b6:	7c03      	ldrb	r3, [r0, #16]
 80192b8:	4604      	mov	r4, r0
 80192ba:	b14b      	cbz	r3, 80192d0 <uxr_reset_stream_storage+0x1c>
 80192bc:	4606      	mov	r6, r0
 80192be:	2500      	movs	r5, #0
 80192c0:	4630      	mov	r0, r6
 80192c2:	3501      	adds	r5, #1
 80192c4:	f007 f9a4 	bl	8020610 <uxr_reset_output_best_effort_stream>
 80192c8:	7c23      	ldrb	r3, [r4, #16]
 80192ca:	3610      	adds	r6, #16
 80192cc:	42ab      	cmp	r3, r5
 80192ce:	d8f7      	bhi.n	80192c0 <uxr_reset_stream_storage+0xc>
 80192d0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80192d4:	b15b      	cbz	r3, 80192ee <uxr_reset_stream_storage+0x3a>
 80192d6:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80192da:	2500      	movs	r5, #0
 80192dc:	4630      	mov	r0, r6
 80192de:	3501      	adds	r5, #1
 80192e0:	f006 ff9c 	bl	802021c <uxr_reset_input_best_effort_stream>
 80192e4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80192e8:	3602      	adds	r6, #2
 80192ea:	42ab      	cmp	r3, r5
 80192ec:	d8f6      	bhi.n	80192dc <uxr_reset_stream_storage+0x28>
 80192ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80192f2:	b15b      	cbz	r3, 801930c <uxr_reset_stream_storage+0x58>
 80192f4:	f104 0618 	add.w	r6, r4, #24
 80192f8:	2500      	movs	r5, #0
 80192fa:	4630      	mov	r0, r6
 80192fc:	3501      	adds	r5, #1
 80192fe:	f007 fa33 	bl	8020768 <uxr_reset_output_reliable_stream>
 8019302:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8019306:	3628      	adds	r6, #40	@ 0x28
 8019308:	42ab      	cmp	r3, r5
 801930a:	d8f6      	bhi.n	80192fa <uxr_reset_stream_storage+0x46>
 801930c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8019310:	b15b      	cbz	r3, 801932a <uxr_reset_stream_storage+0x76>
 8019312:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8019316:	2500      	movs	r5, #0
 8019318:	4630      	mov	r0, r6
 801931a:	3501      	adds	r5, #1
 801931c:	f006 ffea 	bl	80202f4 <uxr_reset_input_reliable_stream>
 8019320:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8019324:	3618      	adds	r6, #24
 8019326:	42ab      	cmp	r3, r5
 8019328:	d8f6      	bhi.n	8019318 <uxr_reset_stream_storage+0x64>
 801932a:	bd70      	pop	{r4, r5, r6, pc}

0801932c <uxr_add_output_best_effort_buffer>:
 801932c:	b510      	push	{r4, lr}
 801932e:	7c04      	ldrb	r4, [r0, #16]
 8019330:	b082      	sub	sp, #8
 8019332:	f104 0c01 	add.w	ip, r4, #1
 8019336:	f880 c010 	strb.w	ip, [r0, #16]
 801933a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801933e:	f007 f95d 	bl	80205fc <uxr_init_output_best_effort_stream>
 8019342:	2201      	movs	r2, #1
 8019344:	4620      	mov	r0, r4
 8019346:	4611      	mov	r1, r2
 8019348:	b002      	add	sp, #8
 801934a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801934e:	f7ff bf4d 	b.w	80191ec <uxr_stream_id>
 8019352:	bf00      	nop

08019354 <uxr_add_output_reliable_buffer>:
 8019354:	b510      	push	{r4, lr}
 8019356:	b084      	sub	sp, #16
 8019358:	4684      	mov	ip, r0
 801935a:	2028      	movs	r0, #40	@ 0x28
 801935c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019360:	9400      	str	r4, [sp, #0]
 8019362:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8019366:	fb00 c004 	mla	r0, r0, r4, ip
 801936a:	f104 0e01 	add.w	lr, r4, #1
 801936e:	3018      	adds	r0, #24
 8019370:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8019374:	f007 f9c2 	bl	80206fc <uxr_init_output_reliable_stream>
 8019378:	2201      	movs	r2, #1
 801937a:	2102      	movs	r1, #2
 801937c:	4620      	mov	r0, r4
 801937e:	b004      	add	sp, #16
 8019380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019384:	f7ff bf32 	b.w	80191ec <uxr_stream_id>

08019388 <uxr_add_input_best_effort_buffer>:
 8019388:	b510      	push	{r4, lr}
 801938a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801938e:	b082      	sub	sp, #8
 8019390:	1c62      	adds	r2, r4, #1
 8019392:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8019396:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801939a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801939e:	f006 ff39 	bl	8020214 <uxr_init_input_best_effort_stream>
 80193a2:	2200      	movs	r2, #0
 80193a4:	2101      	movs	r1, #1
 80193a6:	4620      	mov	r0, r4
 80193a8:	b002      	add	sp, #8
 80193aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193ae:	f7ff bf1d 	b.w	80191ec <uxr_stream_id>
 80193b2:	bf00      	nop

080193b4 <uxr_add_input_reliable_buffer>:
 80193b4:	b510      	push	{r4, lr}
 80193b6:	b084      	sub	sp, #16
 80193b8:	4684      	mov	ip, r0
 80193ba:	2018      	movs	r0, #24
 80193bc:	9c06      	ldr	r4, [sp, #24]
 80193be:	9400      	str	r4, [sp, #0]
 80193c0:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80193c4:	fb00 c004 	mla	r0, r0, r4, ip
 80193c8:	f104 0e01 	add.w	lr, r4, #1
 80193cc:	3048      	adds	r0, #72	@ 0x48
 80193ce:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80193d2:	f006 ff69 	bl	80202a8 <uxr_init_input_reliable_stream>
 80193d6:	2200      	movs	r2, #0
 80193d8:	2102      	movs	r1, #2
 80193da:	4620      	mov	r0, r4
 80193dc:	b004      	add	sp, #16
 80193de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193e2:	f7ff bf03 	b.w	80191ec <uxr_stream_id>
 80193e6:	bf00      	nop

080193e8 <uxr_get_output_best_effort_stream>:
 80193e8:	7c03      	ldrb	r3, [r0, #16]
 80193ea:	428b      	cmp	r3, r1
 80193ec:	bf8c      	ite	hi
 80193ee:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80193f2:	2000      	movls	r0, #0
 80193f4:	4770      	bx	lr
 80193f6:	bf00      	nop

080193f8 <uxr_get_output_reliable_stream>:
 80193f8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80193fc:	428b      	cmp	r3, r1
 80193fe:	d904      	bls.n	801940a <uxr_get_output_reliable_stream+0x12>
 8019400:	2328      	movs	r3, #40	@ 0x28
 8019402:	fb03 0001 	mla	r0, r3, r1, r0
 8019406:	3018      	adds	r0, #24
 8019408:	4770      	bx	lr
 801940a:	2000      	movs	r0, #0
 801940c:	4770      	bx	lr
 801940e:	bf00      	nop

08019410 <uxr_get_input_best_effort_stream>:
 8019410:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8019414:	428b      	cmp	r3, r1
 8019416:	d903      	bls.n	8019420 <uxr_get_input_best_effort_stream+0x10>
 8019418:	3121      	adds	r1, #33	@ 0x21
 801941a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801941e:	4770      	bx	lr
 8019420:	2000      	movs	r0, #0
 8019422:	4770      	bx	lr

08019424 <uxr_get_input_reliable_stream>:
 8019424:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8019428:	428b      	cmp	r3, r1
 801942a:	d904      	bls.n	8019436 <uxr_get_input_reliable_stream+0x12>
 801942c:	2318      	movs	r3, #24
 801942e:	fb03 0001 	mla	r0, r3, r1, r0
 8019432:	3048      	adds	r0, #72	@ 0x48
 8019434:	4770      	bx	lr
 8019436:	2000      	movs	r0, #0
 8019438:	4770      	bx	lr
 801943a:	bf00      	nop

0801943c <uxr_output_streams_confirmed>:
 801943c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8019440:	b183      	cbz	r3, 8019464 <uxr_output_streams_confirmed+0x28>
 8019442:	b570      	push	{r4, r5, r6, lr}
 8019444:	4606      	mov	r6, r0
 8019446:	f100 0518 	add.w	r5, r0, #24
 801944a:	2400      	movs	r4, #0
 801944c:	e000      	b.n	8019450 <uxr_output_streams_confirmed+0x14>
 801944e:	b140      	cbz	r0, 8019462 <uxr_output_streams_confirmed+0x26>
 8019450:	4628      	mov	r0, r5
 8019452:	3401      	adds	r4, #1
 8019454:	f007 fbfc 	bl	8020c50 <uxr_is_output_up_to_date>
 8019458:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801945c:	3528      	adds	r5, #40	@ 0x28
 801945e:	42a3      	cmp	r3, r4
 8019460:	d8f5      	bhi.n	801944e <uxr_output_streams_confirmed+0x12>
 8019462:	bd70      	pop	{r4, r5, r6, pc}
 8019464:	2001      	movs	r0, #1
 8019466:	4770      	bx	lr

08019468 <uxr_buffer_submessage_header>:
 8019468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801946a:	460e      	mov	r6, r1
 801946c:	2104      	movs	r1, #4
 801946e:	4604      	mov	r4, r0
 8019470:	4615      	mov	r5, r2
 8019472:	461f      	mov	r7, r3
 8019474:	f7fa fea2 	bl	80141bc <ucdr_align_to>
 8019478:	2301      	movs	r3, #1
 801947a:	4631      	mov	r1, r6
 801947c:	4620      	mov	r0, r4
 801947e:	ea47 0203 	orr.w	r2, r7, r3
 8019482:	7523      	strb	r3, [r4, #20]
 8019484:	462b      	mov	r3, r5
 8019486:	f000 fa29 	bl	80198dc <uxr_serialize_submessage_header>
 801948a:	4620      	mov	r0, r4
 801948c:	f7fa feac 	bl	80141e8 <ucdr_buffer_remaining>
 8019490:	42a8      	cmp	r0, r5
 8019492:	bf34      	ite	cc
 8019494:	2000      	movcc	r0, #0
 8019496:	2001      	movcs	r0, #1
 8019498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801949a:	bf00      	nop

0801949c <uxr_read_submessage_header>:
 801949c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194a0:	4604      	mov	r4, r0
 80194a2:	460d      	mov	r5, r1
 80194a4:	2104      	movs	r1, #4
 80194a6:	4616      	mov	r6, r2
 80194a8:	4698      	mov	r8, r3
 80194aa:	f7fa fe87 	bl	80141bc <ucdr_align_to>
 80194ae:	4620      	mov	r0, r4
 80194b0:	f7fa fe9a 	bl	80141e8 <ucdr_buffer_remaining>
 80194b4:	2803      	cmp	r0, #3
 80194b6:	bf8c      	ite	hi
 80194b8:	2701      	movhi	r7, #1
 80194ba:	2700      	movls	r7, #0
 80194bc:	d802      	bhi.n	80194c4 <uxr_read_submessage_header+0x28>
 80194be:	4638      	mov	r0, r7
 80194c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194c4:	4633      	mov	r3, r6
 80194c6:	4642      	mov	r2, r8
 80194c8:	4620      	mov	r0, r4
 80194ca:	4629      	mov	r1, r5
 80194cc:	f000 fa1a 	bl	8019904 <uxr_deserialize_submessage_header>
 80194d0:	f898 3000 	ldrb.w	r3, [r8]
 80194d4:	4638      	mov	r0, r7
 80194d6:	f003 0201 	and.w	r2, r3, #1
 80194da:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80194de:	f888 3000 	strb.w	r3, [r8]
 80194e2:	7522      	strb	r2, [r4, #20]
 80194e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080194e8 <uxr_submessage_padding>:
 80194e8:	f010 0003 	ands.w	r0, r0, #3
 80194ec:	bf18      	it	ne
 80194ee:	f1c0 0004 	rsbne	r0, r0, #4
 80194f2:	4770      	bx	lr

080194f4 <uxr_millis>:
 80194f4:	b510      	push	{r4, lr}
 80194f6:	b084      	sub	sp, #16
 80194f8:	2001      	movs	r0, #1
 80194fa:	4669      	mov	r1, sp
 80194fc:	f7e8 ff20 	bl	8002340 <clock_gettime>
 8019500:	4908      	ldr	r1, [pc, #32]	@ (8019524 <uxr_millis+0x30>)
 8019502:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8019506:	fba0 0301 	umull	r0, r3, r0, r1
 801950a:	1900      	adds	r0, r0, r4
 801950c:	fb01 3102 	mla	r1, r1, r2, r3
 8019510:	4a05      	ldr	r2, [pc, #20]	@ (8019528 <uxr_millis+0x34>)
 8019512:	f04f 0300 	mov.w	r3, #0
 8019516:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801951a:	f7e6 ff49 	bl	80003b0 <__aeabi_ldivmod>
 801951e:	b004      	add	sp, #16
 8019520:	bd10      	pop	{r4, pc}
 8019522:	bf00      	nop
 8019524:	3b9aca00 	.word	0x3b9aca00
 8019528:	000f4240 	.word	0x000f4240

0801952c <uxr_nanos>:
 801952c:	b510      	push	{r4, lr}
 801952e:	b084      	sub	sp, #16
 8019530:	2001      	movs	r0, #1
 8019532:	4669      	mov	r1, sp
 8019534:	f7e8 ff04 	bl	8002340 <clock_gettime>
 8019538:	4a06      	ldr	r2, [pc, #24]	@ (8019554 <uxr_nanos+0x28>)
 801953a:	9800      	ldr	r0, [sp, #0]
 801953c:	9902      	ldr	r1, [sp, #8]
 801953e:	fba0 0302 	umull	r0, r3, r0, r2
 8019542:	9c01      	ldr	r4, [sp, #4]
 8019544:	1840      	adds	r0, r0, r1
 8019546:	fb02 3304 	mla	r3, r2, r4, r3
 801954a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801954e:	b004      	add	sp, #16
 8019550:	bd10      	pop	{r4, pc}
 8019552:	bf00      	nop
 8019554:	3b9aca00 	.word	0x3b9aca00

08019558 <on_full_output_buffer_fragmented>:
 8019558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801955c:	460c      	mov	r4, r1
 801955e:	b08a      	sub	sp, #40	@ 0x28
 8019560:	4606      	mov	r6, r0
 8019562:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8019566:	f104 0008 	add.w	r0, r4, #8
 801956a:	f7ff ff45 	bl	80193f8 <uxr_get_output_reliable_stream>
 801956e:	4605      	mov	r5, r0
 8019570:	f007 fb78 	bl	8020c64 <get_available_free_slots>
 8019574:	b968      	cbnz	r0, 8019592 <on_full_output_buffer_fragmented+0x3a>
 8019576:	4620      	mov	r0, r4
 8019578:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801957c:	4798      	blx	r3
 801957e:	b918      	cbnz	r0, 8019588 <on_full_output_buffer_fragmented+0x30>
 8019580:	2001      	movs	r0, #1
 8019582:	b00a      	add	sp, #40	@ 0x28
 8019584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019588:	4628      	mov	r0, r5
 801958a:	f007 fb6b 	bl	8020c64 <get_available_free_slots>
 801958e:	2800      	cmp	r0, #0
 8019590:	d0f6      	beq.n	8019580 <on_full_output_buffer_fragmented+0x28>
 8019592:	8929      	ldrh	r1, [r5, #8]
 8019594:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8019598:	89eb      	ldrh	r3, [r5, #14]
 801959a:	7b28      	ldrb	r0, [r5, #12]
 801959c:	686f      	ldr	r7, [r5, #4]
 801959e:	1a12      	subs	r2, r2, r0
 80195a0:	fbb3 f0f1 	udiv	r0, r3, r1
 80195a4:	fbb7 f7f1 	udiv	r7, r7, r1
 80195a8:	fb01 3110 	mls	r1, r1, r0, r3
 80195ac:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80195b0:	b289      	uxth	r1, r1
 80195b2:	fb07 f101 	mul.w	r1, r7, r1
 80195b6:	3f04      	subs	r7, #4
 80195b8:	443a      	add	r2, r7
 80195ba:	3104      	adds	r1, #4
 80195bc:	fa1f f882 	uxth.w	r8, r2
 80195c0:	463a      	mov	r2, r7
 80195c2:	eba3 0308 	sub.w	r3, r3, r8
 80195c6:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80195ca:	682b      	ldr	r3, [r5, #0]
 80195cc:	4419      	add	r1, r3
 80195ce:	2300      	movs	r3, #0
 80195d0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80195d4:	9000      	str	r0, [sp, #0]
 80195d6:	a802      	add	r0, sp, #8
 80195d8:	f7fa fdc2 	bl	8014160 <ucdr_init_buffer_origin_offset>
 80195dc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80195e0:	f102 0308 	add.w	r3, r2, #8
 80195e4:	42bb      	cmp	r3, r7
 80195e6:	d927      	bls.n	8019638 <on_full_output_buffer_fragmented+0xe0>
 80195e8:	4642      	mov	r2, r8
 80195ea:	2300      	movs	r3, #0
 80195ec:	210d      	movs	r1, #13
 80195ee:	a802      	add	r0, sp, #8
 80195f0:	f7ff ff3a 	bl	8019468 <uxr_buffer_submessage_header>
 80195f4:	8929      	ldrh	r1, [r5, #8]
 80195f6:	89eb      	ldrh	r3, [r5, #14]
 80195f8:	686a      	ldr	r2, [r5, #4]
 80195fa:	fbb3 f0f1 	udiv	r0, r3, r1
 80195fe:	fbb2 f2f1 	udiv	r2, r2, r1
 8019602:	fb01 3310 	mls	r3, r1, r0, r3
 8019606:	b29b      	uxth	r3, r3
 8019608:	fb02 f303 	mul.w	r3, r2, r3
 801960c:	682a      	ldr	r2, [r5, #0]
 801960e:	50d7      	str	r7, [r2, r3]
 8019610:	2101      	movs	r1, #1
 8019612:	89e8      	ldrh	r0, [r5, #14]
 8019614:	f007 fc78 	bl	8020f08 <uxr_seq_num_add>
 8019618:	9904      	ldr	r1, [sp, #16]
 801961a:	9a03      	ldr	r2, [sp, #12]
 801961c:	81e8      	strh	r0, [r5, #14]
 801961e:	4630      	mov	r0, r6
 8019620:	1a52      	subs	r2, r2, r1
 8019622:	f7fa fdaf 	bl	8014184 <ucdr_init_buffer>
 8019626:	4630      	mov	r0, r6
 8019628:	4622      	mov	r2, r4
 801962a:	490f      	ldr	r1, [pc, #60]	@ (8019668 <on_full_output_buffer_fragmented+0x110>)
 801962c:	f7fa fd7e 	bl	801412c <ucdr_set_on_full_buffer_callback>
 8019630:	2000      	movs	r0, #0
 8019632:	b00a      	add	sp, #40	@ 0x28
 8019634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019638:	b292      	uxth	r2, r2
 801963a:	2302      	movs	r3, #2
 801963c:	210d      	movs	r1, #13
 801963e:	a802      	add	r0, sp, #8
 8019640:	f7ff ff12 	bl	8019468 <uxr_buffer_submessage_header>
 8019644:	8928      	ldrh	r0, [r5, #8]
 8019646:	89eb      	ldrh	r3, [r5, #14]
 8019648:	6869      	ldr	r1, [r5, #4]
 801964a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801964e:	fbb3 f7f0 	udiv	r7, r3, r0
 8019652:	fbb1 f1f0 	udiv	r1, r1, r0
 8019656:	fb00 3317 	mls	r3, r0, r7, r3
 801965a:	3208      	adds	r2, #8
 801965c:	b29b      	uxth	r3, r3
 801965e:	fb01 f303 	mul.w	r3, r1, r3
 8019662:	6829      	ldr	r1, [r5, #0]
 8019664:	50ca      	str	r2, [r1, r3]
 8019666:	e7d3      	b.n	8019610 <on_full_output_buffer_fragmented+0xb8>
 8019668:	08019559 	.word	0x08019559

0801966c <uxr_prepare_output_stream>:
 801966c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801966e:	b087      	sub	sp, #28
 8019670:	2707      	movs	r7, #7
 8019672:	2500      	movs	r5, #0
 8019674:	461c      	mov	r4, r3
 8019676:	4606      	mov	r6, r0
 8019678:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801967c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801967e:	e9cd 7500 	strd	r7, r5, [sp]
 8019682:	3204      	adds	r2, #4
 8019684:	f7fe ffc8 	bl	8018618 <uxr_prepare_stream_to_write_submessage>
 8019688:	f080 0201 	eor.w	r2, r0, #1
 801968c:	b2d2      	uxtb	r2, r2
 801968e:	75a2      	strb	r2, [r4, #22]
 8019690:	b112      	cbz	r2, 8019698 <uxr_prepare_output_stream+0x2c>
 8019692:	4628      	mov	r0, r5
 8019694:	b007      	add	sp, #28
 8019696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019698:	aa05      	add	r2, sp, #20
 801969a:	9902      	ldr	r1, [sp, #8]
 801969c:	4630      	mov	r0, r6
 801969e:	f7ff f8f7 	bl	8018890 <uxr_init_base_object_request>
 80196a2:	a905      	add	r1, sp, #20
 80196a4:	4605      	mov	r5, r0
 80196a6:	4620      	mov	r0, r4
 80196a8:	f001 f8d2 	bl	801a850 <uxr_serialize_WRITE_DATA_Payload_Data>
 80196ac:	69a6      	ldr	r6, [r4, #24]
 80196ae:	69e7      	ldr	r7, [r4, #28]
 80196b0:	4620      	mov	r0, r4
 80196b2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80196b6:	1a52      	subs	r2, r2, r1
 80196b8:	f7fa fd64 	bl	8014184 <ucdr_init_buffer>
 80196bc:	4620      	mov	r0, r4
 80196be:	463a      	mov	r2, r7
 80196c0:	4631      	mov	r1, r6
 80196c2:	f7fa fd33 	bl	801412c <ucdr_set_on_full_buffer_callback>
 80196c6:	4628      	mov	r0, r5
 80196c8:	b007      	add	sp, #28
 80196ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080196cc <uxr_prepare_output_stream_fragmented>:
 80196cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196d0:	b091      	sub	sp, #68	@ 0x44
 80196d2:	4605      	mov	r5, r0
 80196d4:	3008      	adds	r0, #8
 80196d6:	461e      	mov	r6, r3
 80196d8:	9105      	str	r1, [sp, #20]
 80196da:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80196de:	9204      	str	r2, [sp, #16]
 80196e0:	f7ff fe8a 	bl	80193f8 <uxr_get_output_reliable_stream>
 80196e4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80196e8:	2b01      	cmp	r3, #1
 80196ea:	f000 8093 	beq.w	8019814 <uxr_prepare_output_stream_fragmented+0x148>
 80196ee:	4604      	mov	r4, r0
 80196f0:	2800      	cmp	r0, #0
 80196f2:	f000 808f 	beq.w	8019814 <uxr_prepare_output_stream_fragmented+0x148>
 80196f6:	f007 fab5 	bl	8020c64 <get_available_free_slots>
 80196fa:	2800      	cmp	r0, #0
 80196fc:	f000 8085 	beq.w	801980a <uxr_prepare_output_stream_fragmented+0x13e>
 8019700:	8923      	ldrh	r3, [r4, #8]
 8019702:	89e7      	ldrh	r7, [r4, #14]
 8019704:	6862      	ldr	r2, [r4, #4]
 8019706:	fbb7 f9f3 	udiv	r9, r7, r3
 801970a:	fbb2 f2f3 	udiv	r2, r2, r3
 801970e:	fb03 7919 	mls	r9, r3, r9, r7
 8019712:	6823      	ldr	r3, [r4, #0]
 8019714:	f1a2 0b04 	sub.w	fp, r2, #4
 8019718:	9203      	str	r2, [sp, #12]
 801971a:	fa1f f989 	uxth.w	r9, r9
 801971e:	fb02 f909 	mul.w	r9, r2, r9
 8019722:	f109 0904 	add.w	r9, r9, #4
 8019726:	4499      	add	r9, r3
 8019728:	7b23      	ldrb	r3, [r4, #12]
 801972a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801972e:	4543      	cmp	r3, r8
 8019730:	d37c      	bcc.n	801982c <uxr_prepare_output_stream_fragmented+0x160>
 8019732:	f1ab 0a04 	sub.w	sl, fp, #4
 8019736:	465a      	mov	r2, fp
 8019738:	4649      	mov	r1, r9
 801973a:	a808      	add	r0, sp, #32
 801973c:	ebaa 0a03 	sub.w	sl, sl, r3
 8019740:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8019742:	f8cd 8000 	str.w	r8, [sp]
 8019746:	3308      	adds	r3, #8
 8019748:	fa1f fa8a 	uxth.w	sl, sl
 801974c:	9302      	str	r3, [sp, #8]
 801974e:	2300      	movs	r3, #0
 8019750:	f7fa fd06 	bl	8014160 <ucdr_init_buffer_origin_offset>
 8019754:	9b02      	ldr	r3, [sp, #8]
 8019756:	4652      	mov	r2, sl
 8019758:	210d      	movs	r1, #13
 801975a:	455b      	cmp	r3, fp
 801975c:	bf34      	ite	cc
 801975e:	2302      	movcc	r3, #2
 8019760:	2300      	movcs	r3, #0
 8019762:	a808      	add	r0, sp, #32
 8019764:	f7ff fe80 	bl	8019468 <uxr_buffer_submessage_header>
 8019768:	8921      	ldrh	r1, [r4, #8]
 801976a:	6863      	ldr	r3, [r4, #4]
 801976c:	4638      	mov	r0, r7
 801976e:	fbb7 f2f1 	udiv	r2, r7, r1
 8019772:	fbb3 f3f1 	udiv	r3, r3, r1
 8019776:	fb01 7212 	mls	r2, r1, r2, r7
 801977a:	2101      	movs	r1, #1
 801977c:	b292      	uxth	r2, r2
 801977e:	fb02 f303 	mul.w	r3, r2, r3
 8019782:	6822      	ldr	r2, [r4, #0]
 8019784:	f842 b003 	str.w	fp, [r2, r3]
 8019788:	f007 fbbe 	bl	8020f08 <uxr_seq_num_add>
 801978c:	9b03      	ldr	r3, [sp, #12]
 801978e:	f108 0104 	add.w	r1, r8, #4
 8019792:	4607      	mov	r7, r0
 8019794:	f1a3 0208 	sub.w	r2, r3, #8
 8019798:	4630      	mov	r0, r6
 801979a:	4449      	add	r1, r9
 801979c:	eba2 0208 	sub.w	r2, r2, r8
 80197a0:	f7fa fcf0 	bl	8014184 <ucdr_init_buffer>
 80197a4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80197a6:	2107      	movs	r1, #7
 80197a8:	81e7      	strh	r7, [r4, #14]
 80197aa:	1d1a      	adds	r2, r3, #4
 80197ac:	2300      	movs	r3, #0
 80197ae:	4630      	mov	r0, r6
 80197b0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80197b4:	bf28      	it	cs
 80197b6:	461a      	movcs	r2, r3
 80197b8:	b292      	uxth	r2, r2
 80197ba:	f7ff fe55 	bl	8019468 <uxr_buffer_submessage_header>
 80197be:	aa07      	add	r2, sp, #28
 80197c0:	9904      	ldr	r1, [sp, #16]
 80197c2:	4628      	mov	r0, r5
 80197c4:	f7ff f864 	bl	8018890 <uxr_init_base_object_request>
 80197c8:	4604      	mov	r4, r0
 80197ca:	b320      	cbz	r0, 8019816 <uxr_prepare_output_stream_fragmented+0x14a>
 80197cc:	a907      	add	r1, sp, #28
 80197ce:	4630      	mov	r0, r6
 80197d0:	f001 f83e 	bl	801a850 <uxr_serialize_WRITE_DATA_Payload_Data>
 80197d4:	4630      	mov	r0, r6
 80197d6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80197da:	1a52      	subs	r2, r2, r1
 80197dc:	f7fa fcd2 	bl	8014184 <ucdr_init_buffer>
 80197e0:	9b05      	ldr	r3, [sp, #20]
 80197e2:	9a02      	ldr	r2, [sp, #8]
 80197e4:	4630      	mov	r0, r6
 80197e6:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80197ea:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80197ec:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 80197f0:	462a      	mov	r2, r5
 80197f2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80197f6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80197f8:	4918      	ldr	r1, [pc, #96]	@ (801985c <uxr_prepare_output_stream_fragmented+0x190>)
 80197fa:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80197fe:	f7fa fc95 	bl	801412c <ucdr_set_on_full_buffer_callback>
 8019802:	4620      	mov	r0, r4
 8019804:	b011      	add	sp, #68	@ 0x44
 8019806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801980a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801980c:	4628      	mov	r0, r5
 801980e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8019810:	4798      	blx	r3
 8019812:	b920      	cbnz	r0, 801981e <uxr_prepare_output_stream_fragmented+0x152>
 8019814:	2400      	movs	r4, #0
 8019816:	4620      	mov	r0, r4
 8019818:	b011      	add	sp, #68	@ 0x44
 801981a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801981e:	4620      	mov	r0, r4
 8019820:	f007 fa20 	bl	8020c64 <get_available_free_slots>
 8019824:	2800      	cmp	r0, #0
 8019826:	f47f af6b 	bne.w	8019700 <uxr_prepare_output_stream_fragmented+0x34>
 801982a:	e7f3      	b.n	8019814 <uxr_prepare_output_stream_fragmented+0x148>
 801982c:	4638      	mov	r0, r7
 801982e:	2101      	movs	r1, #1
 8019830:	f007 fb6a 	bl	8020f08 <uxr_seq_num_add>
 8019834:	8922      	ldrh	r2, [r4, #8]
 8019836:	6863      	ldr	r3, [r4, #4]
 8019838:	4607      	mov	r7, r0
 801983a:	fbb3 f9f2 	udiv	r9, r3, r2
 801983e:	fbb0 f3f2 	udiv	r3, r0, r2
 8019842:	fb02 0313 	mls	r3, r2, r3, r0
 8019846:	b29b      	uxth	r3, r3
 8019848:	fb03 f909 	mul.w	r9, r3, r9
 801984c:	6823      	ldr	r3, [r4, #0]
 801984e:	f109 0904 	add.w	r9, r9, #4
 8019852:	4499      	add	r9, r3
 8019854:	7b23      	ldrb	r3, [r4, #12]
 8019856:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801985a:	e76a      	b.n	8019732 <uxr_prepare_output_stream_fragmented+0x66>
 801985c:	08019559 	.word	0x08019559

08019860 <uxr_serialize_message_header>:
 8019860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019862:	4616      	mov	r6, r2
 8019864:	b083      	sub	sp, #12
 8019866:	4604      	mov	r4, r0
 8019868:	460d      	mov	r5, r1
 801986a:	9301      	str	r3, [sp, #4]
 801986c:	9f08      	ldr	r7, [sp, #32]
 801986e:	f7f9 fa1f 	bl	8012cb0 <ucdr_serialize_uint8_t>
 8019872:	4631      	mov	r1, r6
 8019874:	4620      	mov	r0, r4
 8019876:	f7f9 fa1b 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801987a:	9a01      	ldr	r2, [sp, #4]
 801987c:	2101      	movs	r1, #1
 801987e:	4620      	mov	r0, r4
 8019880:	f7f9 fac2 	bl	8012e08 <ucdr_serialize_endian_uint16_t>
 8019884:	062b      	lsls	r3, r5, #24
 8019886:	d501      	bpl.n	801988c <uxr_serialize_message_header+0x2c>
 8019888:	b003      	add	sp, #12
 801988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801988c:	2204      	movs	r2, #4
 801988e:	4639      	mov	r1, r7
 8019890:	4620      	mov	r0, r4
 8019892:	b003      	add	sp, #12
 8019894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019898:	f006 bbd8 	b.w	802004c <ucdr_serialize_array_uint8_t>

0801989c <uxr_deserialize_message_header>:
 801989c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801989e:	4616      	mov	r6, r2
 80198a0:	b083      	sub	sp, #12
 80198a2:	4604      	mov	r4, r0
 80198a4:	460d      	mov	r5, r1
 80198a6:	9301      	str	r3, [sp, #4]
 80198a8:	9f08      	ldr	r7, [sp, #32]
 80198aa:	f7f9 fa17 	bl	8012cdc <ucdr_deserialize_uint8_t>
 80198ae:	4631      	mov	r1, r6
 80198b0:	4620      	mov	r0, r4
 80198b2:	f7f9 fa13 	bl	8012cdc <ucdr_deserialize_uint8_t>
 80198b6:	9a01      	ldr	r2, [sp, #4]
 80198b8:	2101      	movs	r1, #1
 80198ba:	4620      	mov	r0, r4
 80198bc:	f7f9 fb98 	bl	8012ff0 <ucdr_deserialize_endian_uint16_t>
 80198c0:	f995 3000 	ldrsb.w	r3, [r5]
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	da01      	bge.n	80198cc <uxr_deserialize_message_header+0x30>
 80198c8:	b003      	add	sp, #12
 80198ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198cc:	2204      	movs	r2, #4
 80198ce:	4639      	mov	r1, r7
 80198d0:	4620      	mov	r0, r4
 80198d2:	b003      	add	sp, #12
 80198d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80198d8:	f006 bc1c 	b.w	8020114 <ucdr_deserialize_array_uint8_t>

080198dc <uxr_serialize_submessage_header>:
 80198dc:	b530      	push	{r4, r5, lr}
 80198de:	4615      	mov	r5, r2
 80198e0:	b083      	sub	sp, #12
 80198e2:	4604      	mov	r4, r0
 80198e4:	9301      	str	r3, [sp, #4]
 80198e6:	f7f9 f9e3 	bl	8012cb0 <ucdr_serialize_uint8_t>
 80198ea:	4629      	mov	r1, r5
 80198ec:	4620      	mov	r0, r4
 80198ee:	f7f9 f9df 	bl	8012cb0 <ucdr_serialize_uint8_t>
 80198f2:	9a01      	ldr	r2, [sp, #4]
 80198f4:	2101      	movs	r1, #1
 80198f6:	4620      	mov	r0, r4
 80198f8:	b003      	add	sp, #12
 80198fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198fe:	f7f9 ba83 	b.w	8012e08 <ucdr_serialize_endian_uint16_t>
 8019902:	bf00      	nop

08019904 <uxr_deserialize_submessage_header>:
 8019904:	b530      	push	{r4, r5, lr}
 8019906:	4615      	mov	r5, r2
 8019908:	b083      	sub	sp, #12
 801990a:	4604      	mov	r4, r0
 801990c:	9301      	str	r3, [sp, #4]
 801990e:	f7f9 f9e5 	bl	8012cdc <ucdr_deserialize_uint8_t>
 8019912:	4629      	mov	r1, r5
 8019914:	4620      	mov	r0, r4
 8019916:	f7f9 f9e1 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801991a:	9a01      	ldr	r2, [sp, #4]
 801991c:	2101      	movs	r1, #1
 801991e:	4620      	mov	r0, r4
 8019920:	b003      	add	sp, #12
 8019922:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019926:	f7f9 bb63 	b.w	8012ff0 <ucdr_deserialize_endian_uint16_t>
 801992a:	bf00      	nop

0801992c <uxr_serialize_CLIENT_Representation>:
 801992c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019930:	2204      	movs	r2, #4
 8019932:	460e      	mov	r6, r1
 8019934:	4605      	mov	r5, r0
 8019936:	f006 fb89 	bl	802004c <ucdr_serialize_array_uint8_t>
 801993a:	4607      	mov	r7, r0
 801993c:	2202      	movs	r2, #2
 801993e:	1d31      	adds	r1, r6, #4
 8019940:	4628      	mov	r0, r5
 8019942:	f006 fb83 	bl	802004c <ucdr_serialize_array_uint8_t>
 8019946:	4038      	ands	r0, r7
 8019948:	2202      	movs	r2, #2
 801994a:	1db1      	adds	r1, r6, #6
 801994c:	b2c7      	uxtb	r7, r0
 801994e:	4628      	mov	r0, r5
 8019950:	f006 fb7c 	bl	802004c <ucdr_serialize_array_uint8_t>
 8019954:	2204      	movs	r2, #4
 8019956:	4007      	ands	r7, r0
 8019958:	f106 0108 	add.w	r1, r6, #8
 801995c:	4628      	mov	r0, r5
 801995e:	f006 fb75 	bl	802004c <ucdr_serialize_array_uint8_t>
 8019962:	4007      	ands	r7, r0
 8019964:	7b31      	ldrb	r1, [r6, #12]
 8019966:	4628      	mov	r0, r5
 8019968:	f7f9 f9a2 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801996c:	7b71      	ldrb	r1, [r6, #13]
 801996e:	4007      	ands	r7, r0
 8019970:	4628      	mov	r0, r5
 8019972:	f7f9 f96f 	bl	8012c54 <ucdr_serialize_bool>
 8019976:	7b73      	ldrb	r3, [r6, #13]
 8019978:	ea07 0800 	and.w	r8, r7, r0
 801997c:	b93b      	cbnz	r3, 801998e <uxr_serialize_CLIENT_Representation+0x62>
 801997e:	8bb1      	ldrh	r1, [r6, #28]
 8019980:	4628      	mov	r0, r5
 8019982:	f7f9 f9c1 	bl	8012d08 <ucdr_serialize_uint16_t>
 8019986:	ea08 0000 	and.w	r0, r8, r0
 801998a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801998e:	6931      	ldr	r1, [r6, #16]
 8019990:	4628      	mov	r0, r5
 8019992:	f7f9 fba3 	bl	80130dc <ucdr_serialize_uint32_t>
 8019996:	6933      	ldr	r3, [r6, #16]
 8019998:	b1e3      	cbz	r3, 80199d4 <uxr_serialize_CLIENT_Representation+0xa8>
 801999a:	b1c0      	cbz	r0, 80199ce <uxr_serialize_CLIENT_Representation+0xa2>
 801999c:	4637      	mov	r7, r6
 801999e:	f04f 0900 	mov.w	r9, #0
 80199a2:	e000      	b.n	80199a6 <uxr_serialize_CLIENT_Representation+0x7a>
 80199a4:	b19c      	cbz	r4, 80199ce <uxr_serialize_CLIENT_Representation+0xa2>
 80199a6:	6979      	ldr	r1, [r7, #20]
 80199a8:	4628      	mov	r0, r5
 80199aa:	f006 fc1b 	bl	80201e4 <ucdr_serialize_string>
 80199ae:	69b9      	ldr	r1, [r7, #24]
 80199b0:	4604      	mov	r4, r0
 80199b2:	4628      	mov	r0, r5
 80199b4:	f006 fc16 	bl	80201e4 <ucdr_serialize_string>
 80199b8:	f109 0901 	add.w	r9, r9, #1
 80199bc:	6933      	ldr	r3, [r6, #16]
 80199be:	4004      	ands	r4, r0
 80199c0:	3708      	adds	r7, #8
 80199c2:	4599      	cmp	r9, r3
 80199c4:	b2e4      	uxtb	r4, r4
 80199c6:	d3ed      	bcc.n	80199a4 <uxr_serialize_CLIENT_Representation+0x78>
 80199c8:	ea08 0804 	and.w	r8, r8, r4
 80199cc:	e7d7      	b.n	801997e <uxr_serialize_CLIENT_Representation+0x52>
 80199ce:	f04f 0800 	mov.w	r8, #0
 80199d2:	e7d4      	b.n	801997e <uxr_serialize_CLIENT_Representation+0x52>
 80199d4:	ea08 0800 	and.w	r8, r8, r0
 80199d8:	e7d1      	b.n	801997e <uxr_serialize_CLIENT_Representation+0x52>
 80199da:	bf00      	nop

080199dc <uxr_deserialize_CLIENT_Representation>:
 80199dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199e0:	2204      	movs	r2, #4
 80199e2:	460c      	mov	r4, r1
 80199e4:	4605      	mov	r5, r0
 80199e6:	f006 fb95 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 80199ea:	4607      	mov	r7, r0
 80199ec:	2202      	movs	r2, #2
 80199ee:	1d21      	adds	r1, r4, #4
 80199f0:	4628      	mov	r0, r5
 80199f2:	f006 fb8f 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 80199f6:	4038      	ands	r0, r7
 80199f8:	2202      	movs	r2, #2
 80199fa:	1da1      	adds	r1, r4, #6
 80199fc:	b2c6      	uxtb	r6, r0
 80199fe:	4628      	mov	r0, r5
 8019a00:	f006 fb88 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 8019a04:	2204      	movs	r2, #4
 8019a06:	4006      	ands	r6, r0
 8019a08:	f104 0108 	add.w	r1, r4, #8
 8019a0c:	4628      	mov	r0, r5
 8019a0e:	f006 fb81 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 8019a12:	4006      	ands	r6, r0
 8019a14:	f104 010c 	add.w	r1, r4, #12
 8019a18:	4628      	mov	r0, r5
 8019a1a:	f7f9 f95f 	bl	8012cdc <ucdr_deserialize_uint8_t>
 8019a1e:	f104 010d 	add.w	r1, r4, #13
 8019a22:	ea06 0700 	and.w	r7, r6, r0
 8019a26:	4628      	mov	r0, r5
 8019a28:	f7f9 f92a 	bl	8012c80 <ucdr_deserialize_bool>
 8019a2c:	7b63      	ldrb	r3, [r4, #13]
 8019a2e:	4007      	ands	r7, r0
 8019a30:	b93b      	cbnz	r3, 8019a42 <uxr_deserialize_CLIENT_Representation+0x66>
 8019a32:	f104 011c 	add.w	r1, r4, #28
 8019a36:	4628      	mov	r0, r5
 8019a38:	f7f9 fa66 	bl	8012f08 <ucdr_deserialize_uint16_t>
 8019a3c:	4038      	ands	r0, r7
 8019a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a42:	f104 0110 	add.w	r1, r4, #16
 8019a46:	4628      	mov	r0, r5
 8019a48:	f7f9 fc78 	bl	801333c <ucdr_deserialize_uint32_t>
 8019a4c:	6923      	ldr	r3, [r4, #16]
 8019a4e:	2b01      	cmp	r3, #1
 8019a50:	d903      	bls.n	8019a5a <uxr_deserialize_CLIENT_Representation+0x7e>
 8019a52:	2301      	movs	r3, #1
 8019a54:	2700      	movs	r7, #0
 8019a56:	75ab      	strb	r3, [r5, #22]
 8019a58:	e7eb      	b.n	8019a32 <uxr_deserialize_CLIENT_Representation+0x56>
 8019a5a:	b30b      	cbz	r3, 8019aa0 <uxr_deserialize_CLIENT_Representation+0xc4>
 8019a5c:	b1f0      	cbz	r0, 8019a9c <uxr_deserialize_CLIENT_Representation+0xc0>
 8019a5e:	46a0      	mov	r8, r4
 8019a60:	f04f 0900 	mov.w	r9, #0
 8019a64:	e000      	b.n	8019a68 <uxr_deserialize_CLIENT_Representation+0x8c>
 8019a66:	b1ce      	cbz	r6, 8019a9c <uxr_deserialize_CLIENT_Representation+0xc0>
 8019a68:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8019a6c:	f108 0808 	add.w	r8, r8, #8
 8019a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019a74:	4628      	mov	r0, r5
 8019a76:	f006 fbc5 	bl	8020204 <ucdr_deserialize_string>
 8019a7a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019a7e:	4606      	mov	r6, r0
 8019a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019a84:	4628      	mov	r0, r5
 8019a86:	f109 0901 	add.w	r9, r9, #1
 8019a8a:	f006 fbbb 	bl	8020204 <ucdr_deserialize_string>
 8019a8e:	6923      	ldr	r3, [r4, #16]
 8019a90:	4006      	ands	r6, r0
 8019a92:	4599      	cmp	r9, r3
 8019a94:	b2f6      	uxtb	r6, r6
 8019a96:	d3e6      	bcc.n	8019a66 <uxr_deserialize_CLIENT_Representation+0x8a>
 8019a98:	4037      	ands	r7, r6
 8019a9a:	e7ca      	b.n	8019a32 <uxr_deserialize_CLIENT_Representation+0x56>
 8019a9c:	2700      	movs	r7, #0
 8019a9e:	e7c8      	b.n	8019a32 <uxr_deserialize_CLIENT_Representation+0x56>
 8019aa0:	4007      	ands	r7, r0
 8019aa2:	e7c6      	b.n	8019a32 <uxr_deserialize_CLIENT_Representation+0x56>

08019aa4 <uxr_serialize_AGENT_Representation>:
 8019aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019aa8:	2204      	movs	r2, #4
 8019aaa:	460f      	mov	r7, r1
 8019aac:	4605      	mov	r5, r0
 8019aae:	f006 facd 	bl	802004c <ucdr_serialize_array_uint8_t>
 8019ab2:	4604      	mov	r4, r0
 8019ab4:	2202      	movs	r2, #2
 8019ab6:	1d39      	adds	r1, r7, #4
 8019ab8:	4628      	mov	r0, r5
 8019aba:	f006 fac7 	bl	802004c <ucdr_serialize_array_uint8_t>
 8019abe:	4020      	ands	r0, r4
 8019ac0:	2202      	movs	r2, #2
 8019ac2:	1db9      	adds	r1, r7, #6
 8019ac4:	b2c4      	uxtb	r4, r0
 8019ac6:	4628      	mov	r0, r5
 8019ac8:	f006 fac0 	bl	802004c <ucdr_serialize_array_uint8_t>
 8019acc:	7a39      	ldrb	r1, [r7, #8]
 8019ace:	4004      	ands	r4, r0
 8019ad0:	4628      	mov	r0, r5
 8019ad2:	f7f9 f8bf 	bl	8012c54 <ucdr_serialize_bool>
 8019ad6:	7a3b      	ldrb	r3, [r7, #8]
 8019ad8:	ea00 0804 	and.w	r8, r0, r4
 8019adc:	b913      	cbnz	r3, 8019ae4 <uxr_serialize_AGENT_Representation+0x40>
 8019ade:	4640      	mov	r0, r8
 8019ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ae4:	68f9      	ldr	r1, [r7, #12]
 8019ae6:	4628      	mov	r0, r5
 8019ae8:	f7f9 faf8 	bl	80130dc <ucdr_serialize_uint32_t>
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	b303      	cbz	r3, 8019b32 <uxr_serialize_AGENT_Representation+0x8e>
 8019af0:	b1d0      	cbz	r0, 8019b28 <uxr_serialize_AGENT_Representation+0x84>
 8019af2:	463e      	mov	r6, r7
 8019af4:	f04f 0900 	mov.w	r9, #0
 8019af8:	e000      	b.n	8019afc <uxr_serialize_AGENT_Representation+0x58>
 8019afa:	b1ac      	cbz	r4, 8019b28 <uxr_serialize_AGENT_Representation+0x84>
 8019afc:	6931      	ldr	r1, [r6, #16]
 8019afe:	4628      	mov	r0, r5
 8019b00:	f006 fb70 	bl	80201e4 <ucdr_serialize_string>
 8019b04:	6971      	ldr	r1, [r6, #20]
 8019b06:	4604      	mov	r4, r0
 8019b08:	4628      	mov	r0, r5
 8019b0a:	f006 fb6b 	bl	80201e4 <ucdr_serialize_string>
 8019b0e:	f109 0901 	add.w	r9, r9, #1
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	4004      	ands	r4, r0
 8019b16:	3608      	adds	r6, #8
 8019b18:	4599      	cmp	r9, r3
 8019b1a:	b2e4      	uxtb	r4, r4
 8019b1c:	d3ed      	bcc.n	8019afa <uxr_serialize_AGENT_Representation+0x56>
 8019b1e:	ea08 0804 	and.w	r8, r8, r4
 8019b22:	4640      	mov	r0, r8
 8019b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b28:	f04f 0800 	mov.w	r8, #0
 8019b2c:	4640      	mov	r0, r8
 8019b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b32:	ea08 0800 	and.w	r8, r8, r0
 8019b36:	e7d2      	b.n	8019ade <uxr_serialize_AGENT_Representation+0x3a>

08019b38 <uxr_serialize_DATAWRITER_Representation>:
 8019b38:	b570      	push	{r4, r5, r6, lr}
 8019b3a:	460d      	mov	r5, r1
 8019b3c:	7809      	ldrb	r1, [r1, #0]
 8019b3e:	4606      	mov	r6, r0
 8019b40:	f7f9 f8b6 	bl	8012cb0 <ucdr_serialize_uint8_t>
 8019b44:	4604      	mov	r4, r0
 8019b46:	b130      	cbz	r0, 8019b56 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019b48:	782b      	ldrb	r3, [r5, #0]
 8019b4a:	2b02      	cmp	r3, #2
 8019b4c:	d00c      	beq.n	8019b68 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019b4e:	2b03      	cmp	r3, #3
 8019b50:	d010      	beq.n	8019b74 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8019b52:	2b01      	cmp	r3, #1
 8019b54:	d008      	beq.n	8019b68 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019b56:	2202      	movs	r2, #2
 8019b58:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019b5c:	4630      	mov	r0, r6
 8019b5e:	f006 fa75 	bl	802004c <ucdr_serialize_array_uint8_t>
 8019b62:	4020      	ands	r0, r4
 8019b64:	b2c0      	uxtb	r0, r0
 8019b66:	bd70      	pop	{r4, r5, r6, pc}
 8019b68:	6869      	ldr	r1, [r5, #4]
 8019b6a:	4630      	mov	r0, r6
 8019b6c:	f006 fb3a 	bl	80201e4 <ucdr_serialize_string>
 8019b70:	4604      	mov	r4, r0
 8019b72:	e7f0      	b.n	8019b56 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019b74:	4629      	mov	r1, r5
 8019b76:	4630      	mov	r0, r6
 8019b78:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8019b7c:	3104      	adds	r1, #4
 8019b7e:	f7fd f945 	bl	8016e0c <ucdr_serialize_sequence_uint8_t>
 8019b82:	4604      	mov	r4, r0
 8019b84:	e7e7      	b.n	8019b56 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019b86:	bf00      	nop

08019b88 <uxr_serialize_ObjectVariant.part.0>:
 8019b88:	b570      	push	{r4, r5, r6, lr}
 8019b8a:	780b      	ldrb	r3, [r1, #0]
 8019b8c:	460c      	mov	r4, r1
 8019b8e:	4605      	mov	r5, r0
 8019b90:	3b01      	subs	r3, #1
 8019b92:	2b0d      	cmp	r3, #13
 8019b94:	d854      	bhi.n	8019c40 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019b96:	e8df f003 	tbb	[pc, r3]
 8019b9a:	0730      	.short	0x0730
 8019b9c:	07071b1b 	.word	0x07071b1b
 8019ba0:	0c530707 	.word	0x0c530707
 8019ba4:	494e0c0c 	.word	0x494e0c0c
 8019ba8:	3104      	adds	r1, #4
 8019baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bae:	f7ff bfc3 	b.w	8019b38 <uxr_serialize_DATAWRITER_Representation>
 8019bb2:	7909      	ldrb	r1, [r1, #4]
 8019bb4:	f7f9 f87c 	bl	8012cb0 <ucdr_serialize_uint8_t>
 8019bb8:	b1e8      	cbz	r0, 8019bf6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8019bba:	7923      	ldrb	r3, [r4, #4]
 8019bbc:	2b01      	cmp	r3, #1
 8019bbe:	d001      	beq.n	8019bc4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8019bc0:	2b02      	cmp	r3, #2
 8019bc2:	d13d      	bne.n	8019c40 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019bc4:	68a1      	ldr	r1, [r4, #8]
 8019bc6:	4628      	mov	r0, r5
 8019bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bcc:	f006 bb0a 	b.w	80201e4 <ucdr_serialize_string>
 8019bd0:	7909      	ldrb	r1, [r1, #4]
 8019bd2:	f7f9 f86d 	bl	8012cb0 <ucdr_serialize_uint8_t>
 8019bd6:	4606      	mov	r6, r0
 8019bd8:	b120      	cbz	r0, 8019be4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019bda:	7923      	ldrb	r3, [r4, #4]
 8019bdc:	2b02      	cmp	r3, #2
 8019bde:	d039      	beq.n	8019c54 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8019be0:	2b03      	cmp	r3, #3
 8019be2:	d02f      	beq.n	8019c44 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8019be4:	2202      	movs	r2, #2
 8019be6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8019bea:	4628      	mov	r0, r5
 8019bec:	f006 fa2e 	bl	802004c <ucdr_serialize_array_uint8_t>
 8019bf0:	4030      	ands	r0, r6
 8019bf2:	b2c0      	uxtb	r0, r0
 8019bf4:	bd70      	pop	{r4, r5, r6, pc}
 8019bf6:	2000      	movs	r0, #0
 8019bf8:	bd70      	pop	{r4, r5, r6, pc}
 8019bfa:	7909      	ldrb	r1, [r1, #4]
 8019bfc:	f7f9 f858 	bl	8012cb0 <ucdr_serialize_uint8_t>
 8019c00:	4606      	mov	r6, r0
 8019c02:	b158      	cbz	r0, 8019c1c <uxr_serialize_ObjectVariant.part.0+0x94>
 8019c04:	7923      	ldrb	r3, [r4, #4]
 8019c06:	2b02      	cmp	r3, #2
 8019c08:	d003      	beq.n	8019c12 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8019c0a:	2b03      	cmp	r3, #3
 8019c0c:	d028      	beq.n	8019c60 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8019c0e:	2b01      	cmp	r3, #1
 8019c10:	d104      	bne.n	8019c1c <uxr_serialize_ObjectVariant.part.0+0x94>
 8019c12:	68a1      	ldr	r1, [r4, #8]
 8019c14:	4628      	mov	r0, r5
 8019c16:	f006 fae5 	bl	80201e4 <ucdr_serialize_string>
 8019c1a:	4606      	mov	r6, r0
 8019c1c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8019c20:	4628      	mov	r0, r5
 8019c22:	f7f9 fd81 	bl	8013728 <ucdr_serialize_int16_t>
 8019c26:	4030      	ands	r0, r6
 8019c28:	b2c0      	uxtb	r0, r0
 8019c2a:	bd70      	pop	{r4, r5, r6, pc}
 8019c2c:	3104      	adds	r1, #4
 8019c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c32:	f7ff be7b 	b.w	801992c <uxr_serialize_CLIENT_Representation>
 8019c36:	3104      	adds	r1, #4
 8019c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c3c:	f7ff bf32 	b.w	8019aa4 <uxr_serialize_AGENT_Representation>
 8019c40:	2001      	movs	r0, #1
 8019c42:	bd70      	pop	{r4, r5, r6, pc}
 8019c44:	68a2      	ldr	r2, [r4, #8]
 8019c46:	f104 010c 	add.w	r1, r4, #12
 8019c4a:	4628      	mov	r0, r5
 8019c4c:	f7fd f8de 	bl	8016e0c <ucdr_serialize_sequence_uint8_t>
 8019c50:	4606      	mov	r6, r0
 8019c52:	e7c7      	b.n	8019be4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019c54:	68a1      	ldr	r1, [r4, #8]
 8019c56:	4628      	mov	r0, r5
 8019c58:	f006 fac4 	bl	80201e4 <ucdr_serialize_string>
 8019c5c:	4606      	mov	r6, r0
 8019c5e:	e7c1      	b.n	8019be4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019c60:	68a2      	ldr	r2, [r4, #8]
 8019c62:	f104 010c 	add.w	r1, r4, #12
 8019c66:	4628      	mov	r0, r5
 8019c68:	f7fd f8d0 	bl	8016e0c <ucdr_serialize_sequence_uint8_t>
 8019c6c:	4606      	mov	r6, r0
 8019c6e:	e7d5      	b.n	8019c1c <uxr_serialize_ObjectVariant.part.0+0x94>

08019c70 <uxr_deserialize_DATAWRITER_Representation>:
 8019c70:	b570      	push	{r4, r5, r6, lr}
 8019c72:	4606      	mov	r6, r0
 8019c74:	460d      	mov	r5, r1
 8019c76:	f7f9 f831 	bl	8012cdc <ucdr_deserialize_uint8_t>
 8019c7a:	4604      	mov	r4, r0
 8019c7c:	b130      	cbz	r0, 8019c8c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019c7e:	782b      	ldrb	r3, [r5, #0]
 8019c80:	2b02      	cmp	r3, #2
 8019c82:	d00c      	beq.n	8019c9e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019c84:	2b03      	cmp	r3, #3
 8019c86:	d012      	beq.n	8019cae <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8019c88:	2b01      	cmp	r3, #1
 8019c8a:	d008      	beq.n	8019c9e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019c8c:	2202      	movs	r2, #2
 8019c8e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019c92:	4630      	mov	r0, r6
 8019c94:	f006 fa3e 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 8019c98:	4020      	ands	r0, r4
 8019c9a:	b2c0      	uxtb	r0, r0
 8019c9c:	bd70      	pop	{r4, r5, r6, pc}
 8019c9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019ca2:	6869      	ldr	r1, [r5, #4]
 8019ca4:	4630      	mov	r0, r6
 8019ca6:	f006 faad 	bl	8020204 <ucdr_deserialize_string>
 8019caa:	4604      	mov	r4, r0
 8019cac:	e7ee      	b.n	8019c8c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019cae:	1d2b      	adds	r3, r5, #4
 8019cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019cb4:	f105 0108 	add.w	r1, r5, #8
 8019cb8:	4630      	mov	r0, r6
 8019cba:	f7fd f8b9 	bl	8016e30 <ucdr_deserialize_sequence_uint8_t>
 8019cbe:	4604      	mov	r4, r0
 8019cc0:	e7e4      	b.n	8019c8c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019cc2:	bf00      	nop

08019cc4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8019cc4:	b570      	push	{r4, r5, r6, lr}
 8019cc6:	460d      	mov	r5, r1
 8019cc8:	7809      	ldrb	r1, [r1, #0]
 8019cca:	4606      	mov	r6, r0
 8019ccc:	f7f8 ffc2 	bl	8012c54 <ucdr_serialize_bool>
 8019cd0:	782b      	ldrb	r3, [r5, #0]
 8019cd2:	4604      	mov	r4, r0
 8019cd4:	b94b      	cbnz	r3, 8019cea <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8019cd6:	7a29      	ldrb	r1, [r5, #8]
 8019cd8:	4630      	mov	r0, r6
 8019cda:	f7f8 ffbb 	bl	8012c54 <ucdr_serialize_bool>
 8019cde:	7a2b      	ldrb	r3, [r5, #8]
 8019ce0:	4004      	ands	r4, r0
 8019ce2:	b2e4      	uxtb	r4, r4
 8019ce4:	b943      	cbnz	r3, 8019cf8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8019ce6:	4620      	mov	r0, r4
 8019ce8:	bd70      	pop	{r4, r5, r6, pc}
 8019cea:	6869      	ldr	r1, [r5, #4]
 8019cec:	4630      	mov	r0, r6
 8019cee:	f006 fa79 	bl	80201e4 <ucdr_serialize_string>
 8019cf2:	4004      	ands	r4, r0
 8019cf4:	b2e4      	uxtb	r4, r4
 8019cf6:	e7ee      	b.n	8019cd6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8019cf8:	68e9      	ldr	r1, [r5, #12]
 8019cfa:	4630      	mov	r0, r6
 8019cfc:	f006 fa72 	bl	80201e4 <ucdr_serialize_string>
 8019d00:	4004      	ands	r4, r0
 8019d02:	4620      	mov	r0, r4
 8019d04:	bd70      	pop	{r4, r5, r6, pc}
 8019d06:	bf00      	nop

08019d08 <uxr_serialize_OBJK_Topic_Binary>:
 8019d08:	b570      	push	{r4, r5, r6, lr}
 8019d0a:	460d      	mov	r5, r1
 8019d0c:	4606      	mov	r6, r0
 8019d0e:	6809      	ldr	r1, [r1, #0]
 8019d10:	f006 fa68 	bl	80201e4 <ucdr_serialize_string>
 8019d14:	4604      	mov	r4, r0
 8019d16:	7929      	ldrb	r1, [r5, #4]
 8019d18:	4630      	mov	r0, r6
 8019d1a:	f7f8 ff9b 	bl	8012c54 <ucdr_serialize_bool>
 8019d1e:	792b      	ldrb	r3, [r5, #4]
 8019d20:	4004      	ands	r4, r0
 8019d22:	b2e4      	uxtb	r4, r4
 8019d24:	b943      	cbnz	r3, 8019d38 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8019d26:	7b29      	ldrb	r1, [r5, #12]
 8019d28:	4630      	mov	r0, r6
 8019d2a:	f7f8 ff93 	bl	8012c54 <ucdr_serialize_bool>
 8019d2e:	7b2b      	ldrb	r3, [r5, #12]
 8019d30:	4004      	ands	r4, r0
 8019d32:	b93b      	cbnz	r3, 8019d44 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8019d34:	4620      	mov	r0, r4
 8019d36:	bd70      	pop	{r4, r5, r6, pc}
 8019d38:	68a9      	ldr	r1, [r5, #8]
 8019d3a:	4630      	mov	r0, r6
 8019d3c:	f006 fa52 	bl	80201e4 <ucdr_serialize_string>
 8019d40:	4004      	ands	r4, r0
 8019d42:	e7f0      	b.n	8019d26 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8019d44:	6929      	ldr	r1, [r5, #16]
 8019d46:	4630      	mov	r0, r6
 8019d48:	f006 fa4c 	bl	80201e4 <ucdr_serialize_string>
 8019d4c:	4004      	ands	r4, r0
 8019d4e:	b2e4      	uxtb	r4, r4
 8019d50:	4620      	mov	r0, r4
 8019d52:	bd70      	pop	{r4, r5, r6, pc}

08019d54 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8019d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d58:	460c      	mov	r4, r1
 8019d5a:	7809      	ldrb	r1, [r1, #0]
 8019d5c:	4606      	mov	r6, r0
 8019d5e:	f7f8 ff79 	bl	8012c54 <ucdr_serialize_bool>
 8019d62:	7823      	ldrb	r3, [r4, #0]
 8019d64:	4605      	mov	r5, r0
 8019d66:	b96b      	cbnz	r3, 8019d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8019d68:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019d6c:	4630      	mov	r0, r6
 8019d6e:	f7f8 ff71 	bl	8012c54 <ucdr_serialize_bool>
 8019d72:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019d76:	4005      	ands	r5, r0
 8019d78:	b2ed      	uxtb	r5, r5
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d169      	bne.n	8019e52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8019d7e:	4628      	mov	r0, r5
 8019d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d84:	6861      	ldr	r1, [r4, #4]
 8019d86:	4630      	mov	r0, r6
 8019d88:	f7f9 f9a8 	bl	80130dc <ucdr_serialize_uint32_t>
 8019d8c:	6863      	ldr	r3, [r4, #4]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d06b      	beq.n	8019e6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8019d92:	2800      	cmp	r0, #0
 8019d94:	d067      	beq.n	8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d96:	68a1      	ldr	r1, [r4, #8]
 8019d98:	4630      	mov	r0, r6
 8019d9a:	f006 fa23 	bl	80201e4 <ucdr_serialize_string>
 8019d9e:	6863      	ldr	r3, [r4, #4]
 8019da0:	2b01      	cmp	r3, #1
 8019da2:	d953      	bls.n	8019e4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019da4:	2800      	cmp	r0, #0
 8019da6:	d05e      	beq.n	8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019da8:	68e1      	ldr	r1, [r4, #12]
 8019daa:	4630      	mov	r0, r6
 8019dac:	f006 fa1a 	bl	80201e4 <ucdr_serialize_string>
 8019db0:	6863      	ldr	r3, [r4, #4]
 8019db2:	2b02      	cmp	r3, #2
 8019db4:	d94a      	bls.n	8019e4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019db6:	2800      	cmp	r0, #0
 8019db8:	d055      	beq.n	8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019dba:	6921      	ldr	r1, [r4, #16]
 8019dbc:	4630      	mov	r0, r6
 8019dbe:	f006 fa11 	bl	80201e4 <ucdr_serialize_string>
 8019dc2:	6863      	ldr	r3, [r4, #4]
 8019dc4:	2b03      	cmp	r3, #3
 8019dc6:	d941      	bls.n	8019e4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019dc8:	2800      	cmp	r0, #0
 8019dca:	d04c      	beq.n	8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019dcc:	6961      	ldr	r1, [r4, #20]
 8019dce:	4630      	mov	r0, r6
 8019dd0:	f006 fa08 	bl	80201e4 <ucdr_serialize_string>
 8019dd4:	6863      	ldr	r3, [r4, #4]
 8019dd6:	2b04      	cmp	r3, #4
 8019dd8:	d938      	bls.n	8019e4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019dda:	2800      	cmp	r0, #0
 8019ddc:	d043      	beq.n	8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019dde:	69a1      	ldr	r1, [r4, #24]
 8019de0:	4630      	mov	r0, r6
 8019de2:	f006 f9ff 	bl	80201e4 <ucdr_serialize_string>
 8019de6:	6863      	ldr	r3, [r4, #4]
 8019de8:	2b05      	cmp	r3, #5
 8019dea:	d92f      	bls.n	8019e4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019dec:	2800      	cmp	r0, #0
 8019dee:	d03a      	beq.n	8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019df0:	69e1      	ldr	r1, [r4, #28]
 8019df2:	4630      	mov	r0, r6
 8019df4:	f006 f9f6 	bl	80201e4 <ucdr_serialize_string>
 8019df8:	6863      	ldr	r3, [r4, #4]
 8019dfa:	2b06      	cmp	r3, #6
 8019dfc:	d926      	bls.n	8019e4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019dfe:	b390      	cbz	r0, 8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e00:	6a21      	ldr	r1, [r4, #32]
 8019e02:	4630      	mov	r0, r6
 8019e04:	f006 f9ee 	bl	80201e4 <ucdr_serialize_string>
 8019e08:	6863      	ldr	r3, [r4, #4]
 8019e0a:	2b07      	cmp	r3, #7
 8019e0c:	d91e      	bls.n	8019e4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019e0e:	b350      	cbz	r0, 8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e10:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019e12:	4630      	mov	r0, r6
 8019e14:	f006 f9e6 	bl	80201e4 <ucdr_serialize_string>
 8019e18:	6863      	ldr	r3, [r4, #4]
 8019e1a:	2b08      	cmp	r3, #8
 8019e1c:	d916      	bls.n	8019e4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019e1e:	b310      	cbz	r0, 8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e20:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019e22:	4630      	mov	r0, r6
 8019e24:	f006 f9de 	bl	80201e4 <ucdr_serialize_string>
 8019e28:	6863      	ldr	r3, [r4, #4]
 8019e2a:	2b09      	cmp	r3, #9
 8019e2c:	d90e      	bls.n	8019e4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019e2e:	b1d0      	cbz	r0, 8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e30:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019e34:	2709      	movs	r7, #9
 8019e36:	e000      	b.n	8019e3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8019e38:	b1a8      	cbz	r0, 8019e66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e3a:	f858 1b04 	ldr.w	r1, [r8], #4
 8019e3e:	4630      	mov	r0, r6
 8019e40:	f006 f9d0 	bl	80201e4 <ucdr_serialize_string>
 8019e44:	3701      	adds	r7, #1
 8019e46:	6862      	ldr	r2, [r4, #4]
 8019e48:	4297      	cmp	r7, r2
 8019e4a:	d3f5      	bcc.n	8019e38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8019e4c:	4005      	ands	r5, r0
 8019e4e:	b2ed      	uxtb	r5, r5
 8019e50:	e78a      	b.n	8019d68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019e52:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019e54:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019e58:	4630      	mov	r0, r6
 8019e5a:	f7fc ffd7 	bl	8016e0c <ucdr_serialize_sequence_uint8_t>
 8019e5e:	4005      	ands	r5, r0
 8019e60:	4628      	mov	r0, r5
 8019e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e66:	2500      	movs	r5, #0
 8019e68:	e77e      	b.n	8019d68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019e6a:	4028      	ands	r0, r5
 8019e6c:	b2c5      	uxtb	r5, r0
 8019e6e:	e77b      	b.n	8019d68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08019e70 <uxr_serialize_OBJK_Publisher_Binary>:
 8019e70:	b570      	push	{r4, r5, r6, lr}
 8019e72:	460d      	mov	r5, r1
 8019e74:	7809      	ldrb	r1, [r1, #0]
 8019e76:	4606      	mov	r6, r0
 8019e78:	f7f8 feec 	bl	8012c54 <ucdr_serialize_bool>
 8019e7c:	782b      	ldrb	r3, [r5, #0]
 8019e7e:	4604      	mov	r4, r0
 8019e80:	b94b      	cbnz	r3, 8019e96 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8019e82:	7a29      	ldrb	r1, [r5, #8]
 8019e84:	4630      	mov	r0, r6
 8019e86:	f7f8 fee5 	bl	8012c54 <ucdr_serialize_bool>
 8019e8a:	7a2b      	ldrb	r3, [r5, #8]
 8019e8c:	4004      	ands	r4, r0
 8019e8e:	b2e4      	uxtb	r4, r4
 8019e90:	b943      	cbnz	r3, 8019ea4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8019e92:	4620      	mov	r0, r4
 8019e94:	bd70      	pop	{r4, r5, r6, pc}
 8019e96:	6869      	ldr	r1, [r5, #4]
 8019e98:	4630      	mov	r0, r6
 8019e9a:	f006 f9a3 	bl	80201e4 <ucdr_serialize_string>
 8019e9e:	4004      	ands	r4, r0
 8019ea0:	b2e4      	uxtb	r4, r4
 8019ea2:	e7ee      	b.n	8019e82 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8019ea4:	f105 010c 	add.w	r1, r5, #12
 8019ea8:	4630      	mov	r0, r6
 8019eaa:	f7ff ff53 	bl	8019d54 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8019eae:	4004      	ands	r4, r0
 8019eb0:	4620      	mov	r0, r4
 8019eb2:	bd70      	pop	{r4, r5, r6, pc}

08019eb4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8019eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019eb8:	460c      	mov	r4, r1
 8019eba:	7809      	ldrb	r1, [r1, #0]
 8019ebc:	4606      	mov	r6, r0
 8019ebe:	f7f8 fec9 	bl	8012c54 <ucdr_serialize_bool>
 8019ec2:	7823      	ldrb	r3, [r4, #0]
 8019ec4:	4605      	mov	r5, r0
 8019ec6:	b96b      	cbnz	r3, 8019ee4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8019ec8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019ecc:	4630      	mov	r0, r6
 8019ece:	f7f8 fec1 	bl	8012c54 <ucdr_serialize_bool>
 8019ed2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019ed6:	4005      	ands	r5, r0
 8019ed8:	b2ed      	uxtb	r5, r5
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d169      	bne.n	8019fb2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8019ede:	4628      	mov	r0, r5
 8019ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ee4:	6861      	ldr	r1, [r4, #4]
 8019ee6:	4630      	mov	r0, r6
 8019ee8:	f7f9 f8f8 	bl	80130dc <ucdr_serialize_uint32_t>
 8019eec:	6863      	ldr	r3, [r4, #4]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d06b      	beq.n	8019fca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8019ef2:	2800      	cmp	r0, #0
 8019ef4:	d067      	beq.n	8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ef6:	68a1      	ldr	r1, [r4, #8]
 8019ef8:	4630      	mov	r0, r6
 8019efa:	f006 f973 	bl	80201e4 <ucdr_serialize_string>
 8019efe:	6863      	ldr	r3, [r4, #4]
 8019f00:	2b01      	cmp	r3, #1
 8019f02:	d953      	bls.n	8019fac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f04:	2800      	cmp	r0, #0
 8019f06:	d05e      	beq.n	8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f08:	68e1      	ldr	r1, [r4, #12]
 8019f0a:	4630      	mov	r0, r6
 8019f0c:	f006 f96a 	bl	80201e4 <ucdr_serialize_string>
 8019f10:	6863      	ldr	r3, [r4, #4]
 8019f12:	2b02      	cmp	r3, #2
 8019f14:	d94a      	bls.n	8019fac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f16:	2800      	cmp	r0, #0
 8019f18:	d055      	beq.n	8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f1a:	6921      	ldr	r1, [r4, #16]
 8019f1c:	4630      	mov	r0, r6
 8019f1e:	f006 f961 	bl	80201e4 <ucdr_serialize_string>
 8019f22:	6863      	ldr	r3, [r4, #4]
 8019f24:	2b03      	cmp	r3, #3
 8019f26:	d941      	bls.n	8019fac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f28:	2800      	cmp	r0, #0
 8019f2a:	d04c      	beq.n	8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f2c:	6961      	ldr	r1, [r4, #20]
 8019f2e:	4630      	mov	r0, r6
 8019f30:	f006 f958 	bl	80201e4 <ucdr_serialize_string>
 8019f34:	6863      	ldr	r3, [r4, #4]
 8019f36:	2b04      	cmp	r3, #4
 8019f38:	d938      	bls.n	8019fac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f3a:	2800      	cmp	r0, #0
 8019f3c:	d043      	beq.n	8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f3e:	69a1      	ldr	r1, [r4, #24]
 8019f40:	4630      	mov	r0, r6
 8019f42:	f006 f94f 	bl	80201e4 <ucdr_serialize_string>
 8019f46:	6863      	ldr	r3, [r4, #4]
 8019f48:	2b05      	cmp	r3, #5
 8019f4a:	d92f      	bls.n	8019fac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f4c:	2800      	cmp	r0, #0
 8019f4e:	d03a      	beq.n	8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f50:	69e1      	ldr	r1, [r4, #28]
 8019f52:	4630      	mov	r0, r6
 8019f54:	f006 f946 	bl	80201e4 <ucdr_serialize_string>
 8019f58:	6863      	ldr	r3, [r4, #4]
 8019f5a:	2b06      	cmp	r3, #6
 8019f5c:	d926      	bls.n	8019fac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f5e:	b390      	cbz	r0, 8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f60:	6a21      	ldr	r1, [r4, #32]
 8019f62:	4630      	mov	r0, r6
 8019f64:	f006 f93e 	bl	80201e4 <ucdr_serialize_string>
 8019f68:	6863      	ldr	r3, [r4, #4]
 8019f6a:	2b07      	cmp	r3, #7
 8019f6c:	d91e      	bls.n	8019fac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f6e:	b350      	cbz	r0, 8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f70:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019f72:	4630      	mov	r0, r6
 8019f74:	f006 f936 	bl	80201e4 <ucdr_serialize_string>
 8019f78:	6863      	ldr	r3, [r4, #4]
 8019f7a:	2b08      	cmp	r3, #8
 8019f7c:	d916      	bls.n	8019fac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f7e:	b310      	cbz	r0, 8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f80:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019f82:	4630      	mov	r0, r6
 8019f84:	f006 f92e 	bl	80201e4 <ucdr_serialize_string>
 8019f88:	6863      	ldr	r3, [r4, #4]
 8019f8a:	2b09      	cmp	r3, #9
 8019f8c:	d90e      	bls.n	8019fac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f8e:	b1d0      	cbz	r0, 8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f90:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019f94:	2709      	movs	r7, #9
 8019f96:	e000      	b.n	8019f9a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8019f98:	b1a8      	cbz	r0, 8019fc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f9a:	f858 1b04 	ldr.w	r1, [r8], #4
 8019f9e:	4630      	mov	r0, r6
 8019fa0:	f006 f920 	bl	80201e4 <ucdr_serialize_string>
 8019fa4:	3701      	adds	r7, #1
 8019fa6:	6862      	ldr	r2, [r4, #4]
 8019fa8:	4297      	cmp	r7, r2
 8019faa:	d3f5      	bcc.n	8019f98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8019fac:	4005      	ands	r5, r0
 8019fae:	b2ed      	uxtb	r5, r5
 8019fb0:	e78a      	b.n	8019ec8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019fb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019fb4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019fb8:	4630      	mov	r0, r6
 8019fba:	f7fc ff27 	bl	8016e0c <ucdr_serialize_sequence_uint8_t>
 8019fbe:	4005      	ands	r5, r0
 8019fc0:	4628      	mov	r0, r5
 8019fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fc6:	2500      	movs	r5, #0
 8019fc8:	e77e      	b.n	8019ec8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019fca:	4028      	ands	r0, r5
 8019fcc:	b2c5      	uxtb	r5, r0
 8019fce:	e77b      	b.n	8019ec8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08019fd0 <uxr_serialize_OBJK_Subscriber_Binary>:
 8019fd0:	b570      	push	{r4, r5, r6, lr}
 8019fd2:	460d      	mov	r5, r1
 8019fd4:	7809      	ldrb	r1, [r1, #0]
 8019fd6:	4606      	mov	r6, r0
 8019fd8:	f7f8 fe3c 	bl	8012c54 <ucdr_serialize_bool>
 8019fdc:	782b      	ldrb	r3, [r5, #0]
 8019fde:	4604      	mov	r4, r0
 8019fe0:	b94b      	cbnz	r3, 8019ff6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8019fe2:	7a29      	ldrb	r1, [r5, #8]
 8019fe4:	4630      	mov	r0, r6
 8019fe6:	f7f8 fe35 	bl	8012c54 <ucdr_serialize_bool>
 8019fea:	7a2b      	ldrb	r3, [r5, #8]
 8019fec:	4004      	ands	r4, r0
 8019fee:	b2e4      	uxtb	r4, r4
 8019ff0:	b943      	cbnz	r3, 801a004 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	bd70      	pop	{r4, r5, r6, pc}
 8019ff6:	6869      	ldr	r1, [r5, #4]
 8019ff8:	4630      	mov	r0, r6
 8019ffa:	f006 f8f3 	bl	80201e4 <ucdr_serialize_string>
 8019ffe:	4004      	ands	r4, r0
 801a000:	b2e4      	uxtb	r4, r4
 801a002:	e7ee      	b.n	8019fe2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801a004:	f105 010c 	add.w	r1, r5, #12
 801a008:	4630      	mov	r0, r6
 801a00a:	f7ff ff53 	bl	8019eb4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801a00e:	4004      	ands	r4, r0
 801a010:	4620      	mov	r0, r4
 801a012:	bd70      	pop	{r4, r5, r6, pc}

0801a014 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801a014:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801a018:	4688      	mov	r8, r1
 801a01a:	4681      	mov	r9, r0
 801a01c:	8809      	ldrh	r1, [r1, #0]
 801a01e:	f7f8 fe73 	bl	8012d08 <ucdr_serialize_uint16_t>
 801a022:	4606      	mov	r6, r0
 801a024:	f898 1002 	ldrb.w	r1, [r8, #2]
 801a028:	4648      	mov	r0, r9
 801a02a:	f7f8 fe13 	bl	8012c54 <ucdr_serialize_bool>
 801a02e:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a032:	4006      	ands	r6, r0
 801a034:	b2f5      	uxtb	r5, r6
 801a036:	b9eb      	cbnz	r3, 801a074 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a038:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a03c:	4648      	mov	r0, r9
 801a03e:	f7f8 fe09 	bl	8012c54 <ucdr_serialize_bool>
 801a042:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a046:	4005      	ands	r5, r0
 801a048:	bb7b      	cbnz	r3, 801a0aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a04a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a04e:	4648      	mov	r0, r9
 801a050:	f7f8 fe00 	bl	8012c54 <ucdr_serialize_bool>
 801a054:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a058:	4005      	ands	r5, r0
 801a05a:	b9f3      	cbnz	r3, 801a09a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a05c:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a060:	4648      	mov	r0, r9
 801a062:	f7f8 fdf7 	bl	8012c54 <ucdr_serialize_bool>
 801a066:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a06a:	4005      	ands	r5, r0
 801a06c:	b94b      	cbnz	r3, 801a082 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a06e:	4628      	mov	r0, r5
 801a070:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a074:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a078:	4648      	mov	r0, r9
 801a07a:	f7f8 fe45 	bl	8012d08 <ucdr_serialize_uint16_t>
 801a07e:	4005      	ands	r5, r0
 801a080:	e7da      	b.n	801a038 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a082:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a086:	f108 011c 	add.w	r1, r8, #28
 801a08a:	4648      	mov	r0, r9
 801a08c:	f7fc febe 	bl	8016e0c <ucdr_serialize_sequence_uint8_t>
 801a090:	4028      	ands	r0, r5
 801a092:	b2c5      	uxtb	r5, r0
 801a094:	4628      	mov	r0, r5
 801a096:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a09a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a09e:	4648      	mov	r0, r9
 801a0a0:	f7f9 f81c 	bl	80130dc <ucdr_serialize_uint32_t>
 801a0a4:	4028      	ands	r0, r5
 801a0a6:	b2c5      	uxtb	r5, r0
 801a0a8:	e7d8      	b.n	801a05c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a0aa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a0ae:	4648      	mov	r0, r9
 801a0b0:	f7f9 f814 	bl	80130dc <ucdr_serialize_uint32_t>
 801a0b4:	4028      	ands	r0, r5
 801a0b6:	b2c5      	uxtb	r5, r0
 801a0b8:	e7c7      	b.n	801a04a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a0ba:	bf00      	nop

0801a0bc <uxr_serialize_OBJK_DataReader_Binary>:
 801a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0be:	2202      	movs	r2, #2
 801a0c0:	460c      	mov	r4, r1
 801a0c2:	4606      	mov	r6, r0
 801a0c4:	f005 ffc2 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a0c8:	4605      	mov	r5, r0
 801a0ca:	78a1      	ldrb	r1, [r4, #2]
 801a0cc:	4630      	mov	r0, r6
 801a0ce:	f7f8 fdc1 	bl	8012c54 <ucdr_serialize_bool>
 801a0d2:	78a3      	ldrb	r3, [r4, #2]
 801a0d4:	4005      	ands	r5, r0
 801a0d6:	b2ed      	uxtb	r5, r5
 801a0d8:	b90b      	cbnz	r3, 801a0de <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a0da:	4628      	mov	r0, r5
 801a0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0de:	f104 0108 	add.w	r1, r4, #8
 801a0e2:	4630      	mov	r0, r6
 801a0e4:	f7ff ff96 	bl	801a014 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a0e8:	4607      	mov	r7, r0
 801a0ea:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a0ee:	4630      	mov	r0, r6
 801a0f0:	f7f8 fdb0 	bl	8012c54 <ucdr_serialize_bool>
 801a0f4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a0f8:	4038      	ands	r0, r7
 801a0fa:	b2c7      	uxtb	r7, r0
 801a0fc:	b95b      	cbnz	r3, 801a116 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a0fe:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801a102:	4630      	mov	r0, r6
 801a104:	f7f8 fda6 	bl	8012c54 <ucdr_serialize_bool>
 801a108:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a10c:	4007      	ands	r7, r0
 801a10e:	b94b      	cbnz	r3, 801a124 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a110:	403d      	ands	r5, r7
 801a112:	4628      	mov	r0, r5
 801a114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a116:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801a11a:	4630      	mov	r0, r6
 801a11c:	f7f9 fa34 	bl	8013588 <ucdr_serialize_uint64_t>
 801a120:	4007      	ands	r7, r0
 801a122:	e7ec      	b.n	801a0fe <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a124:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801a126:	4630      	mov	r0, r6
 801a128:	f006 f85c 	bl	80201e4 <ucdr_serialize_string>
 801a12c:	4007      	ands	r7, r0
 801a12e:	b2ff      	uxtb	r7, r7
 801a130:	e7ee      	b.n	801a110 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801a132:	bf00      	nop

0801a134 <uxr_serialize_OBJK_DataWriter_Binary>:
 801a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a136:	2202      	movs	r2, #2
 801a138:	460d      	mov	r5, r1
 801a13a:	4606      	mov	r6, r0
 801a13c:	f005 ff86 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a140:	4604      	mov	r4, r0
 801a142:	78a9      	ldrb	r1, [r5, #2]
 801a144:	4630      	mov	r0, r6
 801a146:	f7f8 fd85 	bl	8012c54 <ucdr_serialize_bool>
 801a14a:	78ab      	ldrb	r3, [r5, #2]
 801a14c:	4004      	ands	r4, r0
 801a14e:	b2e4      	uxtb	r4, r4
 801a150:	b90b      	cbnz	r3, 801a156 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801a152:	4620      	mov	r0, r4
 801a154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a156:	f105 0108 	add.w	r1, r5, #8
 801a15a:	4630      	mov	r0, r6
 801a15c:	f7ff ff5a 	bl	801a014 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a160:	4607      	mov	r7, r0
 801a162:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801a166:	4630      	mov	r0, r6
 801a168:	f7f8 fd74 	bl	8012c54 <ucdr_serialize_bool>
 801a16c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801a170:	4038      	ands	r0, r7
 801a172:	b2c7      	uxtb	r7, r0
 801a174:	b913      	cbnz	r3, 801a17c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801a176:	403c      	ands	r4, r7
 801a178:	4620      	mov	r0, r4
 801a17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a17c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801a180:	4630      	mov	r0, r6
 801a182:	f7f9 fa01 	bl	8013588 <ucdr_serialize_uint64_t>
 801a186:	4007      	ands	r7, r0
 801a188:	e7f5      	b.n	801a176 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801a18a:	bf00      	nop

0801a18c <uxr_serialize_OBJK_Replier_Binary>:
 801a18c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801a190:	460f      	mov	r7, r1
 801a192:	4680      	mov	r8, r0
 801a194:	6809      	ldr	r1, [r1, #0]
 801a196:	f006 f825 	bl	80201e4 <ucdr_serialize_string>
 801a19a:	4605      	mov	r5, r0
 801a19c:	6879      	ldr	r1, [r7, #4]
 801a19e:	4640      	mov	r0, r8
 801a1a0:	f006 f820 	bl	80201e4 <ucdr_serialize_string>
 801a1a4:	4005      	ands	r5, r0
 801a1a6:	68b9      	ldr	r1, [r7, #8]
 801a1a8:	4640      	mov	r0, r8
 801a1aa:	b2ec      	uxtb	r4, r5
 801a1ac:	f006 f81a 	bl	80201e4 <ucdr_serialize_string>
 801a1b0:	7b39      	ldrb	r1, [r7, #12]
 801a1b2:	4004      	ands	r4, r0
 801a1b4:	4640      	mov	r0, r8
 801a1b6:	f7f8 fd4d 	bl	8012c54 <ucdr_serialize_bool>
 801a1ba:	7b3b      	ldrb	r3, [r7, #12]
 801a1bc:	4004      	ands	r4, r0
 801a1be:	b94b      	cbnz	r3, 801a1d4 <uxr_serialize_OBJK_Replier_Binary+0x48>
 801a1c0:	7d39      	ldrb	r1, [r7, #20]
 801a1c2:	4640      	mov	r0, r8
 801a1c4:	f7f8 fd46 	bl	8012c54 <ucdr_serialize_bool>
 801a1c8:	7d3b      	ldrb	r3, [r7, #20]
 801a1ca:	4004      	ands	r4, r0
 801a1cc:	b943      	cbnz	r3, 801a1e0 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801a1ce:	4620      	mov	r0, r4
 801a1d0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a1d4:	6939      	ldr	r1, [r7, #16]
 801a1d6:	4640      	mov	r0, r8
 801a1d8:	f006 f804 	bl	80201e4 <ucdr_serialize_string>
 801a1dc:	4004      	ands	r4, r0
 801a1de:	e7ef      	b.n	801a1c0 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801a1e0:	69b9      	ldr	r1, [r7, #24]
 801a1e2:	4640      	mov	r0, r8
 801a1e4:	f005 fffe 	bl	80201e4 <ucdr_serialize_string>
 801a1e8:	4004      	ands	r4, r0
 801a1ea:	b2e4      	uxtb	r4, r4
 801a1ec:	4620      	mov	r0, r4
 801a1ee:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a1f2:	bf00      	nop

0801a1f4 <uxr_deserialize_ObjectVariant>:
 801a1f4:	b570      	push	{r4, r5, r6, lr}
 801a1f6:	4605      	mov	r5, r0
 801a1f8:	460e      	mov	r6, r1
 801a1fa:	f7f8 fd6f 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a1fe:	b168      	cbz	r0, 801a21c <uxr_deserialize_ObjectVariant+0x28>
 801a200:	7833      	ldrb	r3, [r6, #0]
 801a202:	4604      	mov	r4, r0
 801a204:	3b01      	subs	r3, #1
 801a206:	2b0d      	cmp	r3, #13
 801a208:	d809      	bhi.n	801a21e <uxr_deserialize_ObjectVariant+0x2a>
 801a20a:	e8df f003 	tbb	[pc, r3]
 801a20e:	0a41      	.short	0x0a41
 801a210:	0a0a2323 	.word	0x0a0a2323
 801a214:	10080a0a 	.word	0x10080a0a
 801a218:	565c1010 	.word	0x565c1010
 801a21c:	2400      	movs	r4, #0
 801a21e:	4620      	mov	r0, r4
 801a220:	bd70      	pop	{r4, r5, r6, pc}
 801a222:	1d31      	adds	r1, r6, #4
 801a224:	4628      	mov	r0, r5
 801a226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a22a:	f7ff bd21 	b.w	8019c70 <uxr_deserialize_DATAWRITER_Representation>
 801a22e:	1d31      	adds	r1, r6, #4
 801a230:	4628      	mov	r0, r5
 801a232:	f7f8 fd53 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a236:	2800      	cmp	r0, #0
 801a238:	d0f0      	beq.n	801a21c <uxr_deserialize_ObjectVariant+0x28>
 801a23a:	7933      	ldrb	r3, [r6, #4]
 801a23c:	2b01      	cmp	r3, #1
 801a23e:	d001      	beq.n	801a244 <uxr_deserialize_ObjectVariant+0x50>
 801a240:	2b02      	cmp	r3, #2
 801a242:	d1ec      	bne.n	801a21e <uxr_deserialize_ObjectVariant+0x2a>
 801a244:	68b1      	ldr	r1, [r6, #8]
 801a246:	4628      	mov	r0, r5
 801a248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a24c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a250:	f005 bfd8 	b.w	8020204 <ucdr_deserialize_string>
 801a254:	1d31      	adds	r1, r6, #4
 801a256:	4628      	mov	r0, r5
 801a258:	f7f8 fd40 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a25c:	4604      	mov	r4, r0
 801a25e:	b170      	cbz	r0, 801a27e <uxr_deserialize_ObjectVariant+0x8a>
 801a260:	7933      	ldrb	r3, [r6, #4]
 801a262:	2b02      	cmp	r3, #2
 801a264:	d04c      	beq.n	801a300 <uxr_deserialize_ObjectVariant+0x10c>
 801a266:	2b03      	cmp	r3, #3
 801a268:	d109      	bne.n	801a27e <uxr_deserialize_ObjectVariant+0x8a>
 801a26a:	f106 0308 	add.w	r3, r6, #8
 801a26e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a272:	f106 010c 	add.w	r1, r6, #12
 801a276:	4628      	mov	r0, r5
 801a278:	f7fc fdda 	bl	8016e30 <ucdr_deserialize_sequence_uint8_t>
 801a27c:	4604      	mov	r4, r0
 801a27e:	2202      	movs	r2, #2
 801a280:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a284:	4628      	mov	r0, r5
 801a286:	f005 ff45 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a28a:	4020      	ands	r0, r4
 801a28c:	b2c4      	uxtb	r4, r0
 801a28e:	e7c6      	b.n	801a21e <uxr_deserialize_ObjectVariant+0x2a>
 801a290:	1d31      	adds	r1, r6, #4
 801a292:	4628      	mov	r0, r5
 801a294:	f7f8 fd22 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a298:	4604      	mov	r4, r0
 801a29a:	b130      	cbz	r0, 801a2aa <uxr_deserialize_ObjectVariant+0xb6>
 801a29c:	7933      	ldrb	r3, [r6, #4]
 801a29e:	2b02      	cmp	r3, #2
 801a2a0:	d036      	beq.n	801a310 <uxr_deserialize_ObjectVariant+0x11c>
 801a2a2:	2b03      	cmp	r3, #3
 801a2a4:	d03c      	beq.n	801a320 <uxr_deserialize_ObjectVariant+0x12c>
 801a2a6:	2b01      	cmp	r3, #1
 801a2a8:	d032      	beq.n	801a310 <uxr_deserialize_ObjectVariant+0x11c>
 801a2aa:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a2ae:	4628      	mov	r0, r5
 801a2b0:	f7f9 faba 	bl	8013828 <ucdr_deserialize_int16_t>
 801a2b4:	4020      	ands	r0, r4
 801a2b6:	b2c4      	uxtb	r4, r0
 801a2b8:	e7b1      	b.n	801a21e <uxr_deserialize_ObjectVariant+0x2a>
 801a2ba:	1d31      	adds	r1, r6, #4
 801a2bc:	4628      	mov	r0, r5
 801a2be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2c2:	f7ff bb8b 	b.w	80199dc <uxr_deserialize_CLIENT_Representation>
 801a2c6:	2204      	movs	r2, #4
 801a2c8:	4628      	mov	r0, r5
 801a2ca:	18b1      	adds	r1, r6, r2
 801a2cc:	f005 ff22 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a2d0:	4604      	mov	r4, r0
 801a2d2:	2202      	movs	r2, #2
 801a2d4:	f106 0108 	add.w	r1, r6, #8
 801a2d8:	4628      	mov	r0, r5
 801a2da:	f005 ff1b 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a2de:	4004      	ands	r4, r0
 801a2e0:	2202      	movs	r2, #2
 801a2e2:	f106 010a 	add.w	r1, r6, #10
 801a2e6:	4628      	mov	r0, r5
 801a2e8:	b2e4      	uxtb	r4, r4
 801a2ea:	f005 ff13 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	f106 010c 	add.w	r1, r6, #12
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	401c      	ands	r4, r3
 801a2f8:	f7f8 fcc2 	bl	8012c80 <ucdr_deserialize_bool>
 801a2fc:	4004      	ands	r4, r0
 801a2fe:	e78e      	b.n	801a21e <uxr_deserialize_ObjectVariant+0x2a>
 801a300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a304:	68b1      	ldr	r1, [r6, #8]
 801a306:	4628      	mov	r0, r5
 801a308:	f005 ff7c 	bl	8020204 <ucdr_deserialize_string>
 801a30c:	4604      	mov	r4, r0
 801a30e:	e7b6      	b.n	801a27e <uxr_deserialize_ObjectVariant+0x8a>
 801a310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a314:	68b1      	ldr	r1, [r6, #8]
 801a316:	4628      	mov	r0, r5
 801a318:	f005 ff74 	bl	8020204 <ucdr_deserialize_string>
 801a31c:	4604      	mov	r4, r0
 801a31e:	e7c4      	b.n	801a2aa <uxr_deserialize_ObjectVariant+0xb6>
 801a320:	f106 0308 	add.w	r3, r6, #8
 801a324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a328:	f106 010c 	add.w	r1, r6, #12
 801a32c:	4628      	mov	r0, r5
 801a32e:	f7fc fd7f 	bl	8016e30 <ucdr_deserialize_sequence_uint8_t>
 801a332:	4604      	mov	r4, r0
 801a334:	e7b9      	b.n	801a2aa <uxr_deserialize_ObjectVariant+0xb6>
 801a336:	bf00      	nop

0801a338 <uxr_deserialize_BaseObjectRequest>:
 801a338:	b570      	push	{r4, r5, r6, lr}
 801a33a:	2202      	movs	r2, #2
 801a33c:	4605      	mov	r5, r0
 801a33e:	460e      	mov	r6, r1
 801a340:	f005 fee8 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a344:	2202      	movs	r2, #2
 801a346:	4604      	mov	r4, r0
 801a348:	4628      	mov	r0, r5
 801a34a:	18b1      	adds	r1, r6, r2
 801a34c:	f005 fee2 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a350:	4020      	ands	r0, r4
 801a352:	b2c0      	uxtb	r0, r0
 801a354:	bd70      	pop	{r4, r5, r6, pc}
 801a356:	bf00      	nop

0801a358 <uxr_serialize_ActivityInfoVariant>:
 801a358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a35c:	460e      	mov	r6, r1
 801a35e:	7809      	ldrb	r1, [r1, #0]
 801a360:	4680      	mov	r8, r0
 801a362:	f7f8 fca5 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a366:	4607      	mov	r7, r0
 801a368:	b138      	cbz	r0, 801a37a <uxr_serialize_ActivityInfoVariant+0x22>
 801a36a:	7833      	ldrb	r3, [r6, #0]
 801a36c:	2b06      	cmp	r3, #6
 801a36e:	f000 8081 	beq.w	801a474 <uxr_serialize_ActivityInfoVariant+0x11c>
 801a372:	2b0d      	cmp	r3, #13
 801a374:	d014      	beq.n	801a3a0 <uxr_serialize_ActivityInfoVariant+0x48>
 801a376:	2b05      	cmp	r3, #5
 801a378:	d002      	beq.n	801a380 <uxr_serialize_ActivityInfoVariant+0x28>
 801a37a:	4638      	mov	r0, r7
 801a37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a380:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a384:	4640      	mov	r0, r8
 801a386:	f7f9 f9cf 	bl	8013728 <ucdr_serialize_int16_t>
 801a38a:	4607      	mov	r7, r0
 801a38c:	4640      	mov	r0, r8
 801a38e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801a392:	f7f9 f8f9 	bl	8013588 <ucdr_serialize_uint64_t>
 801a396:	4038      	ands	r0, r7
 801a398:	b2c7      	uxtb	r7, r0
 801a39a:	4638      	mov	r0, r7
 801a39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3a0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a3a4:	4640      	mov	r0, r8
 801a3a6:	f7f9 f9bf 	bl	8013728 <ucdr_serialize_int16_t>
 801a3aa:	68f1      	ldr	r1, [r6, #12]
 801a3ac:	4607      	mov	r7, r0
 801a3ae:	4640      	mov	r0, r8
 801a3b0:	f7f8 fe94 	bl	80130dc <ucdr_serialize_uint32_t>
 801a3b4:	68f3      	ldr	r3, [r6, #12]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d0ed      	beq.n	801a396 <uxr_serialize_ActivityInfoVariant+0x3e>
 801a3ba:	b318      	cbz	r0, 801a404 <uxr_serialize_ActivityInfoVariant+0xac>
 801a3bc:	f106 090c 	add.w	r9, r6, #12
 801a3c0:	2400      	movs	r4, #0
 801a3c2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801a3c6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801a3ca:	7c29      	ldrb	r1, [r5, #16]
 801a3cc:	4640      	mov	r0, r8
 801a3ce:	f7f8 fc6f 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a3d2:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801a3d6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a3da:	2800      	cmp	r0, #0
 801a3dc:	d051      	beq.n	801a482 <uxr_serialize_ActivityInfoVariant+0x12a>
 801a3de:	7c2b      	ldrb	r3, [r5, #16]
 801a3e0:	00c9      	lsls	r1, r1, #3
 801a3e2:	2b03      	cmp	r3, #3
 801a3e4:	d854      	bhi.n	801a490 <uxr_serialize_ActivityInfoVariant+0x138>
 801a3e6:	e8df f003 	tbb	[pc, r3]
 801a3ea:	2133      	.short	0x2133
 801a3ec:	020f      	.short	0x020f
 801a3ee:	4449      	add	r1, r9
 801a3f0:	4640      	mov	r0, r8
 801a3f2:	6889      	ldr	r1, [r1, #8]
 801a3f4:	f005 fef6 	bl	80201e4 <ucdr_serialize_string>
 801a3f8:	3401      	adds	r4, #1
 801a3fa:	68f2      	ldr	r2, [r6, #12]
 801a3fc:	4294      	cmp	r4, r2
 801a3fe:	d244      	bcs.n	801a48a <uxr_serialize_ActivityInfoVariant+0x132>
 801a400:	2800      	cmp	r0, #0
 801a402:	d1de      	bne.n	801a3c2 <uxr_serialize_ActivityInfoVariant+0x6a>
 801a404:	2700      	movs	r7, #0
 801a406:	e7b8      	b.n	801a37a <uxr_serialize_ActivityInfoVariant+0x22>
 801a408:	3108      	adds	r1, #8
 801a40a:	44a2      	add	sl, r4
 801a40c:	2210      	movs	r2, #16
 801a40e:	4640      	mov	r0, r8
 801a410:	4449      	add	r1, r9
 801a412:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a416:	f005 fe19 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a41a:	4605      	mov	r5, r0
 801a41c:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801a420:	4640      	mov	r0, r8
 801a422:	f7f8 fe5b 	bl	80130dc <ucdr_serialize_uint32_t>
 801a426:	4028      	ands	r0, r5
 801a428:	b2c0      	uxtb	r0, r0
 801a42a:	e7e5      	b.n	801a3f8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a42c:	3108      	adds	r1, #8
 801a42e:	44a2      	add	sl, r4
 801a430:	2204      	movs	r2, #4
 801a432:	4640      	mov	r0, r8
 801a434:	4449      	add	r1, r9
 801a436:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a43a:	f005 fe07 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a43e:	4605      	mov	r5, r0
 801a440:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801a444:	4640      	mov	r0, r8
 801a446:	f7f8 fc5f 	bl	8012d08 <ucdr_serialize_uint16_t>
 801a44a:	4028      	ands	r0, r5
 801a44c:	b2c0      	uxtb	r0, r0
 801a44e:	e7d3      	b.n	801a3f8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a450:	3108      	adds	r1, #8
 801a452:	44a2      	add	sl, r4
 801a454:	2202      	movs	r2, #2
 801a456:	4640      	mov	r0, r8
 801a458:	4449      	add	r1, r9
 801a45a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a45e:	f005 fdf5 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a462:	4605      	mov	r5, r0
 801a464:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801a468:	4640      	mov	r0, r8
 801a46a:	f7f8 fc21 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a46e:	4028      	ands	r0, r5
 801a470:	b2c0      	uxtb	r0, r0
 801a472:	e7c1      	b.n	801a3f8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a474:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a478:	4640      	mov	r0, r8
 801a47a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a47e:	f7f9 b953 	b.w	8013728 <ucdr_serialize_int16_t>
 801a482:	3401      	adds	r4, #1
 801a484:	68f2      	ldr	r2, [r6, #12]
 801a486:	42a2      	cmp	r2, r4
 801a488:	d8bc      	bhi.n	801a404 <uxr_serialize_ActivityInfoVariant+0xac>
 801a48a:	4007      	ands	r7, r0
 801a48c:	b2ff      	uxtb	r7, r7
 801a48e:	e774      	b.n	801a37a <uxr_serialize_ActivityInfoVariant+0x22>
 801a490:	3401      	adds	r4, #1
 801a492:	68f3      	ldr	r3, [r6, #12]
 801a494:	3518      	adds	r5, #24
 801a496:	429c      	cmp	r4, r3
 801a498:	d397      	bcc.n	801a3ca <uxr_serialize_ActivityInfoVariant+0x72>
 801a49a:	e76e      	b.n	801a37a <uxr_serialize_ActivityInfoVariant+0x22>

0801a49c <uxr_deserialize_BaseObjectReply>:
 801a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a0:	2202      	movs	r2, #2
 801a4a2:	4606      	mov	r6, r0
 801a4a4:	460f      	mov	r7, r1
 801a4a6:	f005 fe35 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a4aa:	2202      	movs	r2, #2
 801a4ac:	4605      	mov	r5, r0
 801a4ae:	4630      	mov	r0, r6
 801a4b0:	18b9      	adds	r1, r7, r2
 801a4b2:	f005 fe2f 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a4b6:	4680      	mov	r8, r0
 801a4b8:	1d39      	adds	r1, r7, #4
 801a4ba:	4630      	mov	r0, r6
 801a4bc:	f7f8 fc0e 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a4c0:	ea05 0508 	and.w	r5, r5, r8
 801a4c4:	4604      	mov	r4, r0
 801a4c6:	1d79      	adds	r1, r7, #5
 801a4c8:	4630      	mov	r0, r6
 801a4ca:	402c      	ands	r4, r5
 801a4cc:	f7f8 fc06 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a4d0:	4020      	ands	r0, r4
 801a4d2:	b2c0      	uxtb	r0, r0
 801a4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a4d8 <uxr_serialize_ReadSpecification>:
 801a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4da:	460e      	mov	r6, r1
 801a4dc:	4607      	mov	r7, r0
 801a4de:	7809      	ldrb	r1, [r1, #0]
 801a4e0:	f7f8 fbe6 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a4e4:	4604      	mov	r4, r0
 801a4e6:	7871      	ldrb	r1, [r6, #1]
 801a4e8:	4638      	mov	r0, r7
 801a4ea:	f7f8 fbe1 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a4ee:	4004      	ands	r4, r0
 801a4f0:	78b1      	ldrb	r1, [r6, #2]
 801a4f2:	4638      	mov	r0, r7
 801a4f4:	f7f8 fbae 	bl	8012c54 <ucdr_serialize_bool>
 801a4f8:	78b3      	ldrb	r3, [r6, #2]
 801a4fa:	b2e4      	uxtb	r4, r4
 801a4fc:	4004      	ands	r4, r0
 801a4fe:	b943      	cbnz	r3, 801a512 <uxr_serialize_ReadSpecification+0x3a>
 801a500:	7a31      	ldrb	r1, [r6, #8]
 801a502:	4638      	mov	r0, r7
 801a504:	f7f8 fba6 	bl	8012c54 <ucdr_serialize_bool>
 801a508:	7a33      	ldrb	r3, [r6, #8]
 801a50a:	4004      	ands	r4, r0
 801a50c:	b93b      	cbnz	r3, 801a51e <uxr_serialize_ReadSpecification+0x46>
 801a50e:	4620      	mov	r0, r4
 801a510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a512:	6871      	ldr	r1, [r6, #4]
 801a514:	4638      	mov	r0, r7
 801a516:	f005 fe65 	bl	80201e4 <ucdr_serialize_string>
 801a51a:	4004      	ands	r4, r0
 801a51c:	e7f0      	b.n	801a500 <uxr_serialize_ReadSpecification+0x28>
 801a51e:	8971      	ldrh	r1, [r6, #10]
 801a520:	4638      	mov	r0, r7
 801a522:	f7f8 fbf1 	bl	8012d08 <ucdr_serialize_uint16_t>
 801a526:	4605      	mov	r5, r0
 801a528:	89b1      	ldrh	r1, [r6, #12]
 801a52a:	4638      	mov	r0, r7
 801a52c:	f7f8 fbec 	bl	8012d08 <ucdr_serialize_uint16_t>
 801a530:	4005      	ands	r5, r0
 801a532:	89f1      	ldrh	r1, [r6, #14]
 801a534:	4638      	mov	r0, r7
 801a536:	b2ed      	uxtb	r5, r5
 801a538:	f7f8 fbe6 	bl	8012d08 <ucdr_serialize_uint16_t>
 801a53c:	8a31      	ldrh	r1, [r6, #16]
 801a53e:	4025      	ands	r5, r4
 801a540:	4604      	mov	r4, r0
 801a542:	4638      	mov	r0, r7
 801a544:	4025      	ands	r5, r4
 801a546:	f7f8 fbdf 	bl	8012d08 <ucdr_serialize_uint16_t>
 801a54a:	ea00 0405 	and.w	r4, r0, r5
 801a54e:	4620      	mov	r0, r4
 801a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a552:	bf00      	nop

0801a554 <uxr_serialize_CREATE_CLIENT_Payload>:
 801a554:	f7ff b9ea 	b.w	801992c <uxr_serialize_CLIENT_Representation>

0801a558 <uxr_serialize_CREATE_Payload>:
 801a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a55a:	2202      	movs	r2, #2
 801a55c:	4607      	mov	r7, r0
 801a55e:	460e      	mov	r6, r1
 801a560:	f005 fd74 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a564:	2202      	movs	r2, #2
 801a566:	4605      	mov	r5, r0
 801a568:	4638      	mov	r0, r7
 801a56a:	18b1      	adds	r1, r6, r2
 801a56c:	f005 fd6e 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a570:	7931      	ldrb	r1, [r6, #4]
 801a572:	4604      	mov	r4, r0
 801a574:	4638      	mov	r0, r7
 801a576:	f7f8 fb9b 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a57a:	b170      	cbz	r0, 801a59a <uxr_serialize_CREATE_Payload+0x42>
 801a57c:	7933      	ldrb	r3, [r6, #4]
 801a57e:	402c      	ands	r4, r5
 801a580:	3b01      	subs	r3, #1
 801a582:	b2e4      	uxtb	r4, r4
 801a584:	2b0d      	cmp	r3, #13
 801a586:	d809      	bhi.n	801a59c <uxr_serialize_CREATE_Payload+0x44>
 801a588:	e8df f003 	tbb	[pc, r3]
 801a58c:	23230a4c 	.word	0x23230a4c
 801a590:	0a0a0a0a 	.word	0x0a0a0a0a
 801a594:	12121208 	.word	0x12121208
 801a598:	3e45      	.short	0x3e45
 801a59a:	2400      	movs	r4, #0
 801a59c:	4620      	mov	r0, r4
 801a59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5a0:	f106 0108 	add.w	r1, r6, #8
 801a5a4:	4638      	mov	r0, r7
 801a5a6:	f7ff fac7 	bl	8019b38 <uxr_serialize_DATAWRITER_Representation>
 801a5aa:	4004      	ands	r4, r0
 801a5ac:	4620      	mov	r0, r4
 801a5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5b0:	7a31      	ldrb	r1, [r6, #8]
 801a5b2:	4638      	mov	r0, r7
 801a5b4:	f7f8 fb7c 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a5b8:	2800      	cmp	r0, #0
 801a5ba:	d0ee      	beq.n	801a59a <uxr_serialize_CREATE_Payload+0x42>
 801a5bc:	7a33      	ldrb	r3, [r6, #8]
 801a5be:	2b01      	cmp	r3, #1
 801a5c0:	d001      	beq.n	801a5c6 <uxr_serialize_CREATE_Payload+0x6e>
 801a5c2:	2b02      	cmp	r3, #2
 801a5c4:	d1ea      	bne.n	801a59c <uxr_serialize_CREATE_Payload+0x44>
 801a5c6:	68f1      	ldr	r1, [r6, #12]
 801a5c8:	4638      	mov	r0, r7
 801a5ca:	f005 fe0b 	bl	80201e4 <ucdr_serialize_string>
 801a5ce:	4004      	ands	r4, r0
 801a5d0:	e7e4      	b.n	801a59c <uxr_serialize_CREATE_Payload+0x44>
 801a5d2:	7a31      	ldrb	r1, [r6, #8]
 801a5d4:	4638      	mov	r0, r7
 801a5d6:	f7f8 fb6b 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a5da:	4605      	mov	r5, r0
 801a5dc:	b158      	cbz	r0, 801a5f6 <uxr_serialize_CREATE_Payload+0x9e>
 801a5de:	7a33      	ldrb	r3, [r6, #8]
 801a5e0:	2b02      	cmp	r3, #2
 801a5e2:	d034      	beq.n	801a64e <uxr_serialize_CREATE_Payload+0xf6>
 801a5e4:	2b03      	cmp	r3, #3
 801a5e6:	d106      	bne.n	801a5f6 <uxr_serialize_CREATE_Payload+0x9e>
 801a5e8:	68f2      	ldr	r2, [r6, #12]
 801a5ea:	f106 0110 	add.w	r1, r6, #16
 801a5ee:	4638      	mov	r0, r7
 801a5f0:	f7fc fc0c 	bl	8016e0c <ucdr_serialize_sequence_uint8_t>
 801a5f4:	4605      	mov	r5, r0
 801a5f6:	2202      	movs	r2, #2
 801a5f8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801a5fc:	4638      	mov	r0, r7
 801a5fe:	f005 fd25 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a602:	4028      	ands	r0, r5
 801a604:	4004      	ands	r4, r0
 801a606:	e7c9      	b.n	801a59c <uxr_serialize_CREATE_Payload+0x44>
 801a608:	f106 0108 	add.w	r1, r6, #8
 801a60c:	4638      	mov	r0, r7
 801a60e:	f7ff f98d 	bl	801992c <uxr_serialize_CLIENT_Representation>
 801a612:	4004      	ands	r4, r0
 801a614:	e7c2      	b.n	801a59c <uxr_serialize_CREATE_Payload+0x44>
 801a616:	f106 0108 	add.w	r1, r6, #8
 801a61a:	4638      	mov	r0, r7
 801a61c:	f7ff fa42 	bl	8019aa4 <uxr_serialize_AGENT_Representation>
 801a620:	4004      	ands	r4, r0
 801a622:	e7bb      	b.n	801a59c <uxr_serialize_CREATE_Payload+0x44>
 801a624:	7a31      	ldrb	r1, [r6, #8]
 801a626:	4638      	mov	r0, r7
 801a628:	f7f8 fb42 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a62c:	4605      	mov	r5, r0
 801a62e:	b130      	cbz	r0, 801a63e <uxr_serialize_CREATE_Payload+0xe6>
 801a630:	7a33      	ldrb	r3, [r6, #8]
 801a632:	2b02      	cmp	r3, #2
 801a634:	d011      	beq.n	801a65a <uxr_serialize_CREATE_Payload+0x102>
 801a636:	2b03      	cmp	r3, #3
 801a638:	d015      	beq.n	801a666 <uxr_serialize_CREATE_Payload+0x10e>
 801a63a:	2b01      	cmp	r3, #1
 801a63c:	d00d      	beq.n	801a65a <uxr_serialize_CREATE_Payload+0x102>
 801a63e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801a642:	4638      	mov	r0, r7
 801a644:	f7f9 f870 	bl	8013728 <ucdr_serialize_int16_t>
 801a648:	4028      	ands	r0, r5
 801a64a:	4004      	ands	r4, r0
 801a64c:	e7a6      	b.n	801a59c <uxr_serialize_CREATE_Payload+0x44>
 801a64e:	68f1      	ldr	r1, [r6, #12]
 801a650:	4638      	mov	r0, r7
 801a652:	f005 fdc7 	bl	80201e4 <ucdr_serialize_string>
 801a656:	4605      	mov	r5, r0
 801a658:	e7cd      	b.n	801a5f6 <uxr_serialize_CREATE_Payload+0x9e>
 801a65a:	68f1      	ldr	r1, [r6, #12]
 801a65c:	4638      	mov	r0, r7
 801a65e:	f005 fdc1 	bl	80201e4 <ucdr_serialize_string>
 801a662:	4605      	mov	r5, r0
 801a664:	e7eb      	b.n	801a63e <uxr_serialize_CREATE_Payload+0xe6>
 801a666:	68f2      	ldr	r2, [r6, #12]
 801a668:	f106 0110 	add.w	r1, r6, #16
 801a66c:	4638      	mov	r0, r7
 801a66e:	f7fc fbcd 	bl	8016e0c <ucdr_serialize_sequence_uint8_t>
 801a672:	4605      	mov	r5, r0
 801a674:	e7e3      	b.n	801a63e <uxr_serialize_CREATE_Payload+0xe6>
 801a676:	bf00      	nop

0801a678 <uxr_serialize_GET_INFO_Payload>:
 801a678:	b570      	push	{r4, r5, r6, lr}
 801a67a:	2202      	movs	r2, #2
 801a67c:	4605      	mov	r5, r0
 801a67e:	460e      	mov	r6, r1
 801a680:	f005 fce4 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a684:	2202      	movs	r2, #2
 801a686:	4604      	mov	r4, r0
 801a688:	4628      	mov	r0, r5
 801a68a:	18b1      	adds	r1, r6, r2
 801a68c:	f005 fcde 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a690:	4603      	mov	r3, r0
 801a692:	6871      	ldr	r1, [r6, #4]
 801a694:	4628      	mov	r0, r5
 801a696:	401c      	ands	r4, r3
 801a698:	f7f8 fd20 	bl	80130dc <ucdr_serialize_uint32_t>
 801a69c:	b2e4      	uxtb	r4, r4
 801a69e:	4020      	ands	r0, r4
 801a6a0:	bd70      	pop	{r4, r5, r6, pc}
 801a6a2:	bf00      	nop

0801a6a4 <uxr_deserialize_GET_INFO_Payload>:
 801a6a4:	b570      	push	{r4, r5, r6, lr}
 801a6a6:	2202      	movs	r2, #2
 801a6a8:	4605      	mov	r5, r0
 801a6aa:	460e      	mov	r6, r1
 801a6ac:	f005 fd32 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a6b0:	2202      	movs	r2, #2
 801a6b2:	4604      	mov	r4, r0
 801a6b4:	4628      	mov	r0, r5
 801a6b6:	18b1      	adds	r1, r6, r2
 801a6b8:	f005 fd2c 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a6bc:	4603      	mov	r3, r0
 801a6be:	1d31      	adds	r1, r6, #4
 801a6c0:	4628      	mov	r0, r5
 801a6c2:	401c      	ands	r4, r3
 801a6c4:	f7f8 fe3a 	bl	801333c <ucdr_deserialize_uint32_t>
 801a6c8:	b2e4      	uxtb	r4, r4
 801a6ca:	4020      	ands	r0, r4
 801a6cc:	bd70      	pop	{r4, r5, r6, pc}
 801a6ce:	bf00      	nop

0801a6d0 <uxr_serialize_DELETE_Payload>:
 801a6d0:	b570      	push	{r4, r5, r6, lr}
 801a6d2:	2202      	movs	r2, #2
 801a6d4:	4605      	mov	r5, r0
 801a6d6:	460e      	mov	r6, r1
 801a6d8:	f005 fcb8 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a6dc:	2202      	movs	r2, #2
 801a6de:	4604      	mov	r4, r0
 801a6e0:	4628      	mov	r0, r5
 801a6e2:	18b1      	adds	r1, r6, r2
 801a6e4:	f005 fcb2 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a6e8:	4020      	ands	r0, r4
 801a6ea:	b2c0      	uxtb	r0, r0
 801a6ec:	bd70      	pop	{r4, r5, r6, pc}
 801a6ee:	bf00      	nop

0801a6f0 <uxr_deserialize_STATUS_AGENT_Payload>:
 801a6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a6f4:	460e      	mov	r6, r1
 801a6f6:	4605      	mov	r5, r0
 801a6f8:	f7f8 faf0 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a6fc:	4604      	mov	r4, r0
 801a6fe:	1c71      	adds	r1, r6, #1
 801a700:	4628      	mov	r0, r5
 801a702:	f7f8 faeb 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a706:	2204      	movs	r2, #4
 801a708:	4681      	mov	r9, r0
 801a70a:	4628      	mov	r0, r5
 801a70c:	18b1      	adds	r1, r6, r2
 801a70e:	f005 fd01 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a712:	f106 0108 	add.w	r1, r6, #8
 801a716:	4680      	mov	r8, r0
 801a718:	2202      	movs	r2, #2
 801a71a:	4628      	mov	r0, r5
 801a71c:	f005 fcfa 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a720:	ea04 0309 	and.w	r3, r4, r9
 801a724:	4607      	mov	r7, r0
 801a726:	2202      	movs	r2, #2
 801a728:	b2db      	uxtb	r3, r3
 801a72a:	f106 010a 	add.w	r1, r6, #10
 801a72e:	4628      	mov	r0, r5
 801a730:	ea03 0408 	and.w	r4, r3, r8
 801a734:	f005 fcee 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a738:	4603      	mov	r3, r0
 801a73a:	4628      	mov	r0, r5
 801a73c:	403c      	ands	r4, r7
 801a73e:	f106 010c 	add.w	r1, r6, #12
 801a742:	461d      	mov	r5, r3
 801a744:	f7f8 fa9c 	bl	8012c80 <ucdr_deserialize_bool>
 801a748:	4025      	ands	r5, r4
 801a74a:	4028      	ands	r0, r5
 801a74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a750 <uxr_deserialize_STATUS_Payload>:
 801a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a754:	2202      	movs	r2, #2
 801a756:	4606      	mov	r6, r0
 801a758:	460f      	mov	r7, r1
 801a75a:	f005 fcdb 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a75e:	2202      	movs	r2, #2
 801a760:	4605      	mov	r5, r0
 801a762:	4630      	mov	r0, r6
 801a764:	18b9      	adds	r1, r7, r2
 801a766:	f005 fcd5 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a76a:	4680      	mov	r8, r0
 801a76c:	1d39      	adds	r1, r7, #4
 801a76e:	4630      	mov	r0, r6
 801a770:	f7f8 fab4 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a774:	ea05 0508 	and.w	r5, r5, r8
 801a778:	4604      	mov	r4, r0
 801a77a:	1d79      	adds	r1, r7, #5
 801a77c:	4630      	mov	r0, r6
 801a77e:	402c      	ands	r4, r5
 801a780:	f7f8 faac 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a784:	4020      	ands	r0, r4
 801a786:	b2c0      	uxtb	r0, r0
 801a788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a78c <uxr_serialize_INFO_Payload>:
 801a78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a790:	2202      	movs	r2, #2
 801a792:	460c      	mov	r4, r1
 801a794:	4605      	mov	r5, r0
 801a796:	f005 fc59 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a79a:	2202      	movs	r2, #2
 801a79c:	4680      	mov	r8, r0
 801a79e:	4628      	mov	r0, r5
 801a7a0:	18a1      	adds	r1, r4, r2
 801a7a2:	f005 fc53 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a7a6:	4607      	mov	r7, r0
 801a7a8:	7921      	ldrb	r1, [r4, #4]
 801a7aa:	4628      	mov	r0, r5
 801a7ac:	f7f8 fa80 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a7b0:	ea08 0807 	and.w	r8, r8, r7
 801a7b4:	4606      	mov	r6, r0
 801a7b6:	7961      	ldrb	r1, [r4, #5]
 801a7b8:	4628      	mov	r0, r5
 801a7ba:	ea06 0608 	and.w	r6, r6, r8
 801a7be:	f7f8 fa77 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a7c2:	7a21      	ldrb	r1, [r4, #8]
 801a7c4:	4030      	ands	r0, r6
 801a7c6:	b2c7      	uxtb	r7, r0
 801a7c8:	4628      	mov	r0, r5
 801a7ca:	f7f8 fa43 	bl	8012c54 <ucdr_serialize_bool>
 801a7ce:	7a23      	ldrb	r3, [r4, #8]
 801a7d0:	4606      	mov	r6, r0
 801a7d2:	b96b      	cbnz	r3, 801a7f0 <uxr_serialize_INFO_Payload+0x64>
 801a7d4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801a7d8:	4628      	mov	r0, r5
 801a7da:	f7f8 fa3b 	bl	8012c54 <ucdr_serialize_bool>
 801a7de:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801a7e2:	4030      	ands	r0, r6
 801a7e4:	b2c6      	uxtb	r6, r0
 801a7e6:	b983      	cbnz	r3, 801a80a <uxr_serialize_INFO_Payload+0x7e>
 801a7e8:	ea06 0007 	and.w	r0, r6, r7
 801a7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7f0:	7b21      	ldrb	r1, [r4, #12]
 801a7f2:	4628      	mov	r0, r5
 801a7f4:	f7f8 fa5c 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a7f8:	b188      	cbz	r0, 801a81e <uxr_serialize_INFO_Payload+0x92>
 801a7fa:	f104 010c 	add.w	r1, r4, #12
 801a7fe:	4628      	mov	r0, r5
 801a800:	f7ff f9c2 	bl	8019b88 <uxr_serialize_ObjectVariant.part.0>
 801a804:	4030      	ands	r0, r6
 801a806:	b2c6      	uxtb	r6, r0
 801a808:	e7e4      	b.n	801a7d4 <uxr_serialize_INFO_Payload+0x48>
 801a80a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801a80e:	4628      	mov	r0, r5
 801a810:	f7ff fda2 	bl	801a358 <uxr_serialize_ActivityInfoVariant>
 801a814:	4006      	ands	r6, r0
 801a816:	ea06 0007 	and.w	r0, r6, r7
 801a81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a81e:	4606      	mov	r6, r0
 801a820:	e7d8      	b.n	801a7d4 <uxr_serialize_INFO_Payload+0x48>
 801a822:	bf00      	nop

0801a824 <uxr_serialize_READ_DATA_Payload>:
 801a824:	b570      	push	{r4, r5, r6, lr}
 801a826:	2202      	movs	r2, #2
 801a828:	4605      	mov	r5, r0
 801a82a:	460e      	mov	r6, r1
 801a82c:	f005 fc0e 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a830:	2202      	movs	r2, #2
 801a832:	4604      	mov	r4, r0
 801a834:	4628      	mov	r0, r5
 801a836:	18b1      	adds	r1, r6, r2
 801a838:	f005 fc08 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a83c:	4603      	mov	r3, r0
 801a83e:	1d31      	adds	r1, r6, #4
 801a840:	4628      	mov	r0, r5
 801a842:	401c      	ands	r4, r3
 801a844:	f7ff fe48 	bl	801a4d8 <uxr_serialize_ReadSpecification>
 801a848:	b2e4      	uxtb	r4, r4
 801a84a:	4020      	ands	r0, r4
 801a84c:	bd70      	pop	{r4, r5, r6, pc}
 801a84e:	bf00      	nop

0801a850 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801a850:	b570      	push	{r4, r5, r6, lr}
 801a852:	2202      	movs	r2, #2
 801a854:	4605      	mov	r5, r0
 801a856:	460e      	mov	r6, r1
 801a858:	f005 fbf8 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a85c:	2202      	movs	r2, #2
 801a85e:	4604      	mov	r4, r0
 801a860:	4628      	mov	r0, r5
 801a862:	18b1      	adds	r1, r6, r2
 801a864:	f005 fbf2 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a868:	4020      	ands	r0, r4
 801a86a:	b2c0      	uxtb	r0, r0
 801a86c:	bd70      	pop	{r4, r5, r6, pc}
 801a86e:	bf00      	nop

0801a870 <uxr_serialize_ACKNACK_Payload>:
 801a870:	b570      	push	{r4, r5, r6, lr}
 801a872:	460c      	mov	r4, r1
 801a874:	4605      	mov	r5, r0
 801a876:	460e      	mov	r6, r1
 801a878:	f834 1b02 	ldrh.w	r1, [r4], #2
 801a87c:	f7f8 fa44 	bl	8012d08 <ucdr_serialize_uint16_t>
 801a880:	2202      	movs	r2, #2
 801a882:	4621      	mov	r1, r4
 801a884:	4604      	mov	r4, r0
 801a886:	4628      	mov	r0, r5
 801a888:	f005 fbe0 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a88c:	4603      	mov	r3, r0
 801a88e:	7931      	ldrb	r1, [r6, #4]
 801a890:	4628      	mov	r0, r5
 801a892:	401c      	ands	r4, r3
 801a894:	f7f8 fa0c 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a898:	b2e4      	uxtb	r4, r4
 801a89a:	4020      	ands	r0, r4
 801a89c:	bd70      	pop	{r4, r5, r6, pc}
 801a89e:	bf00      	nop

0801a8a0 <uxr_deserialize_ACKNACK_Payload>:
 801a8a0:	b570      	push	{r4, r5, r6, lr}
 801a8a2:	460e      	mov	r6, r1
 801a8a4:	4605      	mov	r5, r0
 801a8a6:	f7f8 fb2f 	bl	8012f08 <ucdr_deserialize_uint16_t>
 801a8aa:	2202      	movs	r2, #2
 801a8ac:	4604      	mov	r4, r0
 801a8ae:	4628      	mov	r0, r5
 801a8b0:	18b1      	adds	r1, r6, r2
 801a8b2:	f005 fc2f 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a8b6:	4603      	mov	r3, r0
 801a8b8:	1d31      	adds	r1, r6, #4
 801a8ba:	4628      	mov	r0, r5
 801a8bc:	401c      	ands	r4, r3
 801a8be:	f7f8 fa0d 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a8c2:	b2e4      	uxtb	r4, r4
 801a8c4:	4020      	ands	r0, r4
 801a8c6:	bd70      	pop	{r4, r5, r6, pc}

0801a8c8 <uxr_serialize_HEARTBEAT_Payload>:
 801a8c8:	b570      	push	{r4, r5, r6, lr}
 801a8ca:	460d      	mov	r5, r1
 801a8cc:	4606      	mov	r6, r0
 801a8ce:	8809      	ldrh	r1, [r1, #0]
 801a8d0:	f7f8 fa1a 	bl	8012d08 <ucdr_serialize_uint16_t>
 801a8d4:	8869      	ldrh	r1, [r5, #2]
 801a8d6:	4604      	mov	r4, r0
 801a8d8:	4630      	mov	r0, r6
 801a8da:	f7f8 fa15 	bl	8012d08 <ucdr_serialize_uint16_t>
 801a8de:	4603      	mov	r3, r0
 801a8e0:	7929      	ldrb	r1, [r5, #4]
 801a8e2:	4630      	mov	r0, r6
 801a8e4:	401c      	ands	r4, r3
 801a8e6:	f7f8 f9e3 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a8ea:	b2e4      	uxtb	r4, r4
 801a8ec:	4020      	ands	r0, r4
 801a8ee:	bd70      	pop	{r4, r5, r6, pc}

0801a8f0 <uxr_deserialize_HEARTBEAT_Payload>:
 801a8f0:	b570      	push	{r4, r5, r6, lr}
 801a8f2:	460e      	mov	r6, r1
 801a8f4:	4605      	mov	r5, r0
 801a8f6:	f7f8 fb07 	bl	8012f08 <ucdr_deserialize_uint16_t>
 801a8fa:	4604      	mov	r4, r0
 801a8fc:	1cb1      	adds	r1, r6, #2
 801a8fe:	4628      	mov	r0, r5
 801a900:	f7f8 fb02 	bl	8012f08 <ucdr_deserialize_uint16_t>
 801a904:	4603      	mov	r3, r0
 801a906:	1d31      	adds	r1, r6, #4
 801a908:	4628      	mov	r0, r5
 801a90a:	401c      	ands	r4, r3
 801a90c:	f7f8 f9e6 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801a910:	b2e4      	uxtb	r4, r4
 801a912:	4020      	ands	r0, r4
 801a914:	bd70      	pop	{r4, r5, r6, pc}
 801a916:	bf00      	nop

0801a918 <uxr_serialize_TIMESTAMP_Payload>:
 801a918:	b570      	push	{r4, r5, r6, lr}
 801a91a:	460d      	mov	r5, r1
 801a91c:	4606      	mov	r6, r0
 801a91e:	6809      	ldr	r1, [r1, #0]
 801a920:	f7f8 fff6 	bl	8013910 <ucdr_serialize_int32_t>
 801a924:	4604      	mov	r4, r0
 801a926:	6869      	ldr	r1, [r5, #4]
 801a928:	4630      	mov	r0, r6
 801a92a:	f7f8 fbd7 	bl	80130dc <ucdr_serialize_uint32_t>
 801a92e:	4020      	ands	r0, r4
 801a930:	b2c0      	uxtb	r0, r0
 801a932:	bd70      	pop	{r4, r5, r6, pc}

0801a934 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801a934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a938:	460e      	mov	r6, r1
 801a93a:	4605      	mov	r5, r0
 801a93c:	f7f9 f880 	bl	8013a40 <ucdr_deserialize_int32_t>
 801a940:	4607      	mov	r7, r0
 801a942:	1d31      	adds	r1, r6, #4
 801a944:	4628      	mov	r0, r5
 801a946:	f7f8 fcf9 	bl	801333c <ucdr_deserialize_uint32_t>
 801a94a:	4680      	mov	r8, r0
 801a94c:	f106 0108 	add.w	r1, r6, #8
 801a950:	4628      	mov	r0, r5
 801a952:	f7f9 f875 	bl	8013a40 <ucdr_deserialize_int32_t>
 801a956:	ea07 0708 	and.w	r7, r7, r8
 801a95a:	4604      	mov	r4, r0
 801a95c:	f106 010c 	add.w	r1, r6, #12
 801a960:	4628      	mov	r0, r5
 801a962:	403c      	ands	r4, r7
 801a964:	f7f8 fcea 	bl	801333c <ucdr_deserialize_uint32_t>
 801a968:	f106 0110 	add.w	r1, r6, #16
 801a96c:	4004      	ands	r4, r0
 801a96e:	4628      	mov	r0, r5
 801a970:	f7f9 f866 	bl	8013a40 <ucdr_deserialize_int32_t>
 801a974:	4603      	mov	r3, r0
 801a976:	b2e4      	uxtb	r4, r4
 801a978:	4628      	mov	r0, r5
 801a97a:	461d      	mov	r5, r3
 801a97c:	f106 0114 	add.w	r1, r6, #20
 801a980:	f7f8 fcdc 	bl	801333c <ucdr_deserialize_uint32_t>
 801a984:	402c      	ands	r4, r5
 801a986:	4020      	ands	r0, r4
 801a988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a98c <uxr_serialize_SampleIdentity>:
 801a98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a990:	4604      	mov	r4, r0
 801a992:	460d      	mov	r5, r1
 801a994:	220c      	movs	r2, #12
 801a996:	f005 fb59 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a99a:	2203      	movs	r2, #3
 801a99c:	f105 010c 	add.w	r1, r5, #12
 801a9a0:	4607      	mov	r7, r0
 801a9a2:	4620      	mov	r0, r4
 801a9a4:	f005 fb52 	bl	802004c <ucdr_serialize_array_uint8_t>
 801a9a8:	7be9      	ldrb	r1, [r5, #15]
 801a9aa:	4680      	mov	r8, r0
 801a9ac:	4620      	mov	r0, r4
 801a9ae:	f7f8 f97f 	bl	8012cb0 <ucdr_serialize_uint8_t>
 801a9b2:	6929      	ldr	r1, [r5, #16]
 801a9b4:	4606      	mov	r6, r0
 801a9b6:	4620      	mov	r0, r4
 801a9b8:	f7f8 ffaa 	bl	8013910 <ucdr_serialize_int32_t>
 801a9bc:	ea07 0708 	and.w	r7, r7, r8
 801a9c0:	4603      	mov	r3, r0
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	403e      	ands	r6, r7
 801a9c6:	6969      	ldr	r1, [r5, #20]
 801a9c8:	461c      	mov	r4, r3
 801a9ca:	f7f8 fb87 	bl	80130dc <ucdr_serialize_uint32_t>
 801a9ce:	4034      	ands	r4, r6
 801a9d0:	4020      	ands	r0, r4
 801a9d2:	b2c0      	uxtb	r0, r0
 801a9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a9d8 <uxr_deserialize_SampleIdentity>:
 801a9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9dc:	4604      	mov	r4, r0
 801a9de:	460d      	mov	r5, r1
 801a9e0:	220c      	movs	r2, #12
 801a9e2:	f005 fb97 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a9e6:	2203      	movs	r2, #3
 801a9e8:	f105 010c 	add.w	r1, r5, #12
 801a9ec:	4607      	mov	r7, r0
 801a9ee:	4620      	mov	r0, r4
 801a9f0:	f005 fb90 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 801a9f4:	f105 010f 	add.w	r1, r5, #15
 801a9f8:	4680      	mov	r8, r0
 801a9fa:	4620      	mov	r0, r4
 801a9fc:	f7f8 f96e 	bl	8012cdc <ucdr_deserialize_uint8_t>
 801aa00:	f105 0110 	add.w	r1, r5, #16
 801aa04:	4606      	mov	r6, r0
 801aa06:	4620      	mov	r0, r4
 801aa08:	f7f9 f81a 	bl	8013a40 <ucdr_deserialize_int32_t>
 801aa0c:	ea07 0708 	and.w	r7, r7, r8
 801aa10:	4603      	mov	r3, r0
 801aa12:	4620      	mov	r0, r4
 801aa14:	403e      	ands	r6, r7
 801aa16:	f105 0114 	add.w	r1, r5, #20
 801aa1a:	461c      	mov	r4, r3
 801aa1c:	f7f8 fc8e 	bl	801333c <ucdr_deserialize_uint32_t>
 801aa20:	4034      	ands	r4, r6
 801aa22:	4020      	ands	r0, r4
 801aa24:	b2c0      	uxtb	r0, r0
 801aa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa2a:	bf00      	nop

0801aa2c <rcl_client_get_rmw_handle>:
 801aa2c:	b118      	cbz	r0, 801aa36 <rcl_client_get_rmw_handle+0xa>
 801aa2e:	6800      	ldr	r0, [r0, #0]
 801aa30:	b108      	cbz	r0, 801aa36 <rcl_client_get_rmw_handle+0xa>
 801aa32:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801aa36:	4770      	bx	lr

0801aa38 <rcl_send_request>:
 801aa38:	b570      	push	{r4, r5, r6, lr}
 801aa3a:	b082      	sub	sp, #8
 801aa3c:	b1f8      	cbz	r0, 801aa7e <rcl_send_request+0x46>
 801aa3e:	4604      	mov	r4, r0
 801aa40:	6800      	ldr	r0, [r0, #0]
 801aa42:	b1e0      	cbz	r0, 801aa7e <rcl_send_request+0x46>
 801aa44:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801aa48:	b1cb      	cbz	r3, 801aa7e <rcl_send_request+0x46>
 801aa4a:	460e      	mov	r6, r1
 801aa4c:	b1e1      	cbz	r1, 801aa88 <rcl_send_request+0x50>
 801aa4e:	4615      	mov	r5, r2
 801aa50:	b1d2      	cbz	r2, 801aa88 <rcl_send_request+0x50>
 801aa52:	2105      	movs	r1, #5
 801aa54:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801aa58:	f003 f8b6 	bl	801dbc8 <__atomic_load_8>
 801aa5c:	4602      	mov	r2, r0
 801aa5e:	460b      	mov	r3, r1
 801aa60:	4631      	mov	r1, r6
 801aa62:	e9c5 2300 	strd	r2, r3, [r5]
 801aa66:	6823      	ldr	r3, [r4, #0]
 801aa68:	462a      	mov	r2, r5
 801aa6a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801aa6e:	f004 faa1 	bl	801efb4 <rmw_send_request>
 801aa72:	4606      	mov	r6, r0
 801aa74:	b160      	cbz	r0, 801aa90 <rcl_send_request+0x58>
 801aa76:	2601      	movs	r6, #1
 801aa78:	4630      	mov	r0, r6
 801aa7a:	b002      	add	sp, #8
 801aa7c:	bd70      	pop	{r4, r5, r6, pc}
 801aa7e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801aa82:	4630      	mov	r0, r6
 801aa84:	b002      	add	sp, #8
 801aa86:	bd70      	pop	{r4, r5, r6, pc}
 801aa88:	260b      	movs	r6, #11
 801aa8a:	4630      	mov	r0, r6
 801aa8c:	b002      	add	sp, #8
 801aa8e:	bd70      	pop	{r4, r5, r6, pc}
 801aa90:	6820      	ldr	r0, [r4, #0]
 801aa92:	2105      	movs	r1, #5
 801aa94:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aa98:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801aa9c:	9100      	str	r1, [sp, #0]
 801aa9e:	f003 f8ff 	bl	801dca0 <__atomic_exchange_8>
 801aaa2:	4630      	mov	r0, r6
 801aaa4:	b002      	add	sp, #8
 801aaa6:	bd70      	pop	{r4, r5, r6, pc}

0801aaa8 <rcl_take_response>:
 801aaa8:	b570      	push	{r4, r5, r6, lr}
 801aaaa:	468e      	mov	lr, r1
 801aaac:	b08c      	sub	sp, #48	@ 0x30
 801aaae:	460c      	mov	r4, r1
 801aab0:	4616      	mov	r6, r2
 801aab2:	f10d 0c18 	add.w	ip, sp, #24
 801aab6:	4605      	mov	r5, r0
 801aab8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aabc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aac0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801aac4:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aac8:	b35d      	cbz	r5, 801ab22 <rcl_take_response+0x7a>
 801aaca:	682b      	ldr	r3, [r5, #0]
 801aacc:	b34b      	cbz	r3, 801ab22 <rcl_take_response+0x7a>
 801aace:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801aad2:	b330      	cbz	r0, 801ab22 <rcl_take_response+0x7a>
 801aad4:	b346      	cbz	r6, 801ab28 <rcl_take_response+0x80>
 801aad6:	2300      	movs	r3, #0
 801aad8:	4632      	mov	r2, r6
 801aada:	a902      	add	r1, sp, #8
 801aadc:	f88d 3007 	strb.w	r3, [sp, #7]
 801aae0:	f10d 0307 	add.w	r3, sp, #7
 801aae4:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801ab30 <rcl_take_response+0x88>
 801aae8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aaec:	ed8d 7b04 	vstr	d7, [sp, #16]
 801aaf0:	f004 fb68 	bl	801f1c4 <rmw_take_response>
 801aaf4:	4605      	mov	r5, r0
 801aaf6:	b9c8      	cbnz	r0, 801ab2c <rcl_take_response+0x84>
 801aaf8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801aafc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801ab00:	2a00      	cmp	r2, #0
 801ab02:	bf08      	it	eq
 801ab04:	461d      	moveq	r5, r3
 801ab06:	f10d 0e18 	add.w	lr, sp, #24
 801ab0a:	46a4      	mov	ip, r4
 801ab0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ab10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab14:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ab18:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ab1c:	4628      	mov	r0, r5
 801ab1e:	b00c      	add	sp, #48	@ 0x30
 801ab20:	bd70      	pop	{r4, r5, r6, pc}
 801ab22:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801ab26:	e7ee      	b.n	801ab06 <rcl_take_response+0x5e>
 801ab28:	250b      	movs	r5, #11
 801ab2a:	e7ec      	b.n	801ab06 <rcl_take_response+0x5e>
 801ab2c:	2501      	movs	r5, #1
 801ab2e:	e7ea      	b.n	801ab06 <rcl_take_response+0x5e>
	...

0801ab38 <rcl_client_is_valid>:
 801ab38:	b130      	cbz	r0, 801ab48 <rcl_client_is_valid+0x10>
 801ab3a:	6800      	ldr	r0, [r0, #0]
 801ab3c:	b120      	cbz	r0, 801ab48 <rcl_client_is_valid+0x10>
 801ab3e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801ab42:	3800      	subs	r0, #0
 801ab44:	bf18      	it	ne
 801ab46:	2001      	movne	r0, #1
 801ab48:	4770      	bx	lr
 801ab4a:	bf00      	nop

0801ab4c <rcl_convert_rmw_ret_to_rcl_ret>:
 801ab4c:	280b      	cmp	r0, #11
 801ab4e:	dc0d      	bgt.n	801ab6c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801ab50:	2800      	cmp	r0, #0
 801ab52:	db09      	blt.n	801ab68 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801ab54:	280b      	cmp	r0, #11
 801ab56:	d807      	bhi.n	801ab68 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801ab58:	e8df f000 	tbb	[pc, r0]
 801ab5c:	07060607 	.word	0x07060607
 801ab60:	06060606 	.word	0x06060606
 801ab64:	07070606 	.word	0x07070606
 801ab68:	2001      	movs	r0, #1
 801ab6a:	4770      	bx	lr
 801ab6c:	28cb      	cmp	r0, #203	@ 0xcb
 801ab6e:	bf18      	it	ne
 801ab70:	2001      	movne	r0, #1
 801ab72:	4770      	bx	lr

0801ab74 <rcl_get_zero_initialized_context>:
 801ab74:	4a03      	ldr	r2, [pc, #12]	@ (801ab84 <rcl_get_zero_initialized_context+0x10>)
 801ab76:	4603      	mov	r3, r0
 801ab78:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ab7c:	e883 0003 	stmia.w	r3, {r0, r1}
 801ab80:	4618      	mov	r0, r3
 801ab82:	4770      	bx	lr
 801ab84:	08025200 	.word	0x08025200

0801ab88 <rcl_context_is_valid>:
 801ab88:	b118      	cbz	r0, 801ab92 <rcl_context_is_valid+0xa>
 801ab8a:	6840      	ldr	r0, [r0, #4]
 801ab8c:	3800      	subs	r0, #0
 801ab8e:	bf18      	it	ne
 801ab90:	2001      	movne	r0, #1
 801ab92:	4770      	bx	lr

0801ab94 <__cleanup_context>:
 801ab94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab98:	4606      	mov	r6, r0
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	6800      	ldr	r0, [r0, #0]
 801ab9e:	6073      	str	r3, [r6, #4]
 801aba0:	2800      	cmp	r0, #0
 801aba2:	d049      	beq.n	801ac38 <__cleanup_context+0xa4>
 801aba4:	6947      	ldr	r7, [r0, #20]
 801aba6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801abaa:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801abae:	b137      	cbz	r7, 801abbe <__cleanup_context+0x2a>
 801abb0:	3014      	adds	r0, #20
 801abb2:	f000 f9bd 	bl	801af30 <rcl_init_options_fini>
 801abb6:	4607      	mov	r7, r0
 801abb8:	2800      	cmp	r0, #0
 801abba:	d144      	bne.n	801ac46 <__cleanup_context+0xb2>
 801abbc:	6830      	ldr	r0, [r6, #0]
 801abbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801abc0:	b143      	cbz	r3, 801abd4 <__cleanup_context+0x40>
 801abc2:	3028      	adds	r0, #40	@ 0x28
 801abc4:	f004 f83c 	bl	801ec40 <rmw_context_fini>
 801abc8:	b118      	cbz	r0, 801abd2 <__cleanup_context+0x3e>
 801abca:	2f00      	cmp	r7, #0
 801abcc:	d03e      	beq.n	801ac4c <__cleanup_context+0xb8>
 801abce:	f7fa fc9b 	bl	8015508 <rcutils_reset_error>
 801abd2:	6830      	ldr	r0, [r6, #0]
 801abd4:	6a03      	ldr	r3, [r0, #32]
 801abd6:	b1db      	cbz	r3, 801ac10 <__cleanup_context+0x7c>
 801abd8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801abdc:	2a01      	cmp	r2, #1
 801abde:	f17c 0100 	sbcs.w	r1, ip, #0
 801abe2:	db11      	blt.n	801ac08 <__cleanup_context+0x74>
 801abe4:	2400      	movs	r4, #0
 801abe6:	4625      	mov	r5, r4
 801abe8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801abec:	4649      	mov	r1, r9
 801abee:	b1b8      	cbz	r0, 801ac20 <__cleanup_context+0x8c>
 801abf0:	47c0      	blx	r8
 801abf2:	6833      	ldr	r3, [r6, #0]
 801abf4:	3401      	adds	r4, #1
 801abf6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801abfa:	f145 0500 	adc.w	r5, r5, #0
 801abfe:	6a1b      	ldr	r3, [r3, #32]
 801ac00:	4294      	cmp	r4, r2
 801ac02:	eb75 010c 	sbcs.w	r1, r5, ip
 801ac06:	dbef      	blt.n	801abe8 <__cleanup_context+0x54>
 801ac08:	4618      	mov	r0, r3
 801ac0a:	4649      	mov	r1, r9
 801ac0c:	47c0      	blx	r8
 801ac0e:	6830      	ldr	r0, [r6, #0]
 801ac10:	4649      	mov	r1, r9
 801ac12:	47c0      	blx	r8
 801ac14:	2300      	movs	r3, #0
 801ac16:	4638      	mov	r0, r7
 801ac18:	e9c6 3300 	strd	r3, r3, [r6]
 801ac1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac20:	3401      	adds	r4, #1
 801ac22:	f145 0500 	adc.w	r5, r5, #0
 801ac26:	4294      	cmp	r4, r2
 801ac28:	eb75 010c 	sbcs.w	r1, r5, ip
 801ac2c:	dbdc      	blt.n	801abe8 <__cleanup_context+0x54>
 801ac2e:	4618      	mov	r0, r3
 801ac30:	4649      	mov	r1, r9
 801ac32:	47c0      	blx	r8
 801ac34:	6830      	ldr	r0, [r6, #0]
 801ac36:	e7eb      	b.n	801ac10 <__cleanup_context+0x7c>
 801ac38:	4607      	mov	r7, r0
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	4638      	mov	r0, r7
 801ac3e:	e9c6 3300 	strd	r3, r3, [r6]
 801ac42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac46:	f7fa fc5f 	bl	8015508 <rcutils_reset_error>
 801ac4a:	e7b7      	b.n	801abbc <__cleanup_context+0x28>
 801ac4c:	f7ff ff7e 	bl	801ab4c <rcl_convert_rmw_ret_to_rcl_ret>
 801ac50:	4607      	mov	r7, r0
 801ac52:	e7bc      	b.n	801abce <__cleanup_context+0x3a>

0801ac54 <rcl_init>:
 801ac54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac58:	1e05      	subs	r5, r0, #0
 801ac5a:	b09e      	sub	sp, #120	@ 0x78
 801ac5c:	460e      	mov	r6, r1
 801ac5e:	4690      	mov	r8, r2
 801ac60:	461f      	mov	r7, r3
 801ac62:	f340 809f 	ble.w	801ada4 <rcl_init+0x150>
 801ac66:	2900      	cmp	r1, #0
 801ac68:	f000 809f 	beq.w	801adaa <rcl_init+0x156>
 801ac6c:	f1a1 0e04 	sub.w	lr, r1, #4
 801ac70:	f04f 0c00 	mov.w	ip, #0
 801ac74:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801ac78:	f10c 0c01 	add.w	ip, ip, #1
 801ac7c:	2c00      	cmp	r4, #0
 801ac7e:	f000 8094 	beq.w	801adaa <rcl_init+0x156>
 801ac82:	4565      	cmp	r5, ip
 801ac84:	d1f6      	bne.n	801ac74 <rcl_init+0x20>
 801ac86:	f1b8 0f00 	cmp.w	r8, #0
 801ac8a:	f000 808e 	beq.w	801adaa <rcl_init+0x156>
 801ac8e:	f8d8 4000 	ldr.w	r4, [r8]
 801ac92:	2c00      	cmp	r4, #0
 801ac94:	f000 8089 	beq.w	801adaa <rcl_init+0x156>
 801ac98:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801ac9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aca2:	6823      	ldr	r3, [r4, #0]
 801aca4:	a819      	add	r0, sp, #100	@ 0x64
 801aca6:	f8cc 3000 	str.w	r3, [ip]
 801acaa:	f7fa fc09 	bl	80154c0 <rcutils_allocator_is_valid>
 801acae:	f080 0001 	eor.w	r0, r0, #1
 801acb2:	b2c0      	uxtb	r0, r0
 801acb4:	2800      	cmp	r0, #0
 801acb6:	d178      	bne.n	801adaa <rcl_init+0x156>
 801acb8:	2f00      	cmp	r7, #0
 801acba:	d076      	beq.n	801adaa <rcl_init+0x156>
 801acbc:	683b      	ldr	r3, [r7, #0]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d178      	bne.n	801adb4 <rcl_init+0x160>
 801acc2:	2178      	movs	r1, #120	@ 0x78
 801acc4:	2001      	movs	r0, #1
 801acc6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801acca:	4798      	blx	r3
 801accc:	4604      	mov	r4, r0
 801acce:	6038      	str	r0, [r7, #0]
 801acd0:	2800      	cmp	r0, #0
 801acd2:	f000 80b6 	beq.w	801ae42 <rcl_init+0x1ee>
 801acd6:	a802      	add	r0, sp, #8
 801acd8:	f003 faea 	bl	801e2b0 <rmw_get_zero_initialized_context>
 801acdc:	a902      	add	r1, sp, #8
 801acde:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801ace2:	2250      	movs	r2, #80	@ 0x50
 801ace4:	f007 fc47 	bl	8022576 <memcpy>
 801ace8:	ac19      	add	r4, sp, #100	@ 0x64
 801acea:	f8d7 e000 	ldr.w	lr, [r7]
 801acee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801acf0:	46f4      	mov	ip, lr
 801acf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801acf6:	6823      	ldr	r3, [r4, #0]
 801acf8:	f10e 0114 	add.w	r1, lr, #20
 801acfc:	4640      	mov	r0, r8
 801acfe:	f8cc 3000 	str.w	r3, [ip]
 801ad02:	f000 f93f 	bl	801af84 <rcl_init_options_copy>
 801ad06:	4604      	mov	r4, r0
 801ad08:	2800      	cmp	r0, #0
 801ad0a:	d144      	bne.n	801ad96 <rcl_init+0x142>
 801ad0c:	f8d7 9000 	ldr.w	r9, [r7]
 801ad10:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801ad14:	f8c9 0020 	str.w	r0, [r9, #32]
 801ad18:	f8c9 5018 	str.w	r5, [r9, #24]
 801ad1c:	f8c9 801c 	str.w	r8, [r9, #28]
 801ad20:	2d00      	cmp	r5, #0
 801ad22:	d04e      	beq.n	801adc2 <rcl_init+0x16e>
 801ad24:	2e00      	cmp	r6, #0
 801ad26:	d04c      	beq.n	801adc2 <rcl_init+0x16e>
 801ad28:	2104      	movs	r1, #4
 801ad2a:	4628      	mov	r0, r5
 801ad2c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801ad30:	4798      	blx	r3
 801ad32:	f8c9 0020 	str.w	r0, [r9, #32]
 801ad36:	f8d7 9000 	ldr.w	r9, [r7]
 801ad3a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801ad3e:	46ca      	mov	sl, r9
 801ad40:	b343      	cbz	r3, 801ad94 <rcl_init+0x140>
 801ad42:	2d01      	cmp	r5, #1
 801ad44:	f178 0300 	sbcs.w	r3, r8, #0
 801ad48:	db3b      	blt.n	801adc2 <rcl_init+0x16e>
 801ad4a:	2400      	movs	r4, #0
 801ad4c:	3e04      	subs	r6, #4
 801ad4e:	46a1      	mov	r9, r4
 801ad50:	e00b      	b.n	801ad6a <rcl_init+0x116>
 801ad52:	6831      	ldr	r1, [r6, #0]
 801ad54:	f007 fc0f 	bl	8022576 <memcpy>
 801ad58:	3401      	adds	r4, #1
 801ad5a:	f149 0900 	adc.w	r9, r9, #0
 801ad5e:	45c8      	cmp	r8, r9
 801ad60:	bf08      	it	eq
 801ad62:	42a5      	cmpeq	r5, r4
 801ad64:	d02b      	beq.n	801adbe <rcl_init+0x16a>
 801ad66:	f8d7 a000 	ldr.w	sl, [r7]
 801ad6a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801ad6e:	f7e5 fac1 	bl	80002f4 <strlen>
 801ad72:	1c42      	adds	r2, r0, #1
 801ad74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ad76:	4610      	mov	r0, r2
 801ad78:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801ad7a:	f8da a020 	ldr.w	sl, [sl, #32]
 801ad7e:	9201      	str	r2, [sp, #4]
 801ad80:	4798      	blx	r3
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801ad88:	6a1b      	ldr	r3, [r3, #32]
 801ad8a:	9a01      	ldr	r2, [sp, #4]
 801ad8c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ad90:	2800      	cmp	r0, #0
 801ad92:	d1de      	bne.n	801ad52 <rcl_init+0xfe>
 801ad94:	240a      	movs	r4, #10
 801ad96:	4638      	mov	r0, r7
 801ad98:	f7ff fefc 	bl	801ab94 <__cleanup_context>
 801ad9c:	4620      	mov	r0, r4
 801ad9e:	b01e      	add	sp, #120	@ 0x78
 801ada0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ada4:	2900      	cmp	r1, #0
 801ada6:	f43f af6e 	beq.w	801ac86 <rcl_init+0x32>
 801adaa:	240b      	movs	r4, #11
 801adac:	4620      	mov	r0, r4
 801adae:	b01e      	add	sp, #120	@ 0x78
 801adb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801adb4:	2464      	movs	r4, #100	@ 0x64
 801adb6:	4620      	mov	r0, r4
 801adb8:	b01e      	add	sp, #120	@ 0x78
 801adba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801adbe:	f8d7 9000 	ldr.w	r9, [r7]
 801adc2:	4926      	ldr	r1, [pc, #152]	@ (801ae5c <rcl_init+0x208>)
 801adc4:	680b      	ldr	r3, [r1, #0]
 801adc6:	3301      	adds	r3, #1
 801adc8:	d036      	beq.n	801ae38 <rcl_init+0x1e4>
 801adca:	461a      	mov	r2, r3
 801adcc:	2400      	movs	r4, #0
 801adce:	600b      	str	r3, [r1, #0]
 801add0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801add4:	607b      	str	r3, [r7, #4]
 801add6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801add8:	3301      	adds	r3, #1
 801adda:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801adde:	d034      	beq.n	801ae4a <rcl_init+0x1f6>
 801ade0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801ade4:	b93b      	cbnz	r3, 801adf6 <rcl_init+0x1a2>
 801ade6:	3030      	adds	r0, #48	@ 0x30
 801ade8:	f000 f93a 	bl	801b060 <rcl_get_localhost_only>
 801adec:	4604      	mov	r4, r0
 801adee:	2800      	cmp	r0, #0
 801adf0:	d1d1      	bne.n	801ad96 <rcl_init+0x142>
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	6958      	ldr	r0, [r3, #20]
 801adf6:	aa18      	add	r2, sp, #96	@ 0x60
 801adf8:	a917      	add	r1, sp, #92	@ 0x5c
 801adfa:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801adfc:	f001 fb6e 	bl	801c4dc <rcl_validate_enclave_name>
 801ae00:	4604      	mov	r4, r0
 801ae02:	2800      	cmp	r0, #0
 801ae04:	d1c7      	bne.n	801ad96 <rcl_init+0x142>
 801ae06:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ae08:	b9eb      	cbnz	r3, 801ae46 <rcl_init+0x1f2>
 801ae0a:	6839      	ldr	r1, [r7, #0]
 801ae0c:	694b      	ldr	r3, [r1, #20]
 801ae0e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801ae12:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801ae14:	f000 fc72 	bl	801b6fc <rcl_get_security_options_from_environment>
 801ae18:	4604      	mov	r4, r0
 801ae1a:	2800      	cmp	r0, #0
 801ae1c:	d1bb      	bne.n	801ad96 <rcl_init+0x142>
 801ae1e:	6839      	ldr	r1, [r7, #0]
 801ae20:	6948      	ldr	r0, [r1, #20]
 801ae22:	3128      	adds	r1, #40	@ 0x28
 801ae24:	3018      	adds	r0, #24
 801ae26:	f003 fdd5 	bl	801e9d4 <rmw_init>
 801ae2a:	4604      	mov	r4, r0
 801ae2c:	2800      	cmp	r0, #0
 801ae2e:	d0bd      	beq.n	801adac <rcl_init+0x158>
 801ae30:	f7ff fe8c 	bl	801ab4c <rcl_convert_rmw_ret_to_rcl_ret>
 801ae34:	4604      	mov	r4, r0
 801ae36:	e7ae      	b.n	801ad96 <rcl_init+0x142>
 801ae38:	2201      	movs	r2, #1
 801ae3a:	461c      	mov	r4, r3
 801ae3c:	600a      	str	r2, [r1, #0]
 801ae3e:	4613      	mov	r3, r2
 801ae40:	e7c6      	b.n	801add0 <rcl_init+0x17c>
 801ae42:	240a      	movs	r4, #10
 801ae44:	e7b2      	b.n	801adac <rcl_init+0x158>
 801ae46:	2401      	movs	r4, #1
 801ae48:	e7a5      	b.n	801ad96 <rcl_init+0x142>
 801ae4a:	3024      	adds	r0, #36	@ 0x24
 801ae4c:	f006 f87c 	bl	8020f48 <rcl_get_default_domain_id>
 801ae50:	4604      	mov	r4, r0
 801ae52:	2800      	cmp	r0, #0
 801ae54:	d19f      	bne.n	801ad96 <rcl_init+0x142>
 801ae56:	683b      	ldr	r3, [r7, #0]
 801ae58:	6958      	ldr	r0, [r3, #20]
 801ae5a:	e7c1      	b.n	801ade0 <rcl_init+0x18c>
 801ae5c:	240693d8 	.word	0x240693d8

0801ae60 <rcl_get_zero_initialized_init_options>:
 801ae60:	2000      	movs	r0, #0
 801ae62:	4770      	bx	lr

0801ae64 <rcl_init_options_init>:
 801ae64:	b084      	sub	sp, #16
 801ae66:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae68:	b097      	sub	sp, #92	@ 0x5c
 801ae6a:	ae1d      	add	r6, sp, #116	@ 0x74
 801ae6c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801ae70:	2800      	cmp	r0, #0
 801ae72:	d058      	beq.n	801af26 <rcl_init_options_init+0xc2>
 801ae74:	6803      	ldr	r3, [r0, #0]
 801ae76:	4605      	mov	r5, r0
 801ae78:	b133      	cbz	r3, 801ae88 <rcl_init_options_init+0x24>
 801ae7a:	2464      	movs	r4, #100	@ 0x64
 801ae7c:	4620      	mov	r0, r4
 801ae7e:	b017      	add	sp, #92	@ 0x5c
 801ae80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ae84:	b004      	add	sp, #16
 801ae86:	4770      	bx	lr
 801ae88:	4630      	mov	r0, r6
 801ae8a:	f7fa fb19 	bl	80154c0 <rcutils_allocator_is_valid>
 801ae8e:	2800      	cmp	r0, #0
 801ae90:	d049      	beq.n	801af26 <rcl_init_options_init+0xc2>
 801ae92:	46b4      	mov	ip, r6
 801ae94:	ac11      	add	r4, sp, #68	@ 0x44
 801ae96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ae9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ae9c:	f8dc 3000 	ldr.w	r3, [ip]
 801aea0:	2050      	movs	r0, #80	@ 0x50
 801aea2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801aea4:	6023      	str	r3, [r4, #0]
 801aea6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aea8:	4798      	blx	r3
 801aeaa:	4604      	mov	r4, r0
 801aeac:	6028      	str	r0, [r5, #0]
 801aeae:	2800      	cmp	r0, #0
 801aeb0:	d03b      	beq.n	801af2a <rcl_init_options_init+0xc6>
 801aeb2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801aeb6:	4686      	mov	lr, r0
 801aeb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aebc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801aec0:	f8dc 3000 	ldr.w	r3, [ip]
 801aec4:	a802      	add	r0, sp, #8
 801aec6:	f8ce 3000 	str.w	r3, [lr]
 801aeca:	f003 fa05 	bl	801e2d8 <rmw_get_zero_initialized_init_options>
 801aece:	f10d 0e08 	add.w	lr, sp, #8
 801aed2:	f104 0c18 	add.w	ip, r4, #24
 801aed6:	682f      	ldr	r7, [r5, #0]
 801aed8:	ac20      	add	r4, sp, #128	@ 0x80
 801aeda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aede:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aee2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aee6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aeea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aeee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aef2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801aef6:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aefa:	e894 0003 	ldmia.w	r4, {r0, r1}
 801aefe:	e88d 0003 	stmia.w	sp, {r0, r1}
 801af02:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801af06:	f107 0018 	add.w	r0, r7, #24
 801af0a:	f003 fc65 	bl	801e7d8 <rmw_init_options_init>
 801af0e:	4604      	mov	r4, r0
 801af10:	2800      	cmp	r0, #0
 801af12:	d0b3      	beq.n	801ae7c <rcl_init_options_init+0x18>
 801af14:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801af16:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801af18:	6828      	ldr	r0, [r5, #0]
 801af1a:	4798      	blx	r3
 801af1c:	4620      	mov	r0, r4
 801af1e:	f7ff fe15 	bl	801ab4c <rcl_convert_rmw_ret_to_rcl_ret>
 801af22:	4604      	mov	r4, r0
 801af24:	e7aa      	b.n	801ae7c <rcl_init_options_init+0x18>
 801af26:	240b      	movs	r4, #11
 801af28:	e7a8      	b.n	801ae7c <rcl_init_options_init+0x18>
 801af2a:	240a      	movs	r4, #10
 801af2c:	e7a6      	b.n	801ae7c <rcl_init_options_init+0x18>
 801af2e:	bf00      	nop

0801af30 <rcl_init_options_fini>:
 801af30:	b530      	push	{r4, r5, lr}
 801af32:	b087      	sub	sp, #28
 801af34:	b1f0      	cbz	r0, 801af74 <rcl_init_options_fini+0x44>
 801af36:	6803      	ldr	r3, [r0, #0]
 801af38:	4604      	mov	r4, r0
 801af3a:	b1db      	cbz	r3, 801af74 <rcl_init_options_fini+0x44>
 801af3c:	469c      	mov	ip, r3
 801af3e:	f10d 0e04 	add.w	lr, sp, #4
 801af42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af46:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801af4a:	f8dc 3000 	ldr.w	r3, [ip]
 801af4e:	a801      	add	r0, sp, #4
 801af50:	f8ce 3000 	str.w	r3, [lr]
 801af54:	f7fa fab4 	bl	80154c0 <rcutils_allocator_is_valid>
 801af58:	b160      	cbz	r0, 801af74 <rcl_init_options_fini+0x44>
 801af5a:	6820      	ldr	r0, [r4, #0]
 801af5c:	3018      	adds	r0, #24
 801af5e:	f003 fcf5 	bl	801e94c <rmw_init_options_fini>
 801af62:	4605      	mov	r5, r0
 801af64:	b950      	cbnz	r0, 801af7c <rcl_init_options_fini+0x4c>
 801af66:	6820      	ldr	r0, [r4, #0]
 801af68:	9b02      	ldr	r3, [sp, #8]
 801af6a:	9905      	ldr	r1, [sp, #20]
 801af6c:	4798      	blx	r3
 801af6e:	4628      	mov	r0, r5
 801af70:	b007      	add	sp, #28
 801af72:	bd30      	pop	{r4, r5, pc}
 801af74:	250b      	movs	r5, #11
 801af76:	4628      	mov	r0, r5
 801af78:	b007      	add	sp, #28
 801af7a:	bd30      	pop	{r4, r5, pc}
 801af7c:	f7ff fde6 	bl	801ab4c <rcl_convert_rmw_ret_to_rcl_ret>
 801af80:	4605      	mov	r5, r0
 801af82:	e7f8      	b.n	801af76 <rcl_init_options_fini+0x46>

0801af84 <rcl_init_options_copy>:
 801af84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af88:	b094      	sub	sp, #80	@ 0x50
 801af8a:	2800      	cmp	r0, #0
 801af8c:	d05b      	beq.n	801b046 <rcl_init_options_copy+0xc2>
 801af8e:	4604      	mov	r4, r0
 801af90:	6800      	ldr	r0, [r0, #0]
 801af92:	2800      	cmp	r0, #0
 801af94:	d057      	beq.n	801b046 <rcl_init_options_copy+0xc2>
 801af96:	460e      	mov	r6, r1
 801af98:	f7fa fa92 	bl	80154c0 <rcutils_allocator_is_valid>
 801af9c:	2e00      	cmp	r6, #0
 801af9e:	d052      	beq.n	801b046 <rcl_init_options_copy+0xc2>
 801afa0:	f080 0001 	eor.w	r0, r0, #1
 801afa4:	b2c0      	uxtb	r0, r0
 801afa6:	2800      	cmp	r0, #0
 801afa8:	d14d      	bne.n	801b046 <rcl_init_options_copy+0xc2>
 801afaa:	6833      	ldr	r3, [r6, #0]
 801afac:	b123      	cbz	r3, 801afb8 <rcl_init_options_copy+0x34>
 801afae:	2464      	movs	r4, #100	@ 0x64
 801afb0:	4620      	mov	r0, r4
 801afb2:	b014      	add	sp, #80	@ 0x50
 801afb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afb8:	6827      	ldr	r7, [r4, #0]
 801afba:	ad0f      	add	r5, sp, #60	@ 0x3c
 801afbc:	46bc      	mov	ip, r7
 801afbe:	f8d7 8000 	ldr.w	r8, [r7]
 801afc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801afc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801afc8:	f8dc 3000 	ldr.w	r3, [ip]
 801afcc:	2050      	movs	r0, #80	@ 0x50
 801afce:	4619      	mov	r1, r3
 801afd0:	602b      	str	r3, [r5, #0]
 801afd2:	47c0      	blx	r8
 801afd4:	4605      	mov	r5, r0
 801afd6:	6030      	str	r0, [r6, #0]
 801afd8:	b3d0      	cbz	r0, 801b050 <rcl_init_options_copy+0xcc>
 801afda:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801afde:	4686      	mov	lr, r0
 801afe0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801afe4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801afe8:	f8dc 3000 	ldr.w	r3, [ip]
 801afec:	4668      	mov	r0, sp
 801afee:	f8ce 3000 	str.w	r3, [lr]
 801aff2:	f003 f971 	bl	801e2d8 <rmw_get_zero_initialized_init_options>
 801aff6:	46ee      	mov	lr, sp
 801aff8:	f105 0c18 	add.w	ip, r5, #24
 801affc:	6824      	ldr	r4, [r4, #0]
 801affe:	6835      	ldr	r5, [r6, #0]
 801b000:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b004:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b008:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b00c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b010:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b014:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b018:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b01c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b020:	f104 0018 	add.w	r0, r4, #24
 801b024:	f105 0118 	add.w	r1, r5, #24
 801b028:	f003 fc3e 	bl	801e8a8 <rmw_init_options_copy>
 801b02c:	4604      	mov	r4, r0
 801b02e:	2800      	cmp	r0, #0
 801b030:	d0be      	beq.n	801afb0 <rcl_init_options_copy+0x2c>
 801b032:	f7fa fa53 	bl	80154dc <rcutils_get_error_string>
 801b036:	f7fa fa67 	bl	8015508 <rcutils_reset_error>
 801b03a:	4630      	mov	r0, r6
 801b03c:	f7ff ff78 	bl	801af30 <rcl_init_options_fini>
 801b040:	b140      	cbz	r0, 801b054 <rcl_init_options_copy+0xd0>
 801b042:	4604      	mov	r4, r0
 801b044:	e7b4      	b.n	801afb0 <rcl_init_options_copy+0x2c>
 801b046:	240b      	movs	r4, #11
 801b048:	4620      	mov	r0, r4
 801b04a:	b014      	add	sp, #80	@ 0x50
 801b04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b050:	240a      	movs	r4, #10
 801b052:	e7ad      	b.n	801afb0 <rcl_init_options_copy+0x2c>
 801b054:	4620      	mov	r0, r4
 801b056:	b014      	add	sp, #80	@ 0x50
 801b058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b05c:	f7ff bd76 	b.w	801ab4c <rcl_convert_rmw_ret_to_rcl_ret>

0801b060 <rcl_get_localhost_only>:
 801b060:	b510      	push	{r4, lr}
 801b062:	2300      	movs	r3, #0
 801b064:	b082      	sub	sp, #8
 801b066:	9301      	str	r3, [sp, #4]
 801b068:	b1b8      	cbz	r0, 801b09a <rcl_get_localhost_only+0x3a>
 801b06a:	4604      	mov	r4, r0
 801b06c:	a901      	add	r1, sp, #4
 801b06e:	480c      	ldr	r0, [pc, #48]	@ (801b0a0 <rcl_get_localhost_only+0x40>)
 801b070:	f002 fe4e 	bl	801dd10 <rcutils_get_env>
 801b074:	b110      	cbz	r0, 801b07c <rcl_get_localhost_only+0x1c>
 801b076:	2001      	movs	r0, #1
 801b078:	b002      	add	sp, #8
 801b07a:	bd10      	pop	{r4, pc}
 801b07c:	9b01      	ldr	r3, [sp, #4]
 801b07e:	b113      	cbz	r3, 801b086 <rcl_get_localhost_only+0x26>
 801b080:	781a      	ldrb	r2, [r3, #0]
 801b082:	2a31      	cmp	r2, #49	@ 0x31
 801b084:	d004      	beq.n	801b090 <rcl_get_localhost_only+0x30>
 801b086:	2302      	movs	r3, #2
 801b088:	2000      	movs	r0, #0
 801b08a:	7023      	strb	r3, [r4, #0]
 801b08c:	b002      	add	sp, #8
 801b08e:	bd10      	pop	{r4, pc}
 801b090:	785b      	ldrb	r3, [r3, #1]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d1f7      	bne.n	801b086 <rcl_get_localhost_only+0x26>
 801b096:	2301      	movs	r3, #1
 801b098:	e7f6      	b.n	801b088 <rcl_get_localhost_only+0x28>
 801b09a:	200b      	movs	r0, #11
 801b09c:	b002      	add	sp, #8
 801b09e:	bd10      	pop	{r4, pc}
 801b0a0:	08025208 	.word	0x08025208

0801b0a4 <rcl_get_zero_initialized_node>:
 801b0a4:	4a03      	ldr	r2, [pc, #12]	@ (801b0b4 <rcl_get_zero_initialized_node+0x10>)
 801b0a6:	4603      	mov	r3, r0
 801b0a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b0ac:	e883 0003 	stmia.w	r3, {r0, r1}
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	4770      	bx	lr
 801b0b4:	08025230 	.word	0x08025230

0801b0b8 <rcl_node_init>:
 801b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0bc:	b0a9      	sub	sp, #164	@ 0xa4
 801b0be:	4604      	mov	r4, r0
 801b0c0:	460e      	mov	r6, r1
 801b0c2:	4615      	mov	r5, r2
 801b0c4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 801b0c8:	a823      	add	r0, sp, #140	@ 0x8c
 801b0ca:	461f      	mov	r7, r3
 801b0cc:	f006 f9b0 	bl	8021430 <rcl_guard_condition_get_default_options>
 801b0d0:	f1b8 0f00 	cmp.w	r8, #0
 801b0d4:	f000 80f3 	beq.w	801b2be <rcl_node_init+0x206>
 801b0d8:	4640      	mov	r0, r8
 801b0da:	f7fa f9f1 	bl	80154c0 <rcutils_allocator_is_valid>
 801b0de:	2d00      	cmp	r5, #0
 801b0e0:	bf18      	it	ne
 801b0e2:	2c00      	cmpne	r4, #0
 801b0e4:	f080 0001 	eor.w	r0, r0, #1
 801b0e8:	bf0c      	ite	eq
 801b0ea:	f04f 0c01 	moveq.w	ip, #1
 801b0ee:	f04f 0c00 	movne.w	ip, #0
 801b0f2:	2e00      	cmp	r6, #0
 801b0f4:	bf08      	it	eq
 801b0f6:	f04c 0c01 	orreq.w	ip, ip, #1
 801b0fa:	ea4c 0c00 	orr.w	ip, ip, r0
 801b0fe:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801b102:	f040 80dc 	bne.w	801b2be <rcl_node_init+0x206>
 801b106:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b10a:	f1ba 0f00 	cmp.w	sl, #0
 801b10e:	f040 80fc 	bne.w	801b30a <rcl_node_init+0x252>
 801b112:	2f00      	cmp	r7, #0
 801b114:	f000 80d3 	beq.w	801b2be <rcl_node_init+0x206>
 801b118:	4638      	mov	r0, r7
 801b11a:	f7ff fd35 	bl	801ab88 <rcl_context_is_valid>
 801b11e:	4683      	mov	fp, r0
 801b120:	2800      	cmp	r0, #0
 801b122:	f000 80d2 	beq.w	801b2ca <rcl_node_init+0x212>
 801b126:	4652      	mov	r2, sl
 801b128:	4630      	mov	r0, r6
 801b12a:	a922      	add	r1, sp, #136	@ 0x88
 801b12c:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 801b130:	f003 fa84 	bl	801e63c <rmw_validate_node_name>
 801b134:	4682      	mov	sl, r0
 801b136:	2800      	cmp	r0, #0
 801b138:	f040 80c3 	bne.w	801b2c2 <rcl_node_init+0x20a>
 801b13c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801b13e:	2800      	cmp	r0, #0
 801b140:	f040 80f1 	bne.w	801b326 <rcl_node_init+0x26e>
 801b144:	4628      	mov	r0, r5
 801b146:	f7e5 f8d5 	bl	80002f4 <strlen>
 801b14a:	2800      	cmp	r0, #0
 801b14c:	f040 80c0 	bne.w	801b2d0 <rcl_node_init+0x218>
 801b150:	4d79      	ldr	r5, [pc, #484]	@ (801b338 <rcl_node_init+0x280>)
 801b152:	a922      	add	r1, sp, #136	@ 0x88
 801b154:	2200      	movs	r2, #0
 801b156:	4628      	mov	r0, r5
 801b158:	f003 fa52 	bl	801e600 <rmw_validate_namespace>
 801b15c:	4682      	mov	sl, r0
 801b15e:	2800      	cmp	r0, #0
 801b160:	f040 80af 	bne.w	801b2c2 <rcl_node_init+0x20a>
 801b164:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801b166:	2800      	cmp	r0, #0
 801b168:	f040 80d5 	bne.w	801b316 <rcl_node_init+0x25e>
 801b16c:	f8d8 3000 	ldr.w	r3, [r8]
 801b170:	2078      	movs	r0, #120	@ 0x78
 801b172:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b176:	4798      	blx	r3
 801b178:	4682      	mov	sl, r0
 801b17a:	6060      	str	r0, [r4, #4]
 801b17c:	2800      	cmp	r0, #0
 801b17e:	f000 80cf 	beq.w	801b320 <rcl_node_init+0x268>
 801b182:	2200      	movs	r2, #0
 801b184:	2300      	movs	r3, #0
 801b186:	a808      	add	r0, sp, #32
 801b188:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801b18c:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 801b190:	f000 f902 	bl	801b398 <rcl_node_get_default_options>
 801b194:	a908      	add	r1, sp, #32
 801b196:	4650      	mov	r0, sl
 801b198:	2268      	movs	r2, #104	@ 0x68
 801b19a:	f007 f9ec 	bl	8022576 <memcpy>
 801b19e:	6861      	ldr	r1, [r4, #4]
 801b1a0:	4640      	mov	r0, r8
 801b1a2:	6027      	str	r7, [r4, #0]
 801b1a4:	f000 f906 	bl	801b3b4 <rcl_node_options_copy>
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	d158      	bne.n	801b25e <rcl_node_init+0x1a6>
 801b1ac:	4628      	mov	r0, r5
 801b1ae:	f7e5 f8a1 	bl	80002f4 <strlen>
 801b1b2:	4428      	add	r0, r5
 801b1b4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801b1b8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801b1bc:	2b2f      	cmp	r3, #47	@ 0x2f
 801b1be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b1c2:	9300      	str	r3, [sp, #0]
 801b1c4:	bf0c      	ite	eq
 801b1c6:	4b5d      	ldreq	r3, [pc, #372]	@ (801b33c <rcl_node_init+0x284>)
 801b1c8:	4b5d      	ldrne	r3, [pc, #372]	@ (801b340 <rcl_node_init+0x288>)
 801b1ca:	9302      	str	r3, [sp, #8]
 801b1cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b1d0:	9301      	str	r3, [sp, #4]
 801b1d2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b1d6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b1da:	f002 fdc1 	bl	801dd60 <rcutils_format_string_limit>
 801b1de:	6823      	ldr	r3, [r4, #0]
 801b1e0:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801b1e4:	4631      	mov	r1, r6
 801b1e6:	6818      	ldr	r0, [r3, #0]
 801b1e8:	462a      	mov	r2, r5
 801b1ea:	6866      	ldr	r6, [r4, #4]
 801b1ec:	3028      	adds	r0, #40	@ 0x28
 801b1ee:	f003 fe4b 	bl	801ee88 <rmw_create_node>
 801b1f2:	6863      	ldr	r3, [r4, #4]
 801b1f4:	66b0      	str	r0, [r6, #104]	@ 0x68
 801b1f6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b1f8:	2800      	cmp	r0, #0
 801b1fa:	d032      	beq.n	801b262 <rcl_node_init+0x1aa>
 801b1fc:	f003 fed4 	bl	801efa8 <rmw_node_get_graph_guard_condition>
 801b200:	4682      	mov	sl, r0
 801b202:	b360      	cbz	r0, 801b25e <rcl_node_init+0x1a6>
 801b204:	f8d8 3000 	ldr.w	r3, [r8]
 801b208:	2008      	movs	r0, #8
 801b20a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b20e:	6866      	ldr	r6, [r4, #4]
 801b210:	4798      	blx	r3
 801b212:	6863      	ldr	r3, [r4, #4]
 801b214:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801b216:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801b21a:	f1bb 0f00 	cmp.w	fp, #0
 801b21e:	d020      	beq.n	801b262 <rcl_node_init+0x1aa>
 801b220:	a806      	add	r0, sp, #24
 801b222:	ae23      	add	r6, sp, #140	@ 0x8c
 801b224:	f006 f82a 	bl	802127c <rcl_get_zero_initialized_guard_condition>
 801b228:	a806      	add	r0, sp, #24
 801b22a:	6863      	ldr	r3, [r4, #4]
 801b22c:	46c4      	mov	ip, r8
 801b22e:	c803      	ldmia	r0, {r0, r1}
 801b230:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801b234:	e88b 0003 	stmia.w	fp, {r0, r1}
 801b238:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b23c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b23e:	f8dc 3000 	ldr.w	r3, [ip]
 801b242:	6033      	str	r3, [r6, #0]
 801b244:	ab28      	add	r3, sp, #160	@ 0xa0
 801b246:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801b24a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b24e:	4651      	mov	r1, sl
 801b250:	463a      	mov	r2, r7
 801b252:	4670      	mov	r0, lr
 801b254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b256:	f006 f869 	bl	802132c <rcl_guard_condition_init_from_rmw>
 801b25a:	4682      	mov	sl, r0
 801b25c:	b328      	cbz	r0, 801b2aa <rcl_node_init+0x1f2>
 801b25e:	6863      	ldr	r3, [r4, #4]
 801b260:	b1f3      	cbz	r3, 801b2a0 <rcl_node_init+0x1e8>
 801b262:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801b264:	b128      	cbz	r0, 801b272 <rcl_node_init+0x1ba>
 801b266:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b26a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b26e:	4798      	blx	r3
 801b270:	6863      	ldr	r3, [r4, #4]
 801b272:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b274:	b110      	cbz	r0, 801b27c <rcl_node_init+0x1c4>
 801b276:	f003 fe19 	bl	801eeac <rmw_destroy_node>
 801b27a:	6863      	ldr	r3, [r4, #4]
 801b27c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b27e:	b148      	cbz	r0, 801b294 <rcl_node_init+0x1dc>
 801b280:	f006 f8b0 	bl	80213e4 <rcl_guard_condition_fini>
 801b284:	6863      	ldr	r3, [r4, #4]
 801b286:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b28a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b28c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b290:	4798      	blx	r3
 801b292:	6863      	ldr	r3, [r4, #4]
 801b294:	4618      	mov	r0, r3
 801b296:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b29a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b29e:	4798      	blx	r3
 801b2a0:	2300      	movs	r3, #0
 801b2a2:	f04f 0a01 	mov.w	sl, #1
 801b2a6:	e9c4 3300 	strd	r3, r3, [r4]
 801b2aa:	f1b9 0f00 	cmp.w	r9, #0
 801b2ae:	d008      	beq.n	801b2c2 <rcl_node_init+0x20a>
 801b2b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b2b4:	4628      	mov	r0, r5
 801b2b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b2ba:	4798      	blx	r3
 801b2bc:	e001      	b.n	801b2c2 <rcl_node_init+0x20a>
 801b2be:	f04f 0a0b 	mov.w	sl, #11
 801b2c2:	4650      	mov	r0, sl
 801b2c4:	b029      	add	sp, #164	@ 0xa4
 801b2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2ca:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801b2ce:	e7f8      	b.n	801b2c2 <rcl_node_init+0x20a>
 801b2d0:	782b      	ldrb	r3, [r5, #0]
 801b2d2:	2b2f      	cmp	r3, #47	@ 0x2f
 801b2d4:	f43f af3d 	beq.w	801b152 <rcl_node_init+0x9a>
 801b2d8:	9503      	str	r5, [sp, #12]
 801b2da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b2de:	9300      	str	r3, [sp, #0]
 801b2e0:	4b18      	ldr	r3, [pc, #96]	@ (801b344 <rcl_node_init+0x28c>)
 801b2e2:	9302      	str	r3, [sp, #8]
 801b2e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b2e8:	9301      	str	r3, [sp, #4]
 801b2ea:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b2ee:	f002 fd37 	bl	801dd60 <rcutils_format_string_limit>
 801b2f2:	4605      	mov	r5, r0
 801b2f4:	b1e0      	cbz	r0, 801b330 <rcl_node_init+0x278>
 801b2f6:	2200      	movs	r2, #0
 801b2f8:	a922      	add	r1, sp, #136	@ 0x88
 801b2fa:	9222      	str	r2, [sp, #136]	@ 0x88
 801b2fc:	f003 f980 	bl	801e600 <rmw_validate_namespace>
 801b300:	4682      	mov	sl, r0
 801b302:	2800      	cmp	r0, #0
 801b304:	d1d4      	bne.n	801b2b0 <rcl_node_init+0x1f8>
 801b306:	46d9      	mov	r9, fp
 801b308:	e72c      	b.n	801b164 <rcl_node_init+0xac>
 801b30a:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801b30e:	4650      	mov	r0, sl
 801b310:	b029      	add	sp, #164	@ 0xa4
 801b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b316:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801b31a:	f003 f983 	bl	801e624 <rmw_namespace_validation_result_string>
 801b31e:	e7c4      	b.n	801b2aa <rcl_node_init+0x1f2>
 801b320:	f04f 0a0a 	mov.w	sl, #10
 801b324:	e7c1      	b.n	801b2aa <rcl_node_init+0x1f2>
 801b326:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801b32a:	f003 f9db 	bl	801e6e4 <rmw_node_name_validation_result_string>
 801b32e:	e7c8      	b.n	801b2c2 <rcl_node_init+0x20a>
 801b330:	f04f 0a0a 	mov.w	sl, #10
 801b334:	e7c5      	b.n	801b2c2 <rcl_node_init+0x20a>
 801b336:	bf00      	nop
 801b338:	08025220 	.word	0x08025220
 801b33c:	080248a4 	.word	0x080248a4
 801b340:	08025228 	.word	0x08025228
 801b344:	08025224 	.word	0x08025224

0801b348 <rcl_node_is_valid>:
 801b348:	b130      	cbz	r0, 801b358 <rcl_node_is_valid+0x10>
 801b34a:	6843      	ldr	r3, [r0, #4]
 801b34c:	b123      	cbz	r3, 801b358 <rcl_node_is_valid+0x10>
 801b34e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b350:	b113      	cbz	r3, 801b358 <rcl_node_is_valid+0x10>
 801b352:	6800      	ldr	r0, [r0, #0]
 801b354:	f7ff bc18 	b.w	801ab88 <rcl_context_is_valid>
 801b358:	2000      	movs	r0, #0
 801b35a:	4770      	bx	lr

0801b35c <rcl_node_get_name>:
 801b35c:	b120      	cbz	r0, 801b368 <rcl_node_get_name+0xc>
 801b35e:	6840      	ldr	r0, [r0, #4]
 801b360:	b110      	cbz	r0, 801b368 <rcl_node_get_name+0xc>
 801b362:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b364:	b100      	cbz	r0, 801b368 <rcl_node_get_name+0xc>
 801b366:	6880      	ldr	r0, [r0, #8]
 801b368:	4770      	bx	lr
 801b36a:	bf00      	nop

0801b36c <rcl_node_get_namespace>:
 801b36c:	b120      	cbz	r0, 801b378 <rcl_node_get_namespace+0xc>
 801b36e:	6840      	ldr	r0, [r0, #4]
 801b370:	b110      	cbz	r0, 801b378 <rcl_node_get_namespace+0xc>
 801b372:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b374:	b100      	cbz	r0, 801b378 <rcl_node_get_namespace+0xc>
 801b376:	68c0      	ldr	r0, [r0, #12]
 801b378:	4770      	bx	lr
 801b37a:	bf00      	nop

0801b37c <rcl_node_get_options>:
 801b37c:	b128      	cbz	r0, 801b38a <rcl_node_get_options+0xe>
 801b37e:	6840      	ldr	r0, [r0, #4]
 801b380:	b118      	cbz	r0, 801b38a <rcl_node_get_options+0xe>
 801b382:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b384:	2b00      	cmp	r3, #0
 801b386:	bf08      	it	eq
 801b388:	2000      	moveq	r0, #0
 801b38a:	4770      	bx	lr

0801b38c <rcl_node_get_rmw_handle>:
 801b38c:	b110      	cbz	r0, 801b394 <rcl_node_get_rmw_handle+0x8>
 801b38e:	6840      	ldr	r0, [r0, #4]
 801b390:	b100      	cbz	r0, 801b394 <rcl_node_get_rmw_handle+0x8>
 801b392:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b394:	4770      	bx	lr
 801b396:	bf00      	nop

0801b398 <rcl_node_get_default_options>:
 801b398:	b510      	push	{r4, lr}
 801b39a:	4604      	mov	r4, r0
 801b39c:	2268      	movs	r2, #104	@ 0x68
 801b39e:	2100      	movs	r1, #0
 801b3a0:	f006 ffca 	bl	8022338 <memset>
 801b3a4:	4620      	mov	r0, r4
 801b3a6:	f7fa f87d 	bl	80154a4 <rcutils_get_default_allocator>
 801b3aa:	2301      	movs	r3, #1
 801b3ac:	4620      	mov	r0, r4
 801b3ae:	7523      	strb	r3, [r4, #20]
 801b3b0:	bd10      	pop	{r4, pc}
 801b3b2:	bf00      	nop

0801b3b4 <rcl_node_options_copy>:
 801b3b4:	2800      	cmp	r0, #0
 801b3b6:	bf18      	it	ne
 801b3b8:	4288      	cmpne	r0, r1
 801b3ba:	d01b      	beq.n	801b3f4 <rcl_node_options_copy+0x40>
 801b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3be:	fab1 f681 	clz	r6, r1
 801b3c2:	460c      	mov	r4, r1
 801b3c4:	0976      	lsrs	r6, r6, #5
 801b3c6:	b199      	cbz	r1, 801b3f0 <rcl_node_options_copy+0x3c>
 801b3c8:	4605      	mov	r5, r0
 801b3ca:	8a87      	ldrh	r7, [r0, #20]
 801b3cc:	4684      	mov	ip, r0
 801b3ce:	468e      	mov	lr, r1
 801b3d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b3d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b3d6:	682b      	ldr	r3, [r5, #0]
 801b3d8:	2250      	movs	r2, #80	@ 0x50
 801b3da:	f10c 0118 	add.w	r1, ip, #24
 801b3de:	f104 0018 	add.w	r0, r4, #24
 801b3e2:	f8ce 3000 	str.w	r3, [lr]
 801b3e6:	82a7      	strh	r7, [r4, #20]
 801b3e8:	f007 f8c5 	bl	8022576 <memcpy>
 801b3ec:	4630      	mov	r0, r6
 801b3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3f0:	200b      	movs	r0, #11
 801b3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3f4:	200b      	movs	r0, #11
 801b3f6:	4770      	bx	lr

0801b3f8 <rcl_node_resolve_name>:
 801b3f8:	b082      	sub	sp, #8
 801b3fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3fe:	b091      	sub	sp, #68	@ 0x44
 801b400:	ac1a      	add	r4, sp, #104	@ 0x68
 801b402:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801b406:	e884 000c 	stmia.w	r4, {r2, r3}
 801b40a:	2800      	cmp	r0, #0
 801b40c:	d03d      	beq.n	801b48a <rcl_node_resolve_name+0x92>
 801b40e:	460c      	mov	r4, r1
 801b410:	4605      	mov	r5, r0
 801b412:	f7ff ffb3 	bl	801b37c <rcl_node_get_options>
 801b416:	2800      	cmp	r0, #0
 801b418:	d03a      	beq.n	801b490 <rcl_node_resolve_name+0x98>
 801b41a:	4628      	mov	r0, r5
 801b41c:	f7ff ff9e 	bl	801b35c <rcl_node_get_name>
 801b420:	4606      	mov	r6, r0
 801b422:	4628      	mov	r0, r5
 801b424:	ad0b      	add	r5, sp, #44	@ 0x2c
 801b426:	f7ff ffa1 	bl	801b36c <rcl_node_get_namespace>
 801b42a:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801b42e:	4607      	mov	r7, r0
 801b430:	46ac      	mov	ip, r5
 801b432:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b436:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b43a:	f8de 3000 	ldr.w	r3, [lr]
 801b43e:	f8cc 3000 	str.w	r3, [ip]
 801b442:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b444:	b30b      	cbz	r3, 801b48a <rcl_node_resolve_name+0x92>
 801b446:	4689      	mov	r9, r1
 801b448:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801b44c:	f002 fe00 	bl	801e050 <rcutils_get_zero_initialized_string_map>
 801b450:	ab10      	add	r3, sp, #64	@ 0x40
 801b452:	9008      	str	r0, [sp, #32]
 801b454:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b458:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b45c:	2100      	movs	r1, #0
 801b45e:	a808      	add	r0, sp, #32
 801b460:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b464:	f002 fe6a 	bl	801e13c <rcutils_string_map_init>
 801b468:	4683      	mov	fp, r0
 801b46a:	b1a0      	cbz	r0, 801b496 <rcl_node_resolve_name+0x9e>
 801b46c:	f7fa f836 	bl	80154dc <rcutils_get_error_string>
 801b470:	f7fa f84a 	bl	8015508 <rcutils_reset_error>
 801b474:	f1bb 0f0a 	cmp.w	fp, #10
 801b478:	bf18      	it	ne
 801b47a:	f04f 0b01 	movne.w	fp, #1
 801b47e:	4658      	mov	r0, fp
 801b480:	b011      	add	sp, #68	@ 0x44
 801b482:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b486:	b002      	add	sp, #8
 801b488:	4770      	bx	lr
 801b48a:	f04f 0b0b 	mov.w	fp, #11
 801b48e:	e7f6      	b.n	801b47e <rcl_node_resolve_name+0x86>
 801b490:	f04f 0b01 	mov.w	fp, #1
 801b494:	e7f3      	b.n	801b47e <rcl_node_resolve_name+0x86>
 801b496:	9009      	str	r0, [sp, #36]	@ 0x24
 801b498:	9007      	str	r0, [sp, #28]
 801b49a:	a808      	add	r0, sp, #32
 801b49c:	f005 fee8 	bl	8021270 <rcl_get_default_topic_name_substitutions>
 801b4a0:	4683      	mov	fp, r0
 801b4a2:	b180      	cbz	r0, 801b4c6 <rcl_node_resolve_name+0xce>
 801b4a4:	280a      	cmp	r0, #10
 801b4a6:	a808      	add	r0, sp, #32
 801b4a8:	bf18      	it	ne
 801b4aa:	f04f 0b01 	movne.w	fp, #1
 801b4ae:	f002 fe85 	bl	801e1bc <rcutils_string_map_fini>
 801b4b2:	4604      	mov	r4, r0
 801b4b4:	2800      	cmp	r0, #0
 801b4b6:	d15b      	bne.n	801b570 <rcl_node_resolve_name+0x178>
 801b4b8:	4651      	mov	r1, sl
 801b4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4bc:	47c8      	blx	r9
 801b4be:	4651      	mov	r1, sl
 801b4c0:	4620      	mov	r0, r4
 801b4c2:	47c8      	blx	r9
 801b4c4:	e7db      	b.n	801b47e <rcl_node_resolve_name+0x86>
 801b4c6:	ab09      	add	r3, sp, #36	@ 0x24
 801b4c8:	46ec      	mov	ip, sp
 801b4ca:	9305      	str	r3, [sp, #20]
 801b4cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b4ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b4d2:	682b      	ldr	r3, [r5, #0]
 801b4d4:	463a      	mov	r2, r7
 801b4d6:	4631      	mov	r1, r6
 801b4d8:	4620      	mov	r0, r4
 801b4da:	f8cc 3000 	str.w	r3, [ip]
 801b4de:	ab08      	add	r3, sp, #32
 801b4e0:	f005 fd66 	bl	8020fb0 <rcl_expand_topic_name>
 801b4e4:	4683      	mov	fp, r0
 801b4e6:	b9d8      	cbnz	r0, 801b520 <rcl_node_resolve_name+0x128>
 801b4e8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b4ea:	4602      	mov	r2, r0
 801b4ec:	9009      	str	r0, [sp, #36]	@ 0x24
 801b4ee:	a90a      	add	r1, sp, #40	@ 0x28
 801b4f0:	4620      	mov	r0, r4
 801b4f2:	f002 ffb5 	bl	801e460 <rmw_validate_full_topic_name>
 801b4f6:	bb50      	cbnz	r0, 801b54e <rcl_node_resolve_name+0x156>
 801b4f8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b4fa:	2d00      	cmp	r5, #0
 801b4fc:	d140      	bne.n	801b580 <rcl_node_resolve_name+0x188>
 801b4fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b500:	a808      	add	r0, sp, #32
 801b502:	601c      	str	r4, [r3, #0]
 801b504:	f002 fe5a 	bl	801e1bc <rcutils_string_map_fini>
 801b508:	4683      	mov	fp, r0
 801b50a:	2800      	cmp	r0, #0
 801b50c:	d043      	beq.n	801b596 <rcl_node_resolve_name+0x19e>
 801b50e:	f7f9 ffe5 	bl	80154dc <rcutils_get_error_string>
 801b512:	46a8      	mov	r8, r5
 801b514:	f04f 0b01 	mov.w	fp, #1
 801b518:	462c      	mov	r4, r5
 801b51a:	f7f9 fff5 	bl	8015508 <rcutils_reset_error>
 801b51e:	e00a      	b.n	801b536 <rcl_node_resolve_name+0x13e>
 801b520:	2867      	cmp	r0, #103	@ 0x67
 801b522:	bf14      	ite	ne
 801b524:	f04f 0800 	movne.w	r8, #0
 801b528:	f008 0801 	andeq.w	r8, r8, #1
 801b52c:	9c07      	ldr	r4, [sp, #28]
 801b52e:	a808      	add	r0, sp, #32
 801b530:	f002 fe44 	bl	801e1bc <rcutils_string_map_fini>
 801b534:	bb50      	cbnz	r0, 801b58c <rcl_node_resolve_name+0x194>
 801b536:	4651      	mov	r1, sl
 801b538:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b53a:	47c8      	blx	r9
 801b53c:	4651      	mov	r1, sl
 801b53e:	4620      	mov	r0, r4
 801b540:	47c8      	blx	r9
 801b542:	f1b8 0f00 	cmp.w	r8, #0
 801b546:	bf18      	it	ne
 801b548:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 801b54c:	e797      	b.n	801b47e <rcl_node_resolve_name+0x86>
 801b54e:	f7f9 ffc5 	bl	80154dc <rcutils_get_error_string>
 801b552:	f7f9 ffd9 	bl	8015508 <rcutils_reset_error>
 801b556:	a808      	add	r0, sp, #32
 801b558:	f002 fe30 	bl	801e1bc <rcutils_string_map_fini>
 801b55c:	b998      	cbnz	r0, 801b586 <rcl_node_resolve_name+0x18e>
 801b55e:	4651      	mov	r1, sl
 801b560:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b562:	47c8      	blx	r9
 801b564:	4651      	mov	r1, sl
 801b566:	4620      	mov	r0, r4
 801b568:	f04f 0b01 	mov.w	fp, #1
 801b56c:	47c8      	blx	r9
 801b56e:	e786      	b.n	801b47e <rcl_node_resolve_name+0x86>
 801b570:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b574:	f7f9 ffb2 	bl	80154dc <rcutils_get_error_string>
 801b578:	f7f9 ffc6 	bl	8015508 <rcutils_reset_error>
 801b57c:	4644      	mov	r4, r8
 801b57e:	e7da      	b.n	801b536 <rcl_node_resolve_name+0x13e>
 801b580:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 801b584:	e7d3      	b.n	801b52e <rcl_node_resolve_name+0x136>
 801b586:	46d8      	mov	r8, fp
 801b588:	f04f 0b01 	mov.w	fp, #1
 801b58c:	f7f9 ffa6 	bl	80154dc <rcutils_get_error_string>
 801b590:	f7f9 ffba 	bl	8015508 <rcutils_reset_error>
 801b594:	e7cf      	b.n	801b536 <rcl_node_resolve_name+0x13e>
 801b596:	4651      	mov	r1, sl
 801b598:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b59a:	47c8      	blx	r9
 801b59c:	4651      	mov	r1, sl
 801b59e:	4658      	mov	r0, fp
 801b5a0:	47c8      	blx	r9
 801b5a2:	e76c      	b.n	801b47e <rcl_node_resolve_name+0x86>

0801b5a4 <exact_match_lookup>:
 801b5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5a6:	f102 0708 	add.w	r7, r2, #8
 801b5aa:	460b      	mov	r3, r1
 801b5ac:	b085      	sub	sp, #20
 801b5ae:	4614      	mov	r4, r2
 801b5b0:	4606      	mov	r6, r0
 801b5b2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b5b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	4919      	ldr	r1, [pc, #100]	@ (801b624 <exact_match_lookup+0x80>)
 801b5be:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b5c2:	f002 fbbf 	bl	801dd44 <rcutils_join_path>
 801b5c6:	7833      	ldrb	r3, [r6, #0]
 801b5c8:	4605      	mov	r5, r0
 801b5ca:	2b2f      	cmp	r3, #47	@ 0x2f
 801b5cc:	d023      	beq.n	801b616 <exact_match_lookup+0x72>
 801b5ce:	f104 030c 	add.w	r3, r4, #12
 801b5d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b5d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b5da:	1c70      	adds	r0, r6, #1
 801b5dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b5e0:	f002 fbb6 	bl	801dd50 <rcutils_to_native_path>
 801b5e4:	4606      	mov	r6, r0
 801b5e6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b5ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b5ee:	4631      	mov	r1, r6
 801b5f0:	4628      	mov	r0, r5
 801b5f2:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b5f6:	f002 fba5 	bl	801dd44 <rcutils_join_path>
 801b5fa:	4603      	mov	r3, r0
 801b5fc:	4630      	mov	r0, r6
 801b5fe:	6862      	ldr	r2, [r4, #4]
 801b600:	461e      	mov	r6, r3
 801b602:	6921      	ldr	r1, [r4, #16]
 801b604:	4790      	blx	r2
 801b606:	4628      	mov	r0, r5
 801b608:	4635      	mov	r5, r6
 801b60a:	6863      	ldr	r3, [r4, #4]
 801b60c:	6921      	ldr	r1, [r4, #16]
 801b60e:	4798      	blx	r3
 801b610:	4628      	mov	r0, r5
 801b612:	b005      	add	sp, #20
 801b614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b616:	7873      	ldrb	r3, [r6, #1]
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d1d8      	bne.n	801b5ce <exact_match_lookup+0x2a>
 801b61c:	4628      	mov	r0, r5
 801b61e:	b005      	add	sp, #20
 801b620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b622:	bf00      	nop
 801b624:	08025274 	.word	0x08025274

0801b628 <rcl_get_secure_root>:
 801b628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b62c:	b085      	sub	sp, #20
 801b62e:	b168      	cbz	r0, 801b64c <rcl_get_secure_root+0x24>
 801b630:	4607      	mov	r7, r0
 801b632:	4608      	mov	r0, r1
 801b634:	460c      	mov	r4, r1
 801b636:	f7f9 ff43 	bl	80154c0 <rcutils_allocator_is_valid>
 801b63a:	b138      	cbz	r0, 801b64c <rcl_get_secure_root+0x24>
 801b63c:	2300      	movs	r3, #0
 801b63e:	482d      	ldr	r0, [pc, #180]	@ (801b6f4 <rcl_get_secure_root+0xcc>)
 801b640:	a903      	add	r1, sp, #12
 801b642:	9303      	str	r3, [sp, #12]
 801b644:	f002 fb64 	bl	801dd10 <rcutils_get_env>
 801b648:	4605      	mov	r5, r0
 801b64a:	b120      	cbz	r0, 801b656 <rcl_get_secure_root+0x2e>
 801b64c:	2500      	movs	r5, #0
 801b64e:	4628      	mov	r0, r5
 801b650:	b005      	add	sp, #20
 801b652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b656:	9b03      	ldr	r3, [sp, #12]
 801b658:	781a      	ldrb	r2, [r3, #0]
 801b65a:	2a00      	cmp	r2, #0
 801b65c:	d0f6      	beq.n	801b64c <rcl_get_secure_root+0x24>
 801b65e:	f104 090c 	add.w	r9, r4, #12
 801b662:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b666:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b66a:	4618      	mov	r0, r3
 801b66c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b670:	f002 fcb0 	bl	801dfd4 <rcutils_strdup>
 801b674:	4680      	mov	r8, r0
 801b676:	2800      	cmp	r0, #0
 801b678:	d0e8      	beq.n	801b64c <rcl_get_secure_root+0x24>
 801b67a:	a903      	add	r1, sp, #12
 801b67c:	481e      	ldr	r0, [pc, #120]	@ (801b6f8 <rcl_get_secure_root+0xd0>)
 801b67e:	9503      	str	r5, [sp, #12]
 801b680:	f002 fb46 	bl	801dd10 <rcutils_get_env>
 801b684:	b160      	cbz	r0, 801b6a0 <rcl_get_secure_root+0x78>
 801b686:	2600      	movs	r6, #0
 801b688:	4630      	mov	r0, r6
 801b68a:	6863      	ldr	r3, [r4, #4]
 801b68c:	6921      	ldr	r1, [r4, #16]
 801b68e:	4798      	blx	r3
 801b690:	4640      	mov	r0, r8
 801b692:	6863      	ldr	r3, [r4, #4]
 801b694:	6921      	ldr	r1, [r4, #16]
 801b696:	4798      	blx	r3
 801b698:	4628      	mov	r0, r5
 801b69a:	b005      	add	sp, #20
 801b69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b6a0:	9b03      	ldr	r3, [sp, #12]
 801b6a2:	781e      	ldrb	r6, [r3, #0]
 801b6a4:	b1f6      	cbz	r6, 801b6e4 <rcl_get_secure_root+0xbc>
 801b6a6:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b6aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b6b4:	f002 fc8e 	bl	801dfd4 <rcutils_strdup>
 801b6b8:	4606      	mov	r6, r0
 801b6ba:	2800      	cmp	r0, #0
 801b6bc:	d0e3      	beq.n	801b686 <rcl_get_secure_root+0x5e>
 801b6be:	4622      	mov	r2, r4
 801b6c0:	4641      	mov	r1, r8
 801b6c2:	f7ff ff6f 	bl	801b5a4 <exact_match_lookup>
 801b6c6:	4605      	mov	r5, r0
 801b6c8:	2d00      	cmp	r5, #0
 801b6ca:	d0dd      	beq.n	801b688 <rcl_get_secure_root+0x60>
 801b6cc:	4628      	mov	r0, r5
 801b6ce:	f002 fb37 	bl	801dd40 <rcutils_is_directory>
 801b6d2:	4603      	mov	r3, r0
 801b6d4:	2800      	cmp	r0, #0
 801b6d6:	d1d7      	bne.n	801b688 <rcl_get_secure_root+0x60>
 801b6d8:	4628      	mov	r0, r5
 801b6da:	6921      	ldr	r1, [r4, #16]
 801b6dc:	461d      	mov	r5, r3
 801b6de:	6863      	ldr	r3, [r4, #4]
 801b6e0:	4798      	blx	r3
 801b6e2:	e7d1      	b.n	801b688 <rcl_get_secure_root+0x60>
 801b6e4:	4622      	mov	r2, r4
 801b6e6:	4638      	mov	r0, r7
 801b6e8:	4641      	mov	r1, r8
 801b6ea:	f7ff ff5b 	bl	801b5a4 <exact_match_lookup>
 801b6ee:	4605      	mov	r5, r0
 801b6f0:	e7ea      	b.n	801b6c8 <rcl_get_secure_root+0xa0>
 801b6f2:	bf00      	nop
 801b6f4:	08025280 	.word	0x08025280
 801b6f8:	08025298 	.word	0x08025298

0801b6fc <rcl_get_security_options_from_environment>:
 801b6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b700:	b082      	sub	sp, #8
 801b702:	2300      	movs	r3, #0
 801b704:	4606      	mov	r6, r0
 801b706:	460f      	mov	r7, r1
 801b708:	4821      	ldr	r0, [pc, #132]	@ (801b790 <rcl_get_security_options_from_environment+0x94>)
 801b70a:	a901      	add	r1, sp, #4
 801b70c:	4690      	mov	r8, r2
 801b70e:	9301      	str	r3, [sp, #4]
 801b710:	f002 fafe 	bl	801dd10 <rcutils_get_env>
 801b714:	b120      	cbz	r0, 801b720 <rcl_get_security_options_from_environment+0x24>
 801b716:	2501      	movs	r5, #1
 801b718:	4628      	mov	r0, r5
 801b71a:	b002      	add	sp, #8
 801b71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b720:	4604      	mov	r4, r0
 801b722:	491c      	ldr	r1, [pc, #112]	@ (801b794 <rcl_get_security_options_from_environment+0x98>)
 801b724:	9801      	ldr	r0, [sp, #4]
 801b726:	f7e4 fddb 	bl	80002e0 <strcmp>
 801b72a:	4605      	mov	r5, r0
 801b72c:	b9f0      	cbnz	r0, 801b76c <rcl_get_security_options_from_environment+0x70>
 801b72e:	9001      	str	r0, [sp, #4]
 801b730:	f1b8 0f00 	cmp.w	r8, #0
 801b734:	d021      	beq.n	801b77a <rcl_get_security_options_from_environment+0x7e>
 801b736:	a901      	add	r1, sp, #4
 801b738:	4817      	ldr	r0, [pc, #92]	@ (801b798 <rcl_get_security_options_from_environment+0x9c>)
 801b73a:	f002 fae9 	bl	801dd10 <rcutils_get_env>
 801b73e:	2800      	cmp	r0, #0
 801b740:	d1e9      	bne.n	801b716 <rcl_get_security_options_from_environment+0x1a>
 801b742:	4916      	ldr	r1, [pc, #88]	@ (801b79c <rcl_get_security_options_from_environment+0xa0>)
 801b744:	9801      	ldr	r0, [sp, #4]
 801b746:	f7e4 fdcb 	bl	80002e0 <strcmp>
 801b74a:	4603      	mov	r3, r0
 801b74c:	4639      	mov	r1, r7
 801b74e:	4630      	mov	r0, r6
 801b750:	fab3 f383 	clz	r3, r3
 801b754:	095b      	lsrs	r3, r3, #5
 801b756:	f888 3000 	strb.w	r3, [r8]
 801b75a:	f7ff ff65 	bl	801b628 <rcl_get_secure_root>
 801b75e:	b170      	cbz	r0, 801b77e <rcl_get_security_options_from_environment+0x82>
 801b760:	f8c8 0004 	str.w	r0, [r8, #4]
 801b764:	4628      	mov	r0, r5
 801b766:	b002      	add	sp, #8
 801b768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b76c:	4625      	mov	r5, r4
 801b76e:	f888 4000 	strb.w	r4, [r8]
 801b772:	4628      	mov	r0, r5
 801b774:	b002      	add	sp, #8
 801b776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b77a:	250b      	movs	r5, #11
 801b77c:	e7cc      	b.n	801b718 <rcl_get_security_options_from_environment+0x1c>
 801b77e:	f898 5000 	ldrb.w	r5, [r8]
 801b782:	f1a5 0501 	sub.w	r5, r5, #1
 801b786:	fab5 f585 	clz	r5, r5
 801b78a:	096d      	lsrs	r5, r5, #5
 801b78c:	e7c4      	b.n	801b718 <rcl_get_security_options_from_environment+0x1c>
 801b78e:	bf00      	nop
 801b790:	08025238 	.word	0x08025238
 801b794:	0802524c 	.word	0x0802524c
 801b798:	08025254 	.word	0x08025254
 801b79c:	0802526c 	.word	0x0802526c

0801b7a0 <rcl_get_zero_initialized_service>:
 801b7a0:	4b01      	ldr	r3, [pc, #4]	@ (801b7a8 <rcl_get_zero_initialized_service+0x8>)
 801b7a2:	6818      	ldr	r0, [r3, #0]
 801b7a4:	4770      	bx	lr
 801b7a6:	bf00      	nop
 801b7a8:	080252b8 	.word	0x080252b8

0801b7ac <rcl_service_init>:
 801b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7b0:	b088      	sub	sp, #32
 801b7b2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b7b4:	b1ff      	cbz	r7, 801b7f6 <rcl_service_init+0x4a>
 801b7b6:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801b7ba:	4605      	mov	r5, r0
 801b7bc:	460e      	mov	r6, r1
 801b7be:	4691      	mov	r9, r2
 801b7c0:	4650      	mov	r0, sl
 801b7c2:	4698      	mov	r8, r3
 801b7c4:	f7f9 fe7c 	bl	80154c0 <rcutils_allocator_is_valid>
 801b7c8:	f080 0401 	eor.w	r4, r0, #1
 801b7cc:	b2e4      	uxtb	r4, r4
 801b7ce:	b994      	cbnz	r4, 801b7f6 <rcl_service_init+0x4a>
 801b7d0:	b18d      	cbz	r5, 801b7f6 <rcl_service_init+0x4a>
 801b7d2:	4630      	mov	r0, r6
 801b7d4:	f7ff fdb8 	bl	801b348 <rcl_node_is_valid>
 801b7d8:	2800      	cmp	r0, #0
 801b7da:	d05d      	beq.n	801b898 <rcl_service_init+0xec>
 801b7dc:	f1b8 0f00 	cmp.w	r8, #0
 801b7e0:	d009      	beq.n	801b7f6 <rcl_service_init+0x4a>
 801b7e2:	f1b9 0f00 	cmp.w	r9, #0
 801b7e6:	d006      	beq.n	801b7f6 <rcl_service_init+0x4a>
 801b7e8:	682b      	ldr	r3, [r5, #0]
 801b7ea:	b14b      	cbz	r3, 801b800 <rcl_service_init+0x54>
 801b7ec:	2464      	movs	r4, #100	@ 0x64
 801b7ee:	4620      	mov	r0, r4
 801b7f0:	b008      	add	sp, #32
 801b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7f6:	240b      	movs	r4, #11
 801b7f8:	4620      	mov	r0, r4
 801b7fa:	b008      	add	sp, #32
 801b7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b800:	aa07      	add	r2, sp, #28
 801b802:	9304      	str	r3, [sp, #16]
 801b804:	9307      	str	r3, [sp, #28]
 801b806:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b80a:	9205      	str	r2, [sp, #20]
 801b80c:	2201      	movs	r2, #1
 801b80e:	9203      	str	r2, [sp, #12]
 801b810:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b814:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b818:	4641      	mov	r1, r8
 801b81a:	4630      	mov	r0, r6
 801b81c:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801b820:	f7ff fdea 	bl	801b3f8 <rcl_node_resolve_name>
 801b824:	2800      	cmp	r0, #0
 801b826:	d146      	bne.n	801b8b6 <rcl_service_init+0x10a>
 801b828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b82a:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801b82e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b830:	4798      	blx	r3
 801b832:	6028      	str	r0, [r5, #0]
 801b834:	2800      	cmp	r0, #0
 801b836:	d046      	beq.n	801b8c6 <rcl_service_init+0x11a>
 801b838:	4630      	mov	r0, r6
 801b83a:	f7ff fda7 	bl	801b38c <rcl_node_get_rmw_handle>
 801b83e:	463b      	mov	r3, r7
 801b840:	4649      	mov	r1, r9
 801b842:	9a07      	ldr	r2, [sp, #28]
 801b844:	682c      	ldr	r4, [r5, #0]
 801b846:	f003 fd05 	bl	801f254 <rmw_create_service>
 801b84a:	682b      	ldr	r3, [r5, #0]
 801b84c:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 801b850:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b854:	b338      	cbz	r0, 801b8a6 <rcl_service_init+0xfa>
 801b856:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801b85a:	f003 fe2d 	bl	801f4b8 <rmw_service_request_subscription_get_actual_qos>
 801b85e:	bb00      	cbnz	r0, 801b8a2 <rcl_service_init+0xf6>
 801b860:	682b      	ldr	r3, [r5, #0]
 801b862:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 801b866:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b86a:	f003 fe11 	bl	801f490 <rmw_service_response_publisher_get_actual_qos>
 801b86e:	4604      	mov	r4, r0
 801b870:	b9b8      	cbnz	r0, 801b8a2 <rcl_service_init+0xf6>
 801b872:	6828      	ldr	r0, [r5, #0]
 801b874:	2268      	movs	r2, #104	@ 0x68
 801b876:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801b87a:	4639      	mov	r1, r7
 801b87c:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 801b880:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 801b884:	f006 fe77 	bl	8022576 <memcpy>
 801b888:	9807      	ldr	r0, [sp, #28]
 801b88a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b88c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b88e:	4798      	blx	r3
 801b890:	4620      	mov	r0, r4
 801b892:	b008      	add	sp, #32
 801b894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b898:	24c8      	movs	r4, #200	@ 0xc8
 801b89a:	4620      	mov	r0, r4
 801b89c:	b008      	add	sp, #32
 801b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8a2:	682b      	ldr	r3, [r5, #0]
 801b8a4:	b16b      	cbz	r3, 801b8c2 <rcl_service_init+0x116>
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b8aa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b8ac:	2401      	movs	r4, #1
 801b8ae:	4790      	blx	r2
 801b8b0:	2300      	movs	r3, #0
 801b8b2:	602b      	str	r3, [r5, #0]
 801b8b4:	e7e8      	b.n	801b888 <rcl_service_init+0xdc>
 801b8b6:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 801b8ba:	2b01      	cmp	r3, #1
 801b8bc:	d905      	bls.n	801b8ca <rcl_service_init+0x11e>
 801b8be:	280a      	cmp	r0, #10
 801b8c0:	d001      	beq.n	801b8c6 <rcl_service_init+0x11a>
 801b8c2:	2401      	movs	r4, #1
 801b8c4:	e7e0      	b.n	801b888 <rcl_service_init+0xdc>
 801b8c6:	240a      	movs	r4, #10
 801b8c8:	e7de      	b.n	801b888 <rcl_service_init+0xdc>
 801b8ca:	2468      	movs	r4, #104	@ 0x68
 801b8cc:	e7dc      	b.n	801b888 <rcl_service_init+0xdc>
 801b8ce:	bf00      	nop

0801b8d0 <rcl_service_get_default_options>:
 801b8d0:	b530      	push	{r4, r5, lr}
 801b8d2:	4d0f      	ldr	r5, [pc, #60]	@ (801b910 <rcl_service_get_default_options+0x40>)
 801b8d4:	b087      	sub	sp, #28
 801b8d6:	4604      	mov	r4, r0
 801b8d8:	2250      	movs	r2, #80	@ 0x50
 801b8da:	490e      	ldr	r1, [pc, #56]	@ (801b914 <rcl_service_get_default_options+0x44>)
 801b8dc:	4628      	mov	r0, r5
 801b8de:	f006 fe4a 	bl	8022576 <memcpy>
 801b8e2:	4668      	mov	r0, sp
 801b8e4:	f7f9 fdde 	bl	80154a4 <rcutils_get_default_allocator>
 801b8e8:	46ec      	mov	ip, sp
 801b8ea:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801b8ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b8f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b8f6:	f8dc 3000 	ldr.w	r3, [ip]
 801b8fa:	2268      	movs	r2, #104	@ 0x68
 801b8fc:	4629      	mov	r1, r5
 801b8fe:	4620      	mov	r0, r4
 801b900:	f8ce 3000 	str.w	r3, [lr]
 801b904:	f006 fe37 	bl	8022576 <memcpy>
 801b908:	4620      	mov	r0, r4
 801b90a:	b007      	add	sp, #28
 801b90c:	bd30      	pop	{r4, r5, pc}
 801b90e:	bf00      	nop
 801b910:	240693e0 	.word	0x240693e0
 801b914:	080252c0 	.word	0x080252c0

0801b918 <rcl_service_get_rmw_handle>:
 801b918:	b118      	cbz	r0, 801b922 <rcl_service_get_rmw_handle+0xa>
 801b91a:	6800      	ldr	r0, [r0, #0]
 801b91c:	b108      	cbz	r0, 801b922 <rcl_service_get_rmw_handle+0xa>
 801b91e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b922:	4770      	bx	lr

0801b924 <rcl_take_request>:
 801b924:	b570      	push	{r4, r5, r6, lr}
 801b926:	468e      	mov	lr, r1
 801b928:	b08c      	sub	sp, #48	@ 0x30
 801b92a:	460c      	mov	r4, r1
 801b92c:	4616      	mov	r6, r2
 801b92e:	f10d 0c18 	add.w	ip, sp, #24
 801b932:	4605      	mov	r5, r0
 801b934:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b938:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b93c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b940:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b944:	b30d      	cbz	r5, 801b98a <rcl_take_request+0x66>
 801b946:	682b      	ldr	r3, [r5, #0]
 801b948:	b1fb      	cbz	r3, 801b98a <rcl_take_request+0x66>
 801b94a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b94e:	b1e0      	cbz	r0, 801b98a <rcl_take_request+0x66>
 801b950:	b336      	cbz	r6, 801b9a0 <rcl_take_request+0x7c>
 801b952:	2300      	movs	r3, #0
 801b954:	4632      	mov	r2, r6
 801b956:	a902      	add	r1, sp, #8
 801b958:	f88d 3007 	strb.w	r3, [sp, #7]
 801b95c:	f10d 0307 	add.w	r3, sp, #7
 801b960:	f003 fb76 	bl	801f050 <rmw_take_request>
 801b964:	4605      	mov	r5, r0
 801b966:	b198      	cbz	r0, 801b990 <rcl_take_request+0x6c>
 801b968:	280a      	cmp	r0, #10
 801b96a:	bf18      	it	ne
 801b96c:	2501      	movne	r5, #1
 801b96e:	f10d 0e18 	add.w	lr, sp, #24
 801b972:	46a4      	mov	ip, r4
 801b974:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b978:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b97c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b980:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b984:	4628      	mov	r0, r5
 801b986:	b00c      	add	sp, #48	@ 0x30
 801b988:	bd70      	pop	{r4, r5, r6, pc}
 801b98a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801b98e:	e7ee      	b.n	801b96e <rcl_take_request+0x4a>
 801b990:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b994:	f240 2359 	movw	r3, #601	@ 0x259
 801b998:	2a00      	cmp	r2, #0
 801b99a:	bf08      	it	eq
 801b99c:	461d      	moveq	r5, r3
 801b99e:	e7e6      	b.n	801b96e <rcl_take_request+0x4a>
 801b9a0:	250b      	movs	r5, #11
 801b9a2:	e7e4      	b.n	801b96e <rcl_take_request+0x4a>

0801b9a4 <rcl_send_response>:
 801b9a4:	b170      	cbz	r0, 801b9c4 <rcl_send_response+0x20>
 801b9a6:	6800      	ldr	r0, [r0, #0]
 801b9a8:	b160      	cbz	r0, 801b9c4 <rcl_send_response+0x20>
 801b9aa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b9ae:	b148      	cbz	r0, 801b9c4 <rcl_send_response+0x20>
 801b9b0:	b169      	cbz	r1, 801b9ce <rcl_send_response+0x2a>
 801b9b2:	b510      	push	{r4, lr}
 801b9b4:	b14a      	cbz	r2, 801b9ca <rcl_send_response+0x26>
 801b9b6:	f003 fba9 	bl	801f10c <rmw_send_response>
 801b9ba:	b110      	cbz	r0, 801b9c2 <rcl_send_response+0x1e>
 801b9bc:	2802      	cmp	r0, #2
 801b9be:	bf18      	it	ne
 801b9c0:	2001      	movne	r0, #1
 801b9c2:	bd10      	pop	{r4, pc}
 801b9c4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801b9c8:	4770      	bx	lr
 801b9ca:	200b      	movs	r0, #11
 801b9cc:	bd10      	pop	{r4, pc}
 801b9ce:	200b      	movs	r0, #11
 801b9d0:	4770      	bx	lr
 801b9d2:	bf00      	nop

0801b9d4 <rcl_service_is_valid>:
 801b9d4:	b130      	cbz	r0, 801b9e4 <rcl_service_is_valid+0x10>
 801b9d6:	6800      	ldr	r0, [r0, #0]
 801b9d8:	b120      	cbz	r0, 801b9e4 <rcl_service_is_valid+0x10>
 801b9da:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b9de:	3800      	subs	r0, #0
 801b9e0:	bf18      	it	ne
 801b9e2:	2001      	movne	r0, #1
 801b9e4:	4770      	bx	lr
 801b9e6:	bf00      	nop

0801b9e8 <rcl_get_zero_initialized_subscription>:
 801b9e8:	4b01      	ldr	r3, [pc, #4]	@ (801b9f0 <rcl_get_zero_initialized_subscription+0x8>)
 801b9ea:	6818      	ldr	r0, [r3, #0]
 801b9ec:	4770      	bx	lr
 801b9ee:	bf00      	nop
 801b9f0:	08025310 	.word	0x08025310

0801b9f4 <rcl_subscription_init>:
 801b9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9f8:	b088      	sub	sp, #32
 801b9fa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b9fc:	b1ff      	cbz	r7, 801ba3e <rcl_subscription_init+0x4a>
 801b9fe:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801ba02:	4605      	mov	r5, r0
 801ba04:	460e      	mov	r6, r1
 801ba06:	4691      	mov	r9, r2
 801ba08:	4650      	mov	r0, sl
 801ba0a:	4698      	mov	r8, r3
 801ba0c:	f7f9 fd58 	bl	80154c0 <rcutils_allocator_is_valid>
 801ba10:	f080 0401 	eor.w	r4, r0, #1
 801ba14:	b2e4      	uxtb	r4, r4
 801ba16:	b994      	cbnz	r4, 801ba3e <rcl_subscription_init+0x4a>
 801ba18:	b18d      	cbz	r5, 801ba3e <rcl_subscription_init+0x4a>
 801ba1a:	4630      	mov	r0, r6
 801ba1c:	f7ff fc94 	bl	801b348 <rcl_node_is_valid>
 801ba20:	2800      	cmp	r0, #0
 801ba22:	d055      	beq.n	801bad0 <rcl_subscription_init+0xdc>
 801ba24:	f1b9 0f00 	cmp.w	r9, #0
 801ba28:	d009      	beq.n	801ba3e <rcl_subscription_init+0x4a>
 801ba2a:	f1b8 0f00 	cmp.w	r8, #0
 801ba2e:	d006      	beq.n	801ba3e <rcl_subscription_init+0x4a>
 801ba30:	682b      	ldr	r3, [r5, #0]
 801ba32:	b14b      	cbz	r3, 801ba48 <rcl_subscription_init+0x54>
 801ba34:	2464      	movs	r4, #100	@ 0x64
 801ba36:	4620      	mov	r0, r4
 801ba38:	b008      	add	sp, #32
 801ba3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba3e:	240b      	movs	r4, #11
 801ba40:	4620      	mov	r0, r4
 801ba42:	b008      	add	sp, #32
 801ba44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba48:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801ba4c:	aa07      	add	r2, sp, #28
 801ba4e:	9307      	str	r3, [sp, #28]
 801ba50:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ba54:	9205      	str	r2, [sp, #20]
 801ba56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ba5a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ba5e:	4641      	mov	r1, r8
 801ba60:	4630      	mov	r0, r6
 801ba62:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801ba66:	f7ff fcc7 	bl	801b3f8 <rcl_node_resolve_name>
 801ba6a:	2800      	cmp	r0, #0
 801ba6c:	d15f      	bne.n	801bb2e <rcl_subscription_init+0x13a>
 801ba6e:	21c8      	movs	r1, #200	@ 0xc8
 801ba70:	2001      	movs	r0, #1
 801ba72:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 801ba76:	4798      	blx	r3
 801ba78:	6028      	str	r0, [r5, #0]
 801ba7a:	2800      	cmp	r0, #0
 801ba7c:	d05f      	beq.n	801bb3e <rcl_subscription_init+0x14a>
 801ba7e:	4630      	mov	r0, r6
 801ba80:	f7ff fc84 	bl	801b38c <rcl_node_get_rmw_handle>
 801ba84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ba88:	4649      	mov	r1, r9
 801ba8a:	9a07      	ldr	r2, [sp, #28]
 801ba8c:	9300      	str	r3, [sp, #0]
 801ba8e:	463b      	mov	r3, r7
 801ba90:	682c      	ldr	r4, [r5, #0]
 801ba92:	f003 fd25 	bl	801f4e0 <rmw_create_subscription>
 801ba96:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801ba9a:	682c      	ldr	r4, [r5, #0]
 801ba9c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801baa0:	b348      	cbz	r0, 801baf6 <rcl_subscription_init+0x102>
 801baa2:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 801baa6:	f003 fe11 	bl	801f6cc <rmw_subscription_get_actual_qos>
 801baaa:	4604      	mov	r4, r0
 801baac:	b9a8      	cbnz	r0, 801bada <rcl_subscription_init+0xe6>
 801baae:	6828      	ldr	r0, [r5, #0]
 801bab0:	2270      	movs	r2, #112	@ 0x70
 801bab2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801bab6:	4639      	mov	r1, r7
 801bab8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801babc:	f006 fd5b 	bl	8022576 <memcpy>
 801bac0:	9807      	ldr	r0, [sp, #28]
 801bac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bac4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801bac6:	4798      	blx	r3
 801bac8:	4620      	mov	r0, r4
 801baca:	b008      	add	sp, #32
 801bacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bad0:	24c8      	movs	r4, #200	@ 0xc8
 801bad2:	4620      	mov	r0, r4
 801bad4:	b008      	add	sp, #32
 801bad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bada:	682c      	ldr	r4, [r5, #0]
 801badc:	b36c      	cbz	r4, 801bb3a <rcl_subscription_init+0x146>
 801bade:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 801bae2:	b14b      	cbz	r3, 801baf8 <rcl_subscription_init+0x104>
 801bae4:	4630      	mov	r0, r6
 801bae6:	f7ff fc51 	bl	801b38c <rcl_node_get_rmw_handle>
 801baea:	682b      	ldr	r3, [r5, #0]
 801baec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 801baf0:	f003 fe00 	bl	801f6f4 <rmw_destroy_subscription>
 801baf4:	682c      	ldr	r4, [r5, #0]
 801baf6:	b194      	cbz	r4, 801bb1e <rcl_subscription_init+0x12a>
 801baf8:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 801bafc:	4630      	mov	r0, r6
 801bafe:	f7f9 fcdf 	bl	80154c0 <rcutils_allocator_is_valid>
 801bb02:	b158      	cbz	r0, 801bb1c <rcl_subscription_init+0x128>
 801bb04:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801bb06:	b148      	cbz	r0, 801bb1c <rcl_subscription_init+0x128>
 801bb08:	4631      	mov	r1, r6
 801bb0a:	f002 fbf9 	bl	801e300 <rmw_subscription_content_filter_options_fini>
 801bb0e:	4606      	mov	r6, r0
 801bb10:	b9c8      	cbnz	r0, 801bb46 <rcl_subscription_init+0x152>
 801bb12:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801bb14:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801bb16:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801bb18:	4798      	blx	r3
 801bb1a:	66e6      	str	r6, [r4, #108]	@ 0x6c
 801bb1c:	682c      	ldr	r4, [r5, #0]
 801bb1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bb20:	4620      	mov	r0, r4
 801bb22:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801bb24:	2401      	movs	r4, #1
 801bb26:	4798      	blx	r3
 801bb28:	2300      	movs	r3, #0
 801bb2a:	602b      	str	r3, [r5, #0]
 801bb2c:	e7c8      	b.n	801bac0 <rcl_subscription_init+0xcc>
 801bb2e:	2867      	cmp	r0, #103	@ 0x67
 801bb30:	d007      	beq.n	801bb42 <rcl_subscription_init+0x14e>
 801bb32:	2869      	cmp	r0, #105	@ 0x69
 801bb34:	d005      	beq.n	801bb42 <rcl_subscription_init+0x14e>
 801bb36:	280a      	cmp	r0, #10
 801bb38:	d001      	beq.n	801bb3e <rcl_subscription_init+0x14a>
 801bb3a:	2401      	movs	r4, #1
 801bb3c:	e7c0      	b.n	801bac0 <rcl_subscription_init+0xcc>
 801bb3e:	240a      	movs	r4, #10
 801bb40:	e7be      	b.n	801bac0 <rcl_subscription_init+0xcc>
 801bb42:	2467      	movs	r4, #103	@ 0x67
 801bb44:	e7bc      	b.n	801bac0 <rcl_subscription_init+0xcc>
 801bb46:	f7ff f801 	bl	801ab4c <rcl_convert_rmw_ret_to_rcl_ret>
 801bb4a:	682c      	ldr	r4, [r5, #0]
 801bb4c:	e7e7      	b.n	801bb1e <rcl_subscription_init+0x12a>
 801bb4e:	bf00      	nop

0801bb50 <rcl_subscription_get_default_options>:
 801bb50:	b570      	push	{r4, r5, r6, lr}
 801bb52:	4d14      	ldr	r5, [pc, #80]	@ (801bba4 <rcl_subscription_get_default_options+0x54>)
 801bb54:	b08a      	sub	sp, #40	@ 0x28
 801bb56:	4604      	mov	r4, r0
 801bb58:	2250      	movs	r2, #80	@ 0x50
 801bb5a:	4913      	ldr	r1, [pc, #76]	@ (801bba8 <rcl_subscription_get_default_options+0x58>)
 801bb5c:	4628      	mov	r0, r5
 801bb5e:	f006 fd0a 	bl	8022576 <memcpy>
 801bb62:	a804      	add	r0, sp, #16
 801bb64:	f7f9 fc9e 	bl	80154a4 <rcutils_get_default_allocator>
 801bb68:	f10d 0c10 	add.w	ip, sp, #16
 801bb6c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801bb70:	466e      	mov	r6, sp
 801bb72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb76:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb7a:	f8dc 3000 	ldr.w	r3, [ip]
 801bb7e:	4630      	mov	r0, r6
 801bb80:	f8ce 3000 	str.w	r3, [lr]
 801bb84:	f002 fbd6 	bl	801e334 <rmw_get_default_subscription_options>
 801bb88:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801bb8c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801bb90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bb94:	2270      	movs	r2, #112	@ 0x70
 801bb96:	4629      	mov	r1, r5
 801bb98:	4620      	mov	r0, r4
 801bb9a:	f006 fcec 	bl	8022576 <memcpy>
 801bb9e:	4620      	mov	r0, r4
 801bba0:	b00a      	add	sp, #40	@ 0x28
 801bba2:	bd70      	pop	{r4, r5, r6, pc}
 801bba4:	24069448 	.word	0x24069448
 801bba8:	08025318 	.word	0x08025318

0801bbac <rcl_take>:
 801bbac:	2800      	cmp	r0, #0
 801bbae:	d049      	beq.n	801bc44 <rcl_take+0x98>
 801bbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbb4:	4615      	mov	r5, r2
 801bbb6:	6802      	ldr	r2, [r0, #0]
 801bbb8:	b0a4      	sub	sp, #144	@ 0x90
 801bbba:	4604      	mov	r4, r0
 801bbbc:	2a00      	cmp	r2, #0
 801bbbe:	d039      	beq.n	801bc34 <rcl_take+0x88>
 801bbc0:	461f      	mov	r7, r3
 801bbc2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801bbc6:	b3ab      	cbz	r3, 801bc34 <rcl_take+0x88>
 801bbc8:	460e      	mov	r6, r1
 801bbca:	2900      	cmp	r1, #0
 801bbcc:	d038      	beq.n	801bc40 <rcl_take+0x94>
 801bbce:	2d00      	cmp	r5, #0
 801bbd0:	d03c      	beq.n	801bc4c <rcl_take+0xa0>
 801bbd2:	a802      	add	r0, sp, #8
 801bbd4:	f04f 0800 	mov.w	r8, #0
 801bbd8:	f002 fc3a 	bl	801e450 <rmw_get_zero_initialized_message_info>
 801bbdc:	f10d 0c08 	add.w	ip, sp, #8
 801bbe0:	46ae      	mov	lr, r5
 801bbe2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbe6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bbea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bbf2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbf6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bbfa:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801bbfe:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801bc02:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801bc06:	462b      	mov	r3, r5
 801bc08:	6820      	ldr	r0, [r4, #0]
 801bc0a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801bc0e:	4631      	mov	r1, r6
 801bc10:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bc14:	9700      	str	r7, [sp, #0]
 801bc16:	f003 fdcf 	bl	801f7b8 <rmw_take_with_info>
 801bc1a:	4603      	mov	r3, r0
 801bc1c:	b9c0      	cbnz	r0, 801bc50 <rcl_take+0xa4>
 801bc1e:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801bc22:	f240 1291 	movw	r2, #401	@ 0x191
 801bc26:	2900      	cmp	r1, #0
 801bc28:	bf08      	it	eq
 801bc2a:	4613      	moveq	r3, r2
 801bc2c:	4618      	mov	r0, r3
 801bc2e:	b024      	add	sp, #144	@ 0x90
 801bc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc34:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bc38:	4618      	mov	r0, r3
 801bc3a:	b024      	add	sp, #144	@ 0x90
 801bc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc40:	230b      	movs	r3, #11
 801bc42:	e7f3      	b.n	801bc2c <rcl_take+0x80>
 801bc44:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bc48:	4618      	mov	r0, r3
 801bc4a:	4770      	bx	lr
 801bc4c:	ad14      	add	r5, sp, #80	@ 0x50
 801bc4e:	e7c0      	b.n	801bbd2 <rcl_take+0x26>
 801bc50:	f7fe ff7c 	bl	801ab4c <rcl_convert_rmw_ret_to_rcl_ret>
 801bc54:	4603      	mov	r3, r0
 801bc56:	e7e9      	b.n	801bc2c <rcl_take+0x80>

0801bc58 <rcl_subscription_get_rmw_handle>:
 801bc58:	b118      	cbz	r0, 801bc62 <rcl_subscription_get_rmw_handle+0xa>
 801bc5a:	6800      	ldr	r0, [r0, #0]
 801bc5c:	b108      	cbz	r0, 801bc62 <rcl_subscription_get_rmw_handle+0xa>
 801bc5e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bc62:	4770      	bx	lr

0801bc64 <rcl_subscription_is_valid>:
 801bc64:	b130      	cbz	r0, 801bc74 <rcl_subscription_is_valid+0x10>
 801bc66:	6800      	ldr	r0, [r0, #0]
 801bc68:	b120      	cbz	r0, 801bc74 <rcl_subscription_is_valid+0x10>
 801bc6a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bc6e:	3800      	subs	r0, #0
 801bc70:	bf18      	it	ne
 801bc72:	2001      	movne	r0, #1
 801bc74:	4770      	bx	lr
 801bc76:	bf00      	nop

0801bc78 <rcl_get_system_time>:
 801bc78:	4608      	mov	r0, r1
 801bc7a:	f7f9 bc61 	b.w	8015540 <rcutils_system_time_now>
 801bc7e:	bf00      	nop

0801bc80 <rcl_get_steady_time>:
 801bc80:	4608      	mov	r0, r1
 801bc82:	f7f9 bc83 	b.w	801558c <rcutils_steady_time_now>
 801bc86:	bf00      	nop

0801bc88 <rcl_get_ros_time>:
 801bc88:	7a03      	ldrb	r3, [r0, #8]
 801bc8a:	b510      	push	{r4, lr}
 801bc8c:	460c      	mov	r4, r1
 801bc8e:	b143      	cbz	r3, 801bca2 <rcl_get_ros_time+0x1a>
 801bc90:	2105      	movs	r1, #5
 801bc92:	f001 ff99 	bl	801dbc8 <__atomic_load_8>
 801bc96:	4602      	mov	r2, r0
 801bc98:	460b      	mov	r3, r1
 801bc9a:	2000      	movs	r0, #0
 801bc9c:	e9c4 2300 	strd	r2, r3, [r4]
 801bca0:	bd10      	pop	{r4, pc}
 801bca2:	4608      	mov	r0, r1
 801bca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bca8:	f7f9 bc4a 	b.w	8015540 <rcutils_system_time_now>

0801bcac <rcl_clock_init>:
 801bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcae:	4605      	mov	r5, r0
 801bcb0:	4610      	mov	r0, r2
 801bcb2:	4614      	mov	r4, r2
 801bcb4:	460e      	mov	r6, r1
 801bcb6:	f7f9 fc03 	bl	80154c0 <rcutils_allocator_is_valid>
 801bcba:	b128      	cbz	r0, 801bcc8 <rcl_clock_init+0x1c>
 801bcbc:	2d03      	cmp	r5, #3
 801bcbe:	d803      	bhi.n	801bcc8 <rcl_clock_init+0x1c>
 801bcc0:	e8df f005 	tbb	[pc, r5]
 801bcc4:	0659301f 	.word	0x0659301f
 801bcc8:	f04f 0c0b 	mov.w	ip, #11
 801bccc:	4660      	mov	r0, ip
 801bcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcd0:	2c00      	cmp	r4, #0
 801bcd2:	d0f9      	beq.n	801bcc8 <rcl_clock_init+0x1c>
 801bcd4:	fab6 f386 	clz	r3, r6
 801bcd8:	095b      	lsrs	r3, r3, #5
 801bcda:	2e00      	cmp	r6, #0
 801bcdc:	d0f4      	beq.n	801bcc8 <rcl_clock_init+0x1c>
 801bcde:	6133      	str	r3, [r6, #16]
 801bce0:	469c      	mov	ip, r3
 801bce2:	f106 0514 	add.w	r5, r6, #20
 801bce6:	4f32      	ldr	r7, [pc, #200]	@ (801bdb0 <rcl_clock_init+0x104>)
 801bce8:	f04f 0e03 	mov.w	lr, #3
 801bcec:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bcf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bcf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bcf4:	6823      	ldr	r3, [r4, #0]
 801bcf6:	4660      	mov	r0, ip
 801bcf8:	602b      	str	r3, [r5, #0]
 801bcfa:	60f7      	str	r7, [r6, #12]
 801bcfc:	f886 e000 	strb.w	lr, [r6]
 801bd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd02:	2e00      	cmp	r6, #0
 801bd04:	d0e0      	beq.n	801bcc8 <rcl_clock_init+0x1c>
 801bd06:	2300      	movs	r3, #0
 801bd08:	f106 0514 	add.w	r5, r6, #20
 801bd0c:	7033      	strb	r3, [r6, #0]
 801bd0e:	469c      	mov	ip, r3
 801bd10:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bd14:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bd18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd1c:	6823      	ldr	r3, [r4, #0]
 801bd1e:	4660      	mov	r0, ip
 801bd20:	602b      	str	r3, [r5, #0]
 801bd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd24:	2c00      	cmp	r4, #0
 801bd26:	d0cf      	beq.n	801bcc8 <rcl_clock_init+0x1c>
 801bd28:	fab6 f586 	clz	r5, r6
 801bd2c:	096d      	lsrs	r5, r5, #5
 801bd2e:	2e00      	cmp	r6, #0
 801bd30:	d0ca      	beq.n	801bcc8 <rcl_clock_init+0x1c>
 801bd32:	46a6      	mov	lr, r4
 801bd34:	7035      	strb	r5, [r6, #0]
 801bd36:	f106 0c14 	add.w	ip, r6, #20
 801bd3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bd3e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bd42:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bd46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd4a:	f8de 3000 	ldr.w	r3, [lr]
 801bd4e:	2010      	movs	r0, #16
 801bd50:	f8cc 3000 	str.w	r3, [ip]
 801bd54:	6823      	ldr	r3, [r4, #0]
 801bd56:	6921      	ldr	r1, [r4, #16]
 801bd58:	4798      	blx	r3
 801bd5a:	6130      	str	r0, [r6, #16]
 801bd5c:	b320      	cbz	r0, 801bda8 <rcl_clock_init+0xfc>
 801bd5e:	2200      	movs	r2, #0
 801bd60:	2300      	movs	r3, #0
 801bd62:	46ac      	mov	ip, r5
 801bd64:	7205      	strb	r5, [r0, #8]
 801bd66:	e9c0 2300 	strd	r2, r3, [r0]
 801bd6a:	4a12      	ldr	r2, [pc, #72]	@ (801bdb4 <rcl_clock_init+0x108>)
 801bd6c:	2301      	movs	r3, #1
 801bd6e:	4660      	mov	r0, ip
 801bd70:	60f2      	str	r2, [r6, #12]
 801bd72:	7033      	strb	r3, [r6, #0]
 801bd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd76:	2c00      	cmp	r4, #0
 801bd78:	d0a6      	beq.n	801bcc8 <rcl_clock_init+0x1c>
 801bd7a:	fab6 f386 	clz	r3, r6
 801bd7e:	095b      	lsrs	r3, r3, #5
 801bd80:	2e00      	cmp	r6, #0
 801bd82:	d0a1      	beq.n	801bcc8 <rcl_clock_init+0x1c>
 801bd84:	6133      	str	r3, [r6, #16]
 801bd86:	469c      	mov	ip, r3
 801bd88:	f106 0514 	add.w	r5, r6, #20
 801bd8c:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801bdb8 <rcl_clock_init+0x10c>
 801bd90:	2702      	movs	r7, #2
 801bd92:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bd96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd9a:	6823      	ldr	r3, [r4, #0]
 801bd9c:	4660      	mov	r0, ip
 801bd9e:	602b      	str	r3, [r5, #0]
 801bda0:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bda4:	7037      	strb	r7, [r6, #0]
 801bda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bda8:	f04f 0c0a 	mov.w	ip, #10
 801bdac:	e78e      	b.n	801bccc <rcl_clock_init+0x20>
 801bdae:	bf00      	nop
 801bdb0:	0801bc81 	.word	0x0801bc81
 801bdb4:	0801bc89 	.word	0x0801bc89
 801bdb8:	0801bc79 	.word	0x0801bc79

0801bdbc <rcl_clock_get_now>:
 801bdbc:	b140      	cbz	r0, 801bdd0 <rcl_clock_get_now+0x14>
 801bdbe:	b139      	cbz	r1, 801bdd0 <rcl_clock_get_now+0x14>
 801bdc0:	7803      	ldrb	r3, [r0, #0]
 801bdc2:	b11b      	cbz	r3, 801bdcc <rcl_clock_get_now+0x10>
 801bdc4:	68c3      	ldr	r3, [r0, #12]
 801bdc6:	b10b      	cbz	r3, 801bdcc <rcl_clock_get_now+0x10>
 801bdc8:	6900      	ldr	r0, [r0, #16]
 801bdca:	4718      	bx	r3
 801bdcc:	2001      	movs	r0, #1
 801bdce:	4770      	bx	lr
 801bdd0:	200b      	movs	r0, #11
 801bdd2:	4770      	bx	lr

0801bdd4 <rcl_clock_add_jump_callback>:
 801bdd4:	b082      	sub	sp, #8
 801bdd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdda:	a906      	add	r1, sp, #24
 801bddc:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 801bde0:	e881 000c 	stmia.w	r1, {r2, r3}
 801bde4:	b330      	cbz	r0, 801be34 <rcl_clock_add_jump_callback+0x60>
 801bde6:	4604      	mov	r4, r0
 801bde8:	3014      	adds	r0, #20
 801bdea:	f7f9 fb69 	bl	80154c0 <rcutils_allocator_is_valid>
 801bdee:	b30d      	cbz	r5, 801be34 <rcl_clock_add_jump_callback+0x60>
 801bdf0:	f080 0301 	eor.w	r3, r0, #1
 801bdf4:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801bdf8:	d11c      	bne.n	801be34 <rcl_clock_add_jump_callback+0x60>
 801bdfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bdfc:	2a00      	cmp	r2, #0
 801bdfe:	db19      	blt.n	801be34 <rcl_clock_add_jump_callback+0x60>
 801be00:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801be04:	2901      	cmp	r1, #1
 801be06:	f172 0200 	sbcs.w	r2, r2, #0
 801be0a:	da13      	bge.n	801be34 <rcl_clock_add_jump_callback+0x60>
 801be0c:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801be10:	2f00      	cmp	r7, #0
 801be12:	d040      	beq.n	801be96 <rcl_clock_add_jump_callback+0xc2>
 801be14:	4602      	mov	r2, r0
 801be16:	e003      	b.n	801be20 <rcl_clock_add_jump_callback+0x4c>
 801be18:	42bb      	cmp	r3, r7
 801be1a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 801be1e:	d010      	beq.n	801be42 <rcl_clock_add_jump_callback+0x6e>
 801be20:	6811      	ldr	r1, [r2, #0]
 801be22:	3301      	adds	r3, #1
 801be24:	42a9      	cmp	r1, r5
 801be26:	d1f7      	bne.n	801be18 <rcl_clock_add_jump_callback+0x44>
 801be28:	6a11      	ldr	r1, [r2, #32]
 801be2a:	42b1      	cmp	r1, r6
 801be2c:	d1f4      	bne.n	801be18 <rcl_clock_add_jump_callback+0x44>
 801be2e:	f04f 0e01 	mov.w	lr, #1
 801be32:	e001      	b.n	801be38 <rcl_clock_add_jump_callback+0x64>
 801be34:	f04f 0e0b 	mov.w	lr, #11
 801be38:	4670      	mov	r0, lr
 801be3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be3e:	b002      	add	sp, #8
 801be40:	4770      	bx	lr
 801be42:	3301      	adds	r3, #1
 801be44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801be48:	00d9      	lsls	r1, r3, #3
 801be4a:	69e3      	ldr	r3, [r4, #28]
 801be4c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801be4e:	4798      	blx	r3
 801be50:	b1f0      	cbz	r0, 801be90 <rcl_clock_add_jump_callback+0xbc>
 801be52:	68a3      	ldr	r3, [r4, #8]
 801be54:	f10d 0c18 	add.w	ip, sp, #24
 801be58:	6060      	str	r0, [r4, #4]
 801be5a:	f04f 0e00 	mov.w	lr, #0
 801be5e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801be62:	f103 0801 	add.w	r8, r3, #1
 801be66:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 801be6a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801be6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801be72:	f105 0708 	add.w	r7, r5, #8
 801be76:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801be78:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801be7c:	e887 0003 	stmia.w	r7, {r0, r1}
 801be80:	4670      	mov	r0, lr
 801be82:	622e      	str	r6, [r5, #32]
 801be84:	f8c4 8008 	str.w	r8, [r4, #8]
 801be88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be8c:	b002      	add	sp, #8
 801be8e:	4770      	bx	lr
 801be90:	f04f 0e0a 	mov.w	lr, #10
 801be94:	e7d0      	b.n	801be38 <rcl_clock_add_jump_callback+0x64>
 801be96:	2128      	movs	r1, #40	@ 0x28
 801be98:	e7d7      	b.n	801be4a <rcl_clock_add_jump_callback+0x76>
 801be9a:	bf00      	nop

0801be9c <rcl_clock_remove_jump_callback>:
 801be9c:	2800      	cmp	r0, #0
 801be9e:	d05f      	beq.n	801bf60 <rcl_clock_remove_jump_callback+0xc4>
 801bea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bea4:	4605      	mov	r5, r0
 801bea6:	3014      	adds	r0, #20
 801bea8:	460f      	mov	r7, r1
 801beaa:	4692      	mov	sl, r2
 801beac:	f7f9 fb08 	bl	80154c0 <rcutils_allocator_is_valid>
 801beb0:	f080 0001 	eor.w	r0, r0, #1
 801beb4:	b2c0      	uxtb	r0, r0
 801beb6:	2800      	cmp	r0, #0
 801beb8:	d13f      	bne.n	801bf3a <rcl_clock_remove_jump_callback+0x9e>
 801beba:	2f00      	cmp	r7, #0
 801bebc:	d03d      	beq.n	801bf3a <rcl_clock_remove_jump_callback+0x9e>
 801bebe:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801bec2:	f1b8 0f00 	cmp.w	r8, #0
 801bec6:	d00c      	beq.n	801bee2 <rcl_clock_remove_jump_callback+0x46>
 801bec8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801becc:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801bed0:	464c      	mov	r4, r9
 801bed2:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801bed6:	6823      	ldr	r3, [r4, #0]
 801bed8:	42bb      	cmp	r3, r7
 801beda:	d005      	beq.n	801bee8 <rcl_clock_remove_jump_callback+0x4c>
 801bedc:	3428      	adds	r4, #40	@ 0x28
 801bede:	42a6      	cmp	r6, r4
 801bee0:	d1f9      	bne.n	801bed6 <rcl_clock_remove_jump_callback+0x3a>
 801bee2:	2001      	movs	r0, #1
 801bee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bee8:	6a23      	ldr	r3, [r4, #32]
 801beea:	3428      	adds	r4, #40	@ 0x28
 801beec:	42a6      	cmp	r6, r4
 801beee:	d02f      	beq.n	801bf50 <rcl_clock_remove_jump_callback+0xb4>
 801bef0:	4553      	cmp	r3, sl
 801bef2:	d1f0      	bne.n	801bed6 <rcl_clock_remove_jump_callback+0x3a>
 801bef4:	46a6      	mov	lr, r4
 801bef6:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801befa:	3428      	adds	r4, #40	@ 0x28
 801befc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bf00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bf04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bf08:	42a6      	cmp	r6, r4
 801bf0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bf0e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801bf12:	e88c 0003 	stmia.w	ip, {r0, r1}
 801bf16:	d1ed      	bne.n	801bef4 <rcl_clock_remove_jump_callback+0x58>
 801bf18:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801bf1c:	60ac      	str	r4, [r5, #8]
 801bf1e:	b17c      	cbz	r4, 801bf40 <rcl_clock_remove_jump_callback+0xa4>
 801bf20:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801bf24:	69eb      	ldr	r3, [r5, #28]
 801bf26:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801bf28:	4648      	mov	r0, r9
 801bf2a:	00e1      	lsls	r1, r4, #3
 801bf2c:	4798      	blx	r3
 801bf2e:	4603      	mov	r3, r0
 801bf30:	b1c0      	cbz	r0, 801bf64 <rcl_clock_remove_jump_callback+0xc8>
 801bf32:	2000      	movs	r0, #0
 801bf34:	606b      	str	r3, [r5, #4]
 801bf36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf3a:	200b      	movs	r0, #11
 801bf3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf40:	4648      	mov	r0, r9
 801bf42:	69ab      	ldr	r3, [r5, #24]
 801bf44:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801bf46:	4798      	blx	r3
 801bf48:	4620      	mov	r0, r4
 801bf4a:	606c      	str	r4, [r5, #4]
 801bf4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf50:	4553      	cmp	r3, sl
 801bf52:	d1c6      	bne.n	801bee2 <rcl_clock_remove_jump_callback+0x46>
 801bf54:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801bf58:	60ac      	str	r4, [r5, #8]
 801bf5a:	2c00      	cmp	r4, #0
 801bf5c:	d1e0      	bne.n	801bf20 <rcl_clock_remove_jump_callback+0x84>
 801bf5e:	e7ef      	b.n	801bf40 <rcl_clock_remove_jump_callback+0xa4>
 801bf60:	200b      	movs	r0, #11
 801bf62:	4770      	bx	lr
 801bf64:	200a      	movs	r0, #10
 801bf66:	e7e9      	b.n	801bf3c <rcl_clock_remove_jump_callback+0xa0>

0801bf68 <_rcl_timer_time_jump>:
 801bf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf6c:	4605      	mov	r5, r0
 801bf6e:	b084      	sub	sp, #16
 801bf70:	4614      	mov	r4, r2
 801bf72:	b131      	cbz	r1, 801bf82 <_rcl_timer_time_jump+0x1a>
 801bf74:	7803      	ldrb	r3, [r0, #0]
 801bf76:	3b02      	subs	r3, #2
 801bf78:	2b01      	cmp	r3, #1
 801bf7a:	d93f      	bls.n	801bffc <_rcl_timer_time_jump+0x94>
 801bf7c:	b004      	add	sp, #16
 801bf7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf82:	6813      	ldr	r3, [r2, #0]
 801bf84:	a902      	add	r1, sp, #8
 801bf86:	6818      	ldr	r0, [r3, #0]
 801bf88:	f7ff ff18 	bl	801bdbc <rcl_clock_get_now>
 801bf8c:	2800      	cmp	r0, #0
 801bf8e:	d1f5      	bne.n	801bf7c <_rcl_timer_time_jump+0x14>
 801bf90:	6820      	ldr	r0, [r4, #0]
 801bf92:	2105      	movs	r1, #5
 801bf94:	3020      	adds	r0, #32
 801bf96:	f001 fe17 	bl	801dbc8 <__atomic_load_8>
 801bf9a:	6823      	ldr	r3, [r4, #0]
 801bf9c:	4681      	mov	r9, r0
 801bf9e:	4688      	mov	r8, r1
 801bfa0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801bfa4:	2105      	movs	r1, #5
 801bfa6:	f001 fe0f 	bl	801dbc8 <__atomic_load_8>
 801bfaa:	4607      	mov	r7, r0
 801bfac:	6820      	ldr	r0, [r4, #0]
 801bfae:	460e      	mov	r6, r1
 801bfb0:	2105      	movs	r1, #5
 801bfb2:	3018      	adds	r0, #24
 801bfb4:	f001 fe08 	bl	801dbc8 <__atomic_load_8>
 801bfb8:	782b      	ldrb	r3, [r5, #0]
 801bfba:	4682      	mov	sl, r0
 801bfbc:	460d      	mov	r5, r1
 801bfbe:	3b02      	subs	r3, #2
 801bfc0:	9a02      	ldr	r2, [sp, #8]
 801bfc2:	2b01      	cmp	r3, #1
 801bfc4:	9b03      	ldr	r3, [sp, #12]
 801bfc6:	d937      	bls.n	801c038 <_rcl_timer_time_jump+0xd0>
 801bfc8:	42ba      	cmp	r2, r7
 801bfca:	eb73 0106 	sbcs.w	r1, r3, r6
 801bfce:	da60      	bge.n	801c092 <_rcl_timer_time_jump+0x12a>
 801bfd0:	454a      	cmp	r2, r9
 801bfd2:	eb73 0108 	sbcs.w	r1, r3, r8
 801bfd6:	dad1      	bge.n	801bf7c <_rcl_timer_time_jump+0x14>
 801bfd8:	eb1a 0202 	adds.w	r2, sl, r2
 801bfdc:	6820      	ldr	r0, [r4, #0]
 801bfde:	eb43 0305 	adc.w	r3, r3, r5
 801bfe2:	2505      	movs	r5, #5
 801bfe4:	3028      	adds	r0, #40	@ 0x28
 801bfe6:	9500      	str	r5, [sp, #0]
 801bfe8:	f001 fe24 	bl	801dc34 <__atomic_store_8>
 801bfec:	6820      	ldr	r0, [r4, #0]
 801bfee:	9500      	str	r5, [sp, #0]
 801bff0:	3020      	adds	r0, #32
 801bff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bff6:	f001 fe1d 	bl	801dc34 <__atomic_store_8>
 801bffa:	e7bf      	b.n	801bf7c <_rcl_timer_time_jump+0x14>
 801bffc:	6813      	ldr	r3, [r2, #0]
 801bffe:	a902      	add	r1, sp, #8
 801c000:	6818      	ldr	r0, [r3, #0]
 801c002:	f7ff fedb 	bl	801bdbc <rcl_clock_get_now>
 801c006:	2800      	cmp	r0, #0
 801c008:	d1b8      	bne.n	801bf7c <_rcl_timer_time_jump+0x14>
 801c00a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c00e:	4313      	orrs	r3, r2
 801c010:	d0b4      	beq.n	801bf7c <_rcl_timer_time_jump+0x14>
 801c012:	6820      	ldr	r0, [r4, #0]
 801c014:	2105      	movs	r1, #5
 801c016:	3028      	adds	r0, #40	@ 0x28
 801c018:	f001 fdd6 	bl	801dbc8 <__atomic_load_8>
 801c01c:	9d02      	ldr	r5, [sp, #8]
 801c01e:	4602      	mov	r2, r0
 801c020:	9b03      	ldr	r3, [sp, #12]
 801c022:	6820      	ldr	r0, [r4, #0]
 801c024:	1b52      	subs	r2, r2, r5
 801c026:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 801c02a:	eb61 0303 	sbc.w	r3, r1, r3
 801c02e:	2105      	movs	r1, #5
 801c030:	9100      	str	r1, [sp, #0]
 801c032:	f001 fdff 	bl	801dc34 <__atomic_store_8>
 801c036:	e7a1      	b.n	801bf7c <_rcl_timer_time_jump+0x14>
 801c038:	4313      	orrs	r3, r2
 801c03a:	d09f      	beq.n	801bf7c <_rcl_timer_time_jump+0x14>
 801c03c:	6820      	ldr	r0, [r4, #0]
 801c03e:	f04f 0805 	mov.w	r8, #5
 801c042:	2300      	movs	r3, #0
 801c044:	2200      	movs	r2, #0
 801c046:	3030      	adds	r0, #48	@ 0x30
 801c048:	f8cd 8000 	str.w	r8, [sp]
 801c04c:	f001 fe28 	bl	801dca0 <__atomic_exchange_8>
 801c050:	ea51 0300 	orrs.w	r3, r1, r0
 801c054:	4606      	mov	r6, r0
 801c056:	460f      	mov	r7, r1
 801c058:	d090      	beq.n	801bf7c <_rcl_timer_time_jump+0x14>
 801c05a:	9a02      	ldr	r2, [sp, #8]
 801c05c:	9b03      	ldr	r3, [sp, #12]
 801c05e:	1a12      	subs	r2, r2, r0
 801c060:	f8cd 8000 	str.w	r8, [sp]
 801c064:	6820      	ldr	r0, [r4, #0]
 801c066:	eb63 0301 	sbc.w	r3, r3, r1
 801c06a:	eb12 020a 	adds.w	r2, r2, sl
 801c06e:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 801c072:	eb43 0305 	adc.w	r3, r3, r5
 801c076:	f001 fddd 	bl	801dc34 <__atomic_store_8>
 801c07a:	f8cd 8000 	str.w	r8, [sp]
 801c07e:	6820      	ldr	r0, [r4, #0]
 801c080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c084:	3020      	adds	r0, #32
 801c086:	1b92      	subs	r2, r2, r6
 801c088:	eb63 0307 	sbc.w	r3, r3, r7
 801c08c:	f001 fdd2 	bl	801dc34 <__atomic_store_8>
 801c090:	e774      	b.n	801bf7c <_rcl_timer_time_jump+0x14>
 801c092:	6820      	ldr	r0, [r4, #0]
 801c094:	3008      	adds	r0, #8
 801c096:	f005 f9e7 	bl	8021468 <rcl_trigger_guard_condition>
 801c09a:	e76f      	b.n	801bf7c <_rcl_timer_time_jump+0x14>

0801c09c <rcl_get_zero_initialized_timer>:
 801c09c:	4b01      	ldr	r3, [pc, #4]	@ (801c0a4 <rcl_get_zero_initialized_timer+0x8>)
 801c09e:	6818      	ldr	r0, [r3, #0]
 801c0a0:	4770      	bx	lr
 801c0a2:	bf00      	nop
 801c0a4:	08025368 	.word	0x08025368

0801c0a8 <rcl_timer_init>:
 801c0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ac:	b0ab      	sub	sp, #172	@ 0xac
 801c0ae:	460d      	mov	r5, r1
 801c0b0:	4604      	mov	r4, r0
 801c0b2:	4692      	mov	sl, r2
 801c0b4:	a837      	add	r0, sp, #220	@ 0xdc
 801c0b6:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 801c0b8:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 801c0bc:	f7f9 fa00 	bl	80154c0 <rcutils_allocator_is_valid>
 801c0c0:	fab5 f385 	clz	r3, r5
 801c0c4:	095b      	lsrs	r3, r3, #5
 801c0c6:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 801c0ca:	2c00      	cmp	r4, #0
 801c0cc:	bf08      	it	eq
 801c0ce:	f043 0301 	orreq.w	r3, r3, #1
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d164      	bne.n	801c1a0 <rcl_timer_init+0xf8>
 801c0d6:	f080 0001 	eor.w	r0, r0, #1
 801c0da:	b2c0      	uxtb	r0, r0
 801c0dc:	2800      	cmp	r0, #0
 801c0de:	d15f      	bne.n	801c1a0 <rcl_timer_init+0xf8>
 801c0e0:	6823      	ldr	r3, [r4, #0]
 801c0e2:	b123      	cbz	r3, 801c0ee <rcl_timer_init+0x46>
 801c0e4:	2664      	movs	r6, #100	@ 0x64
 801c0e6:	4630      	mov	r0, r6
 801c0e8:	b02b      	add	sp, #172	@ 0xac
 801c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ee:	a908      	add	r1, sp, #32
 801c0f0:	4628      	mov	r0, r5
 801c0f2:	f7ff fe63 	bl	801bdbc <rcl_clock_get_now>
 801c0f6:	4606      	mov	r6, r0
 801c0f8:	2800      	cmp	r0, #0
 801c0fa:	d1f4      	bne.n	801c0e6 <rcl_timer_init+0x3e>
 801c0fc:	f10d 0b18 	add.w	fp, sp, #24
 801c100:	ae0b      	add	r6, sp, #44	@ 0x2c
 801c102:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801c106:	4658      	mov	r0, fp
 801c108:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801c10c:	f005 f8b6 	bl	802127c <rcl_get_zero_initialized_guard_condition>
 801c110:	e89b 0003 	ldmia.w	fp, {r0, r1}
 801c114:	e889 0003 	stmia.w	r9, {r0, r1}
 801c118:	4630      	mov	r0, r6
 801c11a:	f005 f989 	bl	8021430 <rcl_guard_condition_get_default_options>
 801c11e:	ab0d      	add	r3, sp, #52	@ 0x34
 801c120:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c124:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c128:	4651      	mov	r1, sl
 801c12a:	4648      	mov	r0, r9
 801c12c:	e896 000c 	ldmia.w	r6, {r2, r3}
 801c130:	f005 f8ae 	bl	8021290 <rcl_guard_condition_init>
 801c134:	4606      	mov	r6, r0
 801c136:	2800      	cmp	r0, #0
 801c138:	d1d5      	bne.n	801c0e6 <rcl_timer_init+0x3e>
 801c13a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c13c:	781b      	ldrb	r3, [r3, #0]
 801c13e:	2b01      	cmp	r3, #1
 801c140:	d033      	beq.n	801c1aa <rcl_timer_init+0x102>
 801c142:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801c144:	4642      	mov	r2, r8
 801c146:	463b      	mov	r3, r7
 801c148:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 801c14c:	911a      	str	r1, [sp, #104]	@ 0x68
 801c14e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801c152:	f04f 0a00 	mov.w	sl, #0
 801c156:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801c15a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c15e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801c208 <rcl_timer_init+0x160>
 801c162:	eb12 0008 	adds.w	r0, r2, r8
 801c166:	eb47 0103 	adc.w	r1, r7, r3
 801c16a:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801c16e:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801c172:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801c176:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c17a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c17e:	f8de 3000 	ldr.w	r3, [lr]
 801c182:	2050      	movs	r0, #80	@ 0x50
 801c184:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 801c188:	4619      	mov	r1, r3
 801c18a:	f8cc 3000 	str.w	r3, [ip]
 801c18e:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801c190:	4798      	blx	r3
 801c192:	6020      	str	r0, [r4, #0]
 801c194:	b358      	cbz	r0, 801c1ee <rcl_timer_init+0x146>
 801c196:	2250      	movs	r2, #80	@ 0x50
 801c198:	a916      	add	r1, sp, #88	@ 0x58
 801c19a:	f006 f9ec 	bl	8022576 <memcpy>
 801c19e:	e7a2      	b.n	801c0e6 <rcl_timer_init+0x3e>
 801c1a0:	260b      	movs	r6, #11
 801c1a2:	4630      	mov	r0, r6
 801c1a4:	b02b      	add	sp, #172	@ 0xac
 801c1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1aa:	2001      	movs	r0, #1
 801c1ac:	2100      	movs	r1, #0
 801c1ae:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801c1b2:	ab12      	add	r3, sp, #72	@ 0x48
 801c1b4:	4a16      	ldr	r2, [pc, #88]	@ (801c210 <rcl_timer_init+0x168>)
 801c1b6:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801c1ba:	9405      	str	r4, [sp, #20]
 801c1bc:	9204      	str	r2, [sp, #16]
 801c1be:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801c1c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c1c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c1ca:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801c1ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c1d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c1d4:	4628      	mov	r0, r5
 801c1d6:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801c1da:	f7ff fdfb 	bl	801bdd4 <rcl_clock_add_jump_callback>
 801c1de:	4603      	mov	r3, r0
 801c1e0:	2800      	cmp	r0, #0
 801c1e2:	d0ae      	beq.n	801c142 <rcl_timer_init+0x9a>
 801c1e4:	4648      	mov	r0, r9
 801c1e6:	461e      	mov	r6, r3
 801c1e8:	f005 f8fc 	bl	80213e4 <rcl_guard_condition_fini>
 801c1ec:	e77b      	b.n	801c0e6 <rcl_timer_init+0x3e>
 801c1ee:	4648      	mov	r0, r9
 801c1f0:	260a      	movs	r6, #10
 801c1f2:	f005 f8f7 	bl	80213e4 <rcl_guard_condition_fini>
 801c1f6:	4622      	mov	r2, r4
 801c1f8:	4905      	ldr	r1, [pc, #20]	@ (801c210 <rcl_timer_init+0x168>)
 801c1fa:	4628      	mov	r0, r5
 801c1fc:	f7ff fe4e 	bl	801be9c <rcl_clock_remove_jump_callback>
 801c200:	e771      	b.n	801c0e6 <rcl_timer_init+0x3e>
 801c202:	bf00      	nop
 801c204:	f3af 8000 	nop.w
	...
 801c210:	0801bf69 	.word	0x0801bf69

0801c214 <rcl_timer_call>:
 801c214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c218:	b087      	sub	sp, #28
 801c21a:	2800      	cmp	r0, #0
 801c21c:	d06c      	beq.n	801c2f8 <rcl_timer_call+0xe4>
 801c21e:	6803      	ldr	r3, [r0, #0]
 801c220:	4604      	mov	r4, r0
 801c222:	2b00      	cmp	r3, #0
 801c224:	d062      	beq.n	801c2ec <rcl_timer_call+0xd8>
 801c226:	f3bf 8f5b 	dmb	ish
 801c22a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c22e:	f3bf 8f5b 	dmb	ish
 801c232:	2b00      	cmp	r3, #0
 801c234:	d14f      	bne.n	801c2d6 <rcl_timer_call+0xc2>
 801c236:	6803      	ldr	r3, [r0, #0]
 801c238:	a904      	add	r1, sp, #16
 801c23a:	6818      	ldr	r0, [r3, #0]
 801c23c:	f7ff fdbe 	bl	801bdbc <rcl_clock_get_now>
 801c240:	4605      	mov	r5, r0
 801c242:	2800      	cmp	r0, #0
 801c244:	d149      	bne.n	801c2da <rcl_timer_call+0xc6>
 801c246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	db49      	blt.n	801c2e2 <rcl_timer_call+0xce>
 801c24e:	2605      	movs	r6, #5
 801c250:	6820      	ldr	r0, [r4, #0]
 801c252:	9600      	str	r6, [sp, #0]
 801c254:	3020      	adds	r0, #32
 801c256:	f001 fd23 	bl	801dca0 <__atomic_exchange_8>
 801c25a:	6823      	ldr	r3, [r4, #0]
 801c25c:	4680      	mov	r8, r0
 801c25e:	f3bf 8f5b 	dmb	ish
 801c262:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801c266:	f3bf 8f5b 	dmb	ish
 801c26a:	6820      	ldr	r0, [r4, #0]
 801c26c:	4689      	mov	r9, r1
 801c26e:	4631      	mov	r1, r6
 801c270:	3028      	adds	r0, #40	@ 0x28
 801c272:	f001 fca9 	bl	801dbc8 <__atomic_load_8>
 801c276:	460f      	mov	r7, r1
 801c278:	4631      	mov	r1, r6
 801c27a:	4606      	mov	r6, r0
 801c27c:	6820      	ldr	r0, [r4, #0]
 801c27e:	3018      	adds	r0, #24
 801c280:	f001 fca2 	bl	801dbc8 <__atomic_load_8>
 801c284:	4602      	mov	r2, r0
 801c286:	9804      	ldr	r0, [sp, #16]
 801c288:	460b      	mov	r3, r1
 801c28a:	18b6      	adds	r6, r6, r2
 801c28c:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c290:	4692      	mov	sl, r2
 801c292:	eb47 0701 	adc.w	r7, r7, r1
 801c296:	4286      	cmp	r6, r0
 801c298:	eb77 010c 	sbcs.w	r1, r7, ip
 801c29c:	da04      	bge.n	801c2a8 <rcl_timer_call+0x94>
 801c29e:	ea53 0102 	orrs.w	r1, r3, r2
 801c2a2:	d12e      	bne.n	801c302 <rcl_timer_call+0xee>
 801c2a4:	4606      	mov	r6, r0
 801c2a6:	4667      	mov	r7, ip
 801c2a8:	6820      	ldr	r0, [r4, #0]
 801c2aa:	2105      	movs	r1, #5
 801c2ac:	4632      	mov	r2, r6
 801c2ae:	463b      	mov	r3, r7
 801c2b0:	3028      	adds	r0, #40	@ 0x28
 801c2b2:	9100      	str	r1, [sp, #0]
 801c2b4:	f001 fcbe 	bl	801dc34 <__atomic_store_8>
 801c2b8:	f1bb 0f00 	cmp.w	fp, #0
 801c2bc:	d00d      	beq.n	801c2da <rcl_timer_call+0xc6>
 801c2be:	9a04      	ldr	r2, [sp, #16]
 801c2c0:	4620      	mov	r0, r4
 801c2c2:	9b05      	ldr	r3, [sp, #20]
 801c2c4:	ebb2 0208 	subs.w	r2, r2, r8
 801c2c8:	eb63 0309 	sbc.w	r3, r3, r9
 801c2cc:	47d8      	blx	fp
 801c2ce:	4628      	mov	r0, r5
 801c2d0:	b007      	add	sp, #28
 801c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2d6:	f240 3521 	movw	r5, #801	@ 0x321
 801c2da:	4628      	mov	r0, r5
 801c2dc:	b007      	add	sp, #28
 801c2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2e2:	2501      	movs	r5, #1
 801c2e4:	4628      	mov	r0, r5
 801c2e6:	b007      	add	sp, #28
 801c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2ec:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801c2f0:	4628      	mov	r0, r5
 801c2f2:	b007      	add	sp, #28
 801c2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2f8:	250b      	movs	r5, #11
 801c2fa:	4628      	mov	r0, r5
 801c2fc:	b007      	add	sp, #28
 801c2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c302:	1b80      	subs	r0, r0, r6
 801c304:	eb6c 0107 	sbc.w	r1, ip, r7
 801c308:	3801      	subs	r0, #1
 801c30a:	f161 0100 	sbc.w	r1, r1, #0
 801c30e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c312:	f7e4 f84d 	bl	80003b0 <__aeabi_ldivmod>
 801c316:	9b02      	ldr	r3, [sp, #8]
 801c318:	3001      	adds	r0, #1
 801c31a:	f141 0100 	adc.w	r1, r1, #0
 801c31e:	fb00 f303 	mul.w	r3, r0, r3
 801c322:	fb01 330a 	mla	r3, r1, sl, r3
 801c326:	fba0 0a0a 	umull	r0, sl, r0, sl
 801c32a:	1986      	adds	r6, r0, r6
 801c32c:	4453      	add	r3, sl
 801c32e:	eb43 0707 	adc.w	r7, r3, r7
 801c332:	e7b9      	b.n	801c2a8 <rcl_timer_call+0x94>

0801c334 <rcl_timer_is_ready>:
 801c334:	b570      	push	{r4, r5, r6, lr}
 801c336:	b082      	sub	sp, #8
 801c338:	b380      	cbz	r0, 801c39c <rcl_timer_is_ready+0x68>
 801c33a:	6803      	ldr	r3, [r0, #0]
 801c33c:	4604      	mov	r4, r0
 801c33e:	b38b      	cbz	r3, 801c3a4 <rcl_timer_is_ready+0x70>
 801c340:	460d      	mov	r5, r1
 801c342:	b359      	cbz	r1, 801c39c <rcl_timer_is_ready+0x68>
 801c344:	f3bf 8f5b 	dmb	ish
 801c348:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c34c:	f3bf 8f5b 	dmb	ish
 801c350:	b953      	cbnz	r3, 801c368 <rcl_timer_is_ready+0x34>
 801c352:	6803      	ldr	r3, [r0, #0]
 801c354:	4669      	mov	r1, sp
 801c356:	6818      	ldr	r0, [r3, #0]
 801c358:	f7ff fd30 	bl	801bdbc <rcl_clock_get_now>
 801c35c:	4606      	mov	r6, r0
 801c35e:	b148      	cbz	r0, 801c374 <rcl_timer_is_ready+0x40>
 801c360:	f240 3321 	movw	r3, #801	@ 0x321
 801c364:	4298      	cmp	r0, r3
 801c366:	d102      	bne.n	801c36e <rcl_timer_is_ready+0x3a>
 801c368:	2300      	movs	r3, #0
 801c36a:	461e      	mov	r6, r3
 801c36c:	702b      	strb	r3, [r5, #0]
 801c36e:	4630      	mov	r0, r6
 801c370:	b002      	add	sp, #8
 801c372:	bd70      	pop	{r4, r5, r6, pc}
 801c374:	6820      	ldr	r0, [r4, #0]
 801c376:	2105      	movs	r1, #5
 801c378:	3028      	adds	r0, #40	@ 0x28
 801c37a:	f001 fc25 	bl	801dbc8 <__atomic_load_8>
 801c37e:	9b00      	ldr	r3, [sp, #0]
 801c380:	1ac0      	subs	r0, r0, r3
 801c382:	9b01      	ldr	r3, [sp, #4]
 801c384:	eb61 0103 	sbc.w	r1, r1, r3
 801c388:	2801      	cmp	r0, #1
 801c38a:	4630      	mov	r0, r6
 801c38c:	f171 0300 	sbcs.w	r3, r1, #0
 801c390:	bfb4      	ite	lt
 801c392:	2301      	movlt	r3, #1
 801c394:	2300      	movge	r3, #0
 801c396:	702b      	strb	r3, [r5, #0]
 801c398:	b002      	add	sp, #8
 801c39a:	bd70      	pop	{r4, r5, r6, pc}
 801c39c:	260b      	movs	r6, #11
 801c39e:	4630      	mov	r0, r6
 801c3a0:	b002      	add	sp, #8
 801c3a2:	bd70      	pop	{r4, r5, r6, pc}
 801c3a4:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c3a8:	e7e1      	b.n	801c36e <rcl_timer_is_ready+0x3a>
 801c3aa:	bf00      	nop

0801c3ac <rcl_timer_get_time_until_next_call>:
 801c3ac:	b570      	push	{r4, r5, r6, lr}
 801c3ae:	b082      	sub	sp, #8
 801c3b0:	b330      	cbz	r0, 801c400 <rcl_timer_get_time_until_next_call+0x54>
 801c3b2:	6803      	ldr	r3, [r0, #0]
 801c3b4:	4604      	mov	r4, r0
 801c3b6:	b33b      	cbz	r3, 801c408 <rcl_timer_get_time_until_next_call+0x5c>
 801c3b8:	460d      	mov	r5, r1
 801c3ba:	b309      	cbz	r1, 801c400 <rcl_timer_get_time_until_next_call+0x54>
 801c3bc:	f3bf 8f5b 	dmb	ish
 801c3c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c3c4:	f3bf 8f5b 	dmb	ish
 801c3c8:	b9ab      	cbnz	r3, 801c3f6 <rcl_timer_get_time_until_next_call+0x4a>
 801c3ca:	6803      	ldr	r3, [r0, #0]
 801c3cc:	4669      	mov	r1, sp
 801c3ce:	6818      	ldr	r0, [r3, #0]
 801c3d0:	f7ff fcf4 	bl	801bdbc <rcl_clock_get_now>
 801c3d4:	4606      	mov	r6, r0
 801c3d6:	b958      	cbnz	r0, 801c3f0 <rcl_timer_get_time_until_next_call+0x44>
 801c3d8:	6820      	ldr	r0, [r4, #0]
 801c3da:	2105      	movs	r1, #5
 801c3dc:	3028      	adds	r0, #40	@ 0x28
 801c3de:	f001 fbf3 	bl	801dbc8 <__atomic_load_8>
 801c3e2:	9b00      	ldr	r3, [sp, #0]
 801c3e4:	1ac0      	subs	r0, r0, r3
 801c3e6:	9b01      	ldr	r3, [sp, #4]
 801c3e8:	eb61 0103 	sbc.w	r1, r1, r3
 801c3ec:	6028      	str	r0, [r5, #0]
 801c3ee:	6069      	str	r1, [r5, #4]
 801c3f0:	4630      	mov	r0, r6
 801c3f2:	b002      	add	sp, #8
 801c3f4:	bd70      	pop	{r4, r5, r6, pc}
 801c3f6:	f240 3621 	movw	r6, #801	@ 0x321
 801c3fa:	4630      	mov	r0, r6
 801c3fc:	b002      	add	sp, #8
 801c3fe:	bd70      	pop	{r4, r5, r6, pc}
 801c400:	260b      	movs	r6, #11
 801c402:	4630      	mov	r0, r6
 801c404:	b002      	add	sp, #8
 801c406:	bd70      	pop	{r4, r5, r6, pc}
 801c408:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c40c:	e7f0      	b.n	801c3f0 <rcl_timer_get_time_until_next_call+0x44>
 801c40e:	bf00      	nop

0801c410 <rcl_timer_get_guard_condition>:
 801c410:	b130      	cbz	r0, 801c420 <rcl_timer_get_guard_condition+0x10>
 801c412:	6800      	ldr	r0, [r0, #0]
 801c414:	b120      	cbz	r0, 801c420 <rcl_timer_get_guard_condition+0x10>
 801c416:	68c3      	ldr	r3, [r0, #12]
 801c418:	b10b      	cbz	r3, 801c41e <rcl_timer_get_guard_condition+0xe>
 801c41a:	3008      	adds	r0, #8
 801c41c:	4770      	bx	lr
 801c41e:	4618      	mov	r0, r3
 801c420:	4770      	bx	lr
 801c422:	bf00      	nop

0801c424 <rcl_validate_enclave_name_with_size>:
 801c424:	2800      	cmp	r0, #0
 801c426:	d049      	beq.n	801c4bc <rcl_validate_enclave_name_with_size+0x98>
 801c428:	b570      	push	{r4, r5, r6, lr}
 801c42a:	4615      	mov	r5, r2
 801c42c:	b0c2      	sub	sp, #264	@ 0x108
 801c42e:	b19a      	cbz	r2, 801c458 <rcl_validate_enclave_name_with_size+0x34>
 801c430:	461e      	mov	r6, r3
 801c432:	466a      	mov	r2, sp
 801c434:	ab01      	add	r3, sp, #4
 801c436:	460c      	mov	r4, r1
 801c438:	f002 f88e 	bl	801e558 <rmw_validate_namespace_with_size>
 801c43c:	4684      	mov	ip, r0
 801c43e:	b9b8      	cbnz	r0, 801c470 <rcl_validate_enclave_name_with_size+0x4c>
 801c440:	9900      	ldr	r1, [sp, #0]
 801c442:	b171      	cbz	r1, 801c462 <rcl_validate_enclave_name_with_size+0x3e>
 801c444:	2907      	cmp	r1, #7
 801c446:	d019      	beq.n	801c47c <rcl_validate_enclave_name_with_size+0x58>
 801c448:	1e4b      	subs	r3, r1, #1
 801c44a:	2b05      	cmp	r3, #5
 801c44c:	d83a      	bhi.n	801c4c4 <rcl_validate_enclave_name_with_size+0xa0>
 801c44e:	e8df f003 	tbb	[pc, r3]
 801c452:	2926      	.short	0x2926
 801c454:	1d322f2c 	.word	0x1d322f2c
 801c458:	f04f 0c0b 	mov.w	ip, #11
 801c45c:	4660      	mov	r0, ip
 801c45e:	b042      	add	sp, #264	@ 0x108
 801c460:	bd70      	pop	{r4, r5, r6, pc}
 801c462:	2907      	cmp	r1, #7
 801c464:	d00a      	beq.n	801c47c <rcl_validate_enclave_name_with_size+0x58>
 801c466:	2300      	movs	r3, #0
 801c468:	4660      	mov	r0, ip
 801c46a:	602b      	str	r3, [r5, #0]
 801c46c:	b042      	add	sp, #264	@ 0x108
 801c46e:	bd70      	pop	{r4, r5, r6, pc}
 801c470:	f7fe fb6c 	bl	801ab4c <rcl_convert_rmw_ret_to_rcl_ret>
 801c474:	4684      	mov	ip, r0
 801c476:	4660      	mov	r0, ip
 801c478:	b042      	add	sp, #264	@ 0x108
 801c47a:	bd70      	pop	{r4, r5, r6, pc}
 801c47c:	2cff      	cmp	r4, #255	@ 0xff
 801c47e:	d9f2      	bls.n	801c466 <rcl_validate_enclave_name_with_size+0x42>
 801c480:	6029      	str	r1, [r5, #0]
 801c482:	2e00      	cmp	r6, #0
 801c484:	d0ea      	beq.n	801c45c <rcl_validate_enclave_name_with_size+0x38>
 801c486:	23fe      	movs	r3, #254	@ 0xfe
 801c488:	6033      	str	r3, [r6, #0]
 801c48a:	e7e7      	b.n	801c45c <rcl_validate_enclave_name_with_size+0x38>
 801c48c:	2306      	movs	r3, #6
 801c48e:	602b      	str	r3, [r5, #0]
 801c490:	2e00      	cmp	r6, #0
 801c492:	d0e3      	beq.n	801c45c <rcl_validate_enclave_name_with_size+0x38>
 801c494:	9b01      	ldr	r3, [sp, #4]
 801c496:	4660      	mov	r0, ip
 801c498:	6033      	str	r3, [r6, #0]
 801c49a:	b042      	add	sp, #264	@ 0x108
 801c49c:	bd70      	pop	{r4, r5, r6, pc}
 801c49e:	2301      	movs	r3, #1
 801c4a0:	602b      	str	r3, [r5, #0]
 801c4a2:	e7f5      	b.n	801c490 <rcl_validate_enclave_name_with_size+0x6c>
 801c4a4:	2302      	movs	r3, #2
 801c4a6:	602b      	str	r3, [r5, #0]
 801c4a8:	e7f2      	b.n	801c490 <rcl_validate_enclave_name_with_size+0x6c>
 801c4aa:	2303      	movs	r3, #3
 801c4ac:	602b      	str	r3, [r5, #0]
 801c4ae:	e7ef      	b.n	801c490 <rcl_validate_enclave_name_with_size+0x6c>
 801c4b0:	2304      	movs	r3, #4
 801c4b2:	602b      	str	r3, [r5, #0]
 801c4b4:	e7ec      	b.n	801c490 <rcl_validate_enclave_name_with_size+0x6c>
 801c4b6:	2305      	movs	r3, #5
 801c4b8:	602b      	str	r3, [r5, #0]
 801c4ba:	e7e9      	b.n	801c490 <rcl_validate_enclave_name_with_size+0x6c>
 801c4bc:	f04f 0c0b 	mov.w	ip, #11
 801c4c0:	4660      	mov	r0, ip
 801c4c2:	4770      	bx	lr
 801c4c4:	460b      	mov	r3, r1
 801c4c6:	4a04      	ldr	r2, [pc, #16]	@ (801c4d8 <rcl_validate_enclave_name_with_size+0xb4>)
 801c4c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c4cc:	a802      	add	r0, sp, #8
 801c4ce:	f001 fd33 	bl	801df38 <rcutils_snprintf>
 801c4d2:	f04f 0c01 	mov.w	ip, #1
 801c4d6:	e7c1      	b.n	801c45c <rcl_validate_enclave_name_with_size+0x38>
 801c4d8:	0802536c 	.word	0x0802536c

0801c4dc <rcl_validate_enclave_name>:
 801c4dc:	b168      	cbz	r0, 801c4fa <rcl_validate_enclave_name+0x1e>
 801c4de:	b570      	push	{r4, r5, r6, lr}
 801c4e0:	460d      	mov	r5, r1
 801c4e2:	4616      	mov	r6, r2
 801c4e4:	4604      	mov	r4, r0
 801c4e6:	f7e3 ff05 	bl	80002f4 <strlen>
 801c4ea:	4633      	mov	r3, r6
 801c4ec:	4601      	mov	r1, r0
 801c4ee:	462a      	mov	r2, r5
 801c4f0:	4620      	mov	r0, r4
 801c4f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4f6:	f7ff bf95 	b.w	801c424 <rcl_validate_enclave_name_with_size>
 801c4fa:	200b      	movs	r0, #11
 801c4fc:	4770      	bx	lr
 801c4fe:	bf00      	nop

0801c500 <rcl_get_zero_initialized_wait_set>:
 801c500:	b510      	push	{r4, lr}
 801c502:	4c08      	ldr	r4, [pc, #32]	@ (801c524 <rcl_get_zero_initialized_wait_set+0x24>)
 801c504:	4686      	mov	lr, r0
 801c506:	4684      	mov	ip, r0
 801c508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c50a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c50e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c510:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c516:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c51a:	6823      	ldr	r3, [r4, #0]
 801c51c:	4670      	mov	r0, lr
 801c51e:	f8cc 3000 	str.w	r3, [ip]
 801c522:	bd10      	pop	{r4, pc}
 801c524:	080253cc 	.word	0x080253cc

0801c528 <rcl_wait_set_is_valid>:
 801c528:	b118      	cbz	r0, 801c532 <rcl_wait_set_is_valid+0xa>
 801c52a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801c52c:	3800      	subs	r0, #0
 801c52e:	bf18      	it	ne
 801c530:	2001      	movne	r0, #1
 801c532:	4770      	bx	lr

0801c534 <rcl_wait_set_fini>:
 801c534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c538:	b082      	sub	sp, #8
 801c53a:	2800      	cmp	r0, #0
 801c53c:	f000 8095 	beq.w	801c66a <rcl_wait_set_fini+0x136>
 801c540:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801c542:	4604      	mov	r4, r0
 801c544:	2e00      	cmp	r6, #0
 801c546:	f000 808c 	beq.w	801c662 <rcl_wait_set_fini+0x12e>
 801c54a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801c54c:	f003 faf6 	bl	801fb3c <rmw_destroy_wait_set>
 801c550:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c552:	1e06      	subs	r6, r0, #0
 801c554:	bf18      	it	ne
 801c556:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801c55a:	2d00      	cmp	r5, #0
 801c55c:	f000 8081 	beq.w	801c662 <rcl_wait_set_fini+0x12e>
 801c560:	2700      	movs	r7, #0
 801c562:	6820      	ldr	r0, [r4, #0]
 801c564:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c568:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c56a:	6067      	str	r7, [r4, #4]
 801c56c:	602f      	str	r7, [r5, #0]
 801c56e:	b120      	cbz	r0, 801c57a <rcl_wait_set_fini+0x46>
 801c570:	9101      	str	r1, [sp, #4]
 801c572:	47c0      	blx	r8
 801c574:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c576:	9901      	ldr	r1, [sp, #4]
 801c578:	6027      	str	r7, [r4, #0]
 801c57a:	68a8      	ldr	r0, [r5, #8]
 801c57c:	b120      	cbz	r0, 801c588 <rcl_wait_set_fini+0x54>
 801c57e:	47c0      	blx	r8
 801c580:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c582:	2300      	movs	r3, #0
 801c584:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c588:	f04f 0800 	mov.w	r8, #0
 801c58c:	68a0      	ldr	r0, [r4, #8]
 801c58e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c590:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c592:	f8c4 800c 	str.w	r8, [r4, #12]
 801c596:	f8c5 800c 	str.w	r8, [r5, #12]
 801c59a:	b128      	cbz	r0, 801c5a8 <rcl_wait_set_fini+0x74>
 801c59c:	47b8      	blx	r7
 801c59e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5a0:	f8c4 8008 	str.w	r8, [r4, #8]
 801c5a4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c5a6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c5a8:	f04f 0800 	mov.w	r8, #0
 801c5ac:	6968      	ldr	r0, [r5, #20]
 801c5ae:	f8c5 8010 	str.w	r8, [r5, #16]
 801c5b2:	b128      	cbz	r0, 801c5c0 <rcl_wait_set_fini+0x8c>
 801c5b4:	47b8      	blx	r7
 801c5b6:	f8c5 8014 	str.w	r8, [r5, #20]
 801c5ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5bc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c5be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c5c0:	f04f 0800 	mov.w	r8, #0
 801c5c4:	6920      	ldr	r0, [r4, #16]
 801c5c6:	f8c4 8014 	str.w	r8, [r4, #20]
 801c5ca:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801c5ce:	b128      	cbz	r0, 801c5dc <rcl_wait_set_fini+0xa8>
 801c5d0:	47b8      	blx	r7
 801c5d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5d4:	f8c4 8010 	str.w	r8, [r4, #16]
 801c5d8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c5da:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c5dc:	f04f 0800 	mov.w	r8, #0
 801c5e0:	69a0      	ldr	r0, [r4, #24]
 801c5e2:	f8c4 801c 	str.w	r8, [r4, #28]
 801c5e6:	f8c5 8018 	str.w	r8, [r5, #24]
 801c5ea:	b128      	cbz	r0, 801c5f8 <rcl_wait_set_fini+0xc4>
 801c5ec:	9101      	str	r1, [sp, #4]
 801c5ee:	47b8      	blx	r7
 801c5f0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5f2:	9901      	ldr	r1, [sp, #4]
 801c5f4:	f8c4 8018 	str.w	r8, [r4, #24]
 801c5f8:	6a28      	ldr	r0, [r5, #32]
 801c5fa:	b120      	cbz	r0, 801c606 <rcl_wait_set_fini+0xd2>
 801c5fc:	47b8      	blx	r7
 801c5fe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c600:	2300      	movs	r3, #0
 801c602:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c606:	2700      	movs	r7, #0
 801c608:	6a20      	ldr	r0, [r4, #32]
 801c60a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c60e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c610:	6267      	str	r7, [r4, #36]	@ 0x24
 801c612:	626f      	str	r7, [r5, #36]	@ 0x24
 801c614:	b120      	cbz	r0, 801c620 <rcl_wait_set_fini+0xec>
 801c616:	9101      	str	r1, [sp, #4]
 801c618:	47c0      	blx	r8
 801c61a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c61c:	9901      	ldr	r1, [sp, #4]
 801c61e:	6227      	str	r7, [r4, #32]
 801c620:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c622:	b120      	cbz	r0, 801c62e <rcl_wait_set_fini+0xfa>
 801c624:	47c0      	blx	r8
 801c626:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c628:	2300      	movs	r3, #0
 801c62a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801c62e:	2700      	movs	r7, #0
 801c630:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c632:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c636:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c638:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801c63a:	632f      	str	r7, [r5, #48]	@ 0x30
 801c63c:	b120      	cbz	r0, 801c648 <rcl_wait_set_fini+0x114>
 801c63e:	9101      	str	r1, [sp, #4]
 801c640:	47c0      	blx	r8
 801c642:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c644:	9901      	ldr	r1, [sp, #4]
 801c646:	62a7      	str	r7, [r4, #40]	@ 0x28
 801c648:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801c64a:	b120      	cbz	r0, 801c656 <rcl_wait_set_fini+0x122>
 801c64c:	47c0      	blx	r8
 801c64e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c650:	2300      	movs	r3, #0
 801c652:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801c656:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801c658:	4628      	mov	r0, r5
 801c65a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c65c:	4798      	blx	r3
 801c65e:	2300      	movs	r3, #0
 801c660:	6323      	str	r3, [r4, #48]	@ 0x30
 801c662:	4630      	mov	r0, r6
 801c664:	b002      	add	sp, #8
 801c666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c66a:	260b      	movs	r6, #11
 801c66c:	4630      	mov	r0, r6
 801c66e:	b002      	add	sp, #8
 801c670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c674 <rcl_wait_set_add_subscription>:
 801c674:	b318      	cbz	r0, 801c6be <rcl_wait_set_add_subscription+0x4a>
 801c676:	b538      	push	{r3, r4, r5, lr}
 801c678:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c67a:	4604      	mov	r4, r0
 801c67c:	b30b      	cbz	r3, 801c6c2 <rcl_wait_set_add_subscription+0x4e>
 801c67e:	b319      	cbz	r1, 801c6c8 <rcl_wait_set_add_subscription+0x54>
 801c680:	681d      	ldr	r5, [r3, #0]
 801c682:	6840      	ldr	r0, [r0, #4]
 801c684:	4285      	cmp	r5, r0
 801c686:	d217      	bcs.n	801c6b8 <rcl_wait_set_add_subscription+0x44>
 801c688:	1c68      	adds	r0, r5, #1
 801c68a:	6018      	str	r0, [r3, #0]
 801c68c:	6823      	ldr	r3, [r4, #0]
 801c68e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c692:	b102      	cbz	r2, 801c696 <rcl_wait_set_add_subscription+0x22>
 801c694:	6015      	str	r5, [r2, #0]
 801c696:	4608      	mov	r0, r1
 801c698:	f7ff fade 	bl	801bc58 <rcl_subscription_get_rmw_handle>
 801c69c:	b150      	cbz	r0, 801c6b4 <rcl_wait_set_add_subscription+0x40>
 801c69e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6a0:	6842      	ldr	r2, [r0, #4]
 801c6a2:	2000      	movs	r0, #0
 801c6a4:	689b      	ldr	r3, [r3, #8]
 801c6a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c6aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c6ac:	6853      	ldr	r3, [r2, #4]
 801c6ae:	3301      	adds	r3, #1
 801c6b0:	6053      	str	r3, [r2, #4]
 801c6b2:	bd38      	pop	{r3, r4, r5, pc}
 801c6b4:	2001      	movs	r0, #1
 801c6b6:	bd38      	pop	{r3, r4, r5, pc}
 801c6b8:	f240 3086 	movw	r0, #902	@ 0x386
 801c6bc:	bd38      	pop	{r3, r4, r5, pc}
 801c6be:	200b      	movs	r0, #11
 801c6c0:	4770      	bx	lr
 801c6c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c6c6:	bd38      	pop	{r3, r4, r5, pc}
 801c6c8:	200b      	movs	r0, #11
 801c6ca:	bd38      	pop	{r3, r4, r5, pc}

0801c6cc <rcl_wait_set_clear>:
 801c6cc:	2800      	cmp	r0, #0
 801c6ce:	d074      	beq.n	801c7ba <rcl_wait_set_clear+0xee>
 801c6d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c6d2:	b510      	push	{r4, lr}
 801c6d4:	4604      	mov	r4, r0
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d071      	beq.n	801c7be <rcl_wait_set_clear+0xf2>
 801c6da:	6800      	ldr	r0, [r0, #0]
 801c6dc:	b138      	cbz	r0, 801c6ee <rcl_wait_set_clear+0x22>
 801c6de:	6862      	ldr	r2, [r4, #4]
 801c6e0:	2100      	movs	r1, #0
 801c6e2:	0092      	lsls	r2, r2, #2
 801c6e4:	f005 fe28 	bl	8022338 <memset>
 801c6e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6ea:	2200      	movs	r2, #0
 801c6ec:	601a      	str	r2, [r3, #0]
 801c6ee:	68a0      	ldr	r0, [r4, #8]
 801c6f0:	b138      	cbz	r0, 801c702 <rcl_wait_set_clear+0x36>
 801c6f2:	68e2      	ldr	r2, [r4, #12]
 801c6f4:	2100      	movs	r1, #0
 801c6f6:	0092      	lsls	r2, r2, #2
 801c6f8:	f005 fe1e 	bl	8022338 <memset>
 801c6fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6fe:	2200      	movs	r2, #0
 801c700:	60da      	str	r2, [r3, #12]
 801c702:	69a0      	ldr	r0, [r4, #24]
 801c704:	b138      	cbz	r0, 801c716 <rcl_wait_set_clear+0x4a>
 801c706:	69e2      	ldr	r2, [r4, #28]
 801c708:	2100      	movs	r1, #0
 801c70a:	0092      	lsls	r2, r2, #2
 801c70c:	f005 fe14 	bl	8022338 <memset>
 801c710:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c712:	2200      	movs	r2, #0
 801c714:	619a      	str	r2, [r3, #24]
 801c716:	6a20      	ldr	r0, [r4, #32]
 801c718:	b138      	cbz	r0, 801c72a <rcl_wait_set_clear+0x5e>
 801c71a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801c71c:	2100      	movs	r1, #0
 801c71e:	0092      	lsls	r2, r2, #2
 801c720:	f005 fe0a 	bl	8022338 <memset>
 801c724:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c726:	2200      	movs	r2, #0
 801c728:	625a      	str	r2, [r3, #36]	@ 0x24
 801c72a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c72c:	b138      	cbz	r0, 801c73e <rcl_wait_set_clear+0x72>
 801c72e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c730:	2100      	movs	r1, #0
 801c732:	0092      	lsls	r2, r2, #2
 801c734:	f005 fe00 	bl	8022338 <memset>
 801c738:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c73a:	2200      	movs	r2, #0
 801c73c:	631a      	str	r2, [r3, #48]	@ 0x30
 801c73e:	6920      	ldr	r0, [r4, #16]
 801c740:	b138      	cbz	r0, 801c752 <rcl_wait_set_clear+0x86>
 801c742:	6962      	ldr	r2, [r4, #20]
 801c744:	2100      	movs	r1, #0
 801c746:	0092      	lsls	r2, r2, #2
 801c748:	f005 fdf6 	bl	8022338 <memset>
 801c74c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c74e:	2200      	movs	r2, #0
 801c750:	641a      	str	r2, [r3, #64]	@ 0x40
 801c752:	6898      	ldr	r0, [r3, #8]
 801c754:	b138      	cbz	r0, 801c766 <rcl_wait_set_clear+0x9a>
 801c756:	685a      	ldr	r2, [r3, #4]
 801c758:	2100      	movs	r1, #0
 801c75a:	0092      	lsls	r2, r2, #2
 801c75c:	f005 fdec 	bl	8022338 <memset>
 801c760:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c762:	2200      	movs	r2, #0
 801c764:	605a      	str	r2, [r3, #4]
 801c766:	6958      	ldr	r0, [r3, #20]
 801c768:	b138      	cbz	r0, 801c77a <rcl_wait_set_clear+0xae>
 801c76a:	691a      	ldr	r2, [r3, #16]
 801c76c:	2100      	movs	r1, #0
 801c76e:	0092      	lsls	r2, r2, #2
 801c770:	f005 fde2 	bl	8022338 <memset>
 801c774:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c776:	2200      	movs	r2, #0
 801c778:	611a      	str	r2, [r3, #16]
 801c77a:	6a18      	ldr	r0, [r3, #32]
 801c77c:	b138      	cbz	r0, 801c78e <rcl_wait_set_clear+0xc2>
 801c77e:	69da      	ldr	r2, [r3, #28]
 801c780:	2100      	movs	r1, #0
 801c782:	0092      	lsls	r2, r2, #2
 801c784:	f005 fdd8 	bl	8022338 <memset>
 801c788:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c78a:	2200      	movs	r2, #0
 801c78c:	61da      	str	r2, [r3, #28]
 801c78e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801c790:	b138      	cbz	r0, 801c7a2 <rcl_wait_set_clear+0xd6>
 801c792:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c794:	2100      	movs	r1, #0
 801c796:	0092      	lsls	r2, r2, #2
 801c798:	f005 fdce 	bl	8022338 <memset>
 801c79c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c79e:	2200      	movs	r2, #0
 801c7a0:	629a      	str	r2, [r3, #40]	@ 0x28
 801c7a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801c7a4:	b140      	cbz	r0, 801c7b8 <rcl_wait_set_clear+0xec>
 801c7a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c7a8:	2100      	movs	r1, #0
 801c7aa:	0092      	lsls	r2, r2, #2
 801c7ac:	f005 fdc4 	bl	8022338 <memset>
 801c7b0:	2300      	movs	r3, #0
 801c7b2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c7b4:	4618      	mov	r0, r3
 801c7b6:	6353      	str	r3, [r2, #52]	@ 0x34
 801c7b8:	bd10      	pop	{r4, pc}
 801c7ba:	200b      	movs	r0, #11
 801c7bc:	4770      	bx	lr
 801c7be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c7c2:	bd10      	pop	{r4, pc}

0801c7c4 <rcl_wait_set_resize>:
 801c7c4:	2800      	cmp	r0, #0
 801c7c6:	f000 8180 	beq.w	801caca <rcl_wait_set_resize+0x306>
 801c7ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7ce:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801c7d0:	b083      	sub	sp, #12
 801c7d2:	4605      	mov	r5, r0
 801c7d4:	2c00      	cmp	r4, #0
 801c7d6:	f000 817a 	beq.w	801cace <rcl_wait_set_resize+0x30a>
 801c7da:	f04f 0900 	mov.w	r9, #0
 801c7de:	461f      	mov	r7, r3
 801c7e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801c7e4:	4688      	mov	r8, r1
 801c7e6:	4616      	mov	r6, r2
 801c7e8:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801c7ec:	f8c0 9004 	str.w	r9, [r0, #4]
 801c7f0:	f8c4 9000 	str.w	r9, [r4]
 801c7f4:	2900      	cmp	r1, #0
 801c7f6:	f000 80bf 	beq.w	801c978 <rcl_wait_set_resize+0x1b4>
 801c7fa:	008c      	lsls	r4, r1, #2
 801c7fc:	4652      	mov	r2, sl
 801c7fe:	6800      	ldr	r0, [r0, #0]
 801c800:	4621      	mov	r1, r4
 801c802:	9301      	str	r3, [sp, #4]
 801c804:	4798      	blx	r3
 801c806:	9b01      	ldr	r3, [sp, #4]
 801c808:	6028      	str	r0, [r5, #0]
 801c80a:	2800      	cmp	r0, #0
 801c80c:	f000 80f6 	beq.w	801c9fc <rcl_wait_set_resize+0x238>
 801c810:	4622      	mov	r2, r4
 801c812:	4649      	mov	r1, r9
 801c814:	9301      	str	r3, [sp, #4]
 801c816:	f005 fd8f 	bl	8022338 <memset>
 801c81a:	f8c5 8004 	str.w	r8, [r5, #4]
 801c81e:	4652      	mov	r2, sl
 801c820:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801c824:	4621      	mov	r1, r4
 801c826:	9b01      	ldr	r3, [sp, #4]
 801c828:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c82c:	f8c8 9004 	str.w	r9, [r8, #4]
 801c830:	4798      	blx	r3
 801c832:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c834:	f8c8 0008 	str.w	r0, [r8, #8]
 801c838:	689b      	ldr	r3, [r3, #8]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	f000 814a 	beq.w	801cad4 <rcl_wait_set_resize+0x310>
 801c840:	4622      	mov	r2, r4
 801c842:	4649      	mov	r1, r9
 801c844:	4618      	mov	r0, r3
 801c846:	f005 fd77 	bl	8022338 <memset>
 801c84a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c84c:	f04f 0800 	mov.w	r8, #0
 801c850:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c854:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801c858:	f8c5 800c 	str.w	r8, [r5, #12]
 801c85c:	f8c4 800c 	str.w	r8, [r4, #12]
 801c860:	2e00      	cmp	r6, #0
 801c862:	f040 809b 	bne.w	801c99c <rcl_wait_set_resize+0x1d8>
 801c866:	68a8      	ldr	r0, [r5, #8]
 801c868:	b128      	cbz	r0, 801c876 <rcl_wait_set_resize+0xb2>
 801c86a:	4649      	mov	r1, r9
 801c86c:	4790      	blx	r2
 801c86e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c870:	60ae      	str	r6, [r5, #8]
 801c872:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c876:	f04f 0800 	mov.w	r8, #0
 801c87a:	19f6      	adds	r6, r6, r7
 801c87c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c880:	f040 80a2 	bne.w	801c9c8 <rcl_wait_set_resize+0x204>
 801c884:	6960      	ldr	r0, [r4, #20]
 801c886:	b130      	cbz	r0, 801c896 <rcl_wait_set_resize+0xd2>
 801c888:	4649      	mov	r1, r9
 801c88a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801c88c:	4798      	blx	r3
 801c88e:	6166      	str	r6, [r4, #20]
 801c890:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c892:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c896:	2600      	movs	r6, #0
 801c898:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c89c:	616e      	str	r6, [r5, #20]
 801c89e:	6426      	str	r6, [r4, #64]	@ 0x40
 801c8a0:	2f00      	cmp	r7, #0
 801c8a2:	f040 80af 	bne.w	801ca04 <rcl_wait_set_resize+0x240>
 801c8a6:	6928      	ldr	r0, [r5, #16]
 801c8a8:	b138      	cbz	r0, 801c8ba <rcl_wait_set_resize+0xf6>
 801c8aa:	4649      	mov	r1, r9
 801c8ac:	47d0      	blx	sl
 801c8ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8b0:	612f      	str	r7, [r5, #16]
 801c8b2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c8b6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c8ba:	2600      	movs	r6, #0
 801c8bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8be:	61ee      	str	r6, [r5, #28]
 801c8c0:	61a6      	str	r6, [r4, #24]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	f040 8093 	bne.w	801c9ee <rcl_wait_set_resize+0x22a>
 801c8c8:	69a8      	ldr	r0, [r5, #24]
 801c8ca:	b120      	cbz	r0, 801c8d6 <rcl_wait_set_resize+0x112>
 801c8cc:	4649      	mov	r1, r9
 801c8ce:	47d0      	blx	sl
 801c8d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8d4:	61ab      	str	r3, [r5, #24]
 801c8d6:	6a20      	ldr	r0, [r4, #32]
 801c8d8:	b128      	cbz	r0, 801c8e6 <rcl_wait_set_resize+0x122>
 801c8da:	4649      	mov	r1, r9
 801c8dc:	47d0      	blx	sl
 801c8de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8e0:	2300      	movs	r3, #0
 801c8e2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c8e6:	2600      	movs	r6, #0
 801c8e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8ea:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c8ec:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c8f0:	626e      	str	r6, [r5, #36]	@ 0x24
 801c8f2:	6266      	str	r6, [r4, #36]	@ 0x24
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	f000 8098 	beq.w	801ca2a <rcl_wait_set_resize+0x266>
 801c8fa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c8fe:	463a      	mov	r2, r7
 801c900:	6a28      	ldr	r0, [r5, #32]
 801c902:	4651      	mov	r1, sl
 801c904:	47c8      	blx	r9
 801c906:	6228      	str	r0, [r5, #32]
 801c908:	2800      	cmp	r0, #0
 801c90a:	d077      	beq.n	801c9fc <rcl_wait_set_resize+0x238>
 801c90c:	4652      	mov	r2, sl
 801c90e:	4631      	mov	r1, r6
 801c910:	f005 fd12 	bl	8022338 <memset>
 801c914:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c918:	463a      	mov	r2, r7
 801c91a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801c91c:	4651      	mov	r1, sl
 801c91e:	626b      	str	r3, [r5, #36]	@ 0x24
 801c920:	62a6      	str	r6, [r4, #40]	@ 0x28
 801c922:	47c8      	blx	r9
 801c924:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c926:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801c928:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801c92a:	2c00      	cmp	r4, #0
 801c92c:	f000 80f2 	beq.w	801cb14 <rcl_wait_set_resize+0x350>
 801c930:	4620      	mov	r0, r4
 801c932:	4652      	mov	r2, sl
 801c934:	4631      	mov	r1, r6
 801c936:	f005 fcff 	bl	8022338 <memset>
 801c93a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c93c:	2600      	movs	r6, #0
 801c93e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c940:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c942:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c946:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801c948:	6326      	str	r6, [r4, #48]	@ 0x30
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	f040 8097 	bne.w	801ca7e <rcl_wait_set_resize+0x2ba>
 801c950:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801c952:	b120      	cbz	r0, 801c95e <rcl_wait_set_resize+0x19a>
 801c954:	4639      	mov	r1, r7
 801c956:	47c0      	blx	r8
 801c958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c95a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c95c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801c95e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801c960:	2800      	cmp	r0, #0
 801c962:	d04c      	beq.n	801c9fe <rcl_wait_set_resize+0x23a>
 801c964:	4639      	mov	r1, r7
 801c966:	47c0      	blx	r8
 801c968:	2300      	movs	r3, #0
 801c96a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801c96c:	4618      	mov	r0, r3
 801c96e:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801c972:	b003      	add	sp, #12
 801c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c978:	6800      	ldr	r0, [r0, #0]
 801c97a:	b120      	cbz	r0, 801c986 <rcl_wait_set_resize+0x1c2>
 801c97c:	4651      	mov	r1, sl
 801c97e:	47d8      	blx	fp
 801c980:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c982:	f8c5 8000 	str.w	r8, [r5]
 801c986:	68a0      	ldr	r0, [r4, #8]
 801c988:	2800      	cmp	r0, #0
 801c98a:	f43f af5f 	beq.w	801c84c <rcl_wait_set_resize+0x88>
 801c98e:	4651      	mov	r1, sl
 801c990:	47d8      	blx	fp
 801c992:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c994:	2300      	movs	r3, #0
 801c996:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c99a:	e757      	b.n	801c84c <rcl_wait_set_resize+0x88>
 801c99c:	00b4      	lsls	r4, r6, #2
 801c99e:	464a      	mov	r2, r9
 801c9a0:	68a8      	ldr	r0, [r5, #8]
 801c9a2:	4621      	mov	r1, r4
 801c9a4:	4798      	blx	r3
 801c9a6:	60a8      	str	r0, [r5, #8]
 801c9a8:	b340      	cbz	r0, 801c9fc <rcl_wait_set_resize+0x238>
 801c9aa:	4622      	mov	r2, r4
 801c9ac:	4641      	mov	r1, r8
 801c9ae:	f005 fcc3 	bl	8022338 <memset>
 801c9b2:	f04f 0800 	mov.w	r8, #0
 801c9b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9b8:	60ee      	str	r6, [r5, #12]
 801c9ba:	19f6      	adds	r6, r6, r7
 801c9bc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c9c0:	f8c4 8010 	str.w	r8, [r4, #16]
 801c9c4:	f43f af5e 	beq.w	801c884 <rcl_wait_set_resize+0xc0>
 801c9c8:	00b6      	lsls	r6, r6, #2
 801c9ca:	464a      	mov	r2, r9
 801c9cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801c9ce:	6960      	ldr	r0, [r4, #20]
 801c9d0:	4631      	mov	r1, r6
 801c9d2:	4798      	blx	r3
 801c9d4:	4681      	mov	r9, r0
 801c9d6:	6160      	str	r0, [r4, #20]
 801c9d8:	2800      	cmp	r0, #0
 801c9da:	f000 8084 	beq.w	801cae6 <rcl_wait_set_resize+0x322>
 801c9de:	4632      	mov	r2, r6
 801c9e0:	4641      	mov	r1, r8
 801c9e2:	f005 fca9 	bl	8022338 <memset>
 801c9e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c9ec:	e753      	b.n	801c896 <rcl_wait_set_resize+0xd2>
 801c9ee:	009c      	lsls	r4, r3, #2
 801c9f0:	464a      	mov	r2, r9
 801c9f2:	69a8      	ldr	r0, [r5, #24]
 801c9f4:	4621      	mov	r1, r4
 801c9f6:	47c0      	blx	r8
 801c9f8:	61a8      	str	r0, [r5, #24]
 801c9fa:	bb40      	cbnz	r0, 801ca4e <rcl_wait_set_resize+0x28a>
 801c9fc:	200a      	movs	r0, #10
 801c9fe:	b003      	add	sp, #12
 801ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca04:	00bc      	lsls	r4, r7, #2
 801ca06:	464a      	mov	r2, r9
 801ca08:	6928      	ldr	r0, [r5, #16]
 801ca0a:	4621      	mov	r1, r4
 801ca0c:	47c0      	blx	r8
 801ca0e:	6128      	str	r0, [r5, #16]
 801ca10:	2800      	cmp	r0, #0
 801ca12:	d0f3      	beq.n	801c9fc <rcl_wait_set_resize+0x238>
 801ca14:	4622      	mov	r2, r4
 801ca16:	4631      	mov	r1, r6
 801ca18:	f005 fc8e 	bl	8022338 <memset>
 801ca1c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca1e:	616f      	str	r7, [r5, #20]
 801ca20:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801ca24:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801ca28:	e747      	b.n	801c8ba <rcl_wait_set_resize+0xf6>
 801ca2a:	6a28      	ldr	r0, [r5, #32]
 801ca2c:	b120      	cbz	r0, 801ca38 <rcl_wait_set_resize+0x274>
 801ca2e:	4639      	mov	r1, r7
 801ca30:	47c0      	blx	r8
 801ca32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca34:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca36:	622b      	str	r3, [r5, #32]
 801ca38:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801ca3a:	2800      	cmp	r0, #0
 801ca3c:	f43f af7e 	beq.w	801c93c <rcl_wait_set_resize+0x178>
 801ca40:	4639      	mov	r1, r7
 801ca42:	47c0      	blx	r8
 801ca44:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca46:	2300      	movs	r3, #0
 801ca48:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801ca4c:	e776      	b.n	801c93c <rcl_wait_set_resize+0x178>
 801ca4e:	4622      	mov	r2, r4
 801ca50:	4631      	mov	r1, r6
 801ca52:	f005 fc71 	bl	8022338 <memset>
 801ca56:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801ca58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca5a:	464a      	mov	r2, r9
 801ca5c:	6a38      	ldr	r0, [r7, #32]
 801ca5e:	4621      	mov	r1, r4
 801ca60:	61eb      	str	r3, [r5, #28]
 801ca62:	61fe      	str	r6, [r7, #28]
 801ca64:	47c0      	blx	r8
 801ca66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca68:	6238      	str	r0, [r7, #32]
 801ca6a:	6a1f      	ldr	r7, [r3, #32]
 801ca6c:	2f00      	cmp	r7, #0
 801ca6e:	d04a      	beq.n	801cb06 <rcl_wait_set_resize+0x342>
 801ca70:	4622      	mov	r2, r4
 801ca72:	4631      	mov	r1, r6
 801ca74:	4638      	mov	r0, r7
 801ca76:	f005 fc5f 	bl	8022338 <memset>
 801ca7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca7c:	e733      	b.n	801c8e6 <rcl_wait_set_resize+0x122>
 801ca7e:	009c      	lsls	r4, r3, #2
 801ca80:	463a      	mov	r2, r7
 801ca82:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801ca84:	4621      	mov	r1, r4
 801ca86:	47c8      	blx	r9
 801ca88:	62a8      	str	r0, [r5, #40]	@ 0x28
 801ca8a:	2800      	cmp	r0, #0
 801ca8c:	d0b6      	beq.n	801c9fc <rcl_wait_set_resize+0x238>
 801ca8e:	4622      	mov	r2, r4
 801ca90:	4631      	mov	r1, r6
 801ca92:	f005 fc51 	bl	8022338 <memset>
 801ca96:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801ca9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca9c:	463a      	mov	r2, r7
 801ca9e:	4621      	mov	r1, r4
 801caa0:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801caa4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801caa6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801caaa:	47c8      	blx	r9
 801caac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801caae:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801cab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d034      	beq.n	801cb22 <rcl_wait_set_resize+0x35e>
 801cab8:	4622      	mov	r2, r4
 801caba:	4631      	mov	r1, r6
 801cabc:	4618      	mov	r0, r3
 801cabe:	f005 fc3b 	bl	8022338 <memset>
 801cac2:	4630      	mov	r0, r6
 801cac4:	b003      	add	sp, #12
 801cac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801caca:	200b      	movs	r0, #11
 801cacc:	4770      	bx	lr
 801cace:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cad2:	e794      	b.n	801c9fe <rcl_wait_set_resize+0x23a>
 801cad4:	6828      	ldr	r0, [r5, #0]
 801cad6:	4651      	mov	r1, sl
 801cad8:	9301      	str	r3, [sp, #4]
 801cada:	47d8      	blx	fp
 801cadc:	9b01      	ldr	r3, [sp, #4]
 801cade:	200a      	movs	r0, #10
 801cae0:	e9c5 3300 	strd	r3, r3, [r5]
 801cae4:	e78b      	b.n	801c9fe <rcl_wait_set_resize+0x23a>
 801cae6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cae8:	68a8      	ldr	r0, [r5, #8]
 801caea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801caec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801caee:	4798      	blx	r3
 801caf0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801caf2:	6928      	ldr	r0, [r5, #16]
 801caf4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801caf6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801caf8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801cafc:	4790      	blx	r2
 801cafe:	200a      	movs	r0, #10
 801cb00:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801cb04:	e77b      	b.n	801c9fe <rcl_wait_set_resize+0x23a>
 801cb06:	69a8      	ldr	r0, [r5, #24]
 801cb08:	4649      	mov	r1, r9
 801cb0a:	47d0      	blx	sl
 801cb0c:	200a      	movs	r0, #10
 801cb0e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801cb12:	e774      	b.n	801c9fe <rcl_wait_set_resize+0x23a>
 801cb14:	6a28      	ldr	r0, [r5, #32]
 801cb16:	4639      	mov	r1, r7
 801cb18:	47c0      	blx	r8
 801cb1a:	200a      	movs	r0, #10
 801cb1c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801cb20:	e76d      	b.n	801c9fe <rcl_wait_set_resize+0x23a>
 801cb22:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801cb24:	4639      	mov	r1, r7
 801cb26:	9301      	str	r3, [sp, #4]
 801cb28:	47c0      	blx	r8
 801cb2a:	9b01      	ldr	r3, [sp, #4]
 801cb2c:	200a      	movs	r0, #10
 801cb2e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801cb32:	e764      	b.n	801c9fe <rcl_wait_set_resize+0x23a>

0801cb34 <rcl_wait_set_init>:
 801cb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb38:	b085      	sub	sp, #20
 801cb3a:	4605      	mov	r5, r0
 801cb3c:	460e      	mov	r6, r1
 801cb3e:	4617      	mov	r7, r2
 801cb40:	a812      	add	r0, sp, #72	@ 0x48
 801cb42:	4698      	mov	r8, r3
 801cb44:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 801cb48:	f7f8 fcba 	bl	80154c0 <rcutils_allocator_is_valid>
 801cb4c:	2d00      	cmp	r5, #0
 801cb4e:	d072      	beq.n	801cc36 <rcl_wait_set_init+0x102>
 801cb50:	f080 0001 	eor.w	r0, r0, #1
 801cb54:	b2c0      	uxtb	r0, r0
 801cb56:	2800      	cmp	r0, #0
 801cb58:	d16d      	bne.n	801cc36 <rcl_wait_set_init+0x102>
 801cb5a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801cb5e:	f1ba 0f00 	cmp.w	sl, #0
 801cb62:	d004      	beq.n	801cb6e <rcl_wait_set_init+0x3a>
 801cb64:	2464      	movs	r4, #100	@ 0x64
 801cb66:	4620      	mov	r0, r4
 801cb68:	b005      	add	sp, #20
 801cb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb6e:	f1b9 0f00 	cmp.w	r9, #0
 801cb72:	d060      	beq.n	801cc36 <rcl_wait_set_init+0x102>
 801cb74:	4648      	mov	r0, r9
 801cb76:	f7fe f807 	bl	801ab88 <rcl_context_is_valid>
 801cb7a:	2800      	cmp	r0, #0
 801cb7c:	d068      	beq.n	801cc50 <rcl_wait_set_init+0x11c>
 801cb7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cb80:	205c      	movs	r0, #92	@ 0x5c
 801cb82:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801cb84:	4798      	blx	r3
 801cb86:	6328      	str	r0, [r5, #48]	@ 0x30
 801cb88:	2800      	cmp	r0, #0
 801cb8a:	d063      	beq.n	801cc54 <rcl_wait_set_init+0x120>
 801cb8c:	225c      	movs	r2, #92	@ 0x5c
 801cb8e:	4651      	mov	r1, sl
 801cb90:	f005 fbd2 	bl	8022338 <memset>
 801cb94:	ac12      	add	r4, sp, #72	@ 0x48
 801cb96:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801cb9a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801cb9e:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801cba2:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801cba6:	eb03 0e02 	add.w	lr, r3, r2
 801cbaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cbac:	f8d9 9000 	ldr.w	r9, [r9]
 801cbb0:	449e      	add	lr, r3
 801cbb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cbb4:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801cbb8:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801cbbc:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801cbc0:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801cbc4:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 801cbc8:	44be      	add	lr, r7
 801cbca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cbce:	6823      	ldr	r3, [r4, #0]
 801cbd0:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801cbd4:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 801cbd8:	f8cc 3000 	str.w	r3, [ip]
 801cbdc:	f002 ffa4 	bl	801fb28 <rmw_create_wait_set>
 801cbe0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cbe2:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801cbe6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801cbe8:	b350      	cbz	r0, 801cc40 <rcl_wait_set_init+0x10c>
 801cbea:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cbec:	4643      	mov	r3, r8
 801cbee:	463a      	mov	r2, r7
 801cbf0:	4631      	mov	r1, r6
 801cbf2:	9402      	str	r4, [sp, #8]
 801cbf4:	4628      	mov	r0, r5
 801cbf6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801cbf8:	9401      	str	r4, [sp, #4]
 801cbfa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801cbfc:	9400      	str	r4, [sp, #0]
 801cbfe:	f7ff fde1 	bl	801c7c4 <rcl_wait_set_resize>
 801cc02:	4604      	mov	r4, r0
 801cc04:	2800      	cmp	r0, #0
 801cc06:	d0ae      	beq.n	801cb66 <rcl_wait_set_init+0x32>
 801cc08:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cc0a:	bb2b      	cbnz	r3, 801cc58 <rcl_wait_set_init+0x124>
 801cc0c:	2600      	movs	r6, #0
 801cc0e:	4628      	mov	r0, r5
 801cc10:	4633      	mov	r3, r6
 801cc12:	4632      	mov	r2, r6
 801cc14:	4631      	mov	r1, r6
 801cc16:	9600      	str	r6, [sp, #0]
 801cc18:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801cc1c:	f7ff fdd2 	bl	801c7c4 <rcl_wait_set_resize>
 801cc20:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801cc22:	2800      	cmp	r0, #0
 801cc24:	d09f      	beq.n	801cb66 <rcl_wait_set_init+0x32>
 801cc26:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801cc28:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801cc2a:	4798      	blx	r3
 801cc2c:	4620      	mov	r0, r4
 801cc2e:	632e      	str	r6, [r5, #48]	@ 0x30
 801cc30:	b005      	add	sp, #20
 801cc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc36:	240b      	movs	r4, #11
 801cc38:	4620      	mov	r0, r4
 801cc3a:	b005      	add	sp, #20
 801cc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc40:	2401      	movs	r4, #1
 801cc42:	f002 ff7b 	bl	801fb3c <rmw_destroy_wait_set>
 801cc46:	2800      	cmp	r0, #0
 801cc48:	bf18      	it	ne
 801cc4a:	f44f 7461 	movne.w	r4, #900	@ 0x384
 801cc4e:	e7dd      	b.n	801cc0c <rcl_wait_set_init+0xd8>
 801cc50:	2465      	movs	r4, #101	@ 0x65
 801cc52:	e788      	b.n	801cb66 <rcl_wait_set_init+0x32>
 801cc54:	240a      	movs	r4, #10
 801cc56:	e786      	b.n	801cb66 <rcl_wait_set_init+0x32>
 801cc58:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801cc5a:	e7f2      	b.n	801cc42 <rcl_wait_set_init+0x10e>

0801cc5c <rcl_wait_set_add_guard_condition>:
 801cc5c:	b318      	cbz	r0, 801cca6 <rcl_wait_set_add_guard_condition+0x4a>
 801cc5e:	b538      	push	{r3, r4, r5, lr}
 801cc60:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cc62:	4604      	mov	r4, r0
 801cc64:	b30b      	cbz	r3, 801ccaa <rcl_wait_set_add_guard_condition+0x4e>
 801cc66:	b319      	cbz	r1, 801ccb0 <rcl_wait_set_add_guard_condition+0x54>
 801cc68:	68dd      	ldr	r5, [r3, #12]
 801cc6a:	68c0      	ldr	r0, [r0, #12]
 801cc6c:	4285      	cmp	r5, r0
 801cc6e:	d217      	bcs.n	801cca0 <rcl_wait_set_add_guard_condition+0x44>
 801cc70:	1c68      	adds	r0, r5, #1
 801cc72:	60d8      	str	r0, [r3, #12]
 801cc74:	68a3      	ldr	r3, [r4, #8]
 801cc76:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cc7a:	b102      	cbz	r2, 801cc7e <rcl_wait_set_add_guard_condition+0x22>
 801cc7c:	6015      	str	r5, [r2, #0]
 801cc7e:	4608      	mov	r0, r1
 801cc80:	f004 fc02 	bl	8021488 <rcl_guard_condition_get_rmw_handle>
 801cc84:	b150      	cbz	r0, 801cc9c <rcl_wait_set_add_guard_condition+0x40>
 801cc86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc88:	6842      	ldr	r2, [r0, #4]
 801cc8a:	2000      	movs	r0, #0
 801cc8c:	695b      	ldr	r3, [r3, #20]
 801cc8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cc92:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cc94:	6913      	ldr	r3, [r2, #16]
 801cc96:	3301      	adds	r3, #1
 801cc98:	6113      	str	r3, [r2, #16]
 801cc9a:	bd38      	pop	{r3, r4, r5, pc}
 801cc9c:	2001      	movs	r0, #1
 801cc9e:	bd38      	pop	{r3, r4, r5, pc}
 801cca0:	f240 3086 	movw	r0, #902	@ 0x386
 801cca4:	bd38      	pop	{r3, r4, r5, pc}
 801cca6:	200b      	movs	r0, #11
 801cca8:	4770      	bx	lr
 801ccaa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ccae:	bd38      	pop	{r3, r4, r5, pc}
 801ccb0:	200b      	movs	r0, #11
 801ccb2:	bd38      	pop	{r3, r4, r5, pc}

0801ccb4 <rcl_wait_set_add_timer>:
 801ccb4:	b328      	cbz	r0, 801cd02 <rcl_wait_set_add_timer+0x4e>
 801ccb6:	b538      	push	{r3, r4, r5, lr}
 801ccb8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ccba:	4604      	mov	r4, r0
 801ccbc:	b31b      	cbz	r3, 801cd06 <rcl_wait_set_add_timer+0x52>
 801ccbe:	b329      	cbz	r1, 801cd0c <rcl_wait_set_add_timer+0x58>
 801ccc0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801ccc2:	6965      	ldr	r5, [r4, #20]
 801ccc4:	42a8      	cmp	r0, r5
 801ccc6:	d219      	bcs.n	801ccfc <rcl_wait_set_add_timer+0x48>
 801ccc8:	1c45      	adds	r5, r0, #1
 801ccca:	641d      	str	r5, [r3, #64]	@ 0x40
 801cccc:	6923      	ldr	r3, [r4, #16]
 801ccce:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801ccd2:	b102      	cbz	r2, 801ccd6 <rcl_wait_set_add_timer+0x22>
 801ccd4:	6010      	str	r0, [r2, #0]
 801ccd6:	4608      	mov	r0, r1
 801ccd8:	f7ff fb9a 	bl	801c410 <rcl_timer_get_guard_condition>
 801ccdc:	b168      	cbz	r0, 801ccfa <rcl_wait_set_add_timer+0x46>
 801ccde:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cce0:	68e3      	ldr	r3, [r4, #12]
 801cce2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801cce4:	3b01      	subs	r3, #1
 801cce6:	441d      	add	r5, r3
 801cce8:	f004 fbce 	bl	8021488 <rcl_guard_condition_get_rmw_handle>
 801ccec:	b180      	cbz	r0, 801cd10 <rcl_wait_set_add_timer+0x5c>
 801ccee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ccf0:	6842      	ldr	r2, [r0, #4]
 801ccf2:	2000      	movs	r0, #0
 801ccf4:	695b      	ldr	r3, [r3, #20]
 801ccf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ccfa:	bd38      	pop	{r3, r4, r5, pc}
 801ccfc:	f240 3086 	movw	r0, #902	@ 0x386
 801cd00:	bd38      	pop	{r3, r4, r5, pc}
 801cd02:	200b      	movs	r0, #11
 801cd04:	4770      	bx	lr
 801cd06:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cd0a:	bd38      	pop	{r3, r4, r5, pc}
 801cd0c:	200b      	movs	r0, #11
 801cd0e:	bd38      	pop	{r3, r4, r5, pc}
 801cd10:	2001      	movs	r0, #1
 801cd12:	bd38      	pop	{r3, r4, r5, pc}

0801cd14 <rcl_wait_set_add_client>:
 801cd14:	b318      	cbz	r0, 801cd5e <rcl_wait_set_add_client+0x4a>
 801cd16:	b538      	push	{r3, r4, r5, lr}
 801cd18:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cd1a:	4604      	mov	r4, r0
 801cd1c:	b30b      	cbz	r3, 801cd62 <rcl_wait_set_add_client+0x4e>
 801cd1e:	b319      	cbz	r1, 801cd68 <rcl_wait_set_add_client+0x54>
 801cd20:	699d      	ldr	r5, [r3, #24]
 801cd22:	69c0      	ldr	r0, [r0, #28]
 801cd24:	4285      	cmp	r5, r0
 801cd26:	d217      	bcs.n	801cd58 <rcl_wait_set_add_client+0x44>
 801cd28:	1c68      	adds	r0, r5, #1
 801cd2a:	6198      	str	r0, [r3, #24]
 801cd2c:	69a3      	ldr	r3, [r4, #24]
 801cd2e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cd32:	b102      	cbz	r2, 801cd36 <rcl_wait_set_add_client+0x22>
 801cd34:	6015      	str	r5, [r2, #0]
 801cd36:	4608      	mov	r0, r1
 801cd38:	f7fd fe78 	bl	801aa2c <rcl_client_get_rmw_handle>
 801cd3c:	b150      	cbz	r0, 801cd54 <rcl_wait_set_add_client+0x40>
 801cd3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd40:	6842      	ldr	r2, [r0, #4]
 801cd42:	2000      	movs	r0, #0
 801cd44:	6a1b      	ldr	r3, [r3, #32]
 801cd46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd4a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cd4c:	69d3      	ldr	r3, [r2, #28]
 801cd4e:	3301      	adds	r3, #1
 801cd50:	61d3      	str	r3, [r2, #28]
 801cd52:	bd38      	pop	{r3, r4, r5, pc}
 801cd54:	2001      	movs	r0, #1
 801cd56:	bd38      	pop	{r3, r4, r5, pc}
 801cd58:	f240 3086 	movw	r0, #902	@ 0x386
 801cd5c:	bd38      	pop	{r3, r4, r5, pc}
 801cd5e:	200b      	movs	r0, #11
 801cd60:	4770      	bx	lr
 801cd62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cd66:	bd38      	pop	{r3, r4, r5, pc}
 801cd68:	200b      	movs	r0, #11
 801cd6a:	bd38      	pop	{r3, r4, r5, pc}

0801cd6c <rcl_wait_set_add_service>:
 801cd6c:	b318      	cbz	r0, 801cdb6 <rcl_wait_set_add_service+0x4a>
 801cd6e:	b538      	push	{r3, r4, r5, lr}
 801cd70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cd72:	4604      	mov	r4, r0
 801cd74:	b30b      	cbz	r3, 801cdba <rcl_wait_set_add_service+0x4e>
 801cd76:	b319      	cbz	r1, 801cdc0 <rcl_wait_set_add_service+0x54>
 801cd78:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801cd7a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801cd7c:	4285      	cmp	r5, r0
 801cd7e:	d217      	bcs.n	801cdb0 <rcl_wait_set_add_service+0x44>
 801cd80:	1c68      	adds	r0, r5, #1
 801cd82:	6258      	str	r0, [r3, #36]	@ 0x24
 801cd84:	6a23      	ldr	r3, [r4, #32]
 801cd86:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cd8a:	b102      	cbz	r2, 801cd8e <rcl_wait_set_add_service+0x22>
 801cd8c:	6015      	str	r5, [r2, #0]
 801cd8e:	4608      	mov	r0, r1
 801cd90:	f7fe fdc2 	bl	801b918 <rcl_service_get_rmw_handle>
 801cd94:	b150      	cbz	r0, 801cdac <rcl_wait_set_add_service+0x40>
 801cd96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd98:	6842      	ldr	r2, [r0, #4]
 801cd9a:	2000      	movs	r0, #0
 801cd9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cda2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cda4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801cda6:	3301      	adds	r3, #1
 801cda8:	6293      	str	r3, [r2, #40]	@ 0x28
 801cdaa:	bd38      	pop	{r3, r4, r5, pc}
 801cdac:	2001      	movs	r0, #1
 801cdae:	bd38      	pop	{r3, r4, r5, pc}
 801cdb0:	f240 3086 	movw	r0, #902	@ 0x386
 801cdb4:	bd38      	pop	{r3, r4, r5, pc}
 801cdb6:	200b      	movs	r0, #11
 801cdb8:	4770      	bx	lr
 801cdba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cdbe:	bd38      	pop	{r3, r4, r5, pc}
 801cdc0:	200b      	movs	r0, #11
 801cdc2:	bd38      	pop	{r3, r4, r5, pc}
 801cdc4:	0000      	movs	r0, r0
	...

0801cdc8 <rcl_wait>:
 801cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdcc:	ed2d 8b02 	vpush	{d8}
 801cdd0:	b08d      	sub	sp, #52	@ 0x34
 801cdd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cdd6:	2800      	cmp	r0, #0
 801cdd8:	f000 814f 	beq.w	801d07a <rcl_wait+0x2b2>
 801cddc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801cdde:	4605      	mov	r5, r0
 801cde0:	2e00      	cmp	r6, #0
 801cde2:	f000 811a 	beq.w	801d01a <rcl_wait+0x252>
 801cde6:	6843      	ldr	r3, [r0, #4]
 801cde8:	b983      	cbnz	r3, 801ce0c <rcl_wait+0x44>
 801cdea:	68eb      	ldr	r3, [r5, #12]
 801cdec:	b973      	cbnz	r3, 801ce0c <rcl_wait+0x44>
 801cdee:	696b      	ldr	r3, [r5, #20]
 801cdf0:	b963      	cbnz	r3, 801ce0c <rcl_wait+0x44>
 801cdf2:	69eb      	ldr	r3, [r5, #28]
 801cdf4:	b953      	cbnz	r3, 801ce0c <rcl_wait+0x44>
 801cdf6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801cdf8:	b943      	cbnz	r3, 801ce0c <rcl_wait+0x44>
 801cdfa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801cdfc:	b933      	cbnz	r3, 801ce0c <rcl_wait+0x44>
 801cdfe:	f240 3085 	movw	r0, #901	@ 0x385
 801ce02:	b00d      	add	sp, #52	@ 0x34
 801ce04:	ecbd 8b02 	vpop	{d8}
 801ce08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce0c:	9b04      	ldr	r3, [sp, #16]
 801ce0e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801ce10:	2b01      	cmp	r3, #1
 801ce12:	9b05      	ldr	r3, [sp, #20]
 801ce14:	f173 0300 	sbcs.w	r3, r3, #0
 801ce18:	f2c0 80f8 	blt.w	801d00c <rcl_wait+0x244>
 801ce1c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801ce20:	2a00      	cmp	r2, #0
 801ce22:	f000 810f 	beq.w	801d044 <rcl_wait+0x27c>
 801ce26:	2400      	movs	r4, #0
 801ce28:	4613      	mov	r3, r2
 801ce2a:	f240 3921 	movw	r9, #801	@ 0x321
 801ce2e:	4632      	mov	r2, r6
 801ce30:	46a2      	mov	sl, r4
 801ce32:	46a3      	mov	fp, r4
 801ce34:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 801d098 <rcl_wait+0x2d0>
 801ce38:	e014      	b.n	801ce64 <rcl_wait+0x9c>
 801ce3a:	2800      	cmp	r0, #0
 801ce3c:	d1e1      	bne.n	801ce02 <rcl_wait+0x3a>
 801ce3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ce42:	4542      	cmp	r2, r8
 801ce44:	eb73 0107 	sbcs.w	r1, r3, r7
 801ce48:	da03      	bge.n	801ce52 <rcl_wait+0x8a>
 801ce4a:	4690      	mov	r8, r2
 801ce4c:	461f      	mov	r7, r3
 801ce4e:	f04f 0b01 	mov.w	fp, #1
 801ce52:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801ce54:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801ce56:	3401      	adds	r4, #1
 801ce58:	f14a 0a00 	adc.w	sl, sl, #0
 801ce5c:	429c      	cmp	r4, r3
 801ce5e:	f17a 0100 	sbcs.w	r1, sl, #0
 801ce62:	d228      	bcs.n	801ceb6 <rcl_wait+0xee>
 801ce64:	6928      	ldr	r0, [r5, #16]
 801ce66:	a908      	add	r1, sp, #32
 801ce68:	00a6      	lsls	r6, r4, #2
 801ce6a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ce6e:	2800      	cmp	r0, #0
 801ce70:	d0f1      	beq.n	801ce56 <rcl_wait+0x8e>
 801ce72:	68eb      	ldr	r3, [r5, #12]
 801ce74:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801ce78:	4423      	add	r3, r4
 801ce7a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801ce7e:	f1be 0f00 	cmp.w	lr, #0
 801ce82:	d006      	beq.n	801ce92 <rcl_wait+0xca>
 801ce84:	6913      	ldr	r3, [r2, #16]
 801ce86:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801ce8a:	3301      	adds	r3, #1
 801ce8c:	6113      	str	r3, [r2, #16]
 801ce8e:	692b      	ldr	r3, [r5, #16]
 801ce90:	5998      	ldr	r0, [r3, r6]
 801ce92:	ed8d 8b08 	vstr	d8, [sp, #32]
 801ce96:	f7ff fa89 	bl	801c3ac <rcl_timer_get_time_until_next_call>
 801ce9a:	4548      	cmp	r0, r9
 801ce9c:	d1cd      	bne.n	801ce3a <rcl_wait+0x72>
 801ce9e:	692b      	ldr	r3, [r5, #16]
 801cea0:	2200      	movs	r2, #0
 801cea2:	3401      	adds	r4, #1
 801cea4:	519a      	str	r2, [r3, r6]
 801cea6:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801cea8:	f14a 0a00 	adc.w	sl, sl, #0
 801ceac:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801ceae:	429c      	cmp	r4, r3
 801ceb0:	f17a 0100 	sbcs.w	r1, sl, #0
 801ceb4:	d3d6      	bcc.n	801ce64 <rcl_wait+0x9c>
 801ceb6:	4659      	mov	r1, fp
 801ceb8:	4616      	mov	r6, r2
 801ceba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801cebe:	4313      	orrs	r3, r2
 801cec0:	f040 80b4 	bne.w	801d02c <rcl_wait+0x264>
 801cec4:	2300      	movs	r3, #0
 801cec6:	2200      	movs	r2, #0
 801cec8:	460c      	mov	r4, r1
 801ceca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cece:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801ced2:	ab08      	add	r3, sp, #32
 801ced4:	9302      	str	r3, [sp, #8]
 801ced6:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801ceda:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801cedc:	f106 0110 	add.w	r1, r6, #16
 801cee0:	9300      	str	r3, [sp, #0]
 801cee2:	1d30      	adds	r0, r6, #4
 801cee4:	f106 031c 	add.w	r3, r6, #28
 801cee8:	9201      	str	r2, [sp, #4]
 801ceea:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801ceee:	f002 fcb7 	bl	801f860 <rmw_wait>
 801cef2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cef4:	4680      	mov	r8, r0
 801cef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cef8:	b1e2      	cbz	r2, 801cf34 <rcl_wait+0x16c>
 801cefa:	f04f 0900 	mov.w	r9, #0
 801cefe:	464f      	mov	r7, r9
 801cf00:	692a      	ldr	r2, [r5, #16]
 801cf02:	f10d 011f 	add.w	r1, sp, #31
 801cf06:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801cf0a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801cf0e:	b160      	cbz	r0, 801cf2a <rcl_wait+0x162>
 801cf10:	f88d 701f 	strb.w	r7, [sp, #31]
 801cf14:	f7ff fa0e 	bl	801c334 <rcl_timer_is_ready>
 801cf18:	2800      	cmp	r0, #0
 801cf1a:	f47f af72 	bne.w	801ce02 <rcl_wait+0x3a>
 801cf1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801cf22:	b90b      	cbnz	r3, 801cf28 <rcl_wait+0x160>
 801cf24:	692a      	ldr	r2, [r5, #16]
 801cf26:	5193      	str	r3, [r2, r6]
 801cf28:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cf2a:	f109 0901 	add.w	r9, r9, #1
 801cf2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cf30:	454a      	cmp	r2, r9
 801cf32:	d8e5      	bhi.n	801cf00 <rcl_wait+0x138>
 801cf34:	f038 0002 	bics.w	r0, r8, #2
 801cf38:	d176      	bne.n	801d028 <rcl_wait+0x260>
 801cf3a:	686f      	ldr	r7, [r5, #4]
 801cf3c:	b17f      	cbz	r7, 801cf5e <rcl_wait+0x196>
 801cf3e:	4602      	mov	r2, r0
 801cf40:	e002      	b.n	801cf48 <rcl_wait+0x180>
 801cf42:	3201      	adds	r2, #1
 801cf44:	42ba      	cmp	r2, r7
 801cf46:	d00a      	beq.n	801cf5e <rcl_wait+0x196>
 801cf48:	6899      	ldr	r1, [r3, #8]
 801cf4a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf4e:	2900      	cmp	r1, #0
 801cf50:	d1f7      	bne.n	801cf42 <rcl_wait+0x17a>
 801cf52:	682e      	ldr	r6, [r5, #0]
 801cf54:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf58:	3201      	adds	r2, #1
 801cf5a:	42ba      	cmp	r2, r7
 801cf5c:	d1f4      	bne.n	801cf48 <rcl_wait+0x180>
 801cf5e:	68ef      	ldr	r7, [r5, #12]
 801cf60:	b17f      	cbz	r7, 801cf82 <rcl_wait+0x1ba>
 801cf62:	2200      	movs	r2, #0
 801cf64:	e002      	b.n	801cf6c <rcl_wait+0x1a4>
 801cf66:	3201      	adds	r2, #1
 801cf68:	42ba      	cmp	r2, r7
 801cf6a:	d00a      	beq.n	801cf82 <rcl_wait+0x1ba>
 801cf6c:	6959      	ldr	r1, [r3, #20]
 801cf6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf72:	2900      	cmp	r1, #0
 801cf74:	d1f7      	bne.n	801cf66 <rcl_wait+0x19e>
 801cf76:	68ae      	ldr	r6, [r5, #8]
 801cf78:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf7c:	3201      	adds	r2, #1
 801cf7e:	42ba      	cmp	r2, r7
 801cf80:	d1f4      	bne.n	801cf6c <rcl_wait+0x1a4>
 801cf82:	69ef      	ldr	r7, [r5, #28]
 801cf84:	b17f      	cbz	r7, 801cfa6 <rcl_wait+0x1de>
 801cf86:	2200      	movs	r2, #0
 801cf88:	e002      	b.n	801cf90 <rcl_wait+0x1c8>
 801cf8a:	3201      	adds	r2, #1
 801cf8c:	42ba      	cmp	r2, r7
 801cf8e:	d00a      	beq.n	801cfa6 <rcl_wait+0x1de>
 801cf90:	6a19      	ldr	r1, [r3, #32]
 801cf92:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf96:	2900      	cmp	r1, #0
 801cf98:	d1f7      	bne.n	801cf8a <rcl_wait+0x1c2>
 801cf9a:	69ae      	ldr	r6, [r5, #24]
 801cf9c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cfa0:	3201      	adds	r2, #1
 801cfa2:	42ba      	cmp	r2, r7
 801cfa4:	d1f4      	bne.n	801cf90 <rcl_wait+0x1c8>
 801cfa6:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 801cfa8:	b17f      	cbz	r7, 801cfca <rcl_wait+0x202>
 801cfaa:	2200      	movs	r2, #0
 801cfac:	e002      	b.n	801cfb4 <rcl_wait+0x1ec>
 801cfae:	3201      	adds	r2, #1
 801cfb0:	42ba      	cmp	r2, r7
 801cfb2:	d00a      	beq.n	801cfca <rcl_wait+0x202>
 801cfb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801cfb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cfba:	2900      	cmp	r1, #0
 801cfbc:	d1f7      	bne.n	801cfae <rcl_wait+0x1e6>
 801cfbe:	6a2e      	ldr	r6, [r5, #32]
 801cfc0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cfc4:	3201      	adds	r2, #1
 801cfc6:	42ba      	cmp	r2, r7
 801cfc8:	d1f4      	bne.n	801cfb4 <rcl_wait+0x1ec>
 801cfca:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801cfcc:	b17f      	cbz	r7, 801cfee <rcl_wait+0x226>
 801cfce:	2200      	movs	r2, #0
 801cfd0:	e002      	b.n	801cfd8 <rcl_wait+0x210>
 801cfd2:	3201      	adds	r2, #1
 801cfd4:	42ba      	cmp	r2, r7
 801cfd6:	d00a      	beq.n	801cfee <rcl_wait+0x226>
 801cfd8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801cfda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cfde:	2900      	cmp	r1, #0
 801cfe0:	d1f7      	bne.n	801cfd2 <rcl_wait+0x20a>
 801cfe2:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 801cfe4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cfe8:	3201      	adds	r2, #1
 801cfea:	42ba      	cmp	r2, r7
 801cfec:	d1f4      	bne.n	801cfd8 <rcl_wait+0x210>
 801cfee:	f1b8 0f02 	cmp.w	r8, #2
 801cff2:	f47f af06 	bne.w	801ce02 <rcl_wait+0x3a>
 801cff6:	f084 0301 	eor.w	r3, r4, #1
 801cffa:	b2db      	uxtb	r3, r3
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	bf18      	it	ne
 801d000:	2002      	movne	r0, #2
 801d002:	b00d      	add	sp, #52	@ 0x34
 801d004:	ecbd 8b02 	vpop	{d8}
 801d008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d00c:	2a00      	cmp	r2, #0
 801d00e:	d03a      	beq.n	801d086 <rcl_wait+0x2be>
 801d010:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d014:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801d018:	e705      	b.n	801ce26 <rcl_wait+0x5e>
 801d01a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d01e:	b00d      	add	sp, #52	@ 0x34
 801d020:	ecbd 8b02 	vpop	{d8}
 801d024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d028:	2001      	movs	r0, #1
 801d02a:	e6ea      	b.n	801ce02 <rcl_wait+0x3a>
 801d02c:	9b04      	ldr	r3, [sp, #16]
 801d02e:	460c      	mov	r4, r1
 801d030:	2b01      	cmp	r3, #1
 801d032:	9b05      	ldr	r3, [sp, #20]
 801d034:	f173 0300 	sbcs.w	r3, r3, #0
 801d038:	bfa8      	it	ge
 801d03a:	f044 0401 	orrge.w	r4, r4, #1
 801d03e:	b914      	cbnz	r4, 801d046 <rcl_wait+0x27e>
 801d040:	4623      	mov	r3, r4
 801d042:	e747      	b.n	801ced4 <rcl_wait+0x10c>
 801d044:	4611      	mov	r1, r2
 801d046:	2f00      	cmp	r7, #0
 801d048:	da02      	bge.n	801d050 <rcl_wait+0x288>
 801d04a:	f04f 0800 	mov.w	r8, #0
 801d04e:	4647      	mov	r7, r8
 801d050:	460c      	mov	r4, r1
 801d052:	4640      	mov	r0, r8
 801d054:	4639      	mov	r1, r7
 801d056:	a312      	add	r3, pc, #72	@ (adr r3, 801d0a0 <rcl_wait+0x2d8>)
 801d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d05c:	f7e3 f9a8 	bl	80003b0 <__aeabi_ldivmod>
 801d060:	a30f      	add	r3, pc, #60	@ (adr r3, 801d0a0 <rcl_wait+0x2d8>)
 801d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d066:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d06a:	4640      	mov	r0, r8
 801d06c:	4639      	mov	r1, r7
 801d06e:	f7e3 f99f 	bl	80003b0 <__aeabi_ldivmod>
 801d072:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801d076:	ab08      	add	r3, sp, #32
 801d078:	e72c      	b.n	801ced4 <rcl_wait+0x10c>
 801d07a:	200b      	movs	r0, #11
 801d07c:	b00d      	add	sp, #52	@ 0x34
 801d07e:	ecbd 8b02 	vpop	{d8}
 801d082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d086:	4611      	mov	r1, r2
 801d088:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d08c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801d090:	e713      	b.n	801ceba <rcl_wait+0xf2>
 801d092:	bf00      	nop
 801d094:	f3af 8000 	nop.w
 801d098:	ffffffff 	.word	0xffffffff
 801d09c:	7fffffff 	.word	0x7fffffff
 801d0a0:	3b9aca00 	.word	0x3b9aca00
 801d0a4:	00000000 	.word	0x00000000

0801d0a8 <rcl_action_take_goal_response>:
 801d0a8:	2800      	cmp	r0, #0
 801d0aa:	d039      	beq.n	801d120 <rcl_action_take_goal_response+0x78>
 801d0ac:	b570      	push	{r4, r5, r6, lr}
 801d0ae:	4604      	mov	r4, r0
 801d0b0:	6800      	ldr	r0, [r0, #0]
 801d0b2:	b380      	cbz	r0, 801d116 <rcl_action_take_goal_response+0x6e>
 801d0b4:	460e      	mov	r6, r1
 801d0b6:	4615      	mov	r5, r2
 801d0b8:	f7fd fd3e 	bl	801ab38 <rcl_client_is_valid>
 801d0bc:	b330      	cbz	r0, 801d10c <rcl_action_take_goal_response+0x64>
 801d0be:	6820      	ldr	r0, [r4, #0]
 801d0c0:	3004      	adds	r0, #4
 801d0c2:	f7fd fd39 	bl	801ab38 <rcl_client_is_valid>
 801d0c6:	b308      	cbz	r0, 801d10c <rcl_action_take_goal_response+0x64>
 801d0c8:	6820      	ldr	r0, [r4, #0]
 801d0ca:	3008      	adds	r0, #8
 801d0cc:	f7fd fd34 	bl	801ab38 <rcl_client_is_valid>
 801d0d0:	b1e0      	cbz	r0, 801d10c <rcl_action_take_goal_response+0x64>
 801d0d2:	6820      	ldr	r0, [r4, #0]
 801d0d4:	300c      	adds	r0, #12
 801d0d6:	f7fe fdc5 	bl	801bc64 <rcl_subscription_is_valid>
 801d0da:	b1b8      	cbz	r0, 801d10c <rcl_action_take_goal_response+0x64>
 801d0dc:	6820      	ldr	r0, [r4, #0]
 801d0de:	3010      	adds	r0, #16
 801d0e0:	f7fe fdc0 	bl	801bc64 <rcl_subscription_is_valid>
 801d0e4:	b190      	cbz	r0, 801d10c <rcl_action_take_goal_response+0x64>
 801d0e6:	b1cd      	cbz	r5, 801d11c <rcl_action_take_goal_response+0x74>
 801d0e8:	b1c6      	cbz	r6, 801d11c <rcl_action_take_goal_response+0x74>
 801d0ea:	462a      	mov	r2, r5
 801d0ec:	4631      	mov	r1, r6
 801d0ee:	6820      	ldr	r0, [r4, #0]
 801d0f0:	f7fd fcda 	bl	801aaa8 <rcl_take_response>
 801d0f4:	b148      	cbz	r0, 801d10a <rcl_action_take_goal_response+0x62>
 801d0f6:	280a      	cmp	r0, #10
 801d0f8:	d007      	beq.n	801d10a <rcl_action_take_goal_response+0x62>
 801d0fa:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d0fe:	f640 0337 	movw	r3, #2103	@ 0x837
 801d102:	4290      	cmp	r0, r2
 801d104:	bf0c      	ite	eq
 801d106:	4618      	moveq	r0, r3
 801d108:	2001      	movne	r0, #1
 801d10a:	bd70      	pop	{r4, r5, r6, pc}
 801d10c:	f7f8 f9fc 	bl	8015508 <rcutils_reset_error>
 801d110:	f640 0036 	movw	r0, #2102	@ 0x836
 801d114:	bd70      	pop	{r4, r5, r6, pc}
 801d116:	f640 0036 	movw	r0, #2102	@ 0x836
 801d11a:	bd70      	pop	{r4, r5, r6, pc}
 801d11c:	200b      	movs	r0, #11
 801d11e:	bd70      	pop	{r4, r5, r6, pc}
 801d120:	f640 0036 	movw	r0, #2102	@ 0x836
 801d124:	4770      	bx	lr
 801d126:	bf00      	nop

0801d128 <rcl_action_send_result_request>:
 801d128:	b390      	cbz	r0, 801d190 <rcl_action_send_result_request+0x68>
 801d12a:	b570      	push	{r4, r5, r6, lr}
 801d12c:	4604      	mov	r4, r0
 801d12e:	6800      	ldr	r0, [r0, #0]
 801d130:	b348      	cbz	r0, 801d186 <rcl_action_send_result_request+0x5e>
 801d132:	460e      	mov	r6, r1
 801d134:	4615      	mov	r5, r2
 801d136:	f7fd fcff 	bl	801ab38 <rcl_client_is_valid>
 801d13a:	b1f8      	cbz	r0, 801d17c <rcl_action_send_result_request+0x54>
 801d13c:	6820      	ldr	r0, [r4, #0]
 801d13e:	3004      	adds	r0, #4
 801d140:	f7fd fcfa 	bl	801ab38 <rcl_client_is_valid>
 801d144:	b1d0      	cbz	r0, 801d17c <rcl_action_send_result_request+0x54>
 801d146:	6820      	ldr	r0, [r4, #0]
 801d148:	3008      	adds	r0, #8
 801d14a:	f7fd fcf5 	bl	801ab38 <rcl_client_is_valid>
 801d14e:	b1a8      	cbz	r0, 801d17c <rcl_action_send_result_request+0x54>
 801d150:	6820      	ldr	r0, [r4, #0]
 801d152:	300c      	adds	r0, #12
 801d154:	f7fe fd86 	bl	801bc64 <rcl_subscription_is_valid>
 801d158:	b180      	cbz	r0, 801d17c <rcl_action_send_result_request+0x54>
 801d15a:	6820      	ldr	r0, [r4, #0]
 801d15c:	3010      	adds	r0, #16
 801d15e:	f7fe fd81 	bl	801bc64 <rcl_subscription_is_valid>
 801d162:	b158      	cbz	r0, 801d17c <rcl_action_send_result_request+0x54>
 801d164:	b195      	cbz	r5, 801d18c <rcl_action_send_result_request+0x64>
 801d166:	b18e      	cbz	r6, 801d18c <rcl_action_send_result_request+0x64>
 801d168:	6820      	ldr	r0, [r4, #0]
 801d16a:	462a      	mov	r2, r5
 801d16c:	4631      	mov	r1, r6
 801d16e:	3008      	adds	r0, #8
 801d170:	f7fd fc62 	bl	801aa38 <rcl_send_request>
 801d174:	3800      	subs	r0, #0
 801d176:	bf18      	it	ne
 801d178:	2001      	movne	r0, #1
 801d17a:	bd70      	pop	{r4, r5, r6, pc}
 801d17c:	f7f8 f9c4 	bl	8015508 <rcutils_reset_error>
 801d180:	f640 0036 	movw	r0, #2102	@ 0x836
 801d184:	bd70      	pop	{r4, r5, r6, pc}
 801d186:	f640 0036 	movw	r0, #2102	@ 0x836
 801d18a:	bd70      	pop	{r4, r5, r6, pc}
 801d18c:	200b      	movs	r0, #11
 801d18e:	bd70      	pop	{r4, r5, r6, pc}
 801d190:	f640 0036 	movw	r0, #2102	@ 0x836
 801d194:	4770      	bx	lr
 801d196:	bf00      	nop

0801d198 <rcl_action_take_result_response>:
 801d198:	2800      	cmp	r0, #0
 801d19a:	d03a      	beq.n	801d212 <rcl_action_take_result_response+0x7a>
 801d19c:	b570      	push	{r4, r5, r6, lr}
 801d19e:	4604      	mov	r4, r0
 801d1a0:	6800      	ldr	r0, [r0, #0]
 801d1a2:	b388      	cbz	r0, 801d208 <rcl_action_take_result_response+0x70>
 801d1a4:	460e      	mov	r6, r1
 801d1a6:	4615      	mov	r5, r2
 801d1a8:	f7fd fcc6 	bl	801ab38 <rcl_client_is_valid>
 801d1ac:	b338      	cbz	r0, 801d1fe <rcl_action_take_result_response+0x66>
 801d1ae:	6820      	ldr	r0, [r4, #0]
 801d1b0:	3004      	adds	r0, #4
 801d1b2:	f7fd fcc1 	bl	801ab38 <rcl_client_is_valid>
 801d1b6:	b310      	cbz	r0, 801d1fe <rcl_action_take_result_response+0x66>
 801d1b8:	6820      	ldr	r0, [r4, #0]
 801d1ba:	3008      	adds	r0, #8
 801d1bc:	f7fd fcbc 	bl	801ab38 <rcl_client_is_valid>
 801d1c0:	b1e8      	cbz	r0, 801d1fe <rcl_action_take_result_response+0x66>
 801d1c2:	6820      	ldr	r0, [r4, #0]
 801d1c4:	300c      	adds	r0, #12
 801d1c6:	f7fe fd4d 	bl	801bc64 <rcl_subscription_is_valid>
 801d1ca:	b1c0      	cbz	r0, 801d1fe <rcl_action_take_result_response+0x66>
 801d1cc:	6820      	ldr	r0, [r4, #0]
 801d1ce:	3010      	adds	r0, #16
 801d1d0:	f7fe fd48 	bl	801bc64 <rcl_subscription_is_valid>
 801d1d4:	b198      	cbz	r0, 801d1fe <rcl_action_take_result_response+0x66>
 801d1d6:	b1d5      	cbz	r5, 801d20e <rcl_action_take_result_response+0x76>
 801d1d8:	b1ce      	cbz	r6, 801d20e <rcl_action_take_result_response+0x76>
 801d1da:	6820      	ldr	r0, [r4, #0]
 801d1dc:	462a      	mov	r2, r5
 801d1de:	4631      	mov	r1, r6
 801d1e0:	3008      	adds	r0, #8
 801d1e2:	f7fd fc61 	bl	801aaa8 <rcl_take_response>
 801d1e6:	b148      	cbz	r0, 801d1fc <rcl_action_take_result_response+0x64>
 801d1e8:	280a      	cmp	r0, #10
 801d1ea:	d007      	beq.n	801d1fc <rcl_action_take_result_response+0x64>
 801d1ec:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d1f0:	f640 0337 	movw	r3, #2103	@ 0x837
 801d1f4:	4290      	cmp	r0, r2
 801d1f6:	bf0c      	ite	eq
 801d1f8:	4618      	moveq	r0, r3
 801d1fa:	2001      	movne	r0, #1
 801d1fc:	bd70      	pop	{r4, r5, r6, pc}
 801d1fe:	f7f8 f983 	bl	8015508 <rcutils_reset_error>
 801d202:	f640 0036 	movw	r0, #2102	@ 0x836
 801d206:	bd70      	pop	{r4, r5, r6, pc}
 801d208:	f640 0036 	movw	r0, #2102	@ 0x836
 801d20c:	bd70      	pop	{r4, r5, r6, pc}
 801d20e:	200b      	movs	r0, #11
 801d210:	bd70      	pop	{r4, r5, r6, pc}
 801d212:	f640 0036 	movw	r0, #2102	@ 0x836
 801d216:	4770      	bx	lr

0801d218 <rcl_action_take_cancel_response>:
 801d218:	2800      	cmp	r0, #0
 801d21a:	d03a      	beq.n	801d292 <rcl_action_take_cancel_response+0x7a>
 801d21c:	b570      	push	{r4, r5, r6, lr}
 801d21e:	4604      	mov	r4, r0
 801d220:	6800      	ldr	r0, [r0, #0]
 801d222:	b388      	cbz	r0, 801d288 <rcl_action_take_cancel_response+0x70>
 801d224:	460e      	mov	r6, r1
 801d226:	4615      	mov	r5, r2
 801d228:	f7fd fc86 	bl	801ab38 <rcl_client_is_valid>
 801d22c:	b338      	cbz	r0, 801d27e <rcl_action_take_cancel_response+0x66>
 801d22e:	6820      	ldr	r0, [r4, #0]
 801d230:	3004      	adds	r0, #4
 801d232:	f7fd fc81 	bl	801ab38 <rcl_client_is_valid>
 801d236:	b310      	cbz	r0, 801d27e <rcl_action_take_cancel_response+0x66>
 801d238:	6820      	ldr	r0, [r4, #0]
 801d23a:	3008      	adds	r0, #8
 801d23c:	f7fd fc7c 	bl	801ab38 <rcl_client_is_valid>
 801d240:	b1e8      	cbz	r0, 801d27e <rcl_action_take_cancel_response+0x66>
 801d242:	6820      	ldr	r0, [r4, #0]
 801d244:	300c      	adds	r0, #12
 801d246:	f7fe fd0d 	bl	801bc64 <rcl_subscription_is_valid>
 801d24a:	b1c0      	cbz	r0, 801d27e <rcl_action_take_cancel_response+0x66>
 801d24c:	6820      	ldr	r0, [r4, #0]
 801d24e:	3010      	adds	r0, #16
 801d250:	f7fe fd08 	bl	801bc64 <rcl_subscription_is_valid>
 801d254:	b198      	cbz	r0, 801d27e <rcl_action_take_cancel_response+0x66>
 801d256:	b1d5      	cbz	r5, 801d28e <rcl_action_take_cancel_response+0x76>
 801d258:	b1ce      	cbz	r6, 801d28e <rcl_action_take_cancel_response+0x76>
 801d25a:	6820      	ldr	r0, [r4, #0]
 801d25c:	462a      	mov	r2, r5
 801d25e:	4631      	mov	r1, r6
 801d260:	3004      	adds	r0, #4
 801d262:	f7fd fc21 	bl	801aaa8 <rcl_take_response>
 801d266:	b148      	cbz	r0, 801d27c <rcl_action_take_cancel_response+0x64>
 801d268:	280a      	cmp	r0, #10
 801d26a:	d007      	beq.n	801d27c <rcl_action_take_cancel_response+0x64>
 801d26c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d270:	f640 0337 	movw	r3, #2103	@ 0x837
 801d274:	4290      	cmp	r0, r2
 801d276:	bf0c      	ite	eq
 801d278:	4618      	moveq	r0, r3
 801d27a:	2001      	movne	r0, #1
 801d27c:	bd70      	pop	{r4, r5, r6, pc}
 801d27e:	f7f8 f943 	bl	8015508 <rcutils_reset_error>
 801d282:	f640 0036 	movw	r0, #2102	@ 0x836
 801d286:	bd70      	pop	{r4, r5, r6, pc}
 801d288:	f640 0036 	movw	r0, #2102	@ 0x836
 801d28c:	bd70      	pop	{r4, r5, r6, pc}
 801d28e:	200b      	movs	r0, #11
 801d290:	bd70      	pop	{r4, r5, r6, pc}
 801d292:	f640 0036 	movw	r0, #2102	@ 0x836
 801d296:	4770      	bx	lr

0801d298 <rcl_action_take_feedback>:
 801d298:	2800      	cmp	r0, #0
 801d29a:	d038      	beq.n	801d30e <rcl_action_take_feedback+0x76>
 801d29c:	b530      	push	{r4, r5, lr}
 801d29e:	4604      	mov	r4, r0
 801d2a0:	6800      	ldr	r0, [r0, #0]
 801d2a2:	b091      	sub	sp, #68	@ 0x44
 801d2a4:	b378      	cbz	r0, 801d306 <rcl_action_take_feedback+0x6e>
 801d2a6:	460d      	mov	r5, r1
 801d2a8:	f7fd fc46 	bl	801ab38 <rcl_client_is_valid>
 801d2ac:	b328      	cbz	r0, 801d2fa <rcl_action_take_feedback+0x62>
 801d2ae:	6820      	ldr	r0, [r4, #0]
 801d2b0:	3004      	adds	r0, #4
 801d2b2:	f7fd fc41 	bl	801ab38 <rcl_client_is_valid>
 801d2b6:	b300      	cbz	r0, 801d2fa <rcl_action_take_feedback+0x62>
 801d2b8:	6820      	ldr	r0, [r4, #0]
 801d2ba:	3008      	adds	r0, #8
 801d2bc:	f7fd fc3c 	bl	801ab38 <rcl_client_is_valid>
 801d2c0:	b1d8      	cbz	r0, 801d2fa <rcl_action_take_feedback+0x62>
 801d2c2:	6820      	ldr	r0, [r4, #0]
 801d2c4:	300c      	adds	r0, #12
 801d2c6:	f7fe fccd 	bl	801bc64 <rcl_subscription_is_valid>
 801d2ca:	b1b0      	cbz	r0, 801d2fa <rcl_action_take_feedback+0x62>
 801d2cc:	6820      	ldr	r0, [r4, #0]
 801d2ce:	3010      	adds	r0, #16
 801d2d0:	f7fe fcc8 	bl	801bc64 <rcl_subscription_is_valid>
 801d2d4:	b188      	cbz	r0, 801d2fa <rcl_action_take_feedback+0x62>
 801d2d6:	b1ed      	cbz	r5, 801d314 <rcl_action_take_feedback+0x7c>
 801d2d8:	6820      	ldr	r0, [r4, #0]
 801d2da:	2300      	movs	r3, #0
 801d2dc:	466a      	mov	r2, sp
 801d2de:	4629      	mov	r1, r5
 801d2e0:	300c      	adds	r0, #12
 801d2e2:	f7fe fc63 	bl	801bbac <rcl_take>
 801d2e6:	b160      	cbz	r0, 801d302 <rcl_action_take_feedback+0x6a>
 801d2e8:	f240 1391 	movw	r3, #401	@ 0x191
 801d2ec:	4298      	cmp	r0, r3
 801d2ee:	d014      	beq.n	801d31a <rcl_action_take_feedback+0x82>
 801d2f0:	280a      	cmp	r0, #10
 801d2f2:	bf18      	it	ne
 801d2f4:	2001      	movne	r0, #1
 801d2f6:	b011      	add	sp, #68	@ 0x44
 801d2f8:	bd30      	pop	{r4, r5, pc}
 801d2fa:	f7f8 f905 	bl	8015508 <rcutils_reset_error>
 801d2fe:	f640 0036 	movw	r0, #2102	@ 0x836
 801d302:	b011      	add	sp, #68	@ 0x44
 801d304:	bd30      	pop	{r4, r5, pc}
 801d306:	f640 0036 	movw	r0, #2102	@ 0x836
 801d30a:	b011      	add	sp, #68	@ 0x44
 801d30c:	bd30      	pop	{r4, r5, pc}
 801d30e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d312:	4770      	bx	lr
 801d314:	200b      	movs	r0, #11
 801d316:	b011      	add	sp, #68	@ 0x44
 801d318:	bd30      	pop	{r4, r5, pc}
 801d31a:	f640 0037 	movw	r0, #2103	@ 0x837
 801d31e:	e7f0      	b.n	801d302 <rcl_action_take_feedback+0x6a>

0801d320 <rcl_action_wait_set_add_action_client>:
 801d320:	2800      	cmp	r0, #0
 801d322:	d048      	beq.n	801d3b6 <rcl_action_wait_set_add_action_client+0x96>
 801d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d326:	460c      	mov	r4, r1
 801d328:	2900      	cmp	r1, #0
 801d32a:	d03c      	beq.n	801d3a6 <rcl_action_wait_set_add_action_client+0x86>
 801d32c:	4605      	mov	r5, r0
 801d32e:	6808      	ldr	r0, [r1, #0]
 801d330:	2800      	cmp	r0, #0
 801d332:	d038      	beq.n	801d3a6 <rcl_action_wait_set_add_action_client+0x86>
 801d334:	4617      	mov	r7, r2
 801d336:	461e      	mov	r6, r3
 801d338:	f7fd fbfe 	bl	801ab38 <rcl_client_is_valid>
 801d33c:	b3b0      	cbz	r0, 801d3ac <rcl_action_wait_set_add_action_client+0x8c>
 801d33e:	6820      	ldr	r0, [r4, #0]
 801d340:	3004      	adds	r0, #4
 801d342:	f7fd fbf9 	bl	801ab38 <rcl_client_is_valid>
 801d346:	b388      	cbz	r0, 801d3ac <rcl_action_wait_set_add_action_client+0x8c>
 801d348:	6820      	ldr	r0, [r4, #0]
 801d34a:	3008      	adds	r0, #8
 801d34c:	f7fd fbf4 	bl	801ab38 <rcl_client_is_valid>
 801d350:	b360      	cbz	r0, 801d3ac <rcl_action_wait_set_add_action_client+0x8c>
 801d352:	6820      	ldr	r0, [r4, #0]
 801d354:	300c      	adds	r0, #12
 801d356:	f7fe fc85 	bl	801bc64 <rcl_subscription_is_valid>
 801d35a:	b338      	cbz	r0, 801d3ac <rcl_action_wait_set_add_action_client+0x8c>
 801d35c:	6820      	ldr	r0, [r4, #0]
 801d35e:	3010      	adds	r0, #16
 801d360:	f7fe fc80 	bl	801bc64 <rcl_subscription_is_valid>
 801d364:	b310      	cbz	r0, 801d3ac <rcl_action_wait_set_add_action_client+0x8c>
 801d366:	6821      	ldr	r1, [r4, #0]
 801d368:	4628      	mov	r0, r5
 801d36a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801d36e:	f7ff fcd1 	bl	801cd14 <rcl_wait_set_add_client>
 801d372:	b9b8      	cbnz	r0, 801d3a4 <rcl_action_wait_set_add_action_client+0x84>
 801d374:	6821      	ldr	r1, [r4, #0]
 801d376:	4628      	mov	r0, r5
 801d378:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801d37c:	3104      	adds	r1, #4
 801d37e:	f7ff fcc9 	bl	801cd14 <rcl_wait_set_add_client>
 801d382:	b978      	cbnz	r0, 801d3a4 <rcl_action_wait_set_add_action_client+0x84>
 801d384:	6821      	ldr	r1, [r4, #0]
 801d386:	4628      	mov	r0, r5
 801d388:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801d38c:	3108      	adds	r1, #8
 801d38e:	f7ff fcc1 	bl	801cd14 <rcl_wait_set_add_client>
 801d392:	b938      	cbnz	r0, 801d3a4 <rcl_action_wait_set_add_action_client+0x84>
 801d394:	6821      	ldr	r1, [r4, #0]
 801d396:	4628      	mov	r0, r5
 801d398:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801d39c:	310c      	adds	r1, #12
 801d39e:	f7ff f969 	bl	801c674 <rcl_wait_set_add_subscription>
 801d3a2:	b158      	cbz	r0, 801d3bc <rcl_action_wait_set_add_action_client+0x9c>
 801d3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3a6:	f640 0036 	movw	r0, #2102	@ 0x836
 801d3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3ac:	f7f8 f8ac 	bl	8015508 <rcutils_reset_error>
 801d3b0:	f640 0036 	movw	r0, #2102	@ 0x836
 801d3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3b6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d3ba:	4770      	bx	lr
 801d3bc:	6821      	ldr	r1, [r4, #0]
 801d3be:	4628      	mov	r0, r5
 801d3c0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801d3c4:	3110      	adds	r1, #16
 801d3c6:	f7ff f955 	bl	801c674 <rcl_wait_set_add_subscription>
 801d3ca:	2800      	cmp	r0, #0
 801d3cc:	d1ea      	bne.n	801d3a4 <rcl_action_wait_set_add_action_client+0x84>
 801d3ce:	b11f      	cbz	r7, 801d3d8 <rcl_action_wait_set_add_action_client+0xb8>
 801d3d0:	6823      	ldr	r3, [r4, #0]
 801d3d2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801d3d6:	603b      	str	r3, [r7, #0]
 801d3d8:	2e00      	cmp	r6, #0
 801d3da:	d0e3      	beq.n	801d3a4 <rcl_action_wait_set_add_action_client+0x84>
 801d3dc:	6823      	ldr	r3, [r4, #0]
 801d3de:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801d3e2:	6033      	str	r3, [r6, #0]
 801d3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3e6:	bf00      	nop

0801d3e8 <rcl_action_client_wait_set_get_entities_ready>:
 801d3e8:	2800      	cmp	r0, #0
 801d3ea:	d050      	beq.n	801d48e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d3f0:	460c      	mov	r4, r1
 801d3f2:	2900      	cmp	r1, #0
 801d3f4:	d03e      	beq.n	801d474 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d3f6:	4605      	mov	r5, r0
 801d3f8:	6808      	ldr	r0, [r1, #0]
 801d3fa:	2800      	cmp	r0, #0
 801d3fc:	d03a      	beq.n	801d474 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d3fe:	4616      	mov	r6, r2
 801d400:	461f      	mov	r7, r3
 801d402:	f7fd fb99 	bl	801ab38 <rcl_client_is_valid>
 801d406:	2800      	cmp	r0, #0
 801d408:	d038      	beq.n	801d47c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d40a:	6820      	ldr	r0, [r4, #0]
 801d40c:	3004      	adds	r0, #4
 801d40e:	f7fd fb93 	bl	801ab38 <rcl_client_is_valid>
 801d412:	2800      	cmp	r0, #0
 801d414:	d032      	beq.n	801d47c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d416:	6820      	ldr	r0, [r4, #0]
 801d418:	3008      	adds	r0, #8
 801d41a:	f7fd fb8d 	bl	801ab38 <rcl_client_is_valid>
 801d41e:	b368      	cbz	r0, 801d47c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d420:	6820      	ldr	r0, [r4, #0]
 801d422:	300c      	adds	r0, #12
 801d424:	f7fe fc1e 	bl	801bc64 <rcl_subscription_is_valid>
 801d428:	b340      	cbz	r0, 801d47c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d42a:	6820      	ldr	r0, [r4, #0]
 801d42c:	3010      	adds	r0, #16
 801d42e:	f7fe fc19 	bl	801bc64 <rcl_subscription_is_valid>
 801d432:	b318      	cbz	r0, 801d47c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d434:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 801d438:	2a00      	cmp	r2, #0
 801d43a:	bf18      	it	ne
 801d43c:	2b00      	cmpne	r3, #0
 801d43e:	9b08      	ldr	r3, [sp, #32]
 801d440:	bf0c      	ite	eq
 801d442:	2101      	moveq	r1, #1
 801d444:	2100      	movne	r1, #0
 801d446:	2b00      	cmp	r3, #0
 801d448:	bf08      	it	eq
 801d44a:	f041 0101 	orreq.w	r1, r1, #1
 801d44e:	2f00      	cmp	r7, #0
 801d450:	bf08      	it	eq
 801d452:	f041 0101 	orreq.w	r1, r1, #1
 801d456:	b9b9      	cbnz	r1, 801d488 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d458:	b1b6      	cbz	r6, 801d488 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d45a:	6823      	ldr	r3, [r4, #0]
 801d45c:	686c      	ldr	r4, [r5, #4]
 801d45e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801d462:	428a      	cmp	r2, r1
 801d464:	4610      	mov	r0, r2
 801d466:	bf38      	it	cc
 801d468:	4608      	movcc	r0, r1
 801d46a:	4284      	cmp	r4, r0
 801d46c:	d812      	bhi.n	801d494 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d46e:	2001      	movs	r0, #1
 801d470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d474:	f640 0036 	movw	r0, #2102	@ 0x836
 801d478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d47c:	f7f8 f844 	bl	8015508 <rcutils_reset_error>
 801d480:	f640 0036 	movw	r0, #2102	@ 0x836
 801d484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d488:	200b      	movs	r0, #11
 801d48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d48e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d492:	4770      	bx	lr
 801d494:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 801d498:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801d49c:	45f0      	cmp	r8, lr
 801d49e:	4640      	mov	r0, r8
 801d4a0:	69ec      	ldr	r4, [r5, #28]
 801d4a2:	bf38      	it	cc
 801d4a4:	4670      	movcc	r0, lr
 801d4a6:	4560      	cmp	r0, ip
 801d4a8:	bf38      	it	cc
 801d4aa:	4660      	movcc	r0, ip
 801d4ac:	4284      	cmp	r4, r0
 801d4ae:	d9de      	bls.n	801d46e <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d4b0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d4b4:	682d      	ldr	r5, [r5, #0]
 801d4b6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d4ba:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d4be:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d4c2:	1a18      	subs	r0, r3, r0
 801d4c4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d4c8:	f103 0c0c 	add.w	ip, r3, #12
 801d4cc:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d4d0:	fab0 f080 	clz	r0, r0
 801d4d4:	eba5 050c 	sub.w	r5, r5, ip
 801d4d8:	0940      	lsrs	r0, r0, #5
 801d4da:	fab5 f585 	clz	r5, r5
 801d4de:	096d      	lsrs	r5, r5, #5
 801d4e0:	7035      	strb	r5, [r6, #0]
 801d4e2:	f103 0510 	add.w	r5, r3, #16
 801d4e6:	1b64      	subs	r4, r4, r5
 801d4e8:	9d08      	ldr	r5, [sp, #32]
 801d4ea:	fab4 f484 	clz	r4, r4
 801d4ee:	0964      	lsrs	r4, r4, #5
 801d4f0:	703c      	strb	r4, [r7, #0]
 801d4f2:	1d1c      	adds	r4, r3, #4
 801d4f4:	3308      	adds	r3, #8
 801d4f6:	7028      	strb	r0, [r5, #0]
 801d4f8:	1b09      	subs	r1, r1, r4
 801d4fa:	2000      	movs	r0, #0
 801d4fc:	1ad3      	subs	r3, r2, r3
 801d4fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d500:	fab1 f181 	clz	r1, r1
 801d504:	fab3 f383 	clz	r3, r3
 801d508:	0949      	lsrs	r1, r1, #5
 801d50a:	095b      	lsrs	r3, r3, #5
 801d50c:	7011      	strb	r1, [r2, #0]
 801d50e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d510:	7013      	strb	r3, [r2, #0]
 801d512:	e7b1      	b.n	801d478 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d514 <rcl_action_take_goal_request>:
 801d514:	2800      	cmp	r0, #0
 801d516:	d039      	beq.n	801d58c <rcl_action_take_goal_request+0x78>
 801d518:	b570      	push	{r4, r5, r6, lr}
 801d51a:	4604      	mov	r4, r0
 801d51c:	6800      	ldr	r0, [r0, #0]
 801d51e:	b380      	cbz	r0, 801d582 <rcl_action_take_goal_request+0x6e>
 801d520:	460e      	mov	r6, r1
 801d522:	4615      	mov	r5, r2
 801d524:	f7fe fa56 	bl	801b9d4 <rcl_service_is_valid>
 801d528:	b330      	cbz	r0, 801d578 <rcl_action_take_goal_request+0x64>
 801d52a:	6820      	ldr	r0, [r4, #0]
 801d52c:	3004      	adds	r0, #4
 801d52e:	f7fe fa51 	bl	801b9d4 <rcl_service_is_valid>
 801d532:	b308      	cbz	r0, 801d578 <rcl_action_take_goal_request+0x64>
 801d534:	6820      	ldr	r0, [r4, #0]
 801d536:	3008      	adds	r0, #8
 801d538:	f7fe fa4c 	bl	801b9d4 <rcl_service_is_valid>
 801d53c:	b1e0      	cbz	r0, 801d578 <rcl_action_take_goal_request+0x64>
 801d53e:	6820      	ldr	r0, [r4, #0]
 801d540:	300c      	adds	r0, #12
 801d542:	f7f6 ff85 	bl	8014450 <rcl_publisher_is_valid>
 801d546:	b1b8      	cbz	r0, 801d578 <rcl_action_take_goal_request+0x64>
 801d548:	6820      	ldr	r0, [r4, #0]
 801d54a:	3010      	adds	r0, #16
 801d54c:	f7f6 ff80 	bl	8014450 <rcl_publisher_is_valid>
 801d550:	b190      	cbz	r0, 801d578 <rcl_action_take_goal_request+0x64>
 801d552:	b1cd      	cbz	r5, 801d588 <rcl_action_take_goal_request+0x74>
 801d554:	b1c6      	cbz	r6, 801d588 <rcl_action_take_goal_request+0x74>
 801d556:	462a      	mov	r2, r5
 801d558:	4631      	mov	r1, r6
 801d55a:	6820      	ldr	r0, [r4, #0]
 801d55c:	f7fe f9e2 	bl	801b924 <rcl_take_request>
 801d560:	b148      	cbz	r0, 801d576 <rcl_action_take_goal_request+0x62>
 801d562:	280a      	cmp	r0, #10
 801d564:	d007      	beq.n	801d576 <rcl_action_take_goal_request+0x62>
 801d566:	f240 2259 	movw	r2, #601	@ 0x259
 801d56a:	f640 0399 	movw	r3, #2201	@ 0x899
 801d56e:	4290      	cmp	r0, r2
 801d570:	bf0c      	ite	eq
 801d572:	4618      	moveq	r0, r3
 801d574:	2001      	movne	r0, #1
 801d576:	bd70      	pop	{r4, r5, r6, pc}
 801d578:	f7f7 ffc6 	bl	8015508 <rcutils_reset_error>
 801d57c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d580:	bd70      	pop	{r4, r5, r6, pc}
 801d582:	f640 0098 	movw	r0, #2200	@ 0x898
 801d586:	bd70      	pop	{r4, r5, r6, pc}
 801d588:	200b      	movs	r0, #11
 801d58a:	bd70      	pop	{r4, r5, r6, pc}
 801d58c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d590:	4770      	bx	lr
 801d592:	bf00      	nop

0801d594 <rcl_action_send_goal_response>:
 801d594:	b390      	cbz	r0, 801d5fc <rcl_action_send_goal_response+0x68>
 801d596:	b570      	push	{r4, r5, r6, lr}
 801d598:	4604      	mov	r4, r0
 801d59a:	6800      	ldr	r0, [r0, #0]
 801d59c:	b348      	cbz	r0, 801d5f2 <rcl_action_send_goal_response+0x5e>
 801d59e:	460e      	mov	r6, r1
 801d5a0:	4615      	mov	r5, r2
 801d5a2:	f7fe fa17 	bl	801b9d4 <rcl_service_is_valid>
 801d5a6:	b1f8      	cbz	r0, 801d5e8 <rcl_action_send_goal_response+0x54>
 801d5a8:	6820      	ldr	r0, [r4, #0]
 801d5aa:	3004      	adds	r0, #4
 801d5ac:	f7fe fa12 	bl	801b9d4 <rcl_service_is_valid>
 801d5b0:	b1d0      	cbz	r0, 801d5e8 <rcl_action_send_goal_response+0x54>
 801d5b2:	6820      	ldr	r0, [r4, #0]
 801d5b4:	3008      	adds	r0, #8
 801d5b6:	f7fe fa0d 	bl	801b9d4 <rcl_service_is_valid>
 801d5ba:	b1a8      	cbz	r0, 801d5e8 <rcl_action_send_goal_response+0x54>
 801d5bc:	6820      	ldr	r0, [r4, #0]
 801d5be:	300c      	adds	r0, #12
 801d5c0:	f7f6 ff46 	bl	8014450 <rcl_publisher_is_valid>
 801d5c4:	b180      	cbz	r0, 801d5e8 <rcl_action_send_goal_response+0x54>
 801d5c6:	6820      	ldr	r0, [r4, #0]
 801d5c8:	3010      	adds	r0, #16
 801d5ca:	f7f6 ff41 	bl	8014450 <rcl_publisher_is_valid>
 801d5ce:	b158      	cbz	r0, 801d5e8 <rcl_action_send_goal_response+0x54>
 801d5d0:	b195      	cbz	r5, 801d5f8 <rcl_action_send_goal_response+0x64>
 801d5d2:	b18e      	cbz	r6, 801d5f8 <rcl_action_send_goal_response+0x64>
 801d5d4:	462a      	mov	r2, r5
 801d5d6:	4631      	mov	r1, r6
 801d5d8:	6820      	ldr	r0, [r4, #0]
 801d5da:	f7fe f9e3 	bl	801b9a4 <rcl_send_response>
 801d5de:	b110      	cbz	r0, 801d5e6 <rcl_action_send_goal_response+0x52>
 801d5e0:	2802      	cmp	r0, #2
 801d5e2:	bf18      	it	ne
 801d5e4:	2001      	movne	r0, #1
 801d5e6:	bd70      	pop	{r4, r5, r6, pc}
 801d5e8:	f7f7 ff8e 	bl	8015508 <rcutils_reset_error>
 801d5ec:	f640 0098 	movw	r0, #2200	@ 0x898
 801d5f0:	bd70      	pop	{r4, r5, r6, pc}
 801d5f2:	f640 0098 	movw	r0, #2200	@ 0x898
 801d5f6:	bd70      	pop	{r4, r5, r6, pc}
 801d5f8:	200b      	movs	r0, #11
 801d5fa:	bd70      	pop	{r4, r5, r6, pc}
 801d5fc:	f640 0098 	movw	r0, #2200	@ 0x898
 801d600:	4770      	bx	lr
 801d602:	bf00      	nop

0801d604 <rcl_action_take_result_request>:
 801d604:	2800      	cmp	r0, #0
 801d606:	d03a      	beq.n	801d67e <rcl_action_take_result_request+0x7a>
 801d608:	b570      	push	{r4, r5, r6, lr}
 801d60a:	4604      	mov	r4, r0
 801d60c:	6800      	ldr	r0, [r0, #0]
 801d60e:	b388      	cbz	r0, 801d674 <rcl_action_take_result_request+0x70>
 801d610:	460e      	mov	r6, r1
 801d612:	4615      	mov	r5, r2
 801d614:	f7fe f9de 	bl	801b9d4 <rcl_service_is_valid>
 801d618:	b338      	cbz	r0, 801d66a <rcl_action_take_result_request+0x66>
 801d61a:	6820      	ldr	r0, [r4, #0]
 801d61c:	3004      	adds	r0, #4
 801d61e:	f7fe f9d9 	bl	801b9d4 <rcl_service_is_valid>
 801d622:	b310      	cbz	r0, 801d66a <rcl_action_take_result_request+0x66>
 801d624:	6820      	ldr	r0, [r4, #0]
 801d626:	3008      	adds	r0, #8
 801d628:	f7fe f9d4 	bl	801b9d4 <rcl_service_is_valid>
 801d62c:	b1e8      	cbz	r0, 801d66a <rcl_action_take_result_request+0x66>
 801d62e:	6820      	ldr	r0, [r4, #0]
 801d630:	300c      	adds	r0, #12
 801d632:	f7f6 ff0d 	bl	8014450 <rcl_publisher_is_valid>
 801d636:	b1c0      	cbz	r0, 801d66a <rcl_action_take_result_request+0x66>
 801d638:	6820      	ldr	r0, [r4, #0]
 801d63a:	3010      	adds	r0, #16
 801d63c:	f7f6 ff08 	bl	8014450 <rcl_publisher_is_valid>
 801d640:	b198      	cbz	r0, 801d66a <rcl_action_take_result_request+0x66>
 801d642:	b1d5      	cbz	r5, 801d67a <rcl_action_take_result_request+0x76>
 801d644:	b1ce      	cbz	r6, 801d67a <rcl_action_take_result_request+0x76>
 801d646:	6820      	ldr	r0, [r4, #0]
 801d648:	462a      	mov	r2, r5
 801d64a:	4631      	mov	r1, r6
 801d64c:	3008      	adds	r0, #8
 801d64e:	f7fe f969 	bl	801b924 <rcl_take_request>
 801d652:	b148      	cbz	r0, 801d668 <rcl_action_take_result_request+0x64>
 801d654:	280a      	cmp	r0, #10
 801d656:	d007      	beq.n	801d668 <rcl_action_take_result_request+0x64>
 801d658:	f240 2259 	movw	r2, #601	@ 0x259
 801d65c:	f640 0399 	movw	r3, #2201	@ 0x899
 801d660:	4290      	cmp	r0, r2
 801d662:	bf0c      	ite	eq
 801d664:	4618      	moveq	r0, r3
 801d666:	2001      	movne	r0, #1
 801d668:	bd70      	pop	{r4, r5, r6, pc}
 801d66a:	f7f7 ff4d 	bl	8015508 <rcutils_reset_error>
 801d66e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d672:	bd70      	pop	{r4, r5, r6, pc}
 801d674:	f640 0098 	movw	r0, #2200	@ 0x898
 801d678:	bd70      	pop	{r4, r5, r6, pc}
 801d67a:	200b      	movs	r0, #11
 801d67c:	bd70      	pop	{r4, r5, r6, pc}
 801d67e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d682:	4770      	bx	lr

0801d684 <rcl_action_take_cancel_request>:
 801d684:	2800      	cmp	r0, #0
 801d686:	d03a      	beq.n	801d6fe <rcl_action_take_cancel_request+0x7a>
 801d688:	b570      	push	{r4, r5, r6, lr}
 801d68a:	4604      	mov	r4, r0
 801d68c:	6800      	ldr	r0, [r0, #0]
 801d68e:	b388      	cbz	r0, 801d6f4 <rcl_action_take_cancel_request+0x70>
 801d690:	460e      	mov	r6, r1
 801d692:	4615      	mov	r5, r2
 801d694:	f7fe f99e 	bl	801b9d4 <rcl_service_is_valid>
 801d698:	b338      	cbz	r0, 801d6ea <rcl_action_take_cancel_request+0x66>
 801d69a:	6820      	ldr	r0, [r4, #0]
 801d69c:	3004      	adds	r0, #4
 801d69e:	f7fe f999 	bl	801b9d4 <rcl_service_is_valid>
 801d6a2:	b310      	cbz	r0, 801d6ea <rcl_action_take_cancel_request+0x66>
 801d6a4:	6820      	ldr	r0, [r4, #0]
 801d6a6:	3008      	adds	r0, #8
 801d6a8:	f7fe f994 	bl	801b9d4 <rcl_service_is_valid>
 801d6ac:	b1e8      	cbz	r0, 801d6ea <rcl_action_take_cancel_request+0x66>
 801d6ae:	6820      	ldr	r0, [r4, #0]
 801d6b0:	300c      	adds	r0, #12
 801d6b2:	f7f6 fecd 	bl	8014450 <rcl_publisher_is_valid>
 801d6b6:	b1c0      	cbz	r0, 801d6ea <rcl_action_take_cancel_request+0x66>
 801d6b8:	6820      	ldr	r0, [r4, #0]
 801d6ba:	3010      	adds	r0, #16
 801d6bc:	f7f6 fec8 	bl	8014450 <rcl_publisher_is_valid>
 801d6c0:	b198      	cbz	r0, 801d6ea <rcl_action_take_cancel_request+0x66>
 801d6c2:	b1d5      	cbz	r5, 801d6fa <rcl_action_take_cancel_request+0x76>
 801d6c4:	b1ce      	cbz	r6, 801d6fa <rcl_action_take_cancel_request+0x76>
 801d6c6:	6820      	ldr	r0, [r4, #0]
 801d6c8:	462a      	mov	r2, r5
 801d6ca:	4631      	mov	r1, r6
 801d6cc:	3004      	adds	r0, #4
 801d6ce:	f7fe f929 	bl	801b924 <rcl_take_request>
 801d6d2:	b148      	cbz	r0, 801d6e8 <rcl_action_take_cancel_request+0x64>
 801d6d4:	280a      	cmp	r0, #10
 801d6d6:	d007      	beq.n	801d6e8 <rcl_action_take_cancel_request+0x64>
 801d6d8:	f240 2259 	movw	r2, #601	@ 0x259
 801d6dc:	f640 0399 	movw	r3, #2201	@ 0x899
 801d6e0:	4290      	cmp	r0, r2
 801d6e2:	bf0c      	ite	eq
 801d6e4:	4618      	moveq	r0, r3
 801d6e6:	2001      	movne	r0, #1
 801d6e8:	bd70      	pop	{r4, r5, r6, pc}
 801d6ea:	f7f7 ff0d 	bl	8015508 <rcutils_reset_error>
 801d6ee:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6f2:	bd70      	pop	{r4, r5, r6, pc}
 801d6f4:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6f8:	bd70      	pop	{r4, r5, r6, pc}
 801d6fa:	200b      	movs	r0, #11
 801d6fc:	bd70      	pop	{r4, r5, r6, pc}
 801d6fe:	f640 0098 	movw	r0, #2200	@ 0x898
 801d702:	4770      	bx	lr

0801d704 <rcl_action_send_cancel_response>:
 801d704:	b398      	cbz	r0, 801d76e <rcl_action_send_cancel_response+0x6a>
 801d706:	b570      	push	{r4, r5, r6, lr}
 801d708:	4604      	mov	r4, r0
 801d70a:	6800      	ldr	r0, [r0, #0]
 801d70c:	b350      	cbz	r0, 801d764 <rcl_action_send_cancel_response+0x60>
 801d70e:	460e      	mov	r6, r1
 801d710:	4615      	mov	r5, r2
 801d712:	f7fe f95f 	bl	801b9d4 <rcl_service_is_valid>
 801d716:	b300      	cbz	r0, 801d75a <rcl_action_send_cancel_response+0x56>
 801d718:	6820      	ldr	r0, [r4, #0]
 801d71a:	3004      	adds	r0, #4
 801d71c:	f7fe f95a 	bl	801b9d4 <rcl_service_is_valid>
 801d720:	b1d8      	cbz	r0, 801d75a <rcl_action_send_cancel_response+0x56>
 801d722:	6820      	ldr	r0, [r4, #0]
 801d724:	3008      	adds	r0, #8
 801d726:	f7fe f955 	bl	801b9d4 <rcl_service_is_valid>
 801d72a:	b1b0      	cbz	r0, 801d75a <rcl_action_send_cancel_response+0x56>
 801d72c:	6820      	ldr	r0, [r4, #0]
 801d72e:	300c      	adds	r0, #12
 801d730:	f7f6 fe8e 	bl	8014450 <rcl_publisher_is_valid>
 801d734:	b188      	cbz	r0, 801d75a <rcl_action_send_cancel_response+0x56>
 801d736:	6820      	ldr	r0, [r4, #0]
 801d738:	3010      	adds	r0, #16
 801d73a:	f7f6 fe89 	bl	8014450 <rcl_publisher_is_valid>
 801d73e:	b160      	cbz	r0, 801d75a <rcl_action_send_cancel_response+0x56>
 801d740:	b19d      	cbz	r5, 801d76a <rcl_action_send_cancel_response+0x66>
 801d742:	b196      	cbz	r6, 801d76a <rcl_action_send_cancel_response+0x66>
 801d744:	6820      	ldr	r0, [r4, #0]
 801d746:	462a      	mov	r2, r5
 801d748:	4631      	mov	r1, r6
 801d74a:	3004      	adds	r0, #4
 801d74c:	f7fe f92a 	bl	801b9a4 <rcl_send_response>
 801d750:	b110      	cbz	r0, 801d758 <rcl_action_send_cancel_response+0x54>
 801d752:	2802      	cmp	r0, #2
 801d754:	bf18      	it	ne
 801d756:	2001      	movne	r0, #1
 801d758:	bd70      	pop	{r4, r5, r6, pc}
 801d75a:	f7f7 fed5 	bl	8015508 <rcutils_reset_error>
 801d75e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d762:	bd70      	pop	{r4, r5, r6, pc}
 801d764:	f640 0098 	movw	r0, #2200	@ 0x898
 801d768:	bd70      	pop	{r4, r5, r6, pc}
 801d76a:	200b      	movs	r0, #11
 801d76c:	bd70      	pop	{r4, r5, r6, pc}
 801d76e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d772:	4770      	bx	lr

0801d774 <rcl_action_wait_set_add_action_server>:
 801d774:	2800      	cmp	r0, #0
 801d776:	d04d      	beq.n	801d814 <rcl_action_wait_set_add_action_server+0xa0>
 801d778:	b570      	push	{r4, r5, r6, lr}
 801d77a:	460c      	mov	r4, r1
 801d77c:	b159      	cbz	r1, 801d796 <rcl_action_wait_set_add_action_server+0x22>
 801d77e:	4605      	mov	r5, r0
 801d780:	6808      	ldr	r0, [r1, #0]
 801d782:	b140      	cbz	r0, 801d796 <rcl_action_wait_set_add_action_server+0x22>
 801d784:	4616      	mov	r6, r2
 801d786:	f7fe f925 	bl	801b9d4 <rcl_service_is_valid>
 801d78a:	b120      	cbz	r0, 801d796 <rcl_action_wait_set_add_action_server+0x22>
 801d78c:	6820      	ldr	r0, [r4, #0]
 801d78e:	3004      	adds	r0, #4
 801d790:	f7fe f920 	bl	801b9d4 <rcl_service_is_valid>
 801d794:	b910      	cbnz	r0, 801d79c <rcl_action_wait_set_add_action_server+0x28>
 801d796:	f640 0098 	movw	r0, #2200	@ 0x898
 801d79a:	bd70      	pop	{r4, r5, r6, pc}
 801d79c:	6820      	ldr	r0, [r4, #0]
 801d79e:	3008      	adds	r0, #8
 801d7a0:	f7fe f918 	bl	801b9d4 <rcl_service_is_valid>
 801d7a4:	2800      	cmp	r0, #0
 801d7a6:	d0f6      	beq.n	801d796 <rcl_action_wait_set_add_action_server+0x22>
 801d7a8:	6820      	ldr	r0, [r4, #0]
 801d7aa:	300c      	adds	r0, #12
 801d7ac:	f7f6 fe68 	bl	8014480 <rcl_publisher_is_valid_except_context>
 801d7b0:	2800      	cmp	r0, #0
 801d7b2:	d0f0      	beq.n	801d796 <rcl_action_wait_set_add_action_server+0x22>
 801d7b4:	6820      	ldr	r0, [r4, #0]
 801d7b6:	3010      	adds	r0, #16
 801d7b8:	f7f6 fe62 	bl	8014480 <rcl_publisher_is_valid_except_context>
 801d7bc:	2800      	cmp	r0, #0
 801d7be:	d0ea      	beq.n	801d796 <rcl_action_wait_set_add_action_server+0x22>
 801d7c0:	6821      	ldr	r1, [r4, #0]
 801d7c2:	4628      	mov	r0, r5
 801d7c4:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801d7c8:	f7ff fad0 	bl	801cd6c <rcl_wait_set_add_service>
 801d7cc:	2800      	cmp	r0, #0
 801d7ce:	d1e4      	bne.n	801d79a <rcl_action_wait_set_add_action_server+0x26>
 801d7d0:	6821      	ldr	r1, [r4, #0]
 801d7d2:	4628      	mov	r0, r5
 801d7d4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801d7d8:	3104      	adds	r1, #4
 801d7da:	f7ff fac7 	bl	801cd6c <rcl_wait_set_add_service>
 801d7de:	2800      	cmp	r0, #0
 801d7e0:	d1db      	bne.n	801d79a <rcl_action_wait_set_add_action_server+0x26>
 801d7e2:	6821      	ldr	r1, [r4, #0]
 801d7e4:	4628      	mov	r0, r5
 801d7e6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801d7ea:	3108      	adds	r1, #8
 801d7ec:	f7ff fabe 	bl	801cd6c <rcl_wait_set_add_service>
 801d7f0:	2800      	cmp	r0, #0
 801d7f2:	d1d2      	bne.n	801d79a <rcl_action_wait_set_add_action_server+0x26>
 801d7f4:	6821      	ldr	r1, [r4, #0]
 801d7f6:	4628      	mov	r0, r5
 801d7f8:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801d7fc:	3114      	adds	r1, #20
 801d7fe:	f7ff fa59 	bl	801ccb4 <rcl_wait_set_add_timer>
 801d802:	2800      	cmp	r0, #0
 801d804:	d1c9      	bne.n	801d79a <rcl_action_wait_set_add_action_server+0x26>
 801d806:	2e00      	cmp	r6, #0
 801d808:	d0c7      	beq.n	801d79a <rcl_action_wait_set_add_action_server+0x26>
 801d80a:	6823      	ldr	r3, [r4, #0]
 801d80c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801d810:	6033      	str	r3, [r6, #0]
 801d812:	bd70      	pop	{r4, r5, r6, pc}
 801d814:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d818:	4770      	bx	lr
 801d81a:	bf00      	nop

0801d81c <rcl_action_server_wait_set_get_entities_ready>:
 801d81c:	2800      	cmp	r0, #0
 801d81e:	d067      	beq.n	801d8f0 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d824:	460c      	mov	r4, r1
 801d826:	b161      	cbz	r1, 801d842 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d828:	4605      	mov	r5, r0
 801d82a:	6808      	ldr	r0, [r1, #0]
 801d82c:	b148      	cbz	r0, 801d842 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d82e:	4616      	mov	r6, r2
 801d830:	4698      	mov	r8, r3
 801d832:	f7fe f8cf 	bl	801b9d4 <rcl_service_is_valid>
 801d836:	b120      	cbz	r0, 801d842 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d838:	6820      	ldr	r0, [r4, #0]
 801d83a:	3004      	adds	r0, #4
 801d83c:	f7fe f8ca 	bl	801b9d4 <rcl_service_is_valid>
 801d840:	b918      	cbnz	r0, 801d84a <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d842:	f640 0098 	movw	r0, #2200	@ 0x898
 801d846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d84a:	6820      	ldr	r0, [r4, #0]
 801d84c:	3008      	adds	r0, #8
 801d84e:	f7fe f8c1 	bl	801b9d4 <rcl_service_is_valid>
 801d852:	2800      	cmp	r0, #0
 801d854:	d0f5      	beq.n	801d842 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d856:	6820      	ldr	r0, [r4, #0]
 801d858:	300c      	adds	r0, #12
 801d85a:	f7f6 fe11 	bl	8014480 <rcl_publisher_is_valid_except_context>
 801d85e:	2800      	cmp	r0, #0
 801d860:	d0ef      	beq.n	801d842 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d862:	6820      	ldr	r0, [r4, #0]
 801d864:	3010      	adds	r0, #16
 801d866:	f7f6 fe0b 	bl	8014480 <rcl_publisher_is_valid_except_context>
 801d86a:	2800      	cmp	r0, #0
 801d86c:	d0e9      	beq.n	801d842 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d86e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d872:	2a00      	cmp	r2, #0
 801d874:	bf18      	it	ne
 801d876:	2b00      	cmpne	r3, #0
 801d878:	bf0c      	ite	eq
 801d87a:	2101      	moveq	r1, #1
 801d87c:	2100      	movne	r1, #0
 801d87e:	f1b8 0f00 	cmp.w	r8, #0
 801d882:	bf08      	it	eq
 801d884:	f041 0101 	orreq.w	r1, r1, #1
 801d888:	bba9      	cbnz	r1, 801d8f6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d88a:	b3a6      	cbz	r6, 801d8f6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d88c:	6821      	ldr	r1, [r4, #0]
 801d88e:	2000      	movs	r0, #0
 801d890:	692c      	ldr	r4, [r5, #16]
 801d892:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801d896:	6a2f      	ldr	r7, [r5, #32]
 801d898:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d89c:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 801d8a0:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801d8a4:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d8a8:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d8ac:	1a64      	subs	r4, r4, r1
 801d8ae:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801d8b2:	fab4 f484 	clz	r4, r4
 801d8b6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d8ba:	0964      	lsrs	r4, r4, #5
 801d8bc:	7034      	strb	r4, [r6, #0]
 801d8be:	1d0c      	adds	r4, r1, #4
 801d8c0:	1b2c      	subs	r4, r5, r4
 801d8c2:	fab4 f484 	clz	r4, r4
 801d8c6:	0964      	lsrs	r4, r4, #5
 801d8c8:	f888 4000 	strb.w	r4, [r8]
 801d8cc:	f101 0408 	add.w	r4, r1, #8
 801d8d0:	1b1b      	subs	r3, r3, r4
 801d8d2:	9c06      	ldr	r4, [sp, #24]
 801d8d4:	fab3 f383 	clz	r3, r3
 801d8d8:	095b      	lsrs	r3, r3, #5
 801d8da:	7023      	strb	r3, [r4, #0]
 801d8dc:	f101 0314 	add.w	r3, r1, #20
 801d8e0:	1ad3      	subs	r3, r2, r3
 801d8e2:	9a07      	ldr	r2, [sp, #28]
 801d8e4:	fab3 f383 	clz	r3, r3
 801d8e8:	095b      	lsrs	r3, r3, #5
 801d8ea:	7013      	strb	r3, [r2, #0]
 801d8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d8f4:	4770      	bx	lr
 801d8f6:	200b      	movs	r0, #11
 801d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d8fc <_execute_event_handler>:
 801d8fc:	2002      	movs	r0, #2
 801d8fe:	4770      	bx	lr

0801d900 <_cancel_goal_event_handler>:
 801d900:	2003      	movs	r0, #3
 801d902:	4770      	bx	lr

0801d904 <_succeed_event_handler>:
 801d904:	2004      	movs	r0, #4
 801d906:	4770      	bx	lr

0801d908 <_abort_event_handler>:
 801d908:	2006      	movs	r0, #6
 801d90a:	4770      	bx	lr

0801d90c <_canceled_event_handler>:
 801d90c:	2005      	movs	r0, #5
 801d90e:	4770      	bx	lr

0801d910 <rcl_action_transition_goal_state>:
 801d910:	b2c2      	uxtb	r2, r0
 801d912:	2a06      	cmp	r2, #6
 801d914:	d810      	bhi.n	801d938 <rcl_action_transition_goal_state+0x28>
 801d916:	2904      	cmp	r1, #4
 801d918:	d80e      	bhi.n	801d938 <rcl_action_transition_goal_state+0x28>
 801d91a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d91e:	b410      	push	{r4}
 801d920:	1853      	adds	r3, r2, r1
 801d922:	4c06      	ldr	r4, [pc, #24]	@ (801d93c <rcl_action_transition_goal_state+0x2c>)
 801d924:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d928:	b113      	cbz	r3, 801d930 <rcl_action_transition_goal_state+0x20>
 801d92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d92e:	4718      	bx	r3
 801d930:	2000      	movs	r0, #0
 801d932:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d936:	4770      	bx	lr
 801d938:	2000      	movs	r0, #0
 801d93a:	4770      	bx	lr
 801d93c:	08025400 	.word	0x08025400

0801d940 <rcl_action_get_zero_initialized_cancel_response>:
 801d940:	b510      	push	{r4, lr}
 801d942:	4c07      	ldr	r4, [pc, #28]	@ (801d960 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d944:	4686      	mov	lr, r0
 801d946:	4684      	mov	ip, r0
 801d948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d94a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d94e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d950:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d954:	6823      	ldr	r3, [r4, #0]
 801d956:	4670      	mov	r0, lr
 801d958:	f8cc 3000 	str.w	r3, [ip]
 801d95c:	bd10      	pop	{r4, pc}
 801d95e:	bf00      	nop
 801d960:	0802548c 	.word	0x0802548c

0801d964 <rclc_action_send_result_request>:
 801d964:	b1d0      	cbz	r0, 801d99c <rclc_action_send_result_request+0x38>
 801d966:	4684      	mov	ip, r0
 801d968:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d96c:	b500      	push	{lr}
 801d96e:	b087      	sub	sp, #28
 801d970:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d974:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d978:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d97c:	f10d 0e08 	add.w	lr, sp, #8
 801d980:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d984:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d988:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801d98c:	a902      	add	r1, sp, #8
 801d98e:	3010      	adds	r0, #16
 801d990:	f7ff fbca 	bl	801d128 <rcl_action_send_result_request>
 801d994:	b920      	cbnz	r0, 801d9a0 <rclc_action_send_result_request+0x3c>
 801d996:	b007      	add	sp, #28
 801d998:	f85d fb04 	ldr.w	pc, [sp], #4
 801d99c:	200b      	movs	r0, #11
 801d99e:	4770      	bx	lr
 801d9a0:	9001      	str	r0, [sp, #4]
 801d9a2:	f7f7 fdb1 	bl	8015508 <rcutils_reset_error>
 801d9a6:	9801      	ldr	r0, [sp, #4]
 801d9a8:	b007      	add	sp, #28
 801d9aa:	f85d fb04 	ldr.w	pc, [sp], #4
 801d9ae:	bf00      	nop

0801d9b0 <rclc_action_take_goal_handle>:
 801d9b0:	b160      	cbz	r0, 801d9cc <rclc_action_take_goal_handle+0x1c>
 801d9b2:	6883      	ldr	r3, [r0, #8]
 801d9b4:	b143      	cbz	r3, 801d9c8 <rclc_action_take_goal_handle+0x18>
 801d9b6:	6819      	ldr	r1, [r3, #0]
 801d9b8:	2200      	movs	r2, #0
 801d9ba:	6081      	str	r1, [r0, #8]
 801d9bc:	721a      	strb	r2, [r3, #8]
 801d9be:	68c1      	ldr	r1, [r0, #12]
 801d9c0:	621a      	str	r2, [r3, #32]
 801d9c2:	849a      	strh	r2, [r3, #36]	@ 0x24
 801d9c4:	6019      	str	r1, [r3, #0]
 801d9c6:	60c3      	str	r3, [r0, #12]
 801d9c8:	4618      	mov	r0, r3
 801d9ca:	4770      	bx	lr
 801d9cc:	4603      	mov	r3, r0
 801d9ce:	e7fb      	b.n	801d9c8 <rclc_action_take_goal_handle+0x18>

0801d9d0 <rclc_action_remove_used_goal_handle>:
 801d9d0:	b180      	cbz	r0, 801d9f4 <rclc_action_remove_used_goal_handle+0x24>
 801d9d2:	b179      	cbz	r1, 801d9f4 <rclc_action_remove_used_goal_handle+0x24>
 801d9d4:	68c3      	ldr	r3, [r0, #12]
 801d9d6:	4299      	cmp	r1, r3
 801d9d8:	d00d      	beq.n	801d9f6 <rclc_action_remove_used_goal_handle+0x26>
 801d9da:	b12b      	cbz	r3, 801d9e8 <rclc_action_remove_used_goal_handle+0x18>
 801d9dc:	681a      	ldr	r2, [r3, #0]
 801d9de:	4291      	cmp	r1, r2
 801d9e0:	d003      	beq.n	801d9ea <rclc_action_remove_used_goal_handle+0x1a>
 801d9e2:	4613      	mov	r3, r2
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d1f9      	bne.n	801d9dc <rclc_action_remove_used_goal_handle+0xc>
 801d9e8:	4770      	bx	lr
 801d9ea:	680a      	ldr	r2, [r1, #0]
 801d9ec:	601a      	str	r2, [r3, #0]
 801d9ee:	6883      	ldr	r3, [r0, #8]
 801d9f0:	600b      	str	r3, [r1, #0]
 801d9f2:	6081      	str	r1, [r0, #8]
 801d9f4:	4770      	bx	lr
 801d9f6:	680b      	ldr	r3, [r1, #0]
 801d9f8:	60c3      	str	r3, [r0, #12]
 801d9fa:	e7f8      	b.n	801d9ee <rclc_action_remove_used_goal_handle+0x1e>

0801d9fc <rclc_action_find_goal_handle_by_uuid>:
 801d9fc:	b538      	push	{r3, r4, r5, lr}
 801d9fe:	b181      	cbz	r1, 801da22 <rclc_action_find_goal_handle_by_uuid+0x26>
 801da00:	b178      	cbz	r0, 801da22 <rclc_action_find_goal_handle_by_uuid+0x26>
 801da02:	68c4      	ldr	r4, [r0, #12]
 801da04:	460d      	mov	r5, r1
 801da06:	b914      	cbnz	r4, 801da0e <rclc_action_find_goal_handle_by_uuid+0x12>
 801da08:	e009      	b.n	801da1e <rclc_action_find_goal_handle_by_uuid+0x22>
 801da0a:	6824      	ldr	r4, [r4, #0]
 801da0c:	b13c      	cbz	r4, 801da1e <rclc_action_find_goal_handle_by_uuid+0x22>
 801da0e:	f104 0009 	add.w	r0, r4, #9
 801da12:	2210      	movs	r2, #16
 801da14:	4629      	mov	r1, r5
 801da16:	f004 fc65 	bl	80222e4 <memcmp>
 801da1a:	2800      	cmp	r0, #0
 801da1c:	d1f5      	bne.n	801da0a <rclc_action_find_goal_handle_by_uuid+0xe>
 801da1e:	4620      	mov	r0, r4
 801da20:	bd38      	pop	{r3, r4, r5, pc}
 801da22:	2400      	movs	r4, #0
 801da24:	4620      	mov	r0, r4
 801da26:	bd38      	pop	{r3, r4, r5, pc}

0801da28 <rclc_action_find_first_handle_by_status>:
 801da28:	b140      	cbz	r0, 801da3c <rclc_action_find_first_handle_by_status+0x14>
 801da2a:	68c0      	ldr	r0, [r0, #12]
 801da2c:	b910      	cbnz	r0, 801da34 <rclc_action_find_first_handle_by_status+0xc>
 801da2e:	e005      	b.n	801da3c <rclc_action_find_first_handle_by_status+0x14>
 801da30:	6800      	ldr	r0, [r0, #0]
 801da32:	b118      	cbz	r0, 801da3c <rclc_action_find_first_handle_by_status+0x14>
 801da34:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801da38:	428b      	cmp	r3, r1
 801da3a:	d1f9      	bne.n	801da30 <rclc_action_find_first_handle_by_status+0x8>
 801da3c:	4770      	bx	lr
 801da3e:	bf00      	nop

0801da40 <rclc_action_find_first_terminated_handle>:
 801da40:	b140      	cbz	r0, 801da54 <rclc_action_find_first_terminated_handle+0x14>
 801da42:	68c0      	ldr	r0, [r0, #12]
 801da44:	b910      	cbnz	r0, 801da4c <rclc_action_find_first_terminated_handle+0xc>
 801da46:	e005      	b.n	801da54 <rclc_action_find_first_terminated_handle+0x14>
 801da48:	6800      	ldr	r0, [r0, #0]
 801da4a:	b118      	cbz	r0, 801da54 <rclc_action_find_first_terminated_handle+0x14>
 801da4c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801da50:	2b03      	cmp	r3, #3
 801da52:	ddf9      	ble.n	801da48 <rclc_action_find_first_terminated_handle+0x8>
 801da54:	4770      	bx	lr
 801da56:	bf00      	nop

0801da58 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801da58:	b170      	cbz	r0, 801da78 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801da5a:	68c0      	ldr	r0, [r0, #12]
 801da5c:	b160      	cbz	r0, 801da78 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801da5e:	b410      	push	{r4}
 801da60:	e001      	b.n	801da66 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801da62:	6800      	ldr	r0, [r0, #0]
 801da64:	b128      	cbz	r0, 801da72 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801da66:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801da6a:	4299      	cmp	r1, r3
 801da6c:	bf08      	it	eq
 801da6e:	4294      	cmpeq	r4, r2
 801da70:	d1f7      	bne.n	801da62 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801da72:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da76:	4770      	bx	lr
 801da78:	4770      	bx	lr
 801da7a:	bf00      	nop

0801da7c <rclc_action_find_handle_by_result_request_sequence_number>:
 801da7c:	b170      	cbz	r0, 801da9c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801da7e:	68c0      	ldr	r0, [r0, #12]
 801da80:	b160      	cbz	r0, 801da9c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801da82:	b410      	push	{r4}
 801da84:	e001      	b.n	801da8a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801da86:	6800      	ldr	r0, [r0, #0]
 801da88:	b128      	cbz	r0, 801da96 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801da8a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801da8e:	4299      	cmp	r1, r3
 801da90:	bf08      	it	eq
 801da92:	4294      	cmpeq	r4, r2
 801da94:	d1f7      	bne.n	801da86 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801da96:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da9a:	4770      	bx	lr
 801da9c:	4770      	bx	lr
 801da9e:	bf00      	nop

0801daa0 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801daa0:	b170      	cbz	r0, 801dac0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801daa2:	68c0      	ldr	r0, [r0, #12]
 801daa4:	b160      	cbz	r0, 801dac0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801daa6:	b410      	push	{r4}
 801daa8:	e001      	b.n	801daae <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801daaa:	6800      	ldr	r0, [r0, #0]
 801daac:	b128      	cbz	r0, 801daba <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801daae:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801dab2:	4299      	cmp	r1, r3
 801dab4:	bf08      	it	eq
 801dab6:	4294      	cmpeq	r4, r2
 801dab8:	d1f7      	bne.n	801daaa <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801daba:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dabe:	4770      	bx	lr
 801dac0:	4770      	bx	lr
 801dac2:	bf00      	nop

0801dac4 <rclc_action_find_first_handle_with_goal_response>:
 801dac4:	b140      	cbz	r0, 801dad8 <rclc_action_find_first_handle_with_goal_response+0x14>
 801dac6:	68c0      	ldr	r0, [r0, #12]
 801dac8:	b910      	cbnz	r0, 801dad0 <rclc_action_find_first_handle_with_goal_response+0xc>
 801daca:	e005      	b.n	801dad8 <rclc_action_find_first_handle_with_goal_response+0x14>
 801dacc:	6800      	ldr	r0, [r0, #0]
 801dace:	b118      	cbz	r0, 801dad8 <rclc_action_find_first_handle_with_goal_response+0x14>
 801dad0:	f890 3020 	ldrb.w	r3, [r0, #32]
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d0f9      	beq.n	801dacc <rclc_action_find_first_handle_with_goal_response+0x8>
 801dad8:	4770      	bx	lr
 801dada:	bf00      	nop

0801dadc <rclc_action_find_first_handle_with_result_response>:
 801dadc:	b140      	cbz	r0, 801daf0 <rclc_action_find_first_handle_with_result_response+0x14>
 801dade:	68c0      	ldr	r0, [r0, #12]
 801dae0:	b910      	cbnz	r0, 801dae8 <rclc_action_find_first_handle_with_result_response+0xc>
 801dae2:	e005      	b.n	801daf0 <rclc_action_find_first_handle_with_result_response+0x14>
 801dae4:	6800      	ldr	r0, [r0, #0]
 801dae6:	b118      	cbz	r0, 801daf0 <rclc_action_find_first_handle_with_result_response+0x14>
 801dae8:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801daec:	2b00      	cmp	r3, #0
 801daee:	d0f9      	beq.n	801dae4 <rclc_action_find_first_handle_with_result_response+0x8>
 801daf0:	4770      	bx	lr
 801daf2:	bf00      	nop

0801daf4 <rclc_action_server_response_goal_request>:
 801daf4:	b198      	cbz	r0, 801db1e <rclc_action_server_response_goal_request+0x2a>
 801daf6:	2200      	movs	r2, #0
 801daf8:	460b      	mov	r3, r1
 801dafa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801dafe:	b510      	push	{r4, lr}
 801db00:	6844      	ldr	r4, [r0, #4]
 801db02:	b086      	sub	sp, #24
 801db04:	f104 0010 	add.w	r0, r4, #16
 801db08:	9205      	str	r2, [sp, #20]
 801db0a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801db0e:	aa03      	add	r2, sp, #12
 801db10:	f88d 300c 	strb.w	r3, [sp, #12]
 801db14:	f7ff fd3e 	bl	801d594 <rcl_action_send_goal_response>
 801db18:	b918      	cbnz	r0, 801db22 <rclc_action_server_response_goal_request+0x2e>
 801db1a:	b006      	add	sp, #24
 801db1c:	bd10      	pop	{r4, pc}
 801db1e:	200b      	movs	r0, #11
 801db20:	4770      	bx	lr
 801db22:	9001      	str	r0, [sp, #4]
 801db24:	f7f7 fcf0 	bl	8015508 <rcutils_reset_error>
 801db28:	9801      	ldr	r0, [sp, #4]
 801db2a:	b006      	add	sp, #24
 801db2c:	bd10      	pop	{r4, pc}
 801db2e:	bf00      	nop

0801db30 <rclc_action_server_goal_cancel_accept>:
 801db30:	b310      	cbz	r0, 801db78 <rclc_action_server_goal_cancel_accept+0x48>
 801db32:	b510      	push	{r4, lr}
 801db34:	b090      	sub	sp, #64	@ 0x40
 801db36:	4604      	mov	r4, r0
 801db38:	a806      	add	r0, sp, #24
 801db3a:	f7ff ff01 	bl	801d940 <rcl_action_get_zero_initialized_cancel_response>
 801db3e:	2300      	movs	r3, #0
 801db40:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801db44:	46ec      	mov	ip, sp
 801db46:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801db4a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801db4e:	f88d 3018 	strb.w	r3, [sp, #24]
 801db52:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801db56:	f8cd d01c 	str.w	sp, [sp, #28]
 801db5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801db5e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801db80 <rclc_action_server_goal_cancel_accept+0x50>
 801db62:	6860      	ldr	r0, [r4, #4]
 801db64:	aa06      	add	r2, sp, #24
 801db66:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801db6a:	3010      	adds	r0, #16
 801db6c:	ed8d 7b08 	vstr	d7, [sp, #32]
 801db70:	f7ff fdc8 	bl	801d704 <rcl_action_send_cancel_response>
 801db74:	b010      	add	sp, #64	@ 0x40
 801db76:	bd10      	pop	{r4, pc}
 801db78:	200b      	movs	r0, #11
 801db7a:	4770      	bx	lr
 801db7c:	f3af 8000 	nop.w
 801db80:	00000001 	.word	0x00000001
 801db84:	00000001 	.word	0x00000001

0801db88 <rclc_action_server_goal_cancel_reject>:
 801db88:	b082      	sub	sp, #8
 801db8a:	b530      	push	{r4, r5, lr}
 801db8c:	b08b      	sub	sp, #44	@ 0x2c
 801db8e:	ac0e      	add	r4, sp, #56	@ 0x38
 801db90:	e884 000c 	stmia.w	r4, {r2, r3}
 801db94:	b188      	cbz	r0, 801dbba <rclc_action_server_goal_cancel_reject+0x32>
 801db96:	4604      	mov	r4, r0
 801db98:	a801      	add	r0, sp, #4
 801db9a:	460d      	mov	r5, r1
 801db9c:	f7ff fed0 	bl	801d940 <rcl_action_get_zero_initialized_cancel_response>
 801dba0:	aa01      	add	r2, sp, #4
 801dba2:	a90e      	add	r1, sp, #56	@ 0x38
 801dba4:	f104 0010 	add.w	r0, r4, #16
 801dba8:	f88d 5004 	strb.w	r5, [sp, #4]
 801dbac:	f7ff fdaa 	bl	801d704 <rcl_action_send_cancel_response>
 801dbb0:	b00b      	add	sp, #44	@ 0x2c
 801dbb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dbb6:	b002      	add	sp, #8
 801dbb8:	4770      	bx	lr
 801dbba:	200b      	movs	r0, #11
 801dbbc:	b00b      	add	sp, #44	@ 0x2c
 801dbbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dbc2:	b002      	add	sp, #8
 801dbc4:	4770      	bx	lr
 801dbc6:	bf00      	nop

0801dbc8 <__atomic_load_8>:
 801dbc8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801dbcc:	4a16      	ldr	r2, [pc, #88]	@ (801dc28 <__atomic_load_8+0x60>)
 801dbce:	4b17      	ldr	r3, [pc, #92]	@ (801dc2c <__atomic_load_8+0x64>)
 801dbd0:	f04f 0c01 	mov.w	ip, #1
 801dbd4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801dbd8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801dbdc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801dbe0:	fb02 f101 	mul.w	r1, r2, r1
 801dbe4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801dbe8:	fba3 2301 	umull	r2, r3, r3, r1
 801dbec:	091b      	lsrs	r3, r3, #4
 801dbee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801dbf2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801dbf6:	b4d0      	push	{r4, r6, r7}
 801dbf8:	1ac9      	subs	r1, r1, r3
 801dbfa:	4c0d      	ldr	r4, [pc, #52]	@ (801dc30 <__atomic_load_8+0x68>)
 801dbfc:	1862      	adds	r2, r4, r1
 801dbfe:	e8d2 3f4f 	ldrexb	r3, [r2]
 801dc02:	e8c2 cf46 	strexb	r6, ip, [r2]
 801dc06:	2e00      	cmp	r6, #0
 801dc08:	d1f9      	bne.n	801dbfe <__atomic_load_8+0x36>
 801dc0a:	b2db      	uxtb	r3, r3
 801dc0c:	f3bf 8f5b 	dmb	ish
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d1f4      	bne.n	801dbfe <__atomic_load_8+0x36>
 801dc14:	e9d0 6700 	ldrd	r6, r7, [r0]
 801dc18:	f3bf 8f5b 	dmb	ish
 801dc1c:	5463      	strb	r3, [r4, r1]
 801dc1e:	4630      	mov	r0, r6
 801dc20:	4639      	mov	r1, r7
 801dc22:	bcd0      	pop	{r4, r6, r7}
 801dc24:	4770      	bx	lr
 801dc26:	bf00      	nop
 801dc28:	27d4eb2d 	.word	0x27d4eb2d
 801dc2c:	b21642c9 	.word	0xb21642c9
 801dc30:	240694b8 	.word	0x240694b8

0801dc34 <__atomic_store_8>:
 801dc34:	b570      	push	{r4, r5, r6, lr}
 801dc36:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801dc3a:	4916      	ldr	r1, [pc, #88]	@ (801dc94 <__atomic_store_8+0x60>)
 801dc3c:	4c16      	ldr	r4, [pc, #88]	@ (801dc98 <__atomic_store_8+0x64>)
 801dc3e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801dc42:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801dc46:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801dc4a:	fb01 fe0e 	mul.w	lr, r1, lr
 801dc4e:	4913      	ldr	r1, [pc, #76]	@ (801dc9c <__atomic_store_8+0x68>)
 801dc50:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801dc54:	fba1 510e 	umull	r5, r1, r1, lr
 801dc58:	f04f 0501 	mov.w	r5, #1
 801dc5c:	0909      	lsrs	r1, r1, #4
 801dc5e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801dc62:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801dc66:	ebae 0e01 	sub.w	lr, lr, r1
 801dc6a:	eb04 0c0e 	add.w	ip, r4, lr
 801dc6e:	e8dc 1f4f 	ldrexb	r1, [ip]
 801dc72:	e8cc 5f46 	strexb	r6, r5, [ip]
 801dc76:	2e00      	cmp	r6, #0
 801dc78:	d1f9      	bne.n	801dc6e <__atomic_store_8+0x3a>
 801dc7a:	b2c9      	uxtb	r1, r1
 801dc7c:	f3bf 8f5b 	dmb	ish
 801dc80:	2900      	cmp	r1, #0
 801dc82:	d1f4      	bne.n	801dc6e <__atomic_store_8+0x3a>
 801dc84:	e9c0 2300 	strd	r2, r3, [r0]
 801dc88:	f3bf 8f5b 	dmb	ish
 801dc8c:	f804 100e 	strb.w	r1, [r4, lr]
 801dc90:	bd70      	pop	{r4, r5, r6, pc}
 801dc92:	bf00      	nop
 801dc94:	27d4eb2d 	.word	0x27d4eb2d
 801dc98:	240694b8 	.word	0x240694b8
 801dc9c:	b21642c9 	.word	0xb21642c9

0801dca0 <__atomic_exchange_8>:
 801dca0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801dca4:	4917      	ldr	r1, [pc, #92]	@ (801dd04 <__atomic_exchange_8+0x64>)
 801dca6:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801dcaa:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801dcae:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801dcb2:	fb01 fc0c 	mul.w	ip, r1, ip
 801dcb6:	4914      	ldr	r1, [pc, #80]	@ (801dd08 <__atomic_exchange_8+0x68>)
 801dcb8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801dcbc:	b570      	push	{r4, r5, r6, lr}
 801dcbe:	4686      	mov	lr, r0
 801dcc0:	fba1 010c 	umull	r0, r1, r1, ip
 801dcc4:	4d11      	ldr	r5, [pc, #68]	@ (801dd0c <__atomic_exchange_8+0x6c>)
 801dcc6:	f04f 0001 	mov.w	r0, #1
 801dcca:	0909      	lsrs	r1, r1, #4
 801dccc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801dcd0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801dcd4:	ebac 0c01 	sub.w	ip, ip, r1
 801dcd8:	eb05 010c 	add.w	r1, r5, ip
 801dcdc:	e8d1 4f4f 	ldrexb	r4, [r1]
 801dce0:	e8c1 0f46 	strexb	r6, r0, [r1]
 801dce4:	2e00      	cmp	r6, #0
 801dce6:	d1f9      	bne.n	801dcdc <__atomic_exchange_8+0x3c>
 801dce8:	b2e4      	uxtb	r4, r4
 801dcea:	f3bf 8f5b 	dmb	ish
 801dcee:	2c00      	cmp	r4, #0
 801dcf0:	d1f4      	bne.n	801dcdc <__atomic_exchange_8+0x3c>
 801dcf2:	e9de 0100 	ldrd	r0, r1, [lr]
 801dcf6:	e9ce 2300 	strd	r2, r3, [lr]
 801dcfa:	f3bf 8f5b 	dmb	ish
 801dcfe:	f805 400c 	strb.w	r4, [r5, ip]
 801dd02:	bd70      	pop	{r4, r5, r6, pc}
 801dd04:	27d4eb2d 	.word	0x27d4eb2d
 801dd08:	b21642c9 	.word	0xb21642c9
 801dd0c:	240694b8 	.word	0x240694b8

0801dd10 <rcutils_get_env>:
 801dd10:	b168      	cbz	r0, 801dd2e <rcutils_get_env+0x1e>
 801dd12:	b510      	push	{r4, lr}
 801dd14:	460c      	mov	r4, r1
 801dd16:	b129      	cbz	r1, 801dd24 <rcutils_get_env+0x14>
 801dd18:	f003 fe64 	bl	80219e4 <getenv>
 801dd1c:	b120      	cbz	r0, 801dd28 <rcutils_get_env+0x18>
 801dd1e:	6020      	str	r0, [r4, #0]
 801dd20:	2000      	movs	r0, #0
 801dd22:	bd10      	pop	{r4, pc}
 801dd24:	4803      	ldr	r0, [pc, #12]	@ (801dd34 <rcutils_get_env+0x24>)
 801dd26:	bd10      	pop	{r4, pc}
 801dd28:	4b03      	ldr	r3, [pc, #12]	@ (801dd38 <rcutils_get_env+0x28>)
 801dd2a:	6023      	str	r3, [r4, #0]
 801dd2c:	bd10      	pop	{r4, pc}
 801dd2e:	4803      	ldr	r0, [pc, #12]	@ (801dd3c <rcutils_get_env+0x2c>)
 801dd30:	4770      	bx	lr
 801dd32:	bf00      	nop
 801dd34:	080254cc 	.word	0x080254cc
 801dd38:	08025954 	.word	0x08025954
 801dd3c:	080254b0 	.word	0x080254b0

0801dd40 <rcutils_is_directory>:
 801dd40:	2000      	movs	r0, #0
 801dd42:	4770      	bx	lr

0801dd44 <rcutils_join_path>:
 801dd44:	b082      	sub	sp, #8
 801dd46:	2000      	movs	r0, #0
 801dd48:	e88d 000c 	stmia.w	sp, {r2, r3}
 801dd4c:	b002      	add	sp, #8
 801dd4e:	4770      	bx	lr

0801dd50 <rcutils_to_native_path>:
 801dd50:	b084      	sub	sp, #16
 801dd52:	2000      	movs	r0, #0
 801dd54:	f10d 0c04 	add.w	ip, sp, #4
 801dd58:	b004      	add	sp, #16
 801dd5a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801dd5e:	4770      	bx	lr

0801dd60 <rcutils_format_string_limit>:
 801dd60:	b40f      	push	{r0, r1, r2, r3}
 801dd62:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd64:	b083      	sub	sp, #12
 801dd66:	ac08      	add	r4, sp, #32
 801dd68:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801dd6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801dd6e:	b326      	cbz	r6, 801ddba <rcutils_format_string_limit+0x5a>
 801dd70:	a808      	add	r0, sp, #32
 801dd72:	f7f7 fba5 	bl	80154c0 <rcutils_allocator_is_valid>
 801dd76:	b300      	cbz	r0, 801ddba <rcutils_format_string_limit+0x5a>
 801dd78:	2100      	movs	r1, #0
 801dd7a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801dd7c:	4632      	mov	r2, r6
 801dd7e:	4608      	mov	r0, r1
 801dd80:	e9cd 3300 	strd	r3, r3, [sp]
 801dd84:	f000 f906 	bl	801df94 <rcutils_vsnprintf>
 801dd88:	1c43      	adds	r3, r0, #1
 801dd8a:	4605      	mov	r5, r0
 801dd8c:	d015      	beq.n	801ddba <rcutils_format_string_limit+0x5a>
 801dd8e:	1c47      	adds	r7, r0, #1
 801dd90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dd92:	429f      	cmp	r7, r3
 801dd94:	d901      	bls.n	801dd9a <rcutils_format_string_limit+0x3a>
 801dd96:	1e5d      	subs	r5, r3, #1
 801dd98:	461f      	mov	r7, r3
 801dd9a:	9b08      	ldr	r3, [sp, #32]
 801dd9c:	4638      	mov	r0, r7
 801dd9e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dda0:	4798      	blx	r3
 801dda2:	4604      	mov	r4, r0
 801dda4:	b148      	cbz	r0, 801ddba <rcutils_format_string_limit+0x5a>
 801dda6:	4632      	mov	r2, r6
 801dda8:	4639      	mov	r1, r7
 801ddaa:	9b01      	ldr	r3, [sp, #4]
 801ddac:	f000 f8f2 	bl	801df94 <rcutils_vsnprintf>
 801ddb0:	2800      	cmp	r0, #0
 801ddb2:	db09      	blt.n	801ddc8 <rcutils_format_string_limit+0x68>
 801ddb4:	2300      	movs	r3, #0
 801ddb6:	5563      	strb	r3, [r4, r5]
 801ddb8:	e000      	b.n	801ddbc <rcutils_format_string_limit+0x5c>
 801ddba:	2400      	movs	r4, #0
 801ddbc:	4620      	mov	r0, r4
 801ddbe:	b003      	add	sp, #12
 801ddc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ddc4:	b004      	add	sp, #16
 801ddc6:	4770      	bx	lr
 801ddc8:	4620      	mov	r0, r4
 801ddca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddcc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ddce:	2400      	movs	r4, #0
 801ddd0:	4798      	blx	r3
 801ddd2:	e7f3      	b.n	801ddbc <rcutils_format_string_limit+0x5c>

0801ddd4 <rcutils_repl_str>:
 801ddd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddd8:	ed2d 8b02 	vpush	{d8}
 801dddc:	b087      	sub	sp, #28
 801ddde:	2600      	movs	r6, #0
 801dde0:	4680      	mov	r8, r0
 801dde2:	468a      	mov	sl, r1
 801dde4:	9000      	str	r0, [sp, #0]
 801dde6:	4608      	mov	r0, r1
 801dde8:	ee08 2a10 	vmov	s16, r2
 801ddec:	4699      	mov	r9, r3
 801ddee:	2510      	movs	r5, #16
 801ddf0:	f7e2 fa80 	bl	80002f4 <strlen>
 801ddf4:	4637      	mov	r7, r6
 801ddf6:	46b3      	mov	fp, r6
 801ddf8:	9001      	str	r0, [sp, #4]
 801ddfa:	e01e      	b.n	801de3a <rcutils_repl_str+0x66>
 801ddfc:	f10b 0b01 	add.w	fp, fp, #1
 801de00:	9b01      	ldr	r3, [sp, #4]
 801de02:	455e      	cmp	r6, fp
 801de04:	eb04 0803 	add.w	r8, r4, r3
 801de08:	d211      	bcs.n	801de2e <rcutils_repl_str+0x5a>
 801de0a:	442e      	add	r6, r5
 801de0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801de10:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801de14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801de18:	00b1      	lsls	r1, r6, #2
 801de1a:	4798      	blx	r3
 801de1c:	2800      	cmp	r0, #0
 801de1e:	f000 8088 	beq.w	801df32 <rcutils_repl_str+0x15e>
 801de22:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801de26:	4607      	mov	r7, r0
 801de28:	bf28      	it	cs
 801de2a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801de2e:	9a00      	ldr	r2, [sp, #0]
 801de30:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801de34:	1aa4      	subs	r4, r4, r2
 801de36:	f843 4c04 	str.w	r4, [r3, #-4]
 801de3a:	4651      	mov	r1, sl
 801de3c:	4640      	mov	r0, r8
 801de3e:	f004 faa2 	bl	8022386 <strstr>
 801de42:	4604      	mov	r4, r0
 801de44:	4638      	mov	r0, r7
 801de46:	2c00      	cmp	r4, #0
 801de48:	d1d8      	bne.n	801ddfc <rcutils_repl_str+0x28>
 801de4a:	4640      	mov	r0, r8
 801de4c:	f7e2 fa52 	bl	80002f4 <strlen>
 801de50:	9b00      	ldr	r3, [sp, #0]
 801de52:	eba8 0803 	sub.w	r8, r8, r3
 801de56:	eb08 0400 	add.w	r4, r8, r0
 801de5a:	9402      	str	r4, [sp, #8]
 801de5c:	f1bb 0f00 	cmp.w	fp, #0
 801de60:	d045      	beq.n	801deee <rcutils_repl_str+0x11a>
 801de62:	ee18 0a10 	vmov	r0, s16
 801de66:	f7e2 fa45 	bl	80002f4 <strlen>
 801de6a:	9a01      	ldr	r2, [sp, #4]
 801de6c:	4606      	mov	r6, r0
 801de6e:	f8d9 3000 	ldr.w	r3, [r9]
 801de72:	1a82      	subs	r2, r0, r2
 801de74:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801de78:	fb0b 4202 	mla	r2, fp, r2, r4
 801de7c:	1c50      	adds	r0, r2, #1
 801de7e:	9205      	str	r2, [sp, #20]
 801de80:	4798      	blx	r3
 801de82:	4682      	mov	sl, r0
 801de84:	2800      	cmp	r0, #0
 801de86:	d054      	beq.n	801df32 <rcutils_repl_str+0x15e>
 801de88:	683a      	ldr	r2, [r7, #0]
 801de8a:	463d      	mov	r5, r7
 801de8c:	9900      	ldr	r1, [sp, #0]
 801de8e:	2401      	movs	r4, #1
 801de90:	f004 fb71 	bl	8022576 <memcpy>
 801de94:	683b      	ldr	r3, [r7, #0]
 801de96:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801de9a:	eb0a 0803 	add.w	r8, sl, r3
 801de9e:	ee18 7a10 	vmov	r7, s16
 801dea2:	f8dd a000 	ldr.w	sl, [sp]
 801dea6:	f8cd 9000 	str.w	r9, [sp]
 801deaa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801deae:	4632      	mov	r2, r6
 801deb0:	4639      	mov	r1, r7
 801deb2:	4640      	mov	r0, r8
 801deb4:	44b0      	add	r8, r6
 801deb6:	f004 fb5e 	bl	8022576 <memcpy>
 801deba:	f855 2b04 	ldr.w	r2, [r5], #4
 801debe:	45a3      	cmp	fp, r4
 801dec0:	444a      	add	r2, r9
 801dec2:	eb0a 0102 	add.w	r1, sl, r2
 801dec6:	d02a      	beq.n	801df1e <rcutils_repl_str+0x14a>
 801dec8:	6828      	ldr	r0, [r5, #0]
 801deca:	1a82      	subs	r2, r0, r2
 801decc:	4640      	mov	r0, r8
 801dece:	4490      	add	r8, r2
 801ded0:	f004 fb51 	bl	8022576 <memcpy>
 801ded4:	1c62      	adds	r2, r4, #1
 801ded6:	45a3      	cmp	fp, r4
 801ded8:	4614      	mov	r4, r2
 801deda:	d8e8      	bhi.n	801deae <rcutils_repl_str+0xda>
 801dedc:	f8dd 9000 	ldr.w	r9, [sp]
 801dee0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801dee4:	2300      	movs	r3, #0
 801dee6:	9a05      	ldr	r2, [sp, #20]
 801dee8:	f80a 3002 	strb.w	r3, [sl, r2]
 801deec:	e00b      	b.n	801df06 <rcutils_repl_str+0x132>
 801deee:	4620      	mov	r0, r4
 801def0:	f8d9 3000 	ldr.w	r3, [r9]
 801def4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801def8:	3001      	adds	r0, #1
 801defa:	4798      	blx	r3
 801defc:	4682      	mov	sl, r0
 801defe:	b110      	cbz	r0, 801df06 <rcutils_repl_str+0x132>
 801df00:	9900      	ldr	r1, [sp, #0]
 801df02:	f004 fb30 	bl	8022566 <strcpy>
 801df06:	4638      	mov	r0, r7
 801df08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801df0c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801df10:	4798      	blx	r3
 801df12:	4650      	mov	r0, sl
 801df14:	b007      	add	sp, #28
 801df16:	ecbd 8b02 	vpop	{d8}
 801df1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df1e:	9b02      	ldr	r3, [sp, #8]
 801df20:	4640      	mov	r0, r8
 801df22:	f8dd 9000 	ldr.w	r9, [sp]
 801df26:	1a9a      	subs	r2, r3, r2
 801df28:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801df2c:	f004 fb23 	bl	8022576 <memcpy>
 801df30:	e7d8      	b.n	801dee4 <rcutils_repl_str+0x110>
 801df32:	f04f 0a00 	mov.w	sl, #0
 801df36:	e7e6      	b.n	801df06 <rcutils_repl_str+0x132>

0801df38 <rcutils_snprintf>:
 801df38:	b40c      	push	{r2, r3}
 801df3a:	b530      	push	{r4, r5, lr}
 801df3c:	b083      	sub	sp, #12
 801df3e:	ab06      	add	r3, sp, #24
 801df40:	f853 2b04 	ldr.w	r2, [r3], #4
 801df44:	9301      	str	r3, [sp, #4]
 801df46:	b1e2      	cbz	r2, 801df82 <rcutils_snprintf+0x4a>
 801df48:	fab0 f480 	clz	r4, r0
 801df4c:	fab1 f581 	clz	r5, r1
 801df50:	ea50 0c01 	orrs.w	ip, r0, r1
 801df54:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801df58:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801df5c:	d008      	beq.n	801df70 <rcutils_snprintf+0x38>
 801df5e:	b984      	cbnz	r4, 801df82 <rcutils_snprintf+0x4a>
 801df60:	b97d      	cbnz	r5, 801df82 <rcutils_snprintf+0x4a>
 801df62:	f004 f91d 	bl	80221a0 <vsniprintf>
 801df66:	b003      	add	sp, #12
 801df68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df6c:	b002      	add	sp, #8
 801df6e:	4770      	bx	lr
 801df70:	4661      	mov	r1, ip
 801df72:	4660      	mov	r0, ip
 801df74:	f004 f914 	bl	80221a0 <vsniprintf>
 801df78:	b003      	add	sp, #12
 801df7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df7e:	b002      	add	sp, #8
 801df80:	4770      	bx	lr
 801df82:	f004 fac3 	bl	802250c <__errno>
 801df86:	2216      	movs	r2, #22
 801df88:	4603      	mov	r3, r0
 801df8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df8e:	601a      	str	r2, [r3, #0]
 801df90:	e7e9      	b.n	801df66 <rcutils_snprintf+0x2e>
 801df92:	bf00      	nop

0801df94 <rcutils_vsnprintf>:
 801df94:	b570      	push	{r4, r5, r6, lr}
 801df96:	b1b2      	cbz	r2, 801dfc6 <rcutils_vsnprintf+0x32>
 801df98:	fab0 f480 	clz	r4, r0
 801df9c:	fab1 f581 	clz	r5, r1
 801dfa0:	ea50 0c01 	orrs.w	ip, r0, r1
 801dfa4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801dfa8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801dfac:	d005      	beq.n	801dfba <rcutils_vsnprintf+0x26>
 801dfae:	b954      	cbnz	r4, 801dfc6 <rcutils_vsnprintf+0x32>
 801dfb0:	b94d      	cbnz	r5, 801dfc6 <rcutils_vsnprintf+0x32>
 801dfb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfb6:	f004 b8f3 	b.w	80221a0 <vsniprintf>
 801dfba:	4661      	mov	r1, ip
 801dfbc:	4660      	mov	r0, ip
 801dfbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfc2:	f004 b8ed 	b.w	80221a0 <vsniprintf>
 801dfc6:	f004 faa1 	bl	802250c <__errno>
 801dfca:	2316      	movs	r3, #22
 801dfcc:	6003      	str	r3, [r0, #0]
 801dfce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dfd2:	bd70      	pop	{r4, r5, r6, pc}

0801dfd4 <rcutils_strdup>:
 801dfd4:	b084      	sub	sp, #16
 801dfd6:	b570      	push	{r4, r5, r6, lr}
 801dfd8:	b082      	sub	sp, #8
 801dfda:	4605      	mov	r5, r0
 801dfdc:	ac07      	add	r4, sp, #28
 801dfde:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801dfe2:	b1b0      	cbz	r0, 801e012 <rcutils_strdup+0x3e>
 801dfe4:	f7e2 f986 	bl	80002f4 <strlen>
 801dfe8:	1c42      	adds	r2, r0, #1
 801dfea:	9b07      	ldr	r3, [sp, #28]
 801dfec:	4606      	mov	r6, r0
 801dfee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dff0:	4610      	mov	r0, r2
 801dff2:	9201      	str	r2, [sp, #4]
 801dff4:	4798      	blx	r3
 801dff6:	4604      	mov	r4, r0
 801dff8:	b128      	cbz	r0, 801e006 <rcutils_strdup+0x32>
 801dffa:	9a01      	ldr	r2, [sp, #4]
 801dffc:	4629      	mov	r1, r5
 801dffe:	f004 faba 	bl	8022576 <memcpy>
 801e002:	2300      	movs	r3, #0
 801e004:	55a3      	strb	r3, [r4, r6]
 801e006:	4620      	mov	r0, r4
 801e008:	b002      	add	sp, #8
 801e00a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e00e:	b004      	add	sp, #16
 801e010:	4770      	bx	lr
 801e012:	4604      	mov	r4, r0
 801e014:	e7f7      	b.n	801e006 <rcutils_strdup+0x32>
 801e016:	bf00      	nop

0801e018 <rcutils_strndup>:
 801e018:	b082      	sub	sp, #8
 801e01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e01c:	ac06      	add	r4, sp, #24
 801e01e:	4605      	mov	r5, r0
 801e020:	e884 000c 	stmia.w	r4, {r2, r3}
 801e024:	b188      	cbz	r0, 801e04a <rcutils_strndup+0x32>
 801e026:	1c4f      	adds	r7, r1, #1
 801e028:	460e      	mov	r6, r1
 801e02a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e02c:	4638      	mov	r0, r7
 801e02e:	4790      	blx	r2
 801e030:	4604      	mov	r4, r0
 801e032:	b128      	cbz	r0, 801e040 <rcutils_strndup+0x28>
 801e034:	463a      	mov	r2, r7
 801e036:	4629      	mov	r1, r5
 801e038:	f004 fa9d 	bl	8022576 <memcpy>
 801e03c:	2300      	movs	r3, #0
 801e03e:	55a3      	strb	r3, [r4, r6]
 801e040:	4620      	mov	r0, r4
 801e042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e046:	b002      	add	sp, #8
 801e048:	4770      	bx	lr
 801e04a:	4604      	mov	r4, r0
 801e04c:	e7f8      	b.n	801e040 <rcutils_strndup+0x28>
 801e04e:	bf00      	nop

0801e050 <rcutils_get_zero_initialized_string_map>:
 801e050:	2000      	movs	r0, #0
 801e052:	4b01      	ldr	r3, [pc, #4]	@ (801e058 <rcutils_get_zero_initialized_string_map+0x8>)
 801e054:	6018      	str	r0, [r3, #0]
 801e056:	4770      	bx	lr
 801e058:	240694d0 	.word	0x240694d0

0801e05c <rcutils_string_map_reserve>:
 801e05c:	2800      	cmp	r0, #0
 801e05e:	d05e      	beq.n	801e11e <rcutils_string_map_reserve+0xc2>
 801e060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e064:	460c      	mov	r4, r1
 801e066:	6801      	ldr	r1, [r0, #0]
 801e068:	b082      	sub	sp, #8
 801e06a:	4605      	mov	r5, r0
 801e06c:	b129      	cbz	r1, 801e07a <rcutils_string_map_reserve+0x1e>
 801e06e:	68cb      	ldr	r3, [r1, #12]
 801e070:	42a3      	cmp	r3, r4
 801e072:	d906      	bls.n	801e082 <rcutils_string_map_reserve+0x26>
 801e074:	461c      	mov	r4, r3
 801e076:	2900      	cmp	r1, #0
 801e078:	d1f9      	bne.n	801e06e <rcutils_string_map_reserve+0x12>
 801e07a:	201f      	movs	r0, #31
 801e07c:	b002      	add	sp, #8
 801e07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e082:	688b      	ldr	r3, [r1, #8]
 801e084:	42a3      	cmp	r3, r4
 801e086:	d046      	beq.n	801e116 <rcutils_string_map_reserve+0xba>
 801e088:	6a0e      	ldr	r6, [r1, #32]
 801e08a:	2c00      	cmp	r4, #0
 801e08c:	d033      	beq.n	801e0f6 <rcutils_string_map_reserve+0x9a>
 801e08e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801e092:	d242      	bcs.n	801e11a <rcutils_string_map_reserve+0xbe>
 801e094:	00a7      	lsls	r7, r4, #2
 801e096:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801e09a:	6808      	ldr	r0, [r1, #0]
 801e09c:	4632      	mov	r2, r6
 801e09e:	4639      	mov	r1, r7
 801e0a0:	47c0      	blx	r8
 801e0a2:	2800      	cmp	r0, #0
 801e0a4:	d039      	beq.n	801e11a <rcutils_string_map_reserve+0xbe>
 801e0a6:	682b      	ldr	r3, [r5, #0]
 801e0a8:	4632      	mov	r2, r6
 801e0aa:	4639      	mov	r1, r7
 801e0ac:	6018      	str	r0, [r3, #0]
 801e0ae:	6858      	ldr	r0, [r3, #4]
 801e0b0:	47c0      	blx	r8
 801e0b2:	2800      	cmp	r0, #0
 801e0b4:	d031      	beq.n	801e11a <rcutils_string_map_reserve+0xbe>
 801e0b6:	682d      	ldr	r5, [r5, #0]
 801e0b8:	68ab      	ldr	r3, [r5, #8]
 801e0ba:	6068      	str	r0, [r5, #4]
 801e0bc:	42a3      	cmp	r3, r4
 801e0be:	d225      	bcs.n	801e10c <rcutils_string_map_reserve+0xb0>
 801e0c0:	682a      	ldr	r2, [r5, #0]
 801e0c2:	eb00 0c07 	add.w	ip, r0, r7
 801e0c6:	0099      	lsls	r1, r3, #2
 801e0c8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801e0cc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801e0d0:	45e6      	cmp	lr, ip
 801e0d2:	d203      	bcs.n	801e0dc <rcutils_string_map_reserve+0x80>
 801e0d4:	eb02 0c07 	add.w	ip, r2, r7
 801e0d8:	4566      	cmp	r6, ip
 801e0da:	d322      	bcc.n	801e122 <rcutils_string_map_reserve+0xc6>
 801e0dc:	1ae3      	subs	r3, r4, r3
 801e0de:	4670      	mov	r0, lr
 801e0e0:	2100      	movs	r1, #0
 801e0e2:	009a      	lsls	r2, r3, #2
 801e0e4:	9201      	str	r2, [sp, #4]
 801e0e6:	f004 f927 	bl	8022338 <memset>
 801e0ea:	9a01      	ldr	r2, [sp, #4]
 801e0ec:	2100      	movs	r1, #0
 801e0ee:	4630      	mov	r0, r6
 801e0f0:	f004 f922 	bl	8022338 <memset>
 801e0f4:	e00a      	b.n	801e10c <rcutils_string_map_reserve+0xb0>
 801e0f6:	694f      	ldr	r7, [r1, #20]
 801e0f8:	6808      	ldr	r0, [r1, #0]
 801e0fa:	4631      	mov	r1, r6
 801e0fc:	47b8      	blx	r7
 801e0fe:	682b      	ldr	r3, [r5, #0]
 801e100:	4631      	mov	r1, r6
 801e102:	6858      	ldr	r0, [r3, #4]
 801e104:	601c      	str	r4, [r3, #0]
 801e106:	47b8      	blx	r7
 801e108:	682d      	ldr	r5, [r5, #0]
 801e10a:	606c      	str	r4, [r5, #4]
 801e10c:	2000      	movs	r0, #0
 801e10e:	60ac      	str	r4, [r5, #8]
 801e110:	b002      	add	sp, #8
 801e112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e116:	2000      	movs	r0, #0
 801e118:	e7b0      	b.n	801e07c <rcutils_string_map_reserve+0x20>
 801e11a:	200a      	movs	r0, #10
 801e11c:	e7ae      	b.n	801e07c <rcutils_string_map_reserve+0x20>
 801e11e:	200b      	movs	r0, #11
 801e120:	4770      	bx	lr
 801e122:	1f0b      	subs	r3, r1, #4
 801e124:	4418      	add	r0, r3
 801e126:	4413      	add	r3, r2
 801e128:	3a04      	subs	r2, #4
 801e12a:	4417      	add	r7, r2
 801e12c:	2200      	movs	r2, #0
 801e12e:	f843 2f04 	str.w	r2, [r3, #4]!
 801e132:	42bb      	cmp	r3, r7
 801e134:	f840 2f04 	str.w	r2, [r0, #4]!
 801e138:	d1f9      	bne.n	801e12e <rcutils_string_map_reserve+0xd2>
 801e13a:	e7e7      	b.n	801e10c <rcutils_string_map_reserve+0xb0>

0801e13c <rcutils_string_map_init>:
 801e13c:	b082      	sub	sp, #8
 801e13e:	b570      	push	{r4, r5, r6, lr}
 801e140:	ac04      	add	r4, sp, #16
 801e142:	e884 000c 	stmia.w	r4, {r2, r3}
 801e146:	b380      	cbz	r0, 801e1aa <rcutils_string_map_init+0x6e>
 801e148:	6806      	ldr	r6, [r0, #0]
 801e14a:	4604      	mov	r4, r0
 801e14c:	b12e      	cbz	r6, 801e15a <rcutils_string_map_init+0x1e>
 801e14e:	251e      	movs	r5, #30
 801e150:	4628      	mov	r0, r5
 801e152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e156:	b002      	add	sp, #8
 801e158:	4770      	bx	lr
 801e15a:	a804      	add	r0, sp, #16
 801e15c:	460d      	mov	r5, r1
 801e15e:	f7f7 f9af 	bl	80154c0 <rcutils_allocator_is_valid>
 801e162:	b310      	cbz	r0, 801e1aa <rcutils_string_map_init+0x6e>
 801e164:	9b04      	ldr	r3, [sp, #16]
 801e166:	2024      	movs	r0, #36	@ 0x24
 801e168:	9908      	ldr	r1, [sp, #32]
 801e16a:	4798      	blx	r3
 801e16c:	6020      	str	r0, [r4, #0]
 801e16e:	b310      	cbz	r0, 801e1b6 <rcutils_string_map_init+0x7a>
 801e170:	f10d 0e10 	add.w	lr, sp, #16
 801e174:	f100 0c10 	add.w	ip, r0, #16
 801e178:	e9c0 6600 	strd	r6, r6, [r0]
 801e17c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801e180:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e188:	f8de 3000 	ldr.w	r3, [lr]
 801e18c:	4629      	mov	r1, r5
 801e18e:	4620      	mov	r0, r4
 801e190:	f8cc 3000 	str.w	r3, [ip]
 801e194:	f7ff ff62 	bl	801e05c <rcutils_string_map_reserve>
 801e198:	4605      	mov	r5, r0
 801e19a:	2800      	cmp	r0, #0
 801e19c:	d0d8      	beq.n	801e150 <rcutils_string_map_init+0x14>
 801e19e:	9b05      	ldr	r3, [sp, #20]
 801e1a0:	9908      	ldr	r1, [sp, #32]
 801e1a2:	6820      	ldr	r0, [r4, #0]
 801e1a4:	4798      	blx	r3
 801e1a6:	6026      	str	r6, [r4, #0]
 801e1a8:	e7d2      	b.n	801e150 <rcutils_string_map_init+0x14>
 801e1aa:	250b      	movs	r5, #11
 801e1ac:	4628      	mov	r0, r5
 801e1ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e1b2:	b002      	add	sp, #8
 801e1b4:	4770      	bx	lr
 801e1b6:	250a      	movs	r5, #10
 801e1b8:	e7ca      	b.n	801e150 <rcutils_string_map_init+0x14>
 801e1ba:	bf00      	nop

0801e1bc <rcutils_string_map_fini>:
 801e1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1c0:	b082      	sub	sp, #8
 801e1c2:	2800      	cmp	r0, #0
 801e1c4:	d03a      	beq.n	801e23c <rcutils_string_map_fini+0x80>
 801e1c6:	6804      	ldr	r4, [r0, #0]
 801e1c8:	4606      	mov	r6, r0
 801e1ca:	2c00      	cmp	r4, #0
 801e1cc:	d032      	beq.n	801e234 <rcutils_string_map_fini+0x78>
 801e1ce:	68a3      	ldr	r3, [r4, #8]
 801e1d0:	b32b      	cbz	r3, 801e21e <rcutils_string_map_fini+0x62>
 801e1d2:	2500      	movs	r5, #0
 801e1d4:	6822      	ldr	r2, [r4, #0]
 801e1d6:	462f      	mov	r7, r5
 801e1d8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e1dc:	b1e0      	cbz	r0, 801e218 <rcutils_string_map_fini+0x5c>
 801e1de:	6a21      	ldr	r1, [r4, #32]
 801e1e0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801e1e4:	9101      	str	r1, [sp, #4]
 801e1e6:	47c0      	blx	r8
 801e1e8:	9901      	ldr	r1, [sp, #4]
 801e1ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 801e1ee:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801e1f2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e1f6:	47c0      	blx	r8
 801e1f8:	68e3      	ldr	r3, [r4, #12]
 801e1fa:	6862      	ldr	r2, [r4, #4]
 801e1fc:	3b01      	subs	r3, #1
 801e1fe:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801e202:	3501      	adds	r5, #1
 801e204:	60e3      	str	r3, [r4, #12]
 801e206:	6834      	ldr	r4, [r6, #0]
 801e208:	68a3      	ldr	r3, [r4, #8]
 801e20a:	429d      	cmp	r5, r3
 801e20c:	d207      	bcs.n	801e21e <rcutils_string_map_fini+0x62>
 801e20e:	6822      	ldr	r2, [r4, #0]
 801e210:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e214:	2800      	cmp	r0, #0
 801e216:	d1e2      	bne.n	801e1de <rcutils_string_map_fini+0x22>
 801e218:	3501      	adds	r5, #1
 801e21a:	429d      	cmp	r5, r3
 801e21c:	d3dc      	bcc.n	801e1d8 <rcutils_string_map_fini+0x1c>
 801e21e:	2100      	movs	r1, #0
 801e220:	4630      	mov	r0, r6
 801e222:	f7ff ff1b 	bl	801e05c <rcutils_string_map_reserve>
 801e226:	4604      	mov	r4, r0
 801e228:	b920      	cbnz	r0, 801e234 <rcutils_string_map_fini+0x78>
 801e22a:	6830      	ldr	r0, [r6, #0]
 801e22c:	6943      	ldr	r3, [r0, #20]
 801e22e:	6a01      	ldr	r1, [r0, #32]
 801e230:	4798      	blx	r3
 801e232:	6034      	str	r4, [r6, #0]
 801e234:	4620      	mov	r0, r4
 801e236:	b002      	add	sp, #8
 801e238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e23c:	240b      	movs	r4, #11
 801e23e:	4620      	mov	r0, r4
 801e240:	b002      	add	sp, #8
 801e242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e246:	bf00      	nop

0801e248 <rcutils_string_map_getn>:
 801e248:	b378      	cbz	r0, 801e2aa <rcutils_string_map_getn+0x62>
 801e24a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e24e:	f8d0 b000 	ldr.w	fp, [r0]
 801e252:	f1bb 0f00 	cmp.w	fp, #0
 801e256:	d01f      	beq.n	801e298 <rcutils_string_map_getn+0x50>
 801e258:	fab1 f481 	clz	r4, r1
 801e25c:	4688      	mov	r8, r1
 801e25e:	0964      	lsrs	r4, r4, #5
 801e260:	b1d1      	cbz	r1, 801e298 <rcutils_string_map_getn+0x50>
 801e262:	f8db 7008 	ldr.w	r7, [fp, #8]
 801e266:	f8db 6000 	ldr.w	r6, [fp]
 801e26a:	b1af      	cbz	r7, 801e298 <rcutils_string_map_getn+0x50>
 801e26c:	4691      	mov	r9, r2
 801e26e:	3e04      	subs	r6, #4
 801e270:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801e274:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e278:	3401      	adds	r4, #1
 801e27a:	4628      	mov	r0, r5
 801e27c:	b155      	cbz	r5, 801e294 <rcutils_string_map_getn+0x4c>
 801e27e:	f7e2 f839 	bl	80002f4 <strlen>
 801e282:	4602      	mov	r2, r0
 801e284:	4629      	mov	r1, r5
 801e286:	4640      	mov	r0, r8
 801e288:	454a      	cmp	r2, r9
 801e28a:	bf38      	it	cc
 801e28c:	464a      	movcc	r2, r9
 801e28e:	f004 f868 	bl	8022362 <strncmp>
 801e292:	b120      	cbz	r0, 801e29e <rcutils_string_map_getn+0x56>
 801e294:	42a7      	cmp	r7, r4
 801e296:	d1eb      	bne.n	801e270 <rcutils_string_map_getn+0x28>
 801e298:	2000      	movs	r0, #0
 801e29a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e29e:	f8db 3004 	ldr.w	r3, [fp, #4]
 801e2a2:	f853 000a 	ldr.w	r0, [r3, sl]
 801e2a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2aa:	4770      	bx	lr
 801e2ac:	0000      	movs	r0, r0
	...

0801e2b0 <rmw_get_zero_initialized_context>:
 801e2b0:	b510      	push	{r4, lr}
 801e2b2:	4604      	mov	r4, r0
 801e2b4:	3010      	adds	r0, #16
 801e2b6:	f000 f80f 	bl	801e2d8 <rmw_get_zero_initialized_init_options>
 801e2ba:	2300      	movs	r3, #0
 801e2bc:	4620      	mov	r0, r4
 801e2be:	60a3      	str	r3, [r4, #8]
 801e2c0:	64a3      	str	r3, [r4, #72]	@ 0x48
 801e2c2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801e2c4:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 801e2d0 <rmw_get_zero_initialized_context+0x20>
 801e2c8:	ed84 7b00 	vstr	d7, [r4]
 801e2cc:	bd10      	pop	{r4, pc}
 801e2ce:	bf00      	nop
	...

0801e2d8 <rmw_get_zero_initialized_init_options>:
 801e2d8:	b510      	push	{r4, lr}
 801e2da:	4604      	mov	r4, r0
 801e2dc:	2238      	movs	r2, #56	@ 0x38
 801e2de:	2100      	movs	r1, #0
 801e2e0:	f004 f82a 	bl	8022338 <memset>
 801e2e4:	f104 0010 	add.w	r0, r4, #16
 801e2e8:	f000 f806 	bl	801e2f8 <rmw_get_default_security_options>
 801e2ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	60e3      	str	r3, [r4, #12]
 801e2f4:	bd10      	pop	{r4, pc}
 801e2f6:	bf00      	nop

0801e2f8 <rmw_get_default_security_options>:
 801e2f8:	2200      	movs	r2, #0
 801e2fa:	7002      	strb	r2, [r0, #0]
 801e2fc:	6042      	str	r2, [r0, #4]
 801e2fe:	4770      	bx	lr

0801e300 <rmw_subscription_content_filter_options_fini>:
 801e300:	b1b0      	cbz	r0, 801e330 <rmw_subscription_content_filter_options_fini+0x30>
 801e302:	b538      	push	{r3, r4, r5, lr}
 801e304:	4604      	mov	r4, r0
 801e306:	4608      	mov	r0, r1
 801e308:	460d      	mov	r5, r1
 801e30a:	f7f7 f8d9 	bl	80154c0 <rcutils_allocator_is_valid>
 801e30e:	b168      	cbz	r0, 801e32c <rmw_subscription_content_filter_options_fini+0x2c>
 801e310:	6820      	ldr	r0, [r4, #0]
 801e312:	b120      	cbz	r0, 801e31e <rmw_subscription_content_filter_options_fini+0x1e>
 801e314:	686b      	ldr	r3, [r5, #4]
 801e316:	6929      	ldr	r1, [r5, #16]
 801e318:	4798      	blx	r3
 801e31a:	2300      	movs	r3, #0
 801e31c:	6023      	str	r3, [r4, #0]
 801e31e:	1d20      	adds	r0, r4, #4
 801e320:	f003 f97c 	bl	802161c <rcutils_string_array_fini>
 801e324:	3800      	subs	r0, #0
 801e326:	bf18      	it	ne
 801e328:	2001      	movne	r0, #1
 801e32a:	bd38      	pop	{r3, r4, r5, pc}
 801e32c:	200b      	movs	r0, #11
 801e32e:	bd38      	pop	{r3, r4, r5, pc}
 801e330:	200b      	movs	r0, #11
 801e332:	4770      	bx	lr

0801e334 <rmw_get_default_subscription_options>:
 801e334:	2200      	movs	r2, #0
 801e336:	e9c0 2200 	strd	r2, r2, [r0]
 801e33a:	6082      	str	r2, [r0, #8]
 801e33c:	4770      	bx	lr
 801e33e:	bf00      	nop

0801e340 <rmw_time_equal>:
 801e340:	b4f0      	push	{r4, r5, r6, r7}
 801e342:	b084      	sub	sp, #16
 801e344:	ac04      	add	r4, sp, #16
 801e346:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e34a:	4603      	mov	r3, r0
 801e34c:	4925      	ldr	r1, [pc, #148]	@ (801e3e4 <rmw_time_equal+0xa4>)
 801e34e:	9d01      	ldr	r5, [sp, #4]
 801e350:	4610      	mov	r0, r2
 801e352:	4299      	cmp	r1, r3
 801e354:	f04f 0202 	mov.w	r2, #2
 801e358:	9e03      	ldr	r6, [sp, #12]
 801e35a:	41aa      	sbcs	r2, r5
 801e35c:	d330      	bcc.n	801e3c0 <rmw_time_equal+0x80>
 801e35e:	4c22      	ldr	r4, [pc, #136]	@ (801e3e8 <rmw_time_equal+0xa8>)
 801e360:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e364:	fba3 3204 	umull	r3, r2, r3, r4
 801e368:	fb04 2205 	mla	r2, r4, r5, r2
 801e36c:	43dd      	mvns	r5, r3
 801e36e:	1a8c      	subs	r4, r1, r2
 801e370:	4285      	cmp	r5, r0
 801e372:	41b4      	sbcs	r4, r6
 801e374:	d332      	bcc.n	801e3dc <rmw_time_equal+0x9c>
 801e376:	eb10 0c03 	adds.w	ip, r0, r3
 801e37a:	eb42 0106 	adc.w	r1, r2, r6
 801e37e:	4819      	ldr	r0, [pc, #100]	@ (801e3e4 <rmw_time_equal+0xa4>)
 801e380:	2202      	movs	r2, #2
 801e382:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e384:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e386:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801e38a:	4298      	cmp	r0, r3
 801e38c:	41b2      	sbcs	r2, r6
 801e38e:	d31c      	bcc.n	801e3ca <rmw_time_equal+0x8a>
 801e390:	4c15      	ldr	r4, [pc, #84]	@ (801e3e8 <rmw_time_equal+0xa8>)
 801e392:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801e396:	fba3 3204 	umull	r3, r2, r3, r4
 801e39a:	fb04 2206 	mla	r2, r4, r6, r2
 801e39e:	43de      	mvns	r6, r3
 801e3a0:	1a84      	subs	r4, r0, r2
 801e3a2:	42ae      	cmp	r6, r5
 801e3a4:	41bc      	sbcs	r4, r7
 801e3a6:	d315      	bcc.n	801e3d4 <rmw_time_equal+0x94>
 801e3a8:	195b      	adds	r3, r3, r5
 801e3aa:	eb42 0207 	adc.w	r2, r2, r7
 801e3ae:	428a      	cmp	r2, r1
 801e3b0:	bf08      	it	eq
 801e3b2:	4563      	cmpeq	r3, ip
 801e3b4:	bf0c      	ite	eq
 801e3b6:	2001      	moveq	r0, #1
 801e3b8:	2000      	movne	r0, #0
 801e3ba:	b004      	add	sp, #16
 801e3bc:	bcf0      	pop	{r4, r5, r6, r7}
 801e3be:	4770      	bx	lr
 801e3c0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e3c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e3c8:	e7d9      	b.n	801e37e <rmw_time_equal+0x3e>
 801e3ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e3ce:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801e3d2:	e7ec      	b.n	801e3ae <rmw_time_equal+0x6e>
 801e3d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e3d8:	4602      	mov	r2, r0
 801e3da:	e7e8      	b.n	801e3ae <rmw_time_equal+0x6e>
 801e3dc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e3e0:	e7cd      	b.n	801e37e <rmw_time_equal+0x3e>
 801e3e2:	bf00      	nop
 801e3e4:	25c17d04 	.word	0x25c17d04
 801e3e8:	3b9aca00 	.word	0x3b9aca00

0801e3ec <rmw_time_total_nsec>:
 801e3ec:	b470      	push	{r4, r5, r6}
 801e3ee:	b085      	sub	sp, #20
 801e3f0:	ac04      	add	r4, sp, #16
 801e3f2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e3f6:	4603      	mov	r3, r0
 801e3f8:	4913      	ldr	r1, [pc, #76]	@ (801e448 <rmw_time_total_nsec+0x5c>)
 801e3fa:	9d01      	ldr	r5, [sp, #4]
 801e3fc:	4610      	mov	r0, r2
 801e3fe:	4299      	cmp	r1, r3
 801e400:	f04f 0202 	mov.w	r2, #2
 801e404:	9e03      	ldr	r6, [sp, #12]
 801e406:	41aa      	sbcs	r2, r5
 801e408:	d311      	bcc.n	801e42e <rmw_time_total_nsec+0x42>
 801e40a:	4c10      	ldr	r4, [pc, #64]	@ (801e44c <rmw_time_total_nsec+0x60>)
 801e40c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e410:	fba3 3204 	umull	r3, r2, r3, r4
 801e414:	fb04 2205 	mla	r2, r4, r5, r2
 801e418:	43dd      	mvns	r5, r3
 801e41a:	1a8c      	subs	r4, r1, r2
 801e41c:	4285      	cmp	r5, r0
 801e41e:	41b4      	sbcs	r4, r6
 801e420:	d30c      	bcc.n	801e43c <rmw_time_total_nsec+0x50>
 801e422:	1818      	adds	r0, r3, r0
 801e424:	eb42 0106 	adc.w	r1, r2, r6
 801e428:	b005      	add	sp, #20
 801e42a:	bc70      	pop	{r4, r5, r6}
 801e42c:	4770      	bx	lr
 801e42e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e432:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e436:	b005      	add	sp, #20
 801e438:	bc70      	pop	{r4, r5, r6}
 801e43a:	4770      	bx	lr
 801e43c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e440:	b005      	add	sp, #20
 801e442:	bc70      	pop	{r4, r5, r6}
 801e444:	4770      	bx	lr
 801e446:	bf00      	nop
 801e448:	25c17d04 	.word	0x25c17d04
 801e44c:	3b9aca00 	.word	0x3b9aca00

0801e450 <rmw_get_zero_initialized_message_info>:
 801e450:	b510      	push	{r4, lr}
 801e452:	4604      	mov	r4, r0
 801e454:	2240      	movs	r2, #64	@ 0x40
 801e456:	2100      	movs	r1, #0
 801e458:	f003 ff6e 	bl	8022338 <memset>
 801e45c:	4620      	mov	r0, r4
 801e45e:	bd10      	pop	{r4, pc}

0801e460 <rmw_validate_full_topic_name>:
 801e460:	2800      	cmp	r0, #0
 801e462:	d05d      	beq.n	801e520 <rmw_validate_full_topic_name+0xc0>
 801e464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e468:	460d      	mov	r5, r1
 801e46a:	2900      	cmp	r1, #0
 801e46c:	d05a      	beq.n	801e524 <rmw_validate_full_topic_name+0xc4>
 801e46e:	4604      	mov	r4, r0
 801e470:	4616      	mov	r6, r2
 801e472:	f7e1 ff3f 	bl	80002f4 <strlen>
 801e476:	b150      	cbz	r0, 801e48e <rmw_validate_full_topic_name+0x2e>
 801e478:	7823      	ldrb	r3, [r4, #0]
 801e47a:	2b2f      	cmp	r3, #47	@ 0x2f
 801e47c:	d00e      	beq.n	801e49c <rmw_validate_full_topic_name+0x3c>
 801e47e:	2302      	movs	r3, #2
 801e480:	602b      	str	r3, [r5, #0]
 801e482:	b146      	cbz	r6, 801e496 <rmw_validate_full_topic_name+0x36>
 801e484:	2300      	movs	r3, #0
 801e486:	4618      	mov	r0, r3
 801e488:	6033      	str	r3, [r6, #0]
 801e48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e48e:	2301      	movs	r3, #1
 801e490:	602b      	str	r3, [r5, #0]
 801e492:	2e00      	cmp	r6, #0
 801e494:	d1f6      	bne.n	801e484 <rmw_validate_full_topic_name+0x24>
 801e496:	2000      	movs	r0, #0
 801e498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e49c:	1e43      	subs	r3, r0, #1
 801e49e:	5ce2      	ldrb	r2, [r4, r3]
 801e4a0:	2a2f      	cmp	r2, #47	@ 0x2f
 801e4a2:	d041      	beq.n	801e528 <rmw_validate_full_topic_name+0xc8>
 801e4a4:	1e62      	subs	r2, r4, #1
 801e4a6:	f1c4 0e01 	rsb	lr, r4, #1
 801e4aa:	eb02 0800 	add.w	r8, r2, r0
 801e4ae:	eb0e 0702 	add.w	r7, lr, r2
 801e4b2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e4b6:	f023 0120 	bic.w	r1, r3, #32
 801e4ba:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801e4be:	3941      	subs	r1, #65	@ 0x41
 801e4c0:	2919      	cmp	r1, #25
 801e4c2:	d90f      	bls.n	801e4e4 <rmw_validate_full_topic_name+0x84>
 801e4c4:	f1bc 0f0a 	cmp.w	ip, #10
 801e4c8:	d90c      	bls.n	801e4e4 <rmw_validate_full_topic_name+0x84>
 801e4ca:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801e4ce:	fab3 f383 	clz	r3, r3
 801e4d2:	095b      	lsrs	r3, r3, #5
 801e4d4:	b933      	cbnz	r3, 801e4e4 <rmw_validate_full_topic_name+0x84>
 801e4d6:	2204      	movs	r2, #4
 801e4d8:	602a      	str	r2, [r5, #0]
 801e4da:	2e00      	cmp	r6, #0
 801e4dc:	d0db      	beq.n	801e496 <rmw_validate_full_topic_name+0x36>
 801e4de:	4618      	mov	r0, r3
 801e4e0:	6037      	str	r7, [r6, #0]
 801e4e2:	e7d2      	b.n	801e48a <rmw_validate_full_topic_name+0x2a>
 801e4e4:	4542      	cmp	r2, r8
 801e4e6:	d1e2      	bne.n	801e4ae <rmw_validate_full_topic_name+0x4e>
 801e4e8:	2301      	movs	r3, #1
 801e4ea:	4f1a      	ldr	r7, [pc, #104]	@ (801e554 <rmw_validate_full_topic_name+0xf4>)
 801e4ec:	e004      	b.n	801e4f8 <rmw_validate_full_topic_name+0x98>
 801e4ee:	4298      	cmp	r0, r3
 801e4f0:	f104 0401 	add.w	r4, r4, #1
 801e4f4:	4613      	mov	r3, r2
 801e4f6:	d91c      	bls.n	801e532 <rmw_validate_full_topic_name+0xd2>
 801e4f8:	4298      	cmp	r0, r3
 801e4fa:	f103 0201 	add.w	r2, r3, #1
 801e4fe:	d0f6      	beq.n	801e4ee <rmw_validate_full_topic_name+0x8e>
 801e500:	7821      	ldrb	r1, [r4, #0]
 801e502:	292f      	cmp	r1, #47	@ 0x2f
 801e504:	d1f3      	bne.n	801e4ee <rmw_validate_full_topic_name+0x8e>
 801e506:	7861      	ldrb	r1, [r4, #1]
 801e508:	292f      	cmp	r1, #47	@ 0x2f
 801e50a:	d01e      	beq.n	801e54a <rmw_validate_full_topic_name+0xea>
 801e50c:	5dc9      	ldrb	r1, [r1, r7]
 801e50e:	0749      	lsls	r1, r1, #29
 801e510:	d5ed      	bpl.n	801e4ee <rmw_validate_full_topic_name+0x8e>
 801e512:	2206      	movs	r2, #6
 801e514:	602a      	str	r2, [r5, #0]
 801e516:	2e00      	cmp	r6, #0
 801e518:	d0bd      	beq.n	801e496 <rmw_validate_full_topic_name+0x36>
 801e51a:	2000      	movs	r0, #0
 801e51c:	6033      	str	r3, [r6, #0]
 801e51e:	e7b4      	b.n	801e48a <rmw_validate_full_topic_name+0x2a>
 801e520:	200b      	movs	r0, #11
 801e522:	4770      	bx	lr
 801e524:	200b      	movs	r0, #11
 801e526:	e7b0      	b.n	801e48a <rmw_validate_full_topic_name+0x2a>
 801e528:	2203      	movs	r2, #3
 801e52a:	602a      	str	r2, [r5, #0]
 801e52c:	2e00      	cmp	r6, #0
 801e52e:	d1f4      	bne.n	801e51a <rmw_validate_full_topic_name+0xba>
 801e530:	e7b1      	b.n	801e496 <rmw_validate_full_topic_name+0x36>
 801e532:	28f7      	cmp	r0, #247	@ 0xf7
 801e534:	d803      	bhi.n	801e53e <rmw_validate_full_topic_name+0xde>
 801e536:	2300      	movs	r3, #0
 801e538:	4618      	mov	r0, r3
 801e53a:	602b      	str	r3, [r5, #0]
 801e53c:	e7a5      	b.n	801e48a <rmw_validate_full_topic_name+0x2a>
 801e53e:	2307      	movs	r3, #7
 801e540:	602b      	str	r3, [r5, #0]
 801e542:	2e00      	cmp	r6, #0
 801e544:	d0a7      	beq.n	801e496 <rmw_validate_full_topic_name+0x36>
 801e546:	23f6      	movs	r3, #246	@ 0xf6
 801e548:	e7e7      	b.n	801e51a <rmw_validate_full_topic_name+0xba>
 801e54a:	2205      	movs	r2, #5
 801e54c:	602a      	str	r2, [r5, #0]
 801e54e:	2e00      	cmp	r6, #0
 801e550:	d1e3      	bne.n	801e51a <rmw_validate_full_topic_name+0xba>
 801e552:	e7a0      	b.n	801e496 <rmw_validate_full_topic_name+0x36>
 801e554:	08025a6a 	.word	0x08025a6a

0801e558 <rmw_validate_namespace_with_size>:
 801e558:	2800      	cmp	r0, #0
 801e55a:	d043      	beq.n	801e5e4 <rmw_validate_namespace_with_size+0x8c>
 801e55c:	b570      	push	{r4, r5, r6, lr}
 801e55e:	4614      	mov	r4, r2
 801e560:	b0c2      	sub	sp, #264	@ 0x108
 801e562:	b32a      	cbz	r2, 801e5b0 <rmw_validate_namespace_with_size+0x58>
 801e564:	2901      	cmp	r1, #1
 801e566:	460d      	mov	r5, r1
 801e568:	461e      	mov	r6, r3
 801e56a:	d102      	bne.n	801e572 <rmw_validate_namespace_with_size+0x1a>
 801e56c:	7803      	ldrb	r3, [r0, #0]
 801e56e:	2b2f      	cmp	r3, #47	@ 0x2f
 801e570:	d012      	beq.n	801e598 <rmw_validate_namespace_with_size+0x40>
 801e572:	aa01      	add	r2, sp, #4
 801e574:	4669      	mov	r1, sp
 801e576:	f7ff ff73 	bl	801e460 <rmw_validate_full_topic_name>
 801e57a:	b980      	cbnz	r0, 801e59e <rmw_validate_namespace_with_size+0x46>
 801e57c:	9a00      	ldr	r2, [sp, #0]
 801e57e:	b14a      	cbz	r2, 801e594 <rmw_validate_namespace_with_size+0x3c>
 801e580:	2a07      	cmp	r2, #7
 801e582:	d007      	beq.n	801e594 <rmw_validate_namespace_with_size+0x3c>
 801e584:	1e53      	subs	r3, r2, #1
 801e586:	2b05      	cmp	r3, #5
 801e588:	d82e      	bhi.n	801e5e8 <rmw_validate_namespace_with_size+0x90>
 801e58a:	e8df f003 	tbb	[pc, r3]
 801e58e:	1f1c      	.short	0x1f1c
 801e590:	14282522 	.word	0x14282522
 801e594:	2df5      	cmp	r5, #245	@ 0xf5
 801e596:	d804      	bhi.n	801e5a2 <rmw_validate_namespace_with_size+0x4a>
 801e598:	2300      	movs	r3, #0
 801e59a:	4618      	mov	r0, r3
 801e59c:	6023      	str	r3, [r4, #0]
 801e59e:	b042      	add	sp, #264	@ 0x108
 801e5a0:	bd70      	pop	{r4, r5, r6, pc}
 801e5a2:	2307      	movs	r3, #7
 801e5a4:	6023      	str	r3, [r4, #0]
 801e5a6:	2e00      	cmp	r6, #0
 801e5a8:	d0f9      	beq.n	801e59e <rmw_validate_namespace_with_size+0x46>
 801e5aa:	23f4      	movs	r3, #244	@ 0xf4
 801e5ac:	6033      	str	r3, [r6, #0]
 801e5ae:	e7f6      	b.n	801e59e <rmw_validate_namespace_with_size+0x46>
 801e5b0:	200b      	movs	r0, #11
 801e5b2:	b042      	add	sp, #264	@ 0x108
 801e5b4:	bd70      	pop	{r4, r5, r6, pc}
 801e5b6:	2306      	movs	r3, #6
 801e5b8:	6023      	str	r3, [r4, #0]
 801e5ba:	2e00      	cmp	r6, #0
 801e5bc:	d0ef      	beq.n	801e59e <rmw_validate_namespace_with_size+0x46>
 801e5be:	9b01      	ldr	r3, [sp, #4]
 801e5c0:	6033      	str	r3, [r6, #0]
 801e5c2:	b042      	add	sp, #264	@ 0x108
 801e5c4:	bd70      	pop	{r4, r5, r6, pc}
 801e5c6:	2301      	movs	r3, #1
 801e5c8:	6023      	str	r3, [r4, #0]
 801e5ca:	e7f6      	b.n	801e5ba <rmw_validate_namespace_with_size+0x62>
 801e5cc:	2302      	movs	r3, #2
 801e5ce:	6023      	str	r3, [r4, #0]
 801e5d0:	e7f3      	b.n	801e5ba <rmw_validate_namespace_with_size+0x62>
 801e5d2:	2303      	movs	r3, #3
 801e5d4:	6023      	str	r3, [r4, #0]
 801e5d6:	e7f0      	b.n	801e5ba <rmw_validate_namespace_with_size+0x62>
 801e5d8:	2304      	movs	r3, #4
 801e5da:	6023      	str	r3, [r4, #0]
 801e5dc:	e7ed      	b.n	801e5ba <rmw_validate_namespace_with_size+0x62>
 801e5de:	2305      	movs	r3, #5
 801e5e0:	6023      	str	r3, [r4, #0]
 801e5e2:	e7ea      	b.n	801e5ba <rmw_validate_namespace_with_size+0x62>
 801e5e4:	200b      	movs	r0, #11
 801e5e6:	4770      	bx	lr
 801e5e8:	4613      	mov	r3, r2
 801e5ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e5ee:	4a03      	ldr	r2, [pc, #12]	@ (801e5fc <rmw_validate_namespace_with_size+0xa4>)
 801e5f0:	a802      	add	r0, sp, #8
 801e5f2:	f7ff fca1 	bl	801df38 <rcutils_snprintf>
 801e5f6:	2001      	movs	r0, #1
 801e5f8:	e7d1      	b.n	801e59e <rmw_validate_namespace_with_size+0x46>
 801e5fa:	bf00      	nop
 801e5fc:	080254e8 	.word	0x080254e8

0801e600 <rmw_validate_namespace>:
 801e600:	b168      	cbz	r0, 801e61e <rmw_validate_namespace+0x1e>
 801e602:	b570      	push	{r4, r5, r6, lr}
 801e604:	460d      	mov	r5, r1
 801e606:	4616      	mov	r6, r2
 801e608:	4604      	mov	r4, r0
 801e60a:	f7e1 fe73 	bl	80002f4 <strlen>
 801e60e:	4633      	mov	r3, r6
 801e610:	4601      	mov	r1, r0
 801e612:	462a      	mov	r2, r5
 801e614:	4620      	mov	r0, r4
 801e616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e61a:	f7ff bf9d 	b.w	801e558 <rmw_validate_namespace_with_size>
 801e61e:	200b      	movs	r0, #11
 801e620:	4770      	bx	lr
 801e622:	bf00      	nop

0801e624 <rmw_namespace_validation_result_string>:
 801e624:	2807      	cmp	r0, #7
 801e626:	d803      	bhi.n	801e630 <rmw_namespace_validation_result_string+0xc>
 801e628:	4b02      	ldr	r3, [pc, #8]	@ (801e634 <rmw_namespace_validation_result_string+0x10>)
 801e62a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e62e:	4770      	bx	lr
 801e630:	4801      	ldr	r0, [pc, #4]	@ (801e638 <rmw_namespace_validation_result_string+0x14>)
 801e632:	4770      	bx	lr
 801e634:	080256e0 	.word	0x080256e0
 801e638:	08025538 	.word	0x08025538

0801e63c <rmw_validate_node_name>:
 801e63c:	2800      	cmp	r0, #0
 801e63e:	d042      	beq.n	801e6c6 <rmw_validate_node_name+0x8a>
 801e640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e644:	460d      	mov	r5, r1
 801e646:	2900      	cmp	r1, #0
 801e648:	d03f      	beq.n	801e6ca <rmw_validate_node_name+0x8e>
 801e64a:	4604      	mov	r4, r0
 801e64c:	4616      	mov	r6, r2
 801e64e:	f7e1 fe51 	bl	80002f4 <strlen>
 801e652:	b310      	cbz	r0, 801e69a <rmw_validate_node_name+0x5e>
 801e654:	1e63      	subs	r3, r4, #1
 801e656:	f1c4 0101 	rsb	r1, r4, #1
 801e65a:	eb03 0800 	add.w	r8, r3, r0
 801e65e:	18cf      	adds	r7, r1, r3
 801e660:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801e664:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801e668:	f02e 0c20 	bic.w	ip, lr, #32
 801e66c:	2a09      	cmp	r2, #9
 801e66e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801e672:	d905      	bls.n	801e680 <rmw_validate_node_name+0x44>
 801e674:	f1bc 0f19 	cmp.w	ip, #25
 801e678:	d902      	bls.n	801e680 <rmw_validate_node_name+0x44>
 801e67a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801e67e:	d114      	bne.n	801e6aa <rmw_validate_node_name+0x6e>
 801e680:	4598      	cmp	r8, r3
 801e682:	d1ec      	bne.n	801e65e <rmw_validate_node_name+0x22>
 801e684:	7822      	ldrb	r2, [r4, #0]
 801e686:	4b16      	ldr	r3, [pc, #88]	@ (801e6e0 <rmw_validate_node_name+0xa4>)
 801e688:	5cd3      	ldrb	r3, [r2, r3]
 801e68a:	f013 0304 	ands.w	r3, r3, #4
 801e68e:	d113      	bne.n	801e6b8 <rmw_validate_node_name+0x7c>
 801e690:	28ff      	cmp	r0, #255	@ 0xff
 801e692:	d81c      	bhi.n	801e6ce <rmw_validate_node_name+0x92>
 801e694:	4618      	mov	r0, r3
 801e696:	602b      	str	r3, [r5, #0]
 801e698:	e00c      	b.n	801e6b4 <rmw_validate_node_name+0x78>
 801e69a:	2301      	movs	r3, #1
 801e69c:	602b      	str	r3, [r5, #0]
 801e69e:	b17e      	cbz	r6, 801e6c0 <rmw_validate_node_name+0x84>
 801e6a0:	2300      	movs	r3, #0
 801e6a2:	4618      	mov	r0, r3
 801e6a4:	6033      	str	r3, [r6, #0]
 801e6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6aa:	2302      	movs	r3, #2
 801e6ac:	602b      	str	r3, [r5, #0]
 801e6ae:	b13e      	cbz	r6, 801e6c0 <rmw_validate_node_name+0x84>
 801e6b0:	2000      	movs	r0, #0
 801e6b2:	6037      	str	r7, [r6, #0]
 801e6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6b8:	2303      	movs	r3, #3
 801e6ba:	602b      	str	r3, [r5, #0]
 801e6bc:	2e00      	cmp	r6, #0
 801e6be:	d1ef      	bne.n	801e6a0 <rmw_validate_node_name+0x64>
 801e6c0:	2000      	movs	r0, #0
 801e6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6c6:	200b      	movs	r0, #11
 801e6c8:	4770      	bx	lr
 801e6ca:	200b      	movs	r0, #11
 801e6cc:	e7f2      	b.n	801e6b4 <rmw_validate_node_name+0x78>
 801e6ce:	2204      	movs	r2, #4
 801e6d0:	602a      	str	r2, [r5, #0]
 801e6d2:	2e00      	cmp	r6, #0
 801e6d4:	d0f4      	beq.n	801e6c0 <rmw_validate_node_name+0x84>
 801e6d6:	22fe      	movs	r2, #254	@ 0xfe
 801e6d8:	4618      	mov	r0, r3
 801e6da:	6032      	str	r2, [r6, #0]
 801e6dc:	e7ea      	b.n	801e6b4 <rmw_validate_node_name+0x78>
 801e6de:	bf00      	nop
 801e6e0:	08025a6a 	.word	0x08025a6a

0801e6e4 <rmw_node_name_validation_result_string>:
 801e6e4:	2804      	cmp	r0, #4
 801e6e6:	d803      	bhi.n	801e6f0 <rmw_node_name_validation_result_string+0xc>
 801e6e8:	4b02      	ldr	r3, [pc, #8]	@ (801e6f4 <rmw_node_name_validation_result_string+0x10>)
 801e6ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e6ee:	4770      	bx	lr
 801e6f0:	4801      	ldr	r0, [pc, #4]	@ (801e6f8 <rmw_node_name_validation_result_string+0x14>)
 801e6f2:	4770      	bx	lr
 801e6f4:	080257ec 	.word	0x080257ec
 801e6f8:	08025700 	.word	0x08025700

0801e6fc <get_memory>:
 801e6fc:	4603      	mov	r3, r0
 801e6fe:	6840      	ldr	r0, [r0, #4]
 801e700:	b158      	cbz	r0, 801e71a <get_memory+0x1e>
 801e702:	6842      	ldr	r2, [r0, #4]
 801e704:	605a      	str	r2, [r3, #4]
 801e706:	b10a      	cbz	r2, 801e70c <get_memory+0x10>
 801e708:	2100      	movs	r1, #0
 801e70a:	6011      	str	r1, [r2, #0]
 801e70c:	681a      	ldr	r2, [r3, #0]
 801e70e:	6042      	str	r2, [r0, #4]
 801e710:	b102      	cbz	r2, 801e714 <get_memory+0x18>
 801e712:	6010      	str	r0, [r2, #0]
 801e714:	2200      	movs	r2, #0
 801e716:	6002      	str	r2, [r0, #0]
 801e718:	6018      	str	r0, [r3, #0]
 801e71a:	4770      	bx	lr

0801e71c <put_memory>:
 801e71c:	680b      	ldr	r3, [r1, #0]
 801e71e:	b10b      	cbz	r3, 801e724 <put_memory+0x8>
 801e720:	684a      	ldr	r2, [r1, #4]
 801e722:	605a      	str	r2, [r3, #4]
 801e724:	684a      	ldr	r2, [r1, #4]
 801e726:	b102      	cbz	r2, 801e72a <put_memory+0xe>
 801e728:	6013      	str	r3, [r2, #0]
 801e72a:	6803      	ldr	r3, [r0, #0]
 801e72c:	428b      	cmp	r3, r1
 801e72e:	6843      	ldr	r3, [r0, #4]
 801e730:	bf08      	it	eq
 801e732:	6002      	streq	r2, [r0, #0]
 801e734:	604b      	str	r3, [r1, #4]
 801e736:	b103      	cbz	r3, 801e73a <put_memory+0x1e>
 801e738:	6019      	str	r1, [r3, #0]
 801e73a:	2300      	movs	r3, #0
 801e73c:	600b      	str	r3, [r1, #0]
 801e73e:	6041      	str	r1, [r0, #4]
 801e740:	4770      	bx	lr
 801e742:	bf00      	nop

0801e744 <rmw_destroy_client>:
 801e744:	b570      	push	{r4, r5, r6, lr}
 801e746:	b128      	cbz	r0, 801e754 <rmw_destroy_client+0x10>
 801e748:	4604      	mov	r4, r0
 801e74a:	6800      	ldr	r0, [r0, #0]
 801e74c:	460d      	mov	r5, r1
 801e74e:	f7f7 fd7f 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801e752:	b910      	cbnz	r0, 801e75a <rmw_destroy_client+0x16>
 801e754:	2401      	movs	r4, #1
 801e756:	4620      	mov	r0, r4
 801e758:	bd70      	pop	{r4, r5, r6, pc}
 801e75a:	6863      	ldr	r3, [r4, #4]
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	d0f9      	beq.n	801e754 <rmw_destroy_client+0x10>
 801e760:	2d00      	cmp	r5, #0
 801e762:	d0f7      	beq.n	801e754 <rmw_destroy_client+0x10>
 801e764:	6828      	ldr	r0, [r5, #0]
 801e766:	f7f7 fd73 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801e76a:	2800      	cmp	r0, #0
 801e76c:	d0f2      	beq.n	801e754 <rmw_destroy_client+0x10>
 801e76e:	686e      	ldr	r6, [r5, #4]
 801e770:	2e00      	cmp	r6, #0
 801e772:	d0ef      	beq.n	801e754 <rmw_destroy_client+0x10>
 801e774:	6864      	ldr	r4, [r4, #4]
 801e776:	6932      	ldr	r2, [r6, #16]
 801e778:	6920      	ldr	r0, [r4, #16]
 801e77a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e77e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e782:	6819      	ldr	r1, [r3, #0]
 801e784:	f002 faca 	bl	8020d1c <uxr_buffer_cancel_data>
 801e788:	4602      	mov	r2, r0
 801e78a:	6920      	ldr	r0, [r4, #16]
 801e78c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e790:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e794:	f7f7 fc4a 	bl	801602c <run_xrce_session>
 801e798:	6920      	ldr	r0, [r4, #16]
 801e79a:	6932      	ldr	r2, [r6, #16]
 801e79c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e7a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e7a4:	6819      	ldr	r1, [r3, #0]
 801e7a6:	f7f8 fb5d 	bl	8016e64 <uxr_buffer_delete_entity>
 801e7aa:	4602      	mov	r2, r0
 801e7ac:	6920      	ldr	r0, [r4, #16]
 801e7ae:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e7b2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e7b6:	f7f7 fc39 	bl	801602c <run_xrce_session>
 801e7ba:	4603      	mov	r3, r0
 801e7bc:	4628      	mov	r0, r5
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	bf14      	ite	ne
 801e7c2:	2400      	movne	r4, #0
 801e7c4:	2402      	moveq	r4, #2
 801e7c6:	f7f7 fb0d 	bl	8015de4 <rmw_uxrce_fini_client_memory>
 801e7ca:	e7c4      	b.n	801e756 <rmw_destroy_client+0x12>

0801e7cc <rmw_get_implementation_identifier>:
 801e7cc:	4b01      	ldr	r3, [pc, #4]	@ (801e7d4 <rmw_get_implementation_identifier+0x8>)
 801e7ce:	6818      	ldr	r0, [r3, #0]
 801e7d0:	4770      	bx	lr
 801e7d2:	bf00      	nop
 801e7d4:	08025818 	.word	0x08025818

0801e7d8 <rmw_init_options_init>:
 801e7d8:	b084      	sub	sp, #16
 801e7da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7dc:	b083      	sub	sp, #12
 801e7de:	ad09      	add	r5, sp, #36	@ 0x24
 801e7e0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801e7e4:	b130      	cbz	r0, 801e7f4 <rmw_init_options_init+0x1c>
 801e7e6:	4604      	mov	r4, r0
 801e7e8:	4628      	mov	r0, r5
 801e7ea:	f7f6 fe69 	bl	80154c0 <rcutils_allocator_is_valid>
 801e7ee:	b108      	cbz	r0, 801e7f4 <rmw_init_options_init+0x1c>
 801e7f0:	68a6      	ldr	r6, [r4, #8]
 801e7f2:	b12e      	cbz	r6, 801e800 <rmw_init_options_init+0x28>
 801e7f4:	200b      	movs	r0, #11
 801e7f6:	b003      	add	sp, #12
 801e7f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e7fc:	b004      	add	sp, #16
 801e7fe:	4770      	bx	lr
 801e800:	2200      	movs	r2, #0
 801e802:	2300      	movs	r3, #0
 801e804:	f104 0c20 	add.w	ip, r4, #32
 801e808:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801e8a4 <rmw_init_options_init+0xcc>
 801e80c:	466f      	mov	r7, sp
 801e80e:	e9c4 2300 	strd	r2, r3, [r4]
 801e812:	4b20      	ldr	r3, [pc, #128]	@ (801e894 <rmw_init_options_init+0xbc>)
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	60a3      	str	r3, [r4, #8]
 801e818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e81a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e81e:	682b      	ldr	r3, [r5, #0]
 801e820:	4638      	mov	r0, r7
 801e822:	f8cc 3000 	str.w	r3, [ip]
 801e826:	f8c4 e01c 	str.w	lr, [r4, #28]
 801e82a:	60e6      	str	r6, [r4, #12]
 801e82c:	f7ff fd64 	bl	801e2f8 <rmw_get_default_security_options>
 801e830:	f104 0310 	add.w	r3, r4, #16
 801e834:	2203      	movs	r2, #3
 801e836:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e83a:	e883 0003 	stmia.w	r3, {r0, r1}
 801e83e:	4816      	ldr	r0, [pc, #88]	@ (801e898 <rmw_init_options_init+0xc0>)
 801e840:	4916      	ldr	r1, [pc, #88]	@ (801e89c <rmw_init_options_init+0xc4>)
 801e842:	7626      	strb	r6, [r4, #24]
 801e844:	f7f7 fa0e 	bl	8015c64 <rmw_uxrce_init_init_options_impl_memory>
 801e848:	4813      	ldr	r0, [pc, #76]	@ (801e898 <rmw_init_options_init+0xc0>)
 801e84a:	f7ff ff57 	bl	801e6fc <get_memory>
 801e84e:	b1f0      	cbz	r0, 801e88e <rmw_init_options_init+0xb6>
 801e850:	4a13      	ldr	r2, [pc, #76]	@ (801e8a0 <rmw_init_options_init+0xc8>)
 801e852:	6883      	ldr	r3, [r0, #8]
 801e854:	6851      	ldr	r1, [r2, #4]
 801e856:	6363      	str	r3, [r4, #52]	@ 0x34
 801e858:	7810      	ldrb	r0, [r2, #0]
 801e85a:	6159      	str	r1, [r3, #20]
 801e85c:	68d1      	ldr	r1, [r2, #12]
 801e85e:	7418      	strb	r0, [r3, #16]
 801e860:	61d9      	str	r1, [r3, #28]
 801e862:	6911      	ldr	r1, [r2, #16]
 801e864:	6219      	str	r1, [r3, #32]
 801e866:	6951      	ldr	r1, [r2, #20]
 801e868:	6892      	ldr	r2, [r2, #8]
 801e86a:	6259      	str	r1, [r3, #36]	@ 0x24
 801e86c:	619a      	str	r2, [r3, #24]
 801e86e:	f7fa fe5d 	bl	801952c <uxr_nanos>
 801e872:	f003 f9bd 	bl	8021bf0 <srand>
 801e876:	f003 f9e9 	bl	8021c4c <rand>
 801e87a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e87c:	6298      	str	r0, [r3, #40]	@ 0x28
 801e87e:	2800      	cmp	r0, #0
 801e880:	d0f9      	beq.n	801e876 <rmw_init_options_init+0x9e>
 801e882:	2000      	movs	r0, #0
 801e884:	b003      	add	sp, #12
 801e886:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e88a:	b004      	add	sp, #16
 801e88c:	4770      	bx	lr
 801e88e:	2001      	movs	r0, #1
 801e890:	e7b1      	b.n	801e7f6 <rmw_init_options_init+0x1e>
 801e892:	bf00      	nop
 801e894:	08025818 	.word	0x08025818
 801e898:	24069344 	.word	0x24069344
 801e89c:	24064be0 	.word	0x24064be0
 801e8a0:	24064a6c 	.word	0x24064a6c
 801e8a4:	08025220 	.word	0x08025220

0801e8a8 <rmw_init_options_copy>:
 801e8a8:	2800      	cmp	r0, #0
 801e8aa:	d047      	beq.n	801e93c <rmw_init_options_copy+0x94>
 801e8ac:	b570      	push	{r4, r5, r6, lr}
 801e8ae:	460d      	mov	r5, r1
 801e8b0:	b149      	cbz	r1, 801e8c6 <rmw_init_options_copy+0x1e>
 801e8b2:	4604      	mov	r4, r0
 801e8b4:	6880      	ldr	r0, [r0, #8]
 801e8b6:	b120      	cbz	r0, 801e8c2 <rmw_init_options_copy+0x1a>
 801e8b8:	4b22      	ldr	r3, [pc, #136]	@ (801e944 <rmw_init_options_copy+0x9c>)
 801e8ba:	6819      	ldr	r1, [r3, #0]
 801e8bc:	f7e1 fd10 	bl	80002e0 <strcmp>
 801e8c0:	bba8      	cbnz	r0, 801e92e <rmw_init_options_copy+0x86>
 801e8c2:	68ab      	ldr	r3, [r5, #8]
 801e8c4:	b11b      	cbz	r3, 801e8ce <rmw_init_options_copy+0x26>
 801e8c6:	f04f 0c0b 	mov.w	ip, #11
 801e8ca:	4660      	mov	r0, ip
 801e8cc:	bd70      	pop	{r4, r5, r6, pc}
 801e8ce:	4623      	mov	r3, r4
 801e8d0:	462a      	mov	r2, r5
 801e8d2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801e8d6:	f8d3 e000 	ldr.w	lr, [r3]
 801e8da:	3310      	adds	r3, #16
 801e8dc:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 801e8e0:	3210      	adds	r2, #16
 801e8e2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801e8e6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e8ea:	42b3      	cmp	r3, r6
 801e8ec:	f842 ec10 	str.w	lr, [r2, #-16]
 801e8f0:	f842 cc0c 	str.w	ip, [r2, #-12]
 801e8f4:	f842 0c08 	str.w	r0, [r2, #-8]
 801e8f8:	f842 1c04 	str.w	r1, [r2, #-4]
 801e8fc:	d1eb      	bne.n	801e8d6 <rmw_init_options_copy+0x2e>
 801e8fe:	6819      	ldr	r1, [r3, #0]
 801e900:	685b      	ldr	r3, [r3, #4]
 801e902:	4811      	ldr	r0, [pc, #68]	@ (801e948 <rmw_init_options_copy+0xa0>)
 801e904:	6011      	str	r1, [r2, #0]
 801e906:	6053      	str	r3, [r2, #4]
 801e908:	f7ff fef8 	bl	801e6fc <get_memory>
 801e90c:	b198      	cbz	r0, 801e936 <rmw_init_options_copy+0x8e>
 801e90e:	6883      	ldr	r3, [r0, #8]
 801e910:	f04f 0c00 	mov.w	ip, #0
 801e914:	636b      	str	r3, [r5, #52]	@ 0x34
 801e916:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801e918:	f103 0410 	add.w	r4, r3, #16
 801e91c:	3510      	adds	r5, #16
 801e91e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e922:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e926:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801e92a:	4660      	mov	r0, ip
 801e92c:	bd70      	pop	{r4, r5, r6, pc}
 801e92e:	f04f 0c0c 	mov.w	ip, #12
 801e932:	4660      	mov	r0, ip
 801e934:	bd70      	pop	{r4, r5, r6, pc}
 801e936:	f04f 0c01 	mov.w	ip, #1
 801e93a:	e7c6      	b.n	801e8ca <rmw_init_options_copy+0x22>
 801e93c:	f04f 0c0b 	mov.w	ip, #11
 801e940:	4660      	mov	r0, ip
 801e942:	4770      	bx	lr
 801e944:	08025818 	.word	0x08025818
 801e948:	24069344 	.word	0x24069344

0801e94c <rmw_init_options_fini>:
 801e94c:	b510      	push	{r4, lr}
 801e94e:	b08e      	sub	sp, #56	@ 0x38
 801e950:	b388      	cbz	r0, 801e9b6 <rmw_init_options_fini+0x6a>
 801e952:	4604      	mov	r4, r0
 801e954:	3020      	adds	r0, #32
 801e956:	f7f6 fdb3 	bl	80154c0 <rcutils_allocator_is_valid>
 801e95a:	b360      	cbz	r0, 801e9b6 <rmw_init_options_fini+0x6a>
 801e95c:	68a0      	ldr	r0, [r4, #8]
 801e95e:	b120      	cbz	r0, 801e96a <rmw_init_options_fini+0x1e>
 801e960:	4b1a      	ldr	r3, [pc, #104]	@ (801e9cc <rmw_init_options_fini+0x80>)
 801e962:	6819      	ldr	r1, [r3, #0]
 801e964:	f7e1 fcbc 	bl	80002e0 <strcmp>
 801e968:	bb68      	cbnz	r0, 801e9c6 <rmw_init_options_fini+0x7a>
 801e96a:	4b19      	ldr	r3, [pc, #100]	@ (801e9d0 <rmw_init_options_fini+0x84>)
 801e96c:	6819      	ldr	r1, [r3, #0]
 801e96e:	b331      	cbz	r1, 801e9be <rmw_init_options_fini+0x72>
 801e970:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801e972:	e001      	b.n	801e978 <rmw_init_options_fini+0x2c>
 801e974:	6849      	ldr	r1, [r1, #4]
 801e976:	b311      	cbz	r1, 801e9be <rmw_init_options_fini+0x72>
 801e978:	688b      	ldr	r3, [r1, #8]
 801e97a:	429a      	cmp	r2, r3
 801e97c:	d1fa      	bne.n	801e974 <rmw_init_options_fini+0x28>
 801e97e:	4814      	ldr	r0, [pc, #80]	@ (801e9d0 <rmw_init_options_fini+0x84>)
 801e980:	f7ff fecc 	bl	801e71c <put_memory>
 801e984:	4668      	mov	r0, sp
 801e986:	f7ff fca7 	bl	801e2d8 <rmw_get_zero_initialized_init_options>
 801e98a:	46ee      	mov	lr, sp
 801e98c:	46a4      	mov	ip, r4
 801e98e:	2400      	movs	r4, #0
 801e990:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e994:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e998:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e99c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e9a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e9a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e9a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801e9ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e9b0:	4620      	mov	r0, r4
 801e9b2:	b00e      	add	sp, #56	@ 0x38
 801e9b4:	bd10      	pop	{r4, pc}
 801e9b6:	240b      	movs	r4, #11
 801e9b8:	4620      	mov	r0, r4
 801e9ba:	b00e      	add	sp, #56	@ 0x38
 801e9bc:	bd10      	pop	{r4, pc}
 801e9be:	2401      	movs	r4, #1
 801e9c0:	4620      	mov	r0, r4
 801e9c2:	b00e      	add	sp, #56	@ 0x38
 801e9c4:	bd10      	pop	{r4, pc}
 801e9c6:	240c      	movs	r4, #12
 801e9c8:	e7f2      	b.n	801e9b0 <rmw_init_options_fini+0x64>
 801e9ca:	bf00      	nop
 801e9cc:	08025818 	.word	0x08025818
 801e9d0:	24069344 	.word	0x24069344

0801e9d4 <rmw_init>:
 801e9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e9d8:	b083      	sub	sp, #12
 801e9da:	2800      	cmp	r0, #0
 801e9dc:	f000 80d3 	beq.w	801eb86 <rmw_init+0x1b2>
 801e9e0:	460e      	mov	r6, r1
 801e9e2:	2900      	cmp	r1, #0
 801e9e4:	f000 80cf 	beq.w	801eb86 <rmw_init+0x1b2>
 801e9e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e9ea:	4605      	mov	r5, r0
 801e9ec:	2b00      	cmp	r3, #0
 801e9ee:	f000 80ca 	beq.w	801eb86 <rmw_init+0x1b2>
 801e9f2:	4b78      	ldr	r3, [pc, #480]	@ (801ebd4 <rmw_init+0x200>)
 801e9f4:	6880      	ldr	r0, [r0, #8]
 801e9f6:	681f      	ldr	r7, [r3, #0]
 801e9f8:	b128      	cbz	r0, 801ea06 <rmw_init+0x32>
 801e9fa:	4639      	mov	r1, r7
 801e9fc:	f7e1 fc70 	bl	80002e0 <strcmp>
 801ea00:	2800      	cmp	r0, #0
 801ea02:	f040 80ca 	bne.w	801eb9a <rmw_init+0x1c6>
 801ea06:	4c74      	ldr	r4, [pc, #464]	@ (801ebd8 <rmw_init+0x204>)
 801ea08:	f04f 0800 	mov.w	r8, #0
 801ea0c:	4973      	ldr	r1, [pc, #460]	@ (801ebdc <rmw_init+0x208>)
 801ea0e:	4874      	ldr	r0, [pc, #464]	@ (801ebe0 <rmw_init+0x20c>)
 801ea10:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ea14:	60b7      	str	r7, [r6, #8]
 801ea16:	e9c6 2300 	strd	r2, r3, [r6]
 801ea1a:	68eb      	ldr	r3, [r5, #12]
 801ea1c:	2201      	movs	r2, #1
 801ea1e:	64b3      	str	r3, [r6, #72]	@ 0x48
 801ea20:	f7f7 f8c0 	bl	8015ba4 <rmw_uxrce_init_session_memory>
 801ea24:	4620      	mov	r0, r4
 801ea26:	2204      	movs	r2, #4
 801ea28:	496e      	ldr	r1, [pc, #440]	@ (801ebe4 <rmw_init+0x210>)
 801ea2a:	f7f7 f8fb 	bl	8015c24 <rmw_uxrce_init_static_input_buffer_memory>
 801ea2e:	486c      	ldr	r0, [pc, #432]	@ (801ebe0 <rmw_init+0x20c>)
 801ea30:	f884 800d 	strb.w	r8, [r4, #13]
 801ea34:	f7ff fe62 	bl	801e6fc <get_memory>
 801ea38:	2800      	cmp	r0, #0
 801ea3a:	f000 80a9 	beq.w	801eb90 <rmw_init+0x1bc>
 801ea3e:	6884      	ldr	r4, [r0, #8]
 801ea40:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801ea42:	f104 0910 	add.w	r9, r4, #16
 801ea46:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801ea48:	f890 c010 	ldrb.w	ip, [r0, #16]
 801ea4c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801ea50:	9101      	str	r1, [sp, #4]
 801ea52:	4661      	mov	r1, ip
 801ea54:	6a00      	ldr	r0, [r0, #32]
 801ea56:	9000      	str	r0, [sp, #0]
 801ea58:	4648      	mov	r0, r9
 801ea5a:	f7f8 fcbb 	bl	80173d4 <uxr_set_custom_transport_callbacks>
 801ea5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ea62:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801ea66:	4960      	ldr	r1, [pc, #384]	@ (801ebe8 <rmw_init+0x214>)
 801ea68:	4860      	ldr	r0, [pc, #384]	@ (801ebec <rmw_init+0x218>)
 801ea6a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801ea6e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801ea72:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801ea76:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801ea7a:	2201      	movs	r2, #1
 801ea7c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801ea80:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801ea84:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801ea88:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801ea8c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801ea8e:	f7f7 f869 	bl	8015b64 <rmw_uxrce_init_node_memory>
 801ea92:	2205      	movs	r2, #5
 801ea94:	4956      	ldr	r1, [pc, #344]	@ (801ebf0 <rmw_init+0x21c>)
 801ea96:	4857      	ldr	r0, [pc, #348]	@ (801ebf4 <rmw_init+0x220>)
 801ea98:	f7f7 f844 	bl	8015b24 <rmw_uxrce_init_subscription_memory>
 801ea9c:	220a      	movs	r2, #10
 801ea9e:	4956      	ldr	r1, [pc, #344]	@ (801ebf8 <rmw_init+0x224>)
 801eaa0:	4856      	ldr	r0, [pc, #344]	@ (801ebfc <rmw_init+0x228>)
 801eaa2:	f7f7 f81f 	bl	8015ae4 <rmw_uxrce_init_publisher_memory>
 801eaa6:	2201      	movs	r2, #1
 801eaa8:	4955      	ldr	r1, [pc, #340]	@ (801ec00 <rmw_init+0x22c>)
 801eaaa:	4856      	ldr	r0, [pc, #344]	@ (801ec04 <rmw_init+0x230>)
 801eaac:	f7f6 ffda 	bl	8015a64 <rmw_uxrce_init_service_memory>
 801eab0:	2201      	movs	r2, #1
 801eab2:	4955      	ldr	r1, [pc, #340]	@ (801ec08 <rmw_init+0x234>)
 801eab4:	4855      	ldr	r0, [pc, #340]	@ (801ec0c <rmw_init+0x238>)
 801eab6:	f7f6 fff5 	bl	8015aa4 <rmw_uxrce_init_client_memory>
 801eaba:	220f      	movs	r2, #15
 801eabc:	4954      	ldr	r1, [pc, #336]	@ (801ec10 <rmw_init+0x23c>)
 801eabe:	4855      	ldr	r0, [pc, #340]	@ (801ec14 <rmw_init+0x240>)
 801eac0:	f7f7 f890 	bl	8015be4 <rmw_uxrce_init_topic_memory>
 801eac4:	2203      	movs	r2, #3
 801eac6:	4954      	ldr	r1, [pc, #336]	@ (801ec18 <rmw_init+0x244>)
 801eac8:	4854      	ldr	r0, [pc, #336]	@ (801ec1c <rmw_init+0x248>)
 801eaca:	f7f7 f8cb 	bl	8015c64 <rmw_uxrce_init_init_options_impl_memory>
 801eace:	2204      	movs	r2, #4
 801ead0:	4953      	ldr	r1, [pc, #332]	@ (801ec20 <rmw_init+0x24c>)
 801ead2:	4854      	ldr	r0, [pc, #336]	@ (801ec24 <rmw_init+0x250>)
 801ead4:	f7f7 f8e6 	bl	8015ca4 <rmw_uxrce_init_wait_set_memory>
 801ead8:	4953      	ldr	r1, [pc, #332]	@ (801ec28 <rmw_init+0x254>)
 801eada:	4854      	ldr	r0, [pc, #336]	@ (801ec2c <rmw_init+0x258>)
 801eadc:	2204      	movs	r2, #4
 801eade:	f7f7 f901 	bl	8015ce4 <rmw_uxrce_init_guard_condition_memory>
 801eae2:	4642      	mov	r2, r8
 801eae4:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801eae6:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801eae8:	f7f6 ff84 	bl	80159f4 <rmw_uxrce_transport_init>
 801eaec:	4607      	mov	r7, r0
 801eaee:	2800      	cmp	r0, #0
 801eaf0:	d158      	bne.n	801eba4 <rmw_init+0x1d0>
 801eaf2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801eaf4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801eaf8:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801eafc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801eafe:	4628      	mov	r0, r5
 801eb00:	f7f8 fe6e 	bl	80177e0 <uxr_init_session>
 801eb04:	4622      	mov	r2, r4
 801eb06:	494a      	ldr	r1, [pc, #296]	@ (801ec30 <rmw_init+0x25c>)
 801eb08:	4628      	mov	r0, r5
 801eb0a:	f7f8 fe8d 	bl	8017828 <uxr_set_topic_callback>
 801eb0e:	463a      	mov	r2, r7
 801eb10:	4948      	ldr	r1, [pc, #288]	@ (801ec34 <rmw_init+0x260>)
 801eb12:	4628      	mov	r0, r5
 801eb14:	f7f8 fe84 	bl	8017820 <uxr_set_status_callback>
 801eb18:	463a      	mov	r2, r7
 801eb1a:	4947      	ldr	r1, [pc, #284]	@ (801ec38 <rmw_init+0x264>)
 801eb1c:	4628      	mov	r0, r5
 801eb1e:	f7f8 fe87 	bl	8017830 <uxr_set_request_callback>
 801eb22:	463a      	mov	r2, r7
 801eb24:	4945      	ldr	r1, [pc, #276]	@ (801ec3c <rmw_init+0x268>)
 801eb26:	4628      	mov	r0, r5
 801eb28:	f7f8 fe86 	bl	8017838 <uxr_set_reply_callback>
 801eb2c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eb30:	2304      	movs	r3, #4
 801eb32:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801eb36:	0092      	lsls	r2, r2, #2
 801eb38:	4628      	mov	r0, r5
 801eb3a:	f7f8 febd 	bl	80178b8 <uxr_create_input_reliable_stream>
 801eb3e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eb42:	2304      	movs	r3, #4
 801eb44:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801eb48:	0092      	lsls	r2, r2, #2
 801eb4a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801eb4e:	4628      	mov	r0, r5
 801eb50:	f7f8 fe88 	bl	8017864 <uxr_create_output_reliable_stream>
 801eb54:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801eb58:	4628      	mov	r0, r5
 801eb5a:	f7f8 fea7 	bl	80178ac <uxr_create_input_best_effort_stream>
 801eb5e:	f241 3194 	movw	r1, #5012	@ 0x1394
 801eb62:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801eb66:	4628      	mov	r0, r5
 801eb68:	4421      	add	r1, r4
 801eb6a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eb6e:	f7f8 fe67 	bl	8017840 <uxr_create_output_best_effort_stream>
 801eb72:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801eb76:	4628      	mov	r0, r5
 801eb78:	f7f9 fc70 	bl	801845c <uxr_create_session>
 801eb7c:	b1f8      	cbz	r0, 801ebbe <rmw_init+0x1ea>
 801eb7e:	4638      	mov	r0, r7
 801eb80:	b003      	add	sp, #12
 801eb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb86:	270b      	movs	r7, #11
 801eb88:	4638      	mov	r0, r7
 801eb8a:	b003      	add	sp, #12
 801eb8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb90:	2701      	movs	r7, #1
 801eb92:	4638      	mov	r0, r7
 801eb94:	b003      	add	sp, #12
 801eb96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb9a:	270c      	movs	r7, #12
 801eb9c:	4638      	mov	r0, r7
 801eb9e:	b003      	add	sp, #12
 801eba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eba4:	4648      	mov	r0, r9
 801eba6:	f7f8 fc53 	bl	8017450 <uxr_close_custom_transport>
 801ebaa:	4621      	mov	r1, r4
 801ebac:	480c      	ldr	r0, [pc, #48]	@ (801ebe0 <rmw_init+0x20c>)
 801ebae:	f7ff fdb5 	bl	801e71c <put_memory>
 801ebb2:	4638      	mov	r0, r7
 801ebb4:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801ebb8:	b003      	add	sp, #12
 801ebba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ebbe:	4648      	mov	r0, r9
 801ebc0:	f7f8 fc46 	bl	8017450 <uxr_close_custom_transport>
 801ebc4:	4621      	mov	r1, r4
 801ebc6:	4806      	ldr	r0, [pc, #24]	@ (801ebe0 <rmw_init+0x20c>)
 801ebc8:	f7ff fda8 	bl	801e71c <put_memory>
 801ebcc:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801ebce:	2701      	movs	r7, #1
 801ebd0:	e7d5      	b.n	801eb7e <rmw_init+0x1aa>
 801ebd2:	bf00      	nop
 801ebd4:	08025818 	.word	0x08025818
 801ebd8:	24069394 	.word	0x24069394
 801ebdc:	24065640 	.word	0x24065640
 801ebe0:	24069384 	.word	0x24069384
 801ebe4:	24066be8 	.word	0x24066be8
 801ebe8:	24064c64 	.word	0x24064c64
 801ebec:	24069354 	.word	0x24069354
 801ebf0:	24068ce8 	.word	0x24068ce8
 801ebf4:	240693a4 	.word	0x240693a4
 801ebf8:	24064d08 	.word	0x24064d08
 801ebfc:	24069364 	.word	0x24069364
 801ec00:	24065578 	.word	0x24065578
 801ec04:	24069374 	.word	0x24069374
 801ec08:	24064a98 	.word	0x24064a98
 801ec0c:	24064a88 	.word	0x24064a88
 801ec10:	24069120 	.word	0x24069120
 801ec14:	240693b4 	.word	0x240693b4
 801ec18:	24064be0 	.word	0x24064be0
 801ec1c:	24069344 	.word	0x24069344
 801ec20:	240692c4 	.word	0x240692c4
 801ec24:	240693c4 	.word	0x240693c4
 801ec28:	24064b60 	.word	0x24064b60
 801ec2c:	24069334 	.word	0x24069334
 801ec30:	08021679 	.word	0x08021679
 801ec34:	08021671 	.word	0x08021671
 801ec38:	08021711 	.word	0x08021711
 801ec3c:	080217ad 	.word	0x080217ad

0801ec40 <rmw_context_fini>:
 801ec40:	4b17      	ldr	r3, [pc, #92]	@ (801eca0 <rmw_context_fini+0x60>)
 801ec42:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801ec44:	b570      	push	{r4, r5, r6, lr}
 801ec46:	681c      	ldr	r4, [r3, #0]
 801ec48:	4605      	mov	r5, r0
 801ec4a:	b334      	cbz	r4, 801ec9a <rmw_context_fini+0x5a>
 801ec4c:	2600      	movs	r6, #0
 801ec4e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801ec52:	6902      	ldr	r2, [r0, #16]
 801ec54:	428a      	cmp	r2, r1
 801ec56:	d018      	beq.n	801ec8a <rmw_context_fini+0x4a>
 801ec58:	2c00      	cmp	r4, #0
 801ec5a:	d1f8      	bne.n	801ec4e <rmw_context_fini+0xe>
 801ec5c:	b189      	cbz	r1, 801ec82 <rmw_context_fini+0x42>
 801ec5e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801ec62:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801ec66:	789b      	ldrb	r3, [r3, #2]
 801ec68:	2b01      	cmp	r3, #1
 801ec6a:	bf14      	ite	ne
 801ec6c:	210a      	movne	r1, #10
 801ec6e:	2100      	moveq	r1, #0
 801ec70:	f7f9 fbcc 	bl	801840c <uxr_delete_session_retries>
 801ec74:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801ec76:	f7f7 f855 	bl	8015d24 <rmw_uxrce_fini_session_memory>
 801ec7a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801ec7c:	3010      	adds	r0, #16
 801ec7e:	f7f8 fbe7 	bl	8017450 <uxr_close_custom_transport>
 801ec82:	2300      	movs	r3, #0
 801ec84:	4630      	mov	r0, r6
 801ec86:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801ec88:	bd70      	pop	{r4, r5, r6, pc}
 801ec8a:	3018      	adds	r0, #24
 801ec8c:	f000 f90e 	bl	801eeac <rmw_destroy_node>
 801ec90:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ec92:	4606      	mov	r6, r0
 801ec94:	2c00      	cmp	r4, #0
 801ec96:	d1da      	bne.n	801ec4e <rmw_context_fini+0xe>
 801ec98:	e7e0      	b.n	801ec5c <rmw_context_fini+0x1c>
 801ec9a:	4626      	mov	r6, r4
 801ec9c:	e7de      	b.n	801ec5c <rmw_context_fini+0x1c>
 801ec9e:	bf00      	nop
 801eca0:	24069354 	.word	0x24069354

0801eca4 <create_topic>:
 801eca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eca8:	4605      	mov	r5, r0
 801ecaa:	b084      	sub	sp, #16
 801ecac:	4822      	ldr	r0, [pc, #136]	@ (801ed38 <create_topic+0x94>)
 801ecae:	460f      	mov	r7, r1
 801ecb0:	4616      	mov	r6, r2
 801ecb2:	f7ff fd23 	bl	801e6fc <get_memory>
 801ecb6:	4604      	mov	r4, r0
 801ecb8:	2800      	cmp	r0, #0
 801ecba:	d039      	beq.n	801ed30 <create_topic+0x8c>
 801ecbc:	692b      	ldr	r3, [r5, #16]
 801ecbe:	2102      	movs	r1, #2
 801ecc0:	6884      	ldr	r4, [r0, #8]
 801ecc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ecc6:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801ed40 <create_topic+0x9c>
 801ecca:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801ecce:	1c42      	adds	r2, r0, #1
 801ecd0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801ecd4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801ecd8:	f7f8 fbbe 	bl	8017458 <uxr_object_id>
 801ecdc:	223c      	movs	r2, #60	@ 0x3c
 801ecde:	6120      	str	r0, [r4, #16]
 801ece0:	4641      	mov	r1, r8
 801ece2:	4638      	mov	r0, r7
 801ece4:	f7f7 fa9c 	bl	8016220 <generate_topic_name>
 801ece8:	b1f0      	cbz	r0, 801ed28 <create_topic+0x84>
 801ecea:	4f14      	ldr	r7, [pc, #80]	@ (801ed3c <create_topic+0x98>)
 801ecec:	4630      	mov	r0, r6
 801ecee:	2264      	movs	r2, #100	@ 0x64
 801ecf0:	4639      	mov	r1, r7
 801ecf2:	f7f7 fa67 	bl	80161c4 <generate_type_name>
 801ecf6:	b1b8      	cbz	r0, 801ed28 <create_topic+0x84>
 801ecf8:	6928      	ldr	r0, [r5, #16]
 801ecfa:	2106      	movs	r1, #6
 801ecfc:	696b      	ldr	r3, [r5, #20]
 801ecfe:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801ed02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ed06:	f8cd 8000 	str.w	r8, [sp]
 801ed0a:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801ed0e:	6811      	ldr	r1, [r2, #0]
 801ed10:	6922      	ldr	r2, [r4, #16]
 801ed12:	f7f8 f925 	bl	8016f60 <uxr_buffer_create_topic_bin>
 801ed16:	4602      	mov	r2, r0
 801ed18:	6928      	ldr	r0, [r5, #16]
 801ed1a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ed1e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ed22:	f7f7 f983 	bl	801602c <run_xrce_session>
 801ed26:	b918      	cbnz	r0, 801ed30 <create_topic+0x8c>
 801ed28:	4620      	mov	r0, r4
 801ed2a:	2400      	movs	r4, #0
 801ed2c:	f7f7 f870 	bl	8015e10 <rmw_uxrce_fini_topic_memory>
 801ed30:	4620      	mov	r0, r4
 801ed32:	b004      	add	sp, #16
 801ed34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed38:	240693b4 	.word	0x240693b4
 801ed3c:	24069510 	.word	0x24069510
 801ed40:	240694d4 	.word	0x240694d4

0801ed44 <destroy_topic>:
 801ed44:	b538      	push	{r3, r4, r5, lr}
 801ed46:	6985      	ldr	r5, [r0, #24]
 801ed48:	b1dd      	cbz	r5, 801ed82 <destroy_topic+0x3e>
 801ed4a:	4604      	mov	r4, r0
 801ed4c:	6928      	ldr	r0, [r5, #16]
 801ed4e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801ed52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ed56:	6922      	ldr	r2, [r4, #16]
 801ed58:	6819      	ldr	r1, [r3, #0]
 801ed5a:	f7f8 f883 	bl	8016e64 <uxr_buffer_delete_entity>
 801ed5e:	4602      	mov	r2, r0
 801ed60:	6928      	ldr	r0, [r5, #16]
 801ed62:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ed66:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ed6a:	f7f7 f95f 	bl	801602c <run_xrce_session>
 801ed6e:	4603      	mov	r3, r0
 801ed70:	4620      	mov	r0, r4
 801ed72:	2b00      	cmp	r3, #0
 801ed74:	bf14      	ite	ne
 801ed76:	2400      	movne	r4, #0
 801ed78:	2402      	moveq	r4, #2
 801ed7a:	f7f7 f849 	bl	8015e10 <rmw_uxrce_fini_topic_memory>
 801ed7e:	4620      	mov	r0, r4
 801ed80:	bd38      	pop	{r3, r4, r5, pc}
 801ed82:	2401      	movs	r4, #1
 801ed84:	4620      	mov	r0, r4
 801ed86:	bd38      	pop	{r3, r4, r5, pc}

0801ed88 <create_node>:
 801ed88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ed8c:	b083      	sub	sp, #12
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d064      	beq.n	801ee5c <create_node+0xd4>
 801ed92:	4606      	mov	r6, r0
 801ed94:	4838      	ldr	r0, [pc, #224]	@ (801ee78 <create_node+0xf0>)
 801ed96:	460f      	mov	r7, r1
 801ed98:	4690      	mov	r8, r2
 801ed9a:	461d      	mov	r5, r3
 801ed9c:	f7ff fcae 	bl	801e6fc <get_memory>
 801eda0:	2800      	cmp	r0, #0
 801eda2:	d05b      	beq.n	801ee5c <create_node+0xd4>
 801eda4:	6884      	ldr	r4, [r0, #8]
 801eda6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801eda8:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801edac:	f104 0518 	add.w	r5, r4, #24
 801edb0:	6123      	str	r3, [r4, #16]
 801edb2:	f7ff fd0b 	bl	801e7cc <rmw_get_implementation_identifier>
 801edb6:	f8c4 9020 	str.w	r9, [r4, #32]
 801edba:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801edbe:	4630      	mov	r0, r6
 801edc0:	f7e1 fa98 	bl	80002f4 <strlen>
 801edc4:	1c42      	adds	r2, r0, #1
 801edc6:	2a3c      	cmp	r2, #60	@ 0x3c
 801edc8:	d840      	bhi.n	801ee4c <create_node+0xc4>
 801edca:	4648      	mov	r0, r9
 801edcc:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801edd0:	4631      	mov	r1, r6
 801edd2:	f003 fbd0 	bl	8022576 <memcpy>
 801edd6:	4638      	mov	r0, r7
 801edd8:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801eddc:	f7e1 fa8a 	bl	80002f4 <strlen>
 801ede0:	1c42      	adds	r2, r0, #1
 801ede2:	2a3c      	cmp	r2, #60	@ 0x3c
 801ede4:	d832      	bhi.n	801ee4c <create_node+0xc4>
 801ede6:	4639      	mov	r1, r7
 801ede8:	4648      	mov	r0, r9
 801edea:	f003 fbc4 	bl	8022576 <memcpy>
 801edee:	6923      	ldr	r3, [r4, #16]
 801edf0:	2101      	movs	r1, #1
 801edf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801edf6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801edfa:	1842      	adds	r2, r0, r1
 801edfc:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801ee00:	f7f8 fb2a 	bl	8017458 <uxr_object_id>
 801ee04:	6160      	str	r0, [r4, #20]
 801ee06:	783b      	ldrb	r3, [r7, #0]
 801ee08:	2b2f      	cmp	r3, #47	@ 0x2f
 801ee0a:	d12c      	bne.n	801ee66 <create_node+0xde>
 801ee0c:	787b      	ldrb	r3, [r7, #1]
 801ee0e:	bb53      	cbnz	r3, 801ee66 <create_node+0xde>
 801ee10:	4633      	mov	r3, r6
 801ee12:	4a1a      	ldr	r2, [pc, #104]	@ (801ee7c <create_node+0xf4>)
 801ee14:	213c      	movs	r1, #60	@ 0x3c
 801ee16:	481a      	ldr	r0, [pc, #104]	@ (801ee80 <create_node+0xf8>)
 801ee18:	f003 f920 	bl	802205c <sniprintf>
 801ee1c:	6920      	ldr	r0, [r4, #16]
 801ee1e:	2106      	movs	r1, #6
 801ee20:	fa1f f388 	uxth.w	r3, r8
 801ee24:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801ee28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ee2c:	9101      	str	r1, [sp, #4]
 801ee2e:	4914      	ldr	r1, [pc, #80]	@ (801ee80 <create_node+0xf8>)
 801ee30:	9100      	str	r1, [sp, #0]
 801ee32:	6811      	ldr	r1, [r2, #0]
 801ee34:	6962      	ldr	r2, [r4, #20]
 801ee36:	f7f8 f861 	bl	8016efc <uxr_buffer_create_participant_bin>
 801ee3a:	4602      	mov	r2, r0
 801ee3c:	6920      	ldr	r0, [r4, #16]
 801ee3e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ee42:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ee46:	f7f7 f8f1 	bl	801602c <run_xrce_session>
 801ee4a:	b918      	cbnz	r0, 801ee54 <create_node+0xcc>
 801ee4c:	4628      	mov	r0, r5
 801ee4e:	2500      	movs	r5, #0
 801ee50:	f7f6 ff6e 	bl	8015d30 <rmw_uxrce_fini_node_memory>
 801ee54:	4628      	mov	r0, r5
 801ee56:	b003      	add	sp, #12
 801ee58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ee5c:	2500      	movs	r5, #0
 801ee5e:	4628      	mov	r0, r5
 801ee60:	b003      	add	sp, #12
 801ee62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ee66:	463b      	mov	r3, r7
 801ee68:	4a06      	ldr	r2, [pc, #24]	@ (801ee84 <create_node+0xfc>)
 801ee6a:	213c      	movs	r1, #60	@ 0x3c
 801ee6c:	9600      	str	r6, [sp, #0]
 801ee6e:	4804      	ldr	r0, [pc, #16]	@ (801ee80 <create_node+0xf8>)
 801ee70:	f003 f8f4 	bl	802205c <sniprintf>
 801ee74:	e7d2      	b.n	801ee1c <create_node+0x94>
 801ee76:	bf00      	nop
 801ee78:	24069354 	.word	0x24069354
 801ee7c:	08024898 	.word	0x08024898
 801ee80:	24069574 	.word	0x24069574
 801ee84:	08025228 	.word	0x08025228

0801ee88 <rmw_create_node>:
 801ee88:	468c      	mov	ip, r1
 801ee8a:	4611      	mov	r1, r2
 801ee8c:	f1bc 0f00 	cmp.w	ip, #0
 801ee90:	d00a      	beq.n	801eea8 <rmw_create_node+0x20>
 801ee92:	f89c 3000 	ldrb.w	r3, [ip]
 801ee96:	b13b      	cbz	r3, 801eea8 <rmw_create_node+0x20>
 801ee98:	b132      	cbz	r2, 801eea8 <rmw_create_node+0x20>
 801ee9a:	7813      	ldrb	r3, [r2, #0]
 801ee9c:	b123      	cbz	r3, 801eea8 <rmw_create_node+0x20>
 801ee9e:	4603      	mov	r3, r0
 801eea0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801eea2:	4660      	mov	r0, ip
 801eea4:	f7ff bf70 	b.w	801ed88 <create_node>
 801eea8:	2000      	movs	r0, #0
 801eeaa:	4770      	bx	lr

0801eeac <rmw_destroy_node>:
 801eeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeae:	b328      	cbz	r0, 801eefc <rmw_destroy_node+0x50>
 801eeb0:	4607      	mov	r7, r0
 801eeb2:	6800      	ldr	r0, [r0, #0]
 801eeb4:	b120      	cbz	r0, 801eec0 <rmw_destroy_node+0x14>
 801eeb6:	4b37      	ldr	r3, [pc, #220]	@ (801ef94 <rmw_destroy_node+0xe8>)
 801eeb8:	6819      	ldr	r1, [r3, #0]
 801eeba:	f7e1 fa11 	bl	80002e0 <strcmp>
 801eebe:	b9e8      	cbnz	r0, 801eefc <rmw_destroy_node+0x50>
 801eec0:	687d      	ldr	r5, [r7, #4]
 801eec2:	b1dd      	cbz	r5, 801eefc <rmw_destroy_node+0x50>
 801eec4:	4b34      	ldr	r3, [pc, #208]	@ (801ef98 <rmw_destroy_node+0xec>)
 801eec6:	681c      	ldr	r4, [r3, #0]
 801eec8:	2c00      	cmp	r4, #0
 801eeca:	d060      	beq.n	801ef8e <rmw_destroy_node+0xe2>
 801eecc:	2600      	movs	r6, #0
 801eece:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801eed2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801eed6:	429d      	cmp	r5, r3
 801eed8:	d013      	beq.n	801ef02 <rmw_destroy_node+0x56>
 801eeda:	2c00      	cmp	r4, #0
 801eedc:	d1f7      	bne.n	801eece <rmw_destroy_node+0x22>
 801eede:	4b2f      	ldr	r3, [pc, #188]	@ (801ef9c <rmw_destroy_node+0xf0>)
 801eee0:	681c      	ldr	r4, [r3, #0]
 801eee2:	b1c4      	cbz	r4, 801ef16 <rmw_destroy_node+0x6a>
 801eee4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801eee8:	6a0b      	ldr	r3, [r1, #32]
 801eeea:	429d      	cmp	r5, r3
 801eeec:	d1f9      	bne.n	801eee2 <rmw_destroy_node+0x36>
 801eeee:	317c      	adds	r1, #124	@ 0x7c
 801eef0:	4638      	mov	r0, r7
 801eef2:	f000 fbff 	bl	801f6f4 <rmw_destroy_subscription>
 801eef6:	2801      	cmp	r0, #1
 801eef8:	4606      	mov	r6, r0
 801eefa:	d1f2      	bne.n	801eee2 <rmw_destroy_node+0x36>
 801eefc:	2601      	movs	r6, #1
 801eefe:	4630      	mov	r0, r6
 801ef00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef02:	3184      	adds	r1, #132	@ 0x84
 801ef04:	4638      	mov	r0, r7
 801ef06:	f7f6 fd21 	bl	801594c <rmw_destroy_publisher>
 801ef0a:	2801      	cmp	r0, #1
 801ef0c:	4606      	mov	r6, r0
 801ef0e:	d0f5      	beq.n	801eefc <rmw_destroy_node+0x50>
 801ef10:	2c00      	cmp	r4, #0
 801ef12:	d1dc      	bne.n	801eece <rmw_destroy_node+0x22>
 801ef14:	e7e3      	b.n	801eede <rmw_destroy_node+0x32>
 801ef16:	4b22      	ldr	r3, [pc, #136]	@ (801efa0 <rmw_destroy_node+0xf4>)
 801ef18:	681c      	ldr	r4, [r3, #0]
 801ef1a:	b16c      	cbz	r4, 801ef38 <rmw_destroy_node+0x8c>
 801ef1c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ef20:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801ef22:	429d      	cmp	r5, r3
 801ef24:	d1f9      	bne.n	801ef1a <rmw_destroy_node+0x6e>
 801ef26:	317c      	adds	r1, #124	@ 0x7c
 801ef28:	4638      	mov	r0, r7
 801ef2a:	f000 fa6d 	bl	801f408 <rmw_destroy_service>
 801ef2e:	2801      	cmp	r0, #1
 801ef30:	4606      	mov	r6, r0
 801ef32:	d0e3      	beq.n	801eefc <rmw_destroy_node+0x50>
 801ef34:	2c00      	cmp	r4, #0
 801ef36:	d1f1      	bne.n	801ef1c <rmw_destroy_node+0x70>
 801ef38:	4b1a      	ldr	r3, [pc, #104]	@ (801efa4 <rmw_destroy_node+0xf8>)
 801ef3a:	681c      	ldr	r4, [r3, #0]
 801ef3c:	b16c      	cbz	r4, 801ef5a <rmw_destroy_node+0xae>
 801ef3e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ef42:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801ef44:	429d      	cmp	r5, r3
 801ef46:	d1f9      	bne.n	801ef3c <rmw_destroy_node+0x90>
 801ef48:	317c      	adds	r1, #124	@ 0x7c
 801ef4a:	4638      	mov	r0, r7
 801ef4c:	f7ff fbfa 	bl	801e744 <rmw_destroy_client>
 801ef50:	2801      	cmp	r0, #1
 801ef52:	4606      	mov	r6, r0
 801ef54:	d0d2      	beq.n	801eefc <rmw_destroy_node+0x50>
 801ef56:	2c00      	cmp	r4, #0
 801ef58:	d1f1      	bne.n	801ef3e <rmw_destroy_node+0x92>
 801ef5a:	6928      	ldr	r0, [r5, #16]
 801ef5c:	696a      	ldr	r2, [r5, #20]
 801ef5e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801ef62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ef66:	6819      	ldr	r1, [r3, #0]
 801ef68:	f7f7 ff7c 	bl	8016e64 <uxr_buffer_delete_entity>
 801ef6c:	4602      	mov	r2, r0
 801ef6e:	6928      	ldr	r0, [r5, #16]
 801ef70:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ef74:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ef78:	f7f7 f858 	bl	801602c <run_xrce_session>
 801ef7c:	4603      	mov	r3, r0
 801ef7e:	4638      	mov	r0, r7
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	bf08      	it	eq
 801ef84:	2602      	moveq	r6, #2
 801ef86:	f7f6 fed3 	bl	8015d30 <rmw_uxrce_fini_node_memory>
 801ef8a:	4630      	mov	r0, r6
 801ef8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef8e:	4626      	mov	r6, r4
 801ef90:	e7a5      	b.n	801eede <rmw_destroy_node+0x32>
 801ef92:	bf00      	nop
 801ef94:	08025818 	.word	0x08025818
 801ef98:	24069364 	.word	0x24069364
 801ef9c:	240693a4 	.word	0x240693a4
 801efa0:	24069374 	.word	0x24069374
 801efa4:	24064a88 	.word	0x24064a88

0801efa8 <rmw_node_get_graph_guard_condition>:
 801efa8:	6843      	ldr	r3, [r0, #4]
 801efaa:	6918      	ldr	r0, [r3, #16]
 801efac:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801efb0:	4770      	bx	lr
 801efb2:	bf00      	nop

0801efb4 <rmw_send_request>:
 801efb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801efb8:	4604      	mov	r4, r0
 801efba:	6800      	ldr	r0, [r0, #0]
 801efbc:	b08b      	sub	sp, #44	@ 0x2c
 801efbe:	460e      	mov	r6, r1
 801efc0:	4615      	mov	r5, r2
 801efc2:	b128      	cbz	r0, 801efd0 <rmw_send_request+0x1c>
 801efc4:	4b21      	ldr	r3, [pc, #132]	@ (801f04c <rmw_send_request+0x98>)
 801efc6:	6819      	ldr	r1, [r3, #0]
 801efc8:	f7e1 f98a 	bl	80002e0 <strcmp>
 801efcc:	2800      	cmp	r0, #0
 801efce:	d139      	bne.n	801f044 <rmw_send_request+0x90>
 801efd0:	6864      	ldr	r4, [r4, #4]
 801efd2:	2700      	movs	r7, #0
 801efd4:	6963      	ldr	r3, [r4, #20]
 801efd6:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801efda:	689b      	ldr	r3, [r3, #8]
 801efdc:	4798      	blx	r3
 801efde:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801efe2:	4630      	mov	r0, r6
 801efe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801efe8:	4798      	blx	r3
 801efea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801efee:	9000      	str	r0, [sp, #0]
 801eff0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801eff4:	6922      	ldr	r2, [r4, #16]
 801eff6:	ab02      	add	r3, sp, #8
 801eff8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801effa:	f7fa fb37 	bl	801966c <uxr_prepare_output_stream>
 801effe:	e9c5 0700 	strd	r0, r7, [r5]
 801f002:	b198      	cbz	r0, 801f02c <rmw_send_request+0x78>
 801f004:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801f008:	a902      	add	r1, sp, #8
 801f00a:	4630      	mov	r0, r6
 801f00c:	4798      	blx	r3
 801f00e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801f012:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f016:	2b01      	cmp	r3, #1
 801f018:	d00c      	beq.n	801f034 <rmw_send_request+0x80>
 801f01a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801f01c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f020:	f7f9 f82a 	bl	8018078 <uxr_run_session_until_confirm_delivery>
 801f024:	4638      	mov	r0, r7
 801f026:	b00b      	add	sp, #44	@ 0x2c
 801f028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f02c:	2001      	movs	r0, #1
 801f02e:	b00b      	add	sp, #44	@ 0x2c
 801f030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f034:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f038:	f7f8 fc64 	bl	8017904 <uxr_flash_output_streams>
 801f03c:	4638      	mov	r0, r7
 801f03e:	b00b      	add	sp, #44	@ 0x2c
 801f040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f044:	200c      	movs	r0, #12
 801f046:	b00b      	add	sp, #44	@ 0x2c
 801f048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f04c:	08025818 	.word	0x08025818

0801f050 <rmw_take_request>:
 801f050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f054:	4605      	mov	r5, r0
 801f056:	6800      	ldr	r0, [r0, #0]
 801f058:	b089      	sub	sp, #36	@ 0x24
 801f05a:	460c      	mov	r4, r1
 801f05c:	4690      	mov	r8, r2
 801f05e:	461e      	mov	r6, r3
 801f060:	b128      	cbz	r0, 801f06e <rmw_take_request+0x1e>
 801f062:	4b28      	ldr	r3, [pc, #160]	@ (801f104 <rmw_take_request+0xb4>)
 801f064:	6819      	ldr	r1, [r3, #0]
 801f066:	f7e1 f93b 	bl	80002e0 <strcmp>
 801f06a:	2800      	cmp	r0, #0
 801f06c:	d146      	bne.n	801f0fc <rmw_take_request+0xac>
 801f06e:	b10e      	cbz	r6, 801f074 <rmw_take_request+0x24>
 801f070:	2300      	movs	r3, #0
 801f072:	7033      	strb	r3, [r6, #0]
 801f074:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801f078:	f7f6 ff5a 	bl	8015f30 <rmw_uxrce_clean_expired_static_input_buffer>
 801f07c:	4648      	mov	r0, r9
 801f07e:	f7f6 ff2d 	bl	8015edc <rmw_uxrce_find_static_input_buffer_by_owner>
 801f082:	4607      	mov	r7, r0
 801f084:	b3b0      	cbz	r0, 801f0f4 <rmw_take_request+0xa4>
 801f086:	6885      	ldr	r5, [r0, #8]
 801f088:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801f08c:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801f090:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801f094:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801f098:	7423      	strb	r3, [r4, #16]
 801f09a:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801f09e:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801f0a2:	f8a4 2011 	strh.w	r2, [r4, #17]
 801f0a6:	74e3      	strb	r3, [r4, #19]
 801f0a8:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801f0ac:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801f0b0:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801f0b4:	6161      	str	r1, [r4, #20]
 801f0b6:	61a2      	str	r2, [r4, #24]
 801f0b8:	61e3      	str	r3, [r4, #28]
 801f0ba:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f0be:	689b      	ldr	r3, [r3, #8]
 801f0c0:	4798      	blx	r3
 801f0c2:	6844      	ldr	r4, [r0, #4]
 801f0c4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801f0c8:	f105 0110 	add.w	r1, r5, #16
 801f0cc:	4668      	mov	r0, sp
 801f0ce:	f7f5 f859 	bl	8014184 <ucdr_init_buffer>
 801f0d2:	4641      	mov	r1, r8
 801f0d4:	68e3      	ldr	r3, [r4, #12]
 801f0d6:	4668      	mov	r0, sp
 801f0d8:	4798      	blx	r3
 801f0da:	4639      	mov	r1, r7
 801f0dc:	4604      	mov	r4, r0
 801f0de:	480a      	ldr	r0, [pc, #40]	@ (801f108 <rmw_take_request+0xb8>)
 801f0e0:	f7ff fb1c 	bl	801e71c <put_memory>
 801f0e4:	b106      	cbz	r6, 801f0e8 <rmw_take_request+0x98>
 801f0e6:	7034      	strb	r4, [r6, #0]
 801f0e8:	f084 0001 	eor.w	r0, r4, #1
 801f0ec:	b2c0      	uxtb	r0, r0
 801f0ee:	b009      	add	sp, #36	@ 0x24
 801f0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0f4:	2001      	movs	r0, #1
 801f0f6:	b009      	add	sp, #36	@ 0x24
 801f0f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0fc:	200c      	movs	r0, #12
 801f0fe:	b009      	add	sp, #36	@ 0x24
 801f100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f104:	08025818 	.word	0x08025818
 801f108:	24069394 	.word	0x24069394

0801f10c <rmw_send_response>:
 801f10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f10e:	4605      	mov	r5, r0
 801f110:	6800      	ldr	r0, [r0, #0]
 801f112:	b091      	sub	sp, #68	@ 0x44
 801f114:	460c      	mov	r4, r1
 801f116:	4616      	mov	r6, r2
 801f118:	b128      	cbz	r0, 801f126 <rmw_send_response+0x1a>
 801f11a:	4b29      	ldr	r3, [pc, #164]	@ (801f1c0 <rmw_send_response+0xb4>)
 801f11c:	6819      	ldr	r1, [r3, #0]
 801f11e:	f7e1 f8df 	bl	80002e0 <strcmp>
 801f122:	2800      	cmp	r0, #0
 801f124:	d141      	bne.n	801f1aa <rmw_send_response+0x9e>
 801f126:	686d      	ldr	r5, [r5, #4]
 801f128:	68a1      	ldr	r1, [r4, #8]
 801f12a:	6860      	ldr	r0, [r4, #4]
 801f12c:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801f12e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801f132:	9307      	str	r3, [sp, #28]
 801f134:	4623      	mov	r3, r4
 801f136:	9206      	str	r2, [sp, #24]
 801f138:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f13c:	789b      	ldrb	r3, [r3, #2]
 801f13e:	f88d 2017 	strb.w	r2, [sp, #23]
 801f142:	f88d 3016 	strb.w	r3, [sp, #22]
 801f146:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801f14a:	68e2      	ldr	r2, [r4, #12]
 801f14c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f150:	ab02      	add	r3, sp, #8
 801f152:	696c      	ldr	r4, [r5, #20]
 801f154:	c307      	stmia	r3!, {r0, r1, r2}
 801f156:	68e3      	ldr	r3, [r4, #12]
 801f158:	4798      	blx	r3
 801f15a:	6844      	ldr	r4, [r0, #4]
 801f15c:	4630      	mov	r0, r6
 801f15e:	6923      	ldr	r3, [r4, #16]
 801f160:	4798      	blx	r3
 801f162:	f100 0318 	add.w	r3, r0, #24
 801f166:	6938      	ldr	r0, [r7, #16]
 801f168:	9300      	str	r3, [sp, #0]
 801f16a:	ab08      	add	r3, sp, #32
 801f16c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f170:	692a      	ldr	r2, [r5, #16]
 801f172:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801f174:	f7fa fa7a 	bl	801966c <uxr_prepare_output_stream>
 801f178:	b910      	cbnz	r0, 801f180 <rmw_send_response+0x74>
 801f17a:	2001      	movs	r0, #1
 801f17c:	b011      	add	sp, #68	@ 0x44
 801f17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f180:	a902      	add	r1, sp, #8
 801f182:	a808      	add	r0, sp, #32
 801f184:	f7fb fc02 	bl	801a98c <uxr_serialize_SampleIdentity>
 801f188:	68a3      	ldr	r3, [r4, #8]
 801f18a:	a908      	add	r1, sp, #32
 801f18c:	4630      	mov	r0, r6
 801f18e:	4798      	blx	r3
 801f190:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801f194:	6938      	ldr	r0, [r7, #16]
 801f196:	2b01      	cmp	r3, #1
 801f198:	d00a      	beq.n	801f1b0 <rmw_send_response+0xa4>
 801f19a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801f19c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f1a0:	f7f8 ff6a 	bl	8018078 <uxr_run_session_until_confirm_delivery>
 801f1a4:	2000      	movs	r0, #0
 801f1a6:	b011      	add	sp, #68	@ 0x44
 801f1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1aa:	200c      	movs	r0, #12
 801f1ac:	b011      	add	sp, #68	@ 0x44
 801f1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f1b4:	f7f8 fba6 	bl	8017904 <uxr_flash_output_streams>
 801f1b8:	2000      	movs	r0, #0
 801f1ba:	b011      	add	sp, #68	@ 0x44
 801f1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1be:	bf00      	nop
 801f1c0:	08025818 	.word	0x08025818

0801f1c4 <rmw_take_response>:
 801f1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1c8:	4604      	mov	r4, r0
 801f1ca:	6800      	ldr	r0, [r0, #0]
 801f1cc:	b088      	sub	sp, #32
 801f1ce:	460f      	mov	r7, r1
 801f1d0:	4690      	mov	r8, r2
 801f1d2:	461d      	mov	r5, r3
 801f1d4:	b120      	cbz	r0, 801f1e0 <rmw_take_response+0x1c>
 801f1d6:	4b1d      	ldr	r3, [pc, #116]	@ (801f24c <rmw_take_response+0x88>)
 801f1d8:	6819      	ldr	r1, [r3, #0]
 801f1da:	f7e1 f881 	bl	80002e0 <strcmp>
 801f1de:	bb68      	cbnz	r0, 801f23c <rmw_take_response+0x78>
 801f1e0:	b10d      	cbz	r5, 801f1e6 <rmw_take_response+0x22>
 801f1e2:	2300      	movs	r3, #0
 801f1e4:	702b      	strb	r3, [r5, #0]
 801f1e6:	6864      	ldr	r4, [r4, #4]
 801f1e8:	f7f6 fea2 	bl	8015f30 <rmw_uxrce_clean_expired_static_input_buffer>
 801f1ec:	4620      	mov	r0, r4
 801f1ee:	f7f6 fe75 	bl	8015edc <rmw_uxrce_find_static_input_buffer_by_owner>
 801f1f2:	4606      	mov	r6, r0
 801f1f4:	b330      	cbz	r0, 801f244 <rmw_take_response+0x80>
 801f1f6:	6963      	ldr	r3, [r4, #20]
 801f1f8:	6884      	ldr	r4, [r0, #8]
 801f1fa:	68db      	ldr	r3, [r3, #12]
 801f1fc:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801f200:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801f204:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801f208:	4798      	blx	r3
 801f20a:	6847      	ldr	r7, [r0, #4]
 801f20c:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801f210:	f104 0110 	add.w	r1, r4, #16
 801f214:	4668      	mov	r0, sp
 801f216:	f7f4 ffb5 	bl	8014184 <ucdr_init_buffer>
 801f21a:	4641      	mov	r1, r8
 801f21c:	68fb      	ldr	r3, [r7, #12]
 801f21e:	4668      	mov	r0, sp
 801f220:	4798      	blx	r3
 801f222:	4631      	mov	r1, r6
 801f224:	4604      	mov	r4, r0
 801f226:	480a      	ldr	r0, [pc, #40]	@ (801f250 <rmw_take_response+0x8c>)
 801f228:	f7ff fa78 	bl	801e71c <put_memory>
 801f22c:	b105      	cbz	r5, 801f230 <rmw_take_response+0x6c>
 801f22e:	702c      	strb	r4, [r5, #0]
 801f230:	f084 0001 	eor.w	r0, r4, #1
 801f234:	b2c0      	uxtb	r0, r0
 801f236:	b008      	add	sp, #32
 801f238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f23c:	200c      	movs	r0, #12
 801f23e:	b008      	add	sp, #32
 801f240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f244:	2001      	movs	r0, #1
 801f246:	b008      	add	sp, #32
 801f248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f24c:	08025818 	.word	0x08025818
 801f250:	24069394 	.word	0x24069394

0801f254 <rmw_create_service>:
 801f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f258:	b091      	sub	sp, #68	@ 0x44
 801f25a:	2900      	cmp	r1, #0
 801f25c:	f000 80bb 	beq.w	801f3d6 <rmw_create_service+0x182>
 801f260:	4606      	mov	r6, r0
 801f262:	2800      	cmp	r0, #0
 801f264:	f000 80b7 	beq.w	801f3d6 <rmw_create_service+0x182>
 801f268:	4614      	mov	r4, r2
 801f26a:	6800      	ldr	r0, [r0, #0]
 801f26c:	4689      	mov	r9, r1
 801f26e:	461d      	mov	r5, r3
 801f270:	f7f6 ffee 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801f274:	2c00      	cmp	r4, #0
 801f276:	f000 80ae 	beq.w	801f3d6 <rmw_create_service+0x182>
 801f27a:	f080 0001 	eor.w	r0, r0, #1
 801f27e:	b2c0      	uxtb	r0, r0
 801f280:	2800      	cmp	r0, #0
 801f282:	f040 80a8 	bne.w	801f3d6 <rmw_create_service+0x182>
 801f286:	7823      	ldrb	r3, [r4, #0]
 801f288:	2b00      	cmp	r3, #0
 801f28a:	f000 80a4 	beq.w	801f3d6 <rmw_create_service+0x182>
 801f28e:	2d00      	cmp	r5, #0
 801f290:	f000 80a1 	beq.w	801f3d6 <rmw_create_service+0x182>
 801f294:	4856      	ldr	r0, [pc, #344]	@ (801f3f0 <rmw_create_service+0x19c>)
 801f296:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801f29a:	f7ff fa2f 	bl	801e6fc <get_memory>
 801f29e:	4606      	mov	r6, r0
 801f2a0:	2800      	cmp	r0, #0
 801f2a2:	f000 8099 	beq.w	801f3d8 <rmw_create_service+0x184>
 801f2a6:	6887      	ldr	r7, [r0, #8]
 801f2a8:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 801f2ac:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801f2b0:	f7ff fa8c 	bl	801e7cc <rmw_get_implementation_identifier>
 801f2b4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801f2b6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801f2ba:	4620      	mov	r0, r4
 801f2bc:	f7e1 f81a 	bl	80002f4 <strlen>
 801f2c0:	1c42      	adds	r2, r0, #1
 801f2c2:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801f2c6:	2a3c      	cmp	r2, #60	@ 0x3c
 801f2c8:	f200 808a 	bhi.w	801f3e0 <rmw_create_service+0x18c>
 801f2cc:	4621      	mov	r1, r4
 801f2ce:	4650      	mov	r0, sl
 801f2d0:	f003 f951 	bl	8022576 <memcpy>
 801f2d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801f2d8:	4629      	mov	r1, r5
 801f2da:	2250      	movs	r2, #80	@ 0x50
 801f2dc:	f107 0020 	add.w	r0, r7, #32
 801f2e0:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 801f2e4:	677b      	str	r3, [r7, #116]	@ 0x74
 801f2e6:	f003 f946 	bl	8022576 <memcpy>
 801f2ea:	4648      	mov	r0, r9
 801f2ec:	4941      	ldr	r1, [pc, #260]	@ (801f3f4 <rmw_create_service+0x1a0>)
 801f2ee:	f7f7 f837 	bl	8016360 <get_service_typesupport_handle>
 801f2f2:	2800      	cmp	r0, #0
 801f2f4:	d074      	beq.n	801f3e0 <rmw_create_service+0x18c>
 801f2f6:	6843      	ldr	r3, [r0, #4]
 801f2f8:	617b      	str	r3, [r7, #20]
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	d070      	beq.n	801f3e0 <rmw_create_service+0x18c>
 801f2fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f302:	2108      	movs	r1, #8
 801f304:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 801f3fc <rmw_create_service+0x1a8>
 801f308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f30c:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 801f400 <rmw_create_service+0x1ac>
 801f310:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 801f314:	1c42      	adds	r2, r0, #1
 801f316:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801f31a:	f7f8 f89d 	bl	8017458 <uxr_object_id>
 801f31e:	2364      	movs	r3, #100	@ 0x64
 801f320:	6138      	str	r0, [r7, #16]
 801f322:	4652      	mov	r2, sl
 801f324:	4649      	mov	r1, r9
 801f326:	6978      	ldr	r0, [r7, #20]
 801f328:	f7f6 fee6 	bl	80160f8 <generate_service_types>
 801f32c:	2800      	cmp	r0, #0
 801f32e:	d057      	beq.n	801f3e0 <rmw_create_service+0x18c>
 801f330:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 801f404 <rmw_create_service+0x1b0>
 801f334:	233c      	movs	r3, #60	@ 0x3c
 801f336:	4a30      	ldr	r2, [pc, #192]	@ (801f3f8 <rmw_create_service+0x1a4>)
 801f338:	4620      	mov	r0, r4
 801f33a:	4659      	mov	r1, fp
 801f33c:	f7f6 feaa 	bl	8016094 <generate_service_topics>
 801f340:	2800      	cmp	r0, #0
 801f342:	d04d      	beq.n	801f3e0 <rmw_create_service+0x18c>
 801f344:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f348:	a80c      	add	r0, sp, #48	@ 0x30
 801f34a:	4629      	mov	r1, r5
 801f34c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 801f350:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f354:	f7f6 fe86 	bl	8016064 <convert_qos_profile>
 801f358:	4a27      	ldr	r2, [pc, #156]	@ (801f3f8 <rmw_create_service+0x1a4>)
 801f35a:	a80c      	add	r0, sp, #48	@ 0x30
 801f35c:	9400      	str	r4, [sp, #0]
 801f35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f360:	e9cd b203 	strd	fp, r2, [sp, #12]
 801f364:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801f368:	c803      	ldmia	r0, {r0, r1}
 801f36a:	9a08      	ldr	r2, [sp, #32]
 801f36c:	9005      	str	r0, [sp, #20]
 801f36e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801f372:	2306      	movs	r3, #6
 801f374:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f378:	9307      	str	r3, [sp, #28]
 801f37a:	6811      	ldr	r1, [r2, #0]
 801f37c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801f380:	693a      	ldr	r2, [r7, #16]
 801f382:	f7f7 ff71 	bl	8017268 <uxr_buffer_create_replier_bin>
 801f386:	4602      	mov	r2, r0
 801f388:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f38c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f390:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f394:	f7f6 fe4a 	bl	801602c <run_xrce_session>
 801f398:	b310      	cbz	r0, 801f3e0 <rmw_create_service+0x18c>
 801f39a:	7a2b      	ldrb	r3, [r5, #8]
 801f39c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f3a0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f3a4:	2b02      	cmp	r3, #2
 801f3a6:	920e      	str	r2, [sp, #56]	@ 0x38
 801f3a8:	f04f 0200 	mov.w	r2, #0
 801f3ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f3ae:	bf0c      	ite	eq
 801f3b0:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801f3b4:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 801f3b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f3bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f3be:	ab0e      	add	r3, sp, #56	@ 0x38
 801f3c0:	673a      	str	r2, [r7, #112]	@ 0x70
 801f3c2:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 801f3c6:	9300      	str	r3, [sp, #0]
 801f3c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f3ca:	6811      	ldr	r1, [r2, #0]
 801f3cc:	693a      	ldr	r2, [r7, #16]
 801f3ce:	f001 fc6b 	bl	8020ca8 <uxr_buffer_request_data>
 801f3d2:	8338      	strh	r0, [r7, #24]
 801f3d4:	e000      	b.n	801f3d8 <rmw_create_service+0x184>
 801f3d6:	2600      	movs	r6, #0
 801f3d8:	4630      	mov	r0, r6
 801f3da:	b011      	add	sp, #68	@ 0x44
 801f3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3e0:	4630      	mov	r0, r6
 801f3e2:	2600      	movs	r6, #0
 801f3e4:	f7f6 fce8 	bl	8015db8 <rmw_uxrce_fini_service_memory>
 801f3e8:	4630      	mov	r0, r6
 801f3ea:	b011      	add	sp, #68	@ 0x44
 801f3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3f0:	24069374 	.word	0x24069374
 801f3f4:	080236c8 	.word	0x080236c8
 801f3f8:	24069650 	.word	0x24069650
 801f3fc:	2406968c 	.word	0x2406968c
 801f400:	240695ec 	.word	0x240695ec
 801f404:	240695b0 	.word	0x240695b0

0801f408 <rmw_destroy_service>:
 801f408:	b570      	push	{r4, r5, r6, lr}
 801f40a:	b128      	cbz	r0, 801f418 <rmw_destroy_service+0x10>
 801f40c:	4604      	mov	r4, r0
 801f40e:	6800      	ldr	r0, [r0, #0]
 801f410:	460d      	mov	r5, r1
 801f412:	f7f6 ff1d 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801f416:	b910      	cbnz	r0, 801f41e <rmw_destroy_service+0x16>
 801f418:	2401      	movs	r4, #1
 801f41a:	4620      	mov	r0, r4
 801f41c:	bd70      	pop	{r4, r5, r6, pc}
 801f41e:	6863      	ldr	r3, [r4, #4]
 801f420:	2b00      	cmp	r3, #0
 801f422:	d0f9      	beq.n	801f418 <rmw_destroy_service+0x10>
 801f424:	2d00      	cmp	r5, #0
 801f426:	d0f7      	beq.n	801f418 <rmw_destroy_service+0x10>
 801f428:	6828      	ldr	r0, [r5, #0]
 801f42a:	f7f6 ff11 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801f42e:	2800      	cmp	r0, #0
 801f430:	d0f2      	beq.n	801f418 <rmw_destroy_service+0x10>
 801f432:	686e      	ldr	r6, [r5, #4]
 801f434:	2e00      	cmp	r6, #0
 801f436:	d0ef      	beq.n	801f418 <rmw_destroy_service+0x10>
 801f438:	6864      	ldr	r4, [r4, #4]
 801f43a:	6932      	ldr	r2, [r6, #16]
 801f43c:	6920      	ldr	r0, [r4, #16]
 801f43e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f442:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f446:	6819      	ldr	r1, [r3, #0]
 801f448:	f001 fc68 	bl	8020d1c <uxr_buffer_cancel_data>
 801f44c:	4602      	mov	r2, r0
 801f44e:	6920      	ldr	r0, [r4, #16]
 801f450:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f454:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f458:	f7f6 fde8 	bl	801602c <run_xrce_session>
 801f45c:	6920      	ldr	r0, [r4, #16]
 801f45e:	6932      	ldr	r2, [r6, #16]
 801f460:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f464:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f468:	6819      	ldr	r1, [r3, #0]
 801f46a:	f7f7 fcfb 	bl	8016e64 <uxr_buffer_delete_entity>
 801f46e:	4602      	mov	r2, r0
 801f470:	6920      	ldr	r0, [r4, #16]
 801f472:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f476:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f47a:	f7f6 fdd7 	bl	801602c <run_xrce_session>
 801f47e:	4603      	mov	r3, r0
 801f480:	4628      	mov	r0, r5
 801f482:	2b00      	cmp	r3, #0
 801f484:	bf14      	ite	ne
 801f486:	2400      	movne	r4, #0
 801f488:	2402      	moveq	r4, #2
 801f48a:	f7f6 fc95 	bl	8015db8 <rmw_uxrce_fini_service_memory>
 801f48e:	e7c4      	b.n	801f41a <rmw_destroy_service+0x12>

0801f490 <rmw_service_response_publisher_get_actual_qos>:
 801f490:	b181      	cbz	r1, 801f4b4 <rmw_service_response_publisher_get_actual_qos+0x24>
 801f492:	4603      	mov	r3, r0
 801f494:	b510      	push	{r4, lr}
 801f496:	fab0 f480 	clz	r4, r0
 801f49a:	0964      	lsrs	r4, r4, #5
 801f49c:	b140      	cbz	r0, 801f4b0 <rmw_service_response_publisher_get_actual_qos+0x20>
 801f49e:	685b      	ldr	r3, [r3, #4]
 801f4a0:	4608      	mov	r0, r1
 801f4a2:	2250      	movs	r2, #80	@ 0x50
 801f4a4:	f103 0120 	add.w	r1, r3, #32
 801f4a8:	f003 f865 	bl	8022576 <memcpy>
 801f4ac:	4620      	mov	r0, r4
 801f4ae:	bd10      	pop	{r4, pc}
 801f4b0:	200b      	movs	r0, #11
 801f4b2:	bd10      	pop	{r4, pc}
 801f4b4:	200b      	movs	r0, #11
 801f4b6:	4770      	bx	lr

0801f4b8 <rmw_service_request_subscription_get_actual_qos>:
 801f4b8:	b178      	cbz	r0, 801f4da <rmw_service_request_subscription_get_actual_qos+0x22>
 801f4ba:	b510      	push	{r4, lr}
 801f4bc:	fab1 f481 	clz	r4, r1
 801f4c0:	0964      	lsrs	r4, r4, #5
 801f4c2:	b141      	cbz	r1, 801f4d6 <rmw_service_request_subscription_get_actual_qos+0x1e>
 801f4c4:	6843      	ldr	r3, [r0, #4]
 801f4c6:	2250      	movs	r2, #80	@ 0x50
 801f4c8:	4608      	mov	r0, r1
 801f4ca:	f103 0120 	add.w	r1, r3, #32
 801f4ce:	f003 f852 	bl	8022576 <memcpy>
 801f4d2:	4620      	mov	r0, r4
 801f4d4:	bd10      	pop	{r4, pc}
 801f4d6:	200b      	movs	r0, #11
 801f4d8:	bd10      	pop	{r4, pc}
 801f4da:	200b      	movs	r0, #11
 801f4dc:	4770      	bx	lr
 801f4de:	bf00      	nop

0801f4e0 <rmw_create_subscription>:
 801f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4e4:	b08d      	sub	sp, #52	@ 0x34
 801f4e6:	2900      	cmp	r1, #0
 801f4e8:	f000 80d8 	beq.w	801f69c <rmw_create_subscription+0x1bc>
 801f4ec:	4604      	mov	r4, r0
 801f4ee:	2800      	cmp	r0, #0
 801f4f0:	f000 80d4 	beq.w	801f69c <rmw_create_subscription+0x1bc>
 801f4f4:	6800      	ldr	r0, [r0, #0]
 801f4f6:	460e      	mov	r6, r1
 801f4f8:	4615      	mov	r5, r2
 801f4fa:	461f      	mov	r7, r3
 801f4fc:	f7f6 fea8 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801f500:	f080 0001 	eor.w	r0, r0, #1
 801f504:	b2c0      	uxtb	r0, r0
 801f506:	2800      	cmp	r0, #0
 801f508:	f040 80c8 	bne.w	801f69c <rmw_create_subscription+0x1bc>
 801f50c:	2d00      	cmp	r5, #0
 801f50e:	f000 80c5 	beq.w	801f69c <rmw_create_subscription+0x1bc>
 801f512:	782b      	ldrb	r3, [r5, #0]
 801f514:	2b00      	cmp	r3, #0
 801f516:	f000 80c1 	beq.w	801f69c <rmw_create_subscription+0x1bc>
 801f51a:	2f00      	cmp	r7, #0
 801f51c:	f000 80be 	beq.w	801f69c <rmw_create_subscription+0x1bc>
 801f520:	4867      	ldr	r0, [pc, #412]	@ (801f6c0 <rmw_create_subscription+0x1e0>)
 801f522:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801f526:	f7ff f8e9 	bl	801e6fc <get_memory>
 801f52a:	4604      	mov	r4, r0
 801f52c:	2800      	cmp	r0, #0
 801f52e:	f000 80b6 	beq.w	801f69e <rmw_create_subscription+0x1be>
 801f532:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801f536:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 801f53a:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 801f53e:	f7ff f945 	bl	801e7cc <rmw_get_implementation_identifier>
 801f542:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 801f546:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 801f54a:	4628      	mov	r0, r5
 801f54c:	f7e0 fed2 	bl	80002f4 <strlen>
 801f550:	3001      	adds	r0, #1
 801f552:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 801f556:	283c      	cmp	r0, #60	@ 0x3c
 801f558:	f200 80a5 	bhi.w	801f6a6 <rmw_create_subscription+0x1c6>
 801f55c:	462b      	mov	r3, r5
 801f55e:	4a59      	ldr	r2, [pc, #356]	@ (801f6c4 <rmw_create_subscription+0x1e4>)
 801f560:	213c      	movs	r1, #60	@ 0x3c
 801f562:	4650      	mov	r0, sl
 801f564:	f002 fd7a 	bl	802205c <sniprintf>
 801f568:	4639      	mov	r1, r7
 801f56a:	2250      	movs	r2, #80	@ 0x50
 801f56c:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 801f570:	f8c8 9020 	str.w	r9, [r8, #32]
 801f574:	f002 ffff 	bl	8022576 <memcpy>
 801f578:	4630      	mov	r0, r6
 801f57a:	4953      	ldr	r1, [pc, #332]	@ (801f6c8 <rmw_create_subscription+0x1e8>)
 801f57c:	f7f6 fee4 	bl	8016348 <get_message_typesupport_handle>
 801f580:	2800      	cmp	r0, #0
 801f582:	f000 8090 	beq.w	801f6a6 <rmw_create_subscription+0x1c6>
 801f586:	6842      	ldr	r2, [r0, #4]
 801f588:	f8c8 2018 	str.w	r2, [r8, #24]
 801f58c:	2a00      	cmp	r2, #0
 801f58e:	f000 808a 	beq.w	801f6a6 <rmw_create_subscription+0x1c6>
 801f592:	4629      	mov	r1, r5
 801f594:	463b      	mov	r3, r7
 801f596:	4648      	mov	r0, r9
 801f598:	f7ff fb84 	bl	801eca4 <create_topic>
 801f59c:	f8c8 001c 	str.w	r0, [r8, #28]
 801f5a0:	2800      	cmp	r0, #0
 801f5a2:	f000 8085 	beq.w	801f6b0 <rmw_create_subscription+0x1d0>
 801f5a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f5aa:	2104      	movs	r1, #4
 801f5ac:	2506      	movs	r5, #6
 801f5ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f5b2:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801f5b6:	1c42      	adds	r2, r0, #1
 801f5b8:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801f5bc:	f7f7 ff4c 	bl	8017458 <uxr_object_id>
 801f5c0:	f8c8 0010 	str.w	r0, [r8, #16]
 801f5c4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f5c8:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801f5cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f5d0:	9500      	str	r5, [sp, #0]
 801f5d2:	6819      	ldr	r1, [r3, #0]
 801f5d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f5d8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f5dc:	f7f7 fd26 	bl	801702c <uxr_buffer_create_subscriber_bin>
 801f5e0:	4602      	mov	r2, r0
 801f5e2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f5e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f5ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f5ee:	f7f6 fd1d 	bl	801602c <run_xrce_session>
 801f5f2:	2800      	cmp	r0, #0
 801f5f4:	d057      	beq.n	801f6a6 <rmw_create_subscription+0x1c6>
 801f5f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f5fa:	4629      	mov	r1, r5
 801f5fc:	ae08      	add	r6, sp, #32
 801f5fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f602:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801f606:	1c42      	adds	r2, r0, #1
 801f608:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801f60c:	f7f7 ff24 	bl	8017458 <uxr_object_id>
 801f610:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f614:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801f618:	4639      	mov	r1, r7
 801f61a:	f8c8 0014 	str.w	r0, [r8, #20]
 801f61e:	4630      	mov	r0, r6
 801f620:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801f624:	9305      	str	r3, [sp, #20]
 801f626:	f7f6 fd1d 	bl	8016064 <convert_qos_profile>
 801f62a:	9503      	str	r5, [sp, #12]
 801f62c:	9b05      	ldr	r3, [sp, #20]
 801f62e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f632:	9001      	str	r0, [sp, #4]
 801f634:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801f638:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f63c:	691b      	ldr	r3, [r3, #16]
 801f63e:	9300      	str	r3, [sp, #0]
 801f640:	f8db 1000 	ldr.w	r1, [fp]
 801f644:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801f648:	f7f7 fd96 	bl	8017178 <uxr_buffer_create_datareader_bin>
 801f64c:	4602      	mov	r2, r0
 801f64e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f652:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f656:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f65a:	f7f6 fce7 	bl	801602c <run_xrce_session>
 801f65e:	b310      	cbz	r0, 801f6a6 <rmw_create_subscription+0x1c6>
 801f660:	7a3b      	ldrb	r3, [r7, #8]
 801f662:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f666:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f66a:	2b02      	cmp	r3, #2
 801f66c:	920a      	str	r2, [sp, #40]	@ 0x28
 801f66e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f672:	f04f 0200 	mov.w	r2, #0
 801f676:	bf08      	it	eq
 801f678:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801f67c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f680:	bf18      	it	ne
 801f682:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 801f686:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f688:	9307      	str	r3, [sp, #28]
 801f68a:	ab0a      	add	r3, sp, #40	@ 0x28
 801f68c:	9300      	str	r3, [sp, #0]
 801f68e:	9b07      	ldr	r3, [sp, #28]
 801f690:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801f694:	6809      	ldr	r1, [r1, #0]
 801f696:	f001 fb07 	bl	8020ca8 <uxr_buffer_request_data>
 801f69a:	e000      	b.n	801f69e <rmw_create_subscription+0x1be>
 801f69c:	2400      	movs	r4, #0
 801f69e:	4620      	mov	r0, r4
 801f6a0:	b00d      	add	sp, #52	@ 0x34
 801f6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6a6:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801f6aa:	b108      	cbz	r0, 801f6b0 <rmw_create_subscription+0x1d0>
 801f6ac:	f7f6 fbb0 	bl	8015e10 <rmw_uxrce_fini_topic_memory>
 801f6b0:	4620      	mov	r0, r4
 801f6b2:	2400      	movs	r4, #0
 801f6b4:	f7f6 fb6a 	bl	8015d8c <rmw_uxrce_fini_subscription_memory>
 801f6b8:	4620      	mov	r0, r4
 801f6ba:	b00d      	add	sp, #52	@ 0x34
 801f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6c0:	240693a4 	.word	0x240693a4
 801f6c4:	08024898 	.word	0x08024898
 801f6c8:	080236c8 	.word	0x080236c8

0801f6cc <rmw_subscription_get_actual_qos>:
 801f6cc:	b178      	cbz	r0, 801f6ee <rmw_subscription_get_actual_qos+0x22>
 801f6ce:	b510      	push	{r4, lr}
 801f6d0:	fab1 f481 	clz	r4, r1
 801f6d4:	0964      	lsrs	r4, r4, #5
 801f6d6:	b141      	cbz	r1, 801f6ea <rmw_subscription_get_actual_qos+0x1e>
 801f6d8:	6843      	ldr	r3, [r0, #4]
 801f6da:	2250      	movs	r2, #80	@ 0x50
 801f6dc:	4608      	mov	r0, r1
 801f6de:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801f6e2:	f002 ff48 	bl	8022576 <memcpy>
 801f6e6:	4620      	mov	r0, r4
 801f6e8:	bd10      	pop	{r4, pc}
 801f6ea:	200b      	movs	r0, #11
 801f6ec:	bd10      	pop	{r4, pc}
 801f6ee:	200b      	movs	r0, #11
 801f6f0:	4770      	bx	lr
 801f6f2:	bf00      	nop

0801f6f4 <rmw_destroy_subscription>:
 801f6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6f8:	b128      	cbz	r0, 801f706 <rmw_destroy_subscription+0x12>
 801f6fa:	4604      	mov	r4, r0
 801f6fc:	6800      	ldr	r0, [r0, #0]
 801f6fe:	460d      	mov	r5, r1
 801f700:	f7f6 fda6 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801f704:	b918      	cbnz	r0, 801f70e <rmw_destroy_subscription+0x1a>
 801f706:	2401      	movs	r4, #1
 801f708:	4620      	mov	r0, r4
 801f70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f70e:	6863      	ldr	r3, [r4, #4]
 801f710:	2b00      	cmp	r3, #0
 801f712:	d0f8      	beq.n	801f706 <rmw_destroy_subscription+0x12>
 801f714:	fab5 f485 	clz	r4, r5
 801f718:	0964      	lsrs	r4, r4, #5
 801f71a:	2d00      	cmp	r5, #0
 801f71c:	d0f3      	beq.n	801f706 <rmw_destroy_subscription+0x12>
 801f71e:	6828      	ldr	r0, [r5, #0]
 801f720:	f7f6 fd96 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 801f724:	2800      	cmp	r0, #0
 801f726:	d0ee      	beq.n	801f706 <rmw_destroy_subscription+0x12>
 801f728:	686e      	ldr	r6, [r5, #4]
 801f72a:	2e00      	cmp	r6, #0
 801f72c:	d0eb      	beq.n	801f706 <rmw_destroy_subscription+0x12>
 801f72e:	6a37      	ldr	r7, [r6, #32]
 801f730:	6972      	ldr	r2, [r6, #20]
 801f732:	6938      	ldr	r0, [r7, #16]
 801f734:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f738:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f73c:	6819      	ldr	r1, [r3, #0]
 801f73e:	f001 faed 	bl	8020d1c <uxr_buffer_cancel_data>
 801f742:	4602      	mov	r2, r0
 801f744:	6938      	ldr	r0, [r7, #16]
 801f746:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f74a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f74e:	f7f6 fc6d 	bl	801602c <run_xrce_session>
 801f752:	69f0      	ldr	r0, [r6, #28]
 801f754:	f7ff faf6 	bl	801ed44 <destroy_topic>
 801f758:	6a33      	ldr	r3, [r6, #32]
 801f75a:	6972      	ldr	r2, [r6, #20]
 801f75c:	6918      	ldr	r0, [r3, #16]
 801f75e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f762:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f766:	6819      	ldr	r1, [r3, #0]
 801f768:	f7f7 fb7c 	bl	8016e64 <uxr_buffer_delete_entity>
 801f76c:	6a33      	ldr	r3, [r6, #32]
 801f76e:	4680      	mov	r8, r0
 801f770:	6932      	ldr	r2, [r6, #16]
 801f772:	6918      	ldr	r0, [r3, #16]
 801f774:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f778:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f77c:	6819      	ldr	r1, [r3, #0]
 801f77e:	f7f7 fb71 	bl	8016e64 <uxr_buffer_delete_entity>
 801f782:	4606      	mov	r6, r0
 801f784:	6938      	ldr	r0, [r7, #16]
 801f786:	4642      	mov	r2, r8
 801f788:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f78c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f790:	f7f6 fc4c 	bl	801602c <run_xrce_session>
 801f794:	693f      	ldr	r7, [r7, #16]
 801f796:	4632      	mov	r2, r6
 801f798:	4606      	mov	r6, r0
 801f79a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801f79e:	4638      	mov	r0, r7
 801f7a0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801f7a4:	f7f6 fc42 	bl	801602c <run_xrce_session>
 801f7a8:	b126      	cbz	r6, 801f7b4 <rmw_destroy_subscription+0xc0>
 801f7aa:	b118      	cbz	r0, 801f7b4 <rmw_destroy_subscription+0xc0>
 801f7ac:	4628      	mov	r0, r5
 801f7ae:	f7f6 faed 	bl	8015d8c <rmw_uxrce_fini_subscription_memory>
 801f7b2:	e7a9      	b.n	801f708 <rmw_destroy_subscription+0x14>
 801f7b4:	2402      	movs	r4, #2
 801f7b6:	e7f9      	b.n	801f7ac <rmw_destroy_subscription+0xb8>

0801f7b8 <rmw_take_with_info>:
 801f7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f7ba:	4604      	mov	r4, r0
 801f7bc:	6800      	ldr	r0, [r0, #0]
 801f7be:	b089      	sub	sp, #36	@ 0x24
 801f7c0:	460f      	mov	r7, r1
 801f7c2:	4615      	mov	r5, r2
 801f7c4:	b128      	cbz	r0, 801f7d2 <rmw_take_with_info+0x1a>
 801f7c6:	4b24      	ldr	r3, [pc, #144]	@ (801f858 <rmw_take_with_info+0xa0>)
 801f7c8:	6819      	ldr	r1, [r3, #0]
 801f7ca:	f7e0 fd89 	bl	80002e0 <strcmp>
 801f7ce:	2800      	cmp	r0, #0
 801f7d0:	d13e      	bne.n	801f850 <rmw_take_with_info+0x98>
 801f7d2:	b305      	cbz	r5, 801f816 <rmw_take_with_info+0x5e>
 801f7d4:	2300      	movs	r3, #0
 801f7d6:	6864      	ldr	r4, [r4, #4]
 801f7d8:	702b      	strb	r3, [r5, #0]
 801f7da:	f7f6 fba9 	bl	8015f30 <rmw_uxrce_clean_expired_static_input_buffer>
 801f7de:	4620      	mov	r0, r4
 801f7e0:	f7f6 fb7c 	bl	8015edc <rmw_uxrce_find_static_input_buffer_by_owner>
 801f7e4:	4606      	mov	r6, r0
 801f7e6:	b1f0      	cbz	r0, 801f826 <rmw_take_with_info+0x6e>
 801f7e8:	6881      	ldr	r1, [r0, #8]
 801f7ea:	4668      	mov	r0, sp
 801f7ec:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f7f0:	3110      	adds	r1, #16
 801f7f2:	f7f4 fcc7 	bl	8014184 <ucdr_init_buffer>
 801f7f6:	69a3      	ldr	r3, [r4, #24]
 801f7f8:	4639      	mov	r1, r7
 801f7fa:	4668      	mov	r0, sp
 801f7fc:	68db      	ldr	r3, [r3, #12]
 801f7fe:	4798      	blx	r3
 801f800:	4604      	mov	r4, r0
 801f802:	4631      	mov	r1, r6
 801f804:	4815      	ldr	r0, [pc, #84]	@ (801f85c <rmw_take_with_info+0xa4>)
 801f806:	f7fe ff89 	bl	801e71c <put_memory>
 801f80a:	702c      	strb	r4, [r5, #0]
 801f80c:	f084 0001 	eor.w	r0, r4, #1
 801f810:	b2c0      	uxtb	r0, r0
 801f812:	b009      	add	sp, #36	@ 0x24
 801f814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f816:	6864      	ldr	r4, [r4, #4]
 801f818:	f7f6 fb8a 	bl	8015f30 <rmw_uxrce_clean_expired_static_input_buffer>
 801f81c:	4620      	mov	r0, r4
 801f81e:	f7f6 fb5d 	bl	8015edc <rmw_uxrce_find_static_input_buffer_by_owner>
 801f822:	4605      	mov	r5, r0
 801f824:	b910      	cbnz	r0, 801f82c <rmw_take_with_info+0x74>
 801f826:	2001      	movs	r0, #1
 801f828:	b009      	add	sp, #36	@ 0x24
 801f82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f82c:	68a9      	ldr	r1, [r5, #8]
 801f82e:	4668      	mov	r0, sp
 801f830:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f834:	3110      	adds	r1, #16
 801f836:	f7f4 fca5 	bl	8014184 <ucdr_init_buffer>
 801f83a:	69a3      	ldr	r3, [r4, #24]
 801f83c:	4639      	mov	r1, r7
 801f83e:	4668      	mov	r0, sp
 801f840:	68db      	ldr	r3, [r3, #12]
 801f842:	4798      	blx	r3
 801f844:	4629      	mov	r1, r5
 801f846:	4604      	mov	r4, r0
 801f848:	4804      	ldr	r0, [pc, #16]	@ (801f85c <rmw_take_with_info+0xa4>)
 801f84a:	f7fe ff67 	bl	801e71c <put_memory>
 801f84e:	e7dd      	b.n	801f80c <rmw_take_with_info+0x54>
 801f850:	200c      	movs	r0, #12
 801f852:	b009      	add	sp, #36	@ 0x24
 801f854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f856:	bf00      	nop
 801f858:	08025818 	.word	0x08025818
 801f85c:	24069394 	.word	0x24069394

0801f860 <rmw_wait>:
 801f860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f864:	4698      	mov	r8, r3
 801f866:	ea40 0301 	orr.w	r3, r0, r1
 801f86a:	b089      	sub	sp, #36	@ 0x24
 801f86c:	ea48 0303 	orr.w	r3, r8, r3
 801f870:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f872:	4313      	orrs	r3, r2
 801f874:	f000 8106 	beq.w	801fa84 <rmw_wait+0x224>
 801f878:	4605      	mov	r5, r0
 801f87a:	460e      	mov	r6, r1
 801f87c:	4691      	mov	r9, r2
 801f87e:	b16c      	cbz	r4, 801f89c <rmw_wait+0x3c>
 801f880:	4ba6      	ldr	r3, [pc, #664]	@ (801fb1c <rmw_wait+0x2bc>)
 801f882:	af04      	add	r7, sp, #16
 801f884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f886:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801f88a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801f88e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801f892:	f7fe fd55 	bl	801e340 <rmw_time_equal>
 801f896:	2800      	cmp	r0, #0
 801f898:	f000 810b 	beq.w	801fab2 <rmw_wait+0x252>
 801f89c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801f8a0:	f7f6 fb46 	bl	8015f30 <rmw_uxrce_clean_expired_static_input_buffer>
 801f8a4:	4b9e      	ldr	r3, [pc, #632]	@ (801fb20 <rmw_wait+0x2c0>)
 801f8a6:	681c      	ldr	r4, [r3, #0]
 801f8a8:	b14c      	cbz	r4, 801f8be <rmw_wait+0x5e>
 801f8aa:	4623      	mov	r3, r4
 801f8ac:	2100      	movs	r1, #0
 801f8ae:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801f8b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f8b6:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801f8ba:	2b00      	cmp	r3, #0
 801f8bc:	d1f7      	bne.n	801f8ae <rmw_wait+0x4e>
 801f8be:	f1b9 0f00 	cmp.w	r9, #0
 801f8c2:	d011      	beq.n	801f8e8 <rmw_wait+0x88>
 801f8c4:	f8d9 1000 	ldr.w	r1, [r9]
 801f8c8:	b171      	cbz	r1, 801f8e8 <rmw_wait+0x88>
 801f8ca:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801f8ce:	2300      	movs	r3, #0
 801f8d0:	2001      	movs	r0, #1
 801f8d2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f8d6:	3301      	adds	r3, #1
 801f8d8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f8da:	4299      	cmp	r1, r3
 801f8dc:	6912      	ldr	r2, [r2, #16]
 801f8de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f8e2:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f8e6:	d1f4      	bne.n	801f8d2 <rmw_wait+0x72>
 801f8e8:	f1b8 0f00 	cmp.w	r8, #0
 801f8ec:	d011      	beq.n	801f912 <rmw_wait+0xb2>
 801f8ee:	f8d8 1000 	ldr.w	r1, [r8]
 801f8f2:	b171      	cbz	r1, 801f912 <rmw_wait+0xb2>
 801f8f4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801f8f8:	2300      	movs	r3, #0
 801f8fa:	2001      	movs	r0, #1
 801f8fc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f900:	3301      	adds	r3, #1
 801f902:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f904:	4299      	cmp	r1, r3
 801f906:	6912      	ldr	r2, [r2, #16]
 801f908:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f90c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f910:	d1f4      	bne.n	801f8fc <rmw_wait+0x9c>
 801f912:	b185      	cbz	r5, 801f936 <rmw_wait+0xd6>
 801f914:	6829      	ldr	r1, [r5, #0]
 801f916:	b171      	cbz	r1, 801f936 <rmw_wait+0xd6>
 801f918:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801f91c:	2300      	movs	r3, #0
 801f91e:	2001      	movs	r0, #1
 801f920:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f924:	3301      	adds	r3, #1
 801f926:	6a12      	ldr	r2, [r2, #32]
 801f928:	4299      	cmp	r1, r3
 801f92a:	6912      	ldr	r2, [r2, #16]
 801f92c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f930:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f934:	d1f4      	bne.n	801f920 <rmw_wait+0xc0>
 801f936:	b344      	cbz	r4, 801f98a <rmw_wait+0x12a>
 801f938:	4622      	mov	r2, r4
 801f93a:	2300      	movs	r3, #0
 801f93c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801f940:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801f944:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801f948:	440b      	add	r3, r1
 801f94a:	b2db      	uxtb	r3, r3
 801f94c:	2a00      	cmp	r2, #0
 801f94e:	d1f5      	bne.n	801f93c <rmw_wait+0xdc>
 801f950:	2b00      	cmp	r3, #0
 801f952:	d05f      	beq.n	801fa14 <rmw_wait+0x1b4>
 801f954:	1c7a      	adds	r2, r7, #1
 801f956:	d00d      	beq.n	801f974 <rmw_wait+0x114>
 801f958:	ee07 7a90 	vmov	s15, r7
 801f95c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f960:	ee07 3a90 	vmov	s15, r3
 801f964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f96c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801f970:	ee17 7a90 	vmov	r7, s15
 801f974:	68a0      	ldr	r0, [r4, #8]
 801f976:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801f97a:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801f97e:	2b00      	cmp	r3, #0
 801f980:	f040 808d 	bne.w	801fa9e <rmw_wait+0x23e>
 801f984:	6864      	ldr	r4, [r4, #4]
 801f986:	2c00      	cmp	r4, #0
 801f988:	d1f4      	bne.n	801f974 <rmw_wait+0x114>
 801f98a:	f1b9 0f00 	cmp.w	r9, #0
 801f98e:	f000 80a1 	beq.w	801fad4 <rmw_wait+0x274>
 801f992:	f8d9 7000 	ldr.w	r7, [r9]
 801f996:	2f00      	cmp	r7, #0
 801f998:	f000 80a4 	beq.w	801fae4 <rmw_wait+0x284>
 801f99c:	2400      	movs	r4, #0
 801f99e:	4627      	mov	r7, r4
 801f9a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f9a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f9a8:	f7f6 fa98 	bl	8015edc <rmw_uxrce_find_static_input_buffer_by_owner>
 801f9ac:	2800      	cmp	r0, #0
 801f9ae:	d03b      	beq.n	801fa28 <rmw_wait+0x1c8>
 801f9b0:	3401      	adds	r4, #1
 801f9b2:	f8d9 3000 	ldr.w	r3, [r9]
 801f9b6:	2701      	movs	r7, #1
 801f9b8:	42a3      	cmp	r3, r4
 801f9ba:	d8f1      	bhi.n	801f9a0 <rmw_wait+0x140>
 801f9bc:	2701      	movs	r7, #1
 801f9be:	f1b8 0f00 	cmp.w	r8, #0
 801f9c2:	d010      	beq.n	801f9e6 <rmw_wait+0x186>
 801f9c4:	f8d8 3000 	ldr.w	r3, [r8]
 801f9c8:	b16b      	cbz	r3, 801f9e6 <rmw_wait+0x186>
 801f9ca:	2400      	movs	r4, #0
 801f9cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f9d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f9d4:	f7f6 fa82 	bl	8015edc <rmw_uxrce_find_static_input_buffer_by_owner>
 801f9d8:	b370      	cbz	r0, 801fa38 <rmw_wait+0x1d8>
 801f9da:	3401      	adds	r4, #1
 801f9dc:	f8d8 3000 	ldr.w	r3, [r8]
 801f9e0:	2701      	movs	r7, #1
 801f9e2:	42a3      	cmp	r3, r4
 801f9e4:	d8f2      	bhi.n	801f9cc <rmw_wait+0x16c>
 801f9e6:	2d00      	cmp	r5, #0
 801f9e8:	d035      	beq.n	801fa56 <rmw_wait+0x1f6>
 801f9ea:	682b      	ldr	r3, [r5, #0]
 801f9ec:	b39b      	cbz	r3, 801fa56 <rmw_wait+0x1f6>
 801f9ee:	2400      	movs	r4, #0
 801f9f0:	686b      	ldr	r3, [r5, #4]
 801f9f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f9f6:	f7f6 fa71 	bl	8015edc <rmw_uxrce_find_static_input_buffer_by_owner>
 801f9fa:	b328      	cbz	r0, 801fa48 <rmw_wait+0x1e8>
 801f9fc:	3401      	adds	r4, #1
 801f9fe:	682b      	ldr	r3, [r5, #0]
 801fa00:	2701      	movs	r7, #1
 801fa02:	42a3      	cmp	r3, r4
 801fa04:	d8f4      	bhi.n	801f9f0 <rmw_wait+0x190>
 801fa06:	2e00      	cmp	r6, #0
 801fa08:	d03c      	beq.n	801fa84 <rmw_wait+0x224>
 801fa0a:	6834      	ldr	r4, [r6, #0]
 801fa0c:	2c00      	cmp	r4, #0
 801fa0e:	d039      	beq.n	801fa84 <rmw_wait+0x224>
 801fa10:	2701      	movs	r7, #1
 801fa12:	e023      	b.n	801fa5c <rmw_wait+0x1fc>
 801fa14:	68a0      	ldr	r0, [r4, #8]
 801fa16:	2100      	movs	r1, #0
 801fa18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801fa1c:	f7f8 faf2 	bl	8018004 <uxr_run_session_timeout>
 801fa20:	6864      	ldr	r4, [r4, #4]
 801fa22:	2c00      	cmp	r4, #0
 801fa24:	d1f6      	bne.n	801fa14 <rmw_wait+0x1b4>
 801fa26:	e7b0      	b.n	801f98a <rmw_wait+0x12a>
 801fa28:	e9d9 3200 	ldrd	r3, r2, [r9]
 801fa2c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801fa30:	3401      	adds	r4, #1
 801fa32:	42a3      	cmp	r3, r4
 801fa34:	d8b4      	bhi.n	801f9a0 <rmw_wait+0x140>
 801fa36:	e7c2      	b.n	801f9be <rmw_wait+0x15e>
 801fa38:	e9d8 3200 	ldrd	r3, r2, [r8]
 801fa3c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801fa40:	3401      	adds	r4, #1
 801fa42:	429c      	cmp	r4, r3
 801fa44:	d3c2      	bcc.n	801f9cc <rmw_wait+0x16c>
 801fa46:	e7ce      	b.n	801f9e6 <rmw_wait+0x186>
 801fa48:	e9d5 3200 	ldrd	r3, r2, [r5]
 801fa4c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801fa50:	3401      	adds	r4, #1
 801fa52:	42a3      	cmp	r3, r4
 801fa54:	d8cc      	bhi.n	801f9f0 <rmw_wait+0x190>
 801fa56:	b1a6      	cbz	r6, 801fa82 <rmw_wait+0x222>
 801fa58:	6834      	ldr	r4, [r6, #0]
 801fa5a:	b194      	cbz	r4, 801fa82 <rmw_wait+0x222>
 801fa5c:	2300      	movs	r3, #0
 801fa5e:	461d      	mov	r5, r3
 801fa60:	e004      	b.n	801fa6c <rmw_wait+0x20c>
 801fa62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801fa66:	3301      	adds	r3, #1
 801fa68:	42a3      	cmp	r3, r4
 801fa6a:	d00a      	beq.n	801fa82 <rmw_wait+0x222>
 801fa6c:	6870      	ldr	r0, [r6, #4]
 801fa6e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801fa72:	7c0a      	ldrb	r2, [r1, #16]
 801fa74:	2a00      	cmp	r2, #0
 801fa76:	d0f4      	beq.n	801fa62 <rmw_wait+0x202>
 801fa78:	3301      	adds	r3, #1
 801fa7a:	4617      	mov	r7, r2
 801fa7c:	740d      	strb	r5, [r1, #16]
 801fa7e:	42a3      	cmp	r3, r4
 801fa80:	d1f4      	bne.n	801fa6c <rmw_wait+0x20c>
 801fa82:	b147      	cbz	r7, 801fa96 <rmw_wait+0x236>
 801fa84:	2000      	movs	r0, #0
 801fa86:	b009      	add	sp, #36	@ 0x24
 801fa88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa8c:	b11e      	cbz	r6, 801fa96 <rmw_wait+0x236>
 801fa8e:	6834      	ldr	r4, [r6, #0]
 801fa90:	462f      	mov	r7, r5
 801fa92:	2c00      	cmp	r4, #0
 801fa94:	d1e2      	bne.n	801fa5c <rmw_wait+0x1fc>
 801fa96:	2002      	movs	r0, #2
 801fa98:	b009      	add	sp, #36	@ 0x24
 801fa9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa9e:	4639      	mov	r1, r7
 801faa0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801faa4:	f7f8 fac8 	bl	8018038 <uxr_run_session_until_data>
 801faa8:	6864      	ldr	r4, [r4, #4]
 801faaa:	2c00      	cmp	r4, #0
 801faac:	f47f af62 	bne.w	801f974 <rmw_wait+0x114>
 801fab0:	e76b      	b.n	801f98a <rmw_wait+0x12a>
 801fab2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801fab6:	f7fe fc99 	bl	801e3ec <rmw_time_total_nsec>
 801faba:	2300      	movs	r3, #0
 801fabc:	4a19      	ldr	r2, [pc, #100]	@ (801fb24 <rmw_wait+0x2c4>)
 801fabe:	f7e0 fcc7 	bl	8000450 <__aeabi_uldivmod>
 801fac2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801fac6:	4607      	mov	r7, r0
 801fac8:	f171 0300 	sbcs.w	r3, r1, #0
 801facc:	bfa8      	it	ge
 801face:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801fad2:	e6e5      	b.n	801f8a0 <rmw_wait+0x40>
 801fad4:	f1b8 0f00 	cmp.w	r8, #0
 801fad8:	d00f      	beq.n	801fafa <rmw_wait+0x29a>
 801fada:	f8d8 3000 	ldr.w	r3, [r8]
 801fade:	b193      	cbz	r3, 801fb06 <rmw_wait+0x2a6>
 801fae0:	464f      	mov	r7, r9
 801fae2:	e772      	b.n	801f9ca <rmw_wait+0x16a>
 801fae4:	f1b8 0f00 	cmp.w	r8, #0
 801fae8:	d007      	beq.n	801fafa <rmw_wait+0x29a>
 801faea:	f8d8 3000 	ldr.w	r3, [r8]
 801faee:	2b00      	cmp	r3, #0
 801faf0:	f47f af6b 	bne.w	801f9ca <rmw_wait+0x16a>
 801faf4:	b155      	cbz	r5, 801fb0c <rmw_wait+0x2ac>
 801faf6:	461f      	mov	r7, r3
 801faf8:	e777      	b.n	801f9ea <rmw_wait+0x18a>
 801fafa:	2d00      	cmp	r5, #0
 801fafc:	d0c6      	beq.n	801fa8c <rmw_wait+0x22c>
 801fafe:	682b      	ldr	r3, [r5, #0]
 801fb00:	b143      	cbz	r3, 801fb14 <rmw_wait+0x2b4>
 801fb02:	4647      	mov	r7, r8
 801fb04:	e773      	b.n	801f9ee <rmw_wait+0x18e>
 801fb06:	b10d      	cbz	r5, 801fb0c <rmw_wait+0x2ac>
 801fb08:	464f      	mov	r7, r9
 801fb0a:	e76e      	b.n	801f9ea <rmw_wait+0x18a>
 801fb0c:	462f      	mov	r7, r5
 801fb0e:	2e00      	cmp	r6, #0
 801fb10:	d1a2      	bne.n	801fa58 <rmw_wait+0x1f8>
 801fb12:	e7c0      	b.n	801fa96 <rmw_wait+0x236>
 801fb14:	4647      	mov	r7, r8
 801fb16:	2e00      	cmp	r6, #0
 801fb18:	d19e      	bne.n	801fa58 <rmw_wait+0x1f8>
 801fb1a:	e7bc      	b.n	801fa96 <rmw_wait+0x236>
 801fb1c:	080234b0 	.word	0x080234b0
 801fb20:	24069384 	.word	0x24069384
 801fb24:	000f4240 	.word	0x000f4240

0801fb28 <rmw_create_wait_set>:
 801fb28:	b508      	push	{r3, lr}
 801fb2a:	4803      	ldr	r0, [pc, #12]	@ (801fb38 <rmw_create_wait_set+0x10>)
 801fb2c:	f7fe fde6 	bl	801e6fc <get_memory>
 801fb30:	b108      	cbz	r0, 801fb36 <rmw_create_wait_set+0xe>
 801fb32:	6880      	ldr	r0, [r0, #8]
 801fb34:	3010      	adds	r0, #16
 801fb36:	bd08      	pop	{r3, pc}
 801fb38:	240693c4 	.word	0x240693c4

0801fb3c <rmw_destroy_wait_set>:
 801fb3c:	b508      	push	{r3, lr}
 801fb3e:	4b08      	ldr	r3, [pc, #32]	@ (801fb60 <rmw_destroy_wait_set+0x24>)
 801fb40:	6819      	ldr	r1, [r3, #0]
 801fb42:	b911      	cbnz	r1, 801fb4a <rmw_destroy_wait_set+0xe>
 801fb44:	e00a      	b.n	801fb5c <rmw_destroy_wait_set+0x20>
 801fb46:	6849      	ldr	r1, [r1, #4]
 801fb48:	b141      	cbz	r1, 801fb5c <rmw_destroy_wait_set+0x20>
 801fb4a:	688b      	ldr	r3, [r1, #8]
 801fb4c:	3310      	adds	r3, #16
 801fb4e:	4298      	cmp	r0, r3
 801fb50:	d1f9      	bne.n	801fb46 <rmw_destroy_wait_set+0xa>
 801fb52:	4803      	ldr	r0, [pc, #12]	@ (801fb60 <rmw_destroy_wait_set+0x24>)
 801fb54:	f7fe fde2 	bl	801e71c <put_memory>
 801fb58:	2000      	movs	r0, #0
 801fb5a:	bd08      	pop	{r3, pc}
 801fb5c:	2001      	movs	r0, #1
 801fb5e:	bd08      	pop	{r3, pc}
 801fb60:	240693c4 	.word	0x240693c4

0801fb64 <rosgraph_msgs__msg__Clock__init>:
 801fb64:	b538      	push	{r3, r4, r5, lr}
 801fb66:	4604      	mov	r4, r0
 801fb68:	b128      	cbz	r0, 801fb76 <rosgraph_msgs__msg__Clock__init+0x12>
 801fb6a:	f7f7 f91d 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 801fb6e:	4605      	mov	r5, r0
 801fb70:	b120      	cbz	r0, 801fb7c <rosgraph_msgs__msg__Clock__init+0x18>
 801fb72:	4628      	mov	r0, r5
 801fb74:	bd38      	pop	{r3, r4, r5, pc}
 801fb76:	4605      	mov	r5, r0
 801fb78:	4628      	mov	r0, r5
 801fb7a:	bd38      	pop	{r3, r4, r5, pc}
 801fb7c:	4620      	mov	r0, r4
 801fb7e:	f7f7 f917 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 801fb82:	4628      	mov	r0, r5
 801fb84:	bd38      	pop	{r3, r4, r5, pc}
 801fb86:	bf00      	nop

0801fb88 <rosgraph_msgs__msg__Clock__fini>:
 801fb88:	b108      	cbz	r0, 801fb8e <rosgraph_msgs__msg__Clock__fini+0x6>
 801fb8a:	f7f7 b911 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 801fb8e:	4770      	bx	lr

0801fb90 <std_msgs__msg__Header__init>:
 801fb90:	b570      	push	{r4, r5, r6, lr}
 801fb92:	4605      	mov	r5, r0
 801fb94:	b1a8      	cbz	r0, 801fbc2 <std_msgs__msg__Header__init+0x32>
 801fb96:	f7f7 f907 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 801fb9a:	4604      	mov	r4, r0
 801fb9c:	b140      	cbz	r0, 801fbb0 <std_msgs__msg__Header__init+0x20>
 801fb9e:	f105 0608 	add.w	r6, r5, #8
 801fba2:	4630      	mov	r0, r6
 801fba4:	f001 fe86 	bl	80218b4 <rosidl_runtime_c__String__init>
 801fba8:	4604      	mov	r4, r0
 801fbaa:	b168      	cbz	r0, 801fbc8 <std_msgs__msg__Header__init+0x38>
 801fbac:	4620      	mov	r0, r4
 801fbae:	bd70      	pop	{r4, r5, r6, pc}
 801fbb0:	4628      	mov	r0, r5
 801fbb2:	f7f7 f8fd 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 801fbb6:	f105 0008 	add.w	r0, r5, #8
 801fbba:	f001 fe91 	bl	80218e0 <rosidl_runtime_c__String__fini>
 801fbbe:	4620      	mov	r0, r4
 801fbc0:	bd70      	pop	{r4, r5, r6, pc}
 801fbc2:	4604      	mov	r4, r0
 801fbc4:	4620      	mov	r0, r4
 801fbc6:	bd70      	pop	{r4, r5, r6, pc}
 801fbc8:	4628      	mov	r0, r5
 801fbca:	f7f7 f8f1 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 801fbce:	4630      	mov	r0, r6
 801fbd0:	f001 fe86 	bl	80218e0 <rosidl_runtime_c__String__fini>
 801fbd4:	e7ea      	b.n	801fbac <std_msgs__msg__Header__init+0x1c>
 801fbd6:	bf00      	nop

0801fbd8 <std_msgs__msg__Header__fini>:
 801fbd8:	b148      	cbz	r0, 801fbee <std_msgs__msg__Header__fini+0x16>
 801fbda:	b510      	push	{r4, lr}
 801fbdc:	4604      	mov	r4, r0
 801fbde:	f7f7 f8e7 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 801fbe2:	f104 0008 	add.w	r0, r4, #8
 801fbe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbea:	f001 be79 	b.w	80218e0 <rosidl_runtime_c__String__fini>
 801fbee:	4770      	bx	lr

0801fbf0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801fbf0:	b570      	push	{r4, r5, r6, lr}
 801fbf2:	4605      	mov	r5, r0
 801fbf4:	b1a8      	cbz	r0, 801fc22 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 801fbf6:	f7ff ffcb 	bl	801fb90 <std_msgs__msg__Header__init>
 801fbfa:	4604      	mov	r4, r0
 801fbfc:	b140      	cbz	r0, 801fc10 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801fbfe:	f105 0618 	add.w	r6, r5, #24
 801fc02:	4630      	mov	r0, r6
 801fc04:	f001 feb4 	bl	8021970 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 801fc08:	4604      	mov	r4, r0
 801fc0a:	b168      	cbz	r0, 801fc28 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 801fc0c:	4620      	mov	r0, r4
 801fc0e:	bd70      	pop	{r4, r5, r6, pc}
 801fc10:	4628      	mov	r0, r5
 801fc12:	f7ff ffe1 	bl	801fbd8 <std_msgs__msg__Header__fini>
 801fc16:	f105 0018 	add.w	r0, r5, #24
 801fc1a:	f001 fead 	bl	8021978 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fc1e:	4620      	mov	r0, r4
 801fc20:	bd70      	pop	{r4, r5, r6, pc}
 801fc22:	4604      	mov	r4, r0
 801fc24:	4620      	mov	r0, r4
 801fc26:	bd70      	pop	{r4, r5, r6, pc}
 801fc28:	4628      	mov	r0, r5
 801fc2a:	f7ff ffd5 	bl	801fbd8 <std_msgs__msg__Header__fini>
 801fc2e:	4630      	mov	r0, r6
 801fc30:	f001 fea2 	bl	8021978 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fc34:	e7ea      	b.n	801fc0c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 801fc36:	bf00      	nop

0801fc38 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 801fc38:	b148      	cbz	r0, 801fc4e <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 801fc3a:	b510      	push	{r4, lr}
 801fc3c:	4604      	mov	r4, r0
 801fc3e:	f7ff ffcb 	bl	801fbd8 <std_msgs__msg__Header__fini>
 801fc42:	f104 0018 	add.w	r0, r4, #24
 801fc46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc4a:	f001 be95 	b.w	8021978 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fc4e:	4770      	bx	lr

0801fc50 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801fc50:	b570      	push	{r4, r5, r6, lr}
 801fc52:	4605      	mov	r5, r0
 801fc54:	b1a8      	cbz	r0, 801fc82 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 801fc56:	f7ff ff9b 	bl	801fb90 <std_msgs__msg__Header__init>
 801fc5a:	4604      	mov	r4, r0
 801fc5c:	b140      	cbz	r0, 801fc70 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801fc5e:	f105 0618 	add.w	r6, r5, #24
 801fc62:	4630      	mov	r0, r6
 801fc64:	f001 fe8a 	bl	802197c <tier4_vehicle_msgs__msg__ActuationStatus__init>
 801fc68:	4604      	mov	r4, r0
 801fc6a:	b168      	cbz	r0, 801fc88 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 801fc6c:	4620      	mov	r0, r4
 801fc6e:	bd70      	pop	{r4, r5, r6, pc}
 801fc70:	4628      	mov	r0, r5
 801fc72:	f7ff ffb1 	bl	801fbd8 <std_msgs__msg__Header__fini>
 801fc76:	f105 0018 	add.w	r0, r5, #24
 801fc7a:	f001 fe83 	bl	8021984 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fc7e:	4620      	mov	r0, r4
 801fc80:	bd70      	pop	{r4, r5, r6, pc}
 801fc82:	4604      	mov	r4, r0
 801fc84:	4620      	mov	r0, r4
 801fc86:	bd70      	pop	{r4, r5, r6, pc}
 801fc88:	4628      	mov	r0, r5
 801fc8a:	f7ff ffa5 	bl	801fbd8 <std_msgs__msg__Header__fini>
 801fc8e:	4630      	mov	r0, r6
 801fc90:	f001 fe78 	bl	8021984 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fc94:	e7ea      	b.n	801fc6c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 801fc96:	bf00      	nop

0801fc98 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 801fc98:	b148      	cbz	r0, 801fcae <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 801fc9a:	b510      	push	{r4, lr}
 801fc9c:	4604      	mov	r4, r0
 801fc9e:	f7ff ff9b 	bl	801fbd8 <std_msgs__msg__Header__fini>
 801fca2:	f104 0018 	add.w	r0, r4, #24
 801fca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcaa:	f001 be6b 	b.w	8021984 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fcae:	4770      	bx	lr

0801fcb0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801fcb0:	b538      	push	{r3, r4, r5, lr}
 801fcb2:	4604      	mov	r4, r0
 801fcb4:	b128      	cbz	r0, 801fcc2 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 801fcb6:	f7f7 f877 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 801fcba:	4605      	mov	r5, r0
 801fcbc:	b120      	cbz	r0, 801fcc8 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801fcbe:	4628      	mov	r0, r5
 801fcc0:	bd38      	pop	{r3, r4, r5, pc}
 801fcc2:	4605      	mov	r5, r0
 801fcc4:	4628      	mov	r0, r5
 801fcc6:	bd38      	pop	{r3, r4, r5, pc}
 801fcc8:	4620      	mov	r0, r4
 801fcca:	f7f7 f871 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 801fcce:	4628      	mov	r0, r5
 801fcd0:	bd38      	pop	{r3, r4, r5, pc}
 801fcd2:	bf00      	nop

0801fcd4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 801fcd4:	b108      	cbz	r0, 801fcda <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 801fcd6:	f7f7 b86b 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 801fcda:	4770      	bx	lr

0801fcdc <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801fcdc:	b538      	push	{r3, r4, r5, lr}
 801fcde:	4604      	mov	r4, r0
 801fce0:	b128      	cbz	r0, 801fcee <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801fce2:	f7f7 f861 	bl	8016da8 <builtin_interfaces__msg__Time__init>
 801fce6:	4605      	mov	r5, r0
 801fce8:	b120      	cbz	r0, 801fcf4 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801fcea:	4628      	mov	r0, r5
 801fcec:	bd38      	pop	{r3, r4, r5, pc}
 801fcee:	4605      	mov	r5, r0
 801fcf0:	4628      	mov	r0, r5
 801fcf2:	bd38      	pop	{r3, r4, r5, pc}
 801fcf4:	4620      	mov	r0, r4
 801fcf6:	f7f7 f85b 	bl	8016db0 <builtin_interfaces__msg__Time__fini>
 801fcfa:	4628      	mov	r0, r5
 801fcfc:	bd38      	pop	{r3, r4, r5, pc}
 801fcfe:	bf00      	nop

0801fd00 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801fd00:	b108      	cbz	r0, 801fd06 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801fd02:	f7f7 b855 	b.w	8016db0 <builtin_interfaces__msg__Time__fini>
 801fd06:	4770      	bx	lr

0801fd08 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 801fd08:	f001 be32 	b.w	8021970 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801fd0c <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801fd0c:	f001 be34 	b.w	8021978 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801fd10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fd10:	4b04      	ldr	r3, [pc, #16]	@ (801fd24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fd12:	681a      	ldr	r2, [r3, #0]
 801fd14:	b10a      	cbz	r2, 801fd1a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 801fd16:	4803      	ldr	r0, [pc, #12]	@ (801fd24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fd18:	4770      	bx	lr
 801fd1a:	4a03      	ldr	r2, [pc, #12]	@ (801fd28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801fd1c:	4801      	ldr	r0, [pc, #4]	@ (801fd24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fd1e:	6812      	ldr	r2, [r2, #0]
 801fd20:	601a      	str	r2, [r3, #0]
 801fd22:	4770      	bx	lr
 801fd24:	240012fc 	.word	0x240012fc
 801fd28:	24000e98 	.word	0x24000e98

0801fd2c <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801fd2c:	f001 be26 	b.w	802197c <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801fd30 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801fd30:	f001 be28 	b.w	8021984 <tier4_vehicle_msgs__msg__ActuationStatus__fini>

0801fd34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801fd34:	4b04      	ldr	r3, [pc, #16]	@ (801fd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fd36:	681a      	ldr	r2, [r3, #0]
 801fd38:	b10a      	cbz	r2, 801fd3e <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 801fd3a:	4803      	ldr	r0, [pc, #12]	@ (801fd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fd3c:	4770      	bx	lr
 801fd3e:	4a03      	ldr	r2, [pc, #12]	@ (801fd4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801fd40:	4801      	ldr	r0, [pc, #4]	@ (801fd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fd42:	6812      	ldr	r2, [r2, #0]
 801fd44:	601a      	str	r2, [r3, #0]
 801fd46:	4770      	bx	lr
 801fd48:	240013bc 	.word	0x240013bc
 801fd4c:	24000e98 	.word	0x24000e98

0801fd50 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fd50:	b1b8      	cbz	r0, 801fd82 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801fd52:	b538      	push	{r3, r4, r5, lr}
 801fd54:	460d      	mov	r5, r1
 801fd56:	2108      	movs	r1, #8
 801fd58:	4628      	mov	r0, r5
 801fd5a:	f7f4 fa17 	bl	801418c <ucdr_alignment>
 801fd5e:	f105 0308 	add.w	r3, r5, #8
 801fd62:	2108      	movs	r1, #8
 801fd64:	f1c5 0508 	rsb	r5, r5, #8
 801fd68:	181c      	adds	r4, r3, r0
 801fd6a:	4620      	mov	r0, r4
 801fd6c:	f7f4 fa0e 	bl	801418c <ucdr_alignment>
 801fd70:	2108      	movs	r1, #8
 801fd72:	4408      	add	r0, r1
 801fd74:	4404      	add	r4, r0
 801fd76:	4620      	mov	r0, r4
 801fd78:	f7f4 fa08 	bl	801418c <ucdr_alignment>
 801fd7c:	4428      	add	r0, r5
 801fd7e:	4420      	add	r0, r4
 801fd80:	bd38      	pop	{r3, r4, r5, pc}
 801fd82:	4770      	bx	lr

0801fd84 <_ActuationCommand__cdr_deserialize>:
 801fd84:	b538      	push	{r3, r4, r5, lr}
 801fd86:	460c      	mov	r4, r1
 801fd88:	b171      	cbz	r1, 801fda8 <_ActuationCommand__cdr_deserialize+0x24>
 801fd8a:	4605      	mov	r5, r0
 801fd8c:	f7f4 f8e0 	bl	8013f50 <ucdr_deserialize_double>
 801fd90:	f104 0108 	add.w	r1, r4, #8
 801fd94:	4628      	mov	r0, r5
 801fd96:	f7f4 f8db 	bl	8013f50 <ucdr_deserialize_double>
 801fd9a:	f104 0110 	add.w	r1, r4, #16
 801fd9e:	4628      	mov	r0, r5
 801fda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fda4:	f7f4 b8d4 	b.w	8013f50 <ucdr_deserialize_double>
 801fda8:	4608      	mov	r0, r1
 801fdaa:	bd38      	pop	{r3, r4, r5, pc}

0801fdac <_ActuationCommand__cdr_serialize>:
 801fdac:	b198      	cbz	r0, 801fdd6 <_ActuationCommand__cdr_serialize+0x2a>
 801fdae:	b538      	push	{r3, r4, r5, lr}
 801fdb0:	460d      	mov	r5, r1
 801fdb2:	4604      	mov	r4, r0
 801fdb4:	ed90 0b00 	vldr	d0, [r0]
 801fdb8:	4608      	mov	r0, r1
 801fdba:	f7f3 fff9 	bl	8013db0 <ucdr_serialize_double>
 801fdbe:	4628      	mov	r0, r5
 801fdc0:	ed94 0b02 	vldr	d0, [r4, #8]
 801fdc4:	f7f3 fff4 	bl	8013db0 <ucdr_serialize_double>
 801fdc8:	4628      	mov	r0, r5
 801fdca:	ed94 0b04 	vldr	d0, [r4, #16]
 801fdce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fdd2:	f7f3 bfed 	b.w	8013db0 <ucdr_serialize_double>
 801fdd6:	4770      	bx	lr

0801fdd8 <_ActuationCommand__get_serialized_size>:
 801fdd8:	b190      	cbz	r0, 801fe00 <_ActuationCommand__get_serialized_size+0x28>
 801fdda:	2108      	movs	r1, #8
 801fddc:	2000      	movs	r0, #0
 801fdde:	b510      	push	{r4, lr}
 801fde0:	f7f4 f9d4 	bl	801418c <ucdr_alignment>
 801fde4:	2108      	movs	r1, #8
 801fde6:	1844      	adds	r4, r0, r1
 801fde8:	4620      	mov	r0, r4
 801fdea:	f7f4 f9cf 	bl	801418c <ucdr_alignment>
 801fdee:	2108      	movs	r1, #8
 801fdf0:	4408      	add	r0, r1
 801fdf2:	4404      	add	r4, r0
 801fdf4:	4620      	mov	r0, r4
 801fdf6:	f7f4 f9c9 	bl	801418c <ucdr_alignment>
 801fdfa:	3008      	adds	r0, #8
 801fdfc:	4420      	add	r0, r4
 801fdfe:	bd10      	pop	{r4, pc}
 801fe00:	4770      	bx	lr
 801fe02:	bf00      	nop

0801fe04 <_ActuationCommand__max_serialized_size>:
 801fe04:	b538      	push	{r3, r4, r5, lr}
 801fe06:	2108      	movs	r1, #8
 801fe08:	2000      	movs	r0, #0
 801fe0a:	f7f4 f9bf 	bl	801418c <ucdr_alignment>
 801fe0e:	2108      	movs	r1, #8
 801fe10:	1845      	adds	r5, r0, r1
 801fe12:	4628      	mov	r0, r5
 801fe14:	f7f4 f9ba 	bl	801418c <ucdr_alignment>
 801fe18:	2108      	movs	r1, #8
 801fe1a:	1844      	adds	r4, r0, r1
 801fe1c:	442c      	add	r4, r5
 801fe1e:	4620      	mov	r0, r4
 801fe20:	f7f4 f9b4 	bl	801418c <ucdr_alignment>
 801fe24:	3008      	adds	r0, #8
 801fe26:	4420      	add	r0, r4
 801fe28:	bd38      	pop	{r3, r4, r5, pc}
 801fe2a:	bf00      	nop

0801fe2c <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fe2c:	b570      	push	{r4, r5, r6, lr}
 801fe2e:	460c      	mov	r4, r1
 801fe30:	2301      	movs	r3, #1
 801fe32:	2108      	movs	r1, #8
 801fe34:	f104 0508 	add.w	r5, r4, #8
 801fe38:	7003      	strb	r3, [r0, #0]
 801fe3a:	4620      	mov	r0, r4
 801fe3c:	f1c4 0408 	rsb	r4, r4, #8
 801fe40:	f7f4 f9a4 	bl	801418c <ucdr_alignment>
 801fe44:	1946      	adds	r6, r0, r5
 801fe46:	2108      	movs	r1, #8
 801fe48:	4630      	mov	r0, r6
 801fe4a:	f7f4 f99f 	bl	801418c <ucdr_alignment>
 801fe4e:	2108      	movs	r1, #8
 801fe50:	1845      	adds	r5, r0, r1
 801fe52:	4435      	add	r5, r6
 801fe54:	4628      	mov	r0, r5
 801fe56:	f7f4 f999 	bl	801418c <ucdr_alignment>
 801fe5a:	4420      	add	r0, r4
 801fe5c:	4428      	add	r0, r5
 801fe5e:	bd70      	pop	{r4, r5, r6, pc}

0801fe60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fe60:	4800      	ldr	r0, [pc, #0]	@ (801fe64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801fe62:	4770      	bx	lr
 801fe64:	240013c8 	.word	0x240013c8

0801fe68 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801fe68:	b1b8      	cbz	r0, 801fe9a <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 801fe6a:	b538      	push	{r3, r4, r5, lr}
 801fe6c:	460d      	mov	r5, r1
 801fe6e:	2108      	movs	r1, #8
 801fe70:	4628      	mov	r0, r5
 801fe72:	f7f4 f98b 	bl	801418c <ucdr_alignment>
 801fe76:	f105 0308 	add.w	r3, r5, #8
 801fe7a:	2108      	movs	r1, #8
 801fe7c:	f1c5 0508 	rsb	r5, r5, #8
 801fe80:	181c      	adds	r4, r3, r0
 801fe82:	4620      	mov	r0, r4
 801fe84:	f7f4 f982 	bl	801418c <ucdr_alignment>
 801fe88:	2108      	movs	r1, #8
 801fe8a:	4408      	add	r0, r1
 801fe8c:	4404      	add	r4, r0
 801fe8e:	4620      	mov	r0, r4
 801fe90:	f7f4 f97c 	bl	801418c <ucdr_alignment>
 801fe94:	4428      	add	r0, r5
 801fe96:	4420      	add	r0, r4
 801fe98:	bd38      	pop	{r3, r4, r5, pc}
 801fe9a:	4770      	bx	lr

0801fe9c <_ActuationStatus__cdr_deserialize>:
 801fe9c:	b538      	push	{r3, r4, r5, lr}
 801fe9e:	460c      	mov	r4, r1
 801fea0:	b171      	cbz	r1, 801fec0 <_ActuationStatus__cdr_deserialize+0x24>
 801fea2:	4605      	mov	r5, r0
 801fea4:	f7f4 f854 	bl	8013f50 <ucdr_deserialize_double>
 801fea8:	f104 0108 	add.w	r1, r4, #8
 801feac:	4628      	mov	r0, r5
 801feae:	f7f4 f84f 	bl	8013f50 <ucdr_deserialize_double>
 801feb2:	f104 0110 	add.w	r1, r4, #16
 801feb6:	4628      	mov	r0, r5
 801feb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801febc:	f7f4 b848 	b.w	8013f50 <ucdr_deserialize_double>
 801fec0:	4608      	mov	r0, r1
 801fec2:	bd38      	pop	{r3, r4, r5, pc}

0801fec4 <_ActuationStatus__cdr_serialize>:
 801fec4:	b198      	cbz	r0, 801feee <_ActuationStatus__cdr_serialize+0x2a>
 801fec6:	b538      	push	{r3, r4, r5, lr}
 801fec8:	460d      	mov	r5, r1
 801feca:	4604      	mov	r4, r0
 801fecc:	ed90 0b00 	vldr	d0, [r0]
 801fed0:	4608      	mov	r0, r1
 801fed2:	f7f3 ff6d 	bl	8013db0 <ucdr_serialize_double>
 801fed6:	4628      	mov	r0, r5
 801fed8:	ed94 0b02 	vldr	d0, [r4, #8]
 801fedc:	f7f3 ff68 	bl	8013db0 <ucdr_serialize_double>
 801fee0:	4628      	mov	r0, r5
 801fee2:	ed94 0b04 	vldr	d0, [r4, #16]
 801fee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801feea:	f7f3 bf61 	b.w	8013db0 <ucdr_serialize_double>
 801feee:	4770      	bx	lr

0801fef0 <_ActuationStatus__get_serialized_size>:
 801fef0:	b190      	cbz	r0, 801ff18 <_ActuationStatus__get_serialized_size+0x28>
 801fef2:	2108      	movs	r1, #8
 801fef4:	2000      	movs	r0, #0
 801fef6:	b510      	push	{r4, lr}
 801fef8:	f7f4 f948 	bl	801418c <ucdr_alignment>
 801fefc:	2108      	movs	r1, #8
 801fefe:	1844      	adds	r4, r0, r1
 801ff00:	4620      	mov	r0, r4
 801ff02:	f7f4 f943 	bl	801418c <ucdr_alignment>
 801ff06:	2108      	movs	r1, #8
 801ff08:	4408      	add	r0, r1
 801ff0a:	4404      	add	r4, r0
 801ff0c:	4620      	mov	r0, r4
 801ff0e:	f7f4 f93d 	bl	801418c <ucdr_alignment>
 801ff12:	3008      	adds	r0, #8
 801ff14:	4420      	add	r0, r4
 801ff16:	bd10      	pop	{r4, pc}
 801ff18:	4770      	bx	lr
 801ff1a:	bf00      	nop

0801ff1c <_ActuationStatus__max_serialized_size>:
 801ff1c:	b538      	push	{r3, r4, r5, lr}
 801ff1e:	2108      	movs	r1, #8
 801ff20:	2000      	movs	r0, #0
 801ff22:	f7f4 f933 	bl	801418c <ucdr_alignment>
 801ff26:	2108      	movs	r1, #8
 801ff28:	1845      	adds	r5, r0, r1
 801ff2a:	4628      	mov	r0, r5
 801ff2c:	f7f4 f92e 	bl	801418c <ucdr_alignment>
 801ff30:	2108      	movs	r1, #8
 801ff32:	1844      	adds	r4, r0, r1
 801ff34:	442c      	add	r4, r5
 801ff36:	4620      	mov	r0, r4
 801ff38:	f7f4 f928 	bl	801418c <ucdr_alignment>
 801ff3c:	3008      	adds	r0, #8
 801ff3e:	4420      	add	r0, r4
 801ff40:	bd38      	pop	{r3, r4, r5, pc}
 801ff42:	bf00      	nop

0801ff44 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801ff44:	b570      	push	{r4, r5, r6, lr}
 801ff46:	460c      	mov	r4, r1
 801ff48:	2301      	movs	r3, #1
 801ff4a:	2108      	movs	r1, #8
 801ff4c:	f104 0508 	add.w	r5, r4, #8
 801ff50:	7003      	strb	r3, [r0, #0]
 801ff52:	4620      	mov	r0, r4
 801ff54:	f1c4 0408 	rsb	r4, r4, #8
 801ff58:	f7f4 f918 	bl	801418c <ucdr_alignment>
 801ff5c:	1946      	adds	r6, r0, r5
 801ff5e:	2108      	movs	r1, #8
 801ff60:	4630      	mov	r0, r6
 801ff62:	f7f4 f913 	bl	801418c <ucdr_alignment>
 801ff66:	2108      	movs	r1, #8
 801ff68:	1845      	adds	r5, r0, r1
 801ff6a:	4435      	add	r5, r6
 801ff6c:	4628      	mov	r0, r5
 801ff6e:	f7f4 f90d 	bl	801418c <ucdr_alignment>
 801ff72:	4420      	add	r0, r4
 801ff74:	4428      	add	r0, r5
 801ff76:	bd70      	pop	{r4, r5, r6, pc}

0801ff78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801ff78:	4800      	ldr	r0, [pc, #0]	@ (801ff7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 801ff7a:	4770      	bx	lr
 801ff7c:	240013f0 	.word	0x240013f0

0801ff80 <ucdr_serialize_endian_array_char>:
 801ff80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff84:	4619      	mov	r1, r3
 801ff86:	461f      	mov	r7, r3
 801ff88:	4605      	mov	r5, r0
 801ff8a:	4690      	mov	r8, r2
 801ff8c:	f7f4 f8a6 	bl	80140dc <ucdr_check_buffer_available_for>
 801ff90:	b9e0      	cbnz	r0, 801ffcc <ucdr_serialize_endian_array_char+0x4c>
 801ff92:	463e      	mov	r6, r7
 801ff94:	e00b      	b.n	801ffae <ucdr_serialize_endian_array_char+0x2e>
 801ff96:	4441      	add	r1, r8
 801ff98:	68a8      	ldr	r0, [r5, #8]
 801ff9a:	4622      	mov	r2, r4
 801ff9c:	1b36      	subs	r6, r6, r4
 801ff9e:	f002 faea 	bl	8022576 <memcpy>
 801ffa2:	68ab      	ldr	r3, [r5, #8]
 801ffa4:	6928      	ldr	r0, [r5, #16]
 801ffa6:	4423      	add	r3, r4
 801ffa8:	4420      	add	r0, r4
 801ffaa:	60ab      	str	r3, [r5, #8]
 801ffac:	6128      	str	r0, [r5, #16]
 801ffae:	4631      	mov	r1, r6
 801ffb0:	2201      	movs	r2, #1
 801ffb2:	4628      	mov	r0, r5
 801ffb4:	f7f4 f91c 	bl	80141f0 <ucdr_check_final_buffer_behavior_array>
 801ffb8:	1bb9      	subs	r1, r7, r6
 801ffba:	4604      	mov	r4, r0
 801ffbc:	2800      	cmp	r0, #0
 801ffbe:	d1ea      	bne.n	801ff96 <ucdr_serialize_endian_array_char+0x16>
 801ffc0:	2301      	movs	r3, #1
 801ffc2:	7da8      	ldrb	r0, [r5, #22]
 801ffc4:	756b      	strb	r3, [r5, #21]
 801ffc6:	4058      	eors	r0, r3
 801ffc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ffcc:	463a      	mov	r2, r7
 801ffce:	4641      	mov	r1, r8
 801ffd0:	68a8      	ldr	r0, [r5, #8]
 801ffd2:	f002 fad0 	bl	8022576 <memcpy>
 801ffd6:	68aa      	ldr	r2, [r5, #8]
 801ffd8:	692b      	ldr	r3, [r5, #16]
 801ffda:	443a      	add	r2, r7
 801ffdc:	443b      	add	r3, r7
 801ffde:	60aa      	str	r2, [r5, #8]
 801ffe0:	612b      	str	r3, [r5, #16]
 801ffe2:	e7ed      	b.n	801ffc0 <ucdr_serialize_endian_array_char+0x40>

0801ffe4 <ucdr_deserialize_endian_array_char>:
 801ffe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffe8:	4619      	mov	r1, r3
 801ffea:	461f      	mov	r7, r3
 801ffec:	4605      	mov	r5, r0
 801ffee:	4690      	mov	r8, r2
 801fff0:	f7f4 f874 	bl	80140dc <ucdr_check_buffer_available_for>
 801fff4:	b9e8      	cbnz	r0, 8020032 <ucdr_deserialize_endian_array_char+0x4e>
 801fff6:	463e      	mov	r6, r7
 801fff8:	e00c      	b.n	8020014 <ucdr_deserialize_endian_array_char+0x30>
 801fffa:	eb08 0003 	add.w	r0, r8, r3
 801fffe:	68a9      	ldr	r1, [r5, #8]
 8020000:	4622      	mov	r2, r4
 8020002:	1b36      	subs	r6, r6, r4
 8020004:	f002 fab7 	bl	8022576 <memcpy>
 8020008:	68ab      	ldr	r3, [r5, #8]
 802000a:	6928      	ldr	r0, [r5, #16]
 802000c:	4423      	add	r3, r4
 802000e:	4420      	add	r0, r4
 8020010:	60ab      	str	r3, [r5, #8]
 8020012:	6128      	str	r0, [r5, #16]
 8020014:	4631      	mov	r1, r6
 8020016:	2201      	movs	r2, #1
 8020018:	4628      	mov	r0, r5
 802001a:	f7f4 f8e9 	bl	80141f0 <ucdr_check_final_buffer_behavior_array>
 802001e:	1bbb      	subs	r3, r7, r6
 8020020:	4604      	mov	r4, r0
 8020022:	2800      	cmp	r0, #0
 8020024:	d1e9      	bne.n	801fffa <ucdr_deserialize_endian_array_char+0x16>
 8020026:	2301      	movs	r3, #1
 8020028:	7da8      	ldrb	r0, [r5, #22]
 802002a:	756b      	strb	r3, [r5, #21]
 802002c:	4058      	eors	r0, r3
 802002e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020032:	463a      	mov	r2, r7
 8020034:	68a9      	ldr	r1, [r5, #8]
 8020036:	4640      	mov	r0, r8
 8020038:	f002 fa9d 	bl	8022576 <memcpy>
 802003c:	68aa      	ldr	r2, [r5, #8]
 802003e:	692b      	ldr	r3, [r5, #16]
 8020040:	443a      	add	r2, r7
 8020042:	443b      	add	r3, r7
 8020044:	60aa      	str	r2, [r5, #8]
 8020046:	612b      	str	r3, [r5, #16]
 8020048:	e7ed      	b.n	8020026 <ucdr_deserialize_endian_array_char+0x42>
 802004a:	bf00      	nop

0802004c <ucdr_serialize_array_uint8_t>:
 802004c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020050:	4688      	mov	r8, r1
 8020052:	4611      	mov	r1, r2
 8020054:	4617      	mov	r7, r2
 8020056:	4605      	mov	r5, r0
 8020058:	f7f4 f840 	bl	80140dc <ucdr_check_buffer_available_for>
 802005c:	b9e0      	cbnz	r0, 8020098 <ucdr_serialize_array_uint8_t+0x4c>
 802005e:	463e      	mov	r6, r7
 8020060:	e00b      	b.n	802007a <ucdr_serialize_array_uint8_t+0x2e>
 8020062:	4441      	add	r1, r8
 8020064:	68a8      	ldr	r0, [r5, #8]
 8020066:	4622      	mov	r2, r4
 8020068:	1b36      	subs	r6, r6, r4
 802006a:	f002 fa84 	bl	8022576 <memcpy>
 802006e:	68ab      	ldr	r3, [r5, #8]
 8020070:	6928      	ldr	r0, [r5, #16]
 8020072:	4423      	add	r3, r4
 8020074:	4420      	add	r0, r4
 8020076:	60ab      	str	r3, [r5, #8]
 8020078:	6128      	str	r0, [r5, #16]
 802007a:	4631      	mov	r1, r6
 802007c:	2201      	movs	r2, #1
 802007e:	4628      	mov	r0, r5
 8020080:	f7f4 f8b6 	bl	80141f0 <ucdr_check_final_buffer_behavior_array>
 8020084:	1bb9      	subs	r1, r7, r6
 8020086:	4604      	mov	r4, r0
 8020088:	2800      	cmp	r0, #0
 802008a:	d1ea      	bne.n	8020062 <ucdr_serialize_array_uint8_t+0x16>
 802008c:	2301      	movs	r3, #1
 802008e:	7da8      	ldrb	r0, [r5, #22]
 8020090:	756b      	strb	r3, [r5, #21]
 8020092:	4058      	eors	r0, r3
 8020094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020098:	463a      	mov	r2, r7
 802009a:	4641      	mov	r1, r8
 802009c:	68a8      	ldr	r0, [r5, #8]
 802009e:	f002 fa6a 	bl	8022576 <memcpy>
 80200a2:	68aa      	ldr	r2, [r5, #8]
 80200a4:	692b      	ldr	r3, [r5, #16]
 80200a6:	443a      	add	r2, r7
 80200a8:	443b      	add	r3, r7
 80200aa:	60aa      	str	r2, [r5, #8]
 80200ac:	612b      	str	r3, [r5, #16]
 80200ae:	e7ed      	b.n	802008c <ucdr_serialize_array_uint8_t+0x40>

080200b0 <ucdr_serialize_endian_array_uint8_t>:
 80200b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200b4:	4619      	mov	r1, r3
 80200b6:	461f      	mov	r7, r3
 80200b8:	4605      	mov	r5, r0
 80200ba:	4690      	mov	r8, r2
 80200bc:	f7f4 f80e 	bl	80140dc <ucdr_check_buffer_available_for>
 80200c0:	b9e0      	cbnz	r0, 80200fc <ucdr_serialize_endian_array_uint8_t+0x4c>
 80200c2:	463e      	mov	r6, r7
 80200c4:	e00b      	b.n	80200de <ucdr_serialize_endian_array_uint8_t+0x2e>
 80200c6:	4441      	add	r1, r8
 80200c8:	68a8      	ldr	r0, [r5, #8]
 80200ca:	4622      	mov	r2, r4
 80200cc:	1b36      	subs	r6, r6, r4
 80200ce:	f002 fa52 	bl	8022576 <memcpy>
 80200d2:	68ab      	ldr	r3, [r5, #8]
 80200d4:	6928      	ldr	r0, [r5, #16]
 80200d6:	4423      	add	r3, r4
 80200d8:	4420      	add	r0, r4
 80200da:	60ab      	str	r3, [r5, #8]
 80200dc:	6128      	str	r0, [r5, #16]
 80200de:	4631      	mov	r1, r6
 80200e0:	2201      	movs	r2, #1
 80200e2:	4628      	mov	r0, r5
 80200e4:	f7f4 f884 	bl	80141f0 <ucdr_check_final_buffer_behavior_array>
 80200e8:	1bb9      	subs	r1, r7, r6
 80200ea:	4604      	mov	r4, r0
 80200ec:	2800      	cmp	r0, #0
 80200ee:	d1ea      	bne.n	80200c6 <ucdr_serialize_endian_array_uint8_t+0x16>
 80200f0:	2301      	movs	r3, #1
 80200f2:	7da8      	ldrb	r0, [r5, #22]
 80200f4:	756b      	strb	r3, [r5, #21]
 80200f6:	4058      	eors	r0, r3
 80200f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80200fc:	463a      	mov	r2, r7
 80200fe:	4641      	mov	r1, r8
 8020100:	68a8      	ldr	r0, [r5, #8]
 8020102:	f002 fa38 	bl	8022576 <memcpy>
 8020106:	68aa      	ldr	r2, [r5, #8]
 8020108:	692b      	ldr	r3, [r5, #16]
 802010a:	443a      	add	r2, r7
 802010c:	443b      	add	r3, r7
 802010e:	60aa      	str	r2, [r5, #8]
 8020110:	612b      	str	r3, [r5, #16]
 8020112:	e7ed      	b.n	80200f0 <ucdr_serialize_endian_array_uint8_t+0x40>

08020114 <ucdr_deserialize_array_uint8_t>:
 8020114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020118:	4688      	mov	r8, r1
 802011a:	4611      	mov	r1, r2
 802011c:	4617      	mov	r7, r2
 802011e:	4605      	mov	r5, r0
 8020120:	f7f3 ffdc 	bl	80140dc <ucdr_check_buffer_available_for>
 8020124:	b9e8      	cbnz	r0, 8020162 <ucdr_deserialize_array_uint8_t+0x4e>
 8020126:	463e      	mov	r6, r7
 8020128:	e00c      	b.n	8020144 <ucdr_deserialize_array_uint8_t+0x30>
 802012a:	eb08 0003 	add.w	r0, r8, r3
 802012e:	68a9      	ldr	r1, [r5, #8]
 8020130:	4622      	mov	r2, r4
 8020132:	1b36      	subs	r6, r6, r4
 8020134:	f002 fa1f 	bl	8022576 <memcpy>
 8020138:	68ab      	ldr	r3, [r5, #8]
 802013a:	6928      	ldr	r0, [r5, #16]
 802013c:	4423      	add	r3, r4
 802013e:	4420      	add	r0, r4
 8020140:	60ab      	str	r3, [r5, #8]
 8020142:	6128      	str	r0, [r5, #16]
 8020144:	4631      	mov	r1, r6
 8020146:	2201      	movs	r2, #1
 8020148:	4628      	mov	r0, r5
 802014a:	f7f4 f851 	bl	80141f0 <ucdr_check_final_buffer_behavior_array>
 802014e:	1bbb      	subs	r3, r7, r6
 8020150:	4604      	mov	r4, r0
 8020152:	2800      	cmp	r0, #0
 8020154:	d1e9      	bne.n	802012a <ucdr_deserialize_array_uint8_t+0x16>
 8020156:	2301      	movs	r3, #1
 8020158:	7da8      	ldrb	r0, [r5, #22]
 802015a:	756b      	strb	r3, [r5, #21]
 802015c:	4058      	eors	r0, r3
 802015e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020162:	463a      	mov	r2, r7
 8020164:	68a9      	ldr	r1, [r5, #8]
 8020166:	4640      	mov	r0, r8
 8020168:	f002 fa05 	bl	8022576 <memcpy>
 802016c:	68aa      	ldr	r2, [r5, #8]
 802016e:	692b      	ldr	r3, [r5, #16]
 8020170:	443a      	add	r2, r7
 8020172:	443b      	add	r3, r7
 8020174:	60aa      	str	r2, [r5, #8]
 8020176:	612b      	str	r3, [r5, #16]
 8020178:	e7ed      	b.n	8020156 <ucdr_deserialize_array_uint8_t+0x42>
 802017a:	bf00      	nop

0802017c <ucdr_deserialize_endian_array_uint8_t>:
 802017c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020180:	4619      	mov	r1, r3
 8020182:	461f      	mov	r7, r3
 8020184:	4605      	mov	r5, r0
 8020186:	4690      	mov	r8, r2
 8020188:	f7f3 ffa8 	bl	80140dc <ucdr_check_buffer_available_for>
 802018c:	b9e8      	cbnz	r0, 80201ca <ucdr_deserialize_endian_array_uint8_t+0x4e>
 802018e:	463e      	mov	r6, r7
 8020190:	e00c      	b.n	80201ac <ucdr_deserialize_endian_array_uint8_t+0x30>
 8020192:	eb08 0003 	add.w	r0, r8, r3
 8020196:	68a9      	ldr	r1, [r5, #8]
 8020198:	4622      	mov	r2, r4
 802019a:	1b36      	subs	r6, r6, r4
 802019c:	f002 f9eb 	bl	8022576 <memcpy>
 80201a0:	68ab      	ldr	r3, [r5, #8]
 80201a2:	6928      	ldr	r0, [r5, #16]
 80201a4:	4423      	add	r3, r4
 80201a6:	4420      	add	r0, r4
 80201a8:	60ab      	str	r3, [r5, #8]
 80201aa:	6128      	str	r0, [r5, #16]
 80201ac:	4631      	mov	r1, r6
 80201ae:	2201      	movs	r2, #1
 80201b0:	4628      	mov	r0, r5
 80201b2:	f7f4 f81d 	bl	80141f0 <ucdr_check_final_buffer_behavior_array>
 80201b6:	1bbb      	subs	r3, r7, r6
 80201b8:	4604      	mov	r4, r0
 80201ba:	2800      	cmp	r0, #0
 80201bc:	d1e9      	bne.n	8020192 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80201be:	2301      	movs	r3, #1
 80201c0:	7da8      	ldrb	r0, [r5, #22]
 80201c2:	756b      	strb	r3, [r5, #21]
 80201c4:	4058      	eors	r0, r3
 80201c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201ca:	463a      	mov	r2, r7
 80201cc:	68a9      	ldr	r1, [r5, #8]
 80201ce:	4640      	mov	r0, r8
 80201d0:	f002 f9d1 	bl	8022576 <memcpy>
 80201d4:	68aa      	ldr	r2, [r5, #8]
 80201d6:	692b      	ldr	r3, [r5, #16]
 80201d8:	443a      	add	r2, r7
 80201da:	443b      	add	r3, r7
 80201dc:	60aa      	str	r2, [r5, #8]
 80201de:	612b      	str	r3, [r5, #16]
 80201e0:	e7ed      	b.n	80201be <ucdr_deserialize_endian_array_uint8_t+0x42>
 80201e2:	bf00      	nop

080201e4 <ucdr_serialize_string>:
 80201e4:	b510      	push	{r4, lr}
 80201e6:	b082      	sub	sp, #8
 80201e8:	4604      	mov	r4, r0
 80201ea:	4608      	mov	r0, r1
 80201ec:	9101      	str	r1, [sp, #4]
 80201ee:	f7e0 f881 	bl	80002f4 <strlen>
 80201f2:	4602      	mov	r2, r0
 80201f4:	9901      	ldr	r1, [sp, #4]
 80201f6:	4620      	mov	r0, r4
 80201f8:	3201      	adds	r2, #1
 80201fa:	b002      	add	sp, #8
 80201fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020200:	f7f6 bdd8 	b.w	8016db4 <ucdr_serialize_sequence_char>

08020204 <ucdr_deserialize_string>:
 8020204:	b500      	push	{lr}
 8020206:	b083      	sub	sp, #12
 8020208:	ab01      	add	r3, sp, #4
 802020a:	f7f6 fde5 	bl	8016dd8 <ucdr_deserialize_sequence_char>
 802020e:	b003      	add	sp, #12
 8020210:	f85d fb04 	ldr.w	pc, [sp], #4

08020214 <uxr_init_input_best_effort_stream>:
 8020214:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020218:	8003      	strh	r3, [r0, #0]
 802021a:	4770      	bx	lr

0802021c <uxr_reset_input_best_effort_stream>:
 802021c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020220:	8003      	strh	r3, [r0, #0]
 8020222:	4770      	bx	lr

08020224 <uxr_receive_best_effort_message>:
 8020224:	b538      	push	{r3, r4, r5, lr}
 8020226:	4604      	mov	r4, r0
 8020228:	8800      	ldrh	r0, [r0, #0]
 802022a:	460d      	mov	r5, r1
 802022c:	f000 fe74 	bl	8020f18 <uxr_seq_num_cmp>
 8020230:	4603      	mov	r3, r0
 8020232:	0fc0      	lsrs	r0, r0, #31
 8020234:	2b00      	cmp	r3, #0
 8020236:	bfb8      	it	lt
 8020238:	8025      	strhlt	r5, [r4, #0]
 802023a:	bd38      	pop	{r3, r4, r5, pc}

0802023c <on_full_input_buffer>:
 802023c:	b570      	push	{r4, r5, r6, lr}
 802023e:	460c      	mov	r4, r1
 8020240:	4605      	mov	r5, r0
 8020242:	8908      	ldrh	r0, [r1, #8]
 8020244:	682b      	ldr	r3, [r5, #0]
 8020246:	7d26      	ldrb	r6, [r4, #20]
 8020248:	e9d1 1200 	ldrd	r1, r2, [r1]
 802024c:	fbb2 f2f0 	udiv	r2, r2, r0
 8020250:	eba3 0c01 	sub.w	ip, r3, r1
 8020254:	fbbc fcf2 	udiv	ip, ip, r2
 8020258:	f10c 0c01 	add.w	ip, ip, #1
 802025c:	fa1f f38c 	uxth.w	r3, ip
 8020260:	fbb3 fcf0 	udiv	ip, r3, r0
 8020264:	fb00 331c 	mls	r3, r0, ip, r3
 8020268:	b29b      	uxth	r3, r3
 802026a:	fb02 f303 	mul.w	r3, r2, r3
 802026e:	1d18      	adds	r0, r3, #4
 8020270:	4408      	add	r0, r1
 8020272:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8020276:	b116      	cbz	r6, 802027e <on_full_input_buffer+0x42>
 8020278:	2600      	movs	r6, #0
 802027a:	f840 6c04 	str.w	r6, [r0, #-4]
 802027e:	2a03      	cmp	r2, #3
 8020280:	d801      	bhi.n	8020286 <on_full_input_buffer+0x4a>
 8020282:	2001      	movs	r0, #1
 8020284:	bd70      	pop	{r4, r5, r6, pc}
 8020286:	3308      	adds	r3, #8
 8020288:	4628      	mov	r0, r5
 802028a:	3a04      	subs	r2, #4
 802028c:	4419      	add	r1, r3
 802028e:	692b      	ldr	r3, [r5, #16]
 8020290:	f7f3 ff70 	bl	8014174 <ucdr_init_buffer_origin>
 8020294:	4628      	mov	r0, r5
 8020296:	4622      	mov	r2, r4
 8020298:	4902      	ldr	r1, [pc, #8]	@ (80202a4 <on_full_input_buffer+0x68>)
 802029a:	f7f3 ff47 	bl	801412c <ucdr_set_on_full_buffer_callback>
 802029e:	2000      	movs	r0, #0
 80202a0:	bd70      	pop	{r4, r5, r6, pc}
 80202a2:	bf00      	nop
 80202a4:	0802023d 	.word	0x0802023d

080202a8 <uxr_init_input_reliable_stream>:
 80202a8:	b510      	push	{r4, lr}
 80202aa:	e9c0 1200 	strd	r1, r2, [r0]
 80202ae:	2400      	movs	r4, #0
 80202b0:	9a02      	ldr	r2, [sp, #8]
 80202b2:	8103      	strh	r3, [r0, #8]
 80202b4:	6102      	str	r2, [r0, #16]
 80202b6:	7504      	strb	r4, [r0, #20]
 80202b8:	b1c3      	cbz	r3, 80202ec <uxr_init_input_reliable_stream+0x44>
 80202ba:	600c      	str	r4, [r1, #0]
 80202bc:	8901      	ldrh	r1, [r0, #8]
 80202be:	2901      	cmp	r1, #1
 80202c0:	d914      	bls.n	80202ec <uxr_init_input_reliable_stream+0x44>
 80202c2:	f04f 0c01 	mov.w	ip, #1
 80202c6:	6843      	ldr	r3, [r0, #4]
 80202c8:	f10c 0e01 	add.w	lr, ip, #1
 80202cc:	fbbc f2f1 	udiv	r2, ip, r1
 80202d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80202d4:	fb01 c212 	mls	r2, r1, r2, ip
 80202d8:	fa1f fc8e 	uxth.w	ip, lr
 80202dc:	b292      	uxth	r2, r2
 80202de:	fb02 f303 	mul.w	r3, r2, r3
 80202e2:	6802      	ldr	r2, [r0, #0]
 80202e4:	50d4      	str	r4, [r2, r3]
 80202e6:	8901      	ldrh	r1, [r0, #8]
 80202e8:	4561      	cmp	r1, ip
 80202ea:	d8ec      	bhi.n	80202c6 <uxr_init_input_reliable_stream+0x1e>
 80202ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80202f0:	60c3      	str	r3, [r0, #12]
 80202f2:	bd10      	pop	{r4, pc}

080202f4 <uxr_reset_input_reliable_stream>:
 80202f4:	8901      	ldrh	r1, [r0, #8]
 80202f6:	b1d9      	cbz	r1, 8020330 <uxr_reset_input_reliable_stream+0x3c>
 80202f8:	b510      	push	{r4, lr}
 80202fa:	f04f 0e00 	mov.w	lr, #0
 80202fe:	46f4      	mov	ip, lr
 8020300:	4674      	mov	r4, lr
 8020302:	6843      	ldr	r3, [r0, #4]
 8020304:	f10e 0e01 	add.w	lr, lr, #1
 8020308:	fbbc f2f1 	udiv	r2, ip, r1
 802030c:	fbb3 f3f1 	udiv	r3, r3, r1
 8020310:	fb01 c212 	mls	r2, r1, r2, ip
 8020314:	fa1f fc8e 	uxth.w	ip, lr
 8020318:	b292      	uxth	r2, r2
 802031a:	fb02 f303 	mul.w	r3, r2, r3
 802031e:	6802      	ldr	r2, [r0, #0]
 8020320:	50d4      	str	r4, [r2, r3]
 8020322:	8901      	ldrh	r1, [r0, #8]
 8020324:	4561      	cmp	r1, ip
 8020326:	d8ec      	bhi.n	8020302 <uxr_reset_input_reliable_stream+0xe>
 8020328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802032c:	60c3      	str	r3, [r0, #12]
 802032e:	bd10      	pop	{r4, pc}
 8020330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020334:	60c3      	str	r3, [r0, #12]
 8020336:	4770      	bx	lr

08020338 <uxr_receive_reliable_message>:
 8020338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802033c:	4604      	mov	r4, r0
 802033e:	460d      	mov	r5, r1
 8020340:	8901      	ldrh	r1, [r0, #8]
 8020342:	4617      	mov	r7, r2
 8020344:	8980      	ldrh	r0, [r0, #12]
 8020346:	4698      	mov	r8, r3
 8020348:	f000 fdde 	bl	8020f08 <uxr_seq_num_add>
 802034c:	4629      	mov	r1, r5
 802034e:	4606      	mov	r6, r0
 8020350:	89a0      	ldrh	r0, [r4, #12]
 8020352:	f000 fde1 	bl	8020f18 <uxr_seq_num_cmp>
 8020356:	2800      	cmp	r0, #0
 8020358:	db0a      	blt.n	8020370 <uxr_receive_reliable_message+0x38>
 802035a:	2600      	movs	r6, #0
 802035c:	4629      	mov	r1, r5
 802035e:	89e0      	ldrh	r0, [r4, #14]
 8020360:	f000 fdda 	bl	8020f18 <uxr_seq_num_cmp>
 8020364:	2800      	cmp	r0, #0
 8020366:	da00      	bge.n	802036a <uxr_receive_reliable_message+0x32>
 8020368:	81e5      	strh	r5, [r4, #14]
 802036a:	4630      	mov	r0, r6
 802036c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020370:	4630      	mov	r0, r6
 8020372:	4629      	mov	r1, r5
 8020374:	f000 fdd0 	bl	8020f18 <uxr_seq_num_cmp>
 8020378:	2800      	cmp	r0, #0
 802037a:	dbee      	blt.n	802035a <uxr_receive_reliable_message+0x22>
 802037c:	6923      	ldr	r3, [r4, #16]
 802037e:	4638      	mov	r0, r7
 8020380:	4798      	blx	r3
 8020382:	4681      	mov	r9, r0
 8020384:	2101      	movs	r1, #1
 8020386:	89a0      	ldrh	r0, [r4, #12]
 8020388:	f000 fdbe 	bl	8020f08 <uxr_seq_num_add>
 802038c:	f1b9 0f00 	cmp.w	r9, #0
 8020390:	bf08      	it	eq
 8020392:	4285      	cmpeq	r5, r0
 8020394:	bf0c      	ite	eq
 8020396:	2601      	moveq	r6, #1
 8020398:	2600      	movne	r6, #0
 802039a:	d104      	bne.n	80203a6 <uxr_receive_reliable_message+0x6e>
 802039c:	2300      	movs	r3, #0
 802039e:	9a08      	ldr	r2, [sp, #32]
 80203a0:	81a0      	strh	r0, [r4, #12]
 80203a2:	7013      	strb	r3, [r2, #0]
 80203a4:	e7da      	b.n	802035c <uxr_receive_reliable_message+0x24>
 80203a6:	8922      	ldrh	r2, [r4, #8]
 80203a8:	6863      	ldr	r3, [r4, #4]
 80203aa:	fbb5 f0f2 	udiv	r0, r5, r2
 80203ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80203b2:	fb02 5010 	mls	r0, r2, r0, r5
 80203b6:	b280      	uxth	r0, r0
 80203b8:	fb03 f000 	mul.w	r0, r3, r0
 80203bc:	6823      	ldr	r3, [r4, #0]
 80203be:	3004      	adds	r0, #4
 80203c0:	4418      	add	r0, r3
 80203c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	d1c7      	bne.n	802035a <uxr_receive_reliable_message+0x22>
 80203ca:	4639      	mov	r1, r7
 80203cc:	4642      	mov	r2, r8
 80203ce:	f002 f8d2 	bl	8022576 <memcpy>
 80203d2:	8921      	ldrh	r1, [r4, #8]
 80203d4:	6863      	ldr	r3, [r4, #4]
 80203d6:	fbb5 f2f1 	udiv	r2, r5, r1
 80203da:	fbb3 f3f1 	udiv	r3, r3, r1
 80203de:	fb01 5212 	mls	r2, r1, r2, r5
 80203e2:	b292      	uxth	r2, r2
 80203e4:	fb02 f303 	mul.w	r3, r2, r3
 80203e8:	6822      	ldr	r2, [r4, #0]
 80203ea:	f842 8003 	str.w	r8, [r2, r3]
 80203ee:	2301      	movs	r3, #1
 80203f0:	9a08      	ldr	r2, [sp, #32]
 80203f2:	7013      	strb	r3, [r2, #0]
 80203f4:	f1b9 0f00 	cmp.w	r9, #0
 80203f8:	d0af      	beq.n	802035a <uxr_receive_reliable_message+0x22>
 80203fa:	89a6      	ldrh	r6, [r4, #12]
 80203fc:	2101      	movs	r1, #1
 80203fe:	4630      	mov	r0, r6
 8020400:	f000 fd82 	bl	8020f08 <uxr_seq_num_add>
 8020404:	8921      	ldrh	r1, [r4, #8]
 8020406:	6863      	ldr	r3, [r4, #4]
 8020408:	4606      	mov	r6, r0
 802040a:	fbb0 f2f1 	udiv	r2, r0, r1
 802040e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020412:	fb01 0212 	mls	r2, r1, r2, r0
 8020416:	6820      	ldr	r0, [r4, #0]
 8020418:	b292      	uxth	r2, r2
 802041a:	fb02 f303 	mul.w	r3, r2, r3
 802041e:	3304      	adds	r3, #4
 8020420:	4418      	add	r0, r3
 8020422:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8020426:	2b00      	cmp	r3, #0
 8020428:	d097      	beq.n	802035a <uxr_receive_reliable_message+0x22>
 802042a:	6923      	ldr	r3, [r4, #16]
 802042c:	4798      	blx	r3
 802042e:	2802      	cmp	r0, #2
 8020430:	d002      	beq.n	8020438 <uxr_receive_reliable_message+0x100>
 8020432:	2801      	cmp	r0, #1
 8020434:	d0e2      	beq.n	80203fc <uxr_receive_reliable_message+0xc4>
 8020436:	e790      	b.n	802035a <uxr_receive_reliable_message+0x22>
 8020438:	2601      	movs	r6, #1
 802043a:	e78f      	b.n	802035c <uxr_receive_reliable_message+0x24>

0802043c <uxr_next_input_reliable_buffer_available>:
 802043c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020440:	4604      	mov	r4, r0
 8020442:	460f      	mov	r7, r1
 8020444:	8980      	ldrh	r0, [r0, #12]
 8020446:	2101      	movs	r1, #1
 8020448:	4690      	mov	r8, r2
 802044a:	f000 fd5d 	bl	8020f08 <uxr_seq_num_add>
 802044e:	8922      	ldrh	r2, [r4, #8]
 8020450:	6866      	ldr	r6, [r4, #4]
 8020452:	fbb0 f3f2 	udiv	r3, r0, r2
 8020456:	fbb6 f6f2 	udiv	r6, r6, r2
 802045a:	fb02 0313 	mls	r3, r2, r3, r0
 802045e:	b29b      	uxth	r3, r3
 8020460:	fb03 f606 	mul.w	r6, r3, r6
 8020464:	6823      	ldr	r3, [r4, #0]
 8020466:	3604      	adds	r6, #4
 8020468:	441e      	add	r6, r3
 802046a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 802046e:	f1b9 0f00 	cmp.w	r9, #0
 8020472:	d023      	beq.n	80204bc <uxr_next_input_reliable_buffer_available+0x80>
 8020474:	4605      	mov	r5, r0
 8020476:	6923      	ldr	r3, [r4, #16]
 8020478:	4630      	mov	r0, r6
 802047a:	4798      	blx	r3
 802047c:	4682      	mov	sl, r0
 802047e:	b300      	cbz	r0, 80204c2 <uxr_next_input_reliable_buffer_available+0x86>
 8020480:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8020484:	2101      	movs	r1, #1
 8020486:	4650      	mov	r0, sl
 8020488:	f000 fd3e 	bl	8020f08 <uxr_seq_num_add>
 802048c:	8921      	ldrh	r1, [r4, #8]
 802048e:	4682      	mov	sl, r0
 8020490:	6863      	ldr	r3, [r4, #4]
 8020492:	6820      	ldr	r0, [r4, #0]
 8020494:	fbba f2f1 	udiv	r2, sl, r1
 8020498:	fbb3 f3f1 	udiv	r3, r3, r1
 802049c:	fb01 a212 	mls	r2, r1, r2, sl
 80204a0:	b292      	uxth	r2, r2
 80204a2:	fb02 f303 	mul.w	r3, r2, r3
 80204a6:	3304      	adds	r3, #4
 80204a8:	4418      	add	r0, r3
 80204aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80204ae:	b12b      	cbz	r3, 80204bc <uxr_next_input_reliable_buffer_available+0x80>
 80204b0:	6923      	ldr	r3, [r4, #16]
 80204b2:	4798      	blx	r3
 80204b4:	2802      	cmp	r0, #2
 80204b6:	d01b      	beq.n	80204f0 <uxr_next_input_reliable_buffer_available+0xb4>
 80204b8:	2801      	cmp	r0, #1
 80204ba:	d0e3      	beq.n	8020484 <uxr_next_input_reliable_buffer_available+0x48>
 80204bc:	2000      	movs	r0, #0
 80204be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204c2:	464a      	mov	r2, r9
 80204c4:	4631      	mov	r1, r6
 80204c6:	4638      	mov	r0, r7
 80204c8:	f7f3 fe5c 	bl	8014184 <ucdr_init_buffer>
 80204cc:	8921      	ldrh	r1, [r4, #8]
 80204ce:	6863      	ldr	r3, [r4, #4]
 80204d0:	2001      	movs	r0, #1
 80204d2:	fbb5 f2f1 	udiv	r2, r5, r1
 80204d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80204da:	fb01 5212 	mls	r2, r1, r2, r5
 80204de:	b292      	uxth	r2, r2
 80204e0:	fb02 f303 	mul.w	r3, r2, r3
 80204e4:	6822      	ldr	r2, [r4, #0]
 80204e6:	f842 a003 	str.w	sl, [r2, r3]
 80204ea:	81a5      	strh	r5, [r4, #12]
 80204ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204f0:	8920      	ldrh	r0, [r4, #8]
 80204f2:	eb06 0108 	add.w	r1, r6, r8
 80204f6:	6863      	ldr	r3, [r4, #4]
 80204f8:	eba9 0208 	sub.w	r2, r9, r8
 80204fc:	fbb5 f6f0 	udiv	r6, r5, r0
 8020500:	fbb3 f3f0 	udiv	r3, r3, r0
 8020504:	fb00 5516 	mls	r5, r0, r6, r5
 8020508:	2000      	movs	r0, #0
 802050a:	b2ad      	uxth	r5, r5
 802050c:	fb03 f505 	mul.w	r5, r3, r5
 8020510:	6823      	ldr	r3, [r4, #0]
 8020512:	5158      	str	r0, [r3, r5]
 8020514:	4638      	mov	r0, r7
 8020516:	f7f3 fe35 	bl	8014184 <ucdr_init_buffer>
 802051a:	4638      	mov	r0, r7
 802051c:	4622      	mov	r2, r4
 802051e:	4903      	ldr	r1, [pc, #12]	@ (802052c <uxr_next_input_reliable_buffer_available+0xf0>)
 8020520:	f7f3 fe04 	bl	801412c <ucdr_set_on_full_buffer_callback>
 8020524:	2001      	movs	r0, #1
 8020526:	f8a4 a00c 	strh.w	sl, [r4, #12]
 802052a:	e7c8      	b.n	80204be <uxr_next_input_reliable_buffer_available+0x82>
 802052c:	0802023d 	.word	0x0802023d

08020530 <uxr_process_heartbeat>:
 8020530:	b538      	push	{r3, r4, r5, lr}
 8020532:	4611      	mov	r1, r2
 8020534:	4604      	mov	r4, r0
 8020536:	89c0      	ldrh	r0, [r0, #14]
 8020538:	4615      	mov	r5, r2
 802053a:	f000 fced 	bl	8020f18 <uxr_seq_num_cmp>
 802053e:	2800      	cmp	r0, #0
 8020540:	bfb8      	it	lt
 8020542:	81e5      	strhlt	r5, [r4, #14]
 8020544:	bd38      	pop	{r3, r4, r5, pc}
 8020546:	bf00      	nop

08020548 <uxr_compute_acknack>:
 8020548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802054c:	8903      	ldrh	r3, [r0, #8]
 802054e:	4604      	mov	r4, r0
 8020550:	460f      	mov	r7, r1
 8020552:	8985      	ldrh	r5, [r0, #12]
 8020554:	b1db      	cbz	r3, 802058e <uxr_compute_acknack+0x46>
 8020556:	4628      	mov	r0, r5
 8020558:	2601      	movs	r6, #1
 802055a:	e004      	b.n	8020566 <uxr_compute_acknack+0x1e>
 802055c:	4566      	cmp	r6, ip
 802055e:	f106 0601 	add.w	r6, r6, #1
 8020562:	d214      	bcs.n	802058e <uxr_compute_acknack+0x46>
 8020564:	89a0      	ldrh	r0, [r4, #12]
 8020566:	b2b1      	uxth	r1, r6
 8020568:	f000 fcce 	bl	8020f08 <uxr_seq_num_add>
 802056c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8020570:	fbb0 f2fc 	udiv	r2, r0, ip
 8020574:	e9d4 1300 	ldrd	r1, r3, [r4]
 8020578:	fb0c 0212 	mls	r2, ip, r2, r0
 802057c:	fbb3 f3fc 	udiv	r3, r3, ip
 8020580:	b292      	uxth	r2, r2
 8020582:	fb02 f303 	mul.w	r3, r2, r3
 8020586:	58cb      	ldr	r3, [r1, r3]
 8020588:	2b00      	cmp	r3, #0
 802058a:	d1e7      	bne.n	802055c <uxr_compute_acknack+0x14>
 802058c:	4605      	mov	r5, r0
 802058e:	803d      	strh	r5, [r7, #0]
 8020590:	2101      	movs	r1, #1
 8020592:	89e6      	ldrh	r6, [r4, #14]
 8020594:	4628      	mov	r0, r5
 8020596:	f000 fcbb 	bl	8020f10 <uxr_seq_num_sub>
 802059a:	4601      	mov	r1, r0
 802059c:	4630      	mov	r0, r6
 802059e:	f000 fcb7 	bl	8020f10 <uxr_seq_num_sub>
 80205a2:	4606      	mov	r6, r0
 80205a4:	b328      	cbz	r0, 80205f2 <uxr_compute_acknack+0xaa>
 80205a6:	f04f 0900 	mov.w	r9, #0
 80205aa:	f04f 0801 	mov.w	r8, #1
 80205ae:	464d      	mov	r5, r9
 80205b0:	fa1f f189 	uxth.w	r1, r9
 80205b4:	8838      	ldrh	r0, [r7, #0]
 80205b6:	f000 fca7 	bl	8020f08 <uxr_seq_num_add>
 80205ba:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80205be:	6861      	ldr	r1, [r4, #4]
 80205c0:	fa08 fe09 	lsl.w	lr, r8, r9
 80205c4:	6822      	ldr	r2, [r4, #0]
 80205c6:	f109 0901 	add.w	r9, r9, #1
 80205ca:	ea4e 0e05 	orr.w	lr, lr, r5
 80205ce:	fbb0 f3fc 	udiv	r3, r0, ip
 80205d2:	fbb1 f1fc 	udiv	r1, r1, ip
 80205d6:	fb03 001c 	mls	r0, r3, ip, r0
 80205da:	b283      	uxth	r3, r0
 80205dc:	fb01 f303 	mul.w	r3, r1, r3
 80205e0:	58d3      	ldr	r3, [r2, r3]
 80205e2:	b90b      	cbnz	r3, 80205e8 <uxr_compute_acknack+0xa0>
 80205e4:	fa1f f58e 	uxth.w	r5, lr
 80205e8:	454e      	cmp	r6, r9
 80205ea:	d1e1      	bne.n	80205b0 <uxr_compute_acknack+0x68>
 80205ec:	4628      	mov	r0, r5
 80205ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80205f2:	4605      	mov	r5, r0
 80205f4:	4628      	mov	r0, r5
 80205f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80205fa:	bf00      	nop

080205fc <uxr_init_output_best_effort_stream>:
 80205fc:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8020600:	6001      	str	r1, [r0, #0]
 8020602:	7303      	strb	r3, [r0, #12]
 8020604:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8020608:	e9c0 3201 	strd	r3, r2, [r0, #4]
 802060c:	4770      	bx	lr
 802060e:	bf00      	nop

08020610 <uxr_reset_output_best_effort_stream>:
 8020610:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020614:	7b03      	ldrb	r3, [r0, #12]
 8020616:	81c2      	strh	r2, [r0, #14]
 8020618:	6043      	str	r3, [r0, #4]
 802061a:	4770      	bx	lr

0802061c <uxr_prepare_best_effort_buffer_to_write>:
 802061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802061e:	4604      	mov	r4, r0
 8020620:	b083      	sub	sp, #12
 8020622:	6840      	ldr	r0, [r0, #4]
 8020624:	460d      	mov	r5, r1
 8020626:	4616      	mov	r6, r2
 8020628:	f7f8 ff5e 	bl	80194e8 <uxr_submessage_padding>
 802062c:	6863      	ldr	r3, [r4, #4]
 802062e:	4418      	add	r0, r3
 8020630:	68a3      	ldr	r3, [r4, #8]
 8020632:	1942      	adds	r2, r0, r5
 8020634:	4293      	cmp	r3, r2
 8020636:	bf2c      	ite	cs
 8020638:	2701      	movcs	r7, #1
 802063a:	2700      	movcc	r7, #0
 802063c:	d202      	bcs.n	8020644 <uxr_prepare_best_effort_buffer_to_write+0x28>
 802063e:	4638      	mov	r0, r7
 8020640:	b003      	add	sp, #12
 8020642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020644:	9000      	str	r0, [sp, #0]
 8020646:	2300      	movs	r3, #0
 8020648:	4630      	mov	r0, r6
 802064a:	6821      	ldr	r1, [r4, #0]
 802064c:	f7f3 fd88 	bl	8014160 <ucdr_init_buffer_origin_offset>
 8020650:	6861      	ldr	r1, [r4, #4]
 8020652:	4638      	mov	r0, r7
 8020654:	4429      	add	r1, r5
 8020656:	6061      	str	r1, [r4, #4]
 8020658:	b003      	add	sp, #12
 802065a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802065c <uxr_prepare_best_effort_buffer_to_send>:
 802065c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020660:	4604      	mov	r4, r0
 8020662:	461d      	mov	r5, r3
 8020664:	6840      	ldr	r0, [r0, #4]
 8020666:	7b23      	ldrb	r3, [r4, #12]
 8020668:	4298      	cmp	r0, r3
 802066a:	bf8c      	ite	hi
 802066c:	2601      	movhi	r6, #1
 802066e:	2600      	movls	r6, #0
 8020670:	d802      	bhi.n	8020678 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8020672:	4630      	mov	r0, r6
 8020674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020678:	4688      	mov	r8, r1
 802067a:	89e0      	ldrh	r0, [r4, #14]
 802067c:	2101      	movs	r1, #1
 802067e:	4617      	mov	r7, r2
 8020680:	f000 fc42 	bl	8020f08 <uxr_seq_num_add>
 8020684:	6823      	ldr	r3, [r4, #0]
 8020686:	81e0      	strh	r0, [r4, #14]
 8020688:	8028      	strh	r0, [r5, #0]
 802068a:	4630      	mov	r0, r6
 802068c:	f8c8 3000 	str.w	r3, [r8]
 8020690:	6863      	ldr	r3, [r4, #4]
 8020692:	603b      	str	r3, [r7, #0]
 8020694:	7b23      	ldrb	r3, [r4, #12]
 8020696:	6063      	str	r3, [r4, #4]
 8020698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802069c <on_full_output_buffer>:
 802069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802069e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80206a2:	460c      	mov	r4, r1
 80206a4:	6803      	ldr	r3, [r0, #0]
 80206a6:	4605      	mov	r5, r0
 80206a8:	7b26      	ldrb	r6, [r4, #12]
 80206aa:	e9d1 1200 	ldrd	r1, r2, [r1]
 80206ae:	fbb2 f2fc 	udiv	r2, r2, ip
 80206b2:	eba3 0e01 	sub.w	lr, r3, r1
 80206b6:	6903      	ldr	r3, [r0, #16]
 80206b8:	fbbe fef2 	udiv	lr, lr, r2
 80206bc:	f10e 0e01 	add.w	lr, lr, #1
 80206c0:	fa1f fe8e 	uxth.w	lr, lr
 80206c4:	fbbe f7fc 	udiv	r7, lr, ip
 80206c8:	fb0c ec17 	mls	ip, ip, r7, lr
 80206cc:	fa1f fc8c 	uxth.w	ip, ip
 80206d0:	fb02 fc0c 	mul.w	ip, r2, ip
 80206d4:	f851 200c 	ldr.w	r2, [r1, ip]
 80206d8:	44b4      	add	ip, r6
 80206da:	1b92      	subs	r2, r2, r6
 80206dc:	f10c 0c08 	add.w	ip, ip, #8
 80206e0:	3a04      	subs	r2, #4
 80206e2:	4461      	add	r1, ip
 80206e4:	f7f3 fd46 	bl	8014174 <ucdr_init_buffer_origin>
 80206e8:	4628      	mov	r0, r5
 80206ea:	4622      	mov	r2, r4
 80206ec:	4902      	ldr	r1, [pc, #8]	@ (80206f8 <on_full_output_buffer+0x5c>)
 80206ee:	f7f3 fd1d 	bl	801412c <ucdr_set_on_full_buffer_callback>
 80206f2:	2000      	movs	r0, #0
 80206f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80206f6:	bf00      	nop
 80206f8:	0802069d 	.word	0x0802069d

080206fc <uxr_init_output_reliable_stream>:
 80206fc:	b530      	push	{r4, r5, lr}
 80206fe:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8020702:	8103      	strh	r3, [r0, #8]
 8020704:	7304      	strb	r4, [r0, #12]
 8020706:	e9c0 1200 	strd	r1, r2, [r0]
 802070a:	b1e3      	cbz	r3, 8020746 <uxr_init_output_reliable_stream+0x4a>
 802070c:	600c      	str	r4, [r1, #0]
 802070e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8020712:	f1bc 0f01 	cmp.w	ip, #1
 8020716:	d916      	bls.n	8020746 <uxr_init_output_reliable_stream+0x4a>
 8020718:	f04f 0e01 	mov.w	lr, #1
 802071c:	6843      	ldr	r3, [r0, #4]
 802071e:	f10e 0501 	add.w	r5, lr, #1
 8020722:	7b04      	ldrb	r4, [r0, #12]
 8020724:	6801      	ldr	r1, [r0, #0]
 8020726:	fbbe f2fc 	udiv	r2, lr, ip
 802072a:	fbb3 f3fc 	udiv	r3, r3, ip
 802072e:	fb0c e212 	mls	r2, ip, r2, lr
 8020732:	fa1f fe85 	uxth.w	lr, r5
 8020736:	b292      	uxth	r2, r2
 8020738:	fb02 f303 	mul.w	r3, r2, r3
 802073c:	50cc      	str	r4, [r1, r3]
 802073e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8020742:	45f4      	cmp	ip, lr
 8020744:	d8ea      	bhi.n	802071c <uxr_init_output_reliable_stream+0x20>
 8020746:	4b07      	ldr	r3, [pc, #28]	@ (8020764 <uxr_init_output_reliable_stream+0x68>)
 8020748:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802074c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020750:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8020754:	f8c0 300e 	str.w	r3, [r0, #14]
 8020758:	2300      	movs	r3, #0
 802075a:	8242      	strh	r2, [r0, #18]
 802075c:	8403      	strh	r3, [r0, #32]
 802075e:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8020762:	bd30      	pop	{r4, r5, pc}
 8020764:	ffff0000 	.word	0xffff0000

08020768 <uxr_reset_output_reliable_stream>:
 8020768:	8901      	ldrh	r1, [r0, #8]
 802076a:	b510      	push	{r4, lr}
 802076c:	b1b1      	cbz	r1, 802079c <uxr_reset_output_reliable_stream+0x34>
 802076e:	f04f 0e00 	mov.w	lr, #0
 8020772:	46f4      	mov	ip, lr
 8020774:	6843      	ldr	r3, [r0, #4]
 8020776:	f10e 0e01 	add.w	lr, lr, #1
 802077a:	7b04      	ldrb	r4, [r0, #12]
 802077c:	fbbc f2f1 	udiv	r2, ip, r1
 8020780:	fbb3 f3f1 	udiv	r3, r3, r1
 8020784:	fb01 c212 	mls	r2, r1, r2, ip
 8020788:	fa1f fc8e 	uxth.w	ip, lr
 802078c:	b292      	uxth	r2, r2
 802078e:	fb02 f303 	mul.w	r3, r2, r3
 8020792:	6802      	ldr	r2, [r0, #0]
 8020794:	50d4      	str	r4, [r2, r3]
 8020796:	8901      	ldrh	r1, [r0, #8]
 8020798:	4561      	cmp	r1, ip
 802079a:	d8eb      	bhi.n	8020774 <uxr_reset_output_reliable_stream+0xc>
 802079c:	4b08      	ldr	r3, [pc, #32]	@ (80207c0 <uxr_reset_output_reliable_stream+0x58>)
 802079e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80207a2:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 80207b8 <uxr_reset_output_reliable_stream+0x50>
 80207a6:	f8c0 300e 	str.w	r3, [r0, #14]
 80207aa:	2300      	movs	r3, #0
 80207ac:	8242      	strh	r2, [r0, #18]
 80207ae:	8403      	strh	r3, [r0, #32]
 80207b0:	ed80 7b06 	vstr	d7, [r0, #24]
 80207b4:	bd10      	pop	{r4, pc}
 80207b6:	bf00      	nop
 80207b8:	ffffffff 	.word	0xffffffff
 80207bc:	7fffffff 	.word	0x7fffffff
 80207c0:	ffff0000 	.word	0xffff0000

080207c4 <uxr_prepare_reliable_buffer_to_write>:
 80207c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207c8:	4604      	mov	r4, r0
 80207ca:	b091      	sub	sp, #68	@ 0x44
 80207cc:	8900      	ldrh	r0, [r0, #8]
 80207ce:	468b      	mov	fp, r1
 80207d0:	89e6      	ldrh	r6, [r4, #14]
 80207d2:	9204      	str	r2, [sp, #16]
 80207d4:	6865      	ldr	r5, [r4, #4]
 80207d6:	6823      	ldr	r3, [r4, #0]
 80207d8:	f894 900c 	ldrb.w	r9, [r4, #12]
 80207dc:	fbb6 f2f0 	udiv	r2, r6, r0
 80207e0:	fbb5 f5f0 	udiv	r5, r5, r0
 80207e4:	fb00 6212 	mls	r2, r0, r2, r6
 80207e8:	1f2f      	subs	r7, r5, #4
 80207ea:	b292      	uxth	r2, r2
 80207ec:	fb05 3202 	mla	r2, r5, r2, r3
 80207f0:	1d11      	adds	r1, r2, #4
 80207f2:	f8d2 8000 	ldr.w	r8, [r2]
 80207f6:	9103      	str	r1, [sp, #12]
 80207f8:	2800      	cmp	r0, #0
 80207fa:	f000 814a 	beq.w	8020a92 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 80207fe:	f04f 0c00 	mov.w	ip, #0
 8020802:	46e2      	mov	sl, ip
 8020804:	4661      	mov	r1, ip
 8020806:	f10c 0c01 	add.w	ip, ip, #1
 802080a:	fbb1 f2f0 	udiv	r2, r1, r0
 802080e:	fb00 1212 	mls	r2, r0, r2, r1
 8020812:	fa1f f18c 	uxth.w	r1, ip
 8020816:	b292      	uxth	r2, r2
 8020818:	fb05 f202 	mul.w	r2, r5, r2
 802081c:	589a      	ldr	r2, [r3, r2]
 802081e:	454a      	cmp	r2, r9
 8020820:	d103      	bne.n	802082a <uxr_prepare_reliable_buffer_to_write+0x66>
 8020822:	f10a 0a01 	add.w	sl, sl, #1
 8020826:	fa1f fa8a 	uxth.w	sl, sl
 802082a:	4281      	cmp	r1, r0
 802082c:	d3eb      	bcc.n	8020806 <uxr_prepare_reliable_buffer_to_write+0x42>
 802082e:	4640      	mov	r0, r8
 8020830:	2104      	movs	r1, #4
 8020832:	f8cd a014 	str.w	sl, [sp, #20]
 8020836:	f7f3 fca9 	bl	801418c <ucdr_alignment>
 802083a:	4480      	add	r8, r0
 802083c:	eb08 020b 	add.w	r2, r8, fp
 8020840:	42ba      	cmp	r2, r7
 8020842:	f240 80ca 	bls.w	80209da <uxr_prepare_reliable_buffer_to_write+0x216>
 8020846:	7b22      	ldrb	r2, [r4, #12]
 8020848:	445a      	add	r2, fp
 802084a:	42ba      	cmp	r2, r7
 802084c:	f240 80b2 	bls.w	80209b4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8020850:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8020854:	b2bb      	uxth	r3, r7
 8020856:	eba2 0209 	sub.w	r2, r2, r9
 802085a:	441a      	add	r2, r3
 802085c:	b292      	uxth	r2, r2
 802085e:	fb0a f902 	mul.w	r9, sl, r2
 8020862:	9205      	str	r2, [sp, #20]
 8020864:	45d9      	cmp	r9, fp
 8020866:	9206      	str	r2, [sp, #24]
 8020868:	f0c0 80b3 	bcc.w	80209d2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 802086c:	f108 0204 	add.w	r2, r8, #4
 8020870:	42ba      	cmp	r2, r7
 8020872:	f080 80da 	bcs.w	8020a2a <uxr_prepare_reliable_buffer_to_write+0x266>
 8020876:	f1a3 0904 	sub.w	r9, r3, #4
 802087a:	9b05      	ldr	r3, [sp, #20]
 802087c:	eba9 0908 	sub.w	r9, r9, r8
 8020880:	fa1f f989 	uxth.w	r9, r9
 8020884:	ebab 0b09 	sub.w	fp, fp, r9
 8020888:	fbbb f2f3 	udiv	r2, fp, r3
 802088c:	fb03 b312 	mls	r3, r3, r2, fp
 8020890:	2b00      	cmp	r3, #0
 8020892:	f040 80c4 	bne.w	8020a1e <uxr_prepare_reliable_buffer_to_write+0x25a>
 8020896:	b293      	uxth	r3, r2
 8020898:	4553      	cmp	r3, sl
 802089a:	f200 809a 	bhi.w	80209d2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 802089e:	2b00      	cmp	r3, #0
 80208a0:	f000 80f9 	beq.w	8020a96 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80208a4:	f8cd 801c 	str.w	r8, [sp, #28]
 80208a8:	f04f 0a00 	mov.w	sl, #0
 80208ac:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80208b0:	f10d 0b20 	add.w	fp, sp, #32
 80208b4:	9505      	str	r5, [sp, #20]
 80208b6:	461d      	mov	r5, r3
 80208b8:	e000      	b.n	80208bc <uxr_prepare_reliable_buffer_to_write+0xf8>
 80208ba:	46c1      	mov	r9, r8
 80208bc:	8922      	ldrh	r2, [r4, #8]
 80208be:	4658      	mov	r0, fp
 80208c0:	6863      	ldr	r3, [r4, #4]
 80208c2:	f10a 0a01 	add.w	sl, sl, #1
 80208c6:	fbb6 f1f2 	udiv	r1, r6, r2
 80208ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80208ce:	fb02 6111 	mls	r1, r2, r1, r6
 80208d2:	463a      	mov	r2, r7
 80208d4:	b289      	uxth	r1, r1
 80208d6:	fb03 f101 	mul.w	r1, r3, r1
 80208da:	6823      	ldr	r3, [r4, #0]
 80208dc:	3104      	adds	r1, #4
 80208de:	4419      	add	r1, r3
 80208e0:	2300      	movs	r3, #0
 80208e2:	f851 cc04 	ldr.w	ip, [r1, #-4]
 80208e6:	f8cd c000 	str.w	ip, [sp]
 80208ea:	f7f3 fc39 	bl	8014160 <ucdr_init_buffer_origin_offset>
 80208ee:	464a      	mov	r2, r9
 80208f0:	2300      	movs	r3, #0
 80208f2:	210d      	movs	r1, #13
 80208f4:	4658      	mov	r0, fp
 80208f6:	f7f8 fdb7 	bl	8019468 <uxr_buffer_submessage_header>
 80208fa:	8921      	ldrh	r1, [r4, #8]
 80208fc:	6863      	ldr	r3, [r4, #4]
 80208fe:	4630      	mov	r0, r6
 8020900:	fbb6 f2f1 	udiv	r2, r6, r1
 8020904:	fbb3 f3f1 	udiv	r3, r3, r1
 8020908:	fb01 6212 	mls	r2, r1, r2, r6
 802090c:	2101      	movs	r1, #1
 802090e:	b292      	uxth	r2, r2
 8020910:	fb02 f303 	mul.w	r3, r2, r3
 8020914:	6822      	ldr	r2, [r4, #0]
 8020916:	50d7      	str	r7, [r2, r3]
 8020918:	f000 faf6 	bl	8020f08 <uxr_seq_num_add>
 802091c:	4606      	mov	r6, r0
 802091e:	fa1f f38a 	uxth.w	r3, sl
 8020922:	429d      	cmp	r5, r3
 8020924:	d8c9      	bhi.n	80208ba <uxr_prepare_reliable_buffer_to_write+0xf6>
 8020926:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802092a:	9d05      	ldr	r5, [sp, #20]
 802092c:	8920      	ldrh	r0, [r4, #8]
 802092e:	463a      	mov	r2, r7
 8020930:	6863      	ldr	r3, [r4, #4]
 8020932:	fbb6 f1f0 	udiv	r1, r6, r0
 8020936:	fbb3 f3f0 	udiv	r3, r3, r0
 802093a:	fb00 6111 	mls	r1, r0, r1, r6
 802093e:	4658      	mov	r0, fp
 8020940:	b289      	uxth	r1, r1
 8020942:	fb01 f303 	mul.w	r3, r1, r3
 8020946:	6821      	ldr	r1, [r4, #0]
 8020948:	3304      	adds	r3, #4
 802094a:	4419      	add	r1, r3
 802094c:	2300      	movs	r3, #0
 802094e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8020952:	9700      	str	r7, [sp, #0]
 8020954:	f7f3 fc04 	bl	8014160 <ucdr_init_buffer_origin_offset>
 8020958:	9f06      	ldr	r7, [sp, #24]
 802095a:	4658      	mov	r0, fp
 802095c:	2302      	movs	r3, #2
 802095e:	b2ba      	uxth	r2, r7
 8020960:	210d      	movs	r1, #13
 8020962:	f7f8 fd81 	bl	8019468 <uxr_buffer_submessage_header>
 8020966:	f108 0104 	add.w	r1, r8, #4
 802096a:	9b03      	ldr	r3, [sp, #12]
 802096c:	f1a5 0208 	sub.w	r2, r5, #8
 8020970:	8925      	ldrh	r5, [r4, #8]
 8020972:	440b      	add	r3, r1
 8020974:	eba2 0208 	sub.w	r2, r2, r8
 8020978:	fbb6 f0f5 	udiv	r0, r6, r5
 802097c:	4619      	mov	r1, r3
 802097e:	6863      	ldr	r3, [r4, #4]
 8020980:	fb05 6010 	mls	r0, r5, r0, r6
 8020984:	fbb3 f3f5 	udiv	r3, r3, r5
 8020988:	b280      	uxth	r0, r0
 802098a:	6825      	ldr	r5, [r4, #0]
 802098c:	fb00 f303 	mul.w	r3, r0, r3
 8020990:	7b20      	ldrb	r0, [r4, #12]
 8020992:	3004      	adds	r0, #4
 8020994:	4438      	add	r0, r7
 8020996:	50e8      	str	r0, [r5, r3]
 8020998:	9d04      	ldr	r5, [sp, #16]
 802099a:	4628      	mov	r0, r5
 802099c:	f7f3 fbf2 	bl	8014184 <ucdr_init_buffer>
 80209a0:	4628      	mov	r0, r5
 80209a2:	4622      	mov	r2, r4
 80209a4:	493d      	ldr	r1, [pc, #244]	@ (8020a9c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80209a6:	f7f3 fbc1 	bl	801412c <ucdr_set_on_full_buffer_callback>
 80209aa:	2001      	movs	r0, #1
 80209ac:	81e6      	strh	r6, [r4, #14]
 80209ae:	b011      	add	sp, #68	@ 0x44
 80209b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209b4:	2101      	movs	r1, #1
 80209b6:	89e0      	ldrh	r0, [r4, #14]
 80209b8:	f000 faa6 	bl	8020f08 <uxr_seq_num_add>
 80209bc:	4605      	mov	r5, r0
 80209be:	8921      	ldrh	r1, [r4, #8]
 80209c0:	8a60      	ldrh	r0, [r4, #18]
 80209c2:	f000 faa1 	bl	8020f08 <uxr_seq_num_add>
 80209c6:	4601      	mov	r1, r0
 80209c8:	4628      	mov	r0, r5
 80209ca:	f000 faa5 	bl	8020f18 <uxr_seq_num_cmp>
 80209ce:	2800      	cmp	r0, #0
 80209d0:	dd44      	ble.n	8020a5c <uxr_prepare_reliable_buffer_to_write+0x298>
 80209d2:	2000      	movs	r0, #0
 80209d4:	b011      	add	sp, #68	@ 0x44
 80209d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209da:	8921      	ldrh	r1, [r4, #8]
 80209dc:	8a60      	ldrh	r0, [r4, #18]
 80209de:	9205      	str	r2, [sp, #20]
 80209e0:	f000 fa92 	bl	8020f08 <uxr_seq_num_add>
 80209e4:	4601      	mov	r1, r0
 80209e6:	4630      	mov	r0, r6
 80209e8:	f000 fa96 	bl	8020f18 <uxr_seq_num_cmp>
 80209ec:	2800      	cmp	r0, #0
 80209ee:	9a05      	ldr	r2, [sp, #20]
 80209f0:	dcef      	bgt.n	80209d2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80209f2:	8925      	ldrh	r5, [r4, #8]
 80209f4:	e9d4 7300 	ldrd	r7, r3, [r4]
 80209f8:	fbb6 f4f5 	udiv	r4, r6, r5
 80209fc:	fbb3 f3f5 	udiv	r3, r3, r5
 8020a00:	fb05 6414 	mls	r4, r5, r4, r6
 8020a04:	b2a4      	uxth	r4, r4
 8020a06:	fb04 f303 	mul.w	r3, r4, r3
 8020a0a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8020a0e:	50fa      	str	r2, [r7, r3]
 8020a10:	2300      	movs	r3, #0
 8020a12:	f8cd 8000 	str.w	r8, [sp]
 8020a16:	f7f3 fba3 	bl	8014160 <ucdr_init_buffer_origin_offset>
 8020a1a:	2001      	movs	r0, #1
 8020a1c:	e7da      	b.n	80209d4 <uxr_prepare_reliable_buffer_to_write+0x210>
 8020a1e:	3201      	adds	r2, #1
 8020a20:	9306      	str	r3, [sp, #24]
 8020a22:	b293      	uxth	r3, r2
 8020a24:	4553      	cmp	r3, sl
 8020a26:	d8d4      	bhi.n	80209d2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020a28:	e739      	b.n	802089e <uxr_prepare_reliable_buffer_to_write+0xda>
 8020a2a:	4630      	mov	r0, r6
 8020a2c:	2101      	movs	r1, #1
 8020a2e:	9307      	str	r3, [sp, #28]
 8020a30:	f000 fa6a 	bl	8020f08 <uxr_seq_num_add>
 8020a34:	4606      	mov	r6, r0
 8020a36:	8920      	ldrh	r0, [r4, #8]
 8020a38:	6862      	ldr	r2, [r4, #4]
 8020a3a:	fbb6 f1f0 	udiv	r1, r6, r0
 8020a3e:	fbb2 f2f0 	udiv	r2, r2, r0
 8020a42:	fb00 6111 	mls	r1, r0, r1, r6
 8020a46:	b289      	uxth	r1, r1
 8020a48:	fb01 f202 	mul.w	r2, r1, r2
 8020a4c:	6821      	ldr	r1, [r4, #0]
 8020a4e:	3204      	adds	r2, #4
 8020a50:	188b      	adds	r3, r1, r2
 8020a52:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8020a56:	9303      	str	r3, [sp, #12]
 8020a58:	9b07      	ldr	r3, [sp, #28]
 8020a5a:	e70c      	b.n	8020876 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8020a5c:	8921      	ldrh	r1, [r4, #8]
 8020a5e:	6863      	ldr	r3, [r4, #4]
 8020a60:	9804      	ldr	r0, [sp, #16]
 8020a62:	fbb5 f2f1 	udiv	r2, r5, r1
 8020a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8020a6a:	fb01 5212 	mls	r2, r1, r2, r5
 8020a6e:	6821      	ldr	r1, [r4, #0]
 8020a70:	b292      	uxth	r2, r2
 8020a72:	fb02 f303 	mul.w	r3, r2, r3
 8020a76:	7b22      	ldrb	r2, [r4, #12]
 8020a78:	3304      	adds	r3, #4
 8020a7a:	445a      	add	r2, fp
 8020a7c:	4419      	add	r1, r3
 8020a7e:	f841 2c04 	str.w	r2, [r1, #-4]
 8020a82:	7b23      	ldrb	r3, [r4, #12]
 8020a84:	9300      	str	r3, [sp, #0]
 8020a86:	2300      	movs	r3, #0
 8020a88:	f7f3 fb6a 	bl	8014160 <ucdr_init_buffer_origin_offset>
 8020a8c:	2001      	movs	r0, #1
 8020a8e:	81e5      	strh	r5, [r4, #14]
 8020a90:	e7a0      	b.n	80209d4 <uxr_prepare_reliable_buffer_to_write+0x210>
 8020a92:	4682      	mov	sl, r0
 8020a94:	e6cb      	b.n	802082e <uxr_prepare_reliable_buffer_to_write+0x6a>
 8020a96:	f10d 0b20 	add.w	fp, sp, #32
 8020a9a:	e747      	b.n	802092c <uxr_prepare_reliable_buffer_to_write+0x168>
 8020a9c:	0802069d 	.word	0x0802069d

08020aa0 <uxr_prepare_next_reliable_buffer_to_send>:
 8020aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020aa2:	4604      	mov	r4, r0
 8020aa4:	461d      	mov	r5, r3
 8020aa6:	460f      	mov	r7, r1
 8020aa8:	8a00      	ldrh	r0, [r0, #16]
 8020aaa:	2101      	movs	r1, #1
 8020aac:	4616      	mov	r6, r2
 8020aae:	f000 fa2b 	bl	8020f08 <uxr_seq_num_add>
 8020ab2:	8028      	strh	r0, [r5, #0]
 8020ab4:	8922      	ldrh	r2, [r4, #8]
 8020ab6:	6863      	ldr	r3, [r4, #4]
 8020ab8:	fbb0 f1f2 	udiv	r1, r0, r2
 8020abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8020ac0:	fb02 0c11 	mls	ip, r2, r1, r0
 8020ac4:	89e1      	ldrh	r1, [r4, #14]
 8020ac6:	fa1f fc8c 	uxth.w	ip, ip
 8020aca:	fb0c fc03 	mul.w	ip, ip, r3
 8020ace:	6823      	ldr	r3, [r4, #0]
 8020ad0:	f10c 0c04 	add.w	ip, ip, #4
 8020ad4:	4463      	add	r3, ip
 8020ad6:	603b      	str	r3, [r7, #0]
 8020ad8:	6823      	ldr	r3, [r4, #0]
 8020ada:	449c      	add	ip, r3
 8020adc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8020ae0:	6033      	str	r3, [r6, #0]
 8020ae2:	f000 fa19 	bl	8020f18 <uxr_seq_num_cmp>
 8020ae6:	2800      	cmp	r0, #0
 8020ae8:	dd01      	ble.n	8020aee <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8020aea:	2000      	movs	r0, #0
 8020aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020aee:	7b23      	ldrb	r3, [r4, #12]
 8020af0:	6832      	ldr	r2, [r6, #0]
 8020af2:	429a      	cmp	r2, r3
 8020af4:	d9f9      	bls.n	8020aea <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020af6:	8a61      	ldrh	r1, [r4, #18]
 8020af8:	8a20      	ldrh	r0, [r4, #16]
 8020afa:	f000 fa09 	bl	8020f10 <uxr_seq_num_sub>
 8020afe:	8923      	ldrh	r3, [r4, #8]
 8020b00:	4283      	cmp	r3, r0
 8020b02:	d0f2      	beq.n	8020aea <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020b04:	8828      	ldrh	r0, [r5, #0]
 8020b06:	89e3      	ldrh	r3, [r4, #14]
 8020b08:	8220      	strh	r0, [r4, #16]
 8020b0a:	4298      	cmp	r0, r3
 8020b0c:	d001      	beq.n	8020b12 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8020b0e:	2001      	movs	r0, #1
 8020b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b12:	2101      	movs	r1, #1
 8020b14:	f000 f9f8 	bl	8020f08 <uxr_seq_num_add>
 8020b18:	4603      	mov	r3, r0
 8020b1a:	2001      	movs	r0, #1
 8020b1c:	81e3      	strh	r3, [r4, #14]
 8020b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020b20 <uxr_update_output_stream_heartbeat_timestamp>:
 8020b20:	b570      	push	{r4, r5, r6, lr}
 8020b22:	8a01      	ldrh	r1, [r0, #16]
 8020b24:	4604      	mov	r4, r0
 8020b26:	8a40      	ldrh	r0, [r0, #18]
 8020b28:	4615      	mov	r5, r2
 8020b2a:	461e      	mov	r6, r3
 8020b2c:	f000 f9f4 	bl	8020f18 <uxr_seq_num_cmp>
 8020b30:	2800      	cmp	r0, #0
 8020b32:	db07      	blt.n	8020b44 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8020b34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020b38:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8020b3c:	2000      	movs	r0, #0
 8020b3e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8020b42:	bd70      	pop	{r4, r5, r6, pc}
 8020b44:	f894 0020 	ldrb.w	r0, [r4, #32]
 8020b48:	b940      	cbnz	r0, 8020b5c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8020b4a:	2301      	movs	r3, #1
 8020b4c:	f884 3020 	strb.w	r3, [r4, #32]
 8020b50:	3564      	adds	r5, #100	@ 0x64
 8020b52:	f146 0600 	adc.w	r6, r6, #0
 8020b56:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8020b5a:	bd70      	pop	{r4, r5, r6, pc}
 8020b5c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8020b60:	4295      	cmp	r5, r2
 8020b62:	eb76 0303 	sbcs.w	r3, r6, r3
 8020b66:	db04      	blt.n	8020b72 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8020b68:	1c43      	adds	r3, r0, #1
 8020b6a:	2001      	movs	r0, #1
 8020b6c:	f884 3020 	strb.w	r3, [r4, #32]
 8020b70:	e7ee      	b.n	8020b50 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020b72:	2000      	movs	r0, #0
 8020b74:	e7ec      	b.n	8020b50 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020b76:	bf00      	nop

08020b78 <uxr_begin_output_nack_buffer_it>:
 8020b78:	8a40      	ldrh	r0, [r0, #18]
 8020b7a:	4770      	bx	lr

08020b7c <uxr_next_reliable_nack_buffer_to_send>:
 8020b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b80:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8020b84:	b197      	cbz	r7, 8020bac <uxr_next_reliable_nack_buffer_to_send+0x30>
 8020b86:	4680      	mov	r8, r0
 8020b88:	460d      	mov	r5, r1
 8020b8a:	4616      	mov	r6, r2
 8020b8c:	461c      	mov	r4, r3
 8020b8e:	8818      	ldrh	r0, [r3, #0]
 8020b90:	2101      	movs	r1, #1
 8020b92:	f000 f9b9 	bl	8020f08 <uxr_seq_num_add>
 8020b96:	8020      	strh	r0, [r4, #0]
 8020b98:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8020b9c:	f000 f9bc 	bl	8020f18 <uxr_seq_num_cmp>
 8020ba0:	2800      	cmp	r0, #0
 8020ba2:	dd06      	ble.n	8020bb2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8020ba4:	2300      	movs	r3, #0
 8020ba6:	461f      	mov	r7, r3
 8020ba8:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8020bac:	4638      	mov	r0, r7
 8020bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020bb2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8020bb6:	8820      	ldrh	r0, [r4, #0]
 8020bb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020bbc:	fbb0 f3f2 	udiv	r3, r0, r2
 8020bc0:	fbb1 fcf2 	udiv	ip, r1, r2
 8020bc4:	fb02 0313 	mls	r3, r2, r3, r0
 8020bc8:	b29b      	uxth	r3, r3
 8020bca:	fb03 fc0c 	mul.w	ip, r3, ip
 8020bce:	f8d8 3000 	ldr.w	r3, [r8]
 8020bd2:	f10c 0c04 	add.w	ip, ip, #4
 8020bd6:	4463      	add	r3, ip
 8020bd8:	602b      	str	r3, [r5, #0]
 8020bda:	f8d8 3000 	ldr.w	r3, [r8]
 8020bde:	4463      	add	r3, ip
 8020be0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020be4:	6033      	str	r3, [r6, #0]
 8020be6:	f898 200c 	ldrb.w	r2, [r8, #12]
 8020bea:	429a      	cmp	r2, r3
 8020bec:	d0d0      	beq.n	8020b90 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8020bee:	e7dd      	b.n	8020bac <uxr_next_reliable_nack_buffer_to_send+0x30>

08020bf0 <uxr_process_acknack>:
 8020bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bf2:	4604      	mov	r4, r0
 8020bf4:	460e      	mov	r6, r1
 8020bf6:	4610      	mov	r0, r2
 8020bf8:	2101      	movs	r1, #1
 8020bfa:	f000 f989 	bl	8020f10 <uxr_seq_num_sub>
 8020bfe:	8a61      	ldrh	r1, [r4, #18]
 8020c00:	f000 f986 	bl	8020f10 <uxr_seq_num_sub>
 8020c04:	b1c8      	cbz	r0, 8020c3a <uxr_process_acknack+0x4a>
 8020c06:	4605      	mov	r5, r0
 8020c08:	2700      	movs	r7, #0
 8020c0a:	2101      	movs	r1, #1
 8020c0c:	8a60      	ldrh	r0, [r4, #18]
 8020c0e:	f000 f97b 	bl	8020f08 <uxr_seq_num_add>
 8020c12:	8923      	ldrh	r3, [r4, #8]
 8020c14:	6862      	ldr	r2, [r4, #4]
 8020c16:	3701      	adds	r7, #1
 8020c18:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8020c1c:	6821      	ldr	r1, [r4, #0]
 8020c1e:	42bd      	cmp	r5, r7
 8020c20:	8260      	strh	r0, [r4, #18]
 8020c22:	fbb0 fef3 	udiv	lr, r0, r3
 8020c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8020c2a:	fb03 031e 	mls	r3, r3, lr, r0
 8020c2e:	b29b      	uxth	r3, r3
 8020c30:	fb02 f303 	mul.w	r3, r2, r3
 8020c34:	f841 c003 	str.w	ip, [r1, r3]
 8020c38:	d1e7      	bne.n	8020c0a <uxr_process_acknack+0x1a>
 8020c3a:	3e00      	subs	r6, #0
 8020c3c:	f04f 0300 	mov.w	r3, #0
 8020c40:	bf18      	it	ne
 8020c42:	2601      	movne	r6, #1
 8020c44:	f884 3020 	strb.w	r3, [r4, #32]
 8020c48:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8020c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c4e:	bf00      	nop

08020c50 <uxr_is_output_up_to_date>:
 8020c50:	8a01      	ldrh	r1, [r0, #16]
 8020c52:	8a40      	ldrh	r0, [r0, #18]
 8020c54:	b508      	push	{r3, lr}
 8020c56:	f000 f95f 	bl	8020f18 <uxr_seq_num_cmp>
 8020c5a:	fab0 f080 	clz	r0, r0
 8020c5e:	0940      	lsrs	r0, r0, #5
 8020c60:	bd08      	pop	{r3, pc}
 8020c62:	bf00      	nop

08020c64 <get_available_free_slots>:
 8020c64:	8901      	ldrh	r1, [r0, #8]
 8020c66:	b1e1      	cbz	r1, 8020ca2 <get_available_free_slots+0x3e>
 8020c68:	6843      	ldr	r3, [r0, #4]
 8020c6a:	f04f 0c00 	mov.w	ip, #0
 8020c6e:	b530      	push	{r4, r5, lr}
 8020c70:	fbb3 fef1 	udiv	lr, r3, r1
 8020c74:	6805      	ldr	r5, [r0, #0]
 8020c76:	4662      	mov	r2, ip
 8020c78:	7b04      	ldrb	r4, [r0, #12]
 8020c7a:	4660      	mov	r0, ip
 8020c7c:	f10c 0c01 	add.w	ip, ip, #1
 8020c80:	fbb2 f3f1 	udiv	r3, r2, r1
 8020c84:	fb01 2313 	mls	r3, r1, r3, r2
 8020c88:	fa1f f28c 	uxth.w	r2, ip
 8020c8c:	b29b      	uxth	r3, r3
 8020c8e:	fb0e f303 	mul.w	r3, lr, r3
 8020c92:	58eb      	ldr	r3, [r5, r3]
 8020c94:	429c      	cmp	r4, r3
 8020c96:	d101      	bne.n	8020c9c <get_available_free_slots+0x38>
 8020c98:	3001      	adds	r0, #1
 8020c9a:	b280      	uxth	r0, r0
 8020c9c:	428a      	cmp	r2, r1
 8020c9e:	d3ed      	bcc.n	8020c7c <get_available_free_slots+0x18>
 8020ca0:	bd30      	pop	{r4, r5, pc}
 8020ca2:	4608      	mov	r0, r1
 8020ca4:	4770      	bx	lr
 8020ca6:	bf00      	nop

08020ca8 <uxr_buffer_request_data>:
 8020ca8:	b530      	push	{r4, r5, lr}
 8020caa:	b095      	sub	sp, #84	@ 0x54
 8020cac:	4604      	mov	r4, r0
 8020cae:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8020cb0:	9303      	str	r3, [sp, #12]
 8020cb2:	2d00      	cmp	r5, #0
 8020cb4:	f88d 301c 	strb.w	r3, [sp, #28]
 8020cb8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8020cbc:	f04f 0200 	mov.w	r2, #0
 8020cc0:	bf14      	ite	ne
 8020cc2:	2101      	movne	r1, #1
 8020cc4:	4611      	moveq	r1, r2
 8020cc6:	f88d 201d 	strb.w	r2, [sp, #29]
 8020cca:	f88d 201e 	strb.w	r2, [sp, #30]
 8020cce:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8020cd2:	d021      	beq.n	8020d18 <uxr_buffer_request_data+0x70>
 8020cd4:	686b      	ldr	r3, [r5, #4]
 8020cd6:	2210      	movs	r2, #16
 8020cd8:	6829      	ldr	r1, [r5, #0]
 8020cda:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020cde:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8020ce2:	2308      	movs	r3, #8
 8020ce4:	2100      	movs	r1, #0
 8020ce6:	4620      	mov	r0, r4
 8020ce8:	e9cd 3100 	strd	r3, r1, [sp]
 8020cec:	ab0c      	add	r3, sp, #48	@ 0x30
 8020cee:	9905      	ldr	r1, [sp, #20]
 8020cf0:	f7f7 fc92 	bl	8018618 <uxr_prepare_stream_to_write_submessage>
 8020cf4:	b918      	cbnz	r0, 8020cfe <uxr_buffer_request_data+0x56>
 8020cf6:	4604      	mov	r4, r0
 8020cf8:	4620      	mov	r0, r4
 8020cfa:	b015      	add	sp, #84	@ 0x54
 8020cfc:	bd30      	pop	{r4, r5, pc}
 8020cfe:	9904      	ldr	r1, [sp, #16]
 8020d00:	aa06      	add	r2, sp, #24
 8020d02:	4620      	mov	r0, r4
 8020d04:	f7f7 fdc4 	bl	8018890 <uxr_init_base_object_request>
 8020d08:	4604      	mov	r4, r0
 8020d0a:	a906      	add	r1, sp, #24
 8020d0c:	a80c      	add	r0, sp, #48	@ 0x30
 8020d0e:	f7f9 fd89 	bl	801a824 <uxr_serialize_READ_DATA_Payload>
 8020d12:	4620      	mov	r0, r4
 8020d14:	b015      	add	sp, #84	@ 0x54
 8020d16:	bd30      	pop	{r4, r5, pc}
 8020d18:	2208      	movs	r2, #8
 8020d1a:	e7e2      	b.n	8020ce2 <uxr_buffer_request_data+0x3a>

08020d1c <uxr_buffer_cancel_data>:
 8020d1c:	b510      	push	{r4, lr}
 8020d1e:	2300      	movs	r3, #0
 8020d20:	b094      	sub	sp, #80	@ 0x50
 8020d22:	4604      	mov	r4, r0
 8020d24:	9205      	str	r2, [sp, #20]
 8020d26:	9301      	str	r3, [sp, #4]
 8020d28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020d2c:	f88d 301e 	strb.w	r3, [sp, #30]
 8020d30:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8020d34:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020d38:	2308      	movs	r3, #8
 8020d3a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8020d3e:	2201      	movs	r2, #1
 8020d40:	9300      	str	r3, [sp, #0]
 8020d42:	ab0c      	add	r3, sp, #48	@ 0x30
 8020d44:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8020d48:	2210      	movs	r2, #16
 8020d4a:	f7f7 fc65 	bl	8018618 <uxr_prepare_stream_to_write_submessage>
 8020d4e:	b918      	cbnz	r0, 8020d58 <uxr_buffer_cancel_data+0x3c>
 8020d50:	4604      	mov	r4, r0
 8020d52:	4620      	mov	r0, r4
 8020d54:	b014      	add	sp, #80	@ 0x50
 8020d56:	bd10      	pop	{r4, pc}
 8020d58:	9905      	ldr	r1, [sp, #20]
 8020d5a:	aa06      	add	r2, sp, #24
 8020d5c:	4620      	mov	r0, r4
 8020d5e:	f7f7 fd97 	bl	8018890 <uxr_init_base_object_request>
 8020d62:	4604      	mov	r4, r0
 8020d64:	a906      	add	r1, sp, #24
 8020d66:	a80c      	add	r0, sp, #48	@ 0x30
 8020d68:	f7f9 fd5c 	bl	801a824 <uxr_serialize_READ_DATA_Payload>
 8020d6c:	4620      	mov	r0, r4
 8020d6e:	b014      	add	sp, #80	@ 0x50
 8020d70:	bd10      	pop	{r4, pc}
 8020d72:	bf00      	nop

08020d74 <read_submessage_format>:
 8020d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020d78:	b095      	sub	sp, #84	@ 0x54
 8020d7a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8020d7e:	b113      	cbz	r3, 8020d86 <read_submessage_format+0x12>
 8020d80:	b015      	add	sp, #84	@ 0x54
 8020d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d86:	4606      	mov	r6, r0
 8020d88:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8020d8a:	460c      	mov	r4, r1
 8020d8c:	4615      	mov	r5, r2
 8020d8e:	9004      	str	r0, [sp, #16]
 8020d90:	4699      	mov	r9, r3
 8020d92:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8020d94:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8020d98:	9005      	str	r0, [sp, #20]
 8020d9a:	a80c      	add	r0, sp, #48	@ 0x30
 8020d9c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8020da0:	1a52      	subs	r2, r2, r1
 8020da2:	f7f3 f9ef 	bl	8014184 <ucdr_init_buffer>
 8020da6:	a80c      	add	r0, sp, #48	@ 0x30
 8020da8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020dac:	f7f3 f9be 	bl	801412c <ucdr_set_on_full_buffer_callback>
 8020db0:	69e2      	ldr	r2, [r4, #28]
 8020db2:	b19a      	cbz	r2, 8020ddc <read_submessage_format+0x68>
 8020db4:	f1b8 0f07 	cmp.w	r8, #7
 8020db8:	f882 9014 	strb.w	r9, [r2, #20]
 8020dbc:	d040      	beq.n	8020e40 <read_submessage_format+0xcc>
 8020dbe:	f1b8 0f08 	cmp.w	r8, #8
 8020dc2:	d02e      	beq.n	8020e22 <read_submessage_format+0xae>
 8020dc4:	f1b8 0f06 	cmp.w	r8, #6
 8020dc8:	d011      	beq.n	8020dee <read_submessage_format+0x7a>
 8020dca:	2301      	movs	r3, #1
 8020dcc:	7513      	strb	r3, [r2, #20]
 8020dce:	4629      	mov	r1, r5
 8020dd0:	4620      	mov	r0, r4
 8020dd2:	f7f3 fa2b 	bl	801422c <ucdr_advance_buffer>
 8020dd6:	b015      	add	sp, #84	@ 0x54
 8020dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ddc:	f1b8 0f07 	cmp.w	r8, #7
 8020de0:	d02e      	beq.n	8020e40 <read_submessage_format+0xcc>
 8020de2:	f1b8 0f08 	cmp.w	r8, #8
 8020de6:	d01c      	beq.n	8020e22 <read_submessage_format+0xae>
 8020de8:	f1b8 0f06 	cmp.w	r8, #6
 8020dec:	d1ef      	bne.n	8020dce <read_submessage_format+0x5a>
 8020dee:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8020df2:	f1b8 0f00 	cmp.w	r8, #0
 8020df6:	d011      	beq.n	8020e1c <read_submessage_format+0xa8>
 8020df8:	ab0c      	add	r3, sp, #48	@ 0x30
 8020dfa:	9501      	str	r5, [sp, #4]
 8020dfc:	463a      	mov	r2, r7
 8020dfe:	4630      	mov	r0, r6
 8020e00:	9300      	str	r3, [sp, #0]
 8020e02:	2306      	movs	r3, #6
 8020e04:	f88d 3016 	strb.w	r3, [sp, #22]
 8020e08:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8020e0c:	9302      	str	r3, [sp, #8]
 8020e0e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8020e12:	47c0      	blx	r8
 8020e14:	2301      	movs	r3, #1
 8020e16:	69e2      	ldr	r2, [r4, #28]
 8020e18:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020e1c:	2a00      	cmp	r2, #0
 8020e1e:	d1d4      	bne.n	8020dca <read_submessage_format+0x56>
 8020e20:	e7d5      	b.n	8020dce <read_submessage_format+0x5a>
 8020e22:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d0f8      	beq.n	8020e1c <read_submessage_format+0xa8>
 8020e2a:	a80c      	add	r0, sp, #48	@ 0x30
 8020e2c:	a906      	add	r1, sp, #24
 8020e2e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020e32:	f7f9 fdd1 	bl	801a9d8 <uxr_deserialize_SampleIdentity>
 8020e36:	b9a0      	cbnz	r0, 8020e62 <read_submessage_format+0xee>
 8020e38:	69e2      	ldr	r2, [r4, #28]
 8020e3a:	2a00      	cmp	r2, #0
 8020e3c:	d1c5      	bne.n	8020dca <read_submessage_format+0x56>
 8020e3e:	e7c6      	b.n	8020dce <read_submessage_format+0x5a>
 8020e40:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8020e44:	b13b      	cbz	r3, 8020e56 <read_submessage_format+0xe2>
 8020e46:	a906      	add	r1, sp, #24
 8020e48:	a80c      	add	r0, sp, #48	@ 0x30
 8020e4a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020e4e:	f7f9 fa73 	bl	801a338 <uxr_deserialize_BaseObjectRequest>
 8020e52:	bb60      	cbnz	r0, 8020eae <read_submessage_format+0x13a>
 8020e54:	69e2      	ldr	r2, [r4, #28]
 8020e56:	68a3      	ldr	r3, [r4, #8]
 8020e58:	442b      	add	r3, r5
 8020e5a:	60a3      	str	r3, [r4, #8]
 8020e5c:	2a00      	cmp	r2, #0
 8020e5e:	d1b4      	bne.n	8020dca <read_submessage_format+0x56>
 8020e60:	e7b5      	b.n	8020dce <read_submessage_format+0x5a>
 8020e62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e64:	a80c      	add	r0, sp, #48	@ 0x30
 8020e66:	eba8 0803 	sub.w	r8, r8, r3
 8020e6a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020e6e:	44a8      	add	r8, r5
 8020e70:	1a52      	subs	r2, r2, r1
 8020e72:	f7f3 f987 	bl	8014184 <ucdr_init_buffer>
 8020e76:	a80c      	add	r0, sp, #48	@ 0x30
 8020e78:	fa1f f888 	uxth.w	r8, r8
 8020e7c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020e80:	f7f3 f954 	bl	801412c <ucdr_set_on_full_buffer_callback>
 8020e84:	ab0c      	add	r3, sp, #48	@ 0x30
 8020e86:	2108      	movs	r1, #8
 8020e88:	f8cd 8004 	str.w	r8, [sp, #4]
 8020e8c:	9300      	str	r3, [sp, #0]
 8020e8e:	463a      	mov	r2, r7
 8020e90:	f88d 1016 	strb.w	r1, [sp, #22]
 8020e94:	ab06      	add	r3, sp, #24
 8020e96:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8020e9a:	4630      	mov	r0, r6
 8020e9c:	9102      	str	r1, [sp, #8]
 8020e9e:	9905      	ldr	r1, [sp, #20]
 8020ea0:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8020ea4:	47b8      	blx	r7
 8020ea6:	2301      	movs	r3, #1
 8020ea8:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020eac:	e7c4      	b.n	8020e38 <read_submessage_format+0xc4>
 8020eae:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020eb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020eb4:	a80c      	add	r0, sp, #48	@ 0x30
 8020eb6:	1a52      	subs	r2, r2, r1
 8020eb8:	eba8 0803 	sub.w	r8, r8, r3
 8020ebc:	f7f3 f962 	bl	8014184 <ucdr_init_buffer>
 8020ec0:	a80c      	add	r0, sp, #48	@ 0x30
 8020ec2:	44a8      	add	r8, r5
 8020ec4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020ec8:	f7f3 f930 	bl	801412c <ucdr_set_on_full_buffer_callback>
 8020ecc:	ab0c      	add	r3, sp, #48	@ 0x30
 8020ece:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8020ed2:	fa1f f888 	uxth.w	r8, r8
 8020ed6:	9300      	str	r3, [sp, #0]
 8020ed8:	463a      	mov	r2, r7
 8020eda:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8020ede:	4630      	mov	r0, r6
 8020ee0:	f8cd 8004 	str.w	r8, [sp, #4]
 8020ee4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8020ee8:	2107      	movs	r1, #7
 8020eea:	f88d 1016 	strb.w	r1, [sp, #22]
 8020eee:	b29b      	uxth	r3, r3
 8020ef0:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8020ef4:	9102      	str	r1, [sp, #8]
 8020ef6:	9905      	ldr	r1, [sp, #20]
 8020ef8:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8020efc:	47b8      	blx	r7
 8020efe:	2301      	movs	r3, #1
 8020f00:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020f04:	e7a6      	b.n	8020e54 <read_submessage_format+0xe0>
 8020f06:	bf00      	nop

08020f08 <uxr_seq_num_add>:
 8020f08:	4408      	add	r0, r1
 8020f0a:	b280      	uxth	r0, r0
 8020f0c:	4770      	bx	lr
 8020f0e:	bf00      	nop

08020f10 <uxr_seq_num_sub>:
 8020f10:	1a40      	subs	r0, r0, r1
 8020f12:	b280      	uxth	r0, r0
 8020f14:	4770      	bx	lr
 8020f16:	bf00      	nop

08020f18 <uxr_seq_num_cmp>:
 8020f18:	4288      	cmp	r0, r1
 8020f1a:	d011      	beq.n	8020f40 <uxr_seq_num_cmp+0x28>
 8020f1c:	d309      	bcc.n	8020f32 <uxr_seq_num_cmp+0x1a>
 8020f1e:	4288      	cmp	r0, r1
 8020f20:	d910      	bls.n	8020f44 <uxr_seq_num_cmp+0x2c>
 8020f22:	1a40      	subs	r0, r0, r1
 8020f24:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8020f28:	bfd4      	ite	le
 8020f2a:	2001      	movle	r0, #1
 8020f2c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8020f30:	4770      	bx	lr
 8020f32:	1a0b      	subs	r3, r1, r0
 8020f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020f38:	daf1      	bge.n	8020f1e <uxr_seq_num_cmp+0x6>
 8020f3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020f3e:	4770      	bx	lr
 8020f40:	2000      	movs	r0, #0
 8020f42:	4770      	bx	lr
 8020f44:	2001      	movs	r0, #1
 8020f46:	4770      	bx	lr

08020f48 <rcl_get_default_domain_id>:
 8020f48:	b530      	push	{r4, r5, lr}
 8020f4a:	2300      	movs	r3, #0
 8020f4c:	b083      	sub	sp, #12
 8020f4e:	9300      	str	r3, [sp, #0]
 8020f50:	b1d0      	cbz	r0, 8020f88 <rcl_get_default_domain_id+0x40>
 8020f52:	4604      	mov	r4, r0
 8020f54:	4669      	mov	r1, sp
 8020f56:	4815      	ldr	r0, [pc, #84]	@ (8020fac <rcl_get_default_domain_id+0x64>)
 8020f58:	f7fc feda 	bl	801dd10 <rcutils_get_env>
 8020f5c:	4602      	mov	r2, r0
 8020f5e:	b110      	cbz	r0, 8020f66 <rcl_get_default_domain_id+0x1e>
 8020f60:	2001      	movs	r0, #1
 8020f62:	b003      	add	sp, #12
 8020f64:	bd30      	pop	{r4, r5, pc}
 8020f66:	9b00      	ldr	r3, [sp, #0]
 8020f68:	b18b      	cbz	r3, 8020f8e <rcl_get_default_domain_id+0x46>
 8020f6a:	7818      	ldrb	r0, [r3, #0]
 8020f6c:	2800      	cmp	r0, #0
 8020f6e:	d0f8      	beq.n	8020f62 <rcl_get_default_domain_id+0x1a>
 8020f70:	a901      	add	r1, sp, #4
 8020f72:	4618      	mov	r0, r3
 8020f74:	9201      	str	r2, [sp, #4]
 8020f76:	f000 ff4b 	bl	8021e10 <strtoul>
 8020f7a:	4605      	mov	r5, r0
 8020f7c:	b150      	cbz	r0, 8020f94 <rcl_get_default_domain_id+0x4c>
 8020f7e:	1c43      	adds	r3, r0, #1
 8020f80:	d00d      	beq.n	8020f9e <rcl_get_default_domain_id+0x56>
 8020f82:	2000      	movs	r0, #0
 8020f84:	6025      	str	r5, [r4, #0]
 8020f86:	e7ec      	b.n	8020f62 <rcl_get_default_domain_id+0x1a>
 8020f88:	200b      	movs	r0, #11
 8020f8a:	b003      	add	sp, #12
 8020f8c:	bd30      	pop	{r4, r5, pc}
 8020f8e:	4618      	mov	r0, r3
 8020f90:	b003      	add	sp, #12
 8020f92:	bd30      	pop	{r4, r5, pc}
 8020f94:	9b01      	ldr	r3, [sp, #4]
 8020f96:	781b      	ldrb	r3, [r3, #0]
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	d0f2      	beq.n	8020f82 <rcl_get_default_domain_id+0x3a>
 8020f9c:	e7e0      	b.n	8020f60 <rcl_get_default_domain_id+0x18>
 8020f9e:	f001 fab5 	bl	802250c <__errno>
 8020fa2:	6803      	ldr	r3, [r0, #0]
 8020fa4:	2b22      	cmp	r3, #34	@ 0x22
 8020fa6:	d1ec      	bne.n	8020f82 <rcl_get_default_domain_id+0x3a>
 8020fa8:	e7da      	b.n	8020f60 <rcl_get_default_domain_id+0x18>
 8020faa:	bf00      	nop
 8020fac:	080258cc 	.word	0x080258cc

08020fb0 <rcl_expand_topic_name>:
 8020fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fb4:	b08d      	sub	sp, #52	@ 0x34
 8020fb6:	4698      	mov	r8, r3
 8020fb8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020fba:	9207      	str	r2, [sp, #28]
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	bf18      	it	ne
 8020fc0:	f1b8 0f00 	cmpne.w	r8, #0
 8020fc4:	bf0c      	ite	eq
 8020fc6:	2301      	moveq	r3, #1
 8020fc8:	2300      	movne	r3, #0
 8020fca:	2a00      	cmp	r2, #0
 8020fcc:	bf08      	it	eq
 8020fce:	f043 0301 	orreq.w	r3, r3, #1
 8020fd2:	2900      	cmp	r1, #0
 8020fd4:	bf08      	it	eq
 8020fd6:	f043 0301 	orreq.w	r3, r3, #1
 8020fda:	2b00      	cmp	r3, #0
 8020fdc:	d13d      	bne.n	802105a <rcl_expand_topic_name+0xaa>
 8020fde:	fab0 f280 	clz	r2, r0
 8020fe2:	4604      	mov	r4, r0
 8020fe4:	0952      	lsrs	r2, r2, #5
 8020fe6:	2800      	cmp	r0, #0
 8020fe8:	d037      	beq.n	802105a <rcl_expand_topic_name+0xaa>
 8020fea:	460f      	mov	r7, r1
 8020fec:	a90b      	add	r1, sp, #44	@ 0x2c
 8020fee:	f000 fa51 	bl	8021494 <rcl_validate_topic_name>
 8020ff2:	4605      	mov	r5, r0
 8020ff4:	bb68      	cbnz	r0, 8021052 <rcl_expand_topic_name+0xa2>
 8020ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ff8:	2b00      	cmp	r3, #0
 8020ffa:	d137      	bne.n	802106c <rcl_expand_topic_name+0xbc>
 8020ffc:	4602      	mov	r2, r0
 8020ffe:	a90b      	add	r1, sp, #44	@ 0x2c
 8021000:	4638      	mov	r0, r7
 8021002:	f7fd fb1b 	bl	801e63c <rmw_validate_node_name>
 8021006:	bb68      	cbnz	r0, 8021064 <rcl_expand_topic_name+0xb4>
 8021008:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802100a:	2b00      	cmp	r3, #0
 802100c:	d133      	bne.n	8021076 <rcl_expand_topic_name+0xc6>
 802100e:	462a      	mov	r2, r5
 8021010:	a90b      	add	r1, sp, #44	@ 0x2c
 8021012:	9807      	ldr	r0, [sp, #28]
 8021014:	f7fd faf4 	bl	801e600 <rmw_validate_namespace>
 8021018:	bb20      	cbnz	r0, 8021064 <rcl_expand_topic_name+0xb4>
 802101a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802101c:	2d00      	cmp	r5, #0
 802101e:	f040 80a2 	bne.w	8021166 <rcl_expand_topic_name+0x1b6>
 8021022:	217b      	movs	r1, #123	@ 0x7b
 8021024:	4620      	mov	r0, r4
 8021026:	f001 f98f 	bl	8022348 <strchr>
 802102a:	7823      	ldrb	r3, [r4, #0]
 802102c:	4681      	mov	r9, r0
 802102e:	bb20      	cbnz	r0, 802107a <rcl_expand_topic_name+0xca>
 8021030:	2b2f      	cmp	r3, #47	@ 0x2f
 8021032:	d122      	bne.n	802107a <rcl_expand_topic_name+0xca>
 8021034:	ab19      	add	r3, sp, #100	@ 0x64
 8021036:	e893 0003 	ldmia.w	r3, {r0, r1}
 802103a:	ab16      	add	r3, sp, #88	@ 0x58
 802103c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8021040:	4620      	mov	r0, r4
 8021042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021044:	f7fc ffc6 	bl	801dfd4 <rcutils_strdup>
 8021048:	2800      	cmp	r0, #0
 802104a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802104c:	bf08      	it	eq
 802104e:	250a      	moveq	r5, #10
 8021050:	6018      	str	r0, [r3, #0]
 8021052:	4628      	mov	r0, r5
 8021054:	b00d      	add	sp, #52	@ 0x34
 8021056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802105a:	250b      	movs	r5, #11
 802105c:	4628      	mov	r0, r5
 802105e:	b00d      	add	sp, #52	@ 0x34
 8021060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021064:	f7f9 fd72 	bl	801ab4c <rcl_convert_rmw_ret_to_rcl_ret>
 8021068:	4605      	mov	r5, r0
 802106a:	e7f2      	b.n	8021052 <rcl_expand_topic_name+0xa2>
 802106c:	2567      	movs	r5, #103	@ 0x67
 802106e:	4628      	mov	r0, r5
 8021070:	b00d      	add	sp, #52	@ 0x34
 8021072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021076:	25c9      	movs	r5, #201	@ 0xc9
 8021078:	e7eb      	b.n	8021052 <rcl_expand_topic_name+0xa2>
 802107a:	2b7e      	cmp	r3, #126	@ 0x7e
 802107c:	d075      	beq.n	802116a <rcl_expand_topic_name+0x1ba>
 802107e:	f1b9 0f00 	cmp.w	r9, #0
 8021082:	f000 80c2 	beq.w	802120a <rcl_expand_topic_name+0x25a>
 8021086:	2300      	movs	r3, #0
 8021088:	46a2      	mov	sl, r4
 802108a:	461e      	mov	r6, r3
 802108c:	9508      	str	r5, [sp, #32]
 802108e:	4655      	mov	r5, sl
 8021090:	9409      	str	r4, [sp, #36]	@ 0x24
 8021092:	46b2      	mov	sl, r6
 8021094:	464c      	mov	r4, r9
 8021096:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802109a:	2c00      	cmp	r4, #0
 802109c:	f000 80ae 	beq.w	80211fc <rcl_expand_topic_name+0x24c>
 80210a0:	217d      	movs	r1, #125	@ 0x7d
 80210a2:	4628      	mov	r0, r5
 80210a4:	f001 f950 	bl	8022348 <strchr>
 80210a8:	eba0 0904 	sub.w	r9, r0, r4
 80210ac:	4621      	mov	r1, r4
 80210ae:	4869      	ldr	r0, [pc, #420]	@ (8021254 <rcl_expand_topic_name+0x2a4>)
 80210b0:	f109 0601 	add.w	r6, r9, #1
 80210b4:	4632      	mov	r2, r6
 80210b6:	f001 f954 	bl	8022362 <strncmp>
 80210ba:	2800      	cmp	r0, #0
 80210bc:	d051      	beq.n	8021162 <rcl_expand_topic_name+0x1b2>
 80210be:	4632      	mov	r2, r6
 80210c0:	4621      	mov	r1, r4
 80210c2:	4865      	ldr	r0, [pc, #404]	@ (8021258 <rcl_expand_topic_name+0x2a8>)
 80210c4:	f001 f94d 	bl	8022362 <strncmp>
 80210c8:	b128      	cbz	r0, 80210d6 <rcl_expand_topic_name+0x126>
 80210ca:	4632      	mov	r2, r6
 80210cc:	4621      	mov	r1, r4
 80210ce:	4863      	ldr	r0, [pc, #396]	@ (802125c <rcl_expand_topic_name+0x2ac>)
 80210d0:	f001 f947 	bl	8022362 <strncmp>
 80210d4:	bb38      	cbnz	r0, 8021126 <rcl_expand_topic_name+0x176>
 80210d6:	46d9      	mov	r9, fp
 80210d8:	ab18      	add	r3, sp, #96	@ 0x60
 80210da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80210de:	ab16      	add	r3, sp, #88	@ 0x58
 80210e0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80210e4:	4620      	mov	r0, r4
 80210e6:	4631      	mov	r1, r6
 80210e8:	cb0c      	ldmia	r3, {r2, r3}
 80210ea:	f7fc ff95 	bl	801e018 <rcutils_strndup>
 80210ee:	4604      	mov	r4, r0
 80210f0:	2800      	cmp	r0, #0
 80210f2:	f000 80a3 	beq.w	802123c <rcl_expand_topic_name+0x28c>
 80210f6:	464a      	mov	r2, r9
 80210f8:	4628      	mov	r0, r5
 80210fa:	ab16      	add	r3, sp, #88	@ 0x58
 80210fc:	4621      	mov	r1, r4
 80210fe:	f7fc fe69 	bl	801ddd4 <rcutils_repl_str>
 8021102:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8021104:	4605      	mov	r5, r0
 8021106:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021108:	4620      	mov	r0, r4
 802110a:	4798      	blx	r3
 802110c:	4650      	mov	r0, sl
 802110e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021110:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8021112:	4798      	blx	r3
 8021114:	2d00      	cmp	r5, #0
 8021116:	d06c      	beq.n	80211f2 <rcl_expand_topic_name+0x242>
 8021118:	217b      	movs	r1, #123	@ 0x7b
 802111a:	4628      	mov	r0, r5
 802111c:	f001 f914 	bl	8022348 <strchr>
 8021120:	46aa      	mov	sl, r5
 8021122:	4604      	mov	r4, r0
 8021124:	e7b9      	b.n	802109a <rcl_expand_topic_name+0xea>
 8021126:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 802112a:	1c61      	adds	r1, r4, #1
 802112c:	4640      	mov	r0, r8
 802112e:	f7fd f88b 	bl	801e248 <rcutils_string_map_getn>
 8021132:	4681      	mov	r9, r0
 8021134:	2800      	cmp	r0, #0
 8021136:	d1cf      	bne.n	80210d8 <rcl_expand_topic_name+0x128>
 8021138:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802113a:	aa18      	add	r2, sp, #96	@ 0x60
 802113c:	2569      	movs	r5, #105	@ 0x69
 802113e:	6018      	str	r0, [r3, #0]
 8021140:	ab16      	add	r3, sp, #88	@ 0x58
 8021142:	ca07      	ldmia	r2, {r0, r1, r2}
 8021144:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8021148:	4631      	mov	r1, r6
 802114a:	4620      	mov	r0, r4
 802114c:	cb0c      	ldmia	r3, {r2, r3}
 802114e:	f7fc ff63 	bl	801e018 <rcutils_strndup>
 8021152:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8021154:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021156:	4798      	blx	r3
 8021158:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802115a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802115c:	4650      	mov	r0, sl
 802115e:	4798      	blx	r3
 8021160:	e777      	b.n	8021052 <rcl_expand_topic_name+0xa2>
 8021162:	46b9      	mov	r9, r7
 8021164:	e7b8      	b.n	80210d8 <rcl_expand_topic_name+0x128>
 8021166:	25ca      	movs	r5, #202	@ 0xca
 8021168:	e773      	b.n	8021052 <rcl_expand_topic_name+0xa2>
 802116a:	9e07      	ldr	r6, [sp, #28]
 802116c:	4630      	mov	r0, r6
 802116e:	f7df f8c1 	bl	80002f4 <strlen>
 8021172:	4a3b      	ldr	r2, [pc, #236]	@ (8021260 <rcl_expand_topic_name+0x2b0>)
 8021174:	4b3b      	ldr	r3, [pc, #236]	@ (8021264 <rcl_expand_topic_name+0x2b4>)
 8021176:	9603      	str	r6, [sp, #12]
 8021178:	2801      	cmp	r0, #1
 802117a:	bf18      	it	ne
 802117c:	4613      	movne	r3, r2
 802117e:	9704      	str	r7, [sp, #16]
 8021180:	9302      	str	r3, [sp, #8]
 8021182:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8021184:	9300      	str	r3, [sp, #0]
 8021186:	1c63      	adds	r3, r4, #1
 8021188:	9305      	str	r3, [sp, #20]
 802118a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802118e:	9301      	str	r3, [sp, #4]
 8021190:	ab16      	add	r3, sp, #88	@ 0x58
 8021192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021194:	f7fc fde4 	bl	801dd60 <rcutils_format_string_limit>
 8021198:	4606      	mov	r6, r0
 802119a:	b350      	cbz	r0, 80211f2 <rcl_expand_topic_name+0x242>
 802119c:	f1b9 0f00 	cmp.w	r9, #0
 80211a0:	d005      	beq.n	80211ae <rcl_expand_topic_name+0x1fe>
 80211a2:	217b      	movs	r1, #123	@ 0x7b
 80211a4:	46b2      	mov	sl, r6
 80211a6:	f001 f8cf 	bl	8022348 <strchr>
 80211aa:	4681      	mov	r9, r0
 80211ac:	e76e      	b.n	802108c <rcl_expand_topic_name+0xdc>
 80211ae:	7833      	ldrb	r3, [r6, #0]
 80211b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80211b2:	d01b      	beq.n	80211ec <rcl_expand_topic_name+0x23c>
 80211b4:	9c07      	ldr	r4, [sp, #28]
 80211b6:	4620      	mov	r0, r4
 80211b8:	f7df f89c 	bl	80002f4 <strlen>
 80211bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80211c0:	4a29      	ldr	r2, [pc, #164]	@ (8021268 <rcl_expand_topic_name+0x2b8>)
 80211c2:	9301      	str	r3, [sp, #4]
 80211c4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80211c6:	9604      	str	r6, [sp, #16]
 80211c8:	9300      	str	r3, [sp, #0]
 80211ca:	4b28      	ldr	r3, [pc, #160]	@ (802126c <rcl_expand_topic_name+0x2bc>)
 80211cc:	9403      	str	r4, [sp, #12]
 80211ce:	2801      	cmp	r0, #1
 80211d0:	bf18      	it	ne
 80211d2:	4613      	movne	r3, r2
 80211d4:	9302      	str	r3, [sp, #8]
 80211d6:	ab16      	add	r3, sp, #88	@ 0x58
 80211d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80211da:	f7fc fdc1 	bl	801dd60 <rcutils_format_string_limit>
 80211de:	4603      	mov	r3, r0
 80211e0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80211e2:	4630      	mov	r0, r6
 80211e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80211e6:	461e      	mov	r6, r3
 80211e8:	4790      	blx	r2
 80211ea:	b116      	cbz	r6, 80211f2 <rcl_expand_topic_name+0x242>
 80211ec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80211ee:	601e      	str	r6, [r3, #0]
 80211f0:	e72f      	b.n	8021052 <rcl_expand_topic_name+0xa2>
 80211f2:	2300      	movs	r3, #0
 80211f4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80211f6:	250a      	movs	r5, #10
 80211f8:	6013      	str	r3, [r2, #0]
 80211fa:	e72a      	b.n	8021052 <rcl_expand_topic_name+0xa2>
 80211fc:	4653      	mov	r3, sl
 80211fe:	4656      	mov	r6, sl
 8021200:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8021204:	2b00      	cmp	r3, #0
 8021206:	d1d2      	bne.n	80211ae <rcl_expand_topic_name+0x1fe>
 8021208:	7823      	ldrb	r3, [r4, #0]
 802120a:	2b2f      	cmp	r3, #47	@ 0x2f
 802120c:	d01e      	beq.n	802124c <rcl_expand_topic_name+0x29c>
 802120e:	9e07      	ldr	r6, [sp, #28]
 8021210:	4630      	mov	r0, r6
 8021212:	f7df f86f 	bl	80002f4 <strlen>
 8021216:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021218:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802121c:	9603      	str	r6, [sp, #12]
 802121e:	9404      	str	r4, [sp, #16]
 8021220:	e9cd 2300 	strd	r2, r3, [sp]
 8021224:	4a10      	ldr	r2, [pc, #64]	@ (8021268 <rcl_expand_topic_name+0x2b8>)
 8021226:	4b11      	ldr	r3, [pc, #68]	@ (802126c <rcl_expand_topic_name+0x2bc>)
 8021228:	2801      	cmp	r0, #1
 802122a:	bf18      	it	ne
 802122c:	4613      	movne	r3, r2
 802122e:	9302      	str	r3, [sp, #8]
 8021230:	ab16      	add	r3, sp, #88	@ 0x58
 8021232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021234:	f7fc fd94 	bl	801dd60 <rcutils_format_string_limit>
 8021238:	4606      	mov	r6, r0
 802123a:	e7d6      	b.n	80211ea <rcl_expand_topic_name+0x23a>
 802123c:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 8021240:	4650      	mov	r0, sl
 8021242:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021244:	6014      	str	r4, [r2, #0]
 8021246:	250a      	movs	r5, #10
 8021248:	4798      	blx	r3
 802124a:	e702      	b.n	8021052 <rcl_expand_topic_name+0xa2>
 802124c:	2300      	movs	r3, #0
 802124e:	461e      	mov	r6, r3
 8021250:	e7cc      	b.n	80211ec <rcl_expand_topic_name+0x23c>
 8021252:	bf00      	nop
 8021254:	080258e4 	.word	0x080258e4
 8021258:	080258ec 	.word	0x080258ec
 802125c:	080258f4 	.word	0x080258f4
 8021260:	080258dc 	.word	0x080258dc
 8021264:	08024894 	.word	0x08024894
 8021268:	08025228 	.word	0x08025228
 802126c:	080248a4 	.word	0x080248a4

08021270 <rcl_get_default_topic_name_substitutions>:
 8021270:	2800      	cmp	r0, #0
 8021272:	bf0c      	ite	eq
 8021274:	200b      	moveq	r0, #11
 8021276:	2000      	movne	r0, #0
 8021278:	4770      	bx	lr
 802127a:	bf00      	nop

0802127c <rcl_get_zero_initialized_guard_condition>:
 802127c:	4a03      	ldr	r2, [pc, #12]	@ (802128c <rcl_get_zero_initialized_guard_condition+0x10>)
 802127e:	4603      	mov	r3, r0
 8021280:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021284:	e883 0003 	stmia.w	r3, {r0, r1}
 8021288:	4618      	mov	r0, r3
 802128a:	4770      	bx	lr
 802128c:	08025900 	.word	0x08025900

08021290 <rcl_guard_condition_init>:
 8021290:	b082      	sub	sp, #8
 8021292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021294:	b087      	sub	sp, #28
 8021296:	4604      	mov	r4, r0
 8021298:	460d      	mov	r5, r1
 802129a:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 802129e:	f10d 0c04 	add.w	ip, sp, #4
 80212a2:	e9ce 2300 	strd	r2, r3, [lr]
 80212a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80212aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80212ae:	f8de 3000 	ldr.w	r3, [lr]
 80212b2:	a801      	add	r0, sp, #4
 80212b4:	f8cc 3000 	str.w	r3, [ip]
 80212b8:	f7f4 f902 	bl	80154c0 <rcutils_allocator_is_valid>
 80212bc:	b354      	cbz	r4, 8021314 <rcl_guard_condition_init+0x84>
 80212be:	f080 0301 	eor.w	r3, r0, #1
 80212c2:	b2db      	uxtb	r3, r3
 80212c4:	bb33      	cbnz	r3, 8021314 <rcl_guard_condition_init+0x84>
 80212c6:	6866      	ldr	r6, [r4, #4]
 80212c8:	b9ee      	cbnz	r6, 8021306 <rcl_guard_condition_init+0x76>
 80212ca:	b31d      	cbz	r5, 8021314 <rcl_guard_condition_init+0x84>
 80212cc:	4628      	mov	r0, r5
 80212ce:	f7f9 fc5b 	bl	801ab88 <rcl_context_is_valid>
 80212d2:	b308      	cbz	r0, 8021318 <rcl_guard_condition_init+0x88>
 80212d4:	9b01      	ldr	r3, [sp, #4]
 80212d6:	201c      	movs	r0, #28
 80212d8:	9905      	ldr	r1, [sp, #20]
 80212da:	4798      	blx	r3
 80212dc:	4607      	mov	r7, r0
 80212de:	6060      	str	r0, [r4, #4]
 80212e0:	b310      	cbz	r0, 8021328 <rcl_guard_condition_init+0x98>
 80212e2:	6828      	ldr	r0, [r5, #0]
 80212e4:	3028      	adds	r0, #40	@ 0x28
 80212e6:	f000 faab 	bl	8021840 <rmw_create_guard_condition>
 80212ea:	6038      	str	r0, [r7, #0]
 80212ec:	6860      	ldr	r0, [r4, #4]
 80212ee:	6807      	ldr	r7, [r0, #0]
 80212f0:	b1a7      	cbz	r7, 802131c <rcl_guard_condition_init+0x8c>
 80212f2:	2301      	movs	r3, #1
 80212f4:	ac01      	add	r4, sp, #4
 80212f6:	f100 0708 	add.w	r7, r0, #8
 80212fa:	7103      	strb	r3, [r0, #4]
 80212fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80212fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8021300:	6823      	ldr	r3, [r4, #0]
 8021302:	603b      	str	r3, [r7, #0]
 8021304:	e000      	b.n	8021308 <rcl_guard_condition_init+0x78>
 8021306:	2664      	movs	r6, #100	@ 0x64
 8021308:	4630      	mov	r0, r6
 802130a:	b007      	add	sp, #28
 802130c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8021310:	b002      	add	sp, #8
 8021312:	4770      	bx	lr
 8021314:	260b      	movs	r6, #11
 8021316:	e7f7      	b.n	8021308 <rcl_guard_condition_init+0x78>
 8021318:	2665      	movs	r6, #101	@ 0x65
 802131a:	e7f5      	b.n	8021308 <rcl_guard_condition_init+0x78>
 802131c:	9b02      	ldr	r3, [sp, #8]
 802131e:	2601      	movs	r6, #1
 8021320:	9905      	ldr	r1, [sp, #20]
 8021322:	4798      	blx	r3
 8021324:	6067      	str	r7, [r4, #4]
 8021326:	e7ef      	b.n	8021308 <rcl_guard_condition_init+0x78>
 8021328:	260a      	movs	r6, #10
 802132a:	e7ed      	b.n	8021308 <rcl_guard_condition_init+0x78>

0802132c <rcl_guard_condition_init_from_rmw>:
 802132c:	b082      	sub	sp, #8
 802132e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021332:	b086      	sub	sp, #24
 8021334:	4604      	mov	r4, r0
 8021336:	460e      	mov	r6, r1
 8021338:	4615      	mov	r5, r2
 802133a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 802133e:	f10d 0e04 	add.w	lr, sp, #4
 8021342:	f84c 3f04 	str.w	r3, [ip, #4]!
 8021346:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 802134a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 802134e:	f8dc 3000 	ldr.w	r3, [ip]
 8021352:	a801      	add	r0, sp, #4
 8021354:	f8ce 3000 	str.w	r3, [lr]
 8021358:	f7f4 f8b2 	bl	80154c0 <rcutils_allocator_is_valid>
 802135c:	f080 0301 	eor.w	r3, r0, #1
 8021360:	b2db      	uxtb	r3, r3
 8021362:	bb3b      	cbnz	r3, 80213b4 <rcl_guard_condition_init_from_rmw+0x88>
 8021364:	b334      	cbz	r4, 80213b4 <rcl_guard_condition_init_from_rmw+0x88>
 8021366:	f8d4 8004 	ldr.w	r8, [r4, #4]
 802136a:	f1b8 0f00 	cmp.w	r8, #0
 802136e:	d11a      	bne.n	80213a6 <rcl_guard_condition_init_from_rmw+0x7a>
 8021370:	b305      	cbz	r5, 80213b4 <rcl_guard_condition_init_from_rmw+0x88>
 8021372:	4628      	mov	r0, r5
 8021374:	f7f9 fc08 	bl	801ab88 <rcl_context_is_valid>
 8021378:	b1f0      	cbz	r0, 80213b8 <rcl_guard_condition_init_from_rmw+0x8c>
 802137a:	9b01      	ldr	r3, [sp, #4]
 802137c:	201c      	movs	r0, #28
 802137e:	9905      	ldr	r1, [sp, #20]
 8021380:	4798      	blx	r3
 8021382:	4607      	mov	r7, r0
 8021384:	6060      	str	r0, [r4, #4]
 8021386:	b320      	cbz	r0, 80213d2 <rcl_guard_condition_init_from_rmw+0xa6>
 8021388:	b1c6      	cbz	r6, 80213bc <rcl_guard_condition_init_from_rmw+0x90>
 802138a:	6006      	str	r6, [r0, #0]
 802138c:	f880 8004 	strb.w	r8, [r0, #4]
 8021390:	ac01      	add	r4, sp, #4
 8021392:	f107 0c08 	add.w	ip, r7, #8
 8021396:	2500      	movs	r5, #0
 8021398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802139a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802139e:	6823      	ldr	r3, [r4, #0]
 80213a0:	f8cc 3000 	str.w	r3, [ip]
 80213a4:	e000      	b.n	80213a8 <rcl_guard_condition_init_from_rmw+0x7c>
 80213a6:	2564      	movs	r5, #100	@ 0x64
 80213a8:	4628      	mov	r0, r5
 80213aa:	b006      	add	sp, #24
 80213ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80213b0:	b002      	add	sp, #8
 80213b2:	4770      	bx	lr
 80213b4:	250b      	movs	r5, #11
 80213b6:	e7f7      	b.n	80213a8 <rcl_guard_condition_init_from_rmw+0x7c>
 80213b8:	2565      	movs	r5, #101	@ 0x65
 80213ba:	e7f5      	b.n	80213a8 <rcl_guard_condition_init_from_rmw+0x7c>
 80213bc:	6828      	ldr	r0, [r5, #0]
 80213be:	3028      	adds	r0, #40	@ 0x28
 80213c0:	f000 fa3e 	bl	8021840 <rmw_create_guard_condition>
 80213c4:	6038      	str	r0, [r7, #0]
 80213c6:	6867      	ldr	r7, [r4, #4]
 80213c8:	683e      	ldr	r6, [r7, #0]
 80213ca:	b126      	cbz	r6, 80213d6 <rcl_guard_condition_init_from_rmw+0xaa>
 80213cc:	2301      	movs	r3, #1
 80213ce:	713b      	strb	r3, [r7, #4]
 80213d0:	e7de      	b.n	8021390 <rcl_guard_condition_init_from_rmw+0x64>
 80213d2:	250a      	movs	r5, #10
 80213d4:	e7e8      	b.n	80213a8 <rcl_guard_condition_init_from_rmw+0x7c>
 80213d6:	9b02      	ldr	r3, [sp, #8]
 80213d8:	4638      	mov	r0, r7
 80213da:	9905      	ldr	r1, [sp, #20]
 80213dc:	2501      	movs	r5, #1
 80213de:	4798      	blx	r3
 80213e0:	6066      	str	r6, [r4, #4]
 80213e2:	e7e1      	b.n	80213a8 <rcl_guard_condition_init_from_rmw+0x7c>

080213e4 <rcl_guard_condition_fini>:
 80213e4:	b570      	push	{r4, r5, r6, lr}
 80213e6:	b082      	sub	sp, #8
 80213e8:	b1f0      	cbz	r0, 8021428 <rcl_guard_condition_fini+0x44>
 80213ea:	6843      	ldr	r3, [r0, #4]
 80213ec:	4604      	mov	r4, r0
 80213ee:	b163      	cbz	r3, 802140a <rcl_guard_condition_fini+0x26>
 80213f0:	6818      	ldr	r0, [r3, #0]
 80213f2:	68de      	ldr	r6, [r3, #12]
 80213f4:	6999      	ldr	r1, [r3, #24]
 80213f6:	b160      	cbz	r0, 8021412 <rcl_guard_condition_fini+0x2e>
 80213f8:	791d      	ldrb	r5, [r3, #4]
 80213fa:	b965      	cbnz	r5, 8021416 <rcl_guard_condition_fini+0x32>
 80213fc:	4618      	mov	r0, r3
 80213fe:	47b0      	blx	r6
 8021400:	2300      	movs	r3, #0
 8021402:	4628      	mov	r0, r5
 8021404:	6063      	str	r3, [r4, #4]
 8021406:	b002      	add	sp, #8
 8021408:	bd70      	pop	{r4, r5, r6, pc}
 802140a:	461d      	mov	r5, r3
 802140c:	4628      	mov	r0, r5
 802140e:	b002      	add	sp, #8
 8021410:	bd70      	pop	{r4, r5, r6, pc}
 8021412:	4605      	mov	r5, r0
 8021414:	e7f2      	b.n	80213fc <rcl_guard_condition_fini+0x18>
 8021416:	9101      	str	r1, [sp, #4]
 8021418:	f000 fa28 	bl	802186c <rmw_destroy_guard_condition>
 802141c:	1e05      	subs	r5, r0, #0
 802141e:	6863      	ldr	r3, [r4, #4]
 8021420:	9901      	ldr	r1, [sp, #4]
 8021422:	bf18      	it	ne
 8021424:	2501      	movne	r5, #1
 8021426:	e7e9      	b.n	80213fc <rcl_guard_condition_fini+0x18>
 8021428:	250b      	movs	r5, #11
 802142a:	4628      	mov	r0, r5
 802142c:	b002      	add	sp, #8
 802142e:	bd70      	pop	{r4, r5, r6, pc}

08021430 <rcl_guard_condition_get_default_options>:
 8021430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021432:	b087      	sub	sp, #28
 8021434:	4606      	mov	r6, r0
 8021436:	4c0b      	ldr	r4, [pc, #44]	@ (8021464 <rcl_guard_condition_get_default_options+0x34>)
 8021438:	4668      	mov	r0, sp
 802143a:	f7f4 f833 	bl	80154a4 <rcutils_get_default_allocator>
 802143e:	46ee      	mov	lr, sp
 8021440:	46a4      	mov	ip, r4
 8021442:	4625      	mov	r5, r4
 8021444:	4634      	mov	r4, r6
 8021446:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 802144a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802144e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021450:	f8de 7000 	ldr.w	r7, [lr]
 8021454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021456:	4630      	mov	r0, r6
 8021458:	f8cc 7000 	str.w	r7, [ip]
 802145c:	6027      	str	r7, [r4, #0]
 802145e:	b007      	add	sp, #28
 8021460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021462:	bf00      	nop
 8021464:	240696f0 	.word	0x240696f0

08021468 <rcl_trigger_guard_condition>:
 8021468:	b148      	cbz	r0, 802147e <rcl_trigger_guard_condition+0x16>
 802146a:	b508      	push	{r3, lr}
 802146c:	6843      	ldr	r3, [r0, #4]
 802146e:	b143      	cbz	r3, 8021482 <rcl_trigger_guard_condition+0x1a>
 8021470:	6818      	ldr	r0, [r3, #0]
 8021472:	f000 fa0f 	bl	8021894 <rmw_trigger_guard_condition>
 8021476:	3800      	subs	r0, #0
 8021478:	bf18      	it	ne
 802147a:	2001      	movne	r0, #1
 802147c:	bd08      	pop	{r3, pc}
 802147e:	200b      	movs	r0, #11
 8021480:	4770      	bx	lr
 8021482:	200b      	movs	r0, #11
 8021484:	bd08      	pop	{r3, pc}
 8021486:	bf00      	nop

08021488 <rcl_guard_condition_get_rmw_handle>:
 8021488:	b110      	cbz	r0, 8021490 <rcl_guard_condition_get_rmw_handle+0x8>
 802148a:	6840      	ldr	r0, [r0, #4]
 802148c:	b100      	cbz	r0, 8021490 <rcl_guard_condition_get_rmw_handle+0x8>
 802148e:	6800      	ldr	r0, [r0, #0]
 8021490:	4770      	bx	lr
 8021492:	bf00      	nop

08021494 <rcl_validate_topic_name>:
 8021494:	2800      	cmp	r0, #0
 8021496:	f000 8089 	beq.w	80215ac <rcl_validate_topic_name+0x118>
 802149a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802149e:	460e      	mov	r6, r1
 80214a0:	2900      	cmp	r1, #0
 80214a2:	f000 8085 	beq.w	80215b0 <rcl_validate_topic_name+0x11c>
 80214a6:	4604      	mov	r4, r0
 80214a8:	4617      	mov	r7, r2
 80214aa:	f7de ff23 	bl	80002f4 <strlen>
 80214ae:	b1b0      	cbz	r0, 80214de <rcl_validate_topic_name+0x4a>
 80214b0:	f894 e000 	ldrb.w	lr, [r4]
 80214b4:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8021618 <rcl_validate_topic_name+0x184>
 80214b8:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80214bc:	f013 0304 	ands.w	r3, r3, #4
 80214c0:	d139      	bne.n	8021536 <rcl_validate_topic_name+0xa2>
 80214c2:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80214c6:	f814 2008 	ldrb.w	r2, [r4, r8]
 80214ca:	2a2f      	cmp	r2, #47	@ 0x2f
 80214cc:	d10f      	bne.n	80214ee <rcl_validate_topic_name+0x5a>
 80214ce:	2202      	movs	r2, #2
 80214d0:	6032      	str	r2, [r6, #0]
 80214d2:	b3a7      	cbz	r7, 802153e <rcl_validate_topic_name+0xaa>
 80214d4:	4618      	mov	r0, r3
 80214d6:	f8c7 8000 	str.w	r8, [r7]
 80214da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214de:	2301      	movs	r3, #1
 80214e0:	6033      	str	r3, [r6, #0]
 80214e2:	b367      	cbz	r7, 802153e <rcl_validate_topic_name+0xaa>
 80214e4:	2300      	movs	r3, #0
 80214e6:	4618      	mov	r0, r3
 80214e8:	603b      	str	r3, [r7, #0]
 80214ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214ee:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 80214f2:	461d      	mov	r5, r3
 80214f4:	4619      	mov	r1, r3
 80214f6:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80214fa:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 80214fe:	f1b9 0f09 	cmp.w	r9, #9
 8021502:	d91f      	bls.n	8021544 <rcl_validate_topic_name+0xb0>
 8021504:	f022 0920 	bic.w	r9, r2, #32
 8021508:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 802150c:	f1b9 0f19 	cmp.w	r9, #25
 8021510:	d918      	bls.n	8021544 <rcl_validate_topic_name+0xb0>
 8021512:	2a5f      	cmp	r2, #95	@ 0x5f
 8021514:	d024      	beq.n	8021560 <rcl_validate_topic_name+0xcc>
 8021516:	2a2f      	cmp	r2, #47	@ 0x2f
 8021518:	d058      	beq.n	80215cc <rcl_validate_topic_name+0x138>
 802151a:	2a7e      	cmp	r2, #126	@ 0x7e
 802151c:	d04a      	beq.n	80215b4 <rcl_validate_topic_name+0x120>
 802151e:	2a7b      	cmp	r2, #123	@ 0x7b
 8021520:	d05b      	beq.n	80215da <rcl_validate_topic_name+0x146>
 8021522:	2a7d      	cmp	r2, #125	@ 0x7d
 8021524:	d169      	bne.n	80215fa <rcl_validate_topic_name+0x166>
 8021526:	2d00      	cmp	r5, #0
 8021528:	d15c      	bne.n	80215e4 <rcl_validate_topic_name+0x150>
 802152a:	2305      	movs	r3, #5
 802152c:	6033      	str	r3, [r6, #0]
 802152e:	b137      	cbz	r7, 802153e <rcl_validate_topic_name+0xaa>
 8021530:	2000      	movs	r0, #0
 8021532:	6039      	str	r1, [r7, #0]
 8021534:	e7d9      	b.n	80214ea <rcl_validate_topic_name+0x56>
 8021536:	2304      	movs	r3, #4
 8021538:	6033      	str	r3, [r6, #0]
 802153a:	2f00      	cmp	r7, #0
 802153c:	d1d2      	bne.n	80214e4 <rcl_validate_topic_name+0x50>
 802153e:	2000      	movs	r0, #0
 8021540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021544:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021548:	0752      	lsls	r2, r2, #29
 802154a:	d509      	bpl.n	8021560 <rcl_validate_topic_name+0xcc>
 802154c:	2900      	cmp	r1, #0
 802154e:	bf0c      	ite	eq
 8021550:	2200      	moveq	r2, #0
 8021552:	f005 0201 	andne.w	r2, r5, #1
 8021556:	b11a      	cbz	r2, 8021560 <rcl_validate_topic_name+0xcc>
 8021558:	1e4d      	subs	r5, r1, #1
 802155a:	429d      	cmp	r5, r3
 802155c:	d031      	beq.n	80215c2 <rcl_validate_topic_name+0x12e>
 802155e:	4615      	mov	r5, r2
 8021560:	3101      	adds	r1, #1
 8021562:	4288      	cmp	r0, r1
 8021564:	d1c7      	bne.n	80214f6 <rcl_validate_topic_name+0x62>
 8021566:	2d00      	cmp	r5, #0
 8021568:	d142      	bne.n	80215f0 <rcl_validate_topic_name+0x15c>
 802156a:	4628      	mov	r0, r5
 802156c:	2301      	movs	r3, #1
 802156e:	e00c      	b.n	802158a <rcl_validate_topic_name+0xf6>
 8021570:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8021574:	d101      	bne.n	802157a <rcl_validate_topic_name+0xe6>
 8021576:	2801      	cmp	r0, #1
 8021578:	d047      	beq.n	802160a <rcl_validate_topic_name+0x176>
 802157a:	1c5a      	adds	r2, r3, #1
 802157c:	428b      	cmp	r3, r1
 802157e:	f100 0001 	add.w	r0, r0, #1
 8021582:	f104 0401 	add.w	r4, r4, #1
 8021586:	4613      	mov	r3, r2
 8021588:	d22e      	bcs.n	80215e8 <rcl_validate_topic_name+0x154>
 802158a:	4580      	cmp	r8, r0
 802158c:	d0f5      	beq.n	802157a <rcl_validate_topic_name+0xe6>
 802158e:	7822      	ldrb	r2, [r4, #0]
 8021590:	2a2f      	cmp	r2, #47	@ 0x2f
 8021592:	d1ed      	bne.n	8021570 <rcl_validate_topic_name+0xdc>
 8021594:	7862      	ldrb	r2, [r4, #1]
 8021596:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802159a:	0752      	lsls	r2, r2, #29
 802159c:	d5ed      	bpl.n	802157a <rcl_validate_topic_name+0xe6>
 802159e:	2204      	movs	r2, #4
 80215a0:	6032      	str	r2, [r6, #0]
 80215a2:	2f00      	cmp	r7, #0
 80215a4:	d0cb      	beq.n	802153e <rcl_validate_topic_name+0xaa>
 80215a6:	2000      	movs	r0, #0
 80215a8:	603b      	str	r3, [r7, #0]
 80215aa:	e79e      	b.n	80214ea <rcl_validate_topic_name+0x56>
 80215ac:	200b      	movs	r0, #11
 80215ae:	4770      	bx	lr
 80215b0:	200b      	movs	r0, #11
 80215b2:	e79a      	b.n	80214ea <rcl_validate_topic_name+0x56>
 80215b4:	2900      	cmp	r1, #0
 80215b6:	d0d3      	beq.n	8021560 <rcl_validate_topic_name+0xcc>
 80215b8:	2306      	movs	r3, #6
 80215ba:	6033      	str	r3, [r6, #0]
 80215bc:	2f00      	cmp	r7, #0
 80215be:	d1b7      	bne.n	8021530 <rcl_validate_topic_name+0x9c>
 80215c0:	e7bd      	b.n	802153e <rcl_validate_topic_name+0xaa>
 80215c2:	2309      	movs	r3, #9
 80215c4:	6033      	str	r3, [r6, #0]
 80215c6:	2f00      	cmp	r7, #0
 80215c8:	d1b2      	bne.n	8021530 <rcl_validate_topic_name+0x9c>
 80215ca:	e7b8      	b.n	802153e <rcl_validate_topic_name+0xaa>
 80215cc:	2d00      	cmp	r5, #0
 80215ce:	d0c7      	beq.n	8021560 <rcl_validate_topic_name+0xcc>
 80215d0:	2308      	movs	r3, #8
 80215d2:	6033      	str	r3, [r6, #0]
 80215d4:	2f00      	cmp	r7, #0
 80215d6:	d1ab      	bne.n	8021530 <rcl_validate_topic_name+0x9c>
 80215d8:	e7b1      	b.n	802153e <rcl_validate_topic_name+0xaa>
 80215da:	2d00      	cmp	r5, #0
 80215dc:	d1f8      	bne.n	80215d0 <rcl_validate_topic_name+0x13c>
 80215de:	460b      	mov	r3, r1
 80215e0:	2501      	movs	r5, #1
 80215e2:	e7bd      	b.n	8021560 <rcl_validate_topic_name+0xcc>
 80215e4:	2500      	movs	r5, #0
 80215e6:	e7bb      	b.n	8021560 <rcl_validate_topic_name+0xcc>
 80215e8:	2300      	movs	r3, #0
 80215ea:	4618      	mov	r0, r3
 80215ec:	6033      	str	r3, [r6, #0]
 80215ee:	e77c      	b.n	80214ea <rcl_validate_topic_name+0x56>
 80215f0:	2205      	movs	r2, #5
 80215f2:	6032      	str	r2, [r6, #0]
 80215f4:	2f00      	cmp	r7, #0
 80215f6:	d1d6      	bne.n	80215a6 <rcl_validate_topic_name+0x112>
 80215f8:	e7a1      	b.n	802153e <rcl_validate_topic_name+0xaa>
 80215fa:	2d00      	cmp	r5, #0
 80215fc:	bf14      	ite	ne
 80215fe:	2308      	movne	r3, #8
 8021600:	2303      	moveq	r3, #3
 8021602:	6033      	str	r3, [r6, #0]
 8021604:	2f00      	cmp	r7, #0
 8021606:	d193      	bne.n	8021530 <rcl_validate_topic_name+0x9c>
 8021608:	e799      	b.n	802153e <rcl_validate_topic_name+0xaa>
 802160a:	2307      	movs	r3, #7
 802160c:	6033      	str	r3, [r6, #0]
 802160e:	2f00      	cmp	r7, #0
 8021610:	d095      	beq.n	802153e <rcl_validate_topic_name+0xaa>
 8021612:	2301      	movs	r3, #1
 8021614:	e7c7      	b.n	80215a6 <rcl_validate_topic_name+0x112>
 8021616:	bf00      	nop
 8021618:	08025a6a 	.word	0x08025a6a

0802161c <rcutils_string_array_fini>:
 802161c:	b328      	cbz	r0, 802166a <rcutils_string_array_fini+0x4e>
 802161e:	b570      	push	{r4, r5, r6, lr}
 8021620:	4604      	mov	r4, r0
 8021622:	6840      	ldr	r0, [r0, #4]
 8021624:	b1e0      	cbz	r0, 8021660 <rcutils_string_array_fini+0x44>
 8021626:	f104 0008 	add.w	r0, r4, #8
 802162a:	f7f3 ff49 	bl	80154c0 <rcutils_allocator_is_valid>
 802162e:	b1c0      	cbz	r0, 8021662 <rcutils_string_array_fini+0x46>
 8021630:	6823      	ldr	r3, [r4, #0]
 8021632:	b1c3      	cbz	r3, 8021666 <rcutils_string_array_fini+0x4a>
 8021634:	2500      	movs	r5, #0
 8021636:	6860      	ldr	r0, [r4, #4]
 8021638:	462e      	mov	r6, r5
 802163a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 802163e:	68e3      	ldr	r3, [r4, #12]
 8021640:	69a1      	ldr	r1, [r4, #24]
 8021642:	4798      	blx	r3
 8021644:	e9d4 3000 	ldrd	r3, r0, [r4]
 8021648:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 802164c:	3501      	adds	r5, #1
 802164e:	429d      	cmp	r5, r3
 8021650:	d3f3      	bcc.n	802163a <rcutils_string_array_fini+0x1e>
 8021652:	68e3      	ldr	r3, [r4, #12]
 8021654:	69a1      	ldr	r1, [r4, #24]
 8021656:	4798      	blx	r3
 8021658:	2300      	movs	r3, #0
 802165a:	4618      	mov	r0, r3
 802165c:	e9c4 3300 	strd	r3, r3, [r4]
 8021660:	bd70      	pop	{r4, r5, r6, pc}
 8021662:	200b      	movs	r0, #11
 8021664:	bd70      	pop	{r4, r5, r6, pc}
 8021666:	6860      	ldr	r0, [r4, #4]
 8021668:	e7f3      	b.n	8021652 <rcutils_string_array_fini+0x36>
 802166a:	200b      	movs	r0, #11
 802166c:	4770      	bx	lr
 802166e:	bf00      	nop

08021670 <on_status>:
 8021670:	b082      	sub	sp, #8
 8021672:	b002      	add	sp, #8
 8021674:	4770      	bx	lr
 8021676:	bf00      	nop

08021678 <on_topic>:
 8021678:	4a23      	ldr	r2, [pc, #140]	@ (8021708 <on_topic+0x90>)
 802167a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802167e:	6812      	ldr	r2, [r2, #0]
 8021680:	b094      	sub	sp, #80	@ 0x50
 8021682:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8021684:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8021688:	9113      	str	r1, [sp, #76]	@ 0x4c
 802168a:	9312      	str	r3, [sp, #72]	@ 0x48
 802168c:	b3c2      	cbz	r2, 8021700 <on_topic+0x88>
 802168e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8021692:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8021696:	e001      	b.n	802169c <on_topic+0x24>
 8021698:	6852      	ldr	r2, [r2, #4]
 802169a:	b38a      	cbz	r2, 8021700 <on_topic+0x88>
 802169c:	6894      	ldr	r4, [r2, #8]
 802169e:	8aa3      	ldrh	r3, [r4, #20]
 80216a0:	428b      	cmp	r3, r1
 80216a2:	d1f9      	bne.n	8021698 <on_topic+0x20>
 80216a4:	7da3      	ldrb	r3, [r4, #22]
 80216a6:	4283      	cmp	r3, r0
 80216a8:	d1f6      	bne.n	8021698 <on_topic+0x20>
 80216aa:	2248      	movs	r2, #72	@ 0x48
 80216ac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80216b0:	4668      	mov	r0, sp
 80216b2:	f000 ff60 	bl	8022576 <memcpy>
 80216b6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80216ba:	4620      	mov	r0, r4
 80216bc:	cb0c      	ldmia	r3, {r2, r3}
 80216be:	f7f4 fbb3 	bl	8015e28 <rmw_uxrce_get_static_input_buffer_for_entity>
 80216c2:	4607      	mov	r7, r0
 80216c4:	b1e0      	cbz	r0, 8021700 <on_topic+0x88>
 80216c6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80216ca:	462a      	mov	r2, r5
 80216cc:	4630      	mov	r0, r6
 80216ce:	f108 0110 	add.w	r1, r8, #16
 80216d2:	f7fe fd1f 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 80216d6:	b930      	cbnz	r0, 80216e6 <on_topic+0x6e>
 80216d8:	4639      	mov	r1, r7
 80216da:	480c      	ldr	r0, [pc, #48]	@ (802170c <on_topic+0x94>)
 80216dc:	b014      	add	sp, #80	@ 0x50
 80216de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80216e2:	f7fd b81b 	b.w	801e71c <put_memory>
 80216e6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80216ea:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80216ee:	f7f4 f999 	bl	8015a24 <rmw_uros_epoch_nanos>
 80216f2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80216f6:	2305      	movs	r3, #5
 80216f8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80216fc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8021700:	b014      	add	sp, #80	@ 0x50
 8021702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021706:	bf00      	nop
 8021708:	240693a4 	.word	0x240693a4
 802170c:	24069394 	.word	0x24069394

08021710 <on_request>:
 8021710:	4824      	ldr	r0, [pc, #144]	@ (80217a4 <on_request+0x94>)
 8021712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021716:	6800      	ldr	r0, [r0, #0]
 8021718:	b094      	sub	sp, #80	@ 0x50
 802171a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802171c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8021720:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021722:	2800      	cmp	r0, #0
 8021724:	d03b      	beq.n	802179e <on_request+0x8e>
 8021726:	461d      	mov	r5, r3
 8021728:	e001      	b.n	802172e <on_request+0x1e>
 802172a:	6840      	ldr	r0, [r0, #4]
 802172c:	b3b8      	cbz	r0, 802179e <on_request+0x8e>
 802172e:	6884      	ldr	r4, [r0, #8]
 8021730:	8b21      	ldrh	r1, [r4, #24]
 8021732:	4291      	cmp	r1, r2
 8021734:	d1f9      	bne.n	802172a <on_request+0x1a>
 8021736:	2248      	movs	r2, #72	@ 0x48
 8021738:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 802173c:	4668      	mov	r0, sp
 802173e:	f000 ff1a 	bl	8022576 <memcpy>
 8021742:	f104 0320 	add.w	r3, r4, #32
 8021746:	4620      	mov	r0, r4
 8021748:	cb0c      	ldmia	r3, {r2, r3}
 802174a:	f7f4 fb6d 	bl	8015e28 <rmw_uxrce_get_static_input_buffer_for_entity>
 802174e:	4680      	mov	r8, r0
 8021750:	b328      	cbz	r0, 802179e <on_request+0x8e>
 8021752:	4630      	mov	r0, r6
 8021754:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8021758:	463a      	mov	r2, r7
 802175a:	f106 0110 	add.w	r1, r6, #16
 802175e:	f7fe fcd9 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 8021762:	b930      	cbnz	r0, 8021772 <on_request+0x62>
 8021764:	4641      	mov	r1, r8
 8021766:	4810      	ldr	r0, [pc, #64]	@ (80217a8 <on_request+0x98>)
 8021768:	b014      	add	sp, #80	@ 0x50
 802176a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802176e:	f7fc bfd5 	b.w	801e71c <put_memory>
 8021772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021774:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8021778:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 802177c:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8021780:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021784:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021788:	e88c 0003 	stmia.w	ip, {r0, r1}
 802178c:	f7f4 f94a 	bl	8015a24 <rmw_uros_epoch_nanos>
 8021790:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8021794:	2303      	movs	r3, #3
 8021796:	e942 0102 	strd	r0, r1, [r2, #-8]
 802179a:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 802179e:	b014      	add	sp, #80	@ 0x50
 80217a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217a4:	24069374 	.word	0x24069374
 80217a8:	24069394 	.word	0x24069394

080217ac <on_reply>:
 80217ac:	4822      	ldr	r0, [pc, #136]	@ (8021838 <on_reply+0x8c>)
 80217ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80217b2:	6800      	ldr	r0, [r0, #0]
 80217b4:	b094      	sub	sp, #80	@ 0x50
 80217b6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80217b8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80217bc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80217be:	b3b8      	cbz	r0, 8021830 <on_reply+0x84>
 80217c0:	461d      	mov	r5, r3
 80217c2:	e001      	b.n	80217c8 <on_reply+0x1c>
 80217c4:	6840      	ldr	r0, [r0, #4]
 80217c6:	b398      	cbz	r0, 8021830 <on_reply+0x84>
 80217c8:	6884      	ldr	r4, [r0, #8]
 80217ca:	8b21      	ldrh	r1, [r4, #24]
 80217cc:	4291      	cmp	r1, r2
 80217ce:	d1f9      	bne.n	80217c4 <on_reply+0x18>
 80217d0:	2248      	movs	r2, #72	@ 0x48
 80217d2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80217d6:	4668      	mov	r0, sp
 80217d8:	f000 fecd 	bl	8022576 <memcpy>
 80217dc:	f104 0320 	add.w	r3, r4, #32
 80217e0:	4620      	mov	r0, r4
 80217e2:	cb0c      	ldmia	r3, {r2, r3}
 80217e4:	f7f4 fb20 	bl	8015e28 <rmw_uxrce_get_static_input_buffer_for_entity>
 80217e8:	4680      	mov	r8, r0
 80217ea:	b308      	cbz	r0, 8021830 <on_reply+0x84>
 80217ec:	4630      	mov	r0, r6
 80217ee:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80217f2:	463a      	mov	r2, r7
 80217f4:	f106 0110 	add.w	r1, r6, #16
 80217f8:	f7fe fc8c 	bl	8020114 <ucdr_deserialize_array_uint8_t>
 80217fc:	b930      	cbnz	r0, 802180c <on_reply+0x60>
 80217fe:	4641      	mov	r1, r8
 8021800:	480e      	ldr	r0, [pc, #56]	@ (802183c <on_reply+0x90>)
 8021802:	b014      	add	sp, #80	@ 0x50
 8021804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021808:	f7fc bf88 	b.w	801e71c <put_memory>
 802180c:	2200      	movs	r2, #0
 802180e:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8021812:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8021816:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 802181a:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 802181e:	f7f4 f901 	bl	8015a24 <rmw_uros_epoch_nanos>
 8021822:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8021826:	2304      	movs	r3, #4
 8021828:	e942 0102 	strd	r0, r1, [r2, #-8]
 802182c:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8021830:	b014      	add	sp, #80	@ 0x50
 8021832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021836:	bf00      	nop
 8021838:	24064a88 	.word	0x24064a88
 802183c:	24069394 	.word	0x24069394

08021840 <rmw_create_guard_condition>:
 8021840:	b538      	push	{r3, r4, r5, lr}
 8021842:	4605      	mov	r5, r0
 8021844:	4808      	ldr	r0, [pc, #32]	@ (8021868 <rmw_create_guard_condition+0x28>)
 8021846:	f7fc ff59 	bl	801e6fc <get_memory>
 802184a:	4603      	mov	r3, r0
 802184c:	b148      	cbz	r0, 8021862 <rmw_create_guard_condition+0x22>
 802184e:	6884      	ldr	r4, [r0, #8]
 8021850:	2300      	movs	r3, #0
 8021852:	61e5      	str	r5, [r4, #28]
 8021854:	7423      	strb	r3, [r4, #16]
 8021856:	f7fc ffb9 	bl	801e7cc <rmw_get_implementation_identifier>
 802185a:	f104 0314 	add.w	r3, r4, #20
 802185e:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8021862:	4618      	mov	r0, r3
 8021864:	bd38      	pop	{r3, r4, r5, pc}
 8021866:	bf00      	nop
 8021868:	24069334 	.word	0x24069334

0802186c <rmw_destroy_guard_condition>:
 802186c:	b508      	push	{r3, lr}
 802186e:	4b08      	ldr	r3, [pc, #32]	@ (8021890 <rmw_destroy_guard_condition+0x24>)
 8021870:	6819      	ldr	r1, [r3, #0]
 8021872:	b911      	cbnz	r1, 802187a <rmw_destroy_guard_condition+0xe>
 8021874:	e00a      	b.n	802188c <rmw_destroy_guard_condition+0x20>
 8021876:	6849      	ldr	r1, [r1, #4]
 8021878:	b141      	cbz	r1, 802188c <rmw_destroy_guard_condition+0x20>
 802187a:	688b      	ldr	r3, [r1, #8]
 802187c:	3314      	adds	r3, #20
 802187e:	4298      	cmp	r0, r3
 8021880:	d1f9      	bne.n	8021876 <rmw_destroy_guard_condition+0xa>
 8021882:	4803      	ldr	r0, [pc, #12]	@ (8021890 <rmw_destroy_guard_condition+0x24>)
 8021884:	f7fc ff4a 	bl	801e71c <put_memory>
 8021888:	2000      	movs	r0, #0
 802188a:	bd08      	pop	{r3, pc}
 802188c:	2001      	movs	r0, #1
 802188e:	bd08      	pop	{r3, pc}
 8021890:	24069334 	.word	0x24069334

08021894 <rmw_trigger_guard_condition>:
 8021894:	b160      	cbz	r0, 80218b0 <rmw_trigger_guard_condition+0x1c>
 8021896:	b510      	push	{r4, lr}
 8021898:	4604      	mov	r4, r0
 802189a:	6800      	ldr	r0, [r0, #0]
 802189c:	f7f4 fcd8 	bl	8016250 <is_uxrce_rmw_identifier_valid>
 80218a0:	b908      	cbnz	r0, 80218a6 <rmw_trigger_guard_condition+0x12>
 80218a2:	2001      	movs	r0, #1
 80218a4:	bd10      	pop	{r4, pc}
 80218a6:	6863      	ldr	r3, [r4, #4]
 80218a8:	2201      	movs	r2, #1
 80218aa:	2000      	movs	r0, #0
 80218ac:	741a      	strb	r2, [r3, #16]
 80218ae:	bd10      	pop	{r4, pc}
 80218b0:	2001      	movs	r0, #1
 80218b2:	4770      	bx	lr

080218b4 <rosidl_runtime_c__String__init>:
 80218b4:	b510      	push	{r4, lr}
 80218b6:	4604      	mov	r4, r0
 80218b8:	b086      	sub	sp, #24
 80218ba:	b170      	cbz	r0, 80218da <rosidl_runtime_c__String__init+0x26>
 80218bc:	a801      	add	r0, sp, #4
 80218be:	f7f3 fdf1 	bl	80154a4 <rcutils_get_default_allocator>
 80218c2:	9b01      	ldr	r3, [sp, #4]
 80218c4:	9905      	ldr	r1, [sp, #20]
 80218c6:	2001      	movs	r0, #1
 80218c8:	4798      	blx	r3
 80218ca:	6020      	str	r0, [r4, #0]
 80218cc:	b128      	cbz	r0, 80218da <rosidl_runtime_c__String__init+0x26>
 80218ce:	2100      	movs	r1, #0
 80218d0:	2201      	movs	r2, #1
 80218d2:	7001      	strb	r1, [r0, #0]
 80218d4:	4610      	mov	r0, r2
 80218d6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80218da:	b006      	add	sp, #24
 80218dc:	bd10      	pop	{r4, pc}
 80218de:	bf00      	nop

080218e0 <rosidl_runtime_c__String__fini>:
 80218e0:	b320      	cbz	r0, 802192c <rosidl_runtime_c__String__fini+0x4c>
 80218e2:	6803      	ldr	r3, [r0, #0]
 80218e4:	b510      	push	{r4, lr}
 80218e6:	4604      	mov	r4, r0
 80218e8:	b086      	sub	sp, #24
 80218ea:	b173      	cbz	r3, 802190a <rosidl_runtime_c__String__fini+0x2a>
 80218ec:	6883      	ldr	r3, [r0, #8]
 80218ee:	b1f3      	cbz	r3, 802192e <rosidl_runtime_c__String__fini+0x4e>
 80218f0:	a801      	add	r0, sp, #4
 80218f2:	f7f3 fdd7 	bl	80154a4 <rcutils_get_default_allocator>
 80218f6:	9b02      	ldr	r3, [sp, #8]
 80218f8:	9905      	ldr	r1, [sp, #20]
 80218fa:	6820      	ldr	r0, [r4, #0]
 80218fc:	4798      	blx	r3
 80218fe:	2300      	movs	r3, #0
 8021900:	e9c4 3300 	strd	r3, r3, [r4]
 8021904:	60a3      	str	r3, [r4, #8]
 8021906:	b006      	add	sp, #24
 8021908:	bd10      	pop	{r4, pc}
 802190a:	6843      	ldr	r3, [r0, #4]
 802190c:	b9db      	cbnz	r3, 8021946 <rosidl_runtime_c__String__fini+0x66>
 802190e:	6883      	ldr	r3, [r0, #8]
 8021910:	2b00      	cmp	r3, #0
 8021912:	d0f8      	beq.n	8021906 <rosidl_runtime_c__String__fini+0x26>
 8021914:	4b12      	ldr	r3, [pc, #72]	@ (8021960 <rosidl_runtime_c__String__fini+0x80>)
 8021916:	2251      	movs	r2, #81	@ 0x51
 8021918:	2101      	movs	r1, #1
 802191a:	4812      	ldr	r0, [pc, #72]	@ (8021964 <rosidl_runtime_c__String__fini+0x84>)
 802191c:	681b      	ldr	r3, [r3, #0]
 802191e:	68db      	ldr	r3, [r3, #12]
 8021920:	f000 fb8e 	bl	8022040 <fwrite>
 8021924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021928:	f000 f84a 	bl	80219c0 <exit>
 802192c:	4770      	bx	lr
 802192e:	4b0c      	ldr	r3, [pc, #48]	@ (8021960 <rosidl_runtime_c__String__fini+0x80>)
 8021930:	224c      	movs	r2, #76	@ 0x4c
 8021932:	2101      	movs	r1, #1
 8021934:	480c      	ldr	r0, [pc, #48]	@ (8021968 <rosidl_runtime_c__String__fini+0x88>)
 8021936:	681b      	ldr	r3, [r3, #0]
 8021938:	68db      	ldr	r3, [r3, #12]
 802193a:	f000 fb81 	bl	8022040 <fwrite>
 802193e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021942:	f000 f83d 	bl	80219c0 <exit>
 8021946:	4b06      	ldr	r3, [pc, #24]	@ (8021960 <rosidl_runtime_c__String__fini+0x80>)
 8021948:	224e      	movs	r2, #78	@ 0x4e
 802194a:	2101      	movs	r1, #1
 802194c:	4807      	ldr	r0, [pc, #28]	@ (802196c <rosidl_runtime_c__String__fini+0x8c>)
 802194e:	681b      	ldr	r3, [r3, #0]
 8021950:	68db      	ldr	r3, [r3, #12]
 8021952:	f000 fb75 	bl	8022040 <fwrite>
 8021956:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802195a:	f000 f831 	bl	80219c0 <exit>
 802195e:	bf00      	nop
 8021960:	24001424 	.word	0x24001424
 8021964:	080259a8 	.word	0x080259a8
 8021968:	08025908 	.word	0x08025908
 802196c:	08025958 	.word	0x08025958

08021970 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8021970:	3800      	subs	r0, #0
 8021972:	bf18      	it	ne
 8021974:	2001      	movne	r0, #1
 8021976:	4770      	bx	lr

08021978 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 8021978:	4770      	bx	lr
 802197a:	bf00      	nop

0802197c <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 802197c:	3800      	subs	r0, #0
 802197e:	bf18      	it	ne
 8021980:	2001      	movne	r0, #1
 8021982:	4770      	bx	lr

08021984 <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 8021984:	4770      	bx	lr
 8021986:	bf00      	nop

08021988 <calloc>:
 8021988:	4b02      	ldr	r3, [pc, #8]	@ (8021994 <calloc+0xc>)
 802198a:	460a      	mov	r2, r1
 802198c:	4601      	mov	r1, r0
 802198e:	6818      	ldr	r0, [r3, #0]
 8021990:	f000 b802 	b.w	8021998 <_calloc_r>
 8021994:	24001424 	.word	0x24001424

08021998 <_calloc_r>:
 8021998:	b570      	push	{r4, r5, r6, lr}
 802199a:	fba1 5402 	umull	r5, r4, r1, r2
 802199e:	b93c      	cbnz	r4, 80219b0 <_calloc_r+0x18>
 80219a0:	4629      	mov	r1, r5
 80219a2:	f000 f899 	bl	8021ad8 <_malloc_r>
 80219a6:	4606      	mov	r6, r0
 80219a8:	b928      	cbnz	r0, 80219b6 <_calloc_r+0x1e>
 80219aa:	2600      	movs	r6, #0
 80219ac:	4630      	mov	r0, r6
 80219ae:	bd70      	pop	{r4, r5, r6, pc}
 80219b0:	220c      	movs	r2, #12
 80219b2:	6002      	str	r2, [r0, #0]
 80219b4:	e7f9      	b.n	80219aa <_calloc_r+0x12>
 80219b6:	462a      	mov	r2, r5
 80219b8:	4621      	mov	r1, r4
 80219ba:	f000 fcbd 	bl	8022338 <memset>
 80219be:	e7f5      	b.n	80219ac <_calloc_r+0x14>

080219c0 <exit>:
 80219c0:	b508      	push	{r3, lr}
 80219c2:	4b06      	ldr	r3, [pc, #24]	@ (80219dc <exit+0x1c>)
 80219c4:	4604      	mov	r4, r0
 80219c6:	b113      	cbz	r3, 80219ce <exit+0xe>
 80219c8:	2100      	movs	r1, #0
 80219ca:	f3af 8000 	nop.w
 80219ce:	4b04      	ldr	r3, [pc, #16]	@ (80219e0 <exit+0x20>)
 80219d0:	681b      	ldr	r3, [r3, #0]
 80219d2:	b103      	cbz	r3, 80219d6 <exit+0x16>
 80219d4:	4798      	blx	r3
 80219d6:	4620      	mov	r0, r4
 80219d8:	f7e0 fe36 	bl	8002648 <_exit>
 80219dc:	00000000 	.word	0x00000000
 80219e0:	24069844 	.word	0x24069844

080219e4 <getenv>:
 80219e4:	b507      	push	{r0, r1, r2, lr}
 80219e6:	4b04      	ldr	r3, [pc, #16]	@ (80219f8 <getenv+0x14>)
 80219e8:	4601      	mov	r1, r0
 80219ea:	aa01      	add	r2, sp, #4
 80219ec:	6818      	ldr	r0, [r3, #0]
 80219ee:	f000 f805 	bl	80219fc <_findenv_r>
 80219f2:	b003      	add	sp, #12
 80219f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80219f8:	24001424 	.word	0x24001424

080219fc <_findenv_r>:
 80219fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a00:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8021a70 <_findenv_r+0x74>
 8021a04:	4606      	mov	r6, r0
 8021a06:	4689      	mov	r9, r1
 8021a08:	4617      	mov	r7, r2
 8021a0a:	f000 fde1 	bl	80225d0 <__env_lock>
 8021a0e:	f8da 4000 	ldr.w	r4, [sl]
 8021a12:	b134      	cbz	r4, 8021a22 <_findenv_r+0x26>
 8021a14:	464b      	mov	r3, r9
 8021a16:	4698      	mov	r8, r3
 8021a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021a1c:	b13a      	cbz	r2, 8021a2e <_findenv_r+0x32>
 8021a1e:	2a3d      	cmp	r2, #61	@ 0x3d
 8021a20:	d1f9      	bne.n	8021a16 <_findenv_r+0x1a>
 8021a22:	4630      	mov	r0, r6
 8021a24:	f000 fdda 	bl	80225dc <__env_unlock>
 8021a28:	2000      	movs	r0, #0
 8021a2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a2e:	eba8 0809 	sub.w	r8, r8, r9
 8021a32:	46a3      	mov	fp, r4
 8021a34:	f854 0b04 	ldr.w	r0, [r4], #4
 8021a38:	2800      	cmp	r0, #0
 8021a3a:	d0f2      	beq.n	8021a22 <_findenv_r+0x26>
 8021a3c:	4642      	mov	r2, r8
 8021a3e:	4649      	mov	r1, r9
 8021a40:	f000 fc8f 	bl	8022362 <strncmp>
 8021a44:	2800      	cmp	r0, #0
 8021a46:	d1f4      	bne.n	8021a32 <_findenv_r+0x36>
 8021a48:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021a4c:	eb03 0508 	add.w	r5, r3, r8
 8021a50:	f813 3008 	ldrb.w	r3, [r3, r8]
 8021a54:	2b3d      	cmp	r3, #61	@ 0x3d
 8021a56:	d1ec      	bne.n	8021a32 <_findenv_r+0x36>
 8021a58:	f8da 3000 	ldr.w	r3, [sl]
 8021a5c:	ebab 0303 	sub.w	r3, fp, r3
 8021a60:	109b      	asrs	r3, r3, #2
 8021a62:	4630      	mov	r0, r6
 8021a64:	603b      	str	r3, [r7, #0]
 8021a66:	f000 fdb9 	bl	80225dc <__env_unlock>
 8021a6a:	1c68      	adds	r0, r5, #1
 8021a6c:	e7dd      	b.n	8021a2a <_findenv_r+0x2e>
 8021a6e:	bf00      	nop
 8021a70:	24000000 	.word	0x24000000

08021a74 <malloc>:
 8021a74:	4b02      	ldr	r3, [pc, #8]	@ (8021a80 <malloc+0xc>)
 8021a76:	4601      	mov	r1, r0
 8021a78:	6818      	ldr	r0, [r3, #0]
 8021a7a:	f000 b82d 	b.w	8021ad8 <_malloc_r>
 8021a7e:	bf00      	nop
 8021a80:	24001424 	.word	0x24001424

08021a84 <free>:
 8021a84:	4b02      	ldr	r3, [pc, #8]	@ (8021a90 <free+0xc>)
 8021a86:	4601      	mov	r1, r0
 8021a88:	6818      	ldr	r0, [r3, #0]
 8021a8a:	f000 bdad 	b.w	80225e8 <_free_r>
 8021a8e:	bf00      	nop
 8021a90:	24001424 	.word	0x24001424

08021a94 <sbrk_aligned>:
 8021a94:	b570      	push	{r4, r5, r6, lr}
 8021a96:	4e0f      	ldr	r6, [pc, #60]	@ (8021ad4 <sbrk_aligned+0x40>)
 8021a98:	460c      	mov	r4, r1
 8021a9a:	6831      	ldr	r1, [r6, #0]
 8021a9c:	4605      	mov	r5, r0
 8021a9e:	b911      	cbnz	r1, 8021aa6 <sbrk_aligned+0x12>
 8021aa0:	f000 fd12 	bl	80224c8 <_sbrk_r>
 8021aa4:	6030      	str	r0, [r6, #0]
 8021aa6:	4621      	mov	r1, r4
 8021aa8:	4628      	mov	r0, r5
 8021aaa:	f000 fd0d 	bl	80224c8 <_sbrk_r>
 8021aae:	1c43      	adds	r3, r0, #1
 8021ab0:	d103      	bne.n	8021aba <sbrk_aligned+0x26>
 8021ab2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8021ab6:	4620      	mov	r0, r4
 8021ab8:	bd70      	pop	{r4, r5, r6, pc}
 8021aba:	1cc4      	adds	r4, r0, #3
 8021abc:	f024 0403 	bic.w	r4, r4, #3
 8021ac0:	42a0      	cmp	r0, r4
 8021ac2:	d0f8      	beq.n	8021ab6 <sbrk_aligned+0x22>
 8021ac4:	1a21      	subs	r1, r4, r0
 8021ac6:	4628      	mov	r0, r5
 8021ac8:	f000 fcfe 	bl	80224c8 <_sbrk_r>
 8021acc:	3001      	adds	r0, #1
 8021ace:	d1f2      	bne.n	8021ab6 <sbrk_aligned+0x22>
 8021ad0:	e7ef      	b.n	8021ab2 <sbrk_aligned+0x1e>
 8021ad2:	bf00      	nop
 8021ad4:	24069704 	.word	0x24069704

08021ad8 <_malloc_r>:
 8021ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021adc:	1ccd      	adds	r5, r1, #3
 8021ade:	f025 0503 	bic.w	r5, r5, #3
 8021ae2:	3508      	adds	r5, #8
 8021ae4:	2d0c      	cmp	r5, #12
 8021ae6:	bf38      	it	cc
 8021ae8:	250c      	movcc	r5, #12
 8021aea:	2d00      	cmp	r5, #0
 8021aec:	4606      	mov	r6, r0
 8021aee:	db01      	blt.n	8021af4 <_malloc_r+0x1c>
 8021af0:	42a9      	cmp	r1, r5
 8021af2:	d904      	bls.n	8021afe <_malloc_r+0x26>
 8021af4:	230c      	movs	r3, #12
 8021af6:	6033      	str	r3, [r6, #0]
 8021af8:	2000      	movs	r0, #0
 8021afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021afe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021bd4 <_malloc_r+0xfc>
 8021b02:	f000 f869 	bl	8021bd8 <__malloc_lock>
 8021b06:	f8d8 3000 	ldr.w	r3, [r8]
 8021b0a:	461c      	mov	r4, r3
 8021b0c:	bb44      	cbnz	r4, 8021b60 <_malloc_r+0x88>
 8021b0e:	4629      	mov	r1, r5
 8021b10:	4630      	mov	r0, r6
 8021b12:	f7ff ffbf 	bl	8021a94 <sbrk_aligned>
 8021b16:	1c43      	adds	r3, r0, #1
 8021b18:	4604      	mov	r4, r0
 8021b1a:	d158      	bne.n	8021bce <_malloc_r+0xf6>
 8021b1c:	f8d8 4000 	ldr.w	r4, [r8]
 8021b20:	4627      	mov	r7, r4
 8021b22:	2f00      	cmp	r7, #0
 8021b24:	d143      	bne.n	8021bae <_malloc_r+0xd6>
 8021b26:	2c00      	cmp	r4, #0
 8021b28:	d04b      	beq.n	8021bc2 <_malloc_r+0xea>
 8021b2a:	6823      	ldr	r3, [r4, #0]
 8021b2c:	4639      	mov	r1, r7
 8021b2e:	4630      	mov	r0, r6
 8021b30:	eb04 0903 	add.w	r9, r4, r3
 8021b34:	f000 fcc8 	bl	80224c8 <_sbrk_r>
 8021b38:	4581      	cmp	r9, r0
 8021b3a:	d142      	bne.n	8021bc2 <_malloc_r+0xea>
 8021b3c:	6821      	ldr	r1, [r4, #0]
 8021b3e:	1a6d      	subs	r5, r5, r1
 8021b40:	4629      	mov	r1, r5
 8021b42:	4630      	mov	r0, r6
 8021b44:	f7ff ffa6 	bl	8021a94 <sbrk_aligned>
 8021b48:	3001      	adds	r0, #1
 8021b4a:	d03a      	beq.n	8021bc2 <_malloc_r+0xea>
 8021b4c:	6823      	ldr	r3, [r4, #0]
 8021b4e:	442b      	add	r3, r5
 8021b50:	6023      	str	r3, [r4, #0]
 8021b52:	f8d8 3000 	ldr.w	r3, [r8]
 8021b56:	685a      	ldr	r2, [r3, #4]
 8021b58:	bb62      	cbnz	r2, 8021bb4 <_malloc_r+0xdc>
 8021b5a:	f8c8 7000 	str.w	r7, [r8]
 8021b5e:	e00f      	b.n	8021b80 <_malloc_r+0xa8>
 8021b60:	6822      	ldr	r2, [r4, #0]
 8021b62:	1b52      	subs	r2, r2, r5
 8021b64:	d420      	bmi.n	8021ba8 <_malloc_r+0xd0>
 8021b66:	2a0b      	cmp	r2, #11
 8021b68:	d917      	bls.n	8021b9a <_malloc_r+0xc2>
 8021b6a:	1961      	adds	r1, r4, r5
 8021b6c:	42a3      	cmp	r3, r4
 8021b6e:	6025      	str	r5, [r4, #0]
 8021b70:	bf18      	it	ne
 8021b72:	6059      	strne	r1, [r3, #4]
 8021b74:	6863      	ldr	r3, [r4, #4]
 8021b76:	bf08      	it	eq
 8021b78:	f8c8 1000 	streq.w	r1, [r8]
 8021b7c:	5162      	str	r2, [r4, r5]
 8021b7e:	604b      	str	r3, [r1, #4]
 8021b80:	4630      	mov	r0, r6
 8021b82:	f000 f82f 	bl	8021be4 <__malloc_unlock>
 8021b86:	f104 000b 	add.w	r0, r4, #11
 8021b8a:	1d23      	adds	r3, r4, #4
 8021b8c:	f020 0007 	bic.w	r0, r0, #7
 8021b90:	1ac2      	subs	r2, r0, r3
 8021b92:	bf1c      	itt	ne
 8021b94:	1a1b      	subne	r3, r3, r0
 8021b96:	50a3      	strne	r3, [r4, r2]
 8021b98:	e7af      	b.n	8021afa <_malloc_r+0x22>
 8021b9a:	6862      	ldr	r2, [r4, #4]
 8021b9c:	42a3      	cmp	r3, r4
 8021b9e:	bf0c      	ite	eq
 8021ba0:	f8c8 2000 	streq.w	r2, [r8]
 8021ba4:	605a      	strne	r2, [r3, #4]
 8021ba6:	e7eb      	b.n	8021b80 <_malloc_r+0xa8>
 8021ba8:	4623      	mov	r3, r4
 8021baa:	6864      	ldr	r4, [r4, #4]
 8021bac:	e7ae      	b.n	8021b0c <_malloc_r+0x34>
 8021bae:	463c      	mov	r4, r7
 8021bb0:	687f      	ldr	r7, [r7, #4]
 8021bb2:	e7b6      	b.n	8021b22 <_malloc_r+0x4a>
 8021bb4:	461a      	mov	r2, r3
 8021bb6:	685b      	ldr	r3, [r3, #4]
 8021bb8:	42a3      	cmp	r3, r4
 8021bba:	d1fb      	bne.n	8021bb4 <_malloc_r+0xdc>
 8021bbc:	2300      	movs	r3, #0
 8021bbe:	6053      	str	r3, [r2, #4]
 8021bc0:	e7de      	b.n	8021b80 <_malloc_r+0xa8>
 8021bc2:	230c      	movs	r3, #12
 8021bc4:	6033      	str	r3, [r6, #0]
 8021bc6:	4630      	mov	r0, r6
 8021bc8:	f000 f80c 	bl	8021be4 <__malloc_unlock>
 8021bcc:	e794      	b.n	8021af8 <_malloc_r+0x20>
 8021bce:	6005      	str	r5, [r0, #0]
 8021bd0:	e7d6      	b.n	8021b80 <_malloc_r+0xa8>
 8021bd2:	bf00      	nop
 8021bd4:	24069708 	.word	0x24069708

08021bd8 <__malloc_lock>:
 8021bd8:	4801      	ldr	r0, [pc, #4]	@ (8021be0 <__malloc_lock+0x8>)
 8021bda:	f000 bcc2 	b.w	8022562 <__retarget_lock_acquire_recursive>
 8021bde:	bf00      	nop
 8021be0:	2406984d 	.word	0x2406984d

08021be4 <__malloc_unlock>:
 8021be4:	4801      	ldr	r0, [pc, #4]	@ (8021bec <__malloc_unlock+0x8>)
 8021be6:	f000 bcbd 	b.w	8022564 <__retarget_lock_release_recursive>
 8021bea:	bf00      	nop
 8021bec:	2406984d 	.word	0x2406984d

08021bf0 <srand>:
 8021bf0:	b538      	push	{r3, r4, r5, lr}
 8021bf2:	4b10      	ldr	r3, [pc, #64]	@ (8021c34 <srand+0x44>)
 8021bf4:	681d      	ldr	r5, [r3, #0]
 8021bf6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021bf8:	4604      	mov	r4, r0
 8021bfa:	b9b3      	cbnz	r3, 8021c2a <srand+0x3a>
 8021bfc:	2018      	movs	r0, #24
 8021bfe:	f7ff ff39 	bl	8021a74 <malloc>
 8021c02:	4602      	mov	r2, r0
 8021c04:	6328      	str	r0, [r5, #48]	@ 0x30
 8021c06:	b920      	cbnz	r0, 8021c12 <srand+0x22>
 8021c08:	4b0b      	ldr	r3, [pc, #44]	@ (8021c38 <srand+0x48>)
 8021c0a:	480c      	ldr	r0, [pc, #48]	@ (8021c3c <srand+0x4c>)
 8021c0c:	2146      	movs	r1, #70	@ 0x46
 8021c0e:	f000 fcc1 	bl	8022594 <__assert_func>
 8021c12:	490b      	ldr	r1, [pc, #44]	@ (8021c40 <srand+0x50>)
 8021c14:	4b0b      	ldr	r3, [pc, #44]	@ (8021c44 <srand+0x54>)
 8021c16:	e9c0 1300 	strd	r1, r3, [r0]
 8021c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8021c48 <srand+0x58>)
 8021c1c:	6083      	str	r3, [r0, #8]
 8021c1e:	230b      	movs	r3, #11
 8021c20:	8183      	strh	r3, [r0, #12]
 8021c22:	2100      	movs	r1, #0
 8021c24:	2001      	movs	r0, #1
 8021c26:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021c2a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021c2c:	2200      	movs	r2, #0
 8021c2e:	611c      	str	r4, [r3, #16]
 8021c30:	615a      	str	r2, [r3, #20]
 8021c32:	bd38      	pop	{r3, r4, r5, pc}
 8021c34:	24001424 	.word	0x24001424
 8021c38:	080259fa 	.word	0x080259fa
 8021c3c:	08025a11 	.word	0x08025a11
 8021c40:	abcd330e 	.word	0xabcd330e
 8021c44:	e66d1234 	.word	0xe66d1234
 8021c48:	0005deec 	.word	0x0005deec

08021c4c <rand>:
 8021c4c:	4b16      	ldr	r3, [pc, #88]	@ (8021ca8 <rand+0x5c>)
 8021c4e:	b510      	push	{r4, lr}
 8021c50:	681c      	ldr	r4, [r3, #0]
 8021c52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021c54:	b9b3      	cbnz	r3, 8021c84 <rand+0x38>
 8021c56:	2018      	movs	r0, #24
 8021c58:	f7ff ff0c 	bl	8021a74 <malloc>
 8021c5c:	4602      	mov	r2, r0
 8021c5e:	6320      	str	r0, [r4, #48]	@ 0x30
 8021c60:	b920      	cbnz	r0, 8021c6c <rand+0x20>
 8021c62:	4b12      	ldr	r3, [pc, #72]	@ (8021cac <rand+0x60>)
 8021c64:	4812      	ldr	r0, [pc, #72]	@ (8021cb0 <rand+0x64>)
 8021c66:	2152      	movs	r1, #82	@ 0x52
 8021c68:	f000 fc94 	bl	8022594 <__assert_func>
 8021c6c:	4911      	ldr	r1, [pc, #68]	@ (8021cb4 <rand+0x68>)
 8021c6e:	4b12      	ldr	r3, [pc, #72]	@ (8021cb8 <rand+0x6c>)
 8021c70:	e9c0 1300 	strd	r1, r3, [r0]
 8021c74:	4b11      	ldr	r3, [pc, #68]	@ (8021cbc <rand+0x70>)
 8021c76:	6083      	str	r3, [r0, #8]
 8021c78:	230b      	movs	r3, #11
 8021c7a:	8183      	strh	r3, [r0, #12]
 8021c7c:	2100      	movs	r1, #0
 8021c7e:	2001      	movs	r0, #1
 8021c80:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021c84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021c86:	480e      	ldr	r0, [pc, #56]	@ (8021cc0 <rand+0x74>)
 8021c88:	690b      	ldr	r3, [r1, #16]
 8021c8a:	694c      	ldr	r4, [r1, #20]
 8021c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8021cc4 <rand+0x78>)
 8021c8e:	4358      	muls	r0, r3
 8021c90:	fb02 0004 	mla	r0, r2, r4, r0
 8021c94:	fba3 3202 	umull	r3, r2, r3, r2
 8021c98:	3301      	adds	r3, #1
 8021c9a:	eb40 0002 	adc.w	r0, r0, r2
 8021c9e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021ca2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021ca6:	bd10      	pop	{r4, pc}
 8021ca8:	24001424 	.word	0x24001424
 8021cac:	080259fa 	.word	0x080259fa
 8021cb0:	08025a11 	.word	0x08025a11
 8021cb4:	abcd330e 	.word	0xabcd330e
 8021cb8:	e66d1234 	.word	0xe66d1234
 8021cbc:	0005deec 	.word	0x0005deec
 8021cc0:	5851f42d 	.word	0x5851f42d
 8021cc4:	4c957f2d 	.word	0x4c957f2d

08021cc8 <realloc>:
 8021cc8:	4b02      	ldr	r3, [pc, #8]	@ (8021cd4 <realloc+0xc>)
 8021cca:	460a      	mov	r2, r1
 8021ccc:	4601      	mov	r1, r0
 8021cce:	6818      	ldr	r0, [r3, #0]
 8021cd0:	f000 b802 	b.w	8021cd8 <_realloc_r>
 8021cd4:	24001424 	.word	0x24001424

08021cd8 <_realloc_r>:
 8021cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021cdc:	4680      	mov	r8, r0
 8021cde:	4615      	mov	r5, r2
 8021ce0:	460c      	mov	r4, r1
 8021ce2:	b921      	cbnz	r1, 8021cee <_realloc_r+0x16>
 8021ce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021ce8:	4611      	mov	r1, r2
 8021cea:	f7ff bef5 	b.w	8021ad8 <_malloc_r>
 8021cee:	b92a      	cbnz	r2, 8021cfc <_realloc_r+0x24>
 8021cf0:	f000 fc7a 	bl	80225e8 <_free_r>
 8021cf4:	2400      	movs	r4, #0
 8021cf6:	4620      	mov	r0, r4
 8021cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021cfc:	f000 fcbe 	bl	802267c <_malloc_usable_size_r>
 8021d00:	4285      	cmp	r5, r0
 8021d02:	4606      	mov	r6, r0
 8021d04:	d802      	bhi.n	8021d0c <_realloc_r+0x34>
 8021d06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021d0a:	d8f4      	bhi.n	8021cf6 <_realloc_r+0x1e>
 8021d0c:	4629      	mov	r1, r5
 8021d0e:	4640      	mov	r0, r8
 8021d10:	f7ff fee2 	bl	8021ad8 <_malloc_r>
 8021d14:	4607      	mov	r7, r0
 8021d16:	2800      	cmp	r0, #0
 8021d18:	d0ec      	beq.n	8021cf4 <_realloc_r+0x1c>
 8021d1a:	42b5      	cmp	r5, r6
 8021d1c:	462a      	mov	r2, r5
 8021d1e:	4621      	mov	r1, r4
 8021d20:	bf28      	it	cs
 8021d22:	4632      	movcs	r2, r6
 8021d24:	f000 fc27 	bl	8022576 <memcpy>
 8021d28:	4621      	mov	r1, r4
 8021d2a:	4640      	mov	r0, r8
 8021d2c:	f000 fc5c 	bl	80225e8 <_free_r>
 8021d30:	463c      	mov	r4, r7
 8021d32:	e7e0      	b.n	8021cf6 <_realloc_r+0x1e>

08021d34 <_strtoul_l.constprop.0>:
 8021d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021d38:	4e34      	ldr	r6, [pc, #208]	@ (8021e0c <_strtoul_l.constprop.0+0xd8>)
 8021d3a:	4686      	mov	lr, r0
 8021d3c:	460d      	mov	r5, r1
 8021d3e:	4628      	mov	r0, r5
 8021d40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021d44:	5d37      	ldrb	r7, [r6, r4]
 8021d46:	f017 0708 	ands.w	r7, r7, #8
 8021d4a:	d1f8      	bne.n	8021d3e <_strtoul_l.constprop.0+0xa>
 8021d4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8021d4e:	d12f      	bne.n	8021db0 <_strtoul_l.constprop.0+0x7c>
 8021d50:	782c      	ldrb	r4, [r5, #0]
 8021d52:	2701      	movs	r7, #1
 8021d54:	1c85      	adds	r5, r0, #2
 8021d56:	f033 0010 	bics.w	r0, r3, #16
 8021d5a:	d109      	bne.n	8021d70 <_strtoul_l.constprop.0+0x3c>
 8021d5c:	2c30      	cmp	r4, #48	@ 0x30
 8021d5e:	d12c      	bne.n	8021dba <_strtoul_l.constprop.0+0x86>
 8021d60:	7828      	ldrb	r0, [r5, #0]
 8021d62:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8021d66:	2858      	cmp	r0, #88	@ 0x58
 8021d68:	d127      	bne.n	8021dba <_strtoul_l.constprop.0+0x86>
 8021d6a:	786c      	ldrb	r4, [r5, #1]
 8021d6c:	2310      	movs	r3, #16
 8021d6e:	3502      	adds	r5, #2
 8021d70:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8021d74:	2600      	movs	r6, #0
 8021d76:	fbb8 f8f3 	udiv	r8, r8, r3
 8021d7a:	fb03 f908 	mul.w	r9, r3, r8
 8021d7e:	ea6f 0909 	mvn.w	r9, r9
 8021d82:	4630      	mov	r0, r6
 8021d84:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8021d88:	f1bc 0f09 	cmp.w	ip, #9
 8021d8c:	d81c      	bhi.n	8021dc8 <_strtoul_l.constprop.0+0x94>
 8021d8e:	4664      	mov	r4, ip
 8021d90:	42a3      	cmp	r3, r4
 8021d92:	dd2a      	ble.n	8021dea <_strtoul_l.constprop.0+0xb6>
 8021d94:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8021d98:	d007      	beq.n	8021daa <_strtoul_l.constprop.0+0x76>
 8021d9a:	4580      	cmp	r8, r0
 8021d9c:	d322      	bcc.n	8021de4 <_strtoul_l.constprop.0+0xb0>
 8021d9e:	d101      	bne.n	8021da4 <_strtoul_l.constprop.0+0x70>
 8021da0:	45a1      	cmp	r9, r4
 8021da2:	db1f      	blt.n	8021de4 <_strtoul_l.constprop.0+0xb0>
 8021da4:	fb00 4003 	mla	r0, r0, r3, r4
 8021da8:	2601      	movs	r6, #1
 8021daa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021dae:	e7e9      	b.n	8021d84 <_strtoul_l.constprop.0+0x50>
 8021db0:	2c2b      	cmp	r4, #43	@ 0x2b
 8021db2:	bf04      	itt	eq
 8021db4:	782c      	ldrbeq	r4, [r5, #0]
 8021db6:	1c85      	addeq	r5, r0, #2
 8021db8:	e7cd      	b.n	8021d56 <_strtoul_l.constprop.0+0x22>
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d1d8      	bne.n	8021d70 <_strtoul_l.constprop.0+0x3c>
 8021dbe:	2c30      	cmp	r4, #48	@ 0x30
 8021dc0:	bf0c      	ite	eq
 8021dc2:	2308      	moveq	r3, #8
 8021dc4:	230a      	movne	r3, #10
 8021dc6:	e7d3      	b.n	8021d70 <_strtoul_l.constprop.0+0x3c>
 8021dc8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021dcc:	f1bc 0f19 	cmp.w	ip, #25
 8021dd0:	d801      	bhi.n	8021dd6 <_strtoul_l.constprop.0+0xa2>
 8021dd2:	3c37      	subs	r4, #55	@ 0x37
 8021dd4:	e7dc      	b.n	8021d90 <_strtoul_l.constprop.0+0x5c>
 8021dd6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021dda:	f1bc 0f19 	cmp.w	ip, #25
 8021dde:	d804      	bhi.n	8021dea <_strtoul_l.constprop.0+0xb6>
 8021de0:	3c57      	subs	r4, #87	@ 0x57
 8021de2:	e7d5      	b.n	8021d90 <_strtoul_l.constprop.0+0x5c>
 8021de4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8021de8:	e7df      	b.n	8021daa <_strtoul_l.constprop.0+0x76>
 8021dea:	1c73      	adds	r3, r6, #1
 8021dec:	d106      	bne.n	8021dfc <_strtoul_l.constprop.0+0xc8>
 8021dee:	2322      	movs	r3, #34	@ 0x22
 8021df0:	f8ce 3000 	str.w	r3, [lr]
 8021df4:	4630      	mov	r0, r6
 8021df6:	b932      	cbnz	r2, 8021e06 <_strtoul_l.constprop.0+0xd2>
 8021df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021dfc:	b107      	cbz	r7, 8021e00 <_strtoul_l.constprop.0+0xcc>
 8021dfe:	4240      	negs	r0, r0
 8021e00:	2a00      	cmp	r2, #0
 8021e02:	d0f9      	beq.n	8021df8 <_strtoul_l.constprop.0+0xc4>
 8021e04:	b106      	cbz	r6, 8021e08 <_strtoul_l.constprop.0+0xd4>
 8021e06:	1e69      	subs	r1, r5, #1
 8021e08:	6011      	str	r1, [r2, #0]
 8021e0a:	e7f5      	b.n	8021df8 <_strtoul_l.constprop.0+0xc4>
 8021e0c:	08025a6a 	.word	0x08025a6a

08021e10 <strtoul>:
 8021e10:	4613      	mov	r3, r2
 8021e12:	460a      	mov	r2, r1
 8021e14:	4601      	mov	r1, r0
 8021e16:	4802      	ldr	r0, [pc, #8]	@ (8021e20 <strtoul+0x10>)
 8021e18:	6800      	ldr	r0, [r0, #0]
 8021e1a:	f7ff bf8b 	b.w	8021d34 <_strtoul_l.constprop.0>
 8021e1e:	bf00      	nop
 8021e20:	24001424 	.word	0x24001424

08021e24 <std>:
 8021e24:	2300      	movs	r3, #0
 8021e26:	b510      	push	{r4, lr}
 8021e28:	4604      	mov	r4, r0
 8021e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8021e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021e32:	6083      	str	r3, [r0, #8]
 8021e34:	8181      	strh	r1, [r0, #12]
 8021e36:	6643      	str	r3, [r0, #100]	@ 0x64
 8021e38:	81c2      	strh	r2, [r0, #14]
 8021e3a:	6183      	str	r3, [r0, #24]
 8021e3c:	4619      	mov	r1, r3
 8021e3e:	2208      	movs	r2, #8
 8021e40:	305c      	adds	r0, #92	@ 0x5c
 8021e42:	f000 fa79 	bl	8022338 <memset>
 8021e46:	4b0d      	ldr	r3, [pc, #52]	@ (8021e7c <std+0x58>)
 8021e48:	6263      	str	r3, [r4, #36]	@ 0x24
 8021e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8021e80 <std+0x5c>)
 8021e4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8021e84 <std+0x60>)
 8021e50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021e52:	4b0d      	ldr	r3, [pc, #52]	@ (8021e88 <std+0x64>)
 8021e54:	6323      	str	r3, [r4, #48]	@ 0x30
 8021e56:	4b0d      	ldr	r3, [pc, #52]	@ (8021e8c <std+0x68>)
 8021e58:	6224      	str	r4, [r4, #32]
 8021e5a:	429c      	cmp	r4, r3
 8021e5c:	d006      	beq.n	8021e6c <std+0x48>
 8021e5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021e62:	4294      	cmp	r4, r2
 8021e64:	d002      	beq.n	8021e6c <std+0x48>
 8021e66:	33d0      	adds	r3, #208	@ 0xd0
 8021e68:	429c      	cmp	r4, r3
 8021e6a:	d105      	bne.n	8021e78 <std+0x54>
 8021e6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e74:	f000 bb74 	b.w	8022560 <__retarget_lock_init_recursive>
 8021e78:	bd10      	pop	{r4, pc}
 8021e7a:	bf00      	nop
 8021e7c:	080220c5 	.word	0x080220c5
 8021e80:	080220e7 	.word	0x080220e7
 8021e84:	0802211f 	.word	0x0802211f
 8021e88:	08022143 	.word	0x08022143
 8021e8c:	2406970c 	.word	0x2406970c

08021e90 <stdio_exit_handler>:
 8021e90:	4a02      	ldr	r2, [pc, #8]	@ (8021e9c <stdio_exit_handler+0xc>)
 8021e92:	4903      	ldr	r1, [pc, #12]	@ (8021ea0 <stdio_exit_handler+0x10>)
 8021e94:	4803      	ldr	r0, [pc, #12]	@ (8021ea4 <stdio_exit_handler+0x14>)
 8021e96:	f000 b869 	b.w	8021f6c <_fwalk_sglue>
 8021e9a:	bf00      	nop
 8021e9c:	24001418 	.word	0x24001418
 8021ea0:	08022d61 	.word	0x08022d61
 8021ea4:	24001428 	.word	0x24001428

08021ea8 <cleanup_stdio>:
 8021ea8:	6841      	ldr	r1, [r0, #4]
 8021eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8021edc <cleanup_stdio+0x34>)
 8021eac:	4299      	cmp	r1, r3
 8021eae:	b510      	push	{r4, lr}
 8021eb0:	4604      	mov	r4, r0
 8021eb2:	d001      	beq.n	8021eb8 <cleanup_stdio+0x10>
 8021eb4:	f000 ff54 	bl	8022d60 <_fflush_r>
 8021eb8:	68a1      	ldr	r1, [r4, #8]
 8021eba:	4b09      	ldr	r3, [pc, #36]	@ (8021ee0 <cleanup_stdio+0x38>)
 8021ebc:	4299      	cmp	r1, r3
 8021ebe:	d002      	beq.n	8021ec6 <cleanup_stdio+0x1e>
 8021ec0:	4620      	mov	r0, r4
 8021ec2:	f000 ff4d 	bl	8022d60 <_fflush_r>
 8021ec6:	68e1      	ldr	r1, [r4, #12]
 8021ec8:	4b06      	ldr	r3, [pc, #24]	@ (8021ee4 <cleanup_stdio+0x3c>)
 8021eca:	4299      	cmp	r1, r3
 8021ecc:	d004      	beq.n	8021ed8 <cleanup_stdio+0x30>
 8021ece:	4620      	mov	r0, r4
 8021ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ed4:	f000 bf44 	b.w	8022d60 <_fflush_r>
 8021ed8:	bd10      	pop	{r4, pc}
 8021eda:	bf00      	nop
 8021edc:	2406970c 	.word	0x2406970c
 8021ee0:	24069774 	.word	0x24069774
 8021ee4:	240697dc 	.word	0x240697dc

08021ee8 <global_stdio_init.part.0>:
 8021ee8:	b510      	push	{r4, lr}
 8021eea:	4b0b      	ldr	r3, [pc, #44]	@ (8021f18 <global_stdio_init.part.0+0x30>)
 8021eec:	4c0b      	ldr	r4, [pc, #44]	@ (8021f1c <global_stdio_init.part.0+0x34>)
 8021eee:	4a0c      	ldr	r2, [pc, #48]	@ (8021f20 <global_stdio_init.part.0+0x38>)
 8021ef0:	601a      	str	r2, [r3, #0]
 8021ef2:	4620      	mov	r0, r4
 8021ef4:	2200      	movs	r2, #0
 8021ef6:	2104      	movs	r1, #4
 8021ef8:	f7ff ff94 	bl	8021e24 <std>
 8021efc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021f00:	2201      	movs	r2, #1
 8021f02:	2109      	movs	r1, #9
 8021f04:	f7ff ff8e 	bl	8021e24 <std>
 8021f08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021f0c:	2202      	movs	r2, #2
 8021f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f12:	2112      	movs	r1, #18
 8021f14:	f7ff bf86 	b.w	8021e24 <std>
 8021f18:	24069844 	.word	0x24069844
 8021f1c:	2406970c 	.word	0x2406970c
 8021f20:	08021e91 	.word	0x08021e91

08021f24 <__sfp_lock_acquire>:
 8021f24:	4801      	ldr	r0, [pc, #4]	@ (8021f2c <__sfp_lock_acquire+0x8>)
 8021f26:	f000 bb1c 	b.w	8022562 <__retarget_lock_acquire_recursive>
 8021f2a:	bf00      	nop
 8021f2c:	2406984e 	.word	0x2406984e

08021f30 <__sfp_lock_release>:
 8021f30:	4801      	ldr	r0, [pc, #4]	@ (8021f38 <__sfp_lock_release+0x8>)
 8021f32:	f000 bb17 	b.w	8022564 <__retarget_lock_release_recursive>
 8021f36:	bf00      	nop
 8021f38:	2406984e 	.word	0x2406984e

08021f3c <__sinit>:
 8021f3c:	b510      	push	{r4, lr}
 8021f3e:	4604      	mov	r4, r0
 8021f40:	f7ff fff0 	bl	8021f24 <__sfp_lock_acquire>
 8021f44:	6a23      	ldr	r3, [r4, #32]
 8021f46:	b11b      	cbz	r3, 8021f50 <__sinit+0x14>
 8021f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f4c:	f7ff bff0 	b.w	8021f30 <__sfp_lock_release>
 8021f50:	4b04      	ldr	r3, [pc, #16]	@ (8021f64 <__sinit+0x28>)
 8021f52:	6223      	str	r3, [r4, #32]
 8021f54:	4b04      	ldr	r3, [pc, #16]	@ (8021f68 <__sinit+0x2c>)
 8021f56:	681b      	ldr	r3, [r3, #0]
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	d1f5      	bne.n	8021f48 <__sinit+0xc>
 8021f5c:	f7ff ffc4 	bl	8021ee8 <global_stdio_init.part.0>
 8021f60:	e7f2      	b.n	8021f48 <__sinit+0xc>
 8021f62:	bf00      	nop
 8021f64:	08021ea9 	.word	0x08021ea9
 8021f68:	24069844 	.word	0x24069844

08021f6c <_fwalk_sglue>:
 8021f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f70:	4607      	mov	r7, r0
 8021f72:	4688      	mov	r8, r1
 8021f74:	4614      	mov	r4, r2
 8021f76:	2600      	movs	r6, #0
 8021f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021f7c:	f1b9 0901 	subs.w	r9, r9, #1
 8021f80:	d505      	bpl.n	8021f8e <_fwalk_sglue+0x22>
 8021f82:	6824      	ldr	r4, [r4, #0]
 8021f84:	2c00      	cmp	r4, #0
 8021f86:	d1f7      	bne.n	8021f78 <_fwalk_sglue+0xc>
 8021f88:	4630      	mov	r0, r6
 8021f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f8e:	89ab      	ldrh	r3, [r5, #12]
 8021f90:	2b01      	cmp	r3, #1
 8021f92:	d907      	bls.n	8021fa4 <_fwalk_sglue+0x38>
 8021f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021f98:	3301      	adds	r3, #1
 8021f9a:	d003      	beq.n	8021fa4 <_fwalk_sglue+0x38>
 8021f9c:	4629      	mov	r1, r5
 8021f9e:	4638      	mov	r0, r7
 8021fa0:	47c0      	blx	r8
 8021fa2:	4306      	orrs	r6, r0
 8021fa4:	3568      	adds	r5, #104	@ 0x68
 8021fa6:	e7e9      	b.n	8021f7c <_fwalk_sglue+0x10>

08021fa8 <_fwrite_r>:
 8021fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fac:	9c08      	ldr	r4, [sp, #32]
 8021fae:	468a      	mov	sl, r1
 8021fb0:	4690      	mov	r8, r2
 8021fb2:	fb02 f903 	mul.w	r9, r2, r3
 8021fb6:	4606      	mov	r6, r0
 8021fb8:	b118      	cbz	r0, 8021fc2 <_fwrite_r+0x1a>
 8021fba:	6a03      	ldr	r3, [r0, #32]
 8021fbc:	b90b      	cbnz	r3, 8021fc2 <_fwrite_r+0x1a>
 8021fbe:	f7ff ffbd 	bl	8021f3c <__sinit>
 8021fc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021fc4:	07dd      	lsls	r5, r3, #31
 8021fc6:	d405      	bmi.n	8021fd4 <_fwrite_r+0x2c>
 8021fc8:	89a3      	ldrh	r3, [r4, #12]
 8021fca:	0598      	lsls	r0, r3, #22
 8021fcc:	d402      	bmi.n	8021fd4 <_fwrite_r+0x2c>
 8021fce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021fd0:	f000 fac7 	bl	8022562 <__retarget_lock_acquire_recursive>
 8021fd4:	89a3      	ldrh	r3, [r4, #12]
 8021fd6:	0719      	lsls	r1, r3, #28
 8021fd8:	d516      	bpl.n	8022008 <_fwrite_r+0x60>
 8021fda:	6923      	ldr	r3, [r4, #16]
 8021fdc:	b1a3      	cbz	r3, 8022008 <_fwrite_r+0x60>
 8021fde:	2500      	movs	r5, #0
 8021fe0:	454d      	cmp	r5, r9
 8021fe2:	d01f      	beq.n	8022024 <_fwrite_r+0x7c>
 8021fe4:	68a7      	ldr	r7, [r4, #8]
 8021fe6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8021fea:	3f01      	subs	r7, #1
 8021fec:	2f00      	cmp	r7, #0
 8021fee:	60a7      	str	r7, [r4, #8]
 8021ff0:	da04      	bge.n	8021ffc <_fwrite_r+0x54>
 8021ff2:	69a3      	ldr	r3, [r4, #24]
 8021ff4:	429f      	cmp	r7, r3
 8021ff6:	db0f      	blt.n	8022018 <_fwrite_r+0x70>
 8021ff8:	290a      	cmp	r1, #10
 8021ffa:	d00d      	beq.n	8022018 <_fwrite_r+0x70>
 8021ffc:	6823      	ldr	r3, [r4, #0]
 8021ffe:	1c5a      	adds	r2, r3, #1
 8022000:	6022      	str	r2, [r4, #0]
 8022002:	7019      	strb	r1, [r3, #0]
 8022004:	3501      	adds	r5, #1
 8022006:	e7eb      	b.n	8021fe0 <_fwrite_r+0x38>
 8022008:	4621      	mov	r1, r4
 802200a:	4630      	mov	r0, r6
 802200c:	f000 f914 	bl	8022238 <__swsetup_r>
 8022010:	2800      	cmp	r0, #0
 8022012:	d0e4      	beq.n	8021fde <_fwrite_r+0x36>
 8022014:	2500      	movs	r5, #0
 8022016:	e005      	b.n	8022024 <_fwrite_r+0x7c>
 8022018:	4622      	mov	r2, r4
 802201a:	4630      	mov	r0, r6
 802201c:	f000 f8ce 	bl	80221bc <__swbuf_r>
 8022020:	3001      	adds	r0, #1
 8022022:	d1ef      	bne.n	8022004 <_fwrite_r+0x5c>
 8022024:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022026:	07da      	lsls	r2, r3, #31
 8022028:	d405      	bmi.n	8022036 <_fwrite_r+0x8e>
 802202a:	89a3      	ldrh	r3, [r4, #12]
 802202c:	059b      	lsls	r3, r3, #22
 802202e:	d402      	bmi.n	8022036 <_fwrite_r+0x8e>
 8022030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022032:	f000 fa97 	bl	8022564 <__retarget_lock_release_recursive>
 8022036:	fbb5 f0f8 	udiv	r0, r5, r8
 802203a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08022040 <fwrite>:
 8022040:	b507      	push	{r0, r1, r2, lr}
 8022042:	9300      	str	r3, [sp, #0]
 8022044:	4613      	mov	r3, r2
 8022046:	460a      	mov	r2, r1
 8022048:	4601      	mov	r1, r0
 802204a:	4803      	ldr	r0, [pc, #12]	@ (8022058 <fwrite+0x18>)
 802204c:	6800      	ldr	r0, [r0, #0]
 802204e:	f7ff ffab 	bl	8021fa8 <_fwrite_r>
 8022052:	b003      	add	sp, #12
 8022054:	f85d fb04 	ldr.w	pc, [sp], #4
 8022058:	24001424 	.word	0x24001424

0802205c <sniprintf>:
 802205c:	b40c      	push	{r2, r3}
 802205e:	b530      	push	{r4, r5, lr}
 8022060:	4b17      	ldr	r3, [pc, #92]	@ (80220c0 <sniprintf+0x64>)
 8022062:	1e0c      	subs	r4, r1, #0
 8022064:	681d      	ldr	r5, [r3, #0]
 8022066:	b09d      	sub	sp, #116	@ 0x74
 8022068:	da08      	bge.n	802207c <sniprintf+0x20>
 802206a:	238b      	movs	r3, #139	@ 0x8b
 802206c:	602b      	str	r3, [r5, #0]
 802206e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022072:	b01d      	add	sp, #116	@ 0x74
 8022074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022078:	b002      	add	sp, #8
 802207a:	4770      	bx	lr
 802207c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022080:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022084:	bf14      	ite	ne
 8022086:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802208a:	4623      	moveq	r3, r4
 802208c:	9304      	str	r3, [sp, #16]
 802208e:	9307      	str	r3, [sp, #28]
 8022090:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022094:	9002      	str	r0, [sp, #8]
 8022096:	9006      	str	r0, [sp, #24]
 8022098:	f8ad 3016 	strh.w	r3, [sp, #22]
 802209c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802209e:	ab21      	add	r3, sp, #132	@ 0x84
 80220a0:	a902      	add	r1, sp, #8
 80220a2:	4628      	mov	r0, r5
 80220a4:	9301      	str	r3, [sp, #4]
 80220a6:	f000 fb4d 	bl	8022744 <_svfiprintf_r>
 80220aa:	1c43      	adds	r3, r0, #1
 80220ac:	bfbc      	itt	lt
 80220ae:	238b      	movlt	r3, #139	@ 0x8b
 80220b0:	602b      	strlt	r3, [r5, #0]
 80220b2:	2c00      	cmp	r4, #0
 80220b4:	d0dd      	beq.n	8022072 <sniprintf+0x16>
 80220b6:	9b02      	ldr	r3, [sp, #8]
 80220b8:	2200      	movs	r2, #0
 80220ba:	701a      	strb	r2, [r3, #0]
 80220bc:	e7d9      	b.n	8022072 <sniprintf+0x16>
 80220be:	bf00      	nop
 80220c0:	24001424 	.word	0x24001424

080220c4 <__sread>:
 80220c4:	b510      	push	{r4, lr}
 80220c6:	460c      	mov	r4, r1
 80220c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220cc:	f000 f9ea 	bl	80224a4 <_read_r>
 80220d0:	2800      	cmp	r0, #0
 80220d2:	bfab      	itete	ge
 80220d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80220d6:	89a3      	ldrhlt	r3, [r4, #12]
 80220d8:	181b      	addge	r3, r3, r0
 80220da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80220de:	bfac      	ite	ge
 80220e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80220e2:	81a3      	strhlt	r3, [r4, #12]
 80220e4:	bd10      	pop	{r4, pc}

080220e6 <__swrite>:
 80220e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220ea:	461f      	mov	r7, r3
 80220ec:	898b      	ldrh	r3, [r1, #12]
 80220ee:	05db      	lsls	r3, r3, #23
 80220f0:	4605      	mov	r5, r0
 80220f2:	460c      	mov	r4, r1
 80220f4:	4616      	mov	r6, r2
 80220f6:	d505      	bpl.n	8022104 <__swrite+0x1e>
 80220f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220fc:	2302      	movs	r3, #2
 80220fe:	2200      	movs	r2, #0
 8022100:	f000 f9be 	bl	8022480 <_lseek_r>
 8022104:	89a3      	ldrh	r3, [r4, #12]
 8022106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802210a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802210e:	81a3      	strh	r3, [r4, #12]
 8022110:	4632      	mov	r2, r6
 8022112:	463b      	mov	r3, r7
 8022114:	4628      	mov	r0, r5
 8022116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802211a:	f000 b9e5 	b.w	80224e8 <_write_r>

0802211e <__sseek>:
 802211e:	b510      	push	{r4, lr}
 8022120:	460c      	mov	r4, r1
 8022122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022126:	f000 f9ab 	bl	8022480 <_lseek_r>
 802212a:	1c43      	adds	r3, r0, #1
 802212c:	89a3      	ldrh	r3, [r4, #12]
 802212e:	bf15      	itete	ne
 8022130:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802213a:	81a3      	strheq	r3, [r4, #12]
 802213c:	bf18      	it	ne
 802213e:	81a3      	strhne	r3, [r4, #12]
 8022140:	bd10      	pop	{r4, pc}

08022142 <__sclose>:
 8022142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022146:	f000 b935 	b.w	80223b4 <_close_r>

0802214a <_vsniprintf_r>:
 802214a:	b530      	push	{r4, r5, lr}
 802214c:	4614      	mov	r4, r2
 802214e:	2c00      	cmp	r4, #0
 8022150:	b09b      	sub	sp, #108	@ 0x6c
 8022152:	4605      	mov	r5, r0
 8022154:	461a      	mov	r2, r3
 8022156:	da05      	bge.n	8022164 <_vsniprintf_r+0x1a>
 8022158:	238b      	movs	r3, #139	@ 0x8b
 802215a:	6003      	str	r3, [r0, #0]
 802215c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022160:	b01b      	add	sp, #108	@ 0x6c
 8022162:	bd30      	pop	{r4, r5, pc}
 8022164:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022168:	f8ad 300c 	strh.w	r3, [sp, #12]
 802216c:	bf14      	ite	ne
 802216e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8022172:	4623      	moveq	r3, r4
 8022174:	9302      	str	r3, [sp, #8]
 8022176:	9305      	str	r3, [sp, #20]
 8022178:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802217c:	9100      	str	r1, [sp, #0]
 802217e:	9104      	str	r1, [sp, #16]
 8022180:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022184:	4669      	mov	r1, sp
 8022186:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022188:	f000 fadc 	bl	8022744 <_svfiprintf_r>
 802218c:	1c43      	adds	r3, r0, #1
 802218e:	bfbc      	itt	lt
 8022190:	238b      	movlt	r3, #139	@ 0x8b
 8022192:	602b      	strlt	r3, [r5, #0]
 8022194:	2c00      	cmp	r4, #0
 8022196:	d0e3      	beq.n	8022160 <_vsniprintf_r+0x16>
 8022198:	9b00      	ldr	r3, [sp, #0]
 802219a:	2200      	movs	r2, #0
 802219c:	701a      	strb	r2, [r3, #0]
 802219e:	e7df      	b.n	8022160 <_vsniprintf_r+0x16>

080221a0 <vsniprintf>:
 80221a0:	b507      	push	{r0, r1, r2, lr}
 80221a2:	9300      	str	r3, [sp, #0]
 80221a4:	4613      	mov	r3, r2
 80221a6:	460a      	mov	r2, r1
 80221a8:	4601      	mov	r1, r0
 80221aa:	4803      	ldr	r0, [pc, #12]	@ (80221b8 <vsniprintf+0x18>)
 80221ac:	6800      	ldr	r0, [r0, #0]
 80221ae:	f7ff ffcc 	bl	802214a <_vsniprintf_r>
 80221b2:	b003      	add	sp, #12
 80221b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80221b8:	24001424 	.word	0x24001424

080221bc <__swbuf_r>:
 80221bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221be:	460e      	mov	r6, r1
 80221c0:	4614      	mov	r4, r2
 80221c2:	4605      	mov	r5, r0
 80221c4:	b118      	cbz	r0, 80221ce <__swbuf_r+0x12>
 80221c6:	6a03      	ldr	r3, [r0, #32]
 80221c8:	b90b      	cbnz	r3, 80221ce <__swbuf_r+0x12>
 80221ca:	f7ff feb7 	bl	8021f3c <__sinit>
 80221ce:	69a3      	ldr	r3, [r4, #24]
 80221d0:	60a3      	str	r3, [r4, #8]
 80221d2:	89a3      	ldrh	r3, [r4, #12]
 80221d4:	071a      	lsls	r2, r3, #28
 80221d6:	d501      	bpl.n	80221dc <__swbuf_r+0x20>
 80221d8:	6923      	ldr	r3, [r4, #16]
 80221da:	b943      	cbnz	r3, 80221ee <__swbuf_r+0x32>
 80221dc:	4621      	mov	r1, r4
 80221de:	4628      	mov	r0, r5
 80221e0:	f000 f82a 	bl	8022238 <__swsetup_r>
 80221e4:	b118      	cbz	r0, 80221ee <__swbuf_r+0x32>
 80221e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80221ea:	4638      	mov	r0, r7
 80221ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80221ee:	6823      	ldr	r3, [r4, #0]
 80221f0:	6922      	ldr	r2, [r4, #16]
 80221f2:	1a98      	subs	r0, r3, r2
 80221f4:	6963      	ldr	r3, [r4, #20]
 80221f6:	b2f6      	uxtb	r6, r6
 80221f8:	4283      	cmp	r3, r0
 80221fa:	4637      	mov	r7, r6
 80221fc:	dc05      	bgt.n	802220a <__swbuf_r+0x4e>
 80221fe:	4621      	mov	r1, r4
 8022200:	4628      	mov	r0, r5
 8022202:	f000 fdad 	bl	8022d60 <_fflush_r>
 8022206:	2800      	cmp	r0, #0
 8022208:	d1ed      	bne.n	80221e6 <__swbuf_r+0x2a>
 802220a:	68a3      	ldr	r3, [r4, #8]
 802220c:	3b01      	subs	r3, #1
 802220e:	60a3      	str	r3, [r4, #8]
 8022210:	6823      	ldr	r3, [r4, #0]
 8022212:	1c5a      	adds	r2, r3, #1
 8022214:	6022      	str	r2, [r4, #0]
 8022216:	701e      	strb	r6, [r3, #0]
 8022218:	6962      	ldr	r2, [r4, #20]
 802221a:	1c43      	adds	r3, r0, #1
 802221c:	429a      	cmp	r2, r3
 802221e:	d004      	beq.n	802222a <__swbuf_r+0x6e>
 8022220:	89a3      	ldrh	r3, [r4, #12]
 8022222:	07db      	lsls	r3, r3, #31
 8022224:	d5e1      	bpl.n	80221ea <__swbuf_r+0x2e>
 8022226:	2e0a      	cmp	r6, #10
 8022228:	d1df      	bne.n	80221ea <__swbuf_r+0x2e>
 802222a:	4621      	mov	r1, r4
 802222c:	4628      	mov	r0, r5
 802222e:	f000 fd97 	bl	8022d60 <_fflush_r>
 8022232:	2800      	cmp	r0, #0
 8022234:	d0d9      	beq.n	80221ea <__swbuf_r+0x2e>
 8022236:	e7d6      	b.n	80221e6 <__swbuf_r+0x2a>

08022238 <__swsetup_r>:
 8022238:	b538      	push	{r3, r4, r5, lr}
 802223a:	4b29      	ldr	r3, [pc, #164]	@ (80222e0 <__swsetup_r+0xa8>)
 802223c:	4605      	mov	r5, r0
 802223e:	6818      	ldr	r0, [r3, #0]
 8022240:	460c      	mov	r4, r1
 8022242:	b118      	cbz	r0, 802224c <__swsetup_r+0x14>
 8022244:	6a03      	ldr	r3, [r0, #32]
 8022246:	b90b      	cbnz	r3, 802224c <__swsetup_r+0x14>
 8022248:	f7ff fe78 	bl	8021f3c <__sinit>
 802224c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022250:	0719      	lsls	r1, r3, #28
 8022252:	d422      	bmi.n	802229a <__swsetup_r+0x62>
 8022254:	06da      	lsls	r2, r3, #27
 8022256:	d407      	bmi.n	8022268 <__swsetup_r+0x30>
 8022258:	2209      	movs	r2, #9
 802225a:	602a      	str	r2, [r5, #0]
 802225c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022260:	81a3      	strh	r3, [r4, #12]
 8022262:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022266:	e033      	b.n	80222d0 <__swsetup_r+0x98>
 8022268:	0758      	lsls	r0, r3, #29
 802226a:	d512      	bpl.n	8022292 <__swsetup_r+0x5a>
 802226c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802226e:	b141      	cbz	r1, 8022282 <__swsetup_r+0x4a>
 8022270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022274:	4299      	cmp	r1, r3
 8022276:	d002      	beq.n	802227e <__swsetup_r+0x46>
 8022278:	4628      	mov	r0, r5
 802227a:	f000 f9b5 	bl	80225e8 <_free_r>
 802227e:	2300      	movs	r3, #0
 8022280:	6363      	str	r3, [r4, #52]	@ 0x34
 8022282:	89a3      	ldrh	r3, [r4, #12]
 8022284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022288:	81a3      	strh	r3, [r4, #12]
 802228a:	2300      	movs	r3, #0
 802228c:	6063      	str	r3, [r4, #4]
 802228e:	6923      	ldr	r3, [r4, #16]
 8022290:	6023      	str	r3, [r4, #0]
 8022292:	89a3      	ldrh	r3, [r4, #12]
 8022294:	f043 0308 	orr.w	r3, r3, #8
 8022298:	81a3      	strh	r3, [r4, #12]
 802229a:	6923      	ldr	r3, [r4, #16]
 802229c:	b94b      	cbnz	r3, 80222b2 <__swsetup_r+0x7a>
 802229e:	89a3      	ldrh	r3, [r4, #12]
 80222a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80222a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80222a8:	d003      	beq.n	80222b2 <__swsetup_r+0x7a>
 80222aa:	4621      	mov	r1, r4
 80222ac:	4628      	mov	r0, r5
 80222ae:	f000 fdb7 	bl	8022e20 <__smakebuf_r>
 80222b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80222b6:	f013 0201 	ands.w	r2, r3, #1
 80222ba:	d00a      	beq.n	80222d2 <__swsetup_r+0x9a>
 80222bc:	2200      	movs	r2, #0
 80222be:	60a2      	str	r2, [r4, #8]
 80222c0:	6962      	ldr	r2, [r4, #20]
 80222c2:	4252      	negs	r2, r2
 80222c4:	61a2      	str	r2, [r4, #24]
 80222c6:	6922      	ldr	r2, [r4, #16]
 80222c8:	b942      	cbnz	r2, 80222dc <__swsetup_r+0xa4>
 80222ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80222ce:	d1c5      	bne.n	802225c <__swsetup_r+0x24>
 80222d0:	bd38      	pop	{r3, r4, r5, pc}
 80222d2:	0799      	lsls	r1, r3, #30
 80222d4:	bf58      	it	pl
 80222d6:	6962      	ldrpl	r2, [r4, #20]
 80222d8:	60a2      	str	r2, [r4, #8]
 80222da:	e7f4      	b.n	80222c6 <__swsetup_r+0x8e>
 80222dc:	2000      	movs	r0, #0
 80222de:	e7f7      	b.n	80222d0 <__swsetup_r+0x98>
 80222e0:	24001424 	.word	0x24001424

080222e4 <memcmp>:
 80222e4:	b510      	push	{r4, lr}
 80222e6:	3901      	subs	r1, #1
 80222e8:	4402      	add	r2, r0
 80222ea:	4290      	cmp	r0, r2
 80222ec:	d101      	bne.n	80222f2 <memcmp+0xe>
 80222ee:	2000      	movs	r0, #0
 80222f0:	e005      	b.n	80222fe <memcmp+0x1a>
 80222f2:	7803      	ldrb	r3, [r0, #0]
 80222f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80222f8:	42a3      	cmp	r3, r4
 80222fa:	d001      	beq.n	8022300 <memcmp+0x1c>
 80222fc:	1b18      	subs	r0, r3, r4
 80222fe:	bd10      	pop	{r4, pc}
 8022300:	3001      	adds	r0, #1
 8022302:	e7f2      	b.n	80222ea <memcmp+0x6>

08022304 <memmove>:
 8022304:	4288      	cmp	r0, r1
 8022306:	b510      	push	{r4, lr}
 8022308:	eb01 0402 	add.w	r4, r1, r2
 802230c:	d902      	bls.n	8022314 <memmove+0x10>
 802230e:	4284      	cmp	r4, r0
 8022310:	4623      	mov	r3, r4
 8022312:	d807      	bhi.n	8022324 <memmove+0x20>
 8022314:	1e43      	subs	r3, r0, #1
 8022316:	42a1      	cmp	r1, r4
 8022318:	d008      	beq.n	802232c <memmove+0x28>
 802231a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802231e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022322:	e7f8      	b.n	8022316 <memmove+0x12>
 8022324:	4402      	add	r2, r0
 8022326:	4601      	mov	r1, r0
 8022328:	428a      	cmp	r2, r1
 802232a:	d100      	bne.n	802232e <memmove+0x2a>
 802232c:	bd10      	pop	{r4, pc}
 802232e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022336:	e7f7      	b.n	8022328 <memmove+0x24>

08022338 <memset>:
 8022338:	4402      	add	r2, r0
 802233a:	4603      	mov	r3, r0
 802233c:	4293      	cmp	r3, r2
 802233e:	d100      	bne.n	8022342 <memset+0xa>
 8022340:	4770      	bx	lr
 8022342:	f803 1b01 	strb.w	r1, [r3], #1
 8022346:	e7f9      	b.n	802233c <memset+0x4>

08022348 <strchr>:
 8022348:	b2c9      	uxtb	r1, r1
 802234a:	4603      	mov	r3, r0
 802234c:	4618      	mov	r0, r3
 802234e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022352:	b112      	cbz	r2, 802235a <strchr+0x12>
 8022354:	428a      	cmp	r2, r1
 8022356:	d1f9      	bne.n	802234c <strchr+0x4>
 8022358:	4770      	bx	lr
 802235a:	2900      	cmp	r1, #0
 802235c:	bf18      	it	ne
 802235e:	2000      	movne	r0, #0
 8022360:	4770      	bx	lr

08022362 <strncmp>:
 8022362:	b510      	push	{r4, lr}
 8022364:	b16a      	cbz	r2, 8022382 <strncmp+0x20>
 8022366:	3901      	subs	r1, #1
 8022368:	1884      	adds	r4, r0, r2
 802236a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802236e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022372:	429a      	cmp	r2, r3
 8022374:	d103      	bne.n	802237e <strncmp+0x1c>
 8022376:	42a0      	cmp	r0, r4
 8022378:	d001      	beq.n	802237e <strncmp+0x1c>
 802237a:	2a00      	cmp	r2, #0
 802237c:	d1f5      	bne.n	802236a <strncmp+0x8>
 802237e:	1ad0      	subs	r0, r2, r3
 8022380:	bd10      	pop	{r4, pc}
 8022382:	4610      	mov	r0, r2
 8022384:	e7fc      	b.n	8022380 <strncmp+0x1e>

08022386 <strstr>:
 8022386:	780a      	ldrb	r2, [r1, #0]
 8022388:	b570      	push	{r4, r5, r6, lr}
 802238a:	b96a      	cbnz	r2, 80223a8 <strstr+0x22>
 802238c:	bd70      	pop	{r4, r5, r6, pc}
 802238e:	429a      	cmp	r2, r3
 8022390:	d109      	bne.n	80223a6 <strstr+0x20>
 8022392:	460c      	mov	r4, r1
 8022394:	4605      	mov	r5, r0
 8022396:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802239a:	2b00      	cmp	r3, #0
 802239c:	d0f6      	beq.n	802238c <strstr+0x6>
 802239e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80223a2:	429e      	cmp	r6, r3
 80223a4:	d0f7      	beq.n	8022396 <strstr+0x10>
 80223a6:	3001      	adds	r0, #1
 80223a8:	7803      	ldrb	r3, [r0, #0]
 80223aa:	2b00      	cmp	r3, #0
 80223ac:	d1ef      	bne.n	802238e <strstr+0x8>
 80223ae:	4618      	mov	r0, r3
 80223b0:	e7ec      	b.n	802238c <strstr+0x6>
	...

080223b4 <_close_r>:
 80223b4:	b538      	push	{r3, r4, r5, lr}
 80223b6:	4d06      	ldr	r5, [pc, #24]	@ (80223d0 <_close_r+0x1c>)
 80223b8:	2300      	movs	r3, #0
 80223ba:	4604      	mov	r4, r0
 80223bc:	4608      	mov	r0, r1
 80223be:	602b      	str	r3, [r5, #0]
 80223c0:	f7e0 f986 	bl	80026d0 <_close>
 80223c4:	1c43      	adds	r3, r0, #1
 80223c6:	d102      	bne.n	80223ce <_close_r+0x1a>
 80223c8:	682b      	ldr	r3, [r5, #0]
 80223ca:	b103      	cbz	r3, 80223ce <_close_r+0x1a>
 80223cc:	6023      	str	r3, [r4, #0]
 80223ce:	bd38      	pop	{r3, r4, r5, pc}
 80223d0:	24069848 	.word	0x24069848

080223d4 <_reclaim_reent>:
 80223d4:	4b29      	ldr	r3, [pc, #164]	@ (802247c <_reclaim_reent+0xa8>)
 80223d6:	681b      	ldr	r3, [r3, #0]
 80223d8:	4283      	cmp	r3, r0
 80223da:	b570      	push	{r4, r5, r6, lr}
 80223dc:	4604      	mov	r4, r0
 80223de:	d04b      	beq.n	8022478 <_reclaim_reent+0xa4>
 80223e0:	69c3      	ldr	r3, [r0, #28]
 80223e2:	b1ab      	cbz	r3, 8022410 <_reclaim_reent+0x3c>
 80223e4:	68db      	ldr	r3, [r3, #12]
 80223e6:	b16b      	cbz	r3, 8022404 <_reclaim_reent+0x30>
 80223e8:	2500      	movs	r5, #0
 80223ea:	69e3      	ldr	r3, [r4, #28]
 80223ec:	68db      	ldr	r3, [r3, #12]
 80223ee:	5959      	ldr	r1, [r3, r5]
 80223f0:	2900      	cmp	r1, #0
 80223f2:	d13b      	bne.n	802246c <_reclaim_reent+0x98>
 80223f4:	3504      	adds	r5, #4
 80223f6:	2d80      	cmp	r5, #128	@ 0x80
 80223f8:	d1f7      	bne.n	80223ea <_reclaim_reent+0x16>
 80223fa:	69e3      	ldr	r3, [r4, #28]
 80223fc:	4620      	mov	r0, r4
 80223fe:	68d9      	ldr	r1, [r3, #12]
 8022400:	f000 f8f2 	bl	80225e8 <_free_r>
 8022404:	69e3      	ldr	r3, [r4, #28]
 8022406:	6819      	ldr	r1, [r3, #0]
 8022408:	b111      	cbz	r1, 8022410 <_reclaim_reent+0x3c>
 802240a:	4620      	mov	r0, r4
 802240c:	f000 f8ec 	bl	80225e8 <_free_r>
 8022410:	6961      	ldr	r1, [r4, #20]
 8022412:	b111      	cbz	r1, 802241a <_reclaim_reent+0x46>
 8022414:	4620      	mov	r0, r4
 8022416:	f000 f8e7 	bl	80225e8 <_free_r>
 802241a:	69e1      	ldr	r1, [r4, #28]
 802241c:	b111      	cbz	r1, 8022424 <_reclaim_reent+0x50>
 802241e:	4620      	mov	r0, r4
 8022420:	f000 f8e2 	bl	80225e8 <_free_r>
 8022424:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8022426:	b111      	cbz	r1, 802242e <_reclaim_reent+0x5a>
 8022428:	4620      	mov	r0, r4
 802242a:	f000 f8dd 	bl	80225e8 <_free_r>
 802242e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022430:	b111      	cbz	r1, 8022438 <_reclaim_reent+0x64>
 8022432:	4620      	mov	r0, r4
 8022434:	f000 f8d8 	bl	80225e8 <_free_r>
 8022438:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802243a:	b111      	cbz	r1, 8022442 <_reclaim_reent+0x6e>
 802243c:	4620      	mov	r0, r4
 802243e:	f000 f8d3 	bl	80225e8 <_free_r>
 8022442:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8022444:	b111      	cbz	r1, 802244c <_reclaim_reent+0x78>
 8022446:	4620      	mov	r0, r4
 8022448:	f000 f8ce 	bl	80225e8 <_free_r>
 802244c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802244e:	b111      	cbz	r1, 8022456 <_reclaim_reent+0x82>
 8022450:	4620      	mov	r0, r4
 8022452:	f000 f8c9 	bl	80225e8 <_free_r>
 8022456:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8022458:	b111      	cbz	r1, 8022460 <_reclaim_reent+0x8c>
 802245a:	4620      	mov	r0, r4
 802245c:	f000 f8c4 	bl	80225e8 <_free_r>
 8022460:	6a23      	ldr	r3, [r4, #32]
 8022462:	b14b      	cbz	r3, 8022478 <_reclaim_reent+0xa4>
 8022464:	4620      	mov	r0, r4
 8022466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802246a:	4718      	bx	r3
 802246c:	680e      	ldr	r6, [r1, #0]
 802246e:	4620      	mov	r0, r4
 8022470:	f000 f8ba 	bl	80225e8 <_free_r>
 8022474:	4631      	mov	r1, r6
 8022476:	e7bb      	b.n	80223f0 <_reclaim_reent+0x1c>
 8022478:	bd70      	pop	{r4, r5, r6, pc}
 802247a:	bf00      	nop
 802247c:	24001424 	.word	0x24001424

08022480 <_lseek_r>:
 8022480:	b538      	push	{r3, r4, r5, lr}
 8022482:	4d07      	ldr	r5, [pc, #28]	@ (80224a0 <_lseek_r+0x20>)
 8022484:	4604      	mov	r4, r0
 8022486:	4608      	mov	r0, r1
 8022488:	4611      	mov	r1, r2
 802248a:	2200      	movs	r2, #0
 802248c:	602a      	str	r2, [r5, #0]
 802248e:	461a      	mov	r2, r3
 8022490:	f7e0 f945 	bl	800271e <_lseek>
 8022494:	1c43      	adds	r3, r0, #1
 8022496:	d102      	bne.n	802249e <_lseek_r+0x1e>
 8022498:	682b      	ldr	r3, [r5, #0]
 802249a:	b103      	cbz	r3, 802249e <_lseek_r+0x1e>
 802249c:	6023      	str	r3, [r4, #0]
 802249e:	bd38      	pop	{r3, r4, r5, pc}
 80224a0:	24069848 	.word	0x24069848

080224a4 <_read_r>:
 80224a4:	b538      	push	{r3, r4, r5, lr}
 80224a6:	4d07      	ldr	r5, [pc, #28]	@ (80224c4 <_read_r+0x20>)
 80224a8:	4604      	mov	r4, r0
 80224aa:	4608      	mov	r0, r1
 80224ac:	4611      	mov	r1, r2
 80224ae:	2200      	movs	r2, #0
 80224b0:	602a      	str	r2, [r5, #0]
 80224b2:	461a      	mov	r2, r3
 80224b4:	f7e0 f8d3 	bl	800265e <_read>
 80224b8:	1c43      	adds	r3, r0, #1
 80224ba:	d102      	bne.n	80224c2 <_read_r+0x1e>
 80224bc:	682b      	ldr	r3, [r5, #0]
 80224be:	b103      	cbz	r3, 80224c2 <_read_r+0x1e>
 80224c0:	6023      	str	r3, [r4, #0]
 80224c2:	bd38      	pop	{r3, r4, r5, pc}
 80224c4:	24069848 	.word	0x24069848

080224c8 <_sbrk_r>:
 80224c8:	b538      	push	{r3, r4, r5, lr}
 80224ca:	4d06      	ldr	r5, [pc, #24]	@ (80224e4 <_sbrk_r+0x1c>)
 80224cc:	2300      	movs	r3, #0
 80224ce:	4604      	mov	r4, r0
 80224d0:	4608      	mov	r0, r1
 80224d2:	602b      	str	r3, [r5, #0]
 80224d4:	f7e0 f930 	bl	8002738 <_sbrk>
 80224d8:	1c43      	adds	r3, r0, #1
 80224da:	d102      	bne.n	80224e2 <_sbrk_r+0x1a>
 80224dc:	682b      	ldr	r3, [r5, #0]
 80224de:	b103      	cbz	r3, 80224e2 <_sbrk_r+0x1a>
 80224e0:	6023      	str	r3, [r4, #0]
 80224e2:	bd38      	pop	{r3, r4, r5, pc}
 80224e4:	24069848 	.word	0x24069848

080224e8 <_write_r>:
 80224e8:	b538      	push	{r3, r4, r5, lr}
 80224ea:	4d07      	ldr	r5, [pc, #28]	@ (8022508 <_write_r+0x20>)
 80224ec:	4604      	mov	r4, r0
 80224ee:	4608      	mov	r0, r1
 80224f0:	4611      	mov	r1, r2
 80224f2:	2200      	movs	r2, #0
 80224f4:	602a      	str	r2, [r5, #0]
 80224f6:	461a      	mov	r2, r3
 80224f8:	f7e0 f8ce 	bl	8002698 <_write>
 80224fc:	1c43      	adds	r3, r0, #1
 80224fe:	d102      	bne.n	8022506 <_write_r+0x1e>
 8022500:	682b      	ldr	r3, [r5, #0]
 8022502:	b103      	cbz	r3, 8022506 <_write_r+0x1e>
 8022504:	6023      	str	r3, [r4, #0]
 8022506:	bd38      	pop	{r3, r4, r5, pc}
 8022508:	24069848 	.word	0x24069848

0802250c <__errno>:
 802250c:	4b01      	ldr	r3, [pc, #4]	@ (8022514 <__errno+0x8>)
 802250e:	6818      	ldr	r0, [r3, #0]
 8022510:	4770      	bx	lr
 8022512:	bf00      	nop
 8022514:	24001424 	.word	0x24001424

08022518 <__libc_init_array>:
 8022518:	b570      	push	{r4, r5, r6, lr}
 802251a:	4d0d      	ldr	r5, [pc, #52]	@ (8022550 <__libc_init_array+0x38>)
 802251c:	4c0d      	ldr	r4, [pc, #52]	@ (8022554 <__libc_init_array+0x3c>)
 802251e:	1b64      	subs	r4, r4, r5
 8022520:	10a4      	asrs	r4, r4, #2
 8022522:	2600      	movs	r6, #0
 8022524:	42a6      	cmp	r6, r4
 8022526:	d109      	bne.n	802253c <__libc_init_array+0x24>
 8022528:	4d0b      	ldr	r5, [pc, #44]	@ (8022558 <__libc_init_array+0x40>)
 802252a:	4c0c      	ldr	r4, [pc, #48]	@ (802255c <__libc_init_array+0x44>)
 802252c:	f000 fe62 	bl	80231f4 <_init>
 8022530:	1b64      	subs	r4, r4, r5
 8022532:	10a4      	asrs	r4, r4, #2
 8022534:	2600      	movs	r6, #0
 8022536:	42a6      	cmp	r6, r4
 8022538:	d105      	bne.n	8022546 <__libc_init_array+0x2e>
 802253a:	bd70      	pop	{r4, r5, r6, pc}
 802253c:	f855 3b04 	ldr.w	r3, [r5], #4
 8022540:	4798      	blx	r3
 8022542:	3601      	adds	r6, #1
 8022544:	e7ee      	b.n	8022524 <__libc_init_array+0xc>
 8022546:	f855 3b04 	ldr.w	r3, [r5], #4
 802254a:	4798      	blx	r3
 802254c:	3601      	adds	r6, #1
 802254e:	e7f2      	b.n	8022536 <__libc_init_array+0x1e>
 8022550:	08025be4 	.word	0x08025be4
 8022554:	08025be4 	.word	0x08025be4
 8022558:	08025be4 	.word	0x08025be4
 802255c:	08025c28 	.word	0x08025c28

08022560 <__retarget_lock_init_recursive>:
 8022560:	4770      	bx	lr

08022562 <__retarget_lock_acquire_recursive>:
 8022562:	4770      	bx	lr

08022564 <__retarget_lock_release_recursive>:
 8022564:	4770      	bx	lr

08022566 <strcpy>:
 8022566:	4603      	mov	r3, r0
 8022568:	f811 2b01 	ldrb.w	r2, [r1], #1
 802256c:	f803 2b01 	strb.w	r2, [r3], #1
 8022570:	2a00      	cmp	r2, #0
 8022572:	d1f9      	bne.n	8022568 <strcpy+0x2>
 8022574:	4770      	bx	lr

08022576 <memcpy>:
 8022576:	440a      	add	r2, r1
 8022578:	4291      	cmp	r1, r2
 802257a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802257e:	d100      	bne.n	8022582 <memcpy+0xc>
 8022580:	4770      	bx	lr
 8022582:	b510      	push	{r4, lr}
 8022584:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022588:	f803 4f01 	strb.w	r4, [r3, #1]!
 802258c:	4291      	cmp	r1, r2
 802258e:	d1f9      	bne.n	8022584 <memcpy+0xe>
 8022590:	bd10      	pop	{r4, pc}
	...

08022594 <__assert_func>:
 8022594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022596:	4614      	mov	r4, r2
 8022598:	461a      	mov	r2, r3
 802259a:	4b09      	ldr	r3, [pc, #36]	@ (80225c0 <__assert_func+0x2c>)
 802259c:	681b      	ldr	r3, [r3, #0]
 802259e:	4605      	mov	r5, r0
 80225a0:	68d8      	ldr	r0, [r3, #12]
 80225a2:	b954      	cbnz	r4, 80225ba <__assert_func+0x26>
 80225a4:	4b07      	ldr	r3, [pc, #28]	@ (80225c4 <__assert_func+0x30>)
 80225a6:	461c      	mov	r4, r3
 80225a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80225ac:	9100      	str	r1, [sp, #0]
 80225ae:	462b      	mov	r3, r5
 80225b0:	4905      	ldr	r1, [pc, #20]	@ (80225c8 <__assert_func+0x34>)
 80225b2:	f000 fbfd 	bl	8022db0 <fiprintf>
 80225b6:	f000 fc91 	bl	8022edc <abort>
 80225ba:	4b04      	ldr	r3, [pc, #16]	@ (80225cc <__assert_func+0x38>)
 80225bc:	e7f4      	b.n	80225a8 <__assert_func+0x14>
 80225be:	bf00      	nop
 80225c0:	24001424 	.word	0x24001424
 80225c4:	08025ba5 	.word	0x08025ba5
 80225c8:	08025b77 	.word	0x08025b77
 80225cc:	08025b6a 	.word	0x08025b6a

080225d0 <__env_lock>:
 80225d0:	4801      	ldr	r0, [pc, #4]	@ (80225d8 <__env_lock+0x8>)
 80225d2:	f7ff bfc6 	b.w	8022562 <__retarget_lock_acquire_recursive>
 80225d6:	bf00      	nop
 80225d8:	2406984c 	.word	0x2406984c

080225dc <__env_unlock>:
 80225dc:	4801      	ldr	r0, [pc, #4]	@ (80225e4 <__env_unlock+0x8>)
 80225de:	f7ff bfc1 	b.w	8022564 <__retarget_lock_release_recursive>
 80225e2:	bf00      	nop
 80225e4:	2406984c 	.word	0x2406984c

080225e8 <_free_r>:
 80225e8:	b538      	push	{r3, r4, r5, lr}
 80225ea:	4605      	mov	r5, r0
 80225ec:	2900      	cmp	r1, #0
 80225ee:	d041      	beq.n	8022674 <_free_r+0x8c>
 80225f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80225f4:	1f0c      	subs	r4, r1, #4
 80225f6:	2b00      	cmp	r3, #0
 80225f8:	bfb8      	it	lt
 80225fa:	18e4      	addlt	r4, r4, r3
 80225fc:	f7ff faec 	bl	8021bd8 <__malloc_lock>
 8022600:	4a1d      	ldr	r2, [pc, #116]	@ (8022678 <_free_r+0x90>)
 8022602:	6813      	ldr	r3, [r2, #0]
 8022604:	b933      	cbnz	r3, 8022614 <_free_r+0x2c>
 8022606:	6063      	str	r3, [r4, #4]
 8022608:	6014      	str	r4, [r2, #0]
 802260a:	4628      	mov	r0, r5
 802260c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022610:	f7ff bae8 	b.w	8021be4 <__malloc_unlock>
 8022614:	42a3      	cmp	r3, r4
 8022616:	d908      	bls.n	802262a <_free_r+0x42>
 8022618:	6820      	ldr	r0, [r4, #0]
 802261a:	1821      	adds	r1, r4, r0
 802261c:	428b      	cmp	r3, r1
 802261e:	bf01      	itttt	eq
 8022620:	6819      	ldreq	r1, [r3, #0]
 8022622:	685b      	ldreq	r3, [r3, #4]
 8022624:	1809      	addeq	r1, r1, r0
 8022626:	6021      	streq	r1, [r4, #0]
 8022628:	e7ed      	b.n	8022606 <_free_r+0x1e>
 802262a:	461a      	mov	r2, r3
 802262c:	685b      	ldr	r3, [r3, #4]
 802262e:	b10b      	cbz	r3, 8022634 <_free_r+0x4c>
 8022630:	42a3      	cmp	r3, r4
 8022632:	d9fa      	bls.n	802262a <_free_r+0x42>
 8022634:	6811      	ldr	r1, [r2, #0]
 8022636:	1850      	adds	r0, r2, r1
 8022638:	42a0      	cmp	r0, r4
 802263a:	d10b      	bne.n	8022654 <_free_r+0x6c>
 802263c:	6820      	ldr	r0, [r4, #0]
 802263e:	4401      	add	r1, r0
 8022640:	1850      	adds	r0, r2, r1
 8022642:	4283      	cmp	r3, r0
 8022644:	6011      	str	r1, [r2, #0]
 8022646:	d1e0      	bne.n	802260a <_free_r+0x22>
 8022648:	6818      	ldr	r0, [r3, #0]
 802264a:	685b      	ldr	r3, [r3, #4]
 802264c:	6053      	str	r3, [r2, #4]
 802264e:	4408      	add	r0, r1
 8022650:	6010      	str	r0, [r2, #0]
 8022652:	e7da      	b.n	802260a <_free_r+0x22>
 8022654:	d902      	bls.n	802265c <_free_r+0x74>
 8022656:	230c      	movs	r3, #12
 8022658:	602b      	str	r3, [r5, #0]
 802265a:	e7d6      	b.n	802260a <_free_r+0x22>
 802265c:	6820      	ldr	r0, [r4, #0]
 802265e:	1821      	adds	r1, r4, r0
 8022660:	428b      	cmp	r3, r1
 8022662:	bf04      	itt	eq
 8022664:	6819      	ldreq	r1, [r3, #0]
 8022666:	685b      	ldreq	r3, [r3, #4]
 8022668:	6063      	str	r3, [r4, #4]
 802266a:	bf04      	itt	eq
 802266c:	1809      	addeq	r1, r1, r0
 802266e:	6021      	streq	r1, [r4, #0]
 8022670:	6054      	str	r4, [r2, #4]
 8022672:	e7ca      	b.n	802260a <_free_r+0x22>
 8022674:	bd38      	pop	{r3, r4, r5, pc}
 8022676:	bf00      	nop
 8022678:	24069708 	.word	0x24069708

0802267c <_malloc_usable_size_r>:
 802267c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022680:	1f18      	subs	r0, r3, #4
 8022682:	2b00      	cmp	r3, #0
 8022684:	bfbc      	itt	lt
 8022686:	580b      	ldrlt	r3, [r1, r0]
 8022688:	18c0      	addlt	r0, r0, r3
 802268a:	4770      	bx	lr

0802268c <__ssputs_r>:
 802268c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022690:	688e      	ldr	r6, [r1, #8]
 8022692:	461f      	mov	r7, r3
 8022694:	42be      	cmp	r6, r7
 8022696:	680b      	ldr	r3, [r1, #0]
 8022698:	4682      	mov	sl, r0
 802269a:	460c      	mov	r4, r1
 802269c:	4690      	mov	r8, r2
 802269e:	d82d      	bhi.n	80226fc <__ssputs_r+0x70>
 80226a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80226a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80226a8:	d026      	beq.n	80226f8 <__ssputs_r+0x6c>
 80226aa:	6965      	ldr	r5, [r4, #20]
 80226ac:	6909      	ldr	r1, [r1, #16]
 80226ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80226b2:	eba3 0901 	sub.w	r9, r3, r1
 80226b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80226ba:	1c7b      	adds	r3, r7, #1
 80226bc:	444b      	add	r3, r9
 80226be:	106d      	asrs	r5, r5, #1
 80226c0:	429d      	cmp	r5, r3
 80226c2:	bf38      	it	cc
 80226c4:	461d      	movcc	r5, r3
 80226c6:	0553      	lsls	r3, r2, #21
 80226c8:	d527      	bpl.n	802271a <__ssputs_r+0x8e>
 80226ca:	4629      	mov	r1, r5
 80226cc:	f7ff fa04 	bl	8021ad8 <_malloc_r>
 80226d0:	4606      	mov	r6, r0
 80226d2:	b360      	cbz	r0, 802272e <__ssputs_r+0xa2>
 80226d4:	6921      	ldr	r1, [r4, #16]
 80226d6:	464a      	mov	r2, r9
 80226d8:	f7ff ff4d 	bl	8022576 <memcpy>
 80226dc:	89a3      	ldrh	r3, [r4, #12]
 80226de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80226e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80226e6:	81a3      	strh	r3, [r4, #12]
 80226e8:	6126      	str	r6, [r4, #16]
 80226ea:	6165      	str	r5, [r4, #20]
 80226ec:	444e      	add	r6, r9
 80226ee:	eba5 0509 	sub.w	r5, r5, r9
 80226f2:	6026      	str	r6, [r4, #0]
 80226f4:	60a5      	str	r5, [r4, #8]
 80226f6:	463e      	mov	r6, r7
 80226f8:	42be      	cmp	r6, r7
 80226fa:	d900      	bls.n	80226fe <__ssputs_r+0x72>
 80226fc:	463e      	mov	r6, r7
 80226fe:	6820      	ldr	r0, [r4, #0]
 8022700:	4632      	mov	r2, r6
 8022702:	4641      	mov	r1, r8
 8022704:	f7ff fdfe 	bl	8022304 <memmove>
 8022708:	68a3      	ldr	r3, [r4, #8]
 802270a:	1b9b      	subs	r3, r3, r6
 802270c:	60a3      	str	r3, [r4, #8]
 802270e:	6823      	ldr	r3, [r4, #0]
 8022710:	4433      	add	r3, r6
 8022712:	6023      	str	r3, [r4, #0]
 8022714:	2000      	movs	r0, #0
 8022716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802271a:	462a      	mov	r2, r5
 802271c:	f7ff fadc 	bl	8021cd8 <_realloc_r>
 8022720:	4606      	mov	r6, r0
 8022722:	2800      	cmp	r0, #0
 8022724:	d1e0      	bne.n	80226e8 <__ssputs_r+0x5c>
 8022726:	6921      	ldr	r1, [r4, #16]
 8022728:	4650      	mov	r0, sl
 802272a:	f7ff ff5d 	bl	80225e8 <_free_r>
 802272e:	230c      	movs	r3, #12
 8022730:	f8ca 3000 	str.w	r3, [sl]
 8022734:	89a3      	ldrh	r3, [r4, #12]
 8022736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802273a:	81a3      	strh	r3, [r4, #12]
 802273c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022740:	e7e9      	b.n	8022716 <__ssputs_r+0x8a>
	...

08022744 <_svfiprintf_r>:
 8022744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022748:	4698      	mov	r8, r3
 802274a:	898b      	ldrh	r3, [r1, #12]
 802274c:	061b      	lsls	r3, r3, #24
 802274e:	b09d      	sub	sp, #116	@ 0x74
 8022750:	4607      	mov	r7, r0
 8022752:	460d      	mov	r5, r1
 8022754:	4614      	mov	r4, r2
 8022756:	d510      	bpl.n	802277a <_svfiprintf_r+0x36>
 8022758:	690b      	ldr	r3, [r1, #16]
 802275a:	b973      	cbnz	r3, 802277a <_svfiprintf_r+0x36>
 802275c:	2140      	movs	r1, #64	@ 0x40
 802275e:	f7ff f9bb 	bl	8021ad8 <_malloc_r>
 8022762:	6028      	str	r0, [r5, #0]
 8022764:	6128      	str	r0, [r5, #16]
 8022766:	b930      	cbnz	r0, 8022776 <_svfiprintf_r+0x32>
 8022768:	230c      	movs	r3, #12
 802276a:	603b      	str	r3, [r7, #0]
 802276c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022770:	b01d      	add	sp, #116	@ 0x74
 8022772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022776:	2340      	movs	r3, #64	@ 0x40
 8022778:	616b      	str	r3, [r5, #20]
 802277a:	2300      	movs	r3, #0
 802277c:	9309      	str	r3, [sp, #36]	@ 0x24
 802277e:	2320      	movs	r3, #32
 8022780:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022784:	f8cd 800c 	str.w	r8, [sp, #12]
 8022788:	2330      	movs	r3, #48	@ 0x30
 802278a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8022928 <_svfiprintf_r+0x1e4>
 802278e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022792:	f04f 0901 	mov.w	r9, #1
 8022796:	4623      	mov	r3, r4
 8022798:	469a      	mov	sl, r3
 802279a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802279e:	b10a      	cbz	r2, 80227a4 <_svfiprintf_r+0x60>
 80227a0:	2a25      	cmp	r2, #37	@ 0x25
 80227a2:	d1f9      	bne.n	8022798 <_svfiprintf_r+0x54>
 80227a4:	ebba 0b04 	subs.w	fp, sl, r4
 80227a8:	d00b      	beq.n	80227c2 <_svfiprintf_r+0x7e>
 80227aa:	465b      	mov	r3, fp
 80227ac:	4622      	mov	r2, r4
 80227ae:	4629      	mov	r1, r5
 80227b0:	4638      	mov	r0, r7
 80227b2:	f7ff ff6b 	bl	802268c <__ssputs_r>
 80227b6:	3001      	adds	r0, #1
 80227b8:	f000 80a7 	beq.w	802290a <_svfiprintf_r+0x1c6>
 80227bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80227be:	445a      	add	r2, fp
 80227c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80227c2:	f89a 3000 	ldrb.w	r3, [sl]
 80227c6:	2b00      	cmp	r3, #0
 80227c8:	f000 809f 	beq.w	802290a <_svfiprintf_r+0x1c6>
 80227cc:	2300      	movs	r3, #0
 80227ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80227d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80227d6:	f10a 0a01 	add.w	sl, sl, #1
 80227da:	9304      	str	r3, [sp, #16]
 80227dc:	9307      	str	r3, [sp, #28]
 80227de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80227e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80227e4:	4654      	mov	r4, sl
 80227e6:	2205      	movs	r2, #5
 80227e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227ec:	484e      	ldr	r0, [pc, #312]	@ (8022928 <_svfiprintf_r+0x1e4>)
 80227ee:	f7dd fd8f 	bl	8000310 <memchr>
 80227f2:	9a04      	ldr	r2, [sp, #16]
 80227f4:	b9d8      	cbnz	r0, 802282e <_svfiprintf_r+0xea>
 80227f6:	06d0      	lsls	r0, r2, #27
 80227f8:	bf44      	itt	mi
 80227fa:	2320      	movmi	r3, #32
 80227fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022800:	0711      	lsls	r1, r2, #28
 8022802:	bf44      	itt	mi
 8022804:	232b      	movmi	r3, #43	@ 0x2b
 8022806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802280a:	f89a 3000 	ldrb.w	r3, [sl]
 802280e:	2b2a      	cmp	r3, #42	@ 0x2a
 8022810:	d015      	beq.n	802283e <_svfiprintf_r+0xfa>
 8022812:	9a07      	ldr	r2, [sp, #28]
 8022814:	4654      	mov	r4, sl
 8022816:	2000      	movs	r0, #0
 8022818:	f04f 0c0a 	mov.w	ip, #10
 802281c:	4621      	mov	r1, r4
 802281e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022822:	3b30      	subs	r3, #48	@ 0x30
 8022824:	2b09      	cmp	r3, #9
 8022826:	d94b      	bls.n	80228c0 <_svfiprintf_r+0x17c>
 8022828:	b1b0      	cbz	r0, 8022858 <_svfiprintf_r+0x114>
 802282a:	9207      	str	r2, [sp, #28]
 802282c:	e014      	b.n	8022858 <_svfiprintf_r+0x114>
 802282e:	eba0 0308 	sub.w	r3, r0, r8
 8022832:	fa09 f303 	lsl.w	r3, r9, r3
 8022836:	4313      	orrs	r3, r2
 8022838:	9304      	str	r3, [sp, #16]
 802283a:	46a2      	mov	sl, r4
 802283c:	e7d2      	b.n	80227e4 <_svfiprintf_r+0xa0>
 802283e:	9b03      	ldr	r3, [sp, #12]
 8022840:	1d19      	adds	r1, r3, #4
 8022842:	681b      	ldr	r3, [r3, #0]
 8022844:	9103      	str	r1, [sp, #12]
 8022846:	2b00      	cmp	r3, #0
 8022848:	bfbb      	ittet	lt
 802284a:	425b      	neglt	r3, r3
 802284c:	f042 0202 	orrlt.w	r2, r2, #2
 8022850:	9307      	strge	r3, [sp, #28]
 8022852:	9307      	strlt	r3, [sp, #28]
 8022854:	bfb8      	it	lt
 8022856:	9204      	strlt	r2, [sp, #16]
 8022858:	7823      	ldrb	r3, [r4, #0]
 802285a:	2b2e      	cmp	r3, #46	@ 0x2e
 802285c:	d10a      	bne.n	8022874 <_svfiprintf_r+0x130>
 802285e:	7863      	ldrb	r3, [r4, #1]
 8022860:	2b2a      	cmp	r3, #42	@ 0x2a
 8022862:	d132      	bne.n	80228ca <_svfiprintf_r+0x186>
 8022864:	9b03      	ldr	r3, [sp, #12]
 8022866:	1d1a      	adds	r2, r3, #4
 8022868:	681b      	ldr	r3, [r3, #0]
 802286a:	9203      	str	r2, [sp, #12]
 802286c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022870:	3402      	adds	r4, #2
 8022872:	9305      	str	r3, [sp, #20]
 8022874:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8022938 <_svfiprintf_r+0x1f4>
 8022878:	7821      	ldrb	r1, [r4, #0]
 802287a:	2203      	movs	r2, #3
 802287c:	4650      	mov	r0, sl
 802287e:	f7dd fd47 	bl	8000310 <memchr>
 8022882:	b138      	cbz	r0, 8022894 <_svfiprintf_r+0x150>
 8022884:	9b04      	ldr	r3, [sp, #16]
 8022886:	eba0 000a 	sub.w	r0, r0, sl
 802288a:	2240      	movs	r2, #64	@ 0x40
 802288c:	4082      	lsls	r2, r0
 802288e:	4313      	orrs	r3, r2
 8022890:	3401      	adds	r4, #1
 8022892:	9304      	str	r3, [sp, #16]
 8022894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022898:	4824      	ldr	r0, [pc, #144]	@ (802292c <_svfiprintf_r+0x1e8>)
 802289a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802289e:	2206      	movs	r2, #6
 80228a0:	f7dd fd36 	bl	8000310 <memchr>
 80228a4:	2800      	cmp	r0, #0
 80228a6:	d036      	beq.n	8022916 <_svfiprintf_r+0x1d2>
 80228a8:	4b21      	ldr	r3, [pc, #132]	@ (8022930 <_svfiprintf_r+0x1ec>)
 80228aa:	bb1b      	cbnz	r3, 80228f4 <_svfiprintf_r+0x1b0>
 80228ac:	9b03      	ldr	r3, [sp, #12]
 80228ae:	3307      	adds	r3, #7
 80228b0:	f023 0307 	bic.w	r3, r3, #7
 80228b4:	3308      	adds	r3, #8
 80228b6:	9303      	str	r3, [sp, #12]
 80228b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228ba:	4433      	add	r3, r6
 80228bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80228be:	e76a      	b.n	8022796 <_svfiprintf_r+0x52>
 80228c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80228c4:	460c      	mov	r4, r1
 80228c6:	2001      	movs	r0, #1
 80228c8:	e7a8      	b.n	802281c <_svfiprintf_r+0xd8>
 80228ca:	2300      	movs	r3, #0
 80228cc:	3401      	adds	r4, #1
 80228ce:	9305      	str	r3, [sp, #20]
 80228d0:	4619      	mov	r1, r3
 80228d2:	f04f 0c0a 	mov.w	ip, #10
 80228d6:	4620      	mov	r0, r4
 80228d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80228dc:	3a30      	subs	r2, #48	@ 0x30
 80228de:	2a09      	cmp	r2, #9
 80228e0:	d903      	bls.n	80228ea <_svfiprintf_r+0x1a6>
 80228e2:	2b00      	cmp	r3, #0
 80228e4:	d0c6      	beq.n	8022874 <_svfiprintf_r+0x130>
 80228e6:	9105      	str	r1, [sp, #20]
 80228e8:	e7c4      	b.n	8022874 <_svfiprintf_r+0x130>
 80228ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80228ee:	4604      	mov	r4, r0
 80228f0:	2301      	movs	r3, #1
 80228f2:	e7f0      	b.n	80228d6 <_svfiprintf_r+0x192>
 80228f4:	ab03      	add	r3, sp, #12
 80228f6:	9300      	str	r3, [sp, #0]
 80228f8:	462a      	mov	r2, r5
 80228fa:	4b0e      	ldr	r3, [pc, #56]	@ (8022934 <_svfiprintf_r+0x1f0>)
 80228fc:	a904      	add	r1, sp, #16
 80228fe:	4638      	mov	r0, r7
 8022900:	f3af 8000 	nop.w
 8022904:	1c42      	adds	r2, r0, #1
 8022906:	4606      	mov	r6, r0
 8022908:	d1d6      	bne.n	80228b8 <_svfiprintf_r+0x174>
 802290a:	89ab      	ldrh	r3, [r5, #12]
 802290c:	065b      	lsls	r3, r3, #25
 802290e:	f53f af2d 	bmi.w	802276c <_svfiprintf_r+0x28>
 8022912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022914:	e72c      	b.n	8022770 <_svfiprintf_r+0x2c>
 8022916:	ab03      	add	r3, sp, #12
 8022918:	9300      	str	r3, [sp, #0]
 802291a:	462a      	mov	r2, r5
 802291c:	4b05      	ldr	r3, [pc, #20]	@ (8022934 <_svfiprintf_r+0x1f0>)
 802291e:	a904      	add	r1, sp, #16
 8022920:	4638      	mov	r0, r7
 8022922:	f000 f879 	bl	8022a18 <_printf_i>
 8022926:	e7ed      	b.n	8022904 <_svfiprintf_r+0x1c0>
 8022928:	08025ba6 	.word	0x08025ba6
 802292c:	08025bb0 	.word	0x08025bb0
 8022930:	00000000 	.word	0x00000000
 8022934:	0802268d 	.word	0x0802268d
 8022938:	08025bac 	.word	0x08025bac

0802293c <_printf_common>:
 802293c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022940:	4616      	mov	r6, r2
 8022942:	4698      	mov	r8, r3
 8022944:	688a      	ldr	r2, [r1, #8]
 8022946:	690b      	ldr	r3, [r1, #16]
 8022948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802294c:	4293      	cmp	r3, r2
 802294e:	bfb8      	it	lt
 8022950:	4613      	movlt	r3, r2
 8022952:	6033      	str	r3, [r6, #0]
 8022954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022958:	4607      	mov	r7, r0
 802295a:	460c      	mov	r4, r1
 802295c:	b10a      	cbz	r2, 8022962 <_printf_common+0x26>
 802295e:	3301      	adds	r3, #1
 8022960:	6033      	str	r3, [r6, #0]
 8022962:	6823      	ldr	r3, [r4, #0]
 8022964:	0699      	lsls	r1, r3, #26
 8022966:	bf42      	ittt	mi
 8022968:	6833      	ldrmi	r3, [r6, #0]
 802296a:	3302      	addmi	r3, #2
 802296c:	6033      	strmi	r3, [r6, #0]
 802296e:	6825      	ldr	r5, [r4, #0]
 8022970:	f015 0506 	ands.w	r5, r5, #6
 8022974:	d106      	bne.n	8022984 <_printf_common+0x48>
 8022976:	f104 0a19 	add.w	sl, r4, #25
 802297a:	68e3      	ldr	r3, [r4, #12]
 802297c:	6832      	ldr	r2, [r6, #0]
 802297e:	1a9b      	subs	r3, r3, r2
 8022980:	42ab      	cmp	r3, r5
 8022982:	dc26      	bgt.n	80229d2 <_printf_common+0x96>
 8022984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022988:	6822      	ldr	r2, [r4, #0]
 802298a:	3b00      	subs	r3, #0
 802298c:	bf18      	it	ne
 802298e:	2301      	movne	r3, #1
 8022990:	0692      	lsls	r2, r2, #26
 8022992:	d42b      	bmi.n	80229ec <_printf_common+0xb0>
 8022994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022998:	4641      	mov	r1, r8
 802299a:	4638      	mov	r0, r7
 802299c:	47c8      	blx	r9
 802299e:	3001      	adds	r0, #1
 80229a0:	d01e      	beq.n	80229e0 <_printf_common+0xa4>
 80229a2:	6823      	ldr	r3, [r4, #0]
 80229a4:	6922      	ldr	r2, [r4, #16]
 80229a6:	f003 0306 	and.w	r3, r3, #6
 80229aa:	2b04      	cmp	r3, #4
 80229ac:	bf02      	ittt	eq
 80229ae:	68e5      	ldreq	r5, [r4, #12]
 80229b0:	6833      	ldreq	r3, [r6, #0]
 80229b2:	1aed      	subeq	r5, r5, r3
 80229b4:	68a3      	ldr	r3, [r4, #8]
 80229b6:	bf0c      	ite	eq
 80229b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80229bc:	2500      	movne	r5, #0
 80229be:	4293      	cmp	r3, r2
 80229c0:	bfc4      	itt	gt
 80229c2:	1a9b      	subgt	r3, r3, r2
 80229c4:	18ed      	addgt	r5, r5, r3
 80229c6:	2600      	movs	r6, #0
 80229c8:	341a      	adds	r4, #26
 80229ca:	42b5      	cmp	r5, r6
 80229cc:	d11a      	bne.n	8022a04 <_printf_common+0xc8>
 80229ce:	2000      	movs	r0, #0
 80229d0:	e008      	b.n	80229e4 <_printf_common+0xa8>
 80229d2:	2301      	movs	r3, #1
 80229d4:	4652      	mov	r2, sl
 80229d6:	4641      	mov	r1, r8
 80229d8:	4638      	mov	r0, r7
 80229da:	47c8      	blx	r9
 80229dc:	3001      	adds	r0, #1
 80229de:	d103      	bne.n	80229e8 <_printf_common+0xac>
 80229e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80229e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229e8:	3501      	adds	r5, #1
 80229ea:	e7c6      	b.n	802297a <_printf_common+0x3e>
 80229ec:	18e1      	adds	r1, r4, r3
 80229ee:	1c5a      	adds	r2, r3, #1
 80229f0:	2030      	movs	r0, #48	@ 0x30
 80229f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80229f6:	4422      	add	r2, r4
 80229f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80229fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022a00:	3302      	adds	r3, #2
 8022a02:	e7c7      	b.n	8022994 <_printf_common+0x58>
 8022a04:	2301      	movs	r3, #1
 8022a06:	4622      	mov	r2, r4
 8022a08:	4641      	mov	r1, r8
 8022a0a:	4638      	mov	r0, r7
 8022a0c:	47c8      	blx	r9
 8022a0e:	3001      	adds	r0, #1
 8022a10:	d0e6      	beq.n	80229e0 <_printf_common+0xa4>
 8022a12:	3601      	adds	r6, #1
 8022a14:	e7d9      	b.n	80229ca <_printf_common+0x8e>
	...

08022a18 <_printf_i>:
 8022a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022a1c:	7e0f      	ldrb	r7, [r1, #24]
 8022a1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022a20:	2f78      	cmp	r7, #120	@ 0x78
 8022a22:	4691      	mov	r9, r2
 8022a24:	4680      	mov	r8, r0
 8022a26:	460c      	mov	r4, r1
 8022a28:	469a      	mov	sl, r3
 8022a2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022a2e:	d807      	bhi.n	8022a40 <_printf_i+0x28>
 8022a30:	2f62      	cmp	r7, #98	@ 0x62
 8022a32:	d80a      	bhi.n	8022a4a <_printf_i+0x32>
 8022a34:	2f00      	cmp	r7, #0
 8022a36:	f000 80d2 	beq.w	8022bde <_printf_i+0x1c6>
 8022a3a:	2f58      	cmp	r7, #88	@ 0x58
 8022a3c:	f000 80b9 	beq.w	8022bb2 <_printf_i+0x19a>
 8022a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022a44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022a48:	e03a      	b.n	8022ac0 <_printf_i+0xa8>
 8022a4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022a4e:	2b15      	cmp	r3, #21
 8022a50:	d8f6      	bhi.n	8022a40 <_printf_i+0x28>
 8022a52:	a101      	add	r1, pc, #4	@ (adr r1, 8022a58 <_printf_i+0x40>)
 8022a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022a58:	08022ab1 	.word	0x08022ab1
 8022a5c:	08022ac5 	.word	0x08022ac5
 8022a60:	08022a41 	.word	0x08022a41
 8022a64:	08022a41 	.word	0x08022a41
 8022a68:	08022a41 	.word	0x08022a41
 8022a6c:	08022a41 	.word	0x08022a41
 8022a70:	08022ac5 	.word	0x08022ac5
 8022a74:	08022a41 	.word	0x08022a41
 8022a78:	08022a41 	.word	0x08022a41
 8022a7c:	08022a41 	.word	0x08022a41
 8022a80:	08022a41 	.word	0x08022a41
 8022a84:	08022bc5 	.word	0x08022bc5
 8022a88:	08022aef 	.word	0x08022aef
 8022a8c:	08022b7f 	.word	0x08022b7f
 8022a90:	08022a41 	.word	0x08022a41
 8022a94:	08022a41 	.word	0x08022a41
 8022a98:	08022be7 	.word	0x08022be7
 8022a9c:	08022a41 	.word	0x08022a41
 8022aa0:	08022aef 	.word	0x08022aef
 8022aa4:	08022a41 	.word	0x08022a41
 8022aa8:	08022a41 	.word	0x08022a41
 8022aac:	08022b87 	.word	0x08022b87
 8022ab0:	6833      	ldr	r3, [r6, #0]
 8022ab2:	1d1a      	adds	r2, r3, #4
 8022ab4:	681b      	ldr	r3, [r3, #0]
 8022ab6:	6032      	str	r2, [r6, #0]
 8022ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022abc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022ac0:	2301      	movs	r3, #1
 8022ac2:	e09d      	b.n	8022c00 <_printf_i+0x1e8>
 8022ac4:	6833      	ldr	r3, [r6, #0]
 8022ac6:	6820      	ldr	r0, [r4, #0]
 8022ac8:	1d19      	adds	r1, r3, #4
 8022aca:	6031      	str	r1, [r6, #0]
 8022acc:	0606      	lsls	r6, r0, #24
 8022ace:	d501      	bpl.n	8022ad4 <_printf_i+0xbc>
 8022ad0:	681d      	ldr	r5, [r3, #0]
 8022ad2:	e003      	b.n	8022adc <_printf_i+0xc4>
 8022ad4:	0645      	lsls	r5, r0, #25
 8022ad6:	d5fb      	bpl.n	8022ad0 <_printf_i+0xb8>
 8022ad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022adc:	2d00      	cmp	r5, #0
 8022ade:	da03      	bge.n	8022ae8 <_printf_i+0xd0>
 8022ae0:	232d      	movs	r3, #45	@ 0x2d
 8022ae2:	426d      	negs	r5, r5
 8022ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022ae8:	4859      	ldr	r0, [pc, #356]	@ (8022c50 <_printf_i+0x238>)
 8022aea:	230a      	movs	r3, #10
 8022aec:	e011      	b.n	8022b12 <_printf_i+0xfa>
 8022aee:	6821      	ldr	r1, [r4, #0]
 8022af0:	6833      	ldr	r3, [r6, #0]
 8022af2:	0608      	lsls	r0, r1, #24
 8022af4:	f853 5b04 	ldr.w	r5, [r3], #4
 8022af8:	d402      	bmi.n	8022b00 <_printf_i+0xe8>
 8022afa:	0649      	lsls	r1, r1, #25
 8022afc:	bf48      	it	mi
 8022afe:	b2ad      	uxthmi	r5, r5
 8022b00:	2f6f      	cmp	r7, #111	@ 0x6f
 8022b02:	4853      	ldr	r0, [pc, #332]	@ (8022c50 <_printf_i+0x238>)
 8022b04:	6033      	str	r3, [r6, #0]
 8022b06:	bf14      	ite	ne
 8022b08:	230a      	movne	r3, #10
 8022b0a:	2308      	moveq	r3, #8
 8022b0c:	2100      	movs	r1, #0
 8022b0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022b12:	6866      	ldr	r6, [r4, #4]
 8022b14:	60a6      	str	r6, [r4, #8]
 8022b16:	2e00      	cmp	r6, #0
 8022b18:	bfa2      	ittt	ge
 8022b1a:	6821      	ldrge	r1, [r4, #0]
 8022b1c:	f021 0104 	bicge.w	r1, r1, #4
 8022b20:	6021      	strge	r1, [r4, #0]
 8022b22:	b90d      	cbnz	r5, 8022b28 <_printf_i+0x110>
 8022b24:	2e00      	cmp	r6, #0
 8022b26:	d04b      	beq.n	8022bc0 <_printf_i+0x1a8>
 8022b28:	4616      	mov	r6, r2
 8022b2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8022b2e:	fb03 5711 	mls	r7, r3, r1, r5
 8022b32:	5dc7      	ldrb	r7, [r0, r7]
 8022b34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022b38:	462f      	mov	r7, r5
 8022b3a:	42bb      	cmp	r3, r7
 8022b3c:	460d      	mov	r5, r1
 8022b3e:	d9f4      	bls.n	8022b2a <_printf_i+0x112>
 8022b40:	2b08      	cmp	r3, #8
 8022b42:	d10b      	bne.n	8022b5c <_printf_i+0x144>
 8022b44:	6823      	ldr	r3, [r4, #0]
 8022b46:	07df      	lsls	r7, r3, #31
 8022b48:	d508      	bpl.n	8022b5c <_printf_i+0x144>
 8022b4a:	6923      	ldr	r3, [r4, #16]
 8022b4c:	6861      	ldr	r1, [r4, #4]
 8022b4e:	4299      	cmp	r1, r3
 8022b50:	bfde      	ittt	le
 8022b52:	2330      	movle	r3, #48	@ 0x30
 8022b54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022b58:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8022b5c:	1b92      	subs	r2, r2, r6
 8022b5e:	6122      	str	r2, [r4, #16]
 8022b60:	f8cd a000 	str.w	sl, [sp]
 8022b64:	464b      	mov	r3, r9
 8022b66:	aa03      	add	r2, sp, #12
 8022b68:	4621      	mov	r1, r4
 8022b6a:	4640      	mov	r0, r8
 8022b6c:	f7ff fee6 	bl	802293c <_printf_common>
 8022b70:	3001      	adds	r0, #1
 8022b72:	d14a      	bne.n	8022c0a <_printf_i+0x1f2>
 8022b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022b78:	b004      	add	sp, #16
 8022b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b7e:	6823      	ldr	r3, [r4, #0]
 8022b80:	f043 0320 	orr.w	r3, r3, #32
 8022b84:	6023      	str	r3, [r4, #0]
 8022b86:	4833      	ldr	r0, [pc, #204]	@ (8022c54 <_printf_i+0x23c>)
 8022b88:	2778      	movs	r7, #120	@ 0x78
 8022b8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022b8e:	6823      	ldr	r3, [r4, #0]
 8022b90:	6831      	ldr	r1, [r6, #0]
 8022b92:	061f      	lsls	r7, r3, #24
 8022b94:	f851 5b04 	ldr.w	r5, [r1], #4
 8022b98:	d402      	bmi.n	8022ba0 <_printf_i+0x188>
 8022b9a:	065f      	lsls	r7, r3, #25
 8022b9c:	bf48      	it	mi
 8022b9e:	b2ad      	uxthmi	r5, r5
 8022ba0:	6031      	str	r1, [r6, #0]
 8022ba2:	07d9      	lsls	r1, r3, #31
 8022ba4:	bf44      	itt	mi
 8022ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8022baa:	6023      	strmi	r3, [r4, #0]
 8022bac:	b11d      	cbz	r5, 8022bb6 <_printf_i+0x19e>
 8022bae:	2310      	movs	r3, #16
 8022bb0:	e7ac      	b.n	8022b0c <_printf_i+0xf4>
 8022bb2:	4827      	ldr	r0, [pc, #156]	@ (8022c50 <_printf_i+0x238>)
 8022bb4:	e7e9      	b.n	8022b8a <_printf_i+0x172>
 8022bb6:	6823      	ldr	r3, [r4, #0]
 8022bb8:	f023 0320 	bic.w	r3, r3, #32
 8022bbc:	6023      	str	r3, [r4, #0]
 8022bbe:	e7f6      	b.n	8022bae <_printf_i+0x196>
 8022bc0:	4616      	mov	r6, r2
 8022bc2:	e7bd      	b.n	8022b40 <_printf_i+0x128>
 8022bc4:	6833      	ldr	r3, [r6, #0]
 8022bc6:	6825      	ldr	r5, [r4, #0]
 8022bc8:	6961      	ldr	r1, [r4, #20]
 8022bca:	1d18      	adds	r0, r3, #4
 8022bcc:	6030      	str	r0, [r6, #0]
 8022bce:	062e      	lsls	r6, r5, #24
 8022bd0:	681b      	ldr	r3, [r3, #0]
 8022bd2:	d501      	bpl.n	8022bd8 <_printf_i+0x1c0>
 8022bd4:	6019      	str	r1, [r3, #0]
 8022bd6:	e002      	b.n	8022bde <_printf_i+0x1c6>
 8022bd8:	0668      	lsls	r0, r5, #25
 8022bda:	d5fb      	bpl.n	8022bd4 <_printf_i+0x1bc>
 8022bdc:	8019      	strh	r1, [r3, #0]
 8022bde:	2300      	movs	r3, #0
 8022be0:	6123      	str	r3, [r4, #16]
 8022be2:	4616      	mov	r6, r2
 8022be4:	e7bc      	b.n	8022b60 <_printf_i+0x148>
 8022be6:	6833      	ldr	r3, [r6, #0]
 8022be8:	1d1a      	adds	r2, r3, #4
 8022bea:	6032      	str	r2, [r6, #0]
 8022bec:	681e      	ldr	r6, [r3, #0]
 8022bee:	6862      	ldr	r2, [r4, #4]
 8022bf0:	2100      	movs	r1, #0
 8022bf2:	4630      	mov	r0, r6
 8022bf4:	f7dd fb8c 	bl	8000310 <memchr>
 8022bf8:	b108      	cbz	r0, 8022bfe <_printf_i+0x1e6>
 8022bfa:	1b80      	subs	r0, r0, r6
 8022bfc:	6060      	str	r0, [r4, #4]
 8022bfe:	6863      	ldr	r3, [r4, #4]
 8022c00:	6123      	str	r3, [r4, #16]
 8022c02:	2300      	movs	r3, #0
 8022c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022c08:	e7aa      	b.n	8022b60 <_printf_i+0x148>
 8022c0a:	6923      	ldr	r3, [r4, #16]
 8022c0c:	4632      	mov	r2, r6
 8022c0e:	4649      	mov	r1, r9
 8022c10:	4640      	mov	r0, r8
 8022c12:	47d0      	blx	sl
 8022c14:	3001      	adds	r0, #1
 8022c16:	d0ad      	beq.n	8022b74 <_printf_i+0x15c>
 8022c18:	6823      	ldr	r3, [r4, #0]
 8022c1a:	079b      	lsls	r3, r3, #30
 8022c1c:	d413      	bmi.n	8022c46 <_printf_i+0x22e>
 8022c1e:	68e0      	ldr	r0, [r4, #12]
 8022c20:	9b03      	ldr	r3, [sp, #12]
 8022c22:	4298      	cmp	r0, r3
 8022c24:	bfb8      	it	lt
 8022c26:	4618      	movlt	r0, r3
 8022c28:	e7a6      	b.n	8022b78 <_printf_i+0x160>
 8022c2a:	2301      	movs	r3, #1
 8022c2c:	4632      	mov	r2, r6
 8022c2e:	4649      	mov	r1, r9
 8022c30:	4640      	mov	r0, r8
 8022c32:	47d0      	blx	sl
 8022c34:	3001      	adds	r0, #1
 8022c36:	d09d      	beq.n	8022b74 <_printf_i+0x15c>
 8022c38:	3501      	adds	r5, #1
 8022c3a:	68e3      	ldr	r3, [r4, #12]
 8022c3c:	9903      	ldr	r1, [sp, #12]
 8022c3e:	1a5b      	subs	r3, r3, r1
 8022c40:	42ab      	cmp	r3, r5
 8022c42:	dcf2      	bgt.n	8022c2a <_printf_i+0x212>
 8022c44:	e7eb      	b.n	8022c1e <_printf_i+0x206>
 8022c46:	2500      	movs	r5, #0
 8022c48:	f104 0619 	add.w	r6, r4, #25
 8022c4c:	e7f5      	b.n	8022c3a <_printf_i+0x222>
 8022c4e:	bf00      	nop
 8022c50:	08025bb7 	.word	0x08025bb7
 8022c54:	08025bc8 	.word	0x08025bc8

08022c58 <__sflush_r>:
 8022c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c60:	0716      	lsls	r6, r2, #28
 8022c62:	4605      	mov	r5, r0
 8022c64:	460c      	mov	r4, r1
 8022c66:	d454      	bmi.n	8022d12 <__sflush_r+0xba>
 8022c68:	684b      	ldr	r3, [r1, #4]
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	dc02      	bgt.n	8022c74 <__sflush_r+0x1c>
 8022c6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022c70:	2b00      	cmp	r3, #0
 8022c72:	dd48      	ble.n	8022d06 <__sflush_r+0xae>
 8022c74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022c76:	2e00      	cmp	r6, #0
 8022c78:	d045      	beq.n	8022d06 <__sflush_r+0xae>
 8022c7a:	2300      	movs	r3, #0
 8022c7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022c80:	682f      	ldr	r7, [r5, #0]
 8022c82:	6a21      	ldr	r1, [r4, #32]
 8022c84:	602b      	str	r3, [r5, #0]
 8022c86:	d030      	beq.n	8022cea <__sflush_r+0x92>
 8022c88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022c8a:	89a3      	ldrh	r3, [r4, #12]
 8022c8c:	0759      	lsls	r1, r3, #29
 8022c8e:	d505      	bpl.n	8022c9c <__sflush_r+0x44>
 8022c90:	6863      	ldr	r3, [r4, #4]
 8022c92:	1ad2      	subs	r2, r2, r3
 8022c94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022c96:	b10b      	cbz	r3, 8022c9c <__sflush_r+0x44>
 8022c98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022c9a:	1ad2      	subs	r2, r2, r3
 8022c9c:	2300      	movs	r3, #0
 8022c9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022ca0:	6a21      	ldr	r1, [r4, #32]
 8022ca2:	4628      	mov	r0, r5
 8022ca4:	47b0      	blx	r6
 8022ca6:	1c43      	adds	r3, r0, #1
 8022ca8:	89a3      	ldrh	r3, [r4, #12]
 8022caa:	d106      	bne.n	8022cba <__sflush_r+0x62>
 8022cac:	6829      	ldr	r1, [r5, #0]
 8022cae:	291d      	cmp	r1, #29
 8022cb0:	d82b      	bhi.n	8022d0a <__sflush_r+0xb2>
 8022cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8022d5c <__sflush_r+0x104>)
 8022cb4:	410a      	asrs	r2, r1
 8022cb6:	07d6      	lsls	r6, r2, #31
 8022cb8:	d427      	bmi.n	8022d0a <__sflush_r+0xb2>
 8022cba:	2200      	movs	r2, #0
 8022cbc:	6062      	str	r2, [r4, #4]
 8022cbe:	04d9      	lsls	r1, r3, #19
 8022cc0:	6922      	ldr	r2, [r4, #16]
 8022cc2:	6022      	str	r2, [r4, #0]
 8022cc4:	d504      	bpl.n	8022cd0 <__sflush_r+0x78>
 8022cc6:	1c42      	adds	r2, r0, #1
 8022cc8:	d101      	bne.n	8022cce <__sflush_r+0x76>
 8022cca:	682b      	ldr	r3, [r5, #0]
 8022ccc:	b903      	cbnz	r3, 8022cd0 <__sflush_r+0x78>
 8022cce:	6560      	str	r0, [r4, #84]	@ 0x54
 8022cd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022cd2:	602f      	str	r7, [r5, #0]
 8022cd4:	b1b9      	cbz	r1, 8022d06 <__sflush_r+0xae>
 8022cd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022cda:	4299      	cmp	r1, r3
 8022cdc:	d002      	beq.n	8022ce4 <__sflush_r+0x8c>
 8022cde:	4628      	mov	r0, r5
 8022ce0:	f7ff fc82 	bl	80225e8 <_free_r>
 8022ce4:	2300      	movs	r3, #0
 8022ce6:	6363      	str	r3, [r4, #52]	@ 0x34
 8022ce8:	e00d      	b.n	8022d06 <__sflush_r+0xae>
 8022cea:	2301      	movs	r3, #1
 8022cec:	4628      	mov	r0, r5
 8022cee:	47b0      	blx	r6
 8022cf0:	4602      	mov	r2, r0
 8022cf2:	1c50      	adds	r0, r2, #1
 8022cf4:	d1c9      	bne.n	8022c8a <__sflush_r+0x32>
 8022cf6:	682b      	ldr	r3, [r5, #0]
 8022cf8:	2b00      	cmp	r3, #0
 8022cfa:	d0c6      	beq.n	8022c8a <__sflush_r+0x32>
 8022cfc:	2b1d      	cmp	r3, #29
 8022cfe:	d001      	beq.n	8022d04 <__sflush_r+0xac>
 8022d00:	2b16      	cmp	r3, #22
 8022d02:	d11e      	bne.n	8022d42 <__sflush_r+0xea>
 8022d04:	602f      	str	r7, [r5, #0]
 8022d06:	2000      	movs	r0, #0
 8022d08:	e022      	b.n	8022d50 <__sflush_r+0xf8>
 8022d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022d0e:	b21b      	sxth	r3, r3
 8022d10:	e01b      	b.n	8022d4a <__sflush_r+0xf2>
 8022d12:	690f      	ldr	r7, [r1, #16]
 8022d14:	2f00      	cmp	r7, #0
 8022d16:	d0f6      	beq.n	8022d06 <__sflush_r+0xae>
 8022d18:	0793      	lsls	r3, r2, #30
 8022d1a:	680e      	ldr	r6, [r1, #0]
 8022d1c:	bf08      	it	eq
 8022d1e:	694b      	ldreq	r3, [r1, #20]
 8022d20:	600f      	str	r7, [r1, #0]
 8022d22:	bf18      	it	ne
 8022d24:	2300      	movne	r3, #0
 8022d26:	eba6 0807 	sub.w	r8, r6, r7
 8022d2a:	608b      	str	r3, [r1, #8]
 8022d2c:	f1b8 0f00 	cmp.w	r8, #0
 8022d30:	dde9      	ble.n	8022d06 <__sflush_r+0xae>
 8022d32:	6a21      	ldr	r1, [r4, #32]
 8022d34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022d36:	4643      	mov	r3, r8
 8022d38:	463a      	mov	r2, r7
 8022d3a:	4628      	mov	r0, r5
 8022d3c:	47b0      	blx	r6
 8022d3e:	2800      	cmp	r0, #0
 8022d40:	dc08      	bgt.n	8022d54 <__sflush_r+0xfc>
 8022d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022d4a:	81a3      	strh	r3, [r4, #12]
 8022d4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d54:	4407      	add	r7, r0
 8022d56:	eba8 0800 	sub.w	r8, r8, r0
 8022d5a:	e7e7      	b.n	8022d2c <__sflush_r+0xd4>
 8022d5c:	dfbffffe 	.word	0xdfbffffe

08022d60 <_fflush_r>:
 8022d60:	b538      	push	{r3, r4, r5, lr}
 8022d62:	690b      	ldr	r3, [r1, #16]
 8022d64:	4605      	mov	r5, r0
 8022d66:	460c      	mov	r4, r1
 8022d68:	b913      	cbnz	r3, 8022d70 <_fflush_r+0x10>
 8022d6a:	2500      	movs	r5, #0
 8022d6c:	4628      	mov	r0, r5
 8022d6e:	bd38      	pop	{r3, r4, r5, pc}
 8022d70:	b118      	cbz	r0, 8022d7a <_fflush_r+0x1a>
 8022d72:	6a03      	ldr	r3, [r0, #32]
 8022d74:	b90b      	cbnz	r3, 8022d7a <_fflush_r+0x1a>
 8022d76:	f7ff f8e1 	bl	8021f3c <__sinit>
 8022d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	d0f3      	beq.n	8022d6a <_fflush_r+0xa>
 8022d82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022d84:	07d0      	lsls	r0, r2, #31
 8022d86:	d404      	bmi.n	8022d92 <_fflush_r+0x32>
 8022d88:	0599      	lsls	r1, r3, #22
 8022d8a:	d402      	bmi.n	8022d92 <_fflush_r+0x32>
 8022d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022d8e:	f7ff fbe8 	bl	8022562 <__retarget_lock_acquire_recursive>
 8022d92:	4628      	mov	r0, r5
 8022d94:	4621      	mov	r1, r4
 8022d96:	f7ff ff5f 	bl	8022c58 <__sflush_r>
 8022d9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022d9c:	07da      	lsls	r2, r3, #31
 8022d9e:	4605      	mov	r5, r0
 8022da0:	d4e4      	bmi.n	8022d6c <_fflush_r+0xc>
 8022da2:	89a3      	ldrh	r3, [r4, #12]
 8022da4:	059b      	lsls	r3, r3, #22
 8022da6:	d4e1      	bmi.n	8022d6c <_fflush_r+0xc>
 8022da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022daa:	f7ff fbdb 	bl	8022564 <__retarget_lock_release_recursive>
 8022dae:	e7dd      	b.n	8022d6c <_fflush_r+0xc>

08022db0 <fiprintf>:
 8022db0:	b40e      	push	{r1, r2, r3}
 8022db2:	b503      	push	{r0, r1, lr}
 8022db4:	4601      	mov	r1, r0
 8022db6:	ab03      	add	r3, sp, #12
 8022db8:	4805      	ldr	r0, [pc, #20]	@ (8022dd0 <fiprintf+0x20>)
 8022dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8022dbe:	6800      	ldr	r0, [r0, #0]
 8022dc0:	9301      	str	r3, [sp, #4]
 8022dc2:	f000 f8bb 	bl	8022f3c <_vfiprintf_r>
 8022dc6:	b002      	add	sp, #8
 8022dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8022dcc:	b003      	add	sp, #12
 8022dce:	4770      	bx	lr
 8022dd0:	24001424 	.word	0x24001424

08022dd4 <__swhatbuf_r>:
 8022dd4:	b570      	push	{r4, r5, r6, lr}
 8022dd6:	460c      	mov	r4, r1
 8022dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ddc:	2900      	cmp	r1, #0
 8022dde:	b096      	sub	sp, #88	@ 0x58
 8022de0:	4615      	mov	r5, r2
 8022de2:	461e      	mov	r6, r3
 8022de4:	da0d      	bge.n	8022e02 <__swhatbuf_r+0x2e>
 8022de6:	89a3      	ldrh	r3, [r4, #12]
 8022de8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022dec:	f04f 0100 	mov.w	r1, #0
 8022df0:	bf14      	ite	ne
 8022df2:	2340      	movne	r3, #64	@ 0x40
 8022df4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022df8:	2000      	movs	r0, #0
 8022dfa:	6031      	str	r1, [r6, #0]
 8022dfc:	602b      	str	r3, [r5, #0]
 8022dfe:	b016      	add	sp, #88	@ 0x58
 8022e00:	bd70      	pop	{r4, r5, r6, pc}
 8022e02:	466a      	mov	r2, sp
 8022e04:	f000 f848 	bl	8022e98 <_fstat_r>
 8022e08:	2800      	cmp	r0, #0
 8022e0a:	dbec      	blt.n	8022de6 <__swhatbuf_r+0x12>
 8022e0c:	9901      	ldr	r1, [sp, #4]
 8022e0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022e12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022e16:	4259      	negs	r1, r3
 8022e18:	4159      	adcs	r1, r3
 8022e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022e1e:	e7eb      	b.n	8022df8 <__swhatbuf_r+0x24>

08022e20 <__smakebuf_r>:
 8022e20:	898b      	ldrh	r3, [r1, #12]
 8022e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022e24:	079d      	lsls	r5, r3, #30
 8022e26:	4606      	mov	r6, r0
 8022e28:	460c      	mov	r4, r1
 8022e2a:	d507      	bpl.n	8022e3c <__smakebuf_r+0x1c>
 8022e2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022e30:	6023      	str	r3, [r4, #0]
 8022e32:	6123      	str	r3, [r4, #16]
 8022e34:	2301      	movs	r3, #1
 8022e36:	6163      	str	r3, [r4, #20]
 8022e38:	b003      	add	sp, #12
 8022e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e3c:	ab01      	add	r3, sp, #4
 8022e3e:	466a      	mov	r2, sp
 8022e40:	f7ff ffc8 	bl	8022dd4 <__swhatbuf_r>
 8022e44:	9f00      	ldr	r7, [sp, #0]
 8022e46:	4605      	mov	r5, r0
 8022e48:	4639      	mov	r1, r7
 8022e4a:	4630      	mov	r0, r6
 8022e4c:	f7fe fe44 	bl	8021ad8 <_malloc_r>
 8022e50:	b948      	cbnz	r0, 8022e66 <__smakebuf_r+0x46>
 8022e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e56:	059a      	lsls	r2, r3, #22
 8022e58:	d4ee      	bmi.n	8022e38 <__smakebuf_r+0x18>
 8022e5a:	f023 0303 	bic.w	r3, r3, #3
 8022e5e:	f043 0302 	orr.w	r3, r3, #2
 8022e62:	81a3      	strh	r3, [r4, #12]
 8022e64:	e7e2      	b.n	8022e2c <__smakebuf_r+0xc>
 8022e66:	89a3      	ldrh	r3, [r4, #12]
 8022e68:	6020      	str	r0, [r4, #0]
 8022e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022e6e:	81a3      	strh	r3, [r4, #12]
 8022e70:	9b01      	ldr	r3, [sp, #4]
 8022e72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022e76:	b15b      	cbz	r3, 8022e90 <__smakebuf_r+0x70>
 8022e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022e7c:	4630      	mov	r0, r6
 8022e7e:	f000 f81d 	bl	8022ebc <_isatty_r>
 8022e82:	b128      	cbz	r0, 8022e90 <__smakebuf_r+0x70>
 8022e84:	89a3      	ldrh	r3, [r4, #12]
 8022e86:	f023 0303 	bic.w	r3, r3, #3
 8022e8a:	f043 0301 	orr.w	r3, r3, #1
 8022e8e:	81a3      	strh	r3, [r4, #12]
 8022e90:	89a3      	ldrh	r3, [r4, #12]
 8022e92:	431d      	orrs	r5, r3
 8022e94:	81a5      	strh	r5, [r4, #12]
 8022e96:	e7cf      	b.n	8022e38 <__smakebuf_r+0x18>

08022e98 <_fstat_r>:
 8022e98:	b538      	push	{r3, r4, r5, lr}
 8022e9a:	4d07      	ldr	r5, [pc, #28]	@ (8022eb8 <_fstat_r+0x20>)
 8022e9c:	2300      	movs	r3, #0
 8022e9e:	4604      	mov	r4, r0
 8022ea0:	4608      	mov	r0, r1
 8022ea2:	4611      	mov	r1, r2
 8022ea4:	602b      	str	r3, [r5, #0]
 8022ea6:	f7df fc1f 	bl	80026e8 <_fstat>
 8022eaa:	1c43      	adds	r3, r0, #1
 8022eac:	d102      	bne.n	8022eb4 <_fstat_r+0x1c>
 8022eae:	682b      	ldr	r3, [r5, #0]
 8022eb0:	b103      	cbz	r3, 8022eb4 <_fstat_r+0x1c>
 8022eb2:	6023      	str	r3, [r4, #0]
 8022eb4:	bd38      	pop	{r3, r4, r5, pc}
 8022eb6:	bf00      	nop
 8022eb8:	24069848 	.word	0x24069848

08022ebc <_isatty_r>:
 8022ebc:	b538      	push	{r3, r4, r5, lr}
 8022ebe:	4d06      	ldr	r5, [pc, #24]	@ (8022ed8 <_isatty_r+0x1c>)
 8022ec0:	2300      	movs	r3, #0
 8022ec2:	4604      	mov	r4, r0
 8022ec4:	4608      	mov	r0, r1
 8022ec6:	602b      	str	r3, [r5, #0]
 8022ec8:	f7df fc1e 	bl	8002708 <_isatty>
 8022ecc:	1c43      	adds	r3, r0, #1
 8022ece:	d102      	bne.n	8022ed6 <_isatty_r+0x1a>
 8022ed0:	682b      	ldr	r3, [r5, #0]
 8022ed2:	b103      	cbz	r3, 8022ed6 <_isatty_r+0x1a>
 8022ed4:	6023      	str	r3, [r4, #0]
 8022ed6:	bd38      	pop	{r3, r4, r5, pc}
 8022ed8:	24069848 	.word	0x24069848

08022edc <abort>:
 8022edc:	b508      	push	{r3, lr}
 8022ede:	2006      	movs	r0, #6
 8022ee0:	f000 f96c 	bl	80231bc <raise>
 8022ee4:	2001      	movs	r0, #1
 8022ee6:	f7df fbaf 	bl	8002648 <_exit>

08022eea <__sfputc_r>:
 8022eea:	6893      	ldr	r3, [r2, #8]
 8022eec:	3b01      	subs	r3, #1
 8022eee:	2b00      	cmp	r3, #0
 8022ef0:	b410      	push	{r4}
 8022ef2:	6093      	str	r3, [r2, #8]
 8022ef4:	da08      	bge.n	8022f08 <__sfputc_r+0x1e>
 8022ef6:	6994      	ldr	r4, [r2, #24]
 8022ef8:	42a3      	cmp	r3, r4
 8022efa:	db01      	blt.n	8022f00 <__sfputc_r+0x16>
 8022efc:	290a      	cmp	r1, #10
 8022efe:	d103      	bne.n	8022f08 <__sfputc_r+0x1e>
 8022f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022f04:	f7ff b95a 	b.w	80221bc <__swbuf_r>
 8022f08:	6813      	ldr	r3, [r2, #0]
 8022f0a:	1c58      	adds	r0, r3, #1
 8022f0c:	6010      	str	r0, [r2, #0]
 8022f0e:	7019      	strb	r1, [r3, #0]
 8022f10:	4608      	mov	r0, r1
 8022f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022f16:	4770      	bx	lr

08022f18 <__sfputs_r>:
 8022f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f1a:	4606      	mov	r6, r0
 8022f1c:	460f      	mov	r7, r1
 8022f1e:	4614      	mov	r4, r2
 8022f20:	18d5      	adds	r5, r2, r3
 8022f22:	42ac      	cmp	r4, r5
 8022f24:	d101      	bne.n	8022f2a <__sfputs_r+0x12>
 8022f26:	2000      	movs	r0, #0
 8022f28:	e007      	b.n	8022f3a <__sfputs_r+0x22>
 8022f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022f2e:	463a      	mov	r2, r7
 8022f30:	4630      	mov	r0, r6
 8022f32:	f7ff ffda 	bl	8022eea <__sfputc_r>
 8022f36:	1c43      	adds	r3, r0, #1
 8022f38:	d1f3      	bne.n	8022f22 <__sfputs_r+0xa>
 8022f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022f3c <_vfiprintf_r>:
 8022f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f40:	460d      	mov	r5, r1
 8022f42:	b09d      	sub	sp, #116	@ 0x74
 8022f44:	4614      	mov	r4, r2
 8022f46:	4698      	mov	r8, r3
 8022f48:	4606      	mov	r6, r0
 8022f4a:	b118      	cbz	r0, 8022f54 <_vfiprintf_r+0x18>
 8022f4c:	6a03      	ldr	r3, [r0, #32]
 8022f4e:	b90b      	cbnz	r3, 8022f54 <_vfiprintf_r+0x18>
 8022f50:	f7fe fff4 	bl	8021f3c <__sinit>
 8022f54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022f56:	07d9      	lsls	r1, r3, #31
 8022f58:	d405      	bmi.n	8022f66 <_vfiprintf_r+0x2a>
 8022f5a:	89ab      	ldrh	r3, [r5, #12]
 8022f5c:	059a      	lsls	r2, r3, #22
 8022f5e:	d402      	bmi.n	8022f66 <_vfiprintf_r+0x2a>
 8022f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022f62:	f7ff fafe 	bl	8022562 <__retarget_lock_acquire_recursive>
 8022f66:	89ab      	ldrh	r3, [r5, #12]
 8022f68:	071b      	lsls	r3, r3, #28
 8022f6a:	d501      	bpl.n	8022f70 <_vfiprintf_r+0x34>
 8022f6c:	692b      	ldr	r3, [r5, #16]
 8022f6e:	b99b      	cbnz	r3, 8022f98 <_vfiprintf_r+0x5c>
 8022f70:	4629      	mov	r1, r5
 8022f72:	4630      	mov	r0, r6
 8022f74:	f7ff f960 	bl	8022238 <__swsetup_r>
 8022f78:	b170      	cbz	r0, 8022f98 <_vfiprintf_r+0x5c>
 8022f7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022f7c:	07dc      	lsls	r4, r3, #31
 8022f7e:	d504      	bpl.n	8022f8a <_vfiprintf_r+0x4e>
 8022f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022f84:	b01d      	add	sp, #116	@ 0x74
 8022f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f8a:	89ab      	ldrh	r3, [r5, #12]
 8022f8c:	0598      	lsls	r0, r3, #22
 8022f8e:	d4f7      	bmi.n	8022f80 <_vfiprintf_r+0x44>
 8022f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022f92:	f7ff fae7 	bl	8022564 <__retarget_lock_release_recursive>
 8022f96:	e7f3      	b.n	8022f80 <_vfiprintf_r+0x44>
 8022f98:	2300      	movs	r3, #0
 8022f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f9c:	2320      	movs	r3, #32
 8022f9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8022fa6:	2330      	movs	r3, #48	@ 0x30
 8022fa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023158 <_vfiprintf_r+0x21c>
 8022fac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022fb0:	f04f 0901 	mov.w	r9, #1
 8022fb4:	4623      	mov	r3, r4
 8022fb6:	469a      	mov	sl, r3
 8022fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022fbc:	b10a      	cbz	r2, 8022fc2 <_vfiprintf_r+0x86>
 8022fbe:	2a25      	cmp	r2, #37	@ 0x25
 8022fc0:	d1f9      	bne.n	8022fb6 <_vfiprintf_r+0x7a>
 8022fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8022fc6:	d00b      	beq.n	8022fe0 <_vfiprintf_r+0xa4>
 8022fc8:	465b      	mov	r3, fp
 8022fca:	4622      	mov	r2, r4
 8022fcc:	4629      	mov	r1, r5
 8022fce:	4630      	mov	r0, r6
 8022fd0:	f7ff ffa2 	bl	8022f18 <__sfputs_r>
 8022fd4:	3001      	adds	r0, #1
 8022fd6:	f000 80a7 	beq.w	8023128 <_vfiprintf_r+0x1ec>
 8022fda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022fdc:	445a      	add	r2, fp
 8022fde:	9209      	str	r2, [sp, #36]	@ 0x24
 8022fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	f000 809f 	beq.w	8023128 <_vfiprintf_r+0x1ec>
 8022fea:	2300      	movs	r3, #0
 8022fec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022ff4:	f10a 0a01 	add.w	sl, sl, #1
 8022ff8:	9304      	str	r3, [sp, #16]
 8022ffa:	9307      	str	r3, [sp, #28]
 8022ffc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023000:	931a      	str	r3, [sp, #104]	@ 0x68
 8023002:	4654      	mov	r4, sl
 8023004:	2205      	movs	r2, #5
 8023006:	f814 1b01 	ldrb.w	r1, [r4], #1
 802300a:	4853      	ldr	r0, [pc, #332]	@ (8023158 <_vfiprintf_r+0x21c>)
 802300c:	f7dd f980 	bl	8000310 <memchr>
 8023010:	9a04      	ldr	r2, [sp, #16]
 8023012:	b9d8      	cbnz	r0, 802304c <_vfiprintf_r+0x110>
 8023014:	06d1      	lsls	r1, r2, #27
 8023016:	bf44      	itt	mi
 8023018:	2320      	movmi	r3, #32
 802301a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802301e:	0713      	lsls	r3, r2, #28
 8023020:	bf44      	itt	mi
 8023022:	232b      	movmi	r3, #43	@ 0x2b
 8023024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023028:	f89a 3000 	ldrb.w	r3, [sl]
 802302c:	2b2a      	cmp	r3, #42	@ 0x2a
 802302e:	d015      	beq.n	802305c <_vfiprintf_r+0x120>
 8023030:	9a07      	ldr	r2, [sp, #28]
 8023032:	4654      	mov	r4, sl
 8023034:	2000      	movs	r0, #0
 8023036:	f04f 0c0a 	mov.w	ip, #10
 802303a:	4621      	mov	r1, r4
 802303c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023040:	3b30      	subs	r3, #48	@ 0x30
 8023042:	2b09      	cmp	r3, #9
 8023044:	d94b      	bls.n	80230de <_vfiprintf_r+0x1a2>
 8023046:	b1b0      	cbz	r0, 8023076 <_vfiprintf_r+0x13a>
 8023048:	9207      	str	r2, [sp, #28]
 802304a:	e014      	b.n	8023076 <_vfiprintf_r+0x13a>
 802304c:	eba0 0308 	sub.w	r3, r0, r8
 8023050:	fa09 f303 	lsl.w	r3, r9, r3
 8023054:	4313      	orrs	r3, r2
 8023056:	9304      	str	r3, [sp, #16]
 8023058:	46a2      	mov	sl, r4
 802305a:	e7d2      	b.n	8023002 <_vfiprintf_r+0xc6>
 802305c:	9b03      	ldr	r3, [sp, #12]
 802305e:	1d19      	adds	r1, r3, #4
 8023060:	681b      	ldr	r3, [r3, #0]
 8023062:	9103      	str	r1, [sp, #12]
 8023064:	2b00      	cmp	r3, #0
 8023066:	bfbb      	ittet	lt
 8023068:	425b      	neglt	r3, r3
 802306a:	f042 0202 	orrlt.w	r2, r2, #2
 802306e:	9307      	strge	r3, [sp, #28]
 8023070:	9307      	strlt	r3, [sp, #28]
 8023072:	bfb8      	it	lt
 8023074:	9204      	strlt	r2, [sp, #16]
 8023076:	7823      	ldrb	r3, [r4, #0]
 8023078:	2b2e      	cmp	r3, #46	@ 0x2e
 802307a:	d10a      	bne.n	8023092 <_vfiprintf_r+0x156>
 802307c:	7863      	ldrb	r3, [r4, #1]
 802307e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023080:	d132      	bne.n	80230e8 <_vfiprintf_r+0x1ac>
 8023082:	9b03      	ldr	r3, [sp, #12]
 8023084:	1d1a      	adds	r2, r3, #4
 8023086:	681b      	ldr	r3, [r3, #0]
 8023088:	9203      	str	r2, [sp, #12]
 802308a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802308e:	3402      	adds	r4, #2
 8023090:	9305      	str	r3, [sp, #20]
 8023092:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023168 <_vfiprintf_r+0x22c>
 8023096:	7821      	ldrb	r1, [r4, #0]
 8023098:	2203      	movs	r2, #3
 802309a:	4650      	mov	r0, sl
 802309c:	f7dd f938 	bl	8000310 <memchr>
 80230a0:	b138      	cbz	r0, 80230b2 <_vfiprintf_r+0x176>
 80230a2:	9b04      	ldr	r3, [sp, #16]
 80230a4:	eba0 000a 	sub.w	r0, r0, sl
 80230a8:	2240      	movs	r2, #64	@ 0x40
 80230aa:	4082      	lsls	r2, r0
 80230ac:	4313      	orrs	r3, r2
 80230ae:	3401      	adds	r4, #1
 80230b0:	9304      	str	r3, [sp, #16]
 80230b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230b6:	4829      	ldr	r0, [pc, #164]	@ (802315c <_vfiprintf_r+0x220>)
 80230b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80230bc:	2206      	movs	r2, #6
 80230be:	f7dd f927 	bl	8000310 <memchr>
 80230c2:	2800      	cmp	r0, #0
 80230c4:	d03f      	beq.n	8023146 <_vfiprintf_r+0x20a>
 80230c6:	4b26      	ldr	r3, [pc, #152]	@ (8023160 <_vfiprintf_r+0x224>)
 80230c8:	bb1b      	cbnz	r3, 8023112 <_vfiprintf_r+0x1d6>
 80230ca:	9b03      	ldr	r3, [sp, #12]
 80230cc:	3307      	adds	r3, #7
 80230ce:	f023 0307 	bic.w	r3, r3, #7
 80230d2:	3308      	adds	r3, #8
 80230d4:	9303      	str	r3, [sp, #12]
 80230d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80230d8:	443b      	add	r3, r7
 80230da:	9309      	str	r3, [sp, #36]	@ 0x24
 80230dc:	e76a      	b.n	8022fb4 <_vfiprintf_r+0x78>
 80230de:	fb0c 3202 	mla	r2, ip, r2, r3
 80230e2:	460c      	mov	r4, r1
 80230e4:	2001      	movs	r0, #1
 80230e6:	e7a8      	b.n	802303a <_vfiprintf_r+0xfe>
 80230e8:	2300      	movs	r3, #0
 80230ea:	3401      	adds	r4, #1
 80230ec:	9305      	str	r3, [sp, #20]
 80230ee:	4619      	mov	r1, r3
 80230f0:	f04f 0c0a 	mov.w	ip, #10
 80230f4:	4620      	mov	r0, r4
 80230f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80230fa:	3a30      	subs	r2, #48	@ 0x30
 80230fc:	2a09      	cmp	r2, #9
 80230fe:	d903      	bls.n	8023108 <_vfiprintf_r+0x1cc>
 8023100:	2b00      	cmp	r3, #0
 8023102:	d0c6      	beq.n	8023092 <_vfiprintf_r+0x156>
 8023104:	9105      	str	r1, [sp, #20]
 8023106:	e7c4      	b.n	8023092 <_vfiprintf_r+0x156>
 8023108:	fb0c 2101 	mla	r1, ip, r1, r2
 802310c:	4604      	mov	r4, r0
 802310e:	2301      	movs	r3, #1
 8023110:	e7f0      	b.n	80230f4 <_vfiprintf_r+0x1b8>
 8023112:	ab03      	add	r3, sp, #12
 8023114:	9300      	str	r3, [sp, #0]
 8023116:	462a      	mov	r2, r5
 8023118:	4b12      	ldr	r3, [pc, #72]	@ (8023164 <_vfiprintf_r+0x228>)
 802311a:	a904      	add	r1, sp, #16
 802311c:	4630      	mov	r0, r6
 802311e:	f3af 8000 	nop.w
 8023122:	4607      	mov	r7, r0
 8023124:	1c78      	adds	r0, r7, #1
 8023126:	d1d6      	bne.n	80230d6 <_vfiprintf_r+0x19a>
 8023128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802312a:	07d9      	lsls	r1, r3, #31
 802312c:	d405      	bmi.n	802313a <_vfiprintf_r+0x1fe>
 802312e:	89ab      	ldrh	r3, [r5, #12]
 8023130:	059a      	lsls	r2, r3, #22
 8023132:	d402      	bmi.n	802313a <_vfiprintf_r+0x1fe>
 8023134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023136:	f7ff fa15 	bl	8022564 <__retarget_lock_release_recursive>
 802313a:	89ab      	ldrh	r3, [r5, #12]
 802313c:	065b      	lsls	r3, r3, #25
 802313e:	f53f af1f 	bmi.w	8022f80 <_vfiprintf_r+0x44>
 8023142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023144:	e71e      	b.n	8022f84 <_vfiprintf_r+0x48>
 8023146:	ab03      	add	r3, sp, #12
 8023148:	9300      	str	r3, [sp, #0]
 802314a:	462a      	mov	r2, r5
 802314c:	4b05      	ldr	r3, [pc, #20]	@ (8023164 <_vfiprintf_r+0x228>)
 802314e:	a904      	add	r1, sp, #16
 8023150:	4630      	mov	r0, r6
 8023152:	f7ff fc61 	bl	8022a18 <_printf_i>
 8023156:	e7e4      	b.n	8023122 <_vfiprintf_r+0x1e6>
 8023158:	08025ba6 	.word	0x08025ba6
 802315c:	08025bb0 	.word	0x08025bb0
 8023160:	00000000 	.word	0x00000000
 8023164:	08022f19 	.word	0x08022f19
 8023168:	08025bac 	.word	0x08025bac

0802316c <_raise_r>:
 802316c:	291f      	cmp	r1, #31
 802316e:	b538      	push	{r3, r4, r5, lr}
 8023170:	4605      	mov	r5, r0
 8023172:	460c      	mov	r4, r1
 8023174:	d904      	bls.n	8023180 <_raise_r+0x14>
 8023176:	2316      	movs	r3, #22
 8023178:	6003      	str	r3, [r0, #0]
 802317a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802317e:	bd38      	pop	{r3, r4, r5, pc}
 8023180:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023182:	b112      	cbz	r2, 802318a <_raise_r+0x1e>
 8023184:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023188:	b94b      	cbnz	r3, 802319e <_raise_r+0x32>
 802318a:	4628      	mov	r0, r5
 802318c:	f000 f830 	bl	80231f0 <_getpid_r>
 8023190:	4622      	mov	r2, r4
 8023192:	4601      	mov	r1, r0
 8023194:	4628      	mov	r0, r5
 8023196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802319a:	f000 b817 	b.w	80231cc <_kill_r>
 802319e:	2b01      	cmp	r3, #1
 80231a0:	d00a      	beq.n	80231b8 <_raise_r+0x4c>
 80231a2:	1c59      	adds	r1, r3, #1
 80231a4:	d103      	bne.n	80231ae <_raise_r+0x42>
 80231a6:	2316      	movs	r3, #22
 80231a8:	6003      	str	r3, [r0, #0]
 80231aa:	2001      	movs	r0, #1
 80231ac:	e7e7      	b.n	802317e <_raise_r+0x12>
 80231ae:	2100      	movs	r1, #0
 80231b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80231b4:	4620      	mov	r0, r4
 80231b6:	4798      	blx	r3
 80231b8:	2000      	movs	r0, #0
 80231ba:	e7e0      	b.n	802317e <_raise_r+0x12>

080231bc <raise>:
 80231bc:	4b02      	ldr	r3, [pc, #8]	@ (80231c8 <raise+0xc>)
 80231be:	4601      	mov	r1, r0
 80231c0:	6818      	ldr	r0, [r3, #0]
 80231c2:	f7ff bfd3 	b.w	802316c <_raise_r>
 80231c6:	bf00      	nop
 80231c8:	24001424 	.word	0x24001424

080231cc <_kill_r>:
 80231cc:	b538      	push	{r3, r4, r5, lr}
 80231ce:	4d07      	ldr	r5, [pc, #28]	@ (80231ec <_kill_r+0x20>)
 80231d0:	2300      	movs	r3, #0
 80231d2:	4604      	mov	r4, r0
 80231d4:	4608      	mov	r0, r1
 80231d6:	4611      	mov	r1, r2
 80231d8:	602b      	str	r3, [r5, #0]
 80231da:	f7df fa25 	bl	8002628 <_kill>
 80231de:	1c43      	adds	r3, r0, #1
 80231e0:	d102      	bne.n	80231e8 <_kill_r+0x1c>
 80231e2:	682b      	ldr	r3, [r5, #0]
 80231e4:	b103      	cbz	r3, 80231e8 <_kill_r+0x1c>
 80231e6:	6023      	str	r3, [r4, #0]
 80231e8:	bd38      	pop	{r3, r4, r5, pc}
 80231ea:	bf00      	nop
 80231ec:	24069848 	.word	0x24069848

080231f0 <_getpid_r>:
 80231f0:	f7df ba12 	b.w	8002618 <_getpid>

080231f4 <_init>:
 80231f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231f6:	bf00      	nop
 80231f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80231fa:	bc08      	pop	{r3}
 80231fc:	469e      	mov	lr, r3
 80231fe:	4770      	bx	lr

08023200 <_fini>:
 8023200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023202:	bf00      	nop
 8023204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023206:	bc08      	pop	{r3}
 8023208:	469e      	mov	lr, r3
 802320a:	4770      	bx	lr
