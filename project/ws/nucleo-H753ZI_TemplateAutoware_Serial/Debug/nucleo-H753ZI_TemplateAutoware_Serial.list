
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e658  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002428  0801e8f8  0801e8f8  0001f8f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020d20  08020d20  00021d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000003c  08020d28  08020d28  00021d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020d64  08020d64  00021d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00001260  24000000  08020d68  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24001260  08021fc8  00023260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240012c0  08022028  000232c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00068528  24001320  08022088  00023320  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24069848  08022088  00023848  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00023320  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fc5e  00000000  00000000  0002334e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f28  00000000  00000000  00052fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002088  00000000  00000000  00058ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000190d  00000000  00000000  0005af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042360  00000000  00000000  0005c86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032cdc  00000000  00000000  0009ebcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00185a27  00000000  00000000  000d18a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  002572d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000965c  00000000  00000000  00257348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  002609a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001320 	.word	0x24001320
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801e8e0 	.word	0x0801e8e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001324 	.word	0x24001324
 80002dc:	0801e8e0 	.word	0x0801e8e0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <StartMicroAutoware>:
#include "autoware.h"

void StartMicroAutoware(void *argument)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 8000746:	af02      	add	r7, sp, #8
 8000748:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 800074c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8000750:	6018      	str	r0, [r3, #0]
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8000752:	4ba1      	ldr	r3, [pc, #644]	@ (80009d8 <StartMicroAutoware+0x298>)
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	4ba1      	ldr	r3, [pc, #644]	@ (80009dc <StartMicroAutoware+0x29c>)
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	4ba1      	ldr	r3, [pc, #644]	@ (80009e0 <StartMicroAutoware+0x2a0>)
 800075c:	4aa1      	ldr	r2, [pc, #644]	@ (80009e4 <StartMicroAutoware+0x2a4>)
 800075e:	49a2      	ldr	r1, [pc, #648]	@ (80009e8 <StartMicroAutoware+0x2a8>)
 8000760:	2001      	movs	r0, #1
 8000762:	f011 fbc1 	bl	8011ee8 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000766:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 800076a:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800076e:	4618      	mov	r0, r3
 8000770:	f011 faf2 	bl	8011d58 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000774:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8000778:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800077c:	4a9b      	ldr	r2, [pc, #620]	@ (80009ec <StartMicroAutoware+0x2ac>)
 800077e:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000780:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8000784:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8000788:	4a99      	ldr	r2, [pc, #612]	@ (80009f0 <StartMicroAutoware+0x2b0>)
 800078a:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 800078c:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8000790:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8000794:	4a97      	ldr	r2, [pc, #604]	@ (80009f4 <StartMicroAutoware+0x2b4>)
 8000796:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000798:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 800079c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80007a0:	4a95      	ldr	r2, [pc, #596]	@ (80009f8 <StartMicroAutoware+0x2b8>)
 80007a2:	60da      	str	r2, [r3, #12]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80007a4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80007a8:	4618      	mov	r0, r3
 80007aa:	f011 fae3 	bl	8011d74 <rcutils_set_default_allocator>
    //printf_("Error on default allocators (line %d)\n", __LINE__);
  }

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 80007ae:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80007b2:	f5a3 7416 	sub.w	r4, r3, #600	@ 0x258
 80007b6:	463b      	mov	r3, r7
 80007b8:	4618      	mov	r0, r3
 80007ba:	f010 fed3 	bl	8011564 <rclc_executor_get_zero_initialized_executor>
 80007be:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80007c2:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80007c6:	4620      	mov	r0, r4
 80007c8:	4619      	mov	r1, r3
 80007ca:	2388      	movs	r3, #136	@ 0x88
 80007cc:	461a      	mov	r2, r3
 80007ce:	f01d fa48 	bl	801dc62 <memcpy>

  allocator = rcl_get_default_allocator();
 80007d2:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80007d6:	f5a3 74e6 	sub.w	r4, r3, #460	@ 0x1cc
 80007da:	463b      	mov	r3, r7
 80007dc:	4618      	mov	r0, r3
 80007de:	f011 fae7 	bl	8011db0 <rcutils_get_default_allocator>
 80007e2:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80007e6:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80007ea:	461d      	mov	r5, r3
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	682b      	ldr	r3, [r5, #0]
 80007f2:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 80007f4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80007f8:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	f011 f9a2 	bl	8011b48 <rclc_support_init>

  // create node
  rclc_node_init_default(&vehicleInterfaceNode, NODE_NAME, "", &support);
 8000804:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000808:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 800080c:	4a7b      	ldr	r2, [pc, #492]	@ (80009fc <StartMicroAutoware+0x2bc>)
 800080e:	497c      	ldr	r1, [pc, #496]	@ (8000a00 <StartMicroAutoware+0x2c0>)
 8000810:	f011 f9e4 	bl	8011bdc <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8000814:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000818:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800081c:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8000820:	2201      	movs	r2, #1
 8000822:	f010 fea9 	bl	8011578 <rclc_executor_init>


  // create subscribers
  // TODO set QoS
  rclc_subscription_init_default(
 8000826:	f00d ffa9 	bl	800e77c <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>
 800082a:	4602      	mov	r2, r0
 800082c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8000830:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 8000834:	4b73      	ldr	r3, [pc, #460]	@ (8000a04 <StartMicroAutoware+0x2c4>)
 8000836:	f011 fa4d 	bl	8011cd4 <rclc_subscription_init_default>
    		&control_cmd_sub_,
    		&vehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_control_msgs, msg, Control),
    		"/control/command/control_cmd");

  rclc_subscription_init_default(
 800083a:	f00e fa95 	bl	800ed68 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>
 800083e:	4602      	mov	r2, r0
 8000840:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8000844:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8000848:	4b6f      	ldr	r3, [pc, #444]	@ (8000a08 <StartMicroAutoware+0x2c8>)
 800084a:	f011 fa43 	bl	8011cd4 <rclc_subscription_init_default>
    		&gear_cmd_sub_,
    		&vehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd");

  rclc_subscription_init_default(
 800084e:	f00e fb03 	bl	800ee58 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>
 8000852:	4602      	mov	r2, r0
 8000854:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8000858:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 800085c:	4b6b      	ldr	r3, [pc, #428]	@ (8000a0c <StartMicroAutoware+0x2cc>)
 800085e:	f011 fa39 	bl	8011cd4 <rclc_subscription_init_default>
    		&turn_indicators_cmd_sub_,
    		&vehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd");

  rclc_subscription_init_default(
 8000862:	f00e fab1 	bl	800edc8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>
 8000866:	4602      	mov	r2, r0
 8000868:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800086c:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8000870:	4b67      	ldr	r3, [pc, #412]	@ (8000a10 <StartMicroAutoware+0x2d0>)
 8000872:	f011 fa2f 	bl	8011cd4 <rclc_subscription_init_default>
    		&hazard_lights_cmd_sub_,
    		&vehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd");

  rclc_subscription_init_default(
 8000876:	f011 fc37 	bl	80120e8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 800087a:	4602      	mov	r2, r0
 800087c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8000880:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8000884:	4b63      	ldr	r3, [pc, #396]	@ (8000a14 <StartMicroAutoware+0x2d4>)
 8000886:	f011 fa25 	bl	8011cd4 <rclc_subscription_init_default>
    		&actuation_cmd_sub_,
    		&vehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd");

  rclc_subscription_init_default(
 800088a:	f011 fc75 	bl	8012178 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 800088e:	4602      	mov	r2, r0
 8000890:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8000894:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8000898:	4b5f      	ldr	r3, [pc, #380]	@ (8000a18 <StartMicroAutoware+0x2d8>)
 800089a:	f011 fa1b 	bl	8011cd4 <rclc_subscription_init_default>
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd");

  // create publishers
  // TODO set QoS
  rclc_publisher_init_default(
 800089e:	f00e fa4b 	bl	800ed38 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>
 80008a2:	4602      	mov	r2, r0
 80008a4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80008a8:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 80008ac:	4b5b      	ldr	r3, [pc, #364]	@ (8000a1c <StartMicroAutoware+0x2dc>)
 80008ae:	f011 f9d7 	bl	8011c60 <rclc_publisher_init_default>
		  	&control_mode_pub_,
			&vehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, ControlModeReport),
			"/vehicle/status/control_mode");

  rclc_publisher_init_default(
 80008b2:	f00e fb01 	bl	800eeb8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>
 80008b6:	4602      	mov	r2, r0
 80008b8:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80008bc:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 80008c0:	4b57      	ldr	r3, [pc, #348]	@ (8000a20 <StartMicroAutoware+0x2e0>)
 80008c2:	f011 f9cd 	bl	8011c60 <rclc_publisher_init_default>
		  	&vehicle_twist_pub_,
			&vehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, VelocityReport),
			"/vehicle/status/velocity_status");

  rclc_publisher_init_default(
 80008c6:	f00e faaf 	bl	800ee28 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>
 80008ca:	4602      	mov	r2, r0
 80008cc:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80008d0:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 80008d4:	4b53      	ldr	r3, [pc, #332]	@ (8000a24 <StartMicroAutoware+0x2e4>)
 80008d6:	f011 f9c3 	bl	8011c60 <rclc_publisher_init_default>
			&steering_status_pub_,
			&vehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, SteeringReport),
			"/vehicle/status/steering_status");

  rclc_publisher_init_default(
 80008da:	f00e fa5d 	bl	800ed98 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>
 80008de:	4602      	mov	r2, r0
 80008e0:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80008e4:	f507 7036 	add.w	r0, r7, #728	@ 0x2d8
 80008e8:	4b4f      	ldr	r3, [pc, #316]	@ (8000a28 <StartMicroAutoware+0x2e8>)
 80008ea:	f011 f9b9 	bl	8011c60 <rclc_publisher_init_default>
			&gear_status_pub_,
			&vehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearReport),
			"/vehicle/status/gear_status");

  rclc_publisher_init_default(
 80008ee:	f00e facb 	bl	800ee88 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>
 80008f2:	4602      	mov	r2, r0
 80008f4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80008f8:	f507 7035 	add.w	r0, r7, #724	@ 0x2d4
 80008fc:	4b4b      	ldr	r3, [pc, #300]	@ (8000a2c <StartMicroAutoware+0x2ec>)
 80008fe:	f011 f9af 	bl	8011c60 <rclc_publisher_init_default>
			&turn_indicators_status_pub_,
			&vehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsReport),
			"/vehicle/status/turn_indicators_status");

  rclc_publisher_init_default(
 8000902:	f00e fa79 	bl	800edf8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>
 8000906:	4602      	mov	r2, r0
 8000908:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800090c:	f507 7034 	add.w	r0, r7, #720	@ 0x2d0
 8000910:	4b47      	ldr	r3, [pc, #284]	@ (8000a30 <StartMicroAutoware+0x2f0>)
 8000912:	f011 f9a5 	bl	8011c60 <rclc_publisher_init_default>
			&hazard_lights_status_pub_,
			&vehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsReport),
			"/vehicle/status/hazard_lights_status");

  rclc_publisher_init_default(
 8000916:	f011 fbff 	bl	8012118 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 800091a:	4602      	mov	r2, r0
 800091c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8000920:	f507 7033 	add.w	r0, r7, #716	@ 0x2cc
 8000924:	4b43      	ldr	r3, [pc, #268]	@ (8000a34 <StartMicroAutoware+0x2f4>)
 8000926:	f011 f99b 	bl	8011c60 <rclc_publisher_init_default>
			&actuation_status_pub_,
			&vehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
			"/vehicle/status/actuation_status");

  rclc_publisher_init_default(
 800092a:	f011 fc0d 	bl	8012148 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 800092e:	4602      	mov	r2, r0
 8000930:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8000934:	f507 7032 	add.w	r0, r7, #712	@ 0x2c8
 8000938:	4b3f      	ldr	r3, [pc, #252]	@ (8000a38 <StartMicroAutoware+0x2f8>)
 800093a:	f011 f991 	bl	8011c60 <rclc_publisher_init_default>
			&vehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
			"/vehicle/status/steering_wheel_status");

  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 800093e:	f507 721f 	add.w	r2, r7, #636	@ 0x27c
 8000942:	f507 713f 	add.w	r1, r7, #764	@ 0x2fc
 8000946:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800094a:	2300      	movs	r3, #0
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a3c <StartMicroAutoware+0x2fc>)
 8000950:	f010 fe8e 	bl	8011670 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &gear_cmd_sub_, &gear_cmd_msg_, &gear_cmd_callback, ON_NEW_DATA);
 8000954:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8000958:	f507 713e 	add.w	r1, r7, #760	@ 0x2f8
 800095c:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8000960:	2300      	movs	r3, #0
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	4b36      	ldr	r3, [pc, #216]	@ (8000a40 <StartMicroAutoware+0x300>)
 8000966:	f010 fe83 	bl	8011670 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &turn_indicators_cmd_sub_, &turn_indicators_cmd_msg_, &turn_indicators_cmd_callback, ON_NEW_DATA);
 800096a:	f507 7219 	add.w	r2, r7, #612	@ 0x264
 800096e:	f507 713d 	add.w	r1, r7, #756	@ 0x2f4
 8000972:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8000976:	2300      	movs	r3, #0
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	4b32      	ldr	r3, [pc, #200]	@ (8000a44 <StartMicroAutoware+0x304>)
 800097c:	f010 fe78 	bl	8011670 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &hazard_lights_cmd_sub_, &hazard_lights_cmd_msg_, &hazard_lights_cmd_callback, ON_NEW_DATA);
 8000980:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8000984:	f507 713c 	add.w	r1, r7, #752	@ 0x2f0
 8000988:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800098c:	2300      	movs	r3, #0
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4b2d      	ldr	r3, [pc, #180]	@ (8000a48 <StartMicroAutoware+0x308>)
 8000992:	f010 fe6d 	bl	8011670 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
 8000996:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800099a:	f507 713b 	add.w	r1, r7, #748	@ 0x2ec
 800099e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80009a2:	2300      	movs	r3, #0
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	4b29      	ldr	r3, [pc, #164]	@ (8000a4c <StartMicroAutoware+0x30c>)
 80009a8:	f010 fe62 	bl	8011670 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);
 80009ac:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 80009b0:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 80009b4:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80009b8:	2300      	movs	r3, #0
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <StartMicroAutoware+0x310>)
 80009be:	f010 fe57 	bl	8011670 <rclc_executor_add_subscription>


  // running executor
  rclc_executor_spin(&executor);
 80009c2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80009c6:	4618      	mov	r0, r3
 80009c8:	f011 f87c 	bl	8011ac4 <rclc_executor_spin>


}
 80009cc:	bf00      	nop
 80009ce:	f507 7740 	add.w	r7, r7, #768	@ 0x300
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bdb0      	pop	{r4, r5, r7, pc}
 80009d6:	bf00      	nop
 80009d8:	08001071 	.word	0x08001071
 80009dc:	0800100d 	.word	0x0800100d
 80009e0:	08000fed 	.word	0x08000fed
 80009e4:	08000fc1 	.word	0x08000fc1
 80009e8:	240329f0 	.word	0x240329f0
 80009ec:	080017e9 	.word	0x080017e9
 80009f0:	0800182d 	.word	0x0800182d
 80009f4:	08001865 	.word	0x08001865
 80009f8:	080018d1 	.word	0x080018d1
 80009fc:	0801e8f8 	.word	0x0801e8f8
 8000a00:	0801e8fc 	.word	0x0801e8fc
 8000a04:	0801e910 	.word	0x0801e910
 8000a08:	0801e930 	.word	0x0801e930
 8000a0c:	0801e94c 	.word	0x0801e94c
 8000a10:	0801e974 	.word	0x0801e974
 8000a14:	0801e998 	.word	0x0801e998
 8000a18:	0801e9b8 	.word	0x0801e9b8
 8000a1c:	0801e9d8 	.word	0x0801e9d8
 8000a20:	0801e9f8 	.word	0x0801e9f8
 8000a24:	0801ea18 	.word	0x0801ea18
 8000a28:	0801ea38 	.word	0x0801ea38
 8000a2c:	0801ea54 	.word	0x0801ea54
 8000a30:	0801ea7c 	.word	0x0801ea7c
 8000a34:	0801eaa4 	.word	0x0801eaa4
 8000a38:	0801eac8 	.word	0x0801eac8
 8000a3c:	08000a55 	.word	0x08000a55
 8000a40:	08000a69 	.word	0x08000a69
 8000a44:	08000a7d 	.word	0x08000a7d
 8000a48:	08000a91 	.word	0x08000a91
 8000a4c:	08000aa5 	.word	0x08000aa5
 8000a50:	08000ab9 	.word	0x08000ab9

08000a54 <control_cmd_callback>:
#include "autoware.h"


// Subscriptors callbacks
void control_cmd_callback(const void * msgin)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <gear_cmd_callback>:

void gear_cmd_callback(const void * msgin)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <turn_indicators_cmd_callback>:

void turn_indicators_cmd_callback(const void * msgin)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <hazard_lights_cmd_callback>:

void hazard_lights_cmd_callback(const void * msgin)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <actuation_cmd_callback>:

void actuation_cmd_callback(const void * msgin)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <emergency_callback>:

void emergency_callback(const void * msgin)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000ad8:	f00c f9b6 	bl	800ce48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000adc:	4b5a      	ldr	r3, [pc, #360]	@ (8000c48 <pvPortMallocMicroROS+0x17c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000ae4:	f000 f986 	bl	8000df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000ae8:	4b58      	ldr	r3, [pc, #352]	@ (8000c4c <pvPortMallocMicroROS+0x180>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4013      	ands	r3, r2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f040 8090 	bne.w	8000c16 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d01e      	beq.n	8000b3a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000afc:	2208      	movs	r2, #8
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d015      	beq.n	8000b3a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f023 0307 	bic.w	r3, r3, #7
 8000b14:	3308      	adds	r3, #8
 8000b16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00b      	beq.n	8000b3a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b26:	f383 8811 	msr	BASEPRI, r3
 8000b2a:	f3bf 8f6f 	isb	sy
 8000b2e:	f3bf 8f4f 	dsb	sy
 8000b32:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	e7fd      	b.n	8000b36 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d06a      	beq.n	8000c16 <pvPortMallocMicroROS+0x14a>
 8000b40:	4b43      	ldr	r3, [pc, #268]	@ (8000c50 <pvPortMallocMicroROS+0x184>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d865      	bhi.n	8000c16 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000b4a:	4b42      	ldr	r3, [pc, #264]	@ (8000c54 <pvPortMallocMicroROS+0x188>)
 8000b4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000b4e:	4b41      	ldr	r3, [pc, #260]	@ (8000c54 <pvPortMallocMicroROS+0x188>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b54:	e004      	b.n	8000b60 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d903      	bls.n	8000b72 <pvPortMallocMicroROS+0xa6>
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f1      	bne.n	8000b56 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000b72:	4b35      	ldr	r3, [pc, #212]	@ (8000c48 <pvPortMallocMicroROS+0x17c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d04c      	beq.n	8000c16 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2208      	movs	r2, #8
 8000b82:	4413      	add	r3, r2
 8000b84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	1ad2      	subs	r2, r2, r3
 8000b96:	2308      	movs	r3, #8
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d920      	bls.n	8000be0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00b      	beq.n	8000bc8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bb4:	f383 8811 	msr	BASEPRI, r3
 8000bb8:	f3bf 8f6f 	isb	sy
 8000bbc:	f3bf 8f4f 	dsb	sy
 8000bc0:	613b      	str	r3, [r7, #16]
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	1ad2      	subs	r2, r2, r3
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000bda:	69b8      	ldr	r0, [r7, #24]
 8000bdc:	f000 f96e 	bl	8000ebc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <pvPortMallocMicroROS+0x184>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	4a19      	ldr	r2, [pc, #100]	@ (8000c50 <pvPortMallocMicroROS+0x184>)
 8000bec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <pvPortMallocMicroROS+0x184>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <pvPortMallocMicroROS+0x18c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d203      	bcs.n	8000c02 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <pvPortMallocMicroROS+0x184>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a16      	ldr	r2, [pc, #88]	@ (8000c58 <pvPortMallocMicroROS+0x18c>)
 8000c00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <pvPortMallocMicroROS+0x180>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000c16:	f00c f925 	bl	800ce64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00b      	beq.n	8000c3c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c28:	f383 8811 	msr	BASEPRI, r3
 8000c2c:	f3bf 8f6f 	isb	sy
 8000c30:	f3bf 8f4f 	dsb	sy
 8000c34:	60fb      	str	r3, [r7, #12]
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000c3c:	69fb      	ldr	r3, [r7, #28]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3728      	adds	r7, #40	@ 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	24032084 	.word	0x24032084
 8000c4c:	24032090 	.word	0x24032090
 8000c50:	24032088 	.word	0x24032088
 8000c54:	2403207c 	.word	0x2403207c
 8000c58:	2403208c 	.word	0x2403208c

08000c5c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d04a      	beq.n	8000d04 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	425b      	negs	r3, r3
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4413      	add	r3, r2
 8000c76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <vPortFreeMicroROS+0xb0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10b      	bne.n	8000ca2 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c8e:	f383 8811 	msr	BASEPRI, r3
 8000c92:	f3bf 8f6f 	isb	sy
 8000c96:	f3bf 8f4f 	dsb	sy
 8000c9a:	60fb      	str	r3, [r7, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	e7fd      	b.n	8000c9e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00b      	beq.n	8000cc2 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cae:	f383 8811 	msr	BASEPRI, r3
 8000cb2:	f3bf 8f6f 	isb	sy
 8000cb6:	f3bf 8f4f 	dsb	sy
 8000cba:	60bb      	str	r3, [r7, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	e7fd      	b.n	8000cbe <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <vPortFreeMicroROS+0xb0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d019      	beq.n	8000d04 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d115      	bne.n	8000d04 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <vPortFreeMicroROS+0xb0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000ce8:	f00c f8ae 	bl	800ce48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <vPortFreeMicroROS+0xb4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a06      	ldr	r2, [pc, #24]	@ (8000d10 <vPortFreeMicroROS+0xb4>)
 8000cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000cfa:	6938      	ldr	r0, [r7, #16]
 8000cfc:	f000 f8de 	bl	8000ebc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000d00:	f00c f8b0 	bl	800ce64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	24032090 	.word	0x24032090
 8000d10:	24032088 	.word	0x24032088

08000d14 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000d20:	2308      	movs	r3, #8
 8000d22:	425b      	negs	r3, r3
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	4413      	add	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <getBlockSize+0x38>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

	return count;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	371c      	adds	r7, #28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	24032090 	.word	0x24032090

08000d50 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000d5a:	f00c f875 	bl	800ce48 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000d5e:	6838      	ldr	r0, [r7, #0]
 8000d60:	f7ff feb4 	bl	8000acc <pvPortMallocMicroROS>
 8000d64:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d017      	beq.n	8000d9c <pvPortReallocMicroROS+0x4c>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d014      	beq.n	8000d9c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffce 	bl	8000d14 <getBlockSize>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	1a9b      	subs	r3, r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d201      	bcs.n	8000d8c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	68b8      	ldr	r0, [r7, #8]
 8000d92:	f01c ff66 	bl	801dc62 <memcpy>

		vPortFreeMicroROS(pv);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff60 	bl	8000c5c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000d9c:	f00c f862 	bl	800ce64 <xTaskResumeAll>

	return newmem;
 8000da0:	68bb      	ldr	r3, [r7, #8]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000db4:	f00c f848 	bl	800ce48 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff fe82 	bl	8000acc <pvPortMallocMicroROS>
 8000dc8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000dce:	e004      	b.n	8000dda <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	613a      	str	r2, [r7, #16]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	617a      	str	r2, [r7, #20]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f5      	bne.n	8000dd0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000de4:	f00c f83e 	bl	800ce64 <xTaskResumeAll>
  	return mem;
 8000de8:	68fb      	ldr	r3, [r7, #12]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000dfa:	4b29      	ldr	r3, [pc, #164]	@ (8000ea0 <prvHeapInit+0xac>)
 8000dfc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000dfe:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <prvHeapInit+0xb0>)
 8000e00:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00c      	beq.n	8000e26 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3307      	adds	r3, #7
 8000e10:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f023 0307 	bic.w	r3, r3, #7
 8000e18:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	4a20      	ldr	r2, [pc, #128]	@ (8000ea4 <prvHeapInit+0xb0>)
 8000e22:	4413      	add	r3, r2
 8000e24:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea8 <prvHeapInit+0xb4>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <prvHeapInit+0xb4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000e3e:	2208      	movs	r2, #8
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f023 0307 	bic.w	r3, r3, #7
 8000e4c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4a16      	ldr	r2, [pc, #88]	@ (8000eac <prvHeapInit+0xb8>)
 8000e52:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <prvHeapInit+0xb8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <prvHeapInit+0xb8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	1ad2      	subs	r2, r2, r3
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <prvHeapInit+0xb8>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <prvHeapInit+0xbc>)
 8000e80:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb4 <prvHeapInit+0xc0>)
 8000e88:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <prvHeapInit+0xc4>)
 8000e8c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000e90:	601a      	str	r2, [r3, #0]
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	00030d40 	.word	0x00030d40
 8000ea4:	2400133c 	.word	0x2400133c
 8000ea8:	2403207c 	.word	0x2403207c
 8000eac:	24032084 	.word	0x24032084
 8000eb0:	2403208c 	.word	0x2403208c
 8000eb4:	24032088 	.word	0x24032088
 8000eb8:	24032090 	.word	0x24032090

08000ebc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ec4:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <prvInsertBlockIntoFreeList+0xac>)
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e002      	b.n	8000ed0 <prvInsertBlockIntoFreeList+0x14>
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d8f7      	bhi.n	8000eca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d108      	bne.n	8000efe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	441a      	add	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	441a      	add	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d118      	bne.n	8000f44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <prvInsertBlockIntoFreeList+0xb0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d00d      	beq.n	8000f3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	441a      	add	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e008      	b.n	8000f4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <prvInsertBlockIntoFreeList+0xb0>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e003      	b.n	8000f4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d002      	beq.n	8000f5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2403207c 	.word	0x2403207c
 8000f6c:	24032084 	.word	0x24032084

08000f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_DMA_Init+0x4c>)
 8000f78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fbc <MX_DMA_Init+0x4c>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <MX_DMA_Init+0x4c>)
 8000f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2105      	movs	r1, #5
 8000f98:	200b      	movs	r0, #11
 8000f9a:	f001 faf9 	bl	8002590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f9e:	200b      	movs	r0, #11
 8000fa0:	f001 fb10 	bl	80025c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2105      	movs	r1, #5
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f001 faf1 	bl	8002590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fae:	200c      	movs	r0, #12
 8000fb0:	f001 fb08 	bl	80025c4 <HAL_NVIC_EnableIRQ>

}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	58024400 	.word	0x58024400

08000fc0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000fce:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000fd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fd4:	4904      	ldr	r1, [pc, #16]	@ (8000fe8 <cubemx_transport_open+0x28>)
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f008 fab4 	bl	8009544 <HAL_UART_Receive_DMA>
    return true;
 8000fdc:	2301      	movs	r3, #1
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	24032094 	.word	0x24032094

08000fec <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ffa:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f008 faed 	bl	80095dc <HAL_UART_DMAStop>
    return true;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001020:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001028:	2b20      	cmp	r3, #32
 800102a:	d11b      	bne.n	8001064 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	b29b      	uxth	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f008 fa05 	bl	8009444 <HAL_UART_Transmit_DMA>
 800103a:	4603      	mov	r3, r0
 800103c:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800103e:	e002      	b.n	8001046 <cubemx_transport_write+0x3a>
            osDelay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f00a fe9f 	bl	800bd84 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001046:	7cfb      	ldrb	r3, [r7, #19]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d104      	bne.n	8001056 <cubemx_transport_write+0x4a>
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001052:	2b20      	cmp	r3, #32
 8001054:	d1f4      	bne.n	8001040 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001056:	7cfb      	ldrb	r3, [r7, #19]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <cubemx_transport_write+0x54>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	e002      	b.n	8001066 <cubemx_transport_write+0x5a>
 8001060:	2300      	movs	r3, #0
 8001062:	e000      	b.n	8001066 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001064:	2300      	movs	r3, #0
    }
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001084:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108a:	b672      	cpsid	i
}
 800108c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a5a      	ldr	r2, [pc, #360]	@ (8001200 <cubemx_transport_read+0x190>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d068      	beq.n	800116e <cubemx_transport_read+0xfe>
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a57      	ldr	r2, [pc, #348]	@ (8001204 <cubemx_transport_read+0x194>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d061      	beq.n	800116e <cubemx_transport_read+0xfe>
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a55      	ldr	r2, [pc, #340]	@ (8001208 <cubemx_transport_read+0x198>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d05a      	beq.n	800116e <cubemx_transport_read+0xfe>
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a52      	ldr	r2, [pc, #328]	@ (800120c <cubemx_transport_read+0x19c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d053      	beq.n	800116e <cubemx_transport_read+0xfe>
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a50      	ldr	r2, [pc, #320]	@ (8001210 <cubemx_transport_read+0x1a0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d04c      	beq.n	800116e <cubemx_transport_read+0xfe>
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001214 <cubemx_transport_read+0x1a4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d045      	beq.n	800116e <cubemx_transport_read+0xfe>
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a4b      	ldr	r2, [pc, #300]	@ (8001218 <cubemx_transport_read+0x1a8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d03e      	beq.n	800116e <cubemx_transport_read+0xfe>
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a48      	ldr	r2, [pc, #288]	@ (800121c <cubemx_transport_read+0x1ac>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d037      	beq.n	800116e <cubemx_transport_read+0xfe>
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a46      	ldr	r2, [pc, #280]	@ (8001220 <cubemx_transport_read+0x1b0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d030      	beq.n	800116e <cubemx_transport_read+0xfe>
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a43      	ldr	r2, [pc, #268]	@ (8001224 <cubemx_transport_read+0x1b4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d029      	beq.n	800116e <cubemx_transport_read+0xfe>
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a41      	ldr	r2, [pc, #260]	@ (8001228 <cubemx_transport_read+0x1b8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d022      	beq.n	800116e <cubemx_transport_read+0xfe>
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a3e      	ldr	r2, [pc, #248]	@ (800122c <cubemx_transport_read+0x1bc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01b      	beq.n	800116e <cubemx_transport_read+0xfe>
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a3c      	ldr	r2, [pc, #240]	@ (8001230 <cubemx_transport_read+0x1c0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d014      	beq.n	800116e <cubemx_transport_read+0xfe>
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a39      	ldr	r2, [pc, #228]	@ (8001234 <cubemx_transport_read+0x1c4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <cubemx_transport_read+0xfe>
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a37      	ldr	r2, [pc, #220]	@ (8001238 <cubemx_transport_read+0x1c8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d006      	beq.n	800116e <cubemx_transport_read+0xfe>
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a34      	ldr	r2, [pc, #208]	@ (800123c <cubemx_transport_read+0x1cc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d107      	bne.n	800117e <cubemx_transport_read+0x10e>
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800117c:	e006      	b.n	800118c <cubemx_transport_read+0x11c>
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800118c:	4a2c      	ldr	r2, [pc, #176]	@ (8001240 <cubemx_transport_read+0x1d0>)
 800118e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001190:	b662      	cpsie	i
}
 8001192:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	3301      	adds	r3, #1
 8001198:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800119a:	2001      	movs	r0, #1
 800119c:	f00a fdf2 	bl	800bd84 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80011a0:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <cubemx_transport_read+0x1d4>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <cubemx_transport_read+0x1d0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d104      	bne.n	80011b6 <cubemx_transport_read+0x146>
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f6ff af6a 	blt.w	800108a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80011ba:	e011      	b.n	80011e0 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80011bc:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <cubemx_transport_read+0x1d4>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	440b      	add	r3, r1
 80011c6:	4920      	ldr	r1, [pc, #128]	@ (8001248 <cubemx_transport_read+0x1d8>)
 80011c8:	5c8a      	ldrb	r2, [r1, r2]
 80011ca:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <cubemx_transport_read+0x1d4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <cubemx_transport_read+0x1d4>)
 80011d8:	6013      	str	r3, [r2, #0]
        wrote++;
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	3301      	adds	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <cubemx_transport_read+0x1d4>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <cubemx_transport_read+0x1d0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d003      	beq.n	80011f4 <cubemx_transport_read+0x184>
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3e3      	bcc.n	80011bc <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 80011f4:	69bb      	ldr	r3, [r7, #24]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020010 	.word	0x40020010
 8001204:	40020028 	.word	0x40020028
 8001208:	40020040 	.word	0x40020040
 800120c:	40020058 	.word	0x40020058
 8001210:	40020070 	.word	0x40020070
 8001214:	40020088 	.word	0x40020088
 8001218:	400200a0 	.word	0x400200a0
 800121c:	400200b8 	.word	0x400200b8
 8001220:	40020410 	.word	0x40020410
 8001224:	40020428 	.word	0x40020428
 8001228:	40020440 	.word	0x40020440
 800122c:	40020458 	.word	0x40020458
 8001230:	40020470 	.word	0x40020470
 8001234:	40020488 	.word	0x40020488
 8001238:	400204a0 	.word	0x400204a0
 800123c:	400204b8 	.word	0x400204b8
 8001240:	24032898 	.word	0x24032898
 8001244:	24032894 	.word	0x24032894
 8001248:	24032094 	.word	0x24032094

0800124c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001250:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <MX_ETH_Init+0x80>)
 8001252:	4a1f      	ldr	r2, [pc, #124]	@ (80012d0 <MX_ETH_Init+0x84>)
 8001254:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001256:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <MX_ETH_Init+0x88>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <MX_ETH_Init+0x88>)
 800125e:	2280      	movs	r2, #128	@ 0x80
 8001260:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001262:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_ETH_Init+0x88>)
 8001264:	22e1      	movs	r2, #225	@ 0xe1
 8001266:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <MX_ETH_Init+0x88>)
 800126a:	2200      	movs	r2, #0
 800126c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_ETH_Init+0x88>)
 8001270:	2200      	movs	r2, #0
 8001272:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <MX_ETH_Init+0x88>)
 8001276:	2200      	movs	r2, #0
 8001278:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_ETH_Init+0x80>)
 800127c:	4a15      	ldr	r2, [pc, #84]	@ (80012d4 <MX_ETH_Init+0x88>)
 800127e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_ETH_Init+0x80>)
 8001282:	2201      	movs	r2, #1
 8001284:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_ETH_Init+0x80>)
 8001288:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <MX_ETH_Init+0x8c>)
 800128a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_ETH_Init+0x80>)
 800128e:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <MX_ETH_Init+0x90>)
 8001290:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_ETH_Init+0x80>)
 8001294:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001298:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800129a:	480c      	ldr	r0, [pc, #48]	@ (80012cc <MX_ETH_Init+0x80>)
 800129c:	f003 ffe8 	bl	8005270 <HAL_ETH_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80012a6:	f000 fa99 	bl	80017dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80012aa:	2238      	movs	r2, #56	@ 0x38
 80012ac:	2100      	movs	r1, #0
 80012ae:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <MX_ETH_Init+0x94>)
 80012b0:	f01c fbb8 	bl	801da24 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <MX_ETH_Init+0x94>)
 80012b6:	2221      	movs	r2, #33	@ 0x21
 80012b8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MX_ETH_Init+0x94>)
 80012bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012c0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012c2:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <MX_ETH_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	240328d4 	.word	0x240328d4
 80012d0:	40028000 	.word	0x40028000
 80012d4:	24032984 	.word	0x24032984
 80012d8:	240012c0 	.word	0x240012c0
 80012dc:	24001260 	.word	0x24001260
 80012e0:	2403289c 	.word	0x2403289c

080012e4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	@ 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a59      	ldr	r2, [pc, #356]	@ (8001468 <HAL_ETH_MspInit+0x184>)
 8001302:	4293      	cmp	r3, r2
 8001304:	f040 80ab 	bne.w	800145e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001308:	4b58      	ldr	r3, [pc, #352]	@ (800146c <HAL_ETH_MspInit+0x188>)
 800130a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800130e:	4a57      	ldr	r2, [pc, #348]	@ (800146c <HAL_ETH_MspInit+0x188>)
 8001310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001314:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001318:	4b54      	ldr	r3, [pc, #336]	@ (800146c <HAL_ETH_MspInit+0x188>)
 800131a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800131e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001326:	4b51      	ldr	r3, [pc, #324]	@ (800146c <HAL_ETH_MspInit+0x188>)
 8001328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800132c:	4a4f      	ldr	r2, [pc, #316]	@ (800146c <HAL_ETH_MspInit+0x188>)
 800132e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001332:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001336:	4b4d      	ldr	r3, [pc, #308]	@ (800146c <HAL_ETH_MspInit+0x188>)
 8001338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800133c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001344:	4b49      	ldr	r3, [pc, #292]	@ (800146c <HAL_ETH_MspInit+0x188>)
 8001346:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800134a:	4a48      	ldr	r2, [pc, #288]	@ (800146c <HAL_ETH_MspInit+0x188>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001354:	4b45      	ldr	r3, [pc, #276]	@ (800146c <HAL_ETH_MspInit+0x188>)
 8001356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b42      	ldr	r3, [pc, #264]	@ (800146c <HAL_ETH_MspInit+0x188>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001368:	4a40      	ldr	r2, [pc, #256]	@ (800146c <HAL_ETH_MspInit+0x188>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001372:	4b3e      	ldr	r3, [pc, #248]	@ (800146c <HAL_ETH_MspInit+0x188>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b3a      	ldr	r3, [pc, #232]	@ (800146c <HAL_ETH_MspInit+0x188>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001386:	4a39      	ldr	r2, [pc, #228]	@ (800146c <HAL_ETH_MspInit+0x188>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001390:	4b36      	ldr	r3, [pc, #216]	@ (800146c <HAL_ETH_MspInit+0x188>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b33      	ldr	r3, [pc, #204]	@ (800146c <HAL_ETH_MspInit+0x188>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a4:	4a31      	ldr	r2, [pc, #196]	@ (800146c <HAL_ETH_MspInit+0x188>)
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ae:	4b2f      	ldr	r3, [pc, #188]	@ (800146c <HAL_ETH_MspInit+0x188>)
 80013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013bc:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <HAL_ETH_MspInit+0x188>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	4a2a      	ldr	r2, [pc, #168]	@ (800146c <HAL_ETH_MspInit+0x188>)
 80013c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013cc:	4b27      	ldr	r3, [pc, #156]	@ (800146c <HAL_ETH_MspInit+0x188>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80013da:	2332      	movs	r3, #50	@ 0x32
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ea:	230b      	movs	r3, #11
 80013ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	481e      	ldr	r0, [pc, #120]	@ (8001470 <HAL_ETH_MspInit+0x18c>)
 80013f6:	f004 fb6f 	bl	8005ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80013fa:	2386      	movs	r3, #134	@ 0x86
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800140a:	230b      	movs	r3, #11
 800140c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4817      	ldr	r0, [pc, #92]	@ (8001474 <HAL_ETH_MspInit+0x190>)
 8001416:	f004 fb5f 	bl	8005ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800141a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800142c:	230b      	movs	r3, #11
 800142e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4810      	ldr	r0, [pc, #64]	@ (8001478 <HAL_ETH_MspInit+0x194>)
 8001438:	f004 fb4e 	bl	8005ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800143c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800144e:	230b      	movs	r3, #11
 8001450:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4808      	ldr	r0, [pc, #32]	@ (800147c <HAL_ETH_MspInit+0x198>)
 800145a:	f004 fb3d 	bl	8005ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800145e:	bf00      	nop
 8001460:	3738      	adds	r7, #56	@ 0x38
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40028000 	.word	0x40028000
 800146c:	58024400 	.word	0x58024400
 8001470:	58020800 	.word	0x58020800
 8001474:	58020000 	.word	0x58020000
 8001478:	58020400 	.word	0x58020400
 800147c:	58021800 	.word	0x58021800

08001480 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskDefault */
  TaskDefaultHandle = osThreadNew(StartTaskDefault, NULL, &TaskDefault_attributes);
 8001484:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <MX_FREERTOS_Init+0x28>)
 8001486:	2100      	movs	r1, #0
 8001488:	4808      	ldr	r0, [pc, #32]	@ (80014ac <MX_FREERTOS_Init+0x2c>)
 800148a:	f00a fbe9 	bl	800bc60 <osThreadNew>
 800148e:	4603      	mov	r3, r0
 8001490:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <MX_FREERTOS_Init+0x30>)
 8001492:	6013      	str	r3, [r2, #0]

  /* creation of TaskAutoware */
  TaskAutowareHandle = osThreadNew(StartMicroAutoware, NULL, &TaskAutoware_attributes);
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <MX_FREERTOS_Init+0x34>)
 8001496:	2100      	movs	r1, #0
 8001498:	4807      	ldr	r0, [pc, #28]	@ (80014b8 <MX_FREERTOS_Init+0x38>)
 800149a:	f00a fbe1 	bl	800bc60 <osThreadNew>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a06      	ldr	r2, [pc, #24]	@ (80014bc <MX_FREERTOS_Init+0x3c>)
 80014a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	0801eb44 	.word	0x0801eb44
 80014ac:	080014c1 	.word	0x080014c1
 80014b0:	2403298c 	.word	0x2403298c
 80014b4:	0801eb68 	.word	0x0801eb68
 80014b8:	08000741 	.word	0x08000741
 80014bc:	24032990 	.word	0x24032990

080014c0 <StartTaskDefault>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskDefault */
void StartTaskDefault(void *argument)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDefault */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f00a fc5b 	bl	800bd84 <osDelay>
 80014ce:	e7fb      	b.n	80014c8 <StartTaskDefault+0x8>

080014d0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08c      	sub	sp, #48	@ 0x30
 80014d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b62      	ldr	r3, [pc, #392]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ec:	4a60      	ldr	r2, [pc, #384]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001504:	4b5a      	ldr	r3, [pc, #360]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150a:	4a59      	ldr	r2, [pc, #356]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001514:	4b56      	ldr	r3, [pc, #344]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b53      	ldr	r3, [pc, #332]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001528:	4a51      	ldr	r2, [pc, #324]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001532:	4b4f      	ldr	r3, [pc, #316]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	4b4b      	ldr	r3, [pc, #300]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001546:	4a4a      	ldr	r2, [pc, #296]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001550:	4b47      	ldr	r3, [pc, #284]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	4b44      	ldr	r3, [pc, #272]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001564:	4a42      	ldr	r2, [pc, #264]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156e:	4b40      	ldr	r3, [pc, #256]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800157c:	4b3c      	ldr	r3, [pc, #240]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001582:	4a3b      	ldr	r2, [pc, #236]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 8001584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800158c:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800159a:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a0:	4a33      	ldr	r2, [pc, #204]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015aa:	4b31      	ldr	r3, [pc, #196]	@ (8001670 <MX_GPIO_Init+0x1a0>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f244 0101 	movw	r1, #16385	@ 0x4001
 80015be:	482d      	ldr	r0, [pc, #180]	@ (8001674 <MX_GPIO_Init+0x1a4>)
 80015c0:	f004 fc3a 	bl	8005e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015ca:	482b      	ldr	r0, [pc, #172]	@ (8001678 <MX_GPIO_Init+0x1a8>)
 80015cc:	f004 fc34 	bl	8005e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2102      	movs	r1, #2
 80015d4:	4829      	ldr	r0, [pc, #164]	@ (800167c <MX_GPIO_Init+0x1ac>)
 80015d6:	f004 fc2f 	bl	8005e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4824      	ldr	r0, [pc, #144]	@ (8001680 <MX_GPIO_Init+0x1b0>)
 80015f0:	f004 fa72 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80015f4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4819      	ldr	r0, [pc, #100]	@ (8001674 <MX_GPIO_Init+0x1a4>)
 800160e:	f004 fa63 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4813      	ldr	r0, [pc, #76]	@ (8001678 <MX_GPIO_Init+0x1a8>)
 800162c:	f004 fa54 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001634:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	480f      	ldr	r0, [pc, #60]	@ (8001684 <MX_GPIO_Init+0x1b4>)
 8001646:	f004 fa47 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800164a:	2302      	movs	r3, #2
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4806      	ldr	r0, [pc, #24]	@ (800167c <MX_GPIO_Init+0x1ac>)
 8001662:	f004 fa39 	bl	8005ad8 <HAL_GPIO_Init>

}
 8001666:	bf00      	nop
 8001668:	3730      	adds	r7, #48	@ 0x30
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	58024400 	.word	0x58024400
 8001674:	58020400 	.word	0x58020400
 8001678:	58020c00 	.word	0x58020c00
 800167c:	58021000 	.word	0x58021000
 8001680:	58020800 	.word	0x58020800
 8001684:	58021800 	.word	0x58021800

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168c:	f000 fe28 	bl	80022e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001690:	f000 f812 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001694:	f7ff ff1c 	bl	80014d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001698:	f7ff fc6a 	bl	8000f70 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800169c:	f000 fc24 	bl	8001ee8 <MX_USART3_UART_Init>
  MX_ETH_Init();
 80016a0:	f7ff fdd4 	bl	800124c <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016a4:	f000 fd44 	bl	8002130 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016a8:	f00a fa90 	bl	800bbcc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80016ac:	f7ff fee8 	bl	8001480 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016b0:	f00a fab0 	bl	800bc14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <main+0x2c>

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b09c      	sub	sp, #112	@ 0x70
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c2:	224c      	movs	r2, #76	@ 0x4c
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f01c f9ac 	bl	801da24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2220      	movs	r2, #32
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f01c f9a6 	bl	801da24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016d8:	2002      	movs	r0, #2
 80016da:	f004 fcf7 	bl	80060cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <SystemClock_Config+0xf8>)
 80016e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e6:	4a32      	ldr	r2, [pc, #200]	@ (80017b0 <SystemClock_Config+0xf8>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016ee:	4b30      	ldr	r3, [pc, #192]	@ (80017b0 <SystemClock_Config+0xf8>)
 80016f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4b2e      	ldr	r3, [pc, #184]	@ (80017b4 <SystemClock_Config+0xfc>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001700:	4a2c      	ldr	r2, [pc, #176]	@ (80017b4 <SystemClock_Config+0xfc>)
 8001702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b2a      	ldr	r3, [pc, #168]	@ (80017b4 <SystemClock_Config+0xfc>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001714:	bf00      	nop
 8001716:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <SystemClock_Config+0xfc>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800171e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001722:	d1f8      	bne.n	8001716 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001724:	2303      	movs	r3, #3
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001728:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800172e:	2301      	movs	r3, #1
 8001730:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001732:	2340      	movs	r3, #64	@ 0x40
 8001734:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173a:	2302      	movs	r3, #2
 800173c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800173e:	2301      	movs	r3, #1
 8001740:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001742:	2318      	movs	r3, #24
 8001744:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001746:	2302      	movs	r3, #2
 8001748:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800174a:	2304      	movs	r3, #4
 800174c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800174e:	2302      	movs	r3, #2
 8001750:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001752:	230c      	movs	r3, #12
 8001754:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001756:	2300      	movs	r3, #0
 8001758:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001762:	4618      	mov	r0, r3
 8001764:	f004 fcfc 	bl	8006160 <HAL_RCC_OscConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800176e:	f000 f835 	bl	80017dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001772:	233f      	movs	r3, #63	@ 0x3f
 8001774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2101      	movs	r1, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f005 f93c 	bl	8006a14 <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80017a2:	f000 f81b 	bl	80017dc <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3770      	adds	r7, #112	@ 0x70
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	58000400 	.word	0x58000400
 80017b4:	58024800 	.word	0x58024800

080017b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ca:	f000 fdc5 	bl	8002358 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40001000 	.word	0x40001000

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <Error_Handler+0x8>

080017e8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <microros_allocate+0x3c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <microros_allocate+0x3c>)
 8001800:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <microros_allocate+0x40>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <microros_allocate+0x40>)
 8001810:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff f95a 	bl	8000acc <pvPortMallocMicroROS>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	24032994 	.word	0x24032994
 8001828:	24032998 	.word	0x24032998

0800182c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00c      	beq.n	8001856 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fa69 	bl	8000d14 <getBlockSize>
 8001842:	4603      	mov	r3, r0
 8001844:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <microros_deallocate+0x34>)
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	461a      	mov	r2, r3
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <microros_deallocate+0x34>)
 800184e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fa03 	bl	8000c5c <vPortFreeMicroROS>
  }
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24032998 	.word	0x24032998

08001864 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <microros_reallocate+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	4413      	add	r3, r2
 800187a:	461a      	mov	r2, r3
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <microros_reallocate+0x64>)
 800187e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <microros_reallocate+0x68>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4413      	add	r3, r2
 800188a:	461a      	mov	r2, r3
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <microros_reallocate+0x68>)
 800188e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d104      	bne.n	80018a0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001896:	68b8      	ldr	r0, [r7, #8]
 8001898:	f7ff f918 	bl	8000acc <pvPortMallocMicroROS>
 800189c:	4603      	mov	r3, r0
 800189e:	e00e      	b.n	80018be <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff fa37 	bl	8000d14 <getBlockSize>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a08      	ldr	r2, [pc, #32]	@ (80018cc <microros_reallocate+0x68>)
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <microros_reallocate+0x68>)
 80018b2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff fa4a 	bl	8000d50 <pvPortReallocMicroROS>
 80018bc:	4603      	mov	r3, r0
  }
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	24032994 	.word	0x24032994
 80018cc:	24032998 	.word	0x24032998

080018d0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001918 <microros_zero_allocate+0x48>)
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <microros_zero_allocate+0x48>)
 80018ee:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	4a08      	ldr	r2, [pc, #32]	@ (800191c <microros_zero_allocate+0x4c>)
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <microros_zero_allocate+0x4c>)
 8001902:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f7ff fa4f 	bl	8000daa <pvPortCallocMicroROS>
 800190c:	4603      	mov	r3, r0
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	24032994 	.word	0x24032994
 800191c:	24032998 	.word	0x24032998

08001920 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001920:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001936:	a320      	add	r3, pc, #128	@ (adr r3, 80019b8 <UTILS_NanosecondsToTimespec+0x98>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7fe fd38 	bl	80003b0 <__aeabi_ldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800194a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800194e:	a31a      	add	r3, pc, #104	@ (adr r3, 80019b8 <UTILS_NanosecondsToTimespec+0x98>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe fd2c 	bl	80003b0 <__aeabi_ldivmod>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	da20      	bge.n	80019a6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a11      	ldr	r2, [pc, #68]	@ (80019b0 <UTILS_NanosecondsToTimespec+0x90>)
 800196a:	fb82 1203 	smull	r1, r2, r2, r3
 800196e:	1712      	asrs	r2, r2, #28
 8001970:	17db      	asrs	r3, r3, #31
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	6979      	ldr	r1, [r7, #20]
 8001980:	17c8      	asrs	r0, r1, #31
 8001982:	460c      	mov	r4, r1
 8001984:	4605      	mov	r5, r0
 8001986:	ebb2 0804 	subs.w	r8, r2, r4
 800198a:	eb63 0905 	sbc.w	r9, r3, r5
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	4906      	ldr	r1, [pc, #24]	@ (80019b4 <UTILS_NanosecondsToTimespec+0x94>)
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	441a      	add	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	609a      	str	r2, [r3, #8]
    }
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b0:	44b82fa1 	.word	0x44b82fa1
 80019b4:	3b9aca00 	.word	0x3b9aca00
 80019b8:	3b9aca00 	.word	0x3b9aca00
 80019bc:	00000000 	.word	0x00000000

080019c0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b08e      	sub	sp, #56	@ 0x38
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80019ca:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80019cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80019d0:	2300      	movs	r3, #0
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80019e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00b fcc0 	bl	800d36c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	17da      	asrs	r2, r3, #31
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	61fa      	str	r2, [r7, #28]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	69b9      	ldr	r1, [r7, #24]
 80019fe:	000b      	movs	r3, r1
 8001a00:	2200      	movs	r2, #0
 8001a02:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	4615      	mov	r5, r2
 8001a0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a12:	1911      	adds	r1, r2, r4
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	416b      	adcs	r3, r5
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a1e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001a22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	f04f 0400 	mov.w	r4, #0
 8001a2e:	f04f 0500 	mov.w	r5, #0
 8001a32:	015d      	lsls	r5, r3, #5
 8001a34:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001a38:	0154      	lsls	r4, r2, #5
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	462b      	mov	r3, r5
 8001a3e:	ebb2 0800 	subs.w	r8, r2, r0
 8001a42:	eb63 0901 	sbc.w	r9, r3, r1
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001a52:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001a56:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001a5a:	4690      	mov	r8, r2
 8001a5c:	4699      	mov	r9, r3
 8001a5e:	eb18 0a00 	adds.w	sl, r8, r0
 8001a62:	eb49 0b01 	adc.w	fp, r9, r1
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a72:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a76:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a7a:	ebb2 040a 	subs.w	r4, r2, sl
 8001a7e:	603c      	str	r4, [r7, #0]
 8001a80:	eb63 030b 	sbc.w	r3, r3, fp
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	181b      	adds	r3, r3, r0
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	462b      	mov	r3, r5
 8001a92:	eb41 0303 	adc.w	r3, r1, r3
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	6a3a      	ldr	r2, [r7, #32]
 8001a9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a9e:	f7ff ff3f 	bl	8001920 <UTILS_NanosecondsToTimespec>

    return 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3738      	adds	r7, #56	@ 0x38
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <HAL_MspInit+0x38>)
 8001ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001abc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_MspInit+0x38>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ac6:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <HAL_MspInit+0x38>)
 8001ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f06f 0001 	mvn.w	r0, #1
 8001adc:	f000 fd58 	bl	8002590 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	58024400 	.word	0x58024400

08001aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b090      	sub	sp, #64	@ 0x40
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	d827      	bhi.n	8001b4a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001afa:	2200      	movs	r2, #0
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	2036      	movs	r0, #54	@ 0x36
 8001b00:	f000 fd46 	bl	8002590 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b04:	2036      	movs	r0, #54	@ 0x36
 8001b06:	f000 fd5d 	bl	80025c4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001b0a:	4a29      	ldr	r2, [pc, #164]	@ (8001bb0 <HAL_InitTick+0xc4>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b10:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <HAL_InitTick+0xc8>)
 8001b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b16:	4a27      	ldr	r2, [pc, #156]	@ (8001bb4 <HAL_InitTick+0xc8>)
 8001b18:	f043 0310 	orr.w	r3, r3, #16
 8001b1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b20:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <HAL_InitTick+0xc8>)
 8001b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b2e:	f107 0210 	add.w	r2, r7, #16
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 faf7 	bl	800712c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b40:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <HAL_InitTick+0x6a>
 8001b48:	e001      	b.n	8001b4e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e02b      	b.n	8001ba6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b4e:	f005 fac1 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8001b52:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001b54:	e004      	b.n	8001b60 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b56:	f005 fabd 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b62:	4a15      	ldr	r2, [pc, #84]	@ (8001bb8 <HAL_InitTick+0xcc>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	0c9b      	lsrs	r3, r3, #18
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_InitTick+0xd0>)
 8001b70:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <HAL_InitTick+0xd4>)
 8001b72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_InitTick+0xd0>)
 8001b76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <HAL_InitTick+0xd0>)
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_InitTick+0xd0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_InitTick+0xd0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b8e:	480b      	ldr	r0, [pc, #44]	@ (8001bbc <HAL_InitTick+0xd0>)
 8001b90:	f007 f93a 	bl	8008e08 <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d104      	bne.n	8001ba4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b9a:	4808      	ldr	r0, [pc, #32]	@ (8001bbc <HAL_InitTick+0xd0>)
 8001b9c:	f007 f996 	bl	8008ecc <HAL_TIM_Base_Start_IT>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	e000      	b.n	8001ba6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3740      	adds	r7, #64	@ 0x40
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2400000c 	.word	0x2400000c
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	431bde83 	.word	0x431bde83
 8001bbc:	2403299c 	.word	0x2403299c
 8001bc0:	40001000 	.word	0x40001000

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <NMI_Handler+0x4>

08001bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001c00:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <DMA1_Stream0_IRQHandler+0x10>)
 8001c02:	f002 f817 	bl	8003c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	24032a84 	.word	0x24032a84

08001c10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <DMA1_Stream1_IRQHandler+0x10>)
 8001c16:	f002 f80d 	bl	8003c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	24032afc 	.word	0x24032afc

08001c24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <USART3_IRQHandler+0x10>)
 8001c2a:	f007 fd6d 	bl	8009708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	240329f0 	.word	0x240329f0

08001c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <TIM6_DAC_IRQHandler+0x10>)
 8001c3e:	f007 f9bd 	bl	8008fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2403299c 	.word	0x2403299c

08001c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_kill>:

int _kill(int pid, int sig)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c66:	f01b ffc7 	bl	801dbf8 <__errno>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2216      	movs	r2, #22
 8001c6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_exit>:

void _exit (int status)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ffe7 	bl	8001c5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c8e:	bf00      	nop
 8001c90:	e7fd      	b.n	8001c8e <_exit+0x12>

08001c92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e00a      	b.n	8001cba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	4601      	mov	r1, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	60ba      	str	r2, [r7, #8]
 8001cb0:	b2ca      	uxtb	r2, r1
 8001cb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	dbf0      	blt.n	8001ca4 <_read+0x12>
  }

  return len;
 8001cc2:	687b      	ldr	r3, [r7, #4]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e009      	b.n	8001cf2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	60ba      	str	r2, [r7, #8]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	dbf1      	blt.n	8001cde <_write+0x12>
  }
  return len;
 8001cfa:	687b      	ldr	r3, [r7, #4]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_close>:

int _close(int file)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_isatty>:

int _isatty(int file)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d44:	2301      	movs	r3, #1
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d74:	4a14      	ldr	r2, [pc, #80]	@ (8001dc8 <_sbrk+0x5c>)
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <_sbrk+0x60>)
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d88:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <_sbrk+0x64>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	@ (8001dd4 <_sbrk+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d207      	bcs.n	8001dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d9c:	f01b ff2c 	bl	801dbf8 <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	220c      	movs	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001daa:	e009      	b.n	8001dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db2:	4b07      	ldr	r3, [pc, #28]	@ (8001dd0 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <_sbrk+0x64>)
 8001dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	24080000 	.word	0x24080000
 8001dcc:	00000400 	.word	0x00000400
 8001dd0:	240329ec 	.word	0x240329ec
 8001dd4:	24069848 	.word	0x24069848

08001dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b37      	ldr	r3, [pc, #220]	@ (8001ebc <SystemInit+0xe4>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de2:	4a36      	ldr	r2, [pc, #216]	@ (8001ebc <SystemInit+0xe4>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dec:	4b34      	ldr	r3, [pc, #208]	@ (8001ec0 <SystemInit+0xe8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	2b06      	cmp	r3, #6
 8001df6:	d807      	bhi.n	8001e08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001df8:	4b31      	ldr	r3, [pc, #196]	@ (8001ec0 <SystemInit+0xe8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 030f 	bic.w	r3, r3, #15
 8001e00:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec0 <SystemInit+0xe8>)
 8001e02:	f043 0307 	orr.w	r3, r3, #7
 8001e06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec4 <SystemInit+0xec>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec4 <SystemInit+0xec>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <SystemInit+0xec>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <SystemInit+0xec>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4929      	ldr	r1, [pc, #164]	@ (8001ec4 <SystemInit+0xec>)
 8001e20:	4b29      	ldr	r3, [pc, #164]	@ (8001ec8 <SystemInit+0xf0>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e26:	4b26      	ldr	r3, [pc, #152]	@ (8001ec0 <SystemInit+0xe8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e32:	4b23      	ldr	r3, [pc, #140]	@ (8001ec0 <SystemInit+0xe8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 030f 	bic.w	r3, r3, #15
 8001e3a:	4a21      	ldr	r2, [pc, #132]	@ (8001ec0 <SystemInit+0xe8>)
 8001e3c:	f043 0307 	orr.w	r3, r3, #7
 8001e40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e42:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <SystemInit+0xec>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e48:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <SystemInit+0xec>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <SystemInit+0xec>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <SystemInit+0xec>)
 8001e56:	4a1d      	ldr	r2, [pc, #116]	@ (8001ecc <SystemInit+0xf4>)
 8001e58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec4 <SystemInit+0xec>)
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed0 <SystemInit+0xf8>)
 8001e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e60:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <SystemInit+0xec>)
 8001e62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed4 <SystemInit+0xfc>)
 8001e64:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e66:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <SystemInit+0xec>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <SystemInit+0xec>)
 8001e6e:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <SystemInit+0xfc>)
 8001e70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e72:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <SystemInit+0xec>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <SystemInit+0xec>)
 8001e7a:	4a16      	ldr	r2, [pc, #88]	@ (8001ed4 <SystemInit+0xfc>)
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <SystemInit+0xec>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <SystemInit+0xec>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0e      	ldr	r2, [pc, #56]	@ (8001ec4 <SystemInit+0xec>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <SystemInit+0xec>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <SystemInit+0x100>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <SystemInit+0x104>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ea2:	d202      	bcs.n	8001eaa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <SystemInit+0x108>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <SystemInit+0x10c>)
 8001eac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001eb0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00
 8001ec0:	52002000 	.word	0x52002000
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ecc:	02020200 	.word	0x02020200
 8001ed0:	01ff0000 	.word	0x01ff0000
 8001ed4:	01010280 	.word	0x01010280
 8001ed8:	5c001000 	.word	0x5c001000
 8001edc:	ffff0000 	.word	0xffff0000
 8001ee0:	51008108 	.word	0x51008108
 8001ee4:	52004000 	.word	0x52004000

08001ee8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eec:	4b22      	ldr	r3, [pc, #136]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001eee:	4a23      	ldr	r2, [pc, #140]	@ (8001f7c <MX_USART3_UART_Init+0x94>)
 8001ef0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001efa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f0e:	220c      	movs	r2, #12
 8001f10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f12:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f1e:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f30:	4811      	ldr	r0, [pc, #68]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f32:	f007 fa37 	bl	80093a4 <HAL_UART_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f3c:	f7ff fc4e 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f40:	2100      	movs	r1, #0
 8001f42:	480d      	ldr	r0, [pc, #52]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f44:	f009 fa2c 	bl	800b3a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f4e:	f7ff fc45 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f52:	2100      	movs	r1, #0
 8001f54:	4808      	ldr	r0, [pc, #32]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f56:	f009 fa61 	bl	800b41c <HAL_UARTEx_SetRxFifoThreshold>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f60:	f7ff fc3c 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f64:	4804      	ldr	r0, [pc, #16]	@ (8001f78 <MX_USART3_UART_Init+0x90>)
 8001f66:	f009 f9e2 	bl	800b32e <HAL_UARTEx_DisableFifoMode>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f70:	f7ff fc34 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	240329f0 	.word	0x240329f0
 8001f7c:	40004800 	.word	0x40004800

08001f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0ba      	sub	sp, #232	@ 0xe8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	22c0      	movs	r2, #192	@ 0xc0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f01b fd3f 	bl	801da24 <memset>
  if(uartHandle->Instance==USART3)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a5a      	ldr	r2, [pc, #360]	@ (8002114 <HAL_UART_MspInit+0x194>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	f040 80ad 	bne.w	800210c <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fb2:	f04f 0202 	mov.w	r2, #2
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 f8f1 	bl	80071b0 <HAL_RCCEx_PeriphCLKConfig>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001fd4:	f7ff fc02 	bl	80017dc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002118 <HAL_UART_MspInit+0x198>)
 8001fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fde:	4a4e      	ldr	r2, [pc, #312]	@ (8002118 <HAL_UART_MspInit+0x198>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8002118 <HAL_UART_MspInit+0x198>)
 8001fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff6:	4b48      	ldr	r3, [pc, #288]	@ (8002118 <HAL_UART_MspInit+0x198>)
 8001ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffc:	4a46      	ldr	r2, [pc, #280]	@ (8002118 <HAL_UART_MspInit+0x198>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002006:	4b44      	ldr	r3, [pc, #272]	@ (8002118 <HAL_UART_MspInit+0x198>)
 8002008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002014:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002018:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800202e:	2307      	movs	r3, #7
 8002030:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002034:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002038:	4619      	mov	r1, r3
 800203a:	4838      	ldr	r0, [pc, #224]	@ (800211c <HAL_UART_MspInit+0x19c>)
 800203c:	f003 fd4c 	bl	8005ad8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002040:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 8002042:	4a38      	ldr	r2, [pc, #224]	@ (8002124 <HAL_UART_MspInit+0x1a4>)
 8002044:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002046:	4b36      	ldr	r3, [pc, #216]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 8002048:	222d      	movs	r2, #45	@ 0x2d
 800204a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800204c:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002052:	4b33      	ldr	r3, [pc, #204]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002058:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 800205a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800205e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002060:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002066:	4b2e      	ldr	r3, [pc, #184]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800206c:	4b2c      	ldr	r3, [pc, #176]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 800206e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002072:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002074:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 8002076:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800207a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800207c:	4b28      	ldr	r3, [pc, #160]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 800207e:	2200      	movs	r2, #0
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002082:	4827      	ldr	r0, [pc, #156]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 8002084:	f000 faac 	bl	80025e0 <HAL_DMA_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800208e:	f7ff fba5 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a22      	ldr	r2, [pc, #136]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 8002096:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800209a:	4a21      	ldr	r2, [pc, #132]	@ (8002120 <HAL_UART_MspInit+0x1a0>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80020a0:	4b21      	ldr	r3, [pc, #132]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020a2:	4a22      	ldr	r2, [pc, #136]	@ (800212c <HAL_UART_MspInit+0x1ac>)
 80020a4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020a8:	222e      	movs	r2, #46	@ 0x2e
 80020aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020ae:	2240      	movs	r2, #64	@ 0x40
 80020b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020be:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c0:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c6:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80020cc:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020d8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020da:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80020e0:	4811      	ldr	r0, [pc, #68]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020e2:	f000 fa7d 	bl	80025e0 <HAL_DMA_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 80020ec:	f7ff fb76 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020f4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80020f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002128 <HAL_UART_MspInit+0x1a8>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2105      	movs	r1, #5
 8002100:	2027      	movs	r0, #39	@ 0x27
 8002102:	f000 fa45 	bl	8002590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002106:	2027      	movs	r0, #39	@ 0x27
 8002108:	f000 fa5c 	bl	80025c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800210c:	bf00      	nop
 800210e:	37e8      	adds	r7, #232	@ 0xe8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40004800 	.word	0x40004800
 8002118:	58024400 	.word	0x58024400
 800211c:	58020c00 	.word	0x58020c00
 8002120:	24032a84 	.word	0x24032a84
 8002124:	40020010 	.word	0x40020010
 8002128:	24032afc 	.word	0x24032afc
 800212c:	40020028 	.word	0x40020028

08002130 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002134:	4b15      	ldr	r3, [pc, #84]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002136:	4a16      	ldr	r2, [pc, #88]	@ (8002190 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002138:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800213a:	4b14      	ldr	r3, [pc, #80]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800213c:	2209      	movs	r2, #9
 800213e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002142:	2202      	movs	r2, #2
 8002144:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002148:	2200      	movs	r2, #0
 800214a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800214c:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800214e:	2202      	movs	r2, #2
 8002150:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002152:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002154:	2201      	movs	r2, #1
 8002156:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800215a:	2200      	movs	r2, #0
 800215c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002160:	2200      	movs	r2, #0
 8002162:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002166:	2201      	movs	r2, #1
 8002168:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800216a:	4b08      	ldr	r3, [pc, #32]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800216c:	2201      	movs	r2, #1
 800216e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002172:	2200      	movs	r2, #0
 8002174:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	@ (800218c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002178:	f003 fe77 	bl	8005e6a <HAL_PCD_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002182:	f7ff fb2b 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	24032b74 	.word	0x24032b74
 8002190:	40080000 	.word	0x40080000

08002194 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b0ba      	sub	sp, #232	@ 0xe8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	22c0      	movs	r2, #192	@ 0xc0
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f01b fc35 	bl	801da24 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a30      	ldr	r2, [pc, #192]	@ (8002280 <HAL_PCD_MspInit+0xec>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d159      	bne.n	8002278 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80021c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80021d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	4618      	mov	r0, r3
 80021de:	f004 ffe7 	bl	80071b0 <HAL_RCCEx_PeriphCLKConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80021e8:	f7ff faf8 	bl	80017dc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80021ec:	f003 ffa8 	bl	8006140 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <HAL_PCD_MspInit+0xf0>)
 80021f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f6:	4a23      	ldr	r2, [pc, #140]	@ (8002284 <HAL_PCD_MspInit+0xf0>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002200:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <HAL_PCD_MspInit+0xf0>)
 8002202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800220e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8002212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002228:	230a      	movs	r3, #10
 800222a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002232:	4619      	mov	r1, r3
 8002234:	4814      	ldr	r0, [pc, #80]	@ (8002288 <HAL_PCD_MspInit+0xf4>)
 8002236:	f003 fc4f 	bl	8005ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800223a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800223e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002252:	4619      	mov	r1, r3
 8002254:	480c      	ldr	r0, [pc, #48]	@ (8002288 <HAL_PCD_MspInit+0xf4>)
 8002256:	f003 fc3f 	bl	8005ad8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800225a:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <HAL_PCD_MspInit+0xf0>)
 800225c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002260:	4a08      	ldr	r2, [pc, #32]	@ (8002284 <HAL_PCD_MspInit+0xf0>)
 8002262:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002266:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_PCD_MspInit+0xf0>)
 800226c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002278:	bf00      	nop
 800227a:	37e8      	adds	r7, #232	@ 0xe8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40080000 	.word	0x40080000
 8002284:	58024400 	.word	0x58024400
 8002288:	58020000 	.word	0x58020000

0800228c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800228c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002290:	f7ff fda2 	bl	8001dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002294:	480c      	ldr	r0, [pc, #48]	@ (80022c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002296:	490d      	ldr	r1, [pc, #52]	@ (80022cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002298:	4a0d      	ldr	r2, [pc, #52]	@ (80022d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800229c:	e002      	b.n	80022a4 <LoopCopyDataInit>

0800229e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a2:	3304      	adds	r3, #4

080022a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a8:	d3f9      	bcc.n	800229e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022aa:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022ac:	4c0a      	ldr	r4, [pc, #40]	@ (80022d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b0:	e001      	b.n	80022b6 <LoopFillZerobss>

080022b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b4:	3204      	adds	r2, #4

080022b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b8:	d3fb      	bcc.n	80022b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ba:	f01b fca3 	bl	801dc04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022be:	f7ff f9e3 	bl	8001688 <main>
  bx  lr
 80022c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80022c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022cc:	24001260 	.word	0x24001260
  ldr r2, =_sidata
 80022d0:	08020d68 	.word	0x08020d68
  ldr r2, =_sbss
 80022d4:	24001320 	.word	0x24001320
  ldr r4, =_ebss
 80022d8:	24069848 	.word	0x24069848

080022dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022dc:	e7fe      	b.n	80022dc <ADC3_IRQHandler>
	...

080022e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e6:	2003      	movs	r0, #3
 80022e8:	f000 f947 	bl	800257a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022ec:	f004 fd48 	bl	8006d80 <HAL_RCC_GetSysClockFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_Init+0x68>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	4913      	ldr	r1, [pc, #76]	@ (800234c <HAL_Init+0x6c>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800230a:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <HAL_Init+0x68>)
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <HAL_Init+0x6c>)
 8002314:	5cd3      	ldrb	r3, [r2, r3]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
 8002320:	4a0b      	ldr	r2, [pc, #44]	@ (8002350 <HAL_Init+0x70>)
 8002322:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002324:	4a0b      	ldr	r2, [pc, #44]	@ (8002354 <HAL_Init+0x74>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800232a:	200f      	movs	r0, #15
 800232c:	f7ff fbde 	bl	8001aec <HAL_InitTick>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e002      	b.n	8002340 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800233a:	f7ff fbb9 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	58024400 	.word	0x58024400
 800234c:	0801eb8c 	.word	0x0801eb8c
 8002350:	24000008 	.word	0x24000008
 8002354:	24000004 	.word	0x24000004

08002358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_IncTick+0x20>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <HAL_IncTick+0x24>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4413      	add	r3, r2
 8002368:	4a04      	ldr	r2, [pc, #16]	@ (800237c <HAL_IncTick+0x24>)
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	24000010 	.word	0x24000010
 800237c:	24033058 	.word	0x24033058

08002380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return uwTick;
 8002384:	4b03      	ldr	r3, [pc, #12]	@ (8002394 <HAL_GetTick+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	24033058 	.word	0x24033058

08002398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a0:	f7ff ffee 	bl	8002380 <HAL_GetTick>
 80023a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023b0:	d005      	beq.n	80023be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b2:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <HAL_Delay+0x44>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023be:	bf00      	nop
 80023c0:	f7ff ffde 	bl	8002380 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d8f7      	bhi.n	80023c0 <HAL_Delay+0x28>
  {
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	24000010 	.word	0x24000010

080023e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023e4:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_GetREVID+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0c1b      	lsrs	r3, r3, #16
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	5c001000 	.word	0x5c001000

080023f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002408:	4904      	ldr	r1, [pc, #16]	@ (800241c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	58000400 	.word	0x58000400

08002420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002430:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <__NVIC_SetPriorityGrouping+0x40>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	4313      	orrs	r3, r2
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <__NVIC_SetPriorityGrouping+0x40>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00
 8002464:	05fa0000 	.word	0x05fa0000

08002468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <__NVIC_GetPriorityGrouping+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0307 	and.w	r3, r3, #7
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0b      	blt.n	80024ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4907      	ldr	r1, [pc, #28]	@ (80024bc <__NVIC_EnableIRQ+0x38>)
 800249e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	@ (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	@ (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	@ 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	@ 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff4c 	bl	8002420 <__NVIC_SetPriorityGrouping>
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800259e:	f7ff ff63 	bl	8002468 <__NVIC_GetPriorityGrouping>
 80025a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	6978      	ldr	r0, [r7, #20]
 80025aa:	f7ff ffb3 	bl	8002514 <NVIC_EncodePriority>
 80025ae:	4602      	mov	r2, r0
 80025b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff82 	bl	80024c0 <__NVIC_SetPriority>
}
 80025bc:	bf00      	nop
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff56 	bl	8002484 <__NVIC_EnableIRQ>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff feca 	bl	8002380 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e316      	b.n	8002c26 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a66      	ldr	r2, [pc, #408]	@ (8002798 <HAL_DMA_Init+0x1b8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d04a      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a65      	ldr	r2, [pc, #404]	@ (800279c <HAL_DMA_Init+0x1bc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d045      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a63      	ldr	r2, [pc, #396]	@ (80027a0 <HAL_DMA_Init+0x1c0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d040      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a62      	ldr	r2, [pc, #392]	@ (80027a4 <HAL_DMA_Init+0x1c4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d03b      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a60      	ldr	r2, [pc, #384]	@ (80027a8 <HAL_DMA_Init+0x1c8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d036      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5f      	ldr	r2, [pc, #380]	@ (80027ac <HAL_DMA_Init+0x1cc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d031      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a5d      	ldr	r2, [pc, #372]	@ (80027b0 <HAL_DMA_Init+0x1d0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02c      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a5c      	ldr	r2, [pc, #368]	@ (80027b4 <HAL_DMA_Init+0x1d4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d027      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a5a      	ldr	r2, [pc, #360]	@ (80027b8 <HAL_DMA_Init+0x1d8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a59      	ldr	r2, [pc, #356]	@ (80027bc <HAL_DMA_Init+0x1dc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d01d      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a57      	ldr	r2, [pc, #348]	@ (80027c0 <HAL_DMA_Init+0x1e0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d018      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a56      	ldr	r2, [pc, #344]	@ (80027c4 <HAL_DMA_Init+0x1e4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a54      	ldr	r2, [pc, #336]	@ (80027c8 <HAL_DMA_Init+0x1e8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a53      	ldr	r2, [pc, #332]	@ (80027cc <HAL_DMA_Init+0x1ec>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a51      	ldr	r2, [pc, #324]	@ (80027d0 <HAL_DMA_Init+0x1f0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_DMA_Init+0xb8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a50      	ldr	r2, [pc, #320]	@ (80027d4 <HAL_DMA_Init+0x1f4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_DMA_Init+0xbc>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_DMA_Init+0xbe>
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 813b 	beq.w	800291a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a37      	ldr	r2, [pc, #220]	@ (8002798 <HAL_DMA_Init+0x1b8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d04a      	beq.n	8002754 <HAL_DMA_Init+0x174>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a36      	ldr	r2, [pc, #216]	@ (800279c <HAL_DMA_Init+0x1bc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d045      	beq.n	8002754 <HAL_DMA_Init+0x174>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a34      	ldr	r2, [pc, #208]	@ (80027a0 <HAL_DMA_Init+0x1c0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d040      	beq.n	8002754 <HAL_DMA_Init+0x174>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a33      	ldr	r2, [pc, #204]	@ (80027a4 <HAL_DMA_Init+0x1c4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d03b      	beq.n	8002754 <HAL_DMA_Init+0x174>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a31      	ldr	r2, [pc, #196]	@ (80027a8 <HAL_DMA_Init+0x1c8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d036      	beq.n	8002754 <HAL_DMA_Init+0x174>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a30      	ldr	r2, [pc, #192]	@ (80027ac <HAL_DMA_Init+0x1cc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d031      	beq.n	8002754 <HAL_DMA_Init+0x174>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2e      	ldr	r2, [pc, #184]	@ (80027b0 <HAL_DMA_Init+0x1d0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02c      	beq.n	8002754 <HAL_DMA_Init+0x174>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2d      	ldr	r2, [pc, #180]	@ (80027b4 <HAL_DMA_Init+0x1d4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d027      	beq.n	8002754 <HAL_DMA_Init+0x174>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2b      	ldr	r2, [pc, #172]	@ (80027b8 <HAL_DMA_Init+0x1d8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d022      	beq.n	8002754 <HAL_DMA_Init+0x174>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2a      	ldr	r2, [pc, #168]	@ (80027bc <HAL_DMA_Init+0x1dc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d01d      	beq.n	8002754 <HAL_DMA_Init+0x174>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a28      	ldr	r2, [pc, #160]	@ (80027c0 <HAL_DMA_Init+0x1e0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d018      	beq.n	8002754 <HAL_DMA_Init+0x174>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a27      	ldr	r2, [pc, #156]	@ (80027c4 <HAL_DMA_Init+0x1e4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_DMA_Init+0x174>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a25      	ldr	r2, [pc, #148]	@ (80027c8 <HAL_DMA_Init+0x1e8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00e      	beq.n	8002754 <HAL_DMA_Init+0x174>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a24      	ldr	r2, [pc, #144]	@ (80027cc <HAL_DMA_Init+0x1ec>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_DMA_Init+0x174>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a22      	ldr	r2, [pc, #136]	@ (80027d0 <HAL_DMA_Init+0x1f0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_DMA_Init+0x174>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a21      	ldr	r2, [pc, #132]	@ (80027d4 <HAL_DMA_Init+0x1f4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d108      	bne.n	8002766 <HAL_DMA_Init+0x186>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e007      	b.n	8002776 <HAL_DMA_Init+0x196>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002776:	e02f      	b.n	80027d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002778:	f7ff fe02 	bl	8002380 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b05      	cmp	r3, #5
 8002784:	d928      	bls.n	80027d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e246      	b.n	8002c26 <HAL_DMA_Init+0x646>
 8002798:	40020010 	.word	0x40020010
 800279c:	40020028 	.word	0x40020028
 80027a0:	40020040 	.word	0x40020040
 80027a4:	40020058 	.word	0x40020058
 80027a8:	40020070 	.word	0x40020070
 80027ac:	40020088 	.word	0x40020088
 80027b0:	400200a0 	.word	0x400200a0
 80027b4:	400200b8 	.word	0x400200b8
 80027b8:	40020410 	.word	0x40020410
 80027bc:	40020428 	.word	0x40020428
 80027c0:	40020440 	.word	0x40020440
 80027c4:	40020458 	.word	0x40020458
 80027c8:	40020470 	.word	0x40020470
 80027cc:	40020488 	.word	0x40020488
 80027d0:	400204a0 	.word	0x400204a0
 80027d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1c8      	bne.n	8002778 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4b83      	ldr	r3, [pc, #524]	@ (8002a00 <HAL_DMA_Init+0x420>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80027fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002816:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	2b04      	cmp	r3, #4
 800282a:	d107      	bne.n	800283c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002834:	4313      	orrs	r3, r2
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800283c:	4b71      	ldr	r3, [pc, #452]	@ (8002a04 <HAL_DMA_Init+0x424>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b71      	ldr	r3, [pc, #452]	@ (8002a08 <HAL_DMA_Init+0x428>)
 8002842:	4013      	ands	r3, r2
 8002844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002848:	d328      	bcc.n	800289c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b28      	cmp	r3, #40	@ 0x28
 8002850:	d903      	bls.n	800285a <HAL_DMA_Init+0x27a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b2e      	cmp	r3, #46	@ 0x2e
 8002858:	d917      	bls.n	800288a <HAL_DMA_Init+0x2aa>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002860:	d903      	bls.n	800286a <HAL_DMA_Init+0x28a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b42      	cmp	r3, #66	@ 0x42
 8002868:	d90f      	bls.n	800288a <HAL_DMA_Init+0x2aa>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b46      	cmp	r3, #70	@ 0x46
 8002870:	d903      	bls.n	800287a <HAL_DMA_Init+0x29a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b48      	cmp	r3, #72	@ 0x48
 8002878:	d907      	bls.n	800288a <HAL_DMA_Init+0x2aa>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002880:	d905      	bls.n	800288e <HAL_DMA_Init+0x2ae>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b52      	cmp	r3, #82	@ 0x52
 8002888:	d801      	bhi.n	800288e <HAL_DMA_Init+0x2ae>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_DMA_Init+0x2b0>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800289a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f023 0307 	bic.w	r3, r3, #7
 80028b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d117      	bne.n	80028f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f002 fb3f 	bl	8004f5c <DMA_CheckFifoParam>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2240      	movs	r2, #64	@ 0x40
 80028e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e197      	b.n	8002c26 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f002 fa7a 	bl	8004df8 <DMA_CalcBaseAndBitshift>
 8002904:	4603      	mov	r3, r0
 8002906:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	223f      	movs	r2, #63	@ 0x3f
 8002912:	409a      	lsls	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	e0cd      	b.n	8002ab6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a0c <HAL_DMA_Init+0x42c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d022      	beq.n	800296a <HAL_DMA_Init+0x38a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a39      	ldr	r2, [pc, #228]	@ (8002a10 <HAL_DMA_Init+0x430>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01d      	beq.n	800296a <HAL_DMA_Init+0x38a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a38      	ldr	r2, [pc, #224]	@ (8002a14 <HAL_DMA_Init+0x434>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d018      	beq.n	800296a <HAL_DMA_Init+0x38a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a36      	ldr	r2, [pc, #216]	@ (8002a18 <HAL_DMA_Init+0x438>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_DMA_Init+0x38a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a35      	ldr	r2, [pc, #212]	@ (8002a1c <HAL_DMA_Init+0x43c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00e      	beq.n	800296a <HAL_DMA_Init+0x38a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a33      	ldr	r2, [pc, #204]	@ (8002a20 <HAL_DMA_Init+0x440>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_DMA_Init+0x38a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a32      	ldr	r2, [pc, #200]	@ (8002a24 <HAL_DMA_Init+0x444>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_DMA_Init+0x38a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a30      	ldr	r2, [pc, #192]	@ (8002a28 <HAL_DMA_Init+0x448>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_DMA_Init+0x38e>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_DMA_Init+0x390>
 800296e:	2300      	movs	r3, #0
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8097 	beq.w	8002aa4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a24      	ldr	r2, [pc, #144]	@ (8002a0c <HAL_DMA_Init+0x42c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d021      	beq.n	80029c4 <HAL_DMA_Init+0x3e4>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a22      	ldr	r2, [pc, #136]	@ (8002a10 <HAL_DMA_Init+0x430>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01c      	beq.n	80029c4 <HAL_DMA_Init+0x3e4>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a21      	ldr	r2, [pc, #132]	@ (8002a14 <HAL_DMA_Init+0x434>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d017      	beq.n	80029c4 <HAL_DMA_Init+0x3e4>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <HAL_DMA_Init+0x438>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d012      	beq.n	80029c4 <HAL_DMA_Init+0x3e4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a1c <HAL_DMA_Init+0x43c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00d      	beq.n	80029c4 <HAL_DMA_Init+0x3e4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002a20 <HAL_DMA_Init+0x440>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d008      	beq.n	80029c4 <HAL_DMA_Init+0x3e4>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a24 <HAL_DMA_Init+0x444>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <HAL_DMA_Init+0x3e4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a19      	ldr	r2, [pc, #100]	@ (8002a28 <HAL_DMA_Init+0x448>)
 80029c2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <HAL_DMA_Init+0x44c>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b40      	cmp	r3, #64	@ 0x40
 80029ea:	d021      	beq.n	8002a30 <HAL_DMA_Init+0x450>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b80      	cmp	r3, #128	@ 0x80
 80029f2:	d102      	bne.n	80029fa <HAL_DMA_Init+0x41a>
 80029f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029f8:	e01b      	b.n	8002a32 <HAL_DMA_Init+0x452>
 80029fa:	2300      	movs	r3, #0
 80029fc:	e019      	b.n	8002a32 <HAL_DMA_Init+0x452>
 80029fe:	bf00      	nop
 8002a00:	fe10803f 	.word	0xfe10803f
 8002a04:	5c001000 	.word	0x5c001000
 8002a08:	ffff0000 	.word	0xffff0000
 8002a0c:	58025408 	.word	0x58025408
 8002a10:	5802541c 	.word	0x5802541c
 8002a14:	58025430 	.word	0x58025430
 8002a18:	58025444 	.word	0x58025444
 8002a1c:	58025458 	.word	0x58025458
 8002a20:	5802546c 	.word	0x5802546c
 8002a24:	58025480 	.word	0x58025480
 8002a28:	58025494 	.word	0x58025494
 8002a2c:	fffe000f 	.word	0xfffe000f
 8002a30:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a60:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b6e      	ldr	r3, [pc, #440]	@ (8002c30 <HAL_DMA_Init+0x650>)
 8002a78:	4413      	add	r3, r2
 8002a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c34 <HAL_DMA_Init+0x654>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	009a      	lsls	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f002 f9b5 	bl	8004df8 <DMA_CalcBaseAndBitshift>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	e008      	b.n	8002ab6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2240      	movs	r2, #64	@ 0x40
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2203      	movs	r2, #3
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0b7      	b.n	8002c26 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5f      	ldr	r2, [pc, #380]	@ (8002c38 <HAL_DMA_Init+0x658>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d072      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c3c <HAL_DMA_Init+0x65c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d06d      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5c      	ldr	r2, [pc, #368]	@ (8002c40 <HAL_DMA_Init+0x660>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d068      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a5a      	ldr	r2, [pc, #360]	@ (8002c44 <HAL_DMA_Init+0x664>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d063      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a59      	ldr	r2, [pc, #356]	@ (8002c48 <HAL_DMA_Init+0x668>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d05e      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a57      	ldr	r2, [pc, #348]	@ (8002c4c <HAL_DMA_Init+0x66c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d059      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a56      	ldr	r2, [pc, #344]	@ (8002c50 <HAL_DMA_Init+0x670>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d054      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a54      	ldr	r2, [pc, #336]	@ (8002c54 <HAL_DMA_Init+0x674>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d04f      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a53      	ldr	r2, [pc, #332]	@ (8002c58 <HAL_DMA_Init+0x678>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d04a      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a51      	ldr	r2, [pc, #324]	@ (8002c5c <HAL_DMA_Init+0x67c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d045      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a50      	ldr	r2, [pc, #320]	@ (8002c60 <HAL_DMA_Init+0x680>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d040      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a4e      	ldr	r2, [pc, #312]	@ (8002c64 <HAL_DMA_Init+0x684>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d03b      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a4d      	ldr	r2, [pc, #308]	@ (8002c68 <HAL_DMA_Init+0x688>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d036      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002c6c <HAL_DMA_Init+0x68c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d031      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a4a      	ldr	r2, [pc, #296]	@ (8002c70 <HAL_DMA_Init+0x690>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d02c      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a48      	ldr	r2, [pc, #288]	@ (8002c74 <HAL_DMA_Init+0x694>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d027      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a47      	ldr	r2, [pc, #284]	@ (8002c78 <HAL_DMA_Init+0x698>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d022      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a45      	ldr	r2, [pc, #276]	@ (8002c7c <HAL_DMA_Init+0x69c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01d      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a44      	ldr	r2, [pc, #272]	@ (8002c80 <HAL_DMA_Init+0x6a0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d018      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a42      	ldr	r2, [pc, #264]	@ (8002c84 <HAL_DMA_Init+0x6a4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a41      	ldr	r2, [pc, #260]	@ (8002c88 <HAL_DMA_Init+0x6a8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00e      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8002c8c <HAL_DMA_Init+0x6ac>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a3e      	ldr	r2, [pc, #248]	@ (8002c90 <HAL_DMA_Init+0x6b0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_DMA_Init+0x5c6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8002c94 <HAL_DMA_Init+0x6b4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <HAL_DMA_Init+0x5ca>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_DMA_Init+0x5cc>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d032      	beq.n	8002c16 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f002 fa4f 	bl	8005054 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b80      	cmp	r3, #128	@ 0x80
 8002bbc:	d102      	bne.n	8002bc4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002bd8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d010      	beq.n	8002c04 <HAL_DMA_Init+0x624>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d80c      	bhi.n	8002c04 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f002 facc 	bl	8005188 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	e008      	b.n	8002c16 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	a7fdabf8 	.word	0xa7fdabf8
 8002c34:	cccccccd 	.word	0xcccccccd
 8002c38:	40020010 	.word	0x40020010
 8002c3c:	40020028 	.word	0x40020028
 8002c40:	40020040 	.word	0x40020040
 8002c44:	40020058 	.word	0x40020058
 8002c48:	40020070 	.word	0x40020070
 8002c4c:	40020088 	.word	0x40020088
 8002c50:	400200a0 	.word	0x400200a0
 8002c54:	400200b8 	.word	0x400200b8
 8002c58:	40020410 	.word	0x40020410
 8002c5c:	40020428 	.word	0x40020428
 8002c60:	40020440 	.word	0x40020440
 8002c64:	40020458 	.word	0x40020458
 8002c68:	40020470 	.word	0x40020470
 8002c6c:	40020488 	.word	0x40020488
 8002c70:	400204a0 	.word	0x400204a0
 8002c74:	400204b8 	.word	0x400204b8
 8002c78:	58025408 	.word	0x58025408
 8002c7c:	5802541c 	.word	0x5802541c
 8002c80:	58025430 	.word	0x58025430
 8002c84:	58025444 	.word	0x58025444
 8002c88:	58025458 	.word	0x58025458
 8002c8c:	5802546c 	.word	0x5802546c
 8002c90:	58025480 	.word	0x58025480
 8002c94:	58025494 	.word	0x58025494

08002c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e226      	b.n	8003102 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Start_IT+0x2a>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e21f      	b.n	8003102 <HAL_DMA_Start_IT+0x46a>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	f040 820a 	bne.w	80030ec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a68      	ldr	r2, [pc, #416]	@ (8002e8c <HAL_DMA_Start_IT+0x1f4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d04a      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a66      	ldr	r2, [pc, #408]	@ (8002e90 <HAL_DMA_Start_IT+0x1f8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d045      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a65      	ldr	r2, [pc, #404]	@ (8002e94 <HAL_DMA_Start_IT+0x1fc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d040      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a63      	ldr	r2, [pc, #396]	@ (8002e98 <HAL_DMA_Start_IT+0x200>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d03b      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a62      	ldr	r2, [pc, #392]	@ (8002e9c <HAL_DMA_Start_IT+0x204>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d036      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a60      	ldr	r2, [pc, #384]	@ (8002ea0 <HAL_DMA_Start_IT+0x208>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d031      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea4 <HAL_DMA_Start_IT+0x20c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d02c      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea8 <HAL_DMA_Start_IT+0x210>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d027      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8002eac <HAL_DMA_Start_IT+0x214>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d022      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb0 <HAL_DMA_Start_IT+0x218>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01d      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a59      	ldr	r2, [pc, #356]	@ (8002eb4 <HAL_DMA_Start_IT+0x21c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d018      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a57      	ldr	r2, [pc, #348]	@ (8002eb8 <HAL_DMA_Start_IT+0x220>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a56      	ldr	r2, [pc, #344]	@ (8002ebc <HAL_DMA_Start_IT+0x224>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00e      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a54      	ldr	r2, [pc, #336]	@ (8002ec0 <HAL_DMA_Start_IT+0x228>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a53      	ldr	r2, [pc, #332]	@ (8002ec4 <HAL_DMA_Start_IT+0x22c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a51      	ldr	r2, [pc, #324]	@ (8002ec8 <HAL_DMA_Start_IT+0x230>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <HAL_DMA_Start_IT+0x100>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e007      	b.n	8002da8 <HAL_DMA_Start_IT+0x110>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f001 fe76 	bl	8004aa0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a34      	ldr	r2, [pc, #208]	@ (8002e8c <HAL_DMA_Start_IT+0x1f4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04a      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a33      	ldr	r2, [pc, #204]	@ (8002e90 <HAL_DMA_Start_IT+0x1f8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d045      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a31      	ldr	r2, [pc, #196]	@ (8002e94 <HAL_DMA_Start_IT+0x1fc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d040      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a30      	ldr	r2, [pc, #192]	@ (8002e98 <HAL_DMA_Start_IT+0x200>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d03b      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e9c <HAL_DMA_Start_IT+0x204>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d036      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea0 <HAL_DMA_Start_IT+0x208>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d031      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea4 <HAL_DMA_Start_IT+0x20c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02c      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea8 <HAL_DMA_Start_IT+0x210>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d027      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a28      	ldr	r2, [pc, #160]	@ (8002eac <HAL_DMA_Start_IT+0x214>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d022      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a27      	ldr	r2, [pc, #156]	@ (8002eb0 <HAL_DMA_Start_IT+0x218>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01d      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a25      	ldr	r2, [pc, #148]	@ (8002eb4 <HAL_DMA_Start_IT+0x21c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a24      	ldr	r2, [pc, #144]	@ (8002eb8 <HAL_DMA_Start_IT+0x220>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a22      	ldr	r2, [pc, #136]	@ (8002ebc <HAL_DMA_Start_IT+0x224>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a21      	ldr	r2, [pc, #132]	@ (8002ec0 <HAL_DMA_Start_IT+0x228>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <HAL_DMA_Start_IT+0x22c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_Start_IT+0x1bc>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec8 <HAL_DMA_Start_IT+0x230>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_DMA_Start_IT+0x1c0>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_DMA_Start_IT+0x1c2>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d036      	beq.n	8002ecc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 021e 	bic.w	r2, r3, #30
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0216 	orr.w	r2, r2, #22
 8002e70:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d03e      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0208 	orr.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e035      	b.n	8002ef8 <HAL_DMA_Start_IT+0x260>
 8002e8c:	40020010 	.word	0x40020010
 8002e90:	40020028 	.word	0x40020028
 8002e94:	40020040 	.word	0x40020040
 8002e98:	40020058 	.word	0x40020058
 8002e9c:	40020070 	.word	0x40020070
 8002ea0:	40020088 	.word	0x40020088
 8002ea4:	400200a0 	.word	0x400200a0
 8002ea8:	400200b8 	.word	0x400200b8
 8002eac:	40020410 	.word	0x40020410
 8002eb0:	40020428 	.word	0x40020428
 8002eb4:	40020440 	.word	0x40020440
 8002eb8:	40020458 	.word	0x40020458
 8002ebc:	40020470 	.word	0x40020470
 8002ec0:	40020488 	.word	0x40020488
 8002ec4:	400204a0 	.word	0x400204a0
 8002ec8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 020e 	bic.w	r2, r3, #14
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 020a 	orr.w	r2, r2, #10
 8002ede:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0204 	orr.w	r2, r2, #4
 8002ef6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a83      	ldr	r2, [pc, #524]	@ (800310c <HAL_DMA_Start_IT+0x474>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d072      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a82      	ldr	r2, [pc, #520]	@ (8003110 <HAL_DMA_Start_IT+0x478>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d06d      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a80      	ldr	r2, [pc, #512]	@ (8003114 <HAL_DMA_Start_IT+0x47c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d068      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7f      	ldr	r2, [pc, #508]	@ (8003118 <HAL_DMA_Start_IT+0x480>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d063      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a7d      	ldr	r2, [pc, #500]	@ (800311c <HAL_DMA_Start_IT+0x484>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d05e      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7c      	ldr	r2, [pc, #496]	@ (8003120 <HAL_DMA_Start_IT+0x488>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d059      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a7a      	ldr	r2, [pc, #488]	@ (8003124 <HAL_DMA_Start_IT+0x48c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d054      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a79      	ldr	r2, [pc, #484]	@ (8003128 <HAL_DMA_Start_IT+0x490>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d04f      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a77      	ldr	r2, [pc, #476]	@ (800312c <HAL_DMA_Start_IT+0x494>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d04a      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a76      	ldr	r2, [pc, #472]	@ (8003130 <HAL_DMA_Start_IT+0x498>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d045      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a74      	ldr	r2, [pc, #464]	@ (8003134 <HAL_DMA_Start_IT+0x49c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d040      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a73      	ldr	r2, [pc, #460]	@ (8003138 <HAL_DMA_Start_IT+0x4a0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d03b      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a71      	ldr	r2, [pc, #452]	@ (800313c <HAL_DMA_Start_IT+0x4a4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d036      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a70      	ldr	r2, [pc, #448]	@ (8003140 <HAL_DMA_Start_IT+0x4a8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d031      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a6e      	ldr	r2, [pc, #440]	@ (8003144 <HAL_DMA_Start_IT+0x4ac>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d02c      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a6d      	ldr	r2, [pc, #436]	@ (8003148 <HAL_DMA_Start_IT+0x4b0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d027      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a6b      	ldr	r2, [pc, #428]	@ (800314c <HAL_DMA_Start_IT+0x4b4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d022      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6a      	ldr	r2, [pc, #424]	@ (8003150 <HAL_DMA_Start_IT+0x4b8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d01d      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a68      	ldr	r2, [pc, #416]	@ (8003154 <HAL_DMA_Start_IT+0x4bc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d018      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a67      	ldr	r2, [pc, #412]	@ (8003158 <HAL_DMA_Start_IT+0x4c0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d013      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a65      	ldr	r2, [pc, #404]	@ (800315c <HAL_DMA_Start_IT+0x4c4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00e      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a64      	ldr	r2, [pc, #400]	@ (8003160 <HAL_DMA_Start_IT+0x4c8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d009      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a62      	ldr	r2, [pc, #392]	@ (8003164 <HAL_DMA_Start_IT+0x4cc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d004      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x350>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a61      	ldr	r2, [pc, #388]	@ (8003168 <HAL_DMA_Start_IT+0x4d0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d101      	bne.n	8002fec <HAL_DMA_Start_IT+0x354>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_DMA_Start_IT+0x356>
 8002fec:	2300      	movs	r3, #0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01a      	beq.n	8003028 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800300e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003022:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003026:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a37      	ldr	r2, [pc, #220]	@ (800310c <HAL_DMA_Start_IT+0x474>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d04a      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a36      	ldr	r2, [pc, #216]	@ (8003110 <HAL_DMA_Start_IT+0x478>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d045      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a34      	ldr	r2, [pc, #208]	@ (8003114 <HAL_DMA_Start_IT+0x47c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d040      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a33      	ldr	r2, [pc, #204]	@ (8003118 <HAL_DMA_Start_IT+0x480>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d03b      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a31      	ldr	r2, [pc, #196]	@ (800311c <HAL_DMA_Start_IT+0x484>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d036      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a30      	ldr	r2, [pc, #192]	@ (8003120 <HAL_DMA_Start_IT+0x488>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d031      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2e      	ldr	r2, [pc, #184]	@ (8003124 <HAL_DMA_Start_IT+0x48c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d02c      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a2d      	ldr	r2, [pc, #180]	@ (8003128 <HAL_DMA_Start_IT+0x490>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d027      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a2b      	ldr	r2, [pc, #172]	@ (800312c <HAL_DMA_Start_IT+0x494>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d022      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2a      	ldr	r2, [pc, #168]	@ (8003130 <HAL_DMA_Start_IT+0x498>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d01d      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a28      	ldr	r2, [pc, #160]	@ (8003134 <HAL_DMA_Start_IT+0x49c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d018      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a27      	ldr	r2, [pc, #156]	@ (8003138 <HAL_DMA_Start_IT+0x4a0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d013      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a25      	ldr	r2, [pc, #148]	@ (800313c <HAL_DMA_Start_IT+0x4a4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00e      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a24      	ldr	r2, [pc, #144]	@ (8003140 <HAL_DMA_Start_IT+0x4a8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d009      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <HAL_DMA_Start_IT+0x4ac>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_DMA_Start_IT+0x430>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a21      	ldr	r2, [pc, #132]	@ (8003148 <HAL_DMA_Start_IT+0x4b0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d108      	bne.n	80030da <HAL_DMA_Start_IT+0x442>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e012      	b.n	8003100 <HAL_DMA_Start_IT+0x468>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e009      	b.n	8003100 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003100:	7dfb      	ldrb	r3, [r7, #23]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40020010 	.word	0x40020010
 8003110:	40020028 	.word	0x40020028
 8003114:	40020040 	.word	0x40020040
 8003118:	40020058 	.word	0x40020058
 800311c:	40020070 	.word	0x40020070
 8003120:	40020088 	.word	0x40020088
 8003124:	400200a0 	.word	0x400200a0
 8003128:	400200b8 	.word	0x400200b8
 800312c:	40020410 	.word	0x40020410
 8003130:	40020428 	.word	0x40020428
 8003134:	40020440 	.word	0x40020440
 8003138:	40020458 	.word	0x40020458
 800313c:	40020470 	.word	0x40020470
 8003140:	40020488 	.word	0x40020488
 8003144:	400204a0 	.word	0x400204a0
 8003148:	400204b8 	.word	0x400204b8
 800314c:	58025408 	.word	0x58025408
 8003150:	5802541c 	.word	0x5802541c
 8003154:	58025430 	.word	0x58025430
 8003158:	58025444 	.word	0x58025444
 800315c:	58025458 	.word	0x58025458
 8003160:	5802546c 	.word	0x5802546c
 8003164:	58025480 	.word	0x58025480
 8003168:	58025494 	.word	0x58025494

0800316c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff f904 	bl	8002380 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e2dc      	b.n	800373e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d008      	beq.n	80031a2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2280      	movs	r2, #128	@ 0x80
 8003194:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e2cd      	b.n	800373e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a76      	ldr	r2, [pc, #472]	@ (8003380 <HAL_DMA_Abort+0x214>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d04a      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a74      	ldr	r2, [pc, #464]	@ (8003384 <HAL_DMA_Abort+0x218>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d045      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a73      	ldr	r2, [pc, #460]	@ (8003388 <HAL_DMA_Abort+0x21c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d040      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a71      	ldr	r2, [pc, #452]	@ (800338c <HAL_DMA_Abort+0x220>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d03b      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a70      	ldr	r2, [pc, #448]	@ (8003390 <HAL_DMA_Abort+0x224>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d036      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003394 <HAL_DMA_Abort+0x228>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d031      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003398 <HAL_DMA_Abort+0x22c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d02c      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6b      	ldr	r2, [pc, #428]	@ (800339c <HAL_DMA_Abort+0x230>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d027      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6a      	ldr	r2, [pc, #424]	@ (80033a0 <HAL_DMA_Abort+0x234>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d022      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a68      	ldr	r2, [pc, #416]	@ (80033a4 <HAL_DMA_Abort+0x238>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01d      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a67      	ldr	r2, [pc, #412]	@ (80033a8 <HAL_DMA_Abort+0x23c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d018      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a65      	ldr	r2, [pc, #404]	@ (80033ac <HAL_DMA_Abort+0x240>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a64      	ldr	r2, [pc, #400]	@ (80033b0 <HAL_DMA_Abort+0x244>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a62      	ldr	r2, [pc, #392]	@ (80033b4 <HAL_DMA_Abort+0x248>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a61      	ldr	r2, [pc, #388]	@ (80033b8 <HAL_DMA_Abort+0x24c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_DMA_Abort+0xd6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a5f      	ldr	r2, [pc, #380]	@ (80033bc <HAL_DMA_Abort+0x250>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_DMA_Abort+0xda>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_DMA_Abort+0xdc>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d013      	beq.n	8003274 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 021e 	bic.w	r2, r2, #30
 800325a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800326a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e00a      	b.n	800328a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 020e 	bic.w	r2, r2, #14
 8003282:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a3c      	ldr	r2, [pc, #240]	@ (8003380 <HAL_DMA_Abort+0x214>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d072      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3a      	ldr	r2, [pc, #232]	@ (8003384 <HAL_DMA_Abort+0x218>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d06d      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a39      	ldr	r2, [pc, #228]	@ (8003388 <HAL_DMA_Abort+0x21c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d068      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a37      	ldr	r2, [pc, #220]	@ (800338c <HAL_DMA_Abort+0x220>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d063      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a36      	ldr	r2, [pc, #216]	@ (8003390 <HAL_DMA_Abort+0x224>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d05e      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a34      	ldr	r2, [pc, #208]	@ (8003394 <HAL_DMA_Abort+0x228>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d059      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a33      	ldr	r2, [pc, #204]	@ (8003398 <HAL_DMA_Abort+0x22c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d054      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a31      	ldr	r2, [pc, #196]	@ (800339c <HAL_DMA_Abort+0x230>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d04f      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a30      	ldr	r2, [pc, #192]	@ (80033a0 <HAL_DMA_Abort+0x234>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d04a      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2e      	ldr	r2, [pc, #184]	@ (80033a4 <HAL_DMA_Abort+0x238>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d045      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2d      	ldr	r2, [pc, #180]	@ (80033a8 <HAL_DMA_Abort+0x23c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d040      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2b      	ldr	r2, [pc, #172]	@ (80033ac <HAL_DMA_Abort+0x240>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d03b      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2a      	ldr	r2, [pc, #168]	@ (80033b0 <HAL_DMA_Abort+0x244>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d036      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a28      	ldr	r2, [pc, #160]	@ (80033b4 <HAL_DMA_Abort+0x248>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d031      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a27      	ldr	r2, [pc, #156]	@ (80033b8 <HAL_DMA_Abort+0x24c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d02c      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a25      	ldr	r2, [pc, #148]	@ (80033bc <HAL_DMA_Abort+0x250>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d027      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a24      	ldr	r2, [pc, #144]	@ (80033c0 <HAL_DMA_Abort+0x254>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d022      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a22      	ldr	r2, [pc, #136]	@ (80033c4 <HAL_DMA_Abort+0x258>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01d      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a21      	ldr	r2, [pc, #132]	@ (80033c8 <HAL_DMA_Abort+0x25c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d018      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1f      	ldr	r2, [pc, #124]	@ (80033cc <HAL_DMA_Abort+0x260>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <HAL_DMA_Abort+0x264>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00e      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1c      	ldr	r2, [pc, #112]	@ (80033d4 <HAL_DMA_Abort+0x268>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1b      	ldr	r2, [pc, #108]	@ (80033d8 <HAL_DMA_Abort+0x26c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_DMA_Abort+0x20e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a19      	ldr	r2, [pc, #100]	@ (80033dc <HAL_DMA_Abort+0x270>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d132      	bne.n	80033e0 <HAL_DMA_Abort+0x274>
 800337a:	2301      	movs	r3, #1
 800337c:	e031      	b.n	80033e2 <HAL_DMA_Abort+0x276>
 800337e:	bf00      	nop
 8003380:	40020010 	.word	0x40020010
 8003384:	40020028 	.word	0x40020028
 8003388:	40020040 	.word	0x40020040
 800338c:	40020058 	.word	0x40020058
 8003390:	40020070 	.word	0x40020070
 8003394:	40020088 	.word	0x40020088
 8003398:	400200a0 	.word	0x400200a0
 800339c:	400200b8 	.word	0x400200b8
 80033a0:	40020410 	.word	0x40020410
 80033a4:	40020428 	.word	0x40020428
 80033a8:	40020440 	.word	0x40020440
 80033ac:	40020458 	.word	0x40020458
 80033b0:	40020470 	.word	0x40020470
 80033b4:	40020488 	.word	0x40020488
 80033b8:	400204a0 	.word	0x400204a0
 80033bc:	400204b8 	.word	0x400204b8
 80033c0:	58025408 	.word	0x58025408
 80033c4:	5802541c 	.word	0x5802541c
 80033c8:	58025430 	.word	0x58025430
 80033cc:	58025444 	.word	0x58025444
 80033d0:	58025458 	.word	0x58025458
 80033d4:	5802546c 	.word	0x5802546c
 80033d8:	58025480 	.word	0x58025480
 80033dc:	58025494 	.word	0x58025494
 80033e0:	2300      	movs	r3, #0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6d      	ldr	r2, [pc, #436]	@ (80035b0 <HAL_DMA_Abort+0x444>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d04a      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6b      	ldr	r2, [pc, #428]	@ (80035b4 <HAL_DMA_Abort+0x448>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d045      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6a      	ldr	r2, [pc, #424]	@ (80035b8 <HAL_DMA_Abort+0x44c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d040      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a68      	ldr	r2, [pc, #416]	@ (80035bc <HAL_DMA_Abort+0x450>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d03b      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a67      	ldr	r2, [pc, #412]	@ (80035c0 <HAL_DMA_Abort+0x454>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d036      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a65      	ldr	r2, [pc, #404]	@ (80035c4 <HAL_DMA_Abort+0x458>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d031      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a64      	ldr	r2, [pc, #400]	@ (80035c8 <HAL_DMA_Abort+0x45c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d02c      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a62      	ldr	r2, [pc, #392]	@ (80035cc <HAL_DMA_Abort+0x460>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d027      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a61      	ldr	r2, [pc, #388]	@ (80035d0 <HAL_DMA_Abort+0x464>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a5f      	ldr	r2, [pc, #380]	@ (80035d4 <HAL_DMA_Abort+0x468>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01d      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a5e      	ldr	r2, [pc, #376]	@ (80035d8 <HAL_DMA_Abort+0x46c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d018      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a5c      	ldr	r2, [pc, #368]	@ (80035dc <HAL_DMA_Abort+0x470>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5b      	ldr	r2, [pc, #364]	@ (80035e0 <HAL_DMA_Abort+0x474>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a59      	ldr	r2, [pc, #356]	@ (80035e4 <HAL_DMA_Abort+0x478>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a58      	ldr	r2, [pc, #352]	@ (80035e8 <HAL_DMA_Abort+0x47c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_DMA_Abort+0x32a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a56      	ldr	r2, [pc, #344]	@ (80035ec <HAL_DMA_Abort+0x480>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d108      	bne.n	80034a8 <HAL_DMA_Abort+0x33c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e007      	b.n	80034b8 <HAL_DMA_Abort+0x34c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034b8:	e013      	b.n	80034e2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ba:	f7fe ff61 	bl	8002380 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d90c      	bls.n	80034e2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2203      	movs	r2, #3
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e12d      	b.n	800373e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2f      	ldr	r2, [pc, #188]	@ (80035b0 <HAL_DMA_Abort+0x444>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d04a      	beq.n	800358e <HAL_DMA_Abort+0x422>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2d      	ldr	r2, [pc, #180]	@ (80035b4 <HAL_DMA_Abort+0x448>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d045      	beq.n	800358e <HAL_DMA_Abort+0x422>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2c      	ldr	r2, [pc, #176]	@ (80035b8 <HAL_DMA_Abort+0x44c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d040      	beq.n	800358e <HAL_DMA_Abort+0x422>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2a      	ldr	r2, [pc, #168]	@ (80035bc <HAL_DMA_Abort+0x450>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d03b      	beq.n	800358e <HAL_DMA_Abort+0x422>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a29      	ldr	r2, [pc, #164]	@ (80035c0 <HAL_DMA_Abort+0x454>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d036      	beq.n	800358e <HAL_DMA_Abort+0x422>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a27      	ldr	r2, [pc, #156]	@ (80035c4 <HAL_DMA_Abort+0x458>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d031      	beq.n	800358e <HAL_DMA_Abort+0x422>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a26      	ldr	r2, [pc, #152]	@ (80035c8 <HAL_DMA_Abort+0x45c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d02c      	beq.n	800358e <HAL_DMA_Abort+0x422>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a24      	ldr	r2, [pc, #144]	@ (80035cc <HAL_DMA_Abort+0x460>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d027      	beq.n	800358e <HAL_DMA_Abort+0x422>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a23      	ldr	r2, [pc, #140]	@ (80035d0 <HAL_DMA_Abort+0x464>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <HAL_DMA_Abort+0x422>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a21      	ldr	r2, [pc, #132]	@ (80035d4 <HAL_DMA_Abort+0x468>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01d      	beq.n	800358e <HAL_DMA_Abort+0x422>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a20      	ldr	r2, [pc, #128]	@ (80035d8 <HAL_DMA_Abort+0x46c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d018      	beq.n	800358e <HAL_DMA_Abort+0x422>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1e      	ldr	r2, [pc, #120]	@ (80035dc <HAL_DMA_Abort+0x470>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_DMA_Abort+0x422>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1d      	ldr	r2, [pc, #116]	@ (80035e0 <HAL_DMA_Abort+0x474>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00e      	beq.n	800358e <HAL_DMA_Abort+0x422>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1b      	ldr	r2, [pc, #108]	@ (80035e4 <HAL_DMA_Abort+0x478>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_DMA_Abort+0x422>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1a      	ldr	r2, [pc, #104]	@ (80035e8 <HAL_DMA_Abort+0x47c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_DMA_Abort+0x422>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a18      	ldr	r2, [pc, #96]	@ (80035ec <HAL_DMA_Abort+0x480>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_DMA_Abort+0x426>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_DMA_Abort+0x428>
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d02b      	beq.n	80035f0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	223f      	movs	r2, #63	@ 0x3f
 80035a8:	409a      	lsls	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	e02a      	b.n	8003606 <HAL_DMA_Abort+0x49a>
 80035b0:	40020010 	.word	0x40020010
 80035b4:	40020028 	.word	0x40020028
 80035b8:	40020040 	.word	0x40020040
 80035bc:	40020058 	.word	0x40020058
 80035c0:	40020070 	.word	0x40020070
 80035c4:	40020088 	.word	0x40020088
 80035c8:	400200a0 	.word	0x400200a0
 80035cc:	400200b8 	.word	0x400200b8
 80035d0:	40020410 	.word	0x40020410
 80035d4:	40020428 	.word	0x40020428
 80035d8:	40020440 	.word	0x40020440
 80035dc:	40020458 	.word	0x40020458
 80035e0:	40020470 	.word	0x40020470
 80035e4:	40020488 	.word	0x40020488
 80035e8:	400204a0 	.word	0x400204a0
 80035ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2201      	movs	r2, #1
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a4f      	ldr	r2, [pc, #316]	@ (8003748 <HAL_DMA_Abort+0x5dc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d072      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a4d      	ldr	r2, [pc, #308]	@ (800374c <HAL_DMA_Abort+0x5e0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d06d      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a4c      	ldr	r2, [pc, #304]	@ (8003750 <HAL_DMA_Abort+0x5e4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d068      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a4a      	ldr	r2, [pc, #296]	@ (8003754 <HAL_DMA_Abort+0x5e8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d063      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a49      	ldr	r2, [pc, #292]	@ (8003758 <HAL_DMA_Abort+0x5ec>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d05e      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a47      	ldr	r2, [pc, #284]	@ (800375c <HAL_DMA_Abort+0x5f0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d059      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a46      	ldr	r2, [pc, #280]	@ (8003760 <HAL_DMA_Abort+0x5f4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d054      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a44      	ldr	r2, [pc, #272]	@ (8003764 <HAL_DMA_Abort+0x5f8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04f      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a43      	ldr	r2, [pc, #268]	@ (8003768 <HAL_DMA_Abort+0x5fc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d04a      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a41      	ldr	r2, [pc, #260]	@ (800376c <HAL_DMA_Abort+0x600>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d045      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a40      	ldr	r2, [pc, #256]	@ (8003770 <HAL_DMA_Abort+0x604>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d040      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a3e      	ldr	r2, [pc, #248]	@ (8003774 <HAL_DMA_Abort+0x608>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d03b      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a3d      	ldr	r2, [pc, #244]	@ (8003778 <HAL_DMA_Abort+0x60c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d036      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a3b      	ldr	r2, [pc, #236]	@ (800377c <HAL_DMA_Abort+0x610>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d031      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3a      	ldr	r2, [pc, #232]	@ (8003780 <HAL_DMA_Abort+0x614>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d02c      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a38      	ldr	r2, [pc, #224]	@ (8003784 <HAL_DMA_Abort+0x618>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d027      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a37      	ldr	r2, [pc, #220]	@ (8003788 <HAL_DMA_Abort+0x61c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a35      	ldr	r2, [pc, #212]	@ (800378c <HAL_DMA_Abort+0x620>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01d      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a34      	ldr	r2, [pc, #208]	@ (8003790 <HAL_DMA_Abort+0x624>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d018      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a32      	ldr	r2, [pc, #200]	@ (8003794 <HAL_DMA_Abort+0x628>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a31      	ldr	r2, [pc, #196]	@ (8003798 <HAL_DMA_Abort+0x62c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2f      	ldr	r2, [pc, #188]	@ (800379c <HAL_DMA_Abort+0x630>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2e      	ldr	r2, [pc, #184]	@ (80037a0 <HAL_DMA_Abort+0x634>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_DMA_Abort+0x58a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2c      	ldr	r2, [pc, #176]	@ (80037a4 <HAL_DMA_Abort+0x638>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_DMA_Abort+0x58e>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_DMA_Abort+0x590>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d015      	beq.n	800372c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003708:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003720:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800372a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40020010 	.word	0x40020010
 800374c:	40020028 	.word	0x40020028
 8003750:	40020040 	.word	0x40020040
 8003754:	40020058 	.word	0x40020058
 8003758:	40020070 	.word	0x40020070
 800375c:	40020088 	.word	0x40020088
 8003760:	400200a0 	.word	0x400200a0
 8003764:	400200b8 	.word	0x400200b8
 8003768:	40020410 	.word	0x40020410
 800376c:	40020428 	.word	0x40020428
 8003770:	40020440 	.word	0x40020440
 8003774:	40020458 	.word	0x40020458
 8003778:	40020470 	.word	0x40020470
 800377c:	40020488 	.word	0x40020488
 8003780:	400204a0 	.word	0x400204a0
 8003784:	400204b8 	.word	0x400204b8
 8003788:	58025408 	.word	0x58025408
 800378c:	5802541c 	.word	0x5802541c
 8003790:	58025430 	.word	0x58025430
 8003794:	58025444 	.word	0x58025444
 8003798:	58025458 	.word	0x58025458
 800379c:	5802546c 	.word	0x5802546c
 80037a0:	58025480 	.word	0x58025480
 80037a4:	58025494 	.word	0x58025494

080037a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e237      	b.n	8003c2a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d004      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2280      	movs	r2, #128	@ 0x80
 80037ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e22c      	b.n	8003c2a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a5c      	ldr	r2, [pc, #368]	@ (8003948 <HAL_DMA_Abort_IT+0x1a0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d04a      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5b      	ldr	r2, [pc, #364]	@ (800394c <HAL_DMA_Abort_IT+0x1a4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d045      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a59      	ldr	r2, [pc, #356]	@ (8003950 <HAL_DMA_Abort_IT+0x1a8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d040      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a58      	ldr	r2, [pc, #352]	@ (8003954 <HAL_DMA_Abort_IT+0x1ac>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d03b      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a56      	ldr	r2, [pc, #344]	@ (8003958 <HAL_DMA_Abort_IT+0x1b0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d036      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a55      	ldr	r2, [pc, #340]	@ (800395c <HAL_DMA_Abort_IT+0x1b4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d031      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a53      	ldr	r2, [pc, #332]	@ (8003960 <HAL_DMA_Abort_IT+0x1b8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d02c      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a52      	ldr	r2, [pc, #328]	@ (8003964 <HAL_DMA_Abort_IT+0x1bc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d027      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a50      	ldr	r2, [pc, #320]	@ (8003968 <HAL_DMA_Abort_IT+0x1c0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d022      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a4f      	ldr	r2, [pc, #316]	@ (800396c <HAL_DMA_Abort_IT+0x1c4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d01d      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a4d      	ldr	r2, [pc, #308]	@ (8003970 <HAL_DMA_Abort_IT+0x1c8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d018      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a4c      	ldr	r2, [pc, #304]	@ (8003974 <HAL_DMA_Abort_IT+0x1cc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a4a      	ldr	r2, [pc, #296]	@ (8003978 <HAL_DMA_Abort_IT+0x1d0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00e      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a49      	ldr	r2, [pc, #292]	@ (800397c <HAL_DMA_Abort_IT+0x1d4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d009      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a47      	ldr	r2, [pc, #284]	@ (8003980 <HAL_DMA_Abort_IT+0x1d8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_DMA_Abort_IT+0xc8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a46      	ldr	r2, [pc, #280]	@ (8003984 <HAL_DMA_Abort_IT+0x1dc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_DMA_Abort_IT+0xcc>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <HAL_DMA_Abort_IT+0xce>
 8003874:	2300      	movs	r3, #0
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8086 	beq.w	8003988 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2204      	movs	r2, #4
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2f      	ldr	r2, [pc, #188]	@ (8003948 <HAL_DMA_Abort_IT+0x1a0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d04a      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2e      	ldr	r2, [pc, #184]	@ (800394c <HAL_DMA_Abort_IT+0x1a4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d045      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2c      	ldr	r2, [pc, #176]	@ (8003950 <HAL_DMA_Abort_IT+0x1a8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d040      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003954 <HAL_DMA_Abort_IT+0x1ac>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d03b      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a29      	ldr	r2, [pc, #164]	@ (8003958 <HAL_DMA_Abort_IT+0x1b0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d036      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a28      	ldr	r2, [pc, #160]	@ (800395c <HAL_DMA_Abort_IT+0x1b4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d031      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a26      	ldr	r2, [pc, #152]	@ (8003960 <HAL_DMA_Abort_IT+0x1b8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02c      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a25      	ldr	r2, [pc, #148]	@ (8003964 <HAL_DMA_Abort_IT+0x1bc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d027      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a23      	ldr	r2, [pc, #140]	@ (8003968 <HAL_DMA_Abort_IT+0x1c0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d022      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a22      	ldr	r2, [pc, #136]	@ (800396c <HAL_DMA_Abort_IT+0x1c4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d01d      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a20      	ldr	r2, [pc, #128]	@ (8003970 <HAL_DMA_Abort_IT+0x1c8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003974 <HAL_DMA_Abort_IT+0x1cc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1d      	ldr	r2, [pc, #116]	@ (8003978 <HAL_DMA_Abort_IT+0x1d0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1c      	ldr	r2, [pc, #112]	@ (800397c <HAL_DMA_Abort_IT+0x1d4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1a      	ldr	r2, [pc, #104]	@ (8003980 <HAL_DMA_Abort_IT+0x1d8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_DMA_Abort_IT+0x17c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a19      	ldr	r2, [pc, #100]	@ (8003984 <HAL_DMA_Abort_IT+0x1dc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d108      	bne.n	8003936 <HAL_DMA_Abort_IT+0x18e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e178      	b.n	8003c28 <HAL_DMA_Abort_IT+0x480>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e16f      	b.n	8003c28 <HAL_DMA_Abort_IT+0x480>
 8003948:	40020010 	.word	0x40020010
 800394c:	40020028 	.word	0x40020028
 8003950:	40020040 	.word	0x40020040
 8003954:	40020058 	.word	0x40020058
 8003958:	40020070 	.word	0x40020070
 800395c:	40020088 	.word	0x40020088
 8003960:	400200a0 	.word	0x400200a0
 8003964:	400200b8 	.word	0x400200b8
 8003968:	40020410 	.word	0x40020410
 800396c:	40020428 	.word	0x40020428
 8003970:	40020440 	.word	0x40020440
 8003974:	40020458 	.word	0x40020458
 8003978:	40020470 	.word	0x40020470
 800397c:	40020488 	.word	0x40020488
 8003980:	400204a0 	.word	0x400204a0
 8003984:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 020e 	bic.w	r2, r2, #14
 8003996:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a6c      	ldr	r2, [pc, #432]	@ (8003b50 <HAL_DMA_Abort_IT+0x3a8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d04a      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a6b      	ldr	r2, [pc, #428]	@ (8003b54 <HAL_DMA_Abort_IT+0x3ac>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d045      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a69      	ldr	r2, [pc, #420]	@ (8003b58 <HAL_DMA_Abort_IT+0x3b0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d040      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a68      	ldr	r2, [pc, #416]	@ (8003b5c <HAL_DMA_Abort_IT+0x3b4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d03b      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a66      	ldr	r2, [pc, #408]	@ (8003b60 <HAL_DMA_Abort_IT+0x3b8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d036      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a65      	ldr	r2, [pc, #404]	@ (8003b64 <HAL_DMA_Abort_IT+0x3bc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d031      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a63      	ldr	r2, [pc, #396]	@ (8003b68 <HAL_DMA_Abort_IT+0x3c0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d02c      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a62      	ldr	r2, [pc, #392]	@ (8003b6c <HAL_DMA_Abort_IT+0x3c4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d027      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a60      	ldr	r2, [pc, #384]	@ (8003b70 <HAL_DMA_Abort_IT+0x3c8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d022      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003b74 <HAL_DMA_Abort_IT+0x3cc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d01d      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5d      	ldr	r2, [pc, #372]	@ (8003b78 <HAL_DMA_Abort_IT+0x3d0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d018      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b7c <HAL_DMA_Abort_IT+0x3d4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d013      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5a      	ldr	r2, [pc, #360]	@ (8003b80 <HAL_DMA_Abort_IT+0x3d8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00e      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a59      	ldr	r2, [pc, #356]	@ (8003b84 <HAL_DMA_Abort_IT+0x3dc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a57      	ldr	r2, [pc, #348]	@ (8003b88 <HAL_DMA_Abort_IT+0x3e0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x290>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a56      	ldr	r2, [pc, #344]	@ (8003b8c <HAL_DMA_Abort_IT+0x3e4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d108      	bne.n	8003a4a <HAL_DMA_Abort_IT+0x2a2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e007      	b.n	8003a5a <HAL_DMA_Abort_IT+0x2b2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b50 <HAL_DMA_Abort_IT+0x3a8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d072      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3a      	ldr	r2, [pc, #232]	@ (8003b54 <HAL_DMA_Abort_IT+0x3ac>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d06d      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a39      	ldr	r2, [pc, #228]	@ (8003b58 <HAL_DMA_Abort_IT+0x3b0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d068      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a37      	ldr	r2, [pc, #220]	@ (8003b5c <HAL_DMA_Abort_IT+0x3b4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d063      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a36      	ldr	r2, [pc, #216]	@ (8003b60 <HAL_DMA_Abort_IT+0x3b8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d05e      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a34      	ldr	r2, [pc, #208]	@ (8003b64 <HAL_DMA_Abort_IT+0x3bc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d059      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a33      	ldr	r2, [pc, #204]	@ (8003b68 <HAL_DMA_Abort_IT+0x3c0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d054      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a31      	ldr	r2, [pc, #196]	@ (8003b6c <HAL_DMA_Abort_IT+0x3c4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d04f      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a30      	ldr	r2, [pc, #192]	@ (8003b70 <HAL_DMA_Abort_IT+0x3c8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d04a      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8003b74 <HAL_DMA_Abort_IT+0x3cc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d045      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <HAL_DMA_Abort_IT+0x3d0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d040      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <HAL_DMA_Abort_IT+0x3d4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d03b      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b80 <HAL_DMA_Abort_IT+0x3d8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d036      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a28      	ldr	r2, [pc, #160]	@ (8003b84 <HAL_DMA_Abort_IT+0x3dc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d031      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a27      	ldr	r2, [pc, #156]	@ (8003b88 <HAL_DMA_Abort_IT+0x3e0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d02c      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <HAL_DMA_Abort_IT+0x3e4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d027      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a24      	ldr	r2, [pc, #144]	@ (8003b90 <HAL_DMA_Abort_IT+0x3e8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a22      	ldr	r2, [pc, #136]	@ (8003b94 <HAL_DMA_Abort_IT+0x3ec>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a21      	ldr	r2, [pc, #132]	@ (8003b98 <HAL_DMA_Abort_IT+0x3f0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d018      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b9c <HAL_DMA_Abort_IT+0x3f4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba0 <HAL_DMA_Abort_IT+0x3f8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00e      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <HAL_DMA_Abort_IT+0x3fc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d009      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <HAL_DMA_Abort_IT+0x400>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x3a2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <HAL_DMA_Abort_IT+0x404>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d132      	bne.n	8003bb0 <HAL_DMA_Abort_IT+0x408>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e031      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x40a>
 8003b4e:	bf00      	nop
 8003b50:	40020010 	.word	0x40020010
 8003b54:	40020028 	.word	0x40020028
 8003b58:	40020040 	.word	0x40020040
 8003b5c:	40020058 	.word	0x40020058
 8003b60:	40020070 	.word	0x40020070
 8003b64:	40020088 	.word	0x40020088
 8003b68:	400200a0 	.word	0x400200a0
 8003b6c:	400200b8 	.word	0x400200b8
 8003b70:	40020410 	.word	0x40020410
 8003b74:	40020428 	.word	0x40020428
 8003b78:	40020440 	.word	0x40020440
 8003b7c:	40020458 	.word	0x40020458
 8003b80:	40020470 	.word	0x40020470
 8003b84:	40020488 	.word	0x40020488
 8003b88:	400204a0 	.word	0x400204a0
 8003b8c:	400204b8 	.word	0x400204b8
 8003b90:	58025408 	.word	0x58025408
 8003b94:	5802541c 	.word	0x5802541c
 8003b98:	58025430 	.word	0x58025430
 8003b9c:	58025444 	.word	0x58025444
 8003ba0:	58025458 	.word	0x58025458
 8003ba4:	5802546c 	.word	0x5802546c
 8003ba8:	58025480 	.word	0x58025480
 8003bac:	58025494 	.word	0x58025494
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d028      	beq.n	8003c08 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003be4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00c      	beq.n	8003c08 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bfc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c06:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop

08003c34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	@ 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c40:	4b67      	ldr	r3, [pc, #412]	@ (8003de0 <HAL_DMA_IRQHandler+0x1ac>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a67      	ldr	r2, [pc, #412]	@ (8003de4 <HAL_DMA_IRQHandler+0x1b0>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0a9b      	lsrs	r3, r3, #10
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5f      	ldr	r2, [pc, #380]	@ (8003de8 <HAL_DMA_IRQHandler+0x1b4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d04a      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a5d      	ldr	r2, [pc, #372]	@ (8003dec <HAL_DMA_IRQHandler+0x1b8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d045      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5c      	ldr	r2, [pc, #368]	@ (8003df0 <HAL_DMA_IRQHandler+0x1bc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d040      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5a      	ldr	r2, [pc, #360]	@ (8003df4 <HAL_DMA_IRQHandler+0x1c0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a59      	ldr	r2, [pc, #356]	@ (8003df8 <HAL_DMA_IRQHandler+0x1c4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d036      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a57      	ldr	r2, [pc, #348]	@ (8003dfc <HAL_DMA_IRQHandler+0x1c8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a56      	ldr	r2, [pc, #344]	@ (8003e00 <HAL_DMA_IRQHandler+0x1cc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d02c      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a54      	ldr	r2, [pc, #336]	@ (8003e04 <HAL_DMA_IRQHandler+0x1d0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d027      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a53      	ldr	r2, [pc, #332]	@ (8003e08 <HAL_DMA_IRQHandler+0x1d4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a51      	ldr	r2, [pc, #324]	@ (8003e0c <HAL_DMA_IRQHandler+0x1d8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a50      	ldr	r2, [pc, #320]	@ (8003e10 <HAL_DMA_IRQHandler+0x1dc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a4e      	ldr	r2, [pc, #312]	@ (8003e14 <HAL_DMA_IRQHandler+0x1e0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4d      	ldr	r2, [pc, #308]	@ (8003e18 <HAL_DMA_IRQHandler+0x1e4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a4b      	ldr	r2, [pc, #300]	@ (8003e1c <HAL_DMA_IRQHandler+0x1e8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4a      	ldr	r2, [pc, #296]	@ (8003e20 <HAL_DMA_IRQHandler+0x1ec>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a48      	ldr	r2, [pc, #288]	@ (8003e24 <HAL_DMA_IRQHandler+0x1f0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_DMA_IRQHandler+0xd6>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_DMA_IRQHandler+0xd8>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 842b 	beq.w	8004568 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80a2 	beq.w	8003e6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003de8 <HAL_DMA_IRQHandler+0x1b4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d04a      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2d      	ldr	r2, [pc, #180]	@ (8003dec <HAL_DMA_IRQHandler+0x1b8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d045      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2b      	ldr	r2, [pc, #172]	@ (8003df0 <HAL_DMA_IRQHandler+0x1bc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d040      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003df4 <HAL_DMA_IRQHandler+0x1c0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d03b      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a28      	ldr	r2, [pc, #160]	@ (8003df8 <HAL_DMA_IRQHandler+0x1c4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d036      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a27      	ldr	r2, [pc, #156]	@ (8003dfc <HAL_DMA_IRQHandler+0x1c8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d031      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a25      	ldr	r2, [pc, #148]	@ (8003e00 <HAL_DMA_IRQHandler+0x1cc>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02c      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a24      	ldr	r2, [pc, #144]	@ (8003e04 <HAL_DMA_IRQHandler+0x1d0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d027      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	@ (8003e08 <HAL_DMA_IRQHandler+0x1d4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d022      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a21      	ldr	r2, [pc, #132]	@ (8003e0c <HAL_DMA_IRQHandler+0x1d8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01d      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1f      	ldr	r2, [pc, #124]	@ (8003e10 <HAL_DMA_IRQHandler+0x1dc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d018      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e14 <HAL_DMA_IRQHandler+0x1e0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e18 <HAL_DMA_IRQHandler+0x1e4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00e      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	@ (8003e1c <HAL_DMA_IRQHandler+0x1e8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	@ (8003e20 <HAL_DMA_IRQHandler+0x1ec>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	@ (8003e24 <HAL_DMA_IRQHandler+0x1f0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d12f      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x1f4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e02e      	b.n	8003e3c <HAL_DMA_IRQHandler+0x208>
 8003dde:	bf00      	nop
 8003de0:	24000004 	.word	0x24000004
 8003de4:	1b4e81b5 	.word	0x1b4e81b5
 8003de8:	40020010 	.word	0x40020010
 8003dec:	40020028 	.word	0x40020028
 8003df0:	40020040 	.word	0x40020040
 8003df4:	40020058 	.word	0x40020058
 8003df8:	40020070 	.word	0x40020070
 8003dfc:	40020088 	.word	0x40020088
 8003e00:	400200a0 	.word	0x400200a0
 8003e04:	400200b8 	.word	0x400200b8
 8003e08:	40020410 	.word	0x40020410
 8003e0c:	40020428 	.word	0x40020428
 8003e10:	40020440 	.word	0x40020440
 8003e14:	40020458 	.word	0x40020458
 8003e18:	40020470 	.word	0x40020470
 8003e1c:	40020488 	.word	0x40020488
 8003e20:	400204a0 	.word	0x400204a0
 8003e24:	400204b8 	.word	0x400204b8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bf14      	ite	ne
 8003e36:	2301      	movne	r3, #1
 8003e38:	2300      	moveq	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0204 	bic.w	r2, r2, #4
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2208      	movs	r2, #8
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d06e      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a69      	ldr	r2, [pc, #420]	@ (800402c <HAL_DMA_IRQHandler+0x3f8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d04a      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a67      	ldr	r2, [pc, #412]	@ (8004030 <HAL_DMA_IRQHandler+0x3fc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d045      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a66      	ldr	r2, [pc, #408]	@ (8004034 <HAL_DMA_IRQHandler+0x400>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d040      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a64      	ldr	r2, [pc, #400]	@ (8004038 <HAL_DMA_IRQHandler+0x404>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d03b      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a63      	ldr	r2, [pc, #396]	@ (800403c <HAL_DMA_IRQHandler+0x408>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d036      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a61      	ldr	r2, [pc, #388]	@ (8004040 <HAL_DMA_IRQHandler+0x40c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a60      	ldr	r2, [pc, #384]	@ (8004044 <HAL_DMA_IRQHandler+0x410>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d02c      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8004048 <HAL_DMA_IRQHandler+0x414>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d027      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a5d      	ldr	r2, [pc, #372]	@ (800404c <HAL_DMA_IRQHandler+0x418>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a5b      	ldr	r2, [pc, #364]	@ (8004050 <HAL_DMA_IRQHandler+0x41c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a5a      	ldr	r2, [pc, #360]	@ (8004054 <HAL_DMA_IRQHandler+0x420>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a58      	ldr	r2, [pc, #352]	@ (8004058 <HAL_DMA_IRQHandler+0x424>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a57      	ldr	r2, [pc, #348]	@ (800405c <HAL_DMA_IRQHandler+0x428>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a55      	ldr	r2, [pc, #340]	@ (8004060 <HAL_DMA_IRQHandler+0x42c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a54      	ldr	r2, [pc, #336]	@ (8004064 <HAL_DMA_IRQHandler+0x430>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a52      	ldr	r2, [pc, #328]	@ (8004068 <HAL_DMA_IRQHandler+0x434>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10a      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x304>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e003      	b.n	8003f40 <HAL_DMA_IRQHandler+0x30c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f58:	f043 0202 	orr.w	r2, r3, #2
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2204      	movs	r2, #4
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 808f 	beq.w	8004094 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800402c <HAL_DMA_IRQHandler+0x3f8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d04a      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2a      	ldr	r2, [pc, #168]	@ (8004030 <HAL_DMA_IRQHandler+0x3fc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d045      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a29      	ldr	r2, [pc, #164]	@ (8004034 <HAL_DMA_IRQHandler+0x400>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d040      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a27      	ldr	r2, [pc, #156]	@ (8004038 <HAL_DMA_IRQHandler+0x404>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d03b      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a26      	ldr	r2, [pc, #152]	@ (800403c <HAL_DMA_IRQHandler+0x408>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d036      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a24      	ldr	r2, [pc, #144]	@ (8004040 <HAL_DMA_IRQHandler+0x40c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d031      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a23      	ldr	r2, [pc, #140]	@ (8004044 <HAL_DMA_IRQHandler+0x410>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d02c      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a21      	ldr	r2, [pc, #132]	@ (8004048 <HAL_DMA_IRQHandler+0x414>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d027      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a20      	ldr	r2, [pc, #128]	@ (800404c <HAL_DMA_IRQHandler+0x418>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d022      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <HAL_DMA_IRQHandler+0x41c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01d      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1d      	ldr	r2, [pc, #116]	@ (8004054 <HAL_DMA_IRQHandler+0x420>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d018      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8004058 <HAL_DMA_IRQHandler+0x424>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800405c <HAL_DMA_IRQHandler+0x428>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00e      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a18      	ldr	r2, [pc, #96]	@ (8004060 <HAL_DMA_IRQHandler+0x42c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a17      	ldr	r2, [pc, #92]	@ (8004064 <HAL_DMA_IRQHandler+0x430>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a15      	ldr	r2, [pc, #84]	@ (8004068 <HAL_DMA_IRQHandler+0x434>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d12a      	bne.n	800406c <HAL_DMA_IRQHandler+0x438>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	e023      	b.n	8004074 <HAL_DMA_IRQHandler+0x440>
 800402c:	40020010 	.word	0x40020010
 8004030:	40020028 	.word	0x40020028
 8004034:	40020040 	.word	0x40020040
 8004038:	40020058 	.word	0x40020058
 800403c:	40020070 	.word	0x40020070
 8004040:	40020088 	.word	0x40020088
 8004044:	400200a0 	.word	0x400200a0
 8004048:	400200b8 	.word	0x400200b8
 800404c:	40020410 	.word	0x40020410
 8004050:	40020428 	.word	0x40020428
 8004054:	40020440 	.word	0x40020440
 8004058:	40020458 	.word	0x40020458
 800405c:	40020470 	.word	0x40020470
 8004060:	40020488 	.word	0x40020488
 8004064:	400204a0 	.word	0x400204a0
 8004068:	400204b8 	.word	0x400204b8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00d      	beq.n	8004094 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2204      	movs	r2, #4
 8004082:	409a      	lsls	r2, r3
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408c:	f043 0204 	orr.w	r2, r3, #4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2210      	movs	r2, #16
 800409e:	409a      	lsls	r2, r3
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80a6 	beq.w	80041f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a85      	ldr	r2, [pc, #532]	@ (80042c4 <HAL_DMA_IRQHandler+0x690>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d04a      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a83      	ldr	r2, [pc, #524]	@ (80042c8 <HAL_DMA_IRQHandler+0x694>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d045      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a82      	ldr	r2, [pc, #520]	@ (80042cc <HAL_DMA_IRQHandler+0x698>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d040      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a80      	ldr	r2, [pc, #512]	@ (80042d0 <HAL_DMA_IRQHandler+0x69c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d03b      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7f      	ldr	r2, [pc, #508]	@ (80042d4 <HAL_DMA_IRQHandler+0x6a0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d036      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a7d      	ldr	r2, [pc, #500]	@ (80042d8 <HAL_DMA_IRQHandler+0x6a4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d031      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7c      	ldr	r2, [pc, #496]	@ (80042dc <HAL_DMA_IRQHandler+0x6a8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d02c      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7a      	ldr	r2, [pc, #488]	@ (80042e0 <HAL_DMA_IRQHandler+0x6ac>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d027      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a79      	ldr	r2, [pc, #484]	@ (80042e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d022      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a77      	ldr	r2, [pc, #476]	@ (80042e8 <HAL_DMA_IRQHandler+0x6b4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01d      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a76      	ldr	r2, [pc, #472]	@ (80042ec <HAL_DMA_IRQHandler+0x6b8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d018      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a74      	ldr	r2, [pc, #464]	@ (80042f0 <HAL_DMA_IRQHandler+0x6bc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a73      	ldr	r2, [pc, #460]	@ (80042f4 <HAL_DMA_IRQHandler+0x6c0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a71      	ldr	r2, [pc, #452]	@ (80042f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a70      	ldr	r2, [pc, #448]	@ (80042fc <HAL_DMA_IRQHandler+0x6c8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6e      	ldr	r2, [pc, #440]	@ (8004300 <HAL_DMA_IRQHandler+0x6cc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10a      	bne.n	8004160 <HAL_DMA_IRQHandler+0x52c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e009      	b.n	8004174 <HAL_DMA_IRQHandler+0x540>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d03e      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2210      	movs	r2, #16
 8004182:	409a      	lsls	r2, r3
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d018      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d108      	bne.n	80041b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d024      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
 80041b4:	e01f      	b.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01b      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
 80041c6:	e016      	b.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d107      	bne.n	80041e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0208 	bic.w	r2, r2, #8
 80041e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	2220      	movs	r2, #32
 8004200:	409a      	lsls	r2, r3
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8110 	beq.w	800442c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2c      	ldr	r2, [pc, #176]	@ (80042c4 <HAL_DMA_IRQHandler+0x690>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d04a      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2b      	ldr	r2, [pc, #172]	@ (80042c8 <HAL_DMA_IRQHandler+0x694>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d045      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a29      	ldr	r2, [pc, #164]	@ (80042cc <HAL_DMA_IRQHandler+0x698>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d040      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a28      	ldr	r2, [pc, #160]	@ (80042d0 <HAL_DMA_IRQHandler+0x69c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d03b      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a26      	ldr	r2, [pc, #152]	@ (80042d4 <HAL_DMA_IRQHandler+0x6a0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d036      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a25      	ldr	r2, [pc, #148]	@ (80042d8 <HAL_DMA_IRQHandler+0x6a4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d031      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a23      	ldr	r2, [pc, #140]	@ (80042dc <HAL_DMA_IRQHandler+0x6a8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d02c      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a22      	ldr	r2, [pc, #136]	@ (80042e0 <HAL_DMA_IRQHandler+0x6ac>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d027      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a20      	ldr	r2, [pc, #128]	@ (80042e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d022      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1f      	ldr	r2, [pc, #124]	@ (80042e8 <HAL_DMA_IRQHandler+0x6b4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d01d      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1d      	ldr	r2, [pc, #116]	@ (80042ec <HAL_DMA_IRQHandler+0x6b8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d018      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1c      	ldr	r2, [pc, #112]	@ (80042f0 <HAL_DMA_IRQHandler+0x6bc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1a      	ldr	r2, [pc, #104]	@ (80042f4 <HAL_DMA_IRQHandler+0x6c0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a19      	ldr	r2, [pc, #100]	@ (80042f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a17      	ldr	r2, [pc, #92]	@ (80042fc <HAL_DMA_IRQHandler+0x6c8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a16      	ldr	r2, [pc, #88]	@ (8004300 <HAL_DMA_IRQHandler+0x6cc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d12b      	bne.n	8004304 <HAL_DMA_IRQHandler+0x6d0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	e02a      	b.n	8004318 <HAL_DMA_IRQHandler+0x6e4>
 80042c2:	bf00      	nop
 80042c4:	40020010 	.word	0x40020010
 80042c8:	40020028 	.word	0x40020028
 80042cc:	40020040 	.word	0x40020040
 80042d0:	40020058 	.word	0x40020058
 80042d4:	40020070 	.word	0x40020070
 80042d8:	40020088 	.word	0x40020088
 80042dc:	400200a0 	.word	0x400200a0
 80042e0:	400200b8 	.word	0x400200b8
 80042e4:	40020410 	.word	0x40020410
 80042e8:	40020428 	.word	0x40020428
 80042ec:	40020440 	.word	0x40020440
 80042f0:	40020458 	.word	0x40020458
 80042f4:	40020470 	.word	0x40020470
 80042f8:	40020488 	.word	0x40020488
 80042fc:	400204a0 	.word	0x400204a0
 8004300:	400204b8 	.word	0x400204b8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8087 	beq.w	800442c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2220      	movs	r2, #32
 8004328:	409a      	lsls	r2, r3
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b04      	cmp	r3, #4
 8004338:	d139      	bne.n	80043ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0216 	bic.w	r2, r2, #22
 8004348:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004358:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <HAL_DMA_IRQHandler+0x736>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0208 	bic.w	r2, r2, #8
 8004378:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	223f      	movs	r2, #63	@ 0x3f
 8004384:	409a      	lsls	r2, r3
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 834a 	beq.w	8004a38 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
          }
          return;
 80043ac:	e344      	b.n	8004a38 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d02c      	beq.n	800442c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
 80043da:	e027      	b.n	800442c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d023      	beq.n	800442c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
 80043ec:	e01e      	b.n	800442c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10f      	bne.n	800441c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0210 	bic.w	r2, r2, #16
 800440a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8306 	beq.w	8004a42 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8088 	beq.w	8004554 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2204      	movs	r2, #4
 8004448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a7a      	ldr	r2, [pc, #488]	@ (800463c <HAL_DMA_IRQHandler+0xa08>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04a      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a79      	ldr	r2, [pc, #484]	@ (8004640 <HAL_DMA_IRQHandler+0xa0c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d045      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a77      	ldr	r2, [pc, #476]	@ (8004644 <HAL_DMA_IRQHandler+0xa10>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d040      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a76      	ldr	r2, [pc, #472]	@ (8004648 <HAL_DMA_IRQHandler+0xa14>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d03b      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a74      	ldr	r2, [pc, #464]	@ (800464c <HAL_DMA_IRQHandler+0xa18>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d036      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a73      	ldr	r2, [pc, #460]	@ (8004650 <HAL_DMA_IRQHandler+0xa1c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d031      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a71      	ldr	r2, [pc, #452]	@ (8004654 <HAL_DMA_IRQHandler+0xa20>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a70      	ldr	r2, [pc, #448]	@ (8004658 <HAL_DMA_IRQHandler+0xa24>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d027      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6e      	ldr	r2, [pc, #440]	@ (800465c <HAL_DMA_IRQHandler+0xa28>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004660 <HAL_DMA_IRQHandler+0xa2c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d01d      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004664 <HAL_DMA_IRQHandler+0xa30>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6a      	ldr	r2, [pc, #424]	@ (8004668 <HAL_DMA_IRQHandler+0xa34>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a68      	ldr	r2, [pc, #416]	@ (800466c <HAL_DMA_IRQHandler+0xa38>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a67      	ldr	r2, [pc, #412]	@ (8004670 <HAL_DMA_IRQHandler+0xa3c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a65      	ldr	r2, [pc, #404]	@ (8004674 <HAL_DMA_IRQHandler+0xa40>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a64      	ldr	r2, [pc, #400]	@ (8004678 <HAL_DMA_IRQHandler+0xa44>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d108      	bne.n	80044fe <HAL_DMA_IRQHandler+0x8ca>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e007      	b.n	800450e <HAL_DMA_IRQHandler+0x8da>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3301      	adds	r3, #1
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004516:	429a      	cmp	r2, r3
 8004518:	d307      	bcc.n	800452a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f2      	bne.n	800450e <HAL_DMA_IRQHandler+0x8da>
 8004528:	e000      	b.n	800452c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800452a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2203      	movs	r2, #3
 800453e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004542:	e003      	b.n	800454c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8272 	beq.w	8004a42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
 8004566:	e26c      	b.n	8004a42 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a43      	ldr	r2, [pc, #268]	@ (800467c <HAL_DMA_IRQHandler+0xa48>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d022      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a42      	ldr	r2, [pc, #264]	@ (8004680 <HAL_DMA_IRQHandler+0xa4c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d01d      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a40      	ldr	r2, [pc, #256]	@ (8004684 <HAL_DMA_IRQHandler+0xa50>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d018      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a3f      	ldr	r2, [pc, #252]	@ (8004688 <HAL_DMA_IRQHandler+0xa54>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d013      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a3d      	ldr	r2, [pc, #244]	@ (800468c <HAL_DMA_IRQHandler+0xa58>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00e      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3c      	ldr	r2, [pc, #240]	@ (8004690 <HAL_DMA_IRQHandler+0xa5c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d009      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004694 <HAL_DMA_IRQHandler+0xa60>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a39      	ldr	r2, [pc, #228]	@ (8004698 <HAL_DMA_IRQHandler+0xa64>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_DMA_IRQHandler+0x988>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <HAL_DMA_IRQHandler+0x98a>
 80045bc:	2300      	movs	r3, #0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 823f 	beq.w	8004a42 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2204      	movs	r2, #4
 80045d6:	409a      	lsls	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80cd 	beq.w	800477c <HAL_DMA_IRQHandler+0xb48>
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80c7 	beq.w	800477c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2204      	movs	r2, #4
 80045f8:	409a      	lsls	r2, r3
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d049      	beq.n	800469c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 8210 	beq.w	8004a3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004624:	e20a      	b.n	8004a3c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 8206 	beq.w	8004a3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004638:	e200      	b.n	8004a3c <HAL_DMA_IRQHandler+0xe08>
 800463a:	bf00      	nop
 800463c:	40020010 	.word	0x40020010
 8004640:	40020028 	.word	0x40020028
 8004644:	40020040 	.word	0x40020040
 8004648:	40020058 	.word	0x40020058
 800464c:	40020070 	.word	0x40020070
 8004650:	40020088 	.word	0x40020088
 8004654:	400200a0 	.word	0x400200a0
 8004658:	400200b8 	.word	0x400200b8
 800465c:	40020410 	.word	0x40020410
 8004660:	40020428 	.word	0x40020428
 8004664:	40020440 	.word	0x40020440
 8004668:	40020458 	.word	0x40020458
 800466c:	40020470 	.word	0x40020470
 8004670:	40020488 	.word	0x40020488
 8004674:	400204a0 	.word	0x400204a0
 8004678:	400204b8 	.word	0x400204b8
 800467c:	58025408 	.word	0x58025408
 8004680:	5802541c 	.word	0x5802541c
 8004684:	58025430 	.word	0x58025430
 8004688:	58025444 	.word	0x58025444
 800468c:	58025458 	.word	0x58025458
 8004690:	5802546c 	.word	0x5802546c
 8004694:	58025480 	.word	0x58025480
 8004698:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d160      	bne.n	8004768 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a7f      	ldr	r2, [pc, #508]	@ (80048a8 <HAL_DMA_IRQHandler+0xc74>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d04a      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a7d      	ldr	r2, [pc, #500]	@ (80048ac <HAL_DMA_IRQHandler+0xc78>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d045      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7c      	ldr	r2, [pc, #496]	@ (80048b0 <HAL_DMA_IRQHandler+0xc7c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d040      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a7a      	ldr	r2, [pc, #488]	@ (80048b4 <HAL_DMA_IRQHandler+0xc80>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d03b      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a79      	ldr	r2, [pc, #484]	@ (80048b8 <HAL_DMA_IRQHandler+0xc84>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d036      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a77      	ldr	r2, [pc, #476]	@ (80048bc <HAL_DMA_IRQHandler+0xc88>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d031      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a76      	ldr	r2, [pc, #472]	@ (80048c0 <HAL_DMA_IRQHandler+0xc8c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d02c      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a74      	ldr	r2, [pc, #464]	@ (80048c4 <HAL_DMA_IRQHandler+0xc90>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d027      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a73      	ldr	r2, [pc, #460]	@ (80048c8 <HAL_DMA_IRQHandler+0xc94>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d022      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a71      	ldr	r2, [pc, #452]	@ (80048cc <HAL_DMA_IRQHandler+0xc98>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01d      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a70      	ldr	r2, [pc, #448]	@ (80048d0 <HAL_DMA_IRQHandler+0xc9c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d018      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a6e      	ldr	r2, [pc, #440]	@ (80048d4 <HAL_DMA_IRQHandler+0xca0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6d      	ldr	r2, [pc, #436]	@ (80048d8 <HAL_DMA_IRQHandler+0xca4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a6b      	ldr	r2, [pc, #428]	@ (80048dc <HAL_DMA_IRQHandler+0xca8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a6a      	ldr	r2, [pc, #424]	@ (80048e0 <HAL_DMA_IRQHandler+0xcac>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a68      	ldr	r2, [pc, #416]	@ (80048e4 <HAL_DMA_IRQHandler+0xcb0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d108      	bne.n	8004758 <HAL_DMA_IRQHandler+0xb24>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0208 	bic.w	r2, r2, #8
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e007      	b.n	8004768 <HAL_DMA_IRQHandler+0xb34>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0204 	bic.w	r2, r2, #4
 8004766:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8165 	beq.w	8004a3c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800477a:	e15f      	b.n	8004a3c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2202      	movs	r2, #2
 8004786:	409a      	lsls	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80c5 	beq.w	800491c <HAL_DMA_IRQHandler+0xce8>
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80bf 	beq.w	800491c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2202      	movs	r2, #2
 80047a8:	409a      	lsls	r2, r3
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d018      	beq.n	80047ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 813a 	beq.w	8004a40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047d4:	e134      	b.n	8004a40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8130 	beq.w	8004a40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047e8:	e12a      	b.n	8004a40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f040 8089 	bne.w	8004908 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2b      	ldr	r2, [pc, #172]	@ (80048a8 <HAL_DMA_IRQHandler+0xc74>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d04a      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a29      	ldr	r2, [pc, #164]	@ (80048ac <HAL_DMA_IRQHandler+0xc78>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d045      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a28      	ldr	r2, [pc, #160]	@ (80048b0 <HAL_DMA_IRQHandler+0xc7c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d040      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a26      	ldr	r2, [pc, #152]	@ (80048b4 <HAL_DMA_IRQHandler+0xc80>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d03b      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a25      	ldr	r2, [pc, #148]	@ (80048b8 <HAL_DMA_IRQHandler+0xc84>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d036      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a23      	ldr	r2, [pc, #140]	@ (80048bc <HAL_DMA_IRQHandler+0xc88>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d031      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a22      	ldr	r2, [pc, #136]	@ (80048c0 <HAL_DMA_IRQHandler+0xc8c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d02c      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a20      	ldr	r2, [pc, #128]	@ (80048c4 <HAL_DMA_IRQHandler+0xc90>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d027      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1f      	ldr	r2, [pc, #124]	@ (80048c8 <HAL_DMA_IRQHandler+0xc94>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d022      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1d      	ldr	r2, [pc, #116]	@ (80048cc <HAL_DMA_IRQHandler+0xc98>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01d      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1c      	ldr	r2, [pc, #112]	@ (80048d0 <HAL_DMA_IRQHandler+0xc9c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d018      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1a      	ldr	r2, [pc, #104]	@ (80048d4 <HAL_DMA_IRQHandler+0xca0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a19      	ldr	r2, [pc, #100]	@ (80048d8 <HAL_DMA_IRQHandler+0xca4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a17      	ldr	r2, [pc, #92]	@ (80048dc <HAL_DMA_IRQHandler+0xca8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a16      	ldr	r2, [pc, #88]	@ (80048e0 <HAL_DMA_IRQHandler+0xcac>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_DMA_IRQHandler+0xc62>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a14      	ldr	r2, [pc, #80]	@ (80048e4 <HAL_DMA_IRQHandler+0xcb0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d128      	bne.n	80048e8 <HAL_DMA_IRQHandler+0xcb4>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0214 	bic.w	r2, r2, #20
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e027      	b.n	80048f8 <HAL_DMA_IRQHandler+0xcc4>
 80048a8:	40020010 	.word	0x40020010
 80048ac:	40020028 	.word	0x40020028
 80048b0:	40020040 	.word	0x40020040
 80048b4:	40020058 	.word	0x40020058
 80048b8:	40020070 	.word	0x40020070
 80048bc:	40020088 	.word	0x40020088
 80048c0:	400200a0 	.word	0x400200a0
 80048c4:	400200b8 	.word	0x400200b8
 80048c8:	40020410 	.word	0x40020410
 80048cc:	40020428 	.word	0x40020428
 80048d0:	40020440 	.word	0x40020440
 80048d4:	40020458 	.word	0x40020458
 80048d8:	40020470 	.word	0x40020470
 80048dc:	40020488 	.word	0x40020488
 80048e0:	400204a0 	.word	0x400204a0
 80048e4:	400204b8 	.word	0x400204b8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 020a 	bic.w	r2, r2, #10
 80048f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8097 	beq.w	8004a40 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800491a:	e091      	b.n	8004a40 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2208      	movs	r2, #8
 8004926:	409a      	lsls	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8088 	beq.w	8004a42 <HAL_DMA_IRQHandler+0xe0e>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8082 	beq.w	8004a42 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a41      	ldr	r2, [pc, #260]	@ (8004a48 <HAL_DMA_IRQHandler+0xe14>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d04a      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a4c <HAL_DMA_IRQHandler+0xe18>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d045      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a3e      	ldr	r2, [pc, #248]	@ (8004a50 <HAL_DMA_IRQHandler+0xe1c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d040      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a3c      	ldr	r2, [pc, #240]	@ (8004a54 <HAL_DMA_IRQHandler+0xe20>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d03b      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a58 <HAL_DMA_IRQHandler+0xe24>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d036      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a39      	ldr	r2, [pc, #228]	@ (8004a5c <HAL_DMA_IRQHandler+0xe28>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d031      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a38      	ldr	r2, [pc, #224]	@ (8004a60 <HAL_DMA_IRQHandler+0xe2c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d02c      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a36      	ldr	r2, [pc, #216]	@ (8004a64 <HAL_DMA_IRQHandler+0xe30>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d027      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a35      	ldr	r2, [pc, #212]	@ (8004a68 <HAL_DMA_IRQHandler+0xe34>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a33      	ldr	r2, [pc, #204]	@ (8004a6c <HAL_DMA_IRQHandler+0xe38>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01d      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a32      	ldr	r2, [pc, #200]	@ (8004a70 <HAL_DMA_IRQHandler+0xe3c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a30      	ldr	r2, [pc, #192]	@ (8004a74 <HAL_DMA_IRQHandler+0xe40>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004a78 <HAL_DMA_IRQHandler+0xe44>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a2d      	ldr	r2, [pc, #180]	@ (8004a7c <HAL_DMA_IRQHandler+0xe48>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004a80 <HAL_DMA_IRQHandler+0xe4c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a84 <HAL_DMA_IRQHandler+0xe50>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d108      	bne.n	80049f0 <HAL_DMA_IRQHandler+0xdbc>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 021c 	bic.w	r2, r2, #28
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e007      	b.n	8004a00 <HAL_DMA_IRQHandler+0xdcc>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 020e 	bic.w	r2, r2, #14
 80049fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2201      	movs	r2, #1
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
 8004a36:	e004      	b.n	8004a42 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a38:	bf00      	nop
 8004a3a:	e002      	b.n	8004a42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a3c:	bf00      	nop
 8004a3e:	e000      	b.n	8004a42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a42:	3728      	adds	r7, #40	@ 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40020010 	.word	0x40020010
 8004a4c:	40020028 	.word	0x40020028
 8004a50:	40020040 	.word	0x40020040
 8004a54:	40020058 	.word	0x40020058
 8004a58:	40020070 	.word	0x40020070
 8004a5c:	40020088 	.word	0x40020088
 8004a60:	400200a0 	.word	0x400200a0
 8004a64:	400200b8 	.word	0x400200b8
 8004a68:	40020410 	.word	0x40020410
 8004a6c:	40020428 	.word	0x40020428
 8004a70:	40020440 	.word	0x40020440
 8004a74:	40020458 	.word	0x40020458
 8004a78:	40020470 	.word	0x40020470
 8004a7c:	40020488 	.word	0x40020488
 8004a80:	400204a0 	.word	0x400204a0
 8004a84:	400204b8 	.word	0x400204b8

08004a88 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a7f      	ldr	r2, [pc, #508]	@ (8004cbc <DMA_SetConfig+0x21c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d072      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a7d      	ldr	r2, [pc, #500]	@ (8004cc0 <DMA_SetConfig+0x220>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d06d      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a7c      	ldr	r2, [pc, #496]	@ (8004cc4 <DMA_SetConfig+0x224>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d068      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a7a      	ldr	r2, [pc, #488]	@ (8004cc8 <DMA_SetConfig+0x228>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d063      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a79      	ldr	r2, [pc, #484]	@ (8004ccc <DMA_SetConfig+0x22c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d05e      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a77      	ldr	r2, [pc, #476]	@ (8004cd0 <DMA_SetConfig+0x230>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d059      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a76      	ldr	r2, [pc, #472]	@ (8004cd4 <DMA_SetConfig+0x234>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d054      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a74      	ldr	r2, [pc, #464]	@ (8004cd8 <DMA_SetConfig+0x238>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d04f      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a73      	ldr	r2, [pc, #460]	@ (8004cdc <DMA_SetConfig+0x23c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d04a      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a71      	ldr	r2, [pc, #452]	@ (8004ce0 <DMA_SetConfig+0x240>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d045      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a70      	ldr	r2, [pc, #448]	@ (8004ce4 <DMA_SetConfig+0x244>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d040      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a6e      	ldr	r2, [pc, #440]	@ (8004ce8 <DMA_SetConfig+0x248>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d03b      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a6d      	ldr	r2, [pc, #436]	@ (8004cec <DMA_SetConfig+0x24c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d036      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a6b      	ldr	r2, [pc, #428]	@ (8004cf0 <DMA_SetConfig+0x250>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d031      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8004cf4 <DMA_SetConfig+0x254>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d02c      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a68      	ldr	r2, [pc, #416]	@ (8004cf8 <DMA_SetConfig+0x258>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d027      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a67      	ldr	r2, [pc, #412]	@ (8004cfc <DMA_SetConfig+0x25c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d022      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a65      	ldr	r2, [pc, #404]	@ (8004d00 <DMA_SetConfig+0x260>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01d      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a64      	ldr	r2, [pc, #400]	@ (8004d04 <DMA_SetConfig+0x264>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d018      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a62      	ldr	r2, [pc, #392]	@ (8004d08 <DMA_SetConfig+0x268>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a61      	ldr	r2, [pc, #388]	@ (8004d0c <DMA_SetConfig+0x26c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00e      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a5f      	ldr	r2, [pc, #380]	@ (8004d10 <DMA_SetConfig+0x270>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d009      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a5e      	ldr	r2, [pc, #376]	@ (8004d14 <DMA_SetConfig+0x274>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d004      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8004d18 <DMA_SetConfig+0x278>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d101      	bne.n	8004bae <DMA_SetConfig+0x10e>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <DMA_SetConfig+0x110>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004bbc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004bce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a39      	ldr	r2, [pc, #228]	@ (8004cbc <DMA_SetConfig+0x21c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04a      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a38      	ldr	r2, [pc, #224]	@ (8004cc0 <DMA_SetConfig+0x220>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d045      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a36      	ldr	r2, [pc, #216]	@ (8004cc4 <DMA_SetConfig+0x224>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d040      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a35      	ldr	r2, [pc, #212]	@ (8004cc8 <DMA_SetConfig+0x228>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d03b      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a33      	ldr	r2, [pc, #204]	@ (8004ccc <DMA_SetConfig+0x22c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d036      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a32      	ldr	r2, [pc, #200]	@ (8004cd0 <DMA_SetConfig+0x230>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d031      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a30      	ldr	r2, [pc, #192]	@ (8004cd4 <DMA_SetConfig+0x234>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02c      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd8 <DMA_SetConfig+0x238>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d027      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2d      	ldr	r2, [pc, #180]	@ (8004cdc <DMA_SetConfig+0x23c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce0 <DMA_SetConfig+0x240>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d01d      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce4 <DMA_SetConfig+0x244>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a29      	ldr	r2, [pc, #164]	@ (8004ce8 <DMA_SetConfig+0x248>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a27      	ldr	r2, [pc, #156]	@ (8004cec <DMA_SetConfig+0x24c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a26      	ldr	r2, [pc, #152]	@ (8004cf0 <DMA_SetConfig+0x250>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a24      	ldr	r2, [pc, #144]	@ (8004cf4 <DMA_SetConfig+0x254>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a23      	ldr	r2, [pc, #140]	@ (8004cf8 <DMA_SetConfig+0x258>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d101      	bne.n	8004c74 <DMA_SetConfig+0x1d4>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <DMA_SetConfig+0x1d6>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d059      	beq.n	8004d2e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	223f      	movs	r2, #63	@ 0x3f
 8004c84:	409a      	lsls	r2, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c98:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b40      	cmp	r3, #64	@ 0x40
 8004ca8:	d138      	bne.n	8004d1c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cba:	e086      	b.n	8004dca <DMA_SetConfig+0x32a>
 8004cbc:	40020010 	.word	0x40020010
 8004cc0:	40020028 	.word	0x40020028
 8004cc4:	40020040 	.word	0x40020040
 8004cc8:	40020058 	.word	0x40020058
 8004ccc:	40020070 	.word	0x40020070
 8004cd0:	40020088 	.word	0x40020088
 8004cd4:	400200a0 	.word	0x400200a0
 8004cd8:	400200b8 	.word	0x400200b8
 8004cdc:	40020410 	.word	0x40020410
 8004ce0:	40020428 	.word	0x40020428
 8004ce4:	40020440 	.word	0x40020440
 8004ce8:	40020458 	.word	0x40020458
 8004cec:	40020470 	.word	0x40020470
 8004cf0:	40020488 	.word	0x40020488
 8004cf4:	400204a0 	.word	0x400204a0
 8004cf8:	400204b8 	.word	0x400204b8
 8004cfc:	58025408 	.word	0x58025408
 8004d00:	5802541c 	.word	0x5802541c
 8004d04:	58025430 	.word	0x58025430
 8004d08:	58025444 	.word	0x58025444
 8004d0c:	58025458 	.word	0x58025458
 8004d10:	5802546c 	.word	0x5802546c
 8004d14:	58025480 	.word	0x58025480
 8004d18:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]
}
 8004d2c:	e04d      	b.n	8004dca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a29      	ldr	r2, [pc, #164]	@ (8004dd8 <DMA_SetConfig+0x338>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a27      	ldr	r2, [pc, #156]	@ (8004ddc <DMA_SetConfig+0x33c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a26      	ldr	r2, [pc, #152]	@ (8004de0 <DMA_SetConfig+0x340>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a24      	ldr	r2, [pc, #144]	@ (8004de4 <DMA_SetConfig+0x344>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a23      	ldr	r2, [pc, #140]	@ (8004de8 <DMA_SetConfig+0x348>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a21      	ldr	r2, [pc, #132]	@ (8004dec <DMA_SetConfig+0x34c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a20      	ldr	r2, [pc, #128]	@ (8004df0 <DMA_SetConfig+0x350>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1e      	ldr	r2, [pc, #120]	@ (8004df4 <DMA_SetConfig+0x354>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <DMA_SetConfig+0x2e2>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <DMA_SetConfig+0x2e4>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	2201      	movs	r2, #1
 8004d92:	409a      	lsls	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b40      	cmp	r3, #64	@ 0x40
 8004da6:	d108      	bne.n	8004dba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	60da      	str	r2, [r3, #12]
}
 8004db8:	e007      	b.n	8004dca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	60da      	str	r2, [r3, #12]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	58025408 	.word	0x58025408
 8004ddc:	5802541c 	.word	0x5802541c
 8004de0:	58025430 	.word	0x58025430
 8004de4:	58025444 	.word	0x58025444
 8004de8:	58025458 	.word	0x58025458
 8004dec:	5802546c 	.word	0x5802546c
 8004df0:	58025480 	.word	0x58025480
 8004df4:	58025494 	.word	0x58025494

08004df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a42      	ldr	r2, [pc, #264]	@ (8004f10 <DMA_CalcBaseAndBitshift+0x118>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d04a      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a41      	ldr	r2, [pc, #260]	@ (8004f14 <DMA_CalcBaseAndBitshift+0x11c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d045      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a3f      	ldr	r2, [pc, #252]	@ (8004f18 <DMA_CalcBaseAndBitshift+0x120>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d040      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a3e      	ldr	r2, [pc, #248]	@ (8004f1c <DMA_CalcBaseAndBitshift+0x124>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d03b      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f20 <DMA_CalcBaseAndBitshift+0x128>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d036      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a3b      	ldr	r2, [pc, #236]	@ (8004f24 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d031      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a39      	ldr	r2, [pc, #228]	@ (8004f28 <DMA_CalcBaseAndBitshift+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02c      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a38      	ldr	r2, [pc, #224]	@ (8004f2c <DMA_CalcBaseAndBitshift+0x134>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d027      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a36      	ldr	r2, [pc, #216]	@ (8004f30 <DMA_CalcBaseAndBitshift+0x138>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a35      	ldr	r2, [pc, #212]	@ (8004f34 <DMA_CalcBaseAndBitshift+0x13c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d01d      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a33      	ldr	r2, [pc, #204]	@ (8004f38 <DMA_CalcBaseAndBitshift+0x140>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d018      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a32      	ldr	r2, [pc, #200]	@ (8004f3c <DMA_CalcBaseAndBitshift+0x144>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a30      	ldr	r2, [pc, #192]	@ (8004f40 <DMA_CalcBaseAndBitshift+0x148>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2f      	ldr	r2, [pc, #188]	@ (8004f44 <DMA_CalcBaseAndBitshift+0x14c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2d      	ldr	r2, [pc, #180]	@ (8004f48 <DMA_CalcBaseAndBitshift+0x150>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f4c <DMA_CalcBaseAndBitshift+0x154>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <DMA_CalcBaseAndBitshift+0xac>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <DMA_CalcBaseAndBitshift+0xae>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d024      	beq.n	8004ef4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	3b10      	subs	r3, #16
 8004eb2:	4a27      	ldr	r2, [pc, #156]	@ (8004f50 <DMA_CalcBaseAndBitshift+0x158>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	4a24      	ldr	r2, [pc, #144]	@ (8004f54 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ec4:	5cd3      	ldrb	r3, [r2, r3]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d908      	bls.n	8004ee4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f58 <DMA_CalcBaseAndBitshift+0x160>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	1d1a      	adds	r2, r3, #4
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ee2:	e00d      	b.n	8004f00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <DMA_CalcBaseAndBitshift+0x160>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ef2:	e005      	b.n	8004f00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40020010 	.word	0x40020010
 8004f14:	40020028 	.word	0x40020028
 8004f18:	40020040 	.word	0x40020040
 8004f1c:	40020058 	.word	0x40020058
 8004f20:	40020070 	.word	0x40020070
 8004f24:	40020088 	.word	0x40020088
 8004f28:	400200a0 	.word	0x400200a0
 8004f2c:	400200b8 	.word	0x400200b8
 8004f30:	40020410 	.word	0x40020410
 8004f34:	40020428 	.word	0x40020428
 8004f38:	40020440 	.word	0x40020440
 8004f3c:	40020458 	.word	0x40020458
 8004f40:	40020470 	.word	0x40020470
 8004f44:	40020488 	.word	0x40020488
 8004f48:	400204a0 	.word	0x400204a0
 8004f4c:	400204b8 	.word	0x400204b8
 8004f50:	aaaaaaab 	.word	0xaaaaaaab
 8004f54:	0801eb9c 	.word	0x0801eb9c
 8004f58:	fffffc00 	.word	0xfffffc00

08004f5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d120      	bne.n	8004fb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d858      	bhi.n	800502a <DMA_CheckFifoParam+0xce>
 8004f78:	a201      	add	r2, pc, #4	@ (adr r2, 8004f80 <DMA_CheckFifoParam+0x24>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004f91 	.word	0x08004f91
 8004f84:	08004fa3 	.word	0x08004fa3
 8004f88:	08004f91 	.word	0x08004f91
 8004f8c:	0800502b 	.word	0x0800502b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d048      	beq.n	800502e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fa0:	e045      	b.n	800502e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004faa:	d142      	bne.n	8005032 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fb0:	e03f      	b.n	8005032 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fba:	d123      	bne.n	8005004 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d838      	bhi.n	8005036 <DMA_CheckFifoParam+0xda>
 8004fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <DMA_CheckFifoParam+0x70>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fe3 	.word	0x08004fe3
 8004fd4:	08004fdd 	.word	0x08004fdd
 8004fd8:	08004ff5 	.word	0x08004ff5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
        break;
 8004fe0:	e030      	b.n	8005044 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d025      	beq.n	800503a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ff2:	e022      	b.n	800503a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ffc:	d11f      	bne.n	800503e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005002:	e01c      	b.n	800503e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	2b02      	cmp	r3, #2
 800500a:	d902      	bls.n	8005012 <DMA_CheckFifoParam+0xb6>
 800500c:	2b03      	cmp	r3, #3
 800500e:	d003      	beq.n	8005018 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005010:	e018      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
        break;
 8005016:	e015      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00e      	beq.n	8005042 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
    break;
 8005028:	e00b      	b.n	8005042 <DMA_CheckFifoParam+0xe6>
        break;
 800502a:	bf00      	nop
 800502c:	e00a      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        break;
 800502e:	bf00      	nop
 8005030:	e008      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        break;
 8005032:	bf00      	nop
 8005034:	e006      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        break;
 8005036:	bf00      	nop
 8005038:	e004      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        break;
 800503a:	bf00      	nop
 800503c:	e002      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        break;
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
    break;
 8005042:	bf00      	nop
    }
  }

  return status;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop

08005054 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a38      	ldr	r2, [pc, #224]	@ (8005148 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d022      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a36      	ldr	r2, [pc, #216]	@ (800514c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01d      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a35      	ldr	r2, [pc, #212]	@ (8005150 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d018      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a33      	ldr	r2, [pc, #204]	@ (8005154 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a32      	ldr	r2, [pc, #200]	@ (8005158 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a30      	ldr	r2, [pc, #192]	@ (800515c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005160 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005164 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d101      	bne.n	80050b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01a      	beq.n	80050f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	3b08      	subs	r3, #8
 80050c4:	4a28      	ldr	r2, [pc, #160]	@ (8005168 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4b26      	ldr	r3, [pc, #152]	@ (800516c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	461a      	mov	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a24      	ldr	r2, [pc, #144]	@ (8005170 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80050e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f003 031f 	and.w	r3, r3, #31
 80050e8:	2201      	movs	r2, #1
 80050ea:	409a      	lsls	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80050f0:	e024      	b.n	800513c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	3b10      	subs	r3, #16
 80050fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005174 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4a1c      	ldr	r2, [pc, #112]	@ (8005178 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d806      	bhi.n	800511a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4a1b      	ldr	r2, [pc, #108]	@ (800517c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d902      	bls.n	800511a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3308      	adds	r3, #8
 8005118:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4b18      	ldr	r3, [pc, #96]	@ (8005180 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a16      	ldr	r2, [pc, #88]	@ (8005184 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800512c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2201      	movs	r2, #1
 8005136:	409a      	lsls	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	58025408 	.word	0x58025408
 800514c:	5802541c 	.word	0x5802541c
 8005150:	58025430 	.word	0x58025430
 8005154:	58025444 	.word	0x58025444
 8005158:	58025458 	.word	0x58025458
 800515c:	5802546c 	.word	0x5802546c
 8005160:	58025480 	.word	0x58025480
 8005164:	58025494 	.word	0x58025494
 8005168:	cccccccd 	.word	0xcccccccd
 800516c:	16009600 	.word	0x16009600
 8005170:	58025880 	.word	0x58025880
 8005174:	aaaaaaab 	.word	0xaaaaaaab
 8005178:	400204b8 	.word	0x400204b8
 800517c:	4002040f 	.word	0x4002040f
 8005180:	10008200 	.word	0x10008200
 8005184:	40020880 	.word	0x40020880

08005188 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d04a      	beq.n	8005234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d847      	bhi.n	8005234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a25      	ldr	r2, [pc, #148]	@ (8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a24      	ldr	r2, [pc, #144]	@ (8005244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d01d      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a22      	ldr	r2, [pc, #136]	@ (8005248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a21      	ldr	r2, [pc, #132]	@ (800524c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1e      	ldr	r2, [pc, #120]	@ (8005254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1b      	ldr	r2, [pc, #108]	@ (800525c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d101      	bne.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80051f8:	2300      	movs	r3, #0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4b17      	ldr	r3, [pc, #92]	@ (8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a15      	ldr	r2, [pc, #84]	@ (8005264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005210:	671a      	str	r2, [r3, #112]	@ 0x70
 8005212:	e009      	b.n	8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4b14      	ldr	r3, [pc, #80]	@ (8005268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	461a      	mov	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a11      	ldr	r2, [pc, #68]	@ (800526c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005226:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3b01      	subs	r3, #1
 800522c:	2201      	movs	r2, #1
 800522e:	409a      	lsls	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	58025408 	.word	0x58025408
 8005244:	5802541c 	.word	0x5802541c
 8005248:	58025430 	.word	0x58025430
 800524c:	58025444 	.word	0x58025444
 8005250:	58025458 	.word	0x58025458
 8005254:	5802546c 	.word	0x5802546c
 8005258:	58025480 	.word	0x58025480
 800525c:	58025494 	.word	0x58025494
 8005260:	1600963f 	.word	0x1600963f
 8005264:	58025940 	.word	0x58025940
 8005268:	1000823f 	.word	0x1000823f
 800526c:	40020940 	.word	0x40020940

08005270 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e0e3      	b.n	800544a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2223      	movs	r2, #35	@ 0x23
 8005290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7fc f825 	bl	80012e4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529a:	4b6e      	ldr	r3, [pc, #440]	@ (8005454 <HAL_ETH_Init+0x1e4>)
 800529c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052a0:	4a6c      	ldr	r2, [pc, #432]	@ (8005454 <HAL_ETH_Init+0x1e4>)
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80052aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005454 <HAL_ETH_Init+0x1e4>)
 80052ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	7a1b      	ldrb	r3, [r3, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d103      	bne.n	80052c8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80052c0:	2000      	movs	r0, #0
 80052c2:	f7fd f899 	bl	80023f8 <HAL_SYSCFG_ETHInterfaceSelect>
 80052c6:	e003      	b.n	80052d0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80052c8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80052cc:	f7fd f894 	bl	80023f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80052d0:	4b61      	ldr	r3, [pc, #388]	@ (8005458 <HAL_ETH_Init+0x1e8>)
 80052d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052ec:	f7fd f848 	bl	8002380 <HAL_GetTick>
 80052f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80052f2:	e011      	b.n	8005318 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80052f4:	f7fd f844 	bl	8002380 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005302:	d909      	bls.n	8005318 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2204      	movs	r2, #4
 8005308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	22e0      	movs	r2, #224	@ 0xe0
 8005310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e098      	b.n	800544a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e4      	bne.n	80052f4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f89e 	bl	800546c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005330:	f001 fea0 	bl	8007074 <HAL_RCC_GetHCLKFreq>
 8005334:	4603      	mov	r3, r0
 8005336:	4a49      	ldr	r2, [pc, #292]	@ (800545c <HAL_ETH_Init+0x1ec>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	0c9a      	lsrs	r2, r3, #18
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3a01      	subs	r2, #1
 8005344:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fa81 	bl	8005850 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005356:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800535a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6812      	ldr	r2, [r2, #0]
 8005362:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005366:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800536a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	22e0      	movs	r2, #224	@ 0xe0
 8005386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e05d      	b.n	800544a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005396:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800539a:	4b31      	ldr	r3, [pc, #196]	@ (8005460 <HAL_ETH_Init+0x1f0>)
 800539c:	4013      	ands	r3, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6952      	ldr	r2, [r2, #20]
 80053a2:	0051      	lsls	r1, r2, #1
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	430b      	orrs	r3, r1
 80053aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053ae:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fae9 	bl	800598a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fb2f 	bl	8005a1c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	3305      	adds	r3, #5
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	021a      	lsls	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	4619      	mov	r1, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	3303      	adds	r3, #3
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	061a      	lsls	r2, r3, #24
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	3302      	adds	r3, #2
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	041b      	lsls	r3, r3, #16
 80053f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	3301      	adds	r3, #1
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80053fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800540a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800540c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4b11      	ldr	r3, [pc, #68]	@ (8005464 <HAL_ETH_Init+0x1f4>)
 800541e:	430b      	orrs	r3, r1
 8005420:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b0d      	ldr	r3, [pc, #52]	@ (8005468 <HAL_ETH_Init+0x1f8>)
 8005432:	430b      	orrs	r3, r1
 8005434:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2210      	movs	r2, #16
 8005444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	58024400 	.word	0x58024400
 8005458:	58000400 	.word	0x58000400
 800545c:	431bde83 	.word	0x431bde83
 8005460:	ffff8001 	.word	0xffff8001
 8005464:	0c020060 	.word	0x0c020060
 8005468:	0c20c000 	.word	0x0c20c000

0800546c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800547c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005484:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005486:	f001 fdf5 	bl	8007074 <HAL_RCC_GetHCLKFreq>
 800548a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4a1a      	ldr	r2, [pc, #104]	@ (80054f8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d804      	bhi.n	800549e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e022      	b.n	80054e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4a16      	ldr	r2, [pc, #88]	@ (80054fc <HAL_ETH_SetMDIOClockRange+0x90>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d204      	bcs.n	80054b0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	e019      	b.n	80054e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4a13      	ldr	r2, [pc, #76]	@ (8005500 <HAL_ETH_SetMDIOClockRange+0x94>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d915      	bls.n	80054e4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4a12      	ldr	r2, [pc, #72]	@ (8005504 <HAL_ETH_SetMDIOClockRange+0x98>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d804      	bhi.n	80054ca <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e00c      	b.n	80054e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005508 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d804      	bhi.n	80054dc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e003      	b.n	80054e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80054e2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	02160ebf 	.word	0x02160ebf
 80054fc:	03938700 	.word	0x03938700
 8005500:	05f5e0ff 	.word	0x05f5e0ff
 8005504:	08f0d17f 	.word	0x08f0d17f
 8005508:	0ee6b27f 	.word	0x0ee6b27f

0800550c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800551e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	791b      	ldrb	r3, [r3, #4]
 8005524:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005526:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	7b1b      	ldrb	r3, [r3, #12]
 800552c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800552e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	7b5b      	ldrb	r3, [r3, #13]
 8005534:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005536:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	7b9b      	ldrb	r3, [r3, #14]
 800553c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800553e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	7bdb      	ldrb	r3, [r3, #15]
 8005544:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005546:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	7c12      	ldrb	r2, [r2, #16]
 800554c:	2a00      	cmp	r2, #0
 800554e:	d102      	bne.n	8005556 <ETH_SetMACConfig+0x4a>
 8005550:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005554:	e000      	b.n	8005558 <ETH_SetMACConfig+0x4c>
 8005556:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005558:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	7c52      	ldrb	r2, [r2, #17]
 800555e:	2a00      	cmp	r2, #0
 8005560:	d102      	bne.n	8005568 <ETH_SetMACConfig+0x5c>
 8005562:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005566:	e000      	b.n	800556a <ETH_SetMACConfig+0x5e>
 8005568:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800556a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	7c9b      	ldrb	r3, [r3, #18]
 8005570:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005572:	431a      	orrs	r2, r3
               macconf->Speed |
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005578:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800557e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	7f1b      	ldrb	r3, [r3, #28]
 8005584:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	7f5b      	ldrb	r3, [r3, #29]
 800558c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800558e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	7f92      	ldrb	r2, [r2, #30]
 8005594:	2a00      	cmp	r2, #0
 8005596:	d102      	bne.n	800559e <ETH_SetMACConfig+0x92>
 8005598:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800559c:	e000      	b.n	80055a0 <ETH_SetMACConfig+0x94>
 800559e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80055a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	7fdb      	ldrb	r3, [r3, #31]
 80055a6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80055a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	d102      	bne.n	80055ba <ETH_SetMACConfig+0xae>
 80055b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055b8:	e000      	b.n	80055bc <ETH_SetMACConfig+0xb0>
 80055ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80055bc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80055c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055ca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80055cc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4b56      	ldr	r3, [pc, #344]	@ (8005738 <ETH_SetMACConfig+0x22c>)
 80055de:	4013      	ands	r3, r2
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	68f9      	ldr	r1, [r7, #12]
 80055e6:	430b      	orrs	r3, r1
 80055e8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80055f6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80055f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005600:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005602:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800560a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800560c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005614:	2a00      	cmp	r2, #0
 8005616:	d102      	bne.n	800561e <ETH_SetMACConfig+0x112>
 8005618:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800561c:	e000      	b.n	8005620 <ETH_SetMACConfig+0x114>
 800561e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005620:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	4b42      	ldr	r3, [pc, #264]	@ (800573c <ETH_SetMACConfig+0x230>)
 8005632:	4013      	ands	r3, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	68f9      	ldr	r1, [r7, #12]
 800563a:	430b      	orrs	r3, r1
 800563c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005644:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	4b3a      	ldr	r3, [pc, #232]	@ (8005740 <ETH_SetMACConfig+0x234>)
 8005656:	4013      	ands	r3, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	68f9      	ldr	r1, [r7, #12]
 800565e:	430b      	orrs	r3, r1
 8005660:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005668:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800566e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005676:	2a00      	cmp	r2, #0
 8005678:	d101      	bne.n	800567e <ETH_SetMACConfig+0x172>
 800567a:	2280      	movs	r2, #128	@ 0x80
 800567c:	e000      	b.n	8005680 <ETH_SetMACConfig+0x174>
 800567e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005680:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005686:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005692:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8005696:	4013      	ands	r3, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	68f9      	ldr	r1, [r7, #12]
 800569e:	430b      	orrs	r3, r1
 80056a0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80056a8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80056b0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056be:	f023 0103 	bic.w	r1, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80056d6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	d101      	bne.n	80056fa <ETH_SetMACConfig+0x1ee>
 80056f6:	2240      	movs	r2, #64	@ 0x40
 80056f8:	e000      	b.n	80056fc <ETH_SetMACConfig+0x1f0>
 80056fa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80056fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005704:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005706:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800570e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800571c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	430a      	orrs	r2, r1
 8005728:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	00048083 	.word	0x00048083
 800573c:	c0f88000 	.word	0xc0f88000
 8005740:	fffffef0 	.word	0xfffffef0

08005744 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4b38      	ldr	r3, [pc, #224]	@ (800583c <ETH_SetDMAConfig+0xf8>)
 800575a:	4013      	ands	r3, r2
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	6811      	ldr	r1, [r2, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	430b      	orrs	r3, r1
 8005766:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800576a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	791b      	ldrb	r3, [r3, #4]
 8005770:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005776:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	7b1b      	ldrb	r3, [r3, #12]
 800577c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	4b2c      	ldr	r3, [pc, #176]	@ (8005840 <ETH_SetDMAConfig+0xfc>)
 800578e:	4013      	ands	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	68f9      	ldr	r1, [r7, #12]
 8005796:	430b      	orrs	r3, r1
 8005798:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800579c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	7b5b      	ldrb	r3, [r3, #13]
 80057a2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80057b8:	4b22      	ldr	r3, [pc, #136]	@ (8005844 <ETH_SetDMAConfig+0x100>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	68f9      	ldr	r1, [r7, #12]
 80057c2:	430b      	orrs	r3, r1
 80057c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80057c8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	7d1b      	ldrb	r3, [r3, #20]
 80057d4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80057d6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	7f5b      	ldrb	r3, [r3, #29]
 80057dc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057ea:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80057ee:	4b16      	ldr	r3, [pc, #88]	@ (8005848 <ETH_SetDMAConfig+0x104>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	430b      	orrs	r3, r1
 80057fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80057fe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	7f1b      	ldrb	r3, [r3, #28]
 8005806:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005818:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800581c:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <ETH_SetDMAConfig+0x108>)
 800581e:	4013      	ands	r3, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	68f9      	ldr	r1, [r7, #12]
 8005826:	430b      	orrs	r3, r1
 8005828:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800582c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	ffff87fd 	.word	0xffff87fd
 8005840:	ffff2ffe 	.word	0xffff2ffe
 8005844:	fffec000 	.word	0xfffec000
 8005848:	ffc0efef 	.word	0xffc0efef
 800584c:	7fc0ffff 	.word	0x7fc0ffff

08005850 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b0a4      	sub	sp, #144	@ 0x90
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800585e:	2300      	movs	r3, #0
 8005860:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005862:	2300      	movs	r3, #0
 8005864:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005868:	2300      	movs	r3, #0
 800586a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005874:	2301      	movs	r3, #1
 8005876:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005880:	2300      	movs	r3, #0
 8005882:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005886:	2301      	movs	r3, #1
 8005888:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800588c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005890:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005892:	2300      	movs	r3, #0
 8005894:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005898:	2300      	movs	r3, #0
 800589a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800589c:	2300      	movs	r3, #0
 800589e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80058a8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80058ac:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80058b4:	2300      	movs	r3, #0
 80058b6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80058be:	2300      	movs	r3, #0
 80058c0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80058ca:	2300      	movs	r3, #0
 80058cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80058d2:	2300      	movs	r3, #0
 80058d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80058e8:	2320      	movs	r3, #32
 80058ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80058ee:	2301      	movs	r3, #1
 80058f0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80058fa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005904:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005906:	2300      	movs	r3, #0
 8005908:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800590c:	2302      	movs	r3, #2
 800590e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005912:	2300      	movs	r3, #0
 8005914:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800591e:	2300      	movs	r3, #0
 8005920:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005924:	2301      	movs	r3, #1
 8005926:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800592a:	2300      	movs	r3, #0
 800592c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005934:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff fde6 	bl	800550c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005940:	2301      	movs	r3, #1
 8005942:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005944:	2301      	movs	r3, #1
 8005946:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005948:	2300      	movs	r3, #0
 800594a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005952:	2300      	movs	r3, #0
 8005954:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005956:	2300      	movs	r3, #0
 8005958:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800595a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800595e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005960:	2300      	movs	r3, #0
 8005962:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005964:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005968:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800596a:	2300      	movs	r3, #0
 800596c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005970:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005974:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005976:	f107 0308 	add.w	r3, r7, #8
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff fee1 	bl	8005744 <ETH_SetDMAConfig>
}
 8005982:	bf00      	nop
 8005984:	3790      	adds	r7, #144	@ 0x90
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	e01d      	b.n	80059d4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68d9      	ldr	r1, [r3, #12]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4613      	mov	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	4413      	add	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	440b      	add	r3, r1
 80059a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2200      	movs	r2, #0
 80059ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	3206      	adds	r2, #6
 80059ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3301      	adds	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d9de      	bls.n	8005998 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059e8:	461a      	mov	r2, r3
 80059ea:	2303      	movs	r3, #3
 80059ec:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059fc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a0c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e023      	b.n	8005a72 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6919      	ldr	r1, [r3, #16]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4613      	mov	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	440b      	add	r3, r1
 8005a3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2200      	movs	r2, #0
 8005a46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2200      	movs	r2, #0
 8005a52:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2200      	movs	r2, #0
 8005a58:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	3212      	adds	r2, #18
 8005a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d9d8      	bls.n	8005a2a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ab2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ac6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005aca:	bf00      	nop
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b089      	sub	sp, #36	@ 0x24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ae6:	4b89      	ldr	r3, [pc, #548]	@ (8005d0c <HAL_GPIO_Init+0x234>)
 8005ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005aea:	e194      	b.n	8005e16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	2101      	movs	r1, #1
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	fa01 f303 	lsl.w	r3, r1, r3
 8005af8:	4013      	ands	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 8186 	beq.w	8005e10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d005      	beq.n	8005b1c <HAL_GPIO_Init+0x44>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f003 0303 	and.w	r3, r3, #3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d130      	bne.n	8005b7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	2203      	movs	r2, #3
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	4013      	ands	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b52:	2201      	movs	r2, #1
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	091b      	lsrs	r3, r3, #4
 8005b68:	f003 0201 	and.w	r2, r3, #1
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d017      	beq.n	8005bba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	2203      	movs	r2, #3
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d123      	bne.n	8005c0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	08da      	lsrs	r2, r3, #3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3208      	adds	r2, #8
 8005bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	220f      	movs	r2, #15
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	08da      	lsrs	r2, r3, #3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3208      	adds	r2, #8
 8005c08:	69b9      	ldr	r1, [r7, #24]
 8005c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	2203      	movs	r2, #3
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f003 0203 	and.w	r2, r3, #3
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 80e0 	beq.w	8005e10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c50:	4b2f      	ldr	r3, [pc, #188]	@ (8005d10 <HAL_GPIO_Init+0x238>)
 8005c52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c56:	4a2e      	ldr	r2, [pc, #184]	@ (8005d10 <HAL_GPIO_Init+0x238>)
 8005c58:	f043 0302 	orr.w	r3, r3, #2
 8005c5c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005c60:	4b2b      	ldr	r3, [pc, #172]	@ (8005d10 <HAL_GPIO_Init+0x238>)
 8005c62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c6e:	4a29      	ldr	r2, [pc, #164]	@ (8005d14 <HAL_GPIO_Init+0x23c>)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	089b      	lsrs	r3, r3, #2
 8005c74:	3302      	adds	r3, #2
 8005c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	220f      	movs	r2, #15
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	43db      	mvns	r3, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a20      	ldr	r2, [pc, #128]	@ (8005d18 <HAL_GPIO_Init+0x240>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d052      	beq.n	8005d40 <HAL_GPIO_Init+0x268>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8005d1c <HAL_GPIO_Init+0x244>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d031      	beq.n	8005d06 <HAL_GPIO_Init+0x22e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8005d20 <HAL_GPIO_Init+0x248>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d02b      	beq.n	8005d02 <HAL_GPIO_Init+0x22a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a1d      	ldr	r2, [pc, #116]	@ (8005d24 <HAL_GPIO_Init+0x24c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d025      	beq.n	8005cfe <HAL_GPIO_Init+0x226>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d28 <HAL_GPIO_Init+0x250>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01f      	beq.n	8005cfa <HAL_GPIO_Init+0x222>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <HAL_GPIO_Init+0x254>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d019      	beq.n	8005cf6 <HAL_GPIO_Init+0x21e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d30 <HAL_GPIO_Init+0x258>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_GPIO_Init+0x21a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <HAL_GPIO_Init+0x25c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00d      	beq.n	8005cee <HAL_GPIO_Init+0x216>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <HAL_GPIO_Init+0x260>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d007      	beq.n	8005cea <HAL_GPIO_Init+0x212>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a17      	ldr	r2, [pc, #92]	@ (8005d3c <HAL_GPIO_Init+0x264>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <HAL_GPIO_Init+0x20e>
 8005ce2:	2309      	movs	r3, #9
 8005ce4:	e02d      	b.n	8005d42 <HAL_GPIO_Init+0x26a>
 8005ce6:	230a      	movs	r3, #10
 8005ce8:	e02b      	b.n	8005d42 <HAL_GPIO_Init+0x26a>
 8005cea:	2308      	movs	r3, #8
 8005cec:	e029      	b.n	8005d42 <HAL_GPIO_Init+0x26a>
 8005cee:	2307      	movs	r3, #7
 8005cf0:	e027      	b.n	8005d42 <HAL_GPIO_Init+0x26a>
 8005cf2:	2306      	movs	r3, #6
 8005cf4:	e025      	b.n	8005d42 <HAL_GPIO_Init+0x26a>
 8005cf6:	2305      	movs	r3, #5
 8005cf8:	e023      	b.n	8005d42 <HAL_GPIO_Init+0x26a>
 8005cfa:	2304      	movs	r3, #4
 8005cfc:	e021      	b.n	8005d42 <HAL_GPIO_Init+0x26a>
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e01f      	b.n	8005d42 <HAL_GPIO_Init+0x26a>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e01d      	b.n	8005d42 <HAL_GPIO_Init+0x26a>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e01b      	b.n	8005d42 <HAL_GPIO_Init+0x26a>
 8005d0a:	bf00      	nop
 8005d0c:	58000080 	.word	0x58000080
 8005d10:	58024400 	.word	0x58024400
 8005d14:	58000400 	.word	0x58000400
 8005d18:	58020000 	.word	0x58020000
 8005d1c:	58020400 	.word	0x58020400
 8005d20:	58020800 	.word	0x58020800
 8005d24:	58020c00 	.word	0x58020c00
 8005d28:	58021000 	.word	0x58021000
 8005d2c:	58021400 	.word	0x58021400
 8005d30:	58021800 	.word	0x58021800
 8005d34:	58021c00 	.word	0x58021c00
 8005d38:	58022000 	.word	0x58022000
 8005d3c:	58022400 	.word	0x58022400
 8005d40:	2300      	movs	r3, #0
 8005d42:	69fa      	ldr	r2, [r7, #28]
 8005d44:	f002 0203 	and.w	r2, r2, #3
 8005d48:	0092      	lsls	r2, r2, #2
 8005d4a:	4093      	lsls	r3, r2
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d52:	4938      	ldr	r1, [pc, #224]	@ (8005e34 <HAL_GPIO_Init+0x35c>)
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	089b      	lsrs	r3, r3, #2
 8005d58:	3302      	adds	r3, #2
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005db4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	43db      	mvns	r3, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	4013      	ands	r3, r2
 8005df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	3301      	adds	r3, #1
 8005e14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f47f ae63 	bne.w	8005aec <HAL_GPIO_Init+0x14>
  }
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	3724      	adds	r7, #36	@ 0x24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	58000400 	.word	0x58000400

08005e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
 8005e44:	4613      	mov	r3, r2
 8005e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e48:	787b      	ldrb	r3, [r7, #1]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e4e:	887a      	ldrh	r2, [r7, #2]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e54:	e003      	b.n	8005e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e56:	887b      	ldrh	r3, [r7, #2]
 8005e58:	041a      	lsls	r2, r3, #16
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	619a      	str	r2, [r3, #24]
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af02      	add	r7, sp, #8
 8005e70:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0fe      	b.n	800607a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d106      	bne.n	8005e96 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7fc f97f 	bl	8002194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2203      	movs	r2, #3
 8005e9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f005 fbb8 	bl	800b618 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	7c1a      	ldrb	r2, [r3, #16]
 8005eb0:	f88d 2000 	strb.w	r2, [sp]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eb8:	f005 fb3c 	bl	800b534 <USB_CoreInit>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e0d5      	b.n	800607a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f005 fbb0 	bl	800b63a <USB_SetCurrentMode>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0c6      	b.n	800607a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eec:	2300      	movs	r3, #0
 8005eee:	73fb      	strb	r3, [r7, #15]
 8005ef0:	e04a      	b.n	8005f88 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ef2:	7bfa      	ldrb	r2, [r7, #15]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3315      	adds	r3, #21
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f06:	7bfa      	ldrb	r2, [r7, #15]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3314      	adds	r3, #20
 8005f16:	7bfa      	ldrb	r2, [r7, #15]
 8005f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f1a:	7bfa      	ldrb	r2, [r7, #15]
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	b298      	uxth	r0, r3
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	332e      	adds	r3, #46	@ 0x2e
 8005f2e:	4602      	mov	r2, r0
 8005f30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f32:	7bfa      	ldrb	r2, [r7, #15]
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	3318      	adds	r3, #24
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f46:	7bfa      	ldrb	r2, [r7, #15]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	331c      	adds	r3, #28
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f5a:	7bfa      	ldrb	r2, [r7, #15]
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	3320      	adds	r3, #32
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f6e:	7bfa      	ldrb	r2, [r7, #15]
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3324      	adds	r3, #36	@ 0x24
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	3301      	adds	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	791b      	ldrb	r3, [r3, #4]
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d3af      	bcc.n	8005ef2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f92:	2300      	movs	r3, #0
 8005f94:	73fb      	strb	r3, [r7, #15]
 8005f96:	e044      	b.n	8006022 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f98:	7bfa      	ldrb	r2, [r7, #15]
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005fae:	7bfa      	ldrb	r2, [r7, #15]
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005fc0:	7bfa      	ldrb	r2, [r7, #15]
 8005fc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005fc4:	7bfa      	ldrb	r2, [r7, #15]
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005fda:	7bfa      	ldrb	r2, [r7, #15]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ff0:	7bfa      	ldrb	r2, [r7, #15]
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006006:	7bfa      	ldrb	r2, [r7, #15]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	3301      	adds	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	791b      	ldrb	r3, [r3, #4]
 8006026:	7bfa      	ldrb	r2, [r7, #15]
 8006028:	429a      	cmp	r2, r3
 800602a:	d3b5      	bcc.n	8005f98 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	7c1a      	ldrb	r2, [r3, #16]
 8006034:	f88d 2000 	strb.w	r2, [sp]
 8006038:	3304      	adds	r3, #4
 800603a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800603c:	f005 fb4a 	bl	800b6d4 <USB_DevInit>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2202      	movs	r2, #2
 800604a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e013      	b.n	800607a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	7b1b      	ldrb	r3, [r3, #12]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d102      	bne.n	800606e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f80b 	bl	8006084 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f005 fd05 	bl	800ba82 <USB_DevDisconnect>

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	10000003 	.word	0x10000003

080060cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80060d4:	4b19      	ldr	r3, [pc, #100]	@ (800613c <HAL_PWREx_ConfigSupply+0x70>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b04      	cmp	r3, #4
 80060de:	d00a      	beq.n	80060f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80060e0:	4b16      	ldr	r3, [pc, #88]	@ (800613c <HAL_PWREx_ConfigSupply+0x70>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d001      	beq.n	80060f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e01f      	b.n	8006132 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e01d      	b.n	8006132 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80060f6:	4b11      	ldr	r3, [pc, #68]	@ (800613c <HAL_PWREx_ConfigSupply+0x70>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f023 0207 	bic.w	r2, r3, #7
 80060fe:	490f      	ldr	r1, [pc, #60]	@ (800613c <HAL_PWREx_ConfigSupply+0x70>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4313      	orrs	r3, r2
 8006104:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006106:	f7fc f93b 	bl	8002380 <HAL_GetTick>
 800610a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800610c:	e009      	b.n	8006122 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800610e:	f7fc f937 	bl	8002380 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800611c:	d901      	bls.n	8006122 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e007      	b.n	8006132 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006122:	4b06      	ldr	r3, [pc, #24]	@ (800613c <HAL_PWREx_ConfigSupply+0x70>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800612a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800612e:	d1ee      	bne.n	800610e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	58024800 	.word	0x58024800

08006140 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006144:	4b05      	ldr	r3, [pc, #20]	@ (800615c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4a04      	ldr	r2, [pc, #16]	@ (800615c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800614a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800614e:	60d3      	str	r3, [r2, #12]
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	58024800 	.word	0x58024800

08006160 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08c      	sub	sp, #48	@ 0x30
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f000 bc48 	b.w	8006a04 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8088 	beq.w	8006292 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006182:	4b99      	ldr	r3, [pc, #612]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800618a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800618c:	4b96      	ldr	r3, [pc, #600]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006194:	2b10      	cmp	r3, #16
 8006196:	d007      	beq.n	80061a8 <HAL_RCC_OscConfig+0x48>
 8006198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619a:	2b18      	cmp	r3, #24
 800619c:	d111      	bne.n	80061c2 <HAL_RCC_OscConfig+0x62>
 800619e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d10c      	bne.n	80061c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a8:	4b8f      	ldr	r3, [pc, #572]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d06d      	beq.n	8006290 <HAL_RCC_OscConfig+0x130>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d169      	bne.n	8006290 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f000 bc21 	b.w	8006a04 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ca:	d106      	bne.n	80061da <HAL_RCC_OscConfig+0x7a>
 80061cc:	4b86      	ldr	r3, [pc, #536]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a85      	ldr	r2, [pc, #532]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80061d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	e02e      	b.n	8006238 <HAL_RCC_OscConfig+0xd8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10c      	bne.n	80061fc <HAL_RCC_OscConfig+0x9c>
 80061e2:	4b81      	ldr	r3, [pc, #516]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a80      	ldr	r2, [pc, #512]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80061e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	4b7e      	ldr	r3, [pc, #504]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a7d      	ldr	r2, [pc, #500]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80061f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e01d      	b.n	8006238 <HAL_RCC_OscConfig+0xd8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006204:	d10c      	bne.n	8006220 <HAL_RCC_OscConfig+0xc0>
 8006206:	4b78      	ldr	r3, [pc, #480]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a77      	ldr	r2, [pc, #476]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 800620c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	4b75      	ldr	r3, [pc, #468]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a74      	ldr	r2, [pc, #464]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	e00b      	b.n	8006238 <HAL_RCC_OscConfig+0xd8>
 8006220:	4b71      	ldr	r3, [pc, #452]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a70      	ldr	r2, [pc, #448]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	4b6e      	ldr	r3, [pc, #440]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a6d      	ldr	r2, [pc, #436]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d013      	beq.n	8006268 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006240:	f7fc f89e 	bl	8002380 <HAL_GetTick>
 8006244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006248:	f7fc f89a 	bl	8002380 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b64      	cmp	r3, #100	@ 0x64
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e3d4      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800625a:	4b63      	ldr	r3, [pc, #396]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0xe8>
 8006266:	e014      	b.n	8006292 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fc f88a 	bl	8002380 <HAL_GetTick>
 800626c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006270:	f7fc f886 	bl	8002380 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b64      	cmp	r3, #100	@ 0x64
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e3c0      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006282:	4b59      	ldr	r3, [pc, #356]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f0      	bne.n	8006270 <HAL_RCC_OscConfig+0x110>
 800628e:	e000      	b.n	8006292 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 80ca 	beq.w	8006434 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062a0:	4b51      	ldr	r3, [pc, #324]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062aa:	4b4f      	ldr	r3, [pc, #316]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80062ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <HAL_RCC_OscConfig+0x166>
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	2b18      	cmp	r3, #24
 80062ba:	d156      	bne.n	800636a <HAL_RCC_OscConfig+0x20a>
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d151      	bne.n	800636a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062c6:	4b48      	ldr	r3, [pc, #288]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <HAL_RCC_OscConfig+0x17e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e392      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062de:	4b42      	ldr	r3, [pc, #264]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f023 0219 	bic.w	r2, r3, #25
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	493f      	ldr	r1, [pc, #252]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7fc f846 	bl	8002380 <HAL_GetTick>
 80062f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062f8:	f7fc f842 	bl	8002380 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e37c      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800630a:	4b37      	ldr	r3, [pc, #220]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f0      	beq.n	80062f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006316:	f7fc f863 	bl	80023e0 <HAL_GetREVID>
 800631a:	4603      	mov	r3, r0
 800631c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006320:	4293      	cmp	r3, r2
 8006322:	d817      	bhi.n	8006354 <HAL_RCC_OscConfig+0x1f4>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	2b40      	cmp	r3, #64	@ 0x40
 800632a:	d108      	bne.n	800633e <HAL_RCC_OscConfig+0x1de>
 800632c:	4b2e      	ldr	r3, [pc, #184]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006334:	4a2c      	ldr	r2, [pc, #176]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800633a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800633c:	e07a      	b.n	8006434 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800633e:	4b2a      	ldr	r3, [pc, #168]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	031b      	lsls	r3, r3, #12
 800634c:	4926      	ldr	r1, [pc, #152]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 800634e:	4313      	orrs	r3, r2
 8006350:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006352:	e06f      	b.n	8006434 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006354:	4b24      	ldr	r3, [pc, #144]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	061b      	lsls	r3, r3, #24
 8006362:	4921      	ldr	r1, [pc, #132]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006364:	4313      	orrs	r3, r2
 8006366:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006368:	e064      	b.n	8006434 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d047      	beq.n	8006402 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006372:	4b1d      	ldr	r3, [pc, #116]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f023 0219 	bic.w	r2, r3, #25
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	491a      	ldr	r1, [pc, #104]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 8006380:	4313      	orrs	r3, r2
 8006382:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fb fffc 	bl	8002380 <HAL_GetTick>
 8006388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800638c:	f7fb fff8 	bl	8002380 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e332      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800639e:	4b12      	ldr	r3, [pc, #72]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063aa:	f7fc f819 	bl	80023e0 <HAL_GetREVID>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d819      	bhi.n	80063ec <HAL_RCC_OscConfig+0x28c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b40      	cmp	r3, #64	@ 0x40
 80063be:	d108      	bne.n	80063d2 <HAL_RCC_OscConfig+0x272>
 80063c0:	4b09      	ldr	r3, [pc, #36]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80063c8:	4a07      	ldr	r2, [pc, #28]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80063ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ce:	6053      	str	r3, [r2, #4]
 80063d0:	e030      	b.n	8006434 <HAL_RCC_OscConfig+0x2d4>
 80063d2:	4b05      	ldr	r3, [pc, #20]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	031b      	lsls	r3, r3, #12
 80063e0:	4901      	ldr	r1, [pc, #4]	@ (80063e8 <HAL_RCC_OscConfig+0x288>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	604b      	str	r3, [r1, #4]
 80063e6:	e025      	b.n	8006434 <HAL_RCC_OscConfig+0x2d4>
 80063e8:	58024400 	.word	0x58024400
 80063ec:	4b9a      	ldr	r3, [pc, #616]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	061b      	lsls	r3, r3, #24
 80063fa:	4997      	ldr	r1, [pc, #604]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	604b      	str	r3, [r1, #4]
 8006400:	e018      	b.n	8006434 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006402:	4b95      	ldr	r3, [pc, #596]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a94      	ldr	r2, [pc, #592]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640e:	f7fb ffb7 	bl	8002380 <HAL_GetTick>
 8006412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006416:	f7fb ffb3 	bl	8002380 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e2ed      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006428:	4b8b      	ldr	r3, [pc, #556]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f0      	bne.n	8006416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0310 	and.w	r3, r3, #16
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80a9 	beq.w	8006594 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006442:	4b85      	ldr	r3, [pc, #532]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800644a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800644c:	4b82      	ldr	r3, [pc, #520]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 800644e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006450:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b08      	cmp	r3, #8
 8006456:	d007      	beq.n	8006468 <HAL_RCC_OscConfig+0x308>
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	2b18      	cmp	r3, #24
 800645c:	d13a      	bne.n	80064d4 <HAL_RCC_OscConfig+0x374>
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d135      	bne.n	80064d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006468:	4b7b      	ldr	r3, [pc, #492]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_RCC_OscConfig+0x320>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	2b80      	cmp	r3, #128	@ 0x80
 800647a:	d001      	beq.n	8006480 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e2c1      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006480:	f7fb ffae 	bl	80023e0 <HAL_GetREVID>
 8006484:	4603      	mov	r3, r0
 8006486:	f241 0203 	movw	r2, #4099	@ 0x1003
 800648a:	4293      	cmp	r3, r2
 800648c:	d817      	bhi.n	80064be <HAL_RCC_OscConfig+0x35e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	2b20      	cmp	r3, #32
 8006494:	d108      	bne.n	80064a8 <HAL_RCC_OscConfig+0x348>
 8006496:	4b70      	ldr	r3, [pc, #448]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800649e:	4a6e      	ldr	r2, [pc, #440]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80064a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064a6:	e075      	b.n	8006594 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064a8:	4b6b      	ldr	r3, [pc, #428]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	069b      	lsls	r3, r3, #26
 80064b6:	4968      	ldr	r1, [pc, #416]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064bc:	e06a      	b.n	8006594 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064be:	4b66      	ldr	r3, [pc, #408]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	061b      	lsls	r3, r3, #24
 80064cc:	4962      	ldr	r1, [pc, #392]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064d2:	e05f      	b.n	8006594 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d042      	beq.n	8006562 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80064dc:	4b5e      	ldr	r3, [pc, #376]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a5d      	ldr	r2, [pc, #372]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80064e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e8:	f7fb ff4a 	bl	8002380 <HAL_GetTick>
 80064ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064f0:	f7fb ff46 	bl	8002380 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e280      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006502:	4b55      	ldr	r3, [pc, #340]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0f0      	beq.n	80064f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800650e:	f7fb ff67 	bl	80023e0 <HAL_GetREVID>
 8006512:	4603      	mov	r3, r0
 8006514:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006518:	4293      	cmp	r3, r2
 800651a:	d817      	bhi.n	800654c <HAL_RCC_OscConfig+0x3ec>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	2b20      	cmp	r3, #32
 8006522:	d108      	bne.n	8006536 <HAL_RCC_OscConfig+0x3d6>
 8006524:	4b4c      	ldr	r3, [pc, #304]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800652c:	4a4a      	ldr	r2, [pc, #296]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 800652e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006532:	6053      	str	r3, [r2, #4]
 8006534:	e02e      	b.n	8006594 <HAL_RCC_OscConfig+0x434>
 8006536:	4b48      	ldr	r3, [pc, #288]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	069b      	lsls	r3, r3, #26
 8006544:	4944      	ldr	r1, [pc, #272]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006546:	4313      	orrs	r3, r2
 8006548:	604b      	str	r3, [r1, #4]
 800654a:	e023      	b.n	8006594 <HAL_RCC_OscConfig+0x434>
 800654c:	4b42      	ldr	r3, [pc, #264]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	061b      	lsls	r3, r3, #24
 800655a:	493f      	ldr	r1, [pc, #252]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 800655c:	4313      	orrs	r3, r2
 800655e:	60cb      	str	r3, [r1, #12]
 8006560:	e018      	b.n	8006594 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006562:	4b3d      	ldr	r3, [pc, #244]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a3c      	ldr	r2, [pc, #240]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800656c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656e:	f7fb ff07 	bl	8002380 <HAL_GetTick>
 8006572:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006576:	f7fb ff03 	bl	8002380 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e23d      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006588:	4b33      	ldr	r3, [pc, #204]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1f0      	bne.n	8006576 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b00      	cmp	r3, #0
 800659e:	d036      	beq.n	800660e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d019      	beq.n	80065dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80065aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b4:	f7fb fee4 	bl	8002380 <HAL_GetTick>
 80065b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065bc:	f7fb fee0 	bl	8002380 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e21a      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065ce:	4b22      	ldr	r3, [pc, #136]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80065d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f0      	beq.n	80065bc <HAL_RCC_OscConfig+0x45c>
 80065da:	e018      	b.n	800660e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80065de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e8:	f7fb feca 	bl	8002380 <HAL_GetTick>
 80065ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065f0:	f7fb fec6 	bl	8002380 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e200      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006602:	4b15      	ldr	r3, [pc, #84]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d039      	beq.n	800668e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01c      	beq.n	800665c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006622:	4b0d      	ldr	r3, [pc, #52]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a0c      	ldr	r2, [pc, #48]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 8006628:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800662c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800662e:	f7fb fea7 	bl	8002380 <HAL_GetTick>
 8006632:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006634:	e008      	b.n	8006648 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006636:	f7fb fea3 	bl	8002380 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e1dd      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006648:	4b03      	ldr	r3, [pc, #12]	@ (8006658 <HAL_RCC_OscConfig+0x4f8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0f0      	beq.n	8006636 <HAL_RCC_OscConfig+0x4d6>
 8006654:	e01b      	b.n	800668e <HAL_RCC_OscConfig+0x52e>
 8006656:	bf00      	nop
 8006658:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800665c:	4b9b      	ldr	r3, [pc, #620]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a9a      	ldr	r2, [pc, #616]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006666:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006668:	f7fb fe8a 	bl	8002380 <HAL_GetTick>
 800666c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006670:	f7fb fe86 	bl	8002380 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e1c0      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006682:	4b92      	ldr	r3, [pc, #584]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f0      	bne.n	8006670 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 8081 	beq.w	800679e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800669c:	4b8c      	ldr	r3, [pc, #560]	@ (80068d0 <HAL_RCC_OscConfig+0x770>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a8b      	ldr	r2, [pc, #556]	@ (80068d0 <HAL_RCC_OscConfig+0x770>)
 80066a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066a8:	f7fb fe6a 	bl	8002380 <HAL_GetTick>
 80066ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b0:	f7fb fe66 	bl	8002380 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b64      	cmp	r3, #100	@ 0x64
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e1a0      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066c2:	4b83      	ldr	r3, [pc, #524]	@ (80068d0 <HAL_RCC_OscConfig+0x770>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f0      	beq.n	80066b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d106      	bne.n	80066e4 <HAL_RCC_OscConfig+0x584>
 80066d6:	4b7d      	ldr	r3, [pc, #500]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80066d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066da:	4a7c      	ldr	r2, [pc, #496]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80066e2:	e02d      	b.n	8006740 <HAL_RCC_OscConfig+0x5e0>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10c      	bne.n	8006706 <HAL_RCC_OscConfig+0x5a6>
 80066ec:	4b77      	ldr	r3, [pc, #476]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80066ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f0:	4a76      	ldr	r2, [pc, #472]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066f8:	4b74      	ldr	r3, [pc, #464]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fc:	4a73      	ldr	r2, [pc, #460]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80066fe:	f023 0304 	bic.w	r3, r3, #4
 8006702:	6713      	str	r3, [r2, #112]	@ 0x70
 8006704:	e01c      	b.n	8006740 <HAL_RCC_OscConfig+0x5e0>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b05      	cmp	r3, #5
 800670c:	d10c      	bne.n	8006728 <HAL_RCC_OscConfig+0x5c8>
 800670e:	4b6f      	ldr	r3, [pc, #444]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006712:	4a6e      	ldr	r2, [pc, #440]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006714:	f043 0304 	orr.w	r3, r3, #4
 8006718:	6713      	str	r3, [r2, #112]	@ 0x70
 800671a:	4b6c      	ldr	r3, [pc, #432]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 800671c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671e:	4a6b      	ldr	r2, [pc, #428]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006720:	f043 0301 	orr.w	r3, r3, #1
 8006724:	6713      	str	r3, [r2, #112]	@ 0x70
 8006726:	e00b      	b.n	8006740 <HAL_RCC_OscConfig+0x5e0>
 8006728:	4b68      	ldr	r3, [pc, #416]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672c:	4a67      	ldr	r2, [pc, #412]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	6713      	str	r3, [r2, #112]	@ 0x70
 8006734:	4b65      	ldr	r3, [pc, #404]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006738:	4a64      	ldr	r2, [pc, #400]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 800673a:	f023 0304 	bic.w	r3, r3, #4
 800673e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d015      	beq.n	8006774 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006748:	f7fb fe1a 	bl	8002380 <HAL_GetTick>
 800674c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800674e:	e00a      	b.n	8006766 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006750:	f7fb fe16 	bl	8002380 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675e:	4293      	cmp	r3, r2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e14e      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006766:	4b59      	ldr	r3, [pc, #356]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0ee      	beq.n	8006750 <HAL_RCC_OscConfig+0x5f0>
 8006772:	e014      	b.n	800679e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fb fe04 	bl	8002380 <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800677a:	e00a      	b.n	8006792 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800677c:	f7fb fe00 	bl	8002380 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e138      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006792:	4b4e      	ldr	r3, [pc, #312]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1ee      	bne.n	800677c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 812d 	beq.w	8006a02 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80067a8:	4b48      	ldr	r3, [pc, #288]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067b0:	2b18      	cmp	r3, #24
 80067b2:	f000 80bd 	beq.w	8006930 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	f040 809e 	bne.w	80068fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067c0:	4b42      	ldr	r3, [pc, #264]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a41      	ldr	r2, [pc, #260]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80067c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fb fdd8 	bl	8002380 <HAL_GetTick>
 80067d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d4:	f7fb fdd4 	bl	8002380 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e10e      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067e6:	4b39      	ldr	r3, [pc, #228]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f0      	bne.n	80067d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067f2:	4b36      	ldr	r3, [pc, #216]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80067f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067f6:	4b37      	ldr	r3, [pc, #220]	@ (80068d4 <HAL_RCC_OscConfig+0x774>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006802:	0112      	lsls	r2, r2, #4
 8006804:	430a      	orrs	r2, r1
 8006806:	4931      	ldr	r1, [pc, #196]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006808:	4313      	orrs	r3, r2
 800680a:	628b      	str	r3, [r1, #40]	@ 0x28
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006810:	3b01      	subs	r3, #1
 8006812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800681a:	3b01      	subs	r3, #1
 800681c:	025b      	lsls	r3, r3, #9
 800681e:	b29b      	uxth	r3, r3
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006826:	3b01      	subs	r3, #1
 8006828:	041b      	lsls	r3, r3, #16
 800682a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006834:	3b01      	subs	r3, #1
 8006836:	061b      	lsls	r3, r3, #24
 8006838:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800683c:	4923      	ldr	r1, [pc, #140]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 800683e:	4313      	orrs	r3, r2
 8006840:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006842:	4b22      	ldr	r3, [pc, #136]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006846:	4a21      	ldr	r2, [pc, #132]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006848:	f023 0301 	bic.w	r3, r3, #1
 800684c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800684e:	4b1f      	ldr	r3, [pc, #124]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006852:	4b21      	ldr	r3, [pc, #132]	@ (80068d8 <HAL_RCC_OscConfig+0x778>)
 8006854:	4013      	ands	r3, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800685a:	00d2      	lsls	r2, r2, #3
 800685c:	491b      	ldr	r1, [pc, #108]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 800685e:	4313      	orrs	r3, r2
 8006860:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006862:	4b1a      	ldr	r3, [pc, #104]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	f023 020c 	bic.w	r2, r3, #12
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	4917      	ldr	r1, [pc, #92]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006870:	4313      	orrs	r3, r2
 8006872:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006874:	4b15      	ldr	r3, [pc, #84]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006878:	f023 0202 	bic.w	r2, r3, #2
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006880:	4912      	ldr	r1, [pc, #72]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006882:	4313      	orrs	r3, r2
 8006884:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006886:	4b11      	ldr	r3, [pc, #68]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688a:	4a10      	ldr	r2, [pc, #64]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 800688c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006890:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006892:	4b0e      	ldr	r3, [pc, #56]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	4a0d      	ldr	r2, [pc, #52]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 8006898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800689c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a2:	4a0a      	ldr	r2, [pc, #40]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80068a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80068aa:	4b08      	ldr	r3, [pc, #32]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80068ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ae:	4a07      	ldr	r2, [pc, #28]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068b6:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a04      	ldr	r2, [pc, #16]	@ (80068cc <HAL_RCC_OscConfig+0x76c>)
 80068bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c2:	f7fb fd5d 	bl	8002380 <HAL_GetTick>
 80068c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068c8:	e011      	b.n	80068ee <HAL_RCC_OscConfig+0x78e>
 80068ca:	bf00      	nop
 80068cc:	58024400 	.word	0x58024400
 80068d0:	58024800 	.word	0x58024800
 80068d4:	fffffc0c 	.word	0xfffffc0c
 80068d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068dc:	f7fb fd50 	bl	8002380 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e08a      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068ee:	4b47      	ldr	r3, [pc, #284]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0f0      	beq.n	80068dc <HAL_RCC_OscConfig+0x77c>
 80068fa:	e082      	b.n	8006a02 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068fc:	4b43      	ldr	r3, [pc, #268]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a42      	ldr	r2, [pc, #264]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 8006902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006908:	f7fb fd3a 	bl	8002380 <HAL_GetTick>
 800690c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006910:	f7fb fd36 	bl	8002380 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e070      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006922:	4b3a      	ldr	r3, [pc, #232]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1f0      	bne.n	8006910 <HAL_RCC_OscConfig+0x7b0>
 800692e:	e068      	b.n	8006a02 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006930:	4b36      	ldr	r3, [pc, #216]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 8006932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006934:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006936:	4b35      	ldr	r3, [pc, #212]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 8006938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006940:	2b01      	cmp	r3, #1
 8006942:	d031      	beq.n	80069a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f003 0203 	and.w	r2, r3, #3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800694e:	429a      	cmp	r2, r3
 8006950:	d12a      	bne.n	80069a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	091b      	lsrs	r3, r3, #4
 8006956:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695e:	429a      	cmp	r2, r3
 8006960:	d122      	bne.n	80069a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800696e:	429a      	cmp	r2, r3
 8006970:	d11a      	bne.n	80069a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	0a5b      	lsrs	r3, r3, #9
 8006976:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800697e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006980:	429a      	cmp	r2, r3
 8006982:	d111      	bne.n	80069a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	0c1b      	lsrs	r3, r3, #16
 8006988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006990:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006992:	429a      	cmp	r2, r3
 8006994:	d108      	bne.n	80069a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	0e1b      	lsrs	r3, r3, #24
 800699a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e02b      	b.n	8006a04 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80069ac:	4b17      	ldr	r3, [pc, #92]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 80069ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b0:	08db      	lsrs	r3, r3, #3
 80069b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d01f      	beq.n	8006a02 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80069c2:	4b12      	ldr	r3, [pc, #72]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	4a11      	ldr	r2, [pc, #68]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069ce:	f7fb fcd7 	bl	8002380 <HAL_GetTick>
 80069d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80069d4:	bf00      	nop
 80069d6:	f7fb fcd3 	bl	8002380 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	4293      	cmp	r3, r2
 80069e0:	d0f9      	beq.n	80069d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069e2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 80069e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006a10 <HAL_RCC_OscConfig+0x8b0>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069ee:	00d2      	lsls	r2, r2, #3
 80069f0:	4906      	ldr	r1, [pc, #24]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80069f6:	4b05      	ldr	r3, [pc, #20]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	4a04      	ldr	r2, [pc, #16]	@ (8006a0c <HAL_RCC_OscConfig+0x8ac>)
 80069fc:	f043 0301 	orr.w	r3, r3, #1
 8006a00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3730      	adds	r7, #48	@ 0x30
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	ffff0007 	.word	0xffff0007

08006a14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e19c      	b.n	8006d62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a28:	4b8a      	ldr	r3, [pc, #552]	@ (8006c54 <HAL_RCC_ClockConfig+0x240>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 030f 	and.w	r3, r3, #15
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d910      	bls.n	8006a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a36:	4b87      	ldr	r3, [pc, #540]	@ (8006c54 <HAL_RCC_ClockConfig+0x240>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f023 020f 	bic.w	r2, r3, #15
 8006a3e:	4985      	ldr	r1, [pc, #532]	@ (8006c54 <HAL_RCC_ClockConfig+0x240>)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a46:	4b83      	ldr	r3, [pc, #524]	@ (8006c54 <HAL_RCC_ClockConfig+0x240>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d001      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e184      	b.n	8006d62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d010      	beq.n	8006a86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	4b7b      	ldr	r3, [pc, #492]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d908      	bls.n	8006a86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a74:	4b78      	ldr	r3, [pc, #480]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	4975      	ldr	r1, [pc, #468]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d010      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	4b70      	ldr	r3, [pc, #448]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d908      	bls.n	8006ab4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	496a      	ldr	r1, [pc, #424]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d010      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	4b64      	ldr	r3, [pc, #400]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d908      	bls.n	8006ae2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ad0:	4b61      	ldr	r3, [pc, #388]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	495e      	ldr	r1, [pc, #376]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d010      	beq.n	8006b10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69da      	ldr	r2, [r3, #28]
 8006af2:	4b59      	ldr	r3, [pc, #356]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d908      	bls.n	8006b10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006afe:	4b56      	ldr	r3, [pc, #344]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	4953      	ldr	r1, [pc, #332]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d010      	beq.n	8006b3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	4b4d      	ldr	r3, [pc, #308]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d908      	bls.n	8006b3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f023 020f 	bic.w	r2, r3, #15
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	4947      	ldr	r1, [pc, #284]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d055      	beq.n	8006bf6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b4a:	4b43      	ldr	r3, [pc, #268]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	4940      	ldr	r1, [pc, #256]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d107      	bne.n	8006b74 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b64:	4b3c      	ldr	r3, [pc, #240]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d121      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0f6      	b.n	8006d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d107      	bne.n	8006b8c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b7c:	4b36      	ldr	r3, [pc, #216]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d115      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e0ea      	b.n	8006d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b94:	4b30      	ldr	r3, [pc, #192]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e0de      	b.n	8006d62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e0d6      	b.n	8006d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bb4:	4b28      	ldr	r3, [pc, #160]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	f023 0207 	bic.w	r2, r3, #7
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4925      	ldr	r1, [pc, #148]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc6:	f7fb fbdb 	bl	8002380 <HAL_GetTick>
 8006bca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bcc:	e00a      	b.n	8006be4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bce:	f7fb fbd7 	bl	8002380 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e0be      	b.n	8006d62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d1eb      	bne.n	8006bce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d010      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	4b14      	ldr	r3, [pc, #80]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d208      	bcs.n	8006c24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c12:	4b11      	ldr	r3, [pc, #68]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	f023 020f 	bic.w	r2, r3, #15
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	490e      	ldr	r1, [pc, #56]	@ (8006c58 <HAL_RCC_ClockConfig+0x244>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c24:	4b0b      	ldr	r3, [pc, #44]	@ (8006c54 <HAL_RCC_ClockConfig+0x240>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d214      	bcs.n	8006c5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c32:	4b08      	ldr	r3, [pc, #32]	@ (8006c54 <HAL_RCC_ClockConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f023 020f 	bic.w	r2, r3, #15
 8006c3a:	4906      	ldr	r1, [pc, #24]	@ (8006c54 <HAL_RCC_ClockConfig+0x240>)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c42:	4b04      	ldr	r3, [pc, #16]	@ (8006c54 <HAL_RCC_ClockConfig+0x240>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d005      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e086      	b.n	8006d62 <HAL_RCC_ClockConfig+0x34e>
 8006c54:	52002000 	.word	0x52002000
 8006c58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d010      	beq.n	8006c8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d208      	bcs.n	8006c8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c78:	4b3c      	ldr	r3, [pc, #240]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	4939      	ldr	r1, [pc, #228]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d010      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695a      	ldr	r2, [r3, #20]
 8006c9a:	4b34      	ldr	r3, [pc, #208]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d208      	bcs.n	8006cb8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ca6:	4b31      	ldr	r3, [pc, #196]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	492e      	ldr	r1, [pc, #184]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d010      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	699a      	ldr	r2, [r3, #24]
 8006cc8:	4b28      	ldr	r3, [pc, #160]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d208      	bcs.n	8006ce6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cd4:	4b25      	ldr	r3, [pc, #148]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	4922      	ldr	r1, [pc, #136]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d010      	beq.n	8006d14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69da      	ldr	r2, [r3, #28]
 8006cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d208      	bcs.n	8006d14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d02:	4b1a      	ldr	r3, [pc, #104]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	4917      	ldr	r1, [pc, #92]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d14:	f000 f834 	bl	8006d80 <HAL_RCC_GetSysClockFreq>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	4b14      	ldr	r3, [pc, #80]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	4912      	ldr	r1, [pc, #72]	@ (8006d70 <HAL_RCC_ClockConfig+0x35c>)
 8006d26:	5ccb      	ldrb	r3, [r1, r3]
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d32:	4b0e      	ldr	r3, [pc, #56]	@ (8006d6c <HAL_RCC_ClockConfig+0x358>)
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	4a0d      	ldr	r2, [pc, #52]	@ (8006d70 <HAL_RCC_ClockConfig+0x35c>)
 8006d3c:	5cd3      	ldrb	r3, [r2, r3]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	fa22 f303 	lsr.w	r3, r2, r3
 8006d48:	4a0a      	ldr	r2, [pc, #40]	@ (8006d74 <HAL_RCC_ClockConfig+0x360>)
 8006d4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d78 <HAL_RCC_ClockConfig+0x364>)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006d52:	4b0a      	ldr	r3, [pc, #40]	@ (8006d7c <HAL_RCC_ClockConfig+0x368>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa fec8 	bl	8001aec <HAL_InitTick>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	58024400 	.word	0x58024400
 8006d70:	0801eb8c 	.word	0x0801eb8c
 8006d74:	24000008 	.word	0x24000008
 8006d78:	24000004 	.word	0x24000004
 8006d7c:	2400000c 	.word	0x2400000c

08006d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b089      	sub	sp, #36	@ 0x24
 8006d84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d86:	4bb3      	ldr	r3, [pc, #716]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d8e:	2b18      	cmp	r3, #24
 8006d90:	f200 8155 	bhi.w	800703e <HAL_RCC_GetSysClockFreq+0x2be>
 8006d94:	a201      	add	r2, pc, #4	@ (adr r2, 8006d9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006e01 	.word	0x08006e01
 8006da0:	0800703f 	.word	0x0800703f
 8006da4:	0800703f 	.word	0x0800703f
 8006da8:	0800703f 	.word	0x0800703f
 8006dac:	0800703f 	.word	0x0800703f
 8006db0:	0800703f 	.word	0x0800703f
 8006db4:	0800703f 	.word	0x0800703f
 8006db8:	0800703f 	.word	0x0800703f
 8006dbc:	08006e27 	.word	0x08006e27
 8006dc0:	0800703f 	.word	0x0800703f
 8006dc4:	0800703f 	.word	0x0800703f
 8006dc8:	0800703f 	.word	0x0800703f
 8006dcc:	0800703f 	.word	0x0800703f
 8006dd0:	0800703f 	.word	0x0800703f
 8006dd4:	0800703f 	.word	0x0800703f
 8006dd8:	0800703f 	.word	0x0800703f
 8006ddc:	08006e2d 	.word	0x08006e2d
 8006de0:	0800703f 	.word	0x0800703f
 8006de4:	0800703f 	.word	0x0800703f
 8006de8:	0800703f 	.word	0x0800703f
 8006dec:	0800703f 	.word	0x0800703f
 8006df0:	0800703f 	.word	0x0800703f
 8006df4:	0800703f 	.word	0x0800703f
 8006df8:	0800703f 	.word	0x0800703f
 8006dfc:	08006e33 	.word	0x08006e33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e00:	4b94      	ldr	r3, [pc, #592]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d009      	beq.n	8006e20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e0c:	4b91      	ldr	r3, [pc, #580]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	08db      	lsrs	r3, r3, #3
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	4a90      	ldr	r2, [pc, #576]	@ (8007058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006e1e:	e111      	b.n	8007044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e20:	4b8d      	ldr	r3, [pc, #564]	@ (8007058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e22:	61bb      	str	r3, [r7, #24]
      break;
 8006e24:	e10e      	b.n	8007044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006e26:	4b8d      	ldr	r3, [pc, #564]	@ (800705c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e28:	61bb      	str	r3, [r7, #24]
      break;
 8006e2a:	e10b      	b.n	8007044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006e2c:	4b8c      	ldr	r3, [pc, #560]	@ (8007060 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006e2e:	61bb      	str	r3, [r7, #24]
      break;
 8006e30:	e108      	b.n	8007044 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e32:	4b88      	ldr	r3, [pc, #544]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e3c:	4b85      	ldr	r3, [pc, #532]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e48:	4b82      	ldr	r3, [pc, #520]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e52:	4b80      	ldr	r3, [pc, #512]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	08db      	lsrs	r3, r3, #3
 8006e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 80e1 	beq.w	8007038 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	f000 8083 	beq.w	8006f84 <HAL_RCC_GetSysClockFreq+0x204>
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	f200 80a1 	bhi.w	8006fc8 <HAL_RCC_GetSysClockFreq+0x248>
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0x114>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d056      	beq.n	8006f40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e92:	e099      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e94:	4b6f      	ldr	r3, [pc, #444]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d02d      	beq.n	8006efc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ea0:	4b6c      	ldr	r3, [pc, #432]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	4a6b      	ldr	r2, [pc, #428]	@ (8007058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eca:	4b62      	ldr	r3, [pc, #392]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ede:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006efa:	e087      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007068 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0e:	4b51      	ldr	r3, [pc, #324]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f22:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f3e:	e065      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800706c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f52:	4b40      	ldr	r3, [pc, #256]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f66:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f82:	e043      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007070 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f96:	4b2f      	ldr	r3, [pc, #188]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006faa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fc6:	e021      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800706c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fda:	4b1e      	ldr	r3, [pc, #120]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800700a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800700c:	4b11      	ldr	r3, [pc, #68]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007010:	0a5b      	lsrs	r3, r3, #9
 8007012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007016:	3301      	adds	r3, #1
 8007018:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	ee07 3a90 	vmov	s15, r3
 8007020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007024:	edd7 6a07 	vldr	s13, [r7, #28]
 8007028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800702c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007030:	ee17 3a90 	vmov	r3, s15
 8007034:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007036:	e005      	b.n	8007044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	61bb      	str	r3, [r7, #24]
      break;
 800703c:	e002      	b.n	8007044 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800703e:	4b07      	ldr	r3, [pc, #28]	@ (800705c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007040:	61bb      	str	r3, [r7, #24]
      break;
 8007042:	bf00      	nop
  }

  return sysclockfreq;
 8007044:	69bb      	ldr	r3, [r7, #24]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3724      	adds	r7, #36	@ 0x24
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	58024400 	.word	0x58024400
 8007058:	03d09000 	.word	0x03d09000
 800705c:	003d0900 	.word	0x003d0900
 8007060:	007a1200 	.word	0x007a1200
 8007064:	46000000 	.word	0x46000000
 8007068:	4c742400 	.word	0x4c742400
 800706c:	4a742400 	.word	0x4a742400
 8007070:	4af42400 	.word	0x4af42400

08007074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800707a:	f7ff fe81 	bl	8006d80 <HAL_RCC_GetSysClockFreq>
 800707e:	4602      	mov	r2, r0
 8007080:	4b10      	ldr	r3, [pc, #64]	@ (80070c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	0a1b      	lsrs	r3, r3, #8
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	490f      	ldr	r1, [pc, #60]	@ (80070c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800708c:	5ccb      	ldrb	r3, [r1, r3]
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	fa22 f303 	lsr.w	r3, r2, r3
 8007096:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007098:	4b0a      	ldr	r3, [pc, #40]	@ (80070c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	4a09      	ldr	r2, [pc, #36]	@ (80070c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80070a2:	5cd3      	ldrb	r3, [r2, r3]
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	fa22 f303 	lsr.w	r3, r2, r3
 80070ae:	4a07      	ldr	r2, [pc, #28]	@ (80070cc <HAL_RCC_GetHCLKFreq+0x58>)
 80070b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070b2:	4a07      	ldr	r2, [pc, #28]	@ (80070d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80070b8:	4b04      	ldr	r3, [pc, #16]	@ (80070cc <HAL_RCC_GetHCLKFreq+0x58>)
 80070ba:	681b      	ldr	r3, [r3, #0]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	58024400 	.word	0x58024400
 80070c8:	0801eb8c 	.word	0x0801eb8c
 80070cc:	24000008 	.word	0x24000008
 80070d0:	24000004 	.word	0x24000004

080070d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80070d8:	f7ff ffcc 	bl	8007074 <HAL_RCC_GetHCLKFreq>
 80070dc:	4602      	mov	r2, r0
 80070de:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	091b      	lsrs	r3, r3, #4
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	4904      	ldr	r1, [pc, #16]	@ (80070fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80070ea:	5ccb      	ldrb	r3, [r1, r3]
 80070ec:	f003 031f 	and.w	r3, r3, #31
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	58024400 	.word	0x58024400
 80070fc:	0801eb8c 	.word	0x0801eb8c

08007100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007104:	f7ff ffb6 	bl	8007074 <HAL_RCC_GetHCLKFreq>
 8007108:	4602      	mov	r2, r0
 800710a:	4b06      	ldr	r3, [pc, #24]	@ (8007124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	4904      	ldr	r1, [pc, #16]	@ (8007128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007116:	5ccb      	ldrb	r3, [r1, r3]
 8007118:	f003 031f 	and.w	r3, r3, #31
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007120:	4618      	mov	r0, r3
 8007122:	bd80      	pop	{r7, pc}
 8007124:	58024400 	.word	0x58024400
 8007128:	0801eb8c 	.word	0x0801eb8c

0800712c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	223f      	movs	r2, #63	@ 0x3f
 800713a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800713c:	4b1a      	ldr	r3, [pc, #104]	@ (80071a8 <HAL_RCC_GetClockConfig+0x7c>)
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f003 0207 	and.w	r2, r3, #7
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007148:	4b17      	ldr	r3, [pc, #92]	@ (80071a8 <HAL_RCC_GetClockConfig+0x7c>)
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007154:	4b14      	ldr	r3, [pc, #80]	@ (80071a8 <HAL_RCC_GetClockConfig+0x7c>)
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	f003 020f 	and.w	r2, r3, #15
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007160:	4b11      	ldr	r3, [pc, #68]	@ (80071a8 <HAL_RCC_GetClockConfig+0x7c>)
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800716c:	4b0e      	ldr	r3, [pc, #56]	@ (80071a8 <HAL_RCC_GetClockConfig+0x7c>)
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007178:	4b0b      	ldr	r3, [pc, #44]	@ (80071a8 <HAL_RCC_GetClockConfig+0x7c>)
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007184:	4b08      	ldr	r3, [pc, #32]	@ (80071a8 <HAL_RCC_GetClockConfig+0x7c>)
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007190:	4b06      	ldr	r3, [pc, #24]	@ (80071ac <HAL_RCC_GetClockConfig+0x80>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 020f 	and.w	r2, r3, #15
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	58024400 	.word	0x58024400
 80071ac:	52002000 	.word	0x52002000

080071b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b4:	b0ca      	sub	sp, #296	@ 0x128
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071bc:	2300      	movs	r3, #0
 80071be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071c2:	2300      	movs	r3, #0
 80071c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80071d4:	2500      	movs	r5, #0
 80071d6:	ea54 0305 	orrs.w	r3, r4, r5
 80071da:	d049      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80071dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071e6:	d02f      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80071e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071ec:	d828      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80071ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071f2:	d01a      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80071f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071f8:	d822      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80071fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007202:	d007      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007204:	e01c      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007206:	4bb8      	ldr	r3, [pc, #736]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	4ab7      	ldr	r2, [pc, #732]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800720c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007210:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007212:	e01a      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007218:	3308      	adds	r3, #8
 800721a:	2102      	movs	r1, #2
 800721c:	4618      	mov	r0, r3
 800721e:	f001 fc8f 	bl	8008b40 <RCCEx_PLL2_Config>
 8007222:	4603      	mov	r3, r0
 8007224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007228:	e00f      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722e:	3328      	adds	r3, #40	@ 0x28
 8007230:	2102      	movs	r1, #2
 8007232:	4618      	mov	r0, r3
 8007234:	f001 fd36 	bl	8008ca4 <RCCEx_PLL3_Config>
 8007238:	4603      	mov	r3, r0
 800723a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800723e:	e004      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007246:	e000      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800724a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007252:	4ba5      	ldr	r3, [pc, #660]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007256:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800725a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007260:	4aa1      	ldr	r2, [pc, #644]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007262:	430b      	orrs	r3, r1
 8007264:	6513      	str	r3, [r2, #80]	@ 0x50
 8007266:	e003      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800726c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800727c:	f04f 0900 	mov.w	r9, #0
 8007280:	ea58 0309 	orrs.w	r3, r8, r9
 8007284:	d047      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800728c:	2b04      	cmp	r3, #4
 800728e:	d82a      	bhi.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007290:	a201      	add	r2, pc, #4	@ (adr r2, 8007298 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	080072ad 	.word	0x080072ad
 800729c:	080072bb 	.word	0x080072bb
 80072a0:	080072d1 	.word	0x080072d1
 80072a4:	080072ef 	.word	0x080072ef
 80072a8:	080072ef 	.word	0x080072ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ac:	4b8e      	ldr	r3, [pc, #568]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	4a8d      	ldr	r2, [pc, #564]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072b8:	e01a      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	3308      	adds	r3, #8
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fc3c 	bl	8008b40 <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072ce:	e00f      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d4:	3328      	adds	r3, #40	@ 0x28
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 fce3 	bl	8008ca4 <RCCEx_PLL3_Config>
 80072de:	4603      	mov	r3, r0
 80072e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072e4:	e004      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072ec:	e000      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80072ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072f8:	4b7b      	ldr	r3, [pc, #492]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072fc:	f023 0107 	bic.w	r1, r3, #7
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007306:	4a78      	ldr	r2, [pc, #480]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007308:	430b      	orrs	r3, r1
 800730a:	6513      	str	r3, [r2, #80]	@ 0x50
 800730c:	e003      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007322:	f04f 0b00 	mov.w	fp, #0
 8007326:	ea5a 030b 	orrs.w	r3, sl, fp
 800732a:	d04c      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800732c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007336:	d030      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800733c:	d829      	bhi.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800733e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007340:	d02d      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007342:	2bc0      	cmp	r3, #192	@ 0xc0
 8007344:	d825      	bhi.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007346:	2b80      	cmp	r3, #128	@ 0x80
 8007348:	d018      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800734a:	2b80      	cmp	r3, #128	@ 0x80
 800734c:	d821      	bhi.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007352:	2b40      	cmp	r3, #64	@ 0x40
 8007354:	d007      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007356:	e01c      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007358:	4b63      	ldr	r3, [pc, #396]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735c:	4a62      	ldr	r2, [pc, #392]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800735e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007364:	e01c      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736a:	3308      	adds	r3, #8
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f001 fbe6 	bl	8008b40 <RCCEx_PLL2_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800737a:	e011      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800737c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007380:	3328      	adds	r3, #40	@ 0x28
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f001 fc8d 	bl	8008ca4 <RCCEx_PLL3_Config>
 800738a:	4603      	mov	r3, r0
 800738c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007390:	e006      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007398:	e002      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800739e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80073a8:	4b4f      	ldr	r3, [pc, #316]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80073b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b6:	4a4c      	ldr	r2, [pc, #304]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80073bc:	e003      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80073d2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80073d6:	2300      	movs	r3, #0
 80073d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80073dc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80073e0:	460b      	mov	r3, r1
 80073e2:	4313      	orrs	r3, r2
 80073e4:	d053      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073f2:	d035      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80073f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073f8:	d82e      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80073fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80073fe:	d031      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007400:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007404:	d828      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007406:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800740a:	d01a      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800740c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007410:	d822      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007416:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800741a:	d007      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800741c:	e01c      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800741e:	4b32      	ldr	r3, [pc, #200]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	4a31      	ldr	r2, [pc, #196]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800742a:	e01c      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007430:	3308      	adds	r3, #8
 8007432:	2100      	movs	r1, #0
 8007434:	4618      	mov	r0, r3
 8007436:	f001 fb83 	bl	8008b40 <RCCEx_PLL2_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007440:	e011      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007446:	3328      	adds	r3, #40	@ 0x28
 8007448:	2100      	movs	r1, #0
 800744a:	4618      	mov	r0, r3
 800744c:	f001 fc2a 	bl	8008ca4 <RCCEx_PLL3_Config>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007456:	e006      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800745e:	e002      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007460:	bf00      	nop
 8007462:	e000      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10b      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800746e:	4b1e      	ldr	r3, [pc, #120]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007472:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800747e:	4a1a      	ldr	r2, [pc, #104]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007480:	430b      	orrs	r3, r1
 8007482:	6593      	str	r3, [r2, #88]	@ 0x58
 8007484:	e003      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800748a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800749a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800749e:	2300      	movs	r3, #0
 80074a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80074a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80074a8:	460b      	mov	r3, r1
 80074aa:	4313      	orrs	r3, r2
 80074ac:	d056      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80074b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074ba:	d038      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80074bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074c0:	d831      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80074c6:	d034      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80074c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80074cc:	d82b      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074d2:	d01d      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80074d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074d8:	d825      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d006      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80074de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074e2:	d00a      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80074e4:	e01f      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074e6:	bf00      	nop
 80074e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074ec:	4ba2      	ldr	r3, [pc, #648]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f0:	4aa1      	ldr	r2, [pc, #644]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074f8:	e01c      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fe:	3308      	adds	r3, #8
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f001 fb1c 	bl	8008b40 <RCCEx_PLL2_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800750e:	e011      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007514:	3328      	adds	r3, #40	@ 0x28
 8007516:	2100      	movs	r1, #0
 8007518:	4618      	mov	r0, r3
 800751a:	f001 fbc3 	bl	8008ca4 <RCCEx_PLL3_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007524:	e006      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800752c:	e002      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800752e:	bf00      	nop
 8007530:	e000      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800753c:	4b8e      	ldr	r3, [pc, #568]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800753e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007540:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007548:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800754c:	4a8a      	ldr	r2, [pc, #552]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800754e:	430b      	orrs	r3, r1
 8007550:	6593      	str	r3, [r2, #88]	@ 0x58
 8007552:	e003      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007558:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800755c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007568:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800756c:	2300      	movs	r3, #0
 800756e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007572:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007576:	460b      	mov	r3, r1
 8007578:	4313      	orrs	r3, r2
 800757a:	d03a      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800757c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007582:	2b30      	cmp	r3, #48	@ 0x30
 8007584:	d01f      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007586:	2b30      	cmp	r3, #48	@ 0x30
 8007588:	d819      	bhi.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800758a:	2b20      	cmp	r3, #32
 800758c:	d00c      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800758e:	2b20      	cmp	r3, #32
 8007590:	d815      	bhi.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d019      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007596:	2b10      	cmp	r3, #16
 8007598:	d111      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800759a:	4b77      	ldr	r3, [pc, #476]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	4a76      	ldr	r2, [pc, #472]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80075a6:	e011      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ac:	3308      	adds	r3, #8
 80075ae:	2102      	movs	r1, #2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 fac5 	bl	8008b40 <RCCEx_PLL2_Config>
 80075b6:	4603      	mov	r3, r0
 80075b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80075bc:	e006      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075c4:	e002      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80075c6:	bf00      	nop
 80075c8:	e000      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80075ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075d4:	4b68      	ldr	r3, [pc, #416]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e2:	4a65      	ldr	r2, [pc, #404]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075e4:	430b      	orrs	r3, r1
 80075e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075e8:	e003      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80075fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007602:	2300      	movs	r3, #0
 8007604:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007608:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800760c:	460b      	mov	r3, r1
 800760e:	4313      	orrs	r3, r2
 8007610:	d051      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800761c:	d035      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800761e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007622:	d82e      	bhi.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007624:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007628:	d031      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800762a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800762e:	d828      	bhi.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007634:	d01a      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763a:	d822      	bhi.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007644:	d007      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007646:	e01c      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007648:	4b4b      	ldr	r3, [pc, #300]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800764a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764c:	4a4a      	ldr	r2, [pc, #296]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800764e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007654:	e01c      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765a:	3308      	adds	r3, #8
 800765c:	2100      	movs	r1, #0
 800765e:	4618      	mov	r0, r3
 8007660:	f001 fa6e 	bl	8008b40 <RCCEx_PLL2_Config>
 8007664:	4603      	mov	r3, r0
 8007666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800766a:	e011      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007670:	3328      	adds	r3, #40	@ 0x28
 8007672:	2100      	movs	r1, #0
 8007674:	4618      	mov	r0, r3
 8007676:	f001 fb15 	bl	8008ca4 <RCCEx_PLL3_Config>
 800767a:	4603      	mov	r3, r0
 800767c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007680:	e006      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007688:	e002      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800768a:	bf00      	nop
 800768c:	e000      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800768e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007698:	4b37      	ldr	r3, [pc, #220]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800769a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800769c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076a6:	4a34      	ldr	r2, [pc, #208]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076a8:	430b      	orrs	r3, r1
 80076aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80076ac:	e003      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80076c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076c6:	2300      	movs	r3, #0
 80076c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80076cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80076d0:	460b      	mov	r3, r1
 80076d2:	4313      	orrs	r3, r2
 80076d4:	d056      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80076d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076e0:	d033      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80076e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076e6:	d82c      	bhi.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076ec:	d02f      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80076ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076f2:	d826      	bhi.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076f8:	d02b      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80076fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076fe:	d820      	bhi.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007700:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007704:	d012      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800770a:	d81a      	bhi.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d022      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007714:	d115      	bne.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	3308      	adds	r3, #8
 800771c:	2101      	movs	r1, #1
 800771e:	4618      	mov	r0, r3
 8007720:	f001 fa0e 	bl	8008b40 <RCCEx_PLL2_Config>
 8007724:	4603      	mov	r3, r0
 8007726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800772a:	e015      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800772c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007730:	3328      	adds	r3, #40	@ 0x28
 8007732:	2101      	movs	r1, #1
 8007734:	4618      	mov	r0, r3
 8007736:	f001 fab5 	bl	8008ca4 <RCCEx_PLL3_Config>
 800773a:	4603      	mov	r3, r0
 800773c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007740:	e00a      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007748:	e006      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800774a:	bf00      	nop
 800774c:	e004      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800774e:	bf00      	nop
 8007750:	e002      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007752:	bf00      	nop
 8007754:	e000      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10d      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007760:	4b05      	ldr	r3, [pc, #20]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007764:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800776e:	4a02      	ldr	r2, [pc, #8]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007770:	430b      	orrs	r3, r1
 8007772:	6513      	str	r3, [r2, #80]	@ 0x50
 8007774:	e006      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007776:	bf00      	nop
 8007778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007794:	2300      	movs	r3, #0
 8007796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800779a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800779e:	460b      	mov	r3, r1
 80077a0:	4313      	orrs	r3, r2
 80077a2:	d055      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80077a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077b0:	d033      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80077b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077b6:	d82c      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077bc:	d02f      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077c2:	d826      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077c8:	d02b      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80077ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077ce:	d820      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077d4:	d012      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80077d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077da:	d81a      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d022      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80077e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077e4:	d115      	bne.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ea:	3308      	adds	r3, #8
 80077ec:	2101      	movs	r1, #1
 80077ee:	4618      	mov	r0, r3
 80077f0:	f001 f9a6 	bl	8008b40 <RCCEx_PLL2_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80077fa:	e015      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007800:	3328      	adds	r3, #40	@ 0x28
 8007802:	2101      	movs	r1, #1
 8007804:	4618      	mov	r0, r3
 8007806:	f001 fa4d 	bl	8008ca4 <RCCEx_PLL3_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007810:	e00a      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007818:	e006      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800781a:	bf00      	nop
 800781c:	e004      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800781e:	bf00      	nop
 8007820:	e002      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007822:	bf00      	nop
 8007824:	e000      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10b      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007830:	4ba3      	ldr	r3, [pc, #652]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007834:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007840:	4a9f      	ldr	r2, [pc, #636]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007842:	430b      	orrs	r3, r1
 8007844:	6593      	str	r3, [r2, #88]	@ 0x58
 8007846:	e003      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800785c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007860:	2300      	movs	r3, #0
 8007862:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800786a:	460b      	mov	r3, r1
 800786c:	4313      	orrs	r3, r2
 800786e:	d037      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800787a:	d00e      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800787c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007880:	d816      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d018      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800788a:	d111      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800788c:	4b8c      	ldr	r3, [pc, #560]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800788e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007890:	4a8b      	ldr	r2, [pc, #556]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007898:	e00f      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	3308      	adds	r3, #8
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 f94c 	bl	8008b40 <RCCEx_PLL2_Config>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80078ae:	e004      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078b6:	e000      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80078b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10a      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078c2:	4b7f      	ldr	r3, [pc, #508]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80078ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d0:	4a7b      	ldr	r2, [pc, #492]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d2:	430b      	orrs	r3, r1
 80078d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80078d6:	e003      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80078ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078f0:	2300      	movs	r3, #0
 80078f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80078f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4313      	orrs	r3, r2
 80078fe:	d039      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007906:	2b03      	cmp	r3, #3
 8007908:	d81c      	bhi.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800790a:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	0800794d 	.word	0x0800794d
 8007914:	08007921 	.word	0x08007921
 8007918:	0800792f 	.word	0x0800792f
 800791c:	0800794d 	.word	0x0800794d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007920:	4b67      	ldr	r3, [pc, #412]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007924:	4a66      	ldr	r2, [pc, #408]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800792a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800792c:	e00f      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007932:	3308      	adds	r3, #8
 8007934:	2102      	movs	r1, #2
 8007936:	4618      	mov	r0, r3
 8007938:	f001 f902 	bl	8008b40 <RCCEx_PLL2_Config>
 800793c:	4603      	mov	r3, r0
 800793e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007942:	e004      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800794c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007956:	4b5a      	ldr	r3, [pc, #360]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800795a:	f023 0103 	bic.w	r1, r3, #3
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007964:	4a56      	ldr	r2, [pc, #344]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007966:	430b      	orrs	r3, r1
 8007968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800796a:	e003      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007980:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007984:	2300      	movs	r3, #0
 8007986:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800798a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800798e:	460b      	mov	r3, r1
 8007990:	4313      	orrs	r3, r2
 8007992:	f000 809f 	beq.w	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007996:	4b4b      	ldr	r3, [pc, #300]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a4a      	ldr	r2, [pc, #296]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800799c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079a2:	f7fa fced 	bl	8002380 <HAL_GetTick>
 80079a6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079aa:	e00b      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ac:	f7fa fce8 	bl	8002380 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b64      	cmp	r3, #100	@ 0x64
 80079ba:	d903      	bls.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079c2:	e005      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079c4:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0ed      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80079d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d179      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80079d8:	4b39      	ldr	r3, [pc, #228]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079e4:	4053      	eors	r3, r2
 80079e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d015      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079ee:	4b34      	ldr	r3, [pc, #208]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079fa:	4b31      	ldr	r3, [pc, #196]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079fe:	4a30      	ldr	r2, [pc, #192]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a04:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a06:	4b2e      	ldr	r3, [pc, #184]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a10:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a12:	4a2b      	ldr	r2, [pc, #172]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007a18:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a26:	d118      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a28:	f7fa fcaa 	bl	8002380 <HAL_GetTick>
 8007a2c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a30:	e00d      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a32:	f7fa fca5 	bl	8002380 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007a3c:	1ad2      	subs	r2, r2, r3
 8007a3e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d903      	bls.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007a4c:	e005      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0eb      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d129      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a72:	d10e      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007a74:	4b12      	ldr	r3, [pc, #72]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a84:	091a      	lsrs	r2, r3, #4
 8007a86:	4b10      	ldr	r3, [pc, #64]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	6113      	str	r3, [r2, #16]
 8007a90:	e005      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007a92:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a9c:	6113      	str	r3, [r2, #16]
 8007a9e:	4b08      	ldr	r3, [pc, #32]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aa0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aae:	4a04      	ldr	r2, [pc, #16]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ab4:	e00e      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007abe:	e009      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	58024800 	.word	0x58024800
 8007ac8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f002 0301 	and.w	r3, r2, #1
 8007ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007aea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4313      	orrs	r3, r2
 8007af2:	f000 8089 	beq.w	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007afc:	2b28      	cmp	r3, #40	@ 0x28
 8007afe:	d86b      	bhi.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007b00:	a201      	add	r2, pc, #4	@ (adr r2, 8007b08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007be1 	.word	0x08007be1
 8007b0c:	08007bd9 	.word	0x08007bd9
 8007b10:	08007bd9 	.word	0x08007bd9
 8007b14:	08007bd9 	.word	0x08007bd9
 8007b18:	08007bd9 	.word	0x08007bd9
 8007b1c:	08007bd9 	.word	0x08007bd9
 8007b20:	08007bd9 	.word	0x08007bd9
 8007b24:	08007bd9 	.word	0x08007bd9
 8007b28:	08007bad 	.word	0x08007bad
 8007b2c:	08007bd9 	.word	0x08007bd9
 8007b30:	08007bd9 	.word	0x08007bd9
 8007b34:	08007bd9 	.word	0x08007bd9
 8007b38:	08007bd9 	.word	0x08007bd9
 8007b3c:	08007bd9 	.word	0x08007bd9
 8007b40:	08007bd9 	.word	0x08007bd9
 8007b44:	08007bd9 	.word	0x08007bd9
 8007b48:	08007bc3 	.word	0x08007bc3
 8007b4c:	08007bd9 	.word	0x08007bd9
 8007b50:	08007bd9 	.word	0x08007bd9
 8007b54:	08007bd9 	.word	0x08007bd9
 8007b58:	08007bd9 	.word	0x08007bd9
 8007b5c:	08007bd9 	.word	0x08007bd9
 8007b60:	08007bd9 	.word	0x08007bd9
 8007b64:	08007bd9 	.word	0x08007bd9
 8007b68:	08007be1 	.word	0x08007be1
 8007b6c:	08007bd9 	.word	0x08007bd9
 8007b70:	08007bd9 	.word	0x08007bd9
 8007b74:	08007bd9 	.word	0x08007bd9
 8007b78:	08007bd9 	.word	0x08007bd9
 8007b7c:	08007bd9 	.word	0x08007bd9
 8007b80:	08007bd9 	.word	0x08007bd9
 8007b84:	08007bd9 	.word	0x08007bd9
 8007b88:	08007be1 	.word	0x08007be1
 8007b8c:	08007bd9 	.word	0x08007bd9
 8007b90:	08007bd9 	.word	0x08007bd9
 8007b94:	08007bd9 	.word	0x08007bd9
 8007b98:	08007bd9 	.word	0x08007bd9
 8007b9c:	08007bd9 	.word	0x08007bd9
 8007ba0:	08007bd9 	.word	0x08007bd9
 8007ba4:	08007bd9 	.word	0x08007bd9
 8007ba8:	08007be1 	.word	0x08007be1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 ffc3 	bl	8008b40 <RCCEx_PLL2_Config>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007bc0:	e00f      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc6:	3328      	adds	r3, #40	@ 0x28
 8007bc8:	2101      	movs	r1, #1
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f001 f86a 	bl	8008ca4 <RCCEx_PLL3_Config>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007bd6:	e004      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bde:	e000      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007bea:	4bbf      	ldr	r3, [pc, #764]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bf8:	4abb      	ldr	r2, [pc, #748]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bfe:	e003      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f002 0302 	and.w	r3, r2, #2
 8007c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c1e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007c22:	460b      	mov	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	d041      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c2e:	2b05      	cmp	r3, #5
 8007c30:	d824      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007c32:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c85 	.word	0x08007c85
 8007c3c:	08007c51 	.word	0x08007c51
 8007c40:	08007c67 	.word	0x08007c67
 8007c44:	08007c85 	.word	0x08007c85
 8007c48:	08007c85 	.word	0x08007c85
 8007c4c:	08007c85 	.word	0x08007c85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c54:	3308      	adds	r3, #8
 8007c56:	2101      	movs	r1, #1
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 ff71 	bl	8008b40 <RCCEx_PLL2_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c64:	e00f      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6a:	3328      	adds	r3, #40	@ 0x28
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 f818 	bl	8008ca4 <RCCEx_PLL3_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c7a:	e004      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c82:	e000      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c8e:	4b96      	ldr	r3, [pc, #600]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c92:	f023 0107 	bic.w	r1, r3, #7
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c9c:	4a92      	ldr	r2, [pc, #584]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c9e:	430b      	orrs	r3, r1
 8007ca0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ca2:	e003      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f002 0304 	and.w	r3, r2, #4
 8007cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	d044      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cd4:	2b05      	cmp	r3, #5
 8007cd6:	d825      	bhi.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007d2d 	.word	0x08007d2d
 8007ce4:	08007cf9 	.word	0x08007cf9
 8007ce8:	08007d0f 	.word	0x08007d0f
 8007cec:	08007d2d 	.word	0x08007d2d
 8007cf0:	08007d2d 	.word	0x08007d2d
 8007cf4:	08007d2d 	.word	0x08007d2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 ff1d 	bl	8008b40 <RCCEx_PLL2_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d0c:	e00f      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d12:	3328      	adds	r3, #40	@ 0x28
 8007d14:	2101      	movs	r1, #1
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 ffc4 	bl	8008ca4 <RCCEx_PLL3_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d22:	e004      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d2a:	e000      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d36:	4b6c      	ldr	r3, [pc, #432]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3a:	f023 0107 	bic.w	r1, r3, #7
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d46:	4a68      	ldr	r2, [pc, #416]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d4c:	e003      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f002 0320 	and.w	r3, r2, #32
 8007d62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d66:	2300      	movs	r3, #0
 8007d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d70:	460b      	mov	r3, r1
 8007d72:	4313      	orrs	r3, r2
 8007d74:	d055      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d82:	d033      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d88:	d82c      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d8e:	d02f      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d94:	d826      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d9a:	d02b      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007d9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007da0:	d820      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007da6:	d012      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dac:	d81a      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d022      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007db6:	d115      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 febd 	bl	8008b40 <RCCEx_PLL2_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007dcc:	e015      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	3328      	adds	r3, #40	@ 0x28
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 ff64 	bl	8008ca4 <RCCEx_PLL3_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007de2:	e00a      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dea:	e006      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007dec:	bf00      	nop
 8007dee:	e004      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007df0:	bf00      	nop
 8007df2:	e002      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007df4:	bf00      	nop
 8007df6:	e000      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10b      	bne.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e02:	4b39      	ldr	r3, [pc, #228]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e06:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e12:	4a35      	ldr	r2, [pc, #212]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e18:	e003      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e32:	2300      	movs	r3, #0
 8007e34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e38:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	d058      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e4a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e4e:	d033      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007e50:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e54:	d82c      	bhi.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e5a:	d02f      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e60:	d826      	bhi.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e66:	d02b      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007e68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e6c:	d820      	bhi.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e72:	d012      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e78:	d81a      	bhi.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d022      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e82:	d115      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e88:	3308      	adds	r3, #8
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fe57 	bl	8008b40 <RCCEx_PLL2_Config>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e98:	e015      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	3328      	adds	r3, #40	@ 0x28
 8007ea0:	2102      	movs	r1, #2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fefe 	bl	8008ca4 <RCCEx_PLL3_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007eae:	e00a      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eb6:	e006      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007eb8:	bf00      	nop
 8007eba:	e004      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ebc:	bf00      	nop
 8007ebe:	e002      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ec0:	bf00      	nop
 8007ec2:	e000      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10e      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ece:	4b06      	ldr	r3, [pc, #24]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ede:	4a02      	ldr	r2, [pc, #8]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ee4:	e006      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007ee6:	bf00      	nop
 8007ee8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f04:	2300      	movs	r3, #0
 8007f06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4313      	orrs	r3, r2
 8007f12:	d055      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f1c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f20:	d033      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007f22:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f26:	d82c      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f2c:	d02f      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007f2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f32:	d826      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f34:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f38:	d02b      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007f3a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f3e:	d820      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f44:	d012      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007f46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f4a:	d81a      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d022      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007f50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f54:	d115      	bne.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fdee 	bl	8008b40 <RCCEx_PLL2_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f6a:	e015      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f70:	3328      	adds	r3, #40	@ 0x28
 8007f72:	2102      	movs	r1, #2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 fe95 	bl	8008ca4 <RCCEx_PLL3_Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f80:	e00a      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f88:	e006      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f8a:	bf00      	nop
 8007f8c:	e004      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f8e:	bf00      	nop
 8007f90:	e002      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f92:	bf00      	nop
 8007f94:	e000      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10b      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007fa0:	4ba1      	ldr	r3, [pc, #644]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fb0:	4a9d      	ldr	r2, [pc, #628]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fb6:	e003      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f002 0308 	and.w	r3, r2, #8
 8007fcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fd6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	d01e      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fec:	d10c      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff2:	3328      	adds	r3, #40	@ 0x28
 8007ff4:	2102      	movs	r1, #2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fe54 	bl	8008ca4 <RCCEx_PLL3_Config>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008008:	4b87      	ldr	r3, [pc, #540]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800800a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008018:	4a83      	ldr	r2, [pc, #524]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800801a:	430b      	orrs	r3, r1
 800801c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f002 0310 	and.w	r3, r2, #16
 800802a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800802e:	2300      	movs	r3, #0
 8008030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008034:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008038:	460b      	mov	r3, r1
 800803a:	4313      	orrs	r3, r2
 800803c:	d01e      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800803e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008042:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800804a:	d10c      	bne.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800804c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008050:	3328      	adds	r3, #40	@ 0x28
 8008052:	2102      	movs	r1, #2
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fe25 	bl	8008ca4 <RCCEx_PLL3_Config>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008066:	4b70      	ldr	r3, [pc, #448]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008072:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008076:	4a6c      	ldr	r2, [pc, #432]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008078:	430b      	orrs	r3, r1
 800807a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800807c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008088:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800808c:	2300      	movs	r3, #0
 800808e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008092:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008096:	460b      	mov	r3, r1
 8008098:	4313      	orrs	r3, r2
 800809a:	d03e      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80080a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080a8:	d022      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80080aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080ae:	d81b      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80080b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b8:	d00b      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80080ba:	e015      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c0:	3308      	adds	r3, #8
 80080c2:	2100      	movs	r1, #0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fd3b 	bl	8008b40 <RCCEx_PLL2_Config>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80080d0:	e00f      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d6:	3328      	adds	r3, #40	@ 0x28
 80080d8:	2102      	movs	r1, #2
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fde2 	bl	8008ca4 <RCCEx_PLL3_Config>
 80080e0:	4603      	mov	r3, r0
 80080e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80080e6:	e004      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ee:	e000      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80080f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10b      	bne.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080fa:	4b4b      	ldr	r3, [pc, #300]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800810a:	4a47      	ldr	r2, [pc, #284]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800810c:	430b      	orrs	r3, r1
 800810e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008110:	e003      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800811a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008126:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008128:	2300      	movs	r3, #0
 800812a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800812c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008130:	460b      	mov	r3, r1
 8008132:	4313      	orrs	r3, r2
 8008134:	d03b      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800813e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008142:	d01f      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008144:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008148:	d818      	bhi.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800814a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800814e:	d003      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008150:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008154:	d007      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008156:	e011      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008158:	4b33      	ldr	r3, [pc, #204]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	4a32      	ldr	r2, [pc, #200]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800815e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008164:	e00f      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816a:	3328      	adds	r3, #40	@ 0x28
 800816c:	2101      	movs	r1, #1
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fd98 	bl	8008ca4 <RCCEx_PLL3_Config>
 8008174:	4603      	mov	r3, r0
 8008176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800817a:	e004      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008182:	e000      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10b      	bne.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800818e:	4b26      	ldr	r3, [pc, #152]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008192:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800819e:	4a22      	ldr	r2, [pc, #136]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081a0:	430b      	orrs	r3, r1
 80081a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80081a4:	e003      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80081ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80081bc:	2300      	movs	r3, #0
 80081be:	677b      	str	r3, [r7, #116]	@ 0x74
 80081c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80081c4:	460b      	mov	r3, r1
 80081c6:	4313      	orrs	r3, r2
 80081c8:	d034      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80081ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80081d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081d8:	d007      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80081da:	e011      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081dc:	4b12      	ldr	r3, [pc, #72]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	4a11      	ldr	r2, [pc, #68]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80081e8:	e00e      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ee:	3308      	adds	r3, #8
 80081f0:	2102      	movs	r1, #2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fca4 	bl	8008b40 <RCCEx_PLL2_Config>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80081fe:	e003      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10d      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008210:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008214:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821e:	4a02      	ldr	r2, [pc, #8]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008220:	430b      	orrs	r3, r1
 8008222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008224:	e006      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008226:	bf00      	nop
 8008228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008230:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008240:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008242:	2300      	movs	r3, #0
 8008244:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008246:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800824a:	460b      	mov	r3, r1
 800824c:	4313      	orrs	r3, r2
 800824e:	d00c      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008254:	3328      	adds	r3, #40	@ 0x28
 8008256:	2102      	movs	r1, #2
 8008258:	4618      	mov	r0, r3
 800825a:	f000 fd23 	bl	8008ca4 <RCCEx_PLL3_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008276:	663b      	str	r3, [r7, #96]	@ 0x60
 8008278:	2300      	movs	r3, #0
 800827a:	667b      	str	r3, [r7, #100]	@ 0x64
 800827c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008280:	460b      	mov	r3, r1
 8008282:	4313      	orrs	r3, r2
 8008284:	d038      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800828e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008292:	d018      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008294:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008298:	d811      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800829a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800829e:	d014      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80082a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a4:	d80b      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d011      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80082aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ae:	d106      	bne.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b0:	4bc3      	ldr	r3, [pc, #780]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b4:	4ac2      	ldr	r2, [pc, #776]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80082bc:	e008      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082c4:	e004      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80082c6:	bf00      	nop
 80082c8:	e002      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80082ca:	bf00      	nop
 80082cc:	e000      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80082ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10b      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082d8:	4bb9      	ldr	r3, [pc, #740]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082dc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80082e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e8:	4ab5      	ldr	r2, [pc, #724]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082ea:	430b      	orrs	r3, r1
 80082ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80082ee:	e003      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80082f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008306:	2300      	movs	r3, #0
 8008308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800830a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800830e:	460b      	mov	r3, r1
 8008310:	4313      	orrs	r3, r2
 8008312:	d009      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008314:	4baa      	ldr	r3, [pc, #680]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008318:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800831c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008322:	4aa7      	ldr	r2, [pc, #668]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008324:	430b      	orrs	r3, r1
 8008326:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008334:	653b      	str	r3, [r7, #80]	@ 0x50
 8008336:	2300      	movs	r3, #0
 8008338:	657b      	str	r3, [r7, #84]	@ 0x54
 800833a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800833e:	460b      	mov	r3, r1
 8008340:	4313      	orrs	r3, r2
 8008342:	d00a      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008344:	4b9e      	ldr	r3, [pc, #632]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800834c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008350:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008354:	4a9a      	ldr	r2, [pc, #616]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008356:	430b      	orrs	r3, r1
 8008358:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008368:	2300      	movs	r3, #0
 800836a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800836c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008370:	460b      	mov	r3, r1
 8008372:	4313      	orrs	r3, r2
 8008374:	d009      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008376:	4b92      	ldr	r3, [pc, #584]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800837a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800837e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008384:	4a8e      	ldr	r2, [pc, #568]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008386:	430b      	orrs	r3, r1
 8008388:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800838a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008396:	643b      	str	r3, [r7, #64]	@ 0x40
 8008398:	2300      	movs	r3, #0
 800839a:	647b      	str	r3, [r7, #68]	@ 0x44
 800839c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80083a0:	460b      	mov	r3, r1
 80083a2:	4313      	orrs	r3, r2
 80083a4:	d00e      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083a6:	4b86      	ldr	r3, [pc, #536]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	4a85      	ldr	r2, [pc, #532]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083b0:	6113      	str	r3, [r2, #16]
 80083b2:	4b83      	ldr	r3, [pc, #524]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083b4:	6919      	ldr	r1, [r3, #16]
 80083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80083be:	4a80      	ldr	r2, [pc, #512]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083c0:	430b      	orrs	r3, r1
 80083c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80083d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083d2:	2300      	movs	r3, #0
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80083da:	460b      	mov	r3, r1
 80083dc:	4313      	orrs	r3, r2
 80083de:	d009      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80083e0:	4b77      	ldr	r3, [pc, #476]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083e4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80083e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ee:	4a74      	ldr	r2, [pc, #464]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083f0:	430b      	orrs	r3, r1
 80083f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80083f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008400:	633b      	str	r3, [r7, #48]	@ 0x30
 8008402:	2300      	movs	r3, #0
 8008404:	637b      	str	r3, [r7, #52]	@ 0x34
 8008406:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800840a:	460b      	mov	r3, r1
 800840c:	4313      	orrs	r3, r2
 800840e:	d00a      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008410:	4b6b      	ldr	r3, [pc, #428]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008414:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008420:	4a67      	ldr	r2, [pc, #412]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008422:	430b      	orrs	r3, r1
 8008424:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	2100      	movs	r1, #0
 8008430:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008438:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800843c:	460b      	mov	r3, r1
 800843e:	4313      	orrs	r3, r2
 8008440:	d011      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008446:	3308      	adds	r3, #8
 8008448:	2100      	movs	r1, #0
 800844a:	4618      	mov	r0, r3
 800844c:	f000 fb78 	bl	8008b40 <RCCEx_PLL2_Config>
 8008450:	4603      	mov	r3, r0
 8008452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	2100      	movs	r1, #0
 8008470:	6239      	str	r1, [r7, #32]
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	627b      	str	r3, [r7, #36]	@ 0x24
 8008478:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800847c:	460b      	mov	r3, r1
 800847e:	4313      	orrs	r3, r2
 8008480:	d011      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008486:	3308      	adds	r3, #8
 8008488:	2101      	movs	r1, #1
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fb58 	bl	8008b40 <RCCEx_PLL2_Config>
 8008490:	4603      	mov	r3, r0
 8008492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80084a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	2100      	movs	r1, #0
 80084b0:	61b9      	str	r1, [r7, #24]
 80084b2:	f003 0304 	and.w	r3, r3, #4
 80084b6:	61fb      	str	r3, [r7, #28]
 80084b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80084bc:	460b      	mov	r3, r1
 80084be:	4313      	orrs	r3, r2
 80084c0:	d011      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c6:	3308      	adds	r3, #8
 80084c8:	2102      	movs	r1, #2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fb38 	bl	8008b40 <RCCEx_PLL2_Config>
 80084d0:	4603      	mov	r3, r0
 80084d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	2100      	movs	r1, #0
 80084f0:	6139      	str	r1, [r7, #16]
 80084f2:	f003 0308 	and.w	r3, r3, #8
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80084fc:	460b      	mov	r3, r1
 80084fe:	4313      	orrs	r3, r2
 8008500:	d011      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008506:	3328      	adds	r3, #40	@ 0x28
 8008508:	2100      	movs	r1, #0
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fbca 	bl	8008ca4 <RCCEx_PLL3_Config>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	2100      	movs	r1, #0
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	f003 0310 	and.w	r3, r3, #16
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800853c:	460b      	mov	r3, r1
 800853e:	4313      	orrs	r3, r2
 8008540:	d011      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008546:	3328      	adds	r3, #40	@ 0x28
 8008548:	2101      	movs	r1, #1
 800854a:	4618      	mov	r0, r3
 800854c:	f000 fbaa 	bl	8008ca4 <RCCEx_PLL3_Config>
 8008550:	4603      	mov	r3, r0
 8008552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	2100      	movs	r1, #0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	607b      	str	r3, [r7, #4]
 8008578:	e9d7 1200 	ldrd	r1, r2, [r7]
 800857c:	460b      	mov	r3, r1
 800857e:	4313      	orrs	r3, r2
 8008580:	d011      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008586:	3328      	adds	r3, #40	@ 0x28
 8008588:	2102      	movs	r1, #2
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fb8a 	bl	8008ca4 <RCCEx_PLL3_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800859e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80085a6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e000      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80085ba:	46bd      	mov	sp, r7
 80085bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085c0:	58024400 	.word	0x58024400

080085c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80085c8:	f7fe fd54 	bl	8007074 <HAL_RCC_GetHCLKFreq>
 80085cc:	4602      	mov	r2, r0
 80085ce:	4b06      	ldr	r3, [pc, #24]	@ (80085e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	091b      	lsrs	r3, r3, #4
 80085d4:	f003 0307 	and.w	r3, r3, #7
 80085d8:	4904      	ldr	r1, [pc, #16]	@ (80085ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80085da:	5ccb      	ldrb	r3, [r1, r3]
 80085dc:	f003 031f 	and.w	r3, r3, #31
 80085e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	58024400 	.word	0x58024400
 80085ec:	0801eb8c 	.word	0x0801eb8c

080085f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b089      	sub	sp, #36	@ 0x24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085f8:	4ba1      	ldr	r3, [pc, #644]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008602:	4b9f      	ldr	r3, [pc, #636]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008606:	0b1b      	lsrs	r3, r3, #12
 8008608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800860c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800860e:	4b9c      	ldr	r3, [pc, #624]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008612:	091b      	lsrs	r3, r3, #4
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800861a:	4b99      	ldr	r3, [pc, #612]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800861c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800861e:	08db      	lsrs	r3, r3, #3
 8008620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	fb02 f303 	mul.w	r3, r2, r3
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008632:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8111 	beq.w	8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b02      	cmp	r3, #2
 8008642:	f000 8083 	beq.w	800874c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b02      	cmp	r3, #2
 800864a:	f200 80a1 	bhi.w	8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d056      	beq.n	8008708 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800865a:	e099      	b.n	8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800865c:	4b88      	ldr	r3, [pc, #544]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b00      	cmp	r3, #0
 8008666:	d02d      	beq.n	80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008668:	4b85      	ldr	r3, [pc, #532]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	08db      	lsrs	r3, r3, #3
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	4a84      	ldr	r2, [pc, #528]	@ (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008674:	fa22 f303 	lsr.w	r3, r2, r3
 8008678:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	ee07 3a90 	vmov	s15, r3
 8008680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008692:	4b7b      	ldr	r3, [pc, #492]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086c2:	e087      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800888c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80086d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086d6:	4b6a      	ldr	r3, [pc, #424]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008706:	e065      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008712:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871a:	4b59      	ldr	r3, [pc, #356]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872a:	ed97 6a03 	vldr	s12, [r7, #12]
 800872e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800873e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800874a:	e043      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800875a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875e:	4b48      	ldr	r3, [pc, #288]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008772:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800878e:	e021      	b.n	80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800879e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a2:	4b37      	ldr	r3, [pc, #220]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80087d4:	4b2a      	ldr	r3, [pc, #168]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d8:	0a5b      	lsrs	r3, r3, #9
 80087da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80087f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087fa:	ee17 2a90 	vmov	r2, s15
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008802:	4b1f      	ldr	r3, [pc, #124]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008806:	0c1b      	lsrs	r3, r3, #16
 8008808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800880c:	ee07 3a90 	vmov	s15, r3
 8008810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008814:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800881c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008828:	ee17 2a90 	vmov	r2, s15
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008830:	4b13      	ldr	r3, [pc, #76]	@ (8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008834:	0e1b      	lsrs	r3, r3, #24
 8008836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800884a:	edd7 6a07 	vldr	s13, [r7, #28]
 800884e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008856:	ee17 2a90 	vmov	r2, s15
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800885e:	e008      	b.n	8008872 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	609a      	str	r2, [r3, #8]
}
 8008872:	bf00      	nop
 8008874:	3724      	adds	r7, #36	@ 0x24
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	58024400 	.word	0x58024400
 8008884:	03d09000 	.word	0x03d09000
 8008888:	46000000 	.word	0x46000000
 800888c:	4c742400 	.word	0x4c742400
 8008890:	4a742400 	.word	0x4a742400
 8008894:	4af42400 	.word	0x4af42400

08008898 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008898:	b480      	push	{r7}
 800889a:	b089      	sub	sp, #36	@ 0x24
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088a0:	4ba1      	ldr	r3, [pc, #644]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a4:	f003 0303 	and.w	r3, r3, #3
 80088a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80088aa:	4b9f      	ldr	r3, [pc, #636]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ae:	0d1b      	lsrs	r3, r3, #20
 80088b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80088b6:	4b9c      	ldr	r3, [pc, #624]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ba:	0a1b      	lsrs	r3, r3, #8
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80088c2:	4b99      	ldr	r3, [pc, #612]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c6:	08db      	lsrs	r3, r3, #3
 80088c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	fb02 f303 	mul.w	r3, r2, r3
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 8111 	beq.w	8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	f000 8083 	beq.w	80089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	f200 80a1 	bhi.w	8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d056      	beq.n	80089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008902:	e099      	b.n	8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008904:	4b88      	ldr	r3, [pc, #544]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0320 	and.w	r3, r3, #32
 800890c:	2b00      	cmp	r3, #0
 800890e:	d02d      	beq.n	800896c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008910:	4b85      	ldr	r3, [pc, #532]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	08db      	lsrs	r3, r3, #3
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	4a84      	ldr	r2, [pc, #528]	@ (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800891c:	fa22 f303 	lsr.w	r3, r2, r3
 8008920:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	ee07 3a90 	vmov	s15, r3
 8008928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	ee07 3a90 	vmov	s15, r3
 8008932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893a:	4b7b      	ldr	r3, [pc, #492]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800893c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a03 	vldr	s12, [r7, #12]
 800894e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800896a:	e087      	b.n	8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008976:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800897a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897e:	4b6a      	ldr	r3, [pc, #424]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008992:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ae:	e065      	b.n	8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c2:	4b59      	ldr	r3, [pc, #356]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089f2:	e043      	b.n	8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a06:	4b48      	ldr	r3, [pc, #288]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a36:	e021      	b.n	8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4a:	4b37      	ldr	r3, [pc, #220]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	0a5b      	lsrs	r3, r3, #9
 8008a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa2:	ee17 2a90 	vmov	r2, s15
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aae:	0c1b      	lsrs	r3, r3, #16
 8008ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ab4:	ee07 3a90 	vmov	s15, r3
 8008ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ad0:	ee17 2a90 	vmov	r2, s15
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008ad8:	4b13      	ldr	r3, [pc, #76]	@ (8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008adc:	0e1b      	lsrs	r3, r3, #24
 8008ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008afe:	ee17 2a90 	vmov	r2, s15
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b06:	e008      	b.n	8008b1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	609a      	str	r2, [r3, #8]
}
 8008b1a:	bf00      	nop
 8008b1c:	3724      	adds	r7, #36	@ 0x24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	58024400 	.word	0x58024400
 8008b2c:	03d09000 	.word	0x03d09000
 8008b30:	46000000 	.word	0x46000000
 8008b34:	4c742400 	.word	0x4c742400
 8008b38:	4a742400 	.word	0x4a742400
 8008b3c:	4af42400 	.word	0x4af42400

08008b40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b4e:	4b53      	ldr	r3, [pc, #332]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b52:	f003 0303 	and.w	r3, r3, #3
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d101      	bne.n	8008b5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e099      	b.n	8008c92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a4e      	ldr	r2, [pc, #312]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008b64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b6a:	f7f9 fc09 	bl	8002380 <HAL_GetTick>
 8008b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b70:	e008      	b.n	8008b84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b72:	f7f9 fc05 	bl	8002380 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d901      	bls.n	8008b84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e086      	b.n	8008c92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b84:	4b45      	ldr	r3, [pc, #276]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1f0      	bne.n	8008b72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b90:	4b42      	ldr	r3, [pc, #264]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b94:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	031b      	lsls	r3, r3, #12
 8008b9e:	493f      	ldr	r1, [pc, #252]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	025b      	lsls	r3, r3, #9
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	041b      	lsls	r3, r3, #16
 8008bc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	061b      	lsls	r3, r3, #24
 8008bd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008bd4:	4931      	ldr	r1, [pc, #196]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008bda:	4b30      	ldr	r3, [pc, #192]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	492d      	ldr	r1, [pc, #180]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008bec:	4b2b      	ldr	r3, [pc, #172]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	f023 0220 	bic.w	r2, r3, #32
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	4928      	ldr	r1, [pc, #160]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008bfe:	4b27      	ldr	r3, [pc, #156]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c02:	4a26      	ldr	r2, [pc, #152]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c04:	f023 0310 	bic.w	r3, r3, #16
 8008c08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c0a:	4b24      	ldr	r3, [pc, #144]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c0e:	4b24      	ldr	r3, [pc, #144]	@ (8008ca0 <RCCEx_PLL2_Config+0x160>)
 8008c10:	4013      	ands	r3, r2
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	69d2      	ldr	r2, [r2, #28]
 8008c16:	00d2      	lsls	r2, r2, #3
 8008c18:	4920      	ldr	r1, [pc, #128]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c22:	4a1e      	ldr	r2, [pc, #120]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c24:	f043 0310 	orr.w	r3, r3, #16
 8008c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d106      	bne.n	8008c3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c30:	4b1a      	ldr	r3, [pc, #104]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	4a19      	ldr	r2, [pc, #100]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c3c:	e00f      	b.n	8008c5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d106      	bne.n	8008c52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c44:	4b15      	ldr	r3, [pc, #84]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c48:	4a14      	ldr	r2, [pc, #80]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c50:	e005      	b.n	8008c5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c52:	4b12      	ldr	r3, [pc, #72]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c56:	4a11      	ldr	r2, [pc, #68]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a0e      	ldr	r2, [pc, #56]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c6a:	f7f9 fb89 	bl	8002380 <HAL_GetTick>
 8008c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c70:	e008      	b.n	8008c84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c72:	f7f9 fb85 	bl	8002380 <HAL_GetTick>
 8008c76:	4602      	mov	r2, r0
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d901      	bls.n	8008c84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e006      	b.n	8008c92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c84:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <RCCEx_PLL2_Config+0x15c>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0f0      	beq.n	8008c72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	58024400 	.word	0x58024400
 8008ca0:	ffff0007 	.word	0xffff0007

08008ca4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cb2:	4b53      	ldr	r3, [pc, #332]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d101      	bne.n	8008cc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e099      	b.n	8008df6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a4e      	ldr	r2, [pc, #312]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cce:	f7f9 fb57 	bl	8002380 <HAL_GetTick>
 8008cd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cd4:	e008      	b.n	8008ce8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cd6:	f7f9 fb53 	bl	8002380 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e086      	b.n	8008df6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ce8:	4b45      	ldr	r3, [pc, #276]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1f0      	bne.n	8008cd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008cf4:	4b42      	ldr	r3, [pc, #264]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	051b      	lsls	r3, r3, #20
 8008d02:	493f      	ldr	r1, [pc, #252]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	628b      	str	r3, [r1, #40]	@ 0x28
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	025b      	lsls	r3, r3, #9
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	041b      	lsls	r3, r3, #16
 8008d26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	061b      	lsls	r3, r3, #24
 8008d34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d38:	4931      	ldr	r1, [pc, #196]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d3e:	4b30      	ldr	r3, [pc, #192]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	492d      	ldr	r1, [pc, #180]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d50:	4b2b      	ldr	r3, [pc, #172]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d54:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	4928      	ldr	r1, [pc, #160]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d62:	4b27      	ldr	r3, [pc, #156]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d66:	4a26      	ldr	r2, [pc, #152]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d6e:	4b24      	ldr	r3, [pc, #144]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d72:	4b24      	ldr	r3, [pc, #144]	@ (8008e04 <RCCEx_PLL3_Config+0x160>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	69d2      	ldr	r2, [r2, #28]
 8008d7a:	00d2      	lsls	r2, r2, #3
 8008d7c:	4920      	ldr	r1, [pc, #128]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d82:	4b1f      	ldr	r3, [pc, #124]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	4a1e      	ldr	r2, [pc, #120]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d106      	bne.n	8008da2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d94:	4b1a      	ldr	r3, [pc, #104]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d98:	4a19      	ldr	r2, [pc, #100]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008d9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008da0:	e00f      	b.n	8008dc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d106      	bne.n	8008db6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008da8:	4b15      	ldr	r3, [pc, #84]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dac:	4a14      	ldr	r2, [pc, #80]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008dae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008db2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008db4:	e005      	b.n	8008dc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008db6:	4b12      	ldr	r3, [pc, #72]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dba:	4a11      	ldr	r2, [pc, #68]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008dbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dce:	f7f9 fad7 	bl	8002380 <HAL_GetTick>
 8008dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008dd4:	e008      	b.n	8008de8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dd6:	f7f9 fad3 	bl	8002380 <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d901      	bls.n	8008de8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	e006      	b.n	8008df6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008de8:	4b05      	ldr	r3, [pc, #20]	@ (8008e00 <RCCEx_PLL3_Config+0x15c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0f0      	beq.n	8008dd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	58024400 	.word	0x58024400
 8008e04:	ffff0007 	.word	0xffff0007

08008e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e049      	b.n	8008eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f841 	bl	8008eb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f000 f9e8 	bl	800921c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
	...

08008ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d001      	beq.n	8008ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e054      	b.n	8008f8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0201 	orr.w	r2, r2, #1
 8008efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a26      	ldr	r2, [pc, #152]	@ (8008f9c <HAL_TIM_Base_Start_IT+0xd0>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d022      	beq.n	8008f4c <HAL_TIM_Base_Start_IT+0x80>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f0e:	d01d      	beq.n	8008f4c <HAL_TIM_Base_Start_IT+0x80>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a22      	ldr	r2, [pc, #136]	@ (8008fa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d018      	beq.n	8008f4c <HAL_TIM_Base_Start_IT+0x80>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a21      	ldr	r2, [pc, #132]	@ (8008fa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d013      	beq.n	8008f4c <HAL_TIM_Base_Start_IT+0x80>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a1f      	ldr	r2, [pc, #124]	@ (8008fa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d00e      	beq.n	8008f4c <HAL_TIM_Base_Start_IT+0x80>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a1e      	ldr	r2, [pc, #120]	@ (8008fac <HAL_TIM_Base_Start_IT+0xe0>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d009      	beq.n	8008f4c <HAL_TIM_Base_Start_IT+0x80>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb0 <HAL_TIM_Base_Start_IT+0xe4>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d004      	beq.n	8008f4c <HAL_TIM_Base_Start_IT+0x80>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d115      	bne.n	8008f78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689a      	ldr	r2, [r3, #8]
 8008f52:	4b19      	ldr	r3, [pc, #100]	@ (8008fb8 <HAL_TIM_Base_Start_IT+0xec>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2b06      	cmp	r3, #6
 8008f5c:	d015      	beq.n	8008f8a <HAL_TIM_Base_Start_IT+0xbe>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f64:	d011      	beq.n	8008f8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 0201 	orr.w	r2, r2, #1
 8008f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f76:	e008      	b.n	8008f8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0201 	orr.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	e000      	b.n	8008f8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	40010000 	.word	0x40010000
 8008fa0:	40000400 	.word	0x40000400
 8008fa4:	40000800 	.word	0x40000800
 8008fa8:	40000c00 	.word	0x40000c00
 8008fac:	40010400 	.word	0x40010400
 8008fb0:	40001800 	.word	0x40001800
 8008fb4:	40014000 	.word	0x40014000
 8008fb8:	00010007 	.word	0x00010007

08008fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d020      	beq.n	8009020 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01b      	beq.n	8009020 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f06f 0202 	mvn.w	r2, #2
 8008ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f8e9 	bl	80091de <HAL_TIM_IC_CaptureCallback>
 800900c:	e005      	b.n	800901a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f8db 	bl	80091ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f8ec 	bl	80091f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d020      	beq.n	800906c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01b      	beq.n	800906c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f06f 0204 	mvn.w	r2, #4
 800903c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2202      	movs	r2, #2
 8009042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f8c3 	bl	80091de <HAL_TIM_IC_CaptureCallback>
 8009058:	e005      	b.n	8009066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f8b5 	bl	80091ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f8c6 	bl	80091f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d020      	beq.n	80090b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f003 0308 	and.w	r3, r3, #8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d01b      	beq.n	80090b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f06f 0208 	mvn.w	r2, #8
 8009088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2204      	movs	r2, #4
 800908e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f89d 	bl	80091de <HAL_TIM_IC_CaptureCallback>
 80090a4:	e005      	b.n	80090b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f88f 	bl	80091ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f8a0 	bl	80091f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f003 0310 	and.w	r3, r3, #16
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d020      	beq.n	8009104 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f003 0310 	and.w	r3, r3, #16
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01b      	beq.n	8009104 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0210 	mvn.w	r2, #16
 80090d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2208      	movs	r2, #8
 80090da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f877 	bl	80091de <HAL_TIM_IC_CaptureCallback>
 80090f0:	e005      	b.n	80090fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f869 	bl	80091ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f87a 	bl	80091f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00c      	beq.n	8009128 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d007      	beq.n	8009128 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f06f 0201 	mvn.w	r2, #1
 8009120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7f8 fb48 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800912e:	2b00      	cmp	r3, #0
 8009130:	d104      	bne.n	800913c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00c      	beq.n	8009156 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009142:	2b00      	cmp	r3, #0
 8009144:	d007      	beq.n	8009156 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800914e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f913 	bl	800937c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00c      	beq.n	800917a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009166:	2b00      	cmp	r3, #0
 8009168:	d007      	beq.n	800917a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f90b 	bl	8009390 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00c      	beq.n	800919e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f834 	bl	8009206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00c      	beq.n	80091c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f003 0320 	and.w	r3, r3, #32
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d007      	beq.n	80091c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f06f 0220 	mvn.w	r2, #32
 80091ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f8d3 	bl	8009368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091c2:	bf00      	nop
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091d2:	bf00      	nop
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b083      	sub	sp, #12
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091fa:	bf00      	nop
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800920e:	bf00      	nop
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
	...

0800921c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a46      	ldr	r2, [pc, #280]	@ (8009348 <TIM_Base_SetConfig+0x12c>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d013      	beq.n	800925c <TIM_Base_SetConfig+0x40>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800923a:	d00f      	beq.n	800925c <TIM_Base_SetConfig+0x40>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a43      	ldr	r2, [pc, #268]	@ (800934c <TIM_Base_SetConfig+0x130>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d00b      	beq.n	800925c <TIM_Base_SetConfig+0x40>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a42      	ldr	r2, [pc, #264]	@ (8009350 <TIM_Base_SetConfig+0x134>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d007      	beq.n	800925c <TIM_Base_SetConfig+0x40>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a41      	ldr	r2, [pc, #260]	@ (8009354 <TIM_Base_SetConfig+0x138>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d003      	beq.n	800925c <TIM_Base_SetConfig+0x40>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a40      	ldr	r2, [pc, #256]	@ (8009358 <TIM_Base_SetConfig+0x13c>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d108      	bne.n	800926e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	4313      	orrs	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a35      	ldr	r2, [pc, #212]	@ (8009348 <TIM_Base_SetConfig+0x12c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d01f      	beq.n	80092b6 <TIM_Base_SetConfig+0x9a>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800927c:	d01b      	beq.n	80092b6 <TIM_Base_SetConfig+0x9a>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a32      	ldr	r2, [pc, #200]	@ (800934c <TIM_Base_SetConfig+0x130>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d017      	beq.n	80092b6 <TIM_Base_SetConfig+0x9a>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a31      	ldr	r2, [pc, #196]	@ (8009350 <TIM_Base_SetConfig+0x134>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d013      	beq.n	80092b6 <TIM_Base_SetConfig+0x9a>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a30      	ldr	r2, [pc, #192]	@ (8009354 <TIM_Base_SetConfig+0x138>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d00f      	beq.n	80092b6 <TIM_Base_SetConfig+0x9a>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a2f      	ldr	r2, [pc, #188]	@ (8009358 <TIM_Base_SetConfig+0x13c>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d00b      	beq.n	80092b6 <TIM_Base_SetConfig+0x9a>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a2e      	ldr	r2, [pc, #184]	@ (800935c <TIM_Base_SetConfig+0x140>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d007      	beq.n	80092b6 <TIM_Base_SetConfig+0x9a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a2d      	ldr	r2, [pc, #180]	@ (8009360 <TIM_Base_SetConfig+0x144>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d003      	beq.n	80092b6 <TIM_Base_SetConfig+0x9a>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a2c      	ldr	r2, [pc, #176]	@ (8009364 <TIM_Base_SetConfig+0x148>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d108      	bne.n	80092c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	689a      	ldr	r2, [r3, #8]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a16      	ldr	r2, [pc, #88]	@ (8009348 <TIM_Base_SetConfig+0x12c>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d00f      	beq.n	8009314 <TIM_Base_SetConfig+0xf8>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a18      	ldr	r2, [pc, #96]	@ (8009358 <TIM_Base_SetConfig+0x13c>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d00b      	beq.n	8009314 <TIM_Base_SetConfig+0xf8>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a17      	ldr	r2, [pc, #92]	@ (800935c <TIM_Base_SetConfig+0x140>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d007      	beq.n	8009314 <TIM_Base_SetConfig+0xf8>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a16      	ldr	r2, [pc, #88]	@ (8009360 <TIM_Base_SetConfig+0x144>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d003      	beq.n	8009314 <TIM_Base_SetConfig+0xf8>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a15      	ldr	r2, [pc, #84]	@ (8009364 <TIM_Base_SetConfig+0x148>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d103      	bne.n	800931c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	691a      	ldr	r2, [r3, #16]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b01      	cmp	r3, #1
 800932c:	d105      	bne.n	800933a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	f023 0201 	bic.w	r2, r3, #1
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	611a      	str	r2, [r3, #16]
  }
}
 800933a:	bf00      	nop
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	40010000 	.word	0x40010000
 800934c:	40000400 	.word	0x40000400
 8009350:	40000800 	.word	0x40000800
 8009354:	40000c00 	.word	0x40000c00
 8009358:	40010400 	.word	0x40010400
 800935c:	40014000 	.word	0x40014000
 8009360:	40014400 	.word	0x40014400
 8009364:	40014800 	.word	0x40014800

08009368 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e042      	b.n	800943c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d106      	bne.n	80093ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7f8 fdd9 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2224      	movs	r2, #36	@ 0x24
 80093d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0201 	bic.w	r2, r2, #1
 80093e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 faea 	bl	800a9c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fd7f 	bl	8009ef8 <UART_SetConfig>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d101      	bne.n	8009404 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e01b      	b.n	800943c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689a      	ldr	r2, [r3, #8]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f042 0201 	orr.w	r2, r2, #1
 8009432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f001 fb69 	bl	800ab0c <UART_CheckIdleState>
 800943a:	4603      	mov	r3, r0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08a      	sub	sp, #40	@ 0x28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	4613      	mov	r3, r2
 8009450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009458:	2b20      	cmp	r3, #32
 800945a:	d167      	bne.n	800952c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <HAL_UART_Transmit_DMA+0x24>
 8009462:	88fb      	ldrh	r3, [r7, #6]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e060      	b.n	800952e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	88fa      	ldrh	r2, [r7, #6]
 8009476:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	88fa      	ldrh	r2, [r7, #6]
 800947e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2221      	movs	r2, #33	@ 0x21
 800948e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d028      	beq.n	80094ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800949e:	4a26      	ldr	r2, [pc, #152]	@ (8009538 <HAL_UART_Transmit_DMA+0xf4>)
 80094a0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094a6:	4a25      	ldr	r2, [pc, #148]	@ (800953c <HAL_UART_Transmit_DMA+0xf8>)
 80094a8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094ae:	4a24      	ldr	r2, [pc, #144]	@ (8009540 <HAL_UART_Transmit_DMA+0xfc>)
 80094b0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094b6:	2200      	movs	r2, #0
 80094b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c2:	4619      	mov	r1, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3328      	adds	r3, #40	@ 0x28
 80094ca:	461a      	mov	r2, r3
 80094cc:	88fb      	ldrh	r3, [r7, #6]
 80094ce:	f7f9 fbe3 	bl	8002c98 <HAL_DMA_Start_IT>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d009      	beq.n	80094ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2210      	movs	r2, #16
 80094dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e020      	b.n	800952e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2240      	movs	r2, #64	@ 0x40
 80094f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3308      	adds	r3, #8
 80094fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	e853 3f00 	ldrex	r3, [r3]
 8009502:	613b      	str	r3, [r7, #16]
   return(result);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800950a:	627b      	str	r3, [r7, #36]	@ 0x24
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3308      	adds	r3, #8
 8009512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009514:	623a      	str	r2, [r7, #32]
 8009516:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	69f9      	ldr	r1, [r7, #28]
 800951a:	6a3a      	ldr	r2, [r7, #32]
 800951c:	e841 2300 	strex	r3, r2, [r1]
 8009520:	61bb      	str	r3, [r7, #24]
   return(result);
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1e5      	bne.n	80094f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	e000      	b.n	800952e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800952c:	2302      	movs	r3, #2
  }
}
 800952e:	4618      	mov	r0, r3
 8009530:	3728      	adds	r7, #40	@ 0x28
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	0800afd9 	.word	0x0800afd9
 800953c:	0800b06f 	.word	0x0800b06f
 8009540:	0800b1f1 	.word	0x0800b1f1

08009544 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08a      	sub	sp, #40	@ 0x28
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009558:	2b20      	cmp	r3, #32
 800955a:	d137      	bne.n	80095cc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <HAL_UART_Receive_DMA+0x24>
 8009562:	88fb      	ldrh	r3, [r7, #6]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e030      	b.n	80095ce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a18      	ldr	r2, [pc, #96]	@ (80095d8 <HAL_UART_Receive_DMA+0x94>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d01f      	beq.n	80095bc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d018      	beq.n	80095bc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	e853 3f00 	ldrex	r3, [r3]
 8009596:	613b      	str	r3, [r7, #16]
   return(result);
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800959e:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	461a      	mov	r2, r3
 80095a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a8:	623b      	str	r3, [r7, #32]
 80095aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ac:	69f9      	ldr	r1, [r7, #28]
 80095ae:	6a3a      	ldr	r2, [r7, #32]
 80095b0:	e841 2300 	strex	r3, r2, [r1]
 80095b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1e6      	bne.n	800958a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80095bc:	88fb      	ldrh	r3, [r7, #6]
 80095be:	461a      	mov	r2, r3
 80095c0:	68b9      	ldr	r1, [r7, #8]
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f001 fbba 	bl	800ad3c <UART_Start_Receive_DMA>
 80095c8:	4603      	mov	r3, r0
 80095ca:	e000      	b.n	80095ce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80095cc:	2302      	movs	r3, #2
  }
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3728      	adds	r7, #40	@ 0x28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	58000c00 	.word	0x58000c00

080095dc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b090      	sub	sp, #64	@ 0x40
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095fe:	2b80      	cmp	r3, #128	@ 0x80
 8009600:	d139      	bne.n	8009676 <HAL_UART_DMAStop+0x9a>
 8009602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009604:	2b21      	cmp	r3, #33	@ 0x21
 8009606:	d136      	bne.n	8009676 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3308      	adds	r3, #8
 800960e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	e853 3f00 	ldrex	r3, [r3]
 8009616:	61fb      	str	r3, [r7, #28]
   return(result);
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800961e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3308      	adds	r3, #8
 8009626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009628:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800962a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800962e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009630:	e841 2300 	strex	r3, r2, [r1]
 8009634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e5      	bne.n	8009608 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009640:	2b00      	cmp	r3, #0
 8009642:	d015      	beq.n	8009670 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009648:	4618      	mov	r0, r3
 800964a:	f7f9 fd8f 	bl	800316c <HAL_DMA_Abort>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00d      	beq.n	8009670 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009658:	4618      	mov	r0, r3
 800965a:	f7fb fa15 	bl	8004a88 <HAL_DMA_GetError>
 800965e:	4603      	mov	r3, r0
 8009660:	2b20      	cmp	r3, #32
 8009662:	d105      	bne.n	8009670 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2210      	movs	r2, #16
 8009668:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e047      	b.n	8009700 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 fc09 	bl	800ae88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009680:	2b40      	cmp	r3, #64	@ 0x40
 8009682:	d13c      	bne.n	80096fe <HAL_UART_DMAStop+0x122>
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	2b22      	cmp	r3, #34	@ 0x22
 8009688:	d139      	bne.n	80096fe <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3308      	adds	r3, #8
 8009690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	e853 3f00 	ldrex	r3, [r3]
 8009698:	60bb      	str	r3, [r7, #8]
   return(result);
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3308      	adds	r3, #8
 80096a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096aa:	61ba      	str	r2, [r7, #24]
 80096ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ae:	6979      	ldr	r1, [r7, #20]
 80096b0:	69ba      	ldr	r2, [r7, #24]
 80096b2:	e841 2300 	strex	r3, r2, [r1]
 80096b6:	613b      	str	r3, [r7, #16]
   return(result);
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1e5      	bne.n	800968a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d017      	beq.n	80096f8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7f9 fd4c 	bl	800316c <HAL_DMA_Abort>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00e      	beq.n	80096f8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fb f9d1 	bl	8004a88 <HAL_DMA_GetError>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	d105      	bne.n	80096f8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2210      	movs	r2, #16
 80096f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e003      	b.n	8009700 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 fc07 	bl	800af0c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3740      	adds	r7, #64	@ 0x40
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b0ba      	sub	sp, #232	@ 0xe8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800972e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009732:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009736:	4013      	ands	r3, r2
 8009738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800973c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009740:	2b00      	cmp	r3, #0
 8009742:	d11b      	bne.n	800977c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009748:	f003 0320 	and.w	r3, r3, #32
 800974c:	2b00      	cmp	r3, #0
 800974e:	d015      	beq.n	800977c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009754:	f003 0320 	and.w	r3, r3, #32
 8009758:	2b00      	cmp	r3, #0
 800975a:	d105      	bne.n	8009768 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800975c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d009      	beq.n	800977c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 8377 	beq.w	8009e60 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
      }
      return;
 800977a:	e371      	b.n	8009e60 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800977c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 8123 	beq.w	80099cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009786:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800978a:	4b8d      	ldr	r3, [pc, #564]	@ (80099c0 <HAL_UART_IRQHandler+0x2b8>)
 800978c:	4013      	ands	r3, r2
 800978e:	2b00      	cmp	r3, #0
 8009790:	d106      	bne.n	80097a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009792:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009796:	4b8b      	ldr	r3, [pc, #556]	@ (80099c4 <HAL_UART_IRQHandler+0x2bc>)
 8009798:	4013      	ands	r3, r2
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 8116 	beq.w	80099cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d011      	beq.n	80097d0 <HAL_UART_IRQHandler+0xc8>
 80097ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00b      	beq.n	80097d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2201      	movs	r2, #1
 80097be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097c6:	f043 0201 	orr.w	r2, r3, #1
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d011      	beq.n	8009800 <HAL_UART_IRQHandler+0xf8>
 80097dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00b      	beq.n	8009800 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2202      	movs	r2, #2
 80097ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f6:	f043 0204 	orr.w	r2, r3, #4
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009804:	f003 0304 	and.w	r3, r3, #4
 8009808:	2b00      	cmp	r3, #0
 800980a:	d011      	beq.n	8009830 <HAL_UART_IRQHandler+0x128>
 800980c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00b      	beq.n	8009830 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2204      	movs	r2, #4
 800981e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009826:	f043 0202 	orr.w	r2, r3, #2
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009834:	f003 0308 	and.w	r3, r3, #8
 8009838:	2b00      	cmp	r3, #0
 800983a:	d017      	beq.n	800986c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800983c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009840:	f003 0320 	and.w	r3, r3, #32
 8009844:	2b00      	cmp	r3, #0
 8009846:	d105      	bne.n	8009854 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009848:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800984c:	4b5c      	ldr	r3, [pc, #368]	@ (80099c0 <HAL_UART_IRQHandler+0x2b8>)
 800984e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2208      	movs	r2, #8
 800985a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009862:	f043 0208 	orr.w	r2, r3, #8
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800986c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009874:	2b00      	cmp	r3, #0
 8009876:	d012      	beq.n	800989e <HAL_UART_IRQHandler+0x196>
 8009878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800987c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00c      	beq.n	800989e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800988c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009894:	f043 0220 	orr.w	r2, r3, #32
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 82dd 	beq.w	8009e64 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d013      	beq.n	80098de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ba:	f003 0320 	and.w	r3, r3, #32
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d105      	bne.n	80098ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d007      	beq.n	80098de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098f2:	2b40      	cmp	r3, #64	@ 0x40
 80098f4:	d005      	beq.n	8009902 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d054      	beq.n	80099ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f001 fb02 	bl	800af0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009912:	2b40      	cmp	r3, #64	@ 0x40
 8009914:	d146      	bne.n	80099a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3308      	adds	r3, #8
 800991c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800992c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3308      	adds	r3, #8
 800993e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009942:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800994e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800995a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1d9      	bne.n	8009916 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009968:	2b00      	cmp	r3, #0
 800996a:	d017      	beq.n	800999c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009972:	4a15      	ldr	r2, [pc, #84]	@ (80099c8 <HAL_UART_IRQHandler+0x2c0>)
 8009974:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800997c:	4618      	mov	r0, r3
 800997e:	f7f9 ff13 	bl	80037a8 <HAL_DMA_Abort_IT>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d019      	beq.n	80099bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800998e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009996:	4610      	mov	r0, r2
 8009998:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800999a:	e00f      	b.n	80099bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fa95 	bl	8009ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099a2:	e00b      	b.n	80099bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fa91 	bl	8009ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099aa:	e007      	b.n	80099bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fa8d 	bl	8009ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80099ba:	e253      	b.n	8009e64 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099bc:	bf00      	nop
    return;
 80099be:	e251      	b.n	8009e64 <HAL_UART_IRQHandler+0x75c>
 80099c0:	10000001 	.word	0x10000001
 80099c4:	04000120 	.word	0x04000120
 80099c8:	0800b271 	.word	0x0800b271

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	f040 81e7 	bne.w	8009da4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80099d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099da:	f003 0310 	and.w	r3, r3, #16
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 81e0 	beq.w	8009da4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099e8:	f003 0310 	and.w	r3, r3, #16
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f000 81d9 	beq.w	8009da4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2210      	movs	r2, #16
 80099f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a04:	2b40      	cmp	r3, #64	@ 0x40
 8009a06:	f040 8151 	bne.w	8009cac <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a96      	ldr	r2, [pc, #600]	@ (8009c6c <HAL_UART_IRQHandler+0x564>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d068      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a93      	ldr	r2, [pc, #588]	@ (8009c70 <HAL_UART_IRQHandler+0x568>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d061      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a91      	ldr	r2, [pc, #580]	@ (8009c74 <HAL_UART_IRQHandler+0x56c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d05a      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a8e      	ldr	r2, [pc, #568]	@ (8009c78 <HAL_UART_IRQHandler+0x570>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d053      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a8c      	ldr	r2, [pc, #560]	@ (8009c7c <HAL_UART_IRQHandler+0x574>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d04c      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a89      	ldr	r2, [pc, #548]	@ (8009c80 <HAL_UART_IRQHandler+0x578>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d045      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a87      	ldr	r2, [pc, #540]	@ (8009c84 <HAL_UART_IRQHandler+0x57c>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d03e      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a84      	ldr	r2, [pc, #528]	@ (8009c88 <HAL_UART_IRQHandler+0x580>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d037      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a82      	ldr	r2, [pc, #520]	@ (8009c8c <HAL_UART_IRQHandler+0x584>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d030      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a7f      	ldr	r2, [pc, #508]	@ (8009c90 <HAL_UART_IRQHandler+0x588>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d029      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a7d      	ldr	r2, [pc, #500]	@ (8009c94 <HAL_UART_IRQHandler+0x58c>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d022      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a7a      	ldr	r2, [pc, #488]	@ (8009c98 <HAL_UART_IRQHandler+0x590>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d01b      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a78      	ldr	r2, [pc, #480]	@ (8009c9c <HAL_UART_IRQHandler+0x594>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d014      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a75      	ldr	r2, [pc, #468]	@ (8009ca0 <HAL_UART_IRQHandler+0x598>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d00d      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a73      	ldr	r2, [pc, #460]	@ (8009ca4 <HAL_UART_IRQHandler+0x59c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d006      	beq.n	8009aea <HAL_UART_IRQHandler+0x3e2>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a70      	ldr	r2, [pc, #448]	@ (8009ca8 <HAL_UART_IRQHandler+0x5a0>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d106      	bne.n	8009af8 <HAL_UART_IRQHandler+0x3f0>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	e005      	b.n	8009b04 <HAL_UART_IRQHandler+0x3fc>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 81ab 	beq.w	8009e68 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	f080 81a3 	bcs.w	8009e68 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b38:	f000 8087 	beq.w	8009c4a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009b72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1da      	bne.n	8009b3c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3308      	adds	r3, #8
 8009b8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b90:	e853 3f00 	ldrex	r3, [r3]
 8009b94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b98:	f023 0301 	bic.w	r3, r3, #1
 8009b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009baa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009bae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009bb6:	e841 2300 	strex	r3, r2, [r1]
 8009bba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009bbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e1      	bne.n	8009b86 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bcc:	e853 3f00 	ldrex	r3, [r3]
 8009bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3308      	adds	r3, #8
 8009be2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009be6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009be8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bee:	e841 2300 	strex	r3, r2, [r1]
 8009bf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1e3      	bne.n	8009bc2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c10:	e853 3f00 	ldrex	r3, [r3]
 8009c14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c18:	f023 0310 	bic.w	r3, r3, #16
 8009c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	461a      	mov	r2, r3
 8009c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e4      	bne.n	8009c08 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7f9 fa91 	bl	800316c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f93b 	bl	8009ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c6a:	e0fd      	b.n	8009e68 <HAL_UART_IRQHandler+0x760>
 8009c6c:	40020010 	.word	0x40020010
 8009c70:	40020028 	.word	0x40020028
 8009c74:	40020040 	.word	0x40020040
 8009c78:	40020058 	.word	0x40020058
 8009c7c:	40020070 	.word	0x40020070
 8009c80:	40020088 	.word	0x40020088
 8009c84:	400200a0 	.word	0x400200a0
 8009c88:	400200b8 	.word	0x400200b8
 8009c8c:	40020410 	.word	0x40020410
 8009c90:	40020428 	.word	0x40020428
 8009c94:	40020440 	.word	0x40020440
 8009c98:	40020458 	.word	0x40020458
 8009c9c:	40020470 	.word	0x40020470
 8009ca0:	40020488 	.word	0x40020488
 8009ca4:	400204a0 	.word	0x400204a0
 8009ca8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 80cf 	beq.w	8009e6c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009cce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 80ca 	beq.w	8009e6c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce0:	e853 3f00 	ldrex	r3, [r3]
 8009ce4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cfc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e4      	bne.n	8009cd8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3308      	adds	r3, #8
 8009d14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d1e:	6a3a      	ldr	r2, [r7, #32]
 8009d20:	4b55      	ldr	r3, [pc, #340]	@ (8009e78 <HAL_UART_IRQHandler+0x770>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d32:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1e3      	bne.n	8009d0e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2220      	movs	r2, #32
 8009d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	e853 3f00 	ldrex	r3, [r3]
 8009d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f023 0310 	bic.w	r3, r3, #16
 8009d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	461a      	mov	r2, r3
 8009d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d7c:	61fb      	str	r3, [r7, #28]
 8009d7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	69b9      	ldr	r1, [r7, #24]
 8009d82:	69fa      	ldr	r2, [r7, #28]
 8009d84:	e841 2300 	strex	r3, r2, [r1]
 8009d88:	617b      	str	r3, [r7, #20]
   return(result);
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e4      	bne.n	8009d5a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2202      	movs	r2, #2
 8009d94:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f89f 	bl	8009ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009da2:	e063      	b.n	8009e6c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00e      	beq.n	8009dce <HAL_UART_IRQHandler+0x6c6>
 8009db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d008      	beq.n	8009dce <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009dc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 fa93 	bl	800b2f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dcc:	e051      	b.n	8009e72 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d014      	beq.n	8009e04 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d105      	bne.n	8009df2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d008      	beq.n	8009e04 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d03a      	beq.n	8009e70 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	4798      	blx	r3
    }
    return;
 8009e02:	e035      	b.n	8009e70 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d009      	beq.n	8009e24 <HAL_UART_IRQHandler+0x71c>
 8009e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f001 fa3d 	bl	800b29c <UART_EndTransmit_IT>
    return;
 8009e22:	e026      	b.n	8009e72 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d009      	beq.n	8009e44 <HAL_UART_IRQHandler+0x73c>
 8009e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 fa6c 	bl	800b31a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e42:	e016      	b.n	8009e72 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d010      	beq.n	8009e72 <HAL_UART_IRQHandler+0x76a>
 8009e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	da0c      	bge.n	8009e72 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 fa54 	bl	800b306 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e5e:	e008      	b.n	8009e72 <HAL_UART_IRQHandler+0x76a>
      return;
 8009e60:	bf00      	nop
 8009e62:	e006      	b.n	8009e72 <HAL_UART_IRQHandler+0x76a>
    return;
 8009e64:	bf00      	nop
 8009e66:	e004      	b.n	8009e72 <HAL_UART_IRQHandler+0x76a>
      return;
 8009e68:	bf00      	nop
 8009e6a:	e002      	b.n	8009e72 <HAL_UART_IRQHandler+0x76a>
      return;
 8009e6c:	bf00      	nop
 8009e6e:	e000      	b.n	8009e72 <HAL_UART_IRQHandler+0x76a>
    return;
 8009e70:	bf00      	nop
  }
}
 8009e72:	37e8      	adds	r7, #232	@ 0xe8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	effffffe 	.word	0xeffffffe

08009e7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009efc:	b092      	sub	sp, #72	@ 0x48
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	689a      	ldr	r2, [r3, #8]
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	431a      	orrs	r2, r3
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	431a      	orrs	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	69db      	ldr	r3, [r3, #28]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	4bbe      	ldr	r3, [pc, #760]	@ (800a220 <UART_SetConfig+0x328>)
 8009f28:	4013      	ands	r3, r2
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	6812      	ldr	r2, [r2, #0]
 8009f2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f30:	430b      	orrs	r3, r1
 8009f32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4ab3      	ldr	r2, [pc, #716]	@ (800a224 <UART_SetConfig+0x32c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d004      	beq.n	8009f64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f60:	4313      	orrs	r3, r2
 8009f62:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689a      	ldr	r2, [r3, #8]
 8009f6a:	4baf      	ldr	r3, [pc, #700]	@ (800a228 <UART_SetConfig+0x330>)
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	6812      	ldr	r2, [r2, #0]
 8009f72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f74:	430b      	orrs	r3, r1
 8009f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7e:	f023 010f 	bic.w	r1, r3, #15
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4aa6      	ldr	r2, [pc, #664]	@ (800a22c <UART_SetConfig+0x334>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d177      	bne.n	800a088 <UART_SetConfig+0x190>
 8009f98:	4ba5      	ldr	r3, [pc, #660]	@ (800a230 <UART_SetConfig+0x338>)
 8009f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fa0:	2b28      	cmp	r3, #40	@ 0x28
 8009fa2:	d86d      	bhi.n	800a080 <UART_SetConfig+0x188>
 8009fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8009fac <UART_SetConfig+0xb4>)
 8009fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009faa:	bf00      	nop
 8009fac:	0800a051 	.word	0x0800a051
 8009fb0:	0800a081 	.word	0x0800a081
 8009fb4:	0800a081 	.word	0x0800a081
 8009fb8:	0800a081 	.word	0x0800a081
 8009fbc:	0800a081 	.word	0x0800a081
 8009fc0:	0800a081 	.word	0x0800a081
 8009fc4:	0800a081 	.word	0x0800a081
 8009fc8:	0800a081 	.word	0x0800a081
 8009fcc:	0800a059 	.word	0x0800a059
 8009fd0:	0800a081 	.word	0x0800a081
 8009fd4:	0800a081 	.word	0x0800a081
 8009fd8:	0800a081 	.word	0x0800a081
 8009fdc:	0800a081 	.word	0x0800a081
 8009fe0:	0800a081 	.word	0x0800a081
 8009fe4:	0800a081 	.word	0x0800a081
 8009fe8:	0800a081 	.word	0x0800a081
 8009fec:	0800a061 	.word	0x0800a061
 8009ff0:	0800a081 	.word	0x0800a081
 8009ff4:	0800a081 	.word	0x0800a081
 8009ff8:	0800a081 	.word	0x0800a081
 8009ffc:	0800a081 	.word	0x0800a081
 800a000:	0800a081 	.word	0x0800a081
 800a004:	0800a081 	.word	0x0800a081
 800a008:	0800a081 	.word	0x0800a081
 800a00c:	0800a069 	.word	0x0800a069
 800a010:	0800a081 	.word	0x0800a081
 800a014:	0800a081 	.word	0x0800a081
 800a018:	0800a081 	.word	0x0800a081
 800a01c:	0800a081 	.word	0x0800a081
 800a020:	0800a081 	.word	0x0800a081
 800a024:	0800a081 	.word	0x0800a081
 800a028:	0800a081 	.word	0x0800a081
 800a02c:	0800a071 	.word	0x0800a071
 800a030:	0800a081 	.word	0x0800a081
 800a034:	0800a081 	.word	0x0800a081
 800a038:	0800a081 	.word	0x0800a081
 800a03c:	0800a081 	.word	0x0800a081
 800a040:	0800a081 	.word	0x0800a081
 800a044:	0800a081 	.word	0x0800a081
 800a048:	0800a081 	.word	0x0800a081
 800a04c:	0800a079 	.word	0x0800a079
 800a050:	2301      	movs	r3, #1
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a056:	e222      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a058:	2304      	movs	r3, #4
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05e:	e21e      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a060:	2308      	movs	r3, #8
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a066:	e21a      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a068:	2310      	movs	r3, #16
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06e:	e216      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a070:	2320      	movs	r3, #32
 800a072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a076:	e212      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a078:	2340      	movs	r3, #64	@ 0x40
 800a07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07e:	e20e      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a080:	2380      	movs	r3, #128	@ 0x80
 800a082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a086:	e20a      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a69      	ldr	r2, [pc, #420]	@ (800a234 <UART_SetConfig+0x33c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d130      	bne.n	800a0f4 <UART_SetConfig+0x1fc>
 800a092:	4b67      	ldr	r3, [pc, #412]	@ (800a230 <UART_SetConfig+0x338>)
 800a094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a096:	f003 0307 	and.w	r3, r3, #7
 800a09a:	2b05      	cmp	r3, #5
 800a09c:	d826      	bhi.n	800a0ec <UART_SetConfig+0x1f4>
 800a09e:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a4 <UART_SetConfig+0x1ac>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a0bd 	.word	0x0800a0bd
 800a0a8:	0800a0c5 	.word	0x0800a0c5
 800a0ac:	0800a0cd 	.word	0x0800a0cd
 800a0b0:	0800a0d5 	.word	0x0800a0d5
 800a0b4:	0800a0dd 	.word	0x0800a0dd
 800a0b8:	0800a0e5 	.word	0x0800a0e5
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	e1ec      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a0c4:	2304      	movs	r3, #4
 800a0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ca:	e1e8      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a0cc:	2308      	movs	r3, #8
 800a0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d2:	e1e4      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a0d4:	2310      	movs	r3, #16
 800a0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0da:	e1e0      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a0dc:	2320      	movs	r3, #32
 800a0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e2:	e1dc      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a0e4:	2340      	movs	r3, #64	@ 0x40
 800a0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ea:	e1d8      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a0ec:	2380      	movs	r3, #128	@ 0x80
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f2:	e1d4      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a4f      	ldr	r2, [pc, #316]	@ (800a238 <UART_SetConfig+0x340>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d130      	bne.n	800a160 <UART_SetConfig+0x268>
 800a0fe:	4b4c      	ldr	r3, [pc, #304]	@ (800a230 <UART_SetConfig+0x338>)
 800a100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	2b05      	cmp	r3, #5
 800a108:	d826      	bhi.n	800a158 <UART_SetConfig+0x260>
 800a10a:	a201      	add	r2, pc, #4	@ (adr r2, 800a110 <UART_SetConfig+0x218>)
 800a10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a110:	0800a129 	.word	0x0800a129
 800a114:	0800a131 	.word	0x0800a131
 800a118:	0800a139 	.word	0x0800a139
 800a11c:	0800a141 	.word	0x0800a141
 800a120:	0800a149 	.word	0x0800a149
 800a124:	0800a151 	.word	0x0800a151
 800a128:	2300      	movs	r3, #0
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12e:	e1b6      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a130:	2304      	movs	r3, #4
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a136:	e1b2      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a138:	2308      	movs	r3, #8
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13e:	e1ae      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a140:	2310      	movs	r3, #16
 800a142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a146:	e1aa      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a148:	2320      	movs	r3, #32
 800a14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14e:	e1a6      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a150:	2340      	movs	r3, #64	@ 0x40
 800a152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a156:	e1a2      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a158:	2380      	movs	r3, #128	@ 0x80
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15e:	e19e      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a35      	ldr	r2, [pc, #212]	@ (800a23c <UART_SetConfig+0x344>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d130      	bne.n	800a1cc <UART_SetConfig+0x2d4>
 800a16a:	4b31      	ldr	r3, [pc, #196]	@ (800a230 <UART_SetConfig+0x338>)
 800a16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	2b05      	cmp	r3, #5
 800a174:	d826      	bhi.n	800a1c4 <UART_SetConfig+0x2cc>
 800a176:	a201      	add	r2, pc, #4	@ (adr r2, 800a17c <UART_SetConfig+0x284>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a195 	.word	0x0800a195
 800a180:	0800a19d 	.word	0x0800a19d
 800a184:	0800a1a5 	.word	0x0800a1a5
 800a188:	0800a1ad 	.word	0x0800a1ad
 800a18c:	0800a1b5 	.word	0x0800a1b5
 800a190:	0800a1bd 	.word	0x0800a1bd
 800a194:	2300      	movs	r3, #0
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19a:	e180      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a19c:	2304      	movs	r3, #4
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a2:	e17c      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a1a4:	2308      	movs	r3, #8
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1aa:	e178      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a1ac:	2310      	movs	r3, #16
 800a1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b2:	e174      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a1b4:	2320      	movs	r3, #32
 800a1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ba:	e170      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a1bc:	2340      	movs	r3, #64	@ 0x40
 800a1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c2:	e16c      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a1c4:	2380      	movs	r3, #128	@ 0x80
 800a1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ca:	e168      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a1b      	ldr	r2, [pc, #108]	@ (800a240 <UART_SetConfig+0x348>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d142      	bne.n	800a25c <UART_SetConfig+0x364>
 800a1d6:	4b16      	ldr	r3, [pc, #88]	@ (800a230 <UART_SetConfig+0x338>)
 800a1d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1da:	f003 0307 	and.w	r3, r3, #7
 800a1de:	2b05      	cmp	r3, #5
 800a1e0:	d838      	bhi.n	800a254 <UART_SetConfig+0x35c>
 800a1e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e8 <UART_SetConfig+0x2f0>)
 800a1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e8:	0800a201 	.word	0x0800a201
 800a1ec:	0800a209 	.word	0x0800a209
 800a1f0:	0800a211 	.word	0x0800a211
 800a1f4:	0800a219 	.word	0x0800a219
 800a1f8:	0800a245 	.word	0x0800a245
 800a1fc:	0800a24d 	.word	0x0800a24d
 800a200:	2300      	movs	r3, #0
 800a202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a206:	e14a      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a208:	2304      	movs	r3, #4
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20e:	e146      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a210:	2308      	movs	r3, #8
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a216:	e142      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a218:	2310      	movs	r3, #16
 800a21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21e:	e13e      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a220:	cfff69f3 	.word	0xcfff69f3
 800a224:	58000c00 	.word	0x58000c00
 800a228:	11fff4ff 	.word	0x11fff4ff
 800a22c:	40011000 	.word	0x40011000
 800a230:	58024400 	.word	0x58024400
 800a234:	40004400 	.word	0x40004400
 800a238:	40004800 	.word	0x40004800
 800a23c:	40004c00 	.word	0x40004c00
 800a240:	40005000 	.word	0x40005000
 800a244:	2320      	movs	r3, #32
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24a:	e128      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a24c:	2340      	movs	r3, #64	@ 0x40
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a252:	e124      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a254:	2380      	movs	r3, #128	@ 0x80
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25a:	e120      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4acb      	ldr	r2, [pc, #812]	@ (800a590 <UART_SetConfig+0x698>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d176      	bne.n	800a354 <UART_SetConfig+0x45c>
 800a266:	4bcb      	ldr	r3, [pc, #812]	@ (800a594 <UART_SetConfig+0x69c>)
 800a268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a26a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a26e:	2b28      	cmp	r3, #40	@ 0x28
 800a270:	d86c      	bhi.n	800a34c <UART_SetConfig+0x454>
 800a272:	a201      	add	r2, pc, #4	@ (adr r2, 800a278 <UART_SetConfig+0x380>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a31d 	.word	0x0800a31d
 800a27c:	0800a34d 	.word	0x0800a34d
 800a280:	0800a34d 	.word	0x0800a34d
 800a284:	0800a34d 	.word	0x0800a34d
 800a288:	0800a34d 	.word	0x0800a34d
 800a28c:	0800a34d 	.word	0x0800a34d
 800a290:	0800a34d 	.word	0x0800a34d
 800a294:	0800a34d 	.word	0x0800a34d
 800a298:	0800a325 	.word	0x0800a325
 800a29c:	0800a34d 	.word	0x0800a34d
 800a2a0:	0800a34d 	.word	0x0800a34d
 800a2a4:	0800a34d 	.word	0x0800a34d
 800a2a8:	0800a34d 	.word	0x0800a34d
 800a2ac:	0800a34d 	.word	0x0800a34d
 800a2b0:	0800a34d 	.word	0x0800a34d
 800a2b4:	0800a34d 	.word	0x0800a34d
 800a2b8:	0800a32d 	.word	0x0800a32d
 800a2bc:	0800a34d 	.word	0x0800a34d
 800a2c0:	0800a34d 	.word	0x0800a34d
 800a2c4:	0800a34d 	.word	0x0800a34d
 800a2c8:	0800a34d 	.word	0x0800a34d
 800a2cc:	0800a34d 	.word	0x0800a34d
 800a2d0:	0800a34d 	.word	0x0800a34d
 800a2d4:	0800a34d 	.word	0x0800a34d
 800a2d8:	0800a335 	.word	0x0800a335
 800a2dc:	0800a34d 	.word	0x0800a34d
 800a2e0:	0800a34d 	.word	0x0800a34d
 800a2e4:	0800a34d 	.word	0x0800a34d
 800a2e8:	0800a34d 	.word	0x0800a34d
 800a2ec:	0800a34d 	.word	0x0800a34d
 800a2f0:	0800a34d 	.word	0x0800a34d
 800a2f4:	0800a34d 	.word	0x0800a34d
 800a2f8:	0800a33d 	.word	0x0800a33d
 800a2fc:	0800a34d 	.word	0x0800a34d
 800a300:	0800a34d 	.word	0x0800a34d
 800a304:	0800a34d 	.word	0x0800a34d
 800a308:	0800a34d 	.word	0x0800a34d
 800a30c:	0800a34d 	.word	0x0800a34d
 800a310:	0800a34d 	.word	0x0800a34d
 800a314:	0800a34d 	.word	0x0800a34d
 800a318:	0800a345 	.word	0x0800a345
 800a31c:	2301      	movs	r3, #1
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a322:	e0bc      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a324:	2304      	movs	r3, #4
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32a:	e0b8      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a32c:	2308      	movs	r3, #8
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a332:	e0b4      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a334:	2310      	movs	r3, #16
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33a:	e0b0      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a33c:	2320      	movs	r3, #32
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a342:	e0ac      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a344:	2340      	movs	r3, #64	@ 0x40
 800a346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a34a:	e0a8      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a34c:	2380      	movs	r3, #128	@ 0x80
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a352:	e0a4      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a8f      	ldr	r2, [pc, #572]	@ (800a598 <UART_SetConfig+0x6a0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d130      	bne.n	800a3c0 <UART_SetConfig+0x4c8>
 800a35e:	4b8d      	ldr	r3, [pc, #564]	@ (800a594 <UART_SetConfig+0x69c>)
 800a360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a362:	f003 0307 	and.w	r3, r3, #7
 800a366:	2b05      	cmp	r3, #5
 800a368:	d826      	bhi.n	800a3b8 <UART_SetConfig+0x4c0>
 800a36a:	a201      	add	r2, pc, #4	@ (adr r2, 800a370 <UART_SetConfig+0x478>)
 800a36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a370:	0800a389 	.word	0x0800a389
 800a374:	0800a391 	.word	0x0800a391
 800a378:	0800a399 	.word	0x0800a399
 800a37c:	0800a3a1 	.word	0x0800a3a1
 800a380:	0800a3a9 	.word	0x0800a3a9
 800a384:	0800a3b1 	.word	0x0800a3b1
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38e:	e086      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a390:	2304      	movs	r3, #4
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e082      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a398:	2308      	movs	r3, #8
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39e:	e07e      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a6:	e07a      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a3a8:	2320      	movs	r3, #32
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ae:	e076      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a3b0:	2340      	movs	r3, #64	@ 0x40
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b6:	e072      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a3b8:	2380      	movs	r3, #128	@ 0x80
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e06e      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a75      	ldr	r2, [pc, #468]	@ (800a59c <UART_SetConfig+0x6a4>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d130      	bne.n	800a42c <UART_SetConfig+0x534>
 800a3ca:	4b72      	ldr	r3, [pc, #456]	@ (800a594 <UART_SetConfig+0x69c>)
 800a3cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	2b05      	cmp	r3, #5
 800a3d4:	d826      	bhi.n	800a424 <UART_SetConfig+0x52c>
 800a3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3dc <UART_SetConfig+0x4e4>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a3f5 	.word	0x0800a3f5
 800a3e0:	0800a3fd 	.word	0x0800a3fd
 800a3e4:	0800a405 	.word	0x0800a405
 800a3e8:	0800a40d 	.word	0x0800a40d
 800a3ec:	0800a415 	.word	0x0800a415
 800a3f0:	0800a41d 	.word	0x0800a41d
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fa:	e050      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a3fc:	2304      	movs	r3, #4
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e04c      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a404:	2308      	movs	r3, #8
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e048      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a40c:	2310      	movs	r3, #16
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a412:	e044      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a414:	2320      	movs	r3, #32
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41a:	e040      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a41c:	2340      	movs	r3, #64	@ 0x40
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a422:	e03c      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a424:	2380      	movs	r3, #128	@ 0x80
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e038      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a5b      	ldr	r2, [pc, #364]	@ (800a5a0 <UART_SetConfig+0x6a8>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d130      	bne.n	800a498 <UART_SetConfig+0x5a0>
 800a436:	4b57      	ldr	r3, [pc, #348]	@ (800a594 <UART_SetConfig+0x69c>)
 800a438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a43a:	f003 0307 	and.w	r3, r3, #7
 800a43e:	2b05      	cmp	r3, #5
 800a440:	d826      	bhi.n	800a490 <UART_SetConfig+0x598>
 800a442:	a201      	add	r2, pc, #4	@ (adr r2, 800a448 <UART_SetConfig+0x550>)
 800a444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a448:	0800a461 	.word	0x0800a461
 800a44c:	0800a469 	.word	0x0800a469
 800a450:	0800a471 	.word	0x0800a471
 800a454:	0800a479 	.word	0x0800a479
 800a458:	0800a481 	.word	0x0800a481
 800a45c:	0800a489 	.word	0x0800a489
 800a460:	2302      	movs	r3, #2
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a466:	e01a      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a468:	2304      	movs	r3, #4
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46e:	e016      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a470:	2308      	movs	r3, #8
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e012      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a478:	2310      	movs	r3, #16
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47e:	e00e      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a480:	2320      	movs	r3, #32
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a486:	e00a      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a488:	2340      	movs	r3, #64	@ 0x40
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48e:	e006      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a490:	2380      	movs	r3, #128	@ 0x80
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a496:	e002      	b.n	800a49e <UART_SetConfig+0x5a6>
 800a498:	2380      	movs	r3, #128	@ 0x80
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a3f      	ldr	r2, [pc, #252]	@ (800a5a0 <UART_SetConfig+0x6a8>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	f040 80f8 	bne.w	800a69a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	dc46      	bgt.n	800a540 <UART_SetConfig+0x648>
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	f2c0 8082 	blt.w	800a5bc <UART_SetConfig+0x6c4>
 800a4b8:	3b02      	subs	r3, #2
 800a4ba:	2b1e      	cmp	r3, #30
 800a4bc:	d87e      	bhi.n	800a5bc <UART_SetConfig+0x6c4>
 800a4be:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c4 <UART_SetConfig+0x5cc>)
 800a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c4:	0800a547 	.word	0x0800a547
 800a4c8:	0800a5bd 	.word	0x0800a5bd
 800a4cc:	0800a54f 	.word	0x0800a54f
 800a4d0:	0800a5bd 	.word	0x0800a5bd
 800a4d4:	0800a5bd 	.word	0x0800a5bd
 800a4d8:	0800a5bd 	.word	0x0800a5bd
 800a4dc:	0800a55f 	.word	0x0800a55f
 800a4e0:	0800a5bd 	.word	0x0800a5bd
 800a4e4:	0800a5bd 	.word	0x0800a5bd
 800a4e8:	0800a5bd 	.word	0x0800a5bd
 800a4ec:	0800a5bd 	.word	0x0800a5bd
 800a4f0:	0800a5bd 	.word	0x0800a5bd
 800a4f4:	0800a5bd 	.word	0x0800a5bd
 800a4f8:	0800a5bd 	.word	0x0800a5bd
 800a4fc:	0800a56f 	.word	0x0800a56f
 800a500:	0800a5bd 	.word	0x0800a5bd
 800a504:	0800a5bd 	.word	0x0800a5bd
 800a508:	0800a5bd 	.word	0x0800a5bd
 800a50c:	0800a5bd 	.word	0x0800a5bd
 800a510:	0800a5bd 	.word	0x0800a5bd
 800a514:	0800a5bd 	.word	0x0800a5bd
 800a518:	0800a5bd 	.word	0x0800a5bd
 800a51c:	0800a5bd 	.word	0x0800a5bd
 800a520:	0800a5bd 	.word	0x0800a5bd
 800a524:	0800a5bd 	.word	0x0800a5bd
 800a528:	0800a5bd 	.word	0x0800a5bd
 800a52c:	0800a5bd 	.word	0x0800a5bd
 800a530:	0800a5bd 	.word	0x0800a5bd
 800a534:	0800a5bd 	.word	0x0800a5bd
 800a538:	0800a5bd 	.word	0x0800a5bd
 800a53c:	0800a5af 	.word	0x0800a5af
 800a540:	2b40      	cmp	r3, #64	@ 0x40
 800a542:	d037      	beq.n	800a5b4 <UART_SetConfig+0x6bc>
 800a544:	e03a      	b.n	800a5bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a546:	f7fe f83d 	bl	80085c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a54a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a54c:	e03c      	b.n	800a5c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a54e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe f84c 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a55c:	e034      	b.n	800a5c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a55e:	f107 0318 	add.w	r3, r7, #24
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe f998 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a56c:	e02c      	b.n	800a5c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a56e:	4b09      	ldr	r3, [pc, #36]	@ (800a594 <UART_SetConfig+0x69c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 0320 	and.w	r3, r3, #32
 800a576:	2b00      	cmp	r3, #0
 800a578:	d016      	beq.n	800a5a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a57a:	4b06      	ldr	r3, [pc, #24]	@ (800a594 <UART_SetConfig+0x69c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	08db      	lsrs	r3, r3, #3
 800a580:	f003 0303 	and.w	r3, r3, #3
 800a584:	4a07      	ldr	r2, [pc, #28]	@ (800a5a4 <UART_SetConfig+0x6ac>)
 800a586:	fa22 f303 	lsr.w	r3, r2, r3
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a58c:	e01c      	b.n	800a5c8 <UART_SetConfig+0x6d0>
 800a58e:	bf00      	nop
 800a590:	40011400 	.word	0x40011400
 800a594:	58024400 	.word	0x58024400
 800a598:	40007800 	.word	0x40007800
 800a59c:	40007c00 	.word	0x40007c00
 800a5a0:	58000c00 	.word	0x58000c00
 800a5a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a5a8:	4b9d      	ldr	r3, [pc, #628]	@ (800a820 <UART_SetConfig+0x928>)
 800a5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ac:	e00c      	b.n	800a5c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5ae:	4b9d      	ldr	r3, [pc, #628]	@ (800a824 <UART_SetConfig+0x92c>)
 800a5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b2:	e009      	b.n	800a5c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ba:	e005      	b.n	800a5c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a5c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 81de 	beq.w	800a98c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d4:	4a94      	ldr	r2, [pc, #592]	@ (800a828 <UART_SetConfig+0x930>)
 800a5d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5de:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	4413      	add	r3, r2
 800a5ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d305      	bcc.n	800a600 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d903      	bls.n	800a608 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a606:	e1c1      	b.n	800a98c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a60a:	2200      	movs	r2, #0
 800a60c:	60bb      	str	r3, [r7, #8]
 800a60e:	60fa      	str	r2, [r7, #12]
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a614:	4a84      	ldr	r2, [pc, #528]	@ (800a828 <UART_SetConfig+0x930>)
 800a616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	2200      	movs	r2, #0
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	607a      	str	r2, [r7, #4]
 800a622:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a62a:	f7f5 ff11 	bl	8000450 <__aeabi_uldivmod>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	4610      	mov	r0, r2
 800a634:	4619      	mov	r1, r3
 800a636:	f04f 0200 	mov.w	r2, #0
 800a63a:	f04f 0300 	mov.w	r3, #0
 800a63e:	020b      	lsls	r3, r1, #8
 800a640:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a644:	0202      	lsls	r2, r0, #8
 800a646:	6979      	ldr	r1, [r7, #20]
 800a648:	6849      	ldr	r1, [r1, #4]
 800a64a:	0849      	lsrs	r1, r1, #1
 800a64c:	2000      	movs	r0, #0
 800a64e:	460c      	mov	r4, r1
 800a650:	4605      	mov	r5, r0
 800a652:	eb12 0804 	adds.w	r8, r2, r4
 800a656:	eb43 0905 	adc.w	r9, r3, r5
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	469a      	mov	sl, r3
 800a662:	4693      	mov	fp, r2
 800a664:	4652      	mov	r2, sl
 800a666:	465b      	mov	r3, fp
 800a668:	4640      	mov	r0, r8
 800a66a:	4649      	mov	r1, r9
 800a66c:	f7f5 fef0 	bl	8000450 <__aeabi_uldivmod>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	4613      	mov	r3, r2
 800a676:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a67e:	d308      	bcc.n	800a692 <UART_SetConfig+0x79a>
 800a680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a686:	d204      	bcs.n	800a692 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a68e:	60da      	str	r2, [r3, #12]
 800a690:	e17c      	b.n	800a98c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a698:	e178      	b.n	800a98c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	69db      	ldr	r3, [r3, #28]
 800a69e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6a2:	f040 80c5 	bne.w	800a830 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a6a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	2b20      	cmp	r3, #32
 800a6ac:	dc48      	bgt.n	800a740 <UART_SetConfig+0x848>
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	db7b      	blt.n	800a7aa <UART_SetConfig+0x8b2>
 800a6b2:	2b20      	cmp	r3, #32
 800a6b4:	d879      	bhi.n	800a7aa <UART_SetConfig+0x8b2>
 800a6b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6bc <UART_SetConfig+0x7c4>)
 800a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6bc:	0800a747 	.word	0x0800a747
 800a6c0:	0800a74f 	.word	0x0800a74f
 800a6c4:	0800a7ab 	.word	0x0800a7ab
 800a6c8:	0800a7ab 	.word	0x0800a7ab
 800a6cc:	0800a757 	.word	0x0800a757
 800a6d0:	0800a7ab 	.word	0x0800a7ab
 800a6d4:	0800a7ab 	.word	0x0800a7ab
 800a6d8:	0800a7ab 	.word	0x0800a7ab
 800a6dc:	0800a767 	.word	0x0800a767
 800a6e0:	0800a7ab 	.word	0x0800a7ab
 800a6e4:	0800a7ab 	.word	0x0800a7ab
 800a6e8:	0800a7ab 	.word	0x0800a7ab
 800a6ec:	0800a7ab 	.word	0x0800a7ab
 800a6f0:	0800a7ab 	.word	0x0800a7ab
 800a6f4:	0800a7ab 	.word	0x0800a7ab
 800a6f8:	0800a7ab 	.word	0x0800a7ab
 800a6fc:	0800a777 	.word	0x0800a777
 800a700:	0800a7ab 	.word	0x0800a7ab
 800a704:	0800a7ab 	.word	0x0800a7ab
 800a708:	0800a7ab 	.word	0x0800a7ab
 800a70c:	0800a7ab 	.word	0x0800a7ab
 800a710:	0800a7ab 	.word	0x0800a7ab
 800a714:	0800a7ab 	.word	0x0800a7ab
 800a718:	0800a7ab 	.word	0x0800a7ab
 800a71c:	0800a7ab 	.word	0x0800a7ab
 800a720:	0800a7ab 	.word	0x0800a7ab
 800a724:	0800a7ab 	.word	0x0800a7ab
 800a728:	0800a7ab 	.word	0x0800a7ab
 800a72c:	0800a7ab 	.word	0x0800a7ab
 800a730:	0800a7ab 	.word	0x0800a7ab
 800a734:	0800a7ab 	.word	0x0800a7ab
 800a738:	0800a7ab 	.word	0x0800a7ab
 800a73c:	0800a79d 	.word	0x0800a79d
 800a740:	2b40      	cmp	r3, #64	@ 0x40
 800a742:	d02e      	beq.n	800a7a2 <UART_SetConfig+0x8aa>
 800a744:	e031      	b.n	800a7aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a746:	f7fc fcc5 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 800a74a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a74c:	e033      	b.n	800a7b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a74e:	f7fc fcd7 	bl	8007100 <HAL_RCC_GetPCLK2Freq>
 800a752:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a754:	e02f      	b.n	800a7b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fd ff48 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a764:	e027      	b.n	800a7b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a766:	f107 0318 	add.w	r3, r7, #24
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe f894 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a774:	e01f      	b.n	800a7b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a776:	4b2d      	ldr	r3, [pc, #180]	@ (800a82c <UART_SetConfig+0x934>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0320 	and.w	r3, r3, #32
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d009      	beq.n	800a796 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a782:	4b2a      	ldr	r3, [pc, #168]	@ (800a82c <UART_SetConfig+0x934>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	08db      	lsrs	r3, r3, #3
 800a788:	f003 0303 	and.w	r3, r3, #3
 800a78c:	4a24      	ldr	r2, [pc, #144]	@ (800a820 <UART_SetConfig+0x928>)
 800a78e:	fa22 f303 	lsr.w	r3, r2, r3
 800a792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a794:	e00f      	b.n	800a7b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a796:	4b22      	ldr	r3, [pc, #136]	@ (800a820 <UART_SetConfig+0x928>)
 800a798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a79a:	e00c      	b.n	800a7b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a79c:	4b21      	ldr	r3, [pc, #132]	@ (800a824 <UART_SetConfig+0x92c>)
 800a79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a0:	e009      	b.n	800a7b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a8:	e005      	b.n	800a7b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a7b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 80e7 	beq.w	800a98c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c2:	4a19      	ldr	r2, [pc, #100]	@ (800a828 <UART_SetConfig+0x930>)
 800a7c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7d0:	005a      	lsls	r2, r3, #1
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	085b      	lsrs	r3, r3, #1
 800a7d8:	441a      	add	r2, r3
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e6:	2b0f      	cmp	r3, #15
 800a7e8:	d916      	bls.n	800a818 <UART_SetConfig+0x920>
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7f0:	d212      	bcs.n	800a818 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	f023 030f 	bic.w	r3, r3, #15
 800a7fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fe:	085b      	lsrs	r3, r3, #1
 800a800:	b29b      	uxth	r3, r3
 800a802:	f003 0307 	and.w	r3, r3, #7
 800a806:	b29a      	uxth	r2, r3
 800a808:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a80a:	4313      	orrs	r3, r2
 800a80c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a814:	60da      	str	r2, [r3, #12]
 800a816:	e0b9      	b.n	800a98c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a81e:	e0b5      	b.n	800a98c <UART_SetConfig+0xa94>
 800a820:	03d09000 	.word	0x03d09000
 800a824:	003d0900 	.word	0x003d0900
 800a828:	0801eba4 	.word	0x0801eba4
 800a82c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a830:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a834:	2b20      	cmp	r3, #32
 800a836:	dc49      	bgt.n	800a8cc <UART_SetConfig+0x9d4>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	db7c      	blt.n	800a936 <UART_SetConfig+0xa3e>
 800a83c:	2b20      	cmp	r3, #32
 800a83e:	d87a      	bhi.n	800a936 <UART_SetConfig+0xa3e>
 800a840:	a201      	add	r2, pc, #4	@ (adr r2, 800a848 <UART_SetConfig+0x950>)
 800a842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a846:	bf00      	nop
 800a848:	0800a8d3 	.word	0x0800a8d3
 800a84c:	0800a8db 	.word	0x0800a8db
 800a850:	0800a937 	.word	0x0800a937
 800a854:	0800a937 	.word	0x0800a937
 800a858:	0800a8e3 	.word	0x0800a8e3
 800a85c:	0800a937 	.word	0x0800a937
 800a860:	0800a937 	.word	0x0800a937
 800a864:	0800a937 	.word	0x0800a937
 800a868:	0800a8f3 	.word	0x0800a8f3
 800a86c:	0800a937 	.word	0x0800a937
 800a870:	0800a937 	.word	0x0800a937
 800a874:	0800a937 	.word	0x0800a937
 800a878:	0800a937 	.word	0x0800a937
 800a87c:	0800a937 	.word	0x0800a937
 800a880:	0800a937 	.word	0x0800a937
 800a884:	0800a937 	.word	0x0800a937
 800a888:	0800a903 	.word	0x0800a903
 800a88c:	0800a937 	.word	0x0800a937
 800a890:	0800a937 	.word	0x0800a937
 800a894:	0800a937 	.word	0x0800a937
 800a898:	0800a937 	.word	0x0800a937
 800a89c:	0800a937 	.word	0x0800a937
 800a8a0:	0800a937 	.word	0x0800a937
 800a8a4:	0800a937 	.word	0x0800a937
 800a8a8:	0800a937 	.word	0x0800a937
 800a8ac:	0800a937 	.word	0x0800a937
 800a8b0:	0800a937 	.word	0x0800a937
 800a8b4:	0800a937 	.word	0x0800a937
 800a8b8:	0800a937 	.word	0x0800a937
 800a8bc:	0800a937 	.word	0x0800a937
 800a8c0:	0800a937 	.word	0x0800a937
 800a8c4:	0800a937 	.word	0x0800a937
 800a8c8:	0800a929 	.word	0x0800a929
 800a8cc:	2b40      	cmp	r3, #64	@ 0x40
 800a8ce:	d02e      	beq.n	800a92e <UART_SetConfig+0xa36>
 800a8d0:	e031      	b.n	800a936 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8d2:	f7fc fbff 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 800a8d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8d8:	e033      	b.n	800a942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8da:	f7fc fc11 	bl	8007100 <HAL_RCC_GetPCLK2Freq>
 800a8de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8e0:	e02f      	b.n	800a942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fd fe82 	bl	80085f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f0:	e027      	b.n	800a942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8f2:	f107 0318 	add.w	r3, r7, #24
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fd ffce 	bl	8008898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a900:	e01f      	b.n	800a942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a902:	4b2d      	ldr	r3, [pc, #180]	@ (800a9b8 <UART_SetConfig+0xac0>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0320 	and.w	r3, r3, #32
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d009      	beq.n	800a922 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a90e:	4b2a      	ldr	r3, [pc, #168]	@ (800a9b8 <UART_SetConfig+0xac0>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	08db      	lsrs	r3, r3, #3
 800a914:	f003 0303 	and.w	r3, r3, #3
 800a918:	4a28      	ldr	r2, [pc, #160]	@ (800a9bc <UART_SetConfig+0xac4>)
 800a91a:	fa22 f303 	lsr.w	r3, r2, r3
 800a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a920:	e00f      	b.n	800a942 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a922:	4b26      	ldr	r3, [pc, #152]	@ (800a9bc <UART_SetConfig+0xac4>)
 800a924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a926:	e00c      	b.n	800a942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a928:	4b25      	ldr	r3, [pc, #148]	@ (800a9c0 <UART_SetConfig+0xac8>)
 800a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a92c:	e009      	b.n	800a942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a92e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a934:	e005      	b.n	800a942 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a936:	2300      	movs	r3, #0
 800a938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a940:	bf00      	nop
    }

    if (pclk != 0U)
 800a942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a944:	2b00      	cmp	r3, #0
 800a946:	d021      	beq.n	800a98c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94c:	4a1d      	ldr	r2, [pc, #116]	@ (800a9c4 <UART_SetConfig+0xacc>)
 800a94e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a952:	461a      	mov	r2, r3
 800a954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a956:	fbb3 f2f2 	udiv	r2, r3, r2
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	085b      	lsrs	r3, r3, #1
 800a960:	441a      	add	r2, r3
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	fbb2 f3f3 	udiv	r3, r2, r3
 800a96a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	2b0f      	cmp	r3, #15
 800a970:	d909      	bls.n	800a986 <UART_SetConfig+0xa8e>
 800a972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a978:	d205      	bcs.n	800a986 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	60da      	str	r2, [r3, #12]
 800a984:	e002      	b.n	800a98c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	2201      	movs	r2, #1
 800a990:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2201      	movs	r2, #1
 800a998:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a9a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3748      	adds	r7, #72	@ 0x48
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9b6:	bf00      	nop
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	03d09000 	.word	0x03d09000
 800a9c0:	003d0900 	.word	0x003d0900
 800a9c4:	0801eba4 	.word	0x0801eba4

0800a9c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d4:	f003 0308 	and.w	r3, r3, #8
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00a      	beq.n	800a9f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa18:	f003 0302 	and.w	r3, r3, #2
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00a      	beq.n	800aa36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	430a      	orrs	r2, r1
 800aa34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3a:	f003 0304 	and.w	r3, r3, #4
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00a      	beq.n	800aa58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	430a      	orrs	r2, r1
 800aa56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5c:	f003 0310 	and.w	r3, r3, #16
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00a      	beq.n	800aa7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa7e:	f003 0320 	and.w	r3, r3, #32
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d01a      	beq.n	800aade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	430a      	orrs	r2, r1
 800aabc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aac6:	d10a      	bne.n	800aade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	430a      	orrs	r2, r1
 800aadc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	430a      	orrs	r2, r1
 800aafe:	605a      	str	r2, [r3, #4]
  }
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b098      	sub	sp, #96	@ 0x60
 800ab10:	af02      	add	r7, sp, #8
 800ab12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab1c:	f7f7 fc30 	bl	8002380 <HAL_GetTick>
 800ab20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 0308 	and.w	r3, r3, #8
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d12f      	bne.n	800ab90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f88e 	bl	800ac60 <UART_WaitOnFlagUntilTimeout>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d022      	beq.n	800ab90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab52:	e853 3f00 	ldrex	r3, [r3]
 800ab56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	461a      	mov	r2, r3
 800ab66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab68:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab70:	e841 2300 	strex	r3, r2, [r1]
 800ab74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1e6      	bne.n	800ab4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2220      	movs	r2, #32
 800ab80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e063      	b.n	800ac58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f003 0304 	and.w	r3, r3, #4
 800ab9a:	2b04      	cmp	r3, #4
 800ab9c:	d149      	bne.n	800ac32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aba6:	2200      	movs	r2, #0
 800aba8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f857 	bl	800ac60 <UART_WaitOnFlagUntilTimeout>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d03c      	beq.n	800ac32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	623b      	str	r3, [r7, #32]
   return(result);
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800abd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e6      	bne.n	800abb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3308      	adds	r3, #8
 800abf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	60fb      	str	r3, [r7, #12]
   return(result);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f023 0301 	bic.w	r3, r3, #1
 800ac00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	3308      	adds	r3, #8
 800ac08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac0a:	61fa      	str	r2, [r7, #28]
 800ac0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0e:	69b9      	ldr	r1, [r7, #24]
 800ac10:	69fa      	ldr	r2, [r7, #28]
 800ac12:	e841 2300 	strex	r3, r2, [r1]
 800ac16:	617b      	str	r3, [r7, #20]
   return(result);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1e5      	bne.n	800abea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2220      	movs	r2, #32
 800ac22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e012      	b.n	800ac58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2220      	movs	r2, #32
 800ac36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2220      	movs	r2, #32
 800ac3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3758      	adds	r7, #88	@ 0x58
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac70:	e04f      	b.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac78:	d04b      	beq.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac7a:	f7f7 fb81 	bl	8002380 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	69ba      	ldr	r2, [r7, #24]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d302      	bcc.n	800ac90 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d101      	bne.n	800ac94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac90:	2303      	movs	r3, #3
 800ac92:	e04e      	b.n	800ad32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 0304 	and.w	r3, r3, #4
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d037      	beq.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b80      	cmp	r3, #128	@ 0x80
 800aca6:	d034      	beq.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2b40      	cmp	r3, #64	@ 0x40
 800acac:	d031      	beq.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	69db      	ldr	r3, [r3, #28]
 800acb4:	f003 0308 	and.w	r3, r3, #8
 800acb8:	2b08      	cmp	r3, #8
 800acba:	d110      	bne.n	800acde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2208      	movs	r2, #8
 800acc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 f921 	bl	800af0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2208      	movs	r2, #8
 800acce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e029      	b.n	800ad32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	69db      	ldr	r3, [r3, #28]
 800ace4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ace8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acec:	d111      	bne.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800acf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f907 	bl	800af0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2220      	movs	r2, #32
 800ad02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e00f      	b.n	800ad32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	69da      	ldr	r2, [r3, #28]
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	bf0c      	ite	eq
 800ad22:	2301      	moveq	r3, #1
 800ad24:	2300      	movne	r3, #0
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	461a      	mov	r2, r3
 800ad2a:	79fb      	ldrb	r3, [r7, #7]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d0a0      	beq.n	800ac72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
	...

0800ad3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b096      	sub	sp, #88	@ 0x58
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	4613      	mov	r3, r2
 800ad48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	88fa      	ldrh	r2, [r7, #6]
 800ad54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2222      	movs	r2, #34	@ 0x22
 800ad64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d02d      	beq.n	800adce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad78:	4a40      	ldr	r2, [pc, #256]	@ (800ae7c <UART_Start_Receive_DMA+0x140>)
 800ad7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad82:	4a3f      	ldr	r2, [pc, #252]	@ (800ae80 <UART_Start_Receive_DMA+0x144>)
 800ad84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad8c:	4a3d      	ldr	r2, [pc, #244]	@ (800ae84 <UART_Start_Receive_DMA+0x148>)
 800ad8e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad96:	2200      	movs	r2, #0
 800ad98:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3324      	adds	r3, #36	@ 0x24
 800ada6:	4619      	mov	r1, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adac:	461a      	mov	r2, r3
 800adae:	88fb      	ldrh	r3, [r7, #6]
 800adb0:	f7f7 ff72 	bl	8002c98 <HAL_DMA_Start_IT>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d009      	beq.n	800adce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2210      	movs	r2, #16
 800adbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2220      	movs	r2, #32
 800adc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e051      	b.n	800ae72 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d018      	beq.n	800ae08 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800addc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adde:	e853 3f00 	ldrex	r3, [r3]
 800ade2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ade4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adea:	657b      	str	r3, [r7, #84]	@ 0x54
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	461a      	mov	r2, r3
 800adf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adf6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800adfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adfc:	e841 2300 	strex	r3, r2, [r1]
 800ae00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ae02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e6      	bne.n	800add6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	3308      	adds	r3, #8
 800ae0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae12:	e853 3f00 	ldrex	r3, [r3]
 800ae16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1a:	f043 0301 	orr.w	r3, r3, #1
 800ae1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3308      	adds	r3, #8
 800ae26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae28:	637a      	str	r2, [r7, #52]	@ 0x34
 800ae2a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae30:	e841 2300 	strex	r3, r2, [r1]
 800ae34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ae36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e5      	bne.n	800ae08 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3308      	adds	r3, #8
 800ae42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	e853 3f00 	ldrex	r3, [r3]
 800ae4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3308      	adds	r3, #8
 800ae5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae5c:	623a      	str	r2, [r7, #32]
 800ae5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae60:	69f9      	ldr	r1, [r7, #28]
 800ae62:	6a3a      	ldr	r2, [r7, #32]
 800ae64:	e841 2300 	strex	r3, r2, [r1]
 800ae68:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1e5      	bne.n	800ae3c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3758      	adds	r7, #88	@ 0x58
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	0800b08b 	.word	0x0800b08b
 800ae80:	0800b1b3 	.word	0x0800b1b3
 800ae84:	0800b1f1 	.word	0x0800b1f1

0800ae88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b08f      	sub	sp, #60	@ 0x3c
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aea4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aeb0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aeb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aeb6:	e841 2300 	strex	r3, r2, [r1]
 800aeba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1e6      	bne.n	800ae90 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3308      	adds	r3, #8
 800aec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	e853 3f00 	ldrex	r3, [r3]
 800aed0:	60bb      	str	r3, [r7, #8]
   return(result);
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aed8:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3308      	adds	r3, #8
 800aee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aee2:	61ba      	str	r2, [r7, #24]
 800aee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee6:	6979      	ldr	r1, [r7, #20]
 800aee8:	69ba      	ldr	r2, [r7, #24]
 800aeea:	e841 2300 	strex	r3, r2, [r1]
 800aeee:	613b      	str	r3, [r7, #16]
   return(result);
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e5      	bne.n	800aec2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aefe:	bf00      	nop
 800af00:	373c      	adds	r7, #60	@ 0x3c
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
	...

0800af0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b095      	sub	sp, #84	@ 0x54
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af1c:	e853 3f00 	ldrex	r3, [r3]
 800af20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af32:	643b      	str	r3, [r7, #64]	@ 0x40
 800af34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af3a:	e841 2300 	strex	r3, r2, [r1]
 800af3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e6      	bne.n	800af14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	3308      	adds	r3, #8
 800af4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4e:	6a3b      	ldr	r3, [r7, #32]
 800af50:	e853 3f00 	ldrex	r3, [r3]
 800af54:	61fb      	str	r3, [r7, #28]
   return(result);
 800af56:	69fa      	ldr	r2, [r7, #28]
 800af58:	4b1e      	ldr	r3, [pc, #120]	@ (800afd4 <UART_EndRxTransfer+0xc8>)
 800af5a:	4013      	ands	r3, r2
 800af5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3308      	adds	r3, #8
 800af64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af6e:	e841 2300 	strex	r3, r2, [r1]
 800af72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1e5      	bne.n	800af46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d118      	bne.n	800afb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	e853 3f00 	ldrex	r3, [r3]
 800af8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f023 0310 	bic.w	r3, r3, #16
 800af96:	647b      	str	r3, [r7, #68]	@ 0x44
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	461a      	mov	r2, r3
 800af9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afa0:	61bb      	str	r3, [r7, #24]
 800afa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa4:	6979      	ldr	r1, [r7, #20]
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	e841 2300 	strex	r3, r2, [r1]
 800afac:	613b      	str	r3, [r7, #16]
   return(result);
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1e6      	bne.n	800af82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2220      	movs	r2, #32
 800afb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afc8:	bf00      	nop
 800afca:	3754      	adds	r7, #84	@ 0x54
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr
 800afd4:	effffffe 	.word	0xeffffffe

0800afd8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b090      	sub	sp, #64	@ 0x40
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	69db      	ldr	r3, [r3, #28]
 800afea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afee:	d037      	beq.n	800b060 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800aff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aff2:	2200      	movs	r2, #0
 800aff4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3308      	adds	r3, #8
 800affe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b002:	e853 3f00 	ldrex	r3, [r3]
 800b006:	623b      	str	r3, [r7, #32]
   return(result);
 800b008:	6a3b      	ldr	r3, [r7, #32]
 800b00a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b00e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3308      	adds	r3, #8
 800b016:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b018:	633a      	str	r2, [r7, #48]	@ 0x30
 800b01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b01e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b020:	e841 2300 	strex	r3, r2, [r1]
 800b024:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1e5      	bne.n	800aff8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	e853 3f00 	ldrex	r3, [r3]
 800b038:	60fb      	str	r3, [r7, #12]
   return(result);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b040:	637b      	str	r3, [r7, #52]	@ 0x34
 800b042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	461a      	mov	r2, r3
 800b048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b04a:	61fb      	str	r3, [r7, #28]
 800b04c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04e:	69b9      	ldr	r1, [r7, #24]
 800b050:	69fa      	ldr	r2, [r7, #28]
 800b052:	e841 2300 	strex	r3, r2, [r1]
 800b056:	617b      	str	r3, [r7, #20]
   return(result);
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1e6      	bne.n	800b02c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b05e:	e002      	b.n	800b066 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b060:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b062:	f7fe ff0b 	bl	8009e7c <HAL_UART_TxCpltCallback>
}
 800b066:	bf00      	nop
 800b068:	3740      	adds	r7, #64	@ 0x40
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f7fe ff07 	bl	8009e90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b082:	bf00      	nop
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b09c      	sub	sp, #112	@ 0x70
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b096:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0a0:	d071      	beq.n	800b186 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b0a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0b2:	e853 3f00 	ldrex	r3, [r3]
 800b0b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b0b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0be:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b0ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0d0:	e841 2300 	strex	r3, r2, [r1]
 800b0d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1e6      	bne.n	800b0aa <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3308      	adds	r3, #8
 800b0e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ee:	f023 0301 	bic.w	r3, r3, #1
 800b0f2:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b0fc:	647a      	str	r2, [r7, #68]	@ 0x44
 800b0fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b100:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b104:	e841 2300 	strex	r3, r2, [r1]
 800b108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1e5      	bne.n	800b0dc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3308      	adds	r3, #8
 800b116:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11a:	e853 3f00 	ldrex	r3, [r3]
 800b11e:	623b      	str	r3, [r7, #32]
   return(result);
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b126:	663b      	str	r3, [r7, #96]	@ 0x60
 800b128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3308      	adds	r3, #8
 800b12e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b130:	633a      	str	r2, [r7, #48]	@ 0x30
 800b132:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b134:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b138:	e841 2300 	strex	r3, r2, [r1]
 800b13c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1e5      	bne.n	800b110 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b146:	2220      	movs	r2, #32
 800b148:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b14c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b14e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b150:	2b01      	cmp	r3, #1
 800b152:	d118      	bne.n	800b186 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	e853 3f00 	ldrex	r3, [r3]
 800b160:	60fb      	str	r3, [r7, #12]
   return(result);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f023 0310 	bic.w	r3, r3, #16
 800b168:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b16a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	461a      	mov	r2, r3
 800b170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b172:	61fb      	str	r3, [r7, #28]
 800b174:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b176:	69b9      	ldr	r1, [r7, #24]
 800b178:	69fa      	ldr	r2, [r7, #28]
 800b17a:	e841 2300 	strex	r3, r2, [r1]
 800b17e:	617b      	str	r3, [r7, #20]
   return(result);
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e6      	bne.n	800b154 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b188:	2200      	movs	r2, #0
 800b18a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b18c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b18e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b190:	2b01      	cmp	r3, #1
 800b192:	d107      	bne.n	800b1a4 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b196:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b19a:	4619      	mov	r1, r3
 800b19c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b19e:	f7fe fe9f 	bl	8009ee0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1a2:	e002      	b.n	800b1aa <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b1a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b1a6:	f7fe fe7d 	bl	8009ea4 <HAL_UART_RxCpltCallback>
}
 800b1aa:	bf00      	nop
 800b1ac:	3770      	adds	r7, #112	@ 0x70
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1be:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d109      	bne.n	800b1e2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1d4:	085b      	lsrs	r3, r3, #1
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	4619      	mov	r1, r3
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f7fe fe80 	bl	8009ee0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1e0:	e002      	b.n	800b1e8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7fe fe68 	bl	8009eb8 <HAL_UART_RxHalfCpltCallback>
}
 800b1e8:	bf00      	nop
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b204:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b20c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b218:	2b80      	cmp	r3, #128	@ 0x80
 800b21a:	d109      	bne.n	800b230 <UART_DMAError+0x40>
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2b21      	cmp	r3, #33	@ 0x21
 800b220:	d106      	bne.n	800b230 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2200      	movs	r2, #0
 800b226:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b22a:	6978      	ldr	r0, [r7, #20]
 800b22c:	f7ff fe2c 	bl	800ae88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b23a:	2b40      	cmp	r3, #64	@ 0x40
 800b23c:	d109      	bne.n	800b252 <UART_DMAError+0x62>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b22      	cmp	r3, #34	@ 0x22
 800b242:	d106      	bne.n	800b252 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	2200      	movs	r2, #0
 800b248:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b24c:	6978      	ldr	r0, [r7, #20]
 800b24e:	f7ff fe5d 	bl	800af0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b258:	f043 0210 	orr.w	r2, r3, #16
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b262:	6978      	ldr	r0, [r7, #20]
 800b264:	f7fe fe32 	bl	8009ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b268:	bf00      	nop
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b27c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f7fe fe1c 	bl	8009ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b294:	bf00      	nop
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b088      	sub	sp, #32
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	e853 3f00 	ldrex	r3, [r3]
 800b2b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2b8:	61fb      	str	r3, [r7, #28]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	61bb      	str	r3, [r7, #24]
 800b2c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c6:	6979      	ldr	r1, [r7, #20]
 800b2c8:	69ba      	ldr	r2, [r7, #24]
 800b2ca:	e841 2300 	strex	r3, r2, [r1]
 800b2ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1e6      	bne.n	800b2a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2220      	movs	r2, #32
 800b2da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7fe fdc9 	bl	8009e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ea:	bf00      	nop
 800b2ec:	3720      	adds	r7, #32
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b30e:	bf00      	nop
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b083      	sub	sp, #12
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b322:	bf00      	nop
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b32e:	b480      	push	{r7}
 800b330:	b085      	sub	sp, #20
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d101      	bne.n	800b344 <HAL_UARTEx_DisableFifoMode+0x16>
 800b340:	2302      	movs	r3, #2
 800b342:	e027      	b.n	800b394 <HAL_UARTEx_DisableFifoMode+0x66>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2224      	movs	r2, #36	@ 0x24
 800b350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f022 0201 	bic.w	r2, r2, #1
 800b36a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b372:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2220      	movs	r2, #32
 800b386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d101      	bne.n	800b3b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3b4:	2302      	movs	r3, #2
 800b3b6:	e02d      	b.n	800b414 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2224      	movs	r2, #36	@ 0x24
 800b3c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f022 0201 	bic.w	r2, r2, #1
 800b3de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	430a      	orrs	r2, r1
 800b3f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 f84f 	bl	800b498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2220      	movs	r2, #32
 800b406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d101      	bne.n	800b434 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b430:	2302      	movs	r3, #2
 800b432:	e02d      	b.n	800b490 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2224      	movs	r2, #36	@ 0x24
 800b440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f022 0201 	bic.w	r2, r2, #1
 800b45a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	430a      	orrs	r2, r1
 800b46e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f811 	bl	800b498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2220      	movs	r2, #32
 800b482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d108      	bne.n	800b4ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4b8:	e031      	b.n	800b51e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4ba:	2310      	movs	r3, #16
 800b4bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4be:	2310      	movs	r3, #16
 800b4c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	0e5b      	lsrs	r3, r3, #25
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	f003 0307 	and.w	r3, r3, #7
 800b4d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	0f5b      	lsrs	r3, r3, #29
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	f003 0307 	and.w	r3, r3, #7
 800b4e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4e2:	7bbb      	ldrb	r3, [r7, #14]
 800b4e4:	7b3a      	ldrb	r2, [r7, #12]
 800b4e6:	4911      	ldr	r1, [pc, #68]	@ (800b52c <UARTEx_SetNbDataToProcess+0x94>)
 800b4e8:	5c8a      	ldrb	r2, [r1, r2]
 800b4ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4ee:	7b3a      	ldrb	r2, [r7, #12]
 800b4f0:	490f      	ldr	r1, [pc, #60]	@ (800b530 <UARTEx_SetNbDataToProcess+0x98>)
 800b4f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	7b7a      	ldrb	r2, [r7, #13]
 800b504:	4909      	ldr	r1, [pc, #36]	@ (800b52c <UARTEx_SetNbDataToProcess+0x94>)
 800b506:	5c8a      	ldrb	r2, [r1, r2]
 800b508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b50c:	7b7a      	ldrb	r2, [r7, #13]
 800b50e:	4908      	ldr	r1, [pc, #32]	@ (800b530 <UARTEx_SetNbDataToProcess+0x98>)
 800b510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b512:	fb93 f3f2 	sdiv	r3, r3, r2
 800b516:	b29a      	uxth	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	0801ebbc 	.word	0x0801ebbc
 800b530:	0801ebc4 	.word	0x0801ebc4

0800b534 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b534:	b084      	sub	sp, #16
 800b536:	b580      	push	{r7, lr}
 800b538:	b084      	sub	sp, #16
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	f107 001c 	add.w	r0, r7, #28
 800b542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b546:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d121      	bne.n	800b592 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b552:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	68da      	ldr	r2, [r3, #12]
 800b55e:	4b2c      	ldr	r3, [pc, #176]	@ (800b610 <USB_CoreInit+0xdc>)
 800b560:	4013      	ands	r3, r2
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b572:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b576:	2b01      	cmp	r3, #1
 800b578:	d105      	bne.n	800b586 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 faaa 	bl	800bae0 <USB_CoreReset>
 800b58c:	4603      	mov	r3, r0
 800b58e:	73fb      	strb	r3, [r7, #15]
 800b590:	e01b      	b.n	800b5ca <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fa9e 	bl	800bae0 <USB_CoreReset>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b5a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d106      	bne.n	800b5be <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	639a      	str	r2, [r3, #56]	@ 0x38
 800b5bc:	e005      	b.n	800b5ca <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b5ca:	7fbb      	ldrb	r3, [r7, #30]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d116      	bne.n	800b5fe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b5de:	4b0d      	ldr	r3, [pc, #52]	@ (800b614 <USB_CoreInit+0xe0>)
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	f043 0206 	orr.w	r2, r3, #6
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	f043 0220 	orr.w	r2, r3, #32
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b60a:	b004      	add	sp, #16
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	ffbdffbf 	.word	0xffbdffbf
 800b614:	03ee0000 	.word	0x03ee0000

0800b618 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	f023 0201 	bic.w	r2, r3, #1
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b084      	sub	sp, #16
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	460b      	mov	r3, r1
 800b644:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b646:	2300      	movs	r3, #0
 800b648:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b656:	78fb      	ldrb	r3, [r7, #3]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d115      	bne.n	800b688 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b668:	200a      	movs	r0, #10
 800b66a:	f7f6 fe95 	bl	8002398 <HAL_Delay>
      ms += 10U;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	330a      	adds	r3, #10
 800b672:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fa25 	bl	800bac4 <USB_GetMode>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d01e      	beq.n	800b6be <USB_SetCurrentMode+0x84>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2bc7      	cmp	r3, #199	@ 0xc7
 800b684:	d9f0      	bls.n	800b668 <USB_SetCurrentMode+0x2e>
 800b686:	e01a      	b.n	800b6be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b688:	78fb      	ldrb	r3, [r7, #3]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d115      	bne.n	800b6ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b69a:	200a      	movs	r0, #10
 800b69c:	f7f6 fe7c 	bl	8002398 <HAL_Delay>
      ms += 10U;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	330a      	adds	r3, #10
 800b6a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fa0c 	bl	800bac4 <USB_GetMode>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d005      	beq.n	800b6be <USB_SetCurrentMode+0x84>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2bc7      	cmp	r3, #199	@ 0xc7
 800b6b6:	d9f0      	bls.n	800b69a <USB_SetCurrentMode+0x60>
 800b6b8:	e001      	b.n	800b6be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e005      	b.n	800b6ca <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2bc8      	cmp	r3, #200	@ 0xc8
 800b6c2:	d101      	bne.n	800b6c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e000      	b.n	800b6ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b086      	sub	sp, #24
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b6e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	613b      	str	r3, [r7, #16]
 800b6f2:	e009      	b.n	800b708 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	3340      	adds	r3, #64	@ 0x40
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	2200      	movs	r2, #0
 800b700:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	3301      	adds	r3, #1
 800b706:	613b      	str	r3, [r7, #16]
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	2b0e      	cmp	r3, #14
 800b70c:	d9f2      	bls.n	800b6f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b70e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b712:	2b00      	cmp	r3, #0
 800b714:	d11c      	bne.n	800b750 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b724:	f043 0302 	orr.w	r3, r3, #2
 800b728:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b72e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	e005      	b.n	800b75c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b754:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b762:	461a      	mov	r2, r3
 800b764:	2300      	movs	r3, #0
 800b766:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b768:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d10d      	bne.n	800b78c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b774:	2b00      	cmp	r3, #0
 800b776:	d104      	bne.n	800b782 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b778:	2100      	movs	r1, #0
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f968 	bl	800ba50 <USB_SetDevSpeed>
 800b780:	e008      	b.n	800b794 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b782:	2101      	movs	r1, #1
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f963 	bl	800ba50 <USB_SetDevSpeed>
 800b78a:	e003      	b.n	800b794 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b78c:	2103      	movs	r1, #3
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f95e 	bl	800ba50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b794:	2110      	movs	r1, #16
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f8fa 	bl	800b990 <USB_FlushTxFifo>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f924 	bl	800b9f4 <USB_FlushRxFifo>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7bc:	461a      	mov	r2, r3
 800b7be:	2300      	movs	r3, #0
 800b7c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7da:	2300      	movs	r3, #0
 800b7dc:	613b      	str	r3, [r7, #16]
 800b7de:	e043      	b.n	800b868 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7f6:	d118      	bne.n	800b82a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	015a      	lsls	r2, r3, #5
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	4413      	add	r3, r2
 800b806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b80a:	461a      	mov	r2, r3
 800b80c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b810:	6013      	str	r3, [r2, #0]
 800b812:	e013      	b.n	800b83c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b820:	461a      	mov	r2, r3
 800b822:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b826:	6013      	str	r3, [r2, #0]
 800b828:	e008      	b.n	800b83c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	015a      	lsls	r2, r3, #5
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	4413      	add	r3, r2
 800b832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b836:	461a      	mov	r2, r3
 800b838:	2300      	movs	r3, #0
 800b83a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	015a      	lsls	r2, r3, #5
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	4413      	add	r3, r2
 800b844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b848:	461a      	mov	r2, r3
 800b84a:	2300      	movs	r3, #0
 800b84c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	015a      	lsls	r2, r3, #5
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	4413      	add	r3, r2
 800b856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b85a:	461a      	mov	r2, r3
 800b85c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b860:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	3301      	adds	r3, #1
 800b866:	613b      	str	r3, [r7, #16]
 800b868:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b86c:	461a      	mov	r2, r3
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	4293      	cmp	r3, r2
 800b872:	d3b5      	bcc.n	800b7e0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b874:	2300      	movs	r3, #0
 800b876:	613b      	str	r3, [r7, #16]
 800b878:	e043      	b.n	800b902 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	015a      	lsls	r2, r3, #5
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	4413      	add	r3, r2
 800b882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b88c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b890:	d118      	bne.n	800b8c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10a      	bne.n	800b8ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	015a      	lsls	r2, r3, #5
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	e013      	b.n	800b8d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	015a      	lsls	r2, r3, #5
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b8c0:	6013      	str	r3, [r2, #0]
 800b8c2:	e008      	b.n	800b8d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	015a      	lsls	r2, r3, #5
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	015a      	lsls	r2, r3, #5
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	4413      	add	r3, r2
 800b8de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b8fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	3301      	adds	r3, #1
 800b900:	613b      	str	r3, [r7, #16]
 800b902:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b906:	461a      	mov	r2, r3
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d3b5      	bcc.n	800b87a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b91c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b920:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b92e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b934:	2b00      	cmp	r3, #0
 800b936:	d105      	bne.n	800b944 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	f043 0210 	orr.w	r2, r3, #16
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	699a      	ldr	r2, [r3, #24]
 800b948:	4b0f      	ldr	r3, [pc, #60]	@ (800b988 <USB_DevInit+0x2b4>)
 800b94a:	4313      	orrs	r3, r2
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b950:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	f043 0208 	orr.w	r2, r3, #8
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b964:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d105      	bne.n	800b978 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	699a      	ldr	r2, [r3, #24]
 800b970:	4b06      	ldr	r3, [pc, #24]	@ (800b98c <USB_DevInit+0x2b8>)
 800b972:	4313      	orrs	r3, r2
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b978:	7dfb      	ldrb	r3, [r7, #23]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3718      	adds	r7, #24
 800b97e:	46bd      	mov	sp, r7
 800b980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b984:	b004      	add	sp, #16
 800b986:	4770      	bx	lr
 800b988:	803c3800 	.word	0x803c3800
 800b98c:	40000004 	.word	0x40000004

0800b990 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b99a:	2300      	movs	r3, #0
 800b99c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b9aa:	d901      	bls.n	800b9b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	e01b      	b.n	800b9e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	daf2      	bge.n	800b99e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	019b      	lsls	r3, r3, #6
 800b9c0:	f043 0220 	orr.w	r2, r3, #32
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b9d4:	d901      	bls.n	800b9da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	e006      	b.n	800b9e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	f003 0320 	and.w	r3, r3, #32
 800b9e2:	2b20      	cmp	r3, #32
 800b9e4:	d0f0      	beq.n	800b9c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3301      	adds	r3, #1
 800ba04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba0c:	d901      	bls.n	800ba12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	e018      	b.n	800ba44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	691b      	ldr	r3, [r3, #16]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	daf2      	bge.n	800ba00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2210      	movs	r2, #16
 800ba22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3301      	adds	r3, #1
 800ba28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba30:	d901      	bls.n	800ba36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e006      	b.n	800ba44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	f003 0310 	and.w	r3, r3, #16
 800ba3e:	2b10      	cmp	r3, #16
 800ba40:	d0f0      	beq.n	800ba24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	68f9      	ldr	r1, [r7, #12]
 800ba6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba70:	4313      	orrs	r3, r2
 800ba72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b085      	sub	sp, #20
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba9c:	f023 0303 	bic.w	r3, r3, #3
 800baa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bab0:	f043 0302 	orr.w	r3, r3, #2
 800bab4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	695b      	ldr	r3, [r3, #20]
 800bad0:	f003 0301 	and.w	r3, r3, #1
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	3301      	adds	r3, #1
 800baf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800baf8:	d901      	bls.n	800bafe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bafa:	2303      	movs	r3, #3
 800bafc:	e01b      	b.n	800bb36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	daf2      	bge.n	800baec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb06:	2300      	movs	r3, #0
 800bb08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	f043 0201 	orr.w	r2, r3, #1
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb22:	d901      	bls.n	800bb28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb24:	2303      	movs	r3, #3
 800bb26:	e006      	b.n	800bb36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d0f0      	beq.n	800bb16 <USB_CoreReset+0x36>

  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
	...

0800bb44 <__NVIC_SetPriority>:
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	6039      	str	r1, [r7, #0]
 800bb4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bb50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	db0a      	blt.n	800bb6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	490c      	ldr	r1, [pc, #48]	@ (800bb90 <__NVIC_SetPriority+0x4c>)
 800bb5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb62:	0112      	lsls	r2, r2, #4
 800bb64:	b2d2      	uxtb	r2, r2
 800bb66:	440b      	add	r3, r1
 800bb68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bb6c:	e00a      	b.n	800bb84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	4908      	ldr	r1, [pc, #32]	@ (800bb94 <__NVIC_SetPriority+0x50>)
 800bb74:	88fb      	ldrh	r3, [r7, #6]
 800bb76:	f003 030f 	and.w	r3, r3, #15
 800bb7a:	3b04      	subs	r3, #4
 800bb7c:	0112      	lsls	r2, r2, #4
 800bb7e:	b2d2      	uxtb	r2, r2
 800bb80:	440b      	add	r3, r1
 800bb82:	761a      	strb	r2, [r3, #24]
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	e000e100 	.word	0xe000e100
 800bb94:	e000ed00 	.word	0xe000ed00

0800bb98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bb9c:	4b05      	ldr	r3, [pc, #20]	@ (800bbb4 <SysTick_Handler+0x1c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bba0:	f001 fd6e 	bl	800d680 <xTaskGetSchedulerState>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d001      	beq.n	800bbae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bbaa:	f002 fb65 	bl	800e278 <xPortSysTickHandler>
  }
}
 800bbae:	bf00      	nop
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	e000e010 	.word	0xe000e010

0800bbb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	f06f 0004 	mvn.w	r0, #4
 800bbc2:	f7ff ffbf 	bl	800bb44 <__NVIC_SetPriority>
#endif
}
 800bbc6:	bf00      	nop
 800bbc8:	bd80      	pop	{r7, pc}
	...

0800bbcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbd2:	f3ef 8305 	mrs	r3, IPSR
 800bbd6:	603b      	str	r3, [r7, #0]
  return(result);
 800bbd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bbde:	f06f 0305 	mvn.w	r3, #5
 800bbe2:	607b      	str	r3, [r7, #4]
 800bbe4:	e00c      	b.n	800bc00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bbe6:	4b0a      	ldr	r3, [pc, #40]	@ (800bc10 <osKernelInitialize+0x44>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d105      	bne.n	800bbfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bbee:	4b08      	ldr	r3, [pc, #32]	@ (800bc10 <osKernelInitialize+0x44>)
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	607b      	str	r3, [r7, #4]
 800bbf8:	e002      	b.n	800bc00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bbfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bbfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc00:	687b      	ldr	r3, [r7, #4]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	2403305c 	.word	0x2403305c

0800bc14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc1a:	f3ef 8305 	mrs	r3, IPSR
 800bc1e:	603b      	str	r3, [r7, #0]
  return(result);
 800bc20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc26:	f06f 0305 	mvn.w	r3, #5
 800bc2a:	607b      	str	r3, [r7, #4]
 800bc2c:	e010      	b.n	800bc50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc2e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc5c <osKernelStart+0x48>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d109      	bne.n	800bc4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bc36:	f7ff ffbf 	bl	800bbb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bc3a:	4b08      	ldr	r3, [pc, #32]	@ (800bc5c <osKernelStart+0x48>)
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bc40:	f001 f892 	bl	800cd68 <vTaskStartScheduler>
      stat = osOK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	607b      	str	r3, [r7, #4]
 800bc48:	e002      	b.n	800bc50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bc4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc50:	687b      	ldr	r3, [r7, #4]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	2403305c 	.word	0x2403305c

0800bc60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08e      	sub	sp, #56	@ 0x38
 800bc64:	af04      	add	r7, sp, #16
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc70:	f3ef 8305 	mrs	r3, IPSR
 800bc74:	617b      	str	r3, [r7, #20]
  return(result);
 800bc76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d17e      	bne.n	800bd7a <osThreadNew+0x11a>
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d07b      	beq.n	800bd7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bc82:	2380      	movs	r3, #128	@ 0x80
 800bc84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bc86:	2318      	movs	r3, #24
 800bc88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bc8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d045      	beq.n	800bd26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d002      	beq.n	800bca8 <osThreadNew+0x48>
        name = attr->name;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d008      	beq.n	800bcce <osThreadNew+0x6e>
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	2b38      	cmp	r3, #56	@ 0x38
 800bcc0:	d805      	bhi.n	800bcce <osThreadNew+0x6e>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	f003 0301 	and.w	r3, r3, #1
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <osThreadNew+0x72>
        return (NULL);
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e054      	b.n	800bd7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	695b      	ldr	r3, [r3, #20]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	695b      	ldr	r3, [r3, #20]
 800bcde:	089b      	lsrs	r3, r3, #2
 800bce0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00e      	beq.n	800bd08 <osThreadNew+0xa8>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	2ba7      	cmp	r3, #167	@ 0xa7
 800bcf0:	d90a      	bls.n	800bd08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d006      	beq.n	800bd08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	695b      	ldr	r3, [r3, #20]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <osThreadNew+0xa8>
        mem = 1;
 800bd02:	2301      	movs	r3, #1
 800bd04:	61bb      	str	r3, [r7, #24]
 800bd06:	e010      	b.n	800bd2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10c      	bne.n	800bd2a <osThreadNew+0xca>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d108      	bne.n	800bd2a <osThreadNew+0xca>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d104      	bne.n	800bd2a <osThreadNew+0xca>
          mem = 0;
 800bd20:	2300      	movs	r3, #0
 800bd22:	61bb      	str	r3, [r7, #24]
 800bd24:	e001      	b.n	800bd2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d110      	bne.n	800bd52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd38:	9202      	str	r2, [sp, #8]
 800bd3a:	9301      	str	r3, [sp, #4]
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	6a3a      	ldr	r2, [r7, #32]
 800bd44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f000 fe1a 	bl	800c980 <xTaskCreateStatic>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	613b      	str	r3, [r7, #16]
 800bd50:	e013      	b.n	800bd7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d110      	bne.n	800bd7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	f107 0310 	add.w	r3, r7, #16
 800bd60:	9301      	str	r3, [sp, #4]
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f000 fe68 	bl	800ca40 <xTaskCreate>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d001      	beq.n	800bd7a <osThreadNew+0x11a>
            hTask = NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bd7a:	693b      	ldr	r3, [r7, #16]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3728      	adds	r7, #40	@ 0x28
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd8c:	f3ef 8305 	mrs	r3, IPSR
 800bd90:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d003      	beq.n	800bda0 <osDelay+0x1c>
    stat = osErrorISR;
 800bd98:	f06f 0305 	mvn.w	r3, #5
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	e007      	b.n	800bdb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 ffa6 	bl	800ccfc <vTaskDelay>
    }
  }

  return (stat);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
	...

0800bdbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4a07      	ldr	r2, [pc, #28]	@ (800bde8 <vApplicationGetIdleTaskMemory+0x2c>)
 800bdcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	4a06      	ldr	r2, [pc, #24]	@ (800bdec <vApplicationGetIdleTaskMemory+0x30>)
 800bdd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2280      	movs	r2, #128	@ 0x80
 800bdd8:	601a      	str	r2, [r3, #0]
}
 800bdda:	bf00      	nop
 800bddc:	3714      	adds	r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	24033060 	.word	0x24033060
 800bdec:	24033108 	.word	0x24033108

0800bdf0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4a07      	ldr	r2, [pc, #28]	@ (800be1c <vApplicationGetTimerTaskMemory+0x2c>)
 800be00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	4a06      	ldr	r2, [pc, #24]	@ (800be20 <vApplicationGetTimerTaskMemory+0x30>)
 800be06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be0e:	601a      	str	r2, [r3, #0]
}
 800be10:	bf00      	nop
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	24033308 	.word	0x24033308
 800be20:	240333b0 	.word	0x240333b0

0800be24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f103 0208 	add.w	r2, r3, #8
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f103 0208 	add.w	r2, r3, #8
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f103 0208 	add.w	r2, r3, #8
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be58:	bf00      	nop
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be72:	bf00      	nop
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be7e:	b480      	push	{r7}
 800be80:	b085      	sub	sp, #20
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	689a      	ldr	r2, [r3, #8]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	683a      	ldr	r2, [r7, #0]
 800bea2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	683a      	ldr	r2, [r7, #0]
 800bea8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	1c5a      	adds	r2, r3, #1
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	601a      	str	r2, [r3, #0]
}
 800beba:	bf00      	nop
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bec6:	b480      	push	{r7}
 800bec8:	b085      	sub	sp, #20
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bedc:	d103      	bne.n	800bee6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	e00c      	b.n	800bf00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	3308      	adds	r3, #8
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	e002      	b.n	800bef4 <vListInsert+0x2e>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	429a      	cmp	r2, r3
 800befe:	d2f6      	bcs.n	800beee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	683a      	ldr	r2, [r7, #0]
 800bf0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	1c5a      	adds	r2, r3, #1
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	601a      	str	r2, [r3, #0]
}
 800bf2c:	bf00      	nop
 800bf2e:	3714      	adds	r7, #20
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	6892      	ldr	r2, [r2, #8]
 800bf4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	6852      	ldr	r2, [r2, #4]
 800bf58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d103      	bne.n	800bf6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	689a      	ldr	r2, [r3, #8]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	1e5a      	subs	r2, r3, #1
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10b      	bne.n	800bfb8 <xQueueGenericReset+0x2c>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	60bb      	str	r3, [r7, #8]
}
 800bfb2:	bf00      	nop
 800bfb4:	bf00      	nop
 800bfb6:	e7fd      	b.n	800bfb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bfb8:	f002 f8ce 	bl	800e158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc4:	68f9      	ldr	r1, [r7, #12]
 800bfc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfc8:	fb01 f303 	mul.w	r3, r1, r3
 800bfcc:	441a      	add	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	68f9      	ldr	r1, [r7, #12]
 800bfec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfee:	fb01 f303 	mul.w	r3, r1, r3
 800bff2:	441a      	add	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	22ff      	movs	r2, #255	@ 0xff
 800bffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	22ff      	movs	r2, #255	@ 0xff
 800c004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d114      	bne.n	800c038 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d01a      	beq.n	800c04c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3310      	adds	r3, #16
 800c01a:	4618      	mov	r0, r3
 800c01c:	f001 f942 	bl	800d2a4 <xTaskRemoveFromEventList>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d012      	beq.n	800c04c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c026:	4b0d      	ldr	r3, [pc, #52]	@ (800c05c <xQueueGenericReset+0xd0>)
 800c028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	e009      	b.n	800c04c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3310      	adds	r3, #16
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fef1 	bl	800be24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3324      	adds	r3, #36	@ 0x24
 800c046:	4618      	mov	r0, r3
 800c048:	f7ff feec 	bl	800be24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c04c:	f002 f8b6 	bl	800e1bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c050:	2301      	movs	r3, #1
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	e000ed04 	.word	0xe000ed04

0800c060 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08e      	sub	sp, #56	@ 0x38
 800c064:	af02      	add	r7, sp, #8
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10b      	bne.n	800c08c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c086:	bf00      	nop
 800c088:	bf00      	nop
 800c08a:	e7fd      	b.n	800c088 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10b      	bne.n	800c0aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c0a4:	bf00      	nop
 800c0a6:	bf00      	nop
 800c0a8:	e7fd      	b.n	800c0a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <xQueueGenericCreateStatic+0x56>
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <xQueueGenericCreateStatic+0x5a>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e000      	b.n	800c0bc <xQueueGenericCreateStatic+0x5c>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10b      	bne.n	800c0d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	623b      	str	r3, [r7, #32]
}
 800c0d2:	bf00      	nop
 800c0d4:	bf00      	nop
 800c0d6:	e7fd      	b.n	800c0d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d102      	bne.n	800c0e4 <xQueueGenericCreateStatic+0x84>
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d101      	bne.n	800c0e8 <xQueueGenericCreateStatic+0x88>
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e000      	b.n	800c0ea <xQueueGenericCreateStatic+0x8a>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10b      	bne.n	800c106 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	61fb      	str	r3, [r7, #28]
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	e7fd      	b.n	800c102 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c106:	2350      	movs	r3, #80	@ 0x50
 800c108:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b50      	cmp	r3, #80	@ 0x50
 800c10e:	d00b      	beq.n	800c128 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	61bb      	str	r3, [r7, #24]
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	e7fd      	b.n	800c124 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c128:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00d      	beq.n	800c150 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c136:	2201      	movs	r2, #1
 800c138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c13c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	4613      	mov	r3, r2
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	68b9      	ldr	r1, [r7, #8]
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 f805 	bl	800c15a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c152:	4618      	mov	r0, r3
 800c154:	3730      	adds	r7, #48	@ 0x30
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b084      	sub	sp, #16
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	607a      	str	r2, [r7, #4]
 800c166:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d103      	bne.n	800c176 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	69ba      	ldr	r2, [r7, #24]
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	e002      	b.n	800c17c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c188:	2101      	movs	r1, #1
 800c18a:	69b8      	ldr	r0, [r7, #24]
 800c18c:	f7ff fefe 	bl	800bf8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	78fa      	ldrb	r2, [r7, #3]
 800c194:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c198:	bf00      	nop
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08e      	sub	sp, #56	@ 0x38
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
 800c1ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10b      	bne.n	800c1d4 <xQueueGenericSend+0x34>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c1ce:	bf00      	nop
 800c1d0:	bf00      	nop
 800c1d2:	e7fd      	b.n	800c1d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d103      	bne.n	800c1e2 <xQueueGenericSend+0x42>
 800c1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <xQueueGenericSend+0x46>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e000      	b.n	800c1e8 <xQueueGenericSend+0x48>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10b      	bne.n	800c204 <xQueueGenericSend+0x64>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c1fe:	bf00      	nop
 800c200:	bf00      	nop
 800c202:	e7fd      	b.n	800c200 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b02      	cmp	r3, #2
 800c208:	d103      	bne.n	800c212 <xQueueGenericSend+0x72>
 800c20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d101      	bne.n	800c216 <xQueueGenericSend+0x76>
 800c212:	2301      	movs	r3, #1
 800c214:	e000      	b.n	800c218 <xQueueGenericSend+0x78>
 800c216:	2300      	movs	r3, #0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d10b      	bne.n	800c234 <xQueueGenericSend+0x94>
	__asm volatile
 800c21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c220:	f383 8811 	msr	BASEPRI, r3
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	623b      	str	r3, [r7, #32]
}
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	e7fd      	b.n	800c230 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c234:	f001 fa24 	bl	800d680 <xTaskGetSchedulerState>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d102      	bne.n	800c244 <xQueueGenericSend+0xa4>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <xQueueGenericSend+0xa8>
 800c244:	2301      	movs	r3, #1
 800c246:	e000      	b.n	800c24a <xQueueGenericSend+0xaa>
 800c248:	2300      	movs	r3, #0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10b      	bne.n	800c266 <xQueueGenericSend+0xc6>
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	61fb      	str	r3, [r7, #28]
}
 800c260:	bf00      	nop
 800c262:	bf00      	nop
 800c264:	e7fd      	b.n	800c262 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c266:	f001 ff77 	bl	800e158 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c26c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c272:	429a      	cmp	r2, r3
 800c274:	d302      	bcc.n	800c27c <xQueueGenericSend+0xdc>
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d129      	bne.n	800c2d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c282:	f000 fa0f 	bl	800c6a4 <prvCopyDataToQueue>
 800c286:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c28a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d010      	beq.n	800c2b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c292:	3324      	adds	r3, #36	@ 0x24
 800c294:	4618      	mov	r0, r3
 800c296:	f001 f805 	bl	800d2a4 <xTaskRemoveFromEventList>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d013      	beq.n	800c2c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2a0:	4b3f      	ldr	r3, [pc, #252]	@ (800c3a0 <xQueueGenericSend+0x200>)
 800c2a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2a6:	601a      	str	r2, [r3, #0]
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	e00a      	b.n	800c2c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d007      	beq.n	800c2c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2b8:	4b39      	ldr	r3, [pc, #228]	@ (800c3a0 <xQueueGenericSend+0x200>)
 800c2ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2c8:	f001 ff78 	bl	800e1bc <vPortExitCritical>
				return pdPASS;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e063      	b.n	800c398 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d103      	bne.n	800c2de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2d6:	f001 ff71 	bl	800e1bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e05c      	b.n	800c398 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2e4:	f107 0314 	add.w	r3, r7, #20
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f001 f867 	bl	800d3bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2f2:	f001 ff63 	bl	800e1bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2f6:	f000 fda7 	bl	800ce48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2fa:	f001 ff2d 	bl	800e158 <vPortEnterCritical>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c300:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c304:	b25b      	sxtb	r3, r3
 800c306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c30a:	d103      	bne.n	800c314 <xQueueGenericSend+0x174>
 800c30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c316:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c31a:	b25b      	sxtb	r3, r3
 800c31c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c320:	d103      	bne.n	800c32a <xQueueGenericSend+0x18a>
 800c322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c32a:	f001 ff47 	bl	800e1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c32e:	1d3a      	adds	r2, r7, #4
 800c330:	f107 0314 	add.w	r3, r7, #20
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f001 f856 	bl	800d3e8 <xTaskCheckForTimeOut>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d124      	bne.n	800c38c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c342:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c344:	f000 faa6 	bl	800c894 <prvIsQueueFull>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d018      	beq.n	800c380 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c350:	3310      	adds	r3, #16
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f000 ff52 	bl	800d200 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c35c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c35e:	f000 fa31 	bl	800c7c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c362:	f000 fd7f 	bl	800ce64 <xTaskResumeAll>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f47f af7c 	bne.w	800c266 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c36e:	4b0c      	ldr	r3, [pc, #48]	@ (800c3a0 <xQueueGenericSend+0x200>)
 800c370:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c374:	601a      	str	r2, [r3, #0]
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	e772      	b.n	800c266 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c382:	f000 fa1f 	bl	800c7c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c386:	f000 fd6d 	bl	800ce64 <xTaskResumeAll>
 800c38a:	e76c      	b.n	800c266 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c38c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c38e:	f000 fa19 	bl	800c7c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c392:	f000 fd67 	bl	800ce64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c396:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3738      	adds	r7, #56	@ 0x38
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	e000ed04 	.word	0xe000ed04

0800c3a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b090      	sub	sp, #64	@ 0x40
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10b      	bne.n	800c3d4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c3ce:	bf00      	nop
 800c3d0:	bf00      	nop
 800c3d2:	e7fd      	b.n	800c3d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d103      	bne.n	800c3e2 <xQueueGenericSendFromISR+0x3e>
 800c3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <xQueueGenericSendFromISR+0x42>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e000      	b.n	800c3e8 <xQueueGenericSendFromISR+0x44>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10b      	bne.n	800c404 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c3fe:	bf00      	nop
 800c400:	bf00      	nop
 800c402:	e7fd      	b.n	800c400 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b02      	cmp	r3, #2
 800c408:	d103      	bne.n	800c412 <xQueueGenericSendFromISR+0x6e>
 800c40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c40c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d101      	bne.n	800c416 <xQueueGenericSendFromISR+0x72>
 800c412:	2301      	movs	r3, #1
 800c414:	e000      	b.n	800c418 <xQueueGenericSendFromISR+0x74>
 800c416:	2300      	movs	r3, #0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10b      	bne.n	800c434 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	623b      	str	r3, [r7, #32]
}
 800c42e:	bf00      	nop
 800c430:	bf00      	nop
 800c432:	e7fd      	b.n	800c430 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c434:	f001 ff70 	bl	800e318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c438:	f3ef 8211 	mrs	r2, BASEPRI
 800c43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	61fa      	str	r2, [r7, #28]
 800c44e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c450:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c452:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d302      	bcc.n	800c466 <xQueueGenericSendFromISR+0xc2>
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2b02      	cmp	r3, #2
 800c464:	d12f      	bne.n	800c4c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c468:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c46c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c474:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	68b9      	ldr	r1, [r7, #8]
 800c47a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c47c:	f000 f912 	bl	800c6a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c480:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c484:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c488:	d112      	bne.n	800c4b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d016      	beq.n	800c4c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c494:	3324      	adds	r3, #36	@ 0x24
 800c496:	4618      	mov	r0, r3
 800c498:	f000 ff04 	bl	800d2a4 <xTaskRemoveFromEventList>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00e      	beq.n	800c4c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00b      	beq.n	800c4c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	e007      	b.n	800c4c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	b25a      	sxtb	r2, r3
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c4c4:	e001      	b.n	800c4ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4cc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c4d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3740      	adds	r7, #64	@ 0x40
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b08c      	sub	sp, #48	@ 0x30
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10b      	bne.n	800c512 <xQueueReceive+0x32>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fe:	f383 8811 	msr	BASEPRI, r3
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	623b      	str	r3, [r7, #32]
}
 800c50c:	bf00      	nop
 800c50e:	bf00      	nop
 800c510:	e7fd      	b.n	800c50e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d103      	bne.n	800c520 <xQueueReceive+0x40>
 800c518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <xQueueReceive+0x44>
 800c520:	2301      	movs	r3, #1
 800c522:	e000      	b.n	800c526 <xQueueReceive+0x46>
 800c524:	2300      	movs	r3, #0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d10b      	bne.n	800c542 <xQueueReceive+0x62>
	__asm volatile
 800c52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	61fb      	str	r3, [r7, #28]
}
 800c53c:	bf00      	nop
 800c53e:	bf00      	nop
 800c540:	e7fd      	b.n	800c53e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c542:	f001 f89d 	bl	800d680 <xTaskGetSchedulerState>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d102      	bne.n	800c552 <xQueueReceive+0x72>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <xQueueReceive+0x76>
 800c552:	2301      	movs	r3, #1
 800c554:	e000      	b.n	800c558 <xQueueReceive+0x78>
 800c556:	2300      	movs	r3, #0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10b      	bne.n	800c574 <xQueueReceive+0x94>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	61bb      	str	r3, [r7, #24]
}
 800c56e:	bf00      	nop
 800c570:	bf00      	nop
 800c572:	e7fd      	b.n	800c570 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c574:	f001 fdf0 	bl	800e158 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c57c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c580:	2b00      	cmp	r3, #0
 800c582:	d01f      	beq.n	800c5c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c584:	68b9      	ldr	r1, [r7, #8]
 800c586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c588:	f000 f8f6 	bl	800c778 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58e:	1e5a      	subs	r2, r3, #1
 800c590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c592:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00f      	beq.n	800c5bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c59e:	3310      	adds	r3, #16
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 fe7f 	bl	800d2a4 <xTaskRemoveFromEventList>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d007      	beq.n	800c5bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5ac:	4b3c      	ldr	r3, [pc, #240]	@ (800c6a0 <xQueueReceive+0x1c0>)
 800c5ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5bc:	f001 fdfe 	bl	800e1bc <vPortExitCritical>
				return pdPASS;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e069      	b.n	800c698 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d103      	bne.n	800c5d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5ca:	f001 fdf7 	bl	800e1bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	e062      	b.n	800c698 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d106      	bne.n	800c5e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5d8:	f107 0310 	add.w	r3, r7, #16
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 feed 	bl	800d3bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5e6:	f001 fde9 	bl	800e1bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5ea:	f000 fc2d 	bl	800ce48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5ee:	f001 fdb3 	bl	800e158 <vPortEnterCritical>
 800c5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5f8:	b25b      	sxtb	r3, r3
 800c5fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5fe:	d103      	bne.n	800c608 <xQueueReceive+0x128>
 800c600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c602:	2200      	movs	r2, #0
 800c604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c60e:	b25b      	sxtb	r3, r3
 800c610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c614:	d103      	bne.n	800c61e <xQueueReceive+0x13e>
 800c616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c61e:	f001 fdcd 	bl	800e1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c622:	1d3a      	adds	r2, r7, #4
 800c624:	f107 0310 	add.w	r3, r7, #16
 800c628:	4611      	mov	r1, r2
 800c62a:	4618      	mov	r0, r3
 800c62c:	f000 fedc 	bl	800d3e8 <xTaskCheckForTimeOut>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d123      	bne.n	800c67e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c638:	f000 f916 	bl	800c868 <prvIsQueueEmpty>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d017      	beq.n	800c672 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c644:	3324      	adds	r3, #36	@ 0x24
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	4611      	mov	r1, r2
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fdd8 	bl	800d200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c652:	f000 f8b7 	bl	800c7c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c656:	f000 fc05 	bl	800ce64 <xTaskResumeAll>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d189      	bne.n	800c574 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c660:	4b0f      	ldr	r3, [pc, #60]	@ (800c6a0 <xQueueReceive+0x1c0>)
 800c662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	e780      	b.n	800c574 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c674:	f000 f8a6 	bl	800c7c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c678:	f000 fbf4 	bl	800ce64 <xTaskResumeAll>
 800c67c:	e77a      	b.n	800c574 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c67e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c680:	f000 f8a0 	bl	800c7c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c684:	f000 fbee 	bl	800ce64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c688:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c68a:	f000 f8ed 	bl	800c868 <prvIsQueueEmpty>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	f43f af6f 	beq.w	800c574 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c696:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3730      	adds	r7, #48	@ 0x30
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d10d      	bne.n	800c6de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d14d      	bne.n	800c766 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 fff4 	bl	800d6bc <xTaskPriorityDisinherit>
 800c6d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	609a      	str	r2, [r3, #8]
 800c6dc:	e043      	b.n	800c766 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d119      	bne.n	800c718 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6858      	ldr	r0, [r3, #4]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	68b9      	ldr	r1, [r7, #8]
 800c6f0:	f011 fab7 	bl	801dc62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6fc:	441a      	add	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d32b      	bcc.n	800c766 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	605a      	str	r2, [r3, #4]
 800c716:	e026      	b.n	800c766 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	68d8      	ldr	r0, [r3, #12]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c720:	461a      	mov	r2, r3
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	f011 fa9d 	bl	801dc62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	68da      	ldr	r2, [r3, #12]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c730:	425b      	negs	r3, r3
 800c732:	441a      	add	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	68da      	ldr	r2, [r3, #12]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	429a      	cmp	r2, r3
 800c742:	d207      	bcs.n	800c754 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	689a      	ldr	r2, [r3, #8]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c74c:	425b      	negs	r3, r3
 800c74e:	441a      	add	r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b02      	cmp	r3, #2
 800c758:	d105      	bne.n	800c766 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	3b01      	subs	r3, #1
 800c764:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c76e:	697b      	ldr	r3, [r7, #20]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3718      	adds	r7, #24
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c786:	2b00      	cmp	r3, #0
 800c788:	d018      	beq.n	800c7bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68da      	ldr	r2, [r3, #12]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c792:	441a      	add	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68da      	ldr	r2, [r3, #12]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d303      	bcc.n	800c7ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	68d9      	ldr	r1, [r3, #12]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	6838      	ldr	r0, [r7, #0]
 800c7b8:	f011 fa53 	bl	801dc62 <memcpy>
	}
}
 800c7bc:	bf00      	nop
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7cc:	f001 fcc4 	bl	800e158 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7d8:	e011      	b.n	800c7fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d012      	beq.n	800c808 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3324      	adds	r3, #36	@ 0x24
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 fd5c 	bl	800d2a4 <xTaskRemoveFromEventList>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c7f2:	f000 fe5d 	bl	800d4b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c802:	2b00      	cmp	r3, #0
 800c804:	dce9      	bgt.n	800c7da <prvUnlockQueue+0x16>
 800c806:	e000      	b.n	800c80a <prvUnlockQueue+0x46>
					break;
 800c808:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	22ff      	movs	r2, #255	@ 0xff
 800c80e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c812:	f001 fcd3 	bl	800e1bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c816:	f001 fc9f 	bl	800e158 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c820:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c822:	e011      	b.n	800c848 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d012      	beq.n	800c852 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	3310      	adds	r3, #16
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fd37 	bl	800d2a4 <xTaskRemoveFromEventList>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c83c:	f000 fe38 	bl	800d4b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c840:	7bbb      	ldrb	r3, [r7, #14]
 800c842:	3b01      	subs	r3, #1
 800c844:	b2db      	uxtb	r3, r3
 800c846:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	dce9      	bgt.n	800c824 <prvUnlockQueue+0x60>
 800c850:	e000      	b.n	800c854 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c852:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	22ff      	movs	r2, #255	@ 0xff
 800c858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c85c:	f001 fcae 	bl	800e1bc <vPortExitCritical>
}
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c870:	f001 fc72 	bl	800e158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c87c:	2301      	movs	r3, #1
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	e001      	b.n	800c886 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c882:	2300      	movs	r3, #0
 800c884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c886:	f001 fc99 	bl	800e1bc <vPortExitCritical>

	return xReturn;
 800c88a:	68fb      	ldr	r3, [r7, #12]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c89c:	f001 fc5c 	bl	800e158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d102      	bne.n	800c8b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	e001      	b.n	800c8b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8b6:	f001 fc81 	bl	800e1bc <vPortExitCritical>

	return xReturn;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	e014      	b.n	800c8fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8d4:	4a0f      	ldr	r2, [pc, #60]	@ (800c914 <vQueueAddToRegistry+0x50>)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10b      	bne.n	800c8f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c8e0:	490c      	ldr	r1, [pc, #48]	@ (800c914 <vQueueAddToRegistry+0x50>)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	683a      	ldr	r2, [r7, #0]
 800c8e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c8ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c914 <vQueueAddToRegistry+0x50>)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	00db      	lsls	r3, r3, #3
 800c8f0:	4413      	add	r3, r2
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c8f6:	e006      	b.n	800c906 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	60fb      	str	r3, [r7, #12]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2b07      	cmp	r3, #7
 800c902:	d9e7      	bls.n	800c8d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c904:	bf00      	nop
 800c906:	bf00      	nop
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	240337b0 	.word	0x240337b0

0800c918 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c928:	f001 fc16 	bl	800e158 <vPortEnterCritical>
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c932:	b25b      	sxtb	r3, r3
 800c934:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c938:	d103      	bne.n	800c942 <vQueueWaitForMessageRestricted+0x2a>
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c948:	b25b      	sxtb	r3, r3
 800c94a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c94e:	d103      	bne.n	800c958 <vQueueWaitForMessageRestricted+0x40>
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c958:	f001 fc30 	bl	800e1bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c960:	2b00      	cmp	r3, #0
 800c962:	d106      	bne.n	800c972 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	3324      	adds	r3, #36	@ 0x24
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	68b9      	ldr	r1, [r7, #8]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 fc6d 	bl	800d24c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c972:	6978      	ldr	r0, [r7, #20]
 800c974:	f7ff ff26 	bl	800c7c4 <prvUnlockQueue>
	}
 800c978:	bf00      	nop
 800c97a:	3718      	adds	r7, #24
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c980:	b580      	push	{r7, lr}
 800c982:	b08e      	sub	sp, #56	@ 0x38
 800c984:	af04      	add	r7, sp, #16
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]
 800c98c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c98e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c990:	2b00      	cmp	r3, #0
 800c992:	d10b      	bne.n	800c9ac <xTaskCreateStatic+0x2c>
	__asm volatile
 800c994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c998:	f383 8811 	msr	BASEPRI, r3
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	623b      	str	r3, [r7, #32]
}
 800c9a6:	bf00      	nop
 800c9a8:	bf00      	nop
 800c9aa:	e7fd      	b.n	800c9a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10b      	bne.n	800c9ca <xTaskCreateStatic+0x4a>
	__asm volatile
 800c9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b6:	f383 8811 	msr	BASEPRI, r3
 800c9ba:	f3bf 8f6f 	isb	sy
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	61fb      	str	r3, [r7, #28]
}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop
 800c9c8:	e7fd      	b.n	800c9c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c9ca:	23a8      	movs	r3, #168	@ 0xa8
 800c9cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	2ba8      	cmp	r3, #168	@ 0xa8
 800c9d2:	d00b      	beq.n	800c9ec <xTaskCreateStatic+0x6c>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	61bb      	str	r3, [r7, #24]
}
 800c9e6:	bf00      	nop
 800c9e8:	bf00      	nop
 800c9ea:	e7fd      	b.n	800c9e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c9ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01e      	beq.n	800ca32 <xTaskCreateStatic+0xb2>
 800c9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d01b      	beq.n	800ca32 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca06:	2202      	movs	r2, #2
 800ca08:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9303      	str	r3, [sp, #12]
 800ca10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca12:	9302      	str	r3, [sp, #8]
 800ca14:	f107 0314 	add.w	r3, r7, #20
 800ca18:	9301      	str	r3, [sp, #4]
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f000 f851 	bl	800cacc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca2c:	f000 f8f6 	bl	800cc1c <prvAddNewTaskToReadyList>
 800ca30:	e001      	b.n	800ca36 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ca32:	2300      	movs	r3, #0
 800ca34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca36:	697b      	ldr	r3, [r7, #20]
	}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3728      	adds	r7, #40	@ 0x28
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b08c      	sub	sp, #48	@ 0x30
 800ca44:	af04      	add	r7, sp, #16
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	603b      	str	r3, [r7, #0]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca50:	88fb      	ldrh	r3, [r7, #6]
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4618      	mov	r0, r3
 800ca56:	f001 fca1 	bl	800e39c <pvPortMalloc>
 800ca5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00e      	beq.n	800ca80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca62:	20a8      	movs	r0, #168	@ 0xa8
 800ca64:	f001 fc9a 	bl	800e39c <pvPortMalloc>
 800ca68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d003      	beq.n	800ca78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	697a      	ldr	r2, [r7, #20]
 800ca74:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca76:	e005      	b.n	800ca84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca78:	6978      	ldr	r0, [r7, #20]
 800ca7a:	f001 fd5d 	bl	800e538 <vPortFree>
 800ca7e:	e001      	b.n	800ca84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca80:	2300      	movs	r3, #0
 800ca82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d017      	beq.n	800caba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca92:	88fa      	ldrh	r2, [r7, #6]
 800ca94:	2300      	movs	r3, #0
 800ca96:	9303      	str	r3, [sp, #12]
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	9302      	str	r3, [sp, #8]
 800ca9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9e:	9301      	str	r3, [sp, #4]
 800caa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	68b9      	ldr	r1, [r7, #8]
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 f80f 	bl	800cacc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caae:	69f8      	ldr	r0, [r7, #28]
 800cab0:	f000 f8b4 	bl	800cc1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cab4:	2301      	movs	r3, #1
 800cab6:	61bb      	str	r3, [r7, #24]
 800cab8:	e002      	b.n	800cac0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800caba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cabe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cac0:	69bb      	ldr	r3, [r7, #24]
	}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3720      	adds	r7, #32
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
	...

0800cacc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b088      	sub	sp, #32
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
 800cad8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cadc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	461a      	mov	r2, r3
 800cae4:	21a5      	movs	r1, #165	@ 0xa5
 800cae6:	f010 ff9d 	bl	801da24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800caea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800caee:	6879      	ldr	r1, [r7, #4]
 800caf0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800caf4:	440b      	add	r3, r1
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	4413      	add	r3, r2
 800cafa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	f023 0307 	bic.w	r3, r3, #7
 800cb02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00b      	beq.n	800cb26 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	617b      	str	r3, [r7, #20]
}
 800cb20:	bf00      	nop
 800cb22:	bf00      	nop
 800cb24:	e7fd      	b.n	800cb22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d01f      	beq.n	800cb6c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	61fb      	str	r3, [r7, #28]
 800cb30:	e012      	b.n	800cb58 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	4413      	add	r3, r2
 800cb38:	7819      	ldrb	r1, [r3, #0]
 800cb3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	4413      	add	r3, r2
 800cb40:	3334      	adds	r3, #52	@ 0x34
 800cb42:	460a      	mov	r2, r1
 800cb44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d006      	beq.n	800cb60 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	3301      	adds	r3, #1
 800cb56:	61fb      	str	r3, [r7, #28]
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	2b0f      	cmp	r3, #15
 800cb5c:	d9e9      	bls.n	800cb32 <prvInitialiseNewTask+0x66>
 800cb5e:	e000      	b.n	800cb62 <prvInitialiseNewTask+0x96>
			{
				break;
 800cb60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cb6a:	e003      	b.n	800cb74 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb76:	2b37      	cmp	r3, #55	@ 0x37
 800cb78:	d901      	bls.n	800cb7e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb7a:	2337      	movs	r3, #55	@ 0x37
 800cb7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb82:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb88:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb92:	3304      	adds	r3, #4
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7ff f965 	bl	800be64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9c:	3318      	adds	r3, #24
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7ff f960 	bl	800be64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cba8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbb8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbcc:	3354      	adds	r3, #84	@ 0x54
 800cbce:	224c      	movs	r2, #76	@ 0x4c
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f010 ff26 	bl	801da24 <memset>
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbda:	4a0d      	ldr	r2, [pc, #52]	@ (800cc10 <prvInitialiseNewTask+0x144>)
 800cbdc:	659a      	str	r2, [r3, #88]	@ 0x58
 800cbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe0:	4a0c      	ldr	r2, [pc, #48]	@ (800cc14 <prvInitialiseNewTask+0x148>)
 800cbe2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe6:	4a0c      	ldr	r2, [pc, #48]	@ (800cc18 <prvInitialiseNewTask+0x14c>)
 800cbe8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	68f9      	ldr	r1, [r7, #12]
 800cbee:	69b8      	ldr	r0, [r7, #24]
 800cbf0:	f001 f982 	bl	800def8 <pxPortInitialiseStack>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cbfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc06:	bf00      	nop
 800cc08:	3720      	adds	r7, #32
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	24069704 	.word	0x24069704
 800cc14:	2406976c 	.word	0x2406976c
 800cc18:	240697d4 	.word	0x240697d4

0800cc1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc24:	f001 fa98 	bl	800e158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc28:	4b2d      	ldr	r3, [pc, #180]	@ (800cce0 <prvAddNewTaskToReadyList+0xc4>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	4a2c      	ldr	r2, [pc, #176]	@ (800cce0 <prvAddNewTaskToReadyList+0xc4>)
 800cc30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc32:	4b2c      	ldr	r3, [pc, #176]	@ (800cce4 <prvAddNewTaskToReadyList+0xc8>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d109      	bne.n	800cc4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc3a:	4a2a      	ldr	r2, [pc, #168]	@ (800cce4 <prvAddNewTaskToReadyList+0xc8>)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc40:	4b27      	ldr	r3, [pc, #156]	@ (800cce0 <prvAddNewTaskToReadyList+0xc4>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d110      	bne.n	800cc6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc48:	f000 fc56 	bl	800d4f8 <prvInitialiseTaskLists>
 800cc4c:	e00d      	b.n	800cc6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc4e:	4b26      	ldr	r3, [pc, #152]	@ (800cce8 <prvAddNewTaskToReadyList+0xcc>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d109      	bne.n	800cc6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc56:	4b23      	ldr	r3, [pc, #140]	@ (800cce4 <prvAddNewTaskToReadyList+0xc8>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d802      	bhi.n	800cc6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc64:	4a1f      	ldr	r2, [pc, #124]	@ (800cce4 <prvAddNewTaskToReadyList+0xc8>)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc6a:	4b20      	ldr	r3, [pc, #128]	@ (800ccec <prvAddNewTaskToReadyList+0xd0>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	4a1e      	ldr	r2, [pc, #120]	@ (800ccec <prvAddNewTaskToReadyList+0xd0>)
 800cc72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc74:	4b1d      	ldr	r3, [pc, #116]	@ (800ccec <prvAddNewTaskToReadyList+0xd0>)
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc80:	4b1b      	ldr	r3, [pc, #108]	@ (800ccf0 <prvAddNewTaskToReadyList+0xd4>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d903      	bls.n	800cc90 <prvAddNewTaskToReadyList+0x74>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc8c:	4a18      	ldr	r2, [pc, #96]	@ (800ccf0 <prvAddNewTaskToReadyList+0xd4>)
 800cc8e:	6013      	str	r3, [r2, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc94:	4613      	mov	r3, r2
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	4413      	add	r3, r2
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4a15      	ldr	r2, [pc, #84]	@ (800ccf4 <prvAddNewTaskToReadyList+0xd8>)
 800cc9e:	441a      	add	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3304      	adds	r3, #4
 800cca4:	4619      	mov	r1, r3
 800cca6:	4610      	mov	r0, r2
 800cca8:	f7ff f8e9 	bl	800be7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ccac:	f001 fa86 	bl	800e1bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ccb0:	4b0d      	ldr	r3, [pc, #52]	@ (800cce8 <prvAddNewTaskToReadyList+0xcc>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00e      	beq.n	800ccd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ccb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cce4 <prvAddNewTaskToReadyList+0xc8>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d207      	bcs.n	800ccd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ccc6:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf8 <prvAddNewTaskToReadyList+0xdc>)
 800ccc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cccc:	601a      	str	r2, [r3, #0]
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccd6:	bf00      	nop
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	24033cc4 	.word	0x24033cc4
 800cce4:	240337f0 	.word	0x240337f0
 800cce8:	24033cd0 	.word	0x24033cd0
 800ccec:	24033ce0 	.word	0x24033ce0
 800ccf0:	24033ccc 	.word	0x24033ccc
 800ccf4:	240337f4 	.word	0x240337f4
 800ccf8:	e000ed04 	.word	0xe000ed04

0800ccfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd04:	2300      	movs	r3, #0
 800cd06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d018      	beq.n	800cd40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd0e:	4b14      	ldr	r3, [pc, #80]	@ (800cd60 <vTaskDelay+0x64>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00b      	beq.n	800cd2e <vTaskDelay+0x32>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	60bb      	str	r3, [r7, #8]
}
 800cd28:	bf00      	nop
 800cd2a:	bf00      	nop
 800cd2c:	e7fd      	b.n	800cd2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd2e:	f000 f88b 	bl	800ce48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd32:	2100      	movs	r1, #0
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fd31 	bl	800d79c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd3a:	f000 f893 	bl	800ce64 <xTaskResumeAll>
 800cd3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d107      	bne.n	800cd56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cd46:	4b07      	ldr	r3, [pc, #28]	@ (800cd64 <vTaskDelay+0x68>)
 800cd48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd4c:	601a      	str	r2, [r3, #0]
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd56:	bf00      	nop
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	24033cec 	.word	0x24033cec
 800cd64:	e000ed04 	.word	0xe000ed04

0800cd68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b08a      	sub	sp, #40	@ 0x28
 800cd6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd72:	2300      	movs	r3, #0
 800cd74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd76:	463a      	mov	r2, r7
 800cd78:	1d39      	adds	r1, r7, #4
 800cd7a:	f107 0308 	add.w	r3, r7, #8
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7ff f81c 	bl	800bdbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	9202      	str	r2, [sp, #8]
 800cd8c:	9301      	str	r3, [sp, #4]
 800cd8e:	2300      	movs	r3, #0
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	2300      	movs	r3, #0
 800cd94:	460a      	mov	r2, r1
 800cd96:	4924      	ldr	r1, [pc, #144]	@ (800ce28 <vTaskStartScheduler+0xc0>)
 800cd98:	4824      	ldr	r0, [pc, #144]	@ (800ce2c <vTaskStartScheduler+0xc4>)
 800cd9a:	f7ff fdf1 	bl	800c980 <xTaskCreateStatic>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	4a23      	ldr	r2, [pc, #140]	@ (800ce30 <vTaskStartScheduler+0xc8>)
 800cda2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cda4:	4b22      	ldr	r3, [pc, #136]	@ (800ce30 <vTaskStartScheduler+0xc8>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cdac:	2301      	movs	r3, #1
 800cdae:	617b      	str	r3, [r7, #20]
 800cdb0:	e001      	b.n	800cdb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d102      	bne.n	800cdc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cdbc:	f000 fd42 	bl	800d844 <xTimerCreateTimerTask>
 800cdc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d11b      	bne.n	800ce00 <vTaskStartScheduler+0x98>
	__asm volatile
 800cdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	613b      	str	r3, [r7, #16]
}
 800cdda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cddc:	4b15      	ldr	r3, [pc, #84]	@ (800ce34 <vTaskStartScheduler+0xcc>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3354      	adds	r3, #84	@ 0x54
 800cde2:	4a15      	ldr	r2, [pc, #84]	@ (800ce38 <vTaskStartScheduler+0xd0>)
 800cde4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cde6:	4b15      	ldr	r3, [pc, #84]	@ (800ce3c <vTaskStartScheduler+0xd4>)
 800cde8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cdee:	4b14      	ldr	r3, [pc, #80]	@ (800ce40 <vTaskStartScheduler+0xd8>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cdf4:	4b13      	ldr	r3, [pc, #76]	@ (800ce44 <vTaskStartScheduler+0xdc>)
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cdfa:	f001 f909 	bl	800e010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cdfe:	e00f      	b.n	800ce20 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce06:	d10b      	bne.n	800ce20 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ce08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0c:	f383 8811 	msr	BASEPRI, r3
 800ce10:	f3bf 8f6f 	isb	sy
 800ce14:	f3bf 8f4f 	dsb	sy
 800ce18:	60fb      	str	r3, [r7, #12]
}
 800ce1a:	bf00      	nop
 800ce1c:	bf00      	nop
 800ce1e:	e7fd      	b.n	800ce1c <vTaskStartScheduler+0xb4>
}
 800ce20:	bf00      	nop
 800ce22:	3718      	adds	r7, #24
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	0801eb0c 	.word	0x0801eb0c
 800ce2c:	0800d4c9 	.word	0x0800d4c9
 800ce30:	24033ce8 	.word	0x24033ce8
 800ce34:	240337f0 	.word	0x240337f0
 800ce38:	24001210 	.word	0x24001210
 800ce3c:	24033ce4 	.word	0x24033ce4
 800ce40:	24033cd0 	.word	0x24033cd0
 800ce44:	24033cc8 	.word	0x24033cc8

0800ce48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce48:	b480      	push	{r7}
 800ce4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce4c:	4b04      	ldr	r3, [pc, #16]	@ (800ce60 <vTaskSuspendAll+0x18>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3301      	adds	r3, #1
 800ce52:	4a03      	ldr	r2, [pc, #12]	@ (800ce60 <vTaskSuspendAll+0x18>)
 800ce54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce56:	bf00      	nop
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr
 800ce60:	24033cec 	.word	0x24033cec

0800ce64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce72:	4b42      	ldr	r3, [pc, #264]	@ (800cf7c <xTaskResumeAll+0x118>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10b      	bne.n	800ce92 <xTaskResumeAll+0x2e>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	603b      	str	r3, [r7, #0]
}
 800ce8c:	bf00      	nop
 800ce8e:	bf00      	nop
 800ce90:	e7fd      	b.n	800ce8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce92:	f001 f961 	bl	800e158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce96:	4b39      	ldr	r3, [pc, #228]	@ (800cf7c <xTaskResumeAll+0x118>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3b01      	subs	r3, #1
 800ce9c:	4a37      	ldr	r2, [pc, #220]	@ (800cf7c <xTaskResumeAll+0x118>)
 800ce9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cea0:	4b36      	ldr	r3, [pc, #216]	@ (800cf7c <xTaskResumeAll+0x118>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d162      	bne.n	800cf6e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cea8:	4b35      	ldr	r3, [pc, #212]	@ (800cf80 <xTaskResumeAll+0x11c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d05e      	beq.n	800cf6e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ceb0:	e02f      	b.n	800cf12 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceb2:	4b34      	ldr	r3, [pc, #208]	@ (800cf84 <xTaskResumeAll+0x120>)
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	3318      	adds	r3, #24
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7ff f83a 	bl	800bf38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	3304      	adds	r3, #4
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7ff f835 	bl	800bf38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ced2:	4b2d      	ldr	r3, [pc, #180]	@ (800cf88 <xTaskResumeAll+0x124>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d903      	bls.n	800cee2 <xTaskResumeAll+0x7e>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cede:	4a2a      	ldr	r2, [pc, #168]	@ (800cf88 <xTaskResumeAll+0x124>)
 800cee0:	6013      	str	r3, [r2, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4a27      	ldr	r2, [pc, #156]	@ (800cf8c <xTaskResumeAll+0x128>)
 800cef0:	441a      	add	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3304      	adds	r3, #4
 800cef6:	4619      	mov	r1, r3
 800cef8:	4610      	mov	r0, r2
 800cefa:	f7fe ffc0 	bl	800be7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf02:	4b23      	ldr	r3, [pc, #140]	@ (800cf90 <xTaskResumeAll+0x12c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d302      	bcc.n	800cf12 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cf0c:	4b21      	ldr	r3, [pc, #132]	@ (800cf94 <xTaskResumeAll+0x130>)
 800cf0e:	2201      	movs	r2, #1
 800cf10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf12:	4b1c      	ldr	r3, [pc, #112]	@ (800cf84 <xTaskResumeAll+0x120>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1cb      	bne.n	800ceb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf20:	f000 fb8e 	bl	800d640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cf24:	4b1c      	ldr	r3, [pc, #112]	@ (800cf98 <xTaskResumeAll+0x134>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d010      	beq.n	800cf52 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf30:	f000 f846 	bl	800cfc0 <xTaskIncrementTick>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d002      	beq.n	800cf40 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cf3a:	4b16      	ldr	r3, [pc, #88]	@ (800cf94 <xTaskResumeAll+0x130>)
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1f1      	bne.n	800cf30 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cf4c:	4b12      	ldr	r3, [pc, #72]	@ (800cf98 <xTaskResumeAll+0x134>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf52:	4b10      	ldr	r3, [pc, #64]	@ (800cf94 <xTaskResumeAll+0x130>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d009      	beq.n	800cf6e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf5e:	4b0f      	ldr	r3, [pc, #60]	@ (800cf9c <xTaskResumeAll+0x138>)
 800cf60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf64:	601a      	str	r2, [r3, #0]
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf6e:	f001 f925 	bl	800e1bc <vPortExitCritical>

	return xAlreadyYielded;
 800cf72:	68bb      	ldr	r3, [r7, #8]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	24033cec 	.word	0x24033cec
 800cf80:	24033cc4 	.word	0x24033cc4
 800cf84:	24033c84 	.word	0x24033c84
 800cf88:	24033ccc 	.word	0x24033ccc
 800cf8c:	240337f4 	.word	0x240337f4
 800cf90:	240337f0 	.word	0x240337f0
 800cf94:	24033cd8 	.word	0x24033cd8
 800cf98:	24033cd4 	.word	0x24033cd4
 800cf9c:	e000ed04 	.word	0xe000ed04

0800cfa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cfa6:	4b05      	ldr	r3, [pc, #20]	@ (800cfbc <xTaskGetTickCount+0x1c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cfac:	687b      	ldr	r3, [r7, #4]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	24033cc8 	.word	0x24033cc8

0800cfc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfca:	4b4f      	ldr	r3, [pc, #316]	@ (800d108 <xTaskIncrementTick+0x148>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f040 8090 	bne.w	800d0f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfd4:	4b4d      	ldr	r3, [pc, #308]	@ (800d10c <xTaskIncrementTick+0x14c>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cfdc:	4a4b      	ldr	r2, [pc, #300]	@ (800d10c <xTaskIncrementTick+0x14c>)
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d121      	bne.n	800d02c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfe8:	4b49      	ldr	r3, [pc, #292]	@ (800d110 <xTaskIncrementTick+0x150>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00b      	beq.n	800d00a <xTaskIncrementTick+0x4a>
	__asm volatile
 800cff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff6:	f383 8811 	msr	BASEPRI, r3
 800cffa:	f3bf 8f6f 	isb	sy
 800cffe:	f3bf 8f4f 	dsb	sy
 800d002:	603b      	str	r3, [r7, #0]
}
 800d004:	bf00      	nop
 800d006:	bf00      	nop
 800d008:	e7fd      	b.n	800d006 <xTaskIncrementTick+0x46>
 800d00a:	4b41      	ldr	r3, [pc, #260]	@ (800d110 <xTaskIncrementTick+0x150>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	4b40      	ldr	r3, [pc, #256]	@ (800d114 <xTaskIncrementTick+0x154>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a3e      	ldr	r2, [pc, #248]	@ (800d110 <xTaskIncrementTick+0x150>)
 800d016:	6013      	str	r3, [r2, #0]
 800d018:	4a3e      	ldr	r2, [pc, #248]	@ (800d114 <xTaskIncrementTick+0x154>)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6013      	str	r3, [r2, #0]
 800d01e:	4b3e      	ldr	r3, [pc, #248]	@ (800d118 <xTaskIncrementTick+0x158>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3301      	adds	r3, #1
 800d024:	4a3c      	ldr	r2, [pc, #240]	@ (800d118 <xTaskIncrementTick+0x158>)
 800d026:	6013      	str	r3, [r2, #0]
 800d028:	f000 fb0a 	bl	800d640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d02c:	4b3b      	ldr	r3, [pc, #236]	@ (800d11c <xTaskIncrementTick+0x15c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	429a      	cmp	r2, r3
 800d034:	d349      	bcc.n	800d0ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d036:	4b36      	ldr	r3, [pc, #216]	@ (800d110 <xTaskIncrementTick+0x150>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d104      	bne.n	800d04a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d040:	4b36      	ldr	r3, [pc, #216]	@ (800d11c <xTaskIncrementTick+0x15c>)
 800d042:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d046:	601a      	str	r2, [r3, #0]
					break;
 800d048:	e03f      	b.n	800d0ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d04a:	4b31      	ldr	r3, [pc, #196]	@ (800d110 <xTaskIncrementTick+0x150>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d203      	bcs.n	800d06a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d062:	4a2e      	ldr	r2, [pc, #184]	@ (800d11c <xTaskIncrementTick+0x15c>)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d068:	e02f      	b.n	800d0ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	3304      	adds	r3, #4
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fe ff62 	bl	800bf38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d004      	beq.n	800d086 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	3318      	adds	r3, #24
 800d080:	4618      	mov	r0, r3
 800d082:	f7fe ff59 	bl	800bf38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d08a:	4b25      	ldr	r3, [pc, #148]	@ (800d120 <xTaskIncrementTick+0x160>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d903      	bls.n	800d09a <xTaskIncrementTick+0xda>
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d096:	4a22      	ldr	r2, [pc, #136]	@ (800d120 <xTaskIncrementTick+0x160>)
 800d098:	6013      	str	r3, [r2, #0]
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d09e:	4613      	mov	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4413      	add	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4a1f      	ldr	r2, [pc, #124]	@ (800d124 <xTaskIncrementTick+0x164>)
 800d0a8:	441a      	add	r2, r3
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	f7fe fee4 	bl	800be7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ba:	4b1b      	ldr	r3, [pc, #108]	@ (800d128 <xTaskIncrementTick+0x168>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d3b8      	bcc.n	800d036 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0c8:	e7b5      	b.n	800d036 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d0ca:	4b17      	ldr	r3, [pc, #92]	@ (800d128 <xTaskIncrementTick+0x168>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0d0:	4914      	ldr	r1, [pc, #80]	@ (800d124 <xTaskIncrementTick+0x164>)
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	440b      	add	r3, r1
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d901      	bls.n	800d0e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d0e6:	4b11      	ldr	r3, [pc, #68]	@ (800d12c <xTaskIncrementTick+0x16c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d007      	beq.n	800d0fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	617b      	str	r3, [r7, #20]
 800d0f2:	e004      	b.n	800d0fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d130 <xTaskIncrementTick+0x170>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	4a0d      	ldr	r2, [pc, #52]	@ (800d130 <xTaskIncrementTick+0x170>)
 800d0fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d0fe:	697b      	ldr	r3, [r7, #20]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	24033cec 	.word	0x24033cec
 800d10c:	24033cc8 	.word	0x24033cc8
 800d110:	24033c7c 	.word	0x24033c7c
 800d114:	24033c80 	.word	0x24033c80
 800d118:	24033cdc 	.word	0x24033cdc
 800d11c:	24033ce4 	.word	0x24033ce4
 800d120:	24033ccc 	.word	0x24033ccc
 800d124:	240337f4 	.word	0x240337f4
 800d128:	240337f0 	.word	0x240337f0
 800d12c:	24033cd8 	.word	0x24033cd8
 800d130:	24033cd4 	.word	0x24033cd4

0800d134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d13a:	4b2b      	ldr	r3, [pc, #172]	@ (800d1e8 <vTaskSwitchContext+0xb4>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d003      	beq.n	800d14a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d142:	4b2a      	ldr	r3, [pc, #168]	@ (800d1ec <vTaskSwitchContext+0xb8>)
 800d144:	2201      	movs	r2, #1
 800d146:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d148:	e047      	b.n	800d1da <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d14a:	4b28      	ldr	r3, [pc, #160]	@ (800d1ec <vTaskSwitchContext+0xb8>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d150:	4b27      	ldr	r3, [pc, #156]	@ (800d1f0 <vTaskSwitchContext+0xbc>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	60fb      	str	r3, [r7, #12]
 800d156:	e011      	b.n	800d17c <vTaskSwitchContext+0x48>
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10b      	bne.n	800d176 <vTaskSwitchContext+0x42>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	607b      	str	r3, [r7, #4]
}
 800d170:	bf00      	nop
 800d172:	bf00      	nop
 800d174:	e7fd      	b.n	800d172 <vTaskSwitchContext+0x3e>
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	3b01      	subs	r3, #1
 800d17a:	60fb      	str	r3, [r7, #12]
 800d17c:	491d      	ldr	r1, [pc, #116]	@ (800d1f4 <vTaskSwitchContext+0xc0>)
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	4613      	mov	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4413      	add	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	440b      	add	r3, r1
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d0e3      	beq.n	800d158 <vTaskSwitchContext+0x24>
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	4613      	mov	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4413      	add	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4a16      	ldr	r2, [pc, #88]	@ (800d1f4 <vTaskSwitchContext+0xc0>)
 800d19c:	4413      	add	r3, r2
 800d19e:	60bb      	str	r3, [r7, #8]
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	685a      	ldr	r2, [r3, #4]
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	605a      	str	r2, [r3, #4]
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	3308      	adds	r3, #8
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d104      	bne.n	800d1c0 <vTaskSwitchContext+0x8c>
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	685a      	ldr	r2, [r3, #4]
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	605a      	str	r2, [r3, #4]
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d1f8 <vTaskSwitchContext+0xc4>)
 800d1c8:	6013      	str	r3, [r2, #0]
 800d1ca:	4a09      	ldr	r2, [pc, #36]	@ (800d1f0 <vTaskSwitchContext+0xbc>)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d1d0:	4b09      	ldr	r3, [pc, #36]	@ (800d1f8 <vTaskSwitchContext+0xc4>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3354      	adds	r3, #84	@ 0x54
 800d1d6:	4a09      	ldr	r2, [pc, #36]	@ (800d1fc <vTaskSwitchContext+0xc8>)
 800d1d8:	6013      	str	r3, [r2, #0]
}
 800d1da:	bf00      	nop
 800d1dc:	3714      	adds	r7, #20
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop
 800d1e8:	24033cec 	.word	0x24033cec
 800d1ec:	24033cd8 	.word	0x24033cd8
 800d1f0:	24033ccc 	.word	0x24033ccc
 800d1f4:	240337f4 	.word	0x240337f4
 800d1f8:	240337f0 	.word	0x240337f0
 800d1fc:	24001210 	.word	0x24001210

0800d200 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d10b      	bne.n	800d228 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	60fb      	str	r3, [r7, #12]
}
 800d222:	bf00      	nop
 800d224:	bf00      	nop
 800d226:	e7fd      	b.n	800d224 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d228:	4b07      	ldr	r3, [pc, #28]	@ (800d248 <vTaskPlaceOnEventList+0x48>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	3318      	adds	r3, #24
 800d22e:	4619      	mov	r1, r3
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7fe fe48 	bl	800bec6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d236:	2101      	movs	r1, #1
 800d238:	6838      	ldr	r0, [r7, #0]
 800d23a:	f000 faaf 	bl	800d79c <prvAddCurrentTaskToDelayedList>
}
 800d23e:	bf00      	nop
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	240337f0 	.word	0x240337f0

0800d24c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b086      	sub	sp, #24
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d10b      	bne.n	800d276 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	617b      	str	r3, [r7, #20]
}
 800d270:	bf00      	nop
 800d272:	bf00      	nop
 800d274:	e7fd      	b.n	800d272 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d276:	4b0a      	ldr	r3, [pc, #40]	@ (800d2a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	3318      	adds	r3, #24
 800d27c:	4619      	mov	r1, r3
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f7fe fdfd 	bl	800be7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d002      	beq.n	800d290 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d28a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d28e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d290:	6879      	ldr	r1, [r7, #4]
 800d292:	68b8      	ldr	r0, [r7, #8]
 800d294:	f000 fa82 	bl	800d79c <prvAddCurrentTaskToDelayedList>
	}
 800d298:	bf00      	nop
 800d29a:	3718      	adds	r7, #24
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	240337f0 	.word	0x240337f0

0800d2a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b086      	sub	sp, #24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d10b      	bne.n	800d2d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	60fb      	str	r3, [r7, #12]
}
 800d2cc:	bf00      	nop
 800d2ce:	bf00      	nop
 800d2d0:	e7fd      	b.n	800d2ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	3318      	adds	r3, #24
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fe fe2e 	bl	800bf38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2dc:	4b1d      	ldr	r3, [pc, #116]	@ (800d354 <xTaskRemoveFromEventList+0xb0>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d11d      	bne.n	800d320 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	3304      	adds	r3, #4
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fe fe25 	bl	800bf38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2f2:	4b19      	ldr	r3, [pc, #100]	@ (800d358 <xTaskRemoveFromEventList+0xb4>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d903      	bls.n	800d302 <xTaskRemoveFromEventList+0x5e>
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2fe:	4a16      	ldr	r2, [pc, #88]	@ (800d358 <xTaskRemoveFromEventList+0xb4>)
 800d300:	6013      	str	r3, [r2, #0]
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d306:	4613      	mov	r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	4413      	add	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4a13      	ldr	r2, [pc, #76]	@ (800d35c <xTaskRemoveFromEventList+0xb8>)
 800d310:	441a      	add	r2, r3
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	3304      	adds	r3, #4
 800d316:	4619      	mov	r1, r3
 800d318:	4610      	mov	r0, r2
 800d31a:	f7fe fdb0 	bl	800be7e <vListInsertEnd>
 800d31e:	e005      	b.n	800d32c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	3318      	adds	r3, #24
 800d324:	4619      	mov	r1, r3
 800d326:	480e      	ldr	r0, [pc, #56]	@ (800d360 <xTaskRemoveFromEventList+0xbc>)
 800d328:	f7fe fda9 	bl	800be7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d330:	4b0c      	ldr	r3, [pc, #48]	@ (800d364 <xTaskRemoveFromEventList+0xc0>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d336:	429a      	cmp	r2, r3
 800d338:	d905      	bls.n	800d346 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d33a:	2301      	movs	r3, #1
 800d33c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d33e:	4b0a      	ldr	r3, [pc, #40]	@ (800d368 <xTaskRemoveFromEventList+0xc4>)
 800d340:	2201      	movs	r2, #1
 800d342:	601a      	str	r2, [r3, #0]
 800d344:	e001      	b.n	800d34a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d346:	2300      	movs	r3, #0
 800d348:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d34a:	697b      	ldr	r3, [r7, #20]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3718      	adds	r7, #24
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	24033cec 	.word	0x24033cec
 800d358:	24033ccc 	.word	0x24033ccc
 800d35c:	240337f4 	.word	0x240337f4
 800d360:	24033c84 	.word	0x24033c84
 800d364:	240337f0 	.word	0x240337f0
 800d368:	24033cd8 	.word	0x24033cd8

0800d36c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10b      	bne.n	800d392 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	60fb      	str	r3, [r7, #12]
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	e7fd      	b.n	800d38e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d392:	f000 fee1 	bl	800e158 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d396:	4b07      	ldr	r3, [pc, #28]	@ (800d3b4 <vTaskSetTimeOutState+0x48>)
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d39e:	4b06      	ldr	r3, [pc, #24]	@ (800d3b8 <vTaskSetTimeOutState+0x4c>)
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d3a6:	f000 ff09 	bl	800e1bc <vPortExitCritical>
}
 800d3aa:	bf00      	nop
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	24033cdc 	.word	0x24033cdc
 800d3b8:	24033cc8 	.word	0x24033cc8

0800d3bc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d3c4:	4b06      	ldr	r3, [pc, #24]	@ (800d3e0 <vTaskInternalSetTimeOutState+0x24>)
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d3cc:	4b05      	ldr	r3, [pc, #20]	@ (800d3e4 <vTaskInternalSetTimeOutState+0x28>)
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	605a      	str	r2, [r3, #4]
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	24033cdc 	.word	0x24033cdc
 800d3e4:	24033cc8 	.word	0x24033cc8

0800d3e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10b      	bne.n	800d410 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	613b      	str	r3, [r7, #16]
}
 800d40a:	bf00      	nop
 800d40c:	bf00      	nop
 800d40e:	e7fd      	b.n	800d40c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d10b      	bne.n	800d42e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d41a:	f383 8811 	msr	BASEPRI, r3
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	60fb      	str	r3, [r7, #12]
}
 800d428:	bf00      	nop
 800d42a:	bf00      	nop
 800d42c:	e7fd      	b.n	800d42a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d42e:	f000 fe93 	bl	800e158 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d432:	4b1d      	ldr	r3, [pc, #116]	@ (800d4a8 <xTaskCheckForTimeOut+0xc0>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	69ba      	ldr	r2, [r7, #24]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d44a:	d102      	bne.n	800d452 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d44c:	2300      	movs	r3, #0
 800d44e:	61fb      	str	r3, [r7, #28]
 800d450:	e023      	b.n	800d49a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	4b15      	ldr	r3, [pc, #84]	@ (800d4ac <xTaskCheckForTimeOut+0xc4>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d007      	beq.n	800d46e <xTaskCheckForTimeOut+0x86>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	69ba      	ldr	r2, [r7, #24]
 800d464:	429a      	cmp	r2, r3
 800d466:	d302      	bcc.n	800d46e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d468:	2301      	movs	r3, #1
 800d46a:	61fb      	str	r3, [r7, #28]
 800d46c:	e015      	b.n	800d49a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	429a      	cmp	r2, r3
 800d476:	d20b      	bcs.n	800d490 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	1ad2      	subs	r2, r2, r3
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff ff99 	bl	800d3bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d48a:	2300      	movs	r3, #0
 800d48c:	61fb      	str	r3, [r7, #28]
 800d48e:	e004      	b.n	800d49a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	2200      	movs	r2, #0
 800d494:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d496:	2301      	movs	r3, #1
 800d498:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d49a:	f000 fe8f 	bl	800e1bc <vPortExitCritical>

	return xReturn;
 800d49e:	69fb      	ldr	r3, [r7, #28]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3720      	adds	r7, #32
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	24033cc8 	.word	0x24033cc8
 800d4ac:	24033cdc 	.word	0x24033cdc

0800d4b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d4b4:	4b03      	ldr	r3, [pc, #12]	@ (800d4c4 <vTaskMissedYield+0x14>)
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	601a      	str	r2, [r3, #0]
}
 800d4ba:	bf00      	nop
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	24033cd8 	.word	0x24033cd8

0800d4c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d4d0:	f000 f852 	bl	800d578 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d4d4:	4b06      	ldr	r3, [pc, #24]	@ (800d4f0 <prvIdleTask+0x28>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d9f9      	bls.n	800d4d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d4dc:	4b05      	ldr	r3, [pc, #20]	@ (800d4f4 <prvIdleTask+0x2c>)
 800d4de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	f3bf 8f4f 	dsb	sy
 800d4e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d4ec:	e7f0      	b.n	800d4d0 <prvIdleTask+0x8>
 800d4ee:	bf00      	nop
 800d4f0:	240337f4 	.word	0x240337f4
 800d4f4:	e000ed04 	.word	0xe000ed04

0800d4f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4fe:	2300      	movs	r3, #0
 800d500:	607b      	str	r3, [r7, #4]
 800d502:	e00c      	b.n	800d51e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	4613      	mov	r3, r2
 800d508:	009b      	lsls	r3, r3, #2
 800d50a:	4413      	add	r3, r2
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	4a12      	ldr	r2, [pc, #72]	@ (800d558 <prvInitialiseTaskLists+0x60>)
 800d510:	4413      	add	r3, r2
 800d512:	4618      	mov	r0, r3
 800d514:	f7fe fc86 	bl	800be24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	3301      	adds	r3, #1
 800d51c:	607b      	str	r3, [r7, #4]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b37      	cmp	r3, #55	@ 0x37
 800d522:	d9ef      	bls.n	800d504 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d524:	480d      	ldr	r0, [pc, #52]	@ (800d55c <prvInitialiseTaskLists+0x64>)
 800d526:	f7fe fc7d 	bl	800be24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d52a:	480d      	ldr	r0, [pc, #52]	@ (800d560 <prvInitialiseTaskLists+0x68>)
 800d52c:	f7fe fc7a 	bl	800be24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d530:	480c      	ldr	r0, [pc, #48]	@ (800d564 <prvInitialiseTaskLists+0x6c>)
 800d532:	f7fe fc77 	bl	800be24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d536:	480c      	ldr	r0, [pc, #48]	@ (800d568 <prvInitialiseTaskLists+0x70>)
 800d538:	f7fe fc74 	bl	800be24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d53c:	480b      	ldr	r0, [pc, #44]	@ (800d56c <prvInitialiseTaskLists+0x74>)
 800d53e:	f7fe fc71 	bl	800be24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d542:	4b0b      	ldr	r3, [pc, #44]	@ (800d570 <prvInitialiseTaskLists+0x78>)
 800d544:	4a05      	ldr	r2, [pc, #20]	@ (800d55c <prvInitialiseTaskLists+0x64>)
 800d546:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d548:	4b0a      	ldr	r3, [pc, #40]	@ (800d574 <prvInitialiseTaskLists+0x7c>)
 800d54a:	4a05      	ldr	r2, [pc, #20]	@ (800d560 <prvInitialiseTaskLists+0x68>)
 800d54c:	601a      	str	r2, [r3, #0]
}
 800d54e:	bf00      	nop
 800d550:	3708      	adds	r7, #8
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	240337f4 	.word	0x240337f4
 800d55c:	24033c54 	.word	0x24033c54
 800d560:	24033c68 	.word	0x24033c68
 800d564:	24033c84 	.word	0x24033c84
 800d568:	24033c98 	.word	0x24033c98
 800d56c:	24033cb0 	.word	0x24033cb0
 800d570:	24033c7c 	.word	0x24033c7c
 800d574:	24033c80 	.word	0x24033c80

0800d578 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d57e:	e019      	b.n	800d5b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d580:	f000 fdea 	bl	800e158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d584:	4b10      	ldr	r3, [pc, #64]	@ (800d5c8 <prvCheckTasksWaitingTermination+0x50>)
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	3304      	adds	r3, #4
 800d590:	4618      	mov	r0, r3
 800d592:	f7fe fcd1 	bl	800bf38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d596:	4b0d      	ldr	r3, [pc, #52]	@ (800d5cc <prvCheckTasksWaitingTermination+0x54>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	4a0b      	ldr	r2, [pc, #44]	@ (800d5cc <prvCheckTasksWaitingTermination+0x54>)
 800d59e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d5a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d0 <prvCheckTasksWaitingTermination+0x58>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	4a0a      	ldr	r2, [pc, #40]	@ (800d5d0 <prvCheckTasksWaitingTermination+0x58>)
 800d5a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d5aa:	f000 fe07 	bl	800e1bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f810 	bl	800d5d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5b4:	4b06      	ldr	r3, [pc, #24]	@ (800d5d0 <prvCheckTasksWaitingTermination+0x58>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1e1      	bne.n	800d580 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	24033c98 	.word	0x24033c98
 800d5cc:	24033cc4 	.word	0x24033cc4
 800d5d0:	24033cac 	.word	0x24033cac

0800d5d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	3354      	adds	r3, #84	@ 0x54
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f010 fa6d 	bl	801dac0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d108      	bne.n	800d602 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f000 ff9f 	bl	800e538 <vPortFree>
				vPortFree( pxTCB );
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 ff9c 	bl	800e538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d600:	e019      	b.n	800d636 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d103      	bne.n	800d614 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 ff93 	bl	800e538 <vPortFree>
	}
 800d612:	e010      	b.n	800d636 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d61a:	2b02      	cmp	r3, #2
 800d61c:	d00b      	beq.n	800d636 <prvDeleteTCB+0x62>
	__asm volatile
 800d61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d622:	f383 8811 	msr	BASEPRI, r3
 800d626:	f3bf 8f6f 	isb	sy
 800d62a:	f3bf 8f4f 	dsb	sy
 800d62e:	60fb      	str	r3, [r7, #12]
}
 800d630:	bf00      	nop
 800d632:	bf00      	nop
 800d634:	e7fd      	b.n	800d632 <prvDeleteTCB+0x5e>
	}
 800d636:	bf00      	nop
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d646:	4b0c      	ldr	r3, [pc, #48]	@ (800d678 <prvResetNextTaskUnblockTime+0x38>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d104      	bne.n	800d65a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d650:	4b0a      	ldr	r3, [pc, #40]	@ (800d67c <prvResetNextTaskUnblockTime+0x3c>)
 800d652:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d658:	e008      	b.n	800d66c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d65a:	4b07      	ldr	r3, [pc, #28]	@ (800d678 <prvResetNextTaskUnblockTime+0x38>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	4a04      	ldr	r2, [pc, #16]	@ (800d67c <prvResetNextTaskUnblockTime+0x3c>)
 800d66a:	6013      	str	r3, [r2, #0]
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	24033c7c 	.word	0x24033c7c
 800d67c:	24033ce4 	.word	0x24033ce4

0800d680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d686:	4b0b      	ldr	r3, [pc, #44]	@ (800d6b4 <xTaskGetSchedulerState+0x34>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d102      	bne.n	800d694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d68e:	2301      	movs	r3, #1
 800d690:	607b      	str	r3, [r7, #4]
 800d692:	e008      	b.n	800d6a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d694:	4b08      	ldr	r3, [pc, #32]	@ (800d6b8 <xTaskGetSchedulerState+0x38>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d102      	bne.n	800d6a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d69c:	2302      	movs	r3, #2
 800d69e:	607b      	str	r3, [r7, #4]
 800d6a0:	e001      	b.n	800d6a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d6a6:	687b      	ldr	r3, [r7, #4]
	}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr
 800d6b4:	24033cd0 	.word	0x24033cd0
 800d6b8:	24033cec 	.word	0x24033cec

0800d6bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d058      	beq.n	800d784 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6d2:	4b2f      	ldr	r3, [pc, #188]	@ (800d790 <xTaskPriorityDisinherit+0xd4>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	693a      	ldr	r2, [r7, #16]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d00b      	beq.n	800d6f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	60fb      	str	r3, [r7, #12]
}
 800d6ee:	bf00      	nop
 800d6f0:	bf00      	nop
 800d6f2:	e7fd      	b.n	800d6f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10b      	bne.n	800d714 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	60bb      	str	r3, [r7, #8]
}
 800d70e:	bf00      	nop
 800d710:	bf00      	nop
 800d712:	e7fd      	b.n	800d710 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d718:	1e5a      	subs	r2, r3, #1
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d726:	429a      	cmp	r2, r3
 800d728:	d02c      	beq.n	800d784 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d128      	bne.n	800d784 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	3304      	adds	r3, #4
 800d736:	4618      	mov	r0, r3
 800d738:	f7fe fbfe 	bl	800bf38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d748:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d754:	4b0f      	ldr	r3, [pc, #60]	@ (800d794 <xTaskPriorityDisinherit+0xd8>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d903      	bls.n	800d764 <xTaskPriorityDisinherit+0xa8>
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d760:	4a0c      	ldr	r2, [pc, #48]	@ (800d794 <xTaskPriorityDisinherit+0xd8>)
 800d762:	6013      	str	r3, [r2, #0]
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d768:	4613      	mov	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4413      	add	r3, r2
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	4a09      	ldr	r2, [pc, #36]	@ (800d798 <xTaskPriorityDisinherit+0xdc>)
 800d772:	441a      	add	r2, r3
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	3304      	adds	r3, #4
 800d778:	4619      	mov	r1, r3
 800d77a:	4610      	mov	r0, r2
 800d77c:	f7fe fb7f 	bl	800be7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d780:	2301      	movs	r3, #1
 800d782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d784:	697b      	ldr	r3, [r7, #20]
	}
 800d786:	4618      	mov	r0, r3
 800d788:	3718      	adds	r7, #24
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	240337f0 	.word	0x240337f0
 800d794:	24033ccc 	.word	0x24033ccc
 800d798:	240337f4 	.word	0x240337f4

0800d79c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d7a6:	4b21      	ldr	r3, [pc, #132]	@ (800d82c <prvAddCurrentTaskToDelayedList+0x90>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7ac:	4b20      	ldr	r3, [pc, #128]	@ (800d830 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	3304      	adds	r3, #4
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fe fbc0 	bl	800bf38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7be:	d10a      	bne.n	800d7d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d007      	beq.n	800d7d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d830 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	4819      	ldr	r0, [pc, #100]	@ (800d834 <prvAddCurrentTaskToDelayedList+0x98>)
 800d7d0:	f7fe fb55 	bl	800be7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d7d4:	e026      	b.n	800d824 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d7d6:	68fa      	ldr	r2, [r7, #12]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4413      	add	r3, r2
 800d7dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d7de:	4b14      	ldr	r3, [pc, #80]	@ (800d830 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d7e6:	68ba      	ldr	r2, [r7, #8]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d209      	bcs.n	800d802 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7ee:	4b12      	ldr	r3, [pc, #72]	@ (800d838 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	4b0f      	ldr	r3, [pc, #60]	@ (800d830 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	f7fe fb63 	bl	800bec6 <vListInsert>
}
 800d800:	e010      	b.n	800d824 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d802:	4b0e      	ldr	r3, [pc, #56]	@ (800d83c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	4b0a      	ldr	r3, [pc, #40]	@ (800d830 <prvAddCurrentTaskToDelayedList+0x94>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	3304      	adds	r3, #4
 800d80c:	4619      	mov	r1, r3
 800d80e:	4610      	mov	r0, r2
 800d810:	f7fe fb59 	bl	800bec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d814:	4b0a      	ldr	r3, [pc, #40]	@ (800d840 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d202      	bcs.n	800d824 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d81e:	4a08      	ldr	r2, [pc, #32]	@ (800d840 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	6013      	str	r3, [r2, #0]
}
 800d824:	bf00      	nop
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	24033cc8 	.word	0x24033cc8
 800d830:	240337f0 	.word	0x240337f0
 800d834:	24033cb0 	.word	0x24033cb0
 800d838:	24033c80 	.word	0x24033c80
 800d83c:	24033c7c 	.word	0x24033c7c
 800d840:	24033ce4 	.word	0x24033ce4

0800d844 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08a      	sub	sp, #40	@ 0x28
 800d848:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d84a:	2300      	movs	r3, #0
 800d84c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d84e:	f000 fb13 	bl	800de78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d852:	4b1d      	ldr	r3, [pc, #116]	@ (800d8c8 <xTimerCreateTimerTask+0x84>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d021      	beq.n	800d89e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d85a:	2300      	movs	r3, #0
 800d85c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d85e:	2300      	movs	r3, #0
 800d860:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d862:	1d3a      	adds	r2, r7, #4
 800d864:	f107 0108 	add.w	r1, r7, #8
 800d868:	f107 030c 	add.w	r3, r7, #12
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe fabf 	bl	800bdf0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d872:	6879      	ldr	r1, [r7, #4]
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	68fa      	ldr	r2, [r7, #12]
 800d878:	9202      	str	r2, [sp, #8]
 800d87a:	9301      	str	r3, [sp, #4]
 800d87c:	2302      	movs	r3, #2
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	2300      	movs	r3, #0
 800d882:	460a      	mov	r2, r1
 800d884:	4911      	ldr	r1, [pc, #68]	@ (800d8cc <xTimerCreateTimerTask+0x88>)
 800d886:	4812      	ldr	r0, [pc, #72]	@ (800d8d0 <xTimerCreateTimerTask+0x8c>)
 800d888:	f7ff f87a 	bl	800c980 <xTaskCreateStatic>
 800d88c:	4603      	mov	r3, r0
 800d88e:	4a11      	ldr	r2, [pc, #68]	@ (800d8d4 <xTimerCreateTimerTask+0x90>)
 800d890:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d892:	4b10      	ldr	r3, [pc, #64]	@ (800d8d4 <xTimerCreateTimerTask+0x90>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d89a:	2301      	movs	r3, #1
 800d89c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10b      	bne.n	800d8bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	613b      	str	r3, [r7, #16]
}
 800d8b6:	bf00      	nop
 800d8b8:	bf00      	nop
 800d8ba:	e7fd      	b.n	800d8b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d8bc:	697b      	ldr	r3, [r7, #20]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3718      	adds	r7, #24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	24033d20 	.word	0x24033d20
 800d8cc:	0801eb14 	.word	0x0801eb14
 800d8d0:	0800da11 	.word	0x0800da11
 800d8d4:	24033d24 	.word	0x24033d24

0800d8d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b08a      	sub	sp, #40	@ 0x28
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
 800d8e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10b      	bne.n	800d908 <xTimerGenericCommand+0x30>
	__asm volatile
 800d8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	623b      	str	r3, [r7, #32]
}
 800d902:	bf00      	nop
 800d904:	bf00      	nop
 800d906:	e7fd      	b.n	800d904 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d908:	4b19      	ldr	r3, [pc, #100]	@ (800d970 <xTimerGenericCommand+0x98>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d02a      	beq.n	800d966 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	2b05      	cmp	r3, #5
 800d920:	dc18      	bgt.n	800d954 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d922:	f7ff fead 	bl	800d680 <xTaskGetSchedulerState>
 800d926:	4603      	mov	r3, r0
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d109      	bne.n	800d940 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d92c:	4b10      	ldr	r3, [pc, #64]	@ (800d970 <xTimerGenericCommand+0x98>)
 800d92e:	6818      	ldr	r0, [r3, #0]
 800d930:	f107 0110 	add.w	r1, r7, #16
 800d934:	2300      	movs	r3, #0
 800d936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d938:	f7fe fc32 	bl	800c1a0 <xQueueGenericSend>
 800d93c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d93e:	e012      	b.n	800d966 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d940:	4b0b      	ldr	r3, [pc, #44]	@ (800d970 <xTimerGenericCommand+0x98>)
 800d942:	6818      	ldr	r0, [r3, #0]
 800d944:	f107 0110 	add.w	r1, r7, #16
 800d948:	2300      	movs	r3, #0
 800d94a:	2200      	movs	r2, #0
 800d94c:	f7fe fc28 	bl	800c1a0 <xQueueGenericSend>
 800d950:	6278      	str	r0, [r7, #36]	@ 0x24
 800d952:	e008      	b.n	800d966 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d954:	4b06      	ldr	r3, [pc, #24]	@ (800d970 <xTimerGenericCommand+0x98>)
 800d956:	6818      	ldr	r0, [r3, #0]
 800d958:	f107 0110 	add.w	r1, r7, #16
 800d95c:	2300      	movs	r3, #0
 800d95e:	683a      	ldr	r2, [r7, #0]
 800d960:	f7fe fd20 	bl	800c3a4 <xQueueGenericSendFromISR>
 800d964:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3728      	adds	r7, #40	@ 0x28
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	24033d20 	.word	0x24033d20

0800d974 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b088      	sub	sp, #32
 800d978:	af02      	add	r7, sp, #8
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d97e:	4b23      	ldr	r3, [pc, #140]	@ (800da0c <prvProcessExpiredTimer+0x98>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	3304      	adds	r3, #4
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fe fad3 	bl	800bf38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d998:	f003 0304 	and.w	r3, r3, #4
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d023      	beq.n	800d9e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	699a      	ldr	r2, [r3, #24]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	18d1      	adds	r1, r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	6978      	ldr	r0, [r7, #20]
 800d9ae:	f000 f8d5 	bl	800db5c <prvInsertTimerInActiveList>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d020      	beq.n	800d9fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	2300      	movs	r3, #0
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	6978      	ldr	r0, [r7, #20]
 800d9c4:	f7ff ff88 	bl	800d8d8 <xTimerGenericCommand>
 800d9c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d114      	bne.n	800d9fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	60fb      	str	r3, [r7, #12]
}
 800d9e2:	bf00      	nop
 800d9e4:	bf00      	nop
 800d9e6:	e7fd      	b.n	800d9e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9ee:	f023 0301 	bic.w	r3, r3, #1
 800d9f2:	b2da      	uxtb	r2, r3
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	6a1b      	ldr	r3, [r3, #32]
 800d9fe:	6978      	ldr	r0, [r7, #20]
 800da00:	4798      	blx	r3
}
 800da02:	bf00      	nop
 800da04:	3718      	adds	r7, #24
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	24033d18 	.word	0x24033d18

0800da10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da18:	f107 0308 	add.w	r3, r7, #8
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 f859 	bl	800dad4 <prvGetNextExpireTime>
 800da22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	4619      	mov	r1, r3
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f000 f805 	bl	800da38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da2e:	f000 f8d7 	bl	800dbe0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da32:	bf00      	nop
 800da34:	e7f0      	b.n	800da18 <prvTimerTask+0x8>
	...

0800da38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da42:	f7ff fa01 	bl	800ce48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da46:	f107 0308 	add.w	r3, r7, #8
 800da4a:	4618      	mov	r0, r3
 800da4c:	f000 f866 	bl	800db1c <prvSampleTimeNow>
 800da50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d130      	bne.n	800daba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d10a      	bne.n	800da74 <prvProcessTimerOrBlockTask+0x3c>
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	429a      	cmp	r2, r3
 800da64:	d806      	bhi.n	800da74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da66:	f7ff f9fd 	bl	800ce64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da6a:	68f9      	ldr	r1, [r7, #12]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff ff81 	bl	800d974 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da72:	e024      	b.n	800dabe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d008      	beq.n	800da8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800da7a:	4b13      	ldr	r3, [pc, #76]	@ (800dac8 <prvProcessTimerOrBlockTask+0x90>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d101      	bne.n	800da88 <prvProcessTimerOrBlockTask+0x50>
 800da84:	2301      	movs	r3, #1
 800da86:	e000      	b.n	800da8a <prvProcessTimerOrBlockTask+0x52>
 800da88:	2300      	movs	r3, #0
 800da8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800da8c:	4b0f      	ldr	r3, [pc, #60]	@ (800dacc <prvProcessTimerOrBlockTask+0x94>)
 800da8e:	6818      	ldr	r0, [r3, #0]
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	4619      	mov	r1, r3
 800da9a:	f7fe ff3d 	bl	800c918 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800da9e:	f7ff f9e1 	bl	800ce64 <xTaskResumeAll>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d10a      	bne.n	800dabe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800daa8:	4b09      	ldr	r3, [pc, #36]	@ (800dad0 <prvProcessTimerOrBlockTask+0x98>)
 800daaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daae:	601a      	str	r2, [r3, #0]
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	f3bf 8f6f 	isb	sy
}
 800dab8:	e001      	b.n	800dabe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800daba:	f7ff f9d3 	bl	800ce64 <xTaskResumeAll>
}
 800dabe:	bf00      	nop
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	24033d1c 	.word	0x24033d1c
 800dacc:	24033d20 	.word	0x24033d20
 800dad0:	e000ed04 	.word	0xe000ed04

0800dad4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dadc:	4b0e      	ldr	r3, [pc, #56]	@ (800db18 <prvGetNextExpireTime+0x44>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d101      	bne.n	800daea <prvGetNextExpireTime+0x16>
 800dae6:	2201      	movs	r2, #1
 800dae8:	e000      	b.n	800daec <prvGetNextExpireTime+0x18>
 800daea:	2200      	movs	r2, #0
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d105      	bne.n	800db04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800daf8:	4b07      	ldr	r3, [pc, #28]	@ (800db18 <prvGetNextExpireTime+0x44>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68db      	ldr	r3, [r3, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	60fb      	str	r3, [r7, #12]
 800db02:	e001      	b.n	800db08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db04:	2300      	movs	r3, #0
 800db06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db08:	68fb      	ldr	r3, [r7, #12]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3714      	adds	r7, #20
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	24033d18 	.word	0x24033d18

0800db1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db24:	f7ff fa3c 	bl	800cfa0 <xTaskGetTickCount>
 800db28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db2a:	4b0b      	ldr	r3, [pc, #44]	@ (800db58 <prvSampleTimeNow+0x3c>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	429a      	cmp	r2, r3
 800db32:	d205      	bcs.n	800db40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db34:	f000 f93a 	bl	800ddac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	e002      	b.n	800db46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db46:	4a04      	ldr	r2, [pc, #16]	@ (800db58 <prvSampleTimeNow+0x3c>)
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db4c:	68fb      	ldr	r3, [r7, #12]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	24033d28 	.word	0x24033d28

0800db5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	60b9      	str	r1, [r7, #8]
 800db66:	607a      	str	r2, [r7, #4]
 800db68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db6a:	2300      	movs	r3, #0
 800db6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	68ba      	ldr	r2, [r7, #8]
 800db72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	68fa      	ldr	r2, [r7, #12]
 800db78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800db7a:	68ba      	ldr	r2, [r7, #8]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d812      	bhi.n	800dba8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	1ad2      	subs	r2, r2, r3
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	699b      	ldr	r3, [r3, #24]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d302      	bcc.n	800db96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800db90:	2301      	movs	r3, #1
 800db92:	617b      	str	r3, [r7, #20]
 800db94:	e01b      	b.n	800dbce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800db96:	4b10      	ldr	r3, [pc, #64]	@ (800dbd8 <prvInsertTimerInActiveList+0x7c>)
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	3304      	adds	r3, #4
 800db9e:	4619      	mov	r1, r3
 800dba0:	4610      	mov	r0, r2
 800dba2:	f7fe f990 	bl	800bec6 <vListInsert>
 800dba6:	e012      	b.n	800dbce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d206      	bcs.n	800dbbe <prvInsertTimerInActiveList+0x62>
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d302      	bcc.n	800dbbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	617b      	str	r3, [r7, #20]
 800dbbc:	e007      	b.n	800dbce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbbe:	4b07      	ldr	r3, [pc, #28]	@ (800dbdc <prvInsertTimerInActiveList+0x80>)
 800dbc0:	681a      	ldr	r2, [r3, #0]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	4610      	mov	r0, r2
 800dbca:	f7fe f97c 	bl	800bec6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dbce:	697b      	ldr	r3, [r7, #20]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	24033d1c 	.word	0x24033d1c
 800dbdc:	24033d18 	.word	0x24033d18

0800dbe0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b08e      	sub	sp, #56	@ 0x38
 800dbe4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbe6:	e0ce      	b.n	800dd86 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	da19      	bge.n	800dc22 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dbee:	1d3b      	adds	r3, r7, #4
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10b      	bne.n	800dc12 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dbfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	61fb      	str	r3, [r7, #28]
}
 800dc0c:	bf00      	nop
 800dc0e:	bf00      	nop
 800dc10:	e7fd      	b.n	800dc0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc18:	6850      	ldr	r0, [r2, #4]
 800dc1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc1c:	6892      	ldr	r2, [r2, #8]
 800dc1e:	4611      	mov	r1, r2
 800dc20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f2c0 80ae 	blt.w	800dd86 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc30:	695b      	ldr	r3, [r3, #20]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d004      	beq.n	800dc40 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc38:	3304      	adds	r3, #4
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe f97c 	bl	800bf38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc40:	463b      	mov	r3, r7
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7ff ff6a 	bl	800db1c <prvSampleTimeNow>
 800dc48:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2b09      	cmp	r3, #9
 800dc4e:	f200 8097 	bhi.w	800dd80 <prvProcessReceivedCommands+0x1a0>
 800dc52:	a201      	add	r2, pc, #4	@ (adr r2, 800dc58 <prvProcessReceivedCommands+0x78>)
 800dc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc58:	0800dc81 	.word	0x0800dc81
 800dc5c:	0800dc81 	.word	0x0800dc81
 800dc60:	0800dc81 	.word	0x0800dc81
 800dc64:	0800dcf7 	.word	0x0800dcf7
 800dc68:	0800dd0b 	.word	0x0800dd0b
 800dc6c:	0800dd57 	.word	0x0800dd57
 800dc70:	0800dc81 	.word	0x0800dc81
 800dc74:	0800dc81 	.word	0x0800dc81
 800dc78:	0800dcf7 	.word	0x0800dcf7
 800dc7c:	0800dd0b 	.word	0x0800dd0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc86:	f043 0301 	orr.w	r3, r3, #1
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc96:	699b      	ldr	r3, [r3, #24]
 800dc98:	18d1      	adds	r1, r2, r3
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dca0:	f7ff ff5c 	bl	800db5c <prvInsertTimerInActiveList>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d06c      	beq.n	800dd84 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcac:	6a1b      	ldr	r3, [r3, #32]
 800dcae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcb8:	f003 0304 	and.w	r3, r3, #4
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d061      	beq.n	800dd84 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc4:	699b      	ldr	r3, [r3, #24]
 800dcc6:	441a      	add	r2, r3
 800dcc8:	2300      	movs	r3, #0
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	2300      	movs	r3, #0
 800dcce:	2100      	movs	r1, #0
 800dcd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcd2:	f7ff fe01 	bl	800d8d8 <xTimerGenericCommand>
 800dcd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dcd8:	6a3b      	ldr	r3, [r7, #32]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d152      	bne.n	800dd84 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	61bb      	str	r3, [r7, #24]
}
 800dcf0:	bf00      	nop
 800dcf2:	bf00      	nop
 800dcf4:	e7fd      	b.n	800dcf2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcfc:	f023 0301 	bic.w	r3, r3, #1
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dd08:	e03d      	b.n	800dd86 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd10:	f043 0301 	orr.w	r3, r3, #1
 800dd14:	b2da      	uxtb	r2, r3
 800dd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd24:	699b      	ldr	r3, [r3, #24]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d10b      	bne.n	800dd42 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800dd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd2e:	f383 8811 	msr	BASEPRI, r3
 800dd32:	f3bf 8f6f 	isb	sy
 800dd36:	f3bf 8f4f 	dsb	sy
 800dd3a:	617b      	str	r3, [r7, #20]
}
 800dd3c:	bf00      	nop
 800dd3e:	bf00      	nop
 800dd40:	e7fd      	b.n	800dd3e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd44:	699a      	ldr	r2, [r3, #24]
 800dd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd48:	18d1      	adds	r1, r2, r3
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd50:	f7ff ff04 	bl	800db5c <prvInsertTimerInActiveList>
					break;
 800dd54:	e017      	b.n	800dd86 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd5c:	f003 0302 	and.w	r3, r3, #2
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d103      	bne.n	800dd6c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800dd64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd66:	f000 fbe7 	bl	800e538 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd6a:	e00c      	b.n	800dd86 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd72:	f023 0301 	bic.w	r3, r3, #1
 800dd76:	b2da      	uxtb	r2, r3
 800dd78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dd7e:	e002      	b.n	800dd86 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dd80:	bf00      	nop
 800dd82:	e000      	b.n	800dd86 <prvProcessReceivedCommands+0x1a6>
					break;
 800dd84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd86:	4b08      	ldr	r3, [pc, #32]	@ (800dda8 <prvProcessReceivedCommands+0x1c8>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	1d39      	adds	r1, r7, #4
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe fba6 	bl	800c4e0 <xQueueReceive>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f47f af26 	bne.w	800dbe8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dd9c:	bf00      	nop
 800dd9e:	bf00      	nop
 800dda0:	3730      	adds	r7, #48	@ 0x30
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	24033d20 	.word	0x24033d20

0800ddac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddb2:	e049      	b.n	800de48 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddb4:	4b2e      	ldr	r3, [pc, #184]	@ (800de70 <prvSwitchTimerLists+0xc4>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddbe:	4b2c      	ldr	r3, [pc, #176]	@ (800de70 <prvSwitchTimerLists+0xc4>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	3304      	adds	r3, #4
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fe f8b3 	bl	800bf38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dde0:	f003 0304 	and.w	r3, r3, #4
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d02f      	beq.n	800de48 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	4413      	add	r3, r2
 800ddf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ddf2:	68ba      	ldr	r2, [r7, #8]
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d90e      	bls.n	800de18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	68ba      	ldr	r2, [r7, #8]
 800ddfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de06:	4b1a      	ldr	r3, [pc, #104]	@ (800de70 <prvSwitchTimerLists+0xc4>)
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	3304      	adds	r3, #4
 800de0e:	4619      	mov	r1, r3
 800de10:	4610      	mov	r0, r2
 800de12:	f7fe f858 	bl	800bec6 <vListInsert>
 800de16:	e017      	b.n	800de48 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de18:	2300      	movs	r3, #0
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	2300      	movs	r3, #0
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	2100      	movs	r1, #0
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	f7ff fd58 	bl	800d8d8 <xTimerGenericCommand>
 800de28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d10b      	bne.n	800de48 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800de30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	603b      	str	r3, [r7, #0]
}
 800de42:	bf00      	nop
 800de44:	bf00      	nop
 800de46:	e7fd      	b.n	800de44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de48:	4b09      	ldr	r3, [pc, #36]	@ (800de70 <prvSwitchTimerLists+0xc4>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d1b0      	bne.n	800ddb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de52:	4b07      	ldr	r3, [pc, #28]	@ (800de70 <prvSwitchTimerLists+0xc4>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de58:	4b06      	ldr	r3, [pc, #24]	@ (800de74 <prvSwitchTimerLists+0xc8>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a04      	ldr	r2, [pc, #16]	@ (800de70 <prvSwitchTimerLists+0xc4>)
 800de5e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de60:	4a04      	ldr	r2, [pc, #16]	@ (800de74 <prvSwitchTimerLists+0xc8>)
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	6013      	str	r3, [r2, #0]
}
 800de66:	bf00      	nop
 800de68:	3718      	adds	r7, #24
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	24033d18 	.word	0x24033d18
 800de74:	24033d1c 	.word	0x24033d1c

0800de78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de7e:	f000 f96b 	bl	800e158 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de82:	4b15      	ldr	r3, [pc, #84]	@ (800ded8 <prvCheckForValidListAndQueue+0x60>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d120      	bne.n	800decc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800de8a:	4814      	ldr	r0, [pc, #80]	@ (800dedc <prvCheckForValidListAndQueue+0x64>)
 800de8c:	f7fd ffca 	bl	800be24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de90:	4813      	ldr	r0, [pc, #76]	@ (800dee0 <prvCheckForValidListAndQueue+0x68>)
 800de92:	f7fd ffc7 	bl	800be24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de96:	4b13      	ldr	r3, [pc, #76]	@ (800dee4 <prvCheckForValidListAndQueue+0x6c>)
 800de98:	4a10      	ldr	r2, [pc, #64]	@ (800dedc <prvCheckForValidListAndQueue+0x64>)
 800de9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de9c:	4b12      	ldr	r3, [pc, #72]	@ (800dee8 <prvCheckForValidListAndQueue+0x70>)
 800de9e:	4a10      	ldr	r2, [pc, #64]	@ (800dee0 <prvCheckForValidListAndQueue+0x68>)
 800dea0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dea2:	2300      	movs	r3, #0
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	4b11      	ldr	r3, [pc, #68]	@ (800deec <prvCheckForValidListAndQueue+0x74>)
 800dea8:	4a11      	ldr	r2, [pc, #68]	@ (800def0 <prvCheckForValidListAndQueue+0x78>)
 800deaa:	2110      	movs	r1, #16
 800deac:	200a      	movs	r0, #10
 800deae:	f7fe f8d7 	bl	800c060 <xQueueGenericCreateStatic>
 800deb2:	4603      	mov	r3, r0
 800deb4:	4a08      	ldr	r2, [pc, #32]	@ (800ded8 <prvCheckForValidListAndQueue+0x60>)
 800deb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800deb8:	4b07      	ldr	r3, [pc, #28]	@ (800ded8 <prvCheckForValidListAndQueue+0x60>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d005      	beq.n	800decc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dec0:	4b05      	ldr	r3, [pc, #20]	@ (800ded8 <prvCheckForValidListAndQueue+0x60>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	490b      	ldr	r1, [pc, #44]	@ (800def4 <prvCheckForValidListAndQueue+0x7c>)
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fe fcfc 	bl	800c8c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800decc:	f000 f976 	bl	800e1bc <vPortExitCritical>
}
 800ded0:	bf00      	nop
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	24033d20 	.word	0x24033d20
 800dedc:	24033cf0 	.word	0x24033cf0
 800dee0:	24033d04 	.word	0x24033d04
 800dee4:	24033d18 	.word	0x24033d18
 800dee8:	24033d1c 	.word	0x24033d1c
 800deec:	24033dcc 	.word	0x24033dcc
 800def0:	24033d2c 	.word	0x24033d2c
 800def4:	0801eb1c 	.word	0x0801eb1c

0800def8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	3b04      	subs	r3, #4
 800df08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800df10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	3b04      	subs	r3, #4
 800df16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	f023 0201 	bic.w	r2, r3, #1
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	3b04      	subs	r3, #4
 800df26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df28:	4a0c      	ldr	r2, [pc, #48]	@ (800df5c <pxPortInitialiseStack+0x64>)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3b14      	subs	r3, #20
 800df32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	3b04      	subs	r3, #4
 800df3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f06f 0202 	mvn.w	r2, #2
 800df46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	3b20      	subs	r3, #32
 800df4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df4e:	68fb      	ldr	r3, [r7, #12]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3714      	adds	r7, #20
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr
 800df5c:	0800df61 	.word	0x0800df61

0800df60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df60:	b480      	push	{r7}
 800df62:	b085      	sub	sp, #20
 800df64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df66:	2300      	movs	r3, #0
 800df68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df6a:	4b13      	ldr	r3, [pc, #76]	@ (800dfb8 <prvTaskExitError+0x58>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df72:	d00b      	beq.n	800df8c <prvTaskExitError+0x2c>
	__asm volatile
 800df74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df78:	f383 8811 	msr	BASEPRI, r3
 800df7c:	f3bf 8f6f 	isb	sy
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	60fb      	str	r3, [r7, #12]
}
 800df86:	bf00      	nop
 800df88:	bf00      	nop
 800df8a:	e7fd      	b.n	800df88 <prvTaskExitError+0x28>
	__asm volatile
 800df8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	60bb      	str	r3, [r7, #8]
}
 800df9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dfa0:	bf00      	nop
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d0fc      	beq.n	800dfa2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dfa8:	bf00      	nop
 800dfaa:	bf00      	nop
 800dfac:	3714      	adds	r7, #20
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	24000014 	.word	0x24000014
 800dfbc:	00000000 	.word	0x00000000

0800dfc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dfc0:	4b07      	ldr	r3, [pc, #28]	@ (800dfe0 <pxCurrentTCBConst2>)
 800dfc2:	6819      	ldr	r1, [r3, #0]
 800dfc4:	6808      	ldr	r0, [r1, #0]
 800dfc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfca:	f380 8809 	msr	PSP, r0
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f04f 0000 	mov.w	r0, #0
 800dfd6:	f380 8811 	msr	BASEPRI, r0
 800dfda:	4770      	bx	lr
 800dfdc:	f3af 8000 	nop.w

0800dfe0 <pxCurrentTCBConst2>:
 800dfe0:	240337f0 	.word	0x240337f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dfe4:	bf00      	nop
 800dfe6:	bf00      	nop

0800dfe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dfe8:	4808      	ldr	r0, [pc, #32]	@ (800e00c <prvPortStartFirstTask+0x24>)
 800dfea:	6800      	ldr	r0, [r0, #0]
 800dfec:	6800      	ldr	r0, [r0, #0]
 800dfee:	f380 8808 	msr	MSP, r0
 800dff2:	f04f 0000 	mov.w	r0, #0
 800dff6:	f380 8814 	msr	CONTROL, r0
 800dffa:	b662      	cpsie	i
 800dffc:	b661      	cpsie	f
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	f3bf 8f6f 	isb	sy
 800e006:	df00      	svc	0
 800e008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e00a:	bf00      	nop
 800e00c:	e000ed08 	.word	0xe000ed08

0800e010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b086      	sub	sp, #24
 800e014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e016:	4b47      	ldr	r3, [pc, #284]	@ (800e134 <xPortStartScheduler+0x124>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4a47      	ldr	r2, [pc, #284]	@ (800e138 <xPortStartScheduler+0x128>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d10b      	bne.n	800e038 <xPortStartScheduler+0x28>
	__asm volatile
 800e020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	613b      	str	r3, [r7, #16]
}
 800e032:	bf00      	nop
 800e034:	bf00      	nop
 800e036:	e7fd      	b.n	800e034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e038:	4b3e      	ldr	r3, [pc, #248]	@ (800e134 <xPortStartScheduler+0x124>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a3f      	ldr	r2, [pc, #252]	@ (800e13c <xPortStartScheduler+0x12c>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d10b      	bne.n	800e05a <xPortStartScheduler+0x4a>
	__asm volatile
 800e042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	60fb      	str	r3, [r7, #12]
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop
 800e058:	e7fd      	b.n	800e056 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e05a:	4b39      	ldr	r3, [pc, #228]	@ (800e140 <xPortStartScheduler+0x130>)
 800e05c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	b2db      	uxtb	r3, r3
 800e064:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	22ff      	movs	r2, #255	@ 0xff
 800e06a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	b2db      	uxtb	r3, r3
 800e072:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e074:	78fb      	ldrb	r3, [r7, #3]
 800e076:	b2db      	uxtb	r3, r3
 800e078:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	4b31      	ldr	r3, [pc, #196]	@ (800e144 <xPortStartScheduler+0x134>)
 800e080:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e082:	4b31      	ldr	r3, [pc, #196]	@ (800e148 <xPortStartScheduler+0x138>)
 800e084:	2207      	movs	r2, #7
 800e086:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e088:	e009      	b.n	800e09e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e08a:	4b2f      	ldr	r3, [pc, #188]	@ (800e148 <xPortStartScheduler+0x138>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	3b01      	subs	r3, #1
 800e090:	4a2d      	ldr	r2, [pc, #180]	@ (800e148 <xPortStartScheduler+0x138>)
 800e092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e094:	78fb      	ldrb	r3, [r7, #3]
 800e096:	b2db      	uxtb	r3, r3
 800e098:	005b      	lsls	r3, r3, #1
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e09e:	78fb      	ldrb	r3, [r7, #3]
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0a6:	2b80      	cmp	r3, #128	@ 0x80
 800e0a8:	d0ef      	beq.n	800e08a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e0aa:	4b27      	ldr	r3, [pc, #156]	@ (800e148 <xPortStartScheduler+0x138>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f1c3 0307 	rsb	r3, r3, #7
 800e0b2:	2b04      	cmp	r3, #4
 800e0b4:	d00b      	beq.n	800e0ce <xPortStartScheduler+0xbe>
	__asm volatile
 800e0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ba:	f383 8811 	msr	BASEPRI, r3
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	60bb      	str	r3, [r7, #8]
}
 800e0c8:	bf00      	nop
 800e0ca:	bf00      	nop
 800e0cc:	e7fd      	b.n	800e0ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e0ce:	4b1e      	ldr	r3, [pc, #120]	@ (800e148 <xPortStartScheduler+0x138>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	021b      	lsls	r3, r3, #8
 800e0d4:	4a1c      	ldr	r2, [pc, #112]	@ (800e148 <xPortStartScheduler+0x138>)
 800e0d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e0d8:	4b1b      	ldr	r3, [pc, #108]	@ (800e148 <xPortStartScheduler+0x138>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e0e0:	4a19      	ldr	r2, [pc, #100]	@ (800e148 <xPortStartScheduler+0x138>)
 800e0e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e0ec:	4b17      	ldr	r3, [pc, #92]	@ (800e14c <xPortStartScheduler+0x13c>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a16      	ldr	r2, [pc, #88]	@ (800e14c <xPortStartScheduler+0x13c>)
 800e0f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e0f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e0f8:	4b14      	ldr	r3, [pc, #80]	@ (800e14c <xPortStartScheduler+0x13c>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a13      	ldr	r2, [pc, #76]	@ (800e14c <xPortStartScheduler+0x13c>)
 800e0fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e104:	f000 f8da 	bl	800e2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e108:	4b11      	ldr	r3, [pc, #68]	@ (800e150 <xPortStartScheduler+0x140>)
 800e10a:	2200      	movs	r2, #0
 800e10c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e10e:	f000 f8f9 	bl	800e304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e112:	4b10      	ldr	r3, [pc, #64]	@ (800e154 <xPortStartScheduler+0x144>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a0f      	ldr	r2, [pc, #60]	@ (800e154 <xPortStartScheduler+0x144>)
 800e118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e11c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e11e:	f7ff ff63 	bl	800dfe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e122:	f7ff f807 	bl	800d134 <vTaskSwitchContext>
	prvTaskExitError();
 800e126:	f7ff ff1b 	bl	800df60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	e000ed00 	.word	0xe000ed00
 800e138:	410fc271 	.word	0x410fc271
 800e13c:	410fc270 	.word	0x410fc270
 800e140:	e000e400 	.word	0xe000e400
 800e144:	24033e1c 	.word	0x24033e1c
 800e148:	24033e20 	.word	0x24033e20
 800e14c:	e000ed20 	.word	0xe000ed20
 800e150:	24000014 	.word	0x24000014
 800e154:	e000ef34 	.word	0xe000ef34

0800e158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
	__asm volatile
 800e15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e162:	f383 8811 	msr	BASEPRI, r3
 800e166:	f3bf 8f6f 	isb	sy
 800e16a:	f3bf 8f4f 	dsb	sy
 800e16e:	607b      	str	r3, [r7, #4]
}
 800e170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e172:	4b10      	ldr	r3, [pc, #64]	@ (800e1b4 <vPortEnterCritical+0x5c>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	3301      	adds	r3, #1
 800e178:	4a0e      	ldr	r2, [pc, #56]	@ (800e1b4 <vPortEnterCritical+0x5c>)
 800e17a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e17c:	4b0d      	ldr	r3, [pc, #52]	@ (800e1b4 <vPortEnterCritical+0x5c>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b01      	cmp	r3, #1
 800e182:	d110      	bne.n	800e1a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e184:	4b0c      	ldr	r3, [pc, #48]	@ (800e1b8 <vPortEnterCritical+0x60>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00b      	beq.n	800e1a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e192:	f383 8811 	msr	BASEPRI, r3
 800e196:	f3bf 8f6f 	isb	sy
 800e19a:	f3bf 8f4f 	dsb	sy
 800e19e:	603b      	str	r3, [r7, #0]
}
 800e1a0:	bf00      	nop
 800e1a2:	bf00      	nop
 800e1a4:	e7fd      	b.n	800e1a2 <vPortEnterCritical+0x4a>
	}
}
 800e1a6:	bf00      	nop
 800e1a8:	370c      	adds	r7, #12
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	24000014 	.word	0x24000014
 800e1b8:	e000ed04 	.word	0xe000ed04

0800e1bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e1c2:	4b12      	ldr	r3, [pc, #72]	@ (800e20c <vPortExitCritical+0x50>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d10b      	bne.n	800e1e2 <vPortExitCritical+0x26>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	607b      	str	r3, [r7, #4]
}
 800e1dc:	bf00      	nop
 800e1de:	bf00      	nop
 800e1e0:	e7fd      	b.n	800e1de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e1e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e20c <vPortExitCritical+0x50>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	4a08      	ldr	r2, [pc, #32]	@ (800e20c <vPortExitCritical+0x50>)
 800e1ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e1ec:	4b07      	ldr	r3, [pc, #28]	@ (800e20c <vPortExitCritical+0x50>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d105      	bne.n	800e200 <vPortExitCritical+0x44>
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	f383 8811 	msr	BASEPRI, r3
}
 800e1fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e200:	bf00      	nop
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr
 800e20c:	24000014 	.word	0x24000014

0800e210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e210:	f3ef 8009 	mrs	r0, PSP
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	4b15      	ldr	r3, [pc, #84]	@ (800e270 <pxCurrentTCBConst>)
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	f01e 0f10 	tst.w	lr, #16
 800e220:	bf08      	it	eq
 800e222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22a:	6010      	str	r0, [r2, #0]
 800e22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e234:	f380 8811 	msr	BASEPRI, r0
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f7fe ff78 	bl	800d134 <vTaskSwitchContext>
 800e244:	f04f 0000 	mov.w	r0, #0
 800e248:	f380 8811 	msr	BASEPRI, r0
 800e24c:	bc09      	pop	{r0, r3}
 800e24e:	6819      	ldr	r1, [r3, #0]
 800e250:	6808      	ldr	r0, [r1, #0]
 800e252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e256:	f01e 0f10 	tst.w	lr, #16
 800e25a:	bf08      	it	eq
 800e25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e260:	f380 8809 	msr	PSP, r0
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	4770      	bx	lr
 800e26a:	bf00      	nop
 800e26c:	f3af 8000 	nop.w

0800e270 <pxCurrentTCBConst>:
 800e270:	240337f0 	.word	0x240337f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e274:	bf00      	nop
 800e276:	bf00      	nop

0800e278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
	__asm volatile
 800e27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e282:	f383 8811 	msr	BASEPRI, r3
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	607b      	str	r3, [r7, #4]
}
 800e290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e292:	f7fe fe95 	bl	800cfc0 <xTaskIncrementTick>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e29c:	4b06      	ldr	r3, [pc, #24]	@ (800e2b8 <xPortSysTickHandler+0x40>)
 800e29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2a2:	601a      	str	r2, [r3, #0]
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	f383 8811 	msr	BASEPRI, r3
}
 800e2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e2b0:	bf00      	nop
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	e000ed04 	.word	0xe000ed04

0800e2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f0 <vPortSetupTimerInterrupt+0x34>)
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f4 <vPortSetupTimerInterrupt+0x38>)
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e2f8 <vPortSetupTimerInterrupt+0x3c>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a0a      	ldr	r2, [pc, #40]	@ (800e2fc <vPortSetupTimerInterrupt+0x40>)
 800e2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2d6:	099b      	lsrs	r3, r3, #6
 800e2d8:	4a09      	ldr	r2, [pc, #36]	@ (800e300 <vPortSetupTimerInterrupt+0x44>)
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e2de:	4b04      	ldr	r3, [pc, #16]	@ (800e2f0 <vPortSetupTimerInterrupt+0x34>)
 800e2e0:	2207      	movs	r2, #7
 800e2e2:	601a      	str	r2, [r3, #0]
}
 800e2e4:	bf00      	nop
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	e000e010 	.word	0xe000e010
 800e2f4:	e000e018 	.word	0xe000e018
 800e2f8:	24000004 	.word	0x24000004
 800e2fc:	10624dd3 	.word	0x10624dd3
 800e300:	e000e014 	.word	0xe000e014

0800e304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e314 <vPortEnableVFP+0x10>
 800e308:	6801      	ldr	r1, [r0, #0]
 800e30a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e30e:	6001      	str	r1, [r0, #0]
 800e310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e312:	bf00      	nop
 800e314:	e000ed88 	.word	0xe000ed88

0800e318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e31e:	f3ef 8305 	mrs	r3, IPSR
 800e322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b0f      	cmp	r3, #15
 800e328:	d915      	bls.n	800e356 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e32a:	4a18      	ldr	r2, [pc, #96]	@ (800e38c <vPortValidateInterruptPriority+0x74>)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	4413      	add	r3, r2
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e334:	4b16      	ldr	r3, [pc, #88]	@ (800e390 <vPortValidateInterruptPriority+0x78>)
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	7afa      	ldrb	r2, [r7, #11]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d20b      	bcs.n	800e356 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	607b      	str	r3, [r7, #4]
}
 800e350:	bf00      	nop
 800e352:	bf00      	nop
 800e354:	e7fd      	b.n	800e352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e356:	4b0f      	ldr	r3, [pc, #60]	@ (800e394 <vPortValidateInterruptPriority+0x7c>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e35e:	4b0e      	ldr	r3, [pc, #56]	@ (800e398 <vPortValidateInterruptPriority+0x80>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	429a      	cmp	r2, r3
 800e364:	d90b      	bls.n	800e37e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	603b      	str	r3, [r7, #0]
}
 800e378:	bf00      	nop
 800e37a:	bf00      	nop
 800e37c:	e7fd      	b.n	800e37a <vPortValidateInterruptPriority+0x62>
	}
 800e37e:	bf00      	nop
 800e380:	3714      	adds	r7, #20
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop
 800e38c:	e000e3f0 	.word	0xe000e3f0
 800e390:	24033e1c 	.word	0x24033e1c
 800e394:	e000ed0c 	.word	0xe000ed0c
 800e398:	24033e20 	.word	0x24033e20

0800e39c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b08a      	sub	sp, #40	@ 0x28
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e3a8:	f7fe fd4e 	bl	800ce48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e3ac:	4b5c      	ldr	r3, [pc, #368]	@ (800e520 <pvPortMalloc+0x184>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d101      	bne.n	800e3b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e3b4:	f000 f924 	bl	800e600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e3b8:	4b5a      	ldr	r3, [pc, #360]	@ (800e524 <pvPortMalloc+0x188>)
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	4013      	ands	r3, r2
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f040 8095 	bne.w	800e4f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d01e      	beq.n	800e40a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e3cc:	2208      	movs	r2, #8
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f003 0307 	and.w	r3, r3, #7
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d015      	beq.n	800e40a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f023 0307 	bic.w	r3, r3, #7
 800e3e4:	3308      	adds	r3, #8
 800e3e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f003 0307 	and.w	r3, r3, #7
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00b      	beq.n	800e40a <pvPortMalloc+0x6e>
	__asm volatile
 800e3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	617b      	str	r3, [r7, #20]
}
 800e404:	bf00      	nop
 800e406:	bf00      	nop
 800e408:	e7fd      	b.n	800e406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d06f      	beq.n	800e4f0 <pvPortMalloc+0x154>
 800e410:	4b45      	ldr	r3, [pc, #276]	@ (800e528 <pvPortMalloc+0x18c>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	429a      	cmp	r2, r3
 800e418:	d86a      	bhi.n	800e4f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e41a:	4b44      	ldr	r3, [pc, #272]	@ (800e52c <pvPortMalloc+0x190>)
 800e41c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e41e:	4b43      	ldr	r3, [pc, #268]	@ (800e52c <pvPortMalloc+0x190>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e424:	e004      	b.n	800e430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	429a      	cmp	r2, r3
 800e438:	d903      	bls.n	800e442 <pvPortMalloc+0xa6>
 800e43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d1f1      	bne.n	800e426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e442:	4b37      	ldr	r3, [pc, #220]	@ (800e520 <pvPortMalloc+0x184>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e448:	429a      	cmp	r2, r3
 800e44a:	d051      	beq.n	800e4f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e44c:	6a3b      	ldr	r3, [r7, #32]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2208      	movs	r2, #8
 800e452:	4413      	add	r3, r2
 800e454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	6a3b      	ldr	r3, [r7, #32]
 800e45c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e460:	685a      	ldr	r2, [r3, #4]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	1ad2      	subs	r2, r2, r3
 800e466:	2308      	movs	r3, #8
 800e468:	005b      	lsls	r3, r3, #1
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d920      	bls.n	800e4b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e46e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4413      	add	r3, r2
 800e474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e476:	69bb      	ldr	r3, [r7, #24]
 800e478:	f003 0307 	and.w	r3, r3, #7
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00b      	beq.n	800e498 <pvPortMalloc+0xfc>
	__asm volatile
 800e480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e484:	f383 8811 	msr	BASEPRI, r3
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	f3bf 8f4f 	dsb	sy
 800e490:	613b      	str	r3, [r7, #16]
}
 800e492:	bf00      	nop
 800e494:	bf00      	nop
 800e496:	e7fd      	b.n	800e494 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49a:	685a      	ldr	r2, [r3, #4]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	1ad2      	subs	r2, r2, r3
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e4aa:	69b8      	ldr	r0, [r7, #24]
 800e4ac:	f000 f90c 	bl	800e6c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e4b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e528 <pvPortMalloc+0x18c>)
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	4a1b      	ldr	r2, [pc, #108]	@ (800e528 <pvPortMalloc+0x18c>)
 800e4bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e4be:	4b1a      	ldr	r3, [pc, #104]	@ (800e528 <pvPortMalloc+0x18c>)
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800e530 <pvPortMalloc+0x194>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d203      	bcs.n	800e4d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e4ca:	4b17      	ldr	r3, [pc, #92]	@ (800e528 <pvPortMalloc+0x18c>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a18      	ldr	r2, [pc, #96]	@ (800e530 <pvPortMalloc+0x194>)
 800e4d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d4:	685a      	ldr	r2, [r3, #4]
 800e4d6:	4b13      	ldr	r3, [pc, #76]	@ (800e524 <pvPortMalloc+0x188>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	431a      	orrs	r2, r3
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e4e6:	4b13      	ldr	r3, [pc, #76]	@ (800e534 <pvPortMalloc+0x198>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	4a11      	ldr	r2, [pc, #68]	@ (800e534 <pvPortMalloc+0x198>)
 800e4ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e4f0:	f7fe fcb8 	bl	800ce64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	f003 0307 	and.w	r3, r3, #7
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00b      	beq.n	800e516 <pvPortMalloc+0x17a>
	__asm volatile
 800e4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	60fb      	str	r3, [r7, #12]
}
 800e510:	bf00      	nop
 800e512:	bf00      	nop
 800e514:	e7fd      	b.n	800e512 <pvPortMalloc+0x176>
	return pvReturn;
 800e516:	69fb      	ldr	r3, [r7, #28]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3728      	adds	r7, #40	@ 0x28
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	24064b6c 	.word	0x24064b6c
 800e524:	24064b80 	.word	0x24064b80
 800e528:	24064b70 	.word	0x24064b70
 800e52c:	24064b64 	.word	0x24064b64
 800e530:	24064b74 	.word	0x24064b74
 800e534:	24064b78 	.word	0x24064b78

0800e538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d04f      	beq.n	800e5ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e54a:	2308      	movs	r3, #8
 800e54c:	425b      	negs	r3, r3
 800e54e:	697a      	ldr	r2, [r7, #20]
 800e550:	4413      	add	r3, r2
 800e552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	685a      	ldr	r2, [r3, #4]
 800e55c:	4b25      	ldr	r3, [pc, #148]	@ (800e5f4 <vPortFree+0xbc>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4013      	ands	r3, r2
 800e562:	2b00      	cmp	r3, #0
 800e564:	d10b      	bne.n	800e57e <vPortFree+0x46>
	__asm volatile
 800e566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e56a:	f383 8811 	msr	BASEPRI, r3
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	60fb      	str	r3, [r7, #12]
}
 800e578:	bf00      	nop
 800e57a:	bf00      	nop
 800e57c:	e7fd      	b.n	800e57a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d00b      	beq.n	800e59e <vPortFree+0x66>
	__asm volatile
 800e586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58a:	f383 8811 	msr	BASEPRI, r3
 800e58e:	f3bf 8f6f 	isb	sy
 800e592:	f3bf 8f4f 	dsb	sy
 800e596:	60bb      	str	r3, [r7, #8]
}
 800e598:	bf00      	nop
 800e59a:	bf00      	nop
 800e59c:	e7fd      	b.n	800e59a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	685a      	ldr	r2, [r3, #4]
 800e5a2:	4b14      	ldr	r3, [pc, #80]	@ (800e5f4 <vPortFree+0xbc>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4013      	ands	r3, r2
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d01e      	beq.n	800e5ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d11a      	bne.n	800e5ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	685a      	ldr	r2, [r3, #4]
 800e5b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e5f4 <vPortFree+0xbc>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	43db      	mvns	r3, r3
 800e5be:	401a      	ands	r2, r3
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e5c4:	f7fe fc40 	bl	800ce48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	685a      	ldr	r2, [r3, #4]
 800e5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e5f8 <vPortFree+0xc0>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	4a09      	ldr	r2, [pc, #36]	@ (800e5f8 <vPortFree+0xc0>)
 800e5d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e5d6:	6938      	ldr	r0, [r7, #16]
 800e5d8:	f000 f876 	bl	800e6c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e5dc:	4b07      	ldr	r3, [pc, #28]	@ (800e5fc <vPortFree+0xc4>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	4a06      	ldr	r2, [pc, #24]	@ (800e5fc <vPortFree+0xc4>)
 800e5e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e5e6:	f7fe fc3d 	bl	800ce64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e5ea:	bf00      	nop
 800e5ec:	3718      	adds	r7, #24
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	24064b80 	.word	0x24064b80
 800e5f8:	24064b70 	.word	0x24064b70
 800e5fc:	24064b7c 	.word	0x24064b7c

0800e600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e606:	4b29      	ldr	r3, [pc, #164]	@ (800e6ac <prvHeapInit+0xac>)
 800e608:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e60a:	4b29      	ldr	r3, [pc, #164]	@ (800e6b0 <prvHeapInit+0xb0>)
 800e60c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f003 0307 	and.w	r3, r3, #7
 800e614:	2b00      	cmp	r3, #0
 800e616:	d00c      	beq.n	800e632 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	3307      	adds	r3, #7
 800e61c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f023 0307 	bic.w	r3, r3, #7
 800e624:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	4a20      	ldr	r2, [pc, #128]	@ (800e6b0 <prvHeapInit+0xb0>)
 800e62e:	4413      	add	r3, r2
 800e630:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e636:	4a1f      	ldr	r2, [pc, #124]	@ (800e6b4 <prvHeapInit+0xb4>)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e63c:	4b1d      	ldr	r3, [pc, #116]	@ (800e6b4 <prvHeapInit+0xb4>)
 800e63e:	2200      	movs	r2, #0
 800e640:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	68ba      	ldr	r2, [r7, #8]
 800e646:	4413      	add	r3, r2
 800e648:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e64a:	2208      	movs	r2, #8
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	1a9b      	subs	r3, r3, r2
 800e650:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f023 0307 	bic.w	r3, r3, #7
 800e658:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	4a16      	ldr	r2, [pc, #88]	@ (800e6b8 <prvHeapInit+0xb8>)
 800e65e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e660:	4b15      	ldr	r3, [pc, #84]	@ (800e6b8 <prvHeapInit+0xb8>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2200      	movs	r2, #0
 800e666:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e668:	4b13      	ldr	r3, [pc, #76]	@ (800e6b8 <prvHeapInit+0xb8>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2200      	movs	r2, #0
 800e66e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	1ad2      	subs	r2, r2, r3
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e67e:	4b0e      	ldr	r3, [pc, #56]	@ (800e6b8 <prvHeapInit+0xb8>)
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	4a0c      	ldr	r2, [pc, #48]	@ (800e6bc <prvHeapInit+0xbc>)
 800e68c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	4a0b      	ldr	r2, [pc, #44]	@ (800e6c0 <prvHeapInit+0xc0>)
 800e694:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e696:	4b0b      	ldr	r3, [pc, #44]	@ (800e6c4 <prvHeapInit+0xc4>)
 800e698:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e69c:	601a      	str	r2, [r3, #0]
}
 800e69e:	bf00      	nop
 800e6a0:	3714      	adds	r7, #20
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop
 800e6ac:	00030d40 	.word	0x00030d40
 800e6b0:	24033e24 	.word	0x24033e24
 800e6b4:	24064b64 	.word	0x24064b64
 800e6b8:	24064b6c 	.word	0x24064b6c
 800e6bc:	24064b74 	.word	0x24064b74
 800e6c0:	24064b70 	.word	0x24064b70
 800e6c4:	24064b80 	.word	0x24064b80

0800e6c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b085      	sub	sp, #20
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e6d0:	4b28      	ldr	r3, [pc, #160]	@ (800e774 <prvInsertBlockIntoFreeList+0xac>)
 800e6d2:	60fb      	str	r3, [r7, #12]
 800e6d4:	e002      	b.n	800e6dc <prvInsertBlockIntoFreeList+0x14>
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	60fb      	str	r3, [r7, #12]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d8f7      	bhi.n	800e6d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	68ba      	ldr	r2, [r7, #8]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d108      	bne.n	800e70a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	685a      	ldr	r2, [r3, #4]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	441a      	add	r2, r3
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	68ba      	ldr	r2, [r7, #8]
 800e714:	441a      	add	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d118      	bne.n	800e750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	4b15      	ldr	r3, [pc, #84]	@ (800e778 <prvInsertBlockIntoFreeList+0xb0>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	429a      	cmp	r2, r3
 800e728:	d00d      	beq.n	800e746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	685a      	ldr	r2, [r3, #4]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	441a      	add	r2, r3
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	601a      	str	r2, [r3, #0]
 800e744:	e008      	b.n	800e758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e746:	4b0c      	ldr	r3, [pc, #48]	@ (800e778 <prvInsertBlockIntoFreeList+0xb0>)
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	601a      	str	r2, [r3, #0]
 800e74e:	e003      	b.n	800e758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d002      	beq.n	800e766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e766:	bf00      	nop
 800e768:	3714      	adds	r7, #20
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	24064b64 	.word	0x24064b64
 800e778:	24064b6c 	.word	0x24064b6c

0800e77c <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800e77c:	4b04      	ldr	r3, [pc, #16]	@ (800e790 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	b10a      	cbz	r2, 800e786 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xa>
 800e782:	4803      	ldr	r0, [pc, #12]	@ (800e790 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800e784:	4770      	bx	lr
 800e786:	4a03      	ldr	r2, [pc, #12]	@ (800e794 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x18>)
 800e788:	4801      	ldr	r0, [pc, #4]	@ (800e790 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800e78a:	6812      	ldr	r2, [r2, #0]
 800e78c:	601a      	str	r2, [r3, #0]
 800e78e:	4770      	bx	lr
 800e790:	24000020 	.word	0x24000020
 800e794:	24000c80 	.word	0x24000c80

0800e798 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800e798:	4a02      	ldr	r2, [pc, #8]	@ (800e7a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 800e79a:	4b03      	ldr	r3, [pc, #12]	@ (800e7a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 800e79c:	6812      	ldr	r2, [r2, #0]
 800e79e:	601a      	str	r2, [r3, #0]
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	24000c80 	.word	0x24000c80
 800e7a8:	24000020 	.word	0x24000020

0800e7ac <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 800e7ac:	f003 befc 	b.w	80125a8 <autoware_control_msgs__msg__Control__init>

0800e7b0 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 800e7b0:	f003 bf50 	b.w	8012654 <autoware_control_msgs__msg__Control__fini>

0800e7b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800e7b4:	b510      	push	{r4, lr}
 800e7b6:	4c0c      	ldr	r4, [pc, #48]	@ (800e7e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 800e7b8:	f001 f80a 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e7bc:	60e0      	str	r0, [r4, #12]
 800e7be:	f001 f807 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e7c2:	64a0      	str	r0, [r4, #72]	@ 0x48
 800e7c4:	f000 f81a 	bl	800e7fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800e7c8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e7cc:	f000 f832 	bl	800e834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800e7d0:	4b06      	ldr	r3, [pc, #24]	@ (800e7ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800e7d2:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	b10a      	cbz	r2, 800e7de <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 800e7da:	4804      	ldr	r0, [pc, #16]	@ (800e7ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800e7dc:	bd10      	pop	{r4, pc}
 800e7de:	4a04      	ldr	r2, [pc, #16]	@ (800e7f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 800e7e0:	4802      	ldr	r0, [pc, #8]	@ (800e7ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800e7e2:	6812      	ldr	r2, [r2, #0]
 800e7e4:	601a      	str	r2, [r3, #0]
 800e7e6:	bd10      	pop	{r4, pc}
 800e7e8:	2400002c 	.word	0x2400002c
 800e7ec:	2400011c 	.word	0x2400011c
 800e7f0:	24000c84 	.word	0x24000c84

0800e7f4 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 800e7f4:	f003 bf42 	b.w	801267c <autoware_control_msgs__msg__Lateral__init>

0800e7f8 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 800e7f8:	f003 bf64 	b.w	80126c4 <autoware_control_msgs__msg__Lateral__fini>

0800e7fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800e7fc:	b510      	push	{r4, lr}
 800e7fe:	4c08      	ldr	r4, [pc, #32]	@ (800e820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 800e800:	f000 ffe6 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e804:	60e0      	str	r0, [r4, #12]
 800e806:	f000 ffe3 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e80a:	4b06      	ldr	r3, [pc, #24]	@ (800e824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800e80c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	b10a      	cbz	r2, 800e816 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 800e812:	4804      	ldr	r0, [pc, #16]	@ (800e824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800e814:	bd10      	pop	{r4, pc}
 800e816:	4a04      	ldr	r2, [pc, #16]	@ (800e828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 800e818:	4802      	ldr	r0, [pc, #8]	@ (800e824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800e81a:	6812      	ldr	r2, [r2, #0]
 800e81c:	601a      	str	r2, [r3, #0]
 800e81e:	bd10      	pop	{r4, pc}
 800e820:	24000128 	.word	0x24000128
 800e824:	24000254 	.word	0x24000254
 800e828:	24000c84 	.word	0x24000c84

0800e82c <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 800e82c:	f003 bf56 	b.w	80126dc <autoware_control_msgs__msg__Longitudinal__init>

0800e830 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 800e830:	f003 bf78 	b.w	8012724 <autoware_control_msgs__msg__Longitudinal__fini>

0800e834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800e834:	b510      	push	{r4, lr}
 800e836:	4c08      	ldr	r4, [pc, #32]	@ (800e858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 800e838:	f000 ffca 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e83c:	60e0      	str	r0, [r4, #12]
 800e83e:	f000 ffc7 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e842:	4b06      	ldr	r3, [pc, #24]	@ (800e85c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800e844:	64a0      	str	r0, [r4, #72]	@ 0x48
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	b10a      	cbz	r2, 800e84e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 800e84a:	4804      	ldr	r0, [pc, #16]	@ (800e85c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	4a04      	ldr	r2, [pc, #16]	@ (800e860 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 800e850:	4802      	ldr	r0, [pc, #8]	@ (800e85c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800e852:	6812      	ldr	r2, [r2, #0]
 800e854:	601a      	str	r2, [r3, #0]
 800e856:	bd10      	pop	{r4, pc}
 800e858:	24000260 	.word	0x24000260
 800e85c:	24000404 	.word	0x24000404
 800e860:	24000c84 	.word	0x24000c84

0800e864 <get_serialized_size_autoware_control_msgs__msg__Control>:
 800e864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e866:	4604      	mov	r4, r0
 800e868:	b1c8      	cbz	r0, 800e89e <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 800e86a:	460f      	mov	r7, r1
 800e86c:	f000 ffbe 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800e870:	4606      	mov	r6, r0
 800e872:	f104 0008 	add.w	r0, r4, #8
 800e876:	443e      	add	r6, r7
 800e878:	4631      	mov	r1, r6
 800e87a:	f000 ffb7 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800e87e:	4605      	mov	r5, r0
 800e880:	f104 0010 	add.w	r0, r4, #16
 800e884:	4435      	add	r5, r6
 800e886:	4629      	mov	r1, r5
 800e888:	f000 f8a2 	bl	800e9d0 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800e88c:	4601      	mov	r1, r0
 800e88e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800e892:	440d      	add	r5, r1
 800e894:	4629      	mov	r1, r5
 800e896:	f000 f9a7 	bl	800ebe8 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800e89a:	1bc0      	subs	r0, r0, r7
 800e89c:	4428      	add	r0, r5
 800e89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e8a0 <_Control__cdr_deserialize>:
 800e8a0:	b570      	push	{r4, r5, r6, lr}
 800e8a2:	460c      	mov	r4, r1
 800e8a4:	b329      	cbz	r1, 800e8f2 <_Control__cdr_deserialize+0x52>
 800e8a6:	4605      	mov	r5, r0
 800e8a8:	f001 f804 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	4798      	blx	r3
 800e8b8:	f000 fffc 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	f104 0108 	add.w	r1, r4, #8
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	4798      	blx	r3
 800e8ca:	f000 f95b 	bl	800eb84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	f104 0110 	add.w	r1, r4, #16
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	4798      	blx	r3
 800e8dc:	f000 fa28 	bl	800ed30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	4718      	bx	r3
 800e8f2:	4608      	mov	r0, r1
 800e8f4:	bd70      	pop	{r4, r5, r6, pc}
 800e8f6:	bf00      	nop

0800e8f8 <_Control__cdr_serialize>:
 800e8f8:	b338      	cbz	r0, 800e94a <_Control__cdr_serialize+0x52>
 800e8fa:	b570      	push	{r4, r5, r6, lr}
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	460d      	mov	r5, r1
 800e900:	f000 ffd8 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e904:	4603      	mov	r3, r0
 800e906:	4629      	mov	r1, r5
 800e908:	4620      	mov	r0, r4
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	4798      	blx	r3
 800e910:	f000 ffd0 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e914:	4603      	mov	r3, r0
 800e916:	4629      	mov	r1, r5
 800e918:	f104 0008 	add.w	r0, r4, #8
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	4798      	blx	r3
 800e922:	f000 f92f 	bl	800eb84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800e926:	4603      	mov	r3, r0
 800e928:	4629      	mov	r1, r5
 800e92a:	f104 0010 	add.w	r0, r4, #16
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	4798      	blx	r3
 800e934:	f000 f9fc 	bl	800ed30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800e938:	4603      	mov	r3, r0
 800e93a:	4629      	mov	r1, r5
 800e93c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	4718      	bx	r3
 800e94a:	4770      	bx	lr

0800e94c <_Control__get_serialized_size>:
 800e94c:	b538      	push	{r3, r4, r5, lr}
 800e94e:	4604      	mov	r4, r0
 800e950:	b1b8      	cbz	r0, 800e982 <_Control__get_serialized_size+0x36>
 800e952:	2100      	movs	r1, #0
 800e954:	f000 ff4a 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800e958:	4605      	mov	r5, r0
 800e95a:	f104 0008 	add.w	r0, r4, #8
 800e95e:	4629      	mov	r1, r5
 800e960:	f000 ff44 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800e964:	4601      	mov	r1, r0
 800e966:	f104 0010 	add.w	r0, r4, #16
 800e96a:	440d      	add	r5, r1
 800e96c:	4629      	mov	r1, r5
 800e96e:	f000 f82f 	bl	800e9d0 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800e972:	4601      	mov	r1, r0
 800e974:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800e978:	440d      	add	r5, r1
 800e97a:	4629      	mov	r1, r5
 800e97c:	f000 f934 	bl	800ebe8 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800e980:	4428      	add	r0, r5
 800e982:	bd38      	pop	{r3, r4, r5, pc}

0800e984 <_Control__max_serialized_size>:
 800e984:	b530      	push	{r4, r5, lr}
 800e986:	b083      	sub	sp, #12
 800e988:	2301      	movs	r3, #1
 800e98a:	2100      	movs	r1, #0
 800e98c:	f10d 0007 	add.w	r0, sp, #7
 800e990:	f88d 3007 	strb.w	r3, [sp, #7]
 800e994:	f000 ff7a 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800e998:	4604      	mov	r4, r0
 800e99a:	f10d 0007 	add.w	r0, sp, #7
 800e99e:	4621      	mov	r1, r4
 800e9a0:	f000 ff74 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800e9a4:	4605      	mov	r5, r0
 800e9a6:	f10d 0007 	add.w	r0, sp, #7
 800e9aa:	4425      	add	r5, r4
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	f000 f8c7 	bl	800eb40 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	f10d 0007 	add.w	r0, sp, #7
 800e9b8:	442c      	add	r4, r5
 800e9ba:	4621      	mov	r1, r4
 800e9bc:	f000 f980 	bl	800ecc0 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800e9c0:	4420      	add	r0, r4
 800e9c2:	b003      	add	sp, #12
 800e9c4:	bd30      	pop	{r4, r5, pc}
 800e9c6:	bf00      	nop

0800e9c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800e9c8:	4800      	ldr	r0, [pc, #0]	@ (800e9cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 800e9ca:	4770      	bx	lr
 800e9cc:	24000410 	.word	0x24000410

0800e9d0 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 800e9d0:	b5b0      	push	{r4, r5, r7, lr}
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	b1f0      	cbz	r0, 800ea14 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 800e9d6:	460d      	mov	r5, r1
 800e9d8:	f000 ff08 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800e9dc:	4607      	mov	r7, r0
 800e9de:	f104 0008 	add.w	r0, r4, #8
 800e9e2:	442f      	add	r7, r5
 800e9e4:	f1c5 0501 	rsb	r5, r5, #1
 800e9e8:	4639      	mov	r1, r7
 800e9ea:	f000 feff 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800e9ee:	4407      	add	r7, r0
 800e9f0:	2104      	movs	r1, #4
 800e9f2:	4638      	mov	r0, r7
 800e9f4:	f002 f9fe 	bl	8010df4 <ucdr_alignment>
 800e9f8:	2104      	movs	r1, #4
 800e9fa:	1844      	adds	r4, r0, r1
 800e9fc:	443c      	add	r4, r7
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f002 f9f8 	bl	8010df4 <ucdr_alignment>
 800ea04:	3004      	adds	r0, #4
 800ea06:	2101      	movs	r1, #1
 800ea08:	4404      	add	r4, r0
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f002 f9f2 	bl	8010df4 <ucdr_alignment>
 800ea10:	4428      	add	r0, r5
 800ea12:	4420      	add	r0, r4
 800ea14:	bdb0      	pop	{r4, r5, r7, pc}
 800ea16:	bf00      	nop

0800ea18 <_Lateral__cdr_deserialize>:
 800ea18:	b538      	push	{r3, r4, r5, lr}
 800ea1a:	460c      	mov	r4, r1
 800ea1c:	b311      	cbz	r1, 800ea64 <_Lateral__cdr_deserialize+0x4c>
 800ea1e:	4605      	mov	r5, r0
 800ea20:	f000 ff48 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea24:	4603      	mov	r3, r0
 800ea26:	4621      	mov	r1, r4
 800ea28:	4628      	mov	r0, r5
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	4798      	blx	r3
 800ea30:	f000 ff40 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea34:	4603      	mov	r3, r0
 800ea36:	f104 0108 	add.w	r1, r4, #8
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	4798      	blx	r3
 800ea42:	f104 0110 	add.w	r1, r4, #16
 800ea46:	4628      	mov	r0, r5
 800ea48:	f001 ff56 	bl	80108f8 <ucdr_deserialize_float>
 800ea4c:	f104 0114 	add.w	r1, r4, #20
 800ea50:	4628      	mov	r0, r5
 800ea52:	f001 ff51 	bl	80108f8 <ucdr_deserialize_float>
 800ea56:	f104 0118 	add.w	r1, r4, #24
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea60:	f000 bf42 	b.w	800f8e8 <ucdr_deserialize_bool>
 800ea64:	4608      	mov	r0, r1
 800ea66:	bd38      	pop	{r3, r4, r5, pc}

0800ea68 <_Lateral__cdr_serialize>:
 800ea68:	b318      	cbz	r0, 800eab2 <_Lateral__cdr_serialize+0x4a>
 800ea6a:	b538      	push	{r3, r4, r5, lr}
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	460d      	mov	r5, r1
 800ea70:	f000 ff20 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea74:	4603      	mov	r3, r0
 800ea76:	4629      	mov	r1, r5
 800ea78:	4620      	mov	r0, r4
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	689b      	ldr	r3, [r3, #8]
 800ea7e:	4798      	blx	r3
 800ea80:	f000 ff18 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea84:	4603      	mov	r3, r0
 800ea86:	4629      	mov	r1, r5
 800ea88:	f104 0008 	add.w	r0, r4, #8
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	689b      	ldr	r3, [r3, #8]
 800ea90:	4798      	blx	r3
 800ea92:	ed94 0a04 	vldr	s0, [r4, #16]
 800ea96:	4628      	mov	r0, r5
 800ea98:	f001 fe96 	bl	80107c8 <ucdr_serialize_float>
 800ea9c:	ed94 0a05 	vldr	s0, [r4, #20]
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	f001 fe91 	bl	80107c8 <ucdr_serialize_float>
 800eaa6:	7e21      	ldrb	r1, [r4, #24]
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaae:	f000 bf05 	b.w	800f8bc <ucdr_serialize_bool>
 800eab2:	4770      	bx	lr

0800eab4 <_Lateral__get_serialized_size>:
 800eab4:	b538      	push	{r3, r4, r5, lr}
 800eab6:	4604      	mov	r4, r0
 800eab8:	b1d8      	cbz	r0, 800eaf2 <_Lateral__get_serialized_size+0x3e>
 800eaba:	2100      	movs	r1, #0
 800eabc:	f000 fe96 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800eac0:	4605      	mov	r5, r0
 800eac2:	f104 0008 	add.w	r0, r4, #8
 800eac6:	4629      	mov	r1, r5
 800eac8:	f000 fe90 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800eacc:	4405      	add	r5, r0
 800eace:	2104      	movs	r1, #4
 800ead0:	4628      	mov	r0, r5
 800ead2:	f002 f98f 	bl	8010df4 <ucdr_alignment>
 800ead6:	2104      	movs	r1, #4
 800ead8:	4408      	add	r0, r1
 800eada:	1944      	adds	r4, r0, r5
 800eadc:	4620      	mov	r0, r4
 800eade:	f002 f989 	bl	8010df4 <ucdr_alignment>
 800eae2:	3004      	adds	r0, #4
 800eae4:	2101      	movs	r1, #1
 800eae6:	4404      	add	r4, r0
 800eae8:	4620      	mov	r0, r4
 800eaea:	f002 f983 	bl	8010df4 <ucdr_alignment>
 800eaee:	3001      	adds	r0, #1
 800eaf0:	4420      	add	r0, r4
 800eaf2:	bd38      	pop	{r3, r4, r5, pc}

0800eaf4 <_Lateral__max_serialized_size>:
 800eaf4:	b530      	push	{r4, r5, lr}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	2501      	movs	r5, #1
 800eafa:	2100      	movs	r1, #0
 800eafc:	f10d 0007 	add.w	r0, sp, #7
 800eb00:	f88d 5007 	strb.w	r5, [sp, #7]
 800eb04:	f000 fec2 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800eb08:	4604      	mov	r4, r0
 800eb0a:	f10d 0007 	add.w	r0, sp, #7
 800eb0e:	4621      	mov	r1, r4
 800eb10:	f000 febc 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800eb14:	4404      	add	r4, r0
 800eb16:	2104      	movs	r1, #4
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f002 f96b 	bl	8010df4 <ucdr_alignment>
 800eb1e:	2104      	movs	r1, #4
 800eb20:	4408      	add	r0, r1
 800eb22:	4404      	add	r4, r0
 800eb24:	4620      	mov	r0, r4
 800eb26:	f002 f965 	bl	8010df4 <ucdr_alignment>
 800eb2a:	3004      	adds	r0, #4
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	4404      	add	r4, r0
 800eb30:	4620      	mov	r0, r4
 800eb32:	f002 f95f 	bl	8010df4 <ucdr_alignment>
 800eb36:	4428      	add	r0, r5
 800eb38:	4420      	add	r0, r4
 800eb3a:	b003      	add	sp, #12
 800eb3c:	bd30      	pop	{r4, r5, pc}
 800eb3e:	bf00      	nop

0800eb40 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 800eb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb42:	2701      	movs	r7, #1
 800eb44:	460c      	mov	r4, r1
 800eb46:	4606      	mov	r6, r0
 800eb48:	7007      	strb	r7, [r0, #0]
 800eb4a:	f000 fe9f 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800eb4e:	4605      	mov	r5, r0
 800eb50:	4630      	mov	r0, r6
 800eb52:	4425      	add	r5, r4
 800eb54:	1b3c      	subs	r4, r7, r4
 800eb56:	4629      	mov	r1, r5
 800eb58:	f000 fe98 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800eb5c:	4405      	add	r5, r0
 800eb5e:	2104      	movs	r1, #4
 800eb60:	4628      	mov	r0, r5
 800eb62:	f002 f947 	bl	8010df4 <ucdr_alignment>
 800eb66:	2104      	movs	r1, #4
 800eb68:	4408      	add	r0, r1
 800eb6a:	4405      	add	r5, r0
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	f002 f941 	bl	8010df4 <ucdr_alignment>
 800eb72:	3004      	adds	r0, #4
 800eb74:	4639      	mov	r1, r7
 800eb76:	4405      	add	r5, r0
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f002 f93b 	bl	8010df4 <ucdr_alignment>
 800eb7e:	4420      	add	r0, r4
 800eb80:	4428      	add	r0, r5
 800eb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800eb84:	4800      	ldr	r0, [pc, #0]	@ (800eb88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 800eb86:	4770      	bx	lr
 800eb88:	24000438 	.word	0x24000438

0800eb8c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 800eb8c:	b570      	push	{r4, r5, r6, lr}
 800eb8e:	460c      	mov	r4, r1
 800eb90:	4606      	mov	r6, r0
 800eb92:	f000 fe2b 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800eb96:	4605      	mov	r5, r0
 800eb98:	f106 0008 	add.w	r0, r6, #8
 800eb9c:	4425      	add	r5, r4
 800eb9e:	f1c4 0401 	rsb	r4, r4, #1
 800eba2:	4629      	mov	r1, r5
 800eba4:	f000 fe22 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800eba8:	4405      	add	r5, r0
 800ebaa:	2104      	movs	r1, #4
 800ebac:	4628      	mov	r0, r5
 800ebae:	f002 f921 	bl	8010df4 <ucdr_alignment>
 800ebb2:	2104      	movs	r1, #4
 800ebb4:	4408      	add	r0, r1
 800ebb6:	4405      	add	r5, r0
 800ebb8:	4628      	mov	r0, r5
 800ebba:	f002 f91b 	bl	8010df4 <ucdr_alignment>
 800ebbe:	2104      	movs	r1, #4
 800ebc0:	4408      	add	r0, r1
 800ebc2:	1946      	adds	r6, r0, r5
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	f002 f915 	bl	8010df4 <ucdr_alignment>
 800ebca:	1d05      	adds	r5, r0, #4
 800ebcc:	2101      	movs	r1, #1
 800ebce:	4435      	add	r5, r6
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	f002 f90f 	bl	8010df4 <ucdr_alignment>
 800ebd6:	2101      	movs	r1, #1
 800ebd8:	4408      	add	r0, r1
 800ebda:	4405      	add	r5, r0
 800ebdc:	4628      	mov	r0, r5
 800ebde:	f002 f909 	bl	8010df4 <ucdr_alignment>
 800ebe2:	4420      	add	r0, r4
 800ebe4:	4428      	add	r0, r5
 800ebe6:	bd70      	pop	{r4, r5, r6, pc}

0800ebe8 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800ebe8:	b108      	cbz	r0, 800ebee <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 800ebea:	f7ff bfcf 	b.w	800eb8c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800ebee:	4770      	bx	lr

0800ebf0 <_Longitudinal__get_serialized_size>:
 800ebf0:	b110      	cbz	r0, 800ebf8 <_Longitudinal__get_serialized_size+0x8>
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	f7ff bfca 	b.w	800eb8c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop

0800ebfc <_Longitudinal__cdr_deserialize>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	460c      	mov	r4, r1
 800ec00:	b361      	cbz	r1, 800ec5c <_Longitudinal__cdr_deserialize+0x60>
 800ec02:	4605      	mov	r5, r0
 800ec04:	f000 fe56 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	4621      	mov	r1, r4
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	4798      	blx	r3
 800ec14:	f000 fe4e 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	f104 0108 	add.w	r1, r4, #8
 800ec1e:	4628      	mov	r0, r5
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	4798      	blx	r3
 800ec26:	f104 0110 	add.w	r1, r4, #16
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	f001 fe64 	bl	80108f8 <ucdr_deserialize_float>
 800ec30:	f104 0114 	add.w	r1, r4, #20
 800ec34:	4628      	mov	r0, r5
 800ec36:	f001 fe5f 	bl	80108f8 <ucdr_deserialize_float>
 800ec3a:	f104 0118 	add.w	r1, r4, #24
 800ec3e:	4628      	mov	r0, r5
 800ec40:	f001 fe5a 	bl	80108f8 <ucdr_deserialize_float>
 800ec44:	f104 011c 	add.w	r1, r4, #28
 800ec48:	4628      	mov	r0, r5
 800ec4a:	f000 fe4d 	bl	800f8e8 <ucdr_deserialize_bool>
 800ec4e:	f104 011d 	add.w	r1, r4, #29
 800ec52:	4628      	mov	r0, r5
 800ec54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec58:	f000 be46 	b.w	800f8e8 <ucdr_deserialize_bool>
 800ec5c:	4608      	mov	r0, r1
 800ec5e:	bd38      	pop	{r3, r4, r5, pc}

0800ec60 <_Longitudinal__cdr_serialize>:
 800ec60:	b360      	cbz	r0, 800ecbc <_Longitudinal__cdr_serialize+0x5c>
 800ec62:	b538      	push	{r3, r4, r5, lr}
 800ec64:	4604      	mov	r4, r0
 800ec66:	460d      	mov	r5, r1
 800ec68:	f000 fe24 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	4629      	mov	r1, r5
 800ec70:	4620      	mov	r0, r4
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	4798      	blx	r3
 800ec78:	f000 fe1c 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	4629      	mov	r1, r5
 800ec80:	f104 0008 	add.w	r0, r4, #8
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	4798      	blx	r3
 800ec8a:	ed94 0a04 	vldr	s0, [r4, #16]
 800ec8e:	4628      	mov	r0, r5
 800ec90:	f001 fd9a 	bl	80107c8 <ucdr_serialize_float>
 800ec94:	ed94 0a05 	vldr	s0, [r4, #20]
 800ec98:	4628      	mov	r0, r5
 800ec9a:	f001 fd95 	bl	80107c8 <ucdr_serialize_float>
 800ec9e:	ed94 0a06 	vldr	s0, [r4, #24]
 800eca2:	4628      	mov	r0, r5
 800eca4:	f001 fd90 	bl	80107c8 <ucdr_serialize_float>
 800eca8:	7f21      	ldrb	r1, [r4, #28]
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f000 fe06 	bl	800f8bc <ucdr_serialize_bool>
 800ecb0:	7f61      	ldrb	r1, [r4, #29]
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecb8:	f000 be00 	b.w	800f8bc <ucdr_serialize_bool>
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop

0800ecc0 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800ecc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc2:	2701      	movs	r7, #1
 800ecc4:	460c      	mov	r4, r1
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	7007      	strb	r7, [r0, #0]
 800ecca:	f000 fddf 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800ecce:	4605      	mov	r5, r0
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	4425      	add	r5, r4
 800ecd4:	1b3c      	subs	r4, r7, r4
 800ecd6:	4629      	mov	r1, r5
 800ecd8:	f000 fdd8 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800ecdc:	4405      	add	r5, r0
 800ecde:	2104      	movs	r1, #4
 800ece0:	4628      	mov	r0, r5
 800ece2:	f002 f887 	bl	8010df4 <ucdr_alignment>
 800ece6:	2104      	movs	r1, #4
 800ece8:	4408      	add	r0, r1
 800ecea:	4405      	add	r5, r0
 800ecec:	4628      	mov	r0, r5
 800ecee:	f002 f881 	bl	8010df4 <ucdr_alignment>
 800ecf2:	2104      	movs	r1, #4
 800ecf4:	4408      	add	r0, r1
 800ecf6:	1946      	adds	r6, r0, r5
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	f002 f87b 	bl	8010df4 <ucdr_alignment>
 800ecfe:	1d05      	adds	r5, r0, #4
 800ed00:	4639      	mov	r1, r7
 800ed02:	4435      	add	r5, r6
 800ed04:	4628      	mov	r0, r5
 800ed06:	f002 f875 	bl	8010df4 <ucdr_alignment>
 800ed0a:	4438      	add	r0, r7
 800ed0c:	4639      	mov	r1, r7
 800ed0e:	4405      	add	r5, r0
 800ed10:	4628      	mov	r0, r5
 800ed12:	f002 f86f 	bl	8010df4 <ucdr_alignment>
 800ed16:	4420      	add	r0, r4
 800ed18:	4428      	add	r0, r5
 800ed1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed1c <_Longitudinal__max_serialized_size>:
 800ed1c:	b500      	push	{lr}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	2100      	movs	r1, #0
 800ed22:	f10d 0007 	add.w	r0, sp, #7
 800ed26:	f7ff ffcb 	bl	800ecc0 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800ed2a:	b003      	add	sp, #12
 800ed2c:	f85d fb04 	ldr.w	pc, [sp], #4

0800ed30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800ed30:	4800      	ldr	r0, [pc, #0]	@ (800ed34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 800ed32:	4770      	bx	lr
 800ed34:	24000460 	.word	0x24000460

0800ed38 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800ed38:	4b04      	ldr	r3, [pc, #16]	@ (800ed4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	b10a      	cbz	r2, 800ed42 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xa>
 800ed3e:	4803      	ldr	r0, [pc, #12]	@ (800ed4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 800ed40:	4770      	bx	lr
 800ed42:	4a03      	ldr	r2, [pc, #12]	@ (800ed50 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x18>)
 800ed44:	4801      	ldr	r0, [pc, #4]	@ (800ed4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 800ed46:	6812      	ldr	r2, [r2, #0]
 800ed48:	601a      	str	r2, [r3, #0]
 800ed4a:	4770      	bx	lr
 800ed4c:	24000490 	.word	0x24000490
 800ed50:	24000c80 	.word	0x24000c80

0800ed54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800ed54:	4a02      	ldr	r2, [pc, #8]	@ (800ed60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 800ed56:	4b03      	ldr	r3, [pc, #12]	@ (800ed64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 800ed58:	6812      	ldr	r2, [r2, #0]
 800ed5a:	601a      	str	r2, [r3, #0]
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	24000c80 	.word	0x24000c80
 800ed64:	24000490 	.word	0x24000490

0800ed68 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800ed68:	4b04      	ldr	r3, [pc, #16]	@ (800ed7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	b10a      	cbz	r2, 800ed72 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xa>
 800ed6e:	4803      	ldr	r0, [pc, #12]	@ (800ed7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 800ed70:	4770      	bx	lr
 800ed72:	4a03      	ldr	r2, [pc, #12]	@ (800ed80 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x18>)
 800ed74:	4801      	ldr	r0, [pc, #4]	@ (800ed7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 800ed76:	6812      	ldr	r2, [r2, #0]
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	4770      	bx	lr
 800ed7c:	240004a4 	.word	0x240004a4
 800ed80:	24000c80 	.word	0x24000c80

0800ed84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800ed84:	4a02      	ldr	r2, [pc, #8]	@ (800ed90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 800ed86:	4b03      	ldr	r3, [pc, #12]	@ (800ed94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 800ed88:	6812      	ldr	r2, [r2, #0]
 800ed8a:	601a      	str	r2, [r3, #0]
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop
 800ed90:	24000c80 	.word	0x24000c80
 800ed94:	240004a4 	.word	0x240004a4

0800ed98 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800ed98:	4b04      	ldr	r3, [pc, #16]	@ (800edac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	b10a      	cbz	r2, 800eda2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xa>
 800ed9e:	4803      	ldr	r0, [pc, #12]	@ (800edac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 800eda0:	4770      	bx	lr
 800eda2:	4a03      	ldr	r2, [pc, #12]	@ (800edb0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x18>)
 800eda4:	4801      	ldr	r0, [pc, #4]	@ (800edac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 800eda6:	6812      	ldr	r2, [r2, #0]
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	4770      	bx	lr
 800edac:	240004b8 	.word	0x240004b8
 800edb0:	24000c80 	.word	0x24000c80

0800edb4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800edb4:	4a02      	ldr	r2, [pc, #8]	@ (800edc0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 800edb6:	4b03      	ldr	r3, [pc, #12]	@ (800edc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 800edb8:	6812      	ldr	r2, [r2, #0]
 800edba:	601a      	str	r2, [r3, #0]
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	24000c80 	.word	0x24000c80
 800edc4:	240004b8 	.word	0x240004b8

0800edc8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800edc8:	4b04      	ldr	r3, [pc, #16]	@ (800eddc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	b10a      	cbz	r2, 800edd2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xa>
 800edce:	4803      	ldr	r0, [pc, #12]	@ (800eddc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 800edd0:	4770      	bx	lr
 800edd2:	4a03      	ldr	r2, [pc, #12]	@ (800ede0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 800edd4:	4801      	ldr	r0, [pc, #4]	@ (800eddc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 800edd6:	6812      	ldr	r2, [r2, #0]
 800edd8:	601a      	str	r2, [r3, #0]
 800edda:	4770      	bx	lr
 800eddc:	240004cc 	.word	0x240004cc
 800ede0:	24000c80 	.word	0x24000c80

0800ede4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800ede4:	4a02      	ldr	r2, [pc, #8]	@ (800edf0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 800ede6:	4b03      	ldr	r3, [pc, #12]	@ (800edf4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 800ede8:	6812      	ldr	r2, [r2, #0]
 800edea:	601a      	str	r2, [r3, #0]
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop
 800edf0:	24000c80 	.word	0x24000c80
 800edf4:	240004cc 	.word	0x240004cc

0800edf8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800edf8:	4b04      	ldr	r3, [pc, #16]	@ (800ee0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	b10a      	cbz	r2, 800ee02 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xa>
 800edfe:	4803      	ldr	r0, [pc, #12]	@ (800ee0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 800ee00:	4770      	bx	lr
 800ee02:	4a03      	ldr	r2, [pc, #12]	@ (800ee10 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x18>)
 800ee04:	4801      	ldr	r0, [pc, #4]	@ (800ee0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 800ee06:	6812      	ldr	r2, [r2, #0]
 800ee08:	601a      	str	r2, [r3, #0]
 800ee0a:	4770      	bx	lr
 800ee0c:	240004e0 	.word	0x240004e0
 800ee10:	24000c80 	.word	0x24000c80

0800ee14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800ee14:	4a02      	ldr	r2, [pc, #8]	@ (800ee20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 800ee16:	4b03      	ldr	r3, [pc, #12]	@ (800ee24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 800ee18:	6812      	ldr	r2, [r2, #0]
 800ee1a:	601a      	str	r2, [r3, #0]
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	24000c80 	.word	0x24000c80
 800ee24:	240004e0 	.word	0x240004e0

0800ee28 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800ee28:	4b04      	ldr	r3, [pc, #16]	@ (800ee3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	b10a      	cbz	r2, 800ee32 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xa>
 800ee2e:	4803      	ldr	r0, [pc, #12]	@ (800ee3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 800ee30:	4770      	bx	lr
 800ee32:	4a03      	ldr	r2, [pc, #12]	@ (800ee40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x18>)
 800ee34:	4801      	ldr	r0, [pc, #4]	@ (800ee3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 800ee36:	6812      	ldr	r2, [r2, #0]
 800ee38:	601a      	str	r2, [r3, #0]
 800ee3a:	4770      	bx	lr
 800ee3c:	240004f4 	.word	0x240004f4
 800ee40:	24000c80 	.word	0x24000c80

0800ee44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800ee44:	4a02      	ldr	r2, [pc, #8]	@ (800ee50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 800ee46:	4b03      	ldr	r3, [pc, #12]	@ (800ee54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 800ee48:	6812      	ldr	r2, [r2, #0]
 800ee4a:	601a      	str	r2, [r3, #0]
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	24000c80 	.word	0x24000c80
 800ee54:	240004f4 	.word	0x240004f4

0800ee58 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800ee58:	4b04      	ldr	r3, [pc, #16]	@ (800ee6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	b10a      	cbz	r2, 800ee62 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 800ee5e:	4803      	ldr	r0, [pc, #12]	@ (800ee6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 800ee60:	4770      	bx	lr
 800ee62:	4a03      	ldr	r2, [pc, #12]	@ (800ee70 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 800ee64:	4801      	ldr	r0, [pc, #4]	@ (800ee6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 800ee66:	6812      	ldr	r2, [r2, #0]
 800ee68:	601a      	str	r2, [r3, #0]
 800ee6a:	4770      	bx	lr
 800ee6c:	24000508 	.word	0x24000508
 800ee70:	24000c80 	.word	0x24000c80

0800ee74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800ee74:	4a02      	ldr	r2, [pc, #8]	@ (800ee80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 800ee76:	4b03      	ldr	r3, [pc, #12]	@ (800ee84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 800ee78:	6812      	ldr	r2, [r2, #0]
 800ee7a:	601a      	str	r2, [r3, #0]
 800ee7c:	4770      	bx	lr
 800ee7e:	bf00      	nop
 800ee80:	24000c80 	.word	0x24000c80
 800ee84:	24000508 	.word	0x24000508

0800ee88 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800ee88:	4b04      	ldr	r3, [pc, #16]	@ (800ee9c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	b10a      	cbz	r2, 800ee92 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 800ee8e:	4803      	ldr	r0, [pc, #12]	@ (800ee9c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 800ee90:	4770      	bx	lr
 800ee92:	4a03      	ldr	r2, [pc, #12]	@ (800eea0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 800ee94:	4801      	ldr	r0, [pc, #4]	@ (800ee9c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 800ee96:	6812      	ldr	r2, [r2, #0]
 800ee98:	601a      	str	r2, [r3, #0]
 800ee9a:	4770      	bx	lr
 800ee9c:	2400051c 	.word	0x2400051c
 800eea0:	24000c80 	.word	0x24000c80

0800eea4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800eea4:	4a02      	ldr	r2, [pc, #8]	@ (800eeb0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 800eea6:	4b03      	ldr	r3, [pc, #12]	@ (800eeb4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 800eea8:	6812      	ldr	r2, [r2, #0]
 800eeaa:	601a      	str	r2, [r3, #0]
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop
 800eeb0:	24000c80 	.word	0x24000c80
 800eeb4:	2400051c 	.word	0x2400051c

0800eeb8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800eeb8:	4b04      	ldr	r3, [pc, #16]	@ (800eecc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	b10a      	cbz	r2, 800eec2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xa>
 800eebe:	4803      	ldr	r0, [pc, #12]	@ (800eecc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 800eec0:	4770      	bx	lr
 800eec2:	4a03      	ldr	r2, [pc, #12]	@ (800eed0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x18>)
 800eec4:	4801      	ldr	r0, [pc, #4]	@ (800eecc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 800eec6:	6812      	ldr	r2, [r2, #0]
 800eec8:	601a      	str	r2, [r3, #0]
 800eeca:	4770      	bx	lr
 800eecc:	24000530 	.word	0x24000530
 800eed0:	24000c80 	.word	0x24000c80

0800eed4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800eed4:	4a02      	ldr	r2, [pc, #8]	@ (800eee0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 800eed6:	4b03      	ldr	r3, [pc, #12]	@ (800eee4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 800eed8:	6812      	ldr	r2, [r2, #0]
 800eeda:	601a      	str	r2, [r3, #0]
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop
 800eee0:	24000c80 	.word	0x24000c80
 800eee4:	24000530 	.word	0x24000530

0800eee8 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 800eee8:	f003 bc28 	b.w	801273c <autoware_vehicle_msgs__msg__ControlModeReport__init>

0800eeec <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 800eeec:	f003 bc38 	b.w	8012760 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

0800eef0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800eef0:	b508      	push	{r3, lr}
 800eef2:	f000 fc6d 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eef6:	4b06      	ldr	r3, [pc, #24]	@ (800ef10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800eef8:	4906      	ldr	r1, [pc, #24]	@ (800ef14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	60c8      	str	r0, [r1, #12]
 800eefe:	b10a      	cbz	r2, 800ef04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 800ef00:	4803      	ldr	r0, [pc, #12]	@ (800ef10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800ef02:	bd08      	pop	{r3, pc}
 800ef04:	4a04      	ldr	r2, [pc, #16]	@ (800ef18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 800ef06:	4802      	ldr	r0, [pc, #8]	@ (800ef10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800ef08:	6812      	ldr	r2, [r2, #0]
 800ef0a:	601a      	str	r2, [r3, #0]
 800ef0c:	bd08      	pop	{r3, pc}
 800ef0e:	bf00      	nop
 800ef10:	240005b4 	.word	0x240005b4
 800ef14:	2400053c 	.word	0x2400053c
 800ef18:	24000c84 	.word	0x24000c84

0800ef1c <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 800ef1c:	f003 bc24 	b.w	8012768 <autoware_vehicle_msgs__msg__GearCommand__init>

0800ef20 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 800ef20:	f003 bc34 	b.w	801278c <autoware_vehicle_msgs__msg__GearCommand__fini>

0800ef24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800ef24:	b508      	push	{r3, lr}
 800ef26:	f000 fc53 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ef2a:	4b06      	ldr	r3, [pc, #24]	@ (800ef44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800ef2c:	4906      	ldr	r1, [pc, #24]	@ (800ef48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	60c8      	str	r0, [r1, #12]
 800ef32:	b10a      	cbz	r2, 800ef38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 800ef34:	4803      	ldr	r0, [pc, #12]	@ (800ef44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800ef36:	bd08      	pop	{r3, pc}
 800ef38:	4a04      	ldr	r2, [pc, #16]	@ (800ef4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 800ef3a:	4802      	ldr	r0, [pc, #8]	@ (800ef44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800ef3c:	6812      	ldr	r2, [r2, #0]
 800ef3e:	601a      	str	r2, [r3, #0]
 800ef40:	bd08      	pop	{r3, pc}
 800ef42:	bf00      	nop
 800ef44:	24000638 	.word	0x24000638
 800ef48:	240005c0 	.word	0x240005c0
 800ef4c:	24000c84 	.word	0x24000c84

0800ef50 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 800ef50:	f003 bc20 	b.w	8012794 <autoware_vehicle_msgs__msg__GearReport__init>

0800ef54 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 800ef54:	f003 bc30 	b.w	80127b8 <autoware_vehicle_msgs__msg__GearReport__fini>

0800ef58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800ef58:	b508      	push	{r3, lr}
 800ef5a:	f000 fc39 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ef5e:	4b06      	ldr	r3, [pc, #24]	@ (800ef78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800ef60:	4906      	ldr	r1, [pc, #24]	@ (800ef7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	60c8      	str	r0, [r1, #12]
 800ef66:	b10a      	cbz	r2, 800ef6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 800ef68:	4803      	ldr	r0, [pc, #12]	@ (800ef78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800ef6a:	bd08      	pop	{r3, pc}
 800ef6c:	4a04      	ldr	r2, [pc, #16]	@ (800ef80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 800ef6e:	4802      	ldr	r0, [pc, #8]	@ (800ef78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800ef70:	6812      	ldr	r2, [r2, #0]
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	bd08      	pop	{r3, pc}
 800ef76:	bf00      	nop
 800ef78:	240006bc 	.word	0x240006bc
 800ef7c:	24000644 	.word	0x24000644
 800ef80:	24000c84 	.word	0x24000c84

0800ef84 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 800ef84:	f003 bc1c 	b.w	80127c0 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

0800ef88 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 800ef88:	f003 bc2c 	b.w	80127e4 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

0800ef8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800ef8c:	b508      	push	{r3, lr}
 800ef8e:	f000 fc1f 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ef92:	4b06      	ldr	r3, [pc, #24]	@ (800efac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800ef94:	4906      	ldr	r1, [pc, #24]	@ (800efb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	60c8      	str	r0, [r1, #12]
 800ef9a:	b10a      	cbz	r2, 800efa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 800ef9c:	4803      	ldr	r0, [pc, #12]	@ (800efac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800ef9e:	bd08      	pop	{r3, pc}
 800efa0:	4a04      	ldr	r2, [pc, #16]	@ (800efb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 800efa2:	4802      	ldr	r0, [pc, #8]	@ (800efac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800efa4:	6812      	ldr	r2, [r2, #0]
 800efa6:	601a      	str	r2, [r3, #0]
 800efa8:	bd08      	pop	{r3, pc}
 800efaa:	bf00      	nop
 800efac:	24000740 	.word	0x24000740
 800efb0:	240006c8 	.word	0x240006c8
 800efb4:	24000c84 	.word	0x24000c84

0800efb8 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 800efb8:	f003 bc18 	b.w	80127ec <autoware_vehicle_msgs__msg__HazardLightsReport__init>

0800efbc <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 800efbc:	f003 bc28 	b.w	8012810 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

0800efc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800efc0:	b508      	push	{r3, lr}
 800efc2:	f000 fc05 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800efc6:	4b06      	ldr	r3, [pc, #24]	@ (800efe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800efc8:	4906      	ldr	r1, [pc, #24]	@ (800efe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	60c8      	str	r0, [r1, #12]
 800efce:	b10a      	cbz	r2, 800efd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 800efd0:	4803      	ldr	r0, [pc, #12]	@ (800efe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800efd2:	bd08      	pop	{r3, pc}
 800efd4:	4a04      	ldr	r2, [pc, #16]	@ (800efe8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 800efd6:	4802      	ldr	r0, [pc, #8]	@ (800efe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800efd8:	6812      	ldr	r2, [r2, #0]
 800efda:	601a      	str	r2, [r3, #0]
 800efdc:	bd08      	pop	{r3, pc}
 800efde:	bf00      	nop
 800efe0:	240007c4 	.word	0x240007c4
 800efe4:	2400074c 	.word	0x2400074c
 800efe8:	24000c84 	.word	0x24000c84

0800efec <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 800efec:	f003 bc14 	b.w	8012818 <autoware_vehicle_msgs__msg__SteeringReport__init>

0800eff0 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 800eff0:	f003 bc24 	b.w	801283c <autoware_vehicle_msgs__msg__SteeringReport__fini>

0800eff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800eff4:	b508      	push	{r3, lr}
 800eff6:	f000 fbeb 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800effa:	4b06      	ldr	r3, [pc, #24]	@ (800f014 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800effc:	4906      	ldr	r1, [pc, #24]	@ (800f018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	60c8      	str	r0, [r1, #12]
 800f002:	b10a      	cbz	r2, 800f008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 800f004:	4803      	ldr	r0, [pc, #12]	@ (800f014 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800f006:	bd08      	pop	{r3, pc}
 800f008:	4a04      	ldr	r2, [pc, #16]	@ (800f01c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 800f00a:	4802      	ldr	r0, [pc, #8]	@ (800f014 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800f00c:	6812      	ldr	r2, [r2, #0]
 800f00e:	601a      	str	r2, [r3, #0]
 800f010:	bd08      	pop	{r3, pc}
 800f012:	bf00      	nop
 800f014:	24000848 	.word	0x24000848
 800f018:	240007d0 	.word	0x240007d0
 800f01c:	24000c84 	.word	0x24000c84

0800f020 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 800f020:	f003 bc10 	b.w	8012844 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

0800f024 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 800f024:	f003 bc20 	b.w	8012868 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

0800f028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800f028:	b508      	push	{r3, lr}
 800f02a:	f000 fbd1 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f02e:	4b06      	ldr	r3, [pc, #24]	@ (800f048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800f030:	4906      	ldr	r1, [pc, #24]	@ (800f04c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	60c8      	str	r0, [r1, #12]
 800f036:	b10a      	cbz	r2, 800f03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 800f038:	4803      	ldr	r0, [pc, #12]	@ (800f048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800f03a:	bd08      	pop	{r3, pc}
 800f03c:	4a04      	ldr	r2, [pc, #16]	@ (800f050 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 800f03e:	4802      	ldr	r0, [pc, #8]	@ (800f048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800f040:	6812      	ldr	r2, [r2, #0]
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	bd08      	pop	{r3, pc}
 800f046:	bf00      	nop
 800f048:	240008cc 	.word	0x240008cc
 800f04c:	24000854 	.word	0x24000854
 800f050:	24000c84 	.word	0x24000c84

0800f054 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 800f054:	f003 bc0c 	b.w	8012870 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

0800f058 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 800f058:	f003 bc1c 	b.w	8012894 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

0800f05c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800f05c:	b508      	push	{r3, lr}
 800f05e:	f000 fbb7 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f062:	4b06      	ldr	r3, [pc, #24]	@ (800f07c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800f064:	4906      	ldr	r1, [pc, #24]	@ (800f080 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	60c8      	str	r0, [r1, #12]
 800f06a:	b10a      	cbz	r2, 800f070 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 800f06c:	4803      	ldr	r0, [pc, #12]	@ (800f07c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800f06e:	bd08      	pop	{r3, pc}
 800f070:	4a04      	ldr	r2, [pc, #16]	@ (800f084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 800f072:	4802      	ldr	r0, [pc, #8]	@ (800f07c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800f074:	6812      	ldr	r2, [r2, #0]
 800f076:	601a      	str	r2, [r3, #0]
 800f078:	bd08      	pop	{r3, pc}
 800f07a:	bf00      	nop
 800f07c:	24000950 	.word	0x24000950
 800f080:	240008d8 	.word	0x240008d8
 800f084:	24000c84 	.word	0x24000c84

0800f088 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 800f088:	f003 bc08 	b.w	801289c <autoware_vehicle_msgs__msg__VelocityReport__init>

0800f08c <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 800f08c:	f003 bc18 	b.w	80128c0 <autoware_vehicle_msgs__msg__VelocityReport__fini>

0800f090 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800f090:	b508      	push	{r3, lr}
 800f092:	f002 ff7d 	bl	8011f90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f096:	4b06      	ldr	r3, [pc, #24]	@ (800f0b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800f098:	4906      	ldr	r1, [pc, #24]	@ (800f0b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	60c8      	str	r0, [r1, #12]
 800f09e:	b10a      	cbz	r2, 800f0a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 800f0a0:	4803      	ldr	r0, [pc, #12]	@ (800f0b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800f0a2:	bd08      	pop	{r3, pc}
 800f0a4:	4a04      	ldr	r2, [pc, #16]	@ (800f0b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 800f0a6:	4802      	ldr	r0, [pc, #8]	@ (800f0b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800f0a8:	6812      	ldr	r2, [r2, #0]
 800f0aa:	601a      	str	r2, [r3, #0]
 800f0ac:	bd08      	pop	{r3, pc}
 800f0ae:	bf00      	nop
 800f0b0:	24000a4c 	.word	0x24000a4c
 800f0b4:	2400095c 	.word	0x2400095c
 800f0b8:	24000c84 	.word	0x24000c84

0800f0bc <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 800f0bc:	b538      	push	{r3, r4, r5, lr}
 800f0be:	b158      	cbz	r0, 800f0d8 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 800f0c0:	460d      	mov	r5, r1
 800f0c2:	f000 fb93 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f0c6:	2101      	movs	r1, #1
 800f0c8:	182c      	adds	r4, r5, r0
 800f0ca:	f1c5 0501 	rsb	r5, r5, #1
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f001 fe90 	bl	8010df4 <ucdr_alignment>
 800f0d4:	4428      	add	r0, r5
 800f0d6:	4420      	add	r0, r4
 800f0d8:	bd38      	pop	{r3, r4, r5, pc}
 800f0da:	bf00      	nop

0800f0dc <_ControlModeReport__cdr_deserialize>:
 800f0dc:	b538      	push	{r3, r4, r5, lr}
 800f0de:	460c      	mov	r4, r1
 800f0e0:	b179      	cbz	r1, 800f102 <_ControlModeReport__cdr_deserialize+0x26>
 800f0e2:	4605      	mov	r5, r0
 800f0e4:	f000 fbe6 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	4621      	mov	r1, r4
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	4798      	blx	r3
 800f0f4:	f104 0108 	add.w	r1, r4, #8
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0fe:	f000 bc21 	b.w	800f944 <ucdr_deserialize_uint8_t>
 800f102:	4608      	mov	r0, r1
 800f104:	bd38      	pop	{r3, r4, r5, pc}
 800f106:	bf00      	nop

0800f108 <_ControlModeReport__cdr_serialize>:
 800f108:	b180      	cbz	r0, 800f12c <_ControlModeReport__cdr_serialize+0x24>
 800f10a:	b538      	push	{r3, r4, r5, lr}
 800f10c:	4604      	mov	r4, r0
 800f10e:	460d      	mov	r5, r1
 800f110:	f000 fbd0 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f114:	4603      	mov	r3, r0
 800f116:	4629      	mov	r1, r5
 800f118:	4620      	mov	r0, r4
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	689b      	ldr	r3, [r3, #8]
 800f11e:	4798      	blx	r3
 800f120:	7a21      	ldrb	r1, [r4, #8]
 800f122:	4628      	mov	r0, r5
 800f124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f128:	f000 bbf6 	b.w	800f918 <ucdr_serialize_uint8_t>
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop

0800f130 <_ControlModeReport__get_serialized_size>:
 800f130:	b150      	cbz	r0, 800f148 <_ControlModeReport__get_serialized_size+0x18>
 800f132:	2100      	movs	r1, #0
 800f134:	b510      	push	{r4, lr}
 800f136:	f000 fb59 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f13a:	4604      	mov	r4, r0
 800f13c:	2101      	movs	r1, #1
 800f13e:	f001 fe59 	bl	8010df4 <ucdr_alignment>
 800f142:	4420      	add	r0, r4
 800f144:	3001      	adds	r0, #1
 800f146:	bd10      	pop	{r4, pc}
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop

0800f14c <_ControlModeReport__max_serialized_size>:
 800f14c:	b510      	push	{r4, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	2401      	movs	r4, #1
 800f152:	2100      	movs	r1, #0
 800f154:	f10d 0007 	add.w	r0, sp, #7
 800f158:	f88d 4007 	strb.w	r4, [sp, #7]
 800f15c:	f000 fb96 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800f160:	4621      	mov	r1, r4
 800f162:	4604      	mov	r4, r0
 800f164:	f001 fe46 	bl	8010df4 <ucdr_alignment>
 800f168:	4420      	add	r0, r4
 800f16a:	3001      	adds	r0, #1
 800f16c:	b002      	add	sp, #8
 800f16e:	bd10      	pop	{r4, pc}

0800f170 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800f170:	4800      	ldr	r0, [pc, #0]	@ (800f174 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 800f172:	4770      	bx	lr
 800f174:	24000a58 	.word	0x24000a58

0800f178 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	b158      	cbz	r0, 800f194 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 800f17c:	460d      	mov	r5, r1
 800f17e:	f000 fb35 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f182:	2101      	movs	r1, #1
 800f184:	182c      	adds	r4, r5, r0
 800f186:	f1c5 0501 	rsb	r5, r5, #1
 800f18a:	4620      	mov	r0, r4
 800f18c:	f001 fe32 	bl	8010df4 <ucdr_alignment>
 800f190:	4428      	add	r0, r5
 800f192:	4420      	add	r0, r4
 800f194:	bd38      	pop	{r3, r4, r5, pc}
 800f196:	bf00      	nop

0800f198 <_GearCommand__cdr_deserialize>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	460c      	mov	r4, r1
 800f19c:	b179      	cbz	r1, 800f1be <_GearCommand__cdr_deserialize+0x26>
 800f19e:	4605      	mov	r5, r0
 800f1a0:	f000 fb88 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	4621      	mov	r1, r4
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	4798      	blx	r3
 800f1b0:	f104 0108 	add.w	r1, r4, #8
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1ba:	f000 bbc3 	b.w	800f944 <ucdr_deserialize_uint8_t>
 800f1be:	4608      	mov	r0, r1
 800f1c0:	bd38      	pop	{r3, r4, r5, pc}
 800f1c2:	bf00      	nop

0800f1c4 <_GearCommand__cdr_serialize>:
 800f1c4:	b180      	cbz	r0, 800f1e8 <_GearCommand__cdr_serialize+0x24>
 800f1c6:	b538      	push	{r3, r4, r5, lr}
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	460d      	mov	r5, r1
 800f1cc:	f000 fb72 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	4629      	mov	r1, r5
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	689b      	ldr	r3, [r3, #8]
 800f1da:	4798      	blx	r3
 800f1dc:	7a21      	ldrb	r1, [r4, #8]
 800f1de:	4628      	mov	r0, r5
 800f1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1e4:	f000 bb98 	b.w	800f918 <ucdr_serialize_uint8_t>
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop

0800f1ec <_GearCommand__get_serialized_size>:
 800f1ec:	b150      	cbz	r0, 800f204 <_GearCommand__get_serialized_size+0x18>
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	f000 fafb 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	2101      	movs	r1, #1
 800f1fa:	f001 fdfb 	bl	8010df4 <ucdr_alignment>
 800f1fe:	4420      	add	r0, r4
 800f200:	3001      	adds	r0, #1
 800f202:	bd10      	pop	{r4, pc}
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop

0800f208 <_GearCommand__max_serialized_size>:
 800f208:	b510      	push	{r4, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	2401      	movs	r4, #1
 800f20e:	2100      	movs	r1, #0
 800f210:	f10d 0007 	add.w	r0, sp, #7
 800f214:	f88d 4007 	strb.w	r4, [sp, #7]
 800f218:	f000 fb38 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800f21c:	4621      	mov	r1, r4
 800f21e:	4604      	mov	r4, r0
 800f220:	f001 fde8 	bl	8010df4 <ucdr_alignment>
 800f224:	4420      	add	r0, r4
 800f226:	3001      	adds	r0, #1
 800f228:	b002      	add	sp, #8
 800f22a:	bd10      	pop	{r4, pc}

0800f22c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800f22c:	4800      	ldr	r0, [pc, #0]	@ (800f230 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 800f22e:	4770      	bx	lr
 800f230:	24000a80 	.word	0x24000a80

0800f234 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	b158      	cbz	r0, 800f250 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 800f238:	460d      	mov	r5, r1
 800f23a:	f000 fad7 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f23e:	2101      	movs	r1, #1
 800f240:	182c      	adds	r4, r5, r0
 800f242:	f1c5 0501 	rsb	r5, r5, #1
 800f246:	4620      	mov	r0, r4
 800f248:	f001 fdd4 	bl	8010df4 <ucdr_alignment>
 800f24c:	4428      	add	r0, r5
 800f24e:	4420      	add	r0, r4
 800f250:	bd38      	pop	{r3, r4, r5, pc}
 800f252:	bf00      	nop

0800f254 <_GearReport__cdr_deserialize>:
 800f254:	b538      	push	{r3, r4, r5, lr}
 800f256:	460c      	mov	r4, r1
 800f258:	b179      	cbz	r1, 800f27a <_GearReport__cdr_deserialize+0x26>
 800f25a:	4605      	mov	r5, r0
 800f25c:	f000 fb2a 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f260:	4603      	mov	r3, r0
 800f262:	4621      	mov	r1, r4
 800f264:	4628      	mov	r0, r5
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	4798      	blx	r3
 800f26c:	f104 0108 	add.w	r1, r4, #8
 800f270:	4628      	mov	r0, r5
 800f272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f276:	f000 bb65 	b.w	800f944 <ucdr_deserialize_uint8_t>
 800f27a:	4608      	mov	r0, r1
 800f27c:	bd38      	pop	{r3, r4, r5, pc}
 800f27e:	bf00      	nop

0800f280 <_GearReport__cdr_serialize>:
 800f280:	b180      	cbz	r0, 800f2a4 <_GearReport__cdr_serialize+0x24>
 800f282:	b538      	push	{r3, r4, r5, lr}
 800f284:	4604      	mov	r4, r0
 800f286:	460d      	mov	r5, r1
 800f288:	f000 fb14 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f28c:	4603      	mov	r3, r0
 800f28e:	4629      	mov	r1, r5
 800f290:	4620      	mov	r0, r4
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	689b      	ldr	r3, [r3, #8]
 800f296:	4798      	blx	r3
 800f298:	7a21      	ldrb	r1, [r4, #8]
 800f29a:	4628      	mov	r0, r5
 800f29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2a0:	f000 bb3a 	b.w	800f918 <ucdr_serialize_uint8_t>
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop

0800f2a8 <_GearReport__get_serialized_size>:
 800f2a8:	b150      	cbz	r0, 800f2c0 <_GearReport__get_serialized_size+0x18>
 800f2aa:	2100      	movs	r1, #0
 800f2ac:	b510      	push	{r4, lr}
 800f2ae:	f000 fa9d 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	2101      	movs	r1, #1
 800f2b6:	f001 fd9d 	bl	8010df4 <ucdr_alignment>
 800f2ba:	4420      	add	r0, r4
 800f2bc:	3001      	adds	r0, #1
 800f2be:	bd10      	pop	{r4, pc}
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop

0800f2c4 <_GearReport__max_serialized_size>:
 800f2c4:	b510      	push	{r4, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	2401      	movs	r4, #1
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	f10d 0007 	add.w	r0, sp, #7
 800f2d0:	f88d 4007 	strb.w	r4, [sp, #7]
 800f2d4:	f000 fada 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800f2d8:	4621      	mov	r1, r4
 800f2da:	4604      	mov	r4, r0
 800f2dc:	f001 fd8a 	bl	8010df4 <ucdr_alignment>
 800f2e0:	4420      	add	r0, r4
 800f2e2:	3001      	adds	r0, #1
 800f2e4:	b002      	add	sp, #8
 800f2e6:	bd10      	pop	{r4, pc}

0800f2e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800f2e8:	4800      	ldr	r0, [pc, #0]	@ (800f2ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 800f2ea:	4770      	bx	lr
 800f2ec:	24000aa8 	.word	0x24000aa8

0800f2f0 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800f2f0:	b538      	push	{r3, r4, r5, lr}
 800f2f2:	b158      	cbz	r0, 800f30c <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 800f2f4:	460d      	mov	r5, r1
 800f2f6:	f000 fa79 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f2fa:	2101      	movs	r1, #1
 800f2fc:	182c      	adds	r4, r5, r0
 800f2fe:	f1c5 0501 	rsb	r5, r5, #1
 800f302:	4620      	mov	r0, r4
 800f304:	f001 fd76 	bl	8010df4 <ucdr_alignment>
 800f308:	4428      	add	r0, r5
 800f30a:	4420      	add	r0, r4
 800f30c:	bd38      	pop	{r3, r4, r5, pc}
 800f30e:	bf00      	nop

0800f310 <_HazardLightsCommand__cdr_deserialize>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	460c      	mov	r4, r1
 800f314:	b179      	cbz	r1, 800f336 <_HazardLightsCommand__cdr_deserialize+0x26>
 800f316:	4605      	mov	r5, r0
 800f318:	f000 facc 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f31c:	4603      	mov	r3, r0
 800f31e:	4621      	mov	r1, r4
 800f320:	4628      	mov	r0, r5
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	4798      	blx	r3
 800f328:	f104 0108 	add.w	r1, r4, #8
 800f32c:	4628      	mov	r0, r5
 800f32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f332:	f000 bb07 	b.w	800f944 <ucdr_deserialize_uint8_t>
 800f336:	4608      	mov	r0, r1
 800f338:	bd38      	pop	{r3, r4, r5, pc}
 800f33a:	bf00      	nop

0800f33c <_HazardLightsCommand__cdr_serialize>:
 800f33c:	b180      	cbz	r0, 800f360 <_HazardLightsCommand__cdr_serialize+0x24>
 800f33e:	b538      	push	{r3, r4, r5, lr}
 800f340:	4604      	mov	r4, r0
 800f342:	460d      	mov	r5, r1
 800f344:	f000 fab6 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f348:	4603      	mov	r3, r0
 800f34a:	4629      	mov	r1, r5
 800f34c:	4620      	mov	r0, r4
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	4798      	blx	r3
 800f354:	7a21      	ldrb	r1, [r4, #8]
 800f356:	4628      	mov	r0, r5
 800f358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f35c:	f000 badc 	b.w	800f918 <ucdr_serialize_uint8_t>
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop

0800f364 <_HazardLightsCommand__get_serialized_size>:
 800f364:	b150      	cbz	r0, 800f37c <_HazardLightsCommand__get_serialized_size+0x18>
 800f366:	2100      	movs	r1, #0
 800f368:	b510      	push	{r4, lr}
 800f36a:	f000 fa3f 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f36e:	4604      	mov	r4, r0
 800f370:	2101      	movs	r1, #1
 800f372:	f001 fd3f 	bl	8010df4 <ucdr_alignment>
 800f376:	4420      	add	r0, r4
 800f378:	3001      	adds	r0, #1
 800f37a:	bd10      	pop	{r4, pc}
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop

0800f380 <_HazardLightsCommand__max_serialized_size>:
 800f380:	b510      	push	{r4, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	2401      	movs	r4, #1
 800f386:	2100      	movs	r1, #0
 800f388:	f10d 0007 	add.w	r0, sp, #7
 800f38c:	f88d 4007 	strb.w	r4, [sp, #7]
 800f390:	f000 fa7c 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800f394:	4621      	mov	r1, r4
 800f396:	4604      	mov	r4, r0
 800f398:	f001 fd2c 	bl	8010df4 <ucdr_alignment>
 800f39c:	4420      	add	r0, r4
 800f39e:	3001      	adds	r0, #1
 800f3a0:	b002      	add	sp, #8
 800f3a2:	bd10      	pop	{r4, pc}

0800f3a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800f3a4:	4800      	ldr	r0, [pc, #0]	@ (800f3a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 800f3a6:	4770      	bx	lr
 800f3a8:	24000ad0 	.word	0x24000ad0

0800f3ac <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	b158      	cbz	r0, 800f3c8 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 800f3b0:	460d      	mov	r5, r1
 800f3b2:	f000 fa1b 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f3b6:	2101      	movs	r1, #1
 800f3b8:	182c      	adds	r4, r5, r0
 800f3ba:	f1c5 0501 	rsb	r5, r5, #1
 800f3be:	4620      	mov	r0, r4
 800f3c0:	f001 fd18 	bl	8010df4 <ucdr_alignment>
 800f3c4:	4428      	add	r0, r5
 800f3c6:	4420      	add	r0, r4
 800f3c8:	bd38      	pop	{r3, r4, r5, pc}
 800f3ca:	bf00      	nop

0800f3cc <_HazardLightsReport__cdr_deserialize>:
 800f3cc:	b538      	push	{r3, r4, r5, lr}
 800f3ce:	460c      	mov	r4, r1
 800f3d0:	b179      	cbz	r1, 800f3f2 <_HazardLightsReport__cdr_deserialize+0x26>
 800f3d2:	4605      	mov	r5, r0
 800f3d4:	f000 fa6e 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	4621      	mov	r1, r4
 800f3dc:	4628      	mov	r0, r5
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	4798      	blx	r3
 800f3e4:	f104 0108 	add.w	r1, r4, #8
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3ee:	f000 baa9 	b.w	800f944 <ucdr_deserialize_uint8_t>
 800f3f2:	4608      	mov	r0, r1
 800f3f4:	bd38      	pop	{r3, r4, r5, pc}
 800f3f6:	bf00      	nop

0800f3f8 <_HazardLightsReport__cdr_serialize>:
 800f3f8:	b180      	cbz	r0, 800f41c <_HazardLightsReport__cdr_serialize+0x24>
 800f3fa:	b538      	push	{r3, r4, r5, lr}
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	460d      	mov	r5, r1
 800f400:	f000 fa58 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f404:	4603      	mov	r3, r0
 800f406:	4629      	mov	r1, r5
 800f408:	4620      	mov	r0, r4
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	689b      	ldr	r3, [r3, #8]
 800f40e:	4798      	blx	r3
 800f410:	7a21      	ldrb	r1, [r4, #8]
 800f412:	4628      	mov	r0, r5
 800f414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f418:	f000 ba7e 	b.w	800f918 <ucdr_serialize_uint8_t>
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop

0800f420 <_HazardLightsReport__get_serialized_size>:
 800f420:	b150      	cbz	r0, 800f438 <_HazardLightsReport__get_serialized_size+0x18>
 800f422:	2100      	movs	r1, #0
 800f424:	b510      	push	{r4, lr}
 800f426:	f000 f9e1 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f42a:	4604      	mov	r4, r0
 800f42c:	2101      	movs	r1, #1
 800f42e:	f001 fce1 	bl	8010df4 <ucdr_alignment>
 800f432:	4420      	add	r0, r4
 800f434:	3001      	adds	r0, #1
 800f436:	bd10      	pop	{r4, pc}
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop

0800f43c <_HazardLightsReport__max_serialized_size>:
 800f43c:	b510      	push	{r4, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	2401      	movs	r4, #1
 800f442:	2100      	movs	r1, #0
 800f444:	f10d 0007 	add.w	r0, sp, #7
 800f448:	f88d 4007 	strb.w	r4, [sp, #7]
 800f44c:	f000 fa1e 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800f450:	4621      	mov	r1, r4
 800f452:	4604      	mov	r4, r0
 800f454:	f001 fcce 	bl	8010df4 <ucdr_alignment>
 800f458:	4420      	add	r0, r4
 800f45a:	3001      	adds	r0, #1
 800f45c:	b002      	add	sp, #8
 800f45e:	bd10      	pop	{r4, pc}

0800f460 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800f460:	4800      	ldr	r0, [pc, #0]	@ (800f464 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 800f462:	4770      	bx	lr
 800f464:	24000af8 	.word	0x24000af8

0800f468 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 800f468:	b538      	push	{r3, r4, r5, lr}
 800f46a:	b158      	cbz	r0, 800f484 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 800f46c:	460d      	mov	r5, r1
 800f46e:	f000 f9bd 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f472:	2104      	movs	r1, #4
 800f474:	182c      	adds	r4, r5, r0
 800f476:	f1c5 0504 	rsb	r5, r5, #4
 800f47a:	4620      	mov	r0, r4
 800f47c:	f001 fcba 	bl	8010df4 <ucdr_alignment>
 800f480:	4428      	add	r0, r5
 800f482:	4420      	add	r0, r4
 800f484:	bd38      	pop	{r3, r4, r5, pc}
 800f486:	bf00      	nop

0800f488 <_SteeringReport__cdr_deserialize>:
 800f488:	b538      	push	{r3, r4, r5, lr}
 800f48a:	460c      	mov	r4, r1
 800f48c:	b179      	cbz	r1, 800f4ae <_SteeringReport__cdr_deserialize+0x26>
 800f48e:	4605      	mov	r5, r0
 800f490:	f000 fa10 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f494:	4603      	mov	r3, r0
 800f496:	4621      	mov	r1, r4
 800f498:	4628      	mov	r0, r5
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	4798      	blx	r3
 800f4a0:	f104 0108 	add.w	r1, r4, #8
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4aa:	f001 ba25 	b.w	80108f8 <ucdr_deserialize_float>
 800f4ae:	4608      	mov	r0, r1
 800f4b0:	bd38      	pop	{r3, r4, r5, pc}
 800f4b2:	bf00      	nop

0800f4b4 <_SteeringReport__cdr_serialize>:
 800f4b4:	b188      	cbz	r0, 800f4da <_SteeringReport__cdr_serialize+0x26>
 800f4b6:	b538      	push	{r3, r4, r5, lr}
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	460d      	mov	r5, r1
 800f4bc:	f000 f9fa 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	4629      	mov	r1, r5
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	4798      	blx	r3
 800f4cc:	ed94 0a02 	vldr	s0, [r4, #8]
 800f4d0:	4628      	mov	r0, r5
 800f4d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4d6:	f001 b977 	b.w	80107c8 <ucdr_serialize_float>
 800f4da:	4770      	bx	lr

0800f4dc <_SteeringReport__get_serialized_size>:
 800f4dc:	b150      	cbz	r0, 800f4f4 <_SteeringReport__get_serialized_size+0x18>
 800f4de:	2100      	movs	r1, #0
 800f4e0:	b510      	push	{r4, lr}
 800f4e2:	f000 f983 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	2104      	movs	r1, #4
 800f4ea:	f001 fc83 	bl	8010df4 <ucdr_alignment>
 800f4ee:	4420      	add	r0, r4
 800f4f0:	3004      	adds	r0, #4
 800f4f2:	bd10      	pop	{r4, pc}
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop

0800f4f8 <_SteeringReport__max_serialized_size>:
 800f4f8:	b510      	push	{r4, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	2100      	movs	r1, #0
 800f500:	f10d 0007 	add.w	r0, sp, #7
 800f504:	f88d 3007 	strb.w	r3, [sp, #7]
 800f508:	f000 f9c0 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800f50c:	4604      	mov	r4, r0
 800f50e:	2104      	movs	r1, #4
 800f510:	f001 fc70 	bl	8010df4 <ucdr_alignment>
 800f514:	4420      	add	r0, r4
 800f516:	3004      	adds	r0, #4
 800f518:	b002      	add	sp, #8
 800f51a:	bd10      	pop	{r4, pc}

0800f51c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800f51c:	4800      	ldr	r0, [pc, #0]	@ (800f520 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 800f51e:	4770      	bx	lr
 800f520:	24000b20 	.word	0x24000b20

0800f524 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	b158      	cbz	r0, 800f540 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 800f528:	460d      	mov	r5, r1
 800f52a:	f000 f95f 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f52e:	2101      	movs	r1, #1
 800f530:	182c      	adds	r4, r5, r0
 800f532:	f1c5 0501 	rsb	r5, r5, #1
 800f536:	4620      	mov	r0, r4
 800f538:	f001 fc5c 	bl	8010df4 <ucdr_alignment>
 800f53c:	4428      	add	r0, r5
 800f53e:	4420      	add	r0, r4
 800f540:	bd38      	pop	{r3, r4, r5, pc}
 800f542:	bf00      	nop

0800f544 <_TurnIndicatorsCommand__cdr_deserialize>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	460c      	mov	r4, r1
 800f548:	b179      	cbz	r1, 800f56a <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 800f54a:	4605      	mov	r5, r0
 800f54c:	f000 f9b2 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f550:	4603      	mov	r3, r0
 800f552:	4621      	mov	r1, r4
 800f554:	4628      	mov	r0, r5
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	4798      	blx	r3
 800f55c:	f104 0108 	add.w	r1, r4, #8
 800f560:	4628      	mov	r0, r5
 800f562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f566:	f000 b9ed 	b.w	800f944 <ucdr_deserialize_uint8_t>
 800f56a:	4608      	mov	r0, r1
 800f56c:	bd38      	pop	{r3, r4, r5, pc}
 800f56e:	bf00      	nop

0800f570 <_TurnIndicatorsCommand__cdr_serialize>:
 800f570:	b180      	cbz	r0, 800f594 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 800f572:	b538      	push	{r3, r4, r5, lr}
 800f574:	4604      	mov	r4, r0
 800f576:	460d      	mov	r5, r1
 800f578:	f000 f99c 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f57c:	4603      	mov	r3, r0
 800f57e:	4629      	mov	r1, r5
 800f580:	4620      	mov	r0, r4
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	689b      	ldr	r3, [r3, #8]
 800f586:	4798      	blx	r3
 800f588:	7a21      	ldrb	r1, [r4, #8]
 800f58a:	4628      	mov	r0, r5
 800f58c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f590:	f000 b9c2 	b.w	800f918 <ucdr_serialize_uint8_t>
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop

0800f598 <_TurnIndicatorsCommand__get_serialized_size>:
 800f598:	b150      	cbz	r0, 800f5b0 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 800f59a:	2100      	movs	r1, #0
 800f59c:	b510      	push	{r4, lr}
 800f59e:	f000 f925 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	2101      	movs	r1, #1
 800f5a6:	f001 fc25 	bl	8010df4 <ucdr_alignment>
 800f5aa:	4420      	add	r0, r4
 800f5ac:	3001      	adds	r0, #1
 800f5ae:	bd10      	pop	{r4, pc}
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop

0800f5b4 <_TurnIndicatorsCommand__max_serialized_size>:
 800f5b4:	b510      	push	{r4, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	2401      	movs	r4, #1
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	f10d 0007 	add.w	r0, sp, #7
 800f5c0:	f88d 4007 	strb.w	r4, [sp, #7]
 800f5c4:	f000 f962 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800f5c8:	4621      	mov	r1, r4
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	f001 fc12 	bl	8010df4 <ucdr_alignment>
 800f5d0:	4420      	add	r0, r4
 800f5d2:	3001      	adds	r0, #1
 800f5d4:	b002      	add	sp, #8
 800f5d6:	bd10      	pop	{r4, pc}

0800f5d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800f5d8:	4800      	ldr	r0, [pc, #0]	@ (800f5dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 800f5da:	4770      	bx	lr
 800f5dc:	24000b48 	.word	0x24000b48

0800f5e0 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800f5e0:	b538      	push	{r3, r4, r5, lr}
 800f5e2:	b158      	cbz	r0, 800f5fc <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 800f5e4:	460d      	mov	r5, r1
 800f5e6:	f000 f901 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f5ea:	2101      	movs	r1, #1
 800f5ec:	182c      	adds	r4, r5, r0
 800f5ee:	f1c5 0501 	rsb	r5, r5, #1
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f001 fbfe 	bl	8010df4 <ucdr_alignment>
 800f5f8:	4428      	add	r0, r5
 800f5fa:	4420      	add	r0, r4
 800f5fc:	bd38      	pop	{r3, r4, r5, pc}
 800f5fe:	bf00      	nop

0800f600 <_TurnIndicatorsReport__cdr_deserialize>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	460c      	mov	r4, r1
 800f604:	b179      	cbz	r1, 800f626 <_TurnIndicatorsReport__cdr_deserialize+0x26>
 800f606:	4605      	mov	r5, r0
 800f608:	f000 f954 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f60c:	4603      	mov	r3, r0
 800f60e:	4621      	mov	r1, r4
 800f610:	4628      	mov	r0, r5
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	4798      	blx	r3
 800f618:	f104 0108 	add.w	r1, r4, #8
 800f61c:	4628      	mov	r0, r5
 800f61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f622:	f000 b98f 	b.w	800f944 <ucdr_deserialize_uint8_t>
 800f626:	4608      	mov	r0, r1
 800f628:	bd38      	pop	{r3, r4, r5, pc}
 800f62a:	bf00      	nop

0800f62c <_TurnIndicatorsReport__cdr_serialize>:
 800f62c:	b180      	cbz	r0, 800f650 <_TurnIndicatorsReport__cdr_serialize+0x24>
 800f62e:	b538      	push	{r3, r4, r5, lr}
 800f630:	4604      	mov	r4, r0
 800f632:	460d      	mov	r5, r1
 800f634:	f000 f93e 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f638:	4603      	mov	r3, r0
 800f63a:	4629      	mov	r1, r5
 800f63c:	4620      	mov	r0, r4
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	4798      	blx	r3
 800f644:	7a21      	ldrb	r1, [r4, #8]
 800f646:	4628      	mov	r0, r5
 800f648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f64c:	f000 b964 	b.w	800f918 <ucdr_serialize_uint8_t>
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop

0800f654 <_TurnIndicatorsReport__get_serialized_size>:
 800f654:	b150      	cbz	r0, 800f66c <_TurnIndicatorsReport__get_serialized_size+0x18>
 800f656:	2100      	movs	r1, #0
 800f658:	b510      	push	{r4, lr}
 800f65a:	f000 f8c7 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800f65e:	4604      	mov	r4, r0
 800f660:	2101      	movs	r1, #1
 800f662:	f001 fbc7 	bl	8010df4 <ucdr_alignment>
 800f666:	4420      	add	r0, r4
 800f668:	3001      	adds	r0, #1
 800f66a:	bd10      	pop	{r4, pc}
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop

0800f670 <_TurnIndicatorsReport__max_serialized_size>:
 800f670:	b510      	push	{r4, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	2401      	movs	r4, #1
 800f676:	2100      	movs	r1, #0
 800f678:	f10d 0007 	add.w	r0, sp, #7
 800f67c:	f88d 4007 	strb.w	r4, [sp, #7]
 800f680:	f000 f904 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 800f684:	4621      	mov	r1, r4
 800f686:	4604      	mov	r4, r0
 800f688:	f001 fbb4 	bl	8010df4 <ucdr_alignment>
 800f68c:	4420      	add	r0, r4
 800f68e:	3001      	adds	r0, #1
 800f690:	b002      	add	sp, #8
 800f692:	bd10      	pop	{r4, pc}

0800f694 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800f694:	4800      	ldr	r0, [pc, #0]	@ (800f698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 800f696:	4770      	bx	lr
 800f698:	24000b70 	.word	0x24000b70

0800f69c <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 800f69c:	b1c8      	cbz	r0, 800f6d2 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 800f69e:	b570      	push	{r4, r5, r6, lr}
 800f6a0:	460d      	mov	r5, r1
 800f6a2:	f002 fc99 	bl	8011fd8 <get_serialized_size_std_msgs__msg__Header>
 800f6a6:	2104      	movs	r1, #4
 800f6a8:	182e      	adds	r6, r5, r0
 800f6aa:	f1c5 0504 	rsb	r5, r5, #4
 800f6ae:	4630      	mov	r0, r6
 800f6b0:	f001 fba0 	bl	8010df4 <ucdr_alignment>
 800f6b4:	2104      	movs	r1, #4
 800f6b6:	1844      	adds	r4, r0, r1
 800f6b8:	4434      	add	r4, r6
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f001 fb9a 	bl	8010df4 <ucdr_alignment>
 800f6c0:	2104      	movs	r1, #4
 800f6c2:	4408      	add	r0, r1
 800f6c4:	4404      	add	r4, r0
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f001 fb94 	bl	8010df4 <ucdr_alignment>
 800f6cc:	4428      	add	r0, r5
 800f6ce:	4420      	add	r0, r4
 800f6d0:	bd70      	pop	{r4, r5, r6, pc}
 800f6d2:	4770      	bx	lr

0800f6d4 <_VelocityReport__cdr_deserialize>:
 800f6d4:	b538      	push	{r3, r4, r5, lr}
 800f6d6:	460c      	mov	r4, r1
 800f6d8:	b1c9      	cbz	r1, 800f70e <_VelocityReport__cdr_deserialize+0x3a>
 800f6da:	4605      	mov	r5, r0
 800f6dc:	f002 fd00 	bl	80120e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	4621      	mov	r1, r4
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	4798      	blx	r3
 800f6ec:	f104 0114 	add.w	r1, r4, #20
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	f001 f901 	bl	80108f8 <ucdr_deserialize_float>
 800f6f6:	f104 0118 	add.w	r1, r4, #24
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f001 f8fc 	bl	80108f8 <ucdr_deserialize_float>
 800f700:	f104 011c 	add.w	r1, r4, #28
 800f704:	4628      	mov	r0, r5
 800f706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f70a:	f001 b8f5 	b.w	80108f8 <ucdr_deserialize_float>
 800f70e:	4608      	mov	r0, r1
 800f710:	bd38      	pop	{r3, r4, r5, pc}
 800f712:	bf00      	nop

0800f714 <_VelocityReport__cdr_serialize>:
 800f714:	b1d8      	cbz	r0, 800f74e <_VelocityReport__cdr_serialize+0x3a>
 800f716:	b538      	push	{r3, r4, r5, lr}
 800f718:	4604      	mov	r4, r0
 800f71a:	460d      	mov	r5, r1
 800f71c:	f002 fce0 	bl	80120e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f720:	4603      	mov	r3, r0
 800f722:	4629      	mov	r1, r5
 800f724:	4620      	mov	r0, r4
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	4798      	blx	r3
 800f72c:	ed94 0a05 	vldr	s0, [r4, #20]
 800f730:	4628      	mov	r0, r5
 800f732:	f001 f849 	bl	80107c8 <ucdr_serialize_float>
 800f736:	ed94 0a06 	vldr	s0, [r4, #24]
 800f73a:	4628      	mov	r0, r5
 800f73c:	f001 f844 	bl	80107c8 <ucdr_serialize_float>
 800f740:	ed94 0a07 	vldr	s0, [r4, #28]
 800f744:	4628      	mov	r0, r5
 800f746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f74a:	f001 b83d 	b.w	80107c8 <ucdr_serialize_float>
 800f74e:	4770      	bx	lr

0800f750 <_VelocityReport__get_serialized_size>:
 800f750:	b1b0      	cbz	r0, 800f780 <_VelocityReport__get_serialized_size+0x30>
 800f752:	2100      	movs	r1, #0
 800f754:	b510      	push	{r4, lr}
 800f756:	f002 fc3f 	bl	8011fd8 <get_serialized_size_std_msgs__msg__Header>
 800f75a:	4604      	mov	r4, r0
 800f75c:	2104      	movs	r1, #4
 800f75e:	f001 fb49 	bl	8010df4 <ucdr_alignment>
 800f762:	2104      	movs	r1, #4
 800f764:	4420      	add	r0, r4
 800f766:	1844      	adds	r4, r0, r1
 800f768:	4620      	mov	r0, r4
 800f76a:	f001 fb43 	bl	8010df4 <ucdr_alignment>
 800f76e:	2104      	movs	r1, #4
 800f770:	4408      	add	r0, r1
 800f772:	4404      	add	r4, r0
 800f774:	4620      	mov	r0, r4
 800f776:	f001 fb3d 	bl	8010df4 <ucdr_alignment>
 800f77a:	3004      	adds	r0, #4
 800f77c:	4420      	add	r0, r4
 800f77e:	bd10      	pop	{r4, pc}
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop

0800f784 <_VelocityReport__max_serialized_size>:
 800f784:	b510      	push	{r4, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	2301      	movs	r3, #1
 800f78a:	2100      	movs	r1, #0
 800f78c:	f10d 0007 	add.w	r0, sp, #7
 800f790:	f88d 3007 	strb.w	r3, [sp, #7]
 800f794:	f002 fc9a 	bl	80120cc <max_serialized_size_std_msgs__msg__Header>
 800f798:	4604      	mov	r4, r0
 800f79a:	2104      	movs	r1, #4
 800f79c:	f001 fb2a 	bl	8010df4 <ucdr_alignment>
 800f7a0:	2104      	movs	r1, #4
 800f7a2:	4420      	add	r0, r4
 800f7a4:	1844      	adds	r4, r0, r1
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	f001 fb24 	bl	8010df4 <ucdr_alignment>
 800f7ac:	2104      	movs	r1, #4
 800f7ae:	4408      	add	r0, r1
 800f7b0:	4404      	add	r4, r0
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f001 fb1e 	bl	8010df4 <ucdr_alignment>
 800f7b8:	3004      	adds	r0, #4
 800f7ba:	4420      	add	r0, r4
 800f7bc:	b002      	add	sp, #8
 800f7be:	bd10      	pop	{r4, pc}

0800f7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800f7c0:	4800      	ldr	r0, [pc, #0]	@ (800f7c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 800f7c2:	4770      	bx	lr
 800f7c4:	24000b98 	.word	0x24000b98

0800f7c8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800f7c8:	f003 b87e 	b.w	80128c8 <builtin_interfaces__msg__Time__init>

0800f7cc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800f7cc:	f003 b880 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>

0800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f7d0:	4b04      	ldr	r3, [pc, #16]	@ (800f7e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	b10a      	cbz	r2, 800f7da <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800f7d6:	4803      	ldr	r0, [pc, #12]	@ (800f7e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f7d8:	4770      	bx	lr
 800f7da:	4a03      	ldr	r2, [pc, #12]	@ (800f7e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800f7dc:	4801      	ldr	r0, [pc, #4]	@ (800f7e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f7de:	6812      	ldr	r2, [r2, #0]
 800f7e0:	601a      	str	r2, [r3, #0]
 800f7e2:	4770      	bx	lr
 800f7e4:	24000c38 	.word	0x24000c38
 800f7e8:	24000c84 	.word	0x24000c84

0800f7ec <get_serialized_size_builtin_interfaces__msg__Time>:
 800f7ec:	b180      	cbz	r0, 800f810 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800f7ee:	b538      	push	{r3, r4, r5, lr}
 800f7f0:	460d      	mov	r5, r1
 800f7f2:	2104      	movs	r1, #4
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	f001 fafd 	bl	8010df4 <ucdr_alignment>
 800f7fa:	1d2b      	adds	r3, r5, #4
 800f7fc:	f1c5 0504 	rsb	r5, r5, #4
 800f800:	2104      	movs	r1, #4
 800f802:	181c      	adds	r4, r3, r0
 800f804:	4620      	mov	r0, r4
 800f806:	f001 faf5 	bl	8010df4 <ucdr_alignment>
 800f80a:	4428      	add	r0, r5
 800f80c:	4420      	add	r0, r4
 800f80e:	bd38      	pop	{r3, r4, r5, pc}
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop

0800f814 <_Time__cdr_deserialize>:
 800f814:	b538      	push	{r3, r4, r5, lr}
 800f816:	460c      	mov	r4, r1
 800f818:	b141      	cbz	r1, 800f82c <_Time__cdr_deserialize+0x18>
 800f81a:	4605      	mov	r5, r0
 800f81c:	f000 ff44 	bl	80106a8 <ucdr_deserialize_int32_t>
 800f820:	1d21      	adds	r1, r4, #4
 800f822:	4628      	mov	r0, r5
 800f824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f828:	f000 bbbc 	b.w	800ffa4 <ucdr_deserialize_uint32_t>
 800f82c:	4608      	mov	r0, r1
 800f82e:	bd38      	pop	{r3, r4, r5, pc}

0800f830 <_Time__cdr_serialize>:
 800f830:	b160      	cbz	r0, 800f84c <_Time__cdr_serialize+0x1c>
 800f832:	b538      	push	{r3, r4, r5, lr}
 800f834:	460d      	mov	r5, r1
 800f836:	4604      	mov	r4, r0
 800f838:	6801      	ldr	r1, [r0, #0]
 800f83a:	4628      	mov	r0, r5
 800f83c:	f000 fe9c 	bl	8010578 <ucdr_serialize_int32_t>
 800f840:	6861      	ldr	r1, [r4, #4]
 800f842:	4628      	mov	r0, r5
 800f844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f848:	f000 ba7c 	b.w	800fd44 <ucdr_serialize_uint32_t>
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop

0800f850 <_Time__get_serialized_size>:
 800f850:	b160      	cbz	r0, 800f86c <_Time__get_serialized_size+0x1c>
 800f852:	2104      	movs	r1, #4
 800f854:	2000      	movs	r0, #0
 800f856:	b510      	push	{r4, lr}
 800f858:	f001 facc 	bl	8010df4 <ucdr_alignment>
 800f85c:	2104      	movs	r1, #4
 800f85e:	1844      	adds	r4, r0, r1
 800f860:	4620      	mov	r0, r4
 800f862:	f001 fac7 	bl	8010df4 <ucdr_alignment>
 800f866:	3004      	adds	r0, #4
 800f868:	4420      	add	r0, r4
 800f86a:	bd10      	pop	{r4, pc}
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop

0800f870 <_Time__max_serialized_size>:
 800f870:	b510      	push	{r4, lr}
 800f872:	2104      	movs	r1, #4
 800f874:	2000      	movs	r0, #0
 800f876:	f001 fabd 	bl	8010df4 <ucdr_alignment>
 800f87a:	2104      	movs	r1, #4
 800f87c:	1844      	adds	r4, r0, r1
 800f87e:	4620      	mov	r0, r4
 800f880:	f001 fab8 	bl	8010df4 <ucdr_alignment>
 800f884:	3004      	adds	r0, #4
 800f886:	4420      	add	r0, r4
 800f888:	bd10      	pop	{r4, pc}
 800f88a:	bf00      	nop

0800f88c <max_serialized_size_builtin_interfaces__msg__Time>:
 800f88c:	b538      	push	{r3, r4, r5, lr}
 800f88e:	460c      	mov	r4, r1
 800f890:	2301      	movs	r3, #1
 800f892:	2104      	movs	r1, #4
 800f894:	1d25      	adds	r5, r4, #4
 800f896:	7003      	strb	r3, [r0, #0]
 800f898:	4620      	mov	r0, r4
 800f89a:	f1c4 0404 	rsb	r4, r4, #4
 800f89e:	f001 faa9 	bl	8010df4 <ucdr_alignment>
 800f8a2:	4405      	add	r5, r0
 800f8a4:	2104      	movs	r1, #4
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f001 faa4 	bl	8010df4 <ucdr_alignment>
 800f8ac:	4420      	add	r0, r4
 800f8ae:	4428      	add	r0, r5
 800f8b0:	bd38      	pop	{r3, r4, r5, pc}
 800f8b2:	bf00      	nop

0800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f8b4:	4800      	ldr	r0, [pc, #0]	@ (800f8b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800f8b6:	4770      	bx	lr
 800f8b8:	24000c44 	.word	0x24000c44

0800f8bc <ucdr_serialize_bool>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	460d      	mov	r5, r1
 800f8c0:	2101      	movs	r1, #1
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	f001 fa4a 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800f8c8:	b148      	cbz	r0, 800f8de <ucdr_serialize_bool+0x22>
 800f8ca:	68a3      	ldr	r3, [r4, #8]
 800f8cc:	2101      	movs	r1, #1
 800f8ce:	701d      	strb	r5, [r3, #0]
 800f8d0:	68a2      	ldr	r2, [r4, #8]
 800f8d2:	6923      	ldr	r3, [r4, #16]
 800f8d4:	440a      	add	r2, r1
 800f8d6:	7561      	strb	r1, [r4, #21]
 800f8d8:	440b      	add	r3, r1
 800f8da:	60a2      	str	r2, [r4, #8]
 800f8dc:	6123      	str	r3, [r4, #16]
 800f8de:	7da0      	ldrb	r0, [r4, #22]
 800f8e0:	f080 0001 	eor.w	r0, r0, #1
 800f8e4:	bd38      	pop	{r3, r4, r5, pc}
 800f8e6:	bf00      	nop

0800f8e8 <ucdr_deserialize_bool>:
 800f8e8:	b538      	push	{r3, r4, r5, lr}
 800f8ea:	460d      	mov	r5, r1
 800f8ec:	2101      	movs	r1, #1
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	f001 fa34 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800f8f4:	b160      	cbz	r0, 800f910 <ucdr_deserialize_bool+0x28>
 800f8f6:	68a2      	ldr	r2, [r4, #8]
 800f8f8:	2101      	movs	r1, #1
 800f8fa:	6923      	ldr	r3, [r4, #16]
 800f8fc:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f900:	440b      	add	r3, r1
 800f902:	3800      	subs	r0, #0
 800f904:	bf18      	it	ne
 800f906:	2001      	movne	r0, #1
 800f908:	7028      	strb	r0, [r5, #0]
 800f90a:	60a2      	str	r2, [r4, #8]
 800f90c:	6123      	str	r3, [r4, #16]
 800f90e:	7561      	strb	r1, [r4, #21]
 800f910:	7da0      	ldrb	r0, [r4, #22]
 800f912:	f080 0001 	eor.w	r0, r0, #1
 800f916:	bd38      	pop	{r3, r4, r5, pc}

0800f918 <ucdr_serialize_uint8_t>:
 800f918:	b538      	push	{r3, r4, r5, lr}
 800f91a:	460d      	mov	r5, r1
 800f91c:	2101      	movs	r1, #1
 800f91e:	4604      	mov	r4, r0
 800f920:	f001 fa1c 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800f924:	b148      	cbz	r0, 800f93a <ucdr_serialize_uint8_t+0x22>
 800f926:	68a3      	ldr	r3, [r4, #8]
 800f928:	2101      	movs	r1, #1
 800f92a:	701d      	strb	r5, [r3, #0]
 800f92c:	68a2      	ldr	r2, [r4, #8]
 800f92e:	6923      	ldr	r3, [r4, #16]
 800f930:	440a      	add	r2, r1
 800f932:	7561      	strb	r1, [r4, #21]
 800f934:	440b      	add	r3, r1
 800f936:	60a2      	str	r2, [r4, #8]
 800f938:	6123      	str	r3, [r4, #16]
 800f93a:	7da0      	ldrb	r0, [r4, #22]
 800f93c:	f080 0001 	eor.w	r0, r0, #1
 800f940:	bd38      	pop	{r3, r4, r5, pc}
 800f942:	bf00      	nop

0800f944 <ucdr_deserialize_uint8_t>:
 800f944:	b538      	push	{r3, r4, r5, lr}
 800f946:	460d      	mov	r5, r1
 800f948:	2101      	movs	r1, #1
 800f94a:	4604      	mov	r4, r0
 800f94c:	f001 fa06 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800f950:	b150      	cbz	r0, 800f968 <ucdr_deserialize_uint8_t+0x24>
 800f952:	68a3      	ldr	r3, [r4, #8]
 800f954:	2101      	movs	r1, #1
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	702b      	strb	r3, [r5, #0]
 800f95a:	68a2      	ldr	r2, [r4, #8]
 800f95c:	6923      	ldr	r3, [r4, #16]
 800f95e:	440a      	add	r2, r1
 800f960:	7561      	strb	r1, [r4, #21]
 800f962:	440b      	add	r3, r1
 800f964:	60a2      	str	r2, [r4, #8]
 800f966:	6123      	str	r3, [r4, #16]
 800f968:	7da0      	ldrb	r0, [r4, #22]
 800f96a:	f080 0001 	eor.w	r0, r0, #1
 800f96e:	bd38      	pop	{r3, r4, r5, pc}

0800f970 <ucdr_serialize_uint16_t>:
 800f970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f974:	460b      	mov	r3, r1
 800f976:	b082      	sub	sp, #8
 800f978:	4604      	mov	r4, r0
 800f97a:	2102      	movs	r1, #2
 800f97c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f980:	f001 fa40 	bl	8010e04 <ucdr_buffer_alignment>
 800f984:	4601      	mov	r1, r0
 800f986:	4620      	mov	r0, r4
 800f988:	7d67      	ldrb	r7, [r4, #21]
 800f98a:	f001 fa83 	bl	8010e94 <ucdr_advance_buffer>
 800f98e:	2102      	movs	r1, #2
 800f990:	4620      	mov	r0, r4
 800f992:	f001 f9d7 	bl	8010d44 <ucdr_check_buffer_available_for>
 800f996:	bb78      	cbnz	r0, 800f9f8 <ucdr_serialize_uint16_t+0x88>
 800f998:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f99c:	42ab      	cmp	r3, r5
 800f99e:	d926      	bls.n	800f9ee <ucdr_serialize_uint16_t+0x7e>
 800f9a0:	1b5e      	subs	r6, r3, r5
 800f9a2:	60a3      	str	r3, [r4, #8]
 800f9a4:	6923      	ldr	r3, [r4, #16]
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f1c6 0802 	rsb	r8, r6, #2
 800f9ac:	4433      	add	r3, r6
 800f9ae:	4641      	mov	r1, r8
 800f9b0:	6123      	str	r3, [r4, #16]
 800f9b2:	f001 f9d3 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d03b      	beq.n	800fa32 <ucdr_serialize_uint16_t+0xc2>
 800f9ba:	7d23      	ldrb	r3, [r4, #20]
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d04a      	beq.n	800fa56 <ucdr_serialize_uint16_t+0xe6>
 800f9c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f9c4:	702b      	strb	r3, [r5, #0]
 800f9c6:	2e00      	cmp	r6, #0
 800f9c8:	d040      	beq.n	800fa4c <ucdr_serialize_uint16_t+0xdc>
 800f9ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f9ce:	706b      	strb	r3, [r5, #1]
 800f9d0:	6923      	ldr	r3, [r4, #16]
 800f9d2:	2102      	movs	r1, #2
 800f9d4:	68a2      	ldr	r2, [r4, #8]
 800f9d6:	3302      	adds	r3, #2
 800f9d8:	7da0      	ldrb	r0, [r4, #22]
 800f9da:	4442      	add	r2, r8
 800f9dc:	7561      	strb	r1, [r4, #21]
 800f9de:	1b9e      	subs	r6, r3, r6
 800f9e0:	f080 0001 	eor.w	r0, r0, #1
 800f9e4:	60a2      	str	r2, [r4, #8]
 800f9e6:	6126      	str	r6, [r4, #16]
 800f9e8:	b002      	add	sp, #8
 800f9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ee:	2102      	movs	r1, #2
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f001 f9b3 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800f9f6:	b190      	cbz	r0, 800fa1e <ucdr_serialize_uint16_t+0xae>
 800f9f8:	7d23      	ldrb	r3, [r4, #20]
 800f9fa:	2b01      	cmp	r3, #1
 800f9fc:	68a3      	ldr	r3, [r4, #8]
 800f9fe:	d014      	beq.n	800fa2a <ucdr_serialize_uint16_t+0xba>
 800fa00:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fa04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa08:	7019      	strb	r1, [r3, #0]
 800fa0a:	68a3      	ldr	r3, [r4, #8]
 800fa0c:	705a      	strb	r2, [r3, #1]
 800fa0e:	2102      	movs	r1, #2
 800fa10:	68a2      	ldr	r2, [r4, #8]
 800fa12:	6923      	ldr	r3, [r4, #16]
 800fa14:	440a      	add	r2, r1
 800fa16:	7561      	strb	r1, [r4, #21]
 800fa18:	440b      	add	r3, r1
 800fa1a:	60a2      	str	r2, [r4, #8]
 800fa1c:	6123      	str	r3, [r4, #16]
 800fa1e:	7da0      	ldrb	r0, [r4, #22]
 800fa20:	f080 0001 	eor.w	r0, r0, #1
 800fa24:	b002      	add	sp, #8
 800fa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa2a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fa2e:	801a      	strh	r2, [r3, #0]
 800fa30:	e7ed      	b.n	800fa0e <ucdr_serialize_uint16_t+0x9e>
 800fa32:	68a2      	ldr	r2, [r4, #8]
 800fa34:	6923      	ldr	r3, [r4, #16]
 800fa36:	7da0      	ldrb	r0, [r4, #22]
 800fa38:	1b92      	subs	r2, r2, r6
 800fa3a:	1b9b      	subs	r3, r3, r6
 800fa3c:	7567      	strb	r7, [r4, #21]
 800fa3e:	f080 0001 	eor.w	r0, r0, #1
 800fa42:	60a2      	str	r2, [r4, #8]
 800fa44:	6123      	str	r3, [r4, #16]
 800fa46:	b002      	add	sp, #8
 800fa48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa4c:	68a3      	ldr	r3, [r4, #8]
 800fa4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa52:	701a      	strb	r2, [r3, #0]
 800fa54:	e7bc      	b.n	800f9d0 <ucdr_serialize_uint16_t+0x60>
 800fa56:	4628      	mov	r0, r5
 800fa58:	f10d 0506 	add.w	r5, sp, #6
 800fa5c:	4632      	mov	r2, r6
 800fa5e:	4629      	mov	r1, r5
 800fa60:	f00e f8ff 	bl	801dc62 <memcpy>
 800fa64:	4642      	mov	r2, r8
 800fa66:	19a9      	adds	r1, r5, r6
 800fa68:	68a0      	ldr	r0, [r4, #8]
 800fa6a:	f00e f8fa 	bl	801dc62 <memcpy>
 800fa6e:	e7af      	b.n	800f9d0 <ucdr_serialize_uint16_t+0x60>

0800fa70 <ucdr_serialize_endian_uint16_t>:
 800fa70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa74:	4604      	mov	r4, r0
 800fa76:	b083      	sub	sp, #12
 800fa78:	460d      	mov	r5, r1
 800fa7a:	2102      	movs	r1, #2
 800fa7c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fa80:	f001 f9c0 	bl	8010e04 <ucdr_buffer_alignment>
 800fa84:	4601      	mov	r1, r0
 800fa86:	4620      	mov	r0, r4
 800fa88:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fa8c:	f001 fa02 	bl	8010e94 <ucdr_advance_buffer>
 800fa90:	2102      	movs	r1, #2
 800fa92:	4620      	mov	r0, r4
 800fa94:	f001 f956 	bl	8010d44 <ucdr_check_buffer_available_for>
 800fa98:	bb70      	cbnz	r0, 800faf8 <ucdr_serialize_endian_uint16_t+0x88>
 800fa9a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fa9e:	42be      	cmp	r6, r7
 800faa0:	d925      	bls.n	800faee <ucdr_serialize_endian_uint16_t+0x7e>
 800faa2:	6923      	ldr	r3, [r4, #16]
 800faa4:	4620      	mov	r0, r4
 800faa6:	60a6      	str	r6, [r4, #8]
 800faa8:	1bf6      	subs	r6, r6, r7
 800faaa:	4433      	add	r3, r6
 800faac:	f1c6 0902 	rsb	r9, r6, #2
 800fab0:	6123      	str	r3, [r4, #16]
 800fab2:	4649      	mov	r1, r9
 800fab4:	f001 f952 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800fab8:	2800      	cmp	r0, #0
 800faba:	d039      	beq.n	800fb30 <ucdr_serialize_endian_uint16_t+0xc0>
 800fabc:	2d01      	cmp	r5, #1
 800fabe:	d04a      	beq.n	800fb56 <ucdr_serialize_endian_uint16_t+0xe6>
 800fac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fac4:	703b      	strb	r3, [r7, #0]
 800fac6:	2e00      	cmp	r6, #0
 800fac8:	d040      	beq.n	800fb4c <ucdr_serialize_endian_uint16_t+0xdc>
 800faca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800face:	707b      	strb	r3, [r7, #1]
 800fad0:	6923      	ldr	r3, [r4, #16]
 800fad2:	2102      	movs	r1, #2
 800fad4:	68a2      	ldr	r2, [r4, #8]
 800fad6:	7da0      	ldrb	r0, [r4, #22]
 800fad8:	3302      	adds	r3, #2
 800fada:	444a      	add	r2, r9
 800fadc:	7561      	strb	r1, [r4, #21]
 800fade:	1b9b      	subs	r3, r3, r6
 800fae0:	f080 0001 	eor.w	r0, r0, #1
 800fae4:	60a2      	str	r2, [r4, #8]
 800fae6:	6123      	str	r3, [r4, #16]
 800fae8:	b003      	add	sp, #12
 800faea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faee:	2102      	movs	r1, #2
 800faf0:	4620      	mov	r0, r4
 800faf2:	f001 f933 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800faf6:	b188      	cbz	r0, 800fb1c <ucdr_serialize_endian_uint16_t+0xac>
 800faf8:	2d01      	cmp	r5, #1
 800fafa:	68a3      	ldr	r3, [r4, #8]
 800fafc:	d014      	beq.n	800fb28 <ucdr_serialize_endian_uint16_t+0xb8>
 800fafe:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fb02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb06:	7019      	strb	r1, [r3, #0]
 800fb08:	68a3      	ldr	r3, [r4, #8]
 800fb0a:	705a      	strb	r2, [r3, #1]
 800fb0c:	2102      	movs	r1, #2
 800fb0e:	68a2      	ldr	r2, [r4, #8]
 800fb10:	6923      	ldr	r3, [r4, #16]
 800fb12:	440a      	add	r2, r1
 800fb14:	7561      	strb	r1, [r4, #21]
 800fb16:	440b      	add	r3, r1
 800fb18:	60a2      	str	r2, [r4, #8]
 800fb1a:	6123      	str	r3, [r4, #16]
 800fb1c:	7da0      	ldrb	r0, [r4, #22]
 800fb1e:	f080 0001 	eor.w	r0, r0, #1
 800fb22:	b003      	add	sp, #12
 800fb24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fb2c:	801a      	strh	r2, [r3, #0]
 800fb2e:	e7ed      	b.n	800fb0c <ucdr_serialize_endian_uint16_t+0x9c>
 800fb30:	68a2      	ldr	r2, [r4, #8]
 800fb32:	6923      	ldr	r3, [r4, #16]
 800fb34:	7da0      	ldrb	r0, [r4, #22]
 800fb36:	1b92      	subs	r2, r2, r6
 800fb38:	1b9b      	subs	r3, r3, r6
 800fb3a:	f884 8015 	strb.w	r8, [r4, #21]
 800fb3e:	f080 0001 	eor.w	r0, r0, #1
 800fb42:	60a2      	str	r2, [r4, #8]
 800fb44:	6123      	str	r3, [r4, #16]
 800fb46:	b003      	add	sp, #12
 800fb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb4c:	68a3      	ldr	r3, [r4, #8]
 800fb4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb52:	701a      	strb	r2, [r3, #0]
 800fb54:	e7bc      	b.n	800fad0 <ucdr_serialize_endian_uint16_t+0x60>
 800fb56:	f10d 0506 	add.w	r5, sp, #6
 800fb5a:	4632      	mov	r2, r6
 800fb5c:	4638      	mov	r0, r7
 800fb5e:	4629      	mov	r1, r5
 800fb60:	f00e f87f 	bl	801dc62 <memcpy>
 800fb64:	464a      	mov	r2, r9
 800fb66:	19a9      	adds	r1, r5, r6
 800fb68:	68a0      	ldr	r0, [r4, #8]
 800fb6a:	f00e f87a 	bl	801dc62 <memcpy>
 800fb6e:	e7af      	b.n	800fad0 <ucdr_serialize_endian_uint16_t+0x60>

0800fb70 <ucdr_deserialize_uint16_t>:
 800fb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb74:	4604      	mov	r4, r0
 800fb76:	460d      	mov	r5, r1
 800fb78:	2102      	movs	r1, #2
 800fb7a:	f001 f943 	bl	8010e04 <ucdr_buffer_alignment>
 800fb7e:	4601      	mov	r1, r0
 800fb80:	4620      	mov	r0, r4
 800fb82:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fb86:	f001 f985 	bl	8010e94 <ucdr_advance_buffer>
 800fb8a:	2102      	movs	r1, #2
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f001 f8d9 	bl	8010d44 <ucdr_check_buffer_available_for>
 800fb92:	bb60      	cbnz	r0, 800fbee <ucdr_deserialize_uint16_t+0x7e>
 800fb94:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fb98:	42be      	cmp	r6, r7
 800fb9a:	d923      	bls.n	800fbe4 <ucdr_deserialize_uint16_t+0x74>
 800fb9c:	6923      	ldr	r3, [r4, #16]
 800fb9e:	4620      	mov	r0, r4
 800fba0:	60a6      	str	r6, [r4, #8]
 800fba2:	1bf6      	subs	r6, r6, r7
 800fba4:	4433      	add	r3, r6
 800fba6:	f1c6 0902 	rsb	r9, r6, #2
 800fbaa:	6123      	str	r3, [r4, #16]
 800fbac:	4649      	mov	r1, r9
 800fbae:	f001 f8d5 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	d034      	beq.n	800fc20 <ucdr_deserialize_uint16_t+0xb0>
 800fbb6:	7d23      	ldrb	r3, [r4, #20]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d042      	beq.n	800fc42 <ucdr_deserialize_uint16_t+0xd2>
 800fbbc:	787b      	ldrb	r3, [r7, #1]
 800fbbe:	702b      	strb	r3, [r5, #0]
 800fbc0:	2e00      	cmp	r6, #0
 800fbc2:	d03a      	beq.n	800fc3a <ucdr_deserialize_uint16_t+0xca>
 800fbc4:	783b      	ldrb	r3, [r7, #0]
 800fbc6:	706b      	strb	r3, [r5, #1]
 800fbc8:	6923      	ldr	r3, [r4, #16]
 800fbca:	2102      	movs	r1, #2
 800fbcc:	68a2      	ldr	r2, [r4, #8]
 800fbce:	3302      	adds	r3, #2
 800fbd0:	7da0      	ldrb	r0, [r4, #22]
 800fbd2:	444a      	add	r2, r9
 800fbd4:	7561      	strb	r1, [r4, #21]
 800fbd6:	1b9b      	subs	r3, r3, r6
 800fbd8:	f080 0001 	eor.w	r0, r0, #1
 800fbdc:	60a2      	str	r2, [r4, #8]
 800fbde:	6123      	str	r3, [r4, #16]
 800fbe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbe4:	2102      	movs	r1, #2
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f001 f8b8 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800fbec:	b180      	cbz	r0, 800fc10 <ucdr_deserialize_uint16_t+0xa0>
 800fbee:	7d23      	ldrb	r3, [r4, #20]
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	68a3      	ldr	r3, [r4, #8]
 800fbf4:	d011      	beq.n	800fc1a <ucdr_deserialize_uint16_t+0xaa>
 800fbf6:	785b      	ldrb	r3, [r3, #1]
 800fbf8:	702b      	strb	r3, [r5, #0]
 800fbfa:	68a3      	ldr	r3, [r4, #8]
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	706b      	strb	r3, [r5, #1]
 800fc00:	2102      	movs	r1, #2
 800fc02:	68a2      	ldr	r2, [r4, #8]
 800fc04:	6923      	ldr	r3, [r4, #16]
 800fc06:	440a      	add	r2, r1
 800fc08:	7561      	strb	r1, [r4, #21]
 800fc0a:	440b      	add	r3, r1
 800fc0c:	60a2      	str	r2, [r4, #8]
 800fc0e:	6123      	str	r3, [r4, #16]
 800fc10:	7da0      	ldrb	r0, [r4, #22]
 800fc12:	f080 0001 	eor.w	r0, r0, #1
 800fc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	802b      	strh	r3, [r5, #0]
 800fc1e:	e7ef      	b.n	800fc00 <ucdr_deserialize_uint16_t+0x90>
 800fc20:	68a2      	ldr	r2, [r4, #8]
 800fc22:	6923      	ldr	r3, [r4, #16]
 800fc24:	1b92      	subs	r2, r2, r6
 800fc26:	7da0      	ldrb	r0, [r4, #22]
 800fc28:	1b9b      	subs	r3, r3, r6
 800fc2a:	f884 8015 	strb.w	r8, [r4, #21]
 800fc2e:	f080 0001 	eor.w	r0, r0, #1
 800fc32:	60a2      	str	r2, [r4, #8]
 800fc34:	6123      	str	r3, [r4, #16]
 800fc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc3a:	68a3      	ldr	r3, [r4, #8]
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	706b      	strb	r3, [r5, #1]
 800fc40:	e7c2      	b.n	800fbc8 <ucdr_deserialize_uint16_t+0x58>
 800fc42:	4639      	mov	r1, r7
 800fc44:	4632      	mov	r2, r6
 800fc46:	4628      	mov	r0, r5
 800fc48:	f00e f80b 	bl	801dc62 <memcpy>
 800fc4c:	464a      	mov	r2, r9
 800fc4e:	19a8      	adds	r0, r5, r6
 800fc50:	68a1      	ldr	r1, [r4, #8]
 800fc52:	f00e f806 	bl	801dc62 <memcpy>
 800fc56:	e7b7      	b.n	800fbc8 <ucdr_deserialize_uint16_t+0x58>

0800fc58 <ucdr_deserialize_endian_uint16_t>:
 800fc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc5c:	4604      	mov	r4, r0
 800fc5e:	460e      	mov	r6, r1
 800fc60:	2102      	movs	r1, #2
 800fc62:	4615      	mov	r5, r2
 800fc64:	f001 f8ce 	bl	8010e04 <ucdr_buffer_alignment>
 800fc68:	4601      	mov	r1, r0
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc70:	f001 f910 	bl	8010e94 <ucdr_advance_buffer>
 800fc74:	2102      	movs	r1, #2
 800fc76:	4620      	mov	r0, r4
 800fc78:	f001 f864 	bl	8010d44 <ucdr_check_buffer_available_for>
 800fc7c:	bb70      	cbnz	r0, 800fcdc <ucdr_deserialize_endian_uint16_t+0x84>
 800fc7e:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800fc82:	454f      	cmp	r7, r9
 800fc84:	d925      	bls.n	800fcd2 <ucdr_deserialize_endian_uint16_t+0x7a>
 800fc86:	6923      	ldr	r3, [r4, #16]
 800fc88:	4620      	mov	r0, r4
 800fc8a:	60a7      	str	r7, [r4, #8]
 800fc8c:	eba7 0709 	sub.w	r7, r7, r9
 800fc90:	443b      	add	r3, r7
 800fc92:	f1c7 0a02 	rsb	sl, r7, #2
 800fc96:	6123      	str	r3, [r4, #16]
 800fc98:	4651      	mov	r1, sl
 800fc9a:	f001 f85f 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d034      	beq.n	800fd0c <ucdr_deserialize_endian_uint16_t+0xb4>
 800fca2:	2e01      	cmp	r6, #1
 800fca4:	d043      	beq.n	800fd2e <ucdr_deserialize_endian_uint16_t+0xd6>
 800fca6:	f899 3001 	ldrb.w	r3, [r9, #1]
 800fcaa:	702b      	strb	r3, [r5, #0]
 800fcac:	2f00      	cmp	r7, #0
 800fcae:	d03a      	beq.n	800fd26 <ucdr_deserialize_endian_uint16_t+0xce>
 800fcb0:	f899 3000 	ldrb.w	r3, [r9]
 800fcb4:	706b      	strb	r3, [r5, #1]
 800fcb6:	6923      	ldr	r3, [r4, #16]
 800fcb8:	2102      	movs	r1, #2
 800fcba:	68a2      	ldr	r2, [r4, #8]
 800fcbc:	3302      	adds	r3, #2
 800fcbe:	7da0      	ldrb	r0, [r4, #22]
 800fcc0:	4452      	add	r2, sl
 800fcc2:	7561      	strb	r1, [r4, #21]
 800fcc4:	1bdb      	subs	r3, r3, r7
 800fcc6:	f080 0001 	eor.w	r0, r0, #1
 800fcca:	60a2      	str	r2, [r4, #8]
 800fccc:	6123      	str	r3, [r4, #16]
 800fcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcd2:	2102      	movs	r1, #2
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	f001 f841 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800fcda:	b178      	cbz	r0, 800fcfc <ucdr_deserialize_endian_uint16_t+0xa4>
 800fcdc:	2e01      	cmp	r6, #1
 800fcde:	68a3      	ldr	r3, [r4, #8]
 800fce0:	d011      	beq.n	800fd06 <ucdr_deserialize_endian_uint16_t+0xae>
 800fce2:	785b      	ldrb	r3, [r3, #1]
 800fce4:	702b      	strb	r3, [r5, #0]
 800fce6:	68a3      	ldr	r3, [r4, #8]
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	706b      	strb	r3, [r5, #1]
 800fcec:	2102      	movs	r1, #2
 800fcee:	68a2      	ldr	r2, [r4, #8]
 800fcf0:	6923      	ldr	r3, [r4, #16]
 800fcf2:	440a      	add	r2, r1
 800fcf4:	7561      	strb	r1, [r4, #21]
 800fcf6:	440b      	add	r3, r1
 800fcf8:	60a2      	str	r2, [r4, #8]
 800fcfa:	6123      	str	r3, [r4, #16]
 800fcfc:	7da0      	ldrb	r0, [r4, #22]
 800fcfe:	f080 0001 	eor.w	r0, r0, #1
 800fd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd06:	881b      	ldrh	r3, [r3, #0]
 800fd08:	802b      	strh	r3, [r5, #0]
 800fd0a:	e7ef      	b.n	800fcec <ucdr_deserialize_endian_uint16_t+0x94>
 800fd0c:	68a2      	ldr	r2, [r4, #8]
 800fd0e:	6923      	ldr	r3, [r4, #16]
 800fd10:	1bd2      	subs	r2, r2, r7
 800fd12:	7da0      	ldrb	r0, [r4, #22]
 800fd14:	1bdb      	subs	r3, r3, r7
 800fd16:	f884 8015 	strb.w	r8, [r4, #21]
 800fd1a:	f080 0001 	eor.w	r0, r0, #1
 800fd1e:	60a2      	str	r2, [r4, #8]
 800fd20:	6123      	str	r3, [r4, #16]
 800fd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd26:	68a3      	ldr	r3, [r4, #8]
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	706b      	strb	r3, [r5, #1]
 800fd2c:	e7c3      	b.n	800fcb6 <ucdr_deserialize_endian_uint16_t+0x5e>
 800fd2e:	4649      	mov	r1, r9
 800fd30:	463a      	mov	r2, r7
 800fd32:	4628      	mov	r0, r5
 800fd34:	f00d ff95 	bl	801dc62 <memcpy>
 800fd38:	4652      	mov	r2, sl
 800fd3a:	19e8      	adds	r0, r5, r7
 800fd3c:	68a1      	ldr	r1, [r4, #8]
 800fd3e:	f00d ff90 	bl	801dc62 <memcpy>
 800fd42:	e7b8      	b.n	800fcb6 <ucdr_deserialize_endian_uint16_t+0x5e>

0800fd44 <ucdr_serialize_uint32_t>:
 800fd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd48:	b082      	sub	sp, #8
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	9101      	str	r1, [sp, #4]
 800fd4e:	2104      	movs	r1, #4
 800fd50:	f001 f858 	bl	8010e04 <ucdr_buffer_alignment>
 800fd54:	4601      	mov	r1, r0
 800fd56:	4620      	mov	r0, r4
 800fd58:	7d67      	ldrb	r7, [r4, #21]
 800fd5a:	f001 f89b 	bl	8010e94 <ucdr_advance_buffer>
 800fd5e:	2104      	movs	r1, #4
 800fd60:	4620      	mov	r0, r4
 800fd62:	f000 ffef 	bl	8010d44 <ucdr_check_buffer_available_for>
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d139      	bne.n	800fdde <ucdr_serialize_uint32_t+0x9a>
 800fd6a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fd6e:	42ab      	cmp	r3, r5
 800fd70:	d930      	bls.n	800fdd4 <ucdr_serialize_uint32_t+0x90>
 800fd72:	1b5e      	subs	r6, r3, r5
 800fd74:	60a3      	str	r3, [r4, #8]
 800fd76:	6923      	ldr	r3, [r4, #16]
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f1c6 0804 	rsb	r8, r6, #4
 800fd7e:	4433      	add	r3, r6
 800fd80:	4641      	mov	r1, r8
 800fd82:	6123      	str	r3, [r4, #16]
 800fd84:	f000 ffea 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d04c      	beq.n	800fe26 <ucdr_serialize_uint32_t+0xe2>
 800fd8c:	7d23      	ldrb	r3, [r4, #20]
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d063      	beq.n	800fe5a <ucdr_serialize_uint32_t+0x116>
 800fd92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fd96:	702b      	strb	r3, [r5, #0]
 800fd98:	2e00      	cmp	r6, #0
 800fd9a:	d051      	beq.n	800fe40 <ucdr_serialize_uint32_t+0xfc>
 800fd9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fda0:	2e01      	cmp	r6, #1
 800fda2:	706b      	strb	r3, [r5, #1]
 800fda4:	d050      	beq.n	800fe48 <ucdr_serialize_uint32_t+0x104>
 800fda6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fdaa:	2e02      	cmp	r6, #2
 800fdac:	70ab      	strb	r3, [r5, #2]
 800fdae:	d04f      	beq.n	800fe50 <ucdr_serialize_uint32_t+0x10c>
 800fdb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fdb4:	70eb      	strb	r3, [r5, #3]
 800fdb6:	6923      	ldr	r3, [r4, #16]
 800fdb8:	2104      	movs	r1, #4
 800fdba:	68a2      	ldr	r2, [r4, #8]
 800fdbc:	3304      	adds	r3, #4
 800fdbe:	7da0      	ldrb	r0, [r4, #22]
 800fdc0:	4442      	add	r2, r8
 800fdc2:	7561      	strb	r1, [r4, #21]
 800fdc4:	1b9e      	subs	r6, r3, r6
 800fdc6:	f080 0001 	eor.w	r0, r0, #1
 800fdca:	60a2      	str	r2, [r4, #8]
 800fdcc:	6126      	str	r6, [r4, #16]
 800fdce:	b002      	add	sp, #8
 800fdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd4:	2104      	movs	r1, #4
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f000 ffc0 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800fddc:	b1d0      	cbz	r0, 800fe14 <ucdr_serialize_uint32_t+0xd0>
 800fdde:	7d23      	ldrb	r3, [r4, #20]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	68a3      	ldr	r3, [r4, #8]
 800fde4:	d01c      	beq.n	800fe20 <ucdr_serialize_uint32_t+0xdc>
 800fde6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fdea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fdee:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fdf2:	7018      	strb	r0, [r3, #0]
 800fdf4:	68a3      	ldr	r3, [r4, #8]
 800fdf6:	705a      	strb	r2, [r3, #1]
 800fdf8:	68a3      	ldr	r3, [r4, #8]
 800fdfa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fdfe:	7099      	strb	r1, [r3, #2]
 800fe00:	68a3      	ldr	r3, [r4, #8]
 800fe02:	70da      	strb	r2, [r3, #3]
 800fe04:	2104      	movs	r1, #4
 800fe06:	68a2      	ldr	r2, [r4, #8]
 800fe08:	6923      	ldr	r3, [r4, #16]
 800fe0a:	440a      	add	r2, r1
 800fe0c:	7561      	strb	r1, [r4, #21]
 800fe0e:	440b      	add	r3, r1
 800fe10:	60a2      	str	r2, [r4, #8]
 800fe12:	6123      	str	r3, [r4, #16]
 800fe14:	7da0      	ldrb	r0, [r4, #22]
 800fe16:	f080 0001 	eor.w	r0, r0, #1
 800fe1a:	b002      	add	sp, #8
 800fe1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe20:	9a01      	ldr	r2, [sp, #4]
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	e7ee      	b.n	800fe04 <ucdr_serialize_uint32_t+0xc0>
 800fe26:	68a2      	ldr	r2, [r4, #8]
 800fe28:	6923      	ldr	r3, [r4, #16]
 800fe2a:	7da0      	ldrb	r0, [r4, #22]
 800fe2c:	1b92      	subs	r2, r2, r6
 800fe2e:	1b9b      	subs	r3, r3, r6
 800fe30:	7567      	strb	r7, [r4, #21]
 800fe32:	f080 0001 	eor.w	r0, r0, #1
 800fe36:	60a2      	str	r2, [r4, #8]
 800fe38:	6123      	str	r3, [r4, #16]
 800fe3a:	b002      	add	sp, #8
 800fe3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe40:	68a3      	ldr	r3, [r4, #8]
 800fe42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe46:	701a      	strb	r2, [r3, #0]
 800fe48:	68a3      	ldr	r3, [r4, #8]
 800fe4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe4e:	701a      	strb	r2, [r3, #0]
 800fe50:	68a3      	ldr	r3, [r4, #8]
 800fe52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe56:	701a      	strb	r2, [r3, #0]
 800fe58:	e7ad      	b.n	800fdb6 <ucdr_serialize_uint32_t+0x72>
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	ad01      	add	r5, sp, #4
 800fe5e:	4632      	mov	r2, r6
 800fe60:	4629      	mov	r1, r5
 800fe62:	f00d fefe 	bl	801dc62 <memcpy>
 800fe66:	4642      	mov	r2, r8
 800fe68:	19a9      	adds	r1, r5, r6
 800fe6a:	68a0      	ldr	r0, [r4, #8]
 800fe6c:	f00d fef9 	bl	801dc62 <memcpy>
 800fe70:	e7a1      	b.n	800fdb6 <ucdr_serialize_uint32_t+0x72>
 800fe72:	bf00      	nop

0800fe74 <ucdr_serialize_endian_uint32_t>:
 800fe74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe78:	4604      	mov	r4, r0
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	460d      	mov	r5, r1
 800fe7e:	2104      	movs	r1, #4
 800fe80:	9201      	str	r2, [sp, #4]
 800fe82:	f000 ffbf 	bl	8010e04 <ucdr_buffer_alignment>
 800fe86:	4601      	mov	r1, r0
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fe8e:	f001 f801 	bl	8010e94 <ucdr_advance_buffer>
 800fe92:	2104      	movs	r1, #4
 800fe94:	4620      	mov	r0, r4
 800fe96:	f000 ff55 	bl	8010d44 <ucdr_check_buffer_available_for>
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	d138      	bne.n	800ff10 <ucdr_serialize_endian_uint32_t+0x9c>
 800fe9e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fea2:	42b7      	cmp	r7, r6
 800fea4:	d92f      	bls.n	800ff06 <ucdr_serialize_endian_uint32_t+0x92>
 800fea6:	6923      	ldr	r3, [r4, #16]
 800fea8:	4620      	mov	r0, r4
 800feaa:	60a7      	str	r7, [r4, #8]
 800feac:	1bbf      	subs	r7, r7, r6
 800feae:	443b      	add	r3, r7
 800feb0:	f1c7 0904 	rsb	r9, r7, #4
 800feb4:	6123      	str	r3, [r4, #16]
 800feb6:	4649      	mov	r1, r9
 800feb8:	f000 ff50 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800febc:	2800      	cmp	r0, #0
 800febe:	d04a      	beq.n	800ff56 <ucdr_serialize_endian_uint32_t+0xe2>
 800fec0:	2d01      	cmp	r5, #1
 800fec2:	d063      	beq.n	800ff8c <ucdr_serialize_endian_uint32_t+0x118>
 800fec4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fec8:	7033      	strb	r3, [r6, #0]
 800feca:	2f00      	cmp	r7, #0
 800fecc:	d051      	beq.n	800ff72 <ucdr_serialize_endian_uint32_t+0xfe>
 800fece:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fed2:	2f01      	cmp	r7, #1
 800fed4:	7073      	strb	r3, [r6, #1]
 800fed6:	d050      	beq.n	800ff7a <ucdr_serialize_endian_uint32_t+0x106>
 800fed8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fedc:	2f02      	cmp	r7, #2
 800fede:	70b3      	strb	r3, [r6, #2]
 800fee0:	d04f      	beq.n	800ff82 <ucdr_serialize_endian_uint32_t+0x10e>
 800fee2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fee6:	70f3      	strb	r3, [r6, #3]
 800fee8:	6923      	ldr	r3, [r4, #16]
 800feea:	2104      	movs	r1, #4
 800feec:	68a2      	ldr	r2, [r4, #8]
 800feee:	7da0      	ldrb	r0, [r4, #22]
 800fef0:	3304      	adds	r3, #4
 800fef2:	444a      	add	r2, r9
 800fef4:	7561      	strb	r1, [r4, #21]
 800fef6:	1bdb      	subs	r3, r3, r7
 800fef8:	f080 0001 	eor.w	r0, r0, #1
 800fefc:	60a2      	str	r2, [r4, #8]
 800fefe:	6123      	str	r3, [r4, #16]
 800ff00:	b003      	add	sp, #12
 800ff02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff06:	2104      	movs	r1, #4
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f000 ff27 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800ff0e:	b1c8      	cbz	r0, 800ff44 <ucdr_serialize_endian_uint32_t+0xd0>
 800ff10:	2d01      	cmp	r5, #1
 800ff12:	68a3      	ldr	r3, [r4, #8]
 800ff14:	d01c      	beq.n	800ff50 <ucdr_serialize_endian_uint32_t+0xdc>
 800ff16:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ff1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ff22:	7018      	strb	r0, [r3, #0]
 800ff24:	68a3      	ldr	r3, [r4, #8]
 800ff26:	705a      	strb	r2, [r3, #1]
 800ff28:	68a3      	ldr	r3, [r4, #8]
 800ff2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff2e:	7099      	strb	r1, [r3, #2]
 800ff30:	68a3      	ldr	r3, [r4, #8]
 800ff32:	70da      	strb	r2, [r3, #3]
 800ff34:	2104      	movs	r1, #4
 800ff36:	68a2      	ldr	r2, [r4, #8]
 800ff38:	6923      	ldr	r3, [r4, #16]
 800ff3a:	440a      	add	r2, r1
 800ff3c:	7561      	strb	r1, [r4, #21]
 800ff3e:	440b      	add	r3, r1
 800ff40:	60a2      	str	r2, [r4, #8]
 800ff42:	6123      	str	r3, [r4, #16]
 800ff44:	7da0      	ldrb	r0, [r4, #22]
 800ff46:	f080 0001 	eor.w	r0, r0, #1
 800ff4a:	b003      	add	sp, #12
 800ff4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff50:	9a01      	ldr	r2, [sp, #4]
 800ff52:	601a      	str	r2, [r3, #0]
 800ff54:	e7ee      	b.n	800ff34 <ucdr_serialize_endian_uint32_t+0xc0>
 800ff56:	68a2      	ldr	r2, [r4, #8]
 800ff58:	6923      	ldr	r3, [r4, #16]
 800ff5a:	7da0      	ldrb	r0, [r4, #22]
 800ff5c:	1bd2      	subs	r2, r2, r7
 800ff5e:	1bdb      	subs	r3, r3, r7
 800ff60:	f884 8015 	strb.w	r8, [r4, #21]
 800ff64:	f080 0001 	eor.w	r0, r0, #1
 800ff68:	60a2      	str	r2, [r4, #8]
 800ff6a:	6123      	str	r3, [r4, #16]
 800ff6c:	b003      	add	sp, #12
 800ff6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff72:	68a3      	ldr	r3, [r4, #8]
 800ff74:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff78:	701a      	strb	r2, [r3, #0]
 800ff7a:	68a3      	ldr	r3, [r4, #8]
 800ff7c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ff80:	701a      	strb	r2, [r3, #0]
 800ff82:	68a3      	ldr	r3, [r4, #8]
 800ff84:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff88:	701a      	strb	r2, [r3, #0]
 800ff8a:	e7ad      	b.n	800fee8 <ucdr_serialize_endian_uint32_t+0x74>
 800ff8c:	ad01      	add	r5, sp, #4
 800ff8e:	463a      	mov	r2, r7
 800ff90:	4630      	mov	r0, r6
 800ff92:	4629      	mov	r1, r5
 800ff94:	f00d fe65 	bl	801dc62 <memcpy>
 800ff98:	464a      	mov	r2, r9
 800ff9a:	19e9      	adds	r1, r5, r7
 800ff9c:	68a0      	ldr	r0, [r4, #8]
 800ff9e:	f00d fe60 	bl	801dc62 <memcpy>
 800ffa2:	e7a1      	b.n	800fee8 <ucdr_serialize_endian_uint32_t+0x74>

0800ffa4 <ucdr_deserialize_uint32_t>:
 800ffa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffa8:	4604      	mov	r4, r0
 800ffaa:	460d      	mov	r5, r1
 800ffac:	2104      	movs	r1, #4
 800ffae:	f000 ff29 	bl	8010e04 <ucdr_buffer_alignment>
 800ffb2:	4601      	mov	r1, r0
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ffba:	f000 ff6b 	bl	8010e94 <ucdr_advance_buffer>
 800ffbe:	2104      	movs	r1, #4
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f000 febf 	bl	8010d44 <ucdr_check_buffer_available_for>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d138      	bne.n	801003c <ucdr_deserialize_uint32_t+0x98>
 800ffca:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ffce:	42b7      	cmp	r7, r6
 800ffd0:	d92f      	bls.n	8010032 <ucdr_deserialize_uint32_t+0x8e>
 800ffd2:	6923      	ldr	r3, [r4, #16]
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	60a7      	str	r7, [r4, #8]
 800ffd8:	1bbf      	subs	r7, r7, r6
 800ffda:	443b      	add	r3, r7
 800ffdc:	f1c7 0904 	rsb	r9, r7, #4
 800ffe0:	6123      	str	r3, [r4, #16]
 800ffe2:	4649      	mov	r1, r9
 800ffe4:	f000 feba 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	d046      	beq.n	801007a <ucdr_deserialize_uint32_t+0xd6>
 800ffec:	7d23      	ldrb	r3, [r4, #20]
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d05c      	beq.n	80100ac <ucdr_deserialize_uint32_t+0x108>
 800fff2:	78f3      	ldrb	r3, [r6, #3]
 800fff4:	702b      	strb	r3, [r5, #0]
 800fff6:	2f00      	cmp	r7, #0
 800fff8:	d04c      	beq.n	8010094 <ucdr_deserialize_uint32_t+0xf0>
 800fffa:	78b3      	ldrb	r3, [r6, #2]
 800fffc:	2f01      	cmp	r7, #1
 800fffe:	706b      	strb	r3, [r5, #1]
 8010000:	f105 0302 	add.w	r3, r5, #2
 8010004:	d04a      	beq.n	801009c <ucdr_deserialize_uint32_t+0xf8>
 8010006:	7873      	ldrb	r3, [r6, #1]
 8010008:	2f02      	cmp	r7, #2
 801000a:	70ab      	strb	r3, [r5, #2]
 801000c:	f105 0303 	add.w	r3, r5, #3
 8010010:	d048      	beq.n	80100a4 <ucdr_deserialize_uint32_t+0x100>
 8010012:	7833      	ldrb	r3, [r6, #0]
 8010014:	70eb      	strb	r3, [r5, #3]
 8010016:	6923      	ldr	r3, [r4, #16]
 8010018:	2104      	movs	r1, #4
 801001a:	68a2      	ldr	r2, [r4, #8]
 801001c:	3304      	adds	r3, #4
 801001e:	7da0      	ldrb	r0, [r4, #22]
 8010020:	444a      	add	r2, r9
 8010022:	7561      	strb	r1, [r4, #21]
 8010024:	1bdb      	subs	r3, r3, r7
 8010026:	f080 0001 	eor.w	r0, r0, #1
 801002a:	60a2      	str	r2, [r4, #8]
 801002c:	6123      	str	r3, [r4, #16]
 801002e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010032:	2104      	movs	r1, #4
 8010034:	4620      	mov	r0, r4
 8010036:	f000 fe91 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 801003a:	b1b0      	cbz	r0, 801006a <ucdr_deserialize_uint32_t+0xc6>
 801003c:	7d23      	ldrb	r3, [r4, #20]
 801003e:	2b01      	cmp	r3, #1
 8010040:	68a3      	ldr	r3, [r4, #8]
 8010042:	d017      	beq.n	8010074 <ucdr_deserialize_uint32_t+0xd0>
 8010044:	78db      	ldrb	r3, [r3, #3]
 8010046:	702b      	strb	r3, [r5, #0]
 8010048:	68a3      	ldr	r3, [r4, #8]
 801004a:	789b      	ldrb	r3, [r3, #2]
 801004c:	706b      	strb	r3, [r5, #1]
 801004e:	68a3      	ldr	r3, [r4, #8]
 8010050:	785b      	ldrb	r3, [r3, #1]
 8010052:	70ab      	strb	r3, [r5, #2]
 8010054:	68a3      	ldr	r3, [r4, #8]
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	70eb      	strb	r3, [r5, #3]
 801005a:	2104      	movs	r1, #4
 801005c:	68a2      	ldr	r2, [r4, #8]
 801005e:	6923      	ldr	r3, [r4, #16]
 8010060:	440a      	add	r2, r1
 8010062:	7561      	strb	r1, [r4, #21]
 8010064:	440b      	add	r3, r1
 8010066:	60a2      	str	r2, [r4, #8]
 8010068:	6123      	str	r3, [r4, #16]
 801006a:	7da0      	ldrb	r0, [r4, #22]
 801006c:	f080 0001 	eor.w	r0, r0, #1
 8010070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	602b      	str	r3, [r5, #0]
 8010078:	e7ef      	b.n	801005a <ucdr_deserialize_uint32_t+0xb6>
 801007a:	68a2      	ldr	r2, [r4, #8]
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	1bd2      	subs	r2, r2, r7
 8010080:	7da0      	ldrb	r0, [r4, #22]
 8010082:	1bdb      	subs	r3, r3, r7
 8010084:	f884 8015 	strb.w	r8, [r4, #21]
 8010088:	f080 0001 	eor.w	r0, r0, #1
 801008c:	60a2      	str	r2, [r4, #8]
 801008e:	6123      	str	r3, [r4, #16]
 8010090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010094:	68a3      	ldr	r3, [r4, #8]
 8010096:	789b      	ldrb	r3, [r3, #2]
 8010098:	706b      	strb	r3, [r5, #1]
 801009a:	1cab      	adds	r3, r5, #2
 801009c:	68a2      	ldr	r2, [r4, #8]
 801009e:	7852      	ldrb	r2, [r2, #1]
 80100a0:	f803 2b01 	strb.w	r2, [r3], #1
 80100a4:	68a2      	ldr	r2, [r4, #8]
 80100a6:	7812      	ldrb	r2, [r2, #0]
 80100a8:	701a      	strb	r2, [r3, #0]
 80100aa:	e7b4      	b.n	8010016 <ucdr_deserialize_uint32_t+0x72>
 80100ac:	4631      	mov	r1, r6
 80100ae:	463a      	mov	r2, r7
 80100b0:	4628      	mov	r0, r5
 80100b2:	f00d fdd6 	bl	801dc62 <memcpy>
 80100b6:	464a      	mov	r2, r9
 80100b8:	19e8      	adds	r0, r5, r7
 80100ba:	68a1      	ldr	r1, [r4, #8]
 80100bc:	f00d fdd1 	bl	801dc62 <memcpy>
 80100c0:	e7a9      	b.n	8010016 <ucdr_deserialize_uint32_t+0x72>
 80100c2:	bf00      	nop

080100c4 <ucdr_deserialize_endian_uint32_t>:
 80100c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100c8:	4604      	mov	r4, r0
 80100ca:	460e      	mov	r6, r1
 80100cc:	2104      	movs	r1, #4
 80100ce:	4615      	mov	r5, r2
 80100d0:	f000 fe98 	bl	8010e04 <ucdr_buffer_alignment>
 80100d4:	4601      	mov	r1, r0
 80100d6:	4620      	mov	r0, r4
 80100d8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80100dc:	f000 feda 	bl	8010e94 <ucdr_advance_buffer>
 80100e0:	2104      	movs	r1, #4
 80100e2:	4620      	mov	r0, r4
 80100e4:	f000 fe2e 	bl	8010d44 <ucdr_check_buffer_available_for>
 80100e8:	2800      	cmp	r0, #0
 80100ea:	d13c      	bne.n	8010166 <ucdr_deserialize_endian_uint32_t+0xa2>
 80100ec:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80100f0:	42bb      	cmp	r3, r7
 80100f2:	d933      	bls.n	801015c <ucdr_deserialize_endian_uint32_t+0x98>
 80100f4:	eba3 0907 	sub.w	r9, r3, r7
 80100f8:	60a3      	str	r3, [r4, #8]
 80100fa:	6923      	ldr	r3, [r4, #16]
 80100fc:	4620      	mov	r0, r4
 80100fe:	f1c9 0a04 	rsb	sl, r9, #4
 8010102:	444b      	add	r3, r9
 8010104:	4651      	mov	r1, sl
 8010106:	6123      	str	r3, [r4, #16]
 8010108:	f000 fe28 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 801010c:	2800      	cmp	r0, #0
 801010e:	d048      	beq.n	80101a2 <ucdr_deserialize_endian_uint32_t+0xde>
 8010110:	2e01      	cmp	r6, #1
 8010112:	d061      	beq.n	80101d8 <ucdr_deserialize_endian_uint32_t+0x114>
 8010114:	78fb      	ldrb	r3, [r7, #3]
 8010116:	702b      	strb	r3, [r5, #0]
 8010118:	f1b9 0f00 	cmp.w	r9, #0
 801011c:	d050      	beq.n	80101c0 <ucdr_deserialize_endian_uint32_t+0xfc>
 801011e:	78bb      	ldrb	r3, [r7, #2]
 8010120:	f1b9 0f01 	cmp.w	r9, #1
 8010124:	706b      	strb	r3, [r5, #1]
 8010126:	f105 0302 	add.w	r3, r5, #2
 801012a:	d04d      	beq.n	80101c8 <ucdr_deserialize_endian_uint32_t+0x104>
 801012c:	787b      	ldrb	r3, [r7, #1]
 801012e:	f1b9 0f02 	cmp.w	r9, #2
 8010132:	70ab      	strb	r3, [r5, #2]
 8010134:	f105 0303 	add.w	r3, r5, #3
 8010138:	d04a      	beq.n	80101d0 <ucdr_deserialize_endian_uint32_t+0x10c>
 801013a:	783b      	ldrb	r3, [r7, #0]
 801013c:	70eb      	strb	r3, [r5, #3]
 801013e:	6923      	ldr	r3, [r4, #16]
 8010140:	2104      	movs	r1, #4
 8010142:	68a2      	ldr	r2, [r4, #8]
 8010144:	3304      	adds	r3, #4
 8010146:	7da0      	ldrb	r0, [r4, #22]
 8010148:	4452      	add	r2, sl
 801014a:	7561      	strb	r1, [r4, #21]
 801014c:	eba3 0309 	sub.w	r3, r3, r9
 8010150:	f080 0001 	eor.w	r0, r0, #1
 8010154:	60a2      	str	r2, [r4, #8]
 8010156:	6123      	str	r3, [r4, #16]
 8010158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015c:	2104      	movs	r1, #4
 801015e:	4620      	mov	r0, r4
 8010160:	f000 fdfc 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 8010164:	b1a8      	cbz	r0, 8010192 <ucdr_deserialize_endian_uint32_t+0xce>
 8010166:	2e01      	cmp	r6, #1
 8010168:	68a3      	ldr	r3, [r4, #8]
 801016a:	d017      	beq.n	801019c <ucdr_deserialize_endian_uint32_t+0xd8>
 801016c:	78db      	ldrb	r3, [r3, #3]
 801016e:	702b      	strb	r3, [r5, #0]
 8010170:	68a3      	ldr	r3, [r4, #8]
 8010172:	789b      	ldrb	r3, [r3, #2]
 8010174:	706b      	strb	r3, [r5, #1]
 8010176:	68a3      	ldr	r3, [r4, #8]
 8010178:	785b      	ldrb	r3, [r3, #1]
 801017a:	70ab      	strb	r3, [r5, #2]
 801017c:	68a3      	ldr	r3, [r4, #8]
 801017e:	781b      	ldrb	r3, [r3, #0]
 8010180:	70eb      	strb	r3, [r5, #3]
 8010182:	2104      	movs	r1, #4
 8010184:	68a2      	ldr	r2, [r4, #8]
 8010186:	6923      	ldr	r3, [r4, #16]
 8010188:	440a      	add	r2, r1
 801018a:	7561      	strb	r1, [r4, #21]
 801018c:	440b      	add	r3, r1
 801018e:	60a2      	str	r2, [r4, #8]
 8010190:	6123      	str	r3, [r4, #16]
 8010192:	7da0      	ldrb	r0, [r4, #22]
 8010194:	f080 0001 	eor.w	r0, r0, #1
 8010198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	602b      	str	r3, [r5, #0]
 80101a0:	e7ef      	b.n	8010182 <ucdr_deserialize_endian_uint32_t+0xbe>
 80101a2:	68a2      	ldr	r2, [r4, #8]
 80101a4:	6923      	ldr	r3, [r4, #16]
 80101a6:	eba2 0209 	sub.w	r2, r2, r9
 80101aa:	7da0      	ldrb	r0, [r4, #22]
 80101ac:	eba3 0309 	sub.w	r3, r3, r9
 80101b0:	f884 8015 	strb.w	r8, [r4, #21]
 80101b4:	f080 0001 	eor.w	r0, r0, #1
 80101b8:	60a2      	str	r2, [r4, #8]
 80101ba:	6123      	str	r3, [r4, #16]
 80101bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101c0:	68a3      	ldr	r3, [r4, #8]
 80101c2:	789b      	ldrb	r3, [r3, #2]
 80101c4:	706b      	strb	r3, [r5, #1]
 80101c6:	1cab      	adds	r3, r5, #2
 80101c8:	68a2      	ldr	r2, [r4, #8]
 80101ca:	7852      	ldrb	r2, [r2, #1]
 80101cc:	f803 2b01 	strb.w	r2, [r3], #1
 80101d0:	68a2      	ldr	r2, [r4, #8]
 80101d2:	7812      	ldrb	r2, [r2, #0]
 80101d4:	701a      	strb	r2, [r3, #0]
 80101d6:	e7b2      	b.n	801013e <ucdr_deserialize_endian_uint32_t+0x7a>
 80101d8:	4639      	mov	r1, r7
 80101da:	464a      	mov	r2, r9
 80101dc:	4628      	mov	r0, r5
 80101de:	f00d fd40 	bl	801dc62 <memcpy>
 80101e2:	4652      	mov	r2, sl
 80101e4:	eb05 0009 	add.w	r0, r5, r9
 80101e8:	68a1      	ldr	r1, [r4, #8]
 80101ea:	f00d fd3a 	bl	801dc62 <memcpy>
 80101ee:	e7a6      	b.n	801013e <ucdr_deserialize_endian_uint32_t+0x7a>

080101f0 <ucdr_serialize_uint64_t>:
 80101f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f4:	4604      	mov	r4, r0
 80101f6:	b082      	sub	sp, #8
 80101f8:	2108      	movs	r1, #8
 80101fa:	e9cd 2300 	strd	r2, r3, [sp]
 80101fe:	f000 fe01 	bl	8010e04 <ucdr_buffer_alignment>
 8010202:	4601      	mov	r1, r0
 8010204:	4620      	mov	r0, r4
 8010206:	7d67      	ldrb	r7, [r4, #21]
 8010208:	f000 fe44 	bl	8010e94 <ucdr_advance_buffer>
 801020c:	2108      	movs	r1, #8
 801020e:	4620      	mov	r0, r4
 8010210:	f000 fd98 	bl	8010d44 <ucdr_check_buffer_available_for>
 8010214:	2800      	cmp	r0, #0
 8010216:	d14e      	bne.n	80102b6 <ucdr_serialize_uint64_t+0xc6>
 8010218:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801021c:	42ab      	cmp	r3, r5
 801021e:	d945      	bls.n	80102ac <ucdr_serialize_uint64_t+0xbc>
 8010220:	1b5e      	subs	r6, r3, r5
 8010222:	60a3      	str	r3, [r4, #8]
 8010224:	6923      	ldr	r3, [r4, #16]
 8010226:	4620      	mov	r0, r4
 8010228:	f1c6 0808 	rsb	r8, r6, #8
 801022c:	4433      	add	r3, r6
 801022e:	4641      	mov	r1, r8
 8010230:	6123      	str	r3, [r4, #16]
 8010232:	f000 fd93 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 8010236:	2800      	cmp	r0, #0
 8010238:	d074      	beq.n	8010324 <ucdr_serialize_uint64_t+0x134>
 801023a:	7d23      	ldrb	r3, [r4, #20]
 801023c:	2b01      	cmp	r3, #1
 801023e:	f000 809b 	beq.w	8010378 <ucdr_serialize_uint64_t+0x188>
 8010242:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010246:	702b      	strb	r3, [r5, #0]
 8010248:	2e00      	cmp	r6, #0
 801024a:	d078      	beq.n	801033e <ucdr_serialize_uint64_t+0x14e>
 801024c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010250:	2e01      	cmp	r6, #1
 8010252:	706b      	strb	r3, [r5, #1]
 8010254:	d077      	beq.n	8010346 <ucdr_serialize_uint64_t+0x156>
 8010256:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801025a:	2e02      	cmp	r6, #2
 801025c:	70ab      	strb	r3, [r5, #2]
 801025e:	d076      	beq.n	801034e <ucdr_serialize_uint64_t+0x15e>
 8010260:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010264:	2e03      	cmp	r6, #3
 8010266:	70eb      	strb	r3, [r5, #3]
 8010268:	d075      	beq.n	8010356 <ucdr_serialize_uint64_t+0x166>
 801026a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801026e:	2e04      	cmp	r6, #4
 8010270:	712b      	strb	r3, [r5, #4]
 8010272:	d074      	beq.n	801035e <ucdr_serialize_uint64_t+0x16e>
 8010274:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010278:	2e05      	cmp	r6, #5
 801027a:	716b      	strb	r3, [r5, #5]
 801027c:	d073      	beq.n	8010366 <ucdr_serialize_uint64_t+0x176>
 801027e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010282:	2e06      	cmp	r6, #6
 8010284:	71ab      	strb	r3, [r5, #6]
 8010286:	d072      	beq.n	801036e <ucdr_serialize_uint64_t+0x17e>
 8010288:	f89d 3000 	ldrb.w	r3, [sp]
 801028c:	71eb      	strb	r3, [r5, #7]
 801028e:	6923      	ldr	r3, [r4, #16]
 8010290:	2108      	movs	r1, #8
 8010292:	68a2      	ldr	r2, [r4, #8]
 8010294:	3308      	adds	r3, #8
 8010296:	7da0      	ldrb	r0, [r4, #22]
 8010298:	4442      	add	r2, r8
 801029a:	7561      	strb	r1, [r4, #21]
 801029c:	1b9e      	subs	r6, r3, r6
 801029e:	f080 0001 	eor.w	r0, r0, #1
 80102a2:	60a2      	str	r2, [r4, #8]
 80102a4:	6126      	str	r6, [r4, #16]
 80102a6:	b002      	add	sp, #8
 80102a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ac:	2108      	movs	r1, #8
 80102ae:	4620      	mov	r0, r4
 80102b0:	f000 fd54 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 80102b4:	b350      	cbz	r0, 801030c <ucdr_serialize_uint64_t+0x11c>
 80102b6:	7d23      	ldrb	r3, [r4, #20]
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d02d      	beq.n	8010318 <ucdr_serialize_uint64_t+0x128>
 80102bc:	68a3      	ldr	r3, [r4, #8]
 80102be:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80102c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102c6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80102ca:	7018      	strb	r0, [r3, #0]
 80102cc:	68a3      	ldr	r3, [r4, #8]
 80102ce:	705a      	strb	r2, [r3, #1]
 80102d0:	68a3      	ldr	r3, [r4, #8]
 80102d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80102d6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80102da:	7099      	strb	r1, [r3, #2]
 80102dc:	68a3      	ldr	r3, [r4, #8]
 80102de:	70da      	strb	r2, [r3, #3]
 80102e0:	68a3      	ldr	r3, [r4, #8]
 80102e2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80102e6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80102ea:	7118      	strb	r0, [r3, #4]
 80102ec:	68a3      	ldr	r3, [r4, #8]
 80102ee:	715a      	strb	r2, [r3, #5]
 80102f0:	68a3      	ldr	r3, [r4, #8]
 80102f2:	f89d 2000 	ldrb.w	r2, [sp]
 80102f6:	7199      	strb	r1, [r3, #6]
 80102f8:	68a3      	ldr	r3, [r4, #8]
 80102fa:	71da      	strb	r2, [r3, #7]
 80102fc:	2108      	movs	r1, #8
 80102fe:	68a2      	ldr	r2, [r4, #8]
 8010300:	6923      	ldr	r3, [r4, #16]
 8010302:	440a      	add	r2, r1
 8010304:	7561      	strb	r1, [r4, #21]
 8010306:	440b      	add	r3, r1
 8010308:	60a2      	str	r2, [r4, #8]
 801030a:	6123      	str	r3, [r4, #16]
 801030c:	7da0      	ldrb	r0, [r4, #22]
 801030e:	f080 0001 	eor.w	r0, r0, #1
 8010312:	b002      	add	sp, #8
 8010314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010318:	466b      	mov	r3, sp
 801031a:	68a2      	ldr	r2, [r4, #8]
 801031c:	cb03      	ldmia	r3!, {r0, r1}
 801031e:	6010      	str	r0, [r2, #0]
 8010320:	6051      	str	r1, [r2, #4]
 8010322:	e7eb      	b.n	80102fc <ucdr_serialize_uint64_t+0x10c>
 8010324:	68a2      	ldr	r2, [r4, #8]
 8010326:	6923      	ldr	r3, [r4, #16]
 8010328:	7da0      	ldrb	r0, [r4, #22]
 801032a:	1b92      	subs	r2, r2, r6
 801032c:	1b9b      	subs	r3, r3, r6
 801032e:	7567      	strb	r7, [r4, #21]
 8010330:	f080 0001 	eor.w	r0, r0, #1
 8010334:	60a2      	str	r2, [r4, #8]
 8010336:	6123      	str	r3, [r4, #16]
 8010338:	b002      	add	sp, #8
 801033a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801033e:	68a3      	ldr	r3, [r4, #8]
 8010340:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010344:	701a      	strb	r2, [r3, #0]
 8010346:	68a3      	ldr	r3, [r4, #8]
 8010348:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801034c:	701a      	strb	r2, [r3, #0]
 801034e:	68a3      	ldr	r3, [r4, #8]
 8010350:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010354:	701a      	strb	r2, [r3, #0]
 8010356:	68a3      	ldr	r3, [r4, #8]
 8010358:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801035c:	701a      	strb	r2, [r3, #0]
 801035e:	68a3      	ldr	r3, [r4, #8]
 8010360:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010364:	701a      	strb	r2, [r3, #0]
 8010366:	68a3      	ldr	r3, [r4, #8]
 8010368:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801036c:	701a      	strb	r2, [r3, #0]
 801036e:	68a3      	ldr	r3, [r4, #8]
 8010370:	f89d 2000 	ldrb.w	r2, [sp]
 8010374:	701a      	strb	r2, [r3, #0]
 8010376:	e78a      	b.n	801028e <ucdr_serialize_uint64_t+0x9e>
 8010378:	4628      	mov	r0, r5
 801037a:	466d      	mov	r5, sp
 801037c:	4632      	mov	r2, r6
 801037e:	4629      	mov	r1, r5
 8010380:	f00d fc6f 	bl	801dc62 <memcpy>
 8010384:	4642      	mov	r2, r8
 8010386:	19a9      	adds	r1, r5, r6
 8010388:	68a0      	ldr	r0, [r4, #8]
 801038a:	f00d fc6a 	bl	801dc62 <memcpy>
 801038e:	e77e      	b.n	801028e <ucdr_serialize_uint64_t+0x9e>

08010390 <ucdr_serialize_int16_t>:
 8010390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010394:	460b      	mov	r3, r1
 8010396:	b082      	sub	sp, #8
 8010398:	4604      	mov	r4, r0
 801039a:	2102      	movs	r1, #2
 801039c:	f8ad 3006 	strh.w	r3, [sp, #6]
 80103a0:	f000 fd30 	bl	8010e04 <ucdr_buffer_alignment>
 80103a4:	4601      	mov	r1, r0
 80103a6:	4620      	mov	r0, r4
 80103a8:	7d67      	ldrb	r7, [r4, #21]
 80103aa:	f000 fd73 	bl	8010e94 <ucdr_advance_buffer>
 80103ae:	2102      	movs	r1, #2
 80103b0:	4620      	mov	r0, r4
 80103b2:	f000 fcc7 	bl	8010d44 <ucdr_check_buffer_available_for>
 80103b6:	bb78      	cbnz	r0, 8010418 <ucdr_serialize_int16_t+0x88>
 80103b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80103bc:	42ab      	cmp	r3, r5
 80103be:	d926      	bls.n	801040e <ucdr_serialize_int16_t+0x7e>
 80103c0:	1b5e      	subs	r6, r3, r5
 80103c2:	60a3      	str	r3, [r4, #8]
 80103c4:	6923      	ldr	r3, [r4, #16]
 80103c6:	4620      	mov	r0, r4
 80103c8:	f1c6 0802 	rsb	r8, r6, #2
 80103cc:	4433      	add	r3, r6
 80103ce:	4641      	mov	r1, r8
 80103d0:	6123      	str	r3, [r4, #16]
 80103d2:	f000 fcc3 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d03b      	beq.n	8010452 <ucdr_serialize_int16_t+0xc2>
 80103da:	7d23      	ldrb	r3, [r4, #20]
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d04a      	beq.n	8010476 <ucdr_serialize_int16_t+0xe6>
 80103e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80103e4:	702b      	strb	r3, [r5, #0]
 80103e6:	2e00      	cmp	r6, #0
 80103e8:	d040      	beq.n	801046c <ucdr_serialize_int16_t+0xdc>
 80103ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80103ee:	706b      	strb	r3, [r5, #1]
 80103f0:	6923      	ldr	r3, [r4, #16]
 80103f2:	2102      	movs	r1, #2
 80103f4:	68a2      	ldr	r2, [r4, #8]
 80103f6:	3302      	adds	r3, #2
 80103f8:	7da0      	ldrb	r0, [r4, #22]
 80103fa:	4442      	add	r2, r8
 80103fc:	7561      	strb	r1, [r4, #21]
 80103fe:	1b9e      	subs	r6, r3, r6
 8010400:	f080 0001 	eor.w	r0, r0, #1
 8010404:	60a2      	str	r2, [r4, #8]
 8010406:	6126      	str	r6, [r4, #16]
 8010408:	b002      	add	sp, #8
 801040a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801040e:	2102      	movs	r1, #2
 8010410:	4620      	mov	r0, r4
 8010412:	f000 fca3 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 8010416:	b190      	cbz	r0, 801043e <ucdr_serialize_int16_t+0xae>
 8010418:	7d23      	ldrb	r3, [r4, #20]
 801041a:	2b01      	cmp	r3, #1
 801041c:	68a3      	ldr	r3, [r4, #8]
 801041e:	d014      	beq.n	801044a <ucdr_serialize_int16_t+0xba>
 8010420:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010424:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010428:	7019      	strb	r1, [r3, #0]
 801042a:	68a3      	ldr	r3, [r4, #8]
 801042c:	705a      	strb	r2, [r3, #1]
 801042e:	2102      	movs	r1, #2
 8010430:	68a2      	ldr	r2, [r4, #8]
 8010432:	6923      	ldr	r3, [r4, #16]
 8010434:	440a      	add	r2, r1
 8010436:	7561      	strb	r1, [r4, #21]
 8010438:	440b      	add	r3, r1
 801043a:	60a2      	str	r2, [r4, #8]
 801043c:	6123      	str	r3, [r4, #16]
 801043e:	7da0      	ldrb	r0, [r4, #22]
 8010440:	f080 0001 	eor.w	r0, r0, #1
 8010444:	b002      	add	sp, #8
 8010446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801044a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801044e:	801a      	strh	r2, [r3, #0]
 8010450:	e7ed      	b.n	801042e <ucdr_serialize_int16_t+0x9e>
 8010452:	68a2      	ldr	r2, [r4, #8]
 8010454:	6923      	ldr	r3, [r4, #16]
 8010456:	7da0      	ldrb	r0, [r4, #22]
 8010458:	1b92      	subs	r2, r2, r6
 801045a:	1b9b      	subs	r3, r3, r6
 801045c:	7567      	strb	r7, [r4, #21]
 801045e:	f080 0001 	eor.w	r0, r0, #1
 8010462:	60a2      	str	r2, [r4, #8]
 8010464:	6123      	str	r3, [r4, #16]
 8010466:	b002      	add	sp, #8
 8010468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801046c:	68a3      	ldr	r3, [r4, #8]
 801046e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010472:	701a      	strb	r2, [r3, #0]
 8010474:	e7bc      	b.n	80103f0 <ucdr_serialize_int16_t+0x60>
 8010476:	4628      	mov	r0, r5
 8010478:	f10d 0506 	add.w	r5, sp, #6
 801047c:	4632      	mov	r2, r6
 801047e:	4629      	mov	r1, r5
 8010480:	f00d fbef 	bl	801dc62 <memcpy>
 8010484:	4642      	mov	r2, r8
 8010486:	19a9      	adds	r1, r5, r6
 8010488:	68a0      	ldr	r0, [r4, #8]
 801048a:	f00d fbea 	bl	801dc62 <memcpy>
 801048e:	e7af      	b.n	80103f0 <ucdr_serialize_int16_t+0x60>

08010490 <ucdr_deserialize_int16_t>:
 8010490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010494:	4604      	mov	r4, r0
 8010496:	460d      	mov	r5, r1
 8010498:	2102      	movs	r1, #2
 801049a:	f000 fcb3 	bl	8010e04 <ucdr_buffer_alignment>
 801049e:	4601      	mov	r1, r0
 80104a0:	4620      	mov	r0, r4
 80104a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80104a6:	f000 fcf5 	bl	8010e94 <ucdr_advance_buffer>
 80104aa:	2102      	movs	r1, #2
 80104ac:	4620      	mov	r0, r4
 80104ae:	f000 fc49 	bl	8010d44 <ucdr_check_buffer_available_for>
 80104b2:	bb60      	cbnz	r0, 801050e <ucdr_deserialize_int16_t+0x7e>
 80104b4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80104b8:	42be      	cmp	r6, r7
 80104ba:	d923      	bls.n	8010504 <ucdr_deserialize_int16_t+0x74>
 80104bc:	6923      	ldr	r3, [r4, #16]
 80104be:	4620      	mov	r0, r4
 80104c0:	60a6      	str	r6, [r4, #8]
 80104c2:	1bf6      	subs	r6, r6, r7
 80104c4:	4433      	add	r3, r6
 80104c6:	f1c6 0902 	rsb	r9, r6, #2
 80104ca:	6123      	str	r3, [r4, #16]
 80104cc:	4649      	mov	r1, r9
 80104ce:	f000 fc45 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 80104d2:	2800      	cmp	r0, #0
 80104d4:	d034      	beq.n	8010540 <ucdr_deserialize_int16_t+0xb0>
 80104d6:	7d23      	ldrb	r3, [r4, #20]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d042      	beq.n	8010562 <ucdr_deserialize_int16_t+0xd2>
 80104dc:	787b      	ldrb	r3, [r7, #1]
 80104de:	702b      	strb	r3, [r5, #0]
 80104e0:	2e00      	cmp	r6, #0
 80104e2:	d03a      	beq.n	801055a <ucdr_deserialize_int16_t+0xca>
 80104e4:	783b      	ldrb	r3, [r7, #0]
 80104e6:	706b      	strb	r3, [r5, #1]
 80104e8:	6923      	ldr	r3, [r4, #16]
 80104ea:	2102      	movs	r1, #2
 80104ec:	68a2      	ldr	r2, [r4, #8]
 80104ee:	3302      	adds	r3, #2
 80104f0:	7da0      	ldrb	r0, [r4, #22]
 80104f2:	444a      	add	r2, r9
 80104f4:	7561      	strb	r1, [r4, #21]
 80104f6:	1b9b      	subs	r3, r3, r6
 80104f8:	f080 0001 	eor.w	r0, r0, #1
 80104fc:	60a2      	str	r2, [r4, #8]
 80104fe:	6123      	str	r3, [r4, #16]
 8010500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010504:	2102      	movs	r1, #2
 8010506:	4620      	mov	r0, r4
 8010508:	f000 fc28 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 801050c:	b180      	cbz	r0, 8010530 <ucdr_deserialize_int16_t+0xa0>
 801050e:	7d23      	ldrb	r3, [r4, #20]
 8010510:	2b01      	cmp	r3, #1
 8010512:	68a3      	ldr	r3, [r4, #8]
 8010514:	d011      	beq.n	801053a <ucdr_deserialize_int16_t+0xaa>
 8010516:	785b      	ldrb	r3, [r3, #1]
 8010518:	702b      	strb	r3, [r5, #0]
 801051a:	68a3      	ldr	r3, [r4, #8]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	706b      	strb	r3, [r5, #1]
 8010520:	2102      	movs	r1, #2
 8010522:	68a2      	ldr	r2, [r4, #8]
 8010524:	6923      	ldr	r3, [r4, #16]
 8010526:	440a      	add	r2, r1
 8010528:	7561      	strb	r1, [r4, #21]
 801052a:	440b      	add	r3, r1
 801052c:	60a2      	str	r2, [r4, #8]
 801052e:	6123      	str	r3, [r4, #16]
 8010530:	7da0      	ldrb	r0, [r4, #22]
 8010532:	f080 0001 	eor.w	r0, r0, #1
 8010536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801053a:	881b      	ldrh	r3, [r3, #0]
 801053c:	802b      	strh	r3, [r5, #0]
 801053e:	e7ef      	b.n	8010520 <ucdr_deserialize_int16_t+0x90>
 8010540:	68a2      	ldr	r2, [r4, #8]
 8010542:	6923      	ldr	r3, [r4, #16]
 8010544:	1b92      	subs	r2, r2, r6
 8010546:	7da0      	ldrb	r0, [r4, #22]
 8010548:	1b9b      	subs	r3, r3, r6
 801054a:	f884 8015 	strb.w	r8, [r4, #21]
 801054e:	f080 0001 	eor.w	r0, r0, #1
 8010552:	60a2      	str	r2, [r4, #8]
 8010554:	6123      	str	r3, [r4, #16]
 8010556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801055a:	68a3      	ldr	r3, [r4, #8]
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	706b      	strb	r3, [r5, #1]
 8010560:	e7c2      	b.n	80104e8 <ucdr_deserialize_int16_t+0x58>
 8010562:	4639      	mov	r1, r7
 8010564:	4632      	mov	r2, r6
 8010566:	4628      	mov	r0, r5
 8010568:	f00d fb7b 	bl	801dc62 <memcpy>
 801056c:	464a      	mov	r2, r9
 801056e:	19a8      	adds	r0, r5, r6
 8010570:	68a1      	ldr	r1, [r4, #8]
 8010572:	f00d fb76 	bl	801dc62 <memcpy>
 8010576:	e7b7      	b.n	80104e8 <ucdr_deserialize_int16_t+0x58>

08010578 <ucdr_serialize_int32_t>:
 8010578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057c:	b082      	sub	sp, #8
 801057e:	4604      	mov	r4, r0
 8010580:	9101      	str	r1, [sp, #4]
 8010582:	2104      	movs	r1, #4
 8010584:	f000 fc3e 	bl	8010e04 <ucdr_buffer_alignment>
 8010588:	4601      	mov	r1, r0
 801058a:	4620      	mov	r0, r4
 801058c:	7d67      	ldrb	r7, [r4, #21]
 801058e:	f000 fc81 	bl	8010e94 <ucdr_advance_buffer>
 8010592:	2104      	movs	r1, #4
 8010594:	4620      	mov	r0, r4
 8010596:	f000 fbd5 	bl	8010d44 <ucdr_check_buffer_available_for>
 801059a:	2800      	cmp	r0, #0
 801059c:	d139      	bne.n	8010612 <ucdr_serialize_int32_t+0x9a>
 801059e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80105a2:	42ab      	cmp	r3, r5
 80105a4:	d930      	bls.n	8010608 <ucdr_serialize_int32_t+0x90>
 80105a6:	1b5e      	subs	r6, r3, r5
 80105a8:	60a3      	str	r3, [r4, #8]
 80105aa:	6923      	ldr	r3, [r4, #16]
 80105ac:	4620      	mov	r0, r4
 80105ae:	f1c6 0804 	rsb	r8, r6, #4
 80105b2:	4433      	add	r3, r6
 80105b4:	4641      	mov	r1, r8
 80105b6:	6123      	str	r3, [r4, #16]
 80105b8:	f000 fbd0 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 80105bc:	2800      	cmp	r0, #0
 80105be:	d04c      	beq.n	801065a <ucdr_serialize_int32_t+0xe2>
 80105c0:	7d23      	ldrb	r3, [r4, #20]
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d063      	beq.n	801068e <ucdr_serialize_int32_t+0x116>
 80105c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80105ca:	702b      	strb	r3, [r5, #0]
 80105cc:	2e00      	cmp	r6, #0
 80105ce:	d051      	beq.n	8010674 <ucdr_serialize_int32_t+0xfc>
 80105d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80105d4:	2e01      	cmp	r6, #1
 80105d6:	706b      	strb	r3, [r5, #1]
 80105d8:	d050      	beq.n	801067c <ucdr_serialize_int32_t+0x104>
 80105da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80105de:	2e02      	cmp	r6, #2
 80105e0:	70ab      	strb	r3, [r5, #2]
 80105e2:	d04f      	beq.n	8010684 <ucdr_serialize_int32_t+0x10c>
 80105e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80105e8:	70eb      	strb	r3, [r5, #3]
 80105ea:	6923      	ldr	r3, [r4, #16]
 80105ec:	2104      	movs	r1, #4
 80105ee:	68a2      	ldr	r2, [r4, #8]
 80105f0:	3304      	adds	r3, #4
 80105f2:	7da0      	ldrb	r0, [r4, #22]
 80105f4:	4442      	add	r2, r8
 80105f6:	7561      	strb	r1, [r4, #21]
 80105f8:	1b9e      	subs	r6, r3, r6
 80105fa:	f080 0001 	eor.w	r0, r0, #1
 80105fe:	60a2      	str	r2, [r4, #8]
 8010600:	6126      	str	r6, [r4, #16]
 8010602:	b002      	add	sp, #8
 8010604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010608:	2104      	movs	r1, #4
 801060a:	4620      	mov	r0, r4
 801060c:	f000 fba6 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 8010610:	b1d0      	cbz	r0, 8010648 <ucdr_serialize_int32_t+0xd0>
 8010612:	7d23      	ldrb	r3, [r4, #20]
 8010614:	2b01      	cmp	r3, #1
 8010616:	68a3      	ldr	r3, [r4, #8]
 8010618:	d01c      	beq.n	8010654 <ucdr_serialize_int32_t+0xdc>
 801061a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801061e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010622:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010626:	7018      	strb	r0, [r3, #0]
 8010628:	68a3      	ldr	r3, [r4, #8]
 801062a:	705a      	strb	r2, [r3, #1]
 801062c:	68a3      	ldr	r3, [r4, #8]
 801062e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010632:	7099      	strb	r1, [r3, #2]
 8010634:	68a3      	ldr	r3, [r4, #8]
 8010636:	70da      	strb	r2, [r3, #3]
 8010638:	2104      	movs	r1, #4
 801063a:	68a2      	ldr	r2, [r4, #8]
 801063c:	6923      	ldr	r3, [r4, #16]
 801063e:	440a      	add	r2, r1
 8010640:	7561      	strb	r1, [r4, #21]
 8010642:	440b      	add	r3, r1
 8010644:	60a2      	str	r2, [r4, #8]
 8010646:	6123      	str	r3, [r4, #16]
 8010648:	7da0      	ldrb	r0, [r4, #22]
 801064a:	f080 0001 	eor.w	r0, r0, #1
 801064e:	b002      	add	sp, #8
 8010650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010654:	9a01      	ldr	r2, [sp, #4]
 8010656:	601a      	str	r2, [r3, #0]
 8010658:	e7ee      	b.n	8010638 <ucdr_serialize_int32_t+0xc0>
 801065a:	68a2      	ldr	r2, [r4, #8]
 801065c:	6923      	ldr	r3, [r4, #16]
 801065e:	7da0      	ldrb	r0, [r4, #22]
 8010660:	1b92      	subs	r2, r2, r6
 8010662:	1b9b      	subs	r3, r3, r6
 8010664:	7567      	strb	r7, [r4, #21]
 8010666:	f080 0001 	eor.w	r0, r0, #1
 801066a:	60a2      	str	r2, [r4, #8]
 801066c:	6123      	str	r3, [r4, #16]
 801066e:	b002      	add	sp, #8
 8010670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010674:	68a3      	ldr	r3, [r4, #8]
 8010676:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801067a:	701a      	strb	r2, [r3, #0]
 801067c:	68a3      	ldr	r3, [r4, #8]
 801067e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010682:	701a      	strb	r2, [r3, #0]
 8010684:	68a3      	ldr	r3, [r4, #8]
 8010686:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801068a:	701a      	strb	r2, [r3, #0]
 801068c:	e7ad      	b.n	80105ea <ucdr_serialize_int32_t+0x72>
 801068e:	4628      	mov	r0, r5
 8010690:	ad01      	add	r5, sp, #4
 8010692:	4632      	mov	r2, r6
 8010694:	4629      	mov	r1, r5
 8010696:	f00d fae4 	bl	801dc62 <memcpy>
 801069a:	4642      	mov	r2, r8
 801069c:	19a9      	adds	r1, r5, r6
 801069e:	68a0      	ldr	r0, [r4, #8]
 80106a0:	f00d fadf 	bl	801dc62 <memcpy>
 80106a4:	e7a1      	b.n	80105ea <ucdr_serialize_int32_t+0x72>
 80106a6:	bf00      	nop

080106a8 <ucdr_deserialize_int32_t>:
 80106a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106ac:	4604      	mov	r4, r0
 80106ae:	460d      	mov	r5, r1
 80106b0:	2104      	movs	r1, #4
 80106b2:	f000 fba7 	bl	8010e04 <ucdr_buffer_alignment>
 80106b6:	4601      	mov	r1, r0
 80106b8:	4620      	mov	r0, r4
 80106ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 80106be:	f000 fbe9 	bl	8010e94 <ucdr_advance_buffer>
 80106c2:	2104      	movs	r1, #4
 80106c4:	4620      	mov	r0, r4
 80106c6:	f000 fb3d 	bl	8010d44 <ucdr_check_buffer_available_for>
 80106ca:	2800      	cmp	r0, #0
 80106cc:	d138      	bne.n	8010740 <ucdr_deserialize_int32_t+0x98>
 80106ce:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80106d2:	42b7      	cmp	r7, r6
 80106d4:	d92f      	bls.n	8010736 <ucdr_deserialize_int32_t+0x8e>
 80106d6:	6923      	ldr	r3, [r4, #16]
 80106d8:	4620      	mov	r0, r4
 80106da:	60a7      	str	r7, [r4, #8]
 80106dc:	1bbf      	subs	r7, r7, r6
 80106de:	443b      	add	r3, r7
 80106e0:	f1c7 0904 	rsb	r9, r7, #4
 80106e4:	6123      	str	r3, [r4, #16]
 80106e6:	4649      	mov	r1, r9
 80106e8:	f000 fb38 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 80106ec:	2800      	cmp	r0, #0
 80106ee:	d046      	beq.n	801077e <ucdr_deserialize_int32_t+0xd6>
 80106f0:	7d23      	ldrb	r3, [r4, #20]
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	d05c      	beq.n	80107b0 <ucdr_deserialize_int32_t+0x108>
 80106f6:	78f3      	ldrb	r3, [r6, #3]
 80106f8:	702b      	strb	r3, [r5, #0]
 80106fa:	2f00      	cmp	r7, #0
 80106fc:	d04c      	beq.n	8010798 <ucdr_deserialize_int32_t+0xf0>
 80106fe:	78b3      	ldrb	r3, [r6, #2]
 8010700:	2f01      	cmp	r7, #1
 8010702:	706b      	strb	r3, [r5, #1]
 8010704:	f105 0302 	add.w	r3, r5, #2
 8010708:	d04a      	beq.n	80107a0 <ucdr_deserialize_int32_t+0xf8>
 801070a:	7873      	ldrb	r3, [r6, #1]
 801070c:	2f02      	cmp	r7, #2
 801070e:	70ab      	strb	r3, [r5, #2]
 8010710:	f105 0303 	add.w	r3, r5, #3
 8010714:	d048      	beq.n	80107a8 <ucdr_deserialize_int32_t+0x100>
 8010716:	7833      	ldrb	r3, [r6, #0]
 8010718:	70eb      	strb	r3, [r5, #3]
 801071a:	6923      	ldr	r3, [r4, #16]
 801071c:	2104      	movs	r1, #4
 801071e:	68a2      	ldr	r2, [r4, #8]
 8010720:	3304      	adds	r3, #4
 8010722:	7da0      	ldrb	r0, [r4, #22]
 8010724:	444a      	add	r2, r9
 8010726:	7561      	strb	r1, [r4, #21]
 8010728:	1bdb      	subs	r3, r3, r7
 801072a:	f080 0001 	eor.w	r0, r0, #1
 801072e:	60a2      	str	r2, [r4, #8]
 8010730:	6123      	str	r3, [r4, #16]
 8010732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010736:	2104      	movs	r1, #4
 8010738:	4620      	mov	r0, r4
 801073a:	f000 fb0f 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 801073e:	b1b0      	cbz	r0, 801076e <ucdr_deserialize_int32_t+0xc6>
 8010740:	7d23      	ldrb	r3, [r4, #20]
 8010742:	2b01      	cmp	r3, #1
 8010744:	68a3      	ldr	r3, [r4, #8]
 8010746:	d017      	beq.n	8010778 <ucdr_deserialize_int32_t+0xd0>
 8010748:	78db      	ldrb	r3, [r3, #3]
 801074a:	702b      	strb	r3, [r5, #0]
 801074c:	68a3      	ldr	r3, [r4, #8]
 801074e:	789b      	ldrb	r3, [r3, #2]
 8010750:	706b      	strb	r3, [r5, #1]
 8010752:	68a3      	ldr	r3, [r4, #8]
 8010754:	785b      	ldrb	r3, [r3, #1]
 8010756:	70ab      	strb	r3, [r5, #2]
 8010758:	68a3      	ldr	r3, [r4, #8]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	70eb      	strb	r3, [r5, #3]
 801075e:	2104      	movs	r1, #4
 8010760:	68a2      	ldr	r2, [r4, #8]
 8010762:	6923      	ldr	r3, [r4, #16]
 8010764:	440a      	add	r2, r1
 8010766:	7561      	strb	r1, [r4, #21]
 8010768:	440b      	add	r3, r1
 801076a:	60a2      	str	r2, [r4, #8]
 801076c:	6123      	str	r3, [r4, #16]
 801076e:	7da0      	ldrb	r0, [r4, #22]
 8010770:	f080 0001 	eor.w	r0, r0, #1
 8010774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	602b      	str	r3, [r5, #0]
 801077c:	e7ef      	b.n	801075e <ucdr_deserialize_int32_t+0xb6>
 801077e:	68a2      	ldr	r2, [r4, #8]
 8010780:	6923      	ldr	r3, [r4, #16]
 8010782:	1bd2      	subs	r2, r2, r7
 8010784:	7da0      	ldrb	r0, [r4, #22]
 8010786:	1bdb      	subs	r3, r3, r7
 8010788:	f884 8015 	strb.w	r8, [r4, #21]
 801078c:	f080 0001 	eor.w	r0, r0, #1
 8010790:	60a2      	str	r2, [r4, #8]
 8010792:	6123      	str	r3, [r4, #16]
 8010794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010798:	68a3      	ldr	r3, [r4, #8]
 801079a:	789b      	ldrb	r3, [r3, #2]
 801079c:	706b      	strb	r3, [r5, #1]
 801079e:	1cab      	adds	r3, r5, #2
 80107a0:	68a2      	ldr	r2, [r4, #8]
 80107a2:	7852      	ldrb	r2, [r2, #1]
 80107a4:	f803 2b01 	strb.w	r2, [r3], #1
 80107a8:	68a2      	ldr	r2, [r4, #8]
 80107aa:	7812      	ldrb	r2, [r2, #0]
 80107ac:	701a      	strb	r2, [r3, #0]
 80107ae:	e7b4      	b.n	801071a <ucdr_deserialize_int32_t+0x72>
 80107b0:	4631      	mov	r1, r6
 80107b2:	463a      	mov	r2, r7
 80107b4:	4628      	mov	r0, r5
 80107b6:	f00d fa54 	bl	801dc62 <memcpy>
 80107ba:	464a      	mov	r2, r9
 80107bc:	19e8      	adds	r0, r5, r7
 80107be:	68a1      	ldr	r1, [r4, #8]
 80107c0:	f00d fa4f 	bl	801dc62 <memcpy>
 80107c4:	e7a9      	b.n	801071a <ucdr_deserialize_int32_t+0x72>
 80107c6:	bf00      	nop

080107c8 <ucdr_serialize_float>:
 80107c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107cc:	4604      	mov	r4, r0
 80107ce:	b082      	sub	sp, #8
 80107d0:	2104      	movs	r1, #4
 80107d2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80107d6:	f000 fb15 	bl	8010e04 <ucdr_buffer_alignment>
 80107da:	4601      	mov	r1, r0
 80107dc:	4620      	mov	r0, r4
 80107de:	7d67      	ldrb	r7, [r4, #21]
 80107e0:	f000 fb58 	bl	8010e94 <ucdr_advance_buffer>
 80107e4:	2104      	movs	r1, #4
 80107e6:	4620      	mov	r0, r4
 80107e8:	f000 faac 	bl	8010d44 <ucdr_check_buffer_available_for>
 80107ec:	2800      	cmp	r0, #0
 80107ee:	d139      	bne.n	8010864 <ucdr_serialize_float+0x9c>
 80107f0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80107f4:	42ab      	cmp	r3, r5
 80107f6:	d930      	bls.n	801085a <ucdr_serialize_float+0x92>
 80107f8:	1b5e      	subs	r6, r3, r5
 80107fa:	60a3      	str	r3, [r4, #8]
 80107fc:	6923      	ldr	r3, [r4, #16]
 80107fe:	4620      	mov	r0, r4
 8010800:	f1c6 0804 	rsb	r8, r6, #4
 8010804:	4433      	add	r3, r6
 8010806:	4641      	mov	r1, r8
 8010808:	6123      	str	r3, [r4, #16]
 801080a:	f000 faa7 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 801080e:	2800      	cmp	r0, #0
 8010810:	d04c      	beq.n	80108ac <ucdr_serialize_float+0xe4>
 8010812:	7d23      	ldrb	r3, [r4, #20]
 8010814:	2b01      	cmp	r3, #1
 8010816:	d063      	beq.n	80108e0 <ucdr_serialize_float+0x118>
 8010818:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801081c:	702b      	strb	r3, [r5, #0]
 801081e:	2e00      	cmp	r6, #0
 8010820:	d051      	beq.n	80108c6 <ucdr_serialize_float+0xfe>
 8010822:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010826:	2e01      	cmp	r6, #1
 8010828:	706b      	strb	r3, [r5, #1]
 801082a:	d050      	beq.n	80108ce <ucdr_serialize_float+0x106>
 801082c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010830:	2e02      	cmp	r6, #2
 8010832:	70ab      	strb	r3, [r5, #2]
 8010834:	d04f      	beq.n	80108d6 <ucdr_serialize_float+0x10e>
 8010836:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801083a:	70eb      	strb	r3, [r5, #3]
 801083c:	6923      	ldr	r3, [r4, #16]
 801083e:	2104      	movs	r1, #4
 8010840:	68a2      	ldr	r2, [r4, #8]
 8010842:	3304      	adds	r3, #4
 8010844:	7da0      	ldrb	r0, [r4, #22]
 8010846:	4442      	add	r2, r8
 8010848:	7561      	strb	r1, [r4, #21]
 801084a:	1b9e      	subs	r6, r3, r6
 801084c:	f080 0001 	eor.w	r0, r0, #1
 8010850:	60a2      	str	r2, [r4, #8]
 8010852:	6126      	str	r6, [r4, #16]
 8010854:	b002      	add	sp, #8
 8010856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801085a:	2104      	movs	r1, #4
 801085c:	4620      	mov	r0, r4
 801085e:	f000 fa7d 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 8010862:	b1d0      	cbz	r0, 801089a <ucdr_serialize_float+0xd2>
 8010864:	7d23      	ldrb	r3, [r4, #20]
 8010866:	2b01      	cmp	r3, #1
 8010868:	68a3      	ldr	r3, [r4, #8]
 801086a:	d01c      	beq.n	80108a6 <ucdr_serialize_float+0xde>
 801086c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010870:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010874:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010878:	7018      	strb	r0, [r3, #0]
 801087a:	68a3      	ldr	r3, [r4, #8]
 801087c:	705a      	strb	r2, [r3, #1]
 801087e:	68a3      	ldr	r3, [r4, #8]
 8010880:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010884:	7099      	strb	r1, [r3, #2]
 8010886:	68a3      	ldr	r3, [r4, #8]
 8010888:	70da      	strb	r2, [r3, #3]
 801088a:	2104      	movs	r1, #4
 801088c:	68a2      	ldr	r2, [r4, #8]
 801088e:	6923      	ldr	r3, [r4, #16]
 8010890:	440a      	add	r2, r1
 8010892:	7561      	strb	r1, [r4, #21]
 8010894:	440b      	add	r3, r1
 8010896:	60a2      	str	r2, [r4, #8]
 8010898:	6123      	str	r3, [r4, #16]
 801089a:	7da0      	ldrb	r0, [r4, #22]
 801089c:	f080 0001 	eor.w	r0, r0, #1
 80108a0:	b002      	add	sp, #8
 80108a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a6:	9a01      	ldr	r2, [sp, #4]
 80108a8:	601a      	str	r2, [r3, #0]
 80108aa:	e7ee      	b.n	801088a <ucdr_serialize_float+0xc2>
 80108ac:	68a2      	ldr	r2, [r4, #8]
 80108ae:	6923      	ldr	r3, [r4, #16]
 80108b0:	7da0      	ldrb	r0, [r4, #22]
 80108b2:	1b92      	subs	r2, r2, r6
 80108b4:	1b9b      	subs	r3, r3, r6
 80108b6:	7567      	strb	r7, [r4, #21]
 80108b8:	f080 0001 	eor.w	r0, r0, #1
 80108bc:	60a2      	str	r2, [r4, #8]
 80108be:	6123      	str	r3, [r4, #16]
 80108c0:	b002      	add	sp, #8
 80108c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c6:	68a3      	ldr	r3, [r4, #8]
 80108c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80108cc:	701a      	strb	r2, [r3, #0]
 80108ce:	68a3      	ldr	r3, [r4, #8]
 80108d0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80108d4:	701a      	strb	r2, [r3, #0]
 80108d6:	68a3      	ldr	r3, [r4, #8]
 80108d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80108dc:	701a      	strb	r2, [r3, #0]
 80108de:	e7ad      	b.n	801083c <ucdr_serialize_float+0x74>
 80108e0:	4628      	mov	r0, r5
 80108e2:	ad01      	add	r5, sp, #4
 80108e4:	4632      	mov	r2, r6
 80108e6:	4629      	mov	r1, r5
 80108e8:	f00d f9bb 	bl	801dc62 <memcpy>
 80108ec:	4642      	mov	r2, r8
 80108ee:	19a9      	adds	r1, r5, r6
 80108f0:	68a0      	ldr	r0, [r4, #8]
 80108f2:	f00d f9b6 	bl	801dc62 <memcpy>
 80108f6:	e7a1      	b.n	801083c <ucdr_serialize_float+0x74>

080108f8 <ucdr_deserialize_float>:
 80108f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108fc:	4604      	mov	r4, r0
 80108fe:	460d      	mov	r5, r1
 8010900:	2104      	movs	r1, #4
 8010902:	f000 fa7f 	bl	8010e04 <ucdr_buffer_alignment>
 8010906:	4601      	mov	r1, r0
 8010908:	4620      	mov	r0, r4
 801090a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801090e:	f000 fac1 	bl	8010e94 <ucdr_advance_buffer>
 8010912:	2104      	movs	r1, #4
 8010914:	4620      	mov	r0, r4
 8010916:	f000 fa15 	bl	8010d44 <ucdr_check_buffer_available_for>
 801091a:	2800      	cmp	r0, #0
 801091c:	d138      	bne.n	8010990 <ucdr_deserialize_float+0x98>
 801091e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010922:	42b7      	cmp	r7, r6
 8010924:	d92f      	bls.n	8010986 <ucdr_deserialize_float+0x8e>
 8010926:	6923      	ldr	r3, [r4, #16]
 8010928:	4620      	mov	r0, r4
 801092a:	60a7      	str	r7, [r4, #8]
 801092c:	1bbf      	subs	r7, r7, r6
 801092e:	443b      	add	r3, r7
 8010930:	f1c7 0904 	rsb	r9, r7, #4
 8010934:	6123      	str	r3, [r4, #16]
 8010936:	4649      	mov	r1, r9
 8010938:	f000 fa10 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 801093c:	2800      	cmp	r0, #0
 801093e:	d046      	beq.n	80109ce <ucdr_deserialize_float+0xd6>
 8010940:	7d23      	ldrb	r3, [r4, #20]
 8010942:	2b01      	cmp	r3, #1
 8010944:	d05c      	beq.n	8010a00 <ucdr_deserialize_float+0x108>
 8010946:	78f3      	ldrb	r3, [r6, #3]
 8010948:	702b      	strb	r3, [r5, #0]
 801094a:	2f00      	cmp	r7, #0
 801094c:	d04c      	beq.n	80109e8 <ucdr_deserialize_float+0xf0>
 801094e:	78b3      	ldrb	r3, [r6, #2]
 8010950:	2f01      	cmp	r7, #1
 8010952:	706b      	strb	r3, [r5, #1]
 8010954:	f105 0302 	add.w	r3, r5, #2
 8010958:	d04a      	beq.n	80109f0 <ucdr_deserialize_float+0xf8>
 801095a:	7873      	ldrb	r3, [r6, #1]
 801095c:	2f02      	cmp	r7, #2
 801095e:	70ab      	strb	r3, [r5, #2]
 8010960:	f105 0303 	add.w	r3, r5, #3
 8010964:	d048      	beq.n	80109f8 <ucdr_deserialize_float+0x100>
 8010966:	7833      	ldrb	r3, [r6, #0]
 8010968:	70eb      	strb	r3, [r5, #3]
 801096a:	6923      	ldr	r3, [r4, #16]
 801096c:	2104      	movs	r1, #4
 801096e:	68a2      	ldr	r2, [r4, #8]
 8010970:	3304      	adds	r3, #4
 8010972:	7da0      	ldrb	r0, [r4, #22]
 8010974:	444a      	add	r2, r9
 8010976:	7561      	strb	r1, [r4, #21]
 8010978:	1bdb      	subs	r3, r3, r7
 801097a:	f080 0001 	eor.w	r0, r0, #1
 801097e:	60a2      	str	r2, [r4, #8]
 8010980:	6123      	str	r3, [r4, #16]
 8010982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010986:	2104      	movs	r1, #4
 8010988:	4620      	mov	r0, r4
 801098a:	f000 f9e7 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 801098e:	b1b0      	cbz	r0, 80109be <ucdr_deserialize_float+0xc6>
 8010990:	7d23      	ldrb	r3, [r4, #20]
 8010992:	2b01      	cmp	r3, #1
 8010994:	68a3      	ldr	r3, [r4, #8]
 8010996:	d017      	beq.n	80109c8 <ucdr_deserialize_float+0xd0>
 8010998:	78db      	ldrb	r3, [r3, #3]
 801099a:	702b      	strb	r3, [r5, #0]
 801099c:	68a3      	ldr	r3, [r4, #8]
 801099e:	789b      	ldrb	r3, [r3, #2]
 80109a0:	706b      	strb	r3, [r5, #1]
 80109a2:	68a3      	ldr	r3, [r4, #8]
 80109a4:	785b      	ldrb	r3, [r3, #1]
 80109a6:	70ab      	strb	r3, [r5, #2]
 80109a8:	68a3      	ldr	r3, [r4, #8]
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	70eb      	strb	r3, [r5, #3]
 80109ae:	2104      	movs	r1, #4
 80109b0:	68a2      	ldr	r2, [r4, #8]
 80109b2:	6923      	ldr	r3, [r4, #16]
 80109b4:	440a      	add	r2, r1
 80109b6:	7561      	strb	r1, [r4, #21]
 80109b8:	440b      	add	r3, r1
 80109ba:	60a2      	str	r2, [r4, #8]
 80109bc:	6123      	str	r3, [r4, #16]
 80109be:	7da0      	ldrb	r0, [r4, #22]
 80109c0:	f080 0001 	eor.w	r0, r0, #1
 80109c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	602b      	str	r3, [r5, #0]
 80109cc:	e7ef      	b.n	80109ae <ucdr_deserialize_float+0xb6>
 80109ce:	68a2      	ldr	r2, [r4, #8]
 80109d0:	6923      	ldr	r3, [r4, #16]
 80109d2:	1bd2      	subs	r2, r2, r7
 80109d4:	7da0      	ldrb	r0, [r4, #22]
 80109d6:	1bdb      	subs	r3, r3, r7
 80109d8:	f884 8015 	strb.w	r8, [r4, #21]
 80109dc:	f080 0001 	eor.w	r0, r0, #1
 80109e0:	60a2      	str	r2, [r4, #8]
 80109e2:	6123      	str	r3, [r4, #16]
 80109e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109e8:	68a3      	ldr	r3, [r4, #8]
 80109ea:	789b      	ldrb	r3, [r3, #2]
 80109ec:	706b      	strb	r3, [r5, #1]
 80109ee:	1cab      	adds	r3, r5, #2
 80109f0:	68a2      	ldr	r2, [r4, #8]
 80109f2:	7852      	ldrb	r2, [r2, #1]
 80109f4:	f803 2b01 	strb.w	r2, [r3], #1
 80109f8:	68a2      	ldr	r2, [r4, #8]
 80109fa:	7812      	ldrb	r2, [r2, #0]
 80109fc:	701a      	strb	r2, [r3, #0]
 80109fe:	e7b4      	b.n	801096a <ucdr_deserialize_float+0x72>
 8010a00:	4631      	mov	r1, r6
 8010a02:	463a      	mov	r2, r7
 8010a04:	4628      	mov	r0, r5
 8010a06:	f00d f92c 	bl	801dc62 <memcpy>
 8010a0a:	464a      	mov	r2, r9
 8010a0c:	19e8      	adds	r0, r5, r7
 8010a0e:	68a1      	ldr	r1, [r4, #8]
 8010a10:	f00d f927 	bl	801dc62 <memcpy>
 8010a14:	e7a9      	b.n	801096a <ucdr_deserialize_float+0x72>
 8010a16:	bf00      	nop

08010a18 <ucdr_serialize_double>:
 8010a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a1c:	4604      	mov	r4, r0
 8010a1e:	b082      	sub	sp, #8
 8010a20:	2108      	movs	r1, #8
 8010a22:	ed8d 0b00 	vstr	d0, [sp]
 8010a26:	f000 f9ed 	bl	8010e04 <ucdr_buffer_alignment>
 8010a2a:	4601      	mov	r1, r0
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	7d67      	ldrb	r7, [r4, #21]
 8010a30:	f000 fa30 	bl	8010e94 <ucdr_advance_buffer>
 8010a34:	2108      	movs	r1, #8
 8010a36:	4620      	mov	r0, r4
 8010a38:	f000 f984 	bl	8010d44 <ucdr_check_buffer_available_for>
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d14e      	bne.n	8010ade <ucdr_serialize_double+0xc6>
 8010a40:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010a44:	42ab      	cmp	r3, r5
 8010a46:	d945      	bls.n	8010ad4 <ucdr_serialize_double+0xbc>
 8010a48:	1b5e      	subs	r6, r3, r5
 8010a4a:	60a3      	str	r3, [r4, #8]
 8010a4c:	6923      	ldr	r3, [r4, #16]
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f1c6 0808 	rsb	r8, r6, #8
 8010a54:	4433      	add	r3, r6
 8010a56:	4641      	mov	r1, r8
 8010a58:	6123      	str	r3, [r4, #16]
 8010a5a:	f000 f97f 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d074      	beq.n	8010b4c <ucdr_serialize_double+0x134>
 8010a62:	7d23      	ldrb	r3, [r4, #20]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	f000 809b 	beq.w	8010ba0 <ucdr_serialize_double+0x188>
 8010a6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010a6e:	702b      	strb	r3, [r5, #0]
 8010a70:	2e00      	cmp	r6, #0
 8010a72:	d078      	beq.n	8010b66 <ucdr_serialize_double+0x14e>
 8010a74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010a78:	2e01      	cmp	r6, #1
 8010a7a:	706b      	strb	r3, [r5, #1]
 8010a7c:	d077      	beq.n	8010b6e <ucdr_serialize_double+0x156>
 8010a7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010a82:	2e02      	cmp	r6, #2
 8010a84:	70ab      	strb	r3, [r5, #2]
 8010a86:	d076      	beq.n	8010b76 <ucdr_serialize_double+0x15e>
 8010a88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010a8c:	2e03      	cmp	r6, #3
 8010a8e:	70eb      	strb	r3, [r5, #3]
 8010a90:	d075      	beq.n	8010b7e <ucdr_serialize_double+0x166>
 8010a92:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010a96:	2e04      	cmp	r6, #4
 8010a98:	712b      	strb	r3, [r5, #4]
 8010a9a:	d074      	beq.n	8010b86 <ucdr_serialize_double+0x16e>
 8010a9c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010aa0:	2e05      	cmp	r6, #5
 8010aa2:	716b      	strb	r3, [r5, #5]
 8010aa4:	d073      	beq.n	8010b8e <ucdr_serialize_double+0x176>
 8010aa6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010aaa:	2e06      	cmp	r6, #6
 8010aac:	71ab      	strb	r3, [r5, #6]
 8010aae:	d072      	beq.n	8010b96 <ucdr_serialize_double+0x17e>
 8010ab0:	f89d 3000 	ldrb.w	r3, [sp]
 8010ab4:	71eb      	strb	r3, [r5, #7]
 8010ab6:	6923      	ldr	r3, [r4, #16]
 8010ab8:	2108      	movs	r1, #8
 8010aba:	68a2      	ldr	r2, [r4, #8]
 8010abc:	3308      	adds	r3, #8
 8010abe:	7da0      	ldrb	r0, [r4, #22]
 8010ac0:	4442      	add	r2, r8
 8010ac2:	7561      	strb	r1, [r4, #21]
 8010ac4:	1b9e      	subs	r6, r3, r6
 8010ac6:	f080 0001 	eor.w	r0, r0, #1
 8010aca:	60a2      	str	r2, [r4, #8]
 8010acc:	6126      	str	r6, [r4, #16]
 8010ace:	b002      	add	sp, #8
 8010ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad4:	2108      	movs	r1, #8
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 f940 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 8010adc:	b350      	cbz	r0, 8010b34 <ucdr_serialize_double+0x11c>
 8010ade:	7d23      	ldrb	r3, [r4, #20]
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d02d      	beq.n	8010b40 <ucdr_serialize_double+0x128>
 8010ae4:	68a3      	ldr	r3, [r4, #8]
 8010ae6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010aea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010aee:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010af2:	7018      	strb	r0, [r3, #0]
 8010af4:	68a3      	ldr	r3, [r4, #8]
 8010af6:	705a      	strb	r2, [r3, #1]
 8010af8:	68a3      	ldr	r3, [r4, #8]
 8010afa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010afe:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8010b02:	7099      	strb	r1, [r3, #2]
 8010b04:	68a3      	ldr	r3, [r4, #8]
 8010b06:	70da      	strb	r2, [r3, #3]
 8010b08:	68a3      	ldr	r3, [r4, #8]
 8010b0a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010b0e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010b12:	7118      	strb	r0, [r3, #4]
 8010b14:	68a3      	ldr	r3, [r4, #8]
 8010b16:	715a      	strb	r2, [r3, #5]
 8010b18:	68a3      	ldr	r3, [r4, #8]
 8010b1a:	f89d 2000 	ldrb.w	r2, [sp]
 8010b1e:	7199      	strb	r1, [r3, #6]
 8010b20:	68a3      	ldr	r3, [r4, #8]
 8010b22:	71da      	strb	r2, [r3, #7]
 8010b24:	2108      	movs	r1, #8
 8010b26:	68a2      	ldr	r2, [r4, #8]
 8010b28:	6923      	ldr	r3, [r4, #16]
 8010b2a:	440a      	add	r2, r1
 8010b2c:	7561      	strb	r1, [r4, #21]
 8010b2e:	440b      	add	r3, r1
 8010b30:	60a2      	str	r2, [r4, #8]
 8010b32:	6123      	str	r3, [r4, #16]
 8010b34:	7da0      	ldrb	r0, [r4, #22]
 8010b36:	f080 0001 	eor.w	r0, r0, #1
 8010b3a:	b002      	add	sp, #8
 8010b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b40:	466b      	mov	r3, sp
 8010b42:	68a2      	ldr	r2, [r4, #8]
 8010b44:	cb03      	ldmia	r3!, {r0, r1}
 8010b46:	6010      	str	r0, [r2, #0]
 8010b48:	6051      	str	r1, [r2, #4]
 8010b4a:	e7eb      	b.n	8010b24 <ucdr_serialize_double+0x10c>
 8010b4c:	68a2      	ldr	r2, [r4, #8]
 8010b4e:	6923      	ldr	r3, [r4, #16]
 8010b50:	7da0      	ldrb	r0, [r4, #22]
 8010b52:	1b92      	subs	r2, r2, r6
 8010b54:	1b9b      	subs	r3, r3, r6
 8010b56:	7567      	strb	r7, [r4, #21]
 8010b58:	f080 0001 	eor.w	r0, r0, #1
 8010b5c:	60a2      	str	r2, [r4, #8]
 8010b5e:	6123      	str	r3, [r4, #16]
 8010b60:	b002      	add	sp, #8
 8010b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b66:	68a3      	ldr	r3, [r4, #8]
 8010b68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010b6c:	701a      	strb	r2, [r3, #0]
 8010b6e:	68a3      	ldr	r3, [r4, #8]
 8010b70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010b74:	701a      	strb	r2, [r3, #0]
 8010b76:	68a3      	ldr	r3, [r4, #8]
 8010b78:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010b7c:	701a      	strb	r2, [r3, #0]
 8010b7e:	68a3      	ldr	r3, [r4, #8]
 8010b80:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010b84:	701a      	strb	r2, [r3, #0]
 8010b86:	68a3      	ldr	r3, [r4, #8]
 8010b88:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010b8c:	701a      	strb	r2, [r3, #0]
 8010b8e:	68a3      	ldr	r3, [r4, #8]
 8010b90:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010b94:	701a      	strb	r2, [r3, #0]
 8010b96:	68a3      	ldr	r3, [r4, #8]
 8010b98:	f89d 2000 	ldrb.w	r2, [sp]
 8010b9c:	701a      	strb	r2, [r3, #0]
 8010b9e:	e78a      	b.n	8010ab6 <ucdr_serialize_double+0x9e>
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	466d      	mov	r5, sp
 8010ba4:	4632      	mov	r2, r6
 8010ba6:	4629      	mov	r1, r5
 8010ba8:	f00d f85b 	bl	801dc62 <memcpy>
 8010bac:	4642      	mov	r2, r8
 8010bae:	19a9      	adds	r1, r5, r6
 8010bb0:	68a0      	ldr	r0, [r4, #8]
 8010bb2:	f00d f856 	bl	801dc62 <memcpy>
 8010bb6:	e77e      	b.n	8010ab6 <ucdr_serialize_double+0x9e>

08010bb8 <ucdr_deserialize_double>:
 8010bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	460d      	mov	r5, r1
 8010bc0:	2108      	movs	r1, #8
 8010bc2:	f000 f91f 	bl	8010e04 <ucdr_buffer_alignment>
 8010bc6:	4601      	mov	r1, r0
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010bce:	f000 f961 	bl	8010e94 <ucdr_advance_buffer>
 8010bd2:	2108      	movs	r1, #8
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f000 f8b5 	bl	8010d44 <ucdr_check_buffer_available_for>
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d151      	bne.n	8010c82 <ucdr_deserialize_double+0xca>
 8010bde:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010be2:	42be      	cmp	r6, r7
 8010be4:	d948      	bls.n	8010c78 <ucdr_deserialize_double+0xc0>
 8010be6:	6923      	ldr	r3, [r4, #16]
 8010be8:	4620      	mov	r0, r4
 8010bea:	60a6      	str	r6, [r4, #8]
 8010bec:	1bf6      	subs	r6, r6, r7
 8010bee:	4433      	add	r3, r6
 8010bf0:	f1c6 0908 	rsb	r9, r6, #8
 8010bf4:	6123      	str	r3, [r4, #16]
 8010bf6:	4649      	mov	r1, r9
 8010bf8:	f000 f8b0 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	d06d      	beq.n	8010cdc <ucdr_deserialize_double+0x124>
 8010c00:	7d23      	ldrb	r3, [r4, #20]
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	f000 8093 	beq.w	8010d2e <ucdr_deserialize_double+0x176>
 8010c08:	79fb      	ldrb	r3, [r7, #7]
 8010c0a:	702b      	strb	r3, [r5, #0]
 8010c0c:	2e00      	cmp	r6, #0
 8010c0e:	d072      	beq.n	8010cf6 <ucdr_deserialize_double+0x13e>
 8010c10:	79bb      	ldrb	r3, [r7, #6]
 8010c12:	2e01      	cmp	r6, #1
 8010c14:	706b      	strb	r3, [r5, #1]
 8010c16:	f105 0302 	add.w	r3, r5, #2
 8010c1a:	d070      	beq.n	8010cfe <ucdr_deserialize_double+0x146>
 8010c1c:	797b      	ldrb	r3, [r7, #5]
 8010c1e:	2e02      	cmp	r6, #2
 8010c20:	70ab      	strb	r3, [r5, #2]
 8010c22:	f105 0303 	add.w	r3, r5, #3
 8010c26:	d06e      	beq.n	8010d06 <ucdr_deserialize_double+0x14e>
 8010c28:	793b      	ldrb	r3, [r7, #4]
 8010c2a:	2e03      	cmp	r6, #3
 8010c2c:	70eb      	strb	r3, [r5, #3]
 8010c2e:	f105 0304 	add.w	r3, r5, #4
 8010c32:	d06c      	beq.n	8010d0e <ucdr_deserialize_double+0x156>
 8010c34:	78fb      	ldrb	r3, [r7, #3]
 8010c36:	2e04      	cmp	r6, #4
 8010c38:	712b      	strb	r3, [r5, #4]
 8010c3a:	f105 0305 	add.w	r3, r5, #5
 8010c3e:	d06a      	beq.n	8010d16 <ucdr_deserialize_double+0x15e>
 8010c40:	78bb      	ldrb	r3, [r7, #2]
 8010c42:	2e05      	cmp	r6, #5
 8010c44:	716b      	strb	r3, [r5, #5]
 8010c46:	f105 0306 	add.w	r3, r5, #6
 8010c4a:	d068      	beq.n	8010d1e <ucdr_deserialize_double+0x166>
 8010c4c:	787b      	ldrb	r3, [r7, #1]
 8010c4e:	2e06      	cmp	r6, #6
 8010c50:	71ab      	strb	r3, [r5, #6]
 8010c52:	f105 0307 	add.w	r3, r5, #7
 8010c56:	d066      	beq.n	8010d26 <ucdr_deserialize_double+0x16e>
 8010c58:	783b      	ldrb	r3, [r7, #0]
 8010c5a:	71eb      	strb	r3, [r5, #7]
 8010c5c:	6923      	ldr	r3, [r4, #16]
 8010c5e:	2108      	movs	r1, #8
 8010c60:	68a2      	ldr	r2, [r4, #8]
 8010c62:	3308      	adds	r3, #8
 8010c64:	7da0      	ldrb	r0, [r4, #22]
 8010c66:	444a      	add	r2, r9
 8010c68:	7561      	strb	r1, [r4, #21]
 8010c6a:	1b9e      	subs	r6, r3, r6
 8010c6c:	f080 0001 	eor.w	r0, r0, #1
 8010c70:	60a2      	str	r2, [r4, #8]
 8010c72:	6126      	str	r6, [r4, #16]
 8010c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c78:	2108      	movs	r1, #8
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	f000 f86e 	bl	8010d5c <ucdr_check_final_buffer_behavior>
 8010c80:	b310      	cbz	r0, 8010cc8 <ucdr_deserialize_double+0x110>
 8010c82:	7d23      	ldrb	r3, [r4, #20]
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	68a3      	ldr	r3, [r4, #8]
 8010c88:	d023      	beq.n	8010cd2 <ucdr_deserialize_double+0x11a>
 8010c8a:	79db      	ldrb	r3, [r3, #7]
 8010c8c:	702b      	strb	r3, [r5, #0]
 8010c8e:	68a3      	ldr	r3, [r4, #8]
 8010c90:	799b      	ldrb	r3, [r3, #6]
 8010c92:	706b      	strb	r3, [r5, #1]
 8010c94:	68a3      	ldr	r3, [r4, #8]
 8010c96:	795b      	ldrb	r3, [r3, #5]
 8010c98:	70ab      	strb	r3, [r5, #2]
 8010c9a:	68a3      	ldr	r3, [r4, #8]
 8010c9c:	791b      	ldrb	r3, [r3, #4]
 8010c9e:	70eb      	strb	r3, [r5, #3]
 8010ca0:	68a3      	ldr	r3, [r4, #8]
 8010ca2:	78db      	ldrb	r3, [r3, #3]
 8010ca4:	712b      	strb	r3, [r5, #4]
 8010ca6:	68a3      	ldr	r3, [r4, #8]
 8010ca8:	789b      	ldrb	r3, [r3, #2]
 8010caa:	716b      	strb	r3, [r5, #5]
 8010cac:	68a3      	ldr	r3, [r4, #8]
 8010cae:	785b      	ldrb	r3, [r3, #1]
 8010cb0:	71ab      	strb	r3, [r5, #6]
 8010cb2:	68a3      	ldr	r3, [r4, #8]
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	71eb      	strb	r3, [r5, #7]
 8010cb8:	2108      	movs	r1, #8
 8010cba:	68a2      	ldr	r2, [r4, #8]
 8010cbc:	6923      	ldr	r3, [r4, #16]
 8010cbe:	440a      	add	r2, r1
 8010cc0:	7561      	strb	r1, [r4, #21]
 8010cc2:	440b      	add	r3, r1
 8010cc4:	60a2      	str	r2, [r4, #8]
 8010cc6:	6123      	str	r3, [r4, #16]
 8010cc8:	7da0      	ldrb	r0, [r4, #22]
 8010cca:	f080 0001 	eor.w	r0, r0, #1
 8010cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cd2:	681a      	ldr	r2, [r3, #0]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	602a      	str	r2, [r5, #0]
 8010cd8:	606b      	str	r3, [r5, #4]
 8010cda:	e7ed      	b.n	8010cb8 <ucdr_deserialize_double+0x100>
 8010cdc:	68a2      	ldr	r2, [r4, #8]
 8010cde:	6923      	ldr	r3, [r4, #16]
 8010ce0:	1b92      	subs	r2, r2, r6
 8010ce2:	7da0      	ldrb	r0, [r4, #22]
 8010ce4:	1b9b      	subs	r3, r3, r6
 8010ce6:	f884 8015 	strb.w	r8, [r4, #21]
 8010cea:	f080 0001 	eor.w	r0, r0, #1
 8010cee:	60a2      	str	r2, [r4, #8]
 8010cf0:	6123      	str	r3, [r4, #16]
 8010cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cf6:	68a3      	ldr	r3, [r4, #8]
 8010cf8:	799b      	ldrb	r3, [r3, #6]
 8010cfa:	706b      	strb	r3, [r5, #1]
 8010cfc:	1cab      	adds	r3, r5, #2
 8010cfe:	68a2      	ldr	r2, [r4, #8]
 8010d00:	7952      	ldrb	r2, [r2, #5]
 8010d02:	f803 2b01 	strb.w	r2, [r3], #1
 8010d06:	68a2      	ldr	r2, [r4, #8]
 8010d08:	7912      	ldrb	r2, [r2, #4]
 8010d0a:	f803 2b01 	strb.w	r2, [r3], #1
 8010d0e:	68a2      	ldr	r2, [r4, #8]
 8010d10:	78d2      	ldrb	r2, [r2, #3]
 8010d12:	f803 2b01 	strb.w	r2, [r3], #1
 8010d16:	68a2      	ldr	r2, [r4, #8]
 8010d18:	7892      	ldrb	r2, [r2, #2]
 8010d1a:	f803 2b01 	strb.w	r2, [r3], #1
 8010d1e:	68a2      	ldr	r2, [r4, #8]
 8010d20:	7852      	ldrb	r2, [r2, #1]
 8010d22:	f803 2b01 	strb.w	r2, [r3], #1
 8010d26:	68a2      	ldr	r2, [r4, #8]
 8010d28:	7812      	ldrb	r2, [r2, #0]
 8010d2a:	701a      	strb	r2, [r3, #0]
 8010d2c:	e796      	b.n	8010c5c <ucdr_deserialize_double+0xa4>
 8010d2e:	4639      	mov	r1, r7
 8010d30:	4632      	mov	r2, r6
 8010d32:	4628      	mov	r0, r5
 8010d34:	f00c ff95 	bl	801dc62 <memcpy>
 8010d38:	464a      	mov	r2, r9
 8010d3a:	19a8      	adds	r0, r5, r6
 8010d3c:	68a1      	ldr	r1, [r4, #8]
 8010d3e:	f00c ff90 	bl	801dc62 <memcpy>
 8010d42:	e78b      	b.n	8010c5c <ucdr_deserialize_double+0xa4>

08010d44 <ucdr_check_buffer_available_for>:
 8010d44:	7d83      	ldrb	r3, [r0, #22]
 8010d46:	b93b      	cbnz	r3, 8010d58 <ucdr_check_buffer_available_for+0x14>
 8010d48:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010d4c:	4419      	add	r1, r3
 8010d4e:	4288      	cmp	r0, r1
 8010d50:	bf34      	ite	cc
 8010d52:	2000      	movcc	r0, #0
 8010d54:	2001      	movcs	r0, #1
 8010d56:	4770      	bx	lr
 8010d58:	2000      	movs	r0, #0
 8010d5a:	4770      	bx	lr

08010d5c <ucdr_check_final_buffer_behavior>:
 8010d5c:	7d83      	ldrb	r3, [r0, #22]
 8010d5e:	b943      	cbnz	r3, 8010d72 <ucdr_check_final_buffer_behavior+0x16>
 8010d60:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010d64:	b510      	push	{r4, lr}
 8010d66:	4291      	cmp	r1, r2
 8010d68:	4604      	mov	r4, r0
 8010d6a:	d205      	bcs.n	8010d78 <ucdr_check_final_buffer_behavior+0x1c>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	4618      	mov	r0, r3
 8010d70:	bd10      	pop	{r4, pc}
 8010d72:	2300      	movs	r3, #0
 8010d74:	4618      	mov	r0, r3
 8010d76:	4770      	bx	lr
 8010d78:	6982      	ldr	r2, [r0, #24]
 8010d7a:	b13a      	cbz	r2, 8010d8c <ucdr_check_final_buffer_behavior+0x30>
 8010d7c:	69c1      	ldr	r1, [r0, #28]
 8010d7e:	4790      	blx	r2
 8010d80:	f080 0301 	eor.w	r3, r0, #1
 8010d84:	75a0      	strb	r0, [r4, #22]
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	4618      	mov	r0, r3
 8010d8a:	bd10      	pop	{r4, pc}
 8010d8c:	2001      	movs	r0, #1
 8010d8e:	75a0      	strb	r0, [r4, #22]
 8010d90:	e7fa      	b.n	8010d88 <ucdr_check_final_buffer_behavior+0x2c>
 8010d92:	bf00      	nop

08010d94 <ucdr_set_on_full_buffer_callback>:
 8010d94:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop

08010d9c <ucdr_init_buffer_origin_offset_endian>:
 8010d9c:	b410      	push	{r4}
 8010d9e:	9c01      	ldr	r4, [sp, #4]
 8010da0:	440a      	add	r2, r1
 8010da2:	6001      	str	r1, [r0, #0]
 8010da4:	6042      	str	r2, [r0, #4]
 8010da6:	190a      	adds	r2, r1, r4
 8010da8:	441c      	add	r4, r3
 8010daa:	6082      	str	r2, [r0, #8]
 8010dac:	2200      	movs	r2, #0
 8010dae:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8010db2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010db6:	7542      	strb	r2, [r0, #21]
 8010db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dbc:	7582      	strb	r2, [r0, #22]
 8010dbe:	7503      	strb	r3, [r0, #20]
 8010dc0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop

08010dc8 <ucdr_init_buffer_origin_offset>:
 8010dc8:	b510      	push	{r4, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	9c04      	ldr	r4, [sp, #16]
 8010dce:	9400      	str	r4, [sp, #0]
 8010dd0:	2401      	movs	r4, #1
 8010dd2:	9401      	str	r4, [sp, #4]
 8010dd4:	f7ff ffe2 	bl	8010d9c <ucdr_init_buffer_origin_offset_endian>
 8010dd8:	b002      	add	sp, #8
 8010dda:	bd10      	pop	{r4, pc}

08010ddc <ucdr_init_buffer_origin>:
 8010ddc:	b510      	push	{r4, lr}
 8010dde:	2400      	movs	r4, #0
 8010de0:	b082      	sub	sp, #8
 8010de2:	9400      	str	r4, [sp, #0]
 8010de4:	f7ff fff0 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 8010de8:	b002      	add	sp, #8
 8010dea:	bd10      	pop	{r4, pc}

08010dec <ucdr_init_buffer>:
 8010dec:	2300      	movs	r3, #0
 8010dee:	f7ff bff5 	b.w	8010ddc <ucdr_init_buffer_origin>
 8010df2:	bf00      	nop

08010df4 <ucdr_alignment>:
 8010df4:	fbb0 f2f1 	udiv	r2, r0, r1
 8010df8:	fb02 0011 	mls	r0, r2, r1, r0
 8010dfc:	1e4b      	subs	r3, r1, #1
 8010dfe:	1a08      	subs	r0, r1, r0
 8010e00:	4018      	ands	r0, r3
 8010e02:	4770      	bx	lr

08010e04 <ucdr_buffer_alignment>:
 8010e04:	7d43      	ldrb	r3, [r0, #21]
 8010e06:	428b      	cmp	r3, r1
 8010e08:	d209      	bcs.n	8010e1e <ucdr_buffer_alignment+0x1a>
 8010e0a:	6903      	ldr	r3, [r0, #16]
 8010e0c:	1e4a      	subs	r2, r1, #1
 8010e0e:	fbb3 f0f1 	udiv	r0, r3, r1
 8010e12:	fb01 3010 	mls	r0, r1, r0, r3
 8010e16:	1a09      	subs	r1, r1, r0
 8010e18:	ea01 0002 	and.w	r0, r1, r2
 8010e1c:	4770      	bx	lr
 8010e1e:	2000      	movs	r0, #0
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop

08010e24 <ucdr_align_to>:
 8010e24:	b538      	push	{r3, r4, r5, lr}
 8010e26:	4604      	mov	r4, r0
 8010e28:	460d      	mov	r5, r1
 8010e2a:	f7ff ffeb 	bl	8010e04 <ucdr_buffer_alignment>
 8010e2e:	68a3      	ldr	r3, [r4, #8]
 8010e30:	7565      	strb	r5, [r4, #21]
 8010e32:	181a      	adds	r2, r3, r0
 8010e34:	6923      	ldr	r3, [r4, #16]
 8010e36:	4418      	add	r0, r3
 8010e38:	6863      	ldr	r3, [r4, #4]
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	6120      	str	r0, [r4, #16]
 8010e3e:	bf28      	it	cs
 8010e40:	4613      	movcs	r3, r2
 8010e42:	60a3      	str	r3, [r4, #8]
 8010e44:	bd38      	pop	{r3, r4, r5, pc}
 8010e46:	bf00      	nop

08010e48 <ucdr_buffer_length>:
 8010e48:	6882      	ldr	r2, [r0, #8]
 8010e4a:	6800      	ldr	r0, [r0, #0]
 8010e4c:	1a10      	subs	r0, r2, r0
 8010e4e:	4770      	bx	lr

08010e50 <ucdr_buffer_remaining>:
 8010e50:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010e54:	1a10      	subs	r0, r2, r0
 8010e56:	4770      	bx	lr

08010e58 <ucdr_check_final_buffer_behavior_array>:
 8010e58:	b538      	push	{r3, r4, r5, lr}
 8010e5a:	7d83      	ldrb	r3, [r0, #22]
 8010e5c:	b9a3      	cbnz	r3, 8010e88 <ucdr_check_final_buffer_behavior_array+0x30>
 8010e5e:	4604      	mov	r4, r0
 8010e60:	460d      	mov	r5, r1
 8010e62:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d300      	bcc.n	8010e6c <ucdr_check_final_buffer_behavior_array+0x14>
 8010e6a:	b931      	cbnz	r1, 8010e7a <ucdr_check_final_buffer_behavior_array+0x22>
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f7ff ffef 	bl	8010e50 <ucdr_buffer_remaining>
 8010e72:	42a8      	cmp	r0, r5
 8010e74:	bf28      	it	cs
 8010e76:	4628      	movcs	r0, r5
 8010e78:	bd38      	pop	{r3, r4, r5, pc}
 8010e7a:	6983      	ldr	r3, [r0, #24]
 8010e7c:	b133      	cbz	r3, 8010e8c <ucdr_check_final_buffer_behavior_array+0x34>
 8010e7e:	69c1      	ldr	r1, [r0, #28]
 8010e80:	4798      	blx	r3
 8010e82:	75a0      	strb	r0, [r4, #22]
 8010e84:	2800      	cmp	r0, #0
 8010e86:	d0f1      	beq.n	8010e6c <ucdr_check_final_buffer_behavior_array+0x14>
 8010e88:	2000      	movs	r0, #0
 8010e8a:	bd38      	pop	{r3, r4, r5, pc}
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	7583      	strb	r3, [r0, #22]
 8010e90:	e7fa      	b.n	8010e88 <ucdr_check_final_buffer_behavior_array+0x30>
 8010e92:	bf00      	nop

08010e94 <ucdr_advance_buffer>:
 8010e94:	b538      	push	{r3, r4, r5, lr}
 8010e96:	4604      	mov	r4, r0
 8010e98:	460d      	mov	r5, r1
 8010e9a:	f7ff ff53 	bl	8010d44 <ucdr_check_buffer_available_for>
 8010e9e:	b178      	cbz	r0, 8010ec0 <ucdr_advance_buffer+0x2c>
 8010ea0:	6923      	ldr	r3, [r4, #16]
 8010ea2:	68a2      	ldr	r2, [r4, #8]
 8010ea4:	442b      	add	r3, r5
 8010ea6:	442a      	add	r2, r5
 8010ea8:	6123      	str	r3, [r4, #16]
 8010eaa:	2301      	movs	r3, #1
 8010eac:	60a2      	str	r2, [r4, #8]
 8010eae:	7563      	strb	r3, [r4, #21]
 8010eb0:	bd38      	pop	{r3, r4, r5, pc}
 8010eb2:	68a2      	ldr	r2, [r4, #8]
 8010eb4:	1a2d      	subs	r5, r5, r0
 8010eb6:	6923      	ldr	r3, [r4, #16]
 8010eb8:	4402      	add	r2, r0
 8010eba:	4418      	add	r0, r3
 8010ebc:	60a2      	str	r2, [r4, #8]
 8010ebe:	6120      	str	r0, [r4, #16]
 8010ec0:	4629      	mov	r1, r5
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f7ff ffc7 	bl	8010e58 <ucdr_check_final_buffer_behavior_array>
 8010eca:	2800      	cmp	r0, #0
 8010ecc:	d1f1      	bne.n	8010eb2 <ucdr_advance_buffer+0x1e>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	7563      	strb	r3, [r4, #21]
 8010ed2:	bd38      	pop	{r3, r4, r5, pc}

08010ed4 <_rclc_check_for_new_data>:
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	d046      	beq.n	8010f66 <_rclc_check_for_new_data+0x92>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	b530      	push	{r4, r5, lr}
 8010edc:	7802      	ldrb	r2, [r0, #0]
 8010ede:	b085      	sub	sp, #20
 8010ee0:	2a0a      	cmp	r2, #10
 8010ee2:	d842      	bhi.n	8010f6a <_rclc_check_for_new_data+0x96>
 8010ee4:	e8df f002 	tbb	[pc, r2]
 8010ee8:	14181212 	.word	0x14181212
 8010eec:	06060614 	.word	0x06060614
 8010ef0:	2e1a      	.short	0x2e1a
 8010ef2:	16          	.byte	0x16
 8010ef3:	00          	.byte	0x00
 8010ef4:	6a0a      	ldr	r2, [r1, #32]
 8010ef6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010ef8:	2000      	movs	r0, #0
 8010efa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010efe:	1a12      	subs	r2, r2, r0
 8010f00:	bf18      	it	ne
 8010f02:	2201      	movne	r2, #1
 8010f04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8010f08:	b005      	add	sp, #20
 8010f0a:	bd30      	pop	{r4, r5, pc}
 8010f0c:	680a      	ldr	r2, [r1, #0]
 8010f0e:	e7f2      	b.n	8010ef6 <_rclc_check_for_new_data+0x22>
 8010f10:	698a      	ldr	r2, [r1, #24]
 8010f12:	e7f0      	b.n	8010ef6 <_rclc_check_for_new_data+0x22>
 8010f14:	688a      	ldr	r2, [r1, #8]
 8010f16:	e7ee      	b.n	8010ef6 <_rclc_check_for_new_data+0x22>
 8010f18:	690a      	ldr	r2, [r1, #16]
 8010f1a:	e7ec      	b.n	8010ef6 <_rclc_check_for_new_data+0x22>
 8010f1c:	685c      	ldr	r4, [r3, #4]
 8010f1e:	4608      	mov	r0, r1
 8010f20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f28:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 8010f2c:	f104 0110 	add.w	r1, r4, #16
 8010f30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010f34:	9500      	str	r5, [sp, #0]
 8010f36:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8010f3a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8010f3e:	f003 ffff 	bl	8014f40 <rcl_action_client_wait_set_get_entities_ready>
 8010f42:	e7e1      	b.n	8010f08 <_rclc_check_for_new_data+0x34>
 8010f44:	685c      	ldr	r4, [r3, #4]
 8010f46:	4608      	mov	r0, r1
 8010f48:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 8010f4c:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 8010f50:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8010f54:	e9cd 2100 	strd	r2, r1, [sp]
 8010f58:	f104 0220 	add.w	r2, r4, #32
 8010f5c:	f104 0110 	add.w	r1, r4, #16
 8010f60:	f004 fa08 	bl	8015374 <rcl_action_server_wait_set_get_entities_ready>
 8010f64:	e7d0      	b.n	8010f08 <_rclc_check_for_new_data+0x34>
 8010f66:	200b      	movs	r0, #11
 8010f68:	4770      	bx	lr
 8010f6a:	2001      	movs	r0, #1
 8010f6c:	e7cc      	b.n	8010f08 <_rclc_check_for_new_data+0x34>
 8010f6e:	bf00      	nop

08010f70 <_rclc_take_new_data>:
 8010f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f72:	b09b      	sub	sp, #108	@ 0x6c
 8010f74:	2800      	cmp	r0, #0
 8010f76:	f000 8088 	beq.w	801108a <_rclc_take_new_data+0x11a>
 8010f7a:	7803      	ldrb	r3, [r0, #0]
 8010f7c:	4604      	mov	r4, r0
 8010f7e:	2b0a      	cmp	r3, #10
 8010f80:	f200 8167 	bhi.w	8011252 <_rclc_take_new_data+0x2e2>
 8010f84:	e8df f003 	tbb	[pc, r3]
 8010f88:	44152d2d 	.word	0x44152d2d
 8010f8c:	19191944 	.word	0x19191944
 8010f90:	065a      	.short	0x065a
 8010f92:	15          	.byte	0x15
 8010f93:	00          	.byte	0x00
 8010f94:	6840      	ldr	r0, [r0, #4]
 8010f96:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f040 80b2 	bne.w	8011104 <_rclc_take_new_data+0x194>
 8010fa0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f040 80e4 	bne.w	8011172 <_rclc_take_new_data+0x202>
 8010faa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d16f      	bne.n	8011092 <_rclc_take_new_data+0x122>
 8010fb2:	2500      	movs	r5, #0
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	b01b      	add	sp, #108	@ 0x6c
 8010fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fba:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8010fbc:	6a0b      	ldr	r3, [r1, #32]
 8010fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d0f5      	beq.n	8010fb2 <_rclc_take_new_data+0x42>
 8010fc6:	6882      	ldr	r2, [r0, #8]
 8010fc8:	f100 0110 	add.w	r1, r0, #16
 8010fcc:	6840      	ldr	r0, [r0, #4]
 8010fce:	f002 fc75 	bl	80138bc <rcl_take_request>
 8010fd2:	4605      	mov	r5, r0
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	d0ec      	beq.n	8010fb2 <_rclc_take_new_data+0x42>
 8010fd8:	f240 2359 	movw	r3, #601	@ 0x259
 8010fdc:	4298      	cmp	r0, r3
 8010fde:	d013      	beq.n	8011008 <_rclc_take_new_data+0x98>
 8010fe0:	e029      	b.n	8011036 <_rclc_take_new_data+0xc6>
 8010fe2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8010fe4:	680b      	ldr	r3, [r1, #0]
 8010fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d0e1      	beq.n	8010fb2 <_rclc_take_new_data+0x42>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	aa0a      	add	r2, sp, #40	@ 0x28
 8010ff2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8010ff6:	f002 fda5 	bl	8013b44 <rcl_take>
 8010ffa:	4605      	mov	r5, r0
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	d0d9      	beq.n	8010fb4 <_rclc_take_new_data+0x44>
 8011000:	f240 1391 	movw	r3, #401	@ 0x191
 8011004:	4298      	cmp	r0, r3
 8011006:	d116      	bne.n	8011036 <_rclc_take_new_data+0xc6>
 8011008:	2300      	movs	r3, #0
 801100a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801100e:	e7d1      	b.n	8010fb4 <_rclc_take_new_data+0x44>
 8011010:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8011012:	698b      	ldr	r3, [r1, #24]
 8011014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d0ca      	beq.n	8010fb2 <_rclc_take_new_data+0x42>
 801101c:	6882      	ldr	r2, [r0, #8]
 801101e:	f100 0110 	add.w	r1, r0, #16
 8011022:	6840      	ldr	r0, [r0, #4]
 8011024:	f001 fcec 	bl	8012a00 <rcl_take_response>
 8011028:	4605      	mov	r5, r0
 801102a:	2800      	cmp	r0, #0
 801102c:	d0c1      	beq.n	8010fb2 <_rclc_take_new_data+0x42>
 801102e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011032:	4298      	cmp	r0, r3
 8011034:	d0be      	beq.n	8010fb4 <_rclc_take_new_data+0x44>
 8011036:	f000 feef 	bl	8011e18 <rcutils_reset_error>
 801103a:	e7bb      	b.n	8010fb4 <_rclc_take_new_data+0x44>
 801103c:	6840      	ldr	r0, [r0, #4]
 801103e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8011042:	2b00      	cmp	r3, #0
 8011044:	d17d      	bne.n	8011142 <_rclc_take_new_data+0x1d2>
 8011046:	69c3      	ldr	r3, [r0, #28]
 8011048:	b11b      	cbz	r3, 8011052 <_rclc_take_new_data+0xe2>
 801104a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801104e:	2b00      	cmp	r3, #0
 8011050:	d144      	bne.n	80110dc <_rclc_take_new_data+0x16c>
 8011052:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011056:	2b00      	cmp	r3, #0
 8011058:	f040 80ac 	bne.w	80111b4 <_rclc_take_new_data+0x244>
 801105c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8011060:	2b00      	cmp	r3, #0
 8011062:	d0a6      	beq.n	8010fb2 <_rclc_take_new_data+0x42>
 8011064:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8011066:	a90a      	add	r1, sp, #40	@ 0x28
 8011068:	3010      	adds	r0, #16
 801106a:	f003 fe41 	bl	8014cf0 <rcl_action_take_result_response>
 801106e:	4605      	mov	r5, r0
 8011070:	2800      	cmp	r0, #0
 8011072:	d1e0      	bne.n	8011036 <_rclc_take_new_data+0xc6>
 8011074:	6860      	ldr	r0, [r4, #4]
 8011076:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801107a:	f004 faab 	bl	80155d4 <rclc_action_find_handle_by_result_request_sequence_number>
 801107e:	2800      	cmp	r0, #0
 8011080:	d098      	beq.n	8010fb4 <_rclc_take_new_data+0x44>
 8011082:	2301      	movs	r3, #1
 8011084:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8011088:	e794      	b.n	8010fb4 <_rclc_take_new_data+0x44>
 801108a:	250b      	movs	r5, #11
 801108c:	4628      	mov	r0, r5
 801108e:	b01b      	add	sp, #108	@ 0x6c
 8011090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011092:	ae04      	add	r6, sp, #16
 8011094:	3010      	adds	r0, #16
 8011096:	aa0a      	add	r2, sp, #40	@ 0x28
 8011098:	4631      	mov	r1, r6
 801109a:	f004 f89f 	bl	80151dc <rcl_action_take_cancel_request>
 801109e:	4605      	mov	r5, r0
 80110a0:	2800      	cmp	r0, #0
 80110a2:	d1c8      	bne.n	8011036 <_rclc_take_new_data+0xc6>
 80110a4:	a90a      	add	r1, sp, #40	@ 0x28
 80110a6:	6860      	ldr	r0, [r4, #4]
 80110a8:	f004 fa54 	bl	8015554 <rclc_action_find_goal_handle_by_uuid>
 80110ac:	4607      	mov	r7, r0
 80110ae:	2800      	cmp	r0, #0
 80110b0:	f000 80bb 	beq.w	801122a <_rclc_take_new_data+0x2ba>
 80110b4:	2101      	movs	r1, #1
 80110b6:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80110ba:	f004 f9d5 	bl	8015468 <rcl_action_transition_goal_state>
 80110be:	2803      	cmp	r0, #3
 80110c0:	4684      	mov	ip, r0
 80110c2:	f040 80a7 	bne.w	8011214 <_rclc_take_new_data+0x2a4>
 80110c6:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80110ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80110cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110ce:	e896 0003 	ldmia.w	r6, {r0, r1}
 80110d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80110d6:	f887 c008 	strb.w	ip, [r7, #8]
 80110da:	e76b      	b.n	8010fb4 <_rclc_take_new_data+0x44>
 80110dc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80110de:	3010      	adds	r0, #16
 80110e0:	f003 fe86 	bl	8014df0 <rcl_action_take_feedback>
 80110e4:	4605      	mov	r5, r0
 80110e6:	2800      	cmp	r0, #0
 80110e8:	d1a5      	bne.n	8011036 <_rclc_take_new_data+0xc6>
 80110ea:	6860      	ldr	r0, [r4, #4]
 80110ec:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80110ee:	f004 fa31 	bl	8015554 <rclc_action_find_goal_handle_by_uuid>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2800      	cmp	r0, #0
 80110f6:	f000 80a3 	beq.w	8011240 <_rclc_take_new_data+0x2d0>
 80110fa:	2201      	movs	r2, #1
 80110fc:	6860      	ldr	r0, [r4, #4]
 80110fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8011102:	e7a6      	b.n	8011052 <_rclc_take_new_data+0xe2>
 8011104:	f004 fa00 	bl	8015508 <rclc_action_take_goal_handle>
 8011108:	4606      	mov	r6, r0
 801110a:	6860      	ldr	r0, [r4, #4]
 801110c:	2e00      	cmp	r6, #0
 801110e:	f43f af47 	beq.w	8010fa0 <_rclc_take_new_data+0x30>
 8011112:	6070      	str	r0, [r6, #4]
 8011114:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8011118:	69f2      	ldr	r2, [r6, #28]
 801111a:	3010      	adds	r0, #16
 801111c:	f003 ffa6 	bl	801506c <rcl_action_take_goal_request>
 8011120:	4605      	mov	r5, r0
 8011122:	2800      	cmp	r0, #0
 8011124:	f040 808e 	bne.w	8011244 <_rclc_take_new_data+0x2d4>
 8011128:	69f7      	ldr	r7, [r6, #28]
 801112a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801112c:	7235      	strb	r5, [r6, #8]
 801112e:	f8c6 0009 	str.w	r0, [r6, #9]
 8011132:	f8c6 100d 	str.w	r1, [r6, #13]
 8011136:	6860      	ldr	r0, [r4, #4]
 8011138:	f8c6 2011 	str.w	r2, [r6, #17]
 801113c:	f8c6 3015 	str.w	r3, [r6, #21]
 8011140:	e72e      	b.n	8010fa0 <_rclc_take_new_data+0x30>
 8011142:	aa04      	add	r2, sp, #16
 8011144:	a90a      	add	r1, sp, #40	@ 0x28
 8011146:	3010      	adds	r0, #16
 8011148:	f003 fd5a 	bl	8014c00 <rcl_action_take_goal_response>
 801114c:	4605      	mov	r5, r0
 801114e:	2800      	cmp	r0, #0
 8011150:	f47f af71 	bne.w	8011036 <_rclc_take_new_data+0xc6>
 8011154:	6860      	ldr	r0, [r4, #4]
 8011156:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801115a:	f004 fa29 	bl	80155b0 <rclc_action_find_handle_by_goal_request_sequence_number>
 801115e:	b130      	cbz	r0, 801116e <_rclc_take_new_data+0x1fe>
 8011160:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8011164:	2201      	movs	r2, #1
 8011166:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801116a:	f880 2020 	strb.w	r2, [r0, #32]
 801116e:	6860      	ldr	r0, [r4, #4]
 8011170:	e769      	b.n	8011046 <_rclc_take_new_data+0xd6>
 8011172:	3010      	adds	r0, #16
 8011174:	aa04      	add	r2, sp, #16
 8011176:	a90a      	add	r1, sp, #40	@ 0x28
 8011178:	f003 fff0 	bl	801515c <rcl_action_take_result_request>
 801117c:	4605      	mov	r5, r0
 801117e:	2800      	cmp	r0, #0
 8011180:	f47f af59 	bne.w	8011036 <_rclc_take_new_data+0xc6>
 8011184:	a904      	add	r1, sp, #16
 8011186:	6860      	ldr	r0, [r4, #4]
 8011188:	f004 f9e4 	bl	8015554 <rclc_action_find_goal_handle_by_uuid>
 801118c:	4607      	mov	r7, r0
 801118e:	b160      	cbz	r0, 80111aa <_rclc_take_new_data+0x23a>
 8011190:	ad0a      	add	r5, sp, #40	@ 0x28
 8011192:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8011196:	f04f 0c02 	mov.w	ip, #2
 801119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801119c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801119e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80111a2:	e886 0003 	stmia.w	r6, {r0, r1}
 80111a6:	f887 c008 	strb.w	ip, [r7, #8]
 80111aa:	6860      	ldr	r0, [r4, #4]
 80111ac:	2300      	movs	r3, #0
 80111ae:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80111b2:	e6fa      	b.n	8010faa <_rclc_take_new_data+0x3a>
 80111b4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80111b8:	a90a      	add	r1, sp, #40	@ 0x28
 80111ba:	3010      	adds	r0, #16
 80111bc:	f003 fdd8 	bl	8014d70 <rcl_action_take_cancel_response>
 80111c0:	4605      	mov	r5, r0
 80111c2:	2800      	cmp	r0, #0
 80111c4:	f47f af37 	bne.w	8011036 <_rclc_take_new_data+0xc6>
 80111c8:	6860      	ldr	r0, [r4, #4]
 80111ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80111ce:	f004 fa13 	bl	80155f8 <rclc_action_find_handle_by_cancel_request_sequence_number>
 80111d2:	4606      	mov	r6, r0
 80111d4:	6860      	ldr	r0, [r4, #4]
 80111d6:	2e00      	cmp	r6, #0
 80111d8:	f43f af40 	beq.w	801105c <_rclc_take_new_data+0xec>
 80111dc:	2701      	movs	r7, #1
 80111de:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80111e0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	f43f af3a 	beq.w	801105c <_rclc_take_new_data+0xec>
 80111e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80111ea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80111ee:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80111f2:	f004 f9af 	bl	8015554 <rclc_action_find_goal_handle_by_uuid>
 80111f6:	b138      	cbz	r0, 8011208 <_rclc_take_new_data+0x298>
 80111f8:	6860      	ldr	r0, [r4, #4]
 80111fa:	3501      	adds	r5, #1
 80111fc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8011200:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8011202:	42ab      	cmp	r3, r5
 8011204:	d8f0      	bhi.n	80111e8 <_rclc_take_new_data+0x278>
 8011206:	e729      	b.n	801105c <_rclc_take_new_data+0xec>
 8011208:	6860      	ldr	r0, [r4, #4]
 801120a:	3501      	adds	r5, #1
 801120c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801120e:	42ab      	cmp	r3, r5
 8011210:	d8ea      	bhi.n	80111e8 <_rclc_take_new_data+0x278>
 8011212:	e723      	b.n	801105c <_rclc_take_new_data+0xec>
 8011214:	ab06      	add	r3, sp, #24
 8011216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011218:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801121c:	2103      	movs	r1, #3
 801121e:	6860      	ldr	r0, [r4, #4]
 8011220:	e896 000c 	ldmia.w	r6, {r2, r3}
 8011224:	f004 fa5c 	bl	80156e0 <rclc_action_server_goal_cancel_reject>
 8011228:	e6c4      	b.n	8010fb4 <_rclc_take_new_data+0x44>
 801122a:	ab06      	add	r3, sp, #24
 801122c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801122e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011232:	2102      	movs	r1, #2
 8011234:	6860      	ldr	r0, [r4, #4]
 8011236:	e896 000c 	ldmia.w	r6, {r2, r3}
 801123a:	f004 fa51 	bl	80156e0 <rclc_action_server_goal_cancel_reject>
 801123e:	e6b9      	b.n	8010fb4 <_rclc_take_new_data+0x44>
 8011240:	6860      	ldr	r0, [r4, #4]
 8011242:	e706      	b.n	8011052 <_rclc_take_new_data+0xe2>
 8011244:	4631      	mov	r1, r6
 8011246:	6860      	ldr	r0, [r4, #4]
 8011248:	f004 f96e 	bl	8015528 <rclc_action_remove_used_goal_handle>
 801124c:	f000 fde4 	bl	8011e18 <rcutils_reset_error>
 8011250:	e6b0      	b.n	8010fb4 <_rclc_take_new_data+0x44>
 8011252:	2501      	movs	r5, #1
 8011254:	e6ae      	b.n	8010fb4 <_rclc_take_new_data+0x44>
 8011256:	bf00      	nop

08011258 <_rclc_execute.part.0>:
 8011258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801125a:	7803      	ldrb	r3, [r0, #0]
 801125c:	b085      	sub	sp, #20
 801125e:	4604      	mov	r4, r0
 8011260:	2b0a      	cmp	r3, #10
 8011262:	f200 8139 	bhi.w	80114d8 <_rclc_execute.part.0+0x280>
 8011266:	e8df f003 	tbb	[pc, r3]
 801126a:	4268      	.short	0x4268
 801126c:	06a75b4d 	.word	0x06a75b4d
 8011270:	721d0606 	.word	0x721d0606
 8011274:	62          	.byte	0x62
 8011275:	00          	.byte	0x00
 8011276:	2b06      	cmp	r3, #6
 8011278:	f000 8126 	beq.w	80114c8 <_rclc_execute.part.0+0x270>
 801127c:	2b07      	cmp	r3, #7
 801127e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011280:	f040 811c 	bne.w	80114bc <_rclc_execute.part.0+0x264>
 8011284:	f104 0510 	add.w	r5, r4, #16
 8011288:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 801128c:	6880      	ldr	r0, [r0, #8]
 801128e:	4798      	blx	r3
 8011290:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011292:	4629      	mov	r1, r5
 8011294:	6860      	ldr	r0, [r4, #4]
 8011296:	f002 fb51 	bl	801393c <rcl_send_response>
 801129a:	4604      	mov	r4, r0
 801129c:	b378      	cbz	r0, 80112fe <_rclc_execute.part.0+0xa6>
 801129e:	f000 fdbb 	bl	8011e18 <rcutils_reset_error>
 80112a2:	e02c      	b.n	80112fe <_rclc_execute.part.0+0xa6>
 80112a4:	6840      	ldr	r0, [r0, #4]
 80112a6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	f000 808e 	beq.w	80113cc <_rclc_execute.part.0+0x174>
 80112b0:	2600      	movs	r6, #0
 80112b2:	2701      	movs	r7, #1
 80112b4:	e004      	b.n	80112c0 <_rclc_execute.part.0+0x68>
 80112b6:	f004 f901 	bl	80154bc <rclc_action_send_result_request>
 80112ba:	b998      	cbnz	r0, 80112e4 <_rclc_execute.part.0+0x8c>
 80112bc:	722f      	strb	r7, [r5, #8]
 80112be:	6860      	ldr	r0, [r4, #4]
 80112c0:	f004 f9ac 	bl	801561c <rclc_action_find_first_handle_with_goal_response>
 80112c4:	4605      	mov	r5, r0
 80112c6:	2800      	cmp	r0, #0
 80112c8:	d07f      	beq.n	80113ca <_rclc_execute.part.0+0x172>
 80112ca:	6863      	ldr	r3, [r4, #4]
 80112cc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80112ce:	699b      	ldr	r3, [r3, #24]
 80112d0:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80112d4:	f885 6020 	strb.w	r6, [r5, #32]
 80112d8:	4798      	blx	r3
 80112da:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80112de:	4628      	mov	r0, r5
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1e8      	bne.n	80112b6 <_rclc_execute.part.0+0x5e>
 80112e4:	6860      	ldr	r0, [r4, #4]
 80112e6:	4629      	mov	r1, r5
 80112e8:	f004 f91e 	bl	8015528 <rclc_action_remove_used_goal_handle>
 80112ec:	e7e7      	b.n	80112be <_rclc_execute.part.0+0x66>
 80112ee:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80112f2:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 80112f6:	b100      	cbz	r0, 80112fa <_rclc_execute.part.0+0xa2>
 80112f8:	68a0      	ldr	r0, [r4, #8]
 80112fa:	2400      	movs	r4, #0
 80112fc:	4798      	blx	r3
 80112fe:	4620      	mov	r0, r4
 8011300:	b005      	add	sp, #20
 8011302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011304:	6840      	ldr	r0, [r0, #4]
 8011306:	f002 fd31 	bl	8013d6c <rcl_timer_call>
 801130a:	f240 3321 	movw	r3, #801	@ 0x321
 801130e:	4604      	mov	r4, r0
 8011310:	4298      	cmp	r0, r3
 8011312:	d001      	beq.n	8011318 <_rclc_execute.part.0+0xc0>
 8011314:	2800      	cmp	r0, #0
 8011316:	d1c2      	bne.n	801129e <_rclc_execute.part.0+0x46>
 8011318:	2400      	movs	r4, #0
 801131a:	4620      	mov	r0, r4
 801131c:	b005      	add	sp, #20
 801131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011320:	2400      	movs	r4, #0
 8011322:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011324:	6880      	ldr	r0, [r0, #8]
 8011326:	4798      	blx	r3
 8011328:	4620      	mov	r0, r4
 801132a:	b005      	add	sp, #20
 801132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801132e:	2400      	movs	r4, #0
 8011330:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011332:	4798      	blx	r3
 8011334:	4620      	mov	r0, r4
 8011336:	b005      	add	sp, #20
 8011338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801133a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801133e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011340:	b100      	cbz	r0, 8011344 <_rclc_execute.part.0+0xec>
 8011342:	68a0      	ldr	r0, [r4, #8]
 8011344:	2400      	movs	r4, #0
 8011346:	4798      	blx	r3
 8011348:	4620      	mov	r0, r4
 801134a:	b005      	add	sp, #20
 801134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801134e:	6840      	ldr	r0, [r0, #4]
 8011350:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8011354:	bb3b      	cbnz	r3, 80113a6 <_rclc_execute.part.0+0x14e>
 8011356:	f890 3020 	ldrb.w	r3, [r0, #32]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d07d      	beq.n	801145a <_rclc_execute.part.0+0x202>
 801135e:	f640 0634 	movw	r6, #2100	@ 0x834
 8011362:	2701      	movs	r7, #1
 8011364:	e007      	b.n	8011376 <_rclc_execute.part.0+0x11e>
 8011366:	4628      	mov	r0, r5
 8011368:	f004 f970 	bl	801564c <rclc_action_server_response_goal_request>
 801136c:	4629      	mov	r1, r5
 801136e:	6860      	ldr	r0, [r4, #4]
 8011370:	f004 f8da 	bl	8015528 <rclc_action_remove_used_goal_handle>
 8011374:	6860      	ldr	r0, [r4, #4]
 8011376:	2100      	movs	r1, #0
 8011378:	f004 f902 	bl	8015580 <rclc_action_find_first_handle_by_status>
 801137c:	4605      	mov	r5, r0
 801137e:	2800      	cmp	r0, #0
 8011380:	d068      	beq.n	8011454 <_rclc_execute.part.0+0x1fc>
 8011382:	6863      	ldr	r3, [r4, #4]
 8011384:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011386:	699b      	ldr	r3, [r3, #24]
 8011388:	4798      	blx	r3
 801138a:	42b0      	cmp	r0, r6
 801138c:	f04f 0100 	mov.w	r1, #0
 8011390:	d1e9      	bne.n	8011366 <_rclc_execute.part.0+0x10e>
 8011392:	2101      	movs	r1, #1
 8011394:	4628      	mov	r0, r5
 8011396:	f004 f959 	bl	801564c <rclc_action_server_response_goal_request>
 801139a:	722f      	strb	r7, [r5, #8]
 801139c:	e7ea      	b.n	8011374 <_rclc_execute.part.0+0x11c>
 801139e:	6848      	ldr	r0, [r1, #4]
 80113a0:	f004 f8c2 	bl	8015528 <rclc_action_remove_used_goal_handle>
 80113a4:	6860      	ldr	r0, [r4, #4]
 80113a6:	f004 f8f7 	bl	8015598 <rclc_action_find_first_terminated_handle>
 80113aa:	4601      	mov	r1, r0
 80113ac:	2800      	cmp	r0, #0
 80113ae:	d1f6      	bne.n	801139e <_rclc_execute.part.0+0x146>
 80113b0:	6860      	ldr	r0, [r4, #4]
 80113b2:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80113b6:	e7ce      	b.n	8011356 <_rclc_execute.part.0+0xfe>
 80113b8:	2400      	movs	r4, #0
 80113ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80113bc:	f100 0110 	add.w	r1, r0, #16
 80113c0:	6880      	ldr	r0, [r0, #8]
 80113c2:	4798      	blx	r3
 80113c4:	4620      	mov	r0, r4
 80113c6:	b005      	add	sp, #20
 80113c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113ca:	6860      	ldr	r0, [r4, #4]
 80113cc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80113d0:	b18b      	cbz	r3, 80113f6 <_rclc_execute.part.0+0x19e>
 80113d2:	68c5      	ldr	r5, [r0, #12]
 80113d4:	b32d      	cbz	r5, 8011422 <_rclc_execute.part.0+0x1ca>
 80113d6:	2600      	movs	r6, #0
 80113d8:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80113dc:	b143      	cbz	r3, 80113f0 <_rclc_execute.part.0+0x198>
 80113de:	69c3      	ldr	r3, [r0, #28]
 80113e0:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80113e4:	b123      	cbz	r3, 80113f0 <_rclc_execute.part.0+0x198>
 80113e6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80113e8:	4628      	mov	r0, r5
 80113ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80113ec:	4798      	blx	r3
 80113ee:	6860      	ldr	r0, [r4, #4]
 80113f0:	682d      	ldr	r5, [r5, #0]
 80113f2:	2d00      	cmp	r5, #0
 80113f4:	d1f0      	bne.n	80113d8 <_rclc_execute.part.0+0x180>
 80113f6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80113fa:	b193      	cbz	r3, 8011422 <_rclc_execute.part.0+0x1ca>
 80113fc:	68c5      	ldr	r5, [r0, #12]
 80113fe:	b185      	cbz	r5, 8011422 <_rclc_execute.part.0+0x1ca>
 8011400:	2600      	movs	r6, #0
 8011402:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8011406:	b14b      	cbz	r3, 801141c <_rclc_execute.part.0+0x1c4>
 8011408:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801140a:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 801140e:	b12b      	cbz	r3, 801141c <_rclc_execute.part.0+0x1c4>
 8011410:	4628      	mov	r0, r5
 8011412:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8011416:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011418:	4798      	blx	r3
 801141a:	6860      	ldr	r0, [r4, #4]
 801141c:	682d      	ldr	r5, [r5, #0]
 801141e:	2d00      	cmp	r5, #0
 8011420:	d1ef      	bne.n	8011402 <_rclc_execute.part.0+0x1aa>
 8011422:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8011426:	2b00      	cmp	r3, #0
 8011428:	f43f af76 	beq.w	8011318 <_rclc_execute.part.0+0xc0>
 801142c:	2700      	movs	r7, #0
 801142e:	e00b      	b.n	8011448 <_rclc_execute.part.0+0x1f0>
 8011430:	6863      	ldr	r3, [r4, #4]
 8011432:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011434:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011436:	6a1e      	ldr	r6, [r3, #32]
 8011438:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 801143c:	47b0      	blx	r6
 801143e:	6860      	ldr	r0, [r4, #4]
 8011440:	4629      	mov	r1, r5
 8011442:	f004 f871 	bl	8015528 <rclc_action_remove_used_goal_handle>
 8011446:	6860      	ldr	r0, [r4, #4]
 8011448:	f004 f8f4 	bl	8015634 <rclc_action_find_first_handle_with_result_response>
 801144c:	4605      	mov	r5, r0
 801144e:	2800      	cmp	r0, #0
 8011450:	d1ee      	bne.n	8011430 <_rclc_execute.part.0+0x1d8>
 8011452:	e761      	b.n	8011318 <_rclc_execute.part.0+0xc0>
 8011454:	6860      	ldr	r0, [r4, #4]
 8011456:	f880 5020 	strb.w	r5, [r0, #32]
 801145a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801145e:	2b00      	cmp	r3, #0
 8011460:	f43f af5a 	beq.w	8011318 <_rclc_execute.part.0+0xc0>
 8011464:	68c5      	ldr	r5, [r0, #12]
 8011466:	b1b5      	cbz	r5, 8011496 <_rclc_execute.part.0+0x23e>
 8011468:	2602      	movs	r6, #2
 801146a:	e001      	b.n	8011470 <_rclc_execute.part.0+0x218>
 801146c:	682d      	ldr	r5, [r5, #0]
 801146e:	b195      	cbz	r5, 8011496 <_rclc_execute.part.0+0x23e>
 8011470:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8011474:	2b03      	cmp	r3, #3
 8011476:	d1f9      	bne.n	801146c <_rclc_execute.part.0+0x214>
 8011478:	69c3      	ldr	r3, [r0, #28]
 801147a:	4628      	mov	r0, r5
 801147c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801147e:	4798      	blx	r3
 8011480:	4603      	mov	r3, r0
 8011482:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8011486:	4628      	mov	r0, r5
 8011488:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 801148c:	b143      	cbz	r3, 80114a0 <_rclc_execute.part.0+0x248>
 801148e:	f004 f8fb 	bl	8015688 <rclc_action_server_goal_cancel_accept>
 8011492:	6860      	ldr	r0, [r4, #4]
 8011494:	e7ea      	b.n	801146c <_rclc_execute.part.0+0x214>
 8011496:	2300      	movs	r3, #0
 8011498:	461c      	mov	r4, r3
 801149a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801149e:	e72e      	b.n	80112fe <_rclc_execute.part.0+0xa6>
 80114a0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80114a2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 80114a6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80114aa:	2101      	movs	r1, #1
 80114ac:	6860      	ldr	r0, [r4, #4]
 80114ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114b2:	f004 f915 	bl	80156e0 <rclc_action_server_goal_cancel_reject>
 80114b6:	722e      	strb	r6, [r5, #8]
 80114b8:	6860      	ldr	r0, [r4, #4]
 80114ba:	e7d7      	b.n	801146c <_rclc_execute.part.0+0x214>
 80114bc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80114be:	f104 0510 	add.w	r5, r4, #16
 80114c2:	6880      	ldr	r0, [r0, #8]
 80114c4:	4798      	blx	r3
 80114c6:	e6e3      	b.n	8011290 <_rclc_execute.part.0+0x38>
 80114c8:	f100 0510 	add.w	r5, r0, #16
 80114cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80114ce:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80114d0:	4629      	mov	r1, r5
 80114d2:	6880      	ldr	r0, [r0, #8]
 80114d4:	4798      	blx	r3
 80114d6:	e6db      	b.n	8011290 <_rclc_execute.part.0+0x38>
 80114d8:	2401      	movs	r4, #1
 80114da:	e710      	b.n	80112fe <_rclc_execute.part.0+0xa6>

080114dc <rclc_executor_trigger_any>:
 80114dc:	2800      	cmp	r0, #0
 80114de:	d03d      	beq.n	801155c <rclc_executor_trigger_any+0x80>
 80114e0:	2900      	cmp	r1, #0
 80114e2:	d03c      	beq.n	801155e <rclc_executor_trigger_any+0x82>
 80114e4:	4603      	mov	r3, r0
 80114e6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80114ea:	2200      	movs	r2, #0
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d035      	beq.n	801155c <rclc_executor_trigger_any+0x80>
 80114f0:	b430      	push	{r4, r5}
 80114f2:	f893 c000 	ldrb.w	ip, [r3]
 80114f6:	f1bc 0f08 	cmp.w	ip, #8
 80114fa:	d11d      	bne.n	8011538 <rclc_executor_trigger_any+0x5c>
 80114fc:	685c      	ldr	r4, [r3, #4]
 80114fe:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8011500:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8011504:	d105      	bne.n	8011512 <rclc_executor_trigger_any+0x36>
 8011506:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 801150a:	b910      	cbnz	r0, 8011512 <rclc_executor_trigger_any+0x36>
 801150c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8011510:	b128      	cbz	r0, 801151e <rclc_executor_trigger_any+0x42>
 8011512:	bc30      	pop	{r4, r5}
 8011514:	4770      	bx	lr
 8011516:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 801151a:	2800      	cmp	r0, #0
 801151c:	d1f9      	bne.n	8011512 <rclc_executor_trigger_any+0x36>
 801151e:	3201      	adds	r2, #1
 8011520:	3340      	adds	r3, #64	@ 0x40
 8011522:	4291      	cmp	r1, r2
 8011524:	d017      	beq.n	8011556 <rclc_executor_trigger_any+0x7a>
 8011526:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 801152a:	2800      	cmp	r0, #0
 801152c:	d0f1      	beq.n	8011512 <rclc_executor_trigger_any+0x36>
 801152e:	f893 c000 	ldrb.w	ip, [r3]
 8011532:	f1bc 0f08 	cmp.w	ip, #8
 8011536:	d0e1      	beq.n	80114fc <rclc_executor_trigger_any+0x20>
 8011538:	f1bc 0f09 	cmp.w	ip, #9
 801153c:	d1eb      	bne.n	8011516 <rclc_executor_trigger_any+0x3a>
 801153e:	685c      	ldr	r4, [r3, #4]
 8011540:	6a25      	ldr	r5, [r4, #32]
 8011542:	2d00      	cmp	r5, #0
 8011544:	d1e5      	bne.n	8011512 <rclc_executor_trigger_any+0x36>
 8011546:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 801154a:	2800      	cmp	r0, #0
 801154c:	d1e1      	bne.n	8011512 <rclc_executor_trigger_any+0x36>
 801154e:	3201      	adds	r2, #1
 8011550:	3340      	adds	r3, #64	@ 0x40
 8011552:	4291      	cmp	r1, r2
 8011554:	d1e7      	bne.n	8011526 <rclc_executor_trigger_any+0x4a>
 8011556:	2000      	movs	r0, #0
 8011558:	bc30      	pop	{r4, r5}
 801155a:	4770      	bx	lr
 801155c:	4770      	bx	lr
 801155e:	4608      	mov	r0, r1
 8011560:	4770      	bx	lr
 8011562:	bf00      	nop

08011564 <rclc_executor_get_zero_initialized_executor>:
 8011564:	b510      	push	{r4, lr}
 8011566:	4604      	mov	r4, r0
 8011568:	2288      	movs	r2, #136	@ 0x88
 801156a:	4902      	ldr	r1, [pc, #8]	@ (8011574 <rclc_executor_get_zero_initialized_executor+0x10>)
 801156c:	f00c fb79 	bl	801dc62 <memcpy>
 8011570:	4620      	mov	r0, r4
 8011572:	bd10      	pop	{r4, pc}
 8011574:	0801f9e8 	.word	0x0801f9e8

08011578 <rclc_executor_init>:
 8011578:	2900      	cmp	r1, #0
 801157a:	d06a      	beq.n	8011652 <rclc_executor_init+0xda>
 801157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011580:	4605      	mov	r5, r0
 8011582:	b0b0      	sub	sp, #192	@ 0xc0
 8011584:	2800      	cmp	r0, #0
 8011586:	d05c      	beq.n	8011642 <rclc_executor_init+0xca>
 8011588:	4616      	mov	r6, r2
 801158a:	4618      	mov	r0, r3
 801158c:	4688      	mov	r8, r1
 801158e:	461f      	mov	r7, r3
 8011590:	f000 fc1c 	bl	8011dcc <rcutils_allocator_is_valid>
 8011594:	2e00      	cmp	r6, #0
 8011596:	d054      	beq.n	8011642 <rclc_executor_init+0xca>
 8011598:	f080 0401 	eor.w	r4, r0, #1
 801159c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 80115a0:	d14f      	bne.n	8011642 <rclc_executor_init+0xca>
 80115a2:	2288      	movs	r2, #136	@ 0x88
 80115a4:	4930      	ldr	r1, [pc, #192]	@ (8011668 <rclc_executor_init+0xf0>)
 80115a6:	a80e      	add	r0, sp, #56	@ 0x38
 80115a8:	f00c fb5b 	bl	801dc62 <memcpy>
 80115ac:	a90e      	add	r1, sp, #56	@ 0x38
 80115ae:	2288      	movs	r2, #136	@ 0x88
 80115b0:	4628      	mov	r0, r5
 80115b2:	f00c fb56 	bl	801dc62 <memcpy>
 80115b6:	4668      	mov	r0, sp
 80115b8:	f8c5 8000 	str.w	r8, [r5]
 80115bc:	60ae      	str	r6, [r5, #8]
 80115be:	f002 fd4b 	bl	8014058 <rcl_get_zero_initialized_wait_set>
 80115c2:	46ec      	mov	ip, sp
 80115c4:	f105 0e14 	add.w	lr, r5, #20
 80115c8:	f8d7 8000 	ldr.w	r8, [r7]
 80115cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80115d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80115d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80115d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80115dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80115e0:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8011660 <rclc_executor_init+0xe8>
 80115e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80115e8:	f8dc 3000 	ldr.w	r3, [ip]
 80115ec:	01b0      	lsls	r0, r6, #6
 80115ee:	6939      	ldr	r1, [r7, #16]
 80115f0:	f8ce 3000 	str.w	r3, [lr]
 80115f4:	612f      	str	r7, [r5, #16]
 80115f6:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 80115fa:	47c0      	blx	r8
 80115fc:	6068      	str	r0, [r5, #4]
 80115fe:	b908      	cbnz	r0, 8011604 <rclc_executor_init+0x8c>
 8011600:	e029      	b.n	8011656 <rclc_executor_init+0xde>
 8011602:	6868      	ldr	r0, [r5, #4]
 8011604:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8011608:	3401      	adds	r4, #1
 801160a:	4631      	mov	r1, r6
 801160c:	f000 fa84 	bl	8011b18 <rclc_executor_handle_init>
 8011610:	42a6      	cmp	r6, r4
 8011612:	d8f6      	bhi.n	8011602 <rclc_executor_init+0x8a>
 8011614:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8011618:	f000 fa72 	bl	8011b00 <rclc_executor_handle_counters_zero_init>
 801161c:	4a13      	ldr	r2, [pc, #76]	@ (801166c <rclc_executor_init+0xf4>)
 801161e:	2300      	movs	r3, #0
 8011620:	6868      	ldr	r0, [r5, #4]
 8011622:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8011626:	b168      	cbz	r0, 8011644 <rclc_executor_init+0xcc>
 8011628:	68ab      	ldr	r3, [r5, #8]
 801162a:	b173      	cbz	r3, 801164a <rclc_executor_init+0xd2>
 801162c:	692a      	ldr	r2, [r5, #16]
 801162e:	fab2 f382 	clz	r3, r2
 8011632:	095b      	lsrs	r3, r3, #5
 8011634:	b14a      	cbz	r2, 801164a <rclc_executor_init+0xd2>
 8011636:	4618      	mov	r0, r3
 8011638:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 801163c:	b030      	add	sp, #192	@ 0xc0
 801163e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011642:	200b      	movs	r0, #11
 8011644:	b030      	add	sp, #192	@ 0xc0
 8011646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801164a:	2000      	movs	r0, #0
 801164c:	b030      	add	sp, #192	@ 0xc0
 801164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011652:	200b      	movs	r0, #11
 8011654:	4770      	bx	lr
 8011656:	200a      	movs	r0, #10
 8011658:	e7f4      	b.n	8011644 <rclc_executor_init+0xcc>
 801165a:	bf00      	nop
 801165c:	f3af 8000 	nop.w
 8011660:	3b9aca00 	.word	0x3b9aca00
 8011664:	00000000 	.word	0x00000000
 8011668:	0801f9e8 	.word	0x0801f9e8
 801166c:	080114dd 	.word	0x080114dd

08011670 <rclc_executor_add_subscription>:
 8011670:	2b00      	cmp	r3, #0
 8011672:	bf18      	it	ne
 8011674:	2a00      	cmpne	r2, #0
 8011676:	b570      	push	{r4, r5, r6, lr}
 8011678:	4604      	mov	r4, r0
 801167a:	bf0c      	ite	eq
 801167c:	2001      	moveq	r0, #1
 801167e:	2000      	movne	r0, #0
 8011680:	f89d c010 	ldrb.w	ip, [sp, #16]
 8011684:	2900      	cmp	r1, #0
 8011686:	bf08      	it	eq
 8011688:	f040 0001 	orreq.w	r0, r0, #1
 801168c:	bb28      	cbnz	r0, 80116da <rclc_executor_add_subscription+0x6a>
 801168e:	fab4 f584 	clz	r5, r4
 8011692:	096d      	lsrs	r5, r5, #5
 8011694:	b30c      	cbz	r4, 80116da <rclc_executor_add_subscription+0x6a>
 8011696:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 801169a:	4286      	cmp	r6, r0
 801169c:	d301      	bcc.n	80116a2 <rclc_executor_add_subscription+0x32>
 801169e:	2001      	movs	r0, #1
 80116a0:	bd70      	pop	{r4, r5, r6, pc}
 80116a2:	6860      	ldr	r0, [r4, #4]
 80116a4:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 80116a8:	f800 500e 	strb.w	r5, [r0, lr]
 80116ac:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 80116b0:	3601      	adds	r6, #1
 80116b2:	6303      	str	r3, [r0, #48]	@ 0x30
 80116b4:	2301      	movs	r3, #1
 80116b6:	62c5      	str	r5, [r0, #44]	@ 0x2c
 80116b8:	f104 0514 	add.w	r5, r4, #20
 80116bc:	f880 c001 	strb.w	ip, [r0, #1]
 80116c0:	8703      	strh	r3, [r0, #56]	@ 0x38
 80116c2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80116c6:	4628      	mov	r0, r5
 80116c8:	60e6      	str	r6, [r4, #12]
 80116ca:	f002 fcd9 	bl	8014080 <rcl_wait_set_is_valid>
 80116ce:	b930      	cbnz	r0, 80116de <rclc_executor_add_subscription+0x6e>
 80116d0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80116d2:	2000      	movs	r0, #0
 80116d4:	3301      	adds	r3, #1
 80116d6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80116d8:	bd70      	pop	{r4, r5, r6, pc}
 80116da:	200b      	movs	r0, #11
 80116dc:	bd70      	pop	{r4, r5, r6, pc}
 80116de:	4628      	mov	r0, r5
 80116e0:	f002 fcd4 	bl	801408c <rcl_wait_set_fini>
 80116e4:	2800      	cmp	r0, #0
 80116e6:	d0f3      	beq.n	80116d0 <rclc_executor_add_subscription+0x60>
 80116e8:	bd70      	pop	{r4, r5, r6, pc}
 80116ea:	bf00      	nop

080116ec <rclc_executor_prepare>:
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d044      	beq.n	801177a <rclc_executor_prepare+0x8e>
 80116f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116f2:	f100 0514 	add.w	r5, r0, #20
 80116f6:	b09b      	sub	sp, #108	@ 0x6c
 80116f8:	4604      	mov	r4, r0
 80116fa:	4628      	mov	r0, r5
 80116fc:	f002 fcc0 	bl	8014080 <rcl_wait_set_is_valid>
 8011700:	b110      	cbz	r0, 8011708 <rclc_executor_prepare+0x1c>
 8011702:	2000      	movs	r0, #0
 8011704:	b01b      	add	sp, #108	@ 0x6c
 8011706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011708:	4628      	mov	r0, r5
 801170a:	f002 fcbf 	bl	801408c <rcl_wait_set_fini>
 801170e:	2800      	cmp	r0, #0
 8011710:	d130      	bne.n	8011774 <rclc_executor_prepare+0x88>
 8011712:	a80c      	add	r0, sp, #48	@ 0x30
 8011714:	ae04      	add	r6, sp, #16
 8011716:	f002 fc9f 	bl	8014058 <rcl_get_zero_initialized_wait_set>
 801171a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801171e:	46ae      	mov	lr, r5
 8011720:	6927      	ldr	r7, [r4, #16]
 8011722:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011726:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801172a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801172e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011732:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011736:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801173a:	f8dc 3000 	ldr.w	r3, [ip]
 801173e:	f8ce 3000 	str.w	r3, [lr]
 8011742:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011744:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	4628      	mov	r0, r5
 801174a:	6822      	ldr	r2, [r4, #0]
 801174c:	6033      	str	r3, [r6, #0]
 801174e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011750:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8011752:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011756:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 801175a:	e9cd 2100 	strd	r2, r1, [sp]
 801175e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8011760:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011762:	f002 ff93 	bl	801468c <rcl_wait_set_init>
 8011766:	2800      	cmp	r0, #0
 8011768:	d0cc      	beq.n	8011704 <rclc_executor_prepare+0x18>
 801176a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801176c:	f000 fb54 	bl	8011e18 <rcutils_reset_error>
 8011770:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011772:	e7c7      	b.n	8011704 <rclc_executor_prepare+0x18>
 8011774:	f000 fb50 	bl	8011e18 <rcutils_reset_error>
 8011778:	e7cb      	b.n	8011712 <rclc_executor_prepare+0x26>
 801177a:	200b      	movs	r0, #11
 801177c:	4770      	bx	lr
 801177e:	bf00      	nop

08011780 <rclc_executor_spin_some.part.0>:
 8011780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011784:	4605      	mov	r5, r0
 8011786:	4691      	mov	r9, r2
 8011788:	4698      	mov	r8, r3
 801178a:	f7ff ffaf 	bl	80116ec <rclc_executor_prepare>
 801178e:	f105 0614 	add.w	r6, r5, #20
 8011792:	4630      	mov	r0, r6
 8011794:	f002 fd46 	bl	8014224 <rcl_wait_set_clear>
 8011798:	4607      	mov	r7, r0
 801179a:	2800      	cmp	r0, #0
 801179c:	f040 80a8 	bne.w	80118f0 <rclc_executor_spin_some.part.0+0x170>
 80117a0:	68ab      	ldr	r3, [r5, #8]
 80117a2:	b30b      	cbz	r3, 80117e8 <rclc_executor_spin_some.part.0+0x68>
 80117a4:	4604      	mov	r4, r0
 80117a6:	6869      	ldr	r1, [r5, #4]
 80117a8:	01a2      	lsls	r2, r4, #6
 80117aa:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80117ae:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 80117b2:	b1cb      	cbz	r3, 80117e8 <rclc_executor_spin_some.part.0+0x68>
 80117b4:	5c8b      	ldrb	r3, [r1, r2]
 80117b6:	2b0a      	cmp	r3, #10
 80117b8:	f200 80de 	bhi.w	8011978 <rclc_executor_spin_some.part.0+0x1f8>
 80117bc:	e8df f003 	tbb	[pc, r3]
 80117c0:	8da99d9d 	.word	0x8da99d9d
 80117c4:	0606068d 	.word	0x0606068d
 80117c8:	c1ce      	.short	0xc1ce
 80117ca:	b5          	.byte	0xb5
 80117cb:	00          	.byte	0x00
 80117cc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80117d0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80117d4:	4630      	mov	r0, r6
 80117d6:	f003 f875 	bl	80148c4 <rcl_wait_set_add_service>
 80117da:	2800      	cmp	r0, #0
 80117dc:	f040 8087 	bne.w	80118ee <rclc_executor_spin_some.part.0+0x16e>
 80117e0:	3401      	adds	r4, #1
 80117e2:	68ab      	ldr	r3, [r5, #8]
 80117e4:	429c      	cmp	r4, r3
 80117e6:	d3de      	bcc.n	80117a6 <rclc_executor_spin_some.part.0+0x26>
 80117e8:	4643      	mov	r3, r8
 80117ea:	464a      	mov	r2, r9
 80117ec:	4630      	mov	r0, r6
 80117ee:	f003 f897 	bl	8014920 <rcl_wait>
 80117f2:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f000 80c6 	beq.w	8011988 <rclc_executor_spin_some.part.0+0x208>
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	f040 80bb 	bne.w	8011978 <rclc_executor_spin_some.part.0+0x1f8>
 8011802:	68ab      	ldr	r3, [r5, #8]
 8011804:	2b00      	cmp	r3, #0
 8011806:	f000 8159 	beq.w	8011abc <rclc_executor_spin_some.part.0+0x33c>
 801180a:	2400      	movs	r4, #0
 801180c:	f240 1991 	movw	r9, #401	@ 0x191
 8011810:	46a0      	mov	r8, r4
 8011812:	e00a      	b.n	801182a <rclc_executor_spin_some.part.0+0xaa>
 8011814:	f7ff fb5e 	bl	8010ed4 <_rclc_check_for_new_data>
 8011818:	4604      	mov	r4, r0
 801181a:	b110      	cbz	r0, 8011822 <rclc_executor_spin_some.part.0+0xa2>
 801181c:	4548      	cmp	r0, r9
 801181e:	f040 80b1 	bne.w	8011984 <rclc_executor_spin_some.part.0+0x204>
 8011822:	68ab      	ldr	r3, [r5, #8]
 8011824:	4598      	cmp	r8, r3
 8011826:	f080 8126 	bcs.w	8011a76 <rclc_executor_spin_some.part.0+0x2f6>
 801182a:	686a      	ldr	r2, [r5, #4]
 801182c:	4631      	mov	r1, r6
 801182e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8011832:	f108 0801 	add.w	r8, r8, #1
 8011836:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801183a:	f1bc 0f00 	cmp.w	ip, #0
 801183e:	d1e9      	bne.n	8011814 <rclc_executor_spin_some.part.0+0x94>
 8011840:	4619      	mov	r1, r3
 8011842:	4610      	mov	r0, r2
 8011844:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8011848:	4798      	blx	r3
 801184a:	2800      	cmp	r0, #0
 801184c:	f000 809a 	beq.w	8011984 <rclc_executor_spin_some.part.0+0x204>
 8011850:	68ab      	ldr	r3, [r5, #8]
 8011852:	2b00      	cmp	r3, #0
 8011854:	f000 8096 	beq.w	8011984 <rclc_executor_spin_some.part.0+0x204>
 8011858:	f04f 0800 	mov.w	r8, #0
 801185c:	f240 1991 	movw	r9, #401	@ 0x191
 8011860:	e009      	b.n	8011876 <rclc_executor_spin_some.part.0+0xf6>
 8011862:	f7ff fb85 	bl	8010f70 <_rclc_take_new_data>
 8011866:	4604      	mov	r4, r0
 8011868:	b110      	cbz	r0, 8011870 <rclc_executor_spin_some.part.0+0xf0>
 801186a:	4548      	cmp	r0, r9
 801186c:	f040 808a 	bne.w	8011984 <rclc_executor_spin_some.part.0+0x204>
 8011870:	68ab      	ldr	r3, [r5, #8]
 8011872:	4598      	cmp	r8, r3
 8011874:	d209      	bcs.n	801188a <rclc_executor_spin_some.part.0+0x10a>
 8011876:	6868      	ldr	r0, [r5, #4]
 8011878:	4631      	mov	r1, r6
 801187a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 801187e:	f108 0801 	add.w	r8, r8, #1
 8011882:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8011886:	2a00      	cmp	r2, #0
 8011888:	d1eb      	bne.n	8011862 <rclc_executor_spin_some.part.0+0xe2>
 801188a:	2b00      	cmp	r3, #0
 801188c:	d07a      	beq.n	8011984 <rclc_executor_spin_some.part.0+0x204>
 801188e:	2600      	movs	r6, #0
 8011890:	e00e      	b.n	80118b0 <rclc_executor_spin_some.part.0+0x130>
 8011892:	f812 200c 	ldrb.w	r2, [r2, ip]
 8011896:	2a08      	cmp	r2, #8
 8011898:	f000 80fc 	beq.w	8011a94 <rclc_executor_spin_some.part.0+0x314>
 801189c:	2a09      	cmp	r2, #9
 801189e:	f000 80ee 	beq.w	8011a7e <rclc_executor_spin_some.part.0+0x2fe>
 80118a2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 80118a6:	b98a      	cbnz	r2, 80118cc <rclc_executor_spin_some.part.0+0x14c>
 80118a8:	3601      	adds	r6, #1
 80118aa:	429e      	cmp	r6, r3
 80118ac:	d267      	bcs.n	801197e <rclc_executor_spin_some.part.0+0x1fe>
 80118ae:	2400      	movs	r4, #0
 80118b0:	686a      	ldr	r2, [r5, #4]
 80118b2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 80118b6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 80118ba:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 80118be:	2900      	cmp	r1, #0
 80118c0:	d060      	beq.n	8011984 <rclc_executor_spin_some.part.0+0x204>
 80118c2:	7841      	ldrb	r1, [r0, #1]
 80118c4:	2900      	cmp	r1, #0
 80118c6:	d0e4      	beq.n	8011892 <rclc_executor_spin_some.part.0+0x112>
 80118c8:	2901      	cmp	r1, #1
 80118ca:	d1ed      	bne.n	80118a8 <rclc_executor_spin_some.part.0+0x128>
 80118cc:	f7ff fcc4 	bl	8011258 <_rclc_execute.part.0>
 80118d0:	2800      	cmp	r0, #0
 80118d2:	f040 80b5 	bne.w	8011a40 <rclc_executor_spin_some.part.0+0x2c0>
 80118d6:	68ab      	ldr	r3, [r5, #8]
 80118d8:	e7e6      	b.n	80118a8 <rclc_executor_spin_some.part.0+0x128>
 80118da:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80118de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80118e2:	4630      	mov	r0, r6
 80118e4:	f002 ffc2 	bl	801486c <rcl_wait_set_add_client>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	f43f af79 	beq.w	80117e0 <rclc_executor_spin_some.part.0+0x60>
 80118ee:	4607      	mov	r7, r0
 80118f0:	f000 fa92 	bl	8011e18 <rcutils_reset_error>
 80118f4:	4638      	mov	r0, r7
 80118f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118fa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80118fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011902:	4630      	mov	r0, r6
 8011904:	f002 fc62 	bl	80141cc <rcl_wait_set_add_subscription>
 8011908:	2800      	cmp	r0, #0
 801190a:	f43f af69 	beq.w	80117e0 <rclc_executor_spin_some.part.0+0x60>
 801190e:	4607      	mov	r7, r0
 8011910:	e7ee      	b.n	80118f0 <rclc_executor_spin_some.part.0+0x170>
 8011912:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011916:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801191a:	4630      	mov	r0, r6
 801191c:	f002 ff76 	bl	801480c <rcl_wait_set_add_timer>
 8011920:	2800      	cmp	r0, #0
 8011922:	f43f af5d 	beq.w	80117e0 <rclc_executor_spin_some.part.0+0x60>
 8011926:	4607      	mov	r7, r0
 8011928:	e7e2      	b.n	80118f0 <rclc_executor_spin_some.part.0+0x170>
 801192a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801192e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011932:	4630      	mov	r0, r6
 8011934:	f002 ff3e 	bl	80147b4 <rcl_wait_set_add_guard_condition>
 8011938:	2800      	cmp	r0, #0
 801193a:	f43f af51 	beq.w	80117e0 <rclc_executor_spin_some.part.0+0x60>
 801193e:	4607      	mov	r7, r0
 8011940:	e7d6      	b.n	80118f0 <rclc_executor_spin_some.part.0+0x170>
 8011942:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011946:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801194a:	4630      	mov	r0, r6
 801194c:	3110      	adds	r1, #16
 801194e:	f003 fcbd 	bl	80152cc <rcl_action_wait_set_add_action_server>
 8011952:	2800      	cmp	r0, #0
 8011954:	f43f af44 	beq.w	80117e0 <rclc_executor_spin_some.part.0+0x60>
 8011958:	4607      	mov	r7, r0
 801195a:	e7c9      	b.n	80118f0 <rclc_executor_spin_some.part.0+0x170>
 801195c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011960:	2300      	movs	r3, #0
 8011962:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011966:	4630      	mov	r0, r6
 8011968:	3110      	adds	r1, #16
 801196a:	f003 fa85 	bl	8014e78 <rcl_action_wait_set_add_action_client>
 801196e:	2800      	cmp	r0, #0
 8011970:	f43f af36 	beq.w	80117e0 <rclc_executor_spin_some.part.0+0x60>
 8011974:	4607      	mov	r7, r0
 8011976:	e7bb      	b.n	80118f0 <rclc_executor_spin_some.part.0+0x170>
 8011978:	2701      	movs	r7, #1
 801197a:	f000 fa4d 	bl	8011e18 <rcutils_reset_error>
 801197e:	4638      	mov	r0, r7
 8011980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011984:	4627      	mov	r7, r4
 8011986:	e7fa      	b.n	801197e <rclc_executor_spin_some.part.0+0x1fe>
 8011988:	68ab      	ldr	r3, [r5, #8]
 801198a:	2b00      	cmp	r3, #0
 801198c:	f000 8093 	beq.w	8011ab6 <rclc_executor_spin_some.part.0+0x336>
 8011990:	2400      	movs	r4, #0
 8011992:	f240 1991 	movw	r9, #401	@ 0x191
 8011996:	46a0      	mov	r8, r4
 8011998:	e008      	b.n	80119ac <rclc_executor_spin_some.part.0+0x22c>
 801199a:	f7ff fa9b 	bl	8010ed4 <_rclc_check_for_new_data>
 801199e:	4604      	mov	r4, r0
 80119a0:	b108      	cbz	r0, 80119a6 <rclc_executor_spin_some.part.0+0x226>
 80119a2:	4548      	cmp	r0, r9
 80119a4:	d1ee      	bne.n	8011984 <rclc_executor_spin_some.part.0+0x204>
 80119a6:	68ab      	ldr	r3, [r5, #8]
 80119a8:	4598      	cmp	r8, r3
 80119aa:	d266      	bcs.n	8011a7a <rclc_executor_spin_some.part.0+0x2fa>
 80119ac:	686a      	ldr	r2, [r5, #4]
 80119ae:	4631      	mov	r1, r6
 80119b0:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80119b4:	f108 0801 	add.w	r8, r8, #1
 80119b8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80119bc:	f1bc 0f00 	cmp.w	ip, #0
 80119c0:	d1eb      	bne.n	801199a <rclc_executor_spin_some.part.0+0x21a>
 80119c2:	4619      	mov	r1, r3
 80119c4:	4610      	mov	r0, r2
 80119c6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80119ca:	4798      	blx	r3
 80119cc:	2800      	cmp	r0, #0
 80119ce:	d0d9      	beq.n	8011984 <rclc_executor_spin_some.part.0+0x204>
 80119d0:	68ab      	ldr	r3, [r5, #8]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d0d6      	beq.n	8011984 <rclc_executor_spin_some.part.0+0x204>
 80119d6:	f04f 0a00 	mov.w	sl, #0
 80119da:	f240 1891 	movw	r8, #401	@ 0x191
 80119de:	f240 2959 	movw	r9, #601	@ 0x259
 80119e2:	e00e      	b.n	8011a02 <rclc_executor_spin_some.part.0+0x282>
 80119e4:	f813 300b 	ldrb.w	r3, [r3, fp]
 80119e8:	2b08      	cmp	r3, #8
 80119ea:	d034      	beq.n	8011a56 <rclc_executor_spin_some.part.0+0x2d6>
 80119ec:	2b09      	cmp	r3, #9
 80119ee:	d029      	beq.n	8011a44 <rclc_executor_spin_some.part.0+0x2c4>
 80119f0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80119f4:	bb03      	cbnz	r3, 8011a38 <rclc_executor_spin_some.part.0+0x2b8>
 80119f6:	f10a 0a01 	add.w	sl, sl, #1
 80119fa:	68ab      	ldr	r3, [r5, #8]
 80119fc:	459a      	cmp	sl, r3
 80119fe:	d2be      	bcs.n	801197e <rclc_executor_spin_some.part.0+0x1fe>
 8011a00:	2400      	movs	r4, #0
 8011a02:	6868      	ldr	r0, [r5, #4]
 8011a04:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8011a08:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8011a0c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d0b7      	beq.n	8011984 <rclc_executor_spin_some.part.0+0x204>
 8011a14:	4631      	mov	r1, r6
 8011a16:	f7ff faab 	bl	8010f70 <_rclc_take_new_data>
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	bf18      	it	ne
 8011a1e:	4540      	cmpne	r0, r8
 8011a20:	d001      	beq.n	8011a26 <rclc_executor_spin_some.part.0+0x2a6>
 8011a22:	4548      	cmp	r0, r9
 8011a24:	d10c      	bne.n	8011a40 <rclc_executor_spin_some.part.0+0x2c0>
 8011a26:	686b      	ldr	r3, [r5, #4]
 8011a28:	eb13 000b 	adds.w	r0, r3, fp
 8011a2c:	d021      	beq.n	8011a72 <rclc_executor_spin_some.part.0+0x2f2>
 8011a2e:	7842      	ldrb	r2, [r0, #1]
 8011a30:	2a00      	cmp	r2, #0
 8011a32:	d0d7      	beq.n	80119e4 <rclc_executor_spin_some.part.0+0x264>
 8011a34:	2a01      	cmp	r2, #1
 8011a36:	d1de      	bne.n	80119f6 <rclc_executor_spin_some.part.0+0x276>
 8011a38:	f7ff fc0e 	bl	8011258 <_rclc_execute.part.0>
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	d0da      	beq.n	80119f6 <rclc_executor_spin_some.part.0+0x276>
 8011a40:	4607      	mov	r7, r0
 8011a42:	e79c      	b.n	801197e <rclc_executor_spin_some.part.0+0x1fe>
 8011a44:	6843      	ldr	r3, [r0, #4]
 8011a46:	6a1a      	ldr	r2, [r3, #32]
 8011a48:	2a00      	cmp	r2, #0
 8011a4a:	d1f5      	bne.n	8011a38 <rclc_executor_spin_some.part.0+0x2b8>
 8011a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d0d0      	beq.n	80119f6 <rclc_executor_spin_some.part.0+0x276>
 8011a54:	e7f0      	b.n	8011a38 <rclc_executor_spin_some.part.0+0x2b8>
 8011a56:	6843      	ldr	r3, [r0, #4]
 8011a58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011a5a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8011a5e:	d1eb      	bne.n	8011a38 <rclc_executor_spin_some.part.0+0x2b8>
 8011a60:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8011a64:	2a00      	cmp	r2, #0
 8011a66:	d1e7      	bne.n	8011a38 <rclc_executor_spin_some.part.0+0x2b8>
 8011a68:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d0c2      	beq.n	80119f6 <rclc_executor_spin_some.part.0+0x276>
 8011a70:	e7e2      	b.n	8011a38 <rclc_executor_spin_some.part.0+0x2b8>
 8011a72:	270b      	movs	r7, #11
 8011a74:	e783      	b.n	801197e <rclc_executor_spin_some.part.0+0x1fe>
 8011a76:	686a      	ldr	r2, [r5, #4]
 8011a78:	e6e2      	b.n	8011840 <rclc_executor_spin_some.part.0+0xc0>
 8011a7a:	686a      	ldr	r2, [r5, #4]
 8011a7c:	e7a1      	b.n	80119c2 <rclc_executor_spin_some.part.0+0x242>
 8011a7e:	6842      	ldr	r2, [r0, #4]
 8011a80:	6a11      	ldr	r1, [r2, #32]
 8011a82:	2900      	cmp	r1, #0
 8011a84:	f47f af22 	bne.w	80118cc <rclc_executor_spin_some.part.0+0x14c>
 8011a88:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8011a8c:	2a00      	cmp	r2, #0
 8011a8e:	f43f af0b 	beq.w	80118a8 <rclc_executor_spin_some.part.0+0x128>
 8011a92:	e71b      	b.n	80118cc <rclc_executor_spin_some.part.0+0x14c>
 8011a94:	6842      	ldr	r2, [r0, #4]
 8011a96:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8011a98:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8011a9c:	f47f af16 	bne.w	80118cc <rclc_executor_spin_some.part.0+0x14c>
 8011aa0:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8011aa4:	2900      	cmp	r1, #0
 8011aa6:	f47f af11 	bne.w	80118cc <rclc_executor_spin_some.part.0+0x14c>
 8011aaa:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8011aae:	2a00      	cmp	r2, #0
 8011ab0:	f43f aefa 	beq.w	80118a8 <rclc_executor_spin_some.part.0+0x128>
 8011ab4:	e70a      	b.n	80118cc <rclc_executor_spin_some.part.0+0x14c>
 8011ab6:	686a      	ldr	r2, [r5, #4]
 8011ab8:	461c      	mov	r4, r3
 8011aba:	e782      	b.n	80119c2 <rclc_executor_spin_some.part.0+0x242>
 8011abc:	686a      	ldr	r2, [r5, #4]
 8011abe:	461c      	mov	r4, r3
 8011ac0:	e6be      	b.n	8011840 <rclc_executor_spin_some.part.0+0xc0>
 8011ac2:	bf00      	nop

08011ac4 <rclc_executor_spin>:
 8011ac4:	b1d0      	cbz	r0, 8011afc <rclc_executor_spin+0x38>
 8011ac6:	b510      	push	{r4, lr}
 8011ac8:	4604      	mov	r4, r0
 8011aca:	b082      	sub	sp, #8
 8011acc:	e004      	b.n	8011ad8 <rclc_executor_spin+0x14>
 8011ace:	f7ff fe57 	bl	8011780 <rclc_executor_spin_some.part.0>
 8011ad2:	f030 0302 	bics.w	r3, r0, #2
 8011ad6:	d10f      	bne.n	8011af8 <rclc_executor_spin+0x34>
 8011ad8:	6820      	ldr	r0, [r4, #0]
 8011ada:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 8011ade:	e9cd 2300 	strd	r2, r3, [sp]
 8011ae2:	f000 ffe9 	bl	8012ab8 <rcl_context_is_valid>
 8011ae6:	4601      	mov	r1, r0
 8011ae8:	4620      	mov	r0, r4
 8011aea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011aee:	2900      	cmp	r1, #0
 8011af0:	d1ed      	bne.n	8011ace <rclc_executor_spin+0xa>
 8011af2:	f000 f991 	bl	8011e18 <rcutils_reset_error>
 8011af6:	2001      	movs	r0, #1
 8011af8:	b002      	add	sp, #8
 8011afa:	bd10      	pop	{r4, pc}
 8011afc:	200b      	movs	r0, #11
 8011afe:	4770      	bx	lr

08011b00 <rclc_executor_handle_counters_zero_init>:
 8011b00:	b130      	cbz	r0, 8011b10 <rclc_executor_handle_counters_zero_init+0x10>
 8011b02:	2220      	movs	r2, #32
 8011b04:	2100      	movs	r1, #0
 8011b06:	b508      	push	{r3, lr}
 8011b08:	f00b ff8c 	bl	801da24 <memset>
 8011b0c:	2000      	movs	r0, #0
 8011b0e:	bd08      	pop	{r3, pc}
 8011b10:	200b      	movs	r0, #11
 8011b12:	4770      	bx	lr
 8011b14:	0000      	movs	r0, r0
	...

08011b18 <rclc_executor_handle_init>:
 8011b18:	4603      	mov	r3, r0
 8011b1a:	b178      	cbz	r0, 8011b3c <rclc_executor_handle_init+0x24>
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	f04f 0c0b 	mov.w	ip, #11
 8011b22:	6341      	str	r1, [r0, #52]	@ 0x34
 8011b24:	4610      	mov	r0, r2
 8011b26:	f8a3 c000 	strh.w	ip, [r3]
 8011b2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8011b2c:	871a      	strh	r2, [r3, #56]	@ 0x38
 8011b2e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8011b40 <rclc_executor_handle_init+0x28>
 8011b32:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8011b36:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 8011b3a:	4770      	bx	lr
 8011b3c:	200b      	movs	r0, #11
 8011b3e:	4770      	bx	lr
	...

08011b48 <rclc_support_init>:
 8011b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b4c:	b086      	sub	sp, #24
 8011b4e:	b3bb      	cbz	r3, 8011bc0 <rclc_support_init+0x78>
 8011b50:	4606      	mov	r6, r0
 8011b52:	b3a8      	cbz	r0, 8011bc0 <rclc_support_init+0x78>
 8011b54:	461c      	mov	r4, r3
 8011b56:	460f      	mov	r7, r1
 8011b58:	4690      	mov	r8, r2
 8011b5a:	f001 f919 	bl	8012d90 <rcl_get_zero_initialized_init_options>
 8011b5e:	f104 050c 	add.w	r5, r4, #12
 8011b62:	9005      	str	r0, [sp, #20]
 8011b64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011b68:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011b6c:	a805      	add	r0, sp, #20
 8011b6e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011b72:	f001 f90f 	bl	8012d94 <rcl_init_options_init>
 8011b76:	4605      	mov	r5, r0
 8011b78:	b9e0      	cbnz	r0, 8011bb4 <rclc_support_init+0x6c>
 8011b7a:	ad02      	add	r5, sp, #8
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	f000 ff91 	bl	8012aa4 <rcl_get_zero_initialized_context>
 8011b82:	4633      	mov	r3, r6
 8011b84:	aa05      	add	r2, sp, #20
 8011b86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011b8a:	e886 0003 	stmia.w	r6, {r0, r1}
 8011b8e:	4641      	mov	r1, r8
 8011b90:	4638      	mov	r0, r7
 8011b92:	f000 fff7 	bl	8012b84 <rcl_init>
 8011b96:	4605      	mov	r5, r0
 8011b98:	b9b8      	cbnz	r0, 8011bca <rclc_support_init+0x82>
 8011b9a:	4622      	mov	r2, r4
 8011b9c:	f106 010c 	add.w	r1, r6, #12
 8011ba0:	2003      	movs	r0, #3
 8011ba2:	60b4      	str	r4, [r6, #8]
 8011ba4:	f002 f84e 	bl	8013c44 <rcl_clock_init>
 8011ba8:	4605      	mov	r5, r0
 8011baa:	b970      	cbnz	r0, 8011bca <rclc_support_init+0x82>
 8011bac:	a805      	add	r0, sp, #20
 8011bae:	f001 f957 	bl	8012e60 <rcl_init_options_fini>
 8011bb2:	b108      	cbz	r0, 8011bb8 <rclc_support_init+0x70>
 8011bb4:	f000 f930 	bl	8011e18 <rcutils_reset_error>
 8011bb8:	4628      	mov	r0, r5
 8011bba:	b006      	add	sp, #24
 8011bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc0:	250b      	movs	r5, #11
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	b006      	add	sp, #24
 8011bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bca:	f000 f925 	bl	8011e18 <rcutils_reset_error>
 8011bce:	a805      	add	r0, sp, #20
 8011bd0:	f001 f946 	bl	8012e60 <rcl_init_options_fini>
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	d0ef      	beq.n	8011bb8 <rclc_support_init+0x70>
 8011bd8:	e7ec      	b.n	8011bb4 <rclc_support_init+0x6c>
 8011bda:	bf00      	nop

08011bdc <rclc_node_init_default>:
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	bf18      	it	ne
 8011be0:	2a00      	cmpne	r2, #0
 8011be2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011be6:	4616      	mov	r6, r2
 8011be8:	bf0c      	ite	eq
 8011bea:	2201      	moveq	r2, #1
 8011bec:	2200      	movne	r2, #0
 8011bee:	b0a1      	sub	sp, #132	@ 0x84
 8011bf0:	2900      	cmp	r1, #0
 8011bf2:	bf08      	it	eq
 8011bf4:	f042 0201 	orreq.w	r2, r2, #1
 8011bf8:	bb22      	cbnz	r2, 8011c44 <rclc_node_init_default+0x68>
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	b310      	cbz	r0, 8011c44 <rclc_node_init_default+0x68>
 8011bfe:	f10d 0810 	add.w	r8, sp, #16
 8011c02:	461f      	mov	r7, r3
 8011c04:	460d      	mov	r5, r1
 8011c06:	f10d 0918 	add.w	r9, sp, #24
 8011c0a:	4640      	mov	r0, r8
 8011c0c:	f001 f9e2 	bl	8012fd4 <rcl_get_zero_initialized_node>
 8011c10:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011c14:	e884 0003 	stmia.w	r4, {r0, r1}
 8011c18:	4648      	mov	r0, r9
 8011c1a:	f001 fb55 	bl	80132c8 <rcl_node_get_default_options>
 8011c1e:	4640      	mov	r0, r8
 8011c20:	f001 f9d8 	bl	8012fd4 <rcl_get_zero_initialized_node>
 8011c24:	f8cd 9000 	str.w	r9, [sp]
 8011c28:	463b      	mov	r3, r7
 8011c2a:	4632      	mov	r2, r6
 8011c2c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011c30:	e884 0003 	stmia.w	r4, {r0, r1}
 8011c34:	4629      	mov	r1, r5
 8011c36:	4620      	mov	r0, r4
 8011c38:	f001 f9d6 	bl	8012fe8 <rcl_node_init>
 8011c3c:	b930      	cbnz	r0, 8011c4c <rclc_node_init_default+0x70>
 8011c3e:	b021      	add	sp, #132	@ 0x84
 8011c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c44:	200b      	movs	r0, #11
 8011c46:	b021      	add	sp, #132	@ 0x84
 8011c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c4c:	9003      	str	r0, [sp, #12]
 8011c4e:	f000 f8e3 	bl	8011e18 <rcutils_reset_error>
 8011c52:	f000 f8e1 	bl	8011e18 <rcutils_reset_error>
 8011c56:	9803      	ldr	r0, [sp, #12]
 8011c58:	b021      	add	sp, #132	@ 0x84
 8011c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c5e:	bf00      	nop

08011c60 <rclc_publisher_init_default>:
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	bf18      	it	ne
 8011c64:	2a00      	cmpne	r2, #0
 8011c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c6a:	4616      	mov	r6, r2
 8011c6c:	bf0c      	ite	eq
 8011c6e:	2201      	moveq	r2, #1
 8011c70:	2200      	movne	r2, #0
 8011c72:	b0a0      	sub	sp, #128	@ 0x80
 8011c74:	2900      	cmp	r1, #0
 8011c76:	bf08      	it	eq
 8011c78:	f042 0201 	orreq.w	r2, r2, #1
 8011c7c:	bb1a      	cbnz	r2, 8011cc6 <rclc_publisher_init_default+0x66>
 8011c7e:	4604      	mov	r4, r0
 8011c80:	b308      	cbz	r0, 8011cc6 <rclc_publisher_init_default+0x66>
 8011c82:	f10d 0810 	add.w	r8, sp, #16
 8011c86:	461f      	mov	r7, r3
 8011c88:	460d      	mov	r5, r1
 8011c8a:	f001 fc23 	bl	80134d4 <rcl_get_zero_initialized_publisher>
 8011c8e:	6020      	str	r0, [r4, #0]
 8011c90:	4640      	mov	r0, r8
 8011c92:	f001 fcbf 	bl	8013614 <rcl_publisher_get_default_options>
 8011c96:	2250      	movs	r2, #80	@ 0x50
 8011c98:	490d      	ldr	r1, [pc, #52]	@ (8011cd0 <rclc_publisher_init_default+0x70>)
 8011c9a:	4640      	mov	r0, r8
 8011c9c:	f00b ffe1 	bl	801dc62 <memcpy>
 8011ca0:	463b      	mov	r3, r7
 8011ca2:	4632      	mov	r2, r6
 8011ca4:	4629      	mov	r1, r5
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f8cd 8000 	str.w	r8, [sp]
 8011cac:	f001 fc18 	bl	80134e0 <rcl_publisher_init>
 8011cb0:	b910      	cbnz	r0, 8011cb8 <rclc_publisher_init_default+0x58>
 8011cb2:	b020      	add	sp, #128	@ 0x80
 8011cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cb8:	9003      	str	r0, [sp, #12]
 8011cba:	f000 f8ad 	bl	8011e18 <rcutils_reset_error>
 8011cbe:	9803      	ldr	r0, [sp, #12]
 8011cc0:	b020      	add	sp, #128	@ 0x80
 8011cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cc6:	200b      	movs	r0, #11
 8011cc8:	b020      	add	sp, #128	@ 0x80
 8011cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cce:	bf00      	nop
 8011cd0:	0801fa70 	.word	0x0801fa70

08011cd4 <rclc_subscription_init_default>:
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	bf18      	it	ne
 8011cd8:	2a00      	cmpne	r2, #0
 8011cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cde:	4616      	mov	r6, r2
 8011ce0:	bf0c      	ite	eq
 8011ce2:	2201      	moveq	r2, #1
 8011ce4:	2200      	movne	r2, #0
 8011ce6:	b0a0      	sub	sp, #128	@ 0x80
 8011ce8:	2900      	cmp	r1, #0
 8011cea:	bf08      	it	eq
 8011cec:	f042 0201 	orreq.w	r2, r2, #1
 8011cf0:	bb1a      	cbnz	r2, 8011d3a <rclc_subscription_init_default+0x66>
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	b308      	cbz	r0, 8011d3a <rclc_subscription_init_default+0x66>
 8011cf6:	f10d 0810 	add.w	r8, sp, #16
 8011cfa:	461f      	mov	r7, r3
 8011cfc:	460d      	mov	r5, r1
 8011cfe:	f001 fe3f 	bl	8013980 <rcl_get_zero_initialized_subscription>
 8011d02:	6020      	str	r0, [r4, #0]
 8011d04:	4640      	mov	r0, r8
 8011d06:	f001 feef 	bl	8013ae8 <rcl_subscription_get_default_options>
 8011d0a:	2250      	movs	r2, #80	@ 0x50
 8011d0c:	490d      	ldr	r1, [pc, #52]	@ (8011d44 <rclc_subscription_init_default+0x70>)
 8011d0e:	4640      	mov	r0, r8
 8011d10:	f00b ffa7 	bl	801dc62 <memcpy>
 8011d14:	463b      	mov	r3, r7
 8011d16:	4632      	mov	r2, r6
 8011d18:	4629      	mov	r1, r5
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	f8cd 8000 	str.w	r8, [sp]
 8011d20:	f001 fe34 	bl	801398c <rcl_subscription_init>
 8011d24:	b910      	cbnz	r0, 8011d2c <rclc_subscription_init_default+0x58>
 8011d26:	b020      	add	sp, #128	@ 0x80
 8011d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d2c:	9003      	str	r0, [sp, #12]
 8011d2e:	f000 f873 	bl	8011e18 <rcutils_reset_error>
 8011d32:	9803      	ldr	r0, [sp, #12]
 8011d34:	b020      	add	sp, #128	@ 0x80
 8011d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d3a:	200b      	movs	r0, #11
 8011d3c:	b020      	add	sp, #128	@ 0x80
 8011d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d42:	bf00      	nop
 8011d44:	0801fac0 	.word	0x0801fac0

08011d48 <__default_zero_allocate>:
 8011d48:	f00b b994 	b.w	801d074 <calloc>

08011d4c <__default_reallocate>:
 8011d4c:	f00b bb32 	b.w	801d3b4 <realloc>

08011d50 <__default_deallocate>:
 8011d50:	f00b ba0e 	b.w	801d170 <free>

08011d54 <__default_allocate>:
 8011d54:	f00b ba04 	b.w	801d160 <malloc>

08011d58 <rcutils_get_zero_initialized_allocator>:
 8011d58:	b510      	push	{r4, lr}
 8011d5a:	4c05      	ldr	r4, [pc, #20]	@ (8011d70 <rcutils_get_zero_initialized_allocator+0x18>)
 8011d5c:	4686      	mov	lr, r0
 8011d5e:	4684      	mov	ip, r0
 8011d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d66:	6823      	ldr	r3, [r4, #0]
 8011d68:	4670      	mov	r0, lr
 8011d6a:	f8cc 3000 	str.w	r3, [ip]
 8011d6e:	bd10      	pop	{r4, pc}
 8011d70:	0801fb10 	.word	0x0801fb10

08011d74 <rcutils_set_default_allocator>:
 8011d74:	b1a8      	cbz	r0, 8011da2 <rcutils_set_default_allocator+0x2e>
 8011d76:	6802      	ldr	r2, [r0, #0]
 8011d78:	b1a2      	cbz	r2, 8011da4 <rcutils_set_default_allocator+0x30>
 8011d7a:	6841      	ldr	r1, [r0, #4]
 8011d7c:	b1a1      	cbz	r1, 8011da8 <rcutils_set_default_allocator+0x34>
 8011d7e:	b410      	push	{r4}
 8011d80:	68c4      	ldr	r4, [r0, #12]
 8011d82:	b164      	cbz	r4, 8011d9e <rcutils_set_default_allocator+0x2a>
 8011d84:	6880      	ldr	r0, [r0, #8]
 8011d86:	b138      	cbz	r0, 8011d98 <rcutils_set_default_allocator+0x24>
 8011d88:	4b08      	ldr	r3, [pc, #32]	@ (8011dac <rcutils_set_default_allocator+0x38>)
 8011d8a:	601a      	str	r2, [r3, #0]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8011d92:	2001      	movs	r0, #1
 8011d94:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8011d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d9c:	4770      	bx	lr
 8011d9e:	4620      	mov	r0, r4
 8011da0:	e7fa      	b.n	8011d98 <rcutils_set_default_allocator+0x24>
 8011da2:	4770      	bx	lr
 8011da4:	4610      	mov	r0, r2
 8011da6:	4770      	bx	lr
 8011da8:	4608      	mov	r0, r1
 8011daa:	4770      	bx	lr
 8011dac:	24000c6c 	.word	0x24000c6c

08011db0 <rcutils_get_default_allocator>:
 8011db0:	b510      	push	{r4, lr}
 8011db2:	4c05      	ldr	r4, [pc, #20]	@ (8011dc8 <rcutils_get_default_allocator+0x18>)
 8011db4:	4686      	mov	lr, r0
 8011db6:	4684      	mov	ip, r0
 8011db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011dba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011dbe:	6823      	ldr	r3, [r4, #0]
 8011dc0:	4670      	mov	r0, lr
 8011dc2:	f8cc 3000 	str.w	r3, [ip]
 8011dc6:	bd10      	pop	{r4, pc}
 8011dc8:	24000c6c 	.word	0x24000c6c

08011dcc <rcutils_allocator_is_valid>:
 8011dcc:	b158      	cbz	r0, 8011de6 <rcutils_allocator_is_valid+0x1a>
 8011dce:	6803      	ldr	r3, [r0, #0]
 8011dd0:	b143      	cbz	r3, 8011de4 <rcutils_allocator_is_valid+0x18>
 8011dd2:	6843      	ldr	r3, [r0, #4]
 8011dd4:	b133      	cbz	r3, 8011de4 <rcutils_allocator_is_valid+0x18>
 8011dd6:	68c3      	ldr	r3, [r0, #12]
 8011dd8:	b123      	cbz	r3, 8011de4 <rcutils_allocator_is_valid+0x18>
 8011dda:	6880      	ldr	r0, [r0, #8]
 8011ddc:	3800      	subs	r0, #0
 8011dde:	bf18      	it	ne
 8011de0:	2001      	movne	r0, #1
 8011de2:	4770      	bx	lr
 8011de4:	4618      	mov	r0, r3
 8011de6:	4770      	bx	lr

08011de8 <rcutils_get_error_string>:
 8011de8:	4b06      	ldr	r3, [pc, #24]	@ (8011e04 <rcutils_get_error_string+0x1c>)
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	b13b      	cbz	r3, 8011dfe <rcutils_get_error_string+0x16>
 8011dee:	4b06      	ldr	r3, [pc, #24]	@ (8011e08 <rcutils_get_error_string+0x20>)
 8011df0:	781a      	ldrb	r2, [r3, #0]
 8011df2:	b90a      	cbnz	r2, 8011df8 <rcutils_get_error_string+0x10>
 8011df4:	2201      	movs	r2, #1
 8011df6:	701a      	strb	r2, [r3, #0]
 8011df8:	4b04      	ldr	r3, [pc, #16]	@ (8011e0c <rcutils_get_error_string+0x24>)
 8011dfa:	7818      	ldrb	r0, [r3, #0]
 8011dfc:	4770      	bx	lr
 8011dfe:	4b04      	ldr	r3, [pc, #16]	@ (8011e10 <rcutils_get_error_string+0x28>)
 8011e00:	7818      	ldrb	r0, [r3, #0]
 8011e02:	4770      	bx	lr
 8011e04:	24064b84 	.word	0x24064b84
 8011e08:	24064b99 	.word	0x24064b99
 8011e0c:	24064b98 	.word	0x24064b98
 8011e10:	0801fb24 	.word	0x0801fb24
 8011e14:	00000000 	.word	0x00000000

08011e18 <rcutils_reset_error>:
 8011e18:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8011e38 <rcutils_reset_error+0x20>
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	4a08      	ldr	r2, [pc, #32]	@ (8011e40 <rcutils_reset_error+0x28>)
 8011e20:	4808      	ldr	r0, [pc, #32]	@ (8011e44 <rcutils_reset_error+0x2c>)
 8011e22:	8013      	strh	r3, [r2, #0]
 8011e24:	4908      	ldr	r1, [pc, #32]	@ (8011e48 <rcutils_reset_error+0x30>)
 8011e26:	7003      	strb	r3, [r0, #0]
 8011e28:	700b      	strb	r3, [r1, #0]
 8011e2a:	ed82 7b02 	vstr	d7, [r2, #8]
 8011e2e:	4a07      	ldr	r2, [pc, #28]	@ (8011e4c <rcutils_reset_error+0x34>)
 8011e30:	7013      	strb	r3, [r2, #0]
 8011e32:	4770      	bx	lr
 8011e34:	f3af 8000 	nop.w
	...
 8011e40:	24064b88 	.word	0x24064b88
 8011e44:	24064b99 	.word	0x24064b99
 8011e48:	24064b98 	.word	0x24064b98
 8011e4c:	24064b84 	.word	0x24064b84

08011e50 <rcutils_system_time_now>:
 8011e50:	b300      	cbz	r0, 8011e94 <rcutils_system_time_now+0x44>
 8011e52:	b570      	push	{r4, r5, r6, lr}
 8011e54:	b084      	sub	sp, #16
 8011e56:	4604      	mov	r4, r0
 8011e58:	2001      	movs	r0, #1
 8011e5a:	4669      	mov	r1, sp
 8011e5c:	f7ef fdb0 	bl	80019c0 <clock_gettime>
 8011e60:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011e64:	2900      	cmp	r1, #0
 8011e66:	db12      	blt.n	8011e8e <rcutils_system_time_now+0x3e>
 8011e68:	ea53 0201 	orrs.w	r2, r3, r1
 8011e6c:	9d02      	ldr	r5, [sp, #8]
 8011e6e:	d101      	bne.n	8011e74 <rcutils_system_time_now+0x24>
 8011e70:	2d00      	cmp	r5, #0
 8011e72:	db0c      	blt.n	8011e8e <rcutils_system_time_now+0x3e>
 8011e74:	4e08      	ldr	r6, [pc, #32]	@ (8011e98 <rcutils_system_time_now+0x48>)
 8011e76:	2000      	movs	r0, #0
 8011e78:	fba3 3206 	umull	r3, r2, r3, r6
 8011e7c:	195b      	adds	r3, r3, r5
 8011e7e:	fb06 2201 	mla	r2, r6, r1, r2
 8011e82:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8011e86:	e9c4 3200 	strd	r3, r2, [r4]
 8011e8a:	b004      	add	sp, #16
 8011e8c:	bd70      	pop	{r4, r5, r6, pc}
 8011e8e:	2002      	movs	r0, #2
 8011e90:	b004      	add	sp, #16
 8011e92:	bd70      	pop	{r4, r5, r6, pc}
 8011e94:	200b      	movs	r0, #11
 8011e96:	4770      	bx	lr
 8011e98:	3b9aca00 	.word	0x3b9aca00

08011e9c <rcutils_steady_time_now>:
 8011e9c:	b300      	cbz	r0, 8011ee0 <rcutils_steady_time_now+0x44>
 8011e9e:	b570      	push	{r4, r5, r6, lr}
 8011ea0:	b084      	sub	sp, #16
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	4669      	mov	r1, sp
 8011ea8:	f7ef fd8a 	bl	80019c0 <clock_gettime>
 8011eac:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011eb0:	2900      	cmp	r1, #0
 8011eb2:	db12      	blt.n	8011eda <rcutils_steady_time_now+0x3e>
 8011eb4:	ea53 0201 	orrs.w	r2, r3, r1
 8011eb8:	9d02      	ldr	r5, [sp, #8]
 8011eba:	d101      	bne.n	8011ec0 <rcutils_steady_time_now+0x24>
 8011ebc:	2d00      	cmp	r5, #0
 8011ebe:	db0c      	blt.n	8011eda <rcutils_steady_time_now+0x3e>
 8011ec0:	4e08      	ldr	r6, [pc, #32]	@ (8011ee4 <rcutils_steady_time_now+0x48>)
 8011ec2:	2000      	movs	r0, #0
 8011ec4:	fba3 3206 	umull	r3, r2, r3, r6
 8011ec8:	195b      	adds	r3, r3, r5
 8011eca:	fb06 2201 	mla	r2, r6, r1, r2
 8011ece:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8011ed2:	e9c4 3200 	strd	r3, r2, [r4]
 8011ed6:	b004      	add	sp, #16
 8011ed8:	bd70      	pop	{r4, r5, r6, pc}
 8011eda:	2002      	movs	r0, #2
 8011edc:	b004      	add	sp, #16
 8011ede:	bd70      	pop	{r4, r5, r6, pc}
 8011ee0:	200b      	movs	r0, #11
 8011ee2:	4770      	bx	lr
 8011ee4:	3b9aca00 	.word	0x3b9aca00

08011ee8 <rmw_uros_set_custom_transport>:
 8011ee8:	b470      	push	{r4, r5, r6}
 8011eea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8011eee:	b162      	cbz	r2, 8011f0a <rmw_uros_set_custom_transport+0x22>
 8011ef0:	b15b      	cbz	r3, 8011f0a <rmw_uros_set_custom_transport+0x22>
 8011ef2:	b155      	cbz	r5, 8011f0a <rmw_uros_set_custom_transport+0x22>
 8011ef4:	b14e      	cbz	r6, 8011f0a <rmw_uros_set_custom_transport+0x22>
 8011ef6:	4c06      	ldr	r4, [pc, #24]	@ (8011f10 <rmw_uros_set_custom_transport+0x28>)
 8011ef8:	7020      	strb	r0, [r4, #0]
 8011efa:	2000      	movs	r0, #0
 8011efc:	6166      	str	r6, [r4, #20]
 8011efe:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8011f02:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011f06:	bc70      	pop	{r4, r5, r6}
 8011f08:	4770      	bx	lr
 8011f0a:	200b      	movs	r0, #11
 8011f0c:	bc70      	pop	{r4, r5, r6}
 8011f0e:	4770      	bx	lr
 8011f10:	24064b9c 	.word	0x24064b9c

08011f14 <get_message_typesupport_handle>:
 8011f14:	6883      	ldr	r3, [r0, #8]
 8011f16:	4718      	bx	r3

08011f18 <get_message_typesupport_handle_function>:
 8011f18:	b510      	push	{r4, lr}
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	6800      	ldr	r0, [r0, #0]
 8011f1e:	f7ee f9df 	bl	80002e0 <strcmp>
 8011f22:	2800      	cmp	r0, #0
 8011f24:	bf0c      	ite	eq
 8011f26:	4620      	moveq	r0, r4
 8011f28:	2000      	movne	r0, #0
 8011f2a:	bd10      	pop	{r4, pc}

08011f2c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8011f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f30:	6805      	ldr	r5, [r0, #0]
 8011f32:	4604      	mov	r4, r0
 8011f34:	460e      	mov	r6, r1
 8011f36:	4628      	mov	r0, r5
 8011f38:	f7ee f9d2 	bl	80002e0 <strcmp>
 8011f3c:	b1c8      	cbz	r0, 8011f72 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8011f3e:	4b11      	ldr	r3, [pc, #68]	@ (8011f84 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	429d      	cmp	r5, r3
 8011f44:	d112      	bne.n	8011f6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011f46:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011f4a:	f8d8 4000 	ldr.w	r4, [r8]
 8011f4e:	b16c      	cbz	r4, 8011f6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011f50:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011f54:	2700      	movs	r7, #0
 8011f56:	3d04      	subs	r5, #4
 8011f58:	4631      	mov	r1, r6
 8011f5a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011f5e:	f7ee f9bf 	bl	80002e0 <strcmp>
 8011f62:	00bb      	lsls	r3, r7, #2
 8011f64:	b140      	cbz	r0, 8011f78 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8011f66:	3701      	adds	r7, #1
 8011f68:	42bc      	cmp	r4, r7
 8011f6a:	d1f5      	bne.n	8011f58 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f72:	4620      	mov	r0, r4
 8011f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f78:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f80:	58d3      	ldr	r3, [r2, r3]
 8011f82:	4718      	bx	r3
 8011f84:	24000c80 	.word	0x24000c80

08011f88 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8011f88:	f005 be4c 	b.w	8017c24 <std_msgs__msg__Header__init>

08011f8c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8011f8c:	f005 be6e 	b.w	8017c6c <std_msgs__msg__Header__fini>

08011f90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011f90:	b508      	push	{r3, lr}
 8011f92:	f7fd fc1d 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011f96:	4b06      	ldr	r3, [pc, #24]	@ (8011fb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011f98:	4906      	ldr	r1, [pc, #24]	@ (8011fb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8011f9a:	681a      	ldr	r2, [r3, #0]
 8011f9c:	60c8      	str	r0, [r1, #12]
 8011f9e:	b10a      	cbz	r2, 8011fa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8011fa0:	4803      	ldr	r0, [pc, #12]	@ (8011fb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011fa2:	bd08      	pop	{r3, pc}
 8011fa4:	4a04      	ldr	r2, [pc, #16]	@ (8011fb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8011fa6:	4802      	ldr	r0, [pc, #8]	@ (8011fb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011fa8:	6812      	ldr	r2, [r2, #0]
 8011faa:	601a      	str	r2, [r3, #0]
 8011fac:	bd08      	pop	{r3, pc}
 8011fae:	bf00      	nop
 8011fb0:	24000d00 	.word	0x24000d00
 8011fb4:	24000c88 	.word	0x24000c88
 8011fb8:	24000c84 	.word	0x24000c84

08011fbc <_Header__max_serialized_size>:
 8011fbc:	b500      	push	{lr}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	2100      	movs	r1, #0
 8011fc4:	f10d 0007 	add.w	r0, sp, #7
 8011fc8:	f88d 3007 	strb.w	r3, [sp, #7]
 8011fcc:	f7fd fc5e 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 8011fd0:	b003      	add	sp, #12
 8011fd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fd6:	bf00      	nop

08011fd8 <get_serialized_size_std_msgs__msg__Header>:
 8011fd8:	b570      	push	{r4, r5, r6, lr}
 8011fda:	4605      	mov	r5, r0
 8011fdc:	b168      	cbz	r0, 8011ffa <get_serialized_size_std_msgs__msg__Header+0x22>
 8011fde:	460c      	mov	r4, r1
 8011fe0:	f7fd fc04 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 8011fe4:	2104      	movs	r1, #4
 8011fe6:	1826      	adds	r6, r4, r0
 8011fe8:	f1c4 0405 	rsb	r4, r4, #5
 8011fec:	4630      	mov	r0, r6
 8011fee:	f7fe ff01 	bl	8010df4 <ucdr_alignment>
 8011ff2:	68e9      	ldr	r1, [r5, #12]
 8011ff4:	440c      	add	r4, r1
 8011ff6:	4404      	add	r4, r0
 8011ff8:	19a0      	adds	r0, r4, r6
 8011ffa:	bd70      	pop	{r4, r5, r6, pc}

08011ffc <_Header__cdr_deserialize>:
 8011ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ffe:	460c      	mov	r4, r1
 8012000:	b083      	sub	sp, #12
 8012002:	b1e9      	cbz	r1, 8012040 <_Header__cdr_deserialize+0x44>
 8012004:	4606      	mov	r6, r0
 8012006:	f7fd fc55 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801200a:	4603      	mov	r3, r0
 801200c:	4621      	mov	r1, r4
 801200e:	4630      	mov	r0, r6
 8012010:	685b      	ldr	r3, [r3, #4]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	4798      	blx	r3
 8012016:	6927      	ldr	r7, [r4, #16]
 8012018:	ab01      	add	r3, sp, #4
 801201a:	68a1      	ldr	r1, [r4, #8]
 801201c:	463a      	mov	r2, r7
 801201e:	4630      	mov	r0, r6
 8012020:	f000 fc6a 	bl	80128f8 <ucdr_deserialize_sequence_char>
 8012024:	9b01      	ldr	r3, [sp, #4]
 8012026:	4605      	mov	r5, r0
 8012028:	b920      	cbnz	r0, 8012034 <_Header__cdr_deserialize+0x38>
 801202a:	429f      	cmp	r7, r3
 801202c:	d30c      	bcc.n	8012048 <_Header__cdr_deserialize+0x4c>
 801202e:	4628      	mov	r0, r5
 8012030:	b003      	add	sp, #12
 8012032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012034:	b103      	cbz	r3, 8012038 <_Header__cdr_deserialize+0x3c>
 8012036:	3b01      	subs	r3, #1
 8012038:	4628      	mov	r0, r5
 801203a:	60e3      	str	r3, [r4, #12]
 801203c:	b003      	add	sp, #12
 801203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012040:	460d      	mov	r5, r1
 8012042:	4628      	mov	r0, r5
 8012044:	b003      	add	sp, #12
 8012046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012048:	2101      	movs	r1, #1
 801204a:	4630      	mov	r0, r6
 801204c:	75b5      	strb	r5, [r6, #22]
 801204e:	7571      	strb	r1, [r6, #21]
 8012050:	60e5      	str	r5, [r4, #12]
 8012052:	f7fe fee7 	bl	8010e24 <ucdr_align_to>
 8012056:	4630      	mov	r0, r6
 8012058:	9901      	ldr	r1, [sp, #4]
 801205a:	f7fe ff1b 	bl	8010e94 <ucdr_advance_buffer>
 801205e:	4628      	mov	r0, r5
 8012060:	b003      	add	sp, #12
 8012062:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012064 <_Header__cdr_serialize>:
 8012064:	b308      	cbz	r0, 80120aa <_Header__cdr_serialize+0x46>
 8012066:	b570      	push	{r4, r5, r6, lr}
 8012068:	4604      	mov	r4, r0
 801206a:	460d      	mov	r5, r1
 801206c:	f7fd fc22 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012070:	4603      	mov	r3, r0
 8012072:	4629      	mov	r1, r5
 8012074:	4620      	mov	r0, r4
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	689b      	ldr	r3, [r3, #8]
 801207a:	4798      	blx	r3
 801207c:	68a6      	ldr	r6, [r4, #8]
 801207e:	b15e      	cbz	r6, 8012098 <_Header__cdr_serialize+0x34>
 8012080:	4630      	mov	r0, r6
 8012082:	f7ee f937 	bl	80002f4 <strlen>
 8012086:	4603      	mov	r3, r0
 8012088:	1c42      	adds	r2, r0, #1
 801208a:	4631      	mov	r1, r6
 801208c:	4628      	mov	r0, r5
 801208e:	60e3      	str	r3, [r4, #12]
 8012090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012094:	f000 bc1e 	b.w	80128d4 <ucdr_serialize_sequence_char>
 8012098:	4633      	mov	r3, r6
 801209a:	4632      	mov	r2, r6
 801209c:	4631      	mov	r1, r6
 801209e:	4628      	mov	r0, r5
 80120a0:	60e3      	str	r3, [r4, #12]
 80120a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120a6:	f000 bc15 	b.w	80128d4 <ucdr_serialize_sequence_char>
 80120aa:	4770      	bx	lr

080120ac <_Header__get_serialized_size>:
 80120ac:	b538      	push	{r3, r4, r5, lr}
 80120ae:	4604      	mov	r4, r0
 80120b0:	b150      	cbz	r0, 80120c8 <_Header__get_serialized_size+0x1c>
 80120b2:	2100      	movs	r1, #0
 80120b4:	f7fd fb9a 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 80120b8:	2104      	movs	r1, #4
 80120ba:	4605      	mov	r5, r0
 80120bc:	f7fe fe9a 	bl	8010df4 <ucdr_alignment>
 80120c0:	68e2      	ldr	r2, [r4, #12]
 80120c2:	3205      	adds	r2, #5
 80120c4:	1953      	adds	r3, r2, r5
 80120c6:	4418      	add	r0, r3
 80120c8:	bd38      	pop	{r3, r4, r5, pc}
 80120ca:	bf00      	nop

080120cc <max_serialized_size_std_msgs__msg__Header>:
 80120cc:	2301      	movs	r3, #1
 80120ce:	b510      	push	{r4, lr}
 80120d0:	7003      	strb	r3, [r0, #0]
 80120d2:	4604      	mov	r4, r0
 80120d4:	f7fd fbda 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 80120d8:	2300      	movs	r3, #0
 80120da:	7023      	strb	r3, [r4, #0]
 80120dc:	bd10      	pop	{r4, pc}
 80120de:	bf00      	nop

080120e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80120e0:	4800      	ldr	r0, [pc, #0]	@ (80120e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80120e2:	4770      	bx	lr
 80120e4:	24000d0c 	.word	0x24000d0c

080120e8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80120e8:	4b04      	ldr	r3, [pc, #16]	@ (80120fc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80120ea:	681a      	ldr	r2, [r3, #0]
 80120ec:	b10a      	cbz	r2, 80120f2 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 80120ee:	4803      	ldr	r0, [pc, #12]	@ (80120fc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80120f0:	4770      	bx	lr
 80120f2:	4a03      	ldr	r2, [pc, #12]	@ (8012100 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 80120f4:	4801      	ldr	r0, [pc, #4]	@ (80120fc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80120f6:	6812      	ldr	r2, [r2, #0]
 80120f8:	601a      	str	r2, [r3, #0]
 80120fa:	4770      	bx	lr
 80120fc:	24000d3c 	.word	0x24000d3c
 8012100:	24000c80 	.word	0x24000c80

08012104 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012104:	4a02      	ldr	r2, [pc, #8]	@ (8012110 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8012106:	4b03      	ldr	r3, [pc, #12]	@ (8012114 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8012108:	6812      	ldr	r2, [r2, #0]
 801210a:	601a      	str	r2, [r3, #0]
 801210c:	4770      	bx	lr
 801210e:	bf00      	nop
 8012110:	24000c80 	.word	0x24000c80
 8012114:	24000d3c 	.word	0x24000d3c

08012118 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012118:	4b04      	ldr	r3, [pc, #16]	@ (801212c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 801211a:	681a      	ldr	r2, [r3, #0]
 801211c:	b10a      	cbz	r2, 8012122 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 801211e:	4803      	ldr	r0, [pc, #12]	@ (801212c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8012120:	4770      	bx	lr
 8012122:	4a03      	ldr	r2, [pc, #12]	@ (8012130 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 8012124:	4801      	ldr	r0, [pc, #4]	@ (801212c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8012126:	6812      	ldr	r2, [r2, #0]
 8012128:	601a      	str	r2, [r3, #0]
 801212a:	4770      	bx	lr
 801212c:	24000d50 	.word	0x24000d50
 8012130:	24000c80 	.word	0x24000c80

08012134 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012134:	4a02      	ldr	r2, [pc, #8]	@ (8012140 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 8012136:	4b03      	ldr	r3, [pc, #12]	@ (8012144 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 8012138:	6812      	ldr	r2, [r2, #0]
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	4770      	bx	lr
 801213e:	bf00      	nop
 8012140:	24000c80 	.word	0x24000c80
 8012144:	24000d50 	.word	0x24000d50

08012148 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012148:	4b04      	ldr	r3, [pc, #16]	@ (801215c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 801214a:	681a      	ldr	r2, [r3, #0]
 801214c:	b10a      	cbz	r2, 8012152 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 801214e:	4803      	ldr	r0, [pc, #12]	@ (801215c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8012150:	4770      	bx	lr
 8012152:	4a03      	ldr	r2, [pc, #12]	@ (8012160 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 8012154:	4801      	ldr	r0, [pc, #4]	@ (801215c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8012156:	6812      	ldr	r2, [r2, #0]
 8012158:	601a      	str	r2, [r3, #0]
 801215a:	4770      	bx	lr
 801215c:	24000d64 	.word	0x24000d64
 8012160:	24000c80 	.word	0x24000c80

08012164 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012164:	4a02      	ldr	r2, [pc, #8]	@ (8012170 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 8012166:	4b03      	ldr	r3, [pc, #12]	@ (8012174 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8012168:	6812      	ldr	r2, [r2, #0]
 801216a:	601a      	str	r2, [r3, #0]
 801216c:	4770      	bx	lr
 801216e:	bf00      	nop
 8012170:	24000c80 	.word	0x24000c80
 8012174:	24000d64 	.word	0x24000d64

08012178 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012178:	4b04      	ldr	r3, [pc, #16]	@ (801218c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	b10a      	cbz	r2, 8012182 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 801217e:	4803      	ldr	r0, [pc, #12]	@ (801218c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8012180:	4770      	bx	lr
 8012182:	4a03      	ldr	r2, [pc, #12]	@ (8012190 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 8012184:	4801      	ldr	r0, [pc, #4]	@ (801218c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8012186:	6812      	ldr	r2, [r2, #0]
 8012188:	601a      	str	r2, [r3, #0]
 801218a:	4770      	bx	lr
 801218c:	24000d78 	.word	0x24000d78
 8012190:	24000c80 	.word	0x24000c80

08012194 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012194:	4a02      	ldr	r2, [pc, #8]	@ (80121a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8012196:	4b03      	ldr	r3, [pc, #12]	@ (80121a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8012198:	6812      	ldr	r2, [r2, #0]
 801219a:	601a      	str	r2, [r3, #0]
 801219c:	4770      	bx	lr
 801219e:	bf00      	nop
 80121a0:	24000c80 	.word	0x24000c80
 80121a4:	24000d78 	.word	0x24000d78

080121a8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 80121a8:	f005 bd6c 	b.w	8017c84 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

080121ac <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 80121ac:	f005 bd8e 	b.w	8017ccc <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

080121b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80121b0:	b510      	push	{r4, lr}
 80121b2:	4c08      	ldr	r4, [pc, #32]	@ (80121d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 80121b4:	f7ff feec 	bl	8011f90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80121b8:	60e0      	str	r0, [r4, #12]
 80121ba:	f005 fdf3 	bl	8017da4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80121be:	4b06      	ldr	r3, [pc, #24]	@ (80121d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80121c0:	64a0      	str	r0, [r4, #72]	@ 0x48
 80121c2:	681a      	ldr	r2, [r3, #0]
 80121c4:	b10a      	cbz	r2, 80121ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 80121c6:	4804      	ldr	r0, [pc, #16]	@ (80121d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80121c8:	bd10      	pop	{r4, pc}
 80121ca:	4a04      	ldr	r2, [pc, #16]	@ (80121dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 80121cc:	4802      	ldr	r0, [pc, #8]	@ (80121d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80121ce:	6812      	ldr	r2, [r2, #0]
 80121d0:	601a      	str	r2, [r3, #0]
 80121d2:	bd10      	pop	{r4, pc}
 80121d4:	24000d84 	.word	0x24000d84
 80121d8:	24000dfc 	.word	0x24000dfc
 80121dc:	24000c84 	.word	0x24000c84

080121e0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 80121e0:	f005 bd80 	b.w	8017ce4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

080121e4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 80121e4:	f005 bda2 	b.w	8017d2c <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

080121e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80121e8:	b510      	push	{r4, lr}
 80121ea:	4c08      	ldr	r4, [pc, #32]	@ (801220c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 80121ec:	f7ff fed0 	bl	8011f90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80121f0:	60e0      	str	r0, [r4, #12]
 80121f2:	f005 fde9 	bl	8017dc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80121f6:	4b06      	ldr	r3, [pc, #24]	@ (8012210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80121f8:	64a0      	str	r0, [r4, #72]	@ 0x48
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	b10a      	cbz	r2, 8012202 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 80121fe:	4804      	ldr	r0, [pc, #16]	@ (8012210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8012200:	bd10      	pop	{r4, pc}
 8012202:	4a04      	ldr	r2, [pc, #16]	@ (8012214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 8012204:	4802      	ldr	r0, [pc, #8]	@ (8012210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8012206:	6812      	ldr	r2, [r2, #0]
 8012208:	601a      	str	r2, [r3, #0]
 801220a:	bd10      	pop	{r4, pc}
 801220c:	24000e08 	.word	0x24000e08
 8012210:	24000e80 	.word	0x24000e80
 8012214:	24000c84 	.word	0x24000c84

08012218 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 8012218:	f005 bd94 	b.w	8017d44 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

0801221c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 801221c:	f005 bda4 	b.w	8017d68 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08012220 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012220:	b508      	push	{r3, lr}
 8012222:	f7fd fad5 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012226:	4b06      	ldr	r3, [pc, #24]	@ (8012240 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012228:	4906      	ldr	r1, [pc, #24]	@ (8012244 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	60c8      	str	r0, [r1, #12]
 801222e:	b10a      	cbz	r2, 8012234 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8012230:	4803      	ldr	r0, [pc, #12]	@ (8012240 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012232:	bd08      	pop	{r3, pc}
 8012234:	4a04      	ldr	r2, [pc, #16]	@ (8012248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 8012236:	4802      	ldr	r0, [pc, #8]	@ (8012240 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012238:	6812      	ldr	r2, [r2, #0]
 801223a:	601a      	str	r2, [r3, #0]
 801223c:	bd08      	pop	{r3, pc}
 801223e:	bf00      	nop
 8012240:	24000f04 	.word	0x24000f04
 8012244:	24000e8c 	.word	0x24000e8c
 8012248:	24000c84 	.word	0x24000c84

0801224c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 801224c:	f005 bd90 	b.w	8017d70 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08012250 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8012250:	f005 bda0 	b.w	8017d94 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08012254 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012254:	b508      	push	{r3, lr}
 8012256:	f7fd fabb 	bl	800f7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801225a:	4b06      	ldr	r3, [pc, #24]	@ (8012274 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801225c:	4906      	ldr	r1, [pc, #24]	@ (8012278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 801225e:	681a      	ldr	r2, [r3, #0]
 8012260:	60c8      	str	r0, [r1, #12]
 8012262:	b10a      	cbz	r2, 8012268 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8012264:	4803      	ldr	r0, [pc, #12]	@ (8012274 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012266:	bd08      	pop	{r3, pc}
 8012268:	4a04      	ldr	r2, [pc, #16]	@ (801227c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 801226a:	4802      	ldr	r0, [pc, #8]	@ (8012274 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801226c:	6812      	ldr	r2, [r2, #0]
 801226e:	601a      	str	r2, [r3, #0]
 8012270:	bd08      	pop	{r3, pc}
 8012272:	bf00      	nop
 8012274:	24000f88 	.word	0x24000f88
 8012278:	24000f10 	.word	0x24000f10
 801227c:	24000c84 	.word	0x24000c84

08012280 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012280:	b538      	push	{r3, r4, r5, lr}
 8012282:	4604      	mov	r4, r0
 8012284:	b150      	cbz	r0, 801229c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8012286:	460d      	mov	r5, r1
 8012288:	f7ff fea6 	bl	8011fd8 <get_serialized_size_std_msgs__msg__Header>
 801228c:	4603      	mov	r3, r0
 801228e:	f104 0018 	add.w	r0, r4, #24
 8012292:	461c      	mov	r4, r3
 8012294:	18e9      	adds	r1, r5, r3
 8012296:	f005 fda5 	bl	8017de4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801229a:	4420      	add	r0, r4
 801229c:	bd38      	pop	{r3, r4, r5, pc}
 801229e:	bf00      	nop

080122a0 <_ActuationCommandStamped__cdr_deserialize>:
 80122a0:	b570      	push	{r4, r5, r6, lr}
 80122a2:	460c      	mov	r4, r1
 80122a4:	b199      	cbz	r1, 80122ce <_ActuationCommandStamped__cdr_deserialize+0x2e>
 80122a6:	4605      	mov	r5, r0
 80122a8:	f7ff ff1a 	bl	80120e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80122ac:	4603      	mov	r3, r0
 80122ae:	4621      	mov	r1, r4
 80122b0:	4628      	mov	r0, r5
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	68db      	ldr	r3, [r3, #12]
 80122b6:	4798      	blx	r3
 80122b8:	f005 fe1c 	bl	8017ef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80122bc:	4603      	mov	r3, r0
 80122be:	f104 0118 	add.w	r1, r4, #24
 80122c2:	4628      	mov	r0, r5
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	4718      	bx	r3
 80122ce:	4608      	mov	r0, r1
 80122d0:	bd70      	pop	{r4, r5, r6, pc}
 80122d2:	bf00      	nop

080122d4 <_ActuationCommandStamped__cdr_serialize>:
 80122d4:	b510      	push	{r4, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	9101      	str	r1, [sp, #4]
 80122da:	b1a0      	cbz	r0, 8012306 <_ActuationCommandStamped__cdr_serialize+0x32>
 80122dc:	4604      	mov	r4, r0
 80122de:	f7ff feff 	bl	80120e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80122e2:	4603      	mov	r3, r0
 80122e4:	9901      	ldr	r1, [sp, #4]
 80122e6:	4620      	mov	r0, r4
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	4798      	blx	r3
 80122ee:	f005 fe01 	bl	8017ef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80122f2:	4603      	mov	r3, r0
 80122f4:	9901      	ldr	r1, [sp, #4]
 80122f6:	f104 0018 	add.w	r0, r4, #24
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	689b      	ldr	r3, [r3, #8]
 80122fe:	b002      	add	sp, #8
 8012300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012304:	4718      	bx	r3
 8012306:	b002      	add	sp, #8
 8012308:	bd10      	pop	{r4, pc}
 801230a:	bf00      	nop

0801230c <_ActuationCommandStamped__get_serialized_size>:
 801230c:	b510      	push	{r4, lr}
 801230e:	4604      	mov	r4, r0
 8012310:	b148      	cbz	r0, 8012326 <_ActuationCommandStamped__get_serialized_size+0x1a>
 8012312:	2100      	movs	r1, #0
 8012314:	f7ff fe60 	bl	8011fd8 <get_serialized_size_std_msgs__msg__Header>
 8012318:	4601      	mov	r1, r0
 801231a:	f104 0018 	add.w	r0, r4, #24
 801231e:	460c      	mov	r4, r1
 8012320:	f005 fd60 	bl	8017de4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012324:	4420      	add	r0, r4
 8012326:	bd10      	pop	{r4, pc}

08012328 <_ActuationCommandStamped__max_serialized_size>:
 8012328:	b510      	push	{r4, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	2301      	movs	r3, #1
 801232e:	2100      	movs	r1, #0
 8012330:	f10d 0007 	add.w	r0, sp, #7
 8012334:	f88d 3007 	strb.w	r3, [sp, #7]
 8012338:	f7ff fec8 	bl	80120cc <max_serialized_size_std_msgs__msg__Header>
 801233c:	4604      	mov	r4, r0
 801233e:	f10d 0007 	add.w	r0, sp, #7
 8012342:	4621      	mov	r1, r4
 8012344:	f005 fdbc 	bl	8017ec0 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012348:	4420      	add	r0, r4
 801234a:	b002      	add	sp, #8
 801234c:	bd10      	pop	{r4, pc}
 801234e:	bf00      	nop

08012350 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012350:	4800      	ldr	r0, [pc, #0]	@ (8012354 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8012352:	4770      	bx	lr
 8012354:	24000f94 	.word	0x24000f94

08012358 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012358:	b538      	push	{r3, r4, r5, lr}
 801235a:	4604      	mov	r4, r0
 801235c:	b150      	cbz	r0, 8012374 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 801235e:	460d      	mov	r5, r1
 8012360:	f7ff fe3a 	bl	8011fd8 <get_serialized_size_std_msgs__msg__Header>
 8012364:	4603      	mov	r3, r0
 8012366:	f104 0018 	add.w	r0, r4, #24
 801236a:	461c      	mov	r4, r3
 801236c:	18e9      	adds	r1, r5, r3
 801236e:	f005 fdc5 	bl	8017efc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8012372:	4420      	add	r0, r4
 8012374:	bd38      	pop	{r3, r4, r5, pc}
 8012376:	bf00      	nop

08012378 <_ActuationStatusStamped__cdr_deserialize>:
 8012378:	b570      	push	{r4, r5, r6, lr}
 801237a:	460c      	mov	r4, r1
 801237c:	b199      	cbz	r1, 80123a6 <_ActuationStatusStamped__cdr_deserialize+0x2e>
 801237e:	4605      	mov	r5, r0
 8012380:	f7ff feae 	bl	80120e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012384:	4603      	mov	r3, r0
 8012386:	4621      	mov	r1, r4
 8012388:	4628      	mov	r0, r5
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	4798      	blx	r3
 8012390:	f005 fe3c 	bl	801800c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8012394:	4603      	mov	r3, r0
 8012396:	f104 0118 	add.w	r1, r4, #24
 801239a:	4628      	mov	r0, r5
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123a2:	68db      	ldr	r3, [r3, #12]
 80123a4:	4718      	bx	r3
 80123a6:	4608      	mov	r0, r1
 80123a8:	bd70      	pop	{r4, r5, r6, pc}
 80123aa:	bf00      	nop

080123ac <_ActuationStatusStamped__cdr_serialize>:
 80123ac:	b510      	push	{r4, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	9101      	str	r1, [sp, #4]
 80123b2:	b1a0      	cbz	r0, 80123de <_ActuationStatusStamped__cdr_serialize+0x32>
 80123b4:	4604      	mov	r4, r0
 80123b6:	f7ff fe93 	bl	80120e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80123ba:	4603      	mov	r3, r0
 80123bc:	9901      	ldr	r1, [sp, #4]
 80123be:	4620      	mov	r0, r4
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	689b      	ldr	r3, [r3, #8]
 80123c4:	4798      	blx	r3
 80123c6:	f005 fe21 	bl	801800c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80123ca:	4603      	mov	r3, r0
 80123cc:	9901      	ldr	r1, [sp, #4]
 80123ce:	f104 0018 	add.w	r0, r4, #24
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	b002      	add	sp, #8
 80123d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123dc:	4718      	bx	r3
 80123de:	b002      	add	sp, #8
 80123e0:	bd10      	pop	{r4, pc}
 80123e2:	bf00      	nop

080123e4 <_ActuationStatusStamped__get_serialized_size>:
 80123e4:	b510      	push	{r4, lr}
 80123e6:	4604      	mov	r4, r0
 80123e8:	b148      	cbz	r0, 80123fe <_ActuationStatusStamped__get_serialized_size+0x1a>
 80123ea:	2100      	movs	r1, #0
 80123ec:	f7ff fdf4 	bl	8011fd8 <get_serialized_size_std_msgs__msg__Header>
 80123f0:	4601      	mov	r1, r0
 80123f2:	f104 0018 	add.w	r0, r4, #24
 80123f6:	460c      	mov	r4, r1
 80123f8:	f005 fd80 	bl	8017efc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80123fc:	4420      	add	r0, r4
 80123fe:	bd10      	pop	{r4, pc}

08012400 <_ActuationStatusStamped__max_serialized_size>:
 8012400:	b510      	push	{r4, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	2301      	movs	r3, #1
 8012406:	2100      	movs	r1, #0
 8012408:	f10d 0007 	add.w	r0, sp, #7
 801240c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012410:	f7ff fe5c 	bl	80120cc <max_serialized_size_std_msgs__msg__Header>
 8012414:	4604      	mov	r4, r0
 8012416:	f10d 0007 	add.w	r0, sp, #7
 801241a:	4621      	mov	r1, r4
 801241c:	f005 fddc 	bl	8017fd8 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8012420:	4420      	add	r0, r4
 8012422:	b002      	add	sp, #8
 8012424:	bd10      	pop	{r4, pc}
 8012426:	bf00      	nop

08012428 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012428:	4800      	ldr	r0, [pc, #0]	@ (801242c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 801242a:	4770      	bx	lr
 801242c:	24000fbc 	.word	0x24000fbc

08012430 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012430:	b538      	push	{r3, r4, r5, lr}
 8012432:	b158      	cbz	r0, 801244c <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 8012434:	460d      	mov	r5, r1
 8012436:	f7fd f9d9 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 801243a:	2104      	movs	r1, #4
 801243c:	182c      	adds	r4, r5, r0
 801243e:	f1c5 0504 	rsb	r5, r5, #4
 8012442:	4620      	mov	r0, r4
 8012444:	f7fe fcd6 	bl	8010df4 <ucdr_alignment>
 8012448:	4428      	add	r0, r5
 801244a:	4420      	add	r0, r4
 801244c:	bd38      	pop	{r3, r4, r5, pc}
 801244e:	bf00      	nop

08012450 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8012450:	b538      	push	{r3, r4, r5, lr}
 8012452:	460c      	mov	r4, r1
 8012454:	b179      	cbz	r1, 8012476 <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 8012456:	4605      	mov	r5, r0
 8012458:	f7fd fa2c 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801245c:	4603      	mov	r3, r0
 801245e:	4621      	mov	r1, r4
 8012460:	4628      	mov	r0, r5
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	4798      	blx	r3
 8012468:	f104 0108 	add.w	r1, r4, #8
 801246c:	4628      	mov	r0, r5
 801246e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012472:	f7fe ba41 	b.w	80108f8 <ucdr_deserialize_float>
 8012476:	4608      	mov	r0, r1
 8012478:	bd38      	pop	{r3, r4, r5, pc}
 801247a:	bf00      	nop

0801247c <_SteeringWheelStatusStamped__cdr_serialize>:
 801247c:	b188      	cbz	r0, 80124a2 <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 801247e:	b538      	push	{r3, r4, r5, lr}
 8012480:	4604      	mov	r4, r0
 8012482:	460d      	mov	r5, r1
 8012484:	f7fd fa16 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012488:	4603      	mov	r3, r0
 801248a:	4629      	mov	r1, r5
 801248c:	4620      	mov	r0, r4
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	689b      	ldr	r3, [r3, #8]
 8012492:	4798      	blx	r3
 8012494:	ed94 0a02 	vldr	s0, [r4, #8]
 8012498:	4628      	mov	r0, r5
 801249a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801249e:	f7fe b993 	b.w	80107c8 <ucdr_serialize_float>
 80124a2:	4770      	bx	lr

080124a4 <_SteeringWheelStatusStamped__get_serialized_size>:
 80124a4:	b150      	cbz	r0, 80124bc <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 80124a6:	2100      	movs	r1, #0
 80124a8:	b510      	push	{r4, lr}
 80124aa:	f7fd f99f 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 80124ae:	4604      	mov	r4, r0
 80124b0:	2104      	movs	r1, #4
 80124b2:	f7fe fc9f 	bl	8010df4 <ucdr_alignment>
 80124b6:	4420      	add	r0, r4
 80124b8:	3004      	adds	r0, #4
 80124ba:	bd10      	pop	{r4, pc}
 80124bc:	4770      	bx	lr
 80124be:	bf00      	nop

080124c0 <_SteeringWheelStatusStamped__max_serialized_size>:
 80124c0:	b510      	push	{r4, lr}
 80124c2:	b082      	sub	sp, #8
 80124c4:	2301      	movs	r3, #1
 80124c6:	2100      	movs	r1, #0
 80124c8:	f10d 0007 	add.w	r0, sp, #7
 80124cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80124d0:	f7fd f9dc 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 80124d4:	4604      	mov	r4, r0
 80124d6:	2104      	movs	r1, #4
 80124d8:	f7fe fc8c 	bl	8010df4 <ucdr_alignment>
 80124dc:	4420      	add	r0, r4
 80124de:	3004      	adds	r0, #4
 80124e0:	b002      	add	sp, #8
 80124e2:	bd10      	pop	{r4, pc}

080124e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80124e4:	4800      	ldr	r0, [pc, #0]	@ (80124e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 80124e6:	4770      	bx	lr
 80124e8:	24000fe4 	.word	0x24000fe4

080124ec <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80124ec:	b538      	push	{r3, r4, r5, lr}
 80124ee:	b158      	cbz	r0, 8012508 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 80124f0:	460d      	mov	r5, r1
 80124f2:	f7fd f97b 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 80124f6:	2101      	movs	r1, #1
 80124f8:	182c      	adds	r4, r5, r0
 80124fa:	f1c5 0501 	rsb	r5, r5, #1
 80124fe:	4620      	mov	r0, r4
 8012500:	f7fe fc78 	bl	8010df4 <ucdr_alignment>
 8012504:	4428      	add	r0, r5
 8012506:	4420      	add	r0, r4
 8012508:	bd38      	pop	{r3, r4, r5, pc}
 801250a:	bf00      	nop

0801250c <_VehicleEmergencyStamped__cdr_deserialize>:
 801250c:	b538      	push	{r3, r4, r5, lr}
 801250e:	460c      	mov	r4, r1
 8012510:	b179      	cbz	r1, 8012532 <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 8012512:	4605      	mov	r5, r0
 8012514:	f7fd f9ce 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012518:	4603      	mov	r3, r0
 801251a:	4621      	mov	r1, r4
 801251c:	4628      	mov	r0, r5
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	4798      	blx	r3
 8012524:	f104 0108 	add.w	r1, r4, #8
 8012528:	4628      	mov	r0, r5
 801252a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801252e:	f7fd b9db 	b.w	800f8e8 <ucdr_deserialize_bool>
 8012532:	4608      	mov	r0, r1
 8012534:	bd38      	pop	{r3, r4, r5, pc}
 8012536:	bf00      	nop

08012538 <_VehicleEmergencyStamped__cdr_serialize>:
 8012538:	b180      	cbz	r0, 801255c <_VehicleEmergencyStamped__cdr_serialize+0x24>
 801253a:	b538      	push	{r3, r4, r5, lr}
 801253c:	4604      	mov	r4, r0
 801253e:	460d      	mov	r5, r1
 8012540:	f7fd f9b8 	bl	800f8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012544:	4603      	mov	r3, r0
 8012546:	4629      	mov	r1, r5
 8012548:	4620      	mov	r0, r4
 801254a:	685b      	ldr	r3, [r3, #4]
 801254c:	689b      	ldr	r3, [r3, #8]
 801254e:	4798      	blx	r3
 8012550:	7a21      	ldrb	r1, [r4, #8]
 8012552:	4628      	mov	r0, r5
 8012554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012558:	f7fd b9b0 	b.w	800f8bc <ucdr_serialize_bool>
 801255c:	4770      	bx	lr
 801255e:	bf00      	nop

08012560 <_VehicleEmergencyStamped__get_serialized_size>:
 8012560:	b150      	cbz	r0, 8012578 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8012562:	2100      	movs	r1, #0
 8012564:	b510      	push	{r4, lr}
 8012566:	f7fd f941 	bl	800f7ec <get_serialized_size_builtin_interfaces__msg__Time>
 801256a:	4604      	mov	r4, r0
 801256c:	2101      	movs	r1, #1
 801256e:	f7fe fc41 	bl	8010df4 <ucdr_alignment>
 8012572:	4420      	add	r0, r4
 8012574:	3001      	adds	r0, #1
 8012576:	bd10      	pop	{r4, pc}
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop

0801257c <_VehicleEmergencyStamped__max_serialized_size>:
 801257c:	b510      	push	{r4, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	2401      	movs	r4, #1
 8012582:	2100      	movs	r1, #0
 8012584:	f10d 0007 	add.w	r0, sp, #7
 8012588:	f88d 4007 	strb.w	r4, [sp, #7]
 801258c:	f7fd f97e 	bl	800f88c <max_serialized_size_builtin_interfaces__msg__Time>
 8012590:	4621      	mov	r1, r4
 8012592:	4604      	mov	r4, r0
 8012594:	f7fe fc2e 	bl	8010df4 <ucdr_alignment>
 8012598:	4420      	add	r0, r4
 801259a:	3001      	adds	r0, #1
 801259c:	b002      	add	sp, #8
 801259e:	bd10      	pop	{r4, pc}

080125a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80125a0:	4800      	ldr	r0, [pc, #0]	@ (80125a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 80125a2:	4770      	bx	lr
 80125a4:	2400100c 	.word	0x2400100c

080125a8 <autoware_control_msgs__msg__Control__init>:
 80125a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ac:	4605      	mov	r5, r0
 80125ae:	b3c0      	cbz	r0, 8012622 <autoware_control_msgs__msg__Control__init+0x7a>
 80125b0:	f000 f98a 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 80125b4:	4604      	mov	r4, r0
 80125b6:	b310      	cbz	r0, 80125fe <autoware_control_msgs__msg__Control__init+0x56>
 80125b8:	f105 0608 	add.w	r6, r5, #8
 80125bc:	4630      	mov	r0, r6
 80125be:	f000 f983 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 80125c2:	4604      	mov	r4, r0
 80125c4:	2800      	cmp	r0, #0
 80125c6:	d040      	beq.n	801264a <autoware_control_msgs__msg__Control__init+0xa2>
 80125c8:	f105 0710 	add.w	r7, r5, #16
 80125cc:	4638      	mov	r0, r7
 80125ce:	f000 f855 	bl	801267c <autoware_control_msgs__msg__Lateral__init>
 80125d2:	4604      	mov	r4, r0
 80125d4:	b348      	cbz	r0, 801262a <autoware_control_msgs__msg__Control__init+0x82>
 80125d6:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 80125da:	4640      	mov	r0, r8
 80125dc:	f000 f87e 	bl	80126dc <autoware_control_msgs__msg__Longitudinal__init>
 80125e0:	4604      	mov	r4, r0
 80125e2:	b9d8      	cbnz	r0, 801261c <autoware_control_msgs__msg__Control__init+0x74>
 80125e4:	4628      	mov	r0, r5
 80125e6:	f000 f973 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 80125ea:	4630      	mov	r0, r6
 80125ec:	f000 f970 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 80125f0:	4638      	mov	r0, r7
 80125f2:	f000 f867 	bl	80126c4 <autoware_control_msgs__msg__Lateral__fini>
 80125f6:	4640      	mov	r0, r8
 80125f8:	f000 f894 	bl	8012724 <autoware_control_msgs__msg__Longitudinal__fini>
 80125fc:	e00e      	b.n	801261c <autoware_control_msgs__msg__Control__init+0x74>
 80125fe:	4628      	mov	r0, r5
 8012600:	f000 f966 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8012604:	f105 0008 	add.w	r0, r5, #8
 8012608:	f000 f962 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 801260c:	f105 0010 	add.w	r0, r5, #16
 8012610:	f000 f858 	bl	80126c4 <autoware_control_msgs__msg__Lateral__fini>
 8012614:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8012618:	f000 f884 	bl	8012724 <autoware_control_msgs__msg__Longitudinal__fini>
 801261c:	4620      	mov	r0, r4
 801261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012622:	4604      	mov	r4, r0
 8012624:	4620      	mov	r0, r4
 8012626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801262a:	4628      	mov	r0, r5
 801262c:	f000 f950 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8012630:	4630      	mov	r0, r6
 8012632:	f000 f94d 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8012636:	4638      	mov	r0, r7
 8012638:	f000 f844 	bl	80126c4 <autoware_control_msgs__msg__Lateral__fini>
 801263c:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8012640:	f000 f870 	bl	8012724 <autoware_control_msgs__msg__Longitudinal__fini>
 8012644:	4620      	mov	r0, r4
 8012646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801264a:	4628      	mov	r0, r5
 801264c:	f000 f940 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8012650:	4630      	mov	r0, r6
 8012652:	e7d9      	b.n	8012608 <autoware_control_msgs__msg__Control__init+0x60>

08012654 <autoware_control_msgs__msg__Control__fini>:
 8012654:	b188      	cbz	r0, 801267a <autoware_control_msgs__msg__Control__fini+0x26>
 8012656:	b510      	push	{r4, lr}
 8012658:	4604      	mov	r4, r0
 801265a:	f000 f939 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 801265e:	f104 0008 	add.w	r0, r4, #8
 8012662:	f000 f935 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8012666:	f104 0010 	add.w	r0, r4, #16
 801266a:	f000 f82b 	bl	80126c4 <autoware_control_msgs__msg__Lateral__fini>
 801266e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012676:	f000 b855 	b.w	8012724 <autoware_control_msgs__msg__Longitudinal__fini>
 801267a:	4770      	bx	lr

0801267c <autoware_control_msgs__msg__Lateral__init>:
 801267c:	b570      	push	{r4, r5, r6, lr}
 801267e:	4605      	mov	r5, r0
 8012680:	b1a8      	cbz	r0, 80126ae <autoware_control_msgs__msg__Lateral__init+0x32>
 8012682:	f000 f921 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 8012686:	4604      	mov	r4, r0
 8012688:	b140      	cbz	r0, 801269c <autoware_control_msgs__msg__Lateral__init+0x20>
 801268a:	f105 0608 	add.w	r6, r5, #8
 801268e:	4630      	mov	r0, r6
 8012690:	f000 f91a 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 8012694:	4604      	mov	r4, r0
 8012696:	b168      	cbz	r0, 80126b4 <autoware_control_msgs__msg__Lateral__init+0x38>
 8012698:	4620      	mov	r0, r4
 801269a:	bd70      	pop	{r4, r5, r6, pc}
 801269c:	4628      	mov	r0, r5
 801269e:	f000 f917 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 80126a2:	f105 0008 	add.w	r0, r5, #8
 80126a6:	f000 f913 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 80126aa:	4620      	mov	r0, r4
 80126ac:	bd70      	pop	{r4, r5, r6, pc}
 80126ae:	4604      	mov	r4, r0
 80126b0:	4620      	mov	r0, r4
 80126b2:	bd70      	pop	{r4, r5, r6, pc}
 80126b4:	4628      	mov	r0, r5
 80126b6:	f000 f90b 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 80126ba:	4630      	mov	r0, r6
 80126bc:	f000 f908 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 80126c0:	e7ea      	b.n	8012698 <autoware_control_msgs__msg__Lateral__init+0x1c>
 80126c2:	bf00      	nop

080126c4 <autoware_control_msgs__msg__Lateral__fini>:
 80126c4:	b148      	cbz	r0, 80126da <autoware_control_msgs__msg__Lateral__fini+0x16>
 80126c6:	b510      	push	{r4, lr}
 80126c8:	4604      	mov	r4, r0
 80126ca:	f000 f901 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 80126ce:	f104 0008 	add.w	r0, r4, #8
 80126d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126d6:	f000 b8fb 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 80126da:	4770      	bx	lr

080126dc <autoware_control_msgs__msg__Longitudinal__init>:
 80126dc:	b570      	push	{r4, r5, r6, lr}
 80126de:	4605      	mov	r5, r0
 80126e0:	b1a8      	cbz	r0, 801270e <autoware_control_msgs__msg__Longitudinal__init+0x32>
 80126e2:	f000 f8f1 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 80126e6:	4604      	mov	r4, r0
 80126e8:	b140      	cbz	r0, 80126fc <autoware_control_msgs__msg__Longitudinal__init+0x20>
 80126ea:	f105 0608 	add.w	r6, r5, #8
 80126ee:	4630      	mov	r0, r6
 80126f0:	f000 f8ea 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 80126f4:	4604      	mov	r4, r0
 80126f6:	b168      	cbz	r0, 8012714 <autoware_control_msgs__msg__Longitudinal__init+0x38>
 80126f8:	4620      	mov	r0, r4
 80126fa:	bd70      	pop	{r4, r5, r6, pc}
 80126fc:	4628      	mov	r0, r5
 80126fe:	f000 f8e7 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8012702:	f105 0008 	add.w	r0, r5, #8
 8012706:	f000 f8e3 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 801270a:	4620      	mov	r0, r4
 801270c:	bd70      	pop	{r4, r5, r6, pc}
 801270e:	4604      	mov	r4, r0
 8012710:	4620      	mov	r0, r4
 8012712:	bd70      	pop	{r4, r5, r6, pc}
 8012714:	4628      	mov	r0, r5
 8012716:	f000 f8db 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 801271a:	4630      	mov	r0, r6
 801271c:	f000 f8d8 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8012720:	e7ea      	b.n	80126f8 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 8012722:	bf00      	nop

08012724 <autoware_control_msgs__msg__Longitudinal__fini>:
 8012724:	b148      	cbz	r0, 801273a <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 8012726:	b510      	push	{r4, lr}
 8012728:	4604      	mov	r4, r0
 801272a:	f000 f8d1 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 801272e:	f104 0008 	add.w	r0, r4, #8
 8012732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012736:	f000 b8cb 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 801273a:	4770      	bx	lr

0801273c <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 801273c:	b538      	push	{r3, r4, r5, lr}
 801273e:	4604      	mov	r4, r0
 8012740:	b128      	cbz	r0, 801274e <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8012742:	f000 f8c1 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 8012746:	4605      	mov	r5, r0
 8012748:	b120      	cbz	r0, 8012754 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 801274a:	4628      	mov	r0, r5
 801274c:	bd38      	pop	{r3, r4, r5, pc}
 801274e:	4605      	mov	r5, r0
 8012750:	4628      	mov	r0, r5
 8012752:	bd38      	pop	{r3, r4, r5, pc}
 8012754:	4620      	mov	r0, r4
 8012756:	f000 f8bb 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 801275a:	4628      	mov	r0, r5
 801275c:	bd38      	pop	{r3, r4, r5, pc}
 801275e:	bf00      	nop

08012760 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 8012760:	b108      	cbz	r0, 8012766 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8012762:	f000 b8b5 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 8012766:	4770      	bx	lr

08012768 <autoware_vehicle_msgs__msg__GearCommand__init>:
 8012768:	b538      	push	{r3, r4, r5, lr}
 801276a:	4604      	mov	r4, r0
 801276c:	b128      	cbz	r0, 801277a <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 801276e:	f000 f8ab 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 8012772:	4605      	mov	r5, r0
 8012774:	b120      	cbz	r0, 8012780 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 8012776:	4628      	mov	r0, r5
 8012778:	bd38      	pop	{r3, r4, r5, pc}
 801277a:	4605      	mov	r5, r0
 801277c:	4628      	mov	r0, r5
 801277e:	bd38      	pop	{r3, r4, r5, pc}
 8012780:	4620      	mov	r0, r4
 8012782:	f000 f8a5 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8012786:	4628      	mov	r0, r5
 8012788:	bd38      	pop	{r3, r4, r5, pc}
 801278a:	bf00      	nop

0801278c <autoware_vehicle_msgs__msg__GearCommand__fini>:
 801278c:	b108      	cbz	r0, 8012792 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 801278e:	f000 b89f 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 8012792:	4770      	bx	lr

08012794 <autoware_vehicle_msgs__msg__GearReport__init>:
 8012794:	b538      	push	{r3, r4, r5, lr}
 8012796:	4604      	mov	r4, r0
 8012798:	b128      	cbz	r0, 80127a6 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 801279a:	f000 f895 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 801279e:	4605      	mov	r5, r0
 80127a0:	b120      	cbz	r0, 80127ac <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 80127a2:	4628      	mov	r0, r5
 80127a4:	bd38      	pop	{r3, r4, r5, pc}
 80127a6:	4605      	mov	r5, r0
 80127a8:	4628      	mov	r0, r5
 80127aa:	bd38      	pop	{r3, r4, r5, pc}
 80127ac:	4620      	mov	r0, r4
 80127ae:	f000 f88f 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 80127b2:	4628      	mov	r0, r5
 80127b4:	bd38      	pop	{r3, r4, r5, pc}
 80127b6:	bf00      	nop

080127b8 <autoware_vehicle_msgs__msg__GearReport__fini>:
 80127b8:	b108      	cbz	r0, 80127be <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 80127ba:	f000 b889 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 80127be:	4770      	bx	lr

080127c0 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 80127c0:	b538      	push	{r3, r4, r5, lr}
 80127c2:	4604      	mov	r4, r0
 80127c4:	b128      	cbz	r0, 80127d2 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 80127c6:	f000 f87f 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 80127ca:	4605      	mov	r5, r0
 80127cc:	b120      	cbz	r0, 80127d8 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 80127ce:	4628      	mov	r0, r5
 80127d0:	bd38      	pop	{r3, r4, r5, pc}
 80127d2:	4605      	mov	r5, r0
 80127d4:	4628      	mov	r0, r5
 80127d6:	bd38      	pop	{r3, r4, r5, pc}
 80127d8:	4620      	mov	r0, r4
 80127da:	f000 f879 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 80127de:	4628      	mov	r0, r5
 80127e0:	bd38      	pop	{r3, r4, r5, pc}
 80127e2:	bf00      	nop

080127e4 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 80127e4:	b108      	cbz	r0, 80127ea <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 80127e6:	f000 b873 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 80127ea:	4770      	bx	lr

080127ec <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 80127ec:	b538      	push	{r3, r4, r5, lr}
 80127ee:	4604      	mov	r4, r0
 80127f0:	b128      	cbz	r0, 80127fe <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 80127f2:	f000 f869 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 80127f6:	4605      	mov	r5, r0
 80127f8:	b120      	cbz	r0, 8012804 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 80127fa:	4628      	mov	r0, r5
 80127fc:	bd38      	pop	{r3, r4, r5, pc}
 80127fe:	4605      	mov	r5, r0
 8012800:	4628      	mov	r0, r5
 8012802:	bd38      	pop	{r3, r4, r5, pc}
 8012804:	4620      	mov	r0, r4
 8012806:	f000 f863 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 801280a:	4628      	mov	r0, r5
 801280c:	bd38      	pop	{r3, r4, r5, pc}
 801280e:	bf00      	nop

08012810 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8012810:	b108      	cbz	r0, 8012816 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8012812:	f000 b85d 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 8012816:	4770      	bx	lr

08012818 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8012818:	b538      	push	{r3, r4, r5, lr}
 801281a:	4604      	mov	r4, r0
 801281c:	b128      	cbz	r0, 801282a <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 801281e:	f000 f853 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 8012822:	4605      	mov	r5, r0
 8012824:	b120      	cbz	r0, 8012830 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8012826:	4628      	mov	r0, r5
 8012828:	bd38      	pop	{r3, r4, r5, pc}
 801282a:	4605      	mov	r5, r0
 801282c:	4628      	mov	r0, r5
 801282e:	bd38      	pop	{r3, r4, r5, pc}
 8012830:	4620      	mov	r0, r4
 8012832:	f000 f84d 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8012836:	4628      	mov	r0, r5
 8012838:	bd38      	pop	{r3, r4, r5, pc}
 801283a:	bf00      	nop

0801283c <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 801283c:	b108      	cbz	r0, 8012842 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 801283e:	f000 b847 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 8012842:	4770      	bx	lr

08012844 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8012844:	b538      	push	{r3, r4, r5, lr}
 8012846:	4604      	mov	r4, r0
 8012848:	b128      	cbz	r0, 8012856 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 801284a:	f000 f83d 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 801284e:	4605      	mov	r5, r0
 8012850:	b120      	cbz	r0, 801285c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 8012852:	4628      	mov	r0, r5
 8012854:	bd38      	pop	{r3, r4, r5, pc}
 8012856:	4605      	mov	r5, r0
 8012858:	4628      	mov	r0, r5
 801285a:	bd38      	pop	{r3, r4, r5, pc}
 801285c:	4620      	mov	r0, r4
 801285e:	f000 f837 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8012862:	4628      	mov	r0, r5
 8012864:	bd38      	pop	{r3, r4, r5, pc}
 8012866:	bf00      	nop

08012868 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8012868:	b108      	cbz	r0, 801286e <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 801286a:	f000 b831 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 801286e:	4770      	bx	lr

08012870 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8012870:	b538      	push	{r3, r4, r5, lr}
 8012872:	4604      	mov	r4, r0
 8012874:	b128      	cbz	r0, 8012882 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 8012876:	f000 f827 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 801287a:	4605      	mov	r5, r0
 801287c:	b120      	cbz	r0, 8012888 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 801287e:	4628      	mov	r0, r5
 8012880:	bd38      	pop	{r3, r4, r5, pc}
 8012882:	4605      	mov	r5, r0
 8012884:	4628      	mov	r0, r5
 8012886:	bd38      	pop	{r3, r4, r5, pc}
 8012888:	4620      	mov	r0, r4
 801288a:	f000 f821 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 801288e:	4628      	mov	r0, r5
 8012890:	bd38      	pop	{r3, r4, r5, pc}
 8012892:	bf00      	nop

08012894 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8012894:	b108      	cbz	r0, 801289a <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8012896:	f000 b81b 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 801289a:	4770      	bx	lr

0801289c <autoware_vehicle_msgs__msg__VelocityReport__init>:
 801289c:	b538      	push	{r3, r4, r5, lr}
 801289e:	4604      	mov	r4, r0
 80128a0:	b128      	cbz	r0, 80128ae <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 80128a2:	f005 f9bf 	bl	8017c24 <std_msgs__msg__Header__init>
 80128a6:	4605      	mov	r5, r0
 80128a8:	b120      	cbz	r0, 80128b4 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 80128aa:	4628      	mov	r0, r5
 80128ac:	bd38      	pop	{r3, r4, r5, pc}
 80128ae:	4605      	mov	r5, r0
 80128b0:	4628      	mov	r0, r5
 80128b2:	bd38      	pop	{r3, r4, r5, pc}
 80128b4:	4620      	mov	r0, r4
 80128b6:	f005 f9d9 	bl	8017c6c <std_msgs__msg__Header__fini>
 80128ba:	4628      	mov	r0, r5
 80128bc:	bd38      	pop	{r3, r4, r5, pc}
 80128be:	bf00      	nop

080128c0 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 80128c0:	b108      	cbz	r0, 80128c6 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 80128c2:	f005 b9d3 	b.w	8017c6c <std_msgs__msg__Header__fini>
 80128c6:	4770      	bx	lr

080128c8 <builtin_interfaces__msg__Time__init>:
 80128c8:	3800      	subs	r0, #0
 80128ca:	bf18      	it	ne
 80128cc:	2001      	movne	r0, #1
 80128ce:	4770      	bx	lr

080128d0 <builtin_interfaces__msg__Time__fini>:
 80128d0:	4770      	bx	lr
 80128d2:	bf00      	nop

080128d4 <ucdr_serialize_sequence_char>:
 80128d4:	b570      	push	{r4, r5, r6, lr}
 80128d6:	4615      	mov	r5, r2
 80128d8:	460e      	mov	r6, r1
 80128da:	7d01      	ldrb	r1, [r0, #20]
 80128dc:	4604      	mov	r4, r0
 80128de:	f7fd fac9 	bl	800fe74 <ucdr_serialize_endian_uint32_t>
 80128e2:	b90d      	cbnz	r5, 80128e8 <ucdr_serialize_sequence_char+0x14>
 80128e4:	2001      	movs	r0, #1
 80128e6:	bd70      	pop	{r4, r5, r6, pc}
 80128e8:	462b      	mov	r3, r5
 80128ea:	4632      	mov	r2, r6
 80128ec:	7d21      	ldrb	r1, [r4, #20]
 80128ee:	4620      	mov	r0, r4
 80128f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128f4:	f005 bb8e 	b.w	8018014 <ucdr_serialize_endian_array_char>

080128f8 <ucdr_deserialize_sequence_char>:
 80128f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128fc:	461d      	mov	r5, r3
 80128fe:	4616      	mov	r6, r2
 8012900:	460f      	mov	r7, r1
 8012902:	461a      	mov	r2, r3
 8012904:	7d01      	ldrb	r1, [r0, #20]
 8012906:	4604      	mov	r4, r0
 8012908:	f7fd fbdc 	bl	80100c4 <ucdr_deserialize_endian_uint32_t>
 801290c:	682b      	ldr	r3, [r5, #0]
 801290e:	429e      	cmp	r6, r3
 8012910:	d201      	bcs.n	8012916 <ucdr_deserialize_sequence_char+0x1e>
 8012912:	2201      	movs	r2, #1
 8012914:	75a2      	strb	r2, [r4, #22]
 8012916:	b913      	cbnz	r3, 801291e <ucdr_deserialize_sequence_char+0x26>
 8012918:	2001      	movs	r0, #1
 801291a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801291e:	463a      	mov	r2, r7
 8012920:	7d21      	ldrb	r1, [r4, #20]
 8012922:	4620      	mov	r0, r4
 8012924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012928:	f005 bba6 	b.w	8018078 <ucdr_deserialize_endian_array_char>

0801292c <ucdr_serialize_sequence_uint8_t>:
 801292c:	b570      	push	{r4, r5, r6, lr}
 801292e:	4615      	mov	r5, r2
 8012930:	460e      	mov	r6, r1
 8012932:	7d01      	ldrb	r1, [r0, #20]
 8012934:	4604      	mov	r4, r0
 8012936:	f7fd fa9d 	bl	800fe74 <ucdr_serialize_endian_uint32_t>
 801293a:	b90d      	cbnz	r5, 8012940 <ucdr_serialize_sequence_uint8_t+0x14>
 801293c:	2001      	movs	r0, #1
 801293e:	bd70      	pop	{r4, r5, r6, pc}
 8012940:	462b      	mov	r3, r5
 8012942:	4632      	mov	r2, r6
 8012944:	7d21      	ldrb	r1, [r4, #20]
 8012946:	4620      	mov	r0, r4
 8012948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801294c:	f005 bbfa 	b.w	8018144 <ucdr_serialize_endian_array_uint8_t>

08012950 <ucdr_deserialize_sequence_uint8_t>:
 8012950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012954:	461d      	mov	r5, r3
 8012956:	4616      	mov	r6, r2
 8012958:	460f      	mov	r7, r1
 801295a:	461a      	mov	r2, r3
 801295c:	7d01      	ldrb	r1, [r0, #20]
 801295e:	4604      	mov	r4, r0
 8012960:	f7fd fbb0 	bl	80100c4 <ucdr_deserialize_endian_uint32_t>
 8012964:	682b      	ldr	r3, [r5, #0]
 8012966:	429e      	cmp	r6, r3
 8012968:	d201      	bcs.n	801296e <ucdr_deserialize_sequence_uint8_t+0x1e>
 801296a:	2201      	movs	r2, #1
 801296c:	75a2      	strb	r2, [r4, #22]
 801296e:	b913      	cbnz	r3, 8012976 <ucdr_deserialize_sequence_uint8_t+0x26>
 8012970:	2001      	movs	r0, #1
 8012972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012976:	463a      	mov	r2, r7
 8012978:	7d21      	ldrb	r1, [r4, #20]
 801297a:	4620      	mov	r0, r4
 801297c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012980:	f005 bc46 	b.w	8018210 <ucdr_deserialize_endian_array_uint8_t>

08012984 <rcl_client_get_rmw_handle>:
 8012984:	b118      	cbz	r0, 801298e <rcl_client_get_rmw_handle+0xa>
 8012986:	6800      	ldr	r0, [r0, #0]
 8012988:	b108      	cbz	r0, 801298e <rcl_client_get_rmw_handle+0xa>
 801298a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801298e:	4770      	bx	lr

08012990 <rcl_send_request>:
 8012990:	b570      	push	{r4, r5, r6, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	b1f8      	cbz	r0, 80129d6 <rcl_send_request+0x46>
 8012996:	4604      	mov	r4, r0
 8012998:	6800      	ldr	r0, [r0, #0]
 801299a:	b1e0      	cbz	r0, 80129d6 <rcl_send_request+0x46>
 801299c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80129a0:	b1cb      	cbz	r3, 80129d6 <rcl_send_request+0x46>
 80129a2:	460e      	mov	r6, r1
 80129a4:	b1e1      	cbz	r1, 80129e0 <rcl_send_request+0x50>
 80129a6:	4615      	mov	r5, r2
 80129a8:	b1d2      	cbz	r2, 80129e0 <rcl_send_request+0x50>
 80129aa:	2105      	movs	r1, #5
 80129ac:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80129b0:	f002 feb6 	bl	8015720 <__atomic_load_8>
 80129b4:	4602      	mov	r2, r0
 80129b6:	460b      	mov	r3, r1
 80129b8:	4631      	mov	r1, r6
 80129ba:	e9c5 2300 	strd	r2, r3, [r5]
 80129be:	6823      	ldr	r3, [r4, #0]
 80129c0:	462a      	mov	r2, r5
 80129c2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80129c6:	f004 f8d3 	bl	8016b70 <rmw_send_request>
 80129ca:	4606      	mov	r6, r0
 80129cc:	b160      	cbz	r0, 80129e8 <rcl_send_request+0x58>
 80129ce:	2601      	movs	r6, #1
 80129d0:	4630      	mov	r0, r6
 80129d2:	b002      	add	sp, #8
 80129d4:	bd70      	pop	{r4, r5, r6, pc}
 80129d6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80129da:	4630      	mov	r0, r6
 80129dc:	b002      	add	sp, #8
 80129de:	bd70      	pop	{r4, r5, r6, pc}
 80129e0:	260b      	movs	r6, #11
 80129e2:	4630      	mov	r0, r6
 80129e4:	b002      	add	sp, #8
 80129e6:	bd70      	pop	{r4, r5, r6, pc}
 80129e8:	6820      	ldr	r0, [r4, #0]
 80129ea:	2105      	movs	r1, #5
 80129ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80129f0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80129f4:	9100      	str	r1, [sp, #0]
 80129f6:	f002 feff 	bl	80157f8 <__atomic_exchange_8>
 80129fa:	4630      	mov	r0, r6
 80129fc:	b002      	add	sp, #8
 80129fe:	bd70      	pop	{r4, r5, r6, pc}

08012a00 <rcl_take_response>:
 8012a00:	b570      	push	{r4, r5, r6, lr}
 8012a02:	468e      	mov	lr, r1
 8012a04:	b08c      	sub	sp, #48	@ 0x30
 8012a06:	460c      	mov	r4, r1
 8012a08:	4616      	mov	r6, r2
 8012a0a:	f10d 0c18 	add.w	ip, sp, #24
 8012a0e:	4605      	mov	r5, r0
 8012a10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012a1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012a20:	b35d      	cbz	r5, 8012a7a <rcl_take_response+0x7a>
 8012a22:	682b      	ldr	r3, [r5, #0]
 8012a24:	b34b      	cbz	r3, 8012a7a <rcl_take_response+0x7a>
 8012a26:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012a2a:	b330      	cbz	r0, 8012a7a <rcl_take_response+0x7a>
 8012a2c:	b346      	cbz	r6, 8012a80 <rcl_take_response+0x80>
 8012a2e:	2300      	movs	r3, #0
 8012a30:	4632      	mov	r2, r6
 8012a32:	a902      	add	r1, sp, #8
 8012a34:	f88d 3007 	strb.w	r3, [sp, #7]
 8012a38:	f10d 0307 	add.w	r3, sp, #7
 8012a3c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8012a88 <rcl_take_response+0x88>
 8012a40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012a48:	f004 f99a 	bl	8016d80 <rmw_take_response>
 8012a4c:	4605      	mov	r5, r0
 8012a4e:	b9c8      	cbnz	r0, 8012a84 <rcl_take_response+0x84>
 8012a50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012a54:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8012a58:	2a00      	cmp	r2, #0
 8012a5a:	bf08      	it	eq
 8012a5c:	461d      	moveq	r5, r3
 8012a5e:	f10d 0e18 	add.w	lr, sp, #24
 8012a62:	46a4      	mov	ip, r4
 8012a64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a6c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012a70:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012a74:	4628      	mov	r0, r5
 8012a76:	b00c      	add	sp, #48	@ 0x30
 8012a78:	bd70      	pop	{r4, r5, r6, pc}
 8012a7a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8012a7e:	e7ee      	b.n	8012a5e <rcl_take_response+0x5e>
 8012a80:	250b      	movs	r5, #11
 8012a82:	e7ec      	b.n	8012a5e <rcl_take_response+0x5e>
 8012a84:	2501      	movs	r5, #1
 8012a86:	e7ea      	b.n	8012a5e <rcl_take_response+0x5e>
	...

08012a90 <rcl_client_is_valid>:
 8012a90:	b130      	cbz	r0, 8012aa0 <rcl_client_is_valid+0x10>
 8012a92:	6800      	ldr	r0, [r0, #0]
 8012a94:	b120      	cbz	r0, 8012aa0 <rcl_client_is_valid+0x10>
 8012a96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012a9a:	3800      	subs	r0, #0
 8012a9c:	bf18      	it	ne
 8012a9e:	2001      	movne	r0, #1
 8012aa0:	4770      	bx	lr
 8012aa2:	bf00      	nop

08012aa4 <rcl_get_zero_initialized_context>:
 8012aa4:	4a03      	ldr	r2, [pc, #12]	@ (8012ab4 <rcl_get_zero_initialized_context+0x10>)
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012aac:	e883 0003 	stmia.w	r3, {r0, r1}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	4770      	bx	lr
 8012ab4:	08020120 	.word	0x08020120

08012ab8 <rcl_context_is_valid>:
 8012ab8:	b118      	cbz	r0, 8012ac2 <rcl_context_is_valid+0xa>
 8012aba:	6840      	ldr	r0, [r0, #4]
 8012abc:	3800      	subs	r0, #0
 8012abe:	bf18      	it	ne
 8012ac0:	2001      	movne	r0, #1
 8012ac2:	4770      	bx	lr

08012ac4 <__cleanup_context>:
 8012ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ac8:	4606      	mov	r6, r0
 8012aca:	2300      	movs	r3, #0
 8012acc:	6800      	ldr	r0, [r0, #0]
 8012ace:	6073      	str	r3, [r6, #4]
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	d049      	beq.n	8012b68 <__cleanup_context+0xa4>
 8012ad4:	6947      	ldr	r7, [r0, #20]
 8012ad6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012ada:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012ade:	b137      	cbz	r7, 8012aee <__cleanup_context+0x2a>
 8012ae0:	3014      	adds	r0, #20
 8012ae2:	f000 f9bd 	bl	8012e60 <rcl_init_options_fini>
 8012ae6:	4607      	mov	r7, r0
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	d144      	bne.n	8012b76 <__cleanup_context+0xb2>
 8012aec:	6830      	ldr	r0, [r6, #0]
 8012aee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012af0:	b143      	cbz	r3, 8012b04 <__cleanup_context+0x40>
 8012af2:	3028      	adds	r0, #40	@ 0x28
 8012af4:	f003 fda8 	bl	8016648 <rmw_context_fini>
 8012af8:	b118      	cbz	r0, 8012b02 <__cleanup_context+0x3e>
 8012afa:	2f00      	cmp	r7, #0
 8012afc:	d03e      	beq.n	8012b7c <__cleanup_context+0xb8>
 8012afe:	f7ff f98b 	bl	8011e18 <rcutils_reset_error>
 8012b02:	6830      	ldr	r0, [r6, #0]
 8012b04:	6a03      	ldr	r3, [r0, #32]
 8012b06:	b1db      	cbz	r3, 8012b40 <__cleanup_context+0x7c>
 8012b08:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8012b0c:	2a01      	cmp	r2, #1
 8012b0e:	f17c 0100 	sbcs.w	r1, ip, #0
 8012b12:	db11      	blt.n	8012b38 <__cleanup_context+0x74>
 8012b14:	2400      	movs	r4, #0
 8012b16:	4625      	mov	r5, r4
 8012b18:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012b1c:	4649      	mov	r1, r9
 8012b1e:	b1b8      	cbz	r0, 8012b50 <__cleanup_context+0x8c>
 8012b20:	47c0      	blx	r8
 8012b22:	6833      	ldr	r3, [r6, #0]
 8012b24:	3401      	adds	r4, #1
 8012b26:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012b2a:	f145 0500 	adc.w	r5, r5, #0
 8012b2e:	6a1b      	ldr	r3, [r3, #32]
 8012b30:	4294      	cmp	r4, r2
 8012b32:	eb75 010c 	sbcs.w	r1, r5, ip
 8012b36:	dbef      	blt.n	8012b18 <__cleanup_context+0x54>
 8012b38:	4618      	mov	r0, r3
 8012b3a:	4649      	mov	r1, r9
 8012b3c:	47c0      	blx	r8
 8012b3e:	6830      	ldr	r0, [r6, #0]
 8012b40:	4649      	mov	r1, r9
 8012b42:	47c0      	blx	r8
 8012b44:	2300      	movs	r3, #0
 8012b46:	4638      	mov	r0, r7
 8012b48:	e9c6 3300 	strd	r3, r3, [r6]
 8012b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b50:	3401      	adds	r4, #1
 8012b52:	f145 0500 	adc.w	r5, r5, #0
 8012b56:	4294      	cmp	r4, r2
 8012b58:	eb75 010c 	sbcs.w	r1, r5, ip
 8012b5c:	dbdc      	blt.n	8012b18 <__cleanup_context+0x54>
 8012b5e:	4618      	mov	r0, r3
 8012b60:	4649      	mov	r1, r9
 8012b62:	47c0      	blx	r8
 8012b64:	6830      	ldr	r0, [r6, #0]
 8012b66:	e7eb      	b.n	8012b40 <__cleanup_context+0x7c>
 8012b68:	4607      	mov	r7, r0
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	4638      	mov	r0, r7
 8012b6e:	e9c6 3300 	strd	r3, r3, [r6]
 8012b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b76:	f7ff f94f 	bl	8011e18 <rcutils_reset_error>
 8012b7a:	e7b7      	b.n	8012aec <__cleanup_context+0x28>
 8012b7c:	f008 ff26 	bl	801b9cc <rcl_convert_rmw_ret_to_rcl_ret>
 8012b80:	4607      	mov	r7, r0
 8012b82:	e7bc      	b.n	8012afe <__cleanup_context+0x3a>

08012b84 <rcl_init>:
 8012b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b88:	1e05      	subs	r5, r0, #0
 8012b8a:	b09e      	sub	sp, #120	@ 0x78
 8012b8c:	460e      	mov	r6, r1
 8012b8e:	4690      	mov	r8, r2
 8012b90:	461f      	mov	r7, r3
 8012b92:	f340 809f 	ble.w	8012cd4 <rcl_init+0x150>
 8012b96:	2900      	cmp	r1, #0
 8012b98:	f000 809f 	beq.w	8012cda <rcl_init+0x156>
 8012b9c:	f1a1 0e04 	sub.w	lr, r1, #4
 8012ba0:	f04f 0c00 	mov.w	ip, #0
 8012ba4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012ba8:	f10c 0c01 	add.w	ip, ip, #1
 8012bac:	2c00      	cmp	r4, #0
 8012bae:	f000 8094 	beq.w	8012cda <rcl_init+0x156>
 8012bb2:	4565      	cmp	r5, ip
 8012bb4:	d1f6      	bne.n	8012ba4 <rcl_init+0x20>
 8012bb6:	f1b8 0f00 	cmp.w	r8, #0
 8012bba:	f000 808e 	beq.w	8012cda <rcl_init+0x156>
 8012bbe:	f8d8 4000 	ldr.w	r4, [r8]
 8012bc2:	2c00      	cmp	r4, #0
 8012bc4:	f000 8089 	beq.w	8012cda <rcl_init+0x156>
 8012bc8:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8012bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012bce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bd2:	6823      	ldr	r3, [r4, #0]
 8012bd4:	a819      	add	r0, sp, #100	@ 0x64
 8012bd6:	f8cc 3000 	str.w	r3, [ip]
 8012bda:	f7ff f8f7 	bl	8011dcc <rcutils_allocator_is_valid>
 8012bde:	f080 0001 	eor.w	r0, r0, #1
 8012be2:	b2c0      	uxtb	r0, r0
 8012be4:	2800      	cmp	r0, #0
 8012be6:	d178      	bne.n	8012cda <rcl_init+0x156>
 8012be8:	2f00      	cmp	r7, #0
 8012bea:	d076      	beq.n	8012cda <rcl_init+0x156>
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d178      	bne.n	8012ce4 <rcl_init+0x160>
 8012bf2:	2178      	movs	r1, #120	@ 0x78
 8012bf4:	2001      	movs	r0, #1
 8012bf6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012bfa:	4798      	blx	r3
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	6038      	str	r0, [r7, #0]
 8012c00:	2800      	cmp	r0, #0
 8012c02:	f000 80b6 	beq.w	8012d72 <rcl_init+0x1ee>
 8012c06:	a802      	add	r0, sp, #8
 8012c08:	f003 f8fe 	bl	8015e08 <rmw_get_zero_initialized_context>
 8012c0c:	a902      	add	r1, sp, #8
 8012c0e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8012c12:	2250      	movs	r2, #80	@ 0x50
 8012c14:	f00b f825 	bl	801dc62 <memcpy>
 8012c18:	ac19      	add	r4, sp, #100	@ 0x64
 8012c1a:	f8d7 e000 	ldr.w	lr, [r7]
 8012c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c20:	46f4      	mov	ip, lr
 8012c22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c26:	6823      	ldr	r3, [r4, #0]
 8012c28:	f10e 0114 	add.w	r1, lr, #20
 8012c2c:	4640      	mov	r0, r8
 8012c2e:	f8cc 3000 	str.w	r3, [ip]
 8012c32:	f000 f93f 	bl	8012eb4 <rcl_init_options_copy>
 8012c36:	4604      	mov	r4, r0
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	d144      	bne.n	8012cc6 <rcl_init+0x142>
 8012c3c:	f8d7 9000 	ldr.w	r9, [r7]
 8012c40:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012c44:	f8c9 0020 	str.w	r0, [r9, #32]
 8012c48:	f8c9 5018 	str.w	r5, [r9, #24]
 8012c4c:	f8c9 801c 	str.w	r8, [r9, #28]
 8012c50:	2d00      	cmp	r5, #0
 8012c52:	d04e      	beq.n	8012cf2 <rcl_init+0x16e>
 8012c54:	2e00      	cmp	r6, #0
 8012c56:	d04c      	beq.n	8012cf2 <rcl_init+0x16e>
 8012c58:	2104      	movs	r1, #4
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012c60:	4798      	blx	r3
 8012c62:	f8c9 0020 	str.w	r0, [r9, #32]
 8012c66:	f8d7 9000 	ldr.w	r9, [r7]
 8012c6a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012c6e:	46ca      	mov	sl, r9
 8012c70:	b343      	cbz	r3, 8012cc4 <rcl_init+0x140>
 8012c72:	2d01      	cmp	r5, #1
 8012c74:	f178 0300 	sbcs.w	r3, r8, #0
 8012c78:	db3b      	blt.n	8012cf2 <rcl_init+0x16e>
 8012c7a:	2400      	movs	r4, #0
 8012c7c:	3e04      	subs	r6, #4
 8012c7e:	46a1      	mov	r9, r4
 8012c80:	e00b      	b.n	8012c9a <rcl_init+0x116>
 8012c82:	6831      	ldr	r1, [r6, #0]
 8012c84:	f00a ffed 	bl	801dc62 <memcpy>
 8012c88:	3401      	adds	r4, #1
 8012c8a:	f149 0900 	adc.w	r9, r9, #0
 8012c8e:	45c8      	cmp	r8, r9
 8012c90:	bf08      	it	eq
 8012c92:	42a5      	cmpeq	r5, r4
 8012c94:	d02b      	beq.n	8012cee <rcl_init+0x16a>
 8012c96:	f8d7 a000 	ldr.w	sl, [r7]
 8012c9a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8012c9e:	f7ed fb29 	bl	80002f4 <strlen>
 8012ca2:	1c42      	adds	r2, r0, #1
 8012ca4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012ca6:	4610      	mov	r0, r2
 8012ca8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8012caa:	f8da a020 	ldr.w	sl, [sl, #32]
 8012cae:	9201      	str	r2, [sp, #4]
 8012cb0:	4798      	blx	r3
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012cb8:	6a1b      	ldr	r3, [r3, #32]
 8012cba:	9a01      	ldr	r2, [sp, #4]
 8012cbc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	d1de      	bne.n	8012c82 <rcl_init+0xfe>
 8012cc4:	240a      	movs	r4, #10
 8012cc6:	4638      	mov	r0, r7
 8012cc8:	f7ff fefc 	bl	8012ac4 <__cleanup_context>
 8012ccc:	4620      	mov	r0, r4
 8012cce:	b01e      	add	sp, #120	@ 0x78
 8012cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cd4:	2900      	cmp	r1, #0
 8012cd6:	f43f af6e 	beq.w	8012bb6 <rcl_init+0x32>
 8012cda:	240b      	movs	r4, #11
 8012cdc:	4620      	mov	r0, r4
 8012cde:	b01e      	add	sp, #120	@ 0x78
 8012ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ce4:	2464      	movs	r4, #100	@ 0x64
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	b01e      	add	sp, #120	@ 0x78
 8012cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cee:	f8d7 9000 	ldr.w	r9, [r7]
 8012cf2:	4926      	ldr	r1, [pc, #152]	@ (8012d8c <rcl_init+0x208>)
 8012cf4:	680b      	ldr	r3, [r1, #0]
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	d036      	beq.n	8012d68 <rcl_init+0x1e4>
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	2400      	movs	r4, #0
 8012cfe:	600b      	str	r3, [r1, #0]
 8012d00:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8012d04:	607b      	str	r3, [r7, #4]
 8012d06:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012d08:	3301      	adds	r3, #1
 8012d0a:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8012d0e:	d034      	beq.n	8012d7a <rcl_init+0x1f6>
 8012d10:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8012d14:	b93b      	cbnz	r3, 8012d26 <rcl_init+0x1a2>
 8012d16:	3030      	adds	r0, #48	@ 0x30
 8012d18:	f000 f93a 	bl	8012f90 <rcl_get_localhost_only>
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	2800      	cmp	r0, #0
 8012d20:	d1d1      	bne.n	8012cc6 <rcl_init+0x142>
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	6958      	ldr	r0, [r3, #20]
 8012d26:	aa18      	add	r2, sp, #96	@ 0x60
 8012d28:	a917      	add	r1, sp, #92	@ 0x5c
 8012d2a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8012d2c:	f001 f982 	bl	8014034 <rcl_validate_enclave_name>
 8012d30:	4604      	mov	r4, r0
 8012d32:	2800      	cmp	r0, #0
 8012d34:	d1c7      	bne.n	8012cc6 <rcl_init+0x142>
 8012d36:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012d38:	b9eb      	cbnz	r3, 8012d76 <rcl_init+0x1f2>
 8012d3a:	6839      	ldr	r1, [r7, #0]
 8012d3c:	694b      	ldr	r3, [r1, #20]
 8012d3e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012d42:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012d44:	f000 fd62 	bl	801380c <rcl_get_security_options_from_environment>
 8012d48:	4604      	mov	r4, r0
 8012d4a:	2800      	cmp	r0, #0
 8012d4c:	d1bb      	bne.n	8012cc6 <rcl_init+0x142>
 8012d4e:	6839      	ldr	r1, [r7, #0]
 8012d50:	6948      	ldr	r0, [r1, #20]
 8012d52:	3128      	adds	r1, #40	@ 0x28
 8012d54:	3018      	adds	r0, #24
 8012d56:	f003 fb41 	bl	80163dc <rmw_init>
 8012d5a:	4604      	mov	r4, r0
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d0bd      	beq.n	8012cdc <rcl_init+0x158>
 8012d60:	f008 fe34 	bl	801b9cc <rcl_convert_rmw_ret_to_rcl_ret>
 8012d64:	4604      	mov	r4, r0
 8012d66:	e7ae      	b.n	8012cc6 <rcl_init+0x142>
 8012d68:	2201      	movs	r2, #1
 8012d6a:	461c      	mov	r4, r3
 8012d6c:	600a      	str	r2, [r1, #0]
 8012d6e:	4613      	mov	r3, r2
 8012d70:	e7c6      	b.n	8012d00 <rcl_init+0x17c>
 8012d72:	240a      	movs	r4, #10
 8012d74:	e7b2      	b.n	8012cdc <rcl_init+0x158>
 8012d76:	2401      	movs	r4, #1
 8012d78:	e7a5      	b.n	8012cc6 <rcl_init+0x142>
 8012d7a:	3024      	adds	r0, #36	@ 0x24
 8012d7c:	f008 fe3a 	bl	801b9f4 <rcl_get_default_domain_id>
 8012d80:	4604      	mov	r4, r0
 8012d82:	2800      	cmp	r0, #0
 8012d84:	d19f      	bne.n	8012cc6 <rcl_init+0x142>
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	6958      	ldr	r0, [r3, #20]
 8012d8a:	e7c1      	b.n	8012d10 <rcl_init+0x18c>
 8012d8c:	24064bb8 	.word	0x24064bb8

08012d90 <rcl_get_zero_initialized_init_options>:
 8012d90:	2000      	movs	r0, #0
 8012d92:	4770      	bx	lr

08012d94 <rcl_init_options_init>:
 8012d94:	b084      	sub	sp, #16
 8012d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d98:	b097      	sub	sp, #92	@ 0x5c
 8012d9a:	ae1d      	add	r6, sp, #116	@ 0x74
 8012d9c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8012da0:	2800      	cmp	r0, #0
 8012da2:	d058      	beq.n	8012e56 <rcl_init_options_init+0xc2>
 8012da4:	6803      	ldr	r3, [r0, #0]
 8012da6:	4605      	mov	r5, r0
 8012da8:	b133      	cbz	r3, 8012db8 <rcl_init_options_init+0x24>
 8012daa:	2464      	movs	r4, #100	@ 0x64
 8012dac:	4620      	mov	r0, r4
 8012dae:	b017      	add	sp, #92	@ 0x5c
 8012db0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012db4:	b004      	add	sp, #16
 8012db6:	4770      	bx	lr
 8012db8:	4630      	mov	r0, r6
 8012dba:	f7ff f807 	bl	8011dcc <rcutils_allocator_is_valid>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	d049      	beq.n	8012e56 <rcl_init_options_init+0xc2>
 8012dc2:	46b4      	mov	ip, r6
 8012dc4:	ac11      	add	r4, sp, #68	@ 0x44
 8012dc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012dcc:	f8dc 3000 	ldr.w	r3, [ip]
 8012dd0:	2050      	movs	r0, #80	@ 0x50
 8012dd2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012dd4:	6023      	str	r3, [r4, #0]
 8012dd6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012dd8:	4798      	blx	r3
 8012dda:	4604      	mov	r4, r0
 8012ddc:	6028      	str	r0, [r5, #0]
 8012dde:	2800      	cmp	r0, #0
 8012de0:	d03b      	beq.n	8012e5a <rcl_init_options_init+0xc6>
 8012de2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012de6:	4686      	mov	lr, r0
 8012de8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012dec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012df0:	f8dc 3000 	ldr.w	r3, [ip]
 8012df4:	a802      	add	r0, sp, #8
 8012df6:	f8ce 3000 	str.w	r3, [lr]
 8012dfa:	f003 f819 	bl	8015e30 <rmw_get_zero_initialized_init_options>
 8012dfe:	f10d 0e08 	add.w	lr, sp, #8
 8012e02:	f104 0c18 	add.w	ip, r4, #24
 8012e06:	682f      	ldr	r7, [r5, #0]
 8012e08:	ac20      	add	r4, sp, #128	@ 0x80
 8012e0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012e0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012e16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012e1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e22:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012e26:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012e2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012e2e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012e32:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8012e36:	f107 0018 	add.w	r0, r7, #24
 8012e3a:	f003 f9d1 	bl	80161e0 <rmw_init_options_init>
 8012e3e:	4604      	mov	r4, r0
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d0b3      	beq.n	8012dac <rcl_init_options_init+0x18>
 8012e44:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012e46:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012e48:	6828      	ldr	r0, [r5, #0]
 8012e4a:	4798      	blx	r3
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	f008 fdbd 	bl	801b9cc <rcl_convert_rmw_ret_to_rcl_ret>
 8012e52:	4604      	mov	r4, r0
 8012e54:	e7aa      	b.n	8012dac <rcl_init_options_init+0x18>
 8012e56:	240b      	movs	r4, #11
 8012e58:	e7a8      	b.n	8012dac <rcl_init_options_init+0x18>
 8012e5a:	240a      	movs	r4, #10
 8012e5c:	e7a6      	b.n	8012dac <rcl_init_options_init+0x18>
 8012e5e:	bf00      	nop

08012e60 <rcl_init_options_fini>:
 8012e60:	b530      	push	{r4, r5, lr}
 8012e62:	b087      	sub	sp, #28
 8012e64:	b1f0      	cbz	r0, 8012ea4 <rcl_init_options_fini+0x44>
 8012e66:	6803      	ldr	r3, [r0, #0]
 8012e68:	4604      	mov	r4, r0
 8012e6a:	b1db      	cbz	r3, 8012ea4 <rcl_init_options_fini+0x44>
 8012e6c:	469c      	mov	ip, r3
 8012e6e:	f10d 0e04 	add.w	lr, sp, #4
 8012e72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e76:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e7a:	f8dc 3000 	ldr.w	r3, [ip]
 8012e7e:	a801      	add	r0, sp, #4
 8012e80:	f8ce 3000 	str.w	r3, [lr]
 8012e84:	f7fe ffa2 	bl	8011dcc <rcutils_allocator_is_valid>
 8012e88:	b160      	cbz	r0, 8012ea4 <rcl_init_options_fini+0x44>
 8012e8a:	6820      	ldr	r0, [r4, #0]
 8012e8c:	3018      	adds	r0, #24
 8012e8e:	f003 fa61 	bl	8016354 <rmw_init_options_fini>
 8012e92:	4605      	mov	r5, r0
 8012e94:	b950      	cbnz	r0, 8012eac <rcl_init_options_fini+0x4c>
 8012e96:	6820      	ldr	r0, [r4, #0]
 8012e98:	9b02      	ldr	r3, [sp, #8]
 8012e9a:	9905      	ldr	r1, [sp, #20]
 8012e9c:	4798      	blx	r3
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	b007      	add	sp, #28
 8012ea2:	bd30      	pop	{r4, r5, pc}
 8012ea4:	250b      	movs	r5, #11
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	b007      	add	sp, #28
 8012eaa:	bd30      	pop	{r4, r5, pc}
 8012eac:	f008 fd8e 	bl	801b9cc <rcl_convert_rmw_ret_to_rcl_ret>
 8012eb0:	4605      	mov	r5, r0
 8012eb2:	e7f8      	b.n	8012ea6 <rcl_init_options_fini+0x46>

08012eb4 <rcl_init_options_copy>:
 8012eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb8:	b094      	sub	sp, #80	@ 0x50
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d05b      	beq.n	8012f76 <rcl_init_options_copy+0xc2>
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	6800      	ldr	r0, [r0, #0]
 8012ec2:	2800      	cmp	r0, #0
 8012ec4:	d057      	beq.n	8012f76 <rcl_init_options_copy+0xc2>
 8012ec6:	460e      	mov	r6, r1
 8012ec8:	f7fe ff80 	bl	8011dcc <rcutils_allocator_is_valid>
 8012ecc:	2e00      	cmp	r6, #0
 8012ece:	d052      	beq.n	8012f76 <rcl_init_options_copy+0xc2>
 8012ed0:	f080 0001 	eor.w	r0, r0, #1
 8012ed4:	b2c0      	uxtb	r0, r0
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	d14d      	bne.n	8012f76 <rcl_init_options_copy+0xc2>
 8012eda:	6833      	ldr	r3, [r6, #0]
 8012edc:	b123      	cbz	r3, 8012ee8 <rcl_init_options_copy+0x34>
 8012ede:	2464      	movs	r4, #100	@ 0x64
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	b014      	add	sp, #80	@ 0x50
 8012ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ee8:	6827      	ldr	r7, [r4, #0]
 8012eea:	ad0f      	add	r5, sp, #60	@ 0x3c
 8012eec:	46bc      	mov	ip, r7
 8012eee:	f8d7 8000 	ldr.w	r8, [r7]
 8012ef2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012ef8:	f8dc 3000 	ldr.w	r3, [ip]
 8012efc:	2050      	movs	r0, #80	@ 0x50
 8012efe:	4619      	mov	r1, r3
 8012f00:	602b      	str	r3, [r5, #0]
 8012f02:	47c0      	blx	r8
 8012f04:	4605      	mov	r5, r0
 8012f06:	6030      	str	r0, [r6, #0]
 8012f08:	b3d0      	cbz	r0, 8012f80 <rcl_init_options_copy+0xcc>
 8012f0a:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8012f0e:	4686      	mov	lr, r0
 8012f10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012f14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012f18:	f8dc 3000 	ldr.w	r3, [ip]
 8012f1c:	4668      	mov	r0, sp
 8012f1e:	f8ce 3000 	str.w	r3, [lr]
 8012f22:	f002 ff85 	bl	8015e30 <rmw_get_zero_initialized_init_options>
 8012f26:	46ee      	mov	lr, sp
 8012f28:	f105 0c18 	add.w	ip, r5, #24
 8012f2c:	6824      	ldr	r4, [r4, #0]
 8012f2e:	6835      	ldr	r5, [r6, #0]
 8012f30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012f4c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012f50:	f104 0018 	add.w	r0, r4, #24
 8012f54:	f105 0118 	add.w	r1, r5, #24
 8012f58:	f003 f9aa 	bl	80162b0 <rmw_init_options_copy>
 8012f5c:	4604      	mov	r4, r0
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d0be      	beq.n	8012ee0 <rcl_init_options_copy+0x2c>
 8012f62:	f7fe ff41 	bl	8011de8 <rcutils_get_error_string>
 8012f66:	f7fe ff57 	bl	8011e18 <rcutils_reset_error>
 8012f6a:	4630      	mov	r0, r6
 8012f6c:	f7ff ff78 	bl	8012e60 <rcl_init_options_fini>
 8012f70:	b140      	cbz	r0, 8012f84 <rcl_init_options_copy+0xd0>
 8012f72:	4604      	mov	r4, r0
 8012f74:	e7b4      	b.n	8012ee0 <rcl_init_options_copy+0x2c>
 8012f76:	240b      	movs	r4, #11
 8012f78:	4620      	mov	r0, r4
 8012f7a:	b014      	add	sp, #80	@ 0x50
 8012f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f80:	240a      	movs	r4, #10
 8012f82:	e7ad      	b.n	8012ee0 <rcl_init_options_copy+0x2c>
 8012f84:	4620      	mov	r0, r4
 8012f86:	b014      	add	sp, #80	@ 0x50
 8012f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f8c:	f008 bd1e 	b.w	801b9cc <rcl_convert_rmw_ret_to_rcl_ret>

08012f90 <rcl_get_localhost_only>:
 8012f90:	b510      	push	{r4, lr}
 8012f92:	2300      	movs	r3, #0
 8012f94:	b082      	sub	sp, #8
 8012f96:	9301      	str	r3, [sp, #4]
 8012f98:	b1b8      	cbz	r0, 8012fca <rcl_get_localhost_only+0x3a>
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	a901      	add	r1, sp, #4
 8012f9e:	480c      	ldr	r0, [pc, #48]	@ (8012fd0 <rcl_get_localhost_only+0x40>)
 8012fa0:	f002 fc62 	bl	8015868 <rcutils_get_env>
 8012fa4:	b110      	cbz	r0, 8012fac <rcl_get_localhost_only+0x1c>
 8012fa6:	2001      	movs	r0, #1
 8012fa8:	b002      	add	sp, #8
 8012faa:	bd10      	pop	{r4, pc}
 8012fac:	9b01      	ldr	r3, [sp, #4]
 8012fae:	b113      	cbz	r3, 8012fb6 <rcl_get_localhost_only+0x26>
 8012fb0:	781a      	ldrb	r2, [r3, #0]
 8012fb2:	2a31      	cmp	r2, #49	@ 0x31
 8012fb4:	d004      	beq.n	8012fc0 <rcl_get_localhost_only+0x30>
 8012fb6:	2302      	movs	r3, #2
 8012fb8:	2000      	movs	r0, #0
 8012fba:	7023      	strb	r3, [r4, #0]
 8012fbc:	b002      	add	sp, #8
 8012fbe:	bd10      	pop	{r4, pc}
 8012fc0:	785b      	ldrb	r3, [r3, #1]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d1f7      	bne.n	8012fb6 <rcl_get_localhost_only+0x26>
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	e7f6      	b.n	8012fb8 <rcl_get_localhost_only+0x28>
 8012fca:	200b      	movs	r0, #11
 8012fcc:	b002      	add	sp, #8
 8012fce:	bd10      	pop	{r4, pc}
 8012fd0:	08020128 	.word	0x08020128

08012fd4 <rcl_get_zero_initialized_node>:
 8012fd4:	4a03      	ldr	r2, [pc, #12]	@ (8012fe4 <rcl_get_zero_initialized_node+0x10>)
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fdc:	e883 0003 	stmia.w	r3, {r0, r1}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	4770      	bx	lr
 8012fe4:	08020158 	.word	0x08020158

08012fe8 <rcl_node_init>:
 8012fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fec:	b0a9      	sub	sp, #164	@ 0xa4
 8012fee:	4604      	mov	r4, r0
 8012ff0:	460e      	mov	r6, r1
 8012ff2:	4615      	mov	r5, r2
 8012ff4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012ff8:	a823      	add	r0, sp, #140	@ 0x8c
 8012ffa:	461f      	mov	r7, r3
 8012ffc:	f008 ff20 	bl	801be40 <rcl_guard_condition_get_default_options>
 8013000:	f1b8 0f00 	cmp.w	r8, #0
 8013004:	f000 80f3 	beq.w	80131ee <rcl_node_init+0x206>
 8013008:	4640      	mov	r0, r8
 801300a:	f7fe fedf 	bl	8011dcc <rcutils_allocator_is_valid>
 801300e:	2d00      	cmp	r5, #0
 8013010:	bf18      	it	ne
 8013012:	2c00      	cmpne	r4, #0
 8013014:	f080 0001 	eor.w	r0, r0, #1
 8013018:	bf0c      	ite	eq
 801301a:	f04f 0c01 	moveq.w	ip, #1
 801301e:	f04f 0c00 	movne.w	ip, #0
 8013022:	2e00      	cmp	r6, #0
 8013024:	bf08      	it	eq
 8013026:	f04c 0c01 	orreq.w	ip, ip, #1
 801302a:	ea4c 0c00 	orr.w	ip, ip, r0
 801302e:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8013032:	f040 80dc 	bne.w	80131ee <rcl_node_init+0x206>
 8013036:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801303a:	f1ba 0f00 	cmp.w	sl, #0
 801303e:	f040 80fc 	bne.w	801323a <rcl_node_init+0x252>
 8013042:	2f00      	cmp	r7, #0
 8013044:	f000 80d3 	beq.w	80131ee <rcl_node_init+0x206>
 8013048:	4638      	mov	r0, r7
 801304a:	f7ff fd35 	bl	8012ab8 <rcl_context_is_valid>
 801304e:	4683      	mov	fp, r0
 8013050:	2800      	cmp	r0, #0
 8013052:	f000 80d2 	beq.w	80131fa <rcl_node_init+0x212>
 8013056:	4652      	mov	r2, sl
 8013058:	4630      	mov	r0, r6
 801305a:	a922      	add	r1, sp, #136	@ 0x88
 801305c:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8013060:	f003 f814 	bl	801608c <rmw_validate_node_name>
 8013064:	4682      	mov	sl, r0
 8013066:	2800      	cmp	r0, #0
 8013068:	f040 80c3 	bne.w	80131f2 <rcl_node_init+0x20a>
 801306c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801306e:	2800      	cmp	r0, #0
 8013070:	f040 80f1 	bne.w	8013256 <rcl_node_init+0x26e>
 8013074:	4628      	mov	r0, r5
 8013076:	f7ed f93d 	bl	80002f4 <strlen>
 801307a:	2800      	cmp	r0, #0
 801307c:	f040 80c0 	bne.w	8013200 <rcl_node_init+0x218>
 8013080:	4d79      	ldr	r5, [pc, #484]	@ (8013268 <rcl_node_init+0x280>)
 8013082:	a922      	add	r1, sp, #136	@ 0x88
 8013084:	2200      	movs	r2, #0
 8013086:	4628      	mov	r0, r5
 8013088:	f002 ffe2 	bl	8016050 <rmw_validate_namespace>
 801308c:	4682      	mov	sl, r0
 801308e:	2800      	cmp	r0, #0
 8013090:	f040 80af 	bne.w	80131f2 <rcl_node_init+0x20a>
 8013094:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013096:	2800      	cmp	r0, #0
 8013098:	f040 80d5 	bne.w	8013246 <rcl_node_init+0x25e>
 801309c:	f8d8 3000 	ldr.w	r3, [r8]
 80130a0:	2078      	movs	r0, #120	@ 0x78
 80130a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80130a6:	4798      	blx	r3
 80130a8:	4682      	mov	sl, r0
 80130aa:	6060      	str	r0, [r4, #4]
 80130ac:	2800      	cmp	r0, #0
 80130ae:	f000 80cf 	beq.w	8013250 <rcl_node_init+0x268>
 80130b2:	2200      	movs	r2, #0
 80130b4:	2300      	movs	r3, #0
 80130b6:	a808      	add	r0, sp, #32
 80130b8:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 80130bc:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 80130c0:	f000 f902 	bl	80132c8 <rcl_node_get_default_options>
 80130c4:	a908      	add	r1, sp, #32
 80130c6:	4650      	mov	r0, sl
 80130c8:	2268      	movs	r2, #104	@ 0x68
 80130ca:	f00a fdca 	bl	801dc62 <memcpy>
 80130ce:	6861      	ldr	r1, [r4, #4]
 80130d0:	4640      	mov	r0, r8
 80130d2:	6027      	str	r7, [r4, #0]
 80130d4:	f000 f906 	bl	80132e4 <rcl_node_options_copy>
 80130d8:	2800      	cmp	r0, #0
 80130da:	d158      	bne.n	801318e <rcl_node_init+0x1a6>
 80130dc:	4628      	mov	r0, r5
 80130de:	f7ed f909 	bl	80002f4 <strlen>
 80130e2:	4428      	add	r0, r5
 80130e4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80130e8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80130ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80130ee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80130f2:	9300      	str	r3, [sp, #0]
 80130f4:	bf0c      	ite	eq
 80130f6:	4b5d      	ldreq	r3, [pc, #372]	@ (801326c <rcl_node_init+0x284>)
 80130f8:	4b5d      	ldrne	r3, [pc, #372]	@ (8013270 <rcl_node_init+0x288>)
 80130fa:	9302      	str	r3, [sp, #8]
 80130fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013100:	9301      	str	r3, [sp, #4]
 8013102:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8013106:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801310a:	f002 fbd5 	bl	80158b8 <rcutils_format_string_limit>
 801310e:	6823      	ldr	r3, [r4, #0]
 8013110:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8013114:	4631      	mov	r1, r6
 8013116:	6818      	ldr	r0, [r3, #0]
 8013118:	462a      	mov	r2, r5
 801311a:	6866      	ldr	r6, [r4, #4]
 801311c:	3028      	adds	r0, #40	@ 0x28
 801311e:	f003 fb45 	bl	80167ac <rmw_create_node>
 8013122:	6863      	ldr	r3, [r4, #4]
 8013124:	66b0      	str	r0, [r6, #104]	@ 0x68
 8013126:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013128:	2800      	cmp	r0, #0
 801312a:	d032      	beq.n	8013192 <rcl_node_init+0x1aa>
 801312c:	f003 fbce 	bl	80168cc <rmw_node_get_graph_guard_condition>
 8013130:	4682      	mov	sl, r0
 8013132:	b360      	cbz	r0, 801318e <rcl_node_init+0x1a6>
 8013134:	f8d8 3000 	ldr.w	r3, [r8]
 8013138:	2008      	movs	r0, #8
 801313a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801313e:	6866      	ldr	r6, [r4, #4]
 8013140:	4798      	blx	r3
 8013142:	6863      	ldr	r3, [r4, #4]
 8013144:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8013146:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801314a:	f1bb 0f00 	cmp.w	fp, #0
 801314e:	d020      	beq.n	8013192 <rcl_node_init+0x1aa>
 8013150:	a806      	add	r0, sp, #24
 8013152:	ae23      	add	r6, sp, #140	@ 0x8c
 8013154:	f008 fde8 	bl	801bd28 <rcl_get_zero_initialized_guard_condition>
 8013158:	a806      	add	r0, sp, #24
 801315a:	6863      	ldr	r3, [r4, #4]
 801315c:	46c4      	mov	ip, r8
 801315e:	c803      	ldmia	r0, {r0, r1}
 8013160:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013164:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013168:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801316c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801316e:	f8dc 3000 	ldr.w	r3, [ip]
 8013172:	6033      	str	r3, [r6, #0]
 8013174:	ab28      	add	r3, sp, #160	@ 0xa0
 8013176:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801317a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801317e:	4651      	mov	r1, sl
 8013180:	463a      	mov	r2, r7
 8013182:	4670      	mov	r0, lr
 8013184:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013186:	f008 fdd9 	bl	801bd3c <rcl_guard_condition_init_from_rmw>
 801318a:	4682      	mov	sl, r0
 801318c:	b328      	cbz	r0, 80131da <rcl_node_init+0x1f2>
 801318e:	6863      	ldr	r3, [r4, #4]
 8013190:	b1f3      	cbz	r3, 80131d0 <rcl_node_init+0x1e8>
 8013192:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013194:	b128      	cbz	r0, 80131a2 <rcl_node_init+0x1ba>
 8013196:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801319a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801319e:	4798      	blx	r3
 80131a0:	6863      	ldr	r3, [r4, #4]
 80131a2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80131a4:	b110      	cbz	r0, 80131ac <rcl_node_init+0x1c4>
 80131a6:	f003 fb13 	bl	80167d0 <rmw_destroy_node>
 80131aa:	6863      	ldr	r3, [r4, #4]
 80131ac:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80131ae:	b148      	cbz	r0, 80131c4 <rcl_node_init+0x1dc>
 80131b0:	f008 fe20 	bl	801bdf4 <rcl_guard_condition_fini>
 80131b4:	6863      	ldr	r3, [r4, #4]
 80131b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80131ba:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80131bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80131c0:	4798      	blx	r3
 80131c2:	6863      	ldr	r3, [r4, #4]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80131ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80131ce:	4798      	blx	r3
 80131d0:	2300      	movs	r3, #0
 80131d2:	f04f 0a01 	mov.w	sl, #1
 80131d6:	e9c4 3300 	strd	r3, r3, [r4]
 80131da:	f1b9 0f00 	cmp.w	r9, #0
 80131de:	d008      	beq.n	80131f2 <rcl_node_init+0x20a>
 80131e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80131e4:	4628      	mov	r0, r5
 80131e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80131ea:	4798      	blx	r3
 80131ec:	e001      	b.n	80131f2 <rcl_node_init+0x20a>
 80131ee:	f04f 0a0b 	mov.w	sl, #11
 80131f2:	4650      	mov	r0, sl
 80131f4:	b029      	add	sp, #164	@ 0xa4
 80131f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131fa:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 80131fe:	e7f8      	b.n	80131f2 <rcl_node_init+0x20a>
 8013200:	782b      	ldrb	r3, [r5, #0]
 8013202:	2b2f      	cmp	r3, #47	@ 0x2f
 8013204:	f43f af3d 	beq.w	8013082 <rcl_node_init+0x9a>
 8013208:	9503      	str	r5, [sp, #12]
 801320a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801320e:	9300      	str	r3, [sp, #0]
 8013210:	4b18      	ldr	r3, [pc, #96]	@ (8013274 <rcl_node_init+0x28c>)
 8013212:	9302      	str	r3, [sp, #8]
 8013214:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013218:	9301      	str	r3, [sp, #4]
 801321a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801321e:	f002 fb4b 	bl	80158b8 <rcutils_format_string_limit>
 8013222:	4605      	mov	r5, r0
 8013224:	b1e0      	cbz	r0, 8013260 <rcl_node_init+0x278>
 8013226:	2200      	movs	r2, #0
 8013228:	a922      	add	r1, sp, #136	@ 0x88
 801322a:	9222      	str	r2, [sp, #136]	@ 0x88
 801322c:	f002 ff10 	bl	8016050 <rmw_validate_namespace>
 8013230:	4682      	mov	sl, r0
 8013232:	2800      	cmp	r0, #0
 8013234:	d1d4      	bne.n	80131e0 <rcl_node_init+0x1f8>
 8013236:	46d9      	mov	r9, fp
 8013238:	e72c      	b.n	8013094 <rcl_node_init+0xac>
 801323a:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801323e:	4650      	mov	r0, sl
 8013240:	b029      	add	sp, #164	@ 0xa4
 8013242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013246:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801324a:	f002 ff13 	bl	8016074 <rmw_namespace_validation_result_string>
 801324e:	e7c4      	b.n	80131da <rcl_node_init+0x1f2>
 8013250:	f04f 0a0a 	mov.w	sl, #10
 8013254:	e7c1      	b.n	80131da <rcl_node_init+0x1f2>
 8013256:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801325a:	f002 ff6b 	bl	8016134 <rmw_node_name_validation_result_string>
 801325e:	e7c8      	b.n	80131f2 <rcl_node_init+0x20a>
 8013260:	f04f 0a0a 	mov.w	sl, #10
 8013264:	e7c5      	b.n	80131f2 <rcl_node_init+0x20a>
 8013266:	bf00      	nop
 8013268:	08020140 	.word	0x08020140
 801326c:	08020148 	.word	0x08020148
 8013270:	08020150 	.word	0x08020150
 8013274:	08020144 	.word	0x08020144

08013278 <rcl_node_is_valid>:
 8013278:	b130      	cbz	r0, 8013288 <rcl_node_is_valid+0x10>
 801327a:	6843      	ldr	r3, [r0, #4]
 801327c:	b123      	cbz	r3, 8013288 <rcl_node_is_valid+0x10>
 801327e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013280:	b113      	cbz	r3, 8013288 <rcl_node_is_valid+0x10>
 8013282:	6800      	ldr	r0, [r0, #0]
 8013284:	f7ff bc18 	b.w	8012ab8 <rcl_context_is_valid>
 8013288:	2000      	movs	r0, #0
 801328a:	4770      	bx	lr

0801328c <rcl_node_get_name>:
 801328c:	b120      	cbz	r0, 8013298 <rcl_node_get_name+0xc>
 801328e:	6840      	ldr	r0, [r0, #4]
 8013290:	b110      	cbz	r0, 8013298 <rcl_node_get_name+0xc>
 8013292:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013294:	b100      	cbz	r0, 8013298 <rcl_node_get_name+0xc>
 8013296:	6880      	ldr	r0, [r0, #8]
 8013298:	4770      	bx	lr
 801329a:	bf00      	nop

0801329c <rcl_node_get_namespace>:
 801329c:	b120      	cbz	r0, 80132a8 <rcl_node_get_namespace+0xc>
 801329e:	6840      	ldr	r0, [r0, #4]
 80132a0:	b110      	cbz	r0, 80132a8 <rcl_node_get_namespace+0xc>
 80132a2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80132a4:	b100      	cbz	r0, 80132a8 <rcl_node_get_namespace+0xc>
 80132a6:	68c0      	ldr	r0, [r0, #12]
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop

080132ac <rcl_node_get_options>:
 80132ac:	b128      	cbz	r0, 80132ba <rcl_node_get_options+0xe>
 80132ae:	6840      	ldr	r0, [r0, #4]
 80132b0:	b118      	cbz	r0, 80132ba <rcl_node_get_options+0xe>
 80132b2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	bf08      	it	eq
 80132b8:	2000      	moveq	r0, #0
 80132ba:	4770      	bx	lr

080132bc <rcl_node_get_rmw_handle>:
 80132bc:	b110      	cbz	r0, 80132c4 <rcl_node_get_rmw_handle+0x8>
 80132be:	6840      	ldr	r0, [r0, #4]
 80132c0:	b100      	cbz	r0, 80132c4 <rcl_node_get_rmw_handle+0x8>
 80132c2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80132c4:	4770      	bx	lr
 80132c6:	bf00      	nop

080132c8 <rcl_node_get_default_options>:
 80132c8:	b510      	push	{r4, lr}
 80132ca:	4604      	mov	r4, r0
 80132cc:	2268      	movs	r2, #104	@ 0x68
 80132ce:	2100      	movs	r1, #0
 80132d0:	f00a fba8 	bl	801da24 <memset>
 80132d4:	4620      	mov	r0, r4
 80132d6:	f7fe fd6b 	bl	8011db0 <rcutils_get_default_allocator>
 80132da:	2301      	movs	r3, #1
 80132dc:	4620      	mov	r0, r4
 80132de:	7523      	strb	r3, [r4, #20]
 80132e0:	bd10      	pop	{r4, pc}
 80132e2:	bf00      	nop

080132e4 <rcl_node_options_copy>:
 80132e4:	2800      	cmp	r0, #0
 80132e6:	bf18      	it	ne
 80132e8:	4288      	cmpne	r0, r1
 80132ea:	d01b      	beq.n	8013324 <rcl_node_options_copy+0x40>
 80132ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ee:	fab1 f681 	clz	r6, r1
 80132f2:	460c      	mov	r4, r1
 80132f4:	0976      	lsrs	r6, r6, #5
 80132f6:	b199      	cbz	r1, 8013320 <rcl_node_options_copy+0x3c>
 80132f8:	4605      	mov	r5, r0
 80132fa:	8a87      	ldrh	r7, [r0, #20]
 80132fc:	4684      	mov	ip, r0
 80132fe:	468e      	mov	lr, r1
 8013300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013302:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013306:	682b      	ldr	r3, [r5, #0]
 8013308:	2250      	movs	r2, #80	@ 0x50
 801330a:	f10c 0118 	add.w	r1, ip, #24
 801330e:	f104 0018 	add.w	r0, r4, #24
 8013312:	f8ce 3000 	str.w	r3, [lr]
 8013316:	82a7      	strh	r7, [r4, #20]
 8013318:	f00a fca3 	bl	801dc62 <memcpy>
 801331c:	4630      	mov	r0, r6
 801331e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013320:	200b      	movs	r0, #11
 8013322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013324:	200b      	movs	r0, #11
 8013326:	4770      	bx	lr

08013328 <rcl_node_resolve_name>:
 8013328:	b082      	sub	sp, #8
 801332a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801332e:	b091      	sub	sp, #68	@ 0x44
 8013330:	ac1a      	add	r4, sp, #104	@ 0x68
 8013332:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013336:	e884 000c 	stmia.w	r4, {r2, r3}
 801333a:	2800      	cmp	r0, #0
 801333c:	d03d      	beq.n	80133ba <rcl_node_resolve_name+0x92>
 801333e:	460c      	mov	r4, r1
 8013340:	4605      	mov	r5, r0
 8013342:	f7ff ffb3 	bl	80132ac <rcl_node_get_options>
 8013346:	2800      	cmp	r0, #0
 8013348:	d03a      	beq.n	80133c0 <rcl_node_resolve_name+0x98>
 801334a:	4628      	mov	r0, r5
 801334c:	f7ff ff9e 	bl	801328c <rcl_node_get_name>
 8013350:	4606      	mov	r6, r0
 8013352:	4628      	mov	r0, r5
 8013354:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013356:	f7ff ffa1 	bl	801329c <rcl_node_get_namespace>
 801335a:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801335e:	4607      	mov	r7, r0
 8013360:	46ac      	mov	ip, r5
 8013362:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013366:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801336a:	f8de 3000 	ldr.w	r3, [lr]
 801336e:	f8cc 3000 	str.w	r3, [ip]
 8013372:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013374:	b30b      	cbz	r3, 80133ba <rcl_node_resolve_name+0x92>
 8013376:	4689      	mov	r9, r1
 8013378:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801337c:	f002 fc14 	bl	8015ba8 <rcutils_get_zero_initialized_string_map>
 8013380:	ab10      	add	r3, sp, #64	@ 0x40
 8013382:	9008      	str	r0, [sp, #32]
 8013384:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013388:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801338c:	2100      	movs	r1, #0
 801338e:	a808      	add	r0, sp, #32
 8013390:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013394:	f002 fc7e 	bl	8015c94 <rcutils_string_map_init>
 8013398:	4683      	mov	fp, r0
 801339a:	b1a0      	cbz	r0, 80133c6 <rcl_node_resolve_name+0x9e>
 801339c:	f7fe fd24 	bl	8011de8 <rcutils_get_error_string>
 80133a0:	f7fe fd3a 	bl	8011e18 <rcutils_reset_error>
 80133a4:	f1bb 0f0a 	cmp.w	fp, #10
 80133a8:	bf18      	it	ne
 80133aa:	f04f 0b01 	movne.w	fp, #1
 80133ae:	4658      	mov	r0, fp
 80133b0:	b011      	add	sp, #68	@ 0x44
 80133b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b6:	b002      	add	sp, #8
 80133b8:	4770      	bx	lr
 80133ba:	f04f 0b0b 	mov.w	fp, #11
 80133be:	e7f6      	b.n	80133ae <rcl_node_resolve_name+0x86>
 80133c0:	f04f 0b01 	mov.w	fp, #1
 80133c4:	e7f3      	b.n	80133ae <rcl_node_resolve_name+0x86>
 80133c6:	9009      	str	r0, [sp, #36]	@ 0x24
 80133c8:	9007      	str	r0, [sp, #28]
 80133ca:	a808      	add	r0, sp, #32
 80133cc:	f008 fca6 	bl	801bd1c <rcl_get_default_topic_name_substitutions>
 80133d0:	4683      	mov	fp, r0
 80133d2:	b180      	cbz	r0, 80133f6 <rcl_node_resolve_name+0xce>
 80133d4:	280a      	cmp	r0, #10
 80133d6:	a808      	add	r0, sp, #32
 80133d8:	bf18      	it	ne
 80133da:	f04f 0b01 	movne.w	fp, #1
 80133de:	f002 fc99 	bl	8015d14 <rcutils_string_map_fini>
 80133e2:	4604      	mov	r4, r0
 80133e4:	2800      	cmp	r0, #0
 80133e6:	d15b      	bne.n	80134a0 <rcl_node_resolve_name+0x178>
 80133e8:	4651      	mov	r1, sl
 80133ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80133ec:	47c8      	blx	r9
 80133ee:	4651      	mov	r1, sl
 80133f0:	4620      	mov	r0, r4
 80133f2:	47c8      	blx	r9
 80133f4:	e7db      	b.n	80133ae <rcl_node_resolve_name+0x86>
 80133f6:	ab09      	add	r3, sp, #36	@ 0x24
 80133f8:	46ec      	mov	ip, sp
 80133fa:	9305      	str	r3, [sp, #20]
 80133fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013402:	682b      	ldr	r3, [r5, #0]
 8013404:	463a      	mov	r2, r7
 8013406:	4631      	mov	r1, r6
 8013408:	4620      	mov	r0, r4
 801340a:	f8cc 3000 	str.w	r3, [ip]
 801340e:	ab08      	add	r3, sp, #32
 8013410:	f008 fb24 	bl	801ba5c <rcl_expand_topic_name>
 8013414:	4683      	mov	fp, r0
 8013416:	b9d8      	cbnz	r0, 8013450 <rcl_node_resolve_name+0x128>
 8013418:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801341a:	4602      	mov	r2, r0
 801341c:	9009      	str	r0, [sp, #36]	@ 0x24
 801341e:	a90a      	add	r1, sp, #40	@ 0x28
 8013420:	4620      	mov	r0, r4
 8013422:	f002 fd45 	bl	8015eb0 <rmw_validate_full_topic_name>
 8013426:	bb50      	cbnz	r0, 801347e <rcl_node_resolve_name+0x156>
 8013428:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801342a:	2d00      	cmp	r5, #0
 801342c:	d140      	bne.n	80134b0 <rcl_node_resolve_name+0x188>
 801342e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013430:	a808      	add	r0, sp, #32
 8013432:	601c      	str	r4, [r3, #0]
 8013434:	f002 fc6e 	bl	8015d14 <rcutils_string_map_fini>
 8013438:	4683      	mov	fp, r0
 801343a:	2800      	cmp	r0, #0
 801343c:	d043      	beq.n	80134c6 <rcl_node_resolve_name+0x19e>
 801343e:	f7fe fcd3 	bl	8011de8 <rcutils_get_error_string>
 8013442:	46a8      	mov	r8, r5
 8013444:	f04f 0b01 	mov.w	fp, #1
 8013448:	462c      	mov	r4, r5
 801344a:	f7fe fce5 	bl	8011e18 <rcutils_reset_error>
 801344e:	e00a      	b.n	8013466 <rcl_node_resolve_name+0x13e>
 8013450:	2867      	cmp	r0, #103	@ 0x67
 8013452:	bf14      	ite	ne
 8013454:	f04f 0800 	movne.w	r8, #0
 8013458:	f008 0801 	andeq.w	r8, r8, #1
 801345c:	9c07      	ldr	r4, [sp, #28]
 801345e:	a808      	add	r0, sp, #32
 8013460:	f002 fc58 	bl	8015d14 <rcutils_string_map_fini>
 8013464:	bb50      	cbnz	r0, 80134bc <rcl_node_resolve_name+0x194>
 8013466:	4651      	mov	r1, sl
 8013468:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801346a:	47c8      	blx	r9
 801346c:	4651      	mov	r1, sl
 801346e:	4620      	mov	r0, r4
 8013470:	47c8      	blx	r9
 8013472:	f1b8 0f00 	cmp.w	r8, #0
 8013476:	bf18      	it	ne
 8013478:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 801347c:	e797      	b.n	80133ae <rcl_node_resolve_name+0x86>
 801347e:	f7fe fcb3 	bl	8011de8 <rcutils_get_error_string>
 8013482:	f7fe fcc9 	bl	8011e18 <rcutils_reset_error>
 8013486:	a808      	add	r0, sp, #32
 8013488:	f002 fc44 	bl	8015d14 <rcutils_string_map_fini>
 801348c:	b998      	cbnz	r0, 80134b6 <rcl_node_resolve_name+0x18e>
 801348e:	4651      	mov	r1, sl
 8013490:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013492:	47c8      	blx	r9
 8013494:	4651      	mov	r1, sl
 8013496:	4620      	mov	r0, r4
 8013498:	f04f 0b01 	mov.w	fp, #1
 801349c:	47c8      	blx	r9
 801349e:	e786      	b.n	80133ae <rcl_node_resolve_name+0x86>
 80134a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80134a4:	f7fe fca0 	bl	8011de8 <rcutils_get_error_string>
 80134a8:	f7fe fcb6 	bl	8011e18 <rcutils_reset_error>
 80134ac:	4644      	mov	r4, r8
 80134ae:	e7da      	b.n	8013466 <rcl_node_resolve_name+0x13e>
 80134b0:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 80134b4:	e7d3      	b.n	801345e <rcl_node_resolve_name+0x136>
 80134b6:	46d8      	mov	r8, fp
 80134b8:	f04f 0b01 	mov.w	fp, #1
 80134bc:	f7fe fc94 	bl	8011de8 <rcutils_get_error_string>
 80134c0:	f7fe fcaa 	bl	8011e18 <rcutils_reset_error>
 80134c4:	e7cf      	b.n	8013466 <rcl_node_resolve_name+0x13e>
 80134c6:	4651      	mov	r1, sl
 80134c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80134ca:	47c8      	blx	r9
 80134cc:	4651      	mov	r1, sl
 80134ce:	4658      	mov	r0, fp
 80134d0:	47c8      	blx	r9
 80134d2:	e76c      	b.n	80133ae <rcl_node_resolve_name+0x86>

080134d4 <rcl_get_zero_initialized_publisher>:
 80134d4:	4b01      	ldr	r3, [pc, #4]	@ (80134dc <rcl_get_zero_initialized_publisher+0x8>)
 80134d6:	6818      	ldr	r0, [r3, #0]
 80134d8:	4770      	bx	lr
 80134da:	bf00      	nop
 80134dc:	08020160 	.word	0x08020160

080134e0 <rcl_publisher_init>:
 80134e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134e4:	b088      	sub	sp, #32
 80134e6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80134e8:	2e00      	cmp	r6, #0
 80134ea:	d06b      	beq.n	80135c4 <rcl_publisher_init+0xe4>
 80134ec:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 80134f0:	4605      	mov	r5, r0
 80134f2:	460f      	mov	r7, r1
 80134f4:	4690      	mov	r8, r2
 80134f6:	4650      	mov	r0, sl
 80134f8:	4699      	mov	r9, r3
 80134fa:	f7fe fc67 	bl	8011dcc <rcutils_allocator_is_valid>
 80134fe:	f080 0401 	eor.w	r4, r0, #1
 8013502:	b2e4      	uxtb	r4, r4
 8013504:	2c00      	cmp	r4, #0
 8013506:	d15d      	bne.n	80135c4 <rcl_publisher_init+0xe4>
 8013508:	2d00      	cmp	r5, #0
 801350a:	d05b      	beq.n	80135c4 <rcl_publisher_init+0xe4>
 801350c:	682b      	ldr	r3, [r5, #0]
 801350e:	b123      	cbz	r3, 801351a <rcl_publisher_init+0x3a>
 8013510:	2464      	movs	r4, #100	@ 0x64
 8013512:	4620      	mov	r0, r4
 8013514:	b008      	add	sp, #32
 8013516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801351a:	4638      	mov	r0, r7
 801351c:	f7ff feac 	bl	8013278 <rcl_node_is_valid>
 8013520:	2800      	cmp	r0, #0
 8013522:	d054      	beq.n	80135ce <rcl_publisher_init+0xee>
 8013524:	f1b8 0f00 	cmp.w	r8, #0
 8013528:	d04c      	beq.n	80135c4 <rcl_publisher_init+0xe4>
 801352a:	fab9 f389 	clz	r3, r9
 801352e:	095b      	lsrs	r3, r3, #5
 8013530:	f1b9 0f00 	cmp.w	r9, #0
 8013534:	d046      	beq.n	80135c4 <rcl_publisher_init+0xe4>
 8013536:	aa07      	add	r2, sp, #28
 8013538:	9307      	str	r3, [sp, #28]
 801353a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801353e:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8013542:	9205      	str	r2, [sp, #20]
 8013544:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013548:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801354c:	4649      	mov	r1, r9
 801354e:	4638      	mov	r0, r7
 8013550:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013554:	f7ff fee8 	bl	8013328 <rcl_node_resolve_name>
 8013558:	2800      	cmp	r0, #0
 801355a:	d14f      	bne.n	80135fc <rcl_publisher_init+0x11c>
 801355c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 801355e:	20c8      	movs	r0, #200	@ 0xc8
 8013560:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8013562:	4798      	blx	r3
 8013564:	6028      	str	r0, [r5, #0]
 8013566:	2800      	cmp	r0, #0
 8013568:	d050      	beq.n	801360c <rcl_publisher_init+0x12c>
 801356a:	4638      	mov	r0, r7
 801356c:	f7ff fea6 	bl	80132bc <rcl_node_get_rmw_handle>
 8013570:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8013574:	4641      	mov	r1, r8
 8013576:	9a07      	ldr	r2, [sp, #28]
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	4633      	mov	r3, r6
 801357c:	682c      	ldr	r4, [r5, #0]
 801357e:	f003 f9ab 	bl	80168d8 <rmw_create_publisher>
 8013582:	682b      	ldr	r3, [r5, #0]
 8013584:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8013588:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801358c:	b370      	cbz	r0, 80135ec <rcl_publisher_init+0x10c>
 801358e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8013592:	f003 fa85 	bl	8016aa0 <rmw_publisher_get_actual_qos>
 8013596:	682b      	ldr	r3, [r5, #0]
 8013598:	4604      	mov	r4, r0
 801359a:	b9d0      	cbnz	r0, 80135d2 <rcl_publisher_init+0xf2>
 801359c:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 80135a0:	4631      	mov	r1, r6
 80135a2:	4618      	mov	r0, r3
 80135a4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80135a8:	2270      	movs	r2, #112	@ 0x70
 80135aa:	f00a fb5a 	bl	801dc62 <memcpy>
 80135ae:	683a      	ldr	r2, [r7, #0]
 80135b0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80135b4:	9807      	ldr	r0, [sp, #28]
 80135b6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80135b8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80135ba:	4798      	blx	r3
 80135bc:	4620      	mov	r0, r4
 80135be:	b008      	add	sp, #32
 80135c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135c4:	240b      	movs	r4, #11
 80135c6:	4620      	mov	r0, r4
 80135c8:	b008      	add	sp, #32
 80135ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135ce:	24c8      	movs	r4, #200	@ 0xc8
 80135d0:	e79f      	b.n	8013512 <rcl_publisher_init+0x32>
 80135d2:	b1cb      	cbz	r3, 8013608 <rcl_publisher_init+0x128>
 80135d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80135d8:	b142      	cbz	r2, 80135ec <rcl_publisher_init+0x10c>
 80135da:	4638      	mov	r0, r7
 80135dc:	f7ff fe6e 	bl	80132bc <rcl_node_get_rmw_handle>
 80135e0:	682b      	ldr	r3, [r5, #0]
 80135e2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80135e6:	f003 fa6f 	bl	8016ac8 <rmw_destroy_publisher>
 80135ea:	682b      	ldr	r3, [r5, #0]
 80135ec:	4618      	mov	r0, r3
 80135ee:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 80135f0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80135f2:	2401      	movs	r4, #1
 80135f4:	4790      	blx	r2
 80135f6:	2300      	movs	r3, #0
 80135f8:	602b      	str	r3, [r5, #0]
 80135fa:	e7db      	b.n	80135b4 <rcl_publisher_init+0xd4>
 80135fc:	2867      	cmp	r0, #103	@ 0x67
 80135fe:	d007      	beq.n	8013610 <rcl_publisher_init+0x130>
 8013600:	2869      	cmp	r0, #105	@ 0x69
 8013602:	d005      	beq.n	8013610 <rcl_publisher_init+0x130>
 8013604:	280a      	cmp	r0, #10
 8013606:	d001      	beq.n	801360c <rcl_publisher_init+0x12c>
 8013608:	2401      	movs	r4, #1
 801360a:	e7d3      	b.n	80135b4 <rcl_publisher_init+0xd4>
 801360c:	240a      	movs	r4, #10
 801360e:	e7d1      	b.n	80135b4 <rcl_publisher_init+0xd4>
 8013610:	2467      	movs	r4, #103	@ 0x67
 8013612:	e7cf      	b.n	80135b4 <rcl_publisher_init+0xd4>

08013614 <rcl_publisher_get_default_options>:
 8013614:	b570      	push	{r4, r5, r6, lr}
 8013616:	4d14      	ldr	r5, [pc, #80]	@ (8013668 <rcl_publisher_get_default_options+0x54>)
 8013618:	b088      	sub	sp, #32
 801361a:	4604      	mov	r4, r0
 801361c:	2250      	movs	r2, #80	@ 0x50
 801361e:	4913      	ldr	r1, [pc, #76]	@ (801366c <rcl_publisher_get_default_options+0x58>)
 8013620:	4628      	mov	r0, r5
 8013622:	f00a fb1e 	bl	801dc62 <memcpy>
 8013626:	a802      	add	r0, sp, #8
 8013628:	f7fe fbc2 	bl	8011db0 <rcutils_get_default_allocator>
 801362c:	f10d 0c08 	add.w	ip, sp, #8
 8013630:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8013634:	466e      	mov	r6, sp
 8013636:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801363a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801363e:	f8dc 3000 	ldr.w	r3, [ip]
 8013642:	4630      	mov	r0, r6
 8013644:	f8ce 3000 	str.w	r3, [lr]
 8013648:	f002 fc02 	bl	8015e50 <rmw_get_default_publisher_options>
 801364c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8013650:	2270      	movs	r2, #112	@ 0x70
 8013652:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013656:	e883 0003 	stmia.w	r3, {r0, r1}
 801365a:	4629      	mov	r1, r5
 801365c:	4620      	mov	r0, r4
 801365e:	f00a fb00 	bl	801dc62 <memcpy>
 8013662:	4620      	mov	r0, r4
 8013664:	b008      	add	sp, #32
 8013666:	bd70      	pop	{r4, r5, r6, pc}
 8013668:	24064bc0 	.word	0x24064bc0
 801366c:	08020168 	.word	0x08020168

08013670 <rcl_publisher_is_valid>:
 8013670:	b1a0      	cbz	r0, 801369c <rcl_publisher_is_valid+0x2c>
 8013672:	6803      	ldr	r3, [r0, #0]
 8013674:	b510      	push	{r4, lr}
 8013676:	4604      	mov	r4, r0
 8013678:	b173      	cbz	r3, 8013698 <rcl_publisher_is_valid+0x28>
 801367a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801367e:	b15a      	cbz	r2, 8013698 <rcl_publisher_is_valid+0x28>
 8013680:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8013684:	f7ff fa18 	bl	8012ab8 <rcl_context_is_valid>
 8013688:	b130      	cbz	r0, 8013698 <rcl_publisher_is_valid+0x28>
 801368a:	6823      	ldr	r3, [r4, #0]
 801368c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8013690:	3800      	subs	r0, #0
 8013692:	bf18      	it	ne
 8013694:	2001      	movne	r0, #1
 8013696:	bd10      	pop	{r4, pc}
 8013698:	2000      	movs	r0, #0
 801369a:	bd10      	pop	{r4, pc}
 801369c:	2000      	movs	r0, #0
 801369e:	4770      	bx	lr

080136a0 <rcl_publisher_is_valid_except_context>:
 80136a0:	b130      	cbz	r0, 80136b0 <rcl_publisher_is_valid_except_context+0x10>
 80136a2:	6800      	ldr	r0, [r0, #0]
 80136a4:	b120      	cbz	r0, 80136b0 <rcl_publisher_is_valid_except_context+0x10>
 80136a6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80136aa:	3800      	subs	r0, #0
 80136ac:	bf18      	it	ne
 80136ae:	2001      	movne	r0, #1
 80136b0:	4770      	bx	lr
 80136b2:	bf00      	nop

080136b4 <exact_match_lookup>:
 80136b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136b6:	f102 0708 	add.w	r7, r2, #8
 80136ba:	460b      	mov	r3, r1
 80136bc:	b085      	sub	sp, #20
 80136be:	4614      	mov	r4, r2
 80136c0:	4606      	mov	r6, r0
 80136c2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80136c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80136ca:	4618      	mov	r0, r3
 80136cc:	4919      	ldr	r1, [pc, #100]	@ (8013734 <exact_match_lookup+0x80>)
 80136ce:	e894 000c 	ldmia.w	r4, {r2, r3}
 80136d2:	f002 f8e3 	bl	801589c <rcutils_join_path>
 80136d6:	7833      	ldrb	r3, [r6, #0]
 80136d8:	4605      	mov	r5, r0
 80136da:	2b2f      	cmp	r3, #47	@ 0x2f
 80136dc:	d023      	beq.n	8013726 <exact_match_lookup+0x72>
 80136de:	f104 030c 	add.w	r3, r4, #12
 80136e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80136e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80136ea:	1c70      	adds	r0, r6, #1
 80136ec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80136f0:	f002 f8da 	bl	80158a8 <rcutils_to_native_path>
 80136f4:	4606      	mov	r6, r0
 80136f6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80136fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80136fe:	4631      	mov	r1, r6
 8013700:	4628      	mov	r0, r5
 8013702:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013706:	f002 f8c9 	bl	801589c <rcutils_join_path>
 801370a:	4603      	mov	r3, r0
 801370c:	4630      	mov	r0, r6
 801370e:	6862      	ldr	r2, [r4, #4]
 8013710:	461e      	mov	r6, r3
 8013712:	6921      	ldr	r1, [r4, #16]
 8013714:	4790      	blx	r2
 8013716:	4628      	mov	r0, r5
 8013718:	4635      	mov	r5, r6
 801371a:	6863      	ldr	r3, [r4, #4]
 801371c:	6921      	ldr	r1, [r4, #16]
 801371e:	4798      	blx	r3
 8013720:	4628      	mov	r0, r5
 8013722:	b005      	add	sp, #20
 8013724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013726:	7873      	ldrb	r3, [r6, #1]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d1d8      	bne.n	80136de <exact_match_lookup+0x2a>
 801372c:	4628      	mov	r0, r5
 801372e:	b005      	add	sp, #20
 8013730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013732:	bf00      	nop
 8013734:	080201f4 	.word	0x080201f4

08013738 <rcl_get_secure_root>:
 8013738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801373c:	b085      	sub	sp, #20
 801373e:	b168      	cbz	r0, 801375c <rcl_get_secure_root+0x24>
 8013740:	4607      	mov	r7, r0
 8013742:	4608      	mov	r0, r1
 8013744:	460c      	mov	r4, r1
 8013746:	f7fe fb41 	bl	8011dcc <rcutils_allocator_is_valid>
 801374a:	b138      	cbz	r0, 801375c <rcl_get_secure_root+0x24>
 801374c:	2300      	movs	r3, #0
 801374e:	482d      	ldr	r0, [pc, #180]	@ (8013804 <rcl_get_secure_root+0xcc>)
 8013750:	a903      	add	r1, sp, #12
 8013752:	9303      	str	r3, [sp, #12]
 8013754:	f002 f888 	bl	8015868 <rcutils_get_env>
 8013758:	4605      	mov	r5, r0
 801375a:	b120      	cbz	r0, 8013766 <rcl_get_secure_root+0x2e>
 801375c:	2500      	movs	r5, #0
 801375e:	4628      	mov	r0, r5
 8013760:	b005      	add	sp, #20
 8013762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013766:	9b03      	ldr	r3, [sp, #12]
 8013768:	781a      	ldrb	r2, [r3, #0]
 801376a:	2a00      	cmp	r2, #0
 801376c:	d0f6      	beq.n	801375c <rcl_get_secure_root+0x24>
 801376e:	f104 090c 	add.w	r9, r4, #12
 8013772:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013776:	e88d 0003 	stmia.w	sp, {r0, r1}
 801377a:	4618      	mov	r0, r3
 801377c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013780:	f002 f9d4 	bl	8015b2c <rcutils_strdup>
 8013784:	4680      	mov	r8, r0
 8013786:	2800      	cmp	r0, #0
 8013788:	d0e8      	beq.n	801375c <rcl_get_secure_root+0x24>
 801378a:	a903      	add	r1, sp, #12
 801378c:	481e      	ldr	r0, [pc, #120]	@ (8013808 <rcl_get_secure_root+0xd0>)
 801378e:	9503      	str	r5, [sp, #12]
 8013790:	f002 f86a 	bl	8015868 <rcutils_get_env>
 8013794:	b160      	cbz	r0, 80137b0 <rcl_get_secure_root+0x78>
 8013796:	2600      	movs	r6, #0
 8013798:	4630      	mov	r0, r6
 801379a:	6863      	ldr	r3, [r4, #4]
 801379c:	6921      	ldr	r1, [r4, #16]
 801379e:	4798      	blx	r3
 80137a0:	4640      	mov	r0, r8
 80137a2:	6863      	ldr	r3, [r4, #4]
 80137a4:	6921      	ldr	r1, [r4, #16]
 80137a6:	4798      	blx	r3
 80137a8:	4628      	mov	r0, r5
 80137aa:	b005      	add	sp, #20
 80137ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137b0:	9b03      	ldr	r3, [sp, #12]
 80137b2:	781e      	ldrb	r6, [r3, #0]
 80137b4:	b1f6      	cbz	r6, 80137f4 <rcl_get_secure_root+0xbc>
 80137b6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80137ba:	e88d 0003 	stmia.w	sp, {r0, r1}
 80137be:	4618      	mov	r0, r3
 80137c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80137c4:	f002 f9b2 	bl	8015b2c <rcutils_strdup>
 80137c8:	4606      	mov	r6, r0
 80137ca:	2800      	cmp	r0, #0
 80137cc:	d0e3      	beq.n	8013796 <rcl_get_secure_root+0x5e>
 80137ce:	4622      	mov	r2, r4
 80137d0:	4641      	mov	r1, r8
 80137d2:	f7ff ff6f 	bl	80136b4 <exact_match_lookup>
 80137d6:	4605      	mov	r5, r0
 80137d8:	2d00      	cmp	r5, #0
 80137da:	d0dd      	beq.n	8013798 <rcl_get_secure_root+0x60>
 80137dc:	4628      	mov	r0, r5
 80137de:	f002 f85b 	bl	8015898 <rcutils_is_directory>
 80137e2:	4603      	mov	r3, r0
 80137e4:	2800      	cmp	r0, #0
 80137e6:	d1d7      	bne.n	8013798 <rcl_get_secure_root+0x60>
 80137e8:	4628      	mov	r0, r5
 80137ea:	6921      	ldr	r1, [r4, #16]
 80137ec:	461d      	mov	r5, r3
 80137ee:	6863      	ldr	r3, [r4, #4]
 80137f0:	4798      	blx	r3
 80137f2:	e7d1      	b.n	8013798 <rcl_get_secure_root+0x60>
 80137f4:	4622      	mov	r2, r4
 80137f6:	4638      	mov	r0, r7
 80137f8:	4641      	mov	r1, r8
 80137fa:	f7ff ff5b 	bl	80136b4 <exact_match_lookup>
 80137fe:	4605      	mov	r5, r0
 8013800:	e7ea      	b.n	80137d8 <rcl_get_secure_root+0xa0>
 8013802:	bf00      	nop
 8013804:	08020200 	.word	0x08020200
 8013808:	08020218 	.word	0x08020218

0801380c <rcl_get_security_options_from_environment>:
 801380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013810:	b082      	sub	sp, #8
 8013812:	2300      	movs	r3, #0
 8013814:	4606      	mov	r6, r0
 8013816:	460f      	mov	r7, r1
 8013818:	4821      	ldr	r0, [pc, #132]	@ (80138a0 <rcl_get_security_options_from_environment+0x94>)
 801381a:	a901      	add	r1, sp, #4
 801381c:	4690      	mov	r8, r2
 801381e:	9301      	str	r3, [sp, #4]
 8013820:	f002 f822 	bl	8015868 <rcutils_get_env>
 8013824:	b120      	cbz	r0, 8013830 <rcl_get_security_options_from_environment+0x24>
 8013826:	2501      	movs	r5, #1
 8013828:	4628      	mov	r0, r5
 801382a:	b002      	add	sp, #8
 801382c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013830:	4604      	mov	r4, r0
 8013832:	491c      	ldr	r1, [pc, #112]	@ (80138a4 <rcl_get_security_options_from_environment+0x98>)
 8013834:	9801      	ldr	r0, [sp, #4]
 8013836:	f7ec fd53 	bl	80002e0 <strcmp>
 801383a:	4605      	mov	r5, r0
 801383c:	b9f0      	cbnz	r0, 801387c <rcl_get_security_options_from_environment+0x70>
 801383e:	9001      	str	r0, [sp, #4]
 8013840:	f1b8 0f00 	cmp.w	r8, #0
 8013844:	d021      	beq.n	801388a <rcl_get_security_options_from_environment+0x7e>
 8013846:	a901      	add	r1, sp, #4
 8013848:	4817      	ldr	r0, [pc, #92]	@ (80138a8 <rcl_get_security_options_from_environment+0x9c>)
 801384a:	f002 f80d 	bl	8015868 <rcutils_get_env>
 801384e:	2800      	cmp	r0, #0
 8013850:	d1e9      	bne.n	8013826 <rcl_get_security_options_from_environment+0x1a>
 8013852:	4916      	ldr	r1, [pc, #88]	@ (80138ac <rcl_get_security_options_from_environment+0xa0>)
 8013854:	9801      	ldr	r0, [sp, #4]
 8013856:	f7ec fd43 	bl	80002e0 <strcmp>
 801385a:	4603      	mov	r3, r0
 801385c:	4639      	mov	r1, r7
 801385e:	4630      	mov	r0, r6
 8013860:	fab3 f383 	clz	r3, r3
 8013864:	095b      	lsrs	r3, r3, #5
 8013866:	f888 3000 	strb.w	r3, [r8]
 801386a:	f7ff ff65 	bl	8013738 <rcl_get_secure_root>
 801386e:	b170      	cbz	r0, 801388e <rcl_get_security_options_from_environment+0x82>
 8013870:	f8c8 0004 	str.w	r0, [r8, #4]
 8013874:	4628      	mov	r0, r5
 8013876:	b002      	add	sp, #8
 8013878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801387c:	4625      	mov	r5, r4
 801387e:	f888 4000 	strb.w	r4, [r8]
 8013882:	4628      	mov	r0, r5
 8013884:	b002      	add	sp, #8
 8013886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801388a:	250b      	movs	r5, #11
 801388c:	e7cc      	b.n	8013828 <rcl_get_security_options_from_environment+0x1c>
 801388e:	f898 5000 	ldrb.w	r5, [r8]
 8013892:	f1a5 0501 	sub.w	r5, r5, #1
 8013896:	fab5 f585 	clz	r5, r5
 801389a:	096d      	lsrs	r5, r5, #5
 801389c:	e7c4      	b.n	8013828 <rcl_get_security_options_from_environment+0x1c>
 801389e:	bf00      	nop
 80138a0:	080201b8 	.word	0x080201b8
 80138a4:	080201cc 	.word	0x080201cc
 80138a8:	080201d4 	.word	0x080201d4
 80138ac:	080201ec 	.word	0x080201ec

080138b0 <rcl_service_get_rmw_handle>:
 80138b0:	b118      	cbz	r0, 80138ba <rcl_service_get_rmw_handle+0xa>
 80138b2:	6800      	ldr	r0, [r0, #0]
 80138b4:	b108      	cbz	r0, 80138ba <rcl_service_get_rmw_handle+0xa>
 80138b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80138ba:	4770      	bx	lr

080138bc <rcl_take_request>:
 80138bc:	b570      	push	{r4, r5, r6, lr}
 80138be:	468e      	mov	lr, r1
 80138c0:	b08c      	sub	sp, #48	@ 0x30
 80138c2:	460c      	mov	r4, r1
 80138c4:	4616      	mov	r6, r2
 80138c6:	f10d 0c18 	add.w	ip, sp, #24
 80138ca:	4605      	mov	r5, r0
 80138cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80138d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80138d4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80138d8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80138dc:	b30d      	cbz	r5, 8013922 <rcl_take_request+0x66>
 80138de:	682b      	ldr	r3, [r5, #0]
 80138e0:	b1fb      	cbz	r3, 8013922 <rcl_take_request+0x66>
 80138e2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80138e6:	b1e0      	cbz	r0, 8013922 <rcl_take_request+0x66>
 80138e8:	b336      	cbz	r6, 8013938 <rcl_take_request+0x7c>
 80138ea:	2300      	movs	r3, #0
 80138ec:	4632      	mov	r2, r6
 80138ee:	a902      	add	r1, sp, #8
 80138f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80138f4:	f10d 0307 	add.w	r3, sp, #7
 80138f8:	f003 f988 	bl	8016c0c <rmw_take_request>
 80138fc:	4605      	mov	r5, r0
 80138fe:	b198      	cbz	r0, 8013928 <rcl_take_request+0x6c>
 8013900:	280a      	cmp	r0, #10
 8013902:	bf18      	it	ne
 8013904:	2501      	movne	r5, #1
 8013906:	f10d 0e18 	add.w	lr, sp, #24
 801390a:	46a4      	mov	ip, r4
 801390c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013910:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013914:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013918:	e88c 0003 	stmia.w	ip, {r0, r1}
 801391c:	4628      	mov	r0, r5
 801391e:	b00c      	add	sp, #48	@ 0x30
 8013920:	bd70      	pop	{r4, r5, r6, pc}
 8013922:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8013926:	e7ee      	b.n	8013906 <rcl_take_request+0x4a>
 8013928:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801392c:	f240 2359 	movw	r3, #601	@ 0x259
 8013930:	2a00      	cmp	r2, #0
 8013932:	bf08      	it	eq
 8013934:	461d      	moveq	r5, r3
 8013936:	e7e6      	b.n	8013906 <rcl_take_request+0x4a>
 8013938:	250b      	movs	r5, #11
 801393a:	e7e4      	b.n	8013906 <rcl_take_request+0x4a>

0801393c <rcl_send_response>:
 801393c:	b170      	cbz	r0, 801395c <rcl_send_response+0x20>
 801393e:	6800      	ldr	r0, [r0, #0]
 8013940:	b160      	cbz	r0, 801395c <rcl_send_response+0x20>
 8013942:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013946:	b148      	cbz	r0, 801395c <rcl_send_response+0x20>
 8013948:	b169      	cbz	r1, 8013966 <rcl_send_response+0x2a>
 801394a:	b510      	push	{r4, lr}
 801394c:	b14a      	cbz	r2, 8013962 <rcl_send_response+0x26>
 801394e:	f003 f9bb 	bl	8016cc8 <rmw_send_response>
 8013952:	b110      	cbz	r0, 801395a <rcl_send_response+0x1e>
 8013954:	2802      	cmp	r0, #2
 8013956:	bf18      	it	ne
 8013958:	2001      	movne	r0, #1
 801395a:	bd10      	pop	{r4, pc}
 801395c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013960:	4770      	bx	lr
 8013962:	200b      	movs	r0, #11
 8013964:	bd10      	pop	{r4, pc}
 8013966:	200b      	movs	r0, #11
 8013968:	4770      	bx	lr
 801396a:	bf00      	nop

0801396c <rcl_service_is_valid>:
 801396c:	b130      	cbz	r0, 801397c <rcl_service_is_valid+0x10>
 801396e:	6800      	ldr	r0, [r0, #0]
 8013970:	b120      	cbz	r0, 801397c <rcl_service_is_valid+0x10>
 8013972:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013976:	3800      	subs	r0, #0
 8013978:	bf18      	it	ne
 801397a:	2001      	movne	r0, #1
 801397c:	4770      	bx	lr
 801397e:	bf00      	nop

08013980 <rcl_get_zero_initialized_subscription>:
 8013980:	4b01      	ldr	r3, [pc, #4]	@ (8013988 <rcl_get_zero_initialized_subscription+0x8>)
 8013982:	6818      	ldr	r0, [r3, #0]
 8013984:	4770      	bx	lr
 8013986:	bf00      	nop
 8013988:	08020238 	.word	0x08020238

0801398c <rcl_subscription_init>:
 801398c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013990:	b088      	sub	sp, #32
 8013992:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8013994:	b1ff      	cbz	r7, 80139d6 <rcl_subscription_init+0x4a>
 8013996:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801399a:	4605      	mov	r5, r0
 801399c:	460e      	mov	r6, r1
 801399e:	4691      	mov	r9, r2
 80139a0:	4650      	mov	r0, sl
 80139a2:	4698      	mov	r8, r3
 80139a4:	f7fe fa12 	bl	8011dcc <rcutils_allocator_is_valid>
 80139a8:	f080 0401 	eor.w	r4, r0, #1
 80139ac:	b2e4      	uxtb	r4, r4
 80139ae:	b994      	cbnz	r4, 80139d6 <rcl_subscription_init+0x4a>
 80139b0:	b18d      	cbz	r5, 80139d6 <rcl_subscription_init+0x4a>
 80139b2:	4630      	mov	r0, r6
 80139b4:	f7ff fc60 	bl	8013278 <rcl_node_is_valid>
 80139b8:	2800      	cmp	r0, #0
 80139ba:	d055      	beq.n	8013a68 <rcl_subscription_init+0xdc>
 80139bc:	f1b9 0f00 	cmp.w	r9, #0
 80139c0:	d009      	beq.n	80139d6 <rcl_subscription_init+0x4a>
 80139c2:	f1b8 0f00 	cmp.w	r8, #0
 80139c6:	d006      	beq.n	80139d6 <rcl_subscription_init+0x4a>
 80139c8:	682b      	ldr	r3, [r5, #0]
 80139ca:	b14b      	cbz	r3, 80139e0 <rcl_subscription_init+0x54>
 80139cc:	2464      	movs	r4, #100	@ 0x64
 80139ce:	4620      	mov	r0, r4
 80139d0:	b008      	add	sp, #32
 80139d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139d6:	240b      	movs	r4, #11
 80139d8:	4620      	mov	r0, r4
 80139da:	b008      	add	sp, #32
 80139dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139e0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80139e4:	aa07      	add	r2, sp, #28
 80139e6:	9307      	str	r3, [sp, #28]
 80139e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80139ec:	9205      	str	r2, [sp, #20]
 80139ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80139f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80139f6:	4641      	mov	r1, r8
 80139f8:	4630      	mov	r0, r6
 80139fa:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80139fe:	f7ff fc93 	bl	8013328 <rcl_node_resolve_name>
 8013a02:	2800      	cmp	r0, #0
 8013a04:	d15f      	bne.n	8013ac6 <rcl_subscription_init+0x13a>
 8013a06:	21c8      	movs	r1, #200	@ 0xc8
 8013a08:	2001      	movs	r0, #1
 8013a0a:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 8013a0e:	4798      	blx	r3
 8013a10:	6028      	str	r0, [r5, #0]
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d05f      	beq.n	8013ad6 <rcl_subscription_init+0x14a>
 8013a16:	4630      	mov	r0, r6
 8013a18:	f7ff fc50 	bl	80132bc <rcl_node_get_rmw_handle>
 8013a1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013a20:	4649      	mov	r1, r9
 8013a22:	9a07      	ldr	r2, [sp, #28]
 8013a24:	9300      	str	r3, [sp, #0]
 8013a26:	463b      	mov	r3, r7
 8013a28:	682c      	ldr	r4, [r5, #0]
 8013a2a:	f003 fa35 	bl	8016e98 <rmw_create_subscription>
 8013a2e:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8013a32:	682c      	ldr	r4, [r5, #0]
 8013a34:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8013a38:	b348      	cbz	r0, 8013a8e <rcl_subscription_init+0x102>
 8013a3a:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 8013a3e:	f003 fb21 	bl	8017084 <rmw_subscription_get_actual_qos>
 8013a42:	4604      	mov	r4, r0
 8013a44:	b9a8      	cbnz	r0, 8013a72 <rcl_subscription_init+0xe6>
 8013a46:	6828      	ldr	r0, [r5, #0]
 8013a48:	2270      	movs	r2, #112	@ 0x70
 8013a4a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8013a4e:	4639      	mov	r1, r7
 8013a50:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8013a54:	f00a f905 	bl	801dc62 <memcpy>
 8013a58:	9807      	ldr	r0, [sp, #28]
 8013a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a5c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013a5e:	4798      	blx	r3
 8013a60:	4620      	mov	r0, r4
 8013a62:	b008      	add	sp, #32
 8013a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a68:	24c8      	movs	r4, #200	@ 0xc8
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	b008      	add	sp, #32
 8013a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a72:	682c      	ldr	r4, [r5, #0]
 8013a74:	b36c      	cbz	r4, 8013ad2 <rcl_subscription_init+0x146>
 8013a76:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8013a7a:	b14b      	cbz	r3, 8013a90 <rcl_subscription_init+0x104>
 8013a7c:	4630      	mov	r0, r6
 8013a7e:	f7ff fc1d 	bl	80132bc <rcl_node_get_rmw_handle>
 8013a82:	682b      	ldr	r3, [r5, #0]
 8013a84:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8013a88:	f003 fb10 	bl	80170ac <rmw_destroy_subscription>
 8013a8c:	682c      	ldr	r4, [r5, #0]
 8013a8e:	b194      	cbz	r4, 8013ab6 <rcl_subscription_init+0x12a>
 8013a90:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 8013a94:	4630      	mov	r0, r6
 8013a96:	f7fe f999 	bl	8011dcc <rcutils_allocator_is_valid>
 8013a9a:	b158      	cbz	r0, 8013ab4 <rcl_subscription_init+0x128>
 8013a9c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8013a9e:	b148      	cbz	r0, 8013ab4 <rcl_subscription_init+0x128>
 8013aa0:	4631      	mov	r1, r6
 8013aa2:	f002 f9dd 	bl	8015e60 <rmw_subscription_content_filter_options_fini>
 8013aa6:	4606      	mov	r6, r0
 8013aa8:	b9c8      	cbnz	r0, 8013ade <rcl_subscription_init+0x152>
 8013aaa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8013aac:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8013aae:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8013ab0:	4798      	blx	r3
 8013ab2:	66e6      	str	r6, [r4, #108]	@ 0x6c
 8013ab4:	682c      	ldr	r4, [r5, #0]
 8013ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ab8:	4620      	mov	r0, r4
 8013aba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013abc:	2401      	movs	r4, #1
 8013abe:	4798      	blx	r3
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	602b      	str	r3, [r5, #0]
 8013ac4:	e7c8      	b.n	8013a58 <rcl_subscription_init+0xcc>
 8013ac6:	2867      	cmp	r0, #103	@ 0x67
 8013ac8:	d007      	beq.n	8013ada <rcl_subscription_init+0x14e>
 8013aca:	2869      	cmp	r0, #105	@ 0x69
 8013acc:	d005      	beq.n	8013ada <rcl_subscription_init+0x14e>
 8013ace:	280a      	cmp	r0, #10
 8013ad0:	d001      	beq.n	8013ad6 <rcl_subscription_init+0x14a>
 8013ad2:	2401      	movs	r4, #1
 8013ad4:	e7c0      	b.n	8013a58 <rcl_subscription_init+0xcc>
 8013ad6:	240a      	movs	r4, #10
 8013ad8:	e7be      	b.n	8013a58 <rcl_subscription_init+0xcc>
 8013ada:	2467      	movs	r4, #103	@ 0x67
 8013adc:	e7bc      	b.n	8013a58 <rcl_subscription_init+0xcc>
 8013ade:	f007 ff75 	bl	801b9cc <rcl_convert_rmw_ret_to_rcl_ret>
 8013ae2:	682c      	ldr	r4, [r5, #0]
 8013ae4:	e7e7      	b.n	8013ab6 <rcl_subscription_init+0x12a>
 8013ae6:	bf00      	nop

08013ae8 <rcl_subscription_get_default_options>:
 8013ae8:	b570      	push	{r4, r5, r6, lr}
 8013aea:	4d14      	ldr	r5, [pc, #80]	@ (8013b3c <rcl_subscription_get_default_options+0x54>)
 8013aec:	b08a      	sub	sp, #40	@ 0x28
 8013aee:	4604      	mov	r4, r0
 8013af0:	2250      	movs	r2, #80	@ 0x50
 8013af2:	4913      	ldr	r1, [pc, #76]	@ (8013b40 <rcl_subscription_get_default_options+0x58>)
 8013af4:	4628      	mov	r0, r5
 8013af6:	f00a f8b4 	bl	801dc62 <memcpy>
 8013afa:	a804      	add	r0, sp, #16
 8013afc:	f7fe f958 	bl	8011db0 <rcutils_get_default_allocator>
 8013b00:	f10d 0c10 	add.w	ip, sp, #16
 8013b04:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8013b08:	466e      	mov	r6, sp
 8013b0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b12:	f8dc 3000 	ldr.w	r3, [ip]
 8013b16:	4630      	mov	r0, r6
 8013b18:	f8ce 3000 	str.w	r3, [lr]
 8013b1c:	f002 f9ba 	bl	8015e94 <rmw_get_default_subscription_options>
 8013b20:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8013b24:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013b28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013b2c:	2270      	movs	r2, #112	@ 0x70
 8013b2e:	4629      	mov	r1, r5
 8013b30:	4620      	mov	r0, r4
 8013b32:	f00a f896 	bl	801dc62 <memcpy>
 8013b36:	4620      	mov	r0, r4
 8013b38:	b00a      	add	sp, #40	@ 0x28
 8013b3a:	bd70      	pop	{r4, r5, r6, pc}
 8013b3c:	24064c30 	.word	0x24064c30
 8013b40:	08020240 	.word	0x08020240

08013b44 <rcl_take>:
 8013b44:	2800      	cmp	r0, #0
 8013b46:	d049      	beq.n	8013bdc <rcl_take+0x98>
 8013b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b4c:	4615      	mov	r5, r2
 8013b4e:	6802      	ldr	r2, [r0, #0]
 8013b50:	b0a4      	sub	sp, #144	@ 0x90
 8013b52:	4604      	mov	r4, r0
 8013b54:	2a00      	cmp	r2, #0
 8013b56:	d039      	beq.n	8013bcc <rcl_take+0x88>
 8013b58:	461f      	mov	r7, r3
 8013b5a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8013b5e:	b3ab      	cbz	r3, 8013bcc <rcl_take+0x88>
 8013b60:	460e      	mov	r6, r1
 8013b62:	2900      	cmp	r1, #0
 8013b64:	d038      	beq.n	8013bd8 <rcl_take+0x94>
 8013b66:	2d00      	cmp	r5, #0
 8013b68:	d03c      	beq.n	8013be4 <rcl_take+0xa0>
 8013b6a:	a802      	add	r0, sp, #8
 8013b6c:	f04f 0800 	mov.w	r8, #0
 8013b70:	f002 f996 	bl	8015ea0 <rmw_get_zero_initialized_message_info>
 8013b74:	f10d 0c08 	add.w	ip, sp, #8
 8013b78:	46ae      	mov	lr, r5
 8013b7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b92:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013b96:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013b9a:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8013b9e:	462b      	mov	r3, r5
 8013ba0:	6820      	ldr	r0, [r4, #0]
 8013ba2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8013ba6:	4631      	mov	r1, r6
 8013ba8:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8013bac:	9700      	str	r7, [sp, #0]
 8013bae:	f003 fadf 	bl	8017170 <rmw_take_with_info>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	b9c0      	cbnz	r0, 8013be8 <rcl_take+0xa4>
 8013bb6:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8013bba:	f240 1291 	movw	r2, #401	@ 0x191
 8013bbe:	2900      	cmp	r1, #0
 8013bc0:	bf08      	it	eq
 8013bc2:	4613      	moveq	r3, r2
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	b024      	add	sp, #144	@ 0x90
 8013bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bcc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	b024      	add	sp, #144	@ 0x90
 8013bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd8:	230b      	movs	r3, #11
 8013bda:	e7f3      	b.n	8013bc4 <rcl_take+0x80>
 8013bdc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013be0:	4618      	mov	r0, r3
 8013be2:	4770      	bx	lr
 8013be4:	ad14      	add	r5, sp, #80	@ 0x50
 8013be6:	e7c0      	b.n	8013b6a <rcl_take+0x26>
 8013be8:	f007 fef0 	bl	801b9cc <rcl_convert_rmw_ret_to_rcl_ret>
 8013bec:	4603      	mov	r3, r0
 8013bee:	e7e9      	b.n	8013bc4 <rcl_take+0x80>

08013bf0 <rcl_subscription_get_rmw_handle>:
 8013bf0:	b118      	cbz	r0, 8013bfa <rcl_subscription_get_rmw_handle+0xa>
 8013bf2:	6800      	ldr	r0, [r0, #0]
 8013bf4:	b108      	cbz	r0, 8013bfa <rcl_subscription_get_rmw_handle+0xa>
 8013bf6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8013bfa:	4770      	bx	lr

08013bfc <rcl_subscription_is_valid>:
 8013bfc:	b130      	cbz	r0, 8013c0c <rcl_subscription_is_valid+0x10>
 8013bfe:	6800      	ldr	r0, [r0, #0]
 8013c00:	b120      	cbz	r0, 8013c0c <rcl_subscription_is_valid+0x10>
 8013c02:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8013c06:	3800      	subs	r0, #0
 8013c08:	bf18      	it	ne
 8013c0a:	2001      	movne	r0, #1
 8013c0c:	4770      	bx	lr
 8013c0e:	bf00      	nop

08013c10 <rcl_get_system_time>:
 8013c10:	4608      	mov	r0, r1
 8013c12:	f7fe b91d 	b.w	8011e50 <rcutils_system_time_now>
 8013c16:	bf00      	nop

08013c18 <rcl_get_steady_time>:
 8013c18:	4608      	mov	r0, r1
 8013c1a:	f7fe b93f 	b.w	8011e9c <rcutils_steady_time_now>
 8013c1e:	bf00      	nop

08013c20 <rcl_get_ros_time>:
 8013c20:	7a03      	ldrb	r3, [r0, #8]
 8013c22:	b510      	push	{r4, lr}
 8013c24:	460c      	mov	r4, r1
 8013c26:	b143      	cbz	r3, 8013c3a <rcl_get_ros_time+0x1a>
 8013c28:	2105      	movs	r1, #5
 8013c2a:	f001 fd79 	bl	8015720 <__atomic_load_8>
 8013c2e:	4602      	mov	r2, r0
 8013c30:	460b      	mov	r3, r1
 8013c32:	2000      	movs	r0, #0
 8013c34:	e9c4 2300 	strd	r2, r3, [r4]
 8013c38:	bd10      	pop	{r4, pc}
 8013c3a:	4608      	mov	r0, r1
 8013c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c40:	f7fe b906 	b.w	8011e50 <rcutils_system_time_now>

08013c44 <rcl_clock_init>:
 8013c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c46:	4605      	mov	r5, r0
 8013c48:	4610      	mov	r0, r2
 8013c4a:	4614      	mov	r4, r2
 8013c4c:	460e      	mov	r6, r1
 8013c4e:	f7fe f8bd 	bl	8011dcc <rcutils_allocator_is_valid>
 8013c52:	b128      	cbz	r0, 8013c60 <rcl_clock_init+0x1c>
 8013c54:	2d03      	cmp	r5, #3
 8013c56:	d803      	bhi.n	8013c60 <rcl_clock_init+0x1c>
 8013c58:	e8df f005 	tbb	[pc, r5]
 8013c5c:	0659301f 	.word	0x0659301f
 8013c60:	f04f 0c0b 	mov.w	ip, #11
 8013c64:	4660      	mov	r0, ip
 8013c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c68:	2c00      	cmp	r4, #0
 8013c6a:	d0f9      	beq.n	8013c60 <rcl_clock_init+0x1c>
 8013c6c:	fab6 f386 	clz	r3, r6
 8013c70:	095b      	lsrs	r3, r3, #5
 8013c72:	2e00      	cmp	r6, #0
 8013c74:	d0f4      	beq.n	8013c60 <rcl_clock_init+0x1c>
 8013c76:	6133      	str	r3, [r6, #16]
 8013c78:	469c      	mov	ip, r3
 8013c7a:	f106 0514 	add.w	r5, r6, #20
 8013c7e:	4f32      	ldr	r7, [pc, #200]	@ (8013d48 <rcl_clock_init+0x104>)
 8013c80:	f04f 0e03 	mov.w	lr, #3
 8013c84:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013c8c:	6823      	ldr	r3, [r4, #0]
 8013c8e:	4660      	mov	r0, ip
 8013c90:	602b      	str	r3, [r5, #0]
 8013c92:	60f7      	str	r7, [r6, #12]
 8013c94:	f886 e000 	strb.w	lr, [r6]
 8013c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c9a:	2e00      	cmp	r6, #0
 8013c9c:	d0e0      	beq.n	8013c60 <rcl_clock_init+0x1c>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	f106 0514 	add.w	r5, r6, #20
 8013ca4:	7033      	strb	r3, [r6, #0]
 8013ca6:	469c      	mov	ip, r3
 8013ca8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013cac:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013cb4:	6823      	ldr	r3, [r4, #0]
 8013cb6:	4660      	mov	r0, ip
 8013cb8:	602b      	str	r3, [r5, #0]
 8013cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cbc:	2c00      	cmp	r4, #0
 8013cbe:	d0cf      	beq.n	8013c60 <rcl_clock_init+0x1c>
 8013cc0:	fab6 f586 	clz	r5, r6
 8013cc4:	096d      	lsrs	r5, r5, #5
 8013cc6:	2e00      	cmp	r6, #0
 8013cc8:	d0ca      	beq.n	8013c60 <rcl_clock_init+0x1c>
 8013cca:	46a6      	mov	lr, r4
 8013ccc:	7035      	strb	r5, [r6, #0]
 8013cce:	f106 0c14 	add.w	ip, r6, #20
 8013cd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013cd6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013cda:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8013cde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ce2:	f8de 3000 	ldr.w	r3, [lr]
 8013ce6:	2010      	movs	r0, #16
 8013ce8:	f8cc 3000 	str.w	r3, [ip]
 8013cec:	6823      	ldr	r3, [r4, #0]
 8013cee:	6921      	ldr	r1, [r4, #16]
 8013cf0:	4798      	blx	r3
 8013cf2:	6130      	str	r0, [r6, #16]
 8013cf4:	b320      	cbz	r0, 8013d40 <rcl_clock_init+0xfc>
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	46ac      	mov	ip, r5
 8013cfc:	7205      	strb	r5, [r0, #8]
 8013cfe:	e9c0 2300 	strd	r2, r3, [r0]
 8013d02:	4a12      	ldr	r2, [pc, #72]	@ (8013d4c <rcl_clock_init+0x108>)
 8013d04:	2301      	movs	r3, #1
 8013d06:	4660      	mov	r0, ip
 8013d08:	60f2      	str	r2, [r6, #12]
 8013d0a:	7033      	strb	r3, [r6, #0]
 8013d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d0e:	2c00      	cmp	r4, #0
 8013d10:	d0a6      	beq.n	8013c60 <rcl_clock_init+0x1c>
 8013d12:	fab6 f386 	clz	r3, r6
 8013d16:	095b      	lsrs	r3, r3, #5
 8013d18:	2e00      	cmp	r6, #0
 8013d1a:	d0a1      	beq.n	8013c60 <rcl_clock_init+0x1c>
 8013d1c:	6133      	str	r3, [r6, #16]
 8013d1e:	469c      	mov	ip, r3
 8013d20:	f106 0514 	add.w	r5, r6, #20
 8013d24:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8013d50 <rcl_clock_init+0x10c>
 8013d28:	2702      	movs	r7, #2
 8013d2a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013d32:	6823      	ldr	r3, [r4, #0]
 8013d34:	4660      	mov	r0, ip
 8013d36:	602b      	str	r3, [r5, #0]
 8013d38:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013d3c:	7037      	strb	r7, [r6, #0]
 8013d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d40:	f04f 0c0a 	mov.w	ip, #10
 8013d44:	e78e      	b.n	8013c64 <rcl_clock_init+0x20>
 8013d46:	bf00      	nop
 8013d48:	08013c19 	.word	0x08013c19
 8013d4c:	08013c21 	.word	0x08013c21
 8013d50:	08013c11 	.word	0x08013c11

08013d54 <rcl_clock_get_now>:
 8013d54:	b140      	cbz	r0, 8013d68 <rcl_clock_get_now+0x14>
 8013d56:	b139      	cbz	r1, 8013d68 <rcl_clock_get_now+0x14>
 8013d58:	7803      	ldrb	r3, [r0, #0]
 8013d5a:	b11b      	cbz	r3, 8013d64 <rcl_clock_get_now+0x10>
 8013d5c:	68c3      	ldr	r3, [r0, #12]
 8013d5e:	b10b      	cbz	r3, 8013d64 <rcl_clock_get_now+0x10>
 8013d60:	6900      	ldr	r0, [r0, #16]
 8013d62:	4718      	bx	r3
 8013d64:	2001      	movs	r0, #1
 8013d66:	4770      	bx	lr
 8013d68:	200b      	movs	r0, #11
 8013d6a:	4770      	bx	lr

08013d6c <rcl_timer_call>:
 8013d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d70:	b087      	sub	sp, #28
 8013d72:	2800      	cmp	r0, #0
 8013d74:	d06c      	beq.n	8013e50 <rcl_timer_call+0xe4>
 8013d76:	6803      	ldr	r3, [r0, #0]
 8013d78:	4604      	mov	r4, r0
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d062      	beq.n	8013e44 <rcl_timer_call+0xd8>
 8013d7e:	f3bf 8f5b 	dmb	ish
 8013d82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013d86:	f3bf 8f5b 	dmb	ish
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d14f      	bne.n	8013e2e <rcl_timer_call+0xc2>
 8013d8e:	6803      	ldr	r3, [r0, #0]
 8013d90:	a904      	add	r1, sp, #16
 8013d92:	6818      	ldr	r0, [r3, #0]
 8013d94:	f7ff ffde 	bl	8013d54 <rcl_clock_get_now>
 8013d98:	4605      	mov	r5, r0
 8013d9a:	2800      	cmp	r0, #0
 8013d9c:	d149      	bne.n	8013e32 <rcl_timer_call+0xc6>
 8013d9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	db49      	blt.n	8013e3a <rcl_timer_call+0xce>
 8013da6:	2605      	movs	r6, #5
 8013da8:	6820      	ldr	r0, [r4, #0]
 8013daa:	9600      	str	r6, [sp, #0]
 8013dac:	3020      	adds	r0, #32
 8013dae:	f001 fd23 	bl	80157f8 <__atomic_exchange_8>
 8013db2:	6823      	ldr	r3, [r4, #0]
 8013db4:	4680      	mov	r8, r0
 8013db6:	f3bf 8f5b 	dmb	ish
 8013dba:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8013dbe:	f3bf 8f5b 	dmb	ish
 8013dc2:	6820      	ldr	r0, [r4, #0]
 8013dc4:	4689      	mov	r9, r1
 8013dc6:	4631      	mov	r1, r6
 8013dc8:	3028      	adds	r0, #40	@ 0x28
 8013dca:	f001 fca9 	bl	8015720 <__atomic_load_8>
 8013dce:	460f      	mov	r7, r1
 8013dd0:	4631      	mov	r1, r6
 8013dd2:	4606      	mov	r6, r0
 8013dd4:	6820      	ldr	r0, [r4, #0]
 8013dd6:	3018      	adds	r0, #24
 8013dd8:	f001 fca2 	bl	8015720 <__atomic_load_8>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	9804      	ldr	r0, [sp, #16]
 8013de0:	460b      	mov	r3, r1
 8013de2:	18b6      	adds	r6, r6, r2
 8013de4:	f8dd c014 	ldr.w	ip, [sp, #20]
 8013de8:	4692      	mov	sl, r2
 8013dea:	eb47 0701 	adc.w	r7, r7, r1
 8013dee:	4286      	cmp	r6, r0
 8013df0:	eb77 010c 	sbcs.w	r1, r7, ip
 8013df4:	da04      	bge.n	8013e00 <rcl_timer_call+0x94>
 8013df6:	ea53 0102 	orrs.w	r1, r3, r2
 8013dfa:	d12e      	bne.n	8013e5a <rcl_timer_call+0xee>
 8013dfc:	4606      	mov	r6, r0
 8013dfe:	4667      	mov	r7, ip
 8013e00:	6820      	ldr	r0, [r4, #0]
 8013e02:	2105      	movs	r1, #5
 8013e04:	4632      	mov	r2, r6
 8013e06:	463b      	mov	r3, r7
 8013e08:	3028      	adds	r0, #40	@ 0x28
 8013e0a:	9100      	str	r1, [sp, #0]
 8013e0c:	f001 fcbe 	bl	801578c <__atomic_store_8>
 8013e10:	f1bb 0f00 	cmp.w	fp, #0
 8013e14:	d00d      	beq.n	8013e32 <rcl_timer_call+0xc6>
 8013e16:	9a04      	ldr	r2, [sp, #16]
 8013e18:	4620      	mov	r0, r4
 8013e1a:	9b05      	ldr	r3, [sp, #20]
 8013e1c:	ebb2 0208 	subs.w	r2, r2, r8
 8013e20:	eb63 0309 	sbc.w	r3, r3, r9
 8013e24:	47d8      	blx	fp
 8013e26:	4628      	mov	r0, r5
 8013e28:	b007      	add	sp, #28
 8013e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e2e:	f240 3521 	movw	r5, #801	@ 0x321
 8013e32:	4628      	mov	r0, r5
 8013e34:	b007      	add	sp, #28
 8013e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e3a:	2501      	movs	r5, #1
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	b007      	add	sp, #28
 8013e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e44:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013e48:	4628      	mov	r0, r5
 8013e4a:	b007      	add	sp, #28
 8013e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e50:	250b      	movs	r5, #11
 8013e52:	4628      	mov	r0, r5
 8013e54:	b007      	add	sp, #28
 8013e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e5a:	1b80      	subs	r0, r0, r6
 8013e5c:	eb6c 0107 	sbc.w	r1, ip, r7
 8013e60:	3801      	subs	r0, #1
 8013e62:	f161 0100 	sbc.w	r1, r1, #0
 8013e66:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013e6a:	f7ec faa1 	bl	80003b0 <__aeabi_ldivmod>
 8013e6e:	9b02      	ldr	r3, [sp, #8]
 8013e70:	3001      	adds	r0, #1
 8013e72:	f141 0100 	adc.w	r1, r1, #0
 8013e76:	fb00 f303 	mul.w	r3, r0, r3
 8013e7a:	fb01 330a 	mla	r3, r1, sl, r3
 8013e7e:	fba0 0a0a 	umull	r0, sl, r0, sl
 8013e82:	1986      	adds	r6, r0, r6
 8013e84:	4453      	add	r3, sl
 8013e86:	eb43 0707 	adc.w	r7, r3, r7
 8013e8a:	e7b9      	b.n	8013e00 <rcl_timer_call+0x94>

08013e8c <rcl_timer_is_ready>:
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	b082      	sub	sp, #8
 8013e90:	b380      	cbz	r0, 8013ef4 <rcl_timer_is_ready+0x68>
 8013e92:	6803      	ldr	r3, [r0, #0]
 8013e94:	4604      	mov	r4, r0
 8013e96:	b38b      	cbz	r3, 8013efc <rcl_timer_is_ready+0x70>
 8013e98:	460d      	mov	r5, r1
 8013e9a:	b359      	cbz	r1, 8013ef4 <rcl_timer_is_ready+0x68>
 8013e9c:	f3bf 8f5b 	dmb	ish
 8013ea0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013ea4:	f3bf 8f5b 	dmb	ish
 8013ea8:	b953      	cbnz	r3, 8013ec0 <rcl_timer_is_ready+0x34>
 8013eaa:	6803      	ldr	r3, [r0, #0]
 8013eac:	4669      	mov	r1, sp
 8013eae:	6818      	ldr	r0, [r3, #0]
 8013eb0:	f7ff ff50 	bl	8013d54 <rcl_clock_get_now>
 8013eb4:	4606      	mov	r6, r0
 8013eb6:	b148      	cbz	r0, 8013ecc <rcl_timer_is_ready+0x40>
 8013eb8:	f240 3321 	movw	r3, #801	@ 0x321
 8013ebc:	4298      	cmp	r0, r3
 8013ebe:	d102      	bne.n	8013ec6 <rcl_timer_is_ready+0x3a>
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	461e      	mov	r6, r3
 8013ec4:	702b      	strb	r3, [r5, #0]
 8013ec6:	4630      	mov	r0, r6
 8013ec8:	b002      	add	sp, #8
 8013eca:	bd70      	pop	{r4, r5, r6, pc}
 8013ecc:	6820      	ldr	r0, [r4, #0]
 8013ece:	2105      	movs	r1, #5
 8013ed0:	3028      	adds	r0, #40	@ 0x28
 8013ed2:	f001 fc25 	bl	8015720 <__atomic_load_8>
 8013ed6:	9b00      	ldr	r3, [sp, #0]
 8013ed8:	1ac0      	subs	r0, r0, r3
 8013eda:	9b01      	ldr	r3, [sp, #4]
 8013edc:	eb61 0103 	sbc.w	r1, r1, r3
 8013ee0:	2801      	cmp	r0, #1
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	f171 0300 	sbcs.w	r3, r1, #0
 8013ee8:	bfb4      	ite	lt
 8013eea:	2301      	movlt	r3, #1
 8013eec:	2300      	movge	r3, #0
 8013eee:	702b      	strb	r3, [r5, #0]
 8013ef0:	b002      	add	sp, #8
 8013ef2:	bd70      	pop	{r4, r5, r6, pc}
 8013ef4:	260b      	movs	r6, #11
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	b002      	add	sp, #8
 8013efa:	bd70      	pop	{r4, r5, r6, pc}
 8013efc:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013f00:	e7e1      	b.n	8013ec6 <rcl_timer_is_ready+0x3a>
 8013f02:	bf00      	nop

08013f04 <rcl_timer_get_time_until_next_call>:
 8013f04:	b570      	push	{r4, r5, r6, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	b330      	cbz	r0, 8013f58 <rcl_timer_get_time_until_next_call+0x54>
 8013f0a:	6803      	ldr	r3, [r0, #0]
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	b33b      	cbz	r3, 8013f60 <rcl_timer_get_time_until_next_call+0x5c>
 8013f10:	460d      	mov	r5, r1
 8013f12:	b309      	cbz	r1, 8013f58 <rcl_timer_get_time_until_next_call+0x54>
 8013f14:	f3bf 8f5b 	dmb	ish
 8013f18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013f1c:	f3bf 8f5b 	dmb	ish
 8013f20:	b9ab      	cbnz	r3, 8013f4e <rcl_timer_get_time_until_next_call+0x4a>
 8013f22:	6803      	ldr	r3, [r0, #0]
 8013f24:	4669      	mov	r1, sp
 8013f26:	6818      	ldr	r0, [r3, #0]
 8013f28:	f7ff ff14 	bl	8013d54 <rcl_clock_get_now>
 8013f2c:	4606      	mov	r6, r0
 8013f2e:	b958      	cbnz	r0, 8013f48 <rcl_timer_get_time_until_next_call+0x44>
 8013f30:	6820      	ldr	r0, [r4, #0]
 8013f32:	2105      	movs	r1, #5
 8013f34:	3028      	adds	r0, #40	@ 0x28
 8013f36:	f001 fbf3 	bl	8015720 <__atomic_load_8>
 8013f3a:	9b00      	ldr	r3, [sp, #0]
 8013f3c:	1ac0      	subs	r0, r0, r3
 8013f3e:	9b01      	ldr	r3, [sp, #4]
 8013f40:	eb61 0103 	sbc.w	r1, r1, r3
 8013f44:	6028      	str	r0, [r5, #0]
 8013f46:	6069      	str	r1, [r5, #4]
 8013f48:	4630      	mov	r0, r6
 8013f4a:	b002      	add	sp, #8
 8013f4c:	bd70      	pop	{r4, r5, r6, pc}
 8013f4e:	f240 3621 	movw	r6, #801	@ 0x321
 8013f52:	4630      	mov	r0, r6
 8013f54:	b002      	add	sp, #8
 8013f56:	bd70      	pop	{r4, r5, r6, pc}
 8013f58:	260b      	movs	r6, #11
 8013f5a:	4630      	mov	r0, r6
 8013f5c:	b002      	add	sp, #8
 8013f5e:	bd70      	pop	{r4, r5, r6, pc}
 8013f60:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013f64:	e7f0      	b.n	8013f48 <rcl_timer_get_time_until_next_call+0x44>
 8013f66:	bf00      	nop

08013f68 <rcl_timer_get_guard_condition>:
 8013f68:	b130      	cbz	r0, 8013f78 <rcl_timer_get_guard_condition+0x10>
 8013f6a:	6800      	ldr	r0, [r0, #0]
 8013f6c:	b120      	cbz	r0, 8013f78 <rcl_timer_get_guard_condition+0x10>
 8013f6e:	68c3      	ldr	r3, [r0, #12]
 8013f70:	b10b      	cbz	r3, 8013f76 <rcl_timer_get_guard_condition+0xe>
 8013f72:	3008      	adds	r0, #8
 8013f74:	4770      	bx	lr
 8013f76:	4618      	mov	r0, r3
 8013f78:	4770      	bx	lr
 8013f7a:	bf00      	nop

08013f7c <rcl_validate_enclave_name_with_size>:
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	d049      	beq.n	8014014 <rcl_validate_enclave_name_with_size+0x98>
 8013f80:	b570      	push	{r4, r5, r6, lr}
 8013f82:	4615      	mov	r5, r2
 8013f84:	b0c2      	sub	sp, #264	@ 0x108
 8013f86:	b19a      	cbz	r2, 8013fb0 <rcl_validate_enclave_name_with_size+0x34>
 8013f88:	461e      	mov	r6, r3
 8013f8a:	466a      	mov	r2, sp
 8013f8c:	ab01      	add	r3, sp, #4
 8013f8e:	460c      	mov	r4, r1
 8013f90:	f002 f80a 	bl	8015fa8 <rmw_validate_namespace_with_size>
 8013f94:	4684      	mov	ip, r0
 8013f96:	b9b8      	cbnz	r0, 8013fc8 <rcl_validate_enclave_name_with_size+0x4c>
 8013f98:	9900      	ldr	r1, [sp, #0]
 8013f9a:	b171      	cbz	r1, 8013fba <rcl_validate_enclave_name_with_size+0x3e>
 8013f9c:	2907      	cmp	r1, #7
 8013f9e:	d019      	beq.n	8013fd4 <rcl_validate_enclave_name_with_size+0x58>
 8013fa0:	1e4b      	subs	r3, r1, #1
 8013fa2:	2b05      	cmp	r3, #5
 8013fa4:	d83a      	bhi.n	801401c <rcl_validate_enclave_name_with_size+0xa0>
 8013fa6:	e8df f003 	tbb	[pc, r3]
 8013faa:	2926      	.short	0x2926
 8013fac:	1d322f2c 	.word	0x1d322f2c
 8013fb0:	f04f 0c0b 	mov.w	ip, #11
 8013fb4:	4660      	mov	r0, ip
 8013fb6:	b042      	add	sp, #264	@ 0x108
 8013fb8:	bd70      	pop	{r4, r5, r6, pc}
 8013fba:	2907      	cmp	r1, #7
 8013fbc:	d00a      	beq.n	8013fd4 <rcl_validate_enclave_name_with_size+0x58>
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	4660      	mov	r0, ip
 8013fc2:	602b      	str	r3, [r5, #0]
 8013fc4:	b042      	add	sp, #264	@ 0x108
 8013fc6:	bd70      	pop	{r4, r5, r6, pc}
 8013fc8:	f007 fd00 	bl	801b9cc <rcl_convert_rmw_ret_to_rcl_ret>
 8013fcc:	4684      	mov	ip, r0
 8013fce:	4660      	mov	r0, ip
 8013fd0:	b042      	add	sp, #264	@ 0x108
 8013fd2:	bd70      	pop	{r4, r5, r6, pc}
 8013fd4:	2cff      	cmp	r4, #255	@ 0xff
 8013fd6:	d9f2      	bls.n	8013fbe <rcl_validate_enclave_name_with_size+0x42>
 8013fd8:	6029      	str	r1, [r5, #0]
 8013fda:	2e00      	cmp	r6, #0
 8013fdc:	d0ea      	beq.n	8013fb4 <rcl_validate_enclave_name_with_size+0x38>
 8013fde:	23fe      	movs	r3, #254	@ 0xfe
 8013fe0:	6033      	str	r3, [r6, #0]
 8013fe2:	e7e7      	b.n	8013fb4 <rcl_validate_enclave_name_with_size+0x38>
 8013fe4:	2306      	movs	r3, #6
 8013fe6:	602b      	str	r3, [r5, #0]
 8013fe8:	2e00      	cmp	r6, #0
 8013fea:	d0e3      	beq.n	8013fb4 <rcl_validate_enclave_name_with_size+0x38>
 8013fec:	9b01      	ldr	r3, [sp, #4]
 8013fee:	4660      	mov	r0, ip
 8013ff0:	6033      	str	r3, [r6, #0]
 8013ff2:	b042      	add	sp, #264	@ 0x108
 8013ff4:	bd70      	pop	{r4, r5, r6, pc}
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	602b      	str	r3, [r5, #0]
 8013ffa:	e7f5      	b.n	8013fe8 <rcl_validate_enclave_name_with_size+0x6c>
 8013ffc:	2302      	movs	r3, #2
 8013ffe:	602b      	str	r3, [r5, #0]
 8014000:	e7f2      	b.n	8013fe8 <rcl_validate_enclave_name_with_size+0x6c>
 8014002:	2303      	movs	r3, #3
 8014004:	602b      	str	r3, [r5, #0]
 8014006:	e7ef      	b.n	8013fe8 <rcl_validate_enclave_name_with_size+0x6c>
 8014008:	2304      	movs	r3, #4
 801400a:	602b      	str	r3, [r5, #0]
 801400c:	e7ec      	b.n	8013fe8 <rcl_validate_enclave_name_with_size+0x6c>
 801400e:	2305      	movs	r3, #5
 8014010:	602b      	str	r3, [r5, #0]
 8014012:	e7e9      	b.n	8013fe8 <rcl_validate_enclave_name_with_size+0x6c>
 8014014:	f04f 0c0b 	mov.w	ip, #11
 8014018:	4660      	mov	r0, ip
 801401a:	4770      	bx	lr
 801401c:	460b      	mov	r3, r1
 801401e:	4a04      	ldr	r2, [pc, #16]	@ (8014030 <rcl_validate_enclave_name_with_size+0xb4>)
 8014020:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014024:	a802      	add	r0, sp, #8
 8014026:	f001 fd33 	bl	8015a90 <rcutils_snprintf>
 801402a:	f04f 0c01 	mov.w	ip, #1
 801402e:	e7c1      	b.n	8013fb4 <rcl_validate_enclave_name_with_size+0x38>
 8014030:	08020290 	.word	0x08020290

08014034 <rcl_validate_enclave_name>:
 8014034:	b168      	cbz	r0, 8014052 <rcl_validate_enclave_name+0x1e>
 8014036:	b570      	push	{r4, r5, r6, lr}
 8014038:	460d      	mov	r5, r1
 801403a:	4616      	mov	r6, r2
 801403c:	4604      	mov	r4, r0
 801403e:	f7ec f959 	bl	80002f4 <strlen>
 8014042:	4633      	mov	r3, r6
 8014044:	4601      	mov	r1, r0
 8014046:	462a      	mov	r2, r5
 8014048:	4620      	mov	r0, r4
 801404a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801404e:	f7ff bf95 	b.w	8013f7c <rcl_validate_enclave_name_with_size>
 8014052:	200b      	movs	r0, #11
 8014054:	4770      	bx	lr
 8014056:	bf00      	nop

08014058 <rcl_get_zero_initialized_wait_set>:
 8014058:	b510      	push	{r4, lr}
 801405a:	4c08      	ldr	r4, [pc, #32]	@ (801407c <rcl_get_zero_initialized_wait_set+0x24>)
 801405c:	4686      	mov	lr, r0
 801405e:	4684      	mov	ip, r0
 8014060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014062:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014068:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801406c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801406e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014072:	6823      	ldr	r3, [r4, #0]
 8014074:	4670      	mov	r0, lr
 8014076:	f8cc 3000 	str.w	r3, [ip]
 801407a:	bd10      	pop	{r4, pc}
 801407c:	080202f0 	.word	0x080202f0

08014080 <rcl_wait_set_is_valid>:
 8014080:	b118      	cbz	r0, 801408a <rcl_wait_set_is_valid+0xa>
 8014082:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014084:	3800      	subs	r0, #0
 8014086:	bf18      	it	ne
 8014088:	2001      	movne	r0, #1
 801408a:	4770      	bx	lr

0801408c <rcl_wait_set_fini>:
 801408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014090:	b082      	sub	sp, #8
 8014092:	2800      	cmp	r0, #0
 8014094:	f000 8095 	beq.w	80141c2 <rcl_wait_set_fini+0x136>
 8014098:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801409a:	4604      	mov	r4, r0
 801409c:	2e00      	cmp	r6, #0
 801409e:	f000 808c 	beq.w	80141ba <rcl_wait_set_fini+0x12e>
 80140a2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80140a4:	f003 fa3e 	bl	8017524 <rmw_destroy_wait_set>
 80140a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80140aa:	1e06      	subs	r6, r0, #0
 80140ac:	bf18      	it	ne
 80140ae:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80140b2:	2d00      	cmp	r5, #0
 80140b4:	f000 8081 	beq.w	80141ba <rcl_wait_set_fini+0x12e>
 80140b8:	2700      	movs	r7, #0
 80140ba:	6820      	ldr	r0, [r4, #0]
 80140bc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80140c0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80140c2:	6067      	str	r7, [r4, #4]
 80140c4:	602f      	str	r7, [r5, #0]
 80140c6:	b120      	cbz	r0, 80140d2 <rcl_wait_set_fini+0x46>
 80140c8:	9101      	str	r1, [sp, #4]
 80140ca:	47c0      	blx	r8
 80140cc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80140ce:	9901      	ldr	r1, [sp, #4]
 80140d0:	6027      	str	r7, [r4, #0]
 80140d2:	68a8      	ldr	r0, [r5, #8]
 80140d4:	b120      	cbz	r0, 80140e0 <rcl_wait_set_fini+0x54>
 80140d6:	47c0      	blx	r8
 80140d8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80140da:	2300      	movs	r3, #0
 80140dc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80140e0:	f04f 0800 	mov.w	r8, #0
 80140e4:	68a0      	ldr	r0, [r4, #8]
 80140e6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80140e8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80140ea:	f8c4 800c 	str.w	r8, [r4, #12]
 80140ee:	f8c5 800c 	str.w	r8, [r5, #12]
 80140f2:	b128      	cbz	r0, 8014100 <rcl_wait_set_fini+0x74>
 80140f4:	47b8      	blx	r7
 80140f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80140f8:	f8c4 8008 	str.w	r8, [r4, #8]
 80140fc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80140fe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014100:	f04f 0800 	mov.w	r8, #0
 8014104:	6968      	ldr	r0, [r5, #20]
 8014106:	f8c5 8010 	str.w	r8, [r5, #16]
 801410a:	b128      	cbz	r0, 8014118 <rcl_wait_set_fini+0x8c>
 801410c:	47b8      	blx	r7
 801410e:	f8c5 8014 	str.w	r8, [r5, #20]
 8014112:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014114:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014116:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014118:	f04f 0800 	mov.w	r8, #0
 801411c:	6920      	ldr	r0, [r4, #16]
 801411e:	f8c4 8014 	str.w	r8, [r4, #20]
 8014122:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8014126:	b128      	cbz	r0, 8014134 <rcl_wait_set_fini+0xa8>
 8014128:	47b8      	blx	r7
 801412a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801412c:	f8c4 8010 	str.w	r8, [r4, #16]
 8014130:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014132:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014134:	f04f 0800 	mov.w	r8, #0
 8014138:	69a0      	ldr	r0, [r4, #24]
 801413a:	f8c4 801c 	str.w	r8, [r4, #28]
 801413e:	f8c5 8018 	str.w	r8, [r5, #24]
 8014142:	b128      	cbz	r0, 8014150 <rcl_wait_set_fini+0xc4>
 8014144:	9101      	str	r1, [sp, #4]
 8014146:	47b8      	blx	r7
 8014148:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801414a:	9901      	ldr	r1, [sp, #4]
 801414c:	f8c4 8018 	str.w	r8, [r4, #24]
 8014150:	6a28      	ldr	r0, [r5, #32]
 8014152:	b120      	cbz	r0, 801415e <rcl_wait_set_fini+0xd2>
 8014154:	47b8      	blx	r7
 8014156:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014158:	2300      	movs	r3, #0
 801415a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801415e:	2700      	movs	r7, #0
 8014160:	6a20      	ldr	r0, [r4, #32]
 8014162:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014166:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014168:	6267      	str	r7, [r4, #36]	@ 0x24
 801416a:	626f      	str	r7, [r5, #36]	@ 0x24
 801416c:	b120      	cbz	r0, 8014178 <rcl_wait_set_fini+0xec>
 801416e:	9101      	str	r1, [sp, #4]
 8014170:	47c0      	blx	r8
 8014172:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014174:	9901      	ldr	r1, [sp, #4]
 8014176:	6227      	str	r7, [r4, #32]
 8014178:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801417a:	b120      	cbz	r0, 8014186 <rcl_wait_set_fini+0xfa>
 801417c:	47c0      	blx	r8
 801417e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014180:	2300      	movs	r3, #0
 8014182:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014186:	2700      	movs	r7, #0
 8014188:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801418a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801418e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014190:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014192:	632f      	str	r7, [r5, #48]	@ 0x30
 8014194:	b120      	cbz	r0, 80141a0 <rcl_wait_set_fini+0x114>
 8014196:	9101      	str	r1, [sp, #4]
 8014198:	47c0      	blx	r8
 801419a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801419c:	9901      	ldr	r1, [sp, #4]
 801419e:	62a7      	str	r7, [r4, #40]	@ 0x28
 80141a0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80141a2:	b120      	cbz	r0, 80141ae <rcl_wait_set_fini+0x122>
 80141a4:	47c0      	blx	r8
 80141a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80141a8:	2300      	movs	r3, #0
 80141aa:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80141ae:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80141b0:	4628      	mov	r0, r5
 80141b2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80141b4:	4798      	blx	r3
 80141b6:	2300      	movs	r3, #0
 80141b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80141ba:	4630      	mov	r0, r6
 80141bc:	b002      	add	sp, #8
 80141be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c2:	260b      	movs	r6, #11
 80141c4:	4630      	mov	r0, r6
 80141c6:	b002      	add	sp, #8
 80141c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141cc <rcl_wait_set_add_subscription>:
 80141cc:	b318      	cbz	r0, 8014216 <rcl_wait_set_add_subscription+0x4a>
 80141ce:	b538      	push	{r3, r4, r5, lr}
 80141d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80141d2:	4604      	mov	r4, r0
 80141d4:	b30b      	cbz	r3, 801421a <rcl_wait_set_add_subscription+0x4e>
 80141d6:	b319      	cbz	r1, 8014220 <rcl_wait_set_add_subscription+0x54>
 80141d8:	681d      	ldr	r5, [r3, #0]
 80141da:	6840      	ldr	r0, [r0, #4]
 80141dc:	4285      	cmp	r5, r0
 80141de:	d217      	bcs.n	8014210 <rcl_wait_set_add_subscription+0x44>
 80141e0:	1c68      	adds	r0, r5, #1
 80141e2:	6018      	str	r0, [r3, #0]
 80141e4:	6823      	ldr	r3, [r4, #0]
 80141e6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80141ea:	b102      	cbz	r2, 80141ee <rcl_wait_set_add_subscription+0x22>
 80141ec:	6015      	str	r5, [r2, #0]
 80141ee:	4608      	mov	r0, r1
 80141f0:	f7ff fcfe 	bl	8013bf0 <rcl_subscription_get_rmw_handle>
 80141f4:	b150      	cbz	r0, 801420c <rcl_wait_set_add_subscription+0x40>
 80141f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80141f8:	6842      	ldr	r2, [r0, #4]
 80141fa:	2000      	movs	r0, #0
 80141fc:	689b      	ldr	r3, [r3, #8]
 80141fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014202:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014204:	6853      	ldr	r3, [r2, #4]
 8014206:	3301      	adds	r3, #1
 8014208:	6053      	str	r3, [r2, #4]
 801420a:	bd38      	pop	{r3, r4, r5, pc}
 801420c:	2001      	movs	r0, #1
 801420e:	bd38      	pop	{r3, r4, r5, pc}
 8014210:	f240 3086 	movw	r0, #902	@ 0x386
 8014214:	bd38      	pop	{r3, r4, r5, pc}
 8014216:	200b      	movs	r0, #11
 8014218:	4770      	bx	lr
 801421a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801421e:	bd38      	pop	{r3, r4, r5, pc}
 8014220:	200b      	movs	r0, #11
 8014222:	bd38      	pop	{r3, r4, r5, pc}

08014224 <rcl_wait_set_clear>:
 8014224:	2800      	cmp	r0, #0
 8014226:	d074      	beq.n	8014312 <rcl_wait_set_clear+0xee>
 8014228:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801422a:	b510      	push	{r4, lr}
 801422c:	4604      	mov	r4, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d071      	beq.n	8014316 <rcl_wait_set_clear+0xf2>
 8014232:	6800      	ldr	r0, [r0, #0]
 8014234:	b138      	cbz	r0, 8014246 <rcl_wait_set_clear+0x22>
 8014236:	6862      	ldr	r2, [r4, #4]
 8014238:	2100      	movs	r1, #0
 801423a:	0092      	lsls	r2, r2, #2
 801423c:	f009 fbf2 	bl	801da24 <memset>
 8014240:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014242:	2200      	movs	r2, #0
 8014244:	601a      	str	r2, [r3, #0]
 8014246:	68a0      	ldr	r0, [r4, #8]
 8014248:	b138      	cbz	r0, 801425a <rcl_wait_set_clear+0x36>
 801424a:	68e2      	ldr	r2, [r4, #12]
 801424c:	2100      	movs	r1, #0
 801424e:	0092      	lsls	r2, r2, #2
 8014250:	f009 fbe8 	bl	801da24 <memset>
 8014254:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014256:	2200      	movs	r2, #0
 8014258:	60da      	str	r2, [r3, #12]
 801425a:	69a0      	ldr	r0, [r4, #24]
 801425c:	b138      	cbz	r0, 801426e <rcl_wait_set_clear+0x4a>
 801425e:	69e2      	ldr	r2, [r4, #28]
 8014260:	2100      	movs	r1, #0
 8014262:	0092      	lsls	r2, r2, #2
 8014264:	f009 fbde 	bl	801da24 <memset>
 8014268:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801426a:	2200      	movs	r2, #0
 801426c:	619a      	str	r2, [r3, #24]
 801426e:	6a20      	ldr	r0, [r4, #32]
 8014270:	b138      	cbz	r0, 8014282 <rcl_wait_set_clear+0x5e>
 8014272:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014274:	2100      	movs	r1, #0
 8014276:	0092      	lsls	r2, r2, #2
 8014278:	f009 fbd4 	bl	801da24 <memset>
 801427c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801427e:	2200      	movs	r2, #0
 8014280:	625a      	str	r2, [r3, #36]	@ 0x24
 8014282:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014284:	b138      	cbz	r0, 8014296 <rcl_wait_set_clear+0x72>
 8014286:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014288:	2100      	movs	r1, #0
 801428a:	0092      	lsls	r2, r2, #2
 801428c:	f009 fbca 	bl	801da24 <memset>
 8014290:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014292:	2200      	movs	r2, #0
 8014294:	631a      	str	r2, [r3, #48]	@ 0x30
 8014296:	6920      	ldr	r0, [r4, #16]
 8014298:	b138      	cbz	r0, 80142aa <rcl_wait_set_clear+0x86>
 801429a:	6962      	ldr	r2, [r4, #20]
 801429c:	2100      	movs	r1, #0
 801429e:	0092      	lsls	r2, r2, #2
 80142a0:	f009 fbc0 	bl	801da24 <memset>
 80142a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80142a6:	2200      	movs	r2, #0
 80142a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80142aa:	6898      	ldr	r0, [r3, #8]
 80142ac:	b138      	cbz	r0, 80142be <rcl_wait_set_clear+0x9a>
 80142ae:	685a      	ldr	r2, [r3, #4]
 80142b0:	2100      	movs	r1, #0
 80142b2:	0092      	lsls	r2, r2, #2
 80142b4:	f009 fbb6 	bl	801da24 <memset>
 80142b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80142ba:	2200      	movs	r2, #0
 80142bc:	605a      	str	r2, [r3, #4]
 80142be:	6958      	ldr	r0, [r3, #20]
 80142c0:	b138      	cbz	r0, 80142d2 <rcl_wait_set_clear+0xae>
 80142c2:	691a      	ldr	r2, [r3, #16]
 80142c4:	2100      	movs	r1, #0
 80142c6:	0092      	lsls	r2, r2, #2
 80142c8:	f009 fbac 	bl	801da24 <memset>
 80142cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80142ce:	2200      	movs	r2, #0
 80142d0:	611a      	str	r2, [r3, #16]
 80142d2:	6a18      	ldr	r0, [r3, #32]
 80142d4:	b138      	cbz	r0, 80142e6 <rcl_wait_set_clear+0xc2>
 80142d6:	69da      	ldr	r2, [r3, #28]
 80142d8:	2100      	movs	r1, #0
 80142da:	0092      	lsls	r2, r2, #2
 80142dc:	f009 fba2 	bl	801da24 <memset>
 80142e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80142e2:	2200      	movs	r2, #0
 80142e4:	61da      	str	r2, [r3, #28]
 80142e6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80142e8:	b138      	cbz	r0, 80142fa <rcl_wait_set_clear+0xd6>
 80142ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80142ec:	2100      	movs	r1, #0
 80142ee:	0092      	lsls	r2, r2, #2
 80142f0:	f009 fb98 	bl	801da24 <memset>
 80142f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80142f6:	2200      	movs	r2, #0
 80142f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80142fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80142fc:	b140      	cbz	r0, 8014310 <rcl_wait_set_clear+0xec>
 80142fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014300:	2100      	movs	r1, #0
 8014302:	0092      	lsls	r2, r2, #2
 8014304:	f009 fb8e 	bl	801da24 <memset>
 8014308:	2300      	movs	r3, #0
 801430a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801430c:	4618      	mov	r0, r3
 801430e:	6353      	str	r3, [r2, #52]	@ 0x34
 8014310:	bd10      	pop	{r4, pc}
 8014312:	200b      	movs	r0, #11
 8014314:	4770      	bx	lr
 8014316:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801431a:	bd10      	pop	{r4, pc}

0801431c <rcl_wait_set_resize>:
 801431c:	2800      	cmp	r0, #0
 801431e:	f000 8180 	beq.w	8014622 <rcl_wait_set_resize+0x306>
 8014322:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014326:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8014328:	b083      	sub	sp, #12
 801432a:	4605      	mov	r5, r0
 801432c:	2c00      	cmp	r4, #0
 801432e:	f000 817a 	beq.w	8014626 <rcl_wait_set_resize+0x30a>
 8014332:	f04f 0900 	mov.w	r9, #0
 8014336:	461f      	mov	r7, r3
 8014338:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801433c:	4688      	mov	r8, r1
 801433e:	4616      	mov	r6, r2
 8014340:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014344:	f8c0 9004 	str.w	r9, [r0, #4]
 8014348:	f8c4 9000 	str.w	r9, [r4]
 801434c:	2900      	cmp	r1, #0
 801434e:	f000 80bf 	beq.w	80144d0 <rcl_wait_set_resize+0x1b4>
 8014352:	008c      	lsls	r4, r1, #2
 8014354:	4652      	mov	r2, sl
 8014356:	6800      	ldr	r0, [r0, #0]
 8014358:	4621      	mov	r1, r4
 801435a:	9301      	str	r3, [sp, #4]
 801435c:	4798      	blx	r3
 801435e:	9b01      	ldr	r3, [sp, #4]
 8014360:	6028      	str	r0, [r5, #0]
 8014362:	2800      	cmp	r0, #0
 8014364:	f000 80f6 	beq.w	8014554 <rcl_wait_set_resize+0x238>
 8014368:	4622      	mov	r2, r4
 801436a:	4649      	mov	r1, r9
 801436c:	9301      	str	r3, [sp, #4]
 801436e:	f009 fb59 	bl	801da24 <memset>
 8014372:	f8c5 8004 	str.w	r8, [r5, #4]
 8014376:	4652      	mov	r2, sl
 8014378:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801437c:	4621      	mov	r1, r4
 801437e:	9b01      	ldr	r3, [sp, #4]
 8014380:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014384:	f8c8 9004 	str.w	r9, [r8, #4]
 8014388:	4798      	blx	r3
 801438a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801438c:	f8c8 0008 	str.w	r0, [r8, #8]
 8014390:	689b      	ldr	r3, [r3, #8]
 8014392:	2b00      	cmp	r3, #0
 8014394:	f000 814a 	beq.w	801462c <rcl_wait_set_resize+0x310>
 8014398:	4622      	mov	r2, r4
 801439a:	4649      	mov	r1, r9
 801439c:	4618      	mov	r0, r3
 801439e:	f009 fb41 	bl	801da24 <memset>
 80143a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80143a4:	f04f 0800 	mov.w	r8, #0
 80143a8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80143ac:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80143b0:	f8c5 800c 	str.w	r8, [r5, #12]
 80143b4:	f8c4 800c 	str.w	r8, [r4, #12]
 80143b8:	2e00      	cmp	r6, #0
 80143ba:	f040 809b 	bne.w	80144f4 <rcl_wait_set_resize+0x1d8>
 80143be:	68a8      	ldr	r0, [r5, #8]
 80143c0:	b128      	cbz	r0, 80143ce <rcl_wait_set_resize+0xb2>
 80143c2:	4649      	mov	r1, r9
 80143c4:	4790      	blx	r2
 80143c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80143c8:	60ae      	str	r6, [r5, #8]
 80143ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80143ce:	f04f 0800 	mov.w	r8, #0
 80143d2:	19f6      	adds	r6, r6, r7
 80143d4:	f8c4 8010 	str.w	r8, [r4, #16]
 80143d8:	f040 80a2 	bne.w	8014520 <rcl_wait_set_resize+0x204>
 80143dc:	6960      	ldr	r0, [r4, #20]
 80143de:	b130      	cbz	r0, 80143ee <rcl_wait_set_resize+0xd2>
 80143e0:	4649      	mov	r1, r9
 80143e2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80143e4:	4798      	blx	r3
 80143e6:	6166      	str	r6, [r4, #20]
 80143e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80143ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80143ee:	2600      	movs	r6, #0
 80143f0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80143f4:	616e      	str	r6, [r5, #20]
 80143f6:	6426      	str	r6, [r4, #64]	@ 0x40
 80143f8:	2f00      	cmp	r7, #0
 80143fa:	f040 80af 	bne.w	801455c <rcl_wait_set_resize+0x240>
 80143fe:	6928      	ldr	r0, [r5, #16]
 8014400:	b138      	cbz	r0, 8014412 <rcl_wait_set_resize+0xf6>
 8014402:	4649      	mov	r1, r9
 8014404:	47d0      	blx	sl
 8014406:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014408:	612f      	str	r7, [r5, #16]
 801440a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801440e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014412:	2600      	movs	r6, #0
 8014414:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014416:	61ee      	str	r6, [r5, #28]
 8014418:	61a6      	str	r6, [r4, #24]
 801441a:	2b00      	cmp	r3, #0
 801441c:	f040 8093 	bne.w	8014546 <rcl_wait_set_resize+0x22a>
 8014420:	69a8      	ldr	r0, [r5, #24]
 8014422:	b120      	cbz	r0, 801442e <rcl_wait_set_resize+0x112>
 8014424:	4649      	mov	r1, r9
 8014426:	47d0      	blx	sl
 8014428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801442a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801442c:	61ab      	str	r3, [r5, #24]
 801442e:	6a20      	ldr	r0, [r4, #32]
 8014430:	b128      	cbz	r0, 801443e <rcl_wait_set_resize+0x122>
 8014432:	4649      	mov	r1, r9
 8014434:	47d0      	blx	sl
 8014436:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014438:	2300      	movs	r3, #0
 801443a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801443e:	2600      	movs	r6, #0
 8014440:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014442:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014444:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014448:	626e      	str	r6, [r5, #36]	@ 0x24
 801444a:	6266      	str	r6, [r4, #36]	@ 0x24
 801444c:	2b00      	cmp	r3, #0
 801444e:	f000 8098 	beq.w	8014582 <rcl_wait_set_resize+0x266>
 8014452:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014456:	463a      	mov	r2, r7
 8014458:	6a28      	ldr	r0, [r5, #32]
 801445a:	4651      	mov	r1, sl
 801445c:	47c8      	blx	r9
 801445e:	6228      	str	r0, [r5, #32]
 8014460:	2800      	cmp	r0, #0
 8014462:	d077      	beq.n	8014554 <rcl_wait_set_resize+0x238>
 8014464:	4652      	mov	r2, sl
 8014466:	4631      	mov	r1, r6
 8014468:	f009 fadc 	bl	801da24 <memset>
 801446c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801446e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014470:	463a      	mov	r2, r7
 8014472:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014474:	4651      	mov	r1, sl
 8014476:	626b      	str	r3, [r5, #36]	@ 0x24
 8014478:	62a6      	str	r6, [r4, #40]	@ 0x28
 801447a:	47c8      	blx	r9
 801447c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801447e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014480:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014482:	2c00      	cmp	r4, #0
 8014484:	f000 80f2 	beq.w	801466c <rcl_wait_set_resize+0x350>
 8014488:	4620      	mov	r0, r4
 801448a:	4652      	mov	r2, sl
 801448c:	4631      	mov	r1, r6
 801448e:	f009 fac9 	bl	801da24 <memset>
 8014492:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014494:	2600      	movs	r6, #0
 8014496:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014498:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801449a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801449e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80144a0:	6326      	str	r6, [r4, #48]	@ 0x30
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	f040 8097 	bne.w	80145d6 <rcl_wait_set_resize+0x2ba>
 80144a8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80144aa:	b120      	cbz	r0, 80144b6 <rcl_wait_set_resize+0x19a>
 80144ac:	4639      	mov	r1, r7
 80144ae:	47c0      	blx	r8
 80144b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80144b4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80144b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80144b8:	2800      	cmp	r0, #0
 80144ba:	d04c      	beq.n	8014556 <rcl_wait_set_resize+0x23a>
 80144bc:	4639      	mov	r1, r7
 80144be:	47c0      	blx	r8
 80144c0:	2300      	movs	r3, #0
 80144c2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80144c4:	4618      	mov	r0, r3
 80144c6:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 80144ca:	b003      	add	sp, #12
 80144cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d0:	6800      	ldr	r0, [r0, #0]
 80144d2:	b120      	cbz	r0, 80144de <rcl_wait_set_resize+0x1c2>
 80144d4:	4651      	mov	r1, sl
 80144d6:	47d8      	blx	fp
 80144d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80144da:	f8c5 8000 	str.w	r8, [r5]
 80144de:	68a0      	ldr	r0, [r4, #8]
 80144e0:	2800      	cmp	r0, #0
 80144e2:	f43f af5f 	beq.w	80143a4 <rcl_wait_set_resize+0x88>
 80144e6:	4651      	mov	r1, sl
 80144e8:	47d8      	blx	fp
 80144ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80144ec:	2300      	movs	r3, #0
 80144ee:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80144f2:	e757      	b.n	80143a4 <rcl_wait_set_resize+0x88>
 80144f4:	00b4      	lsls	r4, r6, #2
 80144f6:	464a      	mov	r2, r9
 80144f8:	68a8      	ldr	r0, [r5, #8]
 80144fa:	4621      	mov	r1, r4
 80144fc:	4798      	blx	r3
 80144fe:	60a8      	str	r0, [r5, #8]
 8014500:	b340      	cbz	r0, 8014554 <rcl_wait_set_resize+0x238>
 8014502:	4622      	mov	r2, r4
 8014504:	4641      	mov	r1, r8
 8014506:	f009 fa8d 	bl	801da24 <memset>
 801450a:	f04f 0800 	mov.w	r8, #0
 801450e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014510:	60ee      	str	r6, [r5, #12]
 8014512:	19f6      	adds	r6, r6, r7
 8014514:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014518:	f8c4 8010 	str.w	r8, [r4, #16]
 801451c:	f43f af5e 	beq.w	80143dc <rcl_wait_set_resize+0xc0>
 8014520:	00b6      	lsls	r6, r6, #2
 8014522:	464a      	mov	r2, r9
 8014524:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014526:	6960      	ldr	r0, [r4, #20]
 8014528:	4631      	mov	r1, r6
 801452a:	4798      	blx	r3
 801452c:	4681      	mov	r9, r0
 801452e:	6160      	str	r0, [r4, #20]
 8014530:	2800      	cmp	r0, #0
 8014532:	f000 8084 	beq.w	801463e <rcl_wait_set_resize+0x322>
 8014536:	4632      	mov	r2, r6
 8014538:	4641      	mov	r1, r8
 801453a:	f009 fa73 	bl	801da24 <memset>
 801453e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014540:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014544:	e753      	b.n	80143ee <rcl_wait_set_resize+0xd2>
 8014546:	009c      	lsls	r4, r3, #2
 8014548:	464a      	mov	r2, r9
 801454a:	69a8      	ldr	r0, [r5, #24]
 801454c:	4621      	mov	r1, r4
 801454e:	47c0      	blx	r8
 8014550:	61a8      	str	r0, [r5, #24]
 8014552:	bb40      	cbnz	r0, 80145a6 <rcl_wait_set_resize+0x28a>
 8014554:	200a      	movs	r0, #10
 8014556:	b003      	add	sp, #12
 8014558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801455c:	00bc      	lsls	r4, r7, #2
 801455e:	464a      	mov	r2, r9
 8014560:	6928      	ldr	r0, [r5, #16]
 8014562:	4621      	mov	r1, r4
 8014564:	47c0      	blx	r8
 8014566:	6128      	str	r0, [r5, #16]
 8014568:	2800      	cmp	r0, #0
 801456a:	d0f3      	beq.n	8014554 <rcl_wait_set_resize+0x238>
 801456c:	4622      	mov	r2, r4
 801456e:	4631      	mov	r1, r6
 8014570:	f009 fa58 	bl	801da24 <memset>
 8014574:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014576:	616f      	str	r7, [r5, #20]
 8014578:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801457c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014580:	e747      	b.n	8014412 <rcl_wait_set_resize+0xf6>
 8014582:	6a28      	ldr	r0, [r5, #32]
 8014584:	b120      	cbz	r0, 8014590 <rcl_wait_set_resize+0x274>
 8014586:	4639      	mov	r1, r7
 8014588:	47c0      	blx	r8
 801458a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801458c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801458e:	622b      	str	r3, [r5, #32]
 8014590:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014592:	2800      	cmp	r0, #0
 8014594:	f43f af7e 	beq.w	8014494 <rcl_wait_set_resize+0x178>
 8014598:	4639      	mov	r1, r7
 801459a:	47c0      	blx	r8
 801459c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801459e:	2300      	movs	r3, #0
 80145a0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80145a4:	e776      	b.n	8014494 <rcl_wait_set_resize+0x178>
 80145a6:	4622      	mov	r2, r4
 80145a8:	4631      	mov	r1, r6
 80145aa:	f009 fa3b 	bl	801da24 <memset>
 80145ae:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80145b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80145b2:	464a      	mov	r2, r9
 80145b4:	6a38      	ldr	r0, [r7, #32]
 80145b6:	4621      	mov	r1, r4
 80145b8:	61eb      	str	r3, [r5, #28]
 80145ba:	61fe      	str	r6, [r7, #28]
 80145bc:	47c0      	blx	r8
 80145be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80145c0:	6238      	str	r0, [r7, #32]
 80145c2:	6a1f      	ldr	r7, [r3, #32]
 80145c4:	2f00      	cmp	r7, #0
 80145c6:	d04a      	beq.n	801465e <rcl_wait_set_resize+0x342>
 80145c8:	4622      	mov	r2, r4
 80145ca:	4631      	mov	r1, r6
 80145cc:	4638      	mov	r0, r7
 80145ce:	f009 fa29 	bl	801da24 <memset>
 80145d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80145d4:	e733      	b.n	801443e <rcl_wait_set_resize+0x122>
 80145d6:	009c      	lsls	r4, r3, #2
 80145d8:	463a      	mov	r2, r7
 80145da:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80145dc:	4621      	mov	r1, r4
 80145de:	47c8      	blx	r9
 80145e0:	62a8      	str	r0, [r5, #40]	@ 0x28
 80145e2:	2800      	cmp	r0, #0
 80145e4:	d0b6      	beq.n	8014554 <rcl_wait_set_resize+0x238>
 80145e6:	4622      	mov	r2, r4
 80145e8:	4631      	mov	r1, r6
 80145ea:	f009 fa1b 	bl	801da24 <memset>
 80145ee:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80145f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145f4:	463a      	mov	r2, r7
 80145f6:	4621      	mov	r1, r4
 80145f8:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80145fc:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80145fe:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8014602:	47c8      	blx	r9
 8014604:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014606:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801460a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801460c:	2b00      	cmp	r3, #0
 801460e:	d034      	beq.n	801467a <rcl_wait_set_resize+0x35e>
 8014610:	4622      	mov	r2, r4
 8014612:	4631      	mov	r1, r6
 8014614:	4618      	mov	r0, r3
 8014616:	f009 fa05 	bl	801da24 <memset>
 801461a:	4630      	mov	r0, r6
 801461c:	b003      	add	sp, #12
 801461e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014622:	200b      	movs	r0, #11
 8014624:	4770      	bx	lr
 8014626:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801462a:	e794      	b.n	8014556 <rcl_wait_set_resize+0x23a>
 801462c:	6828      	ldr	r0, [r5, #0]
 801462e:	4651      	mov	r1, sl
 8014630:	9301      	str	r3, [sp, #4]
 8014632:	47d8      	blx	fp
 8014634:	9b01      	ldr	r3, [sp, #4]
 8014636:	200a      	movs	r0, #10
 8014638:	e9c5 3300 	strd	r3, r3, [r5]
 801463c:	e78b      	b.n	8014556 <rcl_wait_set_resize+0x23a>
 801463e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014640:	68a8      	ldr	r0, [r5, #8]
 8014642:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014646:	4798      	blx	r3
 8014648:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801464a:	6928      	ldr	r0, [r5, #16]
 801464c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801464e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014650:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8014654:	4790      	blx	r2
 8014656:	200a      	movs	r0, #10
 8014658:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801465c:	e77b      	b.n	8014556 <rcl_wait_set_resize+0x23a>
 801465e:	69a8      	ldr	r0, [r5, #24]
 8014660:	4649      	mov	r1, r9
 8014662:	47d0      	blx	sl
 8014664:	200a      	movs	r0, #10
 8014666:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801466a:	e774      	b.n	8014556 <rcl_wait_set_resize+0x23a>
 801466c:	6a28      	ldr	r0, [r5, #32]
 801466e:	4639      	mov	r1, r7
 8014670:	47c0      	blx	r8
 8014672:	200a      	movs	r0, #10
 8014674:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014678:	e76d      	b.n	8014556 <rcl_wait_set_resize+0x23a>
 801467a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801467c:	4639      	mov	r1, r7
 801467e:	9301      	str	r3, [sp, #4]
 8014680:	47c0      	blx	r8
 8014682:	9b01      	ldr	r3, [sp, #4]
 8014684:	200a      	movs	r0, #10
 8014686:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801468a:	e764      	b.n	8014556 <rcl_wait_set_resize+0x23a>

0801468c <rcl_wait_set_init>:
 801468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014690:	b085      	sub	sp, #20
 8014692:	4605      	mov	r5, r0
 8014694:	460e      	mov	r6, r1
 8014696:	4617      	mov	r7, r2
 8014698:	a812      	add	r0, sp, #72	@ 0x48
 801469a:	4698      	mov	r8, r3
 801469c:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 80146a0:	f7fd fb94 	bl	8011dcc <rcutils_allocator_is_valid>
 80146a4:	2d00      	cmp	r5, #0
 80146a6:	d072      	beq.n	801478e <rcl_wait_set_init+0x102>
 80146a8:	f080 0001 	eor.w	r0, r0, #1
 80146ac:	b2c0      	uxtb	r0, r0
 80146ae:	2800      	cmp	r0, #0
 80146b0:	d16d      	bne.n	801478e <rcl_wait_set_init+0x102>
 80146b2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80146b6:	f1ba 0f00 	cmp.w	sl, #0
 80146ba:	d004      	beq.n	80146c6 <rcl_wait_set_init+0x3a>
 80146bc:	2464      	movs	r4, #100	@ 0x64
 80146be:	4620      	mov	r0, r4
 80146c0:	b005      	add	sp, #20
 80146c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146c6:	f1b9 0f00 	cmp.w	r9, #0
 80146ca:	d060      	beq.n	801478e <rcl_wait_set_init+0x102>
 80146cc:	4648      	mov	r0, r9
 80146ce:	f7fe f9f3 	bl	8012ab8 <rcl_context_is_valid>
 80146d2:	2800      	cmp	r0, #0
 80146d4:	d068      	beq.n	80147a8 <rcl_wait_set_init+0x11c>
 80146d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80146d8:	205c      	movs	r0, #92	@ 0x5c
 80146da:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80146dc:	4798      	blx	r3
 80146de:	6328      	str	r0, [r5, #48]	@ 0x30
 80146e0:	2800      	cmp	r0, #0
 80146e2:	d063      	beq.n	80147ac <rcl_wait_set_init+0x120>
 80146e4:	225c      	movs	r2, #92	@ 0x5c
 80146e6:	4651      	mov	r1, sl
 80146e8:	f009 f99c 	bl	801da24 <memset>
 80146ec:	ac12      	add	r4, sp, #72	@ 0x48
 80146ee:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 80146f2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80146f6:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 80146fa:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 80146fe:	eb03 0e02 	add.w	lr, r3, r2
 8014702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014704:	f8d9 9000 	ldr.w	r9, [r9]
 8014708:	449e      	add	lr, r3
 801470a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801470c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8014710:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8014714:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8014718:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801471c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8014720:	44be      	add	lr, r7
 8014722:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014726:	6823      	ldr	r3, [r4, #0]
 8014728:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801472c:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8014730:	f8cc 3000 	str.w	r3, [ip]
 8014734:	f002 feec 	bl	8017510 <rmw_create_wait_set>
 8014738:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801473a:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801473e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014740:	b350      	cbz	r0, 8014798 <rcl_wait_set_init+0x10c>
 8014742:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8014744:	4643      	mov	r3, r8
 8014746:	463a      	mov	r2, r7
 8014748:	4631      	mov	r1, r6
 801474a:	9402      	str	r4, [sp, #8]
 801474c:	4628      	mov	r0, r5
 801474e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8014750:	9401      	str	r4, [sp, #4]
 8014752:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8014754:	9400      	str	r4, [sp, #0]
 8014756:	f7ff fde1 	bl	801431c <rcl_wait_set_resize>
 801475a:	4604      	mov	r4, r0
 801475c:	2800      	cmp	r0, #0
 801475e:	d0ae      	beq.n	80146be <rcl_wait_set_init+0x32>
 8014760:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014762:	bb2b      	cbnz	r3, 80147b0 <rcl_wait_set_init+0x124>
 8014764:	2600      	movs	r6, #0
 8014766:	4628      	mov	r0, r5
 8014768:	4633      	mov	r3, r6
 801476a:	4632      	mov	r2, r6
 801476c:	4631      	mov	r1, r6
 801476e:	9600      	str	r6, [sp, #0]
 8014770:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014774:	f7ff fdd2 	bl	801431c <rcl_wait_set_resize>
 8014778:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801477a:	2800      	cmp	r0, #0
 801477c:	d09f      	beq.n	80146be <rcl_wait_set_init+0x32>
 801477e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8014780:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8014782:	4798      	blx	r3
 8014784:	4620      	mov	r0, r4
 8014786:	632e      	str	r6, [r5, #48]	@ 0x30
 8014788:	b005      	add	sp, #20
 801478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801478e:	240b      	movs	r4, #11
 8014790:	4620      	mov	r0, r4
 8014792:	b005      	add	sp, #20
 8014794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014798:	2401      	movs	r4, #1
 801479a:	f002 fec3 	bl	8017524 <rmw_destroy_wait_set>
 801479e:	2800      	cmp	r0, #0
 80147a0:	bf18      	it	ne
 80147a2:	f44f 7461 	movne.w	r4, #900	@ 0x384
 80147a6:	e7dd      	b.n	8014764 <rcl_wait_set_init+0xd8>
 80147a8:	2465      	movs	r4, #101	@ 0x65
 80147aa:	e788      	b.n	80146be <rcl_wait_set_init+0x32>
 80147ac:	240a      	movs	r4, #10
 80147ae:	e786      	b.n	80146be <rcl_wait_set_init+0x32>
 80147b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80147b2:	e7f2      	b.n	801479a <rcl_wait_set_init+0x10e>

080147b4 <rcl_wait_set_add_guard_condition>:
 80147b4:	b318      	cbz	r0, 80147fe <rcl_wait_set_add_guard_condition+0x4a>
 80147b6:	b538      	push	{r3, r4, r5, lr}
 80147b8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80147ba:	4604      	mov	r4, r0
 80147bc:	b30b      	cbz	r3, 8014802 <rcl_wait_set_add_guard_condition+0x4e>
 80147be:	b319      	cbz	r1, 8014808 <rcl_wait_set_add_guard_condition+0x54>
 80147c0:	68dd      	ldr	r5, [r3, #12]
 80147c2:	68c0      	ldr	r0, [r0, #12]
 80147c4:	4285      	cmp	r5, r0
 80147c6:	d217      	bcs.n	80147f8 <rcl_wait_set_add_guard_condition+0x44>
 80147c8:	1c68      	adds	r0, r5, #1
 80147ca:	60d8      	str	r0, [r3, #12]
 80147cc:	68a3      	ldr	r3, [r4, #8]
 80147ce:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80147d2:	b102      	cbz	r2, 80147d6 <rcl_wait_set_add_guard_condition+0x22>
 80147d4:	6015      	str	r5, [r2, #0]
 80147d6:	4608      	mov	r0, r1
 80147d8:	f007 fb4e 	bl	801be78 <rcl_guard_condition_get_rmw_handle>
 80147dc:	b150      	cbz	r0, 80147f4 <rcl_wait_set_add_guard_condition+0x40>
 80147de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80147e0:	6842      	ldr	r2, [r0, #4]
 80147e2:	2000      	movs	r0, #0
 80147e4:	695b      	ldr	r3, [r3, #20]
 80147e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80147ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80147ec:	6913      	ldr	r3, [r2, #16]
 80147ee:	3301      	adds	r3, #1
 80147f0:	6113      	str	r3, [r2, #16]
 80147f2:	bd38      	pop	{r3, r4, r5, pc}
 80147f4:	2001      	movs	r0, #1
 80147f6:	bd38      	pop	{r3, r4, r5, pc}
 80147f8:	f240 3086 	movw	r0, #902	@ 0x386
 80147fc:	bd38      	pop	{r3, r4, r5, pc}
 80147fe:	200b      	movs	r0, #11
 8014800:	4770      	bx	lr
 8014802:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014806:	bd38      	pop	{r3, r4, r5, pc}
 8014808:	200b      	movs	r0, #11
 801480a:	bd38      	pop	{r3, r4, r5, pc}

0801480c <rcl_wait_set_add_timer>:
 801480c:	b328      	cbz	r0, 801485a <rcl_wait_set_add_timer+0x4e>
 801480e:	b538      	push	{r3, r4, r5, lr}
 8014810:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014812:	4604      	mov	r4, r0
 8014814:	b31b      	cbz	r3, 801485e <rcl_wait_set_add_timer+0x52>
 8014816:	b329      	cbz	r1, 8014864 <rcl_wait_set_add_timer+0x58>
 8014818:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801481a:	6965      	ldr	r5, [r4, #20]
 801481c:	42a8      	cmp	r0, r5
 801481e:	d219      	bcs.n	8014854 <rcl_wait_set_add_timer+0x48>
 8014820:	1c45      	adds	r5, r0, #1
 8014822:	641d      	str	r5, [r3, #64]	@ 0x40
 8014824:	6923      	ldr	r3, [r4, #16]
 8014826:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801482a:	b102      	cbz	r2, 801482e <rcl_wait_set_add_timer+0x22>
 801482c:	6010      	str	r0, [r2, #0]
 801482e:	4608      	mov	r0, r1
 8014830:	f7ff fb9a 	bl	8013f68 <rcl_timer_get_guard_condition>
 8014834:	b168      	cbz	r0, 8014852 <rcl_wait_set_add_timer+0x46>
 8014836:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014838:	68e3      	ldr	r3, [r4, #12]
 801483a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801483c:	3b01      	subs	r3, #1
 801483e:	441d      	add	r5, r3
 8014840:	f007 fb1a 	bl	801be78 <rcl_guard_condition_get_rmw_handle>
 8014844:	b180      	cbz	r0, 8014868 <rcl_wait_set_add_timer+0x5c>
 8014846:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014848:	6842      	ldr	r2, [r0, #4]
 801484a:	2000      	movs	r0, #0
 801484c:	695b      	ldr	r3, [r3, #20]
 801484e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014852:	bd38      	pop	{r3, r4, r5, pc}
 8014854:	f240 3086 	movw	r0, #902	@ 0x386
 8014858:	bd38      	pop	{r3, r4, r5, pc}
 801485a:	200b      	movs	r0, #11
 801485c:	4770      	bx	lr
 801485e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014862:	bd38      	pop	{r3, r4, r5, pc}
 8014864:	200b      	movs	r0, #11
 8014866:	bd38      	pop	{r3, r4, r5, pc}
 8014868:	2001      	movs	r0, #1
 801486a:	bd38      	pop	{r3, r4, r5, pc}

0801486c <rcl_wait_set_add_client>:
 801486c:	b318      	cbz	r0, 80148b6 <rcl_wait_set_add_client+0x4a>
 801486e:	b538      	push	{r3, r4, r5, lr}
 8014870:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014872:	4604      	mov	r4, r0
 8014874:	b30b      	cbz	r3, 80148ba <rcl_wait_set_add_client+0x4e>
 8014876:	b319      	cbz	r1, 80148c0 <rcl_wait_set_add_client+0x54>
 8014878:	699d      	ldr	r5, [r3, #24]
 801487a:	69c0      	ldr	r0, [r0, #28]
 801487c:	4285      	cmp	r5, r0
 801487e:	d217      	bcs.n	80148b0 <rcl_wait_set_add_client+0x44>
 8014880:	1c68      	adds	r0, r5, #1
 8014882:	6198      	str	r0, [r3, #24]
 8014884:	69a3      	ldr	r3, [r4, #24]
 8014886:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801488a:	b102      	cbz	r2, 801488e <rcl_wait_set_add_client+0x22>
 801488c:	6015      	str	r5, [r2, #0]
 801488e:	4608      	mov	r0, r1
 8014890:	f7fe f878 	bl	8012984 <rcl_client_get_rmw_handle>
 8014894:	b150      	cbz	r0, 80148ac <rcl_wait_set_add_client+0x40>
 8014896:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014898:	6842      	ldr	r2, [r0, #4]
 801489a:	2000      	movs	r0, #0
 801489c:	6a1b      	ldr	r3, [r3, #32]
 801489e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80148a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80148a4:	69d3      	ldr	r3, [r2, #28]
 80148a6:	3301      	adds	r3, #1
 80148a8:	61d3      	str	r3, [r2, #28]
 80148aa:	bd38      	pop	{r3, r4, r5, pc}
 80148ac:	2001      	movs	r0, #1
 80148ae:	bd38      	pop	{r3, r4, r5, pc}
 80148b0:	f240 3086 	movw	r0, #902	@ 0x386
 80148b4:	bd38      	pop	{r3, r4, r5, pc}
 80148b6:	200b      	movs	r0, #11
 80148b8:	4770      	bx	lr
 80148ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80148be:	bd38      	pop	{r3, r4, r5, pc}
 80148c0:	200b      	movs	r0, #11
 80148c2:	bd38      	pop	{r3, r4, r5, pc}

080148c4 <rcl_wait_set_add_service>:
 80148c4:	b318      	cbz	r0, 801490e <rcl_wait_set_add_service+0x4a>
 80148c6:	b538      	push	{r3, r4, r5, lr}
 80148c8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148ca:	4604      	mov	r4, r0
 80148cc:	b30b      	cbz	r3, 8014912 <rcl_wait_set_add_service+0x4e>
 80148ce:	b319      	cbz	r1, 8014918 <rcl_wait_set_add_service+0x54>
 80148d0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80148d2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80148d4:	4285      	cmp	r5, r0
 80148d6:	d217      	bcs.n	8014908 <rcl_wait_set_add_service+0x44>
 80148d8:	1c68      	adds	r0, r5, #1
 80148da:	6258      	str	r0, [r3, #36]	@ 0x24
 80148dc:	6a23      	ldr	r3, [r4, #32]
 80148de:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80148e2:	b102      	cbz	r2, 80148e6 <rcl_wait_set_add_service+0x22>
 80148e4:	6015      	str	r5, [r2, #0]
 80148e6:	4608      	mov	r0, r1
 80148e8:	f7fe ffe2 	bl	80138b0 <rcl_service_get_rmw_handle>
 80148ec:	b150      	cbz	r0, 8014904 <rcl_wait_set_add_service+0x40>
 80148ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148f0:	6842      	ldr	r2, [r0, #4]
 80148f2:	2000      	movs	r0, #0
 80148f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80148fa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80148fc:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80148fe:	3301      	adds	r3, #1
 8014900:	6293      	str	r3, [r2, #40]	@ 0x28
 8014902:	bd38      	pop	{r3, r4, r5, pc}
 8014904:	2001      	movs	r0, #1
 8014906:	bd38      	pop	{r3, r4, r5, pc}
 8014908:	f240 3086 	movw	r0, #902	@ 0x386
 801490c:	bd38      	pop	{r3, r4, r5, pc}
 801490e:	200b      	movs	r0, #11
 8014910:	4770      	bx	lr
 8014912:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014916:	bd38      	pop	{r3, r4, r5, pc}
 8014918:	200b      	movs	r0, #11
 801491a:	bd38      	pop	{r3, r4, r5, pc}
 801491c:	0000      	movs	r0, r0
	...

08014920 <rcl_wait>:
 8014920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014924:	ed2d 8b02 	vpush	{d8}
 8014928:	b08d      	sub	sp, #52	@ 0x34
 801492a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801492e:	2800      	cmp	r0, #0
 8014930:	f000 814f 	beq.w	8014bd2 <rcl_wait+0x2b2>
 8014934:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014936:	4605      	mov	r5, r0
 8014938:	2e00      	cmp	r6, #0
 801493a:	f000 811a 	beq.w	8014b72 <rcl_wait+0x252>
 801493e:	6843      	ldr	r3, [r0, #4]
 8014940:	b983      	cbnz	r3, 8014964 <rcl_wait+0x44>
 8014942:	68eb      	ldr	r3, [r5, #12]
 8014944:	b973      	cbnz	r3, 8014964 <rcl_wait+0x44>
 8014946:	696b      	ldr	r3, [r5, #20]
 8014948:	b963      	cbnz	r3, 8014964 <rcl_wait+0x44>
 801494a:	69eb      	ldr	r3, [r5, #28]
 801494c:	b953      	cbnz	r3, 8014964 <rcl_wait+0x44>
 801494e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8014950:	b943      	cbnz	r3, 8014964 <rcl_wait+0x44>
 8014952:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8014954:	b933      	cbnz	r3, 8014964 <rcl_wait+0x44>
 8014956:	f240 3085 	movw	r0, #901	@ 0x385
 801495a:	b00d      	add	sp, #52	@ 0x34
 801495c:	ecbd 8b02 	vpop	{d8}
 8014960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014964:	9b04      	ldr	r3, [sp, #16]
 8014966:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014968:	2b01      	cmp	r3, #1
 801496a:	9b05      	ldr	r3, [sp, #20]
 801496c:	f173 0300 	sbcs.w	r3, r3, #0
 8014970:	f2c0 80f8 	blt.w	8014b64 <rcl_wait+0x244>
 8014974:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8014978:	2a00      	cmp	r2, #0
 801497a:	f000 810f 	beq.w	8014b9c <rcl_wait+0x27c>
 801497e:	2400      	movs	r4, #0
 8014980:	4613      	mov	r3, r2
 8014982:	f240 3921 	movw	r9, #801	@ 0x321
 8014986:	4632      	mov	r2, r6
 8014988:	46a2      	mov	sl, r4
 801498a:	46a3      	mov	fp, r4
 801498c:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8014bf0 <rcl_wait+0x2d0>
 8014990:	e014      	b.n	80149bc <rcl_wait+0x9c>
 8014992:	2800      	cmp	r0, #0
 8014994:	d1e1      	bne.n	801495a <rcl_wait+0x3a>
 8014996:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801499a:	4542      	cmp	r2, r8
 801499c:	eb73 0107 	sbcs.w	r1, r3, r7
 80149a0:	da03      	bge.n	80149aa <rcl_wait+0x8a>
 80149a2:	4690      	mov	r8, r2
 80149a4:	461f      	mov	r7, r3
 80149a6:	f04f 0b01 	mov.w	fp, #1
 80149aa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80149ac:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80149ae:	3401      	adds	r4, #1
 80149b0:	f14a 0a00 	adc.w	sl, sl, #0
 80149b4:	429c      	cmp	r4, r3
 80149b6:	f17a 0100 	sbcs.w	r1, sl, #0
 80149ba:	d228      	bcs.n	8014a0e <rcl_wait+0xee>
 80149bc:	6928      	ldr	r0, [r5, #16]
 80149be:	a908      	add	r1, sp, #32
 80149c0:	00a6      	lsls	r6, r4, #2
 80149c2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d0f1      	beq.n	80149ae <rcl_wait+0x8e>
 80149ca:	68eb      	ldr	r3, [r5, #12]
 80149cc:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80149d0:	4423      	add	r3, r4
 80149d2:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80149d6:	f1be 0f00 	cmp.w	lr, #0
 80149da:	d006      	beq.n	80149ea <rcl_wait+0xca>
 80149dc:	6913      	ldr	r3, [r2, #16]
 80149de:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80149e2:	3301      	adds	r3, #1
 80149e4:	6113      	str	r3, [r2, #16]
 80149e6:	692b      	ldr	r3, [r5, #16]
 80149e8:	5998      	ldr	r0, [r3, r6]
 80149ea:	ed8d 8b08 	vstr	d8, [sp, #32]
 80149ee:	f7ff fa89 	bl	8013f04 <rcl_timer_get_time_until_next_call>
 80149f2:	4548      	cmp	r0, r9
 80149f4:	d1cd      	bne.n	8014992 <rcl_wait+0x72>
 80149f6:	692b      	ldr	r3, [r5, #16]
 80149f8:	2200      	movs	r2, #0
 80149fa:	3401      	adds	r4, #1
 80149fc:	519a      	str	r2, [r3, r6]
 80149fe:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014a00:	f14a 0a00 	adc.w	sl, sl, #0
 8014a04:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8014a06:	429c      	cmp	r4, r3
 8014a08:	f17a 0100 	sbcs.w	r1, sl, #0
 8014a0c:	d3d6      	bcc.n	80149bc <rcl_wait+0x9c>
 8014a0e:	4659      	mov	r1, fp
 8014a10:	4616      	mov	r6, r2
 8014a12:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014a16:	4313      	orrs	r3, r2
 8014a18:	f040 80b4 	bne.w	8014b84 <rcl_wait+0x264>
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	2200      	movs	r2, #0
 8014a20:	460c      	mov	r4, r1
 8014a22:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014a26:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014a2a:	ab08      	add	r3, sp, #32
 8014a2c:	9302      	str	r3, [sp, #8]
 8014a2e:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8014a32:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8014a34:	f106 0110 	add.w	r1, r6, #16
 8014a38:	9300      	str	r3, [sp, #0]
 8014a3a:	1d30      	adds	r0, r6, #4
 8014a3c:	f106 031c 	add.w	r3, r6, #28
 8014a40:	9201      	str	r2, [sp, #4]
 8014a42:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8014a46:	f002 fbff 	bl	8017248 <rmw_wait>
 8014a4a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014a4c:	4680      	mov	r8, r0
 8014a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014a50:	b1e2      	cbz	r2, 8014a8c <rcl_wait+0x16c>
 8014a52:	f04f 0900 	mov.w	r9, #0
 8014a56:	464f      	mov	r7, r9
 8014a58:	692a      	ldr	r2, [r5, #16]
 8014a5a:	f10d 011f 	add.w	r1, sp, #31
 8014a5e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8014a62:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8014a66:	b160      	cbz	r0, 8014a82 <rcl_wait+0x162>
 8014a68:	f88d 701f 	strb.w	r7, [sp, #31]
 8014a6c:	f7ff fa0e 	bl	8013e8c <rcl_timer_is_ready>
 8014a70:	2800      	cmp	r0, #0
 8014a72:	f47f af72 	bne.w	801495a <rcl_wait+0x3a>
 8014a76:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014a7a:	b90b      	cbnz	r3, 8014a80 <rcl_wait+0x160>
 8014a7c:	692a      	ldr	r2, [r5, #16]
 8014a7e:	5193      	str	r3, [r2, r6]
 8014a80:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014a82:	f109 0901 	add.w	r9, r9, #1
 8014a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014a88:	454a      	cmp	r2, r9
 8014a8a:	d8e5      	bhi.n	8014a58 <rcl_wait+0x138>
 8014a8c:	f038 0002 	bics.w	r0, r8, #2
 8014a90:	d176      	bne.n	8014b80 <rcl_wait+0x260>
 8014a92:	686f      	ldr	r7, [r5, #4]
 8014a94:	b17f      	cbz	r7, 8014ab6 <rcl_wait+0x196>
 8014a96:	4602      	mov	r2, r0
 8014a98:	e002      	b.n	8014aa0 <rcl_wait+0x180>
 8014a9a:	3201      	adds	r2, #1
 8014a9c:	42ba      	cmp	r2, r7
 8014a9e:	d00a      	beq.n	8014ab6 <rcl_wait+0x196>
 8014aa0:	6899      	ldr	r1, [r3, #8]
 8014aa2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014aa6:	2900      	cmp	r1, #0
 8014aa8:	d1f7      	bne.n	8014a9a <rcl_wait+0x17a>
 8014aaa:	682e      	ldr	r6, [r5, #0]
 8014aac:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8014ab0:	3201      	adds	r2, #1
 8014ab2:	42ba      	cmp	r2, r7
 8014ab4:	d1f4      	bne.n	8014aa0 <rcl_wait+0x180>
 8014ab6:	68ef      	ldr	r7, [r5, #12]
 8014ab8:	b17f      	cbz	r7, 8014ada <rcl_wait+0x1ba>
 8014aba:	2200      	movs	r2, #0
 8014abc:	e002      	b.n	8014ac4 <rcl_wait+0x1a4>
 8014abe:	3201      	adds	r2, #1
 8014ac0:	42ba      	cmp	r2, r7
 8014ac2:	d00a      	beq.n	8014ada <rcl_wait+0x1ba>
 8014ac4:	6959      	ldr	r1, [r3, #20]
 8014ac6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014aca:	2900      	cmp	r1, #0
 8014acc:	d1f7      	bne.n	8014abe <rcl_wait+0x19e>
 8014ace:	68ae      	ldr	r6, [r5, #8]
 8014ad0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8014ad4:	3201      	adds	r2, #1
 8014ad6:	42ba      	cmp	r2, r7
 8014ad8:	d1f4      	bne.n	8014ac4 <rcl_wait+0x1a4>
 8014ada:	69ef      	ldr	r7, [r5, #28]
 8014adc:	b17f      	cbz	r7, 8014afe <rcl_wait+0x1de>
 8014ade:	2200      	movs	r2, #0
 8014ae0:	e002      	b.n	8014ae8 <rcl_wait+0x1c8>
 8014ae2:	3201      	adds	r2, #1
 8014ae4:	42ba      	cmp	r2, r7
 8014ae6:	d00a      	beq.n	8014afe <rcl_wait+0x1de>
 8014ae8:	6a19      	ldr	r1, [r3, #32]
 8014aea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014aee:	2900      	cmp	r1, #0
 8014af0:	d1f7      	bne.n	8014ae2 <rcl_wait+0x1c2>
 8014af2:	69ae      	ldr	r6, [r5, #24]
 8014af4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8014af8:	3201      	adds	r2, #1
 8014afa:	42ba      	cmp	r2, r7
 8014afc:	d1f4      	bne.n	8014ae8 <rcl_wait+0x1c8>
 8014afe:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8014b00:	b17f      	cbz	r7, 8014b22 <rcl_wait+0x202>
 8014b02:	2200      	movs	r2, #0
 8014b04:	e002      	b.n	8014b0c <rcl_wait+0x1ec>
 8014b06:	3201      	adds	r2, #1
 8014b08:	42ba      	cmp	r2, r7
 8014b0a:	d00a      	beq.n	8014b22 <rcl_wait+0x202>
 8014b0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014b0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014b12:	2900      	cmp	r1, #0
 8014b14:	d1f7      	bne.n	8014b06 <rcl_wait+0x1e6>
 8014b16:	6a2e      	ldr	r6, [r5, #32]
 8014b18:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8014b1c:	3201      	adds	r2, #1
 8014b1e:	42ba      	cmp	r2, r7
 8014b20:	d1f4      	bne.n	8014b0c <rcl_wait+0x1ec>
 8014b22:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8014b24:	b17f      	cbz	r7, 8014b46 <rcl_wait+0x226>
 8014b26:	2200      	movs	r2, #0
 8014b28:	e002      	b.n	8014b30 <rcl_wait+0x210>
 8014b2a:	3201      	adds	r2, #1
 8014b2c:	42ba      	cmp	r2, r7
 8014b2e:	d00a      	beq.n	8014b46 <rcl_wait+0x226>
 8014b30:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014b32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014b36:	2900      	cmp	r1, #0
 8014b38:	d1f7      	bne.n	8014b2a <rcl_wait+0x20a>
 8014b3a:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8014b3c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8014b40:	3201      	adds	r2, #1
 8014b42:	42ba      	cmp	r2, r7
 8014b44:	d1f4      	bne.n	8014b30 <rcl_wait+0x210>
 8014b46:	f1b8 0f02 	cmp.w	r8, #2
 8014b4a:	f47f af06 	bne.w	801495a <rcl_wait+0x3a>
 8014b4e:	f084 0301 	eor.w	r3, r4, #1
 8014b52:	b2db      	uxtb	r3, r3
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	bf18      	it	ne
 8014b58:	2002      	movne	r0, #2
 8014b5a:	b00d      	add	sp, #52	@ 0x34
 8014b5c:	ecbd 8b02 	vpop	{d8}
 8014b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b64:	2a00      	cmp	r2, #0
 8014b66:	d03a      	beq.n	8014bde <rcl_wait+0x2be>
 8014b68:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014b6c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014b70:	e705      	b.n	801497e <rcl_wait+0x5e>
 8014b72:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014b76:	b00d      	add	sp, #52	@ 0x34
 8014b78:	ecbd 8b02 	vpop	{d8}
 8014b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b80:	2001      	movs	r0, #1
 8014b82:	e6ea      	b.n	801495a <rcl_wait+0x3a>
 8014b84:	9b04      	ldr	r3, [sp, #16]
 8014b86:	460c      	mov	r4, r1
 8014b88:	2b01      	cmp	r3, #1
 8014b8a:	9b05      	ldr	r3, [sp, #20]
 8014b8c:	f173 0300 	sbcs.w	r3, r3, #0
 8014b90:	bfa8      	it	ge
 8014b92:	f044 0401 	orrge.w	r4, r4, #1
 8014b96:	b914      	cbnz	r4, 8014b9e <rcl_wait+0x27e>
 8014b98:	4623      	mov	r3, r4
 8014b9a:	e747      	b.n	8014a2c <rcl_wait+0x10c>
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	2f00      	cmp	r7, #0
 8014ba0:	da02      	bge.n	8014ba8 <rcl_wait+0x288>
 8014ba2:	f04f 0800 	mov.w	r8, #0
 8014ba6:	4647      	mov	r7, r8
 8014ba8:	460c      	mov	r4, r1
 8014baa:	4640      	mov	r0, r8
 8014bac:	4639      	mov	r1, r7
 8014bae:	a312      	add	r3, pc, #72	@ (adr r3, 8014bf8 <rcl_wait+0x2d8>)
 8014bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb4:	f7eb fbfc 	bl	80003b0 <__aeabi_ldivmod>
 8014bb8:	a30f      	add	r3, pc, #60	@ (adr r3, 8014bf8 <rcl_wait+0x2d8>)
 8014bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014bc2:	4640      	mov	r0, r8
 8014bc4:	4639      	mov	r1, r7
 8014bc6:	f7eb fbf3 	bl	80003b0 <__aeabi_ldivmod>
 8014bca:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014bce:	ab08      	add	r3, sp, #32
 8014bd0:	e72c      	b.n	8014a2c <rcl_wait+0x10c>
 8014bd2:	200b      	movs	r0, #11
 8014bd4:	b00d      	add	sp, #52	@ 0x34
 8014bd6:	ecbd 8b02 	vpop	{d8}
 8014bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bde:	4611      	mov	r1, r2
 8014be0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014be4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014be8:	e713      	b.n	8014a12 <rcl_wait+0xf2>
 8014bea:	bf00      	nop
 8014bec:	f3af 8000 	nop.w
 8014bf0:	ffffffff 	.word	0xffffffff
 8014bf4:	7fffffff 	.word	0x7fffffff
 8014bf8:	3b9aca00 	.word	0x3b9aca00
 8014bfc:	00000000 	.word	0x00000000

08014c00 <rcl_action_take_goal_response>:
 8014c00:	2800      	cmp	r0, #0
 8014c02:	d039      	beq.n	8014c78 <rcl_action_take_goal_response+0x78>
 8014c04:	b570      	push	{r4, r5, r6, lr}
 8014c06:	4604      	mov	r4, r0
 8014c08:	6800      	ldr	r0, [r0, #0]
 8014c0a:	b380      	cbz	r0, 8014c6e <rcl_action_take_goal_response+0x6e>
 8014c0c:	460e      	mov	r6, r1
 8014c0e:	4615      	mov	r5, r2
 8014c10:	f7fd ff3e 	bl	8012a90 <rcl_client_is_valid>
 8014c14:	b330      	cbz	r0, 8014c64 <rcl_action_take_goal_response+0x64>
 8014c16:	6820      	ldr	r0, [r4, #0]
 8014c18:	3004      	adds	r0, #4
 8014c1a:	f7fd ff39 	bl	8012a90 <rcl_client_is_valid>
 8014c1e:	b308      	cbz	r0, 8014c64 <rcl_action_take_goal_response+0x64>
 8014c20:	6820      	ldr	r0, [r4, #0]
 8014c22:	3008      	adds	r0, #8
 8014c24:	f7fd ff34 	bl	8012a90 <rcl_client_is_valid>
 8014c28:	b1e0      	cbz	r0, 8014c64 <rcl_action_take_goal_response+0x64>
 8014c2a:	6820      	ldr	r0, [r4, #0]
 8014c2c:	300c      	adds	r0, #12
 8014c2e:	f7fe ffe5 	bl	8013bfc <rcl_subscription_is_valid>
 8014c32:	b1b8      	cbz	r0, 8014c64 <rcl_action_take_goal_response+0x64>
 8014c34:	6820      	ldr	r0, [r4, #0]
 8014c36:	3010      	adds	r0, #16
 8014c38:	f7fe ffe0 	bl	8013bfc <rcl_subscription_is_valid>
 8014c3c:	b190      	cbz	r0, 8014c64 <rcl_action_take_goal_response+0x64>
 8014c3e:	b1cd      	cbz	r5, 8014c74 <rcl_action_take_goal_response+0x74>
 8014c40:	b1c6      	cbz	r6, 8014c74 <rcl_action_take_goal_response+0x74>
 8014c42:	462a      	mov	r2, r5
 8014c44:	4631      	mov	r1, r6
 8014c46:	6820      	ldr	r0, [r4, #0]
 8014c48:	f7fd feda 	bl	8012a00 <rcl_take_response>
 8014c4c:	b148      	cbz	r0, 8014c62 <rcl_action_take_goal_response+0x62>
 8014c4e:	280a      	cmp	r0, #10
 8014c50:	d007      	beq.n	8014c62 <rcl_action_take_goal_response+0x62>
 8014c52:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014c56:	f640 0337 	movw	r3, #2103	@ 0x837
 8014c5a:	4290      	cmp	r0, r2
 8014c5c:	bf0c      	ite	eq
 8014c5e:	4618      	moveq	r0, r3
 8014c60:	2001      	movne	r0, #1
 8014c62:	bd70      	pop	{r4, r5, r6, pc}
 8014c64:	f7fd f8d8 	bl	8011e18 <rcutils_reset_error>
 8014c68:	f640 0036 	movw	r0, #2102	@ 0x836
 8014c6c:	bd70      	pop	{r4, r5, r6, pc}
 8014c6e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014c72:	bd70      	pop	{r4, r5, r6, pc}
 8014c74:	200b      	movs	r0, #11
 8014c76:	bd70      	pop	{r4, r5, r6, pc}
 8014c78:	f640 0036 	movw	r0, #2102	@ 0x836
 8014c7c:	4770      	bx	lr
 8014c7e:	bf00      	nop

08014c80 <rcl_action_send_result_request>:
 8014c80:	b390      	cbz	r0, 8014ce8 <rcl_action_send_result_request+0x68>
 8014c82:	b570      	push	{r4, r5, r6, lr}
 8014c84:	4604      	mov	r4, r0
 8014c86:	6800      	ldr	r0, [r0, #0]
 8014c88:	b348      	cbz	r0, 8014cde <rcl_action_send_result_request+0x5e>
 8014c8a:	460e      	mov	r6, r1
 8014c8c:	4615      	mov	r5, r2
 8014c8e:	f7fd feff 	bl	8012a90 <rcl_client_is_valid>
 8014c92:	b1f8      	cbz	r0, 8014cd4 <rcl_action_send_result_request+0x54>
 8014c94:	6820      	ldr	r0, [r4, #0]
 8014c96:	3004      	adds	r0, #4
 8014c98:	f7fd fefa 	bl	8012a90 <rcl_client_is_valid>
 8014c9c:	b1d0      	cbz	r0, 8014cd4 <rcl_action_send_result_request+0x54>
 8014c9e:	6820      	ldr	r0, [r4, #0]
 8014ca0:	3008      	adds	r0, #8
 8014ca2:	f7fd fef5 	bl	8012a90 <rcl_client_is_valid>
 8014ca6:	b1a8      	cbz	r0, 8014cd4 <rcl_action_send_result_request+0x54>
 8014ca8:	6820      	ldr	r0, [r4, #0]
 8014caa:	300c      	adds	r0, #12
 8014cac:	f7fe ffa6 	bl	8013bfc <rcl_subscription_is_valid>
 8014cb0:	b180      	cbz	r0, 8014cd4 <rcl_action_send_result_request+0x54>
 8014cb2:	6820      	ldr	r0, [r4, #0]
 8014cb4:	3010      	adds	r0, #16
 8014cb6:	f7fe ffa1 	bl	8013bfc <rcl_subscription_is_valid>
 8014cba:	b158      	cbz	r0, 8014cd4 <rcl_action_send_result_request+0x54>
 8014cbc:	b195      	cbz	r5, 8014ce4 <rcl_action_send_result_request+0x64>
 8014cbe:	b18e      	cbz	r6, 8014ce4 <rcl_action_send_result_request+0x64>
 8014cc0:	6820      	ldr	r0, [r4, #0]
 8014cc2:	462a      	mov	r2, r5
 8014cc4:	4631      	mov	r1, r6
 8014cc6:	3008      	adds	r0, #8
 8014cc8:	f7fd fe62 	bl	8012990 <rcl_send_request>
 8014ccc:	3800      	subs	r0, #0
 8014cce:	bf18      	it	ne
 8014cd0:	2001      	movne	r0, #1
 8014cd2:	bd70      	pop	{r4, r5, r6, pc}
 8014cd4:	f7fd f8a0 	bl	8011e18 <rcutils_reset_error>
 8014cd8:	f640 0036 	movw	r0, #2102	@ 0x836
 8014cdc:	bd70      	pop	{r4, r5, r6, pc}
 8014cde:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ce2:	bd70      	pop	{r4, r5, r6, pc}
 8014ce4:	200b      	movs	r0, #11
 8014ce6:	bd70      	pop	{r4, r5, r6, pc}
 8014ce8:	f640 0036 	movw	r0, #2102	@ 0x836
 8014cec:	4770      	bx	lr
 8014cee:	bf00      	nop

08014cf0 <rcl_action_take_result_response>:
 8014cf0:	2800      	cmp	r0, #0
 8014cf2:	d03a      	beq.n	8014d6a <rcl_action_take_result_response+0x7a>
 8014cf4:	b570      	push	{r4, r5, r6, lr}
 8014cf6:	4604      	mov	r4, r0
 8014cf8:	6800      	ldr	r0, [r0, #0]
 8014cfa:	b388      	cbz	r0, 8014d60 <rcl_action_take_result_response+0x70>
 8014cfc:	460e      	mov	r6, r1
 8014cfe:	4615      	mov	r5, r2
 8014d00:	f7fd fec6 	bl	8012a90 <rcl_client_is_valid>
 8014d04:	b338      	cbz	r0, 8014d56 <rcl_action_take_result_response+0x66>
 8014d06:	6820      	ldr	r0, [r4, #0]
 8014d08:	3004      	adds	r0, #4
 8014d0a:	f7fd fec1 	bl	8012a90 <rcl_client_is_valid>
 8014d0e:	b310      	cbz	r0, 8014d56 <rcl_action_take_result_response+0x66>
 8014d10:	6820      	ldr	r0, [r4, #0]
 8014d12:	3008      	adds	r0, #8
 8014d14:	f7fd febc 	bl	8012a90 <rcl_client_is_valid>
 8014d18:	b1e8      	cbz	r0, 8014d56 <rcl_action_take_result_response+0x66>
 8014d1a:	6820      	ldr	r0, [r4, #0]
 8014d1c:	300c      	adds	r0, #12
 8014d1e:	f7fe ff6d 	bl	8013bfc <rcl_subscription_is_valid>
 8014d22:	b1c0      	cbz	r0, 8014d56 <rcl_action_take_result_response+0x66>
 8014d24:	6820      	ldr	r0, [r4, #0]
 8014d26:	3010      	adds	r0, #16
 8014d28:	f7fe ff68 	bl	8013bfc <rcl_subscription_is_valid>
 8014d2c:	b198      	cbz	r0, 8014d56 <rcl_action_take_result_response+0x66>
 8014d2e:	b1d5      	cbz	r5, 8014d66 <rcl_action_take_result_response+0x76>
 8014d30:	b1ce      	cbz	r6, 8014d66 <rcl_action_take_result_response+0x76>
 8014d32:	6820      	ldr	r0, [r4, #0]
 8014d34:	462a      	mov	r2, r5
 8014d36:	4631      	mov	r1, r6
 8014d38:	3008      	adds	r0, #8
 8014d3a:	f7fd fe61 	bl	8012a00 <rcl_take_response>
 8014d3e:	b148      	cbz	r0, 8014d54 <rcl_action_take_result_response+0x64>
 8014d40:	280a      	cmp	r0, #10
 8014d42:	d007      	beq.n	8014d54 <rcl_action_take_result_response+0x64>
 8014d44:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014d48:	f640 0337 	movw	r3, #2103	@ 0x837
 8014d4c:	4290      	cmp	r0, r2
 8014d4e:	bf0c      	ite	eq
 8014d50:	4618      	moveq	r0, r3
 8014d52:	2001      	movne	r0, #1
 8014d54:	bd70      	pop	{r4, r5, r6, pc}
 8014d56:	f7fd f85f 	bl	8011e18 <rcutils_reset_error>
 8014d5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8014d5e:	bd70      	pop	{r4, r5, r6, pc}
 8014d60:	f640 0036 	movw	r0, #2102	@ 0x836
 8014d64:	bd70      	pop	{r4, r5, r6, pc}
 8014d66:	200b      	movs	r0, #11
 8014d68:	bd70      	pop	{r4, r5, r6, pc}
 8014d6a:	f640 0036 	movw	r0, #2102	@ 0x836
 8014d6e:	4770      	bx	lr

08014d70 <rcl_action_take_cancel_response>:
 8014d70:	2800      	cmp	r0, #0
 8014d72:	d03a      	beq.n	8014dea <rcl_action_take_cancel_response+0x7a>
 8014d74:	b570      	push	{r4, r5, r6, lr}
 8014d76:	4604      	mov	r4, r0
 8014d78:	6800      	ldr	r0, [r0, #0]
 8014d7a:	b388      	cbz	r0, 8014de0 <rcl_action_take_cancel_response+0x70>
 8014d7c:	460e      	mov	r6, r1
 8014d7e:	4615      	mov	r5, r2
 8014d80:	f7fd fe86 	bl	8012a90 <rcl_client_is_valid>
 8014d84:	b338      	cbz	r0, 8014dd6 <rcl_action_take_cancel_response+0x66>
 8014d86:	6820      	ldr	r0, [r4, #0]
 8014d88:	3004      	adds	r0, #4
 8014d8a:	f7fd fe81 	bl	8012a90 <rcl_client_is_valid>
 8014d8e:	b310      	cbz	r0, 8014dd6 <rcl_action_take_cancel_response+0x66>
 8014d90:	6820      	ldr	r0, [r4, #0]
 8014d92:	3008      	adds	r0, #8
 8014d94:	f7fd fe7c 	bl	8012a90 <rcl_client_is_valid>
 8014d98:	b1e8      	cbz	r0, 8014dd6 <rcl_action_take_cancel_response+0x66>
 8014d9a:	6820      	ldr	r0, [r4, #0]
 8014d9c:	300c      	adds	r0, #12
 8014d9e:	f7fe ff2d 	bl	8013bfc <rcl_subscription_is_valid>
 8014da2:	b1c0      	cbz	r0, 8014dd6 <rcl_action_take_cancel_response+0x66>
 8014da4:	6820      	ldr	r0, [r4, #0]
 8014da6:	3010      	adds	r0, #16
 8014da8:	f7fe ff28 	bl	8013bfc <rcl_subscription_is_valid>
 8014dac:	b198      	cbz	r0, 8014dd6 <rcl_action_take_cancel_response+0x66>
 8014dae:	b1d5      	cbz	r5, 8014de6 <rcl_action_take_cancel_response+0x76>
 8014db0:	b1ce      	cbz	r6, 8014de6 <rcl_action_take_cancel_response+0x76>
 8014db2:	6820      	ldr	r0, [r4, #0]
 8014db4:	462a      	mov	r2, r5
 8014db6:	4631      	mov	r1, r6
 8014db8:	3004      	adds	r0, #4
 8014dba:	f7fd fe21 	bl	8012a00 <rcl_take_response>
 8014dbe:	b148      	cbz	r0, 8014dd4 <rcl_action_take_cancel_response+0x64>
 8014dc0:	280a      	cmp	r0, #10
 8014dc2:	d007      	beq.n	8014dd4 <rcl_action_take_cancel_response+0x64>
 8014dc4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014dc8:	f640 0337 	movw	r3, #2103	@ 0x837
 8014dcc:	4290      	cmp	r0, r2
 8014dce:	bf0c      	ite	eq
 8014dd0:	4618      	moveq	r0, r3
 8014dd2:	2001      	movne	r0, #1
 8014dd4:	bd70      	pop	{r4, r5, r6, pc}
 8014dd6:	f7fd f81f 	bl	8011e18 <rcutils_reset_error>
 8014dda:	f640 0036 	movw	r0, #2102	@ 0x836
 8014dde:	bd70      	pop	{r4, r5, r6, pc}
 8014de0:	f640 0036 	movw	r0, #2102	@ 0x836
 8014de4:	bd70      	pop	{r4, r5, r6, pc}
 8014de6:	200b      	movs	r0, #11
 8014de8:	bd70      	pop	{r4, r5, r6, pc}
 8014dea:	f640 0036 	movw	r0, #2102	@ 0x836
 8014dee:	4770      	bx	lr

08014df0 <rcl_action_take_feedback>:
 8014df0:	2800      	cmp	r0, #0
 8014df2:	d038      	beq.n	8014e66 <rcl_action_take_feedback+0x76>
 8014df4:	b530      	push	{r4, r5, lr}
 8014df6:	4604      	mov	r4, r0
 8014df8:	6800      	ldr	r0, [r0, #0]
 8014dfa:	b091      	sub	sp, #68	@ 0x44
 8014dfc:	b378      	cbz	r0, 8014e5e <rcl_action_take_feedback+0x6e>
 8014dfe:	460d      	mov	r5, r1
 8014e00:	f7fd fe46 	bl	8012a90 <rcl_client_is_valid>
 8014e04:	b328      	cbz	r0, 8014e52 <rcl_action_take_feedback+0x62>
 8014e06:	6820      	ldr	r0, [r4, #0]
 8014e08:	3004      	adds	r0, #4
 8014e0a:	f7fd fe41 	bl	8012a90 <rcl_client_is_valid>
 8014e0e:	b300      	cbz	r0, 8014e52 <rcl_action_take_feedback+0x62>
 8014e10:	6820      	ldr	r0, [r4, #0]
 8014e12:	3008      	adds	r0, #8
 8014e14:	f7fd fe3c 	bl	8012a90 <rcl_client_is_valid>
 8014e18:	b1d8      	cbz	r0, 8014e52 <rcl_action_take_feedback+0x62>
 8014e1a:	6820      	ldr	r0, [r4, #0]
 8014e1c:	300c      	adds	r0, #12
 8014e1e:	f7fe feed 	bl	8013bfc <rcl_subscription_is_valid>
 8014e22:	b1b0      	cbz	r0, 8014e52 <rcl_action_take_feedback+0x62>
 8014e24:	6820      	ldr	r0, [r4, #0]
 8014e26:	3010      	adds	r0, #16
 8014e28:	f7fe fee8 	bl	8013bfc <rcl_subscription_is_valid>
 8014e2c:	b188      	cbz	r0, 8014e52 <rcl_action_take_feedback+0x62>
 8014e2e:	b1ed      	cbz	r5, 8014e6c <rcl_action_take_feedback+0x7c>
 8014e30:	6820      	ldr	r0, [r4, #0]
 8014e32:	2300      	movs	r3, #0
 8014e34:	466a      	mov	r2, sp
 8014e36:	4629      	mov	r1, r5
 8014e38:	300c      	adds	r0, #12
 8014e3a:	f7fe fe83 	bl	8013b44 <rcl_take>
 8014e3e:	b160      	cbz	r0, 8014e5a <rcl_action_take_feedback+0x6a>
 8014e40:	f240 1391 	movw	r3, #401	@ 0x191
 8014e44:	4298      	cmp	r0, r3
 8014e46:	d014      	beq.n	8014e72 <rcl_action_take_feedback+0x82>
 8014e48:	280a      	cmp	r0, #10
 8014e4a:	bf18      	it	ne
 8014e4c:	2001      	movne	r0, #1
 8014e4e:	b011      	add	sp, #68	@ 0x44
 8014e50:	bd30      	pop	{r4, r5, pc}
 8014e52:	f7fc ffe1 	bl	8011e18 <rcutils_reset_error>
 8014e56:	f640 0036 	movw	r0, #2102	@ 0x836
 8014e5a:	b011      	add	sp, #68	@ 0x44
 8014e5c:	bd30      	pop	{r4, r5, pc}
 8014e5e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014e62:	b011      	add	sp, #68	@ 0x44
 8014e64:	bd30      	pop	{r4, r5, pc}
 8014e66:	f640 0036 	movw	r0, #2102	@ 0x836
 8014e6a:	4770      	bx	lr
 8014e6c:	200b      	movs	r0, #11
 8014e6e:	b011      	add	sp, #68	@ 0x44
 8014e70:	bd30      	pop	{r4, r5, pc}
 8014e72:	f640 0037 	movw	r0, #2103	@ 0x837
 8014e76:	e7f0      	b.n	8014e5a <rcl_action_take_feedback+0x6a>

08014e78 <rcl_action_wait_set_add_action_client>:
 8014e78:	2800      	cmp	r0, #0
 8014e7a:	d048      	beq.n	8014f0e <rcl_action_wait_set_add_action_client+0x96>
 8014e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e7e:	460c      	mov	r4, r1
 8014e80:	2900      	cmp	r1, #0
 8014e82:	d03c      	beq.n	8014efe <rcl_action_wait_set_add_action_client+0x86>
 8014e84:	4605      	mov	r5, r0
 8014e86:	6808      	ldr	r0, [r1, #0]
 8014e88:	2800      	cmp	r0, #0
 8014e8a:	d038      	beq.n	8014efe <rcl_action_wait_set_add_action_client+0x86>
 8014e8c:	4617      	mov	r7, r2
 8014e8e:	461e      	mov	r6, r3
 8014e90:	f7fd fdfe 	bl	8012a90 <rcl_client_is_valid>
 8014e94:	b3b0      	cbz	r0, 8014f04 <rcl_action_wait_set_add_action_client+0x8c>
 8014e96:	6820      	ldr	r0, [r4, #0]
 8014e98:	3004      	adds	r0, #4
 8014e9a:	f7fd fdf9 	bl	8012a90 <rcl_client_is_valid>
 8014e9e:	b388      	cbz	r0, 8014f04 <rcl_action_wait_set_add_action_client+0x8c>
 8014ea0:	6820      	ldr	r0, [r4, #0]
 8014ea2:	3008      	adds	r0, #8
 8014ea4:	f7fd fdf4 	bl	8012a90 <rcl_client_is_valid>
 8014ea8:	b360      	cbz	r0, 8014f04 <rcl_action_wait_set_add_action_client+0x8c>
 8014eaa:	6820      	ldr	r0, [r4, #0]
 8014eac:	300c      	adds	r0, #12
 8014eae:	f7fe fea5 	bl	8013bfc <rcl_subscription_is_valid>
 8014eb2:	b338      	cbz	r0, 8014f04 <rcl_action_wait_set_add_action_client+0x8c>
 8014eb4:	6820      	ldr	r0, [r4, #0]
 8014eb6:	3010      	adds	r0, #16
 8014eb8:	f7fe fea0 	bl	8013bfc <rcl_subscription_is_valid>
 8014ebc:	b310      	cbz	r0, 8014f04 <rcl_action_wait_set_add_action_client+0x8c>
 8014ebe:	6821      	ldr	r1, [r4, #0]
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8014ec6:	f7ff fcd1 	bl	801486c <rcl_wait_set_add_client>
 8014eca:	b9b8      	cbnz	r0, 8014efc <rcl_action_wait_set_add_action_client+0x84>
 8014ecc:	6821      	ldr	r1, [r4, #0]
 8014ece:	4628      	mov	r0, r5
 8014ed0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8014ed4:	3104      	adds	r1, #4
 8014ed6:	f7ff fcc9 	bl	801486c <rcl_wait_set_add_client>
 8014eda:	b978      	cbnz	r0, 8014efc <rcl_action_wait_set_add_action_client+0x84>
 8014edc:	6821      	ldr	r1, [r4, #0]
 8014ede:	4628      	mov	r0, r5
 8014ee0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8014ee4:	3108      	adds	r1, #8
 8014ee6:	f7ff fcc1 	bl	801486c <rcl_wait_set_add_client>
 8014eea:	b938      	cbnz	r0, 8014efc <rcl_action_wait_set_add_action_client+0x84>
 8014eec:	6821      	ldr	r1, [r4, #0]
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8014ef4:	310c      	adds	r1, #12
 8014ef6:	f7ff f969 	bl	80141cc <rcl_wait_set_add_subscription>
 8014efa:	b158      	cbz	r0, 8014f14 <rcl_action_wait_set_add_action_client+0x9c>
 8014efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014efe:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f04:	f7fc ff88 	bl	8011e18 <rcutils_reset_error>
 8014f08:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f0e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f12:	4770      	bx	lr
 8014f14:	6821      	ldr	r1, [r4, #0]
 8014f16:	4628      	mov	r0, r5
 8014f18:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8014f1c:	3110      	adds	r1, #16
 8014f1e:	f7ff f955 	bl	80141cc <rcl_wait_set_add_subscription>
 8014f22:	2800      	cmp	r0, #0
 8014f24:	d1ea      	bne.n	8014efc <rcl_action_wait_set_add_action_client+0x84>
 8014f26:	b11f      	cbz	r7, 8014f30 <rcl_action_wait_set_add_action_client+0xb8>
 8014f28:	6823      	ldr	r3, [r4, #0]
 8014f2a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8014f2e:	603b      	str	r3, [r7, #0]
 8014f30:	2e00      	cmp	r6, #0
 8014f32:	d0e3      	beq.n	8014efc <rcl_action_wait_set_add_action_client+0x84>
 8014f34:	6823      	ldr	r3, [r4, #0]
 8014f36:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8014f3a:	6033      	str	r3, [r6, #0]
 8014f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f3e:	bf00      	nop

08014f40 <rcl_action_client_wait_set_get_entities_ready>:
 8014f40:	2800      	cmp	r0, #0
 8014f42:	d050      	beq.n	8014fe6 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8014f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f48:	460c      	mov	r4, r1
 8014f4a:	2900      	cmp	r1, #0
 8014f4c:	d03e      	beq.n	8014fcc <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8014f4e:	4605      	mov	r5, r0
 8014f50:	6808      	ldr	r0, [r1, #0]
 8014f52:	2800      	cmp	r0, #0
 8014f54:	d03a      	beq.n	8014fcc <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8014f56:	4616      	mov	r6, r2
 8014f58:	461f      	mov	r7, r3
 8014f5a:	f7fd fd99 	bl	8012a90 <rcl_client_is_valid>
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	d038      	beq.n	8014fd4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8014f62:	6820      	ldr	r0, [r4, #0]
 8014f64:	3004      	adds	r0, #4
 8014f66:	f7fd fd93 	bl	8012a90 <rcl_client_is_valid>
 8014f6a:	2800      	cmp	r0, #0
 8014f6c:	d032      	beq.n	8014fd4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8014f6e:	6820      	ldr	r0, [r4, #0]
 8014f70:	3008      	adds	r0, #8
 8014f72:	f7fd fd8d 	bl	8012a90 <rcl_client_is_valid>
 8014f76:	b368      	cbz	r0, 8014fd4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8014f78:	6820      	ldr	r0, [r4, #0]
 8014f7a:	300c      	adds	r0, #12
 8014f7c:	f7fe fe3e 	bl	8013bfc <rcl_subscription_is_valid>
 8014f80:	b340      	cbz	r0, 8014fd4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8014f82:	6820      	ldr	r0, [r4, #0]
 8014f84:	3010      	adds	r0, #16
 8014f86:	f7fe fe39 	bl	8013bfc <rcl_subscription_is_valid>
 8014f8a:	b318      	cbz	r0, 8014fd4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8014f8c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8014f90:	2a00      	cmp	r2, #0
 8014f92:	bf18      	it	ne
 8014f94:	2b00      	cmpne	r3, #0
 8014f96:	9b08      	ldr	r3, [sp, #32]
 8014f98:	bf0c      	ite	eq
 8014f9a:	2101      	moveq	r1, #1
 8014f9c:	2100      	movne	r1, #0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	bf08      	it	eq
 8014fa2:	f041 0101 	orreq.w	r1, r1, #1
 8014fa6:	2f00      	cmp	r7, #0
 8014fa8:	bf08      	it	eq
 8014faa:	f041 0101 	orreq.w	r1, r1, #1
 8014fae:	b9b9      	cbnz	r1, 8014fe0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8014fb0:	b1b6      	cbz	r6, 8014fe0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8014fb2:	6823      	ldr	r3, [r4, #0]
 8014fb4:	686c      	ldr	r4, [r5, #4]
 8014fb6:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8014fba:	428a      	cmp	r2, r1
 8014fbc:	4610      	mov	r0, r2
 8014fbe:	bf38      	it	cc
 8014fc0:	4608      	movcc	r0, r1
 8014fc2:	4284      	cmp	r4, r0
 8014fc4:	d812      	bhi.n	8014fec <rcl_action_client_wait_set_get_entities_ready+0xac>
 8014fc6:	2001      	movs	r0, #1
 8014fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fcc:	f640 0036 	movw	r0, #2102	@ 0x836
 8014fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fd4:	f7fc ff20 	bl	8011e18 <rcutils_reset_error>
 8014fd8:	f640 0036 	movw	r0, #2102	@ 0x836
 8014fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fe0:	200b      	movs	r0, #11
 8014fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fe6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014fea:	4770      	bx	lr
 8014fec:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8014ff0:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8014ff4:	45f0      	cmp	r8, lr
 8014ff6:	4640      	mov	r0, r8
 8014ff8:	69ec      	ldr	r4, [r5, #28]
 8014ffa:	bf38      	it	cc
 8014ffc:	4670      	movcc	r0, lr
 8014ffe:	4560      	cmp	r0, ip
 8015000:	bf38      	it	cc
 8015002:	4660      	movcc	r0, ip
 8015004:	4284      	cmp	r4, r0
 8015006:	d9de      	bls.n	8014fc6 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8015008:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801500c:	682d      	ldr	r5, [r5, #0]
 801500e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8015012:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8015016:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801501a:	1a18      	subs	r0, r3, r0
 801501c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8015020:	f103 0c0c 	add.w	ip, r3, #12
 8015024:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8015028:	fab0 f080 	clz	r0, r0
 801502c:	eba5 050c 	sub.w	r5, r5, ip
 8015030:	0940      	lsrs	r0, r0, #5
 8015032:	fab5 f585 	clz	r5, r5
 8015036:	096d      	lsrs	r5, r5, #5
 8015038:	7035      	strb	r5, [r6, #0]
 801503a:	f103 0510 	add.w	r5, r3, #16
 801503e:	1b64      	subs	r4, r4, r5
 8015040:	9d08      	ldr	r5, [sp, #32]
 8015042:	fab4 f484 	clz	r4, r4
 8015046:	0964      	lsrs	r4, r4, #5
 8015048:	703c      	strb	r4, [r7, #0]
 801504a:	1d1c      	adds	r4, r3, #4
 801504c:	3308      	adds	r3, #8
 801504e:	7028      	strb	r0, [r5, #0]
 8015050:	1b09      	subs	r1, r1, r4
 8015052:	2000      	movs	r0, #0
 8015054:	1ad3      	subs	r3, r2, r3
 8015056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015058:	fab1 f181 	clz	r1, r1
 801505c:	fab3 f383 	clz	r3, r3
 8015060:	0949      	lsrs	r1, r1, #5
 8015062:	095b      	lsrs	r3, r3, #5
 8015064:	7011      	strb	r1, [r2, #0]
 8015066:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015068:	7013      	strb	r3, [r2, #0]
 801506a:	e7b1      	b.n	8014fd0 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801506c <rcl_action_take_goal_request>:
 801506c:	2800      	cmp	r0, #0
 801506e:	d039      	beq.n	80150e4 <rcl_action_take_goal_request+0x78>
 8015070:	b570      	push	{r4, r5, r6, lr}
 8015072:	4604      	mov	r4, r0
 8015074:	6800      	ldr	r0, [r0, #0]
 8015076:	b380      	cbz	r0, 80150da <rcl_action_take_goal_request+0x6e>
 8015078:	460e      	mov	r6, r1
 801507a:	4615      	mov	r5, r2
 801507c:	f7fe fc76 	bl	801396c <rcl_service_is_valid>
 8015080:	b330      	cbz	r0, 80150d0 <rcl_action_take_goal_request+0x64>
 8015082:	6820      	ldr	r0, [r4, #0]
 8015084:	3004      	adds	r0, #4
 8015086:	f7fe fc71 	bl	801396c <rcl_service_is_valid>
 801508a:	b308      	cbz	r0, 80150d0 <rcl_action_take_goal_request+0x64>
 801508c:	6820      	ldr	r0, [r4, #0]
 801508e:	3008      	adds	r0, #8
 8015090:	f7fe fc6c 	bl	801396c <rcl_service_is_valid>
 8015094:	b1e0      	cbz	r0, 80150d0 <rcl_action_take_goal_request+0x64>
 8015096:	6820      	ldr	r0, [r4, #0]
 8015098:	300c      	adds	r0, #12
 801509a:	f7fe fae9 	bl	8013670 <rcl_publisher_is_valid>
 801509e:	b1b8      	cbz	r0, 80150d0 <rcl_action_take_goal_request+0x64>
 80150a0:	6820      	ldr	r0, [r4, #0]
 80150a2:	3010      	adds	r0, #16
 80150a4:	f7fe fae4 	bl	8013670 <rcl_publisher_is_valid>
 80150a8:	b190      	cbz	r0, 80150d0 <rcl_action_take_goal_request+0x64>
 80150aa:	b1cd      	cbz	r5, 80150e0 <rcl_action_take_goal_request+0x74>
 80150ac:	b1c6      	cbz	r6, 80150e0 <rcl_action_take_goal_request+0x74>
 80150ae:	462a      	mov	r2, r5
 80150b0:	4631      	mov	r1, r6
 80150b2:	6820      	ldr	r0, [r4, #0]
 80150b4:	f7fe fc02 	bl	80138bc <rcl_take_request>
 80150b8:	b148      	cbz	r0, 80150ce <rcl_action_take_goal_request+0x62>
 80150ba:	280a      	cmp	r0, #10
 80150bc:	d007      	beq.n	80150ce <rcl_action_take_goal_request+0x62>
 80150be:	f240 2259 	movw	r2, #601	@ 0x259
 80150c2:	f640 0399 	movw	r3, #2201	@ 0x899
 80150c6:	4290      	cmp	r0, r2
 80150c8:	bf0c      	ite	eq
 80150ca:	4618      	moveq	r0, r3
 80150cc:	2001      	movne	r0, #1
 80150ce:	bd70      	pop	{r4, r5, r6, pc}
 80150d0:	f7fc fea2 	bl	8011e18 <rcutils_reset_error>
 80150d4:	f640 0098 	movw	r0, #2200	@ 0x898
 80150d8:	bd70      	pop	{r4, r5, r6, pc}
 80150da:	f640 0098 	movw	r0, #2200	@ 0x898
 80150de:	bd70      	pop	{r4, r5, r6, pc}
 80150e0:	200b      	movs	r0, #11
 80150e2:	bd70      	pop	{r4, r5, r6, pc}
 80150e4:	f640 0098 	movw	r0, #2200	@ 0x898
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop

080150ec <rcl_action_send_goal_response>:
 80150ec:	b390      	cbz	r0, 8015154 <rcl_action_send_goal_response+0x68>
 80150ee:	b570      	push	{r4, r5, r6, lr}
 80150f0:	4604      	mov	r4, r0
 80150f2:	6800      	ldr	r0, [r0, #0]
 80150f4:	b348      	cbz	r0, 801514a <rcl_action_send_goal_response+0x5e>
 80150f6:	460e      	mov	r6, r1
 80150f8:	4615      	mov	r5, r2
 80150fa:	f7fe fc37 	bl	801396c <rcl_service_is_valid>
 80150fe:	b1f8      	cbz	r0, 8015140 <rcl_action_send_goal_response+0x54>
 8015100:	6820      	ldr	r0, [r4, #0]
 8015102:	3004      	adds	r0, #4
 8015104:	f7fe fc32 	bl	801396c <rcl_service_is_valid>
 8015108:	b1d0      	cbz	r0, 8015140 <rcl_action_send_goal_response+0x54>
 801510a:	6820      	ldr	r0, [r4, #0]
 801510c:	3008      	adds	r0, #8
 801510e:	f7fe fc2d 	bl	801396c <rcl_service_is_valid>
 8015112:	b1a8      	cbz	r0, 8015140 <rcl_action_send_goal_response+0x54>
 8015114:	6820      	ldr	r0, [r4, #0]
 8015116:	300c      	adds	r0, #12
 8015118:	f7fe faaa 	bl	8013670 <rcl_publisher_is_valid>
 801511c:	b180      	cbz	r0, 8015140 <rcl_action_send_goal_response+0x54>
 801511e:	6820      	ldr	r0, [r4, #0]
 8015120:	3010      	adds	r0, #16
 8015122:	f7fe faa5 	bl	8013670 <rcl_publisher_is_valid>
 8015126:	b158      	cbz	r0, 8015140 <rcl_action_send_goal_response+0x54>
 8015128:	b195      	cbz	r5, 8015150 <rcl_action_send_goal_response+0x64>
 801512a:	b18e      	cbz	r6, 8015150 <rcl_action_send_goal_response+0x64>
 801512c:	462a      	mov	r2, r5
 801512e:	4631      	mov	r1, r6
 8015130:	6820      	ldr	r0, [r4, #0]
 8015132:	f7fe fc03 	bl	801393c <rcl_send_response>
 8015136:	b110      	cbz	r0, 801513e <rcl_action_send_goal_response+0x52>
 8015138:	2802      	cmp	r0, #2
 801513a:	bf18      	it	ne
 801513c:	2001      	movne	r0, #1
 801513e:	bd70      	pop	{r4, r5, r6, pc}
 8015140:	f7fc fe6a 	bl	8011e18 <rcutils_reset_error>
 8015144:	f640 0098 	movw	r0, #2200	@ 0x898
 8015148:	bd70      	pop	{r4, r5, r6, pc}
 801514a:	f640 0098 	movw	r0, #2200	@ 0x898
 801514e:	bd70      	pop	{r4, r5, r6, pc}
 8015150:	200b      	movs	r0, #11
 8015152:	bd70      	pop	{r4, r5, r6, pc}
 8015154:	f640 0098 	movw	r0, #2200	@ 0x898
 8015158:	4770      	bx	lr
 801515a:	bf00      	nop

0801515c <rcl_action_take_result_request>:
 801515c:	2800      	cmp	r0, #0
 801515e:	d03a      	beq.n	80151d6 <rcl_action_take_result_request+0x7a>
 8015160:	b570      	push	{r4, r5, r6, lr}
 8015162:	4604      	mov	r4, r0
 8015164:	6800      	ldr	r0, [r0, #0]
 8015166:	b388      	cbz	r0, 80151cc <rcl_action_take_result_request+0x70>
 8015168:	460e      	mov	r6, r1
 801516a:	4615      	mov	r5, r2
 801516c:	f7fe fbfe 	bl	801396c <rcl_service_is_valid>
 8015170:	b338      	cbz	r0, 80151c2 <rcl_action_take_result_request+0x66>
 8015172:	6820      	ldr	r0, [r4, #0]
 8015174:	3004      	adds	r0, #4
 8015176:	f7fe fbf9 	bl	801396c <rcl_service_is_valid>
 801517a:	b310      	cbz	r0, 80151c2 <rcl_action_take_result_request+0x66>
 801517c:	6820      	ldr	r0, [r4, #0]
 801517e:	3008      	adds	r0, #8
 8015180:	f7fe fbf4 	bl	801396c <rcl_service_is_valid>
 8015184:	b1e8      	cbz	r0, 80151c2 <rcl_action_take_result_request+0x66>
 8015186:	6820      	ldr	r0, [r4, #0]
 8015188:	300c      	adds	r0, #12
 801518a:	f7fe fa71 	bl	8013670 <rcl_publisher_is_valid>
 801518e:	b1c0      	cbz	r0, 80151c2 <rcl_action_take_result_request+0x66>
 8015190:	6820      	ldr	r0, [r4, #0]
 8015192:	3010      	adds	r0, #16
 8015194:	f7fe fa6c 	bl	8013670 <rcl_publisher_is_valid>
 8015198:	b198      	cbz	r0, 80151c2 <rcl_action_take_result_request+0x66>
 801519a:	b1d5      	cbz	r5, 80151d2 <rcl_action_take_result_request+0x76>
 801519c:	b1ce      	cbz	r6, 80151d2 <rcl_action_take_result_request+0x76>
 801519e:	6820      	ldr	r0, [r4, #0]
 80151a0:	462a      	mov	r2, r5
 80151a2:	4631      	mov	r1, r6
 80151a4:	3008      	adds	r0, #8
 80151a6:	f7fe fb89 	bl	80138bc <rcl_take_request>
 80151aa:	b148      	cbz	r0, 80151c0 <rcl_action_take_result_request+0x64>
 80151ac:	280a      	cmp	r0, #10
 80151ae:	d007      	beq.n	80151c0 <rcl_action_take_result_request+0x64>
 80151b0:	f240 2259 	movw	r2, #601	@ 0x259
 80151b4:	f640 0399 	movw	r3, #2201	@ 0x899
 80151b8:	4290      	cmp	r0, r2
 80151ba:	bf0c      	ite	eq
 80151bc:	4618      	moveq	r0, r3
 80151be:	2001      	movne	r0, #1
 80151c0:	bd70      	pop	{r4, r5, r6, pc}
 80151c2:	f7fc fe29 	bl	8011e18 <rcutils_reset_error>
 80151c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80151ca:	bd70      	pop	{r4, r5, r6, pc}
 80151cc:	f640 0098 	movw	r0, #2200	@ 0x898
 80151d0:	bd70      	pop	{r4, r5, r6, pc}
 80151d2:	200b      	movs	r0, #11
 80151d4:	bd70      	pop	{r4, r5, r6, pc}
 80151d6:	f640 0098 	movw	r0, #2200	@ 0x898
 80151da:	4770      	bx	lr

080151dc <rcl_action_take_cancel_request>:
 80151dc:	2800      	cmp	r0, #0
 80151de:	d03a      	beq.n	8015256 <rcl_action_take_cancel_request+0x7a>
 80151e0:	b570      	push	{r4, r5, r6, lr}
 80151e2:	4604      	mov	r4, r0
 80151e4:	6800      	ldr	r0, [r0, #0]
 80151e6:	b388      	cbz	r0, 801524c <rcl_action_take_cancel_request+0x70>
 80151e8:	460e      	mov	r6, r1
 80151ea:	4615      	mov	r5, r2
 80151ec:	f7fe fbbe 	bl	801396c <rcl_service_is_valid>
 80151f0:	b338      	cbz	r0, 8015242 <rcl_action_take_cancel_request+0x66>
 80151f2:	6820      	ldr	r0, [r4, #0]
 80151f4:	3004      	adds	r0, #4
 80151f6:	f7fe fbb9 	bl	801396c <rcl_service_is_valid>
 80151fa:	b310      	cbz	r0, 8015242 <rcl_action_take_cancel_request+0x66>
 80151fc:	6820      	ldr	r0, [r4, #0]
 80151fe:	3008      	adds	r0, #8
 8015200:	f7fe fbb4 	bl	801396c <rcl_service_is_valid>
 8015204:	b1e8      	cbz	r0, 8015242 <rcl_action_take_cancel_request+0x66>
 8015206:	6820      	ldr	r0, [r4, #0]
 8015208:	300c      	adds	r0, #12
 801520a:	f7fe fa31 	bl	8013670 <rcl_publisher_is_valid>
 801520e:	b1c0      	cbz	r0, 8015242 <rcl_action_take_cancel_request+0x66>
 8015210:	6820      	ldr	r0, [r4, #0]
 8015212:	3010      	adds	r0, #16
 8015214:	f7fe fa2c 	bl	8013670 <rcl_publisher_is_valid>
 8015218:	b198      	cbz	r0, 8015242 <rcl_action_take_cancel_request+0x66>
 801521a:	b1d5      	cbz	r5, 8015252 <rcl_action_take_cancel_request+0x76>
 801521c:	b1ce      	cbz	r6, 8015252 <rcl_action_take_cancel_request+0x76>
 801521e:	6820      	ldr	r0, [r4, #0]
 8015220:	462a      	mov	r2, r5
 8015222:	4631      	mov	r1, r6
 8015224:	3004      	adds	r0, #4
 8015226:	f7fe fb49 	bl	80138bc <rcl_take_request>
 801522a:	b148      	cbz	r0, 8015240 <rcl_action_take_cancel_request+0x64>
 801522c:	280a      	cmp	r0, #10
 801522e:	d007      	beq.n	8015240 <rcl_action_take_cancel_request+0x64>
 8015230:	f240 2259 	movw	r2, #601	@ 0x259
 8015234:	f640 0399 	movw	r3, #2201	@ 0x899
 8015238:	4290      	cmp	r0, r2
 801523a:	bf0c      	ite	eq
 801523c:	4618      	moveq	r0, r3
 801523e:	2001      	movne	r0, #1
 8015240:	bd70      	pop	{r4, r5, r6, pc}
 8015242:	f7fc fde9 	bl	8011e18 <rcutils_reset_error>
 8015246:	f640 0098 	movw	r0, #2200	@ 0x898
 801524a:	bd70      	pop	{r4, r5, r6, pc}
 801524c:	f640 0098 	movw	r0, #2200	@ 0x898
 8015250:	bd70      	pop	{r4, r5, r6, pc}
 8015252:	200b      	movs	r0, #11
 8015254:	bd70      	pop	{r4, r5, r6, pc}
 8015256:	f640 0098 	movw	r0, #2200	@ 0x898
 801525a:	4770      	bx	lr

0801525c <rcl_action_send_cancel_response>:
 801525c:	b398      	cbz	r0, 80152c6 <rcl_action_send_cancel_response+0x6a>
 801525e:	b570      	push	{r4, r5, r6, lr}
 8015260:	4604      	mov	r4, r0
 8015262:	6800      	ldr	r0, [r0, #0]
 8015264:	b350      	cbz	r0, 80152bc <rcl_action_send_cancel_response+0x60>
 8015266:	460e      	mov	r6, r1
 8015268:	4615      	mov	r5, r2
 801526a:	f7fe fb7f 	bl	801396c <rcl_service_is_valid>
 801526e:	b300      	cbz	r0, 80152b2 <rcl_action_send_cancel_response+0x56>
 8015270:	6820      	ldr	r0, [r4, #0]
 8015272:	3004      	adds	r0, #4
 8015274:	f7fe fb7a 	bl	801396c <rcl_service_is_valid>
 8015278:	b1d8      	cbz	r0, 80152b2 <rcl_action_send_cancel_response+0x56>
 801527a:	6820      	ldr	r0, [r4, #0]
 801527c:	3008      	adds	r0, #8
 801527e:	f7fe fb75 	bl	801396c <rcl_service_is_valid>
 8015282:	b1b0      	cbz	r0, 80152b2 <rcl_action_send_cancel_response+0x56>
 8015284:	6820      	ldr	r0, [r4, #0]
 8015286:	300c      	adds	r0, #12
 8015288:	f7fe f9f2 	bl	8013670 <rcl_publisher_is_valid>
 801528c:	b188      	cbz	r0, 80152b2 <rcl_action_send_cancel_response+0x56>
 801528e:	6820      	ldr	r0, [r4, #0]
 8015290:	3010      	adds	r0, #16
 8015292:	f7fe f9ed 	bl	8013670 <rcl_publisher_is_valid>
 8015296:	b160      	cbz	r0, 80152b2 <rcl_action_send_cancel_response+0x56>
 8015298:	b19d      	cbz	r5, 80152c2 <rcl_action_send_cancel_response+0x66>
 801529a:	b196      	cbz	r6, 80152c2 <rcl_action_send_cancel_response+0x66>
 801529c:	6820      	ldr	r0, [r4, #0]
 801529e:	462a      	mov	r2, r5
 80152a0:	4631      	mov	r1, r6
 80152a2:	3004      	adds	r0, #4
 80152a4:	f7fe fb4a 	bl	801393c <rcl_send_response>
 80152a8:	b110      	cbz	r0, 80152b0 <rcl_action_send_cancel_response+0x54>
 80152aa:	2802      	cmp	r0, #2
 80152ac:	bf18      	it	ne
 80152ae:	2001      	movne	r0, #1
 80152b0:	bd70      	pop	{r4, r5, r6, pc}
 80152b2:	f7fc fdb1 	bl	8011e18 <rcutils_reset_error>
 80152b6:	f640 0098 	movw	r0, #2200	@ 0x898
 80152ba:	bd70      	pop	{r4, r5, r6, pc}
 80152bc:	f640 0098 	movw	r0, #2200	@ 0x898
 80152c0:	bd70      	pop	{r4, r5, r6, pc}
 80152c2:	200b      	movs	r0, #11
 80152c4:	bd70      	pop	{r4, r5, r6, pc}
 80152c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80152ca:	4770      	bx	lr

080152cc <rcl_action_wait_set_add_action_server>:
 80152cc:	2800      	cmp	r0, #0
 80152ce:	d04d      	beq.n	801536c <rcl_action_wait_set_add_action_server+0xa0>
 80152d0:	b570      	push	{r4, r5, r6, lr}
 80152d2:	460c      	mov	r4, r1
 80152d4:	b159      	cbz	r1, 80152ee <rcl_action_wait_set_add_action_server+0x22>
 80152d6:	4605      	mov	r5, r0
 80152d8:	6808      	ldr	r0, [r1, #0]
 80152da:	b140      	cbz	r0, 80152ee <rcl_action_wait_set_add_action_server+0x22>
 80152dc:	4616      	mov	r6, r2
 80152de:	f7fe fb45 	bl	801396c <rcl_service_is_valid>
 80152e2:	b120      	cbz	r0, 80152ee <rcl_action_wait_set_add_action_server+0x22>
 80152e4:	6820      	ldr	r0, [r4, #0]
 80152e6:	3004      	adds	r0, #4
 80152e8:	f7fe fb40 	bl	801396c <rcl_service_is_valid>
 80152ec:	b910      	cbnz	r0, 80152f4 <rcl_action_wait_set_add_action_server+0x28>
 80152ee:	f640 0098 	movw	r0, #2200	@ 0x898
 80152f2:	bd70      	pop	{r4, r5, r6, pc}
 80152f4:	6820      	ldr	r0, [r4, #0]
 80152f6:	3008      	adds	r0, #8
 80152f8:	f7fe fb38 	bl	801396c <rcl_service_is_valid>
 80152fc:	2800      	cmp	r0, #0
 80152fe:	d0f6      	beq.n	80152ee <rcl_action_wait_set_add_action_server+0x22>
 8015300:	6820      	ldr	r0, [r4, #0]
 8015302:	300c      	adds	r0, #12
 8015304:	f7fe f9cc 	bl	80136a0 <rcl_publisher_is_valid_except_context>
 8015308:	2800      	cmp	r0, #0
 801530a:	d0f0      	beq.n	80152ee <rcl_action_wait_set_add_action_server+0x22>
 801530c:	6820      	ldr	r0, [r4, #0]
 801530e:	3010      	adds	r0, #16
 8015310:	f7fe f9c6 	bl	80136a0 <rcl_publisher_is_valid_except_context>
 8015314:	2800      	cmp	r0, #0
 8015316:	d0ea      	beq.n	80152ee <rcl_action_wait_set_add_action_server+0x22>
 8015318:	6821      	ldr	r1, [r4, #0]
 801531a:	4628      	mov	r0, r5
 801531c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015320:	f7ff fad0 	bl	80148c4 <rcl_wait_set_add_service>
 8015324:	2800      	cmp	r0, #0
 8015326:	d1e4      	bne.n	80152f2 <rcl_action_wait_set_add_action_server+0x26>
 8015328:	6821      	ldr	r1, [r4, #0]
 801532a:	4628      	mov	r0, r5
 801532c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015330:	3104      	adds	r1, #4
 8015332:	f7ff fac7 	bl	80148c4 <rcl_wait_set_add_service>
 8015336:	2800      	cmp	r0, #0
 8015338:	d1db      	bne.n	80152f2 <rcl_action_wait_set_add_action_server+0x26>
 801533a:	6821      	ldr	r1, [r4, #0]
 801533c:	4628      	mov	r0, r5
 801533e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015342:	3108      	adds	r1, #8
 8015344:	f7ff fabe 	bl	80148c4 <rcl_wait_set_add_service>
 8015348:	2800      	cmp	r0, #0
 801534a:	d1d2      	bne.n	80152f2 <rcl_action_wait_set_add_action_server+0x26>
 801534c:	6821      	ldr	r1, [r4, #0]
 801534e:	4628      	mov	r0, r5
 8015350:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015354:	3114      	adds	r1, #20
 8015356:	f7ff fa59 	bl	801480c <rcl_wait_set_add_timer>
 801535a:	2800      	cmp	r0, #0
 801535c:	d1c9      	bne.n	80152f2 <rcl_action_wait_set_add_action_server+0x26>
 801535e:	2e00      	cmp	r6, #0
 8015360:	d0c7      	beq.n	80152f2 <rcl_action_wait_set_add_action_server+0x26>
 8015362:	6823      	ldr	r3, [r4, #0]
 8015364:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8015368:	6033      	str	r3, [r6, #0]
 801536a:	bd70      	pop	{r4, r5, r6, pc}
 801536c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015370:	4770      	bx	lr
 8015372:	bf00      	nop

08015374 <rcl_action_server_wait_set_get_entities_ready>:
 8015374:	2800      	cmp	r0, #0
 8015376:	d067      	beq.n	8015448 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8015378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801537c:	460c      	mov	r4, r1
 801537e:	b161      	cbz	r1, 801539a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015380:	4605      	mov	r5, r0
 8015382:	6808      	ldr	r0, [r1, #0]
 8015384:	b148      	cbz	r0, 801539a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015386:	4616      	mov	r6, r2
 8015388:	4698      	mov	r8, r3
 801538a:	f7fe faef 	bl	801396c <rcl_service_is_valid>
 801538e:	b120      	cbz	r0, 801539a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015390:	6820      	ldr	r0, [r4, #0]
 8015392:	3004      	adds	r0, #4
 8015394:	f7fe faea 	bl	801396c <rcl_service_is_valid>
 8015398:	b918      	cbnz	r0, 80153a2 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801539a:	f640 0098 	movw	r0, #2200	@ 0x898
 801539e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153a2:	6820      	ldr	r0, [r4, #0]
 80153a4:	3008      	adds	r0, #8
 80153a6:	f7fe fae1 	bl	801396c <rcl_service_is_valid>
 80153aa:	2800      	cmp	r0, #0
 80153ac:	d0f5      	beq.n	801539a <rcl_action_server_wait_set_get_entities_ready+0x26>
 80153ae:	6820      	ldr	r0, [r4, #0]
 80153b0:	300c      	adds	r0, #12
 80153b2:	f7fe f975 	bl	80136a0 <rcl_publisher_is_valid_except_context>
 80153b6:	2800      	cmp	r0, #0
 80153b8:	d0ef      	beq.n	801539a <rcl_action_server_wait_set_get_entities_ready+0x26>
 80153ba:	6820      	ldr	r0, [r4, #0]
 80153bc:	3010      	adds	r0, #16
 80153be:	f7fe f96f 	bl	80136a0 <rcl_publisher_is_valid_except_context>
 80153c2:	2800      	cmp	r0, #0
 80153c4:	d0e9      	beq.n	801539a <rcl_action_server_wait_set_get_entities_ready+0x26>
 80153c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153ca:	2a00      	cmp	r2, #0
 80153cc:	bf18      	it	ne
 80153ce:	2b00      	cmpne	r3, #0
 80153d0:	bf0c      	ite	eq
 80153d2:	2101      	moveq	r1, #1
 80153d4:	2100      	movne	r1, #0
 80153d6:	f1b8 0f00 	cmp.w	r8, #0
 80153da:	bf08      	it	eq
 80153dc:	f041 0101 	orreq.w	r1, r1, #1
 80153e0:	bba9      	cbnz	r1, 801544e <rcl_action_server_wait_set_get_entities_ready+0xda>
 80153e2:	b3a6      	cbz	r6, 801544e <rcl_action_server_wait_set_get_entities_ready+0xda>
 80153e4:	6821      	ldr	r1, [r4, #0]
 80153e6:	2000      	movs	r0, #0
 80153e8:	692c      	ldr	r4, [r5, #16]
 80153ea:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 80153ee:	6a2f      	ldr	r7, [r5, #32]
 80153f0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80153f4:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 80153f8:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80153fc:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8015400:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8015404:	1a64      	subs	r4, r4, r1
 8015406:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801540a:	fab4 f484 	clz	r4, r4
 801540e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8015412:	0964      	lsrs	r4, r4, #5
 8015414:	7034      	strb	r4, [r6, #0]
 8015416:	1d0c      	adds	r4, r1, #4
 8015418:	1b2c      	subs	r4, r5, r4
 801541a:	fab4 f484 	clz	r4, r4
 801541e:	0964      	lsrs	r4, r4, #5
 8015420:	f888 4000 	strb.w	r4, [r8]
 8015424:	f101 0408 	add.w	r4, r1, #8
 8015428:	1b1b      	subs	r3, r3, r4
 801542a:	9c06      	ldr	r4, [sp, #24]
 801542c:	fab3 f383 	clz	r3, r3
 8015430:	095b      	lsrs	r3, r3, #5
 8015432:	7023      	strb	r3, [r4, #0]
 8015434:	f101 0314 	add.w	r3, r1, #20
 8015438:	1ad3      	subs	r3, r2, r3
 801543a:	9a07      	ldr	r2, [sp, #28]
 801543c:	fab3 f383 	clz	r3, r3
 8015440:	095b      	lsrs	r3, r3, #5
 8015442:	7013      	strb	r3, [r2, #0]
 8015444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015448:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801544c:	4770      	bx	lr
 801544e:	200b      	movs	r0, #11
 8015450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015454 <_execute_event_handler>:
 8015454:	2002      	movs	r0, #2
 8015456:	4770      	bx	lr

08015458 <_cancel_goal_event_handler>:
 8015458:	2003      	movs	r0, #3
 801545a:	4770      	bx	lr

0801545c <_succeed_event_handler>:
 801545c:	2004      	movs	r0, #4
 801545e:	4770      	bx	lr

08015460 <_abort_event_handler>:
 8015460:	2006      	movs	r0, #6
 8015462:	4770      	bx	lr

08015464 <_canceled_event_handler>:
 8015464:	2005      	movs	r0, #5
 8015466:	4770      	bx	lr

08015468 <rcl_action_transition_goal_state>:
 8015468:	b2c2      	uxtb	r2, r0
 801546a:	2a06      	cmp	r2, #6
 801546c:	d810      	bhi.n	8015490 <rcl_action_transition_goal_state+0x28>
 801546e:	2904      	cmp	r1, #4
 8015470:	d80e      	bhi.n	8015490 <rcl_action_transition_goal_state+0x28>
 8015472:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8015476:	b410      	push	{r4}
 8015478:	1853      	adds	r3, r2, r1
 801547a:	4c06      	ldr	r4, [pc, #24]	@ (8015494 <rcl_action_transition_goal_state+0x2c>)
 801547c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015480:	b113      	cbz	r3, 8015488 <rcl_action_transition_goal_state+0x20>
 8015482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015486:	4718      	bx	r3
 8015488:	2000      	movs	r0, #0
 801548a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801548e:	4770      	bx	lr
 8015490:	2000      	movs	r0, #0
 8015492:	4770      	bx	lr
 8015494:	08020324 	.word	0x08020324

08015498 <rcl_action_get_zero_initialized_cancel_response>:
 8015498:	b510      	push	{r4, lr}
 801549a:	4c07      	ldr	r4, [pc, #28]	@ (80154b8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801549c:	4686      	mov	lr, r0
 801549e:	4684      	mov	ip, r0
 80154a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154ac:	6823      	ldr	r3, [r4, #0]
 80154ae:	4670      	mov	r0, lr
 80154b0:	f8cc 3000 	str.w	r3, [ip]
 80154b4:	bd10      	pop	{r4, pc}
 80154b6:	bf00      	nop
 80154b8:	080203b0 	.word	0x080203b0

080154bc <rclc_action_send_result_request>:
 80154bc:	b1d0      	cbz	r0, 80154f4 <rclc_action_send_result_request+0x38>
 80154be:	4684      	mov	ip, r0
 80154c0:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80154c4:	b500      	push	{lr}
 80154c6:	b087      	sub	sp, #28
 80154c8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80154cc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80154d0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80154d4:	f10d 0e08 	add.w	lr, sp, #8
 80154d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80154dc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80154e0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80154e4:	a902      	add	r1, sp, #8
 80154e6:	3010      	adds	r0, #16
 80154e8:	f7ff fbca 	bl	8014c80 <rcl_action_send_result_request>
 80154ec:	b920      	cbnz	r0, 80154f8 <rclc_action_send_result_request+0x3c>
 80154ee:	b007      	add	sp, #28
 80154f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80154f4:	200b      	movs	r0, #11
 80154f6:	4770      	bx	lr
 80154f8:	9001      	str	r0, [sp, #4]
 80154fa:	f7fc fc8d 	bl	8011e18 <rcutils_reset_error>
 80154fe:	9801      	ldr	r0, [sp, #4]
 8015500:	b007      	add	sp, #28
 8015502:	f85d fb04 	ldr.w	pc, [sp], #4
 8015506:	bf00      	nop

08015508 <rclc_action_take_goal_handle>:
 8015508:	b160      	cbz	r0, 8015524 <rclc_action_take_goal_handle+0x1c>
 801550a:	6883      	ldr	r3, [r0, #8]
 801550c:	b143      	cbz	r3, 8015520 <rclc_action_take_goal_handle+0x18>
 801550e:	6819      	ldr	r1, [r3, #0]
 8015510:	2200      	movs	r2, #0
 8015512:	6081      	str	r1, [r0, #8]
 8015514:	721a      	strb	r2, [r3, #8]
 8015516:	68c1      	ldr	r1, [r0, #12]
 8015518:	621a      	str	r2, [r3, #32]
 801551a:	849a      	strh	r2, [r3, #36]	@ 0x24
 801551c:	6019      	str	r1, [r3, #0]
 801551e:	60c3      	str	r3, [r0, #12]
 8015520:	4618      	mov	r0, r3
 8015522:	4770      	bx	lr
 8015524:	4603      	mov	r3, r0
 8015526:	e7fb      	b.n	8015520 <rclc_action_take_goal_handle+0x18>

08015528 <rclc_action_remove_used_goal_handle>:
 8015528:	b180      	cbz	r0, 801554c <rclc_action_remove_used_goal_handle+0x24>
 801552a:	b179      	cbz	r1, 801554c <rclc_action_remove_used_goal_handle+0x24>
 801552c:	68c3      	ldr	r3, [r0, #12]
 801552e:	4299      	cmp	r1, r3
 8015530:	d00d      	beq.n	801554e <rclc_action_remove_used_goal_handle+0x26>
 8015532:	b12b      	cbz	r3, 8015540 <rclc_action_remove_used_goal_handle+0x18>
 8015534:	681a      	ldr	r2, [r3, #0]
 8015536:	4291      	cmp	r1, r2
 8015538:	d003      	beq.n	8015542 <rclc_action_remove_used_goal_handle+0x1a>
 801553a:	4613      	mov	r3, r2
 801553c:	2b00      	cmp	r3, #0
 801553e:	d1f9      	bne.n	8015534 <rclc_action_remove_used_goal_handle+0xc>
 8015540:	4770      	bx	lr
 8015542:	680a      	ldr	r2, [r1, #0]
 8015544:	601a      	str	r2, [r3, #0]
 8015546:	6883      	ldr	r3, [r0, #8]
 8015548:	600b      	str	r3, [r1, #0]
 801554a:	6081      	str	r1, [r0, #8]
 801554c:	4770      	bx	lr
 801554e:	680b      	ldr	r3, [r1, #0]
 8015550:	60c3      	str	r3, [r0, #12]
 8015552:	e7f8      	b.n	8015546 <rclc_action_remove_used_goal_handle+0x1e>

08015554 <rclc_action_find_goal_handle_by_uuid>:
 8015554:	b538      	push	{r3, r4, r5, lr}
 8015556:	b181      	cbz	r1, 801557a <rclc_action_find_goal_handle_by_uuid+0x26>
 8015558:	b178      	cbz	r0, 801557a <rclc_action_find_goal_handle_by_uuid+0x26>
 801555a:	68c4      	ldr	r4, [r0, #12]
 801555c:	460d      	mov	r5, r1
 801555e:	b914      	cbnz	r4, 8015566 <rclc_action_find_goal_handle_by_uuid+0x12>
 8015560:	e009      	b.n	8015576 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015562:	6824      	ldr	r4, [r4, #0]
 8015564:	b13c      	cbz	r4, 8015576 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015566:	f104 0009 	add.w	r0, r4, #9
 801556a:	2210      	movs	r2, #16
 801556c:	4629      	mov	r1, r5
 801556e:	f008 fa2f 	bl	801d9d0 <memcmp>
 8015572:	2800      	cmp	r0, #0
 8015574:	d1f5      	bne.n	8015562 <rclc_action_find_goal_handle_by_uuid+0xe>
 8015576:	4620      	mov	r0, r4
 8015578:	bd38      	pop	{r3, r4, r5, pc}
 801557a:	2400      	movs	r4, #0
 801557c:	4620      	mov	r0, r4
 801557e:	bd38      	pop	{r3, r4, r5, pc}

08015580 <rclc_action_find_first_handle_by_status>:
 8015580:	b140      	cbz	r0, 8015594 <rclc_action_find_first_handle_by_status+0x14>
 8015582:	68c0      	ldr	r0, [r0, #12]
 8015584:	b910      	cbnz	r0, 801558c <rclc_action_find_first_handle_by_status+0xc>
 8015586:	e005      	b.n	8015594 <rclc_action_find_first_handle_by_status+0x14>
 8015588:	6800      	ldr	r0, [r0, #0]
 801558a:	b118      	cbz	r0, 8015594 <rclc_action_find_first_handle_by_status+0x14>
 801558c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015590:	428b      	cmp	r3, r1
 8015592:	d1f9      	bne.n	8015588 <rclc_action_find_first_handle_by_status+0x8>
 8015594:	4770      	bx	lr
 8015596:	bf00      	nop

08015598 <rclc_action_find_first_terminated_handle>:
 8015598:	b140      	cbz	r0, 80155ac <rclc_action_find_first_terminated_handle+0x14>
 801559a:	68c0      	ldr	r0, [r0, #12]
 801559c:	b910      	cbnz	r0, 80155a4 <rclc_action_find_first_terminated_handle+0xc>
 801559e:	e005      	b.n	80155ac <rclc_action_find_first_terminated_handle+0x14>
 80155a0:	6800      	ldr	r0, [r0, #0]
 80155a2:	b118      	cbz	r0, 80155ac <rclc_action_find_first_terminated_handle+0x14>
 80155a4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80155a8:	2b03      	cmp	r3, #3
 80155aa:	ddf9      	ble.n	80155a0 <rclc_action_find_first_terminated_handle+0x8>
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop

080155b0 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80155b0:	b170      	cbz	r0, 80155d0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80155b2:	68c0      	ldr	r0, [r0, #12]
 80155b4:	b160      	cbz	r0, 80155d0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80155b6:	b410      	push	{r4}
 80155b8:	e001      	b.n	80155be <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80155ba:	6800      	ldr	r0, [r0, #0]
 80155bc:	b128      	cbz	r0, 80155ca <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80155be:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80155c2:	4299      	cmp	r1, r3
 80155c4:	bf08      	it	eq
 80155c6:	4294      	cmpeq	r4, r2
 80155c8:	d1f7      	bne.n	80155ba <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80155ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155ce:	4770      	bx	lr
 80155d0:	4770      	bx	lr
 80155d2:	bf00      	nop

080155d4 <rclc_action_find_handle_by_result_request_sequence_number>:
 80155d4:	b170      	cbz	r0, 80155f4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80155d6:	68c0      	ldr	r0, [r0, #12]
 80155d8:	b160      	cbz	r0, 80155f4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80155da:	b410      	push	{r4}
 80155dc:	e001      	b.n	80155e2 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80155de:	6800      	ldr	r0, [r0, #0]
 80155e0:	b128      	cbz	r0, 80155ee <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80155e2:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80155e6:	4299      	cmp	r1, r3
 80155e8:	bf08      	it	eq
 80155ea:	4294      	cmpeq	r4, r2
 80155ec:	d1f7      	bne.n	80155de <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80155ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155f2:	4770      	bx	lr
 80155f4:	4770      	bx	lr
 80155f6:	bf00      	nop

080155f8 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80155f8:	b170      	cbz	r0, 8015618 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80155fa:	68c0      	ldr	r0, [r0, #12]
 80155fc:	b160      	cbz	r0, 8015618 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80155fe:	b410      	push	{r4}
 8015600:	e001      	b.n	8015606 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015602:	6800      	ldr	r0, [r0, #0]
 8015604:	b128      	cbz	r0, 8015612 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015606:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801560a:	4299      	cmp	r1, r3
 801560c:	bf08      	it	eq
 801560e:	4294      	cmpeq	r4, r2
 8015610:	d1f7      	bne.n	8015602 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015616:	4770      	bx	lr
 8015618:	4770      	bx	lr
 801561a:	bf00      	nop

0801561c <rclc_action_find_first_handle_with_goal_response>:
 801561c:	b140      	cbz	r0, 8015630 <rclc_action_find_first_handle_with_goal_response+0x14>
 801561e:	68c0      	ldr	r0, [r0, #12]
 8015620:	b910      	cbnz	r0, 8015628 <rclc_action_find_first_handle_with_goal_response+0xc>
 8015622:	e005      	b.n	8015630 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015624:	6800      	ldr	r0, [r0, #0]
 8015626:	b118      	cbz	r0, 8015630 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015628:	f890 3020 	ldrb.w	r3, [r0, #32]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d0f9      	beq.n	8015624 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015630:	4770      	bx	lr
 8015632:	bf00      	nop

08015634 <rclc_action_find_first_handle_with_result_response>:
 8015634:	b140      	cbz	r0, 8015648 <rclc_action_find_first_handle_with_result_response+0x14>
 8015636:	68c0      	ldr	r0, [r0, #12]
 8015638:	b910      	cbnz	r0, 8015640 <rclc_action_find_first_handle_with_result_response+0xc>
 801563a:	e005      	b.n	8015648 <rclc_action_find_first_handle_with_result_response+0x14>
 801563c:	6800      	ldr	r0, [r0, #0]
 801563e:	b118      	cbz	r0, 8015648 <rclc_action_find_first_handle_with_result_response+0x14>
 8015640:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015644:	2b00      	cmp	r3, #0
 8015646:	d0f9      	beq.n	801563c <rclc_action_find_first_handle_with_result_response+0x8>
 8015648:	4770      	bx	lr
 801564a:	bf00      	nop

0801564c <rclc_action_server_response_goal_request>:
 801564c:	b198      	cbz	r0, 8015676 <rclc_action_server_response_goal_request+0x2a>
 801564e:	2200      	movs	r2, #0
 8015650:	460b      	mov	r3, r1
 8015652:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015656:	b510      	push	{r4, lr}
 8015658:	6844      	ldr	r4, [r0, #4]
 801565a:	b086      	sub	sp, #24
 801565c:	f104 0010 	add.w	r0, r4, #16
 8015660:	9205      	str	r2, [sp, #20]
 8015662:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015666:	aa03      	add	r2, sp, #12
 8015668:	f88d 300c 	strb.w	r3, [sp, #12]
 801566c:	f7ff fd3e 	bl	80150ec <rcl_action_send_goal_response>
 8015670:	b918      	cbnz	r0, 801567a <rclc_action_server_response_goal_request+0x2e>
 8015672:	b006      	add	sp, #24
 8015674:	bd10      	pop	{r4, pc}
 8015676:	200b      	movs	r0, #11
 8015678:	4770      	bx	lr
 801567a:	9001      	str	r0, [sp, #4]
 801567c:	f7fc fbcc 	bl	8011e18 <rcutils_reset_error>
 8015680:	9801      	ldr	r0, [sp, #4]
 8015682:	b006      	add	sp, #24
 8015684:	bd10      	pop	{r4, pc}
 8015686:	bf00      	nop

08015688 <rclc_action_server_goal_cancel_accept>:
 8015688:	b310      	cbz	r0, 80156d0 <rclc_action_server_goal_cancel_accept+0x48>
 801568a:	b510      	push	{r4, lr}
 801568c:	b090      	sub	sp, #64	@ 0x40
 801568e:	4604      	mov	r4, r0
 8015690:	a806      	add	r0, sp, #24
 8015692:	f7ff ff01 	bl	8015498 <rcl_action_get_zero_initialized_cancel_response>
 8015696:	2300      	movs	r3, #0
 8015698:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801569c:	46ec      	mov	ip, sp
 801569e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80156a2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80156a6:	f88d 3018 	strb.w	r3, [sp, #24]
 80156aa:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80156ae:	f8cd d01c 	str.w	sp, [sp, #28]
 80156b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156b6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80156d8 <rclc_action_server_goal_cancel_accept+0x50>
 80156ba:	6860      	ldr	r0, [r4, #4]
 80156bc:	aa06      	add	r2, sp, #24
 80156be:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80156c2:	3010      	adds	r0, #16
 80156c4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80156c8:	f7ff fdc8 	bl	801525c <rcl_action_send_cancel_response>
 80156cc:	b010      	add	sp, #64	@ 0x40
 80156ce:	bd10      	pop	{r4, pc}
 80156d0:	200b      	movs	r0, #11
 80156d2:	4770      	bx	lr
 80156d4:	f3af 8000 	nop.w
 80156d8:	00000001 	.word	0x00000001
 80156dc:	00000001 	.word	0x00000001

080156e0 <rclc_action_server_goal_cancel_reject>:
 80156e0:	b082      	sub	sp, #8
 80156e2:	b530      	push	{r4, r5, lr}
 80156e4:	b08b      	sub	sp, #44	@ 0x2c
 80156e6:	ac0e      	add	r4, sp, #56	@ 0x38
 80156e8:	e884 000c 	stmia.w	r4, {r2, r3}
 80156ec:	b188      	cbz	r0, 8015712 <rclc_action_server_goal_cancel_reject+0x32>
 80156ee:	4604      	mov	r4, r0
 80156f0:	a801      	add	r0, sp, #4
 80156f2:	460d      	mov	r5, r1
 80156f4:	f7ff fed0 	bl	8015498 <rcl_action_get_zero_initialized_cancel_response>
 80156f8:	aa01      	add	r2, sp, #4
 80156fa:	a90e      	add	r1, sp, #56	@ 0x38
 80156fc:	f104 0010 	add.w	r0, r4, #16
 8015700:	f88d 5004 	strb.w	r5, [sp, #4]
 8015704:	f7ff fdaa 	bl	801525c <rcl_action_send_cancel_response>
 8015708:	b00b      	add	sp, #44	@ 0x2c
 801570a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801570e:	b002      	add	sp, #8
 8015710:	4770      	bx	lr
 8015712:	200b      	movs	r0, #11
 8015714:	b00b      	add	sp, #44	@ 0x2c
 8015716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801571a:	b002      	add	sp, #8
 801571c:	4770      	bx	lr
 801571e:	bf00      	nop

08015720 <__atomic_load_8>:
 8015720:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015724:	4a16      	ldr	r2, [pc, #88]	@ (8015780 <__atomic_load_8+0x60>)
 8015726:	4b17      	ldr	r3, [pc, #92]	@ (8015784 <__atomic_load_8+0x64>)
 8015728:	f04f 0c01 	mov.w	ip, #1
 801572c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015730:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015734:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015738:	fb02 f101 	mul.w	r1, r2, r1
 801573c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015740:	fba3 2301 	umull	r2, r3, r3, r1
 8015744:	091b      	lsrs	r3, r3, #4
 8015746:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801574a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801574e:	b4d0      	push	{r4, r6, r7}
 8015750:	1ac9      	subs	r1, r1, r3
 8015752:	4c0d      	ldr	r4, [pc, #52]	@ (8015788 <__atomic_load_8+0x68>)
 8015754:	1862      	adds	r2, r4, r1
 8015756:	e8d2 3f4f 	ldrexb	r3, [r2]
 801575a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801575e:	2e00      	cmp	r6, #0
 8015760:	d1f9      	bne.n	8015756 <__atomic_load_8+0x36>
 8015762:	b2db      	uxtb	r3, r3
 8015764:	f3bf 8f5b 	dmb	ish
 8015768:	2b00      	cmp	r3, #0
 801576a:	d1f4      	bne.n	8015756 <__atomic_load_8+0x36>
 801576c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8015770:	f3bf 8f5b 	dmb	ish
 8015774:	5463      	strb	r3, [r4, r1]
 8015776:	4630      	mov	r0, r6
 8015778:	4639      	mov	r1, r7
 801577a:	bcd0      	pop	{r4, r6, r7}
 801577c:	4770      	bx	lr
 801577e:	bf00      	nop
 8015780:	27d4eb2d 	.word	0x27d4eb2d
 8015784:	b21642c9 	.word	0xb21642c9
 8015788:	24064ca0 	.word	0x24064ca0

0801578c <__atomic_store_8>:
 801578c:	b570      	push	{r4, r5, r6, lr}
 801578e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8015792:	4916      	ldr	r1, [pc, #88]	@ (80157ec <__atomic_store_8+0x60>)
 8015794:	4c16      	ldr	r4, [pc, #88]	@ (80157f0 <__atomic_store_8+0x64>)
 8015796:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801579a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801579e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80157a2:	fb01 fe0e 	mul.w	lr, r1, lr
 80157a6:	4913      	ldr	r1, [pc, #76]	@ (80157f4 <__atomic_store_8+0x68>)
 80157a8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80157ac:	fba1 510e 	umull	r5, r1, r1, lr
 80157b0:	f04f 0501 	mov.w	r5, #1
 80157b4:	0909      	lsrs	r1, r1, #4
 80157b6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 80157ba:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 80157be:	ebae 0e01 	sub.w	lr, lr, r1
 80157c2:	eb04 0c0e 	add.w	ip, r4, lr
 80157c6:	e8dc 1f4f 	ldrexb	r1, [ip]
 80157ca:	e8cc 5f46 	strexb	r6, r5, [ip]
 80157ce:	2e00      	cmp	r6, #0
 80157d0:	d1f9      	bne.n	80157c6 <__atomic_store_8+0x3a>
 80157d2:	b2c9      	uxtb	r1, r1
 80157d4:	f3bf 8f5b 	dmb	ish
 80157d8:	2900      	cmp	r1, #0
 80157da:	d1f4      	bne.n	80157c6 <__atomic_store_8+0x3a>
 80157dc:	e9c0 2300 	strd	r2, r3, [r0]
 80157e0:	f3bf 8f5b 	dmb	ish
 80157e4:	f804 100e 	strb.w	r1, [r4, lr]
 80157e8:	bd70      	pop	{r4, r5, r6, pc}
 80157ea:	bf00      	nop
 80157ec:	27d4eb2d 	.word	0x27d4eb2d
 80157f0:	24064ca0 	.word	0x24064ca0
 80157f4:	b21642c9 	.word	0xb21642c9

080157f8 <__atomic_exchange_8>:
 80157f8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80157fc:	4917      	ldr	r1, [pc, #92]	@ (801585c <__atomic_exchange_8+0x64>)
 80157fe:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8015802:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8015806:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801580a:	fb01 fc0c 	mul.w	ip, r1, ip
 801580e:	4914      	ldr	r1, [pc, #80]	@ (8015860 <__atomic_exchange_8+0x68>)
 8015810:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8015814:	b570      	push	{r4, r5, r6, lr}
 8015816:	4686      	mov	lr, r0
 8015818:	fba1 010c 	umull	r0, r1, r1, ip
 801581c:	4d11      	ldr	r5, [pc, #68]	@ (8015864 <__atomic_exchange_8+0x6c>)
 801581e:	f04f 0001 	mov.w	r0, #1
 8015822:	0909      	lsrs	r1, r1, #4
 8015824:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8015828:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801582c:	ebac 0c01 	sub.w	ip, ip, r1
 8015830:	eb05 010c 	add.w	r1, r5, ip
 8015834:	e8d1 4f4f 	ldrexb	r4, [r1]
 8015838:	e8c1 0f46 	strexb	r6, r0, [r1]
 801583c:	2e00      	cmp	r6, #0
 801583e:	d1f9      	bne.n	8015834 <__atomic_exchange_8+0x3c>
 8015840:	b2e4      	uxtb	r4, r4
 8015842:	f3bf 8f5b 	dmb	ish
 8015846:	2c00      	cmp	r4, #0
 8015848:	d1f4      	bne.n	8015834 <__atomic_exchange_8+0x3c>
 801584a:	e9de 0100 	ldrd	r0, r1, [lr]
 801584e:	e9ce 2300 	strd	r2, r3, [lr]
 8015852:	f3bf 8f5b 	dmb	ish
 8015856:	f805 400c 	strb.w	r4, [r5, ip]
 801585a:	bd70      	pop	{r4, r5, r6, pc}
 801585c:	27d4eb2d 	.word	0x27d4eb2d
 8015860:	b21642c9 	.word	0xb21642c9
 8015864:	24064ca0 	.word	0x24064ca0

08015868 <rcutils_get_env>:
 8015868:	b168      	cbz	r0, 8015886 <rcutils_get_env+0x1e>
 801586a:	b510      	push	{r4, lr}
 801586c:	460c      	mov	r4, r1
 801586e:	b129      	cbz	r1, 801587c <rcutils_get_env+0x14>
 8015870:	f007 fc2e 	bl	801d0d0 <getenv>
 8015874:	b120      	cbz	r0, 8015880 <rcutils_get_env+0x18>
 8015876:	6020      	str	r0, [r4, #0]
 8015878:	2000      	movs	r0, #0
 801587a:	bd10      	pop	{r4, pc}
 801587c:	4803      	ldr	r0, [pc, #12]	@ (801588c <rcutils_get_env+0x24>)
 801587e:	bd10      	pop	{r4, pc}
 8015880:	4b03      	ldr	r3, [pc, #12]	@ (8015890 <rcutils_get_env+0x28>)
 8015882:	6023      	str	r3, [r4, #0]
 8015884:	bd10      	pop	{r4, pc}
 8015886:	4803      	ldr	r0, [pc, #12]	@ (8015894 <rcutils_get_env+0x2c>)
 8015888:	4770      	bx	lr
 801588a:	bf00      	nop
 801588c:	080203f0 	.word	0x080203f0
 8015890:	08020a98 	.word	0x08020a98
 8015894:	080203d4 	.word	0x080203d4

08015898 <rcutils_is_directory>:
 8015898:	2000      	movs	r0, #0
 801589a:	4770      	bx	lr

0801589c <rcutils_join_path>:
 801589c:	b082      	sub	sp, #8
 801589e:	2000      	movs	r0, #0
 80158a0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80158a4:	b002      	add	sp, #8
 80158a6:	4770      	bx	lr

080158a8 <rcutils_to_native_path>:
 80158a8:	b084      	sub	sp, #16
 80158aa:	2000      	movs	r0, #0
 80158ac:	f10d 0c04 	add.w	ip, sp, #4
 80158b0:	b004      	add	sp, #16
 80158b2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80158b6:	4770      	bx	lr

080158b8 <rcutils_format_string_limit>:
 80158b8:	b40f      	push	{r0, r1, r2, r3}
 80158ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158bc:	b083      	sub	sp, #12
 80158be:	ac08      	add	r4, sp, #32
 80158c0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80158c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80158c6:	b326      	cbz	r6, 8015912 <rcutils_format_string_limit+0x5a>
 80158c8:	a808      	add	r0, sp, #32
 80158ca:	f7fc fa7f 	bl	8011dcc <rcutils_allocator_is_valid>
 80158ce:	b300      	cbz	r0, 8015912 <rcutils_format_string_limit+0x5a>
 80158d0:	2100      	movs	r1, #0
 80158d2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80158d4:	4632      	mov	r2, r6
 80158d6:	4608      	mov	r0, r1
 80158d8:	e9cd 3300 	strd	r3, r3, [sp]
 80158dc:	f000 f906 	bl	8015aec <rcutils_vsnprintf>
 80158e0:	1c43      	adds	r3, r0, #1
 80158e2:	4605      	mov	r5, r0
 80158e4:	d015      	beq.n	8015912 <rcutils_format_string_limit+0x5a>
 80158e6:	1c47      	adds	r7, r0, #1
 80158e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80158ea:	429f      	cmp	r7, r3
 80158ec:	d901      	bls.n	80158f2 <rcutils_format_string_limit+0x3a>
 80158ee:	1e5d      	subs	r5, r3, #1
 80158f0:	461f      	mov	r7, r3
 80158f2:	9b08      	ldr	r3, [sp, #32]
 80158f4:	4638      	mov	r0, r7
 80158f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80158f8:	4798      	blx	r3
 80158fa:	4604      	mov	r4, r0
 80158fc:	b148      	cbz	r0, 8015912 <rcutils_format_string_limit+0x5a>
 80158fe:	4632      	mov	r2, r6
 8015900:	4639      	mov	r1, r7
 8015902:	9b01      	ldr	r3, [sp, #4]
 8015904:	f000 f8f2 	bl	8015aec <rcutils_vsnprintf>
 8015908:	2800      	cmp	r0, #0
 801590a:	db09      	blt.n	8015920 <rcutils_format_string_limit+0x68>
 801590c:	2300      	movs	r3, #0
 801590e:	5563      	strb	r3, [r4, r5]
 8015910:	e000      	b.n	8015914 <rcutils_format_string_limit+0x5c>
 8015912:	2400      	movs	r4, #0
 8015914:	4620      	mov	r0, r4
 8015916:	b003      	add	sp, #12
 8015918:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801591c:	b004      	add	sp, #16
 801591e:	4770      	bx	lr
 8015920:	4620      	mov	r0, r4
 8015922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015924:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015926:	2400      	movs	r4, #0
 8015928:	4798      	blx	r3
 801592a:	e7f3      	b.n	8015914 <rcutils_format_string_limit+0x5c>

0801592c <rcutils_repl_str>:
 801592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015930:	ed2d 8b02 	vpush	{d8}
 8015934:	b087      	sub	sp, #28
 8015936:	2600      	movs	r6, #0
 8015938:	4680      	mov	r8, r0
 801593a:	468a      	mov	sl, r1
 801593c:	9000      	str	r0, [sp, #0]
 801593e:	4608      	mov	r0, r1
 8015940:	ee08 2a10 	vmov	s16, r2
 8015944:	4699      	mov	r9, r3
 8015946:	2510      	movs	r5, #16
 8015948:	f7ea fcd4 	bl	80002f4 <strlen>
 801594c:	4637      	mov	r7, r6
 801594e:	46b3      	mov	fp, r6
 8015950:	9001      	str	r0, [sp, #4]
 8015952:	e01e      	b.n	8015992 <rcutils_repl_str+0x66>
 8015954:	f10b 0b01 	add.w	fp, fp, #1
 8015958:	9b01      	ldr	r3, [sp, #4]
 801595a:	455e      	cmp	r6, fp
 801595c:	eb04 0803 	add.w	r8, r4, r3
 8015960:	d211      	bcs.n	8015986 <rcutils_repl_str+0x5a>
 8015962:	442e      	add	r6, r5
 8015964:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015968:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801596c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015970:	00b1      	lsls	r1, r6, #2
 8015972:	4798      	blx	r3
 8015974:	2800      	cmp	r0, #0
 8015976:	f000 8088 	beq.w	8015a8a <rcutils_repl_str+0x15e>
 801597a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801597e:	4607      	mov	r7, r0
 8015980:	bf28      	it	cs
 8015982:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8015986:	9a00      	ldr	r2, [sp, #0]
 8015988:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801598c:	1aa4      	subs	r4, r4, r2
 801598e:	f843 4c04 	str.w	r4, [r3, #-4]
 8015992:	4651      	mov	r1, sl
 8015994:	4640      	mov	r0, r8
 8015996:	f008 f86c 	bl	801da72 <strstr>
 801599a:	4604      	mov	r4, r0
 801599c:	4638      	mov	r0, r7
 801599e:	2c00      	cmp	r4, #0
 80159a0:	d1d8      	bne.n	8015954 <rcutils_repl_str+0x28>
 80159a2:	4640      	mov	r0, r8
 80159a4:	f7ea fca6 	bl	80002f4 <strlen>
 80159a8:	9b00      	ldr	r3, [sp, #0]
 80159aa:	eba8 0803 	sub.w	r8, r8, r3
 80159ae:	eb08 0400 	add.w	r4, r8, r0
 80159b2:	9402      	str	r4, [sp, #8]
 80159b4:	f1bb 0f00 	cmp.w	fp, #0
 80159b8:	d045      	beq.n	8015a46 <rcutils_repl_str+0x11a>
 80159ba:	ee18 0a10 	vmov	r0, s16
 80159be:	f7ea fc99 	bl	80002f4 <strlen>
 80159c2:	9a01      	ldr	r2, [sp, #4]
 80159c4:	4606      	mov	r6, r0
 80159c6:	f8d9 3000 	ldr.w	r3, [r9]
 80159ca:	1a82      	subs	r2, r0, r2
 80159cc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80159d0:	fb0b 4202 	mla	r2, fp, r2, r4
 80159d4:	1c50      	adds	r0, r2, #1
 80159d6:	9205      	str	r2, [sp, #20]
 80159d8:	4798      	blx	r3
 80159da:	4682      	mov	sl, r0
 80159dc:	2800      	cmp	r0, #0
 80159de:	d054      	beq.n	8015a8a <rcutils_repl_str+0x15e>
 80159e0:	683a      	ldr	r2, [r7, #0]
 80159e2:	463d      	mov	r5, r7
 80159e4:	9900      	ldr	r1, [sp, #0]
 80159e6:	2401      	movs	r4, #1
 80159e8:	f008 f93b 	bl	801dc62 <memcpy>
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80159f2:	eb0a 0803 	add.w	r8, sl, r3
 80159f6:	ee18 7a10 	vmov	r7, s16
 80159fa:	f8dd a000 	ldr.w	sl, [sp]
 80159fe:	f8cd 9000 	str.w	r9, [sp]
 8015a02:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015a06:	4632      	mov	r2, r6
 8015a08:	4639      	mov	r1, r7
 8015a0a:	4640      	mov	r0, r8
 8015a0c:	44b0      	add	r8, r6
 8015a0e:	f008 f928 	bl	801dc62 <memcpy>
 8015a12:	f855 2b04 	ldr.w	r2, [r5], #4
 8015a16:	45a3      	cmp	fp, r4
 8015a18:	444a      	add	r2, r9
 8015a1a:	eb0a 0102 	add.w	r1, sl, r2
 8015a1e:	d02a      	beq.n	8015a76 <rcutils_repl_str+0x14a>
 8015a20:	6828      	ldr	r0, [r5, #0]
 8015a22:	1a82      	subs	r2, r0, r2
 8015a24:	4640      	mov	r0, r8
 8015a26:	4490      	add	r8, r2
 8015a28:	f008 f91b 	bl	801dc62 <memcpy>
 8015a2c:	1c62      	adds	r2, r4, #1
 8015a2e:	45a3      	cmp	fp, r4
 8015a30:	4614      	mov	r4, r2
 8015a32:	d8e8      	bhi.n	8015a06 <rcutils_repl_str+0xda>
 8015a34:	f8dd 9000 	ldr.w	r9, [sp]
 8015a38:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	9a05      	ldr	r2, [sp, #20]
 8015a40:	f80a 3002 	strb.w	r3, [sl, r2]
 8015a44:	e00b      	b.n	8015a5e <rcutils_repl_str+0x132>
 8015a46:	4620      	mov	r0, r4
 8015a48:	f8d9 3000 	ldr.w	r3, [r9]
 8015a4c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015a50:	3001      	adds	r0, #1
 8015a52:	4798      	blx	r3
 8015a54:	4682      	mov	sl, r0
 8015a56:	b110      	cbz	r0, 8015a5e <rcutils_repl_str+0x132>
 8015a58:	9900      	ldr	r1, [sp, #0]
 8015a5a:	f008 f8fa 	bl	801dc52 <strcpy>
 8015a5e:	4638      	mov	r0, r7
 8015a60:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015a64:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015a68:	4798      	blx	r3
 8015a6a:	4650      	mov	r0, sl
 8015a6c:	b007      	add	sp, #28
 8015a6e:	ecbd 8b02 	vpop	{d8}
 8015a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a76:	9b02      	ldr	r3, [sp, #8]
 8015a78:	4640      	mov	r0, r8
 8015a7a:	f8dd 9000 	ldr.w	r9, [sp]
 8015a7e:	1a9a      	subs	r2, r3, r2
 8015a80:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8015a84:	f008 f8ed 	bl	801dc62 <memcpy>
 8015a88:	e7d8      	b.n	8015a3c <rcutils_repl_str+0x110>
 8015a8a:	f04f 0a00 	mov.w	sl, #0
 8015a8e:	e7e6      	b.n	8015a5e <rcutils_repl_str+0x132>

08015a90 <rcutils_snprintf>:
 8015a90:	b40c      	push	{r2, r3}
 8015a92:	b530      	push	{r4, r5, lr}
 8015a94:	b083      	sub	sp, #12
 8015a96:	ab06      	add	r3, sp, #24
 8015a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a9c:	9301      	str	r3, [sp, #4]
 8015a9e:	b1e2      	cbz	r2, 8015ada <rcutils_snprintf+0x4a>
 8015aa0:	fab0 f480 	clz	r4, r0
 8015aa4:	fab1 f581 	clz	r5, r1
 8015aa8:	ea50 0c01 	orrs.w	ip, r0, r1
 8015aac:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8015ab0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8015ab4:	d008      	beq.n	8015ac8 <rcutils_snprintf+0x38>
 8015ab6:	b984      	cbnz	r4, 8015ada <rcutils_snprintf+0x4a>
 8015ab8:	b97d      	cbnz	r5, 8015ada <rcutils_snprintf+0x4a>
 8015aba:	f007 fee7 	bl	801d88c <vsniprintf>
 8015abe:	b003      	add	sp, #12
 8015ac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ac4:	b002      	add	sp, #8
 8015ac6:	4770      	bx	lr
 8015ac8:	4661      	mov	r1, ip
 8015aca:	4660      	mov	r0, ip
 8015acc:	f007 fede 	bl	801d88c <vsniprintf>
 8015ad0:	b003      	add	sp, #12
 8015ad2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ad6:	b002      	add	sp, #8
 8015ad8:	4770      	bx	lr
 8015ada:	f008 f88d 	bl	801dbf8 <__errno>
 8015ade:	2216      	movs	r2, #22
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015ae6:	601a      	str	r2, [r3, #0]
 8015ae8:	e7e9      	b.n	8015abe <rcutils_snprintf+0x2e>
 8015aea:	bf00      	nop

08015aec <rcutils_vsnprintf>:
 8015aec:	b570      	push	{r4, r5, r6, lr}
 8015aee:	b1b2      	cbz	r2, 8015b1e <rcutils_vsnprintf+0x32>
 8015af0:	fab0 f480 	clz	r4, r0
 8015af4:	fab1 f581 	clz	r5, r1
 8015af8:	ea50 0c01 	orrs.w	ip, r0, r1
 8015afc:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8015b00:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8015b04:	d005      	beq.n	8015b12 <rcutils_vsnprintf+0x26>
 8015b06:	b954      	cbnz	r4, 8015b1e <rcutils_vsnprintf+0x32>
 8015b08:	b94d      	cbnz	r5, 8015b1e <rcutils_vsnprintf+0x32>
 8015b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b0e:	f007 bebd 	b.w	801d88c <vsniprintf>
 8015b12:	4661      	mov	r1, ip
 8015b14:	4660      	mov	r0, ip
 8015b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b1a:	f007 beb7 	b.w	801d88c <vsniprintf>
 8015b1e:	f008 f86b 	bl	801dbf8 <__errno>
 8015b22:	2316      	movs	r3, #22
 8015b24:	6003      	str	r3, [r0, #0]
 8015b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b2a:	bd70      	pop	{r4, r5, r6, pc}

08015b2c <rcutils_strdup>:
 8015b2c:	b084      	sub	sp, #16
 8015b2e:	b570      	push	{r4, r5, r6, lr}
 8015b30:	b082      	sub	sp, #8
 8015b32:	4605      	mov	r5, r0
 8015b34:	ac07      	add	r4, sp, #28
 8015b36:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015b3a:	b1b0      	cbz	r0, 8015b6a <rcutils_strdup+0x3e>
 8015b3c:	f7ea fbda 	bl	80002f4 <strlen>
 8015b40:	1c42      	adds	r2, r0, #1
 8015b42:	9b07      	ldr	r3, [sp, #28]
 8015b44:	4606      	mov	r6, r0
 8015b46:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015b48:	4610      	mov	r0, r2
 8015b4a:	9201      	str	r2, [sp, #4]
 8015b4c:	4798      	blx	r3
 8015b4e:	4604      	mov	r4, r0
 8015b50:	b128      	cbz	r0, 8015b5e <rcutils_strdup+0x32>
 8015b52:	9a01      	ldr	r2, [sp, #4]
 8015b54:	4629      	mov	r1, r5
 8015b56:	f008 f884 	bl	801dc62 <memcpy>
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	55a3      	strb	r3, [r4, r6]
 8015b5e:	4620      	mov	r0, r4
 8015b60:	b002      	add	sp, #8
 8015b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b66:	b004      	add	sp, #16
 8015b68:	4770      	bx	lr
 8015b6a:	4604      	mov	r4, r0
 8015b6c:	e7f7      	b.n	8015b5e <rcutils_strdup+0x32>
 8015b6e:	bf00      	nop

08015b70 <rcutils_strndup>:
 8015b70:	b082      	sub	sp, #8
 8015b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b74:	ac06      	add	r4, sp, #24
 8015b76:	4605      	mov	r5, r0
 8015b78:	e884 000c 	stmia.w	r4, {r2, r3}
 8015b7c:	b188      	cbz	r0, 8015ba2 <rcutils_strndup+0x32>
 8015b7e:	1c4f      	adds	r7, r1, #1
 8015b80:	460e      	mov	r6, r1
 8015b82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015b84:	4638      	mov	r0, r7
 8015b86:	4790      	blx	r2
 8015b88:	4604      	mov	r4, r0
 8015b8a:	b128      	cbz	r0, 8015b98 <rcutils_strndup+0x28>
 8015b8c:	463a      	mov	r2, r7
 8015b8e:	4629      	mov	r1, r5
 8015b90:	f008 f867 	bl	801dc62 <memcpy>
 8015b94:	2300      	movs	r3, #0
 8015b96:	55a3      	strb	r3, [r4, r6]
 8015b98:	4620      	mov	r0, r4
 8015b9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015b9e:	b002      	add	sp, #8
 8015ba0:	4770      	bx	lr
 8015ba2:	4604      	mov	r4, r0
 8015ba4:	e7f8      	b.n	8015b98 <rcutils_strndup+0x28>
 8015ba6:	bf00      	nop

08015ba8 <rcutils_get_zero_initialized_string_map>:
 8015ba8:	2000      	movs	r0, #0
 8015baa:	4b01      	ldr	r3, [pc, #4]	@ (8015bb0 <rcutils_get_zero_initialized_string_map+0x8>)
 8015bac:	6018      	str	r0, [r3, #0]
 8015bae:	4770      	bx	lr
 8015bb0:	24064cb8 	.word	0x24064cb8

08015bb4 <rcutils_string_map_reserve>:
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	d05e      	beq.n	8015c76 <rcutils_string_map_reserve+0xc2>
 8015bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bbc:	460c      	mov	r4, r1
 8015bbe:	6801      	ldr	r1, [r0, #0]
 8015bc0:	b082      	sub	sp, #8
 8015bc2:	4605      	mov	r5, r0
 8015bc4:	b129      	cbz	r1, 8015bd2 <rcutils_string_map_reserve+0x1e>
 8015bc6:	68cb      	ldr	r3, [r1, #12]
 8015bc8:	42a3      	cmp	r3, r4
 8015bca:	d906      	bls.n	8015bda <rcutils_string_map_reserve+0x26>
 8015bcc:	461c      	mov	r4, r3
 8015bce:	2900      	cmp	r1, #0
 8015bd0:	d1f9      	bne.n	8015bc6 <rcutils_string_map_reserve+0x12>
 8015bd2:	201f      	movs	r0, #31
 8015bd4:	b002      	add	sp, #8
 8015bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bda:	688b      	ldr	r3, [r1, #8]
 8015bdc:	42a3      	cmp	r3, r4
 8015bde:	d046      	beq.n	8015c6e <rcutils_string_map_reserve+0xba>
 8015be0:	6a0e      	ldr	r6, [r1, #32]
 8015be2:	2c00      	cmp	r4, #0
 8015be4:	d033      	beq.n	8015c4e <rcutils_string_map_reserve+0x9a>
 8015be6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8015bea:	d242      	bcs.n	8015c72 <rcutils_string_map_reserve+0xbe>
 8015bec:	00a7      	lsls	r7, r4, #2
 8015bee:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8015bf2:	6808      	ldr	r0, [r1, #0]
 8015bf4:	4632      	mov	r2, r6
 8015bf6:	4639      	mov	r1, r7
 8015bf8:	47c0      	blx	r8
 8015bfa:	2800      	cmp	r0, #0
 8015bfc:	d039      	beq.n	8015c72 <rcutils_string_map_reserve+0xbe>
 8015bfe:	682b      	ldr	r3, [r5, #0]
 8015c00:	4632      	mov	r2, r6
 8015c02:	4639      	mov	r1, r7
 8015c04:	6018      	str	r0, [r3, #0]
 8015c06:	6858      	ldr	r0, [r3, #4]
 8015c08:	47c0      	blx	r8
 8015c0a:	2800      	cmp	r0, #0
 8015c0c:	d031      	beq.n	8015c72 <rcutils_string_map_reserve+0xbe>
 8015c0e:	682d      	ldr	r5, [r5, #0]
 8015c10:	68ab      	ldr	r3, [r5, #8]
 8015c12:	6068      	str	r0, [r5, #4]
 8015c14:	42a3      	cmp	r3, r4
 8015c16:	d225      	bcs.n	8015c64 <rcutils_string_map_reserve+0xb0>
 8015c18:	682a      	ldr	r2, [r5, #0]
 8015c1a:	eb00 0c07 	add.w	ip, r0, r7
 8015c1e:	0099      	lsls	r1, r3, #2
 8015c20:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8015c24:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8015c28:	45e6      	cmp	lr, ip
 8015c2a:	d203      	bcs.n	8015c34 <rcutils_string_map_reserve+0x80>
 8015c2c:	eb02 0c07 	add.w	ip, r2, r7
 8015c30:	4566      	cmp	r6, ip
 8015c32:	d322      	bcc.n	8015c7a <rcutils_string_map_reserve+0xc6>
 8015c34:	1ae3      	subs	r3, r4, r3
 8015c36:	4670      	mov	r0, lr
 8015c38:	2100      	movs	r1, #0
 8015c3a:	009a      	lsls	r2, r3, #2
 8015c3c:	9201      	str	r2, [sp, #4]
 8015c3e:	f007 fef1 	bl	801da24 <memset>
 8015c42:	9a01      	ldr	r2, [sp, #4]
 8015c44:	2100      	movs	r1, #0
 8015c46:	4630      	mov	r0, r6
 8015c48:	f007 feec 	bl	801da24 <memset>
 8015c4c:	e00a      	b.n	8015c64 <rcutils_string_map_reserve+0xb0>
 8015c4e:	694f      	ldr	r7, [r1, #20]
 8015c50:	6808      	ldr	r0, [r1, #0]
 8015c52:	4631      	mov	r1, r6
 8015c54:	47b8      	blx	r7
 8015c56:	682b      	ldr	r3, [r5, #0]
 8015c58:	4631      	mov	r1, r6
 8015c5a:	6858      	ldr	r0, [r3, #4]
 8015c5c:	601c      	str	r4, [r3, #0]
 8015c5e:	47b8      	blx	r7
 8015c60:	682d      	ldr	r5, [r5, #0]
 8015c62:	606c      	str	r4, [r5, #4]
 8015c64:	2000      	movs	r0, #0
 8015c66:	60ac      	str	r4, [r5, #8]
 8015c68:	b002      	add	sp, #8
 8015c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c6e:	2000      	movs	r0, #0
 8015c70:	e7b0      	b.n	8015bd4 <rcutils_string_map_reserve+0x20>
 8015c72:	200a      	movs	r0, #10
 8015c74:	e7ae      	b.n	8015bd4 <rcutils_string_map_reserve+0x20>
 8015c76:	200b      	movs	r0, #11
 8015c78:	4770      	bx	lr
 8015c7a:	1f0b      	subs	r3, r1, #4
 8015c7c:	4418      	add	r0, r3
 8015c7e:	4413      	add	r3, r2
 8015c80:	3a04      	subs	r2, #4
 8015c82:	4417      	add	r7, r2
 8015c84:	2200      	movs	r2, #0
 8015c86:	f843 2f04 	str.w	r2, [r3, #4]!
 8015c8a:	42bb      	cmp	r3, r7
 8015c8c:	f840 2f04 	str.w	r2, [r0, #4]!
 8015c90:	d1f9      	bne.n	8015c86 <rcutils_string_map_reserve+0xd2>
 8015c92:	e7e7      	b.n	8015c64 <rcutils_string_map_reserve+0xb0>

08015c94 <rcutils_string_map_init>:
 8015c94:	b082      	sub	sp, #8
 8015c96:	b570      	push	{r4, r5, r6, lr}
 8015c98:	ac04      	add	r4, sp, #16
 8015c9a:	e884 000c 	stmia.w	r4, {r2, r3}
 8015c9e:	b380      	cbz	r0, 8015d02 <rcutils_string_map_init+0x6e>
 8015ca0:	6806      	ldr	r6, [r0, #0]
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	b12e      	cbz	r6, 8015cb2 <rcutils_string_map_init+0x1e>
 8015ca6:	251e      	movs	r5, #30
 8015ca8:	4628      	mov	r0, r5
 8015caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cae:	b002      	add	sp, #8
 8015cb0:	4770      	bx	lr
 8015cb2:	a804      	add	r0, sp, #16
 8015cb4:	460d      	mov	r5, r1
 8015cb6:	f7fc f889 	bl	8011dcc <rcutils_allocator_is_valid>
 8015cba:	b310      	cbz	r0, 8015d02 <rcutils_string_map_init+0x6e>
 8015cbc:	9b04      	ldr	r3, [sp, #16]
 8015cbe:	2024      	movs	r0, #36	@ 0x24
 8015cc0:	9908      	ldr	r1, [sp, #32]
 8015cc2:	4798      	blx	r3
 8015cc4:	6020      	str	r0, [r4, #0]
 8015cc6:	b310      	cbz	r0, 8015d0e <rcutils_string_map_init+0x7a>
 8015cc8:	f10d 0e10 	add.w	lr, sp, #16
 8015ccc:	f100 0c10 	add.w	ip, r0, #16
 8015cd0:	e9c0 6600 	strd	r6, r6, [r0]
 8015cd4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8015cd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015cdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ce0:	f8de 3000 	ldr.w	r3, [lr]
 8015ce4:	4629      	mov	r1, r5
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	f8cc 3000 	str.w	r3, [ip]
 8015cec:	f7ff ff62 	bl	8015bb4 <rcutils_string_map_reserve>
 8015cf0:	4605      	mov	r5, r0
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	d0d8      	beq.n	8015ca8 <rcutils_string_map_init+0x14>
 8015cf6:	9b05      	ldr	r3, [sp, #20]
 8015cf8:	9908      	ldr	r1, [sp, #32]
 8015cfa:	6820      	ldr	r0, [r4, #0]
 8015cfc:	4798      	blx	r3
 8015cfe:	6026      	str	r6, [r4, #0]
 8015d00:	e7d2      	b.n	8015ca8 <rcutils_string_map_init+0x14>
 8015d02:	250b      	movs	r5, #11
 8015d04:	4628      	mov	r0, r5
 8015d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d0a:	b002      	add	sp, #8
 8015d0c:	4770      	bx	lr
 8015d0e:	250a      	movs	r5, #10
 8015d10:	e7ca      	b.n	8015ca8 <rcutils_string_map_init+0x14>
 8015d12:	bf00      	nop

08015d14 <rcutils_string_map_fini>:
 8015d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d18:	b082      	sub	sp, #8
 8015d1a:	2800      	cmp	r0, #0
 8015d1c:	d03a      	beq.n	8015d94 <rcutils_string_map_fini+0x80>
 8015d1e:	6804      	ldr	r4, [r0, #0]
 8015d20:	4606      	mov	r6, r0
 8015d22:	2c00      	cmp	r4, #0
 8015d24:	d032      	beq.n	8015d8c <rcutils_string_map_fini+0x78>
 8015d26:	68a3      	ldr	r3, [r4, #8]
 8015d28:	b32b      	cbz	r3, 8015d76 <rcutils_string_map_fini+0x62>
 8015d2a:	2500      	movs	r5, #0
 8015d2c:	6822      	ldr	r2, [r4, #0]
 8015d2e:	462f      	mov	r7, r5
 8015d30:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015d34:	b1e0      	cbz	r0, 8015d70 <rcutils_string_map_fini+0x5c>
 8015d36:	6a21      	ldr	r1, [r4, #32]
 8015d38:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8015d3c:	9101      	str	r1, [sp, #4]
 8015d3e:	47c0      	blx	r8
 8015d40:	9901      	ldr	r1, [sp, #4]
 8015d42:	e9d4 3200 	ldrd	r3, r2, [r4]
 8015d46:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8015d4a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015d4e:	47c0      	blx	r8
 8015d50:	68e3      	ldr	r3, [r4, #12]
 8015d52:	6862      	ldr	r2, [r4, #4]
 8015d54:	3b01      	subs	r3, #1
 8015d56:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015d5a:	3501      	adds	r5, #1
 8015d5c:	60e3      	str	r3, [r4, #12]
 8015d5e:	6834      	ldr	r4, [r6, #0]
 8015d60:	68a3      	ldr	r3, [r4, #8]
 8015d62:	429d      	cmp	r5, r3
 8015d64:	d207      	bcs.n	8015d76 <rcutils_string_map_fini+0x62>
 8015d66:	6822      	ldr	r2, [r4, #0]
 8015d68:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015d6c:	2800      	cmp	r0, #0
 8015d6e:	d1e2      	bne.n	8015d36 <rcutils_string_map_fini+0x22>
 8015d70:	3501      	adds	r5, #1
 8015d72:	429d      	cmp	r5, r3
 8015d74:	d3dc      	bcc.n	8015d30 <rcutils_string_map_fini+0x1c>
 8015d76:	2100      	movs	r1, #0
 8015d78:	4630      	mov	r0, r6
 8015d7a:	f7ff ff1b 	bl	8015bb4 <rcutils_string_map_reserve>
 8015d7e:	4604      	mov	r4, r0
 8015d80:	b920      	cbnz	r0, 8015d8c <rcutils_string_map_fini+0x78>
 8015d82:	6830      	ldr	r0, [r6, #0]
 8015d84:	6943      	ldr	r3, [r0, #20]
 8015d86:	6a01      	ldr	r1, [r0, #32]
 8015d88:	4798      	blx	r3
 8015d8a:	6034      	str	r4, [r6, #0]
 8015d8c:	4620      	mov	r0, r4
 8015d8e:	b002      	add	sp, #8
 8015d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d94:	240b      	movs	r4, #11
 8015d96:	4620      	mov	r0, r4
 8015d98:	b002      	add	sp, #8
 8015d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d9e:	bf00      	nop

08015da0 <rcutils_string_map_getn>:
 8015da0:	b378      	cbz	r0, 8015e02 <rcutils_string_map_getn+0x62>
 8015da2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da6:	f8d0 b000 	ldr.w	fp, [r0]
 8015daa:	f1bb 0f00 	cmp.w	fp, #0
 8015dae:	d01f      	beq.n	8015df0 <rcutils_string_map_getn+0x50>
 8015db0:	fab1 f481 	clz	r4, r1
 8015db4:	4688      	mov	r8, r1
 8015db6:	0964      	lsrs	r4, r4, #5
 8015db8:	b1d1      	cbz	r1, 8015df0 <rcutils_string_map_getn+0x50>
 8015dba:	f8db 7008 	ldr.w	r7, [fp, #8]
 8015dbe:	f8db 6000 	ldr.w	r6, [fp]
 8015dc2:	b1af      	cbz	r7, 8015df0 <rcutils_string_map_getn+0x50>
 8015dc4:	4691      	mov	r9, r2
 8015dc6:	3e04      	subs	r6, #4
 8015dc8:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015dcc:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8015dd0:	3401      	adds	r4, #1
 8015dd2:	4628      	mov	r0, r5
 8015dd4:	b155      	cbz	r5, 8015dec <rcutils_string_map_getn+0x4c>
 8015dd6:	f7ea fa8d 	bl	80002f4 <strlen>
 8015dda:	4602      	mov	r2, r0
 8015ddc:	4629      	mov	r1, r5
 8015dde:	4640      	mov	r0, r8
 8015de0:	454a      	cmp	r2, r9
 8015de2:	bf38      	it	cc
 8015de4:	464a      	movcc	r2, r9
 8015de6:	f007 fe32 	bl	801da4e <strncmp>
 8015dea:	b120      	cbz	r0, 8015df6 <rcutils_string_map_getn+0x56>
 8015dec:	42a7      	cmp	r7, r4
 8015dee:	d1eb      	bne.n	8015dc8 <rcutils_string_map_getn+0x28>
 8015df0:	2000      	movs	r0, #0
 8015df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015df6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8015dfa:	f853 000a 	ldr.w	r0, [r3, sl]
 8015dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e02:	4770      	bx	lr
 8015e04:	0000      	movs	r0, r0
	...

08015e08 <rmw_get_zero_initialized_context>:
 8015e08:	b510      	push	{r4, lr}
 8015e0a:	4604      	mov	r4, r0
 8015e0c:	3010      	adds	r0, #16
 8015e0e:	f000 f80f 	bl	8015e30 <rmw_get_zero_initialized_init_options>
 8015e12:	2300      	movs	r3, #0
 8015e14:	4620      	mov	r0, r4
 8015e16:	60a3      	str	r3, [r4, #8]
 8015e18:	64a3      	str	r3, [r4, #72]	@ 0x48
 8015e1a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8015e1c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8015e28 <rmw_get_zero_initialized_context+0x20>
 8015e20:	ed84 7b00 	vstr	d7, [r4]
 8015e24:	bd10      	pop	{r4, pc}
 8015e26:	bf00      	nop
	...

08015e30 <rmw_get_zero_initialized_init_options>:
 8015e30:	b510      	push	{r4, lr}
 8015e32:	4604      	mov	r4, r0
 8015e34:	2238      	movs	r2, #56	@ 0x38
 8015e36:	2100      	movs	r1, #0
 8015e38:	f007 fdf4 	bl	801da24 <memset>
 8015e3c:	f104 0010 	add.w	r0, r4, #16
 8015e40:	f000 f80a 	bl	8015e58 <rmw_get_default_security_options>
 8015e44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015e48:	4620      	mov	r0, r4
 8015e4a:	60e3      	str	r3, [r4, #12]
 8015e4c:	bd10      	pop	{r4, pc}
 8015e4e:	bf00      	nop

08015e50 <rmw_get_default_publisher_options>:
 8015e50:	2200      	movs	r2, #0
 8015e52:	6002      	str	r2, [r0, #0]
 8015e54:	7102      	strb	r2, [r0, #4]
 8015e56:	4770      	bx	lr

08015e58 <rmw_get_default_security_options>:
 8015e58:	2200      	movs	r2, #0
 8015e5a:	7002      	strb	r2, [r0, #0]
 8015e5c:	6042      	str	r2, [r0, #4]
 8015e5e:	4770      	bx	lr

08015e60 <rmw_subscription_content_filter_options_fini>:
 8015e60:	b1b0      	cbz	r0, 8015e90 <rmw_subscription_content_filter_options_fini+0x30>
 8015e62:	b538      	push	{r3, r4, r5, lr}
 8015e64:	4604      	mov	r4, r0
 8015e66:	4608      	mov	r0, r1
 8015e68:	460d      	mov	r5, r1
 8015e6a:	f7fb ffaf 	bl	8011dcc <rcutils_allocator_is_valid>
 8015e6e:	b168      	cbz	r0, 8015e8c <rmw_subscription_content_filter_options_fini+0x2c>
 8015e70:	6820      	ldr	r0, [r4, #0]
 8015e72:	b120      	cbz	r0, 8015e7e <rmw_subscription_content_filter_options_fini+0x1e>
 8015e74:	686b      	ldr	r3, [r5, #4]
 8015e76:	6929      	ldr	r1, [r5, #16]
 8015e78:	4798      	blx	r3
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	6023      	str	r3, [r4, #0]
 8015e7e:	1d20      	adds	r0, r4, #4
 8015e80:	f006 f8c4 	bl	801c00c <rcutils_string_array_fini>
 8015e84:	3800      	subs	r0, #0
 8015e86:	bf18      	it	ne
 8015e88:	2001      	movne	r0, #1
 8015e8a:	bd38      	pop	{r3, r4, r5, pc}
 8015e8c:	200b      	movs	r0, #11
 8015e8e:	bd38      	pop	{r3, r4, r5, pc}
 8015e90:	200b      	movs	r0, #11
 8015e92:	4770      	bx	lr

08015e94 <rmw_get_default_subscription_options>:
 8015e94:	2200      	movs	r2, #0
 8015e96:	e9c0 2200 	strd	r2, r2, [r0]
 8015e9a:	6082      	str	r2, [r0, #8]
 8015e9c:	4770      	bx	lr
 8015e9e:	bf00      	nop

08015ea0 <rmw_get_zero_initialized_message_info>:
 8015ea0:	b510      	push	{r4, lr}
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	2240      	movs	r2, #64	@ 0x40
 8015ea6:	2100      	movs	r1, #0
 8015ea8:	f007 fdbc 	bl	801da24 <memset>
 8015eac:	4620      	mov	r0, r4
 8015eae:	bd10      	pop	{r4, pc}

08015eb0 <rmw_validate_full_topic_name>:
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	d05d      	beq.n	8015f70 <rmw_validate_full_topic_name+0xc0>
 8015eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eb8:	460d      	mov	r5, r1
 8015eba:	2900      	cmp	r1, #0
 8015ebc:	d05a      	beq.n	8015f74 <rmw_validate_full_topic_name+0xc4>
 8015ebe:	4604      	mov	r4, r0
 8015ec0:	4616      	mov	r6, r2
 8015ec2:	f7ea fa17 	bl	80002f4 <strlen>
 8015ec6:	b150      	cbz	r0, 8015ede <rmw_validate_full_topic_name+0x2e>
 8015ec8:	7823      	ldrb	r3, [r4, #0]
 8015eca:	2b2f      	cmp	r3, #47	@ 0x2f
 8015ecc:	d00e      	beq.n	8015eec <rmw_validate_full_topic_name+0x3c>
 8015ece:	2302      	movs	r3, #2
 8015ed0:	602b      	str	r3, [r5, #0]
 8015ed2:	b146      	cbz	r6, 8015ee6 <rmw_validate_full_topic_name+0x36>
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	6033      	str	r3, [r6, #0]
 8015eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ede:	2301      	movs	r3, #1
 8015ee0:	602b      	str	r3, [r5, #0]
 8015ee2:	2e00      	cmp	r6, #0
 8015ee4:	d1f6      	bne.n	8015ed4 <rmw_validate_full_topic_name+0x24>
 8015ee6:	2000      	movs	r0, #0
 8015ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eec:	1e43      	subs	r3, r0, #1
 8015eee:	5ce2      	ldrb	r2, [r4, r3]
 8015ef0:	2a2f      	cmp	r2, #47	@ 0x2f
 8015ef2:	d041      	beq.n	8015f78 <rmw_validate_full_topic_name+0xc8>
 8015ef4:	1e62      	subs	r2, r4, #1
 8015ef6:	f1c4 0e01 	rsb	lr, r4, #1
 8015efa:	eb02 0800 	add.w	r8, r2, r0
 8015efe:	eb0e 0702 	add.w	r7, lr, r2
 8015f02:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015f06:	f023 0120 	bic.w	r1, r3, #32
 8015f0a:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8015f0e:	3941      	subs	r1, #65	@ 0x41
 8015f10:	2919      	cmp	r1, #25
 8015f12:	d90f      	bls.n	8015f34 <rmw_validate_full_topic_name+0x84>
 8015f14:	f1bc 0f0a 	cmp.w	ip, #10
 8015f18:	d90c      	bls.n	8015f34 <rmw_validate_full_topic_name+0x84>
 8015f1a:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8015f1e:	fab3 f383 	clz	r3, r3
 8015f22:	095b      	lsrs	r3, r3, #5
 8015f24:	b933      	cbnz	r3, 8015f34 <rmw_validate_full_topic_name+0x84>
 8015f26:	2204      	movs	r2, #4
 8015f28:	602a      	str	r2, [r5, #0]
 8015f2a:	2e00      	cmp	r6, #0
 8015f2c:	d0db      	beq.n	8015ee6 <rmw_validate_full_topic_name+0x36>
 8015f2e:	4618      	mov	r0, r3
 8015f30:	6037      	str	r7, [r6, #0]
 8015f32:	e7d2      	b.n	8015eda <rmw_validate_full_topic_name+0x2a>
 8015f34:	4542      	cmp	r2, r8
 8015f36:	d1e2      	bne.n	8015efe <rmw_validate_full_topic_name+0x4e>
 8015f38:	2301      	movs	r3, #1
 8015f3a:	4f1a      	ldr	r7, [pc, #104]	@ (8015fa4 <rmw_validate_full_topic_name+0xf4>)
 8015f3c:	e004      	b.n	8015f48 <rmw_validate_full_topic_name+0x98>
 8015f3e:	4298      	cmp	r0, r3
 8015f40:	f104 0401 	add.w	r4, r4, #1
 8015f44:	4613      	mov	r3, r2
 8015f46:	d91c      	bls.n	8015f82 <rmw_validate_full_topic_name+0xd2>
 8015f48:	4298      	cmp	r0, r3
 8015f4a:	f103 0201 	add.w	r2, r3, #1
 8015f4e:	d0f6      	beq.n	8015f3e <rmw_validate_full_topic_name+0x8e>
 8015f50:	7821      	ldrb	r1, [r4, #0]
 8015f52:	292f      	cmp	r1, #47	@ 0x2f
 8015f54:	d1f3      	bne.n	8015f3e <rmw_validate_full_topic_name+0x8e>
 8015f56:	7861      	ldrb	r1, [r4, #1]
 8015f58:	292f      	cmp	r1, #47	@ 0x2f
 8015f5a:	d01e      	beq.n	8015f9a <rmw_validate_full_topic_name+0xea>
 8015f5c:	5dc9      	ldrb	r1, [r1, r7]
 8015f5e:	0749      	lsls	r1, r1, #29
 8015f60:	d5ed      	bpl.n	8015f3e <rmw_validate_full_topic_name+0x8e>
 8015f62:	2206      	movs	r2, #6
 8015f64:	602a      	str	r2, [r5, #0]
 8015f66:	2e00      	cmp	r6, #0
 8015f68:	d0bd      	beq.n	8015ee6 <rmw_validate_full_topic_name+0x36>
 8015f6a:	2000      	movs	r0, #0
 8015f6c:	6033      	str	r3, [r6, #0]
 8015f6e:	e7b4      	b.n	8015eda <rmw_validate_full_topic_name+0x2a>
 8015f70:	200b      	movs	r0, #11
 8015f72:	4770      	bx	lr
 8015f74:	200b      	movs	r0, #11
 8015f76:	e7b0      	b.n	8015eda <rmw_validate_full_topic_name+0x2a>
 8015f78:	2203      	movs	r2, #3
 8015f7a:	602a      	str	r2, [r5, #0]
 8015f7c:	2e00      	cmp	r6, #0
 8015f7e:	d1f4      	bne.n	8015f6a <rmw_validate_full_topic_name+0xba>
 8015f80:	e7b1      	b.n	8015ee6 <rmw_validate_full_topic_name+0x36>
 8015f82:	28f7      	cmp	r0, #247	@ 0xf7
 8015f84:	d803      	bhi.n	8015f8e <rmw_validate_full_topic_name+0xde>
 8015f86:	2300      	movs	r3, #0
 8015f88:	4618      	mov	r0, r3
 8015f8a:	602b      	str	r3, [r5, #0]
 8015f8c:	e7a5      	b.n	8015eda <rmw_validate_full_topic_name+0x2a>
 8015f8e:	2307      	movs	r3, #7
 8015f90:	602b      	str	r3, [r5, #0]
 8015f92:	2e00      	cmp	r6, #0
 8015f94:	d0a7      	beq.n	8015ee6 <rmw_validate_full_topic_name+0x36>
 8015f96:	23f6      	movs	r3, #246	@ 0xf6
 8015f98:	e7e7      	b.n	8015f6a <rmw_validate_full_topic_name+0xba>
 8015f9a:	2205      	movs	r2, #5
 8015f9c:	602a      	str	r2, [r5, #0]
 8015f9e:	2e00      	cmp	r6, #0
 8015fa0:	d1e3      	bne.n	8015f6a <rmw_validate_full_topic_name+0xba>
 8015fa2:	e7a0      	b.n	8015ee6 <rmw_validate_full_topic_name+0x36>
 8015fa4:	08020bae 	.word	0x08020bae

08015fa8 <rmw_validate_namespace_with_size>:
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	d043      	beq.n	8016034 <rmw_validate_namespace_with_size+0x8c>
 8015fac:	b570      	push	{r4, r5, r6, lr}
 8015fae:	4614      	mov	r4, r2
 8015fb0:	b0c2      	sub	sp, #264	@ 0x108
 8015fb2:	b32a      	cbz	r2, 8016000 <rmw_validate_namespace_with_size+0x58>
 8015fb4:	2901      	cmp	r1, #1
 8015fb6:	460d      	mov	r5, r1
 8015fb8:	461e      	mov	r6, r3
 8015fba:	d102      	bne.n	8015fc2 <rmw_validate_namespace_with_size+0x1a>
 8015fbc:	7803      	ldrb	r3, [r0, #0]
 8015fbe:	2b2f      	cmp	r3, #47	@ 0x2f
 8015fc0:	d012      	beq.n	8015fe8 <rmw_validate_namespace_with_size+0x40>
 8015fc2:	aa01      	add	r2, sp, #4
 8015fc4:	4669      	mov	r1, sp
 8015fc6:	f7ff ff73 	bl	8015eb0 <rmw_validate_full_topic_name>
 8015fca:	b980      	cbnz	r0, 8015fee <rmw_validate_namespace_with_size+0x46>
 8015fcc:	9a00      	ldr	r2, [sp, #0]
 8015fce:	b14a      	cbz	r2, 8015fe4 <rmw_validate_namespace_with_size+0x3c>
 8015fd0:	2a07      	cmp	r2, #7
 8015fd2:	d007      	beq.n	8015fe4 <rmw_validate_namespace_with_size+0x3c>
 8015fd4:	1e53      	subs	r3, r2, #1
 8015fd6:	2b05      	cmp	r3, #5
 8015fd8:	d82e      	bhi.n	8016038 <rmw_validate_namespace_with_size+0x90>
 8015fda:	e8df f003 	tbb	[pc, r3]
 8015fde:	1f1c      	.short	0x1f1c
 8015fe0:	14282522 	.word	0x14282522
 8015fe4:	2df5      	cmp	r5, #245	@ 0xf5
 8015fe6:	d804      	bhi.n	8015ff2 <rmw_validate_namespace_with_size+0x4a>
 8015fe8:	2300      	movs	r3, #0
 8015fea:	4618      	mov	r0, r3
 8015fec:	6023      	str	r3, [r4, #0]
 8015fee:	b042      	add	sp, #264	@ 0x108
 8015ff0:	bd70      	pop	{r4, r5, r6, pc}
 8015ff2:	2307      	movs	r3, #7
 8015ff4:	6023      	str	r3, [r4, #0]
 8015ff6:	2e00      	cmp	r6, #0
 8015ff8:	d0f9      	beq.n	8015fee <rmw_validate_namespace_with_size+0x46>
 8015ffa:	23f4      	movs	r3, #244	@ 0xf4
 8015ffc:	6033      	str	r3, [r6, #0]
 8015ffe:	e7f6      	b.n	8015fee <rmw_validate_namespace_with_size+0x46>
 8016000:	200b      	movs	r0, #11
 8016002:	b042      	add	sp, #264	@ 0x108
 8016004:	bd70      	pop	{r4, r5, r6, pc}
 8016006:	2306      	movs	r3, #6
 8016008:	6023      	str	r3, [r4, #0]
 801600a:	2e00      	cmp	r6, #0
 801600c:	d0ef      	beq.n	8015fee <rmw_validate_namespace_with_size+0x46>
 801600e:	9b01      	ldr	r3, [sp, #4]
 8016010:	6033      	str	r3, [r6, #0]
 8016012:	b042      	add	sp, #264	@ 0x108
 8016014:	bd70      	pop	{r4, r5, r6, pc}
 8016016:	2301      	movs	r3, #1
 8016018:	6023      	str	r3, [r4, #0]
 801601a:	e7f6      	b.n	801600a <rmw_validate_namespace_with_size+0x62>
 801601c:	2302      	movs	r3, #2
 801601e:	6023      	str	r3, [r4, #0]
 8016020:	e7f3      	b.n	801600a <rmw_validate_namespace_with_size+0x62>
 8016022:	2303      	movs	r3, #3
 8016024:	6023      	str	r3, [r4, #0]
 8016026:	e7f0      	b.n	801600a <rmw_validate_namespace_with_size+0x62>
 8016028:	2304      	movs	r3, #4
 801602a:	6023      	str	r3, [r4, #0]
 801602c:	e7ed      	b.n	801600a <rmw_validate_namespace_with_size+0x62>
 801602e:	2305      	movs	r3, #5
 8016030:	6023      	str	r3, [r4, #0]
 8016032:	e7ea      	b.n	801600a <rmw_validate_namespace_with_size+0x62>
 8016034:	200b      	movs	r0, #11
 8016036:	4770      	bx	lr
 8016038:	4613      	mov	r3, r2
 801603a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801603e:	4a03      	ldr	r2, [pc, #12]	@ (801604c <rmw_validate_namespace_with_size+0xa4>)
 8016040:	a802      	add	r0, sp, #8
 8016042:	f7ff fd25 	bl	8015a90 <rcutils_snprintf>
 8016046:	2001      	movs	r0, #1
 8016048:	e7d1      	b.n	8015fee <rmw_validate_namespace_with_size+0x46>
 801604a:	bf00      	nop
 801604c:	0802040c 	.word	0x0802040c

08016050 <rmw_validate_namespace>:
 8016050:	b168      	cbz	r0, 801606e <rmw_validate_namespace+0x1e>
 8016052:	b570      	push	{r4, r5, r6, lr}
 8016054:	460d      	mov	r5, r1
 8016056:	4616      	mov	r6, r2
 8016058:	4604      	mov	r4, r0
 801605a:	f7ea f94b 	bl	80002f4 <strlen>
 801605e:	4633      	mov	r3, r6
 8016060:	4601      	mov	r1, r0
 8016062:	462a      	mov	r2, r5
 8016064:	4620      	mov	r0, r4
 8016066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801606a:	f7ff bf9d 	b.w	8015fa8 <rmw_validate_namespace_with_size>
 801606e:	200b      	movs	r0, #11
 8016070:	4770      	bx	lr
 8016072:	bf00      	nop

08016074 <rmw_namespace_validation_result_string>:
 8016074:	2807      	cmp	r0, #7
 8016076:	d803      	bhi.n	8016080 <rmw_namespace_validation_result_string+0xc>
 8016078:	4b02      	ldr	r3, [pc, #8]	@ (8016084 <rmw_namespace_validation_result_string+0x10>)
 801607a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801607e:	4770      	bx	lr
 8016080:	4801      	ldr	r0, [pc, #4]	@ (8016088 <rmw_namespace_validation_result_string+0x14>)
 8016082:	4770      	bx	lr
 8016084:	08020604 	.word	0x08020604
 8016088:	0802045c 	.word	0x0802045c

0801608c <rmw_validate_node_name>:
 801608c:	2800      	cmp	r0, #0
 801608e:	d042      	beq.n	8016116 <rmw_validate_node_name+0x8a>
 8016090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016094:	460d      	mov	r5, r1
 8016096:	2900      	cmp	r1, #0
 8016098:	d03f      	beq.n	801611a <rmw_validate_node_name+0x8e>
 801609a:	4604      	mov	r4, r0
 801609c:	4616      	mov	r6, r2
 801609e:	f7ea f929 	bl	80002f4 <strlen>
 80160a2:	b310      	cbz	r0, 80160ea <rmw_validate_node_name+0x5e>
 80160a4:	1e63      	subs	r3, r4, #1
 80160a6:	f1c4 0101 	rsb	r1, r4, #1
 80160aa:	eb03 0800 	add.w	r8, r3, r0
 80160ae:	18cf      	adds	r7, r1, r3
 80160b0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80160b4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80160b8:	f02e 0c20 	bic.w	ip, lr, #32
 80160bc:	2a09      	cmp	r2, #9
 80160be:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80160c2:	d905      	bls.n	80160d0 <rmw_validate_node_name+0x44>
 80160c4:	f1bc 0f19 	cmp.w	ip, #25
 80160c8:	d902      	bls.n	80160d0 <rmw_validate_node_name+0x44>
 80160ca:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80160ce:	d114      	bne.n	80160fa <rmw_validate_node_name+0x6e>
 80160d0:	4598      	cmp	r8, r3
 80160d2:	d1ec      	bne.n	80160ae <rmw_validate_node_name+0x22>
 80160d4:	7822      	ldrb	r2, [r4, #0]
 80160d6:	4b16      	ldr	r3, [pc, #88]	@ (8016130 <rmw_validate_node_name+0xa4>)
 80160d8:	5cd3      	ldrb	r3, [r2, r3]
 80160da:	f013 0304 	ands.w	r3, r3, #4
 80160de:	d113      	bne.n	8016108 <rmw_validate_node_name+0x7c>
 80160e0:	28ff      	cmp	r0, #255	@ 0xff
 80160e2:	d81c      	bhi.n	801611e <rmw_validate_node_name+0x92>
 80160e4:	4618      	mov	r0, r3
 80160e6:	602b      	str	r3, [r5, #0]
 80160e8:	e00c      	b.n	8016104 <rmw_validate_node_name+0x78>
 80160ea:	2301      	movs	r3, #1
 80160ec:	602b      	str	r3, [r5, #0]
 80160ee:	b17e      	cbz	r6, 8016110 <rmw_validate_node_name+0x84>
 80160f0:	2300      	movs	r3, #0
 80160f2:	4618      	mov	r0, r3
 80160f4:	6033      	str	r3, [r6, #0]
 80160f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160fa:	2302      	movs	r3, #2
 80160fc:	602b      	str	r3, [r5, #0]
 80160fe:	b13e      	cbz	r6, 8016110 <rmw_validate_node_name+0x84>
 8016100:	2000      	movs	r0, #0
 8016102:	6037      	str	r7, [r6, #0]
 8016104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016108:	2303      	movs	r3, #3
 801610a:	602b      	str	r3, [r5, #0]
 801610c:	2e00      	cmp	r6, #0
 801610e:	d1ef      	bne.n	80160f0 <rmw_validate_node_name+0x64>
 8016110:	2000      	movs	r0, #0
 8016112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016116:	200b      	movs	r0, #11
 8016118:	4770      	bx	lr
 801611a:	200b      	movs	r0, #11
 801611c:	e7f2      	b.n	8016104 <rmw_validate_node_name+0x78>
 801611e:	2204      	movs	r2, #4
 8016120:	602a      	str	r2, [r5, #0]
 8016122:	2e00      	cmp	r6, #0
 8016124:	d0f4      	beq.n	8016110 <rmw_validate_node_name+0x84>
 8016126:	22fe      	movs	r2, #254	@ 0xfe
 8016128:	4618      	mov	r0, r3
 801612a:	6032      	str	r2, [r6, #0]
 801612c:	e7ea      	b.n	8016104 <rmw_validate_node_name+0x78>
 801612e:	bf00      	nop
 8016130:	08020bae 	.word	0x08020bae

08016134 <rmw_node_name_validation_result_string>:
 8016134:	2804      	cmp	r0, #4
 8016136:	d803      	bhi.n	8016140 <rmw_node_name_validation_result_string+0xc>
 8016138:	4b02      	ldr	r3, [pc, #8]	@ (8016144 <rmw_node_name_validation_result_string+0x10>)
 801613a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801613e:	4770      	bx	lr
 8016140:	4801      	ldr	r0, [pc, #4]	@ (8016148 <rmw_node_name_validation_result_string+0x14>)
 8016142:	4770      	bx	lr
 8016144:	08020710 	.word	0x08020710
 8016148:	08020624 	.word	0x08020624

0801614c <rmw_destroy_client>:
 801614c:	b570      	push	{r4, r5, r6, lr}
 801614e:	b128      	cbz	r0, 801615c <rmw_destroy_client+0x10>
 8016150:	4604      	mov	r4, r0
 8016152:	6800      	ldr	r0, [r0, #0]
 8016154:	460d      	mov	r5, r1
 8016156:	f001 fd57 	bl	8017c08 <is_uxrce_rmw_identifier_valid>
 801615a:	b910      	cbnz	r0, 8016162 <rmw_destroy_client+0x16>
 801615c:	2401      	movs	r4, #1
 801615e:	4620      	mov	r0, r4
 8016160:	bd70      	pop	{r4, r5, r6, pc}
 8016162:	6863      	ldr	r3, [r4, #4]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d0f9      	beq.n	801615c <rmw_destroy_client+0x10>
 8016168:	2d00      	cmp	r5, #0
 801616a:	d0f7      	beq.n	801615c <rmw_destroy_client+0x10>
 801616c:	6828      	ldr	r0, [r5, #0]
 801616e:	f001 fd4b 	bl	8017c08 <is_uxrce_rmw_identifier_valid>
 8016172:	2800      	cmp	r0, #0
 8016174:	d0f2      	beq.n	801615c <rmw_destroy_client+0x10>
 8016176:	686e      	ldr	r6, [r5, #4]
 8016178:	2e00      	cmp	r6, #0
 801617a:	d0ef      	beq.n	801615c <rmw_destroy_client+0x10>
 801617c:	6864      	ldr	r4, [r4, #4]
 801617e:	6932      	ldr	r2, [r6, #16]
 8016180:	6920      	ldr	r0, [r4, #16]
 8016182:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016186:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801618a:	6819      	ldr	r1, [r3, #0]
 801618c:	f002 fb9e 	bl	80188cc <uxr_buffer_cancel_data>
 8016190:	4602      	mov	r2, r0
 8016192:	6920      	ldr	r0, [r4, #16]
 8016194:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016198:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801619c:	f001 fcba 	bl	8017b14 <run_xrce_session>
 80161a0:	6920      	ldr	r0, [r4, #16]
 80161a2:	6932      	ldr	r2, [r6, #16]
 80161a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80161a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80161ac:	6819      	ldr	r1, [r3, #0]
 80161ae:	f002 f863 	bl	8018278 <uxr_buffer_delete_entity>
 80161b2:	4602      	mov	r2, r0
 80161b4:	6920      	ldr	r0, [r4, #16]
 80161b6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80161ba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80161be:	f001 fca9 	bl	8017b14 <run_xrce_session>
 80161c2:	4603      	mov	r3, r0
 80161c4:	4628      	mov	r0, r5
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	bf14      	ite	ne
 80161ca:	2400      	movne	r4, #0
 80161cc:	2402      	moveq	r4, #2
 80161ce:	f001 fb7d 	bl	80178cc <rmw_uxrce_fini_client_memory>
 80161d2:	e7c4      	b.n	801615e <rmw_destroy_client+0x12>

080161d4 <rmw_get_implementation_identifier>:
 80161d4:	4b01      	ldr	r3, [pc, #4]	@ (80161dc <rmw_get_implementation_identifier+0x8>)
 80161d6:	6818      	ldr	r0, [r3, #0]
 80161d8:	4770      	bx	lr
 80161da:	bf00      	nop
 80161dc:	08020a48 	.word	0x08020a48

080161e0 <rmw_init_options_init>:
 80161e0:	b084      	sub	sp, #16
 80161e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161e4:	b083      	sub	sp, #12
 80161e6:	ad09      	add	r5, sp, #36	@ 0x24
 80161e8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80161ec:	b130      	cbz	r0, 80161fc <rmw_init_options_init+0x1c>
 80161ee:	4604      	mov	r4, r0
 80161f0:	4628      	mov	r0, r5
 80161f2:	f7fb fdeb 	bl	8011dcc <rcutils_allocator_is_valid>
 80161f6:	b108      	cbz	r0, 80161fc <rmw_init_options_init+0x1c>
 80161f8:	68a6      	ldr	r6, [r4, #8]
 80161fa:	b12e      	cbz	r6, 8016208 <rmw_init_options_init+0x28>
 80161fc:	200b      	movs	r0, #11
 80161fe:	b003      	add	sp, #12
 8016200:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016204:	b004      	add	sp, #16
 8016206:	4770      	bx	lr
 8016208:	2200      	movs	r2, #0
 801620a:	2300      	movs	r3, #0
 801620c:	f104 0c20 	add.w	ip, r4, #32
 8016210:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80162ac <rmw_init_options_init+0xcc>
 8016214:	466f      	mov	r7, sp
 8016216:	e9c4 2300 	strd	r2, r3, [r4]
 801621a:	4b20      	ldr	r3, [pc, #128]	@ (801629c <rmw_init_options_init+0xbc>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	60a3      	str	r3, [r4, #8]
 8016220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016222:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016226:	682b      	ldr	r3, [r5, #0]
 8016228:	4638      	mov	r0, r7
 801622a:	f8cc 3000 	str.w	r3, [ip]
 801622e:	f8c4 e01c 	str.w	lr, [r4, #28]
 8016232:	60e6      	str	r6, [r4, #12]
 8016234:	f7ff fe10 	bl	8015e58 <rmw_get_default_security_options>
 8016238:	f104 0310 	add.w	r3, r4, #16
 801623c:	2203      	movs	r2, #3
 801623e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016242:	e883 0003 	stmia.w	r3, {r0, r1}
 8016246:	4816      	ldr	r0, [pc, #88]	@ (80162a0 <rmw_init_options_init+0xc0>)
 8016248:	4916      	ldr	r1, [pc, #88]	@ (80162a4 <rmw_init_options_init+0xc4>)
 801624a:	7626      	strb	r6, [r4, #24]
 801624c:	f001 fa7e 	bl	801774c <rmw_uxrce_init_init_options_impl_memory>
 8016250:	4813      	ldr	r0, [pc, #76]	@ (80162a0 <rmw_init_options_init+0xc0>)
 8016252:	f006 f875 	bl	801c340 <get_memory>
 8016256:	b1f0      	cbz	r0, 8016296 <rmw_init_options_init+0xb6>
 8016258:	4a13      	ldr	r2, [pc, #76]	@ (80162a8 <rmw_init_options_init+0xc8>)
 801625a:	6883      	ldr	r3, [r0, #8]
 801625c:	6851      	ldr	r1, [r2, #4]
 801625e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016260:	7810      	ldrb	r0, [r2, #0]
 8016262:	6159      	str	r1, [r3, #20]
 8016264:	68d1      	ldr	r1, [r2, #12]
 8016266:	7418      	strb	r0, [r3, #16]
 8016268:	61d9      	str	r1, [r3, #28]
 801626a:	6911      	ldr	r1, [r2, #16]
 801626c:	6219      	str	r1, [r3, #32]
 801626e:	6951      	ldr	r1, [r2, #20]
 8016270:	6892      	ldr	r2, [r2, #8]
 8016272:	6259      	str	r1, [r3, #36]	@ 0x24
 8016274:	619a      	str	r2, [r3, #24]
 8016276:	f004 fad5 	bl	801a824 <uxr_nanos>
 801627a:	f007 f82f 	bl	801d2dc <srand>
 801627e:	f007 f85b 	bl	801d338 <rand>
 8016282:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016284:	6298      	str	r0, [r3, #40]	@ 0x28
 8016286:	2800      	cmp	r0, #0
 8016288:	d0f9      	beq.n	801627e <rmw_init_options_init+0x9e>
 801628a:	2000      	movs	r0, #0
 801628c:	b003      	add	sp, #12
 801628e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016292:	b004      	add	sp, #16
 8016294:	4770      	bx	lr
 8016296:	2001      	movs	r0, #1
 8016298:	e7b1      	b.n	80161fe <rmw_init_options_init+0x1e>
 801629a:	bf00      	nop
 801629c:	08020a48 	.word	0x08020a48
 80162a0:	240695b4 	.word	0x240695b4
 80162a4:	24064e50 	.word	0x24064e50
 80162a8:	24064b9c 	.word	0x24064b9c
 80162ac:	08020140 	.word	0x08020140

080162b0 <rmw_init_options_copy>:
 80162b0:	2800      	cmp	r0, #0
 80162b2:	d047      	beq.n	8016344 <rmw_init_options_copy+0x94>
 80162b4:	b570      	push	{r4, r5, r6, lr}
 80162b6:	460d      	mov	r5, r1
 80162b8:	b149      	cbz	r1, 80162ce <rmw_init_options_copy+0x1e>
 80162ba:	4604      	mov	r4, r0
 80162bc:	6880      	ldr	r0, [r0, #8]
 80162be:	b120      	cbz	r0, 80162ca <rmw_init_options_copy+0x1a>
 80162c0:	4b22      	ldr	r3, [pc, #136]	@ (801634c <rmw_init_options_copy+0x9c>)
 80162c2:	6819      	ldr	r1, [r3, #0]
 80162c4:	f7ea f80c 	bl	80002e0 <strcmp>
 80162c8:	bba8      	cbnz	r0, 8016336 <rmw_init_options_copy+0x86>
 80162ca:	68ab      	ldr	r3, [r5, #8]
 80162cc:	b11b      	cbz	r3, 80162d6 <rmw_init_options_copy+0x26>
 80162ce:	f04f 0c0b 	mov.w	ip, #11
 80162d2:	4660      	mov	r0, ip
 80162d4:	bd70      	pop	{r4, r5, r6, pc}
 80162d6:	4623      	mov	r3, r4
 80162d8:	462a      	mov	r2, r5
 80162da:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80162de:	f8d3 e000 	ldr.w	lr, [r3]
 80162e2:	3310      	adds	r3, #16
 80162e4:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 80162e8:	3210      	adds	r2, #16
 80162ea:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80162ee:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80162f2:	42b3      	cmp	r3, r6
 80162f4:	f842 ec10 	str.w	lr, [r2, #-16]
 80162f8:	f842 cc0c 	str.w	ip, [r2, #-12]
 80162fc:	f842 0c08 	str.w	r0, [r2, #-8]
 8016300:	f842 1c04 	str.w	r1, [r2, #-4]
 8016304:	d1eb      	bne.n	80162de <rmw_init_options_copy+0x2e>
 8016306:	6819      	ldr	r1, [r3, #0]
 8016308:	685b      	ldr	r3, [r3, #4]
 801630a:	4811      	ldr	r0, [pc, #68]	@ (8016350 <rmw_init_options_copy+0xa0>)
 801630c:	6011      	str	r1, [r2, #0]
 801630e:	6053      	str	r3, [r2, #4]
 8016310:	f006 f816 	bl	801c340 <get_memory>
 8016314:	b198      	cbz	r0, 801633e <rmw_init_options_copy+0x8e>
 8016316:	6883      	ldr	r3, [r0, #8]
 8016318:	f04f 0c00 	mov.w	ip, #0
 801631c:	636b      	str	r3, [r5, #52]	@ 0x34
 801631e:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8016320:	f103 0410 	add.w	r4, r3, #16
 8016324:	3510      	adds	r5, #16
 8016326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801632a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801632e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016332:	4660      	mov	r0, ip
 8016334:	bd70      	pop	{r4, r5, r6, pc}
 8016336:	f04f 0c0c 	mov.w	ip, #12
 801633a:	4660      	mov	r0, ip
 801633c:	bd70      	pop	{r4, r5, r6, pc}
 801633e:	f04f 0c01 	mov.w	ip, #1
 8016342:	e7c6      	b.n	80162d2 <rmw_init_options_copy+0x22>
 8016344:	f04f 0c0b 	mov.w	ip, #11
 8016348:	4660      	mov	r0, ip
 801634a:	4770      	bx	lr
 801634c:	08020a48 	.word	0x08020a48
 8016350:	240695b4 	.word	0x240695b4

08016354 <rmw_init_options_fini>:
 8016354:	b510      	push	{r4, lr}
 8016356:	b08e      	sub	sp, #56	@ 0x38
 8016358:	b388      	cbz	r0, 80163be <rmw_init_options_fini+0x6a>
 801635a:	4604      	mov	r4, r0
 801635c:	3020      	adds	r0, #32
 801635e:	f7fb fd35 	bl	8011dcc <rcutils_allocator_is_valid>
 8016362:	b360      	cbz	r0, 80163be <rmw_init_options_fini+0x6a>
 8016364:	68a0      	ldr	r0, [r4, #8]
 8016366:	b120      	cbz	r0, 8016372 <rmw_init_options_fini+0x1e>
 8016368:	4b1a      	ldr	r3, [pc, #104]	@ (80163d4 <rmw_init_options_fini+0x80>)
 801636a:	6819      	ldr	r1, [r3, #0]
 801636c:	f7e9 ffb8 	bl	80002e0 <strcmp>
 8016370:	bb68      	cbnz	r0, 80163ce <rmw_init_options_fini+0x7a>
 8016372:	4b19      	ldr	r3, [pc, #100]	@ (80163d8 <rmw_init_options_fini+0x84>)
 8016374:	6819      	ldr	r1, [r3, #0]
 8016376:	b331      	cbz	r1, 80163c6 <rmw_init_options_fini+0x72>
 8016378:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801637a:	e001      	b.n	8016380 <rmw_init_options_fini+0x2c>
 801637c:	6849      	ldr	r1, [r1, #4]
 801637e:	b311      	cbz	r1, 80163c6 <rmw_init_options_fini+0x72>
 8016380:	688b      	ldr	r3, [r1, #8]
 8016382:	429a      	cmp	r2, r3
 8016384:	d1fa      	bne.n	801637c <rmw_init_options_fini+0x28>
 8016386:	4814      	ldr	r0, [pc, #80]	@ (80163d8 <rmw_init_options_fini+0x84>)
 8016388:	f005 ffea 	bl	801c360 <put_memory>
 801638c:	4668      	mov	r0, sp
 801638e:	f7ff fd4f 	bl	8015e30 <rmw_get_zero_initialized_init_options>
 8016392:	46ee      	mov	lr, sp
 8016394:	46a4      	mov	ip, r4
 8016396:	2400      	movs	r4, #0
 8016398:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801639c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80163a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80163ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163b0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80163b4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80163b8:	4620      	mov	r0, r4
 80163ba:	b00e      	add	sp, #56	@ 0x38
 80163bc:	bd10      	pop	{r4, pc}
 80163be:	240b      	movs	r4, #11
 80163c0:	4620      	mov	r0, r4
 80163c2:	b00e      	add	sp, #56	@ 0x38
 80163c4:	bd10      	pop	{r4, pc}
 80163c6:	2401      	movs	r4, #1
 80163c8:	4620      	mov	r0, r4
 80163ca:	b00e      	add	sp, #56	@ 0x38
 80163cc:	bd10      	pop	{r4, pc}
 80163ce:	240c      	movs	r4, #12
 80163d0:	e7f2      	b.n	80163b8 <rmw_init_options_fini+0x64>
 80163d2:	bf00      	nop
 80163d4:	08020a48 	.word	0x08020a48
 80163d8:	240695b4 	.word	0x240695b4

080163dc <rmw_init>:
 80163dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163e0:	b083      	sub	sp, #12
 80163e2:	2800      	cmp	r0, #0
 80163e4:	f000 80d3 	beq.w	801658e <rmw_init+0x1b2>
 80163e8:	460e      	mov	r6, r1
 80163ea:	2900      	cmp	r1, #0
 80163ec:	f000 80cf 	beq.w	801658e <rmw_init+0x1b2>
 80163f0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80163f2:	4605      	mov	r5, r0
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	f000 80ca 	beq.w	801658e <rmw_init+0x1b2>
 80163fa:	4b78      	ldr	r3, [pc, #480]	@ (80165dc <rmw_init+0x200>)
 80163fc:	6880      	ldr	r0, [r0, #8]
 80163fe:	681f      	ldr	r7, [r3, #0]
 8016400:	b128      	cbz	r0, 801640e <rmw_init+0x32>
 8016402:	4639      	mov	r1, r7
 8016404:	f7e9 ff6c 	bl	80002e0 <strcmp>
 8016408:	2800      	cmp	r0, #0
 801640a:	f040 80ca 	bne.w	80165a2 <rmw_init+0x1c6>
 801640e:	4c74      	ldr	r4, [pc, #464]	@ (80165e0 <rmw_init+0x204>)
 8016410:	f04f 0800 	mov.w	r8, #0
 8016414:	4973      	ldr	r1, [pc, #460]	@ (80165e4 <rmw_init+0x208>)
 8016416:	4874      	ldr	r0, [pc, #464]	@ (80165e8 <rmw_init+0x20c>)
 8016418:	e9d5 2300 	ldrd	r2, r3, [r5]
 801641c:	60b7      	str	r7, [r6, #8]
 801641e:	e9c6 2300 	strd	r2, r3, [r6]
 8016422:	68eb      	ldr	r3, [r5, #12]
 8016424:	2201      	movs	r2, #1
 8016426:	64b3      	str	r3, [r6, #72]	@ 0x48
 8016428:	f001 f930 	bl	801768c <rmw_uxrce_init_session_memory>
 801642c:	4620      	mov	r0, r4
 801642e:	2204      	movs	r2, #4
 8016430:	496e      	ldr	r1, [pc, #440]	@ (80165ec <rmw_init+0x210>)
 8016432:	f001 f96b 	bl	801770c <rmw_uxrce_init_static_input_buffer_memory>
 8016436:	486c      	ldr	r0, [pc, #432]	@ (80165e8 <rmw_init+0x20c>)
 8016438:	f884 800d 	strb.w	r8, [r4, #13]
 801643c:	f005 ff80 	bl	801c340 <get_memory>
 8016440:	2800      	cmp	r0, #0
 8016442:	f000 80a9 	beq.w	8016598 <rmw_init+0x1bc>
 8016446:	6884      	ldr	r4, [r0, #8]
 8016448:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801644a:	f104 0910 	add.w	r9, r4, #16
 801644e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8016450:	f890 c010 	ldrb.w	ip, [r0, #16]
 8016454:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8016458:	9101      	str	r1, [sp, #4]
 801645a:	4661      	mov	r1, ip
 801645c:	6a00      	ldr	r0, [r0, #32]
 801645e:	9000      	str	r0, [sp, #0]
 8016460:	4648      	mov	r0, r9
 8016462:	f002 f987 	bl	8018774 <uxr_set_custom_transport_callbacks>
 8016466:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801646a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801646e:	4960      	ldr	r1, [pc, #384]	@ (80165f0 <rmw_init+0x214>)
 8016470:	4860      	ldr	r0, [pc, #384]	@ (80165f4 <rmw_init+0x218>)
 8016472:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8016476:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801647a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801647e:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8016482:	2201      	movs	r2, #1
 8016484:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8016488:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801648c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8016490:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8016494:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8016496:	f001 f8d9 	bl	801764c <rmw_uxrce_init_node_memory>
 801649a:	2205      	movs	r2, #5
 801649c:	4956      	ldr	r1, [pc, #344]	@ (80165f8 <rmw_init+0x21c>)
 801649e:	4857      	ldr	r0, [pc, #348]	@ (80165fc <rmw_init+0x220>)
 80164a0:	f001 f8b4 	bl	801760c <rmw_uxrce_init_subscription_memory>
 80164a4:	220a      	movs	r2, #10
 80164a6:	4956      	ldr	r1, [pc, #344]	@ (8016600 <rmw_init+0x224>)
 80164a8:	4856      	ldr	r0, [pc, #344]	@ (8016604 <rmw_init+0x228>)
 80164aa:	f001 f88f 	bl	80175cc <rmw_uxrce_init_publisher_memory>
 80164ae:	2201      	movs	r2, #1
 80164b0:	4955      	ldr	r1, [pc, #340]	@ (8016608 <rmw_init+0x22c>)
 80164b2:	4856      	ldr	r0, [pc, #344]	@ (801660c <rmw_init+0x230>)
 80164b4:	f001 f84a 	bl	801754c <rmw_uxrce_init_service_memory>
 80164b8:	2201      	movs	r2, #1
 80164ba:	4955      	ldr	r1, [pc, #340]	@ (8016610 <rmw_init+0x234>)
 80164bc:	4855      	ldr	r0, [pc, #340]	@ (8016614 <rmw_init+0x238>)
 80164be:	f001 f865 	bl	801758c <rmw_uxrce_init_client_memory>
 80164c2:	220f      	movs	r2, #15
 80164c4:	4954      	ldr	r1, [pc, #336]	@ (8016618 <rmw_init+0x23c>)
 80164c6:	4855      	ldr	r0, [pc, #340]	@ (801661c <rmw_init+0x240>)
 80164c8:	f001 f900 	bl	80176cc <rmw_uxrce_init_topic_memory>
 80164cc:	2203      	movs	r2, #3
 80164ce:	4954      	ldr	r1, [pc, #336]	@ (8016620 <rmw_init+0x244>)
 80164d0:	4854      	ldr	r0, [pc, #336]	@ (8016624 <rmw_init+0x248>)
 80164d2:	f001 f93b 	bl	801774c <rmw_uxrce_init_init_options_impl_memory>
 80164d6:	2204      	movs	r2, #4
 80164d8:	4953      	ldr	r1, [pc, #332]	@ (8016628 <rmw_init+0x24c>)
 80164da:	4854      	ldr	r0, [pc, #336]	@ (801662c <rmw_init+0x250>)
 80164dc:	f001 f956 	bl	801778c <rmw_uxrce_init_wait_set_memory>
 80164e0:	4953      	ldr	r1, [pc, #332]	@ (8016630 <rmw_init+0x254>)
 80164e2:	4854      	ldr	r0, [pc, #336]	@ (8016634 <rmw_init+0x258>)
 80164e4:	2204      	movs	r2, #4
 80164e6:	f001 f971 	bl	80177cc <rmw_uxrce_init_guard_condition_memory>
 80164ea:	4642      	mov	r2, r8
 80164ec:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80164ee:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80164f0:	f000 fe92 	bl	8017218 <rmw_uxrce_transport_init>
 80164f4:	4607      	mov	r7, r0
 80164f6:	2800      	cmp	r0, #0
 80164f8:	d158      	bne.n	80165ac <rmw_init+0x1d0>
 80164fa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80164fc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8016500:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8016504:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016506:	4628      	mov	r0, r5
 8016508:	f002 fb66 	bl	8018bd8 <uxr_init_session>
 801650c:	4622      	mov	r2, r4
 801650e:	494a      	ldr	r1, [pc, #296]	@ (8016638 <rmw_init+0x25c>)
 8016510:	4628      	mov	r0, r5
 8016512:	f002 fb85 	bl	8018c20 <uxr_set_topic_callback>
 8016516:	463a      	mov	r2, r7
 8016518:	4948      	ldr	r1, [pc, #288]	@ (801663c <rmw_init+0x260>)
 801651a:	4628      	mov	r0, r5
 801651c:	f002 fb7c 	bl	8018c18 <uxr_set_status_callback>
 8016520:	463a      	mov	r2, r7
 8016522:	4947      	ldr	r1, [pc, #284]	@ (8016640 <rmw_init+0x264>)
 8016524:	4628      	mov	r0, r5
 8016526:	f002 fb7f 	bl	8018c28 <uxr_set_request_callback>
 801652a:	463a      	mov	r2, r7
 801652c:	4945      	ldr	r1, [pc, #276]	@ (8016644 <rmw_init+0x268>)
 801652e:	4628      	mov	r0, r5
 8016530:	f002 fb7e 	bl	8018c30 <uxr_set_reply_callback>
 8016534:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016538:	2304      	movs	r3, #4
 801653a:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801653e:	0092      	lsls	r2, r2, #2
 8016540:	4628      	mov	r0, r5
 8016542:	f002 fbb5 	bl	8018cb0 <uxr_create_input_reliable_stream>
 8016546:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801654a:	2304      	movs	r3, #4
 801654c:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8016550:	0092      	lsls	r2, r2, #2
 8016552:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8016556:	4628      	mov	r0, r5
 8016558:	f002 fb80 	bl	8018c5c <uxr_create_output_reliable_stream>
 801655c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8016560:	4628      	mov	r0, r5
 8016562:	f002 fb9f 	bl	8018ca4 <uxr_create_input_best_effort_stream>
 8016566:	f241 3194 	movw	r1, #5012	@ 0x1394
 801656a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801656e:	4628      	mov	r0, r5
 8016570:	4421      	add	r1, r4
 8016572:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016576:	f002 fb5f 	bl	8018c38 <uxr_create_output_best_effort_stream>
 801657a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801657e:	4628      	mov	r0, r5
 8016580:	f003 f8e8 	bl	8019754 <uxr_create_session>
 8016584:	b1f8      	cbz	r0, 80165c6 <rmw_init+0x1ea>
 8016586:	4638      	mov	r0, r7
 8016588:	b003      	add	sp, #12
 801658a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801658e:	270b      	movs	r7, #11
 8016590:	4638      	mov	r0, r7
 8016592:	b003      	add	sp, #12
 8016594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016598:	2701      	movs	r7, #1
 801659a:	4638      	mov	r0, r7
 801659c:	b003      	add	sp, #12
 801659e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165a2:	270c      	movs	r7, #12
 80165a4:	4638      	mov	r0, r7
 80165a6:	b003      	add	sp, #12
 80165a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165ac:	4648      	mov	r0, r9
 80165ae:	f002 f91f 	bl	80187f0 <uxr_close_custom_transport>
 80165b2:	4621      	mov	r1, r4
 80165b4:	480c      	ldr	r0, [pc, #48]	@ (80165e8 <rmw_init+0x20c>)
 80165b6:	f005 fed3 	bl	801c360 <put_memory>
 80165ba:	4638      	mov	r0, r7
 80165bc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80165c0:	b003      	add	sp, #12
 80165c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165c6:	4648      	mov	r0, r9
 80165c8:	f002 f912 	bl	80187f0 <uxr_close_custom_transport>
 80165cc:	4621      	mov	r1, r4
 80165ce:	4806      	ldr	r0, [pc, #24]	@ (80165e8 <rmw_init+0x20c>)
 80165d0:	f005 fec6 	bl	801c360 <put_memory>
 80165d4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80165d6:	2701      	movs	r7, #1
 80165d8:	e7d5      	b.n	8016586 <rmw_init+0x1aa>
 80165da:	bf00      	nop
 80165dc:	08020a48 	.word	0x08020a48
 80165e0:	24069604 	.word	0x24069604
 80165e4:	240658b0 	.word	0x240658b0
 80165e8:	240695f4 	.word	0x240695f4
 80165ec:	24066e58 	.word	0x24066e58
 80165f0:	24064ed4 	.word	0x24064ed4
 80165f4:	240695c4 	.word	0x240695c4
 80165f8:	24068f58 	.word	0x24068f58
 80165fc:	24069614 	.word	0x24069614
 8016600:	24064f78 	.word	0x24064f78
 8016604:	240695d4 	.word	0x240695d4
 8016608:	240657e8 	.word	0x240657e8
 801660c:	240695e4 	.word	0x240695e4
 8016610:	24064d08 	.word	0x24064d08
 8016614:	24064cf8 	.word	0x24064cf8
 8016618:	24069390 	.word	0x24069390
 801661c:	24069624 	.word	0x24069624
 8016620:	24064e50 	.word	0x24064e50
 8016624:	240695b4 	.word	0x240695b4
 8016628:	24069534 	.word	0x24069534
 801662c:	24069634 	.word	0x24069634
 8016630:	24064dd0 	.word	0x24064dd0
 8016634:	240695a4 	.word	0x240695a4
 8016638:	0801c179 	.word	0x0801c179
 801663c:	0801c171 	.word	0x0801c171
 8016640:	0801c211 	.word	0x0801c211
 8016644:	0801c2ad 	.word	0x0801c2ad

08016648 <rmw_context_fini>:
 8016648:	4b17      	ldr	r3, [pc, #92]	@ (80166a8 <rmw_context_fini+0x60>)
 801664a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801664c:	b570      	push	{r4, r5, r6, lr}
 801664e:	681c      	ldr	r4, [r3, #0]
 8016650:	4605      	mov	r5, r0
 8016652:	b334      	cbz	r4, 80166a2 <rmw_context_fini+0x5a>
 8016654:	2600      	movs	r6, #0
 8016656:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801665a:	6902      	ldr	r2, [r0, #16]
 801665c:	428a      	cmp	r2, r1
 801665e:	d018      	beq.n	8016692 <rmw_context_fini+0x4a>
 8016660:	2c00      	cmp	r4, #0
 8016662:	d1f8      	bne.n	8016656 <rmw_context_fini+0xe>
 8016664:	b189      	cbz	r1, 801668a <rmw_context_fini+0x42>
 8016666:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801666a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801666e:	789b      	ldrb	r3, [r3, #2]
 8016670:	2b01      	cmp	r3, #1
 8016672:	bf14      	ite	ne
 8016674:	210a      	movne	r1, #10
 8016676:	2100      	moveq	r1, #0
 8016678:	f003 f844 	bl	8019704 <uxr_delete_session_retries>
 801667c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801667e:	f001 f8c5 	bl	801780c <rmw_uxrce_fini_session_memory>
 8016682:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8016684:	3010      	adds	r0, #16
 8016686:	f002 f8b3 	bl	80187f0 <uxr_close_custom_transport>
 801668a:	2300      	movs	r3, #0
 801668c:	4630      	mov	r0, r6
 801668e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016690:	bd70      	pop	{r4, r5, r6, pc}
 8016692:	3018      	adds	r0, #24
 8016694:	f000 f89c 	bl	80167d0 <rmw_destroy_node>
 8016698:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801669a:	4606      	mov	r6, r0
 801669c:	2c00      	cmp	r4, #0
 801669e:	d1da      	bne.n	8016656 <rmw_context_fini+0xe>
 80166a0:	e7e0      	b.n	8016664 <rmw_context_fini+0x1c>
 80166a2:	4626      	mov	r6, r4
 80166a4:	e7de      	b.n	8016664 <rmw_context_fini+0x1c>
 80166a6:	bf00      	nop
 80166a8:	240695c4 	.word	0x240695c4

080166ac <create_node>:
 80166ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166b0:	b083      	sub	sp, #12
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d064      	beq.n	8016780 <create_node+0xd4>
 80166b6:	4606      	mov	r6, r0
 80166b8:	4838      	ldr	r0, [pc, #224]	@ (801679c <create_node+0xf0>)
 80166ba:	460f      	mov	r7, r1
 80166bc:	4690      	mov	r8, r2
 80166be:	461d      	mov	r5, r3
 80166c0:	f005 fe3e 	bl	801c340 <get_memory>
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d05b      	beq.n	8016780 <create_node+0xd4>
 80166c8:	6884      	ldr	r4, [r0, #8]
 80166ca:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80166cc:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80166d0:	f104 0518 	add.w	r5, r4, #24
 80166d4:	6123      	str	r3, [r4, #16]
 80166d6:	f7ff fd7d 	bl	80161d4 <rmw_get_implementation_identifier>
 80166da:	f8c4 9020 	str.w	r9, [r4, #32]
 80166de:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80166e2:	4630      	mov	r0, r6
 80166e4:	f7e9 fe06 	bl	80002f4 <strlen>
 80166e8:	1c42      	adds	r2, r0, #1
 80166ea:	2a3c      	cmp	r2, #60	@ 0x3c
 80166ec:	d840      	bhi.n	8016770 <create_node+0xc4>
 80166ee:	4648      	mov	r0, r9
 80166f0:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80166f4:	4631      	mov	r1, r6
 80166f6:	f007 fab4 	bl	801dc62 <memcpy>
 80166fa:	4638      	mov	r0, r7
 80166fc:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8016700:	f7e9 fdf8 	bl	80002f4 <strlen>
 8016704:	1c42      	adds	r2, r0, #1
 8016706:	2a3c      	cmp	r2, #60	@ 0x3c
 8016708:	d832      	bhi.n	8016770 <create_node+0xc4>
 801670a:	4639      	mov	r1, r7
 801670c:	4648      	mov	r0, r9
 801670e:	f007 faa8 	bl	801dc62 <memcpy>
 8016712:	6923      	ldr	r3, [r4, #16]
 8016714:	2101      	movs	r1, #1
 8016716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801671a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801671e:	1842      	adds	r2, r0, r1
 8016720:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8016724:	f002 f868 	bl	80187f8 <uxr_object_id>
 8016728:	6160      	str	r0, [r4, #20]
 801672a:	783b      	ldrb	r3, [r7, #0]
 801672c:	2b2f      	cmp	r3, #47	@ 0x2f
 801672e:	d12c      	bne.n	801678a <create_node+0xde>
 8016730:	787b      	ldrb	r3, [r7, #1]
 8016732:	bb53      	cbnz	r3, 801678a <create_node+0xde>
 8016734:	4633      	mov	r3, r6
 8016736:	4a1a      	ldr	r2, [pc, #104]	@ (80167a0 <create_node+0xf4>)
 8016738:	213c      	movs	r1, #60	@ 0x3c
 801673a:	481a      	ldr	r0, [pc, #104]	@ (80167a4 <create_node+0xf8>)
 801673c:	f007 f804 	bl	801d748 <sniprintf>
 8016740:	6920      	ldr	r0, [r4, #16]
 8016742:	2106      	movs	r1, #6
 8016744:	fa1f f388 	uxth.w	r3, r8
 8016748:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801674c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016750:	9101      	str	r1, [sp, #4]
 8016752:	4914      	ldr	r1, [pc, #80]	@ (80167a4 <create_node+0xf8>)
 8016754:	9100      	str	r1, [sp, #0]
 8016756:	6811      	ldr	r1, [r2, #0]
 8016758:	6962      	ldr	r2, [r4, #20]
 801675a:	f001 fdd9 	bl	8018310 <uxr_buffer_create_participant_bin>
 801675e:	4602      	mov	r2, r0
 8016760:	6920      	ldr	r0, [r4, #16]
 8016762:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016766:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801676a:	f001 f9d3 	bl	8017b14 <run_xrce_session>
 801676e:	b918      	cbnz	r0, 8016778 <create_node+0xcc>
 8016770:	4628      	mov	r0, r5
 8016772:	2500      	movs	r5, #0
 8016774:	f001 f850 	bl	8017818 <rmw_uxrce_fini_node_memory>
 8016778:	4628      	mov	r0, r5
 801677a:	b003      	add	sp, #12
 801677c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016780:	2500      	movs	r5, #0
 8016782:	4628      	mov	r0, r5
 8016784:	b003      	add	sp, #12
 8016786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801678a:	463b      	mov	r3, r7
 801678c:	4a06      	ldr	r2, [pc, #24]	@ (80167a8 <create_node+0xfc>)
 801678e:	213c      	movs	r1, #60	@ 0x3c
 8016790:	9600      	str	r6, [sp, #0]
 8016792:	4804      	ldr	r0, [pc, #16]	@ (80167a4 <create_node+0xf8>)
 8016794:	f006 ffd8 	bl	801d748 <sniprintf>
 8016798:	e7d2      	b.n	8016740 <create_node+0x94>
 801679a:	bf00      	nop
 801679c:	240695c4 	.word	0x240695c4
 80167a0:	08020734 	.word	0x08020734
 80167a4:	24064cbc 	.word	0x24064cbc
 80167a8:	08020150 	.word	0x08020150

080167ac <rmw_create_node>:
 80167ac:	468c      	mov	ip, r1
 80167ae:	4611      	mov	r1, r2
 80167b0:	f1bc 0f00 	cmp.w	ip, #0
 80167b4:	d00a      	beq.n	80167cc <rmw_create_node+0x20>
 80167b6:	f89c 3000 	ldrb.w	r3, [ip]
 80167ba:	b13b      	cbz	r3, 80167cc <rmw_create_node+0x20>
 80167bc:	b132      	cbz	r2, 80167cc <rmw_create_node+0x20>
 80167be:	7813      	ldrb	r3, [r2, #0]
 80167c0:	b123      	cbz	r3, 80167cc <rmw_create_node+0x20>
 80167c2:	4603      	mov	r3, r0
 80167c4:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80167c6:	4660      	mov	r0, ip
 80167c8:	f7ff bf70 	b.w	80166ac <create_node>
 80167cc:	2000      	movs	r0, #0
 80167ce:	4770      	bx	lr

080167d0 <rmw_destroy_node>:
 80167d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167d2:	b328      	cbz	r0, 8016820 <rmw_destroy_node+0x50>
 80167d4:	4607      	mov	r7, r0
 80167d6:	6800      	ldr	r0, [r0, #0]
 80167d8:	b120      	cbz	r0, 80167e4 <rmw_destroy_node+0x14>
 80167da:	4b37      	ldr	r3, [pc, #220]	@ (80168b8 <rmw_destroy_node+0xe8>)
 80167dc:	6819      	ldr	r1, [r3, #0]
 80167de:	f7e9 fd7f 	bl	80002e0 <strcmp>
 80167e2:	b9e8      	cbnz	r0, 8016820 <rmw_destroy_node+0x50>
 80167e4:	687d      	ldr	r5, [r7, #4]
 80167e6:	b1dd      	cbz	r5, 8016820 <rmw_destroy_node+0x50>
 80167e8:	4b34      	ldr	r3, [pc, #208]	@ (80168bc <rmw_destroy_node+0xec>)
 80167ea:	681c      	ldr	r4, [r3, #0]
 80167ec:	2c00      	cmp	r4, #0
 80167ee:	d060      	beq.n	80168b2 <rmw_destroy_node+0xe2>
 80167f0:	2600      	movs	r6, #0
 80167f2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80167f6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80167fa:	429d      	cmp	r5, r3
 80167fc:	d013      	beq.n	8016826 <rmw_destroy_node+0x56>
 80167fe:	2c00      	cmp	r4, #0
 8016800:	d1f7      	bne.n	80167f2 <rmw_destroy_node+0x22>
 8016802:	4b2f      	ldr	r3, [pc, #188]	@ (80168c0 <rmw_destroy_node+0xf0>)
 8016804:	681c      	ldr	r4, [r3, #0]
 8016806:	b1c4      	cbz	r4, 801683a <rmw_destroy_node+0x6a>
 8016808:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801680c:	6a0b      	ldr	r3, [r1, #32]
 801680e:	429d      	cmp	r5, r3
 8016810:	d1f9      	bne.n	8016806 <rmw_destroy_node+0x36>
 8016812:	317c      	adds	r1, #124	@ 0x7c
 8016814:	4638      	mov	r0, r7
 8016816:	f000 fc49 	bl	80170ac <rmw_destroy_subscription>
 801681a:	2801      	cmp	r0, #1
 801681c:	4606      	mov	r6, r0
 801681e:	d1f2      	bne.n	8016806 <rmw_destroy_node+0x36>
 8016820:	2601      	movs	r6, #1
 8016822:	4630      	mov	r0, r6
 8016824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016826:	3184      	adds	r1, #132	@ 0x84
 8016828:	4638      	mov	r0, r7
 801682a:	f000 f94d 	bl	8016ac8 <rmw_destroy_publisher>
 801682e:	2801      	cmp	r0, #1
 8016830:	4606      	mov	r6, r0
 8016832:	d0f5      	beq.n	8016820 <rmw_destroy_node+0x50>
 8016834:	2c00      	cmp	r4, #0
 8016836:	d1dc      	bne.n	80167f2 <rmw_destroy_node+0x22>
 8016838:	e7e3      	b.n	8016802 <rmw_destroy_node+0x32>
 801683a:	4b22      	ldr	r3, [pc, #136]	@ (80168c4 <rmw_destroy_node+0xf4>)
 801683c:	681c      	ldr	r4, [r3, #0]
 801683e:	b16c      	cbz	r4, 801685c <rmw_destroy_node+0x8c>
 8016840:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8016844:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8016846:	429d      	cmp	r5, r3
 8016848:	d1f9      	bne.n	801683e <rmw_destroy_node+0x6e>
 801684a:	317c      	adds	r1, #124	@ 0x7c
 801684c:	4638      	mov	r0, r7
 801684e:	f000 fadf 	bl	8016e10 <rmw_destroy_service>
 8016852:	2801      	cmp	r0, #1
 8016854:	4606      	mov	r6, r0
 8016856:	d0e3      	beq.n	8016820 <rmw_destroy_node+0x50>
 8016858:	2c00      	cmp	r4, #0
 801685a:	d1f1      	bne.n	8016840 <rmw_destroy_node+0x70>
 801685c:	4b1a      	ldr	r3, [pc, #104]	@ (80168c8 <rmw_destroy_node+0xf8>)
 801685e:	681c      	ldr	r4, [r3, #0]
 8016860:	b16c      	cbz	r4, 801687e <rmw_destroy_node+0xae>
 8016862:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8016866:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8016868:	429d      	cmp	r5, r3
 801686a:	d1f9      	bne.n	8016860 <rmw_destroy_node+0x90>
 801686c:	317c      	adds	r1, #124	@ 0x7c
 801686e:	4638      	mov	r0, r7
 8016870:	f7ff fc6c 	bl	801614c <rmw_destroy_client>
 8016874:	2801      	cmp	r0, #1
 8016876:	4606      	mov	r6, r0
 8016878:	d0d2      	beq.n	8016820 <rmw_destroy_node+0x50>
 801687a:	2c00      	cmp	r4, #0
 801687c:	d1f1      	bne.n	8016862 <rmw_destroy_node+0x92>
 801687e:	6928      	ldr	r0, [r5, #16]
 8016880:	696a      	ldr	r2, [r5, #20]
 8016882:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016886:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801688a:	6819      	ldr	r1, [r3, #0]
 801688c:	f001 fcf4 	bl	8018278 <uxr_buffer_delete_entity>
 8016890:	4602      	mov	r2, r0
 8016892:	6928      	ldr	r0, [r5, #16]
 8016894:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016898:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801689c:	f001 f93a 	bl	8017b14 <run_xrce_session>
 80168a0:	4603      	mov	r3, r0
 80168a2:	4638      	mov	r0, r7
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	bf08      	it	eq
 80168a8:	2602      	moveq	r6, #2
 80168aa:	f000 ffb5 	bl	8017818 <rmw_uxrce_fini_node_memory>
 80168ae:	4630      	mov	r0, r6
 80168b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168b2:	4626      	mov	r6, r4
 80168b4:	e7a5      	b.n	8016802 <rmw_destroy_node+0x32>
 80168b6:	bf00      	nop
 80168b8:	08020a48 	.word	0x08020a48
 80168bc:	240695d4 	.word	0x240695d4
 80168c0:	24069614 	.word	0x24069614
 80168c4:	240695e4 	.word	0x240695e4
 80168c8:	24064cf8 	.word	0x24064cf8

080168cc <rmw_node_get_graph_guard_condition>:
 80168cc:	6843      	ldr	r3, [r0, #4]
 80168ce:	6918      	ldr	r0, [r3, #16]
 80168d0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop

080168d8 <rmw_create_publisher>:
 80168d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168dc:	b087      	sub	sp, #28
 80168de:	2800      	cmp	r0, #0
 80168e0:	f000 80d2 	beq.w	8016a88 <rmw_create_publisher+0x1b0>
 80168e4:	460e      	mov	r6, r1
 80168e6:	2900      	cmp	r1, #0
 80168e8:	f000 80ce 	beq.w	8016a88 <rmw_create_publisher+0x1b0>
 80168ec:	4604      	mov	r4, r0
 80168ee:	6800      	ldr	r0, [r0, #0]
 80168f0:	4615      	mov	r5, r2
 80168f2:	461f      	mov	r7, r3
 80168f4:	f001 f988 	bl	8017c08 <is_uxrce_rmw_identifier_valid>
 80168f8:	f080 0001 	eor.w	r0, r0, #1
 80168fc:	b2c0      	uxtb	r0, r0
 80168fe:	2800      	cmp	r0, #0
 8016900:	f040 80c2 	bne.w	8016a88 <rmw_create_publisher+0x1b0>
 8016904:	2d00      	cmp	r5, #0
 8016906:	f000 80bf 	beq.w	8016a88 <rmw_create_publisher+0x1b0>
 801690a:	782b      	ldrb	r3, [r5, #0]
 801690c:	2b00      	cmp	r3, #0
 801690e:	f000 80bb 	beq.w	8016a88 <rmw_create_publisher+0x1b0>
 8016912:	2f00      	cmp	r7, #0
 8016914:	f000 80b8 	beq.w	8016a88 <rmw_create_publisher+0x1b0>
 8016918:	485e      	ldr	r0, [pc, #376]	@ (8016a94 <rmw_create_publisher+0x1bc>)
 801691a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801691e:	f005 fd0f 	bl	801c340 <get_memory>
 8016922:	2800      	cmp	r0, #0
 8016924:	f000 80b0 	beq.w	8016a88 <rmw_create_publisher+0x1b0>
 8016928:	6884      	ldr	r4, [r0, #8]
 801692a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801692e:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8016932:	f7ff fc4f 	bl	80161d4 <rmw_get_implementation_identifier>
 8016936:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801693a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 801693e:	4628      	mov	r0, r5
 8016940:	f7e9 fcd8 	bl	80002f4 <strlen>
 8016944:	3001      	adds	r0, #1
 8016946:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801694a:	283c      	cmp	r0, #60	@ 0x3c
 801694c:	f200 808f 	bhi.w	8016a6e <rmw_create_publisher+0x196>
 8016950:	462b      	mov	r3, r5
 8016952:	4a51      	ldr	r2, [pc, #324]	@ (8016a98 <rmw_create_publisher+0x1c0>)
 8016954:	213c      	movs	r1, #60	@ 0x3c
 8016956:	4650      	mov	r0, sl
 8016958:	f006 fef6 	bl	801d748 <sniprintf>
 801695c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016960:	4639      	mov	r1, r7
 8016962:	2250      	movs	r2, #80	@ 0x50
 8016964:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8016966:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801696a:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 801696e:	f007 f978 	bl	801dc62 <memcpy>
 8016972:	7a3b      	ldrb	r3, [r7, #8]
 8016974:	4630      	mov	r0, r6
 8016976:	4949      	ldr	r1, [pc, #292]	@ (8016a9c <rmw_create_publisher+0x1c4>)
 8016978:	2b02      	cmp	r3, #2
 801697a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801697e:	bf0c      	ite	eq
 8016980:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8016984:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8016988:	67a3      	str	r3, [r4, #120]	@ 0x78
 801698a:	2300      	movs	r3, #0
 801698c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8016990:	f7fb fac0 	bl	8011f14 <get_message_typesupport_handle>
 8016994:	2800      	cmp	r0, #0
 8016996:	d06a      	beq.n	8016a6e <rmw_create_publisher+0x196>
 8016998:	6842      	ldr	r2, [r0, #4]
 801699a:	61a2      	str	r2, [r4, #24]
 801699c:	2a00      	cmp	r2, #0
 801699e:	d066      	beq.n	8016a6e <rmw_create_publisher+0x196>
 80169a0:	4629      	mov	r1, r5
 80169a2:	463b      	mov	r3, r7
 80169a4:	4648      	mov	r0, r9
 80169a6:	f005 fd19 	bl	801c3dc <create_topic>
 80169aa:	6260      	str	r0, [r4, #36]	@ 0x24
 80169ac:	2800      	cmp	r0, #0
 80169ae:	d062      	beq.n	8016a76 <rmw_create_publisher+0x19e>
 80169b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80169b4:	2103      	movs	r1, #3
 80169b6:	2506      	movs	r5, #6
 80169b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80169bc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80169c0:	1c42      	adds	r2, r0, #1
 80169c2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80169c6:	f001 ff17 	bl	80187f8 <uxr_object_id>
 80169ca:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80169ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80169d2:	6120      	str	r0, [r4, #16]
 80169d4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80169d8:	6910      	ldr	r0, [r2, #16]
 80169da:	9500      	str	r5, [sp, #0]
 80169dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80169e0:	6819      	ldr	r1, [r3, #0]
 80169e2:	6922      	ldr	r2, [r4, #16]
 80169e4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80169e8:	f001 fcfa 	bl	80183e0 <uxr_buffer_create_publisher_bin>
 80169ec:	4602      	mov	r2, r0
 80169ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80169f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80169f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80169fa:	f001 f88b 	bl	8017b14 <run_xrce_session>
 80169fe:	b3b0      	cbz	r0, 8016a6e <rmw_create_publisher+0x196>
 8016a00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016a04:	2105      	movs	r1, #5
 8016a06:	f10d 0a10 	add.w	sl, sp, #16
 8016a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016a0e:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8016a12:	1c42      	adds	r2, r0, #1
 8016a14:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8016a18:	f001 feee 	bl	80187f8 <uxr_object_id>
 8016a1c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8016a20:	4639      	mov	r1, r7
 8016a22:	6160      	str	r0, [r4, #20]
 8016a24:	691e      	ldr	r6, [r3, #16]
 8016a26:	4650      	mov	r0, sl
 8016a28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016a2c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8016a30:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8016a34:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 8016a38:	f001 f888 	bl	8017b4c <convert_qos_profile>
 8016a3c:	9503      	str	r5, [sp, #12]
 8016a3e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8016a42:	9001      	str	r0, [sp, #4]
 8016a44:	4630      	mov	r0, r6
 8016a46:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016a4a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8016a4e:	9300      	str	r3, [sp, #0]
 8016a50:	6839      	ldr	r1, [r7, #0]
 8016a52:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8016a56:	f001 fd23 	bl	80184a0 <uxr_buffer_create_datawriter_bin>
 8016a5a:	4602      	mov	r2, r0
 8016a5c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016a60:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016a64:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016a68:	f001 f854 	bl	8017b14 <run_xrce_session>
 8016a6c:	b970      	cbnz	r0, 8016a8c <rmw_create_publisher+0x1b4>
 8016a6e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8016a70:	b108      	cbz	r0, 8016a76 <rmw_create_publisher+0x19e>
 8016a72:	f000 ff41 	bl	80178f8 <rmw_uxrce_fini_topic_memory>
 8016a76:	4640      	mov	r0, r8
 8016a78:	f04f 0800 	mov.w	r8, #0
 8016a7c:	f000 fee4 	bl	8017848 <rmw_uxrce_fini_publisher_memory>
 8016a80:	4640      	mov	r0, r8
 8016a82:	b007      	add	sp, #28
 8016a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a88:	f04f 0800 	mov.w	r8, #0
 8016a8c:	4640      	mov	r0, r8
 8016a8e:	b007      	add	sp, #28
 8016a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a94:	240695d4 	.word	0x240695d4
 8016a98:	08020734 	.word	0x08020734
 8016a9c:	0801ecdc 	.word	0x0801ecdc

08016aa0 <rmw_publisher_get_actual_qos>:
 8016aa0:	b178      	cbz	r0, 8016ac2 <rmw_publisher_get_actual_qos+0x22>
 8016aa2:	b510      	push	{r4, lr}
 8016aa4:	fab1 f481 	clz	r4, r1
 8016aa8:	0964      	lsrs	r4, r4, #5
 8016aaa:	b141      	cbz	r1, 8016abe <rmw_publisher_get_actual_qos+0x1e>
 8016aac:	6843      	ldr	r3, [r0, #4]
 8016aae:	2250      	movs	r2, #80	@ 0x50
 8016ab0:	4608      	mov	r0, r1
 8016ab2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8016ab6:	f007 f8d4 	bl	801dc62 <memcpy>
 8016aba:	4620      	mov	r0, r4
 8016abc:	bd10      	pop	{r4, pc}
 8016abe:	200b      	movs	r0, #11
 8016ac0:	bd10      	pop	{r4, pc}
 8016ac2:	200b      	movs	r0, #11
 8016ac4:	4770      	bx	lr
 8016ac6:	bf00      	nop

08016ac8 <rmw_destroy_publisher>:
 8016ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016acc:	b128      	cbz	r0, 8016ada <rmw_destroy_publisher+0x12>
 8016ace:	4604      	mov	r4, r0
 8016ad0:	6800      	ldr	r0, [r0, #0]
 8016ad2:	460d      	mov	r5, r1
 8016ad4:	f001 f898 	bl	8017c08 <is_uxrce_rmw_identifier_valid>
 8016ad8:	b918      	cbnz	r0, 8016ae2 <rmw_destroy_publisher+0x1a>
 8016ada:	2401      	movs	r4, #1
 8016adc:	4620      	mov	r0, r4
 8016ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ae2:	6863      	ldr	r3, [r4, #4]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d0f8      	beq.n	8016ada <rmw_destroy_publisher+0x12>
 8016ae8:	fab5 f485 	clz	r4, r5
 8016aec:	0964      	lsrs	r4, r4, #5
 8016aee:	2d00      	cmp	r5, #0
 8016af0:	d0f3      	beq.n	8016ada <rmw_destroy_publisher+0x12>
 8016af2:	6828      	ldr	r0, [r5, #0]
 8016af4:	f001 f888 	bl	8017c08 <is_uxrce_rmw_identifier_valid>
 8016af8:	2800      	cmp	r0, #0
 8016afa:	d0ee      	beq.n	8016ada <rmw_destroy_publisher+0x12>
 8016afc:	686e      	ldr	r6, [r5, #4]
 8016afe:	2e00      	cmp	r6, #0
 8016b00:	d0eb      	beq.n	8016ada <rmw_destroy_publisher+0x12>
 8016b02:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8016b04:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8016b08:	f005 fcb8 	bl	801c47c <destroy_topic>
 8016b0c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8016b10:	6972      	ldr	r2, [r6, #20]
 8016b12:	6918      	ldr	r0, [r3, #16]
 8016b14:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016b18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b1c:	6819      	ldr	r1, [r3, #0]
 8016b1e:	f001 fbab 	bl	8018278 <uxr_buffer_delete_entity>
 8016b22:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8016b26:	4680      	mov	r8, r0
 8016b28:	6932      	ldr	r2, [r6, #16]
 8016b2a:	6918      	ldr	r0, [r3, #16]
 8016b2c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016b30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b34:	6819      	ldr	r1, [r3, #0]
 8016b36:	f001 fb9f 	bl	8018278 <uxr_buffer_delete_entity>
 8016b3a:	4606      	mov	r6, r0
 8016b3c:	6938      	ldr	r0, [r7, #16]
 8016b3e:	4642      	mov	r2, r8
 8016b40:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016b44:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016b48:	f000 ffe4 	bl	8017b14 <run_xrce_session>
 8016b4c:	693f      	ldr	r7, [r7, #16]
 8016b4e:	4632      	mov	r2, r6
 8016b50:	4606      	mov	r6, r0
 8016b52:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8016b56:	4638      	mov	r0, r7
 8016b58:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8016b5c:	f000 ffda 	bl	8017b14 <run_xrce_session>
 8016b60:	b126      	cbz	r6, 8016b6c <rmw_destroy_publisher+0xa4>
 8016b62:	b118      	cbz	r0, 8016b6c <rmw_destroy_publisher+0xa4>
 8016b64:	4628      	mov	r0, r5
 8016b66:	f000 fe6f 	bl	8017848 <rmw_uxrce_fini_publisher_memory>
 8016b6a:	e7b7      	b.n	8016adc <rmw_destroy_publisher+0x14>
 8016b6c:	2402      	movs	r4, #2
 8016b6e:	e7f9      	b.n	8016b64 <rmw_destroy_publisher+0x9c>

08016b70 <rmw_send_request>:
 8016b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b74:	4604      	mov	r4, r0
 8016b76:	6800      	ldr	r0, [r0, #0]
 8016b78:	b08b      	sub	sp, #44	@ 0x2c
 8016b7a:	460e      	mov	r6, r1
 8016b7c:	4615      	mov	r5, r2
 8016b7e:	b128      	cbz	r0, 8016b8c <rmw_send_request+0x1c>
 8016b80:	4b21      	ldr	r3, [pc, #132]	@ (8016c08 <rmw_send_request+0x98>)
 8016b82:	6819      	ldr	r1, [r3, #0]
 8016b84:	f7e9 fbac 	bl	80002e0 <strcmp>
 8016b88:	2800      	cmp	r0, #0
 8016b8a:	d139      	bne.n	8016c00 <rmw_send_request+0x90>
 8016b8c:	6864      	ldr	r4, [r4, #4]
 8016b8e:	2700      	movs	r7, #0
 8016b90:	6963      	ldr	r3, [r4, #20]
 8016b92:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8016b96:	689b      	ldr	r3, [r3, #8]
 8016b98:	4798      	blx	r3
 8016b9a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016b9e:	4630      	mov	r0, r6
 8016ba0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ba4:	4798      	blx	r3
 8016ba6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016baa:	9000      	str	r0, [sp, #0]
 8016bac:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016bb0:	6922      	ldr	r2, [r4, #16]
 8016bb2:	ab02      	add	r3, sp, #8
 8016bb4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8016bb6:	f003 fe4b 	bl	801a850 <uxr_prepare_output_stream>
 8016bba:	e9c5 0700 	strd	r0, r7, [r5]
 8016bbe:	b198      	cbz	r0, 8016be8 <rmw_send_request+0x78>
 8016bc0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bc4:	a902      	add	r1, sp, #8
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	4798      	blx	r3
 8016bca:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8016bce:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016bd2:	2b01      	cmp	r3, #1
 8016bd4:	d00c      	beq.n	8016bf0 <rmw_send_request+0x80>
 8016bd6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8016bd8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016bdc:	f002 fc48 	bl	8019470 <uxr_run_session_until_confirm_delivery>
 8016be0:	4638      	mov	r0, r7
 8016be2:	b00b      	add	sp, #44	@ 0x2c
 8016be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016be8:	2001      	movs	r0, #1
 8016bea:	b00b      	add	sp, #44	@ 0x2c
 8016bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bf0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016bf4:	f002 f882 	bl	8018cfc <uxr_flash_output_streams>
 8016bf8:	4638      	mov	r0, r7
 8016bfa:	b00b      	add	sp, #44	@ 0x2c
 8016bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c00:	200c      	movs	r0, #12
 8016c02:	b00b      	add	sp, #44	@ 0x2c
 8016c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c08:	08020a48 	.word	0x08020a48

08016c0c <rmw_take_request>:
 8016c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c10:	4605      	mov	r5, r0
 8016c12:	6800      	ldr	r0, [r0, #0]
 8016c14:	b089      	sub	sp, #36	@ 0x24
 8016c16:	460c      	mov	r4, r1
 8016c18:	4690      	mov	r8, r2
 8016c1a:	461e      	mov	r6, r3
 8016c1c:	b128      	cbz	r0, 8016c2a <rmw_take_request+0x1e>
 8016c1e:	4b28      	ldr	r3, [pc, #160]	@ (8016cc0 <rmw_take_request+0xb4>)
 8016c20:	6819      	ldr	r1, [r3, #0]
 8016c22:	f7e9 fb5d 	bl	80002e0 <strcmp>
 8016c26:	2800      	cmp	r0, #0
 8016c28:	d146      	bne.n	8016cb8 <rmw_take_request+0xac>
 8016c2a:	b10e      	cbz	r6, 8016c30 <rmw_take_request+0x24>
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	7033      	strb	r3, [r6, #0]
 8016c30:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016c34:	f000 fef0 	bl	8017a18 <rmw_uxrce_clean_expired_static_input_buffer>
 8016c38:	4648      	mov	r0, r9
 8016c3a:	f000 fec3 	bl	80179c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c3e:	4607      	mov	r7, r0
 8016c40:	b3b0      	cbz	r0, 8016cb0 <rmw_take_request+0xa4>
 8016c42:	6885      	ldr	r5, [r0, #8]
 8016c44:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8016c48:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8016c4c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8016c50:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016c54:	7423      	strb	r3, [r4, #16]
 8016c56:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8016c5a:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8016c5e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8016c62:	74e3      	strb	r3, [r4, #19]
 8016c64:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8016c68:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8016c6c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8016c70:	6161      	str	r1, [r4, #20]
 8016c72:	61a2      	str	r2, [r4, #24]
 8016c74:	61e3      	str	r3, [r4, #28]
 8016c76:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016c7a:	689b      	ldr	r3, [r3, #8]
 8016c7c:	4798      	blx	r3
 8016c7e:	6844      	ldr	r4, [r0, #4]
 8016c80:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016c84:	f105 0110 	add.w	r1, r5, #16
 8016c88:	4668      	mov	r0, sp
 8016c8a:	f7fa f8af 	bl	8010dec <ucdr_init_buffer>
 8016c8e:	4641      	mov	r1, r8
 8016c90:	68e3      	ldr	r3, [r4, #12]
 8016c92:	4668      	mov	r0, sp
 8016c94:	4798      	blx	r3
 8016c96:	4639      	mov	r1, r7
 8016c98:	4604      	mov	r4, r0
 8016c9a:	480a      	ldr	r0, [pc, #40]	@ (8016cc4 <rmw_take_request+0xb8>)
 8016c9c:	f005 fb60 	bl	801c360 <put_memory>
 8016ca0:	b106      	cbz	r6, 8016ca4 <rmw_take_request+0x98>
 8016ca2:	7034      	strb	r4, [r6, #0]
 8016ca4:	f084 0001 	eor.w	r0, r4, #1
 8016ca8:	b2c0      	uxtb	r0, r0
 8016caa:	b009      	add	sp, #36	@ 0x24
 8016cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cb0:	2001      	movs	r0, #1
 8016cb2:	b009      	add	sp, #36	@ 0x24
 8016cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cb8:	200c      	movs	r0, #12
 8016cba:	b009      	add	sp, #36	@ 0x24
 8016cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cc0:	08020a48 	.word	0x08020a48
 8016cc4:	24069604 	.word	0x24069604

08016cc8 <rmw_send_response>:
 8016cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cca:	4605      	mov	r5, r0
 8016ccc:	6800      	ldr	r0, [r0, #0]
 8016cce:	b091      	sub	sp, #68	@ 0x44
 8016cd0:	460c      	mov	r4, r1
 8016cd2:	4616      	mov	r6, r2
 8016cd4:	b128      	cbz	r0, 8016ce2 <rmw_send_response+0x1a>
 8016cd6:	4b29      	ldr	r3, [pc, #164]	@ (8016d7c <rmw_send_response+0xb4>)
 8016cd8:	6819      	ldr	r1, [r3, #0]
 8016cda:	f7e9 fb01 	bl	80002e0 <strcmp>
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	d141      	bne.n	8016d66 <rmw_send_response+0x9e>
 8016ce2:	686d      	ldr	r5, [r5, #4]
 8016ce4:	68a1      	ldr	r1, [r4, #8]
 8016ce6:	6860      	ldr	r0, [r4, #4]
 8016ce8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8016cea:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8016cee:	9307      	str	r3, [sp, #28]
 8016cf0:	4623      	mov	r3, r4
 8016cf2:	9206      	str	r2, [sp, #24]
 8016cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cf8:	789b      	ldrb	r3, [r3, #2]
 8016cfa:	f88d 2017 	strb.w	r2, [sp, #23]
 8016cfe:	f88d 3016 	strb.w	r3, [sp, #22]
 8016d02:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016d06:	68e2      	ldr	r2, [r4, #12]
 8016d08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016d0c:	ab02      	add	r3, sp, #8
 8016d0e:	696c      	ldr	r4, [r5, #20]
 8016d10:	c307      	stmia	r3!, {r0, r1, r2}
 8016d12:	68e3      	ldr	r3, [r4, #12]
 8016d14:	4798      	blx	r3
 8016d16:	6844      	ldr	r4, [r0, #4]
 8016d18:	4630      	mov	r0, r6
 8016d1a:	6923      	ldr	r3, [r4, #16]
 8016d1c:	4798      	blx	r3
 8016d1e:	f100 0318 	add.w	r3, r0, #24
 8016d22:	6938      	ldr	r0, [r7, #16]
 8016d24:	9300      	str	r3, [sp, #0]
 8016d26:	ab08      	add	r3, sp, #32
 8016d28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d2c:	692a      	ldr	r2, [r5, #16]
 8016d2e:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016d30:	f003 fd8e 	bl	801a850 <uxr_prepare_output_stream>
 8016d34:	b910      	cbnz	r0, 8016d3c <rmw_send_response+0x74>
 8016d36:	2001      	movs	r0, #1
 8016d38:	b011      	add	sp, #68	@ 0x44
 8016d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d3c:	a902      	add	r1, sp, #8
 8016d3e:	a808      	add	r0, sp, #32
 8016d40:	f004 fdf4 	bl	801b92c <uxr_serialize_SampleIdentity>
 8016d44:	68a3      	ldr	r3, [r4, #8]
 8016d46:	a908      	add	r1, sp, #32
 8016d48:	4630      	mov	r0, r6
 8016d4a:	4798      	blx	r3
 8016d4c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016d50:	6938      	ldr	r0, [r7, #16]
 8016d52:	2b01      	cmp	r3, #1
 8016d54:	d00a      	beq.n	8016d6c <rmw_send_response+0xa4>
 8016d56:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016d58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d5c:	f002 fb88 	bl	8019470 <uxr_run_session_until_confirm_delivery>
 8016d60:	2000      	movs	r0, #0
 8016d62:	b011      	add	sp, #68	@ 0x44
 8016d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d66:	200c      	movs	r0, #12
 8016d68:	b011      	add	sp, #68	@ 0x44
 8016d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d70:	f001 ffc4 	bl	8018cfc <uxr_flash_output_streams>
 8016d74:	2000      	movs	r0, #0
 8016d76:	b011      	add	sp, #68	@ 0x44
 8016d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d7a:	bf00      	nop
 8016d7c:	08020a48 	.word	0x08020a48

08016d80 <rmw_take_response>:
 8016d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d84:	4604      	mov	r4, r0
 8016d86:	6800      	ldr	r0, [r0, #0]
 8016d88:	b088      	sub	sp, #32
 8016d8a:	460f      	mov	r7, r1
 8016d8c:	4690      	mov	r8, r2
 8016d8e:	461d      	mov	r5, r3
 8016d90:	b120      	cbz	r0, 8016d9c <rmw_take_response+0x1c>
 8016d92:	4b1d      	ldr	r3, [pc, #116]	@ (8016e08 <rmw_take_response+0x88>)
 8016d94:	6819      	ldr	r1, [r3, #0]
 8016d96:	f7e9 faa3 	bl	80002e0 <strcmp>
 8016d9a:	bb68      	cbnz	r0, 8016df8 <rmw_take_response+0x78>
 8016d9c:	b10d      	cbz	r5, 8016da2 <rmw_take_response+0x22>
 8016d9e:	2300      	movs	r3, #0
 8016da0:	702b      	strb	r3, [r5, #0]
 8016da2:	6864      	ldr	r4, [r4, #4]
 8016da4:	f000 fe38 	bl	8017a18 <rmw_uxrce_clean_expired_static_input_buffer>
 8016da8:	4620      	mov	r0, r4
 8016daa:	f000 fe0b 	bl	80179c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016dae:	4606      	mov	r6, r0
 8016db0:	b330      	cbz	r0, 8016e00 <rmw_take_response+0x80>
 8016db2:	6963      	ldr	r3, [r4, #20]
 8016db4:	6884      	ldr	r4, [r0, #8]
 8016db6:	68db      	ldr	r3, [r3, #12]
 8016db8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016dbc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016dc0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8016dc4:	4798      	blx	r3
 8016dc6:	6847      	ldr	r7, [r0, #4]
 8016dc8:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016dcc:	f104 0110 	add.w	r1, r4, #16
 8016dd0:	4668      	mov	r0, sp
 8016dd2:	f7fa f80b 	bl	8010dec <ucdr_init_buffer>
 8016dd6:	4641      	mov	r1, r8
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	4668      	mov	r0, sp
 8016ddc:	4798      	blx	r3
 8016dde:	4631      	mov	r1, r6
 8016de0:	4604      	mov	r4, r0
 8016de2:	480a      	ldr	r0, [pc, #40]	@ (8016e0c <rmw_take_response+0x8c>)
 8016de4:	f005 fabc 	bl	801c360 <put_memory>
 8016de8:	b105      	cbz	r5, 8016dec <rmw_take_response+0x6c>
 8016dea:	702c      	strb	r4, [r5, #0]
 8016dec:	f084 0001 	eor.w	r0, r4, #1
 8016df0:	b2c0      	uxtb	r0, r0
 8016df2:	b008      	add	sp, #32
 8016df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016df8:	200c      	movs	r0, #12
 8016dfa:	b008      	add	sp, #32
 8016dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e00:	2001      	movs	r0, #1
 8016e02:	b008      	add	sp, #32
 8016e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e08:	08020a48 	.word	0x08020a48
 8016e0c:	24069604 	.word	0x24069604

08016e10 <rmw_destroy_service>:
 8016e10:	b570      	push	{r4, r5, r6, lr}
 8016e12:	b128      	cbz	r0, 8016e20 <rmw_destroy_service+0x10>
 8016e14:	4604      	mov	r4, r0
 8016e16:	6800      	ldr	r0, [r0, #0]
 8016e18:	460d      	mov	r5, r1
 8016e1a:	f000 fef5 	bl	8017c08 <is_uxrce_rmw_identifier_valid>
 8016e1e:	b910      	cbnz	r0, 8016e26 <rmw_destroy_service+0x16>
 8016e20:	2401      	movs	r4, #1
 8016e22:	4620      	mov	r0, r4
 8016e24:	bd70      	pop	{r4, r5, r6, pc}
 8016e26:	6863      	ldr	r3, [r4, #4]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d0f9      	beq.n	8016e20 <rmw_destroy_service+0x10>
 8016e2c:	2d00      	cmp	r5, #0
 8016e2e:	d0f7      	beq.n	8016e20 <rmw_destroy_service+0x10>
 8016e30:	6828      	ldr	r0, [r5, #0]
 8016e32:	f000 fee9 	bl	8017c08 <is_uxrce_rmw_identifier_valid>
 8016e36:	2800      	cmp	r0, #0
 8016e38:	d0f2      	beq.n	8016e20 <rmw_destroy_service+0x10>
 8016e3a:	686e      	ldr	r6, [r5, #4]
 8016e3c:	2e00      	cmp	r6, #0
 8016e3e:	d0ef      	beq.n	8016e20 <rmw_destroy_service+0x10>
 8016e40:	6864      	ldr	r4, [r4, #4]
 8016e42:	6932      	ldr	r2, [r6, #16]
 8016e44:	6920      	ldr	r0, [r4, #16]
 8016e46:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016e4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e4e:	6819      	ldr	r1, [r3, #0]
 8016e50:	f001 fd3c 	bl	80188cc <uxr_buffer_cancel_data>
 8016e54:	4602      	mov	r2, r0
 8016e56:	6920      	ldr	r0, [r4, #16]
 8016e58:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016e5c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016e60:	f000 fe58 	bl	8017b14 <run_xrce_session>
 8016e64:	6920      	ldr	r0, [r4, #16]
 8016e66:	6932      	ldr	r2, [r6, #16]
 8016e68:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016e6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e70:	6819      	ldr	r1, [r3, #0]
 8016e72:	f001 fa01 	bl	8018278 <uxr_buffer_delete_entity>
 8016e76:	4602      	mov	r2, r0
 8016e78:	6920      	ldr	r0, [r4, #16]
 8016e7a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016e7e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016e82:	f000 fe47 	bl	8017b14 <run_xrce_session>
 8016e86:	4603      	mov	r3, r0
 8016e88:	4628      	mov	r0, r5
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	bf14      	ite	ne
 8016e8e:	2400      	movne	r4, #0
 8016e90:	2402      	moveq	r4, #2
 8016e92:	f000 fd05 	bl	80178a0 <rmw_uxrce_fini_service_memory>
 8016e96:	e7c4      	b.n	8016e22 <rmw_destroy_service+0x12>

08016e98 <rmw_create_subscription>:
 8016e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e9c:	b08d      	sub	sp, #52	@ 0x34
 8016e9e:	2900      	cmp	r1, #0
 8016ea0:	f000 80d8 	beq.w	8017054 <rmw_create_subscription+0x1bc>
 8016ea4:	4604      	mov	r4, r0
 8016ea6:	2800      	cmp	r0, #0
 8016ea8:	f000 80d4 	beq.w	8017054 <rmw_create_subscription+0x1bc>
 8016eac:	6800      	ldr	r0, [r0, #0]
 8016eae:	460e      	mov	r6, r1
 8016eb0:	4615      	mov	r5, r2
 8016eb2:	461f      	mov	r7, r3
 8016eb4:	f000 fea8 	bl	8017c08 <is_uxrce_rmw_identifier_valid>
 8016eb8:	f080 0001 	eor.w	r0, r0, #1
 8016ebc:	b2c0      	uxtb	r0, r0
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	f040 80c8 	bne.w	8017054 <rmw_create_subscription+0x1bc>
 8016ec4:	2d00      	cmp	r5, #0
 8016ec6:	f000 80c5 	beq.w	8017054 <rmw_create_subscription+0x1bc>
 8016eca:	782b      	ldrb	r3, [r5, #0]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	f000 80c1 	beq.w	8017054 <rmw_create_subscription+0x1bc>
 8016ed2:	2f00      	cmp	r7, #0
 8016ed4:	f000 80be 	beq.w	8017054 <rmw_create_subscription+0x1bc>
 8016ed8:	4867      	ldr	r0, [pc, #412]	@ (8017078 <rmw_create_subscription+0x1e0>)
 8016eda:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016ede:	f005 fa2f 	bl	801c340 <get_memory>
 8016ee2:	4604      	mov	r4, r0
 8016ee4:	2800      	cmp	r0, #0
 8016ee6:	f000 80b6 	beq.w	8017056 <rmw_create_subscription+0x1be>
 8016eea:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016eee:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 8016ef2:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 8016ef6:	f7ff f96d 	bl	80161d4 <rmw_get_implementation_identifier>
 8016efa:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 8016efe:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 8016f02:	4628      	mov	r0, r5
 8016f04:	f7e9 f9f6 	bl	80002f4 <strlen>
 8016f08:	3001      	adds	r0, #1
 8016f0a:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 8016f0e:	283c      	cmp	r0, #60	@ 0x3c
 8016f10:	f200 80a5 	bhi.w	801705e <rmw_create_subscription+0x1c6>
 8016f14:	462b      	mov	r3, r5
 8016f16:	4a59      	ldr	r2, [pc, #356]	@ (801707c <rmw_create_subscription+0x1e4>)
 8016f18:	213c      	movs	r1, #60	@ 0x3c
 8016f1a:	4650      	mov	r0, sl
 8016f1c:	f006 fc14 	bl	801d748 <sniprintf>
 8016f20:	4639      	mov	r1, r7
 8016f22:	2250      	movs	r2, #80	@ 0x50
 8016f24:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8016f28:	f8c8 9020 	str.w	r9, [r8, #32]
 8016f2c:	f006 fe99 	bl	801dc62 <memcpy>
 8016f30:	4630      	mov	r0, r6
 8016f32:	4953      	ldr	r1, [pc, #332]	@ (8017080 <rmw_create_subscription+0x1e8>)
 8016f34:	f7fa ffee 	bl	8011f14 <get_message_typesupport_handle>
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	f000 8090 	beq.w	801705e <rmw_create_subscription+0x1c6>
 8016f3e:	6842      	ldr	r2, [r0, #4]
 8016f40:	f8c8 2018 	str.w	r2, [r8, #24]
 8016f44:	2a00      	cmp	r2, #0
 8016f46:	f000 808a 	beq.w	801705e <rmw_create_subscription+0x1c6>
 8016f4a:	4629      	mov	r1, r5
 8016f4c:	463b      	mov	r3, r7
 8016f4e:	4648      	mov	r0, r9
 8016f50:	f005 fa44 	bl	801c3dc <create_topic>
 8016f54:	f8c8 001c 	str.w	r0, [r8, #28]
 8016f58:	2800      	cmp	r0, #0
 8016f5a:	f000 8085 	beq.w	8017068 <rmw_create_subscription+0x1d0>
 8016f5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016f62:	2104      	movs	r1, #4
 8016f64:	2506      	movs	r5, #6
 8016f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016f6a:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8016f6e:	1c42      	adds	r2, r0, #1
 8016f70:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8016f74:	f001 fc40 	bl	80187f8 <uxr_object_id>
 8016f78:	f8c8 0010 	str.w	r0, [r8, #16]
 8016f7c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016f80:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8016f84:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016f88:	9500      	str	r5, [sp, #0]
 8016f8a:	6819      	ldr	r1, [r3, #0]
 8016f8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016f90:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016f94:	f001 fa54 	bl	8018440 <uxr_buffer_create_subscriber_bin>
 8016f98:	4602      	mov	r2, r0
 8016f9a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016f9e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016fa2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016fa6:	f000 fdb5 	bl	8017b14 <run_xrce_session>
 8016faa:	2800      	cmp	r0, #0
 8016fac:	d057      	beq.n	801705e <rmw_create_subscription+0x1c6>
 8016fae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016fb2:	4629      	mov	r1, r5
 8016fb4:	ae08      	add	r6, sp, #32
 8016fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016fba:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8016fbe:	1c42      	adds	r2, r0, #1
 8016fc0:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8016fc4:	f001 fc18 	bl	80187f8 <uxr_object_id>
 8016fc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016fcc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8016fd0:	4639      	mov	r1, r7
 8016fd2:	f8c8 0014 	str.w	r0, [r8, #20]
 8016fd6:	4630      	mov	r0, r6
 8016fd8:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8016fdc:	9305      	str	r3, [sp, #20]
 8016fde:	f000 fdb5 	bl	8017b4c <convert_qos_profile>
 8016fe2:	9503      	str	r5, [sp, #12]
 8016fe4:	9b05      	ldr	r3, [sp, #20]
 8016fe6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016fea:	9001      	str	r0, [sp, #4]
 8016fec:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8016ff0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016ff4:	691b      	ldr	r3, [r3, #16]
 8016ff6:	9300      	str	r3, [sp, #0]
 8016ff8:	f8db 1000 	ldr.w	r1, [fp]
 8016ffc:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8017000:	f001 fac4 	bl	801858c <uxr_buffer_create_datareader_bin>
 8017004:	4602      	mov	r2, r0
 8017006:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801700a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801700e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017012:	f000 fd7f 	bl	8017b14 <run_xrce_session>
 8017016:	b310      	cbz	r0, 801705e <rmw_create_subscription+0x1c6>
 8017018:	7a3b      	ldrb	r3, [r7, #8]
 801701a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801701e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017022:	2b02      	cmp	r3, #2
 8017024:	920a      	str	r2, [sp, #40]	@ 0x28
 8017026:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801702a:	f04f 0200 	mov.w	r2, #0
 801702e:	bf08      	it	eq
 8017030:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8017034:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017038:	bf18      	it	ne
 801703a:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 801703e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017040:	9307      	str	r3, [sp, #28]
 8017042:	ab0a      	add	r3, sp, #40	@ 0x28
 8017044:	9300      	str	r3, [sp, #0]
 8017046:	9b07      	ldr	r3, [sp, #28]
 8017048:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801704c:	6809      	ldr	r1, [r1, #0]
 801704e:	f001 fc03 	bl	8018858 <uxr_buffer_request_data>
 8017052:	e000      	b.n	8017056 <rmw_create_subscription+0x1be>
 8017054:	2400      	movs	r4, #0
 8017056:	4620      	mov	r0, r4
 8017058:	b00d      	add	sp, #52	@ 0x34
 801705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801705e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8017062:	b108      	cbz	r0, 8017068 <rmw_create_subscription+0x1d0>
 8017064:	f000 fc48 	bl	80178f8 <rmw_uxrce_fini_topic_memory>
 8017068:	4620      	mov	r0, r4
 801706a:	2400      	movs	r4, #0
 801706c:	f000 fc02 	bl	8017874 <rmw_uxrce_fini_subscription_memory>
 8017070:	4620      	mov	r0, r4
 8017072:	b00d      	add	sp, #52	@ 0x34
 8017074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017078:	24069614 	.word	0x24069614
 801707c:	08020734 	.word	0x08020734
 8017080:	0801ecdc 	.word	0x0801ecdc

08017084 <rmw_subscription_get_actual_qos>:
 8017084:	b178      	cbz	r0, 80170a6 <rmw_subscription_get_actual_qos+0x22>
 8017086:	b510      	push	{r4, lr}
 8017088:	fab1 f481 	clz	r4, r1
 801708c:	0964      	lsrs	r4, r4, #5
 801708e:	b141      	cbz	r1, 80170a2 <rmw_subscription_get_actual_qos+0x1e>
 8017090:	6843      	ldr	r3, [r0, #4]
 8017092:	2250      	movs	r2, #80	@ 0x50
 8017094:	4608      	mov	r0, r1
 8017096:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801709a:	f006 fde2 	bl	801dc62 <memcpy>
 801709e:	4620      	mov	r0, r4
 80170a0:	bd10      	pop	{r4, pc}
 80170a2:	200b      	movs	r0, #11
 80170a4:	bd10      	pop	{r4, pc}
 80170a6:	200b      	movs	r0, #11
 80170a8:	4770      	bx	lr
 80170aa:	bf00      	nop

080170ac <rmw_destroy_subscription>:
 80170ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170b0:	b128      	cbz	r0, 80170be <rmw_destroy_subscription+0x12>
 80170b2:	4604      	mov	r4, r0
 80170b4:	6800      	ldr	r0, [r0, #0]
 80170b6:	460d      	mov	r5, r1
 80170b8:	f000 fda6 	bl	8017c08 <is_uxrce_rmw_identifier_valid>
 80170bc:	b918      	cbnz	r0, 80170c6 <rmw_destroy_subscription+0x1a>
 80170be:	2401      	movs	r4, #1
 80170c0:	4620      	mov	r0, r4
 80170c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170c6:	6863      	ldr	r3, [r4, #4]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d0f8      	beq.n	80170be <rmw_destroy_subscription+0x12>
 80170cc:	fab5 f485 	clz	r4, r5
 80170d0:	0964      	lsrs	r4, r4, #5
 80170d2:	2d00      	cmp	r5, #0
 80170d4:	d0f3      	beq.n	80170be <rmw_destroy_subscription+0x12>
 80170d6:	6828      	ldr	r0, [r5, #0]
 80170d8:	f000 fd96 	bl	8017c08 <is_uxrce_rmw_identifier_valid>
 80170dc:	2800      	cmp	r0, #0
 80170de:	d0ee      	beq.n	80170be <rmw_destroy_subscription+0x12>
 80170e0:	686e      	ldr	r6, [r5, #4]
 80170e2:	2e00      	cmp	r6, #0
 80170e4:	d0eb      	beq.n	80170be <rmw_destroy_subscription+0x12>
 80170e6:	6a37      	ldr	r7, [r6, #32]
 80170e8:	6972      	ldr	r2, [r6, #20]
 80170ea:	6938      	ldr	r0, [r7, #16]
 80170ec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80170f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80170f4:	6819      	ldr	r1, [r3, #0]
 80170f6:	f001 fbe9 	bl	80188cc <uxr_buffer_cancel_data>
 80170fa:	4602      	mov	r2, r0
 80170fc:	6938      	ldr	r0, [r7, #16]
 80170fe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017102:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017106:	f000 fd05 	bl	8017b14 <run_xrce_session>
 801710a:	69f0      	ldr	r0, [r6, #28]
 801710c:	f005 f9b6 	bl	801c47c <destroy_topic>
 8017110:	6a33      	ldr	r3, [r6, #32]
 8017112:	6972      	ldr	r2, [r6, #20]
 8017114:	6918      	ldr	r0, [r3, #16]
 8017116:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801711a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801711e:	6819      	ldr	r1, [r3, #0]
 8017120:	f001 f8aa 	bl	8018278 <uxr_buffer_delete_entity>
 8017124:	6a33      	ldr	r3, [r6, #32]
 8017126:	4680      	mov	r8, r0
 8017128:	6932      	ldr	r2, [r6, #16]
 801712a:	6918      	ldr	r0, [r3, #16]
 801712c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017130:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017134:	6819      	ldr	r1, [r3, #0]
 8017136:	f001 f89f 	bl	8018278 <uxr_buffer_delete_entity>
 801713a:	4606      	mov	r6, r0
 801713c:	6938      	ldr	r0, [r7, #16]
 801713e:	4642      	mov	r2, r8
 8017140:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017144:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017148:	f000 fce4 	bl	8017b14 <run_xrce_session>
 801714c:	693f      	ldr	r7, [r7, #16]
 801714e:	4632      	mov	r2, r6
 8017150:	4606      	mov	r6, r0
 8017152:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8017156:	4638      	mov	r0, r7
 8017158:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801715c:	f000 fcda 	bl	8017b14 <run_xrce_session>
 8017160:	b126      	cbz	r6, 801716c <rmw_destroy_subscription+0xc0>
 8017162:	b118      	cbz	r0, 801716c <rmw_destroy_subscription+0xc0>
 8017164:	4628      	mov	r0, r5
 8017166:	f000 fb85 	bl	8017874 <rmw_uxrce_fini_subscription_memory>
 801716a:	e7a9      	b.n	80170c0 <rmw_destroy_subscription+0x14>
 801716c:	2402      	movs	r4, #2
 801716e:	e7f9      	b.n	8017164 <rmw_destroy_subscription+0xb8>

08017170 <rmw_take_with_info>:
 8017170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017172:	4604      	mov	r4, r0
 8017174:	6800      	ldr	r0, [r0, #0]
 8017176:	b089      	sub	sp, #36	@ 0x24
 8017178:	460f      	mov	r7, r1
 801717a:	4615      	mov	r5, r2
 801717c:	b128      	cbz	r0, 801718a <rmw_take_with_info+0x1a>
 801717e:	4b24      	ldr	r3, [pc, #144]	@ (8017210 <rmw_take_with_info+0xa0>)
 8017180:	6819      	ldr	r1, [r3, #0]
 8017182:	f7e9 f8ad 	bl	80002e0 <strcmp>
 8017186:	2800      	cmp	r0, #0
 8017188:	d13e      	bne.n	8017208 <rmw_take_with_info+0x98>
 801718a:	b305      	cbz	r5, 80171ce <rmw_take_with_info+0x5e>
 801718c:	2300      	movs	r3, #0
 801718e:	6864      	ldr	r4, [r4, #4]
 8017190:	702b      	strb	r3, [r5, #0]
 8017192:	f000 fc41 	bl	8017a18 <rmw_uxrce_clean_expired_static_input_buffer>
 8017196:	4620      	mov	r0, r4
 8017198:	f000 fc14 	bl	80179c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801719c:	4606      	mov	r6, r0
 801719e:	b1f0      	cbz	r0, 80171de <rmw_take_with_info+0x6e>
 80171a0:	6881      	ldr	r1, [r0, #8]
 80171a2:	4668      	mov	r0, sp
 80171a4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80171a8:	3110      	adds	r1, #16
 80171aa:	f7f9 fe1f 	bl	8010dec <ucdr_init_buffer>
 80171ae:	69a3      	ldr	r3, [r4, #24]
 80171b0:	4639      	mov	r1, r7
 80171b2:	4668      	mov	r0, sp
 80171b4:	68db      	ldr	r3, [r3, #12]
 80171b6:	4798      	blx	r3
 80171b8:	4604      	mov	r4, r0
 80171ba:	4631      	mov	r1, r6
 80171bc:	4815      	ldr	r0, [pc, #84]	@ (8017214 <rmw_take_with_info+0xa4>)
 80171be:	f005 f8cf 	bl	801c360 <put_memory>
 80171c2:	702c      	strb	r4, [r5, #0]
 80171c4:	f084 0001 	eor.w	r0, r4, #1
 80171c8:	b2c0      	uxtb	r0, r0
 80171ca:	b009      	add	sp, #36	@ 0x24
 80171cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171ce:	6864      	ldr	r4, [r4, #4]
 80171d0:	f000 fc22 	bl	8017a18 <rmw_uxrce_clean_expired_static_input_buffer>
 80171d4:	4620      	mov	r0, r4
 80171d6:	f000 fbf5 	bl	80179c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80171da:	4605      	mov	r5, r0
 80171dc:	b910      	cbnz	r0, 80171e4 <rmw_take_with_info+0x74>
 80171de:	2001      	movs	r0, #1
 80171e0:	b009      	add	sp, #36	@ 0x24
 80171e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171e4:	68a9      	ldr	r1, [r5, #8]
 80171e6:	4668      	mov	r0, sp
 80171e8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80171ec:	3110      	adds	r1, #16
 80171ee:	f7f9 fdfd 	bl	8010dec <ucdr_init_buffer>
 80171f2:	69a3      	ldr	r3, [r4, #24]
 80171f4:	4639      	mov	r1, r7
 80171f6:	4668      	mov	r0, sp
 80171f8:	68db      	ldr	r3, [r3, #12]
 80171fa:	4798      	blx	r3
 80171fc:	4629      	mov	r1, r5
 80171fe:	4604      	mov	r4, r0
 8017200:	4804      	ldr	r0, [pc, #16]	@ (8017214 <rmw_take_with_info+0xa4>)
 8017202:	f005 f8ad 	bl	801c360 <put_memory>
 8017206:	e7dd      	b.n	80171c4 <rmw_take_with_info+0x54>
 8017208:	200c      	movs	r0, #12
 801720a:	b009      	add	sp, #36	@ 0x24
 801720c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801720e:	bf00      	nop
 8017210:	08020a48 	.word	0x08020a48
 8017214:	24069604 	.word	0x24069604

08017218 <rmw_uxrce_transport_init>:
 8017218:	b508      	push	{r3, lr}
 801721a:	b108      	cbz	r0, 8017220 <rmw_uxrce_transport_init+0x8>
 801721c:	f100 0210 	add.w	r2, r0, #16
 8017220:	b139      	cbz	r1, 8017232 <rmw_uxrce_transport_init+0x1a>
 8017222:	6949      	ldr	r1, [r1, #20]
 8017224:	4610      	mov	r0, r2
 8017226:	f001 faaf 	bl	8018788 <uxr_init_custom_transport>
 801722a:	f080 0001 	eor.w	r0, r0, #1
 801722e:	b2c0      	uxtb	r0, r0
 8017230:	bd08      	pop	{r3, pc}
 8017232:	4b04      	ldr	r3, [pc, #16]	@ (8017244 <rmw_uxrce_transport_init+0x2c>)
 8017234:	4610      	mov	r0, r2
 8017236:	6859      	ldr	r1, [r3, #4]
 8017238:	f001 faa6 	bl	8018788 <uxr_init_custom_transport>
 801723c:	f080 0001 	eor.w	r0, r0, #1
 8017240:	b2c0      	uxtb	r0, r0
 8017242:	bd08      	pop	{r3, pc}
 8017244:	24064b9c 	.word	0x24064b9c

08017248 <rmw_wait>:
 8017248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801724c:	4698      	mov	r8, r3
 801724e:	ea40 0301 	orr.w	r3, r0, r1
 8017252:	b089      	sub	sp, #36	@ 0x24
 8017254:	ea48 0303 	orr.w	r3, r8, r3
 8017258:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801725a:	4313      	orrs	r3, r2
 801725c:	f000 8106 	beq.w	801746c <rmw_wait+0x224>
 8017260:	4605      	mov	r5, r0
 8017262:	460e      	mov	r6, r1
 8017264:	4691      	mov	r9, r2
 8017266:	b16c      	cbz	r4, 8017284 <rmw_wait+0x3c>
 8017268:	4ba6      	ldr	r3, [pc, #664]	@ (8017504 <rmw_wait+0x2bc>)
 801726a:	af04      	add	r7, sp, #16
 801726c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801726e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8017272:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017276:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801727a:	f004 fef1 	bl	801c060 <rmw_time_equal>
 801727e:	2800      	cmp	r0, #0
 8017280:	f000 810b 	beq.w	801749a <rmw_wait+0x252>
 8017284:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017288:	f000 fbc6 	bl	8017a18 <rmw_uxrce_clean_expired_static_input_buffer>
 801728c:	4b9e      	ldr	r3, [pc, #632]	@ (8017508 <rmw_wait+0x2c0>)
 801728e:	681c      	ldr	r4, [r3, #0]
 8017290:	b14c      	cbz	r4, 80172a6 <rmw_wait+0x5e>
 8017292:	4623      	mov	r3, r4
 8017294:	2100      	movs	r1, #0
 8017296:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801729a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801729e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d1f7      	bne.n	8017296 <rmw_wait+0x4e>
 80172a6:	f1b9 0f00 	cmp.w	r9, #0
 80172aa:	d011      	beq.n	80172d0 <rmw_wait+0x88>
 80172ac:	f8d9 1000 	ldr.w	r1, [r9]
 80172b0:	b171      	cbz	r1, 80172d0 <rmw_wait+0x88>
 80172b2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80172b6:	2300      	movs	r3, #0
 80172b8:	2001      	movs	r0, #1
 80172ba:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80172be:	3301      	adds	r3, #1
 80172c0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80172c2:	4299      	cmp	r1, r3
 80172c4:	6912      	ldr	r2, [r2, #16]
 80172c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80172ca:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80172ce:	d1f4      	bne.n	80172ba <rmw_wait+0x72>
 80172d0:	f1b8 0f00 	cmp.w	r8, #0
 80172d4:	d011      	beq.n	80172fa <rmw_wait+0xb2>
 80172d6:	f8d8 1000 	ldr.w	r1, [r8]
 80172da:	b171      	cbz	r1, 80172fa <rmw_wait+0xb2>
 80172dc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80172e0:	2300      	movs	r3, #0
 80172e2:	2001      	movs	r0, #1
 80172e4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80172e8:	3301      	adds	r3, #1
 80172ea:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80172ec:	4299      	cmp	r1, r3
 80172ee:	6912      	ldr	r2, [r2, #16]
 80172f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80172f4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80172f8:	d1f4      	bne.n	80172e4 <rmw_wait+0x9c>
 80172fa:	b185      	cbz	r5, 801731e <rmw_wait+0xd6>
 80172fc:	6829      	ldr	r1, [r5, #0]
 80172fe:	b171      	cbz	r1, 801731e <rmw_wait+0xd6>
 8017300:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017304:	2300      	movs	r3, #0
 8017306:	2001      	movs	r0, #1
 8017308:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801730c:	3301      	adds	r3, #1
 801730e:	6a12      	ldr	r2, [r2, #32]
 8017310:	4299      	cmp	r1, r3
 8017312:	6912      	ldr	r2, [r2, #16]
 8017314:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017318:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801731c:	d1f4      	bne.n	8017308 <rmw_wait+0xc0>
 801731e:	b344      	cbz	r4, 8017372 <rmw_wait+0x12a>
 8017320:	4622      	mov	r2, r4
 8017322:	2300      	movs	r3, #0
 8017324:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017328:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801732c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017330:	440b      	add	r3, r1
 8017332:	b2db      	uxtb	r3, r3
 8017334:	2a00      	cmp	r2, #0
 8017336:	d1f5      	bne.n	8017324 <rmw_wait+0xdc>
 8017338:	2b00      	cmp	r3, #0
 801733a:	d05f      	beq.n	80173fc <rmw_wait+0x1b4>
 801733c:	1c7a      	adds	r2, r7, #1
 801733e:	d00d      	beq.n	801735c <rmw_wait+0x114>
 8017340:	ee07 7a90 	vmov	s15, r7
 8017344:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017348:	ee07 3a90 	vmov	s15, r3
 801734c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017354:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017358:	ee17 7a90 	vmov	r7, s15
 801735c:	68a0      	ldr	r0, [r4, #8]
 801735e:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017362:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017366:	2b00      	cmp	r3, #0
 8017368:	f040 808d 	bne.w	8017486 <rmw_wait+0x23e>
 801736c:	6864      	ldr	r4, [r4, #4]
 801736e:	2c00      	cmp	r4, #0
 8017370:	d1f4      	bne.n	801735c <rmw_wait+0x114>
 8017372:	f1b9 0f00 	cmp.w	r9, #0
 8017376:	f000 80a1 	beq.w	80174bc <rmw_wait+0x274>
 801737a:	f8d9 7000 	ldr.w	r7, [r9]
 801737e:	2f00      	cmp	r7, #0
 8017380:	f000 80a4 	beq.w	80174cc <rmw_wait+0x284>
 8017384:	2400      	movs	r4, #0
 8017386:	4627      	mov	r7, r4
 8017388:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801738c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017390:	f000 fb18 	bl	80179c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017394:	2800      	cmp	r0, #0
 8017396:	d03b      	beq.n	8017410 <rmw_wait+0x1c8>
 8017398:	3401      	adds	r4, #1
 801739a:	f8d9 3000 	ldr.w	r3, [r9]
 801739e:	2701      	movs	r7, #1
 80173a0:	42a3      	cmp	r3, r4
 80173a2:	d8f1      	bhi.n	8017388 <rmw_wait+0x140>
 80173a4:	2701      	movs	r7, #1
 80173a6:	f1b8 0f00 	cmp.w	r8, #0
 80173aa:	d010      	beq.n	80173ce <rmw_wait+0x186>
 80173ac:	f8d8 3000 	ldr.w	r3, [r8]
 80173b0:	b16b      	cbz	r3, 80173ce <rmw_wait+0x186>
 80173b2:	2400      	movs	r4, #0
 80173b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80173b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80173bc:	f000 fb02 	bl	80179c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80173c0:	b370      	cbz	r0, 8017420 <rmw_wait+0x1d8>
 80173c2:	3401      	adds	r4, #1
 80173c4:	f8d8 3000 	ldr.w	r3, [r8]
 80173c8:	2701      	movs	r7, #1
 80173ca:	42a3      	cmp	r3, r4
 80173cc:	d8f2      	bhi.n	80173b4 <rmw_wait+0x16c>
 80173ce:	2d00      	cmp	r5, #0
 80173d0:	d035      	beq.n	801743e <rmw_wait+0x1f6>
 80173d2:	682b      	ldr	r3, [r5, #0]
 80173d4:	b39b      	cbz	r3, 801743e <rmw_wait+0x1f6>
 80173d6:	2400      	movs	r4, #0
 80173d8:	686b      	ldr	r3, [r5, #4]
 80173da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80173de:	f000 faf1 	bl	80179c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80173e2:	b328      	cbz	r0, 8017430 <rmw_wait+0x1e8>
 80173e4:	3401      	adds	r4, #1
 80173e6:	682b      	ldr	r3, [r5, #0]
 80173e8:	2701      	movs	r7, #1
 80173ea:	42a3      	cmp	r3, r4
 80173ec:	d8f4      	bhi.n	80173d8 <rmw_wait+0x190>
 80173ee:	2e00      	cmp	r6, #0
 80173f0:	d03c      	beq.n	801746c <rmw_wait+0x224>
 80173f2:	6834      	ldr	r4, [r6, #0]
 80173f4:	2c00      	cmp	r4, #0
 80173f6:	d039      	beq.n	801746c <rmw_wait+0x224>
 80173f8:	2701      	movs	r7, #1
 80173fa:	e023      	b.n	8017444 <rmw_wait+0x1fc>
 80173fc:	68a0      	ldr	r0, [r4, #8]
 80173fe:	2100      	movs	r1, #0
 8017400:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017404:	f001 fffa 	bl	80193fc <uxr_run_session_timeout>
 8017408:	6864      	ldr	r4, [r4, #4]
 801740a:	2c00      	cmp	r4, #0
 801740c:	d1f6      	bne.n	80173fc <rmw_wait+0x1b4>
 801740e:	e7b0      	b.n	8017372 <rmw_wait+0x12a>
 8017410:	e9d9 3200 	ldrd	r3, r2, [r9]
 8017414:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017418:	3401      	adds	r4, #1
 801741a:	42a3      	cmp	r3, r4
 801741c:	d8b4      	bhi.n	8017388 <rmw_wait+0x140>
 801741e:	e7c2      	b.n	80173a6 <rmw_wait+0x15e>
 8017420:	e9d8 3200 	ldrd	r3, r2, [r8]
 8017424:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017428:	3401      	adds	r4, #1
 801742a:	429c      	cmp	r4, r3
 801742c:	d3c2      	bcc.n	80173b4 <rmw_wait+0x16c>
 801742e:	e7ce      	b.n	80173ce <rmw_wait+0x186>
 8017430:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017434:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017438:	3401      	adds	r4, #1
 801743a:	42a3      	cmp	r3, r4
 801743c:	d8cc      	bhi.n	80173d8 <rmw_wait+0x190>
 801743e:	b1a6      	cbz	r6, 801746a <rmw_wait+0x222>
 8017440:	6834      	ldr	r4, [r6, #0]
 8017442:	b194      	cbz	r4, 801746a <rmw_wait+0x222>
 8017444:	2300      	movs	r3, #0
 8017446:	461d      	mov	r5, r3
 8017448:	e004      	b.n	8017454 <rmw_wait+0x20c>
 801744a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801744e:	3301      	adds	r3, #1
 8017450:	42a3      	cmp	r3, r4
 8017452:	d00a      	beq.n	801746a <rmw_wait+0x222>
 8017454:	6870      	ldr	r0, [r6, #4]
 8017456:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801745a:	7c0a      	ldrb	r2, [r1, #16]
 801745c:	2a00      	cmp	r2, #0
 801745e:	d0f4      	beq.n	801744a <rmw_wait+0x202>
 8017460:	3301      	adds	r3, #1
 8017462:	4617      	mov	r7, r2
 8017464:	740d      	strb	r5, [r1, #16]
 8017466:	42a3      	cmp	r3, r4
 8017468:	d1f4      	bne.n	8017454 <rmw_wait+0x20c>
 801746a:	b147      	cbz	r7, 801747e <rmw_wait+0x236>
 801746c:	2000      	movs	r0, #0
 801746e:	b009      	add	sp, #36	@ 0x24
 8017470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017474:	b11e      	cbz	r6, 801747e <rmw_wait+0x236>
 8017476:	6834      	ldr	r4, [r6, #0]
 8017478:	462f      	mov	r7, r5
 801747a:	2c00      	cmp	r4, #0
 801747c:	d1e2      	bne.n	8017444 <rmw_wait+0x1fc>
 801747e:	2002      	movs	r0, #2
 8017480:	b009      	add	sp, #36	@ 0x24
 8017482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017486:	4639      	mov	r1, r7
 8017488:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801748c:	f001 ffd0 	bl	8019430 <uxr_run_session_until_data>
 8017490:	6864      	ldr	r4, [r4, #4]
 8017492:	2c00      	cmp	r4, #0
 8017494:	f47f af62 	bne.w	801735c <rmw_wait+0x114>
 8017498:	e76b      	b.n	8017372 <rmw_wait+0x12a>
 801749a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801749e:	f004 fe35 	bl	801c10c <rmw_time_total_nsec>
 80174a2:	2300      	movs	r3, #0
 80174a4:	4a19      	ldr	r2, [pc, #100]	@ (801750c <rmw_wait+0x2c4>)
 80174a6:	f7e8 ffd3 	bl	8000450 <__aeabi_uldivmod>
 80174aa:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80174ae:	4607      	mov	r7, r0
 80174b0:	f171 0300 	sbcs.w	r3, r1, #0
 80174b4:	bfa8      	it	ge
 80174b6:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80174ba:	e6e5      	b.n	8017288 <rmw_wait+0x40>
 80174bc:	f1b8 0f00 	cmp.w	r8, #0
 80174c0:	d00f      	beq.n	80174e2 <rmw_wait+0x29a>
 80174c2:	f8d8 3000 	ldr.w	r3, [r8]
 80174c6:	b193      	cbz	r3, 80174ee <rmw_wait+0x2a6>
 80174c8:	464f      	mov	r7, r9
 80174ca:	e772      	b.n	80173b2 <rmw_wait+0x16a>
 80174cc:	f1b8 0f00 	cmp.w	r8, #0
 80174d0:	d007      	beq.n	80174e2 <rmw_wait+0x29a>
 80174d2:	f8d8 3000 	ldr.w	r3, [r8]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	f47f af6b 	bne.w	80173b2 <rmw_wait+0x16a>
 80174dc:	b155      	cbz	r5, 80174f4 <rmw_wait+0x2ac>
 80174de:	461f      	mov	r7, r3
 80174e0:	e777      	b.n	80173d2 <rmw_wait+0x18a>
 80174e2:	2d00      	cmp	r5, #0
 80174e4:	d0c6      	beq.n	8017474 <rmw_wait+0x22c>
 80174e6:	682b      	ldr	r3, [r5, #0]
 80174e8:	b143      	cbz	r3, 80174fc <rmw_wait+0x2b4>
 80174ea:	4647      	mov	r7, r8
 80174ec:	e773      	b.n	80173d6 <rmw_wait+0x18e>
 80174ee:	b10d      	cbz	r5, 80174f4 <rmw_wait+0x2ac>
 80174f0:	464f      	mov	r7, r9
 80174f2:	e76e      	b.n	80173d2 <rmw_wait+0x18a>
 80174f4:	462f      	mov	r7, r5
 80174f6:	2e00      	cmp	r6, #0
 80174f8:	d1a2      	bne.n	8017440 <rmw_wait+0x1f8>
 80174fa:	e7c0      	b.n	801747e <rmw_wait+0x236>
 80174fc:	4647      	mov	r7, r8
 80174fe:	2e00      	cmp	r6, #0
 8017500:	d19e      	bne.n	8017440 <rmw_wait+0x1f8>
 8017502:	e7bc      	b.n	801747e <rmw_wait+0x236>
 8017504:	0801eb28 	.word	0x0801eb28
 8017508:	240695f4 	.word	0x240695f4
 801750c:	000f4240 	.word	0x000f4240

08017510 <rmw_create_wait_set>:
 8017510:	b508      	push	{r3, lr}
 8017512:	4803      	ldr	r0, [pc, #12]	@ (8017520 <rmw_create_wait_set+0x10>)
 8017514:	f004 ff14 	bl	801c340 <get_memory>
 8017518:	b108      	cbz	r0, 801751e <rmw_create_wait_set+0xe>
 801751a:	6880      	ldr	r0, [r0, #8]
 801751c:	3010      	adds	r0, #16
 801751e:	bd08      	pop	{r3, pc}
 8017520:	24069634 	.word	0x24069634

08017524 <rmw_destroy_wait_set>:
 8017524:	b508      	push	{r3, lr}
 8017526:	4b08      	ldr	r3, [pc, #32]	@ (8017548 <rmw_destroy_wait_set+0x24>)
 8017528:	6819      	ldr	r1, [r3, #0]
 801752a:	b911      	cbnz	r1, 8017532 <rmw_destroy_wait_set+0xe>
 801752c:	e00a      	b.n	8017544 <rmw_destroy_wait_set+0x20>
 801752e:	6849      	ldr	r1, [r1, #4]
 8017530:	b141      	cbz	r1, 8017544 <rmw_destroy_wait_set+0x20>
 8017532:	688b      	ldr	r3, [r1, #8]
 8017534:	3310      	adds	r3, #16
 8017536:	4298      	cmp	r0, r3
 8017538:	d1f9      	bne.n	801752e <rmw_destroy_wait_set+0xa>
 801753a:	4803      	ldr	r0, [pc, #12]	@ (8017548 <rmw_destroy_wait_set+0x24>)
 801753c:	f004 ff10 	bl	801c360 <put_memory>
 8017540:	2000      	movs	r0, #0
 8017542:	bd08      	pop	{r3, pc}
 8017544:	2001      	movs	r0, #1
 8017546:	bd08      	pop	{r3, pc}
 8017548:	24069634 	.word	0x24069634

0801754c <rmw_uxrce_init_service_memory>:
 801754c:	b1e2      	cbz	r2, 8017588 <rmw_uxrce_init_service_memory+0x3c>
 801754e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017552:	7b05      	ldrb	r5, [r0, #12]
 8017554:	4606      	mov	r6, r0
 8017556:	b9ad      	cbnz	r5, 8017584 <rmw_uxrce_init_service_memory+0x38>
 8017558:	23c8      	movs	r3, #200	@ 0xc8
 801755a:	4617      	mov	r7, r2
 801755c:	460c      	mov	r4, r1
 801755e:	46a8      	mov	r8, r5
 8017560:	6083      	str	r3, [r0, #8]
 8017562:	f240 1301 	movw	r3, #257	@ 0x101
 8017566:	e9c0 5500 	strd	r5, r5, [r0]
 801756a:	8183      	strh	r3, [r0, #12]
 801756c:	3501      	adds	r5, #1
 801756e:	4621      	mov	r1, r4
 8017570:	4630      	mov	r0, r6
 8017572:	f004 fef5 	bl	801c360 <put_memory>
 8017576:	42af      	cmp	r7, r5
 8017578:	60a4      	str	r4, [r4, #8]
 801757a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801757e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8017582:	d1f3      	bne.n	801756c <rmw_uxrce_init_service_memory+0x20>
 8017584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017588:	4770      	bx	lr
 801758a:	bf00      	nop

0801758c <rmw_uxrce_init_client_memory>:
 801758c:	b1e2      	cbz	r2, 80175c8 <rmw_uxrce_init_client_memory+0x3c>
 801758e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017592:	7b05      	ldrb	r5, [r0, #12]
 8017594:	4606      	mov	r6, r0
 8017596:	b9ad      	cbnz	r5, 80175c4 <rmw_uxrce_init_client_memory+0x38>
 8017598:	23c8      	movs	r3, #200	@ 0xc8
 801759a:	4617      	mov	r7, r2
 801759c:	460c      	mov	r4, r1
 801759e:	46a8      	mov	r8, r5
 80175a0:	6083      	str	r3, [r0, #8]
 80175a2:	f240 1301 	movw	r3, #257	@ 0x101
 80175a6:	e9c0 5500 	strd	r5, r5, [r0]
 80175aa:	8183      	strh	r3, [r0, #12]
 80175ac:	3501      	adds	r5, #1
 80175ae:	4621      	mov	r1, r4
 80175b0:	4630      	mov	r0, r6
 80175b2:	f004 fed5 	bl	801c360 <put_memory>
 80175b6:	42af      	cmp	r7, r5
 80175b8:	60a4      	str	r4, [r4, #8]
 80175ba:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80175be:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80175c2:	d1f3      	bne.n	80175ac <rmw_uxrce_init_client_memory+0x20>
 80175c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175c8:	4770      	bx	lr
 80175ca:	bf00      	nop

080175cc <rmw_uxrce_init_publisher_memory>:
 80175cc:	b1e2      	cbz	r2, 8017608 <rmw_uxrce_init_publisher_memory+0x3c>
 80175ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175d2:	7b05      	ldrb	r5, [r0, #12]
 80175d4:	4606      	mov	r6, r0
 80175d6:	b9ad      	cbnz	r5, 8017604 <rmw_uxrce_init_publisher_memory+0x38>
 80175d8:	23d8      	movs	r3, #216	@ 0xd8
 80175da:	4617      	mov	r7, r2
 80175dc:	460c      	mov	r4, r1
 80175de:	46a8      	mov	r8, r5
 80175e0:	6083      	str	r3, [r0, #8]
 80175e2:	f240 1301 	movw	r3, #257	@ 0x101
 80175e6:	e9c0 5500 	strd	r5, r5, [r0]
 80175ea:	8183      	strh	r3, [r0, #12]
 80175ec:	3501      	adds	r5, #1
 80175ee:	4621      	mov	r1, r4
 80175f0:	4630      	mov	r0, r6
 80175f2:	f004 feb5 	bl	801c360 <put_memory>
 80175f6:	42af      	cmp	r7, r5
 80175f8:	60a4      	str	r4, [r4, #8]
 80175fa:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80175fe:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8017602:	d1f3      	bne.n	80175ec <rmw_uxrce_init_publisher_memory+0x20>
 8017604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017608:	4770      	bx	lr
 801760a:	bf00      	nop

0801760c <rmw_uxrce_init_subscription_memory>:
 801760c:	b1e2      	cbz	r2, 8017648 <rmw_uxrce_init_subscription_memory+0x3c>
 801760e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017612:	7b05      	ldrb	r5, [r0, #12]
 8017614:	4606      	mov	r6, r0
 8017616:	b9ad      	cbnz	r5, 8017644 <rmw_uxrce_init_subscription_memory+0x38>
 8017618:	23d8      	movs	r3, #216	@ 0xd8
 801761a:	4617      	mov	r7, r2
 801761c:	460c      	mov	r4, r1
 801761e:	46a8      	mov	r8, r5
 8017620:	6083      	str	r3, [r0, #8]
 8017622:	f240 1301 	movw	r3, #257	@ 0x101
 8017626:	e9c0 5500 	strd	r5, r5, [r0]
 801762a:	8183      	strh	r3, [r0, #12]
 801762c:	3501      	adds	r5, #1
 801762e:	4621      	mov	r1, r4
 8017630:	4630      	mov	r0, r6
 8017632:	f004 fe95 	bl	801c360 <put_memory>
 8017636:	42af      	cmp	r7, r5
 8017638:	60a4      	str	r4, [r4, #8]
 801763a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801763e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8017642:	d1f3      	bne.n	801762c <rmw_uxrce_init_subscription_memory+0x20>
 8017644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017648:	4770      	bx	lr
 801764a:	bf00      	nop

0801764c <rmw_uxrce_init_node_memory>:
 801764c:	b1e2      	cbz	r2, 8017688 <rmw_uxrce_init_node_memory+0x3c>
 801764e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017652:	7b05      	ldrb	r5, [r0, #12]
 8017654:	4606      	mov	r6, r0
 8017656:	b9ad      	cbnz	r5, 8017684 <rmw_uxrce_init_node_memory+0x38>
 8017658:	23a4      	movs	r3, #164	@ 0xa4
 801765a:	4617      	mov	r7, r2
 801765c:	460c      	mov	r4, r1
 801765e:	46a8      	mov	r8, r5
 8017660:	6083      	str	r3, [r0, #8]
 8017662:	f240 1301 	movw	r3, #257	@ 0x101
 8017666:	e9c0 5500 	strd	r5, r5, [r0]
 801766a:	8183      	strh	r3, [r0, #12]
 801766c:	3501      	adds	r5, #1
 801766e:	4621      	mov	r1, r4
 8017670:	4630      	mov	r0, r6
 8017672:	f004 fe75 	bl	801c360 <put_memory>
 8017676:	42af      	cmp	r7, r5
 8017678:	60a4      	str	r4, [r4, #8]
 801767a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801767e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8017682:	d1f3      	bne.n	801766c <rmw_uxrce_init_node_memory+0x20>
 8017684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017688:	4770      	bx	lr
 801768a:	bf00      	nop

0801768c <rmw_uxrce_init_session_memory>:
 801768c:	b1ea      	cbz	r2, 80176ca <rmw_uxrce_init_session_memory+0x3e>
 801768e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017692:	7b05      	ldrb	r5, [r0, #12]
 8017694:	4606      	mov	r6, r0
 8017696:	b9b5      	cbnz	r5, 80176c6 <rmw_uxrce_init_session_memory+0x3a>
 8017698:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 801769c:	f240 1301 	movw	r3, #257	@ 0x101
 80176a0:	4617      	mov	r7, r2
 80176a2:	460c      	mov	r4, r1
 80176a4:	46a9      	mov	r9, r5
 80176a6:	f8c0 8008 	str.w	r8, [r0, #8]
 80176aa:	8183      	strh	r3, [r0, #12]
 80176ac:	e9c0 5500 	strd	r5, r5, [r0]
 80176b0:	3501      	adds	r5, #1
 80176b2:	4621      	mov	r1, r4
 80176b4:	4630      	mov	r0, r6
 80176b6:	f004 fe53 	bl	801c360 <put_memory>
 80176ba:	42af      	cmp	r7, r5
 80176bc:	60a4      	str	r4, [r4, #8]
 80176be:	f884 900c 	strb.w	r9, [r4, #12]
 80176c2:	4444      	add	r4, r8
 80176c4:	d1f4      	bne.n	80176b0 <rmw_uxrce_init_session_memory+0x24>
 80176c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176ca:	4770      	bx	lr

080176cc <rmw_uxrce_init_topic_memory>:
 80176cc:	b1e2      	cbz	r2, 8017708 <rmw_uxrce_init_topic_memory+0x3c>
 80176ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176d2:	7b05      	ldrb	r5, [r0, #12]
 80176d4:	4606      	mov	r6, r0
 80176d6:	b9ad      	cbnz	r5, 8017704 <rmw_uxrce_init_topic_memory+0x38>
 80176d8:	231c      	movs	r3, #28
 80176da:	4617      	mov	r7, r2
 80176dc:	460c      	mov	r4, r1
 80176de:	46a8      	mov	r8, r5
 80176e0:	6083      	str	r3, [r0, #8]
 80176e2:	f240 1301 	movw	r3, #257	@ 0x101
 80176e6:	e9c0 5500 	strd	r5, r5, [r0]
 80176ea:	8183      	strh	r3, [r0, #12]
 80176ec:	3501      	adds	r5, #1
 80176ee:	4621      	mov	r1, r4
 80176f0:	4630      	mov	r0, r6
 80176f2:	f004 fe35 	bl	801c360 <put_memory>
 80176f6:	42af      	cmp	r7, r5
 80176f8:	60a4      	str	r4, [r4, #8]
 80176fa:	f104 041c 	add.w	r4, r4, #28
 80176fe:	f804 8c10 	strb.w	r8, [r4, #-16]
 8017702:	d1f3      	bne.n	80176ec <rmw_uxrce_init_topic_memory+0x20>
 8017704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017708:	4770      	bx	lr
 801770a:	bf00      	nop

0801770c <rmw_uxrce_init_static_input_buffer_memory>:
 801770c:	b1ea      	cbz	r2, 801774a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801770e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017712:	7b05      	ldrb	r5, [r0, #12]
 8017714:	4606      	mov	r6, r0
 8017716:	b9b5      	cbnz	r5, 8017746 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8017718:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 801771c:	4617      	mov	r7, r2
 801771e:	460c      	mov	r4, r1
 8017720:	46a8      	mov	r8, r5
 8017722:	6083      	str	r3, [r0, #8]
 8017724:	f240 1301 	movw	r3, #257	@ 0x101
 8017728:	e9c0 5500 	strd	r5, r5, [r0]
 801772c:	8183      	strh	r3, [r0, #12]
 801772e:	3501      	adds	r5, #1
 8017730:	4621      	mov	r1, r4
 8017732:	4630      	mov	r0, r6
 8017734:	f004 fe14 	bl	801c360 <put_memory>
 8017738:	42af      	cmp	r7, r5
 801773a:	60a4      	str	r4, [r4, #8]
 801773c:	f884 800c 	strb.w	r8, [r4, #12]
 8017740:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8017744:	d1f3      	bne.n	801772e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8017746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801774a:	4770      	bx	lr

0801774c <rmw_uxrce_init_init_options_impl_memory>:
 801774c:	b1e2      	cbz	r2, 8017788 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801774e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017752:	7b05      	ldrb	r5, [r0, #12]
 8017754:	4606      	mov	r6, r0
 8017756:	b9ad      	cbnz	r5, 8017784 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8017758:	232c      	movs	r3, #44	@ 0x2c
 801775a:	4617      	mov	r7, r2
 801775c:	460c      	mov	r4, r1
 801775e:	46a8      	mov	r8, r5
 8017760:	6083      	str	r3, [r0, #8]
 8017762:	f240 1301 	movw	r3, #257	@ 0x101
 8017766:	e9c0 5500 	strd	r5, r5, [r0]
 801776a:	8183      	strh	r3, [r0, #12]
 801776c:	3501      	adds	r5, #1
 801776e:	4621      	mov	r1, r4
 8017770:	4630      	mov	r0, r6
 8017772:	f004 fdf5 	bl	801c360 <put_memory>
 8017776:	42af      	cmp	r7, r5
 8017778:	60a4      	str	r4, [r4, #8]
 801777a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801777e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8017782:	d1f3      	bne.n	801776c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8017784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017788:	4770      	bx	lr
 801778a:	bf00      	nop

0801778c <rmw_uxrce_init_wait_set_memory>:
 801778c:	b1e2      	cbz	r2, 80177c8 <rmw_uxrce_init_wait_set_memory+0x3c>
 801778e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017792:	7b05      	ldrb	r5, [r0, #12]
 8017794:	4606      	mov	r6, r0
 8017796:	b9ad      	cbnz	r5, 80177c4 <rmw_uxrce_init_wait_set_memory+0x38>
 8017798:	231c      	movs	r3, #28
 801779a:	4617      	mov	r7, r2
 801779c:	460c      	mov	r4, r1
 801779e:	46a8      	mov	r8, r5
 80177a0:	6083      	str	r3, [r0, #8]
 80177a2:	f240 1301 	movw	r3, #257	@ 0x101
 80177a6:	e9c0 5500 	strd	r5, r5, [r0]
 80177aa:	8183      	strh	r3, [r0, #12]
 80177ac:	3501      	adds	r5, #1
 80177ae:	4621      	mov	r1, r4
 80177b0:	4630      	mov	r0, r6
 80177b2:	f004 fdd5 	bl	801c360 <put_memory>
 80177b6:	42af      	cmp	r7, r5
 80177b8:	60a4      	str	r4, [r4, #8]
 80177ba:	f104 041c 	add.w	r4, r4, #28
 80177be:	f804 8c10 	strb.w	r8, [r4, #-16]
 80177c2:	d1f3      	bne.n	80177ac <rmw_uxrce_init_wait_set_memory+0x20>
 80177c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c8:	4770      	bx	lr
 80177ca:	bf00      	nop

080177cc <rmw_uxrce_init_guard_condition_memory>:
 80177cc:	b1e2      	cbz	r2, 8017808 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80177ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d2:	7b05      	ldrb	r5, [r0, #12]
 80177d4:	4606      	mov	r6, r0
 80177d6:	b9ad      	cbnz	r5, 8017804 <rmw_uxrce_init_guard_condition_memory+0x38>
 80177d8:	2320      	movs	r3, #32
 80177da:	4617      	mov	r7, r2
 80177dc:	460c      	mov	r4, r1
 80177de:	46a8      	mov	r8, r5
 80177e0:	6083      	str	r3, [r0, #8]
 80177e2:	f240 1301 	movw	r3, #257	@ 0x101
 80177e6:	e9c0 5500 	strd	r5, r5, [r0]
 80177ea:	8183      	strh	r3, [r0, #12]
 80177ec:	3501      	adds	r5, #1
 80177ee:	4621      	mov	r1, r4
 80177f0:	4630      	mov	r0, r6
 80177f2:	f004 fdb5 	bl	801c360 <put_memory>
 80177f6:	42af      	cmp	r7, r5
 80177f8:	60a4      	str	r4, [r4, #8]
 80177fa:	f104 0420 	add.w	r4, r4, #32
 80177fe:	f804 8c14 	strb.w	r8, [r4, #-20]
 8017802:	d1f3      	bne.n	80177ec <rmw_uxrce_init_guard_condition_memory+0x20>
 8017804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017808:	4770      	bx	lr
 801780a:	bf00      	nop

0801780c <rmw_uxrce_fini_session_memory>:
 801780c:	4601      	mov	r1, r0
 801780e:	4801      	ldr	r0, [pc, #4]	@ (8017814 <rmw_uxrce_fini_session_memory+0x8>)
 8017810:	f004 bda6 	b.w	801c360 <put_memory>
 8017814:	240695f4 	.word	0x240695f4

08017818 <rmw_uxrce_fini_node_memory>:
 8017818:	b538      	push	{r3, r4, r5, lr}
 801781a:	4604      	mov	r4, r0
 801781c:	6800      	ldr	r0, [r0, #0]
 801781e:	b128      	cbz	r0, 801782c <rmw_uxrce_fini_node_memory+0x14>
 8017820:	4b07      	ldr	r3, [pc, #28]	@ (8017840 <rmw_uxrce_fini_node_memory+0x28>)
 8017822:	6819      	ldr	r1, [r3, #0]
 8017824:	f7e8 fd5c 	bl	80002e0 <strcmp>
 8017828:	b940      	cbnz	r0, 801783c <rmw_uxrce_fini_node_memory+0x24>
 801782a:	6020      	str	r0, [r4, #0]
 801782c:	6861      	ldr	r1, [r4, #4]
 801782e:	b129      	cbz	r1, 801783c <rmw_uxrce_fini_node_memory+0x24>
 8017830:	2500      	movs	r5, #0
 8017832:	4804      	ldr	r0, [pc, #16]	@ (8017844 <rmw_uxrce_fini_node_memory+0x2c>)
 8017834:	610d      	str	r5, [r1, #16]
 8017836:	f004 fd93 	bl	801c360 <put_memory>
 801783a:	6065      	str	r5, [r4, #4]
 801783c:	bd38      	pop	{r3, r4, r5, pc}
 801783e:	bf00      	nop
 8017840:	08020a48 	.word	0x08020a48
 8017844:	240695c4 	.word	0x240695c4

08017848 <rmw_uxrce_fini_publisher_memory>:
 8017848:	b510      	push	{r4, lr}
 801784a:	4604      	mov	r4, r0
 801784c:	6800      	ldr	r0, [r0, #0]
 801784e:	b128      	cbz	r0, 801785c <rmw_uxrce_fini_publisher_memory+0x14>
 8017850:	4b06      	ldr	r3, [pc, #24]	@ (801786c <rmw_uxrce_fini_publisher_memory+0x24>)
 8017852:	6819      	ldr	r1, [r3, #0]
 8017854:	f7e8 fd44 	bl	80002e0 <strcmp>
 8017858:	b938      	cbnz	r0, 801786a <rmw_uxrce_fini_publisher_memory+0x22>
 801785a:	6020      	str	r0, [r4, #0]
 801785c:	6861      	ldr	r1, [r4, #4]
 801785e:	b121      	cbz	r1, 801786a <rmw_uxrce_fini_publisher_memory+0x22>
 8017860:	4803      	ldr	r0, [pc, #12]	@ (8017870 <rmw_uxrce_fini_publisher_memory+0x28>)
 8017862:	f004 fd7d 	bl	801c360 <put_memory>
 8017866:	2300      	movs	r3, #0
 8017868:	6063      	str	r3, [r4, #4]
 801786a:	bd10      	pop	{r4, pc}
 801786c:	08020a48 	.word	0x08020a48
 8017870:	240695d4 	.word	0x240695d4

08017874 <rmw_uxrce_fini_subscription_memory>:
 8017874:	b510      	push	{r4, lr}
 8017876:	4604      	mov	r4, r0
 8017878:	6800      	ldr	r0, [r0, #0]
 801787a:	b128      	cbz	r0, 8017888 <rmw_uxrce_fini_subscription_memory+0x14>
 801787c:	4b06      	ldr	r3, [pc, #24]	@ (8017898 <rmw_uxrce_fini_subscription_memory+0x24>)
 801787e:	6819      	ldr	r1, [r3, #0]
 8017880:	f7e8 fd2e 	bl	80002e0 <strcmp>
 8017884:	b938      	cbnz	r0, 8017896 <rmw_uxrce_fini_subscription_memory+0x22>
 8017886:	6020      	str	r0, [r4, #0]
 8017888:	6861      	ldr	r1, [r4, #4]
 801788a:	b121      	cbz	r1, 8017896 <rmw_uxrce_fini_subscription_memory+0x22>
 801788c:	4803      	ldr	r0, [pc, #12]	@ (801789c <rmw_uxrce_fini_subscription_memory+0x28>)
 801788e:	f004 fd67 	bl	801c360 <put_memory>
 8017892:	2300      	movs	r3, #0
 8017894:	6063      	str	r3, [r4, #4]
 8017896:	bd10      	pop	{r4, pc}
 8017898:	08020a48 	.word	0x08020a48
 801789c:	24069614 	.word	0x24069614

080178a0 <rmw_uxrce_fini_service_memory>:
 80178a0:	b510      	push	{r4, lr}
 80178a2:	4604      	mov	r4, r0
 80178a4:	6800      	ldr	r0, [r0, #0]
 80178a6:	b128      	cbz	r0, 80178b4 <rmw_uxrce_fini_service_memory+0x14>
 80178a8:	4b06      	ldr	r3, [pc, #24]	@ (80178c4 <rmw_uxrce_fini_service_memory+0x24>)
 80178aa:	6819      	ldr	r1, [r3, #0]
 80178ac:	f7e8 fd18 	bl	80002e0 <strcmp>
 80178b0:	b938      	cbnz	r0, 80178c2 <rmw_uxrce_fini_service_memory+0x22>
 80178b2:	6020      	str	r0, [r4, #0]
 80178b4:	6861      	ldr	r1, [r4, #4]
 80178b6:	b121      	cbz	r1, 80178c2 <rmw_uxrce_fini_service_memory+0x22>
 80178b8:	4803      	ldr	r0, [pc, #12]	@ (80178c8 <rmw_uxrce_fini_service_memory+0x28>)
 80178ba:	f004 fd51 	bl	801c360 <put_memory>
 80178be:	2300      	movs	r3, #0
 80178c0:	6063      	str	r3, [r4, #4]
 80178c2:	bd10      	pop	{r4, pc}
 80178c4:	08020a48 	.word	0x08020a48
 80178c8:	240695e4 	.word	0x240695e4

080178cc <rmw_uxrce_fini_client_memory>:
 80178cc:	b510      	push	{r4, lr}
 80178ce:	4604      	mov	r4, r0
 80178d0:	6800      	ldr	r0, [r0, #0]
 80178d2:	b128      	cbz	r0, 80178e0 <rmw_uxrce_fini_client_memory+0x14>
 80178d4:	4b06      	ldr	r3, [pc, #24]	@ (80178f0 <rmw_uxrce_fini_client_memory+0x24>)
 80178d6:	6819      	ldr	r1, [r3, #0]
 80178d8:	f7e8 fd02 	bl	80002e0 <strcmp>
 80178dc:	b938      	cbnz	r0, 80178ee <rmw_uxrce_fini_client_memory+0x22>
 80178de:	6020      	str	r0, [r4, #0]
 80178e0:	6861      	ldr	r1, [r4, #4]
 80178e2:	b121      	cbz	r1, 80178ee <rmw_uxrce_fini_client_memory+0x22>
 80178e4:	4803      	ldr	r0, [pc, #12]	@ (80178f4 <rmw_uxrce_fini_client_memory+0x28>)
 80178e6:	f004 fd3b 	bl	801c360 <put_memory>
 80178ea:	2300      	movs	r3, #0
 80178ec:	6063      	str	r3, [r4, #4]
 80178ee:	bd10      	pop	{r4, pc}
 80178f0:	08020a48 	.word	0x08020a48
 80178f4:	24064cf8 	.word	0x24064cf8

080178f8 <rmw_uxrce_fini_topic_memory>:
 80178f8:	b510      	push	{r4, lr}
 80178fa:	4604      	mov	r4, r0
 80178fc:	4803      	ldr	r0, [pc, #12]	@ (801790c <rmw_uxrce_fini_topic_memory+0x14>)
 80178fe:	4621      	mov	r1, r4
 8017900:	f004 fd2e 	bl	801c360 <put_memory>
 8017904:	2300      	movs	r3, #0
 8017906:	61a3      	str	r3, [r4, #24]
 8017908:	bd10      	pop	{r4, pc}
 801790a:	bf00      	nop
 801790c:	24069624 	.word	0x24069624

08017910 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8017910:	b082      	sub	sp, #8
 8017912:	492b      	ldr	r1, [pc, #172]	@ (80179c0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8017914:	b530      	push	{r4, r5, lr}
 8017916:	680d      	ldr	r5, [r1, #0]
 8017918:	ac03      	add	r4, sp, #12
 801791a:	e884 000c 	stmia.w	r4, {r2, r3}
 801791e:	461c      	mov	r4, r3
 8017920:	2d00      	cmp	r5, #0
 8017922:	d04b      	beq.n	80179bc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8017924:	462b      	mov	r3, r5
 8017926:	2100      	movs	r1, #0
 8017928:	689a      	ldr	r2, [r3, #8]
 801792a:	685b      	ldr	r3, [r3, #4]
 801792c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8017930:	4290      	cmp	r0, r2
 8017932:	bf08      	it	eq
 8017934:	3101      	addeq	r1, #1
 8017936:	2b00      	cmp	r3, #0
 8017938:	d1f6      	bne.n	8017928 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801793a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801793e:	2b02      	cmp	r3, #2
 8017940:	d029      	beq.n	8017996 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8017942:	d820      	bhi.n	8017986 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8017944:	428c      	cmp	r4, r1
 8017946:	d828      	bhi.n	801799a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8017948:	fab4 f284 	clz	r2, r4
 801794c:	0952      	lsrs	r2, r2, #5
 801794e:	b324      	cbz	r4, 801799a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8017950:	b1dd      	cbz	r5, 801798a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8017952:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8017956:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801795a:	e001      	b.n	8017960 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 801795c:	686d      	ldr	r5, [r5, #4]
 801795e:	b1ad      	cbz	r5, 801798c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8017960:	68ab      	ldr	r3, [r5, #8]
 8017962:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8017966:	4288      	cmp	r0, r1
 8017968:	d1f8      	bne.n	801795c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801796a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801796e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8017972:	4561      	cmp	r1, ip
 8017974:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017978:	eb73 0e04 	sbcs.w	lr, r3, r4
 801797c:	daee      	bge.n	801795c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801797e:	468c      	mov	ip, r1
 8017980:	461c      	mov	r4, r3
 8017982:	462a      	mov	r2, r5
 8017984:	e7ea      	b.n	801795c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8017986:	2b03      	cmp	r3, #3
 8017988:	d0dc      	beq.n	8017944 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 801798a:	2200      	movs	r2, #0
 801798c:	4610      	mov	r0, r2
 801798e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017992:	b002      	add	sp, #8
 8017994:	4770      	bx	lr
 8017996:	428c      	cmp	r4, r1
 8017998:	d905      	bls.n	80179a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801799a:	4809      	ldr	r0, [pc, #36]	@ (80179c0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801799c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179a0:	b002      	add	sp, #8
 80179a2:	f004 bccd 	b.w	801c340 <get_memory>
 80179a6:	fab4 f284 	clz	r2, r4
 80179aa:	0952      	lsrs	r2, r2, #5
 80179ac:	2c00      	cmp	r4, #0
 80179ae:	d1ed      	bne.n	801798c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80179b0:	4803      	ldr	r0, [pc, #12]	@ (80179c0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80179b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179b6:	b002      	add	sp, #8
 80179b8:	f004 bcc2 	b.w	801c340 <get_memory>
 80179bc:	4629      	mov	r1, r5
 80179be:	e7bc      	b.n	801793a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80179c0:	24069604 	.word	0x24069604

080179c4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80179c4:	4b12      	ldr	r3, [pc, #72]	@ (8017a10 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	b530      	push	{r4, r5, lr}
 80179ca:	b1f3      	cbz	r3, 8017a0a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80179cc:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80179d0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80179d4:	2400      	movs	r4, #0
 80179d6:	e001      	b.n	80179dc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80179d8:	685b      	ldr	r3, [r3, #4]
 80179da:	b1a3      	cbz	r3, 8017a06 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80179dc:	689a      	ldr	r2, [r3, #8]
 80179de:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 80179e2:	4288      	cmp	r0, r1
 80179e4:	d1f8      	bne.n	80179d8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80179e6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 80179ea:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 80179ee:	4571      	cmp	r1, lr
 80179f0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80179f4:	eb72 050c 	sbcs.w	r5, r2, ip
 80179f8:	daee      	bge.n	80179d8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80179fa:	461c      	mov	r4, r3
 80179fc:	685b      	ldr	r3, [r3, #4]
 80179fe:	468e      	mov	lr, r1
 8017a00:	4694      	mov	ip, r2
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d1ea      	bne.n	80179dc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8017a06:	4620      	mov	r0, r4
 8017a08:	bd30      	pop	{r4, r5, pc}
 8017a0a:	461c      	mov	r4, r3
 8017a0c:	4620      	mov	r0, r4
 8017a0e:	bd30      	pop	{r4, r5, pc}
 8017a10:	24069604 	.word	0x24069604
 8017a14:	00000000 	.word	0x00000000

08017a18 <rmw_uxrce_clean_expired_static_input_buffer>:
 8017a18:	4b3d      	ldr	r3, [pc, #244]	@ (8017b10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8017a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a1e:	681f      	ldr	r7, [r3, #0]
 8017a20:	ed2d 8b06 	vpush	{d8-d10}
 8017a24:	b08d      	sub	sp, #52	@ 0x34
 8017a26:	f004 fd4b 	bl	801c4c0 <rmw_uros_epoch_nanos>
 8017a2a:	2f00      	cmp	r7, #0
 8017a2c:	d05d      	beq.n	8017aea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8017a2e:	46b8      	mov	r8, r7
 8017a30:	4681      	mov	r9, r0
 8017a32:	468a      	mov	sl, r1
 8017a34:	ac04      	add	r4, sp, #16
 8017a36:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017a3a:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8017a3e:	2b04      	cmp	r3, #4
 8017a40:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8017af8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8017a44:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8017b00 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8017a48:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8017b08 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8017a4c:	d03f      	beq.n	8017ace <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8017a4e:	2b05      	cmp	r3, #5
 8017a50:	d044      	beq.n	8017adc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8017a52:	2b03      	cmp	r3, #3
 8017a54:	d03b      	beq.n	8017ace <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8017a56:	ed8d 8b04 	vstr	d8, [sp, #16]
 8017a5a:	ed8d ab06 	vstr	d10, [sp, #24]
 8017a5e:	ab08      	add	r3, sp, #32
 8017a60:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017a64:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8017a68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017a6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017a6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017a72:	f004 faf5 	bl	801c060 <rmw_time_equal>
 8017a76:	b118      	cbz	r0, 8017a80 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8017a78:	ed8d 9b04 	vstr	d9, [sp, #16]
 8017a7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8017a80:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8017a84:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8017a88:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8017a8c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8017a90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017a94:	f004 fb3a 	bl	801c10c <rmw_time_total_nsec>
 8017a98:	1830      	adds	r0, r6, r0
 8017a9a:	eb47 0101 	adc.w	r1, r7, r1
 8017a9e:	4548      	cmp	r0, r9
 8017aa0:	eb71 030a 	sbcs.w	r3, r1, sl
 8017aa4:	db05      	blt.n	8017ab2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8017aa6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8017aaa:	4591      	cmp	r9, r2
 8017aac:	eb7a 0303 	sbcs.w	r3, sl, r3
 8017ab0:	da03      	bge.n	8017aba <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8017ab2:	4641      	mov	r1, r8
 8017ab4:	4816      	ldr	r0, [pc, #88]	@ (8017b10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8017ab6:	f004 fc53 	bl	801c360 <put_memory>
 8017aba:	f1bb 0f00 	cmp.w	fp, #0
 8017abe:	d014      	beq.n	8017aea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8017ac0:	46d8      	mov	r8, fp
 8017ac2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017ac6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8017aca:	2b04      	cmp	r3, #4
 8017acc:	d1bf      	bne.n	8017a4e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8017ace:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8017ad2:	3340      	adds	r3, #64	@ 0x40
 8017ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ad6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017ada:	e7c0      	b.n	8017a5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8017adc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8017ae0:	3348      	adds	r3, #72	@ 0x48
 8017ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017ae8:	e7b9      	b.n	8017a5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8017aea:	b00d      	add	sp, #52	@ 0x34
 8017aec:	ecbd 8b06 	vpop	{d8-d10}
 8017af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017af4:	f3af 8000 	nop.w
	...
 8017b00:	00000001 	.word	0x00000001
 8017b04:	00000000 	.word	0x00000000
 8017b08:	0000001e 	.word	0x0000001e
 8017b0c:	00000000 	.word	0x00000000
 8017b10:	24069604 	.word	0x24069604

08017b14 <run_xrce_session>:
 8017b14:	b510      	push	{r4, lr}
 8017b16:	788c      	ldrb	r4, [r1, #2]
 8017b18:	b086      	sub	sp, #24
 8017b1a:	2c01      	cmp	r4, #1
 8017b1c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8017b20:	d00c      	beq.n	8017b3c <run_xrce_session+0x28>
 8017b22:	2401      	movs	r4, #1
 8017b24:	4619      	mov	r1, r3
 8017b26:	f10d 020e 	add.w	r2, sp, #14
 8017b2a:	f10d 0317 	add.w	r3, sp, #23
 8017b2e:	9400      	str	r4, [sp, #0]
 8017b30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017b34:	f001 fcc0 	bl	80194b8 <uxr_run_session_until_all_status>
 8017b38:	b006      	add	sp, #24
 8017b3a:	bd10      	pop	{r4, pc}
 8017b3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017b40:	f001 f8dc 	bl	8018cfc <uxr_flash_output_streams>
 8017b44:	4620      	mov	r0, r4
 8017b46:	b006      	add	sp, #24
 8017b48:	bd10      	pop	{r4, pc}
 8017b4a:	bf00      	nop

08017b4c <convert_qos_profile>:
 8017b4c:	7a4a      	ldrb	r2, [r1, #9]
 8017b4e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8017b52:	2a02      	cmp	r2, #2
 8017b54:	bf18      	it	ne
 8017b56:	2200      	movne	r2, #0
 8017b58:	7002      	strb	r2, [r0, #0]
 8017b5a:	f1ac 0202 	sub.w	r2, ip, #2
 8017b5e:	fab2 f282 	clz	r2, r2
 8017b62:	0952      	lsrs	r2, r2, #5
 8017b64:	7042      	strb	r2, [r0, #1]
 8017b66:	780a      	ldrb	r2, [r1, #0]
 8017b68:	8889      	ldrh	r1, [r1, #4]
 8017b6a:	f1a2 0202 	sub.w	r2, r2, #2
 8017b6e:	8081      	strh	r1, [r0, #4]
 8017b70:	fab2 f282 	clz	r2, r2
 8017b74:	0952      	lsrs	r2, r2, #5
 8017b76:	7082      	strb	r2, [r0, #2]
 8017b78:	4770      	bx	lr
 8017b7a:	bf00      	nop

08017b7c <generate_type_name>:
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	b530      	push	{r4, r5, lr}
 8017b80:	700b      	strb	r3, [r1, #0]
 8017b82:	b087      	sub	sp, #28
 8017b84:	6803      	ldr	r3, [r0, #0]
 8017b86:	4614      	mov	r4, r2
 8017b88:	b1bb      	cbz	r3, 8017bba <generate_type_name+0x3e>
 8017b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8017bc4 <generate_type_name+0x48>)
 8017b8c:	4615      	mov	r5, r2
 8017b8e:	9500      	str	r5, [sp, #0]
 8017b90:	9203      	str	r2, [sp, #12]
 8017b92:	4d0d      	ldr	r5, [pc, #52]	@ (8017bc8 <generate_type_name+0x4c>)
 8017b94:	6842      	ldr	r2, [r0, #4]
 8017b96:	4608      	mov	r0, r1
 8017b98:	490c      	ldr	r1, [pc, #48]	@ (8017bcc <generate_type_name+0x50>)
 8017b9a:	9204      	str	r2, [sp, #16]
 8017b9c:	9105      	str	r1, [sp, #20]
 8017b9e:	9102      	str	r1, [sp, #8]
 8017ba0:	4621      	mov	r1, r4
 8017ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8017bd0 <generate_type_name+0x54>)
 8017ba4:	9501      	str	r5, [sp, #4]
 8017ba6:	f005 fdcf 	bl	801d748 <sniprintf>
 8017baa:	2800      	cmp	r0, #0
 8017bac:	bfa8      	it	ge
 8017bae:	4284      	cmpge	r4, r0
 8017bb0:	bfcc      	ite	gt
 8017bb2:	2001      	movgt	r0, #1
 8017bb4:	2000      	movle	r0, #0
 8017bb6:	b007      	add	sp, #28
 8017bb8:	bd30      	pop	{r4, r5, pc}
 8017bba:	4b06      	ldr	r3, [pc, #24]	@ (8017bd4 <generate_type_name+0x58>)
 8017bbc:	4a01      	ldr	r2, [pc, #4]	@ (8017bc4 <generate_type_name+0x48>)
 8017bbe:	461d      	mov	r5, r3
 8017bc0:	e7e5      	b.n	8017b8e <generate_type_name+0x12>
 8017bc2:	bf00      	nop
 8017bc4:	08020724 	.word	0x08020724
 8017bc8:	0802073c 	.word	0x0802073c
 8017bcc:	08020738 	.word	0x08020738
 8017bd0:	08020728 	.word	0x08020728
 8017bd4:	08020a98 	.word	0x08020a98

08017bd8 <generate_topic_name>:
 8017bd8:	b530      	push	{r4, r5, lr}
 8017bda:	4614      	mov	r4, r2
 8017bdc:	b083      	sub	sp, #12
 8017bde:	4605      	mov	r5, r0
 8017be0:	4b07      	ldr	r3, [pc, #28]	@ (8017c00 <generate_topic_name+0x28>)
 8017be2:	4a08      	ldr	r2, [pc, #32]	@ (8017c04 <generate_topic_name+0x2c>)
 8017be4:	4608      	mov	r0, r1
 8017be6:	9500      	str	r5, [sp, #0]
 8017be8:	4621      	mov	r1, r4
 8017bea:	f005 fdad 	bl	801d748 <sniprintf>
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	bfa8      	it	ge
 8017bf2:	4284      	cmpge	r4, r0
 8017bf4:	bfcc      	ite	gt
 8017bf6:	2001      	movgt	r0, #1
 8017bf8:	2000      	movle	r0, #0
 8017bfa:	b003      	add	sp, #12
 8017bfc:	bd30      	pop	{r4, r5, pc}
 8017bfe:	bf00      	nop
 8017c00:	08020740 	.word	0x08020740
 8017c04:	08020148 	.word	0x08020148

08017c08 <is_uxrce_rmw_identifier_valid>:
 8017c08:	b510      	push	{r4, lr}
 8017c0a:	4604      	mov	r4, r0
 8017c0c:	b140      	cbz	r0, 8017c20 <is_uxrce_rmw_identifier_valid+0x18>
 8017c0e:	f7fe fae1 	bl	80161d4 <rmw_get_implementation_identifier>
 8017c12:	4601      	mov	r1, r0
 8017c14:	4620      	mov	r0, r4
 8017c16:	f7e8 fb63 	bl	80002e0 <strcmp>
 8017c1a:	fab0 f080 	clz	r0, r0
 8017c1e:	0940      	lsrs	r0, r0, #5
 8017c20:	bd10      	pop	{r4, pc}
 8017c22:	bf00      	nop

08017c24 <std_msgs__msg__Header__init>:
 8017c24:	b570      	push	{r4, r5, r6, lr}
 8017c26:	4605      	mov	r5, r0
 8017c28:	b1a8      	cbz	r0, 8017c56 <std_msgs__msg__Header__init+0x32>
 8017c2a:	f7fa fe4d 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 8017c2e:	4604      	mov	r4, r0
 8017c30:	b140      	cbz	r0, 8017c44 <std_msgs__msg__Header__init+0x20>
 8017c32:	f105 0608 	add.w	r6, r5, #8
 8017c36:	4630      	mov	r0, r6
 8017c38:	f004 fc50 	bl	801c4dc <rosidl_runtime_c__String__init>
 8017c3c:	4604      	mov	r4, r0
 8017c3e:	b168      	cbz	r0, 8017c5c <std_msgs__msg__Header__init+0x38>
 8017c40:	4620      	mov	r0, r4
 8017c42:	bd70      	pop	{r4, r5, r6, pc}
 8017c44:	4628      	mov	r0, r5
 8017c46:	f7fa fe43 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8017c4a:	f105 0008 	add.w	r0, r5, #8
 8017c4e:	f004 fc5b 	bl	801c508 <rosidl_runtime_c__String__fini>
 8017c52:	4620      	mov	r0, r4
 8017c54:	bd70      	pop	{r4, r5, r6, pc}
 8017c56:	4604      	mov	r4, r0
 8017c58:	4620      	mov	r0, r4
 8017c5a:	bd70      	pop	{r4, r5, r6, pc}
 8017c5c:	4628      	mov	r0, r5
 8017c5e:	f7fa fe37 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8017c62:	4630      	mov	r0, r6
 8017c64:	f004 fc50 	bl	801c508 <rosidl_runtime_c__String__fini>
 8017c68:	e7ea      	b.n	8017c40 <std_msgs__msg__Header__init+0x1c>
 8017c6a:	bf00      	nop

08017c6c <std_msgs__msg__Header__fini>:
 8017c6c:	b148      	cbz	r0, 8017c82 <std_msgs__msg__Header__fini+0x16>
 8017c6e:	b510      	push	{r4, lr}
 8017c70:	4604      	mov	r4, r0
 8017c72:	f7fa fe2d 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8017c76:	f104 0008 	add.w	r0, r4, #8
 8017c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c7e:	f004 bc43 	b.w	801c508 <rosidl_runtime_c__String__fini>
 8017c82:	4770      	bx	lr

08017c84 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 8017c84:	b570      	push	{r4, r5, r6, lr}
 8017c86:	4605      	mov	r5, r0
 8017c88:	b1a8      	cbz	r0, 8017cb6 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 8017c8a:	f7ff ffcb 	bl	8017c24 <std_msgs__msg__Header__init>
 8017c8e:	4604      	mov	r4, r0
 8017c90:	b140      	cbz	r0, 8017ca4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 8017c92:	f105 0618 	add.w	r6, r5, #24
 8017c96:	4630      	mov	r0, r6
 8017c98:	f004 fc7e 	bl	801c598 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 8017c9c:	4604      	mov	r4, r0
 8017c9e:	b168      	cbz	r0, 8017cbc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 8017ca0:	4620      	mov	r0, r4
 8017ca2:	bd70      	pop	{r4, r5, r6, pc}
 8017ca4:	4628      	mov	r0, r5
 8017ca6:	f7ff ffe1 	bl	8017c6c <std_msgs__msg__Header__fini>
 8017caa:	f105 0018 	add.w	r0, r5, #24
 8017cae:	f004 fc77 	bl	801c5a0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8017cb2:	4620      	mov	r0, r4
 8017cb4:	bd70      	pop	{r4, r5, r6, pc}
 8017cb6:	4604      	mov	r4, r0
 8017cb8:	4620      	mov	r0, r4
 8017cba:	bd70      	pop	{r4, r5, r6, pc}
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	f7ff ffd5 	bl	8017c6c <std_msgs__msg__Header__fini>
 8017cc2:	4630      	mov	r0, r6
 8017cc4:	f004 fc6c 	bl	801c5a0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8017cc8:	e7ea      	b.n	8017ca0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8017cca:	bf00      	nop

08017ccc <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8017ccc:	b148      	cbz	r0, 8017ce2 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8017cce:	b510      	push	{r4, lr}
 8017cd0:	4604      	mov	r4, r0
 8017cd2:	f7ff ffcb 	bl	8017c6c <std_msgs__msg__Header__fini>
 8017cd6:	f104 0018 	add.w	r0, r4, #24
 8017cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cde:	f004 bc5f 	b.w	801c5a0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8017ce2:	4770      	bx	lr

08017ce4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 8017ce4:	b570      	push	{r4, r5, r6, lr}
 8017ce6:	4605      	mov	r5, r0
 8017ce8:	b1a8      	cbz	r0, 8017d16 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 8017cea:	f7ff ff9b 	bl	8017c24 <std_msgs__msg__Header__init>
 8017cee:	4604      	mov	r4, r0
 8017cf0:	b140      	cbz	r0, 8017d04 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 8017cf2:	f105 0618 	add.w	r6, r5, #24
 8017cf6:	4630      	mov	r0, r6
 8017cf8:	f004 fc54 	bl	801c5a4 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8017cfc:	4604      	mov	r4, r0
 8017cfe:	b168      	cbz	r0, 8017d1c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8017d00:	4620      	mov	r0, r4
 8017d02:	bd70      	pop	{r4, r5, r6, pc}
 8017d04:	4628      	mov	r0, r5
 8017d06:	f7ff ffb1 	bl	8017c6c <std_msgs__msg__Header__fini>
 8017d0a:	f105 0018 	add.w	r0, r5, #24
 8017d0e:	f004 fc4d 	bl	801c5ac <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8017d12:	4620      	mov	r0, r4
 8017d14:	bd70      	pop	{r4, r5, r6, pc}
 8017d16:	4604      	mov	r4, r0
 8017d18:	4620      	mov	r0, r4
 8017d1a:	bd70      	pop	{r4, r5, r6, pc}
 8017d1c:	4628      	mov	r0, r5
 8017d1e:	f7ff ffa5 	bl	8017c6c <std_msgs__msg__Header__fini>
 8017d22:	4630      	mov	r0, r6
 8017d24:	f004 fc42 	bl	801c5ac <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8017d28:	e7ea      	b.n	8017d00 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 8017d2a:	bf00      	nop

08017d2c <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 8017d2c:	b148      	cbz	r0, 8017d42 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 8017d2e:	b510      	push	{r4, lr}
 8017d30:	4604      	mov	r4, r0
 8017d32:	f7ff ff9b 	bl	8017c6c <std_msgs__msg__Header__fini>
 8017d36:	f104 0018 	add.w	r0, r4, #24
 8017d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d3e:	f004 bc35 	b.w	801c5ac <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8017d42:	4770      	bx	lr

08017d44 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 8017d44:	b538      	push	{r3, r4, r5, lr}
 8017d46:	4604      	mov	r4, r0
 8017d48:	b128      	cbz	r0, 8017d56 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 8017d4a:	f7fa fdbd 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 8017d4e:	4605      	mov	r5, r0
 8017d50:	b120      	cbz	r0, 8017d5c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 8017d52:	4628      	mov	r0, r5
 8017d54:	bd38      	pop	{r3, r4, r5, pc}
 8017d56:	4605      	mov	r5, r0
 8017d58:	4628      	mov	r0, r5
 8017d5a:	bd38      	pop	{r3, r4, r5, pc}
 8017d5c:	4620      	mov	r0, r4
 8017d5e:	f7fa fdb7 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8017d62:	4628      	mov	r0, r5
 8017d64:	bd38      	pop	{r3, r4, r5, pc}
 8017d66:	bf00      	nop

08017d68 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 8017d68:	b108      	cbz	r0, 8017d6e <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 8017d6a:	f7fa bdb1 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 8017d6e:	4770      	bx	lr

08017d70 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 8017d70:	b538      	push	{r3, r4, r5, lr}
 8017d72:	4604      	mov	r4, r0
 8017d74:	b128      	cbz	r0, 8017d82 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 8017d76:	f7fa fda7 	bl	80128c8 <builtin_interfaces__msg__Time__init>
 8017d7a:	4605      	mov	r5, r0
 8017d7c:	b120      	cbz	r0, 8017d88 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 8017d7e:	4628      	mov	r0, r5
 8017d80:	bd38      	pop	{r3, r4, r5, pc}
 8017d82:	4605      	mov	r5, r0
 8017d84:	4628      	mov	r0, r5
 8017d86:	bd38      	pop	{r3, r4, r5, pc}
 8017d88:	4620      	mov	r0, r4
 8017d8a:	f7fa fda1 	bl	80128d0 <builtin_interfaces__msg__Time__fini>
 8017d8e:	4628      	mov	r0, r5
 8017d90:	bd38      	pop	{r3, r4, r5, pc}
 8017d92:	bf00      	nop

08017d94 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 8017d94:	b108      	cbz	r0, 8017d9a <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 8017d96:	f7fa bd9b 	b.w	80128d0 <builtin_interfaces__msg__Time__fini>
 8017d9a:	4770      	bx	lr

08017d9c <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 8017d9c:	f004 bbfc 	b.w	801c598 <tier4_vehicle_msgs__msg__ActuationCommand__init>

08017da0 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 8017da0:	f004 bbfe 	b.w	801c5a0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

08017da4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 8017da4:	4b04      	ldr	r3, [pc, #16]	@ (8017db8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8017da6:	681a      	ldr	r2, [r3, #0]
 8017da8:	b10a      	cbz	r2, 8017dae <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 8017daa:	4803      	ldr	r0, [pc, #12]	@ (8017db8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8017dac:	4770      	bx	lr
 8017dae:	4a03      	ldr	r2, [pc, #12]	@ (8017dbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 8017db0:	4801      	ldr	r0, [pc, #4]	@ (8017db8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8017db2:	6812      	ldr	r2, [r2, #0]
 8017db4:	601a      	str	r2, [r3, #0]
 8017db6:	4770      	bx	lr
 8017db8:	240010e8 	.word	0x240010e8
 8017dbc:	24000c84 	.word	0x24000c84

08017dc0 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 8017dc0:	f004 bbf0 	b.w	801c5a4 <tier4_vehicle_msgs__msg__ActuationStatus__init>

08017dc4 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 8017dc4:	f004 bbf2 	b.w	801c5ac <tier4_vehicle_msgs__msg__ActuationStatus__fini>

08017dc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8017dc8:	4b04      	ldr	r3, [pc, #16]	@ (8017ddc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8017dca:	681a      	ldr	r2, [r3, #0]
 8017dcc:	b10a      	cbz	r2, 8017dd2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 8017dce:	4803      	ldr	r0, [pc, #12]	@ (8017ddc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8017dd0:	4770      	bx	lr
 8017dd2:	4a03      	ldr	r2, [pc, #12]	@ (8017de0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 8017dd4:	4801      	ldr	r0, [pc, #4]	@ (8017ddc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8017dd6:	6812      	ldr	r2, [r2, #0]
 8017dd8:	601a      	str	r2, [r3, #0]
 8017dda:	4770      	bx	lr
 8017ddc:	240011a8 	.word	0x240011a8
 8017de0:	24000c84 	.word	0x24000c84

08017de4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8017de4:	b1b8      	cbz	r0, 8017e16 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 8017de6:	b538      	push	{r3, r4, r5, lr}
 8017de8:	460d      	mov	r5, r1
 8017dea:	2108      	movs	r1, #8
 8017dec:	4628      	mov	r0, r5
 8017dee:	f7f9 f801 	bl	8010df4 <ucdr_alignment>
 8017df2:	f105 0308 	add.w	r3, r5, #8
 8017df6:	2108      	movs	r1, #8
 8017df8:	f1c5 0508 	rsb	r5, r5, #8
 8017dfc:	181c      	adds	r4, r3, r0
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f7f8 fff8 	bl	8010df4 <ucdr_alignment>
 8017e04:	2108      	movs	r1, #8
 8017e06:	4408      	add	r0, r1
 8017e08:	4404      	add	r4, r0
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	f7f8 fff2 	bl	8010df4 <ucdr_alignment>
 8017e10:	4428      	add	r0, r5
 8017e12:	4420      	add	r0, r4
 8017e14:	bd38      	pop	{r3, r4, r5, pc}
 8017e16:	4770      	bx	lr

08017e18 <_ActuationCommand__cdr_deserialize>:
 8017e18:	b538      	push	{r3, r4, r5, lr}
 8017e1a:	460c      	mov	r4, r1
 8017e1c:	b171      	cbz	r1, 8017e3c <_ActuationCommand__cdr_deserialize+0x24>
 8017e1e:	4605      	mov	r5, r0
 8017e20:	f7f8 feca 	bl	8010bb8 <ucdr_deserialize_double>
 8017e24:	f104 0108 	add.w	r1, r4, #8
 8017e28:	4628      	mov	r0, r5
 8017e2a:	f7f8 fec5 	bl	8010bb8 <ucdr_deserialize_double>
 8017e2e:	f104 0110 	add.w	r1, r4, #16
 8017e32:	4628      	mov	r0, r5
 8017e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e38:	f7f8 bebe 	b.w	8010bb8 <ucdr_deserialize_double>
 8017e3c:	4608      	mov	r0, r1
 8017e3e:	bd38      	pop	{r3, r4, r5, pc}

08017e40 <_ActuationCommand__cdr_serialize>:
 8017e40:	b198      	cbz	r0, 8017e6a <_ActuationCommand__cdr_serialize+0x2a>
 8017e42:	b538      	push	{r3, r4, r5, lr}
 8017e44:	460d      	mov	r5, r1
 8017e46:	4604      	mov	r4, r0
 8017e48:	ed90 0b00 	vldr	d0, [r0]
 8017e4c:	4608      	mov	r0, r1
 8017e4e:	f7f8 fde3 	bl	8010a18 <ucdr_serialize_double>
 8017e52:	4628      	mov	r0, r5
 8017e54:	ed94 0b02 	vldr	d0, [r4, #8]
 8017e58:	f7f8 fdde 	bl	8010a18 <ucdr_serialize_double>
 8017e5c:	4628      	mov	r0, r5
 8017e5e:	ed94 0b04 	vldr	d0, [r4, #16]
 8017e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e66:	f7f8 bdd7 	b.w	8010a18 <ucdr_serialize_double>
 8017e6a:	4770      	bx	lr

08017e6c <_ActuationCommand__get_serialized_size>:
 8017e6c:	b190      	cbz	r0, 8017e94 <_ActuationCommand__get_serialized_size+0x28>
 8017e6e:	2108      	movs	r1, #8
 8017e70:	2000      	movs	r0, #0
 8017e72:	b510      	push	{r4, lr}
 8017e74:	f7f8 ffbe 	bl	8010df4 <ucdr_alignment>
 8017e78:	2108      	movs	r1, #8
 8017e7a:	1844      	adds	r4, r0, r1
 8017e7c:	4620      	mov	r0, r4
 8017e7e:	f7f8 ffb9 	bl	8010df4 <ucdr_alignment>
 8017e82:	2108      	movs	r1, #8
 8017e84:	4408      	add	r0, r1
 8017e86:	4404      	add	r4, r0
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f7f8 ffb3 	bl	8010df4 <ucdr_alignment>
 8017e8e:	3008      	adds	r0, #8
 8017e90:	4420      	add	r0, r4
 8017e92:	bd10      	pop	{r4, pc}
 8017e94:	4770      	bx	lr
 8017e96:	bf00      	nop

08017e98 <_ActuationCommand__max_serialized_size>:
 8017e98:	b538      	push	{r3, r4, r5, lr}
 8017e9a:	2108      	movs	r1, #8
 8017e9c:	2000      	movs	r0, #0
 8017e9e:	f7f8 ffa9 	bl	8010df4 <ucdr_alignment>
 8017ea2:	2108      	movs	r1, #8
 8017ea4:	1845      	adds	r5, r0, r1
 8017ea6:	4628      	mov	r0, r5
 8017ea8:	f7f8 ffa4 	bl	8010df4 <ucdr_alignment>
 8017eac:	2108      	movs	r1, #8
 8017eae:	1844      	adds	r4, r0, r1
 8017eb0:	442c      	add	r4, r5
 8017eb2:	4620      	mov	r0, r4
 8017eb4:	f7f8 ff9e 	bl	8010df4 <ucdr_alignment>
 8017eb8:	3008      	adds	r0, #8
 8017eba:	4420      	add	r0, r4
 8017ebc:	bd38      	pop	{r3, r4, r5, pc}
 8017ebe:	bf00      	nop

08017ec0 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8017ec0:	b570      	push	{r4, r5, r6, lr}
 8017ec2:	460c      	mov	r4, r1
 8017ec4:	2301      	movs	r3, #1
 8017ec6:	2108      	movs	r1, #8
 8017ec8:	f104 0508 	add.w	r5, r4, #8
 8017ecc:	7003      	strb	r3, [r0, #0]
 8017ece:	4620      	mov	r0, r4
 8017ed0:	f1c4 0408 	rsb	r4, r4, #8
 8017ed4:	f7f8 ff8e 	bl	8010df4 <ucdr_alignment>
 8017ed8:	1946      	adds	r6, r0, r5
 8017eda:	2108      	movs	r1, #8
 8017edc:	4630      	mov	r0, r6
 8017ede:	f7f8 ff89 	bl	8010df4 <ucdr_alignment>
 8017ee2:	2108      	movs	r1, #8
 8017ee4:	1845      	adds	r5, r0, r1
 8017ee6:	4435      	add	r5, r6
 8017ee8:	4628      	mov	r0, r5
 8017eea:	f7f8 ff83 	bl	8010df4 <ucdr_alignment>
 8017eee:	4420      	add	r0, r4
 8017ef0:	4428      	add	r0, r5
 8017ef2:	bd70      	pop	{r4, r5, r6, pc}

08017ef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 8017ef4:	4800      	ldr	r0, [pc, #0]	@ (8017ef8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 8017ef6:	4770      	bx	lr
 8017ef8:	240011b4 	.word	0x240011b4

08017efc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8017efc:	b1b8      	cbz	r0, 8017f2e <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 8017efe:	b538      	push	{r3, r4, r5, lr}
 8017f00:	460d      	mov	r5, r1
 8017f02:	2108      	movs	r1, #8
 8017f04:	4628      	mov	r0, r5
 8017f06:	f7f8 ff75 	bl	8010df4 <ucdr_alignment>
 8017f0a:	f105 0308 	add.w	r3, r5, #8
 8017f0e:	2108      	movs	r1, #8
 8017f10:	f1c5 0508 	rsb	r5, r5, #8
 8017f14:	181c      	adds	r4, r3, r0
 8017f16:	4620      	mov	r0, r4
 8017f18:	f7f8 ff6c 	bl	8010df4 <ucdr_alignment>
 8017f1c:	2108      	movs	r1, #8
 8017f1e:	4408      	add	r0, r1
 8017f20:	4404      	add	r4, r0
 8017f22:	4620      	mov	r0, r4
 8017f24:	f7f8 ff66 	bl	8010df4 <ucdr_alignment>
 8017f28:	4428      	add	r0, r5
 8017f2a:	4420      	add	r0, r4
 8017f2c:	bd38      	pop	{r3, r4, r5, pc}
 8017f2e:	4770      	bx	lr

08017f30 <_ActuationStatus__cdr_deserialize>:
 8017f30:	b538      	push	{r3, r4, r5, lr}
 8017f32:	460c      	mov	r4, r1
 8017f34:	b171      	cbz	r1, 8017f54 <_ActuationStatus__cdr_deserialize+0x24>
 8017f36:	4605      	mov	r5, r0
 8017f38:	f7f8 fe3e 	bl	8010bb8 <ucdr_deserialize_double>
 8017f3c:	f104 0108 	add.w	r1, r4, #8
 8017f40:	4628      	mov	r0, r5
 8017f42:	f7f8 fe39 	bl	8010bb8 <ucdr_deserialize_double>
 8017f46:	f104 0110 	add.w	r1, r4, #16
 8017f4a:	4628      	mov	r0, r5
 8017f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f50:	f7f8 be32 	b.w	8010bb8 <ucdr_deserialize_double>
 8017f54:	4608      	mov	r0, r1
 8017f56:	bd38      	pop	{r3, r4, r5, pc}

08017f58 <_ActuationStatus__cdr_serialize>:
 8017f58:	b198      	cbz	r0, 8017f82 <_ActuationStatus__cdr_serialize+0x2a>
 8017f5a:	b538      	push	{r3, r4, r5, lr}
 8017f5c:	460d      	mov	r5, r1
 8017f5e:	4604      	mov	r4, r0
 8017f60:	ed90 0b00 	vldr	d0, [r0]
 8017f64:	4608      	mov	r0, r1
 8017f66:	f7f8 fd57 	bl	8010a18 <ucdr_serialize_double>
 8017f6a:	4628      	mov	r0, r5
 8017f6c:	ed94 0b02 	vldr	d0, [r4, #8]
 8017f70:	f7f8 fd52 	bl	8010a18 <ucdr_serialize_double>
 8017f74:	4628      	mov	r0, r5
 8017f76:	ed94 0b04 	vldr	d0, [r4, #16]
 8017f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f7e:	f7f8 bd4b 	b.w	8010a18 <ucdr_serialize_double>
 8017f82:	4770      	bx	lr

08017f84 <_ActuationStatus__get_serialized_size>:
 8017f84:	b190      	cbz	r0, 8017fac <_ActuationStatus__get_serialized_size+0x28>
 8017f86:	2108      	movs	r1, #8
 8017f88:	2000      	movs	r0, #0
 8017f8a:	b510      	push	{r4, lr}
 8017f8c:	f7f8 ff32 	bl	8010df4 <ucdr_alignment>
 8017f90:	2108      	movs	r1, #8
 8017f92:	1844      	adds	r4, r0, r1
 8017f94:	4620      	mov	r0, r4
 8017f96:	f7f8 ff2d 	bl	8010df4 <ucdr_alignment>
 8017f9a:	2108      	movs	r1, #8
 8017f9c:	4408      	add	r0, r1
 8017f9e:	4404      	add	r4, r0
 8017fa0:	4620      	mov	r0, r4
 8017fa2:	f7f8 ff27 	bl	8010df4 <ucdr_alignment>
 8017fa6:	3008      	adds	r0, #8
 8017fa8:	4420      	add	r0, r4
 8017faa:	bd10      	pop	{r4, pc}
 8017fac:	4770      	bx	lr
 8017fae:	bf00      	nop

08017fb0 <_ActuationStatus__max_serialized_size>:
 8017fb0:	b538      	push	{r3, r4, r5, lr}
 8017fb2:	2108      	movs	r1, #8
 8017fb4:	2000      	movs	r0, #0
 8017fb6:	f7f8 ff1d 	bl	8010df4 <ucdr_alignment>
 8017fba:	2108      	movs	r1, #8
 8017fbc:	1845      	adds	r5, r0, r1
 8017fbe:	4628      	mov	r0, r5
 8017fc0:	f7f8 ff18 	bl	8010df4 <ucdr_alignment>
 8017fc4:	2108      	movs	r1, #8
 8017fc6:	1844      	adds	r4, r0, r1
 8017fc8:	442c      	add	r4, r5
 8017fca:	4620      	mov	r0, r4
 8017fcc:	f7f8 ff12 	bl	8010df4 <ucdr_alignment>
 8017fd0:	3008      	adds	r0, #8
 8017fd2:	4420      	add	r0, r4
 8017fd4:	bd38      	pop	{r3, r4, r5, pc}
 8017fd6:	bf00      	nop

08017fd8 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8017fd8:	b570      	push	{r4, r5, r6, lr}
 8017fda:	460c      	mov	r4, r1
 8017fdc:	2301      	movs	r3, #1
 8017fde:	2108      	movs	r1, #8
 8017fe0:	f104 0508 	add.w	r5, r4, #8
 8017fe4:	7003      	strb	r3, [r0, #0]
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	f1c4 0408 	rsb	r4, r4, #8
 8017fec:	f7f8 ff02 	bl	8010df4 <ucdr_alignment>
 8017ff0:	1946      	adds	r6, r0, r5
 8017ff2:	2108      	movs	r1, #8
 8017ff4:	4630      	mov	r0, r6
 8017ff6:	f7f8 fefd 	bl	8010df4 <ucdr_alignment>
 8017ffa:	2108      	movs	r1, #8
 8017ffc:	1845      	adds	r5, r0, r1
 8017ffe:	4435      	add	r5, r6
 8018000:	4628      	mov	r0, r5
 8018002:	f7f8 fef7 	bl	8010df4 <ucdr_alignment>
 8018006:	4420      	add	r0, r4
 8018008:	4428      	add	r0, r5
 801800a:	bd70      	pop	{r4, r5, r6, pc}

0801800c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801800c:	4800      	ldr	r0, [pc, #0]	@ (8018010 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 801800e:	4770      	bx	lr
 8018010:	240011dc 	.word	0x240011dc

08018014 <ucdr_serialize_endian_array_char>:
 8018014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018018:	4619      	mov	r1, r3
 801801a:	461f      	mov	r7, r3
 801801c:	4605      	mov	r5, r0
 801801e:	4690      	mov	r8, r2
 8018020:	f7f8 fe90 	bl	8010d44 <ucdr_check_buffer_available_for>
 8018024:	b9e0      	cbnz	r0, 8018060 <ucdr_serialize_endian_array_char+0x4c>
 8018026:	463e      	mov	r6, r7
 8018028:	e00b      	b.n	8018042 <ucdr_serialize_endian_array_char+0x2e>
 801802a:	4441      	add	r1, r8
 801802c:	68a8      	ldr	r0, [r5, #8]
 801802e:	4622      	mov	r2, r4
 8018030:	1b36      	subs	r6, r6, r4
 8018032:	f005 fe16 	bl	801dc62 <memcpy>
 8018036:	68ab      	ldr	r3, [r5, #8]
 8018038:	6928      	ldr	r0, [r5, #16]
 801803a:	4423      	add	r3, r4
 801803c:	4420      	add	r0, r4
 801803e:	60ab      	str	r3, [r5, #8]
 8018040:	6128      	str	r0, [r5, #16]
 8018042:	4631      	mov	r1, r6
 8018044:	2201      	movs	r2, #1
 8018046:	4628      	mov	r0, r5
 8018048:	f7f8 ff06 	bl	8010e58 <ucdr_check_final_buffer_behavior_array>
 801804c:	1bb9      	subs	r1, r7, r6
 801804e:	4604      	mov	r4, r0
 8018050:	2800      	cmp	r0, #0
 8018052:	d1ea      	bne.n	801802a <ucdr_serialize_endian_array_char+0x16>
 8018054:	2301      	movs	r3, #1
 8018056:	7da8      	ldrb	r0, [r5, #22]
 8018058:	756b      	strb	r3, [r5, #21]
 801805a:	4058      	eors	r0, r3
 801805c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018060:	463a      	mov	r2, r7
 8018062:	4641      	mov	r1, r8
 8018064:	68a8      	ldr	r0, [r5, #8]
 8018066:	f005 fdfc 	bl	801dc62 <memcpy>
 801806a:	68aa      	ldr	r2, [r5, #8]
 801806c:	692b      	ldr	r3, [r5, #16]
 801806e:	443a      	add	r2, r7
 8018070:	443b      	add	r3, r7
 8018072:	60aa      	str	r2, [r5, #8]
 8018074:	612b      	str	r3, [r5, #16]
 8018076:	e7ed      	b.n	8018054 <ucdr_serialize_endian_array_char+0x40>

08018078 <ucdr_deserialize_endian_array_char>:
 8018078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801807c:	4619      	mov	r1, r3
 801807e:	461f      	mov	r7, r3
 8018080:	4605      	mov	r5, r0
 8018082:	4690      	mov	r8, r2
 8018084:	f7f8 fe5e 	bl	8010d44 <ucdr_check_buffer_available_for>
 8018088:	b9e8      	cbnz	r0, 80180c6 <ucdr_deserialize_endian_array_char+0x4e>
 801808a:	463e      	mov	r6, r7
 801808c:	e00c      	b.n	80180a8 <ucdr_deserialize_endian_array_char+0x30>
 801808e:	eb08 0003 	add.w	r0, r8, r3
 8018092:	68a9      	ldr	r1, [r5, #8]
 8018094:	4622      	mov	r2, r4
 8018096:	1b36      	subs	r6, r6, r4
 8018098:	f005 fde3 	bl	801dc62 <memcpy>
 801809c:	68ab      	ldr	r3, [r5, #8]
 801809e:	6928      	ldr	r0, [r5, #16]
 80180a0:	4423      	add	r3, r4
 80180a2:	4420      	add	r0, r4
 80180a4:	60ab      	str	r3, [r5, #8]
 80180a6:	6128      	str	r0, [r5, #16]
 80180a8:	4631      	mov	r1, r6
 80180aa:	2201      	movs	r2, #1
 80180ac:	4628      	mov	r0, r5
 80180ae:	f7f8 fed3 	bl	8010e58 <ucdr_check_final_buffer_behavior_array>
 80180b2:	1bbb      	subs	r3, r7, r6
 80180b4:	4604      	mov	r4, r0
 80180b6:	2800      	cmp	r0, #0
 80180b8:	d1e9      	bne.n	801808e <ucdr_deserialize_endian_array_char+0x16>
 80180ba:	2301      	movs	r3, #1
 80180bc:	7da8      	ldrb	r0, [r5, #22]
 80180be:	756b      	strb	r3, [r5, #21]
 80180c0:	4058      	eors	r0, r3
 80180c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180c6:	463a      	mov	r2, r7
 80180c8:	68a9      	ldr	r1, [r5, #8]
 80180ca:	4640      	mov	r0, r8
 80180cc:	f005 fdc9 	bl	801dc62 <memcpy>
 80180d0:	68aa      	ldr	r2, [r5, #8]
 80180d2:	692b      	ldr	r3, [r5, #16]
 80180d4:	443a      	add	r2, r7
 80180d6:	443b      	add	r3, r7
 80180d8:	60aa      	str	r2, [r5, #8]
 80180da:	612b      	str	r3, [r5, #16]
 80180dc:	e7ed      	b.n	80180ba <ucdr_deserialize_endian_array_char+0x42>
 80180de:	bf00      	nop

080180e0 <ucdr_serialize_array_uint8_t>:
 80180e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180e4:	4688      	mov	r8, r1
 80180e6:	4611      	mov	r1, r2
 80180e8:	4617      	mov	r7, r2
 80180ea:	4605      	mov	r5, r0
 80180ec:	f7f8 fe2a 	bl	8010d44 <ucdr_check_buffer_available_for>
 80180f0:	b9e0      	cbnz	r0, 801812c <ucdr_serialize_array_uint8_t+0x4c>
 80180f2:	463e      	mov	r6, r7
 80180f4:	e00b      	b.n	801810e <ucdr_serialize_array_uint8_t+0x2e>
 80180f6:	4441      	add	r1, r8
 80180f8:	68a8      	ldr	r0, [r5, #8]
 80180fa:	4622      	mov	r2, r4
 80180fc:	1b36      	subs	r6, r6, r4
 80180fe:	f005 fdb0 	bl	801dc62 <memcpy>
 8018102:	68ab      	ldr	r3, [r5, #8]
 8018104:	6928      	ldr	r0, [r5, #16]
 8018106:	4423      	add	r3, r4
 8018108:	4420      	add	r0, r4
 801810a:	60ab      	str	r3, [r5, #8]
 801810c:	6128      	str	r0, [r5, #16]
 801810e:	4631      	mov	r1, r6
 8018110:	2201      	movs	r2, #1
 8018112:	4628      	mov	r0, r5
 8018114:	f7f8 fea0 	bl	8010e58 <ucdr_check_final_buffer_behavior_array>
 8018118:	1bb9      	subs	r1, r7, r6
 801811a:	4604      	mov	r4, r0
 801811c:	2800      	cmp	r0, #0
 801811e:	d1ea      	bne.n	80180f6 <ucdr_serialize_array_uint8_t+0x16>
 8018120:	2301      	movs	r3, #1
 8018122:	7da8      	ldrb	r0, [r5, #22]
 8018124:	756b      	strb	r3, [r5, #21]
 8018126:	4058      	eors	r0, r3
 8018128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801812c:	463a      	mov	r2, r7
 801812e:	4641      	mov	r1, r8
 8018130:	68a8      	ldr	r0, [r5, #8]
 8018132:	f005 fd96 	bl	801dc62 <memcpy>
 8018136:	68aa      	ldr	r2, [r5, #8]
 8018138:	692b      	ldr	r3, [r5, #16]
 801813a:	443a      	add	r2, r7
 801813c:	443b      	add	r3, r7
 801813e:	60aa      	str	r2, [r5, #8]
 8018140:	612b      	str	r3, [r5, #16]
 8018142:	e7ed      	b.n	8018120 <ucdr_serialize_array_uint8_t+0x40>

08018144 <ucdr_serialize_endian_array_uint8_t>:
 8018144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018148:	4619      	mov	r1, r3
 801814a:	461f      	mov	r7, r3
 801814c:	4605      	mov	r5, r0
 801814e:	4690      	mov	r8, r2
 8018150:	f7f8 fdf8 	bl	8010d44 <ucdr_check_buffer_available_for>
 8018154:	b9e0      	cbnz	r0, 8018190 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8018156:	463e      	mov	r6, r7
 8018158:	e00b      	b.n	8018172 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801815a:	4441      	add	r1, r8
 801815c:	68a8      	ldr	r0, [r5, #8]
 801815e:	4622      	mov	r2, r4
 8018160:	1b36      	subs	r6, r6, r4
 8018162:	f005 fd7e 	bl	801dc62 <memcpy>
 8018166:	68ab      	ldr	r3, [r5, #8]
 8018168:	6928      	ldr	r0, [r5, #16]
 801816a:	4423      	add	r3, r4
 801816c:	4420      	add	r0, r4
 801816e:	60ab      	str	r3, [r5, #8]
 8018170:	6128      	str	r0, [r5, #16]
 8018172:	4631      	mov	r1, r6
 8018174:	2201      	movs	r2, #1
 8018176:	4628      	mov	r0, r5
 8018178:	f7f8 fe6e 	bl	8010e58 <ucdr_check_final_buffer_behavior_array>
 801817c:	1bb9      	subs	r1, r7, r6
 801817e:	4604      	mov	r4, r0
 8018180:	2800      	cmp	r0, #0
 8018182:	d1ea      	bne.n	801815a <ucdr_serialize_endian_array_uint8_t+0x16>
 8018184:	2301      	movs	r3, #1
 8018186:	7da8      	ldrb	r0, [r5, #22]
 8018188:	756b      	strb	r3, [r5, #21]
 801818a:	4058      	eors	r0, r3
 801818c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018190:	463a      	mov	r2, r7
 8018192:	4641      	mov	r1, r8
 8018194:	68a8      	ldr	r0, [r5, #8]
 8018196:	f005 fd64 	bl	801dc62 <memcpy>
 801819a:	68aa      	ldr	r2, [r5, #8]
 801819c:	692b      	ldr	r3, [r5, #16]
 801819e:	443a      	add	r2, r7
 80181a0:	443b      	add	r3, r7
 80181a2:	60aa      	str	r2, [r5, #8]
 80181a4:	612b      	str	r3, [r5, #16]
 80181a6:	e7ed      	b.n	8018184 <ucdr_serialize_endian_array_uint8_t+0x40>

080181a8 <ucdr_deserialize_array_uint8_t>:
 80181a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181ac:	4688      	mov	r8, r1
 80181ae:	4611      	mov	r1, r2
 80181b0:	4617      	mov	r7, r2
 80181b2:	4605      	mov	r5, r0
 80181b4:	f7f8 fdc6 	bl	8010d44 <ucdr_check_buffer_available_for>
 80181b8:	b9e8      	cbnz	r0, 80181f6 <ucdr_deserialize_array_uint8_t+0x4e>
 80181ba:	463e      	mov	r6, r7
 80181bc:	e00c      	b.n	80181d8 <ucdr_deserialize_array_uint8_t+0x30>
 80181be:	eb08 0003 	add.w	r0, r8, r3
 80181c2:	68a9      	ldr	r1, [r5, #8]
 80181c4:	4622      	mov	r2, r4
 80181c6:	1b36      	subs	r6, r6, r4
 80181c8:	f005 fd4b 	bl	801dc62 <memcpy>
 80181cc:	68ab      	ldr	r3, [r5, #8]
 80181ce:	6928      	ldr	r0, [r5, #16]
 80181d0:	4423      	add	r3, r4
 80181d2:	4420      	add	r0, r4
 80181d4:	60ab      	str	r3, [r5, #8]
 80181d6:	6128      	str	r0, [r5, #16]
 80181d8:	4631      	mov	r1, r6
 80181da:	2201      	movs	r2, #1
 80181dc:	4628      	mov	r0, r5
 80181de:	f7f8 fe3b 	bl	8010e58 <ucdr_check_final_buffer_behavior_array>
 80181e2:	1bbb      	subs	r3, r7, r6
 80181e4:	4604      	mov	r4, r0
 80181e6:	2800      	cmp	r0, #0
 80181e8:	d1e9      	bne.n	80181be <ucdr_deserialize_array_uint8_t+0x16>
 80181ea:	2301      	movs	r3, #1
 80181ec:	7da8      	ldrb	r0, [r5, #22]
 80181ee:	756b      	strb	r3, [r5, #21]
 80181f0:	4058      	eors	r0, r3
 80181f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181f6:	463a      	mov	r2, r7
 80181f8:	68a9      	ldr	r1, [r5, #8]
 80181fa:	4640      	mov	r0, r8
 80181fc:	f005 fd31 	bl	801dc62 <memcpy>
 8018200:	68aa      	ldr	r2, [r5, #8]
 8018202:	692b      	ldr	r3, [r5, #16]
 8018204:	443a      	add	r2, r7
 8018206:	443b      	add	r3, r7
 8018208:	60aa      	str	r2, [r5, #8]
 801820a:	612b      	str	r3, [r5, #16]
 801820c:	e7ed      	b.n	80181ea <ucdr_deserialize_array_uint8_t+0x42>
 801820e:	bf00      	nop

08018210 <ucdr_deserialize_endian_array_uint8_t>:
 8018210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018214:	4619      	mov	r1, r3
 8018216:	461f      	mov	r7, r3
 8018218:	4605      	mov	r5, r0
 801821a:	4690      	mov	r8, r2
 801821c:	f7f8 fd92 	bl	8010d44 <ucdr_check_buffer_available_for>
 8018220:	b9e8      	cbnz	r0, 801825e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8018222:	463e      	mov	r6, r7
 8018224:	e00c      	b.n	8018240 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8018226:	eb08 0003 	add.w	r0, r8, r3
 801822a:	68a9      	ldr	r1, [r5, #8]
 801822c:	4622      	mov	r2, r4
 801822e:	1b36      	subs	r6, r6, r4
 8018230:	f005 fd17 	bl	801dc62 <memcpy>
 8018234:	68ab      	ldr	r3, [r5, #8]
 8018236:	6928      	ldr	r0, [r5, #16]
 8018238:	4423      	add	r3, r4
 801823a:	4420      	add	r0, r4
 801823c:	60ab      	str	r3, [r5, #8]
 801823e:	6128      	str	r0, [r5, #16]
 8018240:	4631      	mov	r1, r6
 8018242:	2201      	movs	r2, #1
 8018244:	4628      	mov	r0, r5
 8018246:	f7f8 fe07 	bl	8010e58 <ucdr_check_final_buffer_behavior_array>
 801824a:	1bbb      	subs	r3, r7, r6
 801824c:	4604      	mov	r4, r0
 801824e:	2800      	cmp	r0, #0
 8018250:	d1e9      	bne.n	8018226 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8018252:	2301      	movs	r3, #1
 8018254:	7da8      	ldrb	r0, [r5, #22]
 8018256:	756b      	strb	r3, [r5, #21]
 8018258:	4058      	eors	r0, r3
 801825a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801825e:	463a      	mov	r2, r7
 8018260:	68a9      	ldr	r1, [r5, #8]
 8018262:	4640      	mov	r0, r8
 8018264:	f005 fcfd 	bl	801dc62 <memcpy>
 8018268:	68aa      	ldr	r2, [r5, #8]
 801826a:	692b      	ldr	r3, [r5, #16]
 801826c:	443a      	add	r2, r7
 801826e:	443b      	add	r3, r7
 8018270:	60aa      	str	r2, [r5, #8]
 8018272:	612b      	str	r3, [r5, #16]
 8018274:	e7ed      	b.n	8018252 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8018276:	bf00      	nop

08018278 <uxr_buffer_delete_entity>:
 8018278:	b510      	push	{r4, lr}
 801827a:	2300      	movs	r3, #0
 801827c:	b08e      	sub	sp, #56	@ 0x38
 801827e:	4604      	mov	r4, r0
 8018280:	9103      	str	r1, [sp, #12]
 8018282:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8018286:	2303      	movs	r3, #3
 8018288:	2204      	movs	r2, #4
 801828a:	9300      	str	r3, [sp, #0]
 801828c:	ab06      	add	r3, sp, #24
 801828e:	f001 fb3f 	bl	8019910 <uxr_prepare_stream_to_write_submessage>
 8018292:	b918      	cbnz	r0, 801829c <uxr_buffer_delete_entity+0x24>
 8018294:	4604      	mov	r4, r0
 8018296:	4620      	mov	r0, r4
 8018298:	b00e      	add	sp, #56	@ 0x38
 801829a:	bd10      	pop	{r4, pc}
 801829c:	9902      	ldr	r1, [sp, #8]
 801829e:	aa05      	add	r2, sp, #20
 80182a0:	4620      	mov	r0, r4
 80182a2:	f001 fc71 	bl	8019b88 <uxr_init_base_object_request>
 80182a6:	4604      	mov	r4, r0
 80182a8:	a905      	add	r1, sp, #20
 80182aa:	a806      	add	r0, sp, #24
 80182ac:	f003 f9ee 	bl	801b68c <uxr_serialize_DELETE_Payload>
 80182b0:	4620      	mov	r0, r4
 80182b2:	b00e      	add	sp, #56	@ 0x38
 80182b4:	bd10      	pop	{r4, pc}
 80182b6:	bf00      	nop

080182b8 <uxr_common_create_entity>:
 80182b8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80182bc:	b510      	push	{r4, lr}
 80182be:	f1bc 0f01 	cmp.w	ip, #1
 80182c2:	b08c      	sub	sp, #48	@ 0x30
 80182c4:	4604      	mov	r4, r0
 80182c6:	9202      	str	r2, [sp, #8]
 80182c8:	bf0c      	ite	eq
 80182ca:	f003 0201 	andeq.w	r2, r3, #1
 80182ce:	2200      	movne	r2, #0
 80182d0:	330e      	adds	r3, #14
 80182d2:	9103      	str	r1, [sp, #12]
 80182d4:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80182d8:	441a      	add	r2, r3
 80182da:	ab04      	add	r3, sp, #16
 80182dc:	9101      	str	r1, [sp, #4]
 80182de:	2101      	movs	r1, #1
 80182e0:	b292      	uxth	r2, r2
 80182e2:	9100      	str	r1, [sp, #0]
 80182e4:	9903      	ldr	r1, [sp, #12]
 80182e6:	f001 fb13 	bl	8019910 <uxr_prepare_stream_to_write_submessage>
 80182ea:	b918      	cbnz	r0, 80182f4 <uxr_common_create_entity+0x3c>
 80182ec:	4604      	mov	r4, r0
 80182ee:	4620      	mov	r0, r4
 80182f0:	b00c      	add	sp, #48	@ 0x30
 80182f2:	bd10      	pop	{r4, pc}
 80182f4:	9902      	ldr	r1, [sp, #8]
 80182f6:	4620      	mov	r0, r4
 80182f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80182fa:	f001 fc45 	bl	8019b88 <uxr_init_base_object_request>
 80182fe:	4604      	mov	r4, r0
 8018300:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018302:	a804      	add	r0, sp, #16
 8018304:	f003 f91c 	bl	801b540 <uxr_serialize_CREATE_Payload>
 8018308:	4620      	mov	r0, r4
 801830a:	b00c      	add	sp, #48	@ 0x30
 801830c:	bd10      	pop	{r4, pc}
 801830e:	bf00      	nop

08018310 <uxr_buffer_create_participant_bin>:
 8018310:	b570      	push	{r4, r5, r6, lr}
 8018312:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8018316:	4605      	mov	r5, r0
 8018318:	ac11      	add	r4, sp, #68	@ 0x44
 801831a:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801831e:	2303      	movs	r3, #3
 8018320:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8018324:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8018328:	7223      	strb	r3, [r4, #8]
 801832a:	2300      	movs	r3, #0
 801832c:	2201      	movs	r2, #1
 801832e:	f88d 3014 	strb.w	r3, [sp, #20]
 8018332:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8018334:	7122      	strb	r2, [r4, #4]
 8018336:	b1cb      	cbz	r3, 801836c <uxr_buffer_create_participant_bin+0x5c>
 8018338:	f88d 201c 	strb.w	r2, [sp, #28]
 801833c:	9308      	str	r3, [sp, #32]
 801833e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018342:	a915      	add	r1, sp, #84	@ 0x54
 8018344:	a809      	add	r0, sp, #36	@ 0x24
 8018346:	f7f8 fd51 	bl	8010dec <ucdr_init_buffer>
 801834a:	a905      	add	r1, sp, #20
 801834c:	a809      	add	r0, sp, #36	@ 0x24
 801834e:	f002 fce1 	bl	801ad14 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8018352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018354:	9600      	str	r6, [sp, #0]
 8018356:	4628      	mov	r0, r5
 8018358:	9401      	str	r4, [sp, #4]
 801835a:	60e3      	str	r3, [r4, #12]
 801835c:	b29b      	uxth	r3, r3
 801835e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018362:	f7ff ffa9 	bl	80182b8 <uxr_common_create_entity>
 8018366:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801836a:	bd70      	pop	{r4, r5, r6, pc}
 801836c:	f88d 301c 	strb.w	r3, [sp, #28]
 8018370:	e7e5      	b.n	801833e <uxr_buffer_create_participant_bin+0x2e>
 8018372:	bf00      	nop

08018374 <uxr_buffer_create_topic_bin>:
 8018374:	b570      	push	{r4, r5, r6, lr}
 8018376:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801837a:	4605      	mov	r5, r0
 801837c:	4618      	mov	r0, r3
 801837e:	9105      	str	r1, [sp, #20]
 8018380:	a997      	add	r1, sp, #604	@ 0x25c
 8018382:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8018386:	ac13      	add	r4, sp, #76	@ 0x4c
 8018388:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801838c:	2302      	movs	r3, #2
 801838e:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8018392:	f000 fa53 	bl	801883c <uxr_object_id_to_raw>
 8018396:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8018398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801839c:	a917      	add	r1, sp, #92	@ 0x5c
 801839e:	a80b      	add	r0, sp, #44	@ 0x2c
 80183a0:	9306      	str	r3, [sp, #24]
 80183a2:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80183a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80183a6:	2303      	movs	r3, #3
 80183a8:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80183ac:	2301      	movs	r3, #1
 80183ae:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80183b2:	2300      	movs	r3, #0
 80183b4:	f88d 301c 	strb.w	r3, [sp, #28]
 80183b8:	f7f8 fd18 	bl	8010dec <ucdr_init_buffer>
 80183bc:	a906      	add	r1, sp, #24
 80183be:	a80b      	add	r0, sp, #44	@ 0x2c
 80183c0:	f002 fcca 	bl	801ad58 <uxr_serialize_OBJK_Topic_Binary>
 80183c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183c6:	4628      	mov	r0, r5
 80183c8:	9600      	str	r6, [sp, #0]
 80183ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80183cc:	b29b      	uxth	r3, r3
 80183ce:	9401      	str	r4, [sp, #4]
 80183d0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80183d4:	f7ff ff70 	bl	80182b8 <uxr_common_create_entity>
 80183d8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80183dc:	bd70      	pop	{r4, r5, r6, pc}
 80183de:	bf00      	nop

080183e0 <uxr_buffer_create_publisher_bin>:
 80183e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183e2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80183e6:	2603      	movs	r6, #3
 80183e8:	4605      	mov	r5, r0
 80183ea:	4618      	mov	r0, r3
 80183ec:	9105      	str	r1, [sp, #20]
 80183ee:	a992      	add	r1, sp, #584	@ 0x248
 80183f0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80183f4:	ac0e      	add	r4, sp, #56	@ 0x38
 80183f6:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80183fa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80183fe:	f000 fa1d 	bl	801883c <uxr_object_id_to_raw>
 8018402:	2300      	movs	r3, #0
 8018404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018408:	a912      	add	r1, sp, #72	@ 0x48
 801840a:	a806      	add	r0, sp, #24
 801840c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8018410:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8018414:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8018418:	f7f8 fce8 	bl	8010dec <ucdr_init_buffer>
 801841c:	a993      	add	r1, sp, #588	@ 0x24c
 801841e:	a806      	add	r0, sp, #24
 8018420:	f002 fd4e 	bl	801aec0 <uxr_serialize_OBJK_Publisher_Binary>
 8018424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018426:	4628      	mov	r0, r5
 8018428:	9700      	str	r7, [sp, #0]
 801842a:	9311      	str	r3, [sp, #68]	@ 0x44
 801842c:	b29b      	uxth	r3, r3
 801842e:	9401      	str	r4, [sp, #4]
 8018430:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8018434:	f7ff ff40 	bl	80182b8 <uxr_common_create_entity>
 8018438:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801843c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801843e:	bf00      	nop

08018440 <uxr_buffer_create_subscriber_bin>:
 8018440:	b570      	push	{r4, r5, r6, lr}
 8018442:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8018446:	4605      	mov	r5, r0
 8018448:	4618      	mov	r0, r3
 801844a:	9105      	str	r1, [sp, #20]
 801844c:	a992      	add	r1, sp, #584	@ 0x248
 801844e:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8018452:	ac0e      	add	r4, sp, #56	@ 0x38
 8018454:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8018458:	2304      	movs	r3, #4
 801845a:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 801845e:	f000 f9ed 	bl	801883c <uxr_object_id_to_raw>
 8018462:	2300      	movs	r3, #0
 8018464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018468:	a912      	add	r1, sp, #72	@ 0x48
 801846a:	a806      	add	r0, sp, #24
 801846c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8018470:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8018474:	2303      	movs	r3, #3
 8018476:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801847a:	f7f8 fcb7 	bl	8010dec <ucdr_init_buffer>
 801847e:	a993      	add	r1, sp, #588	@ 0x24c
 8018480:	a806      	add	r0, sp, #24
 8018482:	f002 fdcd 	bl	801b020 <uxr_serialize_OBJK_Subscriber_Binary>
 8018486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018488:	4628      	mov	r0, r5
 801848a:	9600      	str	r6, [sp, #0]
 801848c:	9311      	str	r3, [sp, #68]	@ 0x44
 801848e:	b29b      	uxth	r3, r3
 8018490:	9401      	str	r4, [sp, #4]
 8018492:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8018496:	f7ff ff0f 	bl	80182b8 <uxr_common_create_entity>
 801849a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801849e:	bd70      	pop	{r4, r5, r6, pc}

080184a0 <uxr_buffer_create_datawriter_bin>:
 80184a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184a4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80184a8:	4606      	mov	r6, r0
 80184aa:	4618      	mov	r0, r3
 80184ac:	2703      	movs	r7, #3
 80184ae:	ac1d      	add	r4, sp, #116	@ 0x74
 80184b0:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80184b4:	9105      	str	r1, [sp, #20]
 80184b6:	a9a1      	add	r1, sp, #644	@ 0x284
 80184b8:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80184bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80184c0:	2305      	movs	r3, #5
 80184c2:	7123      	strb	r3, [r4, #4]
 80184c4:	f000 f9ba 	bl	801883c <uxr_object_id_to_raw>
 80184c8:	a90e      	add	r1, sp, #56	@ 0x38
 80184ca:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80184cc:	7227      	strb	r7, [r4, #8]
 80184ce:	f000 f9b5 	bl	801883c <uxr_object_id_to_raw>
 80184d2:	2300      	movs	r3, #0
 80184d4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80184d8:	3d00      	subs	r5, #0
 80184da:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80184de:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80184e2:	bf18      	it	ne
 80184e4:	2501      	movne	r5, #1
 80184e6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80184ea:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80184ee:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80184f2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80184f6:	2301      	movs	r3, #1
 80184f8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80184fc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8018500:	bb8a      	cbnz	r2, 8018566 <uxr_buffer_create_datawriter_bin+0xc6>
 8018502:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8018506:	f04f 0c13 	mov.w	ip, #19
 801850a:	250b      	movs	r5, #11
 801850c:	2221      	movs	r2, #33	@ 0x21
 801850e:	2111      	movs	r1, #17
 8018510:	2009      	movs	r0, #9
 8018512:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8018516:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801851a:	b923      	cbnz	r3, 8018526 <uxr_buffer_create_datawriter_bin+0x86>
 801851c:	4672      	mov	r2, lr
 801851e:	4661      	mov	r1, ip
 8018520:	4628      	mov	r0, r5
 8018522:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8018526:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801852a:	2b01      	cmp	r3, #1
 801852c:	d025      	beq.n	801857a <uxr_buffer_create_datawriter_bin+0xda>
 801852e:	2b03      	cmp	r3, #3
 8018530:	d029      	beq.n	8018586 <uxr_buffer_create_datawriter_bin+0xe6>
 8018532:	b32b      	cbz	r3, 8018580 <uxr_buffer_create_datawriter_bin+0xe0>
 8018534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018538:	a921      	add	r1, sp, #132	@ 0x84
 801853a:	a806      	add	r0, sp, #24
 801853c:	f7f8 fc56 	bl	8010dec <ucdr_init_buffer>
 8018540:	a90e      	add	r1, sp, #56	@ 0x38
 8018542:	a806      	add	r0, sp, #24
 8018544:	f002 fe1e 	bl	801b184 <uxr_serialize_OBJK_DataWriter_Binary>
 8018548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801854a:	f8cd 8000 	str.w	r8, [sp]
 801854e:	4630      	mov	r0, r6
 8018550:	9401      	str	r4, [sp, #4]
 8018552:	60e3      	str	r3, [r4, #12]
 8018554:	b29b      	uxth	r3, r3
 8018556:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801855a:	f7ff fead 	bl	80182b8 <uxr_common_create_entity>
 801855e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8018562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018566:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801856a:	f04f 0c12 	mov.w	ip, #18
 801856e:	250a      	movs	r5, #10
 8018570:	2220      	movs	r2, #32
 8018572:	2110      	movs	r1, #16
 8018574:	2008      	movs	r0, #8
 8018576:	2702      	movs	r7, #2
 8018578:	e7cd      	b.n	8018516 <uxr_buffer_create_datawriter_bin+0x76>
 801857a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801857e:	e7d9      	b.n	8018534 <uxr_buffer_create_datawriter_bin+0x94>
 8018580:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8018584:	e7d6      	b.n	8018534 <uxr_buffer_create_datawriter_bin+0x94>
 8018586:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801858a:	e7d3      	b.n	8018534 <uxr_buffer_create_datawriter_bin+0x94>

0801858c <uxr_buffer_create_datareader_bin>:
 801858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018590:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8018594:	4606      	mov	r6, r0
 8018596:	4618      	mov	r0, r3
 8018598:	2703      	movs	r7, #3
 801859a:	ac1f      	add	r4, sp, #124	@ 0x7c
 801859c:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80185a0:	9105      	str	r1, [sp, #20]
 80185a2:	a9a3      	add	r1, sp, #652	@ 0x28c
 80185a4:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80185a8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80185ac:	2306      	movs	r3, #6
 80185ae:	7123      	strb	r3, [r4, #4]
 80185b0:	f000 f944 	bl	801883c <uxr_object_id_to_raw>
 80185b4:	a90e      	add	r1, sp, #56	@ 0x38
 80185b6:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80185b8:	7227      	strb	r7, [r4, #8]
 80185ba:	f000 f93f 	bl	801883c <uxr_object_id_to_raw>
 80185be:	2300      	movs	r3, #0
 80185c0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80185c4:	3d00      	subs	r5, #0
 80185c6:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 80185ca:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80185ce:	bf18      	it	ne
 80185d0:	2501      	movne	r5, #1
 80185d2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80185d6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80185da:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80185de:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80185e2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80185e6:	2301      	movs	r3, #1
 80185e8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80185ec:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80185f0:	bb8a      	cbnz	r2, 8018656 <uxr_buffer_create_datareader_bin+0xca>
 80185f2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80185f6:	f04f 0c13 	mov.w	ip, #19
 80185fa:	250b      	movs	r5, #11
 80185fc:	2221      	movs	r2, #33	@ 0x21
 80185fe:	2111      	movs	r1, #17
 8018600:	2009      	movs	r0, #9
 8018602:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8018606:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801860a:	b923      	cbnz	r3, 8018616 <uxr_buffer_create_datareader_bin+0x8a>
 801860c:	4672      	mov	r2, lr
 801860e:	4661      	mov	r1, ip
 8018610:	4628      	mov	r0, r5
 8018612:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8018616:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801861a:	2b01      	cmp	r3, #1
 801861c:	d025      	beq.n	801866a <uxr_buffer_create_datareader_bin+0xde>
 801861e:	2b03      	cmp	r3, #3
 8018620:	d029      	beq.n	8018676 <uxr_buffer_create_datareader_bin+0xea>
 8018622:	b32b      	cbz	r3, 8018670 <uxr_buffer_create_datareader_bin+0xe4>
 8018624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018628:	a923      	add	r1, sp, #140	@ 0x8c
 801862a:	a806      	add	r0, sp, #24
 801862c:	f7f8 fbde 	bl	8010dec <ucdr_init_buffer>
 8018630:	a90e      	add	r1, sp, #56	@ 0x38
 8018632:	a806      	add	r0, sp, #24
 8018634:	f002 fd6a 	bl	801b10c <uxr_serialize_OBJK_DataReader_Binary>
 8018638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801863a:	f8cd 8000 	str.w	r8, [sp]
 801863e:	4630      	mov	r0, r6
 8018640:	9401      	str	r4, [sp, #4]
 8018642:	60e3      	str	r3, [r4, #12]
 8018644:	b29b      	uxth	r3, r3
 8018646:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801864a:	f7ff fe35 	bl	80182b8 <uxr_common_create_entity>
 801864e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8018652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018656:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801865a:	f04f 0c12 	mov.w	ip, #18
 801865e:	250a      	movs	r5, #10
 8018660:	2220      	movs	r2, #32
 8018662:	2110      	movs	r1, #16
 8018664:	2008      	movs	r0, #8
 8018666:	2702      	movs	r7, #2
 8018668:	e7cd      	b.n	8018606 <uxr_buffer_create_datareader_bin+0x7a>
 801866a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801866e:	e7d9      	b.n	8018624 <uxr_buffer_create_datareader_bin+0x98>
 8018670:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8018674:	e7d6      	b.n	8018624 <uxr_buffer_create_datareader_bin+0x98>
 8018676:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801867a:	e7d3      	b.n	8018624 <uxr_buffer_create_datareader_bin+0x98>

0801867c <get_custom_error>:
 801867c:	4b01      	ldr	r3, [pc, #4]	@ (8018684 <get_custom_error+0x8>)
 801867e:	7818      	ldrb	r0, [r3, #0]
 8018680:	4770      	bx	lr
 8018682:	bf00      	nop
 8018684:	24069644 	.word	0x24069644

08018688 <recv_custom_msg>:
 8018688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801868c:	4693      	mov	fp, r2
 801868e:	b089      	sub	sp, #36	@ 0x24
 8018690:	2200      	movs	r2, #0
 8018692:	4604      	mov	r4, r0
 8018694:	468a      	mov	sl, r1
 8018696:	9305      	str	r3, [sp, #20]
 8018698:	f88d 201e 	strb.w	r2, [sp, #30]
 801869c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80186a0:	b322      	cbz	r2, 80186ec <recv_custom_msg+0x64>
 80186a2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80186a6:	f10d 081f 	add.w	r8, sp, #31
 80186aa:	af05      	add	r7, sp, #20
 80186ac:	f10d 061e 	add.w	r6, sp, #30
 80186b0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80186b4:	e002      	b.n	80186bc <recv_custom_msg+0x34>
 80186b6:	9b05      	ldr	r3, [sp, #20]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	dd0f      	ble.n	80186dc <recv_custom_msg+0x54>
 80186bc:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80186c0:	4623      	mov	r3, r4
 80186c2:	4622      	mov	r2, r4
 80186c4:	4648      	mov	r0, r9
 80186c6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80186ca:	e9cd 5600 	strd	r5, r6, [sp]
 80186ce:	f001 fc71 	bl	8019fb4 <uxr_read_framed_msg>
 80186d2:	2800      	cmp	r0, #0
 80186d4:	d0ef      	beq.n	80186b6 <recv_custom_msg+0x2e>
 80186d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80186da:	b1b3      	cbz	r3, 801870a <recv_custom_msg+0x82>
 80186dc:	4b0f      	ldr	r3, [pc, #60]	@ (801871c <recv_custom_msg+0x94>)
 80186de:	2000      	movs	r0, #0
 80186e0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80186e4:	701a      	strb	r2, [r3, #0]
 80186e6:	b009      	add	sp, #36	@ 0x24
 80186e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186ec:	f10d 021f 	add.w	r2, sp, #31
 80186f0:	4601      	mov	r1, r0
 80186f2:	9200      	str	r2, [sp, #0]
 80186f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80186f8:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80186fc:	47a8      	blx	r5
 80186fe:	2800      	cmp	r0, #0
 8018700:	d0ec      	beq.n	80186dc <recv_custom_msg+0x54>
 8018702:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d1e8      	bne.n	80186dc <recv_custom_msg+0x54>
 801870a:	f8cb 0000 	str.w	r0, [fp]
 801870e:	2001      	movs	r0, #1
 8018710:	f8ca 4000 	str.w	r4, [sl]
 8018714:	b009      	add	sp, #36	@ 0x24
 8018716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801871a:	bf00      	nop
 801871c:	24069644 	.word	0x24069644

08018720 <send_custom_msg>:
 8018720:	b530      	push	{r4, r5, lr}
 8018722:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8018726:	b087      	sub	sp, #28
 8018728:	4614      	mov	r4, r2
 801872a:	b995      	cbnz	r5, 8018752 <send_custom_msg+0x32>
 801872c:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8018730:	f10d 0317 	add.w	r3, sp, #23
 8018734:	47a8      	blx	r5
 8018736:	1e03      	subs	r3, r0, #0
 8018738:	bf18      	it	ne
 801873a:	2301      	movne	r3, #1
 801873c:	42a0      	cmp	r0, r4
 801873e:	bf18      	it	ne
 8018740:	2300      	movne	r3, #0
 8018742:	b91b      	cbnz	r3, 801874c <send_custom_msg+0x2c>
 8018744:	4a0a      	ldr	r2, [pc, #40]	@ (8018770 <send_custom_msg+0x50>)
 8018746:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801874a:	7011      	strb	r1, [r2, #0]
 801874c:	4618      	mov	r0, r3
 801874e:	b007      	add	sp, #28
 8018750:	bd30      	pop	{r4, r5, pc}
 8018752:	460b      	mov	r3, r1
 8018754:	2200      	movs	r2, #0
 8018756:	f10d 0117 	add.w	r1, sp, #23
 801875a:	9400      	str	r4, [sp, #0]
 801875c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8018760:	4602      	mov	r2, r0
 8018762:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8018766:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801876a:	f001 fa45 	bl	8019bf8 <uxr_write_framed_msg>
 801876e:	e7e2      	b.n	8018736 <send_custom_msg+0x16>
 8018770:	24069644 	.word	0x24069644

08018774 <uxr_set_custom_transport_callbacks>:
 8018774:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8018778:	9901      	ldr	r1, [sp, #4]
 801877a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801877e:	9b00      	ldr	r3, [sp, #0]
 8018780:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8018784:	4770      	bx	lr
 8018786:	bf00      	nop

08018788 <uxr_init_custom_transport>:
 8018788:	b538      	push	{r3, r4, r5, lr}
 801878a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801878e:	b303      	cbz	r3, 80187d2 <uxr_init_custom_transport+0x4a>
 8018790:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8018794:	4604      	mov	r4, r0
 8018796:	b1e2      	cbz	r2, 80187d2 <uxr_init_custom_transport+0x4a>
 8018798:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801879c:	b1ca      	cbz	r2, 80187d2 <uxr_init_custom_transport+0x4a>
 801879e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80187a2:	b1b2      	cbz	r2, 80187d2 <uxr_init_custom_transport+0x4a>
 80187a4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80187a8:	4798      	blx	r3
 80187aa:	4605      	mov	r5, r0
 80187ac:	b188      	cbz	r0, 80187d2 <uxr_init_custom_transport+0x4a>
 80187ae:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80187b2:	b98b      	cbnz	r3, 80187d8 <uxr_init_custom_transport+0x50>
 80187b4:	4b0b      	ldr	r3, [pc, #44]	@ (80187e4 <uxr_init_custom_transport+0x5c>)
 80187b6:	4628      	mov	r0, r5
 80187b8:	490b      	ldr	r1, [pc, #44]	@ (80187e8 <uxr_init_custom_transport+0x60>)
 80187ba:	4a0c      	ldr	r2, [pc, #48]	@ (80187ec <uxr_init_custom_transport+0x64>)
 80187bc:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80187c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80187c4:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80187c8:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80187cc:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80187d0:	bd38      	pop	{r3, r4, r5, pc}
 80187d2:	2500      	movs	r5, #0
 80187d4:	4628      	mov	r0, r5
 80187d6:	bd38      	pop	{r3, r4, r5, pc}
 80187d8:	2100      	movs	r1, #0
 80187da:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80187de:	f001 fa05 	bl	8019bec <uxr_init_framing_io>
 80187e2:	e7e7      	b.n	80187b4 <uxr_init_custom_transport+0x2c>
 80187e4:	08018689 	.word	0x08018689
 80187e8:	08018721 	.word	0x08018721
 80187ec:	0801867d 	.word	0x0801867d

080187f0 <uxr_close_custom_transport>:
 80187f0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80187f4:	4718      	bx	r3
 80187f6:	bf00      	nop

080187f8 <uxr_object_id>:
 80187f8:	b082      	sub	sp, #8
 80187fa:	2300      	movs	r3, #0
 80187fc:	f88d 1006 	strb.w	r1, [sp, #6]
 8018800:	f360 030f 	bfi	r3, r0, #0, #16
 8018804:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018808:	f362 431f 	bfi	r3, r2, #16, #16
 801880c:	4618      	mov	r0, r3
 801880e:	b002      	add	sp, #8
 8018810:	4770      	bx	lr
 8018812:	bf00      	nop

08018814 <uxr_object_id_from_raw>:
 8018814:	7843      	ldrb	r3, [r0, #1]
 8018816:	b082      	sub	sp, #8
 8018818:	7801      	ldrb	r1, [r0, #0]
 801881a:	2000      	movs	r0, #0
 801881c:	091a      	lsrs	r2, r3, #4
 801881e:	f003 030f 	and.w	r3, r3, #15
 8018822:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8018826:	f88d 3006 	strb.w	r3, [sp, #6]
 801882a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801882e:	f362 000f 	bfi	r0, r2, #0, #16
 8018832:	f363 401f 	bfi	r0, r3, #16, #16
 8018836:	b002      	add	sp, #8
 8018838:	4770      	bx	lr
 801883a:	bf00      	nop

0801883c <uxr_object_id_to_raw>:
 801883c:	4602      	mov	r2, r0
 801883e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8018842:	b082      	sub	sp, #8
 8018844:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8018848:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801884c:	f881 c000 	strb.w	ip, [r1]
 8018850:	7048      	strb	r0, [r1, #1]
 8018852:	b002      	add	sp, #8
 8018854:	4770      	bx	lr
 8018856:	bf00      	nop

08018858 <uxr_buffer_request_data>:
 8018858:	b530      	push	{r4, r5, lr}
 801885a:	b095      	sub	sp, #84	@ 0x54
 801885c:	4604      	mov	r4, r0
 801885e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8018860:	9303      	str	r3, [sp, #12]
 8018862:	2d00      	cmp	r5, #0
 8018864:	f88d 301c 	strb.w	r3, [sp, #28]
 8018868:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801886c:	f04f 0200 	mov.w	r2, #0
 8018870:	bf14      	ite	ne
 8018872:	2101      	movne	r1, #1
 8018874:	4611      	moveq	r1, r2
 8018876:	f88d 201d 	strb.w	r2, [sp, #29]
 801887a:	f88d 201e 	strb.w	r2, [sp, #30]
 801887e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8018882:	d021      	beq.n	80188c8 <uxr_buffer_request_data+0x70>
 8018884:	686b      	ldr	r3, [r5, #4]
 8018886:	2210      	movs	r2, #16
 8018888:	6829      	ldr	r1, [r5, #0]
 801888a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801888e:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8018892:	2308      	movs	r3, #8
 8018894:	2100      	movs	r1, #0
 8018896:	4620      	mov	r0, r4
 8018898:	e9cd 3100 	strd	r3, r1, [sp]
 801889c:	ab0c      	add	r3, sp, #48	@ 0x30
 801889e:	9905      	ldr	r1, [sp, #20]
 80188a0:	f001 f836 	bl	8019910 <uxr_prepare_stream_to_write_submessage>
 80188a4:	b918      	cbnz	r0, 80188ae <uxr_buffer_request_data+0x56>
 80188a6:	4604      	mov	r4, r0
 80188a8:	4620      	mov	r0, r4
 80188aa:	b015      	add	sp, #84	@ 0x54
 80188ac:	bd30      	pop	{r4, r5, pc}
 80188ae:	9904      	ldr	r1, [sp, #16]
 80188b0:	aa06      	add	r2, sp, #24
 80188b2:	4620      	mov	r0, r4
 80188b4:	f001 f968 	bl	8019b88 <uxr_init_base_object_request>
 80188b8:	4604      	mov	r4, r0
 80188ba:	a906      	add	r1, sp, #24
 80188bc:	a80c      	add	r0, sp, #48	@ 0x30
 80188be:	f002 ff8f 	bl	801b7e0 <uxr_serialize_READ_DATA_Payload>
 80188c2:	4620      	mov	r0, r4
 80188c4:	b015      	add	sp, #84	@ 0x54
 80188c6:	bd30      	pop	{r4, r5, pc}
 80188c8:	2208      	movs	r2, #8
 80188ca:	e7e2      	b.n	8018892 <uxr_buffer_request_data+0x3a>

080188cc <uxr_buffer_cancel_data>:
 80188cc:	b510      	push	{r4, lr}
 80188ce:	2300      	movs	r3, #0
 80188d0:	b094      	sub	sp, #80	@ 0x50
 80188d2:	4604      	mov	r4, r0
 80188d4:	9205      	str	r2, [sp, #20]
 80188d6:	9301      	str	r3, [sp, #4]
 80188d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80188dc:	f88d 301e 	strb.w	r3, [sp, #30]
 80188e0:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80188e4:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80188e8:	2308      	movs	r3, #8
 80188ea:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80188ee:	2201      	movs	r2, #1
 80188f0:	9300      	str	r3, [sp, #0]
 80188f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80188f4:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80188f8:	2210      	movs	r2, #16
 80188fa:	f001 f809 	bl	8019910 <uxr_prepare_stream_to_write_submessage>
 80188fe:	b918      	cbnz	r0, 8018908 <uxr_buffer_cancel_data+0x3c>
 8018900:	4604      	mov	r4, r0
 8018902:	4620      	mov	r0, r4
 8018904:	b014      	add	sp, #80	@ 0x50
 8018906:	bd10      	pop	{r4, pc}
 8018908:	9905      	ldr	r1, [sp, #20]
 801890a:	aa06      	add	r2, sp, #24
 801890c:	4620      	mov	r0, r4
 801890e:	f001 f93b 	bl	8019b88 <uxr_init_base_object_request>
 8018912:	4604      	mov	r4, r0
 8018914:	a906      	add	r1, sp, #24
 8018916:	a80c      	add	r0, sp, #48	@ 0x30
 8018918:	f002 ff62 	bl	801b7e0 <uxr_serialize_READ_DATA_Payload>
 801891c:	4620      	mov	r0, r4
 801891e:	b014      	add	sp, #80	@ 0x50
 8018920:	bd10      	pop	{r4, pc}
 8018922:	bf00      	nop

08018924 <read_submessage_format>:
 8018924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018928:	b095      	sub	sp, #84	@ 0x54
 801892a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801892e:	b113      	cbz	r3, 8018936 <read_submessage_format+0x12>
 8018930:	b015      	add	sp, #84	@ 0x54
 8018932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018936:	4606      	mov	r6, r0
 8018938:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801893a:	460c      	mov	r4, r1
 801893c:	4615      	mov	r5, r2
 801893e:	9004      	str	r0, [sp, #16]
 8018940:	4699      	mov	r9, r3
 8018942:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8018944:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8018948:	9005      	str	r0, [sp, #20]
 801894a:	a80c      	add	r0, sp, #48	@ 0x30
 801894c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8018950:	1a52      	subs	r2, r2, r1
 8018952:	f7f8 fa4b 	bl	8010dec <ucdr_init_buffer>
 8018956:	a80c      	add	r0, sp, #48	@ 0x30
 8018958:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801895c:	f7f8 fa1a 	bl	8010d94 <ucdr_set_on_full_buffer_callback>
 8018960:	69e2      	ldr	r2, [r4, #28]
 8018962:	b19a      	cbz	r2, 801898c <read_submessage_format+0x68>
 8018964:	f1b8 0f07 	cmp.w	r8, #7
 8018968:	f882 9014 	strb.w	r9, [r2, #20]
 801896c:	d040      	beq.n	80189f0 <read_submessage_format+0xcc>
 801896e:	f1b8 0f08 	cmp.w	r8, #8
 8018972:	d02e      	beq.n	80189d2 <read_submessage_format+0xae>
 8018974:	f1b8 0f06 	cmp.w	r8, #6
 8018978:	d011      	beq.n	801899e <read_submessage_format+0x7a>
 801897a:	2301      	movs	r3, #1
 801897c:	7513      	strb	r3, [r2, #20]
 801897e:	4629      	mov	r1, r5
 8018980:	4620      	mov	r0, r4
 8018982:	f7f8 fa87 	bl	8010e94 <ucdr_advance_buffer>
 8018986:	b015      	add	sp, #84	@ 0x54
 8018988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801898c:	f1b8 0f07 	cmp.w	r8, #7
 8018990:	d02e      	beq.n	80189f0 <read_submessage_format+0xcc>
 8018992:	f1b8 0f08 	cmp.w	r8, #8
 8018996:	d01c      	beq.n	80189d2 <read_submessage_format+0xae>
 8018998:	f1b8 0f06 	cmp.w	r8, #6
 801899c:	d1ef      	bne.n	801897e <read_submessage_format+0x5a>
 801899e:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 80189a2:	f1b8 0f00 	cmp.w	r8, #0
 80189a6:	d011      	beq.n	80189cc <read_submessage_format+0xa8>
 80189a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80189aa:	9501      	str	r5, [sp, #4]
 80189ac:	463a      	mov	r2, r7
 80189ae:	4630      	mov	r0, r6
 80189b0:	9300      	str	r3, [sp, #0]
 80189b2:	2306      	movs	r3, #6
 80189b4:	f88d 3016 	strb.w	r3, [sp, #22]
 80189b8:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 80189bc:	9302      	str	r3, [sp, #8]
 80189be:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80189c2:	47c0      	blx	r8
 80189c4:	2301      	movs	r3, #1
 80189c6:	69e2      	ldr	r2, [r4, #28]
 80189c8:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80189cc:	2a00      	cmp	r2, #0
 80189ce:	d1d4      	bne.n	801897a <read_submessage_format+0x56>
 80189d0:	e7d5      	b.n	801897e <read_submessage_format+0x5a>
 80189d2:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d0f8      	beq.n	80189cc <read_submessage_format+0xa8>
 80189da:	a80c      	add	r0, sp, #48	@ 0x30
 80189dc:	a906      	add	r1, sp, #24
 80189de:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80189e2:	f002 ffc9 	bl	801b978 <uxr_deserialize_SampleIdentity>
 80189e6:	b9a0      	cbnz	r0, 8018a12 <read_submessage_format+0xee>
 80189e8:	69e2      	ldr	r2, [r4, #28]
 80189ea:	2a00      	cmp	r2, #0
 80189ec:	d1c5      	bne.n	801897a <read_submessage_format+0x56>
 80189ee:	e7c6      	b.n	801897e <read_submessage_format+0x5a>
 80189f0:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 80189f4:	b13b      	cbz	r3, 8018a06 <read_submessage_format+0xe2>
 80189f6:	a906      	add	r1, sp, #24
 80189f8:	a80c      	add	r0, sp, #48	@ 0x30
 80189fa:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80189fe:	f002 fc8f 	bl	801b320 <uxr_deserialize_BaseObjectRequest>
 8018a02:	bb60      	cbnz	r0, 8018a5e <read_submessage_format+0x13a>
 8018a04:	69e2      	ldr	r2, [r4, #28]
 8018a06:	68a3      	ldr	r3, [r4, #8]
 8018a08:	442b      	add	r3, r5
 8018a0a:	60a3      	str	r3, [r4, #8]
 8018a0c:	2a00      	cmp	r2, #0
 8018a0e:	d1b4      	bne.n	801897a <read_submessage_format+0x56>
 8018a10:	e7b5      	b.n	801897e <read_submessage_format+0x5a>
 8018a12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018a14:	a80c      	add	r0, sp, #48	@ 0x30
 8018a16:	eba8 0803 	sub.w	r8, r8, r3
 8018a1a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8018a1e:	44a8      	add	r8, r5
 8018a20:	1a52      	subs	r2, r2, r1
 8018a22:	f7f8 f9e3 	bl	8010dec <ucdr_init_buffer>
 8018a26:	a80c      	add	r0, sp, #48	@ 0x30
 8018a28:	fa1f f888 	uxth.w	r8, r8
 8018a2c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018a30:	f7f8 f9b0 	bl	8010d94 <ucdr_set_on_full_buffer_callback>
 8018a34:	ab0c      	add	r3, sp, #48	@ 0x30
 8018a36:	2108      	movs	r1, #8
 8018a38:	f8cd 8004 	str.w	r8, [sp, #4]
 8018a3c:	9300      	str	r3, [sp, #0]
 8018a3e:	463a      	mov	r2, r7
 8018a40:	f88d 1016 	strb.w	r1, [sp, #22]
 8018a44:	ab06      	add	r3, sp, #24
 8018a46:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8018a4a:	4630      	mov	r0, r6
 8018a4c:	9102      	str	r1, [sp, #8]
 8018a4e:	9905      	ldr	r1, [sp, #20]
 8018a50:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8018a54:	47b8      	blx	r7
 8018a56:	2301      	movs	r3, #1
 8018a58:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8018a5c:	e7c4      	b.n	80189e8 <read_submessage_format+0xc4>
 8018a5e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8018a62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018a64:	a80c      	add	r0, sp, #48	@ 0x30
 8018a66:	1a52      	subs	r2, r2, r1
 8018a68:	eba8 0803 	sub.w	r8, r8, r3
 8018a6c:	f7f8 f9be 	bl	8010dec <ucdr_init_buffer>
 8018a70:	a80c      	add	r0, sp, #48	@ 0x30
 8018a72:	44a8      	add	r8, r5
 8018a74:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018a78:	f7f8 f98c 	bl	8010d94 <ucdr_set_on_full_buffer_callback>
 8018a7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8018a7e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8018a82:	fa1f f888 	uxth.w	r8, r8
 8018a86:	9300      	str	r3, [sp, #0]
 8018a88:	463a      	mov	r2, r7
 8018a8a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018a8e:	4630      	mov	r0, r6
 8018a90:	f8cd 8004 	str.w	r8, [sp, #4]
 8018a94:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018a98:	2107      	movs	r1, #7
 8018a9a:	f88d 1016 	strb.w	r1, [sp, #22]
 8018a9e:	b29b      	uxth	r3, r3
 8018aa0:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8018aa4:	9102      	str	r1, [sp, #8]
 8018aa6:	9905      	ldr	r1, [sp, #20]
 8018aa8:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8018aac:	47b8      	blx	r7
 8018aae:	2301      	movs	r3, #1
 8018ab0:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8018ab4:	e7a6      	b.n	8018a04 <read_submessage_format+0xe0>
 8018ab6:	bf00      	nop

08018ab8 <on_get_fragmentation_info>:
 8018ab8:	b500      	push	{lr}
 8018aba:	b08b      	sub	sp, #44	@ 0x2c
 8018abc:	4601      	mov	r1, r0
 8018abe:	2204      	movs	r2, #4
 8018ac0:	a802      	add	r0, sp, #8
 8018ac2:	f7f8 f993 	bl	8010dec <ucdr_init_buffer>
 8018ac6:	f10d 0305 	add.w	r3, sp, #5
 8018aca:	f10d 0206 	add.w	r2, sp, #6
 8018ace:	a901      	add	r1, sp, #4
 8018ad0:	a802      	add	r0, sp, #8
 8018ad2:	f001 fe5f 	bl	801a794 <uxr_read_submessage_header>
 8018ad6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018ada:	2b0d      	cmp	r3, #13
 8018adc:	d003      	beq.n	8018ae6 <on_get_fragmentation_info+0x2e>
 8018ade:	2000      	movs	r0, #0
 8018ae0:	b00b      	add	sp, #44	@ 0x2c
 8018ae2:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ae6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018aea:	f013 0f02 	tst.w	r3, #2
 8018aee:	bf14      	ite	ne
 8018af0:	2002      	movne	r0, #2
 8018af2:	2001      	moveq	r0, #1
 8018af4:	b00b      	add	sp, #44	@ 0x2c
 8018af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8018afa:	bf00      	nop

08018afc <read_submessage_get_info>:
 8018afc:	b570      	push	{r4, r5, r6, lr}
 8018afe:	2500      	movs	r5, #0
 8018b00:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8018b04:	460e      	mov	r6, r1
 8018b06:	4604      	mov	r4, r0
 8018b08:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8018b0c:	4629      	mov	r1, r5
 8018b0e:	a810      	add	r0, sp, #64	@ 0x40
 8018b10:	9503      	str	r5, [sp, #12]
 8018b12:	9504      	str	r5, [sp, #16]
 8018b14:	f004 ff86 	bl	801da24 <memset>
 8018b18:	a903      	add	r1, sp, #12
 8018b1a:	4630      	mov	r0, r6
 8018b1c:	f002 fda0 	bl	801b660 <uxr_deserialize_GET_INFO_Payload>
 8018b20:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018b24:	4620      	mov	r0, r4
 8018b26:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8018b2a:	f001 f825 	bl	8019b78 <uxr_session_header_offset>
 8018b2e:	462b      	mov	r3, r5
 8018b30:	220c      	movs	r2, #12
 8018b32:	a905      	add	r1, sp, #20
 8018b34:	9000      	str	r0, [sp, #0]
 8018b36:	a808      	add	r0, sp, #32
 8018b38:	f7f8 f946 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 8018b3c:	a910      	add	r1, sp, #64	@ 0x40
 8018b3e:	a808      	add	r0, sp, #32
 8018b40:	f002 fe02 	bl	801b748 <uxr_serialize_INFO_Payload>
 8018b44:	9b08      	ldr	r3, [sp, #32]
 8018b46:	462a      	mov	r2, r5
 8018b48:	4629      	mov	r1, r5
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	f000 ffc0 	bl	8019ad0 <uxr_stamp_session_header>
 8018b50:	a808      	add	r0, sp, #32
 8018b52:	f7f8 f979 	bl	8010e48 <ucdr_buffer_length>
 8018b56:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018b58:	4602      	mov	r2, r0
 8018b5a:	a905      	add	r1, sp, #20
 8018b5c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018b60:	47a0      	blx	r4
 8018b62:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8018b66:	bd70      	pop	{r4, r5, r6, pc}

08018b68 <write_submessage_acknack.isra.0>:
 8018b68:	b570      	push	{r4, r5, r6, lr}
 8018b6a:	b092      	sub	sp, #72	@ 0x48
 8018b6c:	4605      	mov	r5, r0
 8018b6e:	460e      	mov	r6, r1
 8018b70:	4614      	mov	r4, r2
 8018b72:	f001 f801 	bl	8019b78 <uxr_session_header_offset>
 8018b76:	a905      	add	r1, sp, #20
 8018b78:	9000      	str	r0, [sp, #0]
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	a80a      	add	r0, sp, #40	@ 0x28
 8018b7e:	2211      	movs	r2, #17
 8018b80:	f7f8 f922 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 8018b84:	2218      	movs	r2, #24
 8018b86:	2300      	movs	r3, #0
 8018b88:	210a      	movs	r1, #10
 8018b8a:	fb02 5404 	mla	r4, r2, r4, r5
 8018b8e:	a80a      	add	r0, sp, #40	@ 0x28
 8018b90:	2205      	movs	r2, #5
 8018b92:	3450      	adds	r4, #80	@ 0x50
 8018b94:	f001 fde4 	bl	801a760 <uxr_buffer_submessage_header>
 8018b98:	a903      	add	r1, sp, #12
 8018b9a:	4620      	mov	r0, r4
 8018b9c:	f003 feba 	bl	801c914 <uxr_compute_acknack>
 8018ba0:	ba40      	rev16	r0, r0
 8018ba2:	a903      	add	r1, sp, #12
 8018ba4:	f88d 6010 	strb.w	r6, [sp, #16]
 8018ba8:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018bac:	a80a      	add	r0, sp, #40	@ 0x28
 8018bae:	f002 fe3d 	bl	801b82c <uxr_serialize_ACKNACK_Payload>
 8018bb2:	2200      	movs	r2, #0
 8018bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018bb6:	4628      	mov	r0, r5
 8018bb8:	4611      	mov	r1, r2
 8018bba:	f000 ff89 	bl	8019ad0 <uxr_stamp_session_header>
 8018bbe:	a80a      	add	r0, sp, #40	@ 0x28
 8018bc0:	f7f8 f942 	bl	8010e48 <ucdr_buffer_length>
 8018bc4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8018bc6:	4602      	mov	r2, r0
 8018bc8:	a905      	add	r1, sp, #20
 8018bca:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018bce:	47a0      	blx	r4
 8018bd0:	b012      	add	sp, #72	@ 0x48
 8018bd2:	bd70      	pop	{r4, r5, r6, pc}
 8018bd4:	0000      	movs	r0, r0
	...

08018bd8 <uxr_init_session>:
 8018bd8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8018c10 <uxr_init_session+0x38>
 8018bdc:	2300      	movs	r3, #0
 8018bde:	b510      	push	{r4, lr}
 8018be0:	4604      	mov	r4, r0
 8018be2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8018be6:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8018bea:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8018bee:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8018bf2:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8018bf6:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8018bfa:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8018bfe:	2181      	movs	r1, #129	@ 0x81
 8018c00:	f000 feca 	bl	8019998 <uxr_init_session_info>
 8018c04:	f104 0008 	add.w	r0, r4, #8
 8018c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c0c:	f001 bcc4 	b.w	801a598 <uxr_init_stream_storage>
	...

08018c18 <uxr_set_status_callback>:
 8018c18:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8018c1c:	4770      	bx	lr
 8018c1e:	bf00      	nop

08018c20 <uxr_set_topic_callback>:
 8018c20:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8018c24:	4770      	bx	lr
 8018c26:	bf00      	nop

08018c28 <uxr_set_request_callback>:
 8018c28:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8018c2c:	4770      	bx	lr
 8018c2e:	bf00      	nop

08018c30 <uxr_set_reply_callback>:
 8018c30:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8018c34:	4770      	bx	lr
 8018c36:	bf00      	nop

08018c38 <uxr_create_output_best_effort_stream>:
 8018c38:	b510      	push	{r4, lr}
 8018c3a:	4604      	mov	r4, r0
 8018c3c:	b084      	sub	sp, #16
 8018c3e:	e9cd 2100 	strd	r2, r1, [sp]
 8018c42:	f000 ff99 	bl	8019b78 <uxr_session_header_offset>
 8018c46:	4603      	mov	r3, r0
 8018c48:	f104 0008 	add.w	r0, r4, #8
 8018c4c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8018c50:	b004      	add	sp, #16
 8018c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c56:	f001 bce5 	b.w	801a624 <uxr_add_output_best_effort_buffer>
 8018c5a:	bf00      	nop

08018c5c <uxr_create_output_reliable_stream>:
 8018c5c:	b530      	push	{r4, r5, lr}
 8018c5e:	b089      	sub	sp, #36	@ 0x24
 8018c60:	4604      	mov	r4, r0
 8018c62:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8018c66:	9303      	str	r3, [sp, #12]
 8018c68:	f000 ff86 	bl	8019b78 <uxr_session_header_offset>
 8018c6c:	4605      	mov	r5, r0
 8018c6e:	9905      	ldr	r1, [sp, #20]
 8018c70:	f104 0008 	add.w	r0, r4, #8
 8018c74:	9500      	str	r5, [sp, #0]
 8018c76:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8018c7a:	f001 fce7 	bl	801a64c <uxr_add_output_reliable_buffer>
 8018c7e:	2200      	movs	r2, #0
 8018c80:	fa5f fc80 	uxtb.w	ip, r0
 8018c84:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8018c88:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018c8c:	0e03      	lsrs	r3, r0, #24
 8018c8e:	f36c 0207 	bfi	r2, ip, #0, #8
 8018c92:	f364 220f 	bfi	r2, r4, #8, #8
 8018c96:	f361 4217 	bfi	r2, r1, #16, #8
 8018c9a:	f363 621f 	bfi	r2, r3, #24, #8
 8018c9e:	4610      	mov	r0, r2
 8018ca0:	b009      	add	sp, #36	@ 0x24
 8018ca2:	bd30      	pop	{r4, r5, pc}

08018ca4 <uxr_create_input_best_effort_stream>:
 8018ca4:	b082      	sub	sp, #8
 8018ca6:	3008      	adds	r0, #8
 8018ca8:	b002      	add	sp, #8
 8018caa:	f001 bce9 	b.w	801a680 <uxr_add_input_best_effort_buffer>
 8018cae:	bf00      	nop

08018cb0 <uxr_create_input_reliable_stream>:
 8018cb0:	b510      	push	{r4, lr}
 8018cb2:	4c0c      	ldr	r4, [pc, #48]	@ (8018ce4 <uxr_create_input_reliable_stream+0x34>)
 8018cb4:	b084      	sub	sp, #16
 8018cb6:	3008      	adds	r0, #8
 8018cb8:	9400      	str	r4, [sp, #0]
 8018cba:	f001 fcf7 	bl	801a6ac <uxr_add_input_reliable_buffer>
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	fa5f fe80 	uxtb.w	lr, r0
 8018cc4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8018cc8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018ccc:	0e03      	lsrs	r3, r0, #24
 8018cce:	f36e 0207 	bfi	r2, lr, #0, #8
 8018cd2:	f36c 220f 	bfi	r2, ip, #8, #8
 8018cd6:	f361 4217 	bfi	r2, r1, #16, #8
 8018cda:	f363 621f 	bfi	r2, r3, #24, #8
 8018cde:	4610      	mov	r0, r2
 8018ce0:	b004      	add	sp, #16
 8018ce2:	bd10      	pop	{r4, pc}
 8018ce4:	08018ab9 	.word	0x08018ab9

08018ce8 <uxr_epoch_nanos>:
 8018ce8:	b510      	push	{r4, lr}
 8018cea:	4604      	mov	r4, r0
 8018cec:	f001 fd9a 	bl	801a824 <uxr_nanos>
 8018cf0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8018cf4:	1ac0      	subs	r0, r0, r3
 8018cf6:	eb61 0102 	sbc.w	r1, r1, r2
 8018cfa:	bd10      	pop	{r4, pc}

08018cfc <uxr_flash_output_streams>:
 8018cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d00:	7e03      	ldrb	r3, [r0, #24]
 8018d02:	b084      	sub	sp, #16
 8018d04:	4604      	mov	r4, r0
 8018d06:	b1fb      	cbz	r3, 8018d48 <uxr_flash_output_streams+0x4c>
 8018d08:	f04f 0900 	mov.w	r9, #0
 8018d0c:	f10d 0802 	add.w	r8, sp, #2
 8018d10:	af03      	add	r7, sp, #12
 8018d12:	ae02      	add	r6, sp, #8
 8018d14:	4648      	mov	r0, r9
 8018d16:	2201      	movs	r2, #1
 8018d18:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8018d1c:	4611      	mov	r1, r2
 8018d1e:	3508      	adds	r5, #8
 8018d20:	f001 fbe0 	bl	801a4e4 <uxr_stream_id>
 8018d24:	4684      	mov	ip, r0
 8018d26:	4643      	mov	r3, r8
 8018d28:	463a      	mov	r2, r7
 8018d2a:	4631      	mov	r1, r6
 8018d2c:	4628      	mov	r0, r5
 8018d2e:	f8cd c004 	str.w	ip, [sp, #4]
 8018d32:	f003 fe79 	bl	801ca28 <uxr_prepare_best_effort_buffer_to_send>
 8018d36:	2800      	cmp	r0, #0
 8018d38:	d13d      	bne.n	8018db6 <uxr_flash_output_streams+0xba>
 8018d3a:	f109 0901 	add.w	r9, r9, #1
 8018d3e:	7e23      	ldrb	r3, [r4, #24]
 8018d40:	fa5f f089 	uxtb.w	r0, r9
 8018d44:	4283      	cmp	r3, r0
 8018d46:	d8e6      	bhi.n	8018d16 <uxr_flash_output_streams+0x1a>
 8018d48:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8018d4c:	b383      	cbz	r3, 8018db0 <uxr_flash_output_streams+0xb4>
 8018d4e:	f04f 0900 	mov.w	r9, #0
 8018d52:	f10d 0802 	add.w	r8, sp, #2
 8018d56:	af03      	add	r7, sp, #12
 8018d58:	ae02      	add	r6, sp, #8
 8018d5a:	4648      	mov	r0, r9
 8018d5c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8018d60:	2201      	movs	r2, #1
 8018d62:	2102      	movs	r1, #2
 8018d64:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8018d68:	f001 fbbc 	bl	801a4e4 <uxr_stream_id>
 8018d6c:	9001      	str	r0, [sp, #4]
 8018d6e:	3520      	adds	r5, #32
 8018d70:	e00c      	b.n	8018d8c <uxr_flash_output_streams+0x90>
 8018d72:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018d76:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018d7a:	9b02      	ldr	r3, [sp, #8]
 8018d7c:	f000 fea8 	bl	8019ad0 <uxr_stamp_session_header>
 8018d80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018d82:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018d86:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8018d8a:	47d0      	blx	sl
 8018d8c:	4643      	mov	r3, r8
 8018d8e:	463a      	mov	r2, r7
 8018d90:	4631      	mov	r1, r6
 8018d92:	4628      	mov	r0, r5
 8018d94:	f004 f86c 	bl	801ce70 <uxr_prepare_next_reliable_buffer_to_send>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	4620      	mov	r0, r4
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d1e8      	bne.n	8018d72 <uxr_flash_output_streams+0x76>
 8018da0:	f109 0901 	add.w	r9, r9, #1
 8018da4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8018da8:	fa5f f089 	uxtb.w	r0, r9
 8018dac:	4283      	cmp	r3, r0
 8018dae:	d8d5      	bhi.n	8018d5c <uxr_flash_output_streams+0x60>
 8018db0:	b004      	add	sp, #16
 8018db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018db6:	9b02      	ldr	r3, [sp, #8]
 8018db8:	4620      	mov	r0, r4
 8018dba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018dbe:	f109 0901 	add.w	r9, r9, #1
 8018dc2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018dc6:	f000 fe83 	bl	8019ad0 <uxr_stamp_session_header>
 8018dca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018dcc:	9a03      	ldr	r2, [sp, #12]
 8018dce:	685d      	ldr	r5, [r3, #4]
 8018dd0:	6818      	ldr	r0, [r3, #0]
 8018dd2:	9902      	ldr	r1, [sp, #8]
 8018dd4:	47a8      	blx	r5
 8018dd6:	7e23      	ldrb	r3, [r4, #24]
 8018dd8:	fa5f f089 	uxtb.w	r0, r9
 8018ddc:	4283      	cmp	r3, r0
 8018dde:	d89a      	bhi.n	8018d16 <uxr_flash_output_streams+0x1a>
 8018de0:	e7b2      	b.n	8018d48 <uxr_flash_output_streams+0x4c>
 8018de2:	bf00      	nop

08018de4 <read_submessage_info>:
 8018de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018de8:	460d      	mov	r5, r1
 8018dea:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8018dee:	4606      	mov	r6, r0
 8018df0:	4669      	mov	r1, sp
 8018df2:	4628      	mov	r0, r5
 8018df4:	f002 fb46 	bl	801b484 <uxr_deserialize_BaseObjectReply>
 8018df8:	4604      	mov	r4, r0
 8018dfa:	a902      	add	r1, sp, #8
 8018dfc:	4628      	mov	r0, r5
 8018dfe:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8018e02:	f7f6 fd71 	bl	800f8e8 <ucdr_deserialize_bool>
 8018e06:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8018e0a:	4004      	ands	r4, r0
 8018e0c:	b2e4      	uxtb	r4, r4
 8018e0e:	b95b      	cbnz	r3, 8018e28 <read_submessage_info+0x44>
 8018e10:	a987      	add	r1, sp, #540	@ 0x21c
 8018e12:	4628      	mov	r0, r5
 8018e14:	f7f6 fd68 	bl	800f8e8 <ucdr_deserialize_bool>
 8018e18:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8018e1c:	4680      	mov	r8, r0
 8018e1e:	b94b      	cbnz	r3, 8018e34 <read_submessage_info+0x50>
 8018e20:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8018e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e28:	a903      	add	r1, sp, #12
 8018e2a:	4628      	mov	r0, r5
 8018e2c:	f002 f9d6 	bl	801b1dc <uxr_deserialize_ObjectVariant>
 8018e30:	4004      	ands	r4, r0
 8018e32:	e7ed      	b.n	8018e10 <read_submessage_info+0x2c>
 8018e34:	a988      	add	r1, sp, #544	@ 0x220
 8018e36:	4628      	mov	r0, r5
 8018e38:	f7f6 fd84 	bl	800f944 <ucdr_deserialize_uint8_t>
 8018e3c:	ea14 0f08 	tst.w	r4, r8
 8018e40:	d0ee      	beq.n	8018e20 <read_submessage_info+0x3c>
 8018e42:	2800      	cmp	r0, #0
 8018e44:	d0ec      	beq.n	8018e20 <read_submessage_info+0x3c>
 8018e46:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8018e4a:	2b0d      	cmp	r3, #13
 8018e4c:	d1e8      	bne.n	8018e20 <read_submessage_info+0x3c>
 8018e4e:	a98a      	add	r1, sp, #552	@ 0x228
 8018e50:	4628      	mov	r0, r5
 8018e52:	f7f7 fb1d 	bl	8010490 <ucdr_deserialize_int16_t>
 8018e56:	b138      	cbz	r0, 8018e68 <read_submessage_info+0x84>
 8018e58:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	dd06      	ble.n	8018e6e <read_submessage_info+0x8a>
 8018e60:	2f00      	cmp	r7, #0
 8018e62:	bf14      	ite	ne
 8018e64:	2001      	movne	r0, #1
 8018e66:	2002      	moveq	r0, #2
 8018e68:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8018e6c:	e7d8      	b.n	8018e20 <read_submessage_info+0x3c>
 8018e6e:	2000      	movs	r0, #0
 8018e70:	e7fa      	b.n	8018e68 <read_submessage_info+0x84>
 8018e72:	bf00      	nop

08018e74 <read_submessage_list>:
 8018e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e78:	4604      	mov	r4, r0
 8018e7a:	b097      	sub	sp, #92	@ 0x5c
 8018e7c:	460d      	mov	r5, r1
 8018e7e:	4ec1      	ldr	r6, [pc, #772]	@ (8019184 <read_submessage_list+0x310>)
 8018e80:	9209      	str	r2, [sp, #36]	@ 0x24
 8018e82:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8018e86:	aa0c      	add	r2, sp, #48	@ 0x30
 8018e88:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8018e8c:	4628      	mov	r0, r5
 8018e8e:	f001 fc81 	bl	801a794 <uxr_read_submessage_header>
 8018e92:	2800      	cmp	r0, #0
 8018e94:	f000 8142 	beq.w	801911c <read_submessage_list+0x2a8>
 8018e98:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8018e9c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8018ea0:	3b02      	subs	r3, #2
 8018ea2:	2b0d      	cmp	r3, #13
 8018ea4:	d8ed      	bhi.n	8018e82 <read_submessage_list+0xe>
 8018ea6:	a101      	add	r1, pc, #4	@ (adr r1, 8018eac <read_submessage_list+0x38>)
 8018ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018eac:	08019113 	.word	0x08019113
 8018eb0:	08018e83 	.word	0x08018e83
 8018eb4:	08019103 	.word	0x08019103
 8018eb8:	080190a1 	.word	0x080190a1
 8018ebc:	08019097 	.word	0x08019097
 8018ec0:	08018e83 	.word	0x08018e83
 8018ec4:	08018e83 	.word	0x08018e83
 8018ec8:	08018fed 	.word	0x08018fed
 8018ecc:	08018f7f 	.word	0x08018f7f
 8018ed0:	08018f3f 	.word	0x08018f3f
 8018ed4:	08018e83 	.word	0x08018e83
 8018ed8:	08018e83 	.word	0x08018e83
 8018edc:	08018e83 	.word	0x08018e83
 8018ee0:	08018ee5 	.word	0x08018ee5
 8018ee4:	a910      	add	r1, sp, #64	@ 0x40
 8018ee6:	4628      	mov	r0, r5
 8018ee8:	f002 fcf4 	bl	801b8d4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8018eec:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8018ef0:	f1b8 0f00 	cmp.w	r8, #0
 8018ef4:	f000 811a 	beq.w	801912c <read_submessage_list+0x2b8>
 8018ef8:	f001 fc94 	bl	801a824 <uxr_nanos>
 8018efc:	4602      	mov	r2, r0
 8018efe:	460b      	mov	r3, r1
 8018f00:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8018f04:	2100      	movs	r1, #0
 8018f06:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8018f08:	9006      	str	r0, [sp, #24]
 8018f0a:	468c      	mov	ip, r1
 8018f0c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8018f0e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018f12:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018f14:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8018f18:	468c      	mov	ip, r1
 8018f1a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018f1c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018f20:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8018f24:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8018f28:	fbc7 0106 	smlal	r0, r1, r7, r6
 8018f2c:	e9cd 0100 	strd	r0, r1, [sp]
 8018f30:	4620      	mov	r0, r4
 8018f32:	47c0      	blx	r8
 8018f34:	f04f 0301 	mov.w	r3, #1
 8018f38:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8018f3c:	e7a1      	b.n	8018e82 <read_submessage_list+0xe>
 8018f3e:	a910      	add	r1, sp, #64	@ 0x40
 8018f40:	4628      	mov	r0, r5
 8018f42:	f002 fcb3 	bl	801b8ac <uxr_deserialize_HEARTBEAT_Payload>
 8018f46:	2100      	movs	r1, #0
 8018f48:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8018f4c:	f001 faf8 	bl	801a540 <uxr_stream_id_from_raw>
 8018f50:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018f54:	900f      	str	r0, [sp, #60]	@ 0x3c
 8018f56:	f104 0008 	add.w	r0, r4, #8
 8018f5a:	4641      	mov	r1, r8
 8018f5c:	f001 fbde 	bl	801a71c <uxr_get_input_reliable_stream>
 8018f60:	2800      	cmp	r0, #0
 8018f62:	d08e      	beq.n	8018e82 <read_submessage_list+0xe>
 8018f64:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8018f68:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8018f6c:	f003 fcc6 	bl	801c8fc <uxr_process_heartbeat>
 8018f70:	4642      	mov	r2, r8
 8018f72:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8018f76:	4620      	mov	r0, r4
 8018f78:	f7ff fdf6 	bl	8018b68 <write_submessage_acknack.isra.0>
 8018f7c:	e781      	b.n	8018e82 <read_submessage_list+0xe>
 8018f7e:	a910      	add	r1, sp, #64	@ 0x40
 8018f80:	4628      	mov	r0, r5
 8018f82:	f002 fc6b 	bl	801b85c <uxr_deserialize_ACKNACK_Payload>
 8018f86:	2100      	movs	r1, #0
 8018f88:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8018f8c:	f001 fad8 	bl	801a540 <uxr_stream_id_from_raw>
 8018f90:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8018f94:	900d      	str	r0, [sp, #52]	@ 0x34
 8018f96:	f104 0008 	add.w	r0, r4, #8
 8018f9a:	f001 fba9 	bl	801a6f0 <uxr_get_output_reliable_stream>
 8018f9e:	4680      	mov	r8, r0
 8018fa0:	2800      	cmp	r0, #0
 8018fa2:	f43f af6e 	beq.w	8018e82 <read_submessage_list+0xe>
 8018fa6:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8018faa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8018fae:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8018fb2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8018fb6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8018fba:	b289      	uxth	r1, r1
 8018fbc:	f004 f800 	bl	801cfc0 <uxr_process_acknack>
 8018fc0:	4640      	mov	r0, r8
 8018fc2:	f003 ffc1 	bl	801cf48 <uxr_begin_output_nack_buffer_it>
 8018fc6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8018fca:	e005      	b.n	8018fd8 <read_submessage_list+0x164>
 8018fcc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018fce:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8018fd2:	e9d3 0900 	ldrd	r0, r9, [r3]
 8018fd6:	47c8      	blx	r9
 8018fd8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8018fdc:	aa0f      	add	r2, sp, #60	@ 0x3c
 8018fde:	4651      	mov	r1, sl
 8018fe0:	4640      	mov	r0, r8
 8018fe2:	f003 ffb3 	bl	801cf4c <uxr_next_reliable_nack_buffer_to_send>
 8018fe6:	2800      	cmp	r0, #0
 8018fe8:	d1f0      	bne.n	8018fcc <read_submessage_list+0x158>
 8018fea:	e74a      	b.n	8018e82 <read_submessage_list+0xe>
 8018fec:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8018ff0:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8018ff4:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8018ff8:	4628      	mov	r0, r5
 8018ffa:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8018ffe:	4651      	mov	r1, sl
 8019000:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8019004:	f1a8 0804 	sub.w	r8, r8, #4
 8019008:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801900c:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8019010:	fa1f f888 	uxth.w	r8, r8
 8019014:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8019018:	f009 090e 	and.w	r9, r9, #14
 801901c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8019020:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8019024:	f002 f97c 	bl	801b320 <uxr_deserialize_BaseObjectRequest>
 8019028:	4650      	mov	r0, sl
 801902a:	a90f      	add	r1, sp, #60	@ 0x3c
 801902c:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8019030:	f000 fdca 	bl	8019bc8 <uxr_parse_base_object_request>
 8019034:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019036:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801903a:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801903e:	9110      	str	r1, [sp, #64]	@ 0x40
 8019040:	f1bb 0f00 	cmp.w	fp, #0
 8019044:	d006      	beq.n	8019054 <read_submessage_list+0x1e0>
 8019046:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801904a:	4652      	mov	r2, sl
 801904c:	4620      	mov	r0, r4
 801904e:	9300      	str	r3, [sp, #0]
 8019050:	2300      	movs	r3, #0
 8019052:	47d8      	blx	fp
 8019054:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8019056:	b182      	cbz	r2, 801907a <read_submessage_list+0x206>
 8019058:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801905a:	f04f 0c00 	mov.w	ip, #0
 801905e:	3902      	subs	r1, #2
 8019060:	e003      	b.n	801906a <read_submessage_list+0x1f6>
 8019062:	f10c 0c01 	add.w	ip, ip, #1
 8019066:	4594      	cmp	ip, r2
 8019068:	d007      	beq.n	801907a <read_submessage_list+0x206>
 801906a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801906e:	4553      	cmp	r3, sl
 8019070:	d1f7      	bne.n	8019062 <read_submessage_list+0x1ee>
 8019072:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8019074:	2200      	movs	r2, #0
 8019076:	f803 200c 	strb.w	r2, [r3, ip]
 801907a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801907e:	464b      	mov	r3, r9
 8019080:	4642      	mov	r2, r8
 8019082:	4620      	mov	r0, r4
 8019084:	9102      	str	r1, [sp, #8]
 8019086:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019088:	9101      	str	r1, [sp, #4]
 801908a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801908c:	9100      	str	r1, [sp, #0]
 801908e:	4629      	mov	r1, r5
 8019090:	f7ff fc48 	bl	8018924 <read_submessage_format>
 8019094:	e6f5      	b.n	8018e82 <read_submessage_list+0xe>
 8019096:	4629      	mov	r1, r5
 8019098:	4620      	mov	r0, r4
 801909a:	f7ff fea3 	bl	8018de4 <read_submessage_info>
 801909e:	e6f0      	b.n	8018e82 <read_submessage_list+0xe>
 80190a0:	2a00      	cmp	r2, #0
 80190a2:	d03e      	beq.n	8019122 <read_submessage_list+0x2ae>
 80190a4:	a910      	add	r1, sp, #64	@ 0x40
 80190a6:	4628      	mov	r0, r5
 80190a8:	f002 fb30 	bl	801b70c <uxr_deserialize_STATUS_Payload>
 80190ac:	a90e      	add	r1, sp, #56	@ 0x38
 80190ae:	aa0d      	add	r2, sp, #52	@ 0x34
 80190b0:	a810      	add	r0, sp, #64	@ 0x40
 80190b2:	f000 fd89 	bl	8019bc8 <uxr_parse_base_object_request>
 80190b6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80190b8:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80190bc:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80190c0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 80190c4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80190c6:	f1ba 0f00 	cmp.w	sl, #0
 80190ca:	d006      	beq.n	80190da <read_submessage_list+0x266>
 80190cc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80190d0:	4642      	mov	r2, r8
 80190d2:	4620      	mov	r0, r4
 80190d4:	9300      	str	r3, [sp, #0]
 80190d6:	464b      	mov	r3, r9
 80190d8:	47d0      	blx	sl
 80190da:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80190dc:	2a00      	cmp	r2, #0
 80190de:	f43f aed0 	beq.w	8018e82 <read_submessage_list+0xe>
 80190e2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80190e4:	2100      	movs	r1, #0
 80190e6:	3802      	subs	r0, #2
 80190e8:	e003      	b.n	80190f2 <read_submessage_list+0x27e>
 80190ea:	3101      	adds	r1, #1
 80190ec:	4291      	cmp	r1, r2
 80190ee:	f43f aec8 	beq.w	8018e82 <read_submessage_list+0xe>
 80190f2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80190f6:	4543      	cmp	r3, r8
 80190f8:	d1f7      	bne.n	80190ea <read_submessage_list+0x276>
 80190fa:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80190fc:	f803 9001 	strb.w	r9, [r3, r1]
 8019100:	e6bf      	b.n	8018e82 <read_submessage_list+0xe>
 8019102:	2a00      	cmp	r2, #0
 8019104:	f47f aebd 	bne.w	8018e82 <read_submessage_list+0xe>
 8019108:	4629      	mov	r1, r5
 801910a:	4620      	mov	r0, r4
 801910c:	f000 fca0 	bl	8019a50 <uxr_read_create_session_status>
 8019110:	e6b7      	b.n	8018e82 <read_submessage_list+0xe>
 8019112:	4629      	mov	r1, r5
 8019114:	4620      	mov	r0, r4
 8019116:	f7ff fcf1 	bl	8018afc <read_submessage_get_info>
 801911a:	e6b2      	b.n	8018e82 <read_submessage_list+0xe>
 801911c:	b017      	add	sp, #92	@ 0x5c
 801911e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019122:	4629      	mov	r1, r5
 8019124:	4620      	mov	r0, r4
 8019126:	f000 fca1 	bl	8019a6c <uxr_read_delete_session_status>
 801912a:	e6aa      	b.n	8018e82 <read_submessage_list+0xe>
 801912c:	f001 fb7a 	bl	801a824 <uxr_nanos>
 8019130:	4642      	mov	r2, r8
 8019132:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8019134:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019136:	fbc7 3206 	smlal	r3, r2, r7, r6
 801913a:	1818      	adds	r0, r3, r0
 801913c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801913e:	eb42 0101 	adc.w	r1, r2, r1
 8019142:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019144:	4642      	mov	r2, r8
 8019146:	fbc7 3206 	smlal	r3, r2, r7, r6
 801914a:	469c      	mov	ip, r3
 801914c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8019150:	fbc3 7806 	smlal	r7, r8, r3, r6
 8019154:	4643      	mov	r3, r8
 8019156:	eb1c 0c07 	adds.w	ip, ip, r7
 801915a:	eb42 0203 	adc.w	r2, r2, r3
 801915e:	ebb0 030c 	subs.w	r3, r0, ip
 8019162:	eb61 0202 	sbc.w	r2, r1, r2
 8019166:	2a00      	cmp	r2, #0
 8019168:	db08      	blt.n	801917c <read_submessage_list+0x308>
 801916a:	085b      	lsrs	r3, r3, #1
 801916c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8019170:	1052      	asrs	r2, r2, #1
 8019172:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8019176:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801917a:	e6db      	b.n	8018f34 <read_submessage_list+0xc0>
 801917c:	3301      	adds	r3, #1
 801917e:	f142 0200 	adc.w	r2, r2, #0
 8019182:	e7f2      	b.n	801916a <read_submessage_list+0x2f6>
 8019184:	3b9aca00 	.word	0x3b9aca00

08019188 <listen_message_reliably>:
 8019188:	1e0b      	subs	r3, r1, #0
 801918a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801918e:	bfb8      	it	lt
 8019190:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8019194:	b09d      	sub	sp, #116	@ 0x74
 8019196:	4680      	mov	r8, r0
 8019198:	9305      	str	r3, [sp, #20]
 801919a:	f001 fb27 	bl	801a7ec <uxr_millis>
 801919e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80191a2:	4681      	mov	r9, r0
 80191a4:	2a00      	cmp	r2, #0
 80191a6:	f000 809a 	beq.w	80192de <listen_message_reliably+0x156>
 80191aa:	2600      	movs	r6, #0
 80191ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80191b0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80191b4:	460f      	mov	r7, r1
 80191b6:	4630      	mov	r0, r6
 80191b8:	9303      	str	r3, [sp, #12]
 80191ba:	e00e      	b.n	80191da <listen_message_reliably+0x52>
 80191bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80191be:	3601      	adds	r6, #1
 80191c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80191c2:	455a      	cmp	r2, fp
 80191c4:	9903      	ldr	r1, [sp, #12]
 80191c6:	b2f0      	uxtb	r0, r6
 80191c8:	eb73 0101 	sbcs.w	r1, r3, r1
 80191cc:	da01      	bge.n	80191d2 <listen_message_reliably+0x4a>
 80191ce:	4693      	mov	fp, r2
 80191d0:	9303      	str	r3, [sp, #12]
 80191d2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80191d6:	4283      	cmp	r3, r0
 80191d8:	d95f      	bls.n	801929a <listen_message_reliably+0x112>
 80191da:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80191de:	2102      	movs	r1, #2
 80191e0:	2201      	movs	r2, #1
 80191e2:	00e4      	lsls	r4, r4, #3
 80191e4:	f001 f97e 	bl	801a4e4 <uxr_stream_id>
 80191e8:	4601      	mov	r1, r0
 80191ea:	f104 0520 	add.w	r5, r4, #32
 80191ee:	463b      	mov	r3, r7
 80191f0:	464a      	mov	r2, r9
 80191f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80191f4:	4445      	add	r5, r8
 80191f6:	4628      	mov	r0, r5
 80191f8:	f003 fe7a 	bl	801cef0 <uxr_update_output_stream_heartbeat_timestamp>
 80191fc:	eb08 0304 	add.w	r3, r8, r4
 8019200:	2800      	cmp	r0, #0
 8019202:	d0db      	beq.n	80191bc <listen_message_reliably+0x34>
 8019204:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8019208:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801920c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8019210:	4640      	mov	r0, r8
 8019212:	3501      	adds	r5, #1
 8019214:	4444      	add	r4, r8
 8019216:	9304      	str	r3, [sp, #16]
 8019218:	f000 fcae 	bl	8019b78 <uxr_session_header_offset>
 801921c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8019220:	2300      	movs	r3, #0
 8019222:	2211      	movs	r2, #17
 8019224:	a90c      	add	r1, sp, #48	@ 0x30
 8019226:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801922a:	9000      	str	r0, [sp, #0]
 801922c:	4650      	mov	r0, sl
 801922e:	3601      	adds	r6, #1
 8019230:	f7f7 fdca 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 8019234:	2300      	movs	r3, #0
 8019236:	2205      	movs	r2, #5
 8019238:	210b      	movs	r1, #11
 801923a:	4650      	mov	r0, sl
 801923c:	f001 fa90 	bl	801a760 <uxr_buffer_submessage_header>
 8019240:	2101      	movs	r1, #1
 8019242:	8968      	ldrh	r0, [r5, #10]
 8019244:	f003 fef6 	bl	801d034 <uxr_seq_num_add>
 8019248:	892b      	ldrh	r3, [r5, #8]
 801924a:	4602      	mov	r2, r0
 801924c:	a90a      	add	r1, sp, #40	@ 0x28
 801924e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019252:	4650      	mov	r0, sl
 8019254:	9b04      	ldr	r3, [sp, #16]
 8019256:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801925a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801925e:	f002 fb11 	bl	801b884 <uxr_serialize_HEARTBEAT_Payload>
 8019262:	2200      	movs	r2, #0
 8019264:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019266:	4640      	mov	r0, r8
 8019268:	4611      	mov	r1, r2
 801926a:	f000 fc31 	bl	8019ad0 <uxr_stamp_session_header>
 801926e:	4650      	mov	r0, sl
 8019270:	f7f7 fdea 	bl	8010e48 <ucdr_buffer_length>
 8019274:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8019278:	4602      	mov	r2, r0
 801927a:	a90c      	add	r1, sp, #48	@ 0x30
 801927c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8019280:	47a8      	blx	r5
 8019282:	9903      	ldr	r1, [sp, #12]
 8019284:	b2f0      	uxtb	r0, r6
 8019286:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801928a:	455a      	cmp	r2, fp
 801928c:	eb73 0101 	sbcs.w	r1, r3, r1
 8019290:	db9d      	blt.n	80191ce <listen_message_reliably+0x46>
 8019292:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8019296:	4283      	cmp	r3, r0
 8019298:	d89f      	bhi.n	80191da <listen_message_reliably+0x52>
 801929a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801929e:	9a03      	ldr	r2, [sp, #12]
 80192a0:	429a      	cmp	r2, r3
 80192a2:	bf08      	it	eq
 80192a4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80192a8:	d019      	beq.n	80192de <listen_message_reliably+0x156>
 80192aa:	ebab 0309 	sub.w	r3, fp, r9
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	9d05      	ldr	r5, [sp, #20]
 80192b2:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 80192b6:	aa08      	add	r2, sp, #32
 80192b8:	bf08      	it	eq
 80192ba:	2301      	moveq	r3, #1
 80192bc:	a907      	add	r1, sp, #28
 80192be:	6884      	ldr	r4, [r0, #8]
 80192c0:	429d      	cmp	r5, r3
 80192c2:	6800      	ldr	r0, [r0, #0]
 80192c4:	bfa8      	it	ge
 80192c6:	461d      	movge	r5, r3
 80192c8:	462b      	mov	r3, r5
 80192ca:	47a0      	blx	r4
 80192cc:	b948      	cbnz	r0, 80192e2 <listen_message_reliably+0x15a>
 80192ce:	9b05      	ldr	r3, [sp, #20]
 80192d0:	1b5b      	subs	r3, r3, r5
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	9305      	str	r3, [sp, #20]
 80192d6:	f73f af60 	bgt.w	801919a <listen_message_reliably+0x12>
 80192da:	4604      	mov	r4, r0
 80192dc:	e012      	b.n	8019304 <listen_message_reliably+0x17c>
 80192de:	9b05      	ldr	r3, [sp, #20]
 80192e0:	e7e5      	b.n	80192ae <listen_message_reliably+0x126>
 80192e2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80192e6:	4604      	mov	r4, r0
 80192e8:	2500      	movs	r5, #0
 80192ea:	a80c      	add	r0, sp, #48	@ 0x30
 80192ec:	f7f7 fd7e 	bl	8010dec <ucdr_init_buffer>
 80192f0:	f10d 031a 	add.w	r3, sp, #26
 80192f4:	aa06      	add	r2, sp, #24
 80192f6:	a90c      	add	r1, sp, #48	@ 0x30
 80192f8:	4640      	mov	r0, r8
 80192fa:	f88d 5018 	strb.w	r5, [sp, #24]
 80192fe:	f000 fbfb 	bl	8019af8 <uxr_read_session_header>
 8019302:	b918      	cbnz	r0, 801930c <listen_message_reliably+0x184>
 8019304:	4620      	mov	r0, r4
 8019306:	b01d      	add	sp, #116	@ 0x74
 8019308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801930c:	4629      	mov	r1, r5
 801930e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8019312:	f001 f915 	bl	801a540 <uxr_stream_id_from_raw>
 8019316:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801931a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801931e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8019322:	2e01      	cmp	r6, #1
 8019324:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8019328:	d04b      	beq.n	80193c2 <listen_message_reliably+0x23a>
 801932a:	2e02      	cmp	r6, #2
 801932c:	d00f      	beq.n	801934e <listen_message_reliably+0x1c6>
 801932e:	2e00      	cmp	r6, #0
 8019330:	d1e8      	bne.n	8019304 <listen_message_reliably+0x17c>
 8019332:	4631      	mov	r1, r6
 8019334:	4630      	mov	r0, r6
 8019336:	f001 f903 	bl	801a540 <uxr_stream_id_from_raw>
 801933a:	4602      	mov	r2, r0
 801933c:	a90c      	add	r1, sp, #48	@ 0x30
 801933e:	4640      	mov	r0, r8
 8019340:	920a      	str	r2, [sp, #40]	@ 0x28
 8019342:	f7ff fd97 	bl	8018e74 <read_submessage_list>
 8019346:	4620      	mov	r0, r4
 8019348:	b01d      	add	sp, #116	@ 0x74
 801934a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801934e:	4629      	mov	r1, r5
 8019350:	f108 0008 	add.w	r0, r8, #8
 8019354:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8019358:	f001 f9e0 	bl	801a71c <uxr_get_input_reliable_stream>
 801935c:	4607      	mov	r7, r0
 801935e:	b338      	cbz	r0, 80193b0 <listen_message_reliably+0x228>
 8019360:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019362:	a80c      	add	r0, sp, #48	@ 0x30
 8019364:	9203      	str	r2, [sp, #12]
 8019366:	f7f7 fd73 	bl	8010e50 <ucdr_buffer_remaining>
 801936a:	4603      	mov	r3, r0
 801936c:	f10d 0019 	add.w	r0, sp, #25
 8019370:	9a03      	ldr	r2, [sp, #12]
 8019372:	4651      	mov	r1, sl
 8019374:	9000      	str	r0, [sp, #0]
 8019376:	4638      	mov	r0, r7
 8019378:	f003 f9c4 	bl	801c704 <uxr_receive_reliable_message>
 801937c:	b1c0      	cbz	r0, 80193b0 <listen_message_reliably+0x228>
 801937e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8019382:	b393      	cbz	r3, 80193ea <listen_message_reliably+0x262>
 8019384:	ae14      	add	r6, sp, #80	@ 0x50
 8019386:	f04f 0a02 	mov.w	sl, #2
 801938a:	e00a      	b.n	80193a2 <listen_message_reliably+0x21a>
 801938c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8019390:	4631      	mov	r1, r6
 8019392:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8019396:	4640      	mov	r0, r8
 8019398:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801939c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801939e:	f7ff fd69 	bl	8018e74 <read_submessage_list>
 80193a2:	2204      	movs	r2, #4
 80193a4:	4631      	mov	r1, r6
 80193a6:	4638      	mov	r0, r7
 80193a8:	f003 fa2e 	bl	801c808 <uxr_next_input_reliable_buffer_available>
 80193ac:	2800      	cmp	r0, #0
 80193ae:	d1ed      	bne.n	801938c <listen_message_reliably+0x204>
 80193b0:	4640      	mov	r0, r8
 80193b2:	462a      	mov	r2, r5
 80193b4:	4649      	mov	r1, r9
 80193b6:	f7ff fbd7 	bl	8018b68 <write_submessage_acknack.isra.0>
 80193ba:	4620      	mov	r0, r4
 80193bc:	b01d      	add	sp, #116	@ 0x74
 80193be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193c2:	4629      	mov	r1, r5
 80193c4:	f108 0008 	add.w	r0, r8, #8
 80193c8:	f001 f99e 	bl	801a708 <uxr_get_input_best_effort_stream>
 80193cc:	2800      	cmp	r0, #0
 80193ce:	d099      	beq.n	8019304 <listen_message_reliably+0x17c>
 80193d0:	4651      	mov	r1, sl
 80193d2:	f003 f90d 	bl	801c5f0 <uxr_receive_best_effort_message>
 80193d6:	2800      	cmp	r0, #0
 80193d8:	d094      	beq.n	8019304 <listen_message_reliably+0x17c>
 80193da:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80193de:	a90c      	add	r1, sp, #48	@ 0x30
 80193e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80193e2:	4640      	mov	r0, r8
 80193e4:	f7ff fd46 	bl	8018e74 <read_submessage_list>
 80193e8:	e78c      	b.n	8019304 <listen_message_reliably+0x17c>
 80193ea:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80193ee:	a90c      	add	r1, sp, #48	@ 0x30
 80193f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80193f2:	4640      	mov	r0, r8
 80193f4:	f7ff fd3e 	bl	8018e74 <read_submessage_list>
 80193f8:	e7c4      	b.n	8019384 <listen_message_reliably+0x1fc>
 80193fa:	bf00      	nop

080193fc <uxr_run_session_timeout>:
 80193fc:	b570      	push	{r4, r5, r6, lr}
 80193fe:	4604      	mov	r4, r0
 8019400:	460d      	mov	r5, r1
 8019402:	f001 f9f3 	bl	801a7ec <uxr_millis>
 8019406:	4606      	mov	r6, r0
 8019408:	4620      	mov	r0, r4
 801940a:	f7ff fc77 	bl	8018cfc <uxr_flash_output_streams>
 801940e:	4629      	mov	r1, r5
 8019410:	4620      	mov	r0, r4
 8019412:	f7ff feb9 	bl	8019188 <listen_message_reliably>
 8019416:	f001 f9e9 	bl	801a7ec <uxr_millis>
 801941a:	1b83      	subs	r3, r0, r6
 801941c:	1ae9      	subs	r1, r5, r3
 801941e:	2900      	cmp	r1, #0
 8019420:	dcf6      	bgt.n	8019410 <uxr_run_session_timeout+0x14>
 8019422:	f104 0008 	add.w	r0, r4, #8
 8019426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801942a:	f001 b983 	b.w	801a734 <uxr_output_streams_confirmed>
 801942e:	bf00      	nop

08019430 <uxr_run_session_until_data>:
 8019430:	b570      	push	{r4, r5, r6, lr}
 8019432:	4604      	mov	r4, r0
 8019434:	460d      	mov	r5, r1
 8019436:	f001 f9d9 	bl	801a7ec <uxr_millis>
 801943a:	4606      	mov	r6, r0
 801943c:	4620      	mov	r0, r4
 801943e:	f7ff fc5d 	bl	8018cfc <uxr_flash_output_streams>
 8019442:	2300      	movs	r3, #0
 8019444:	4629      	mov	r1, r5
 8019446:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801944a:	e005      	b.n	8019458 <uxr_run_session_until_data+0x28>
 801944c:	f001 f9ce 	bl	801a7ec <uxr_millis>
 8019450:	1b83      	subs	r3, r0, r6
 8019452:	1ae9      	subs	r1, r5, r3
 8019454:	2900      	cmp	r1, #0
 8019456:	dd07      	ble.n	8019468 <uxr_run_session_until_data+0x38>
 8019458:	4620      	mov	r0, r4
 801945a:	f7ff fe95 	bl	8019188 <listen_message_reliably>
 801945e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8019462:	2800      	cmp	r0, #0
 8019464:	d0f2      	beq.n	801944c <uxr_run_session_until_data+0x1c>
 8019466:	bd70      	pop	{r4, r5, r6, pc}
 8019468:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801946c:	bd70      	pop	{r4, r5, r6, pc}
 801946e:	bf00      	nop

08019470 <uxr_run_session_until_confirm_delivery>:
 8019470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019474:	4606      	mov	r6, r0
 8019476:	460d      	mov	r5, r1
 8019478:	f001 f9b8 	bl	801a7ec <uxr_millis>
 801947c:	4607      	mov	r7, r0
 801947e:	4630      	mov	r0, r6
 8019480:	f106 0808 	add.w	r8, r6, #8
 8019484:	f7ff fc3a 	bl	8018cfc <uxr_flash_output_streams>
 8019488:	2d00      	cmp	r5, #0
 801948a:	db10      	blt.n	80194ae <uxr_run_session_until_confirm_delivery+0x3e>
 801948c:	462c      	mov	r4, r5
 801948e:	e006      	b.n	801949e <uxr_run_session_until_confirm_delivery+0x2e>
 8019490:	f7ff fe7a 	bl	8019188 <listen_message_reliably>
 8019494:	f001 f9aa 	bl	801a7ec <uxr_millis>
 8019498:	1bc3      	subs	r3, r0, r7
 801949a:	1aec      	subs	r4, r5, r3
 801949c:	d407      	bmi.n	80194ae <uxr_run_session_until_confirm_delivery+0x3e>
 801949e:	4640      	mov	r0, r8
 80194a0:	f001 f948 	bl	801a734 <uxr_output_streams_confirmed>
 80194a4:	4603      	mov	r3, r0
 80194a6:	4621      	mov	r1, r4
 80194a8:	4630      	mov	r0, r6
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d0f0      	beq.n	8019490 <uxr_run_session_until_confirm_delivery+0x20>
 80194ae:	4640      	mov	r0, r8
 80194b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194b4:	f001 b93e 	b.w	801a734 <uxr_output_streams_confirmed>

080194b8 <uxr_run_session_until_all_status>:
 80194b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194bc:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80194c0:	4606      	mov	r6, r0
 80194c2:	4688      	mov	r8, r1
 80194c4:	4692      	mov	sl, r2
 80194c6:	461f      	mov	r7, r3
 80194c8:	f7ff fc18 	bl	8018cfc <uxr_flash_output_streams>
 80194cc:	f1bb 0f00 	cmp.w	fp, #0
 80194d0:	d004      	beq.n	80194dc <uxr_run_session_until_all_status+0x24>
 80194d2:	465a      	mov	r2, fp
 80194d4:	21ff      	movs	r1, #255	@ 0xff
 80194d6:	4638      	mov	r0, r7
 80194d8:	f004 faa4 	bl	801da24 <memset>
 80194dc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80194e0:	1e7d      	subs	r5, r7, #1
 80194e2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 80194e6:	f001 f981 	bl	801a7ec <uxr_millis>
 80194ea:	4641      	mov	r1, r8
 80194ec:	4681      	mov	r9, r0
 80194ee:	4630      	mov	r0, r6
 80194f0:	f7ff fe4a 	bl	8019188 <listen_message_reliably>
 80194f4:	f001 f97a 	bl	801a7ec <uxr_millis>
 80194f8:	eba0 0009 	sub.w	r0, r0, r9
 80194fc:	eba8 0100 	sub.w	r1, r8, r0
 8019500:	f1bb 0f00 	cmp.w	fp, #0
 8019504:	d029      	beq.n	801955a <uxr_run_session_until_all_status+0xa2>
 8019506:	46ae      	mov	lr, r5
 8019508:	f04f 0c00 	mov.w	ip, #0
 801950c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8019510:	2cff      	cmp	r4, #255	@ 0xff
 8019512:	d015      	beq.n	8019540 <uxr_run_session_until_all_status+0x88>
 8019514:	f10c 0c01 	add.w	ip, ip, #1
 8019518:	45e3      	cmp	fp, ip
 801951a:	d8f7      	bhi.n	801950c <uxr_run_session_until_all_status+0x54>
 801951c:	2300      	movs	r3, #0
 801951e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8019520:	e000      	b.n	8019524 <uxr_run_session_until_all_status+0x6c>
 8019522:	b158      	cbz	r0, 801953c <uxr_run_session_until_all_status+0x84>
 8019524:	462b      	mov	r3, r5
 8019526:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801952a:	3302      	adds	r3, #2
 801952c:	2801      	cmp	r0, #1
 801952e:	eba3 0307 	sub.w	r3, r3, r7
 8019532:	bf8c      	ite	hi
 8019534:	2000      	movhi	r0, #0
 8019536:	2001      	movls	r0, #1
 8019538:	459b      	cmp	fp, r3
 801953a:	d8f2      	bhi.n	8019522 <uxr_run_session_until_all_status+0x6a>
 801953c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019540:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8019544:	f10c 0c01 	add.w	ip, ip, #1
 8019548:	45dc      	cmp	ip, fp
 801954a:	d201      	bcs.n	8019550 <uxr_run_session_until_all_status+0x98>
 801954c:	2b00      	cmp	r3, #0
 801954e:	d0dd      	beq.n	801950c <uxr_run_session_until_all_status+0x54>
 8019550:	2900      	cmp	r1, #0
 8019552:	dde3      	ble.n	801951c <uxr_run_session_until_all_status+0x64>
 8019554:	2b00      	cmp	r3, #0
 8019556:	d1ca      	bne.n	80194ee <uxr_run_session_until_all_status+0x36>
 8019558:	e7e0      	b.n	801951c <uxr_run_session_until_all_status+0x64>
 801955a:	2001      	movs	r0, #1
 801955c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8019560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019564 <wait_session_status>:
 8019564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019568:	4604      	mov	r4, r0
 801956a:	b09d      	sub	sp, #116	@ 0x74
 801956c:	20ff      	movs	r0, #255	@ 0xff
 801956e:	9303      	str	r3, [sp, #12]
 8019570:	7160      	strb	r0, [r4, #5]
 8019572:	2b00      	cmp	r3, #0
 8019574:	f000 80b6 	beq.w	80196e4 <wait_session_status+0x180>
 8019578:	4689      	mov	r9, r1
 801957a:	4692      	mov	sl, r2
 801957c:	f04f 0b00 	mov.w	fp, #0
 8019580:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8019582:	4652      	mov	r2, sl
 8019584:	4649      	mov	r1, r9
 8019586:	e9d3 0500 	ldrd	r0, r5, [r3]
 801958a:	47a8      	blx	r5
 801958c:	f001 f92e 	bl	801a7ec <uxr_millis>
 8019590:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019594:	4605      	mov	r5, r0
 8019596:	e009      	b.n	80195ac <wait_session_status+0x48>
 8019598:	f001 f928 	bl	801a7ec <uxr_millis>
 801959c:	1b40      	subs	r0, r0, r5
 801959e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	dd40      	ble.n	8019628 <wait_session_status+0xc4>
 80195a6:	7960      	ldrb	r0, [r4, #5]
 80195a8:	28ff      	cmp	r0, #255	@ 0xff
 80195aa:	d145      	bne.n	8019638 <wait_session_status+0xd4>
 80195ac:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80195ae:	a908      	add	r1, sp, #32
 80195b0:	6896      	ldr	r6, [r2, #8]
 80195b2:	6810      	ldr	r0, [r2, #0]
 80195b4:	aa09      	add	r2, sp, #36	@ 0x24
 80195b6:	47b0      	blx	r6
 80195b8:	2800      	cmp	r0, #0
 80195ba:	d0ed      	beq.n	8019598 <wait_session_status+0x34>
 80195bc:	a80c      	add	r0, sp, #48	@ 0x30
 80195be:	2600      	movs	r6, #0
 80195c0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80195c4:	f7f7 fc12 	bl	8010dec <ucdr_init_buffer>
 80195c8:	f10d 031e 	add.w	r3, sp, #30
 80195cc:	aa07      	add	r2, sp, #28
 80195ce:	a90c      	add	r1, sp, #48	@ 0x30
 80195d0:	4620      	mov	r0, r4
 80195d2:	f88d 601c 	strb.w	r6, [sp, #28]
 80195d6:	f000 fa8f 	bl	8019af8 <uxr_read_session_header>
 80195da:	2800      	cmp	r0, #0
 80195dc:	d0dc      	beq.n	8019598 <wait_session_status+0x34>
 80195de:	4631      	mov	r1, r6
 80195e0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80195e4:	f000 ffac 	bl	801a540 <uxr_stream_id_from_raw>
 80195e8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80195ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80195f0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80195f4:	2f01      	cmp	r7, #1
 80195f6:	9302      	str	r3, [sp, #8]
 80195f8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80195fc:	d05c      	beq.n	80196b8 <wait_session_status+0x154>
 80195fe:	2f02      	cmp	r7, #2
 8019600:	d020      	beq.n	8019644 <wait_session_status+0xe0>
 8019602:	2f00      	cmp	r7, #0
 8019604:	d1c8      	bne.n	8019598 <wait_session_status+0x34>
 8019606:	4639      	mov	r1, r7
 8019608:	4638      	mov	r0, r7
 801960a:	f000 ff99 	bl	801a540 <uxr_stream_id_from_raw>
 801960e:	a90c      	add	r1, sp, #48	@ 0x30
 8019610:	4602      	mov	r2, r0
 8019612:	900b      	str	r0, [sp, #44]	@ 0x2c
 8019614:	4620      	mov	r0, r4
 8019616:	f7ff fc2d 	bl	8018e74 <read_submessage_list>
 801961a:	f001 f8e7 	bl	801a7ec <uxr_millis>
 801961e:	1b40      	subs	r0, r0, r5
 8019620:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8019624:	2b00      	cmp	r3, #0
 8019626:	dcbe      	bgt.n	80195a6 <wait_session_status+0x42>
 8019628:	f10b 0b01 	add.w	fp, fp, #1
 801962c:	9b03      	ldr	r3, [sp, #12]
 801962e:	7960      	ldrb	r0, [r4, #5]
 8019630:	455b      	cmp	r3, fp
 8019632:	d001      	beq.n	8019638 <wait_session_status+0xd4>
 8019634:	28ff      	cmp	r0, #255	@ 0xff
 8019636:	d0a3      	beq.n	8019580 <wait_session_status+0x1c>
 8019638:	38ff      	subs	r0, #255	@ 0xff
 801963a:	bf18      	it	ne
 801963c:	2001      	movne	r0, #1
 801963e:	b01d      	add	sp, #116	@ 0x74
 8019640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019644:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8019648:	4631      	mov	r1, r6
 801964a:	f104 0008 	add.w	r0, r4, #8
 801964e:	9304      	str	r3, [sp, #16]
 8019650:	f001 f864 	bl	801a71c <uxr_get_input_reliable_stream>
 8019654:	4680      	mov	r8, r0
 8019656:	b348      	cbz	r0, 80196ac <wait_session_status+0x148>
 8019658:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801965a:	a80c      	add	r0, sp, #48	@ 0x30
 801965c:	9205      	str	r2, [sp, #20]
 801965e:	f7f7 fbf7 	bl	8010e50 <ucdr_buffer_remaining>
 8019662:	4603      	mov	r3, r0
 8019664:	f10d 001d 	add.w	r0, sp, #29
 8019668:	9a05      	ldr	r2, [sp, #20]
 801966a:	9000      	str	r0, [sp, #0]
 801966c:	4640      	mov	r0, r8
 801966e:	9902      	ldr	r1, [sp, #8]
 8019670:	f003 f848 	bl	801c704 <uxr_receive_reliable_message>
 8019674:	b1d0      	cbz	r0, 80196ac <wait_session_status+0x148>
 8019676:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d03a      	beq.n	80196f4 <wait_session_status+0x190>
 801967e:	9f04      	ldr	r7, [sp, #16]
 8019680:	e00a      	b.n	8019698 <wait_session_status+0x134>
 8019682:	f04f 0302 	mov.w	r3, #2
 8019686:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801968a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801968e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8019692:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019694:	f7ff fbee 	bl	8018e74 <read_submessage_list>
 8019698:	a914      	add	r1, sp, #80	@ 0x50
 801969a:	2204      	movs	r2, #4
 801969c:	4640      	mov	r0, r8
 801969e:	f003 f8b3 	bl	801c808 <uxr_next_input_reliable_buffer_available>
 80196a2:	4603      	mov	r3, r0
 80196a4:	a914      	add	r1, sp, #80	@ 0x50
 80196a6:	4620      	mov	r0, r4
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d1ea      	bne.n	8019682 <wait_session_status+0x11e>
 80196ac:	4632      	mov	r2, r6
 80196ae:	9904      	ldr	r1, [sp, #16]
 80196b0:	4620      	mov	r0, r4
 80196b2:	f7ff fa59 	bl	8018b68 <write_submessage_acknack.isra.0>
 80196b6:	e76f      	b.n	8019598 <wait_session_status+0x34>
 80196b8:	4631      	mov	r1, r6
 80196ba:	f104 0008 	add.w	r0, r4, #8
 80196be:	f001 f823 	bl	801a708 <uxr_get_input_best_effort_stream>
 80196c2:	2800      	cmp	r0, #0
 80196c4:	f43f af68 	beq.w	8019598 <wait_session_status+0x34>
 80196c8:	9902      	ldr	r1, [sp, #8]
 80196ca:	f002 ff91 	bl	801c5f0 <uxr_receive_best_effort_message>
 80196ce:	2800      	cmp	r0, #0
 80196d0:	f43f af62 	beq.w	8019598 <wait_session_status+0x34>
 80196d4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80196d8:	a90c      	add	r1, sp, #48	@ 0x30
 80196da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80196dc:	4620      	mov	r0, r4
 80196de:	f7ff fbc9 	bl	8018e74 <read_submessage_list>
 80196e2:	e759      	b.n	8019598 <wait_session_status+0x34>
 80196e4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80196e6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80196ea:	47a0      	blx	r4
 80196ec:	2001      	movs	r0, #1
 80196ee:	b01d      	add	sp, #116	@ 0x74
 80196f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196f4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80196f8:	a90c      	add	r1, sp, #48	@ 0x30
 80196fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80196fc:	4620      	mov	r0, r4
 80196fe:	f7ff fbb9 	bl	8018e74 <read_submessage_list>
 8019702:	e7bc      	b.n	801967e <wait_session_status+0x11a>

08019704 <uxr_delete_session_retries>:
 8019704:	b530      	push	{r4, r5, lr}
 8019706:	b08f      	sub	sp, #60	@ 0x3c
 8019708:	4604      	mov	r4, r0
 801970a:	460d      	mov	r5, r1
 801970c:	f000 fa34 	bl	8019b78 <uxr_session_header_offset>
 8019710:	2300      	movs	r3, #0
 8019712:	2210      	movs	r2, #16
 8019714:	a902      	add	r1, sp, #8
 8019716:	9000      	str	r0, [sp, #0]
 8019718:	a806      	add	r0, sp, #24
 801971a:	f7f7 fb55 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 801971e:	a906      	add	r1, sp, #24
 8019720:	4620      	mov	r0, r4
 8019722:	f000 f979 	bl	8019a18 <uxr_buffer_delete_session>
 8019726:	2200      	movs	r2, #0
 8019728:	9b06      	ldr	r3, [sp, #24]
 801972a:	4620      	mov	r0, r4
 801972c:	4611      	mov	r1, r2
 801972e:	f000 f9cf 	bl	8019ad0 <uxr_stamp_session_header>
 8019732:	a806      	add	r0, sp, #24
 8019734:	f7f7 fb88 	bl	8010e48 <ucdr_buffer_length>
 8019738:	462b      	mov	r3, r5
 801973a:	4602      	mov	r2, r0
 801973c:	a902      	add	r1, sp, #8
 801973e:	4620      	mov	r0, r4
 8019740:	f7ff ff10 	bl	8019564 <wait_session_status>
 8019744:	b118      	cbz	r0, 801974e <uxr_delete_session_retries+0x4a>
 8019746:	7960      	ldrb	r0, [r4, #5]
 8019748:	fab0 f080 	clz	r0, r0
 801974c:	0940      	lsrs	r0, r0, #5
 801974e:	b00f      	add	sp, #60	@ 0x3c
 8019750:	bd30      	pop	{r4, r5, pc}
 8019752:	bf00      	nop

08019754 <uxr_create_session>:
 8019754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019758:	f100 0b08 	add.w	fp, r0, #8
 801975c:	4604      	mov	r4, r0
 801975e:	b0ab      	sub	sp, #172	@ 0xac
 8019760:	4658      	mov	r0, fp
 8019762:	465e      	mov	r6, fp
 8019764:	f000 ff22 	bl	801a5ac <uxr_reset_stream_storage>
 8019768:	4620      	mov	r0, r4
 801976a:	f000 fa05 	bl	8019b78 <uxr_session_header_offset>
 801976e:	2300      	movs	r3, #0
 8019770:	221c      	movs	r2, #28
 8019772:	a90b      	add	r1, sp, #44	@ 0x2c
 8019774:	9000      	str	r0, [sp, #0]
 8019776:	a812      	add	r0, sp, #72	@ 0x48
 8019778:	f7f7 fb26 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 801977c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801977e:	a912      	add	r1, sp, #72	@ 0x48
 8019780:	4620      	mov	r0, r4
 8019782:	8a1a      	ldrh	r2, [r3, #16]
 8019784:	3a04      	subs	r2, #4
 8019786:	b292      	uxth	r2, r2
 8019788:	f000 f91c 	bl	80199c4 <uxr_buffer_create_session>
 801978c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801978e:	4620      	mov	r0, r4
 8019790:	f000 f98a 	bl	8019aa8 <uxr_stamp_create_session_header>
 8019794:	a812      	add	r0, sp, #72	@ 0x48
 8019796:	f7f7 fb57 	bl	8010e48 <ucdr_buffer_length>
 801979a:	23ff      	movs	r3, #255	@ 0xff
 801979c:	4681      	mov	r9, r0
 801979e:	7163      	strb	r3, [r4, #5]
 80197a0:	230a      	movs	r3, #10
 80197a2:	9303      	str	r3, [sp, #12]
 80197a4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80197a6:	464a      	mov	r2, r9
 80197a8:	a90b      	add	r1, sp, #44	@ 0x2c
 80197aa:	e9d3 0500 	ldrd	r0, r5, [r3]
 80197ae:	47a8      	blx	r5
 80197b0:	f001 f81c 	bl	801a7ec <uxr_millis>
 80197b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80197b8:	4605      	mov	r5, r0
 80197ba:	e009      	b.n	80197d0 <uxr_create_session+0x7c>
 80197bc:	f001 f816 	bl	801a7ec <uxr_millis>
 80197c0:	1b40      	subs	r0, r0, r5
 80197c2:	7962      	ldrb	r2, [r4, #5]
 80197c4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	dd38      	ble.n	801983e <uxr_create_session+0xea>
 80197cc:	2aff      	cmp	r2, #255	@ 0xff
 80197ce:	d13c      	bne.n	801984a <uxr_create_session+0xf6>
 80197d0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80197d2:	a907      	add	r1, sp, #28
 80197d4:	6897      	ldr	r7, [r2, #8]
 80197d6:	6810      	ldr	r0, [r2, #0]
 80197d8:	aa08      	add	r2, sp, #32
 80197da:	47b8      	blx	r7
 80197dc:	2800      	cmp	r0, #0
 80197de:	d0ed      	beq.n	80197bc <uxr_create_session+0x68>
 80197e0:	a81a      	add	r0, sp, #104	@ 0x68
 80197e2:	2700      	movs	r7, #0
 80197e4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80197e8:	f7f7 fb00 	bl	8010dec <ucdr_init_buffer>
 80197ec:	f10d 031a 	add.w	r3, sp, #26
 80197f0:	aa06      	add	r2, sp, #24
 80197f2:	a91a      	add	r1, sp, #104	@ 0x68
 80197f4:	4620      	mov	r0, r4
 80197f6:	f88d 7018 	strb.w	r7, [sp, #24]
 80197fa:	f000 f97d 	bl	8019af8 <uxr_read_session_header>
 80197fe:	2800      	cmp	r0, #0
 8019800:	d0dc      	beq.n	80197bc <uxr_create_session+0x68>
 8019802:	4639      	mov	r1, r7
 8019804:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8019808:	f000 fe9a 	bl	801a540 <uxr_stream_id_from_raw>
 801980c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019810:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8019814:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8019818:	2f01      	cmp	r7, #1
 801981a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801981e:	d053      	beq.n	80198c8 <uxr_create_session+0x174>
 8019820:	2f02      	cmp	r7, #2
 8019822:	d018      	beq.n	8019856 <uxr_create_session+0x102>
 8019824:	2f00      	cmp	r7, #0
 8019826:	d1c9      	bne.n	80197bc <uxr_create_session+0x68>
 8019828:	4639      	mov	r1, r7
 801982a:	4638      	mov	r0, r7
 801982c:	f000 fe88 	bl	801a540 <uxr_stream_id_from_raw>
 8019830:	a91a      	add	r1, sp, #104	@ 0x68
 8019832:	4602      	mov	r2, r0
 8019834:	900a      	str	r0, [sp, #40]	@ 0x28
 8019836:	4620      	mov	r0, r4
 8019838:	f7ff fb1c 	bl	8018e74 <read_submessage_list>
 801983c:	e7be      	b.n	80197bc <uxr_create_session+0x68>
 801983e:	9b03      	ldr	r3, [sp, #12]
 8019840:	3b01      	subs	r3, #1
 8019842:	9303      	str	r3, [sp, #12]
 8019844:	d001      	beq.n	801984a <uxr_create_session+0xf6>
 8019846:	2aff      	cmp	r2, #255	@ 0xff
 8019848:	d0ac      	beq.n	80197a4 <uxr_create_session+0x50>
 801984a:	2a00      	cmp	r2, #0
 801984c:	d051      	beq.n	80198f2 <uxr_create_session+0x19e>
 801984e:	2000      	movs	r0, #0
 8019850:	b02b      	add	sp, #172	@ 0xac
 8019852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019856:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801985a:	4641      	mov	r1, r8
 801985c:	4630      	mov	r0, r6
 801985e:	9304      	str	r3, [sp, #16]
 8019860:	f000 ff5c 	bl	801a71c <uxr_get_input_reliable_stream>
 8019864:	4682      	mov	sl, r0
 8019866:	b348      	cbz	r0, 80198bc <uxr_create_session+0x168>
 8019868:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801986a:	a81a      	add	r0, sp, #104	@ 0x68
 801986c:	9205      	str	r2, [sp, #20]
 801986e:	f7f7 faef 	bl	8010e50 <ucdr_buffer_remaining>
 8019872:	4603      	mov	r3, r0
 8019874:	f10d 0019 	add.w	r0, sp, #25
 8019878:	9a05      	ldr	r2, [sp, #20]
 801987a:	4659      	mov	r1, fp
 801987c:	9000      	str	r0, [sp, #0]
 801987e:	4650      	mov	r0, sl
 8019880:	f002 ff40 	bl	801c704 <uxr_receive_reliable_message>
 8019884:	b1d0      	cbz	r0, 80198bc <uxr_create_session+0x168>
 8019886:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d038      	beq.n	8019900 <uxr_create_session+0x1ac>
 801988e:	9f04      	ldr	r7, [sp, #16]
 8019890:	e00a      	b.n	80198a8 <uxr_create_session+0x154>
 8019892:	f04f 0302 	mov.w	r3, #2
 8019896:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801989a:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801989e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80198a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80198a4:	f7ff fae6 	bl	8018e74 <read_submessage_list>
 80198a8:	a922      	add	r1, sp, #136	@ 0x88
 80198aa:	2204      	movs	r2, #4
 80198ac:	4650      	mov	r0, sl
 80198ae:	f002 ffab 	bl	801c808 <uxr_next_input_reliable_buffer_available>
 80198b2:	4603      	mov	r3, r0
 80198b4:	a922      	add	r1, sp, #136	@ 0x88
 80198b6:	4620      	mov	r0, r4
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d1ea      	bne.n	8019892 <uxr_create_session+0x13e>
 80198bc:	4642      	mov	r2, r8
 80198be:	9904      	ldr	r1, [sp, #16]
 80198c0:	4620      	mov	r0, r4
 80198c2:	f7ff f951 	bl	8018b68 <write_submessage_acknack.isra.0>
 80198c6:	e779      	b.n	80197bc <uxr_create_session+0x68>
 80198c8:	4641      	mov	r1, r8
 80198ca:	4630      	mov	r0, r6
 80198cc:	f000 ff1c 	bl	801a708 <uxr_get_input_best_effort_stream>
 80198d0:	2800      	cmp	r0, #0
 80198d2:	f43f af73 	beq.w	80197bc <uxr_create_session+0x68>
 80198d6:	4659      	mov	r1, fp
 80198d8:	f002 fe8a 	bl	801c5f0 <uxr_receive_best_effort_message>
 80198dc:	2800      	cmp	r0, #0
 80198de:	f43f af6d 	beq.w	80197bc <uxr_create_session+0x68>
 80198e2:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80198e6:	a91a      	add	r1, sp, #104	@ 0x68
 80198e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80198ea:	4620      	mov	r0, r4
 80198ec:	f7ff fac2 	bl	8018e74 <read_submessage_list>
 80198f0:	e764      	b.n	80197bc <uxr_create_session+0x68>
 80198f2:	4630      	mov	r0, r6
 80198f4:	f000 fe5a 	bl	801a5ac <uxr_reset_stream_storage>
 80198f8:	2001      	movs	r0, #1
 80198fa:	b02b      	add	sp, #172	@ 0xac
 80198fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019900:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8019904:	a91a      	add	r1, sp, #104	@ 0x68
 8019906:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019908:	4620      	mov	r0, r4
 801990a:	f7ff fab3 	bl	8018e74 <read_submessage_list>
 801990e:	e7be      	b.n	801988e <uxr_create_session+0x13a>

08019910 <uxr_prepare_stream_to_write_submessage>:
 8019910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019914:	b082      	sub	sp, #8
 8019916:	4604      	mov	r4, r0
 8019918:	4610      	mov	r0, r2
 801991a:	4615      	mov	r5, r2
 801991c:	461e      	mov	r6, r3
 801991e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8019922:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8019926:	f105 0904 	add.w	r9, r5, #4
 801992a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801992e:	9101      	str	r1, [sp, #4]
 8019930:	f000 ff56 	bl	801a7e0 <uxr_submessage_padding>
 8019934:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8019938:	4481      	add	r9, r0
 801993a:	2b01      	cmp	r3, #1
 801993c:	d01d      	beq.n	801997a <uxr_prepare_stream_to_write_submessage+0x6a>
 801993e:	2b02      	cmp	r3, #2
 8019940:	d116      	bne.n	8019970 <uxr_prepare_stream_to_write_submessage+0x60>
 8019942:	f104 0008 	add.w	r0, r4, #8
 8019946:	4651      	mov	r1, sl
 8019948:	f000 fed2 	bl	801a6f0 <uxr_get_output_reliable_stream>
 801994c:	4604      	mov	r4, r0
 801994e:	b158      	cbz	r0, 8019968 <uxr_prepare_stream_to_write_submessage+0x58>
 8019950:	4649      	mov	r1, r9
 8019952:	4632      	mov	r2, r6
 8019954:	f003 f91e 	bl	801cb94 <uxr_prepare_reliable_buffer_to_write>
 8019958:	4604      	mov	r4, r0
 801995a:	b12c      	cbz	r4, 8019968 <uxr_prepare_stream_to_write_submessage+0x58>
 801995c:	4643      	mov	r3, r8
 801995e:	b2aa      	uxth	r2, r5
 8019960:	4639      	mov	r1, r7
 8019962:	4630      	mov	r0, r6
 8019964:	f000 fefc 	bl	801a760 <uxr_buffer_submessage_header>
 8019968:	4620      	mov	r0, r4
 801996a:	b002      	add	sp, #8
 801996c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019970:	2400      	movs	r4, #0
 8019972:	4620      	mov	r0, r4
 8019974:	b002      	add	sp, #8
 8019976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801997a:	f104 0008 	add.w	r0, r4, #8
 801997e:	4651      	mov	r1, sl
 8019980:	f000 feae 	bl	801a6e0 <uxr_get_output_best_effort_stream>
 8019984:	4604      	mov	r4, r0
 8019986:	2800      	cmp	r0, #0
 8019988:	d0ee      	beq.n	8019968 <uxr_prepare_stream_to_write_submessage+0x58>
 801998a:	4649      	mov	r1, r9
 801998c:	4632      	mov	r2, r6
 801998e:	f003 f82b 	bl	801c9e8 <uxr_prepare_best_effort_buffer_to_write>
 8019992:	4604      	mov	r4, r0
 8019994:	e7e1      	b.n	801995a <uxr_prepare_stream_to_write_submessage+0x4a>
 8019996:	bf00      	nop

08019998 <uxr_init_session_info>:
 8019998:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801999c:	23ff      	movs	r3, #255	@ 0xff
 801999e:	7102      	strb	r2, [r0, #4]
 80199a0:	f880 c001 	strb.w	ip, [r0, #1]
 80199a4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80199a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80199ac:	7001      	strb	r1, [r0, #0]
 80199ae:	f880 c002 	strb.w	ip, [r0, #2]
 80199b2:	7143      	strb	r3, [r0, #5]
 80199b4:	70c2      	strb	r2, [r0, #3]
 80199b6:	b500      	push	{lr}
 80199b8:	f04f 0e09 	mov.w	lr, #9
 80199bc:	f8a0 e006 	strh.w	lr, [r0, #6]
 80199c0:	f85d fb04 	ldr.w	pc, [sp], #4

080199c4 <uxr_buffer_create_session>:
 80199c4:	b530      	push	{r4, r5, lr}
 80199c6:	2300      	movs	r3, #0
 80199c8:	b089      	sub	sp, #36	@ 0x24
 80199ca:	4d12      	ldr	r5, [pc, #72]	@ (8019a14 <uxr_buffer_create_session+0x50>)
 80199cc:	460c      	mov	r4, r1
 80199ce:	9307      	str	r3, [sp, #28]
 80199d0:	4619      	mov	r1, r3
 80199d2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80199d6:	2201      	movs	r2, #1
 80199d8:	9301      	str	r3, [sp, #4]
 80199da:	80c2      	strh	r2, [r0, #6]
 80199dc:	f88d 2004 	strb.w	r2, [sp, #4]
 80199e0:	682a      	ldr	r2, [r5, #0]
 80199e2:	9303      	str	r3, [sp, #12]
 80199e4:	9200      	str	r2, [sp, #0]
 80199e6:	88aa      	ldrh	r2, [r5, #4]
 80199e8:	9306      	str	r3, [sp, #24]
 80199ea:	f8ad 2006 	strh.w	r2, [sp, #6]
 80199ee:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80199f2:	9202      	str	r2, [sp, #8]
 80199f4:	7802      	ldrb	r2, [r0, #0]
 80199f6:	4620      	mov	r0, r4
 80199f8:	f88d 200c 	strb.w	r2, [sp, #12]
 80199fc:	2210      	movs	r2, #16
 80199fe:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8019a02:	f000 fead 	bl	801a760 <uxr_buffer_submessage_header>
 8019a06:	4669      	mov	r1, sp
 8019a08:	4620      	mov	r0, r4
 8019a0a:	f001 fd97 	bl	801b53c <uxr_serialize_CREATE_CLIENT_Payload>
 8019a0e:	b009      	add	sp, #36	@ 0x24
 8019a10:	bd30      	pop	{r4, r5, pc}
 8019a12:	bf00      	nop
 8019a14:	0801eb38 	.word	0x0801eb38

08019a18 <uxr_buffer_delete_session>:
 8019a18:	4a0c      	ldr	r2, [pc, #48]	@ (8019a4c <uxr_buffer_delete_session+0x34>)
 8019a1a:	2302      	movs	r3, #2
 8019a1c:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8019a20:	b510      	push	{r4, lr}
 8019a22:	460c      	mov	r4, r1
 8019a24:	b082      	sub	sp, #8
 8019a26:	8911      	ldrh	r1, [r2, #8]
 8019a28:	2204      	movs	r2, #4
 8019a2a:	80c3      	strh	r3, [r0, #6]
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8019a32:	4620      	mov	r0, r4
 8019a34:	2103      	movs	r1, #3
 8019a36:	f8ad c004 	strh.w	ip, [sp, #4]
 8019a3a:	f000 fe91 	bl	801a760 <uxr_buffer_submessage_header>
 8019a3e:	a901      	add	r1, sp, #4
 8019a40:	4620      	mov	r0, r4
 8019a42:	f001 fe23 	bl	801b68c <uxr_serialize_DELETE_Payload>
 8019a46:	b002      	add	sp, #8
 8019a48:	bd10      	pop	{r4, pc}
 8019a4a:	bf00      	nop
 8019a4c:	0801eb38 	.word	0x0801eb38

08019a50 <uxr_read_create_session_status>:
 8019a50:	b510      	push	{r4, lr}
 8019a52:	460b      	mov	r3, r1
 8019a54:	b088      	sub	sp, #32
 8019a56:	4604      	mov	r4, r0
 8019a58:	a901      	add	r1, sp, #4
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	f001 fe26 	bl	801b6ac <uxr_deserialize_STATUS_AGENT_Payload>
 8019a60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019a64:	7163      	strb	r3, [r4, #5]
 8019a66:	b008      	add	sp, #32
 8019a68:	bd10      	pop	{r4, pc}
 8019a6a:	bf00      	nop

08019a6c <uxr_read_delete_session_status>:
 8019a6c:	b510      	push	{r4, lr}
 8019a6e:	b084      	sub	sp, #16
 8019a70:	4604      	mov	r4, r0
 8019a72:	4608      	mov	r0, r1
 8019a74:	a902      	add	r1, sp, #8
 8019a76:	f001 fe49 	bl	801b70c <uxr_deserialize_STATUS_Payload>
 8019a7a:	88e3      	ldrh	r3, [r4, #6]
 8019a7c:	2b02      	cmp	r3, #2
 8019a7e:	d001      	beq.n	8019a84 <uxr_read_delete_session_status+0x18>
 8019a80:	b004      	add	sp, #16
 8019a82:	bd10      	pop	{r4, pc}
 8019a84:	f10d 000a 	add.w	r0, sp, #10
 8019a88:	f7fe fec4 	bl	8018814 <uxr_object_id_from_raw>
 8019a8c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8019a90:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8019a94:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019a98:	b29b      	uxth	r3, r3
 8019a9a:	2b02      	cmp	r3, #2
 8019a9c:	d1f0      	bne.n	8019a80 <uxr_read_delete_session_status+0x14>
 8019a9e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019aa2:	7163      	strb	r3, [r4, #5]
 8019aa4:	e7ec      	b.n	8019a80 <uxr_read_delete_session_status+0x14>
 8019aa6:	bf00      	nop

08019aa8 <uxr_stamp_create_session_header>:
 8019aa8:	b510      	push	{r4, lr}
 8019aaa:	2208      	movs	r2, #8
 8019aac:	b08a      	sub	sp, #40	@ 0x28
 8019aae:	4604      	mov	r4, r0
 8019ab0:	eb0d 0002 	add.w	r0, sp, r2
 8019ab4:	f7f7 f99a 	bl	8010dec <ucdr_init_buffer>
 8019ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019abc:	2300      	movs	r3, #0
 8019abe:	a802      	add	r0, sp, #8
 8019ac0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8019ac4:	9400      	str	r4, [sp, #0]
 8019ac6:	461a      	mov	r2, r3
 8019ac8:	f000 fef2 	bl	801a8b0 <uxr_serialize_message_header>
 8019acc:	b00a      	add	sp, #40	@ 0x28
 8019ace:	bd10      	pop	{r4, pc}

08019ad0 <uxr_stamp_session_header>:
 8019ad0:	b530      	push	{r4, r5, lr}
 8019ad2:	b08d      	sub	sp, #52	@ 0x34
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	460d      	mov	r5, r1
 8019ad8:	4619      	mov	r1, r3
 8019ada:	a804      	add	r0, sp, #16
 8019adc:	9203      	str	r2, [sp, #12]
 8019ade:	2208      	movs	r2, #8
 8019ae0:	f7f7 f984 	bl	8010dec <ucdr_init_buffer>
 8019ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ae8:	9b03      	ldr	r3, [sp, #12]
 8019aea:	462a      	mov	r2, r5
 8019aec:	a804      	add	r0, sp, #16
 8019aee:	9400      	str	r4, [sp, #0]
 8019af0:	f000 fede 	bl	801a8b0 <uxr_serialize_message_header>
 8019af4:	b00d      	add	sp, #52	@ 0x34
 8019af6:	bd30      	pop	{r4, r5, pc}

08019af8 <uxr_read_session_header>:
 8019af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019afc:	4607      	mov	r7, r0
 8019afe:	b084      	sub	sp, #16
 8019b00:	4608      	mov	r0, r1
 8019b02:	460c      	mov	r4, r1
 8019b04:	4615      	mov	r5, r2
 8019b06:	461e      	mov	r6, r3
 8019b08:	f7f7 f9a2 	bl	8010e50 <ucdr_buffer_remaining>
 8019b0c:	2808      	cmp	r0, #8
 8019b0e:	d803      	bhi.n	8019b18 <uxr_read_session_header+0x20>
 8019b10:	2000      	movs	r0, #0
 8019b12:	b004      	add	sp, #16
 8019b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b18:	f10d 080c 	add.w	r8, sp, #12
 8019b1c:	4633      	mov	r3, r6
 8019b1e:	462a      	mov	r2, r5
 8019b20:	4620      	mov	r0, r4
 8019b22:	f10d 010b 	add.w	r1, sp, #11
 8019b26:	f8cd 8000 	str.w	r8, [sp]
 8019b2a:	f000 fedf 	bl	801a8ec <uxr_deserialize_message_header>
 8019b2e:	783a      	ldrb	r2, [r7, #0]
 8019b30:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8019b34:	4293      	cmp	r3, r2
 8019b36:	d1eb      	bne.n	8019b10 <uxr_read_session_header+0x18>
 8019b38:	061b      	lsls	r3, r3, #24
 8019b3a:	d41b      	bmi.n	8019b74 <uxr_read_session_header+0x7c>
 8019b3c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8019b40:	787b      	ldrb	r3, [r7, #1]
 8019b42:	429a      	cmp	r2, r3
 8019b44:	d003      	beq.n	8019b4e <uxr_read_session_header+0x56>
 8019b46:	2001      	movs	r0, #1
 8019b48:	f080 0001 	eor.w	r0, r0, #1
 8019b4c:	e7e1      	b.n	8019b12 <uxr_read_session_header+0x1a>
 8019b4e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8019b52:	1cb8      	adds	r0, r7, #2
 8019b54:	78bb      	ldrb	r3, [r7, #2]
 8019b56:	429a      	cmp	r2, r3
 8019b58:	d1f5      	bne.n	8019b46 <uxr_read_session_header+0x4e>
 8019b5a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8019b5e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8019b62:	429a      	cmp	r2, r3
 8019b64:	d1ef      	bne.n	8019b46 <uxr_read_session_header+0x4e>
 8019b66:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8019b6a:	7843      	ldrb	r3, [r0, #1]
 8019b6c:	429a      	cmp	r2, r3
 8019b6e:	d1ea      	bne.n	8019b46 <uxr_read_session_header+0x4e>
 8019b70:	2000      	movs	r0, #0
 8019b72:	e7e9      	b.n	8019b48 <uxr_read_session_header+0x50>
 8019b74:	2001      	movs	r0, #1
 8019b76:	e7cc      	b.n	8019b12 <uxr_read_session_header+0x1a>

08019b78 <uxr_session_header_offset>:
 8019b78:	f990 3000 	ldrsb.w	r3, [r0]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	bfac      	ite	ge
 8019b80:	2008      	movge	r0, #8
 8019b82:	2004      	movlt	r0, #4
 8019b84:	4770      	bx	lr
 8019b86:	bf00      	nop

08019b88 <uxr_init_base_object_request>:
 8019b88:	b510      	push	{r4, lr}
 8019b8a:	b082      	sub	sp, #8
 8019b8c:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8019b90:	9101      	str	r1, [sp, #4]
 8019b92:	88c3      	ldrh	r3, [r0, #6]
 8019b94:	f1a3 010a 	sub.w	r1, r3, #10
 8019b98:	b289      	uxth	r1, r1
 8019b9a:	42a1      	cmp	r1, r4
 8019b9c:	d80f      	bhi.n	8019bbe <uxr_init_base_object_request+0x36>
 8019b9e:	3301      	adds	r3, #1
 8019ba0:	b29c      	uxth	r4, r3
 8019ba2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8019ba6:	b2db      	uxtb	r3, r3
 8019ba8:	80c4      	strh	r4, [r0, #6]
 8019baa:	1c91      	adds	r1, r2, #2
 8019bac:	9801      	ldr	r0, [sp, #4]
 8019bae:	f882 c000 	strb.w	ip, [r2]
 8019bb2:	7053      	strb	r3, [r2, #1]
 8019bb4:	f7fe fe42 	bl	801883c <uxr_object_id_to_raw>
 8019bb8:	4620      	mov	r0, r4
 8019bba:	b002      	add	sp, #8
 8019bbc:	bd10      	pop	{r4, pc}
 8019bbe:	230a      	movs	r3, #10
 8019bc0:	f04f 0c00 	mov.w	ip, #0
 8019bc4:	461c      	mov	r4, r3
 8019bc6:	e7ef      	b.n	8019ba8 <uxr_init_base_object_request+0x20>

08019bc8 <uxr_parse_base_object_request>:
 8019bc8:	b570      	push	{r4, r5, r6, lr}
 8019bca:	4604      	mov	r4, r0
 8019bcc:	3002      	adds	r0, #2
 8019bce:	460d      	mov	r5, r1
 8019bd0:	4616      	mov	r6, r2
 8019bd2:	f7fe fe1f 	bl	8018814 <uxr_object_id_from_raw>
 8019bd6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8019bda:	8028      	strh	r0, [r5, #0]
 8019bdc:	806b      	strh	r3, [r5, #2]
 8019bde:	7822      	ldrb	r2, [r4, #0]
 8019be0:	7863      	ldrb	r3, [r4, #1]
 8019be2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019be6:	8033      	strh	r3, [r6, #0]
 8019be8:	bd70      	pop	{r4, r5, r6, pc}
 8019bea:	bf00      	nop

08019bec <uxr_init_framing_io>:
 8019bec:	2300      	movs	r3, #0
 8019bee:	7041      	strb	r1, [r0, #1]
 8019bf0:	7003      	strb	r3, [r0, #0]
 8019bf2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8019bf4:	4770      	bx	lr
 8019bf6:	bf00      	nop

08019bf8 <uxr_write_framed_msg>:
 8019bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bfc:	4617      	mov	r7, r2
 8019bfe:	7842      	ldrb	r2, [r0, #1]
 8019c00:	460e      	mov	r6, r1
 8019c02:	b083      	sub	sp, #12
 8019c04:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8019c08:	469b      	mov	fp, r3
 8019c0a:	237e      	movs	r3, #126	@ 0x7e
 8019c0c:	4604      	mov	r4, r0
 8019c0e:	2901      	cmp	r1, #1
 8019c10:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8019c14:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8019c18:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8019c1c:	f240 8115 	bls.w	8019e4a <uxr_write_framed_msg+0x252>
 8019c20:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8019c24:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8019c28:	2202      	movs	r2, #2
 8019c2a:	2901      	cmp	r1, #1
 8019c2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019c30:	d952      	bls.n	8019cd8 <uxr_write_framed_msg+0xe0>
 8019c32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c34:	2103      	movs	r1, #3
 8019c36:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8019c3a:	b2dd      	uxtb	r5, r3
 8019c3c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019c40:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8019c44:	2a01      	cmp	r2, #1
 8019c46:	d95c      	bls.n	8019d02 <uxr_write_framed_msg+0x10a>
 8019c48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c4a:	1862      	adds	r2, r4, r1
 8019c4c:	3101      	adds	r1, #1
 8019c4e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019c52:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8019c56:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019c5a:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8019c5e:	2a01      	cmp	r2, #1
 8019c60:	d961      	bls.n	8019d26 <uxr_write_framed_msg+0x12e>
 8019c62:	1c4a      	adds	r2, r1, #1
 8019c64:	4421      	add	r1, r4
 8019c66:	b2d2      	uxtb	r2, r2
 8019c68:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8019c6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d06a      	beq.n	8019d4a <uxr_write_framed_msg+0x152>
 8019c74:	f04f 0800 	mov.w	r8, #0
 8019c78:	46c1      	mov	r9, r8
 8019c7a:	e016      	b.n	8019caa <uxr_write_framed_msg+0xb2>
 8019c7c:	2a29      	cmp	r2, #41	@ 0x29
 8019c7e:	d868      	bhi.n	8019d52 <uxr_write_framed_msg+0x15a>
 8019c80:	18a0      	adds	r0, r4, r2
 8019c82:	3201      	adds	r2, #1
 8019c84:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8019c88:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019c8c:	ea88 0101 	eor.w	r1, r8, r1
 8019c90:	4b7d      	ldr	r3, [pc, #500]	@ (8019e88 <uxr_write_framed_msg+0x290>)
 8019c92:	f109 0901 	add.w	r9, r9, #1
 8019c96:	b2c9      	uxtb	r1, r1
 8019c98:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8019c9c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019ca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019ca2:	454b      	cmp	r3, r9
 8019ca4:	d969      	bls.n	8019d7a <uxr_write_framed_msg+0x182>
 8019ca6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019caa:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8019cae:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8019cb2:	2801      	cmp	r0, #1
 8019cb4:	d8e2      	bhi.n	8019c7c <uxr_write_framed_msg+0x84>
 8019cb6:	1c50      	adds	r0, r2, #1
 8019cb8:	b2c0      	uxtb	r0, r0
 8019cba:	2829      	cmp	r0, #41	@ 0x29
 8019cbc:	d849      	bhi.n	8019d52 <uxr_write_framed_msg+0x15a>
 8019cbe:	18a0      	adds	r0, r4, r2
 8019cc0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8019cc4:	3202      	adds	r2, #2
 8019cc6:	f081 0520 	eor.w	r5, r1, #32
 8019cca:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8019cce:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8019cd2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019cd6:	e7d9      	b.n	8019c8c <uxr_write_framed_msg+0x94>
 8019cd8:	2104      	movs	r1, #4
 8019cda:	f04f 0c03 	mov.w	ip, #3
 8019cde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019ce0:	4422      	add	r2, r4
 8019ce2:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8019ce6:	44a4      	add	ip, r4
 8019ce8:	b2dd      	uxtb	r5, r3
 8019cea:	f080 0020 	eor.w	r0, r0, #32
 8019cee:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8019cf2:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8019cf6:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8019cfa:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019cfe:	2a01      	cmp	r2, #1
 8019d00:	d8a2      	bhi.n	8019c48 <uxr_write_framed_msg+0x50>
 8019d02:	1862      	adds	r2, r4, r1
 8019d04:	207d      	movs	r0, #125	@ 0x7d
 8019d06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019d08:	f085 0520 	eor.w	r5, r5, #32
 8019d0c:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8019d10:	3102      	adds	r1, #2
 8019d12:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019d16:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8019d1a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019d1e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8019d22:	2a01      	cmp	r2, #1
 8019d24:	d89d      	bhi.n	8019c62 <uxr_write_framed_msg+0x6a>
 8019d26:	1c4d      	adds	r5, r1, #1
 8019d28:	1c8a      	adds	r2, r1, #2
 8019d2a:	f080 0020 	eor.w	r0, r0, #32
 8019d2e:	4421      	add	r1, r4
 8019d30:	fa54 f585 	uxtab	r5, r4, r5
 8019d34:	b2d2      	uxtb	r2, r2
 8019d36:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8019d3a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8019d3e:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8019d42:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d194      	bne.n	8019c74 <uxr_write_framed_msg+0x7c>
 8019d4a:	4619      	mov	r1, r3
 8019d4c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019d50:	e019      	b.n	8019d86 <uxr_write_framed_msg+0x18e>
 8019d52:	2500      	movs	r5, #0
 8019d54:	e000      	b.n	8019d58 <uxr_write_framed_msg+0x160>
 8019d56:	b160      	cbz	r0, 8019d72 <uxr_write_framed_msg+0x17a>
 8019d58:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019d5c:	1b52      	subs	r2, r2, r5
 8019d5e:	4653      	mov	r3, sl
 8019d60:	4638      	mov	r0, r7
 8019d62:	4421      	add	r1, r4
 8019d64:	47b0      	blx	r6
 8019d66:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019d6a:	4405      	add	r5, r0
 8019d6c:	4295      	cmp	r5, r2
 8019d6e:	d3f2      	bcc.n	8019d56 <uxr_write_framed_msg+0x15e>
 8019d70:	d066      	beq.n	8019e40 <uxr_write_framed_msg+0x248>
 8019d72:	2000      	movs	r0, #0
 8019d74:	b003      	add	sp, #12
 8019d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d7a:	fa5f f188 	uxtb.w	r1, r8
 8019d7e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019d82:	f8ad 8004 	strh.w	r8, [sp, #4]
 8019d86:	f04f 0900 	mov.w	r9, #0
 8019d8a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8019d8e:	46c8      	mov	r8, r9
 8019d90:	e013      	b.n	8019dba <uxr_write_framed_msg+0x1c2>
 8019d92:	2a29      	cmp	r2, #41	@ 0x29
 8019d94:	d824      	bhi.n	8019de0 <uxr_write_framed_msg+0x1e8>
 8019d96:	18a3      	adds	r3, r4, r2
 8019d98:	3201      	adds	r2, #1
 8019d9a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8019d9e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019da2:	f109 0901 	add.w	r9, r9, #1
 8019da6:	f1b9 0f02 	cmp.w	r9, #2
 8019daa:	d02d      	beq.n	8019e08 <uxr_write_framed_msg+0x210>
 8019dac:	f109 0308 	add.w	r3, r9, #8
 8019db0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019db4:	446b      	add	r3, sp
 8019db6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8019dba:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8019dbe:	2b01      	cmp	r3, #1
 8019dc0:	d8e7      	bhi.n	8019d92 <uxr_write_framed_msg+0x19a>
 8019dc2:	1c53      	adds	r3, r2, #1
 8019dc4:	b2db      	uxtb	r3, r3
 8019dc6:	2b29      	cmp	r3, #41	@ 0x29
 8019dc8:	d80a      	bhi.n	8019de0 <uxr_write_framed_msg+0x1e8>
 8019dca:	18a3      	adds	r3, r4, r2
 8019dcc:	f081 0120 	eor.w	r1, r1, #32
 8019dd0:	3202      	adds	r2, #2
 8019dd2:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8019dd6:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8019dda:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019dde:	e7e0      	b.n	8019da2 <uxr_write_framed_msg+0x1aa>
 8019de0:	2500      	movs	r5, #0
 8019de2:	e001      	b.n	8019de8 <uxr_write_framed_msg+0x1f0>
 8019de4:	2800      	cmp	r0, #0
 8019de6:	d0c4      	beq.n	8019d72 <uxr_write_framed_msg+0x17a>
 8019de8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019dec:	1b52      	subs	r2, r2, r5
 8019dee:	4653      	mov	r3, sl
 8019df0:	4638      	mov	r0, r7
 8019df2:	4421      	add	r1, r4
 8019df4:	47b0      	blx	r6
 8019df6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019dfa:	4405      	add	r5, r0
 8019dfc:	4295      	cmp	r5, r2
 8019dfe:	d3f1      	bcc.n	8019de4 <uxr_write_framed_msg+0x1ec>
 8019e00:	d1b7      	bne.n	8019d72 <uxr_write_framed_msg+0x17a>
 8019e02:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8019e06:	e7d1      	b.n	8019dac <uxr_write_framed_msg+0x1b4>
 8019e08:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019e0c:	b19a      	cbz	r2, 8019e36 <uxr_write_framed_msg+0x23e>
 8019e0e:	2500      	movs	r5, #0
 8019e10:	e001      	b.n	8019e16 <uxr_write_framed_msg+0x21e>
 8019e12:	2800      	cmp	r0, #0
 8019e14:	d0ad      	beq.n	8019d72 <uxr_write_framed_msg+0x17a>
 8019e16:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019e1a:	1b52      	subs	r2, r2, r5
 8019e1c:	4653      	mov	r3, sl
 8019e1e:	4638      	mov	r0, r7
 8019e20:	4421      	add	r1, r4
 8019e22:	47b0      	blx	r6
 8019e24:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019e28:	4405      	add	r5, r0
 8019e2a:	4295      	cmp	r5, r2
 8019e2c:	d3f1      	bcc.n	8019e12 <uxr_write_framed_msg+0x21a>
 8019e2e:	d1a0      	bne.n	8019d72 <uxr_write_framed_msg+0x17a>
 8019e30:	2300      	movs	r3, #0
 8019e32:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8019e36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e38:	b298      	uxth	r0, r3
 8019e3a:	b003      	add	sp, #12
 8019e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e40:	f04f 0300 	mov.w	r3, #0
 8019e44:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8019e48:	e72a      	b.n	8019ca0 <uxr_write_framed_msg+0xa8>
 8019e4a:	217d      	movs	r1, #125	@ 0x7d
 8019e4c:	f082 0220 	eor.w	r2, r2, #32
 8019e50:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8019e54:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8019e58:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8019e5c:	2203      	movs	r2, #3
 8019e5e:	2901      	cmp	r1, #1
 8019e60:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019e64:	d803      	bhi.n	8019e6e <uxr_write_framed_msg+0x276>
 8019e66:	2105      	movs	r1, #5
 8019e68:	f04f 0c04 	mov.w	ip, #4
 8019e6c:	e737      	b.n	8019cde <uxr_write_framed_msg+0xe6>
 8019e6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e70:	2104      	movs	r1, #4
 8019e72:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8019e76:	b2dd      	uxtb	r5, r3
 8019e78:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019e7c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8019e80:	2a01      	cmp	r2, #1
 8019e82:	f63f aee1 	bhi.w	8019c48 <uxr_write_framed_msg+0x50>
 8019e86:	e73c      	b.n	8019d02 <uxr_write_framed_msg+0x10a>
 8019e88:	080207f4 	.word	0x080207f4

08019e8c <uxr_framing_read_transport>:
 8019e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e90:	4604      	mov	r4, r0
 8019e92:	b085      	sub	sp, #20
 8019e94:	4692      	mov	sl, r2
 8019e96:	4689      	mov	r9, r1
 8019e98:	461d      	mov	r5, r3
 8019e9a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8019e9c:	f000 fca6 	bl	801a7ec <uxr_millis>
 8019ea0:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8019ea4:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8019ea8:	4680      	mov	r8, r0
 8019eaa:	42ba      	cmp	r2, r7
 8019eac:	d05f      	beq.n	8019f6e <uxr_framing_read_transport+0xe2>
 8019eae:	d817      	bhi.n	8019ee0 <uxr_framing_read_transport+0x54>
 8019eb0:	3f01      	subs	r7, #1
 8019eb2:	1aba      	subs	r2, r7, r2
 8019eb4:	2700      	movs	r7, #0
 8019eb6:	b2d2      	uxtb	r2, r2
 8019eb8:	42b2      	cmp	r2, r6
 8019eba:	d81a      	bhi.n	8019ef2 <uxr_framing_read_transport+0x66>
 8019ebc:	19d3      	adds	r3, r2, r7
 8019ebe:	42b3      	cmp	r3, r6
 8019ec0:	d852      	bhi.n	8019f68 <uxr_framing_read_transport+0xdc>
 8019ec2:	b9d2      	cbnz	r2, 8019efa <uxr_framing_read_transport+0x6e>
 8019ec4:	2600      	movs	r6, #0
 8019ec6:	f000 fc91 	bl	801a7ec <uxr_millis>
 8019eca:	682b      	ldr	r3, [r5, #0]
 8019ecc:	eba0 0008 	sub.w	r0, r0, r8
 8019ed0:	1a1b      	subs	r3, r3, r0
 8019ed2:	4630      	mov	r0, r6
 8019ed4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019ed8:	602b      	str	r3, [r5, #0]
 8019eda:	b005      	add	sp, #20
 8019edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ee0:	2f00      	cmp	r7, #0
 8019ee2:	d060      	beq.n	8019fa6 <uxr_framing_read_transport+0x11a>
 8019ee4:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8019ee8:	3f01      	subs	r7, #1
 8019eea:	b2d2      	uxtb	r2, r2
 8019eec:	b2ff      	uxtb	r7, r7
 8019eee:	42b2      	cmp	r2, r6
 8019ef0:	d9e4      	bls.n	8019ebc <uxr_framing_read_transport+0x30>
 8019ef2:	b2f2      	uxtb	r2, r6
 8019ef4:	2700      	movs	r7, #0
 8019ef6:	2a00      	cmp	r2, #0
 8019ef8:	d0e4      	beq.n	8019ec4 <uxr_framing_read_transport+0x38>
 8019efa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019efc:	4650      	mov	r0, sl
 8019efe:	9203      	str	r2, [sp, #12]
 8019f00:	9300      	str	r3, [sp, #0]
 8019f02:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019f06:	682b      	ldr	r3, [r5, #0]
 8019f08:	3102      	adds	r1, #2
 8019f0a:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8019fb0 <uxr_framing_read_transport+0x124>
 8019f0e:	4421      	add	r1, r4
 8019f10:	47c8      	blx	r9
 8019f12:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019f16:	4606      	mov	r6, r0
 8019f18:	4403      	add	r3, r0
 8019f1a:	0859      	lsrs	r1, r3, #1
 8019f1c:	fbab 2101 	umull	r2, r1, fp, r1
 8019f20:	222a      	movs	r2, #42	@ 0x2a
 8019f22:	0889      	lsrs	r1, r1, #2
 8019f24:	fb02 3111 	mls	r1, r2, r1, r3
 8019f28:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8019f2c:	2800      	cmp	r0, #0
 8019f2e:	d0c9      	beq.n	8019ec4 <uxr_framing_read_transport+0x38>
 8019f30:	9a03      	ldr	r2, [sp, #12]
 8019f32:	4290      	cmp	r0, r2
 8019f34:	d1c7      	bne.n	8019ec6 <uxr_framing_read_transport+0x3a>
 8019f36:	2f00      	cmp	r7, #0
 8019f38:	d0c5      	beq.n	8019ec6 <uxr_framing_read_transport+0x3a>
 8019f3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f3c:	3102      	adds	r1, #2
 8019f3e:	463a      	mov	r2, r7
 8019f40:	4650      	mov	r0, sl
 8019f42:	4421      	add	r1, r4
 8019f44:	9300      	str	r3, [sp, #0]
 8019f46:	2300      	movs	r3, #0
 8019f48:	47c8      	blx	r9
 8019f4a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8019f4e:	4406      	add	r6, r0
 8019f50:	1813      	adds	r3, r2, r0
 8019f52:	085a      	lsrs	r2, r3, #1
 8019f54:	fbab 1b02 	umull	r1, fp, fp, r2
 8019f58:	222a      	movs	r2, #42	@ 0x2a
 8019f5a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8019f5e:	fb02 331b 	mls	r3, r2, fp, r3
 8019f62:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8019f66:	e7ae      	b.n	8019ec6 <uxr_framing_read_transport+0x3a>
 8019f68:	1ab6      	subs	r6, r6, r2
 8019f6a:	b2f7      	uxtb	r7, r6
 8019f6c:	e7a9      	b.n	8019ec2 <uxr_framing_read_transport+0x36>
 8019f6e:	2300      	movs	r3, #0
 8019f70:	2e28      	cmp	r6, #40	@ 0x28
 8019f72:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8019f74:	d9bd      	bls.n	8019ef2 <uxr_framing_read_transport+0x66>
 8019f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f78:	2229      	movs	r2, #41	@ 0x29
 8019f7a:	1ca1      	adds	r1, r4, #2
 8019f7c:	4650      	mov	r0, sl
 8019f7e:	9300      	str	r3, [sp, #0]
 8019f80:	682b      	ldr	r3, [r5, #0]
 8019f82:	47c8      	blx	r9
 8019f84:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019f88:	4606      	mov	r6, r0
 8019f8a:	212a      	movs	r1, #42	@ 0x2a
 8019f8c:	4403      	add	r3, r0
 8019f8e:	4808      	ldr	r0, [pc, #32]	@ (8019fb0 <uxr_framing_read_transport+0x124>)
 8019f90:	085a      	lsrs	r2, r3, #1
 8019f92:	fba0 0202 	umull	r0, r2, r0, r2
 8019f96:	0892      	lsrs	r2, r2, #2
 8019f98:	fb01 3312 	mls	r3, r1, r2, r3
 8019f9c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8019fa0:	2e00      	cmp	r6, #0
 8019fa2:	d08f      	beq.n	8019ec4 <uxr_framing_read_transport+0x38>
 8019fa4:	e78f      	b.n	8019ec6 <uxr_framing_read_transport+0x3a>
 8019fa6:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8019faa:	b2d2      	uxtb	r2, r2
 8019fac:	e784      	b.n	8019eb8 <uxr_framing_read_transport+0x2c>
 8019fae:	bf00      	nop
 8019fb0:	30c30c31 	.word	0x30c30c31

08019fb4 <uxr_read_framed_msg>:
 8019fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fb8:	461e      	mov	r6, r3
 8019fba:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8019fbe:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8019fc2:	b083      	sub	sp, #12
 8019fc4:	4604      	mov	r4, r0
 8019fc6:	4688      	mov	r8, r1
 8019fc8:	429d      	cmp	r5, r3
 8019fca:	4691      	mov	r9, r2
 8019fcc:	f000 818c 	beq.w	801a2e8 <uxr_read_framed_msg+0x334>
 8019fd0:	7823      	ldrb	r3, [r4, #0]
 8019fd2:	4dc3      	ldr	r5, [pc, #780]	@ (801a2e0 <uxr_read_framed_msg+0x32c>)
 8019fd4:	4fc3      	ldr	r7, [pc, #780]	@ (801a2e4 <uxr_read_framed_msg+0x330>)
 8019fd6:	2b07      	cmp	r3, #7
 8019fd8:	d8fd      	bhi.n	8019fd6 <uxr_read_framed_msg+0x22>
 8019fda:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019fde:	011c      	.short	0x011c
 8019fe0:	00d900fb 	.word	0x00d900fb
 8019fe4:	008f00ba 	.word	0x008f00ba
 8019fe8:	00320051 	.word	0x00320051
 8019fec:	0008      	.short	0x0008
 8019fee:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019ff2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019ff6:	4299      	cmp	r1, r3
 8019ff8:	f000 814d 	beq.w	801a296 <uxr_read_framed_msg+0x2e2>
 8019ffc:	18e2      	adds	r2, r4, r3
 8019ffe:	7892      	ldrb	r2, [r2, #2]
 801a000:	2a7d      	cmp	r2, #125	@ 0x7d
 801a002:	f000 81b8 	beq.w	801a376 <uxr_read_framed_msg+0x3c2>
 801a006:	3301      	adds	r3, #1
 801a008:	212a      	movs	r1, #42	@ 0x2a
 801a00a:	2a7e      	cmp	r2, #126	@ 0x7e
 801a00c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801a010:	fba5 c000 	umull	ip, r0, r5, r0
 801a014:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801a018:	fb01 3310 	mls	r3, r1, r0, r3
 801a01c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a020:	f000 8257 	beq.w	801a4d2 <uxr_read_framed_msg+0x51e>
 801a024:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801a026:	2000      	movs	r0, #0
 801a028:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801a02a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801a02e:	7020      	strb	r0, [r4, #0]
 801a030:	b29b      	uxth	r3, r3
 801a032:	4299      	cmp	r1, r3
 801a034:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801a036:	f000 8178 	beq.w	801a32a <uxr_read_framed_msg+0x376>
 801a03a:	2000      	movs	r0, #0
 801a03c:	b003      	add	sp, #12
 801a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a042:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801a046:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a04a:	4298      	cmp	r0, r3
 801a04c:	f000 8132 	beq.w	801a2b4 <uxr_read_framed_msg+0x300>
 801a050:	18e2      	adds	r2, r4, r3
 801a052:	7891      	ldrb	r1, [r2, #2]
 801a054:	297d      	cmp	r1, #125	@ 0x7d
 801a056:	f000 8170 	beq.w	801a33a <uxr_read_framed_msg+0x386>
 801a05a:	3301      	adds	r3, #1
 801a05c:	202a      	movs	r0, #42	@ 0x2a
 801a05e:	297e      	cmp	r1, #126	@ 0x7e
 801a060:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a064:	fba5 c202 	umull	ip, r2, r5, r2
 801a068:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a06c:	fb00 3312 	mls	r3, r0, r2, r3
 801a070:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a074:	f000 821d 	beq.w	801a4b2 <uxr_read_framed_msg+0x4fe>
 801a078:	2307      	movs	r3, #7
 801a07a:	86a1      	strh	r1, [r4, #52]	@ 0x34
 801a07c:	7023      	strb	r3, [r4, #0]
 801a07e:	e7aa      	b.n	8019fd6 <uxr_read_framed_msg+0x22>
 801a080:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801a082:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801a086:	459e      	cmp	lr, r3
 801a088:	d827      	bhi.n	801a0da <uxr_read_framed_msg+0x126>
 801a08a:	e032      	b.n	801a0f2 <uxr_read_framed_msg+0x13e>
 801a08c:	fba5 b101 	umull	fp, r1, r5, r1
 801a090:	f89c c002 	ldrb.w	ip, [ip, #2]
 801a094:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801a098:	0889      	lsrs	r1, r1, #2
 801a09a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801a09e:	fb0b 0111 	mls	r1, fp, r1, r0
 801a0a2:	f000 80d4 	beq.w	801a24e <uxr_read_framed_msg+0x29a>
 801a0a6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801a0aa:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801a0ae:	f000 80cb 	beq.w	801a248 <uxr_read_framed_msg+0x294>
 801a0b2:	f806 c003 	strb.w	ip, [r6, r3]
 801a0b6:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801a0b8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801a0ba:	ea80 010c 	eor.w	r1, r0, ip
 801a0be:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801a0c2:	3301      	adds	r3, #1
 801a0c4:	b2c9      	uxtb	r1, r1
 801a0c6:	b29b      	uxth	r3, r3
 801a0c8:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801a0cc:	4573      	cmp	r3, lr
 801a0ce:	8663      	strh	r3, [r4, #50]	@ 0x32
 801a0d0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801a0d4:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801a0d6:	f080 811d 	bcs.w	801a314 <uxr_read_framed_msg+0x360>
 801a0da:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801a0de:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801a0e2:	1c50      	adds	r0, r2, #1
 801a0e4:	eb04 0c02 	add.w	ip, r4, r2
 801a0e8:	4592      	cmp	sl, r2
 801a0ea:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801a0ee:	d1cd      	bne.n	801a08c <uxr_read_framed_msg+0xd8>
 801a0f0:	459e      	cmp	lr, r3
 801a0f2:	f040 8114 	bne.w	801a31e <uxr_read_framed_msg+0x36a>
 801a0f6:	2306      	movs	r3, #6
 801a0f8:	7023      	strb	r3, [r4, #0]
 801a0fa:	e76c      	b.n	8019fd6 <uxr_read_framed_msg+0x22>
 801a0fc:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801a100:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a104:	4298      	cmp	r0, r3
 801a106:	f000 80c6 	beq.w	801a296 <uxr_read_framed_msg+0x2e2>
 801a10a:	18e2      	adds	r2, r4, r3
 801a10c:	7891      	ldrb	r1, [r2, #2]
 801a10e:	297d      	cmp	r1, #125	@ 0x7d
 801a110:	f000 8193 	beq.w	801a43a <uxr_read_framed_msg+0x486>
 801a114:	3301      	adds	r3, #1
 801a116:	202a      	movs	r0, #42	@ 0x2a
 801a118:	297e      	cmp	r1, #126	@ 0x7e
 801a11a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a11e:	fba5 c202 	umull	ip, r2, r5, r2
 801a122:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a126:	fb00 3312 	mls	r3, r0, r2, r3
 801a12a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a12e:	f000 81d0 	beq.w	801a4d2 <uxr_read_framed_msg+0x51e>
 801a132:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801a134:	2000      	movs	r0, #0
 801a136:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801a13a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a13c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801a13e:	b29b      	uxth	r3, r3
 801a140:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801a142:	428b      	cmp	r3, r1
 801a144:	8623      	strh	r3, [r4, #48]	@ 0x30
 801a146:	f240 80e2 	bls.w	801a30e <uxr_read_framed_msg+0x35a>
 801a14a:	7020      	strb	r0, [r4, #0]
 801a14c:	b003      	add	sp, #12
 801a14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a152:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801a156:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a15a:	4298      	cmp	r0, r3
 801a15c:	f000 80aa 	beq.w	801a2b4 <uxr_read_framed_msg+0x300>
 801a160:	18e2      	adds	r2, r4, r3
 801a162:	7891      	ldrb	r1, [r2, #2]
 801a164:	297d      	cmp	r1, #125	@ 0x7d
 801a166:	f000 8186 	beq.w	801a476 <uxr_read_framed_msg+0x4c2>
 801a16a:	3301      	adds	r3, #1
 801a16c:	202a      	movs	r0, #42	@ 0x2a
 801a16e:	297e      	cmp	r1, #126	@ 0x7e
 801a170:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a174:	fba5 c202 	umull	ip, r2, r5, r2
 801a178:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a17c:	fb00 3312 	mls	r3, r0, r2, r3
 801a180:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a184:	f000 8195 	beq.w	801a4b2 <uxr_read_framed_msg+0x4fe>
 801a188:	2304      	movs	r3, #4
 801a18a:	8621      	strh	r1, [r4, #48]	@ 0x30
 801a18c:	7023      	strb	r3, [r4, #0]
 801a18e:	e722      	b.n	8019fd6 <uxr_read_framed_msg+0x22>
 801a190:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801a194:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801a198:	4290      	cmp	r0, r2
 801a19a:	f000 80b4 	beq.w	801a306 <uxr_read_framed_msg+0x352>
 801a19e:	18a3      	adds	r3, r4, r2
 801a1a0:	7899      	ldrb	r1, [r3, #2]
 801a1a2:	297d      	cmp	r1, #125	@ 0x7d
 801a1a4:	f000 8107 	beq.w	801a3b6 <uxr_read_framed_msg+0x402>
 801a1a8:	3201      	adds	r2, #1
 801a1aa:	232a      	movs	r3, #42	@ 0x2a
 801a1ac:	297e      	cmp	r1, #126	@ 0x7e
 801a1ae:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801a1b2:	fba5 c000 	umull	ip, r0, r5, r0
 801a1b6:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801a1ba:	fb03 2210 	mls	r2, r3, r0, r2
 801a1be:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801a1c2:	f000 818a 	beq.w	801a4da <uxr_read_framed_msg+0x526>
 801a1c6:	7863      	ldrb	r3, [r4, #1]
 801a1c8:	428b      	cmp	r3, r1
 801a1ca:	bf0c      	ite	eq
 801a1cc:	2303      	moveq	r3, #3
 801a1ce:	2300      	movne	r3, #0
 801a1d0:	7023      	strb	r3, [r4, #0]
 801a1d2:	e700      	b.n	8019fd6 <uxr_read_framed_msg+0x22>
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a1da:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801a1de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a1e2:	4299      	cmp	r1, r3
 801a1e4:	d06a      	beq.n	801a2bc <uxr_read_framed_msg+0x308>
 801a1e6:	18e2      	adds	r2, r4, r3
 801a1e8:	7890      	ldrb	r0, [r2, #2]
 801a1ea:	287d      	cmp	r0, #125	@ 0x7d
 801a1ec:	f000 8100 	beq.w	801a3f0 <uxr_read_framed_msg+0x43c>
 801a1f0:	3301      	adds	r3, #1
 801a1f2:	212a      	movs	r1, #42	@ 0x2a
 801a1f4:	287e      	cmp	r0, #126	@ 0x7e
 801a1f6:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801a1fa:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a1fe:	fba5 c202 	umull	ip, r2, r5, r2
 801a202:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a206:	fb01 3312 	mls	r3, r1, r2, r3
 801a20a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a20e:	d055      	beq.n	801a2bc <uxr_read_framed_msg+0x308>
 801a210:	2302      	movs	r3, #2
 801a212:	7023      	strb	r3, [r4, #0]
 801a214:	e6df      	b.n	8019fd6 <uxr_read_framed_msg+0x22>
 801a216:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 801a21a:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801a21e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a222:	1c5a      	adds	r2, r3, #1
 801a224:	459c      	cmp	ip, r3
 801a226:	eb04 0103 	add.w	r1, r4, r3
 801a22a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801a22e:	f43f af04 	beq.w	801a03a <uxr_read_framed_msg+0x86>
 801a232:	fba5 0303 	umull	r0, r3, r5, r3
 801a236:	7889      	ldrb	r1, [r1, #2]
 801a238:	089b      	lsrs	r3, r3, #2
 801a23a:	297e      	cmp	r1, #126	@ 0x7e
 801a23c:	fb0e 2313 	mls	r3, lr, r3, r2
 801a240:	b2db      	uxtb	r3, r3
 801a242:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a246:	d1ec      	bne.n	801a222 <uxr_read_framed_msg+0x26e>
 801a248:	2301      	movs	r3, #1
 801a24a:	7023      	strb	r3, [r4, #0]
 801a24c:	e6c3      	b.n	8019fd6 <uxr_read_framed_msg+0x22>
 801a24e:	1c50      	adds	r0, r2, #1
 801a250:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801a254:	3202      	adds	r2, #2
 801a256:	0841      	lsrs	r1, r0, #1
 801a258:	fba5 c101 	umull	ip, r1, r5, r1
 801a25c:	0889      	lsrs	r1, r1, #2
 801a25e:	fb0b 0111 	mls	r1, fp, r1, r0
 801a262:	1860      	adds	r0, r4, r1
 801a264:	b2c9      	uxtb	r1, r1
 801a266:	458a      	cmp	sl, r1
 801a268:	f43f af42 	beq.w	801a0f0 <uxr_read_framed_msg+0x13c>
 801a26c:	0851      	lsrs	r1, r2, #1
 801a26e:	7880      	ldrb	r0, [r0, #2]
 801a270:	fba5 a101 	umull	sl, r1, r5, r1
 801a274:	287e      	cmp	r0, #126	@ 0x7e
 801a276:	f080 0c20 	eor.w	ip, r0, #32
 801a27a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a27e:	fb0b 2211 	mls	r2, fp, r1, r2
 801a282:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801a286:	f47f af14 	bne.w	801a0b2 <uxr_read_framed_msg+0xfe>
 801a28a:	459e      	cmp	lr, r3
 801a28c:	f43f af33 	beq.w	801a0f6 <uxr_read_framed_msg+0x142>
 801a290:	2301      	movs	r3, #1
 801a292:	7023      	strb	r3, [r4, #0]
 801a294:	e69f      	b.n	8019fd6 <uxr_read_framed_msg+0x22>
 801a296:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a298:	9300      	str	r3, [sp, #0]
 801a29a:	2301      	movs	r3, #1
 801a29c:	9301      	str	r3, [sp, #4]
 801a29e:	464a      	mov	r2, r9
 801a2a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a2a2:	4641      	mov	r1, r8
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	f7ff fdf1 	bl	8019e8c <uxr_framing_read_transport>
 801a2aa:	2800      	cmp	r0, #0
 801a2ac:	f43f aec5 	beq.w	801a03a <uxr_read_framed_msg+0x86>
 801a2b0:	7823      	ldrb	r3, [r4, #0]
 801a2b2:	e690      	b.n	8019fd6 <uxr_read_framed_msg+0x22>
 801a2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a2b6:	9300      	str	r3, [sp, #0]
 801a2b8:	2302      	movs	r3, #2
 801a2ba:	e7ef      	b.n	801a29c <uxr_read_framed_msg+0x2e8>
 801a2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a2be:	464a      	mov	r2, r9
 801a2c0:	4641      	mov	r1, r8
 801a2c2:	4620      	mov	r0, r4
 801a2c4:	9300      	str	r3, [sp, #0]
 801a2c6:	2304      	movs	r3, #4
 801a2c8:	9301      	str	r3, [sp, #4]
 801a2ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a2cc:	f7ff fdde 	bl	8019e8c <uxr_framing_read_transport>
 801a2d0:	2800      	cmp	r0, #0
 801a2d2:	d1ed      	bne.n	801a2b0 <uxr_read_framed_msg+0x2fc>
 801a2d4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801a2d8:	2b7e      	cmp	r3, #126	@ 0x7e
 801a2da:	d0e9      	beq.n	801a2b0 <uxr_read_framed_msg+0x2fc>
 801a2dc:	e6ad      	b.n	801a03a <uxr_read_framed_msg+0x86>
 801a2de:	bf00      	nop
 801a2e0:	30c30c31 	.word	0x30c30c31
 801a2e4:	080207f4 	.word	0x080207f4
 801a2e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a2ea:	9300      	str	r3, [sp, #0]
 801a2ec:	2305      	movs	r3, #5
 801a2ee:	9301      	str	r3, [sp, #4]
 801a2f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a2f2:	f7ff fdcb 	bl	8019e8c <uxr_framing_read_transport>
 801a2f6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801a2fa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a2fe:	429a      	cmp	r2, r3
 801a300:	f43f ae9b 	beq.w	801a03a <uxr_read_framed_msg+0x86>
 801a304:	e664      	b.n	8019fd0 <uxr_read_framed_msg+0x1c>
 801a306:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a308:	9300      	str	r3, [sp, #0]
 801a30a:	2303      	movs	r3, #3
 801a30c:	e7c6      	b.n	801a29c <uxr_read_framed_msg+0x2e8>
 801a30e:	2305      	movs	r3, #5
 801a310:	7023      	strb	r3, [r4, #0]
 801a312:	e660      	b.n	8019fd6 <uxr_read_framed_msg+0x22>
 801a314:	f43f aeef 	beq.w	801a0f6 <uxr_read_framed_msg+0x142>
 801a318:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801a31c:	d094      	beq.n	801a248 <uxr_read_framed_msg+0x294>
 801a31e:	ebae 0303 	sub.w	r3, lr, r3
 801a322:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a324:	3302      	adds	r3, #2
 801a326:	9200      	str	r2, [sp, #0]
 801a328:	e7b8      	b.n	801a29c <uxr_read_framed_msg+0x2e8>
 801a32a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801a32e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a330:	7013      	strb	r3, [r2, #0]
 801a332:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801a334:	b003      	add	sp, #12
 801a336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a33a:	1c59      	adds	r1, r3, #1
 801a33c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a340:	084a      	lsrs	r2, r1, #1
 801a342:	fba5 e202 	umull	lr, r2, r5, r2
 801a346:	0892      	lsrs	r2, r2, #2
 801a348:	fb0c 1212 	mls	r2, ip, r2, r1
 801a34c:	b2d1      	uxtb	r1, r2
 801a34e:	4288      	cmp	r0, r1
 801a350:	d0b0      	beq.n	801a2b4 <uxr_read_framed_msg+0x300>
 801a352:	3302      	adds	r3, #2
 801a354:	4422      	add	r2, r4
 801a356:	7891      	ldrb	r1, [r2, #2]
 801a358:	085a      	lsrs	r2, r3, #1
 801a35a:	fba5 0202 	umull	r0, r2, r5, r2
 801a35e:	297e      	cmp	r1, #126	@ 0x7e
 801a360:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a364:	fb0c 3312 	mls	r3, ip, r2, r3
 801a368:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a36c:	f000 80a1 	beq.w	801a4b2 <uxr_read_framed_msg+0x4fe>
 801a370:	f081 0120 	eor.w	r1, r1, #32
 801a374:	e680      	b.n	801a078 <uxr_read_framed_msg+0xc4>
 801a376:	f103 0c01 	add.w	ip, r3, #1
 801a37a:	202a      	movs	r0, #42	@ 0x2a
 801a37c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a380:	fba5 e202 	umull	lr, r2, r5, r2
 801a384:	0892      	lsrs	r2, r2, #2
 801a386:	fb00 c212 	mls	r2, r0, r2, ip
 801a38a:	fa5f fc82 	uxtb.w	ip, r2
 801a38e:	4561      	cmp	r1, ip
 801a390:	d081      	beq.n	801a296 <uxr_read_framed_msg+0x2e2>
 801a392:	3302      	adds	r3, #2
 801a394:	4422      	add	r2, r4
 801a396:	0859      	lsrs	r1, r3, #1
 801a398:	7892      	ldrb	r2, [r2, #2]
 801a39a:	fba5 c101 	umull	ip, r1, r5, r1
 801a39e:	2a7e      	cmp	r2, #126	@ 0x7e
 801a3a0:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a3a4:	fb00 3311 	mls	r3, r0, r1, r3
 801a3a8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a3ac:	f000 8091 	beq.w	801a4d2 <uxr_read_framed_msg+0x51e>
 801a3b0:	f082 0220 	eor.w	r2, r2, #32
 801a3b4:	e636      	b.n	801a024 <uxr_read_framed_msg+0x70>
 801a3b6:	1c51      	adds	r1, r2, #1
 801a3b8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a3bc:	084b      	lsrs	r3, r1, #1
 801a3be:	fba5 e303 	umull	lr, r3, r5, r3
 801a3c2:	089b      	lsrs	r3, r3, #2
 801a3c4:	fb0c 1313 	mls	r3, ip, r3, r1
 801a3c8:	b2d9      	uxtb	r1, r3
 801a3ca:	4288      	cmp	r0, r1
 801a3cc:	d09b      	beq.n	801a306 <uxr_read_framed_msg+0x352>
 801a3ce:	3202      	adds	r2, #2
 801a3d0:	4423      	add	r3, r4
 801a3d2:	0850      	lsrs	r0, r2, #1
 801a3d4:	789b      	ldrb	r3, [r3, #2]
 801a3d6:	fba5 1000 	umull	r1, r0, r5, r0
 801a3da:	2b7e      	cmp	r3, #126	@ 0x7e
 801a3dc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801a3e0:	fb0c 2210 	mls	r2, ip, r0, r2
 801a3e4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801a3e8:	d077      	beq.n	801a4da <uxr_read_framed_msg+0x526>
 801a3ea:	f083 0120 	eor.w	r1, r3, #32
 801a3ee:	e6ea      	b.n	801a1c6 <uxr_read_framed_msg+0x212>
 801a3f0:	f103 0c01 	add.w	ip, r3, #1
 801a3f4:	202a      	movs	r0, #42	@ 0x2a
 801a3f6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a3fa:	fba5 e202 	umull	lr, r2, r5, r2
 801a3fe:	0892      	lsrs	r2, r2, #2
 801a400:	fb00 c212 	mls	r2, r0, r2, ip
 801a404:	fa5f fc82 	uxtb.w	ip, r2
 801a408:	4561      	cmp	r1, ip
 801a40a:	f43f af57 	beq.w	801a2bc <uxr_read_framed_msg+0x308>
 801a40e:	3302      	adds	r3, #2
 801a410:	4422      	add	r2, r4
 801a412:	7891      	ldrb	r1, [r2, #2]
 801a414:	085a      	lsrs	r2, r3, #1
 801a416:	fba5 c202 	umull	ip, r2, r5, r2
 801a41a:	297e      	cmp	r1, #126	@ 0x7e
 801a41c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801a420:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a424:	fb00 3312 	mls	r3, r0, r2, r3
 801a428:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a42c:	f43f af46 	beq.w	801a2bc <uxr_read_framed_msg+0x308>
 801a430:	f081 0120 	eor.w	r1, r1, #32
 801a434:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801a438:	e6ea      	b.n	801a210 <uxr_read_framed_msg+0x25c>
 801a43a:	1c59      	adds	r1, r3, #1
 801a43c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a440:	084a      	lsrs	r2, r1, #1
 801a442:	fba5 e202 	umull	lr, r2, r5, r2
 801a446:	0892      	lsrs	r2, r2, #2
 801a448:	fb0c 1212 	mls	r2, ip, r2, r1
 801a44c:	b2d1      	uxtb	r1, r2
 801a44e:	4288      	cmp	r0, r1
 801a450:	f43f af21 	beq.w	801a296 <uxr_read_framed_msg+0x2e2>
 801a454:	3302      	adds	r3, #2
 801a456:	4422      	add	r2, r4
 801a458:	7891      	ldrb	r1, [r2, #2]
 801a45a:	085a      	lsrs	r2, r3, #1
 801a45c:	fba5 0202 	umull	r0, r2, r5, r2
 801a460:	297e      	cmp	r1, #126	@ 0x7e
 801a462:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a466:	fb0c 3312 	mls	r3, ip, r2, r3
 801a46a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a46e:	d030      	beq.n	801a4d2 <uxr_read_framed_msg+0x51e>
 801a470:	f081 0120 	eor.w	r1, r1, #32
 801a474:	e65d      	b.n	801a132 <uxr_read_framed_msg+0x17e>
 801a476:	1c59      	adds	r1, r3, #1
 801a478:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a47c:	084a      	lsrs	r2, r1, #1
 801a47e:	fba5 e202 	umull	lr, r2, r5, r2
 801a482:	0892      	lsrs	r2, r2, #2
 801a484:	fb0c 1212 	mls	r2, ip, r2, r1
 801a488:	b2d1      	uxtb	r1, r2
 801a48a:	4288      	cmp	r0, r1
 801a48c:	f43f af12 	beq.w	801a2b4 <uxr_read_framed_msg+0x300>
 801a490:	3302      	adds	r3, #2
 801a492:	4422      	add	r2, r4
 801a494:	7891      	ldrb	r1, [r2, #2]
 801a496:	085a      	lsrs	r2, r3, #1
 801a498:	fba5 0202 	umull	r0, r2, r5, r2
 801a49c:	297e      	cmp	r1, #126	@ 0x7e
 801a49e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a4a2:	fb0c 3312 	mls	r3, ip, r2, r3
 801a4a6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a4aa:	d002      	beq.n	801a4b2 <uxr_read_framed_msg+0x4fe>
 801a4ac:	f081 0120 	eor.w	r1, r1, #32
 801a4b0:	e66a      	b.n	801a188 <uxr_read_framed_msg+0x1d4>
 801a4b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a4b4:	9300      	str	r3, [sp, #0]
 801a4b6:	2302      	movs	r3, #2
 801a4b8:	9301      	str	r3, [sp, #4]
 801a4ba:	464a      	mov	r2, r9
 801a4bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a4be:	4641      	mov	r1, r8
 801a4c0:	4620      	mov	r0, r4
 801a4c2:	f7ff fce3 	bl	8019e8c <uxr_framing_read_transport>
 801a4c6:	2800      	cmp	r0, #0
 801a4c8:	f47f aef2 	bne.w	801a2b0 <uxr_read_framed_msg+0x2fc>
 801a4cc:	2301      	movs	r3, #1
 801a4ce:	7023      	strb	r3, [r4, #0]
 801a4d0:	e581      	b.n	8019fd6 <uxr_read_framed_msg+0x22>
 801a4d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a4d4:	9300      	str	r3, [sp, #0]
 801a4d6:	2301      	movs	r3, #1
 801a4d8:	e7ee      	b.n	801a4b8 <uxr_read_framed_msg+0x504>
 801a4da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a4dc:	9300      	str	r3, [sp, #0]
 801a4de:	2303      	movs	r3, #3
 801a4e0:	e7ea      	b.n	801a4b8 <uxr_read_framed_msg+0x504>
 801a4e2:	bf00      	nop

0801a4e4 <uxr_stream_id>:
 801a4e4:	2901      	cmp	r1, #1
 801a4e6:	4684      	mov	ip, r0
 801a4e8:	b500      	push	{lr}
 801a4ea:	b083      	sub	sp, #12
 801a4ec:	d01f      	beq.n	801a52e <uxr_stream_id+0x4a>
 801a4ee:	2902      	cmp	r1, #2
 801a4f0:	f04f 0e00 	mov.w	lr, #0
 801a4f4:	d020      	beq.n	801a538 <uxr_stream_id+0x54>
 801a4f6:	2300      	movs	r3, #0
 801a4f8:	2000      	movs	r0, #0
 801a4fa:	f36e 0307 	bfi	r3, lr, #0, #8
 801a4fe:	f36c 230f 	bfi	r3, ip, #8, #8
 801a502:	f361 4317 	bfi	r3, r1, #16, #8
 801a506:	f362 631f 	bfi	r3, r2, #24, #8
 801a50a:	fa5f fc83 	uxtb.w	ip, r3
 801a50e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a512:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a516:	0e1b      	lsrs	r3, r3, #24
 801a518:	f36c 0007 	bfi	r0, ip, #0, #8
 801a51c:	f361 200f 	bfi	r0, r1, #8, #8
 801a520:	f362 4017 	bfi	r0, r2, #16, #8
 801a524:	f363 601f 	bfi	r0, r3, #24, #8
 801a528:	b003      	add	sp, #12
 801a52a:	f85d fb04 	ldr.w	pc, [sp], #4
 801a52e:	f100 0e01 	add.w	lr, r0, #1
 801a532:	fa5f fe8e 	uxtb.w	lr, lr
 801a536:	e7de      	b.n	801a4f6 <uxr_stream_id+0x12>
 801a538:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 801a53c:	e7db      	b.n	801a4f6 <uxr_stream_id+0x12>
 801a53e:	bf00      	nop

0801a540 <uxr_stream_id_from_raw>:
 801a540:	b082      	sub	sp, #8
 801a542:	b130      	cbz	r0, 801a552 <uxr_stream_id_from_raw+0x12>
 801a544:	0603      	lsls	r3, r0, #24
 801a546:	d421      	bmi.n	801a58c <uxr_stream_id_from_raw+0x4c>
 801a548:	1e42      	subs	r2, r0, #1
 801a54a:	f04f 0c01 	mov.w	ip, #1
 801a54e:	b2d2      	uxtb	r2, r2
 801a550:	e001      	b.n	801a556 <uxr_stream_id_from_raw+0x16>
 801a552:	4684      	mov	ip, r0
 801a554:	4602      	mov	r2, r0
 801a556:	2300      	movs	r3, #0
 801a558:	f360 0307 	bfi	r3, r0, #0, #8
 801a55c:	2000      	movs	r0, #0
 801a55e:	f362 230f 	bfi	r3, r2, #8, #8
 801a562:	f36c 4317 	bfi	r3, ip, #16, #8
 801a566:	f361 631f 	bfi	r3, r1, #24, #8
 801a56a:	fa5f fc83 	uxtb.w	ip, r3
 801a56e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a572:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a576:	0e1b      	lsrs	r3, r3, #24
 801a578:	f36c 0007 	bfi	r0, ip, #0, #8
 801a57c:	f361 200f 	bfi	r0, r1, #8, #8
 801a580:	f362 4017 	bfi	r0, r2, #16, #8
 801a584:	f363 601f 	bfi	r0, r3, #24, #8
 801a588:	b002      	add	sp, #8
 801a58a:	4770      	bx	lr
 801a58c:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801a590:	f04f 0c02 	mov.w	ip, #2
 801a594:	e7df      	b.n	801a556 <uxr_stream_id_from_raw+0x16>
 801a596:	bf00      	nop

0801a598 <uxr_init_stream_storage>:
 801a598:	2300      	movs	r3, #0
 801a59a:	7403      	strb	r3, [r0, #16]
 801a59c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801a5a0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801a5a4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801a5a8:	4770      	bx	lr
 801a5aa:	bf00      	nop

0801a5ac <uxr_reset_stream_storage>:
 801a5ac:	b570      	push	{r4, r5, r6, lr}
 801a5ae:	7c03      	ldrb	r3, [r0, #16]
 801a5b0:	4604      	mov	r4, r0
 801a5b2:	b14b      	cbz	r3, 801a5c8 <uxr_reset_stream_storage+0x1c>
 801a5b4:	4606      	mov	r6, r0
 801a5b6:	2500      	movs	r5, #0
 801a5b8:	4630      	mov	r0, r6
 801a5ba:	3501      	adds	r5, #1
 801a5bc:	f002 fa0e 	bl	801c9dc <uxr_reset_output_best_effort_stream>
 801a5c0:	7c23      	ldrb	r3, [r4, #16]
 801a5c2:	3610      	adds	r6, #16
 801a5c4:	42ab      	cmp	r3, r5
 801a5c6:	d8f7      	bhi.n	801a5b8 <uxr_reset_stream_storage+0xc>
 801a5c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801a5cc:	b15b      	cbz	r3, 801a5e6 <uxr_reset_stream_storage+0x3a>
 801a5ce:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a5d2:	2500      	movs	r5, #0
 801a5d4:	4630      	mov	r0, r6
 801a5d6:	3501      	adds	r5, #1
 801a5d8:	f002 f806 	bl	801c5e8 <uxr_reset_input_best_effort_stream>
 801a5dc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801a5e0:	3602      	adds	r6, #2
 801a5e2:	42ab      	cmp	r3, r5
 801a5e4:	d8f6      	bhi.n	801a5d4 <uxr_reset_stream_storage+0x28>
 801a5e6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801a5ea:	b15b      	cbz	r3, 801a604 <uxr_reset_stream_storage+0x58>
 801a5ec:	f104 0618 	add.w	r6, r4, #24
 801a5f0:	2500      	movs	r5, #0
 801a5f2:	4630      	mov	r0, r6
 801a5f4:	3501      	adds	r5, #1
 801a5f6:	f002 fa9f 	bl	801cb38 <uxr_reset_output_reliable_stream>
 801a5fa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801a5fe:	3628      	adds	r6, #40	@ 0x28
 801a600:	42ab      	cmp	r3, r5
 801a602:	d8f6      	bhi.n	801a5f2 <uxr_reset_stream_storage+0x46>
 801a604:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801a608:	b15b      	cbz	r3, 801a622 <uxr_reset_stream_storage+0x76>
 801a60a:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801a60e:	2500      	movs	r5, #0
 801a610:	4630      	mov	r0, r6
 801a612:	3501      	adds	r5, #1
 801a614:	f002 f854 	bl	801c6c0 <uxr_reset_input_reliable_stream>
 801a618:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801a61c:	3618      	adds	r6, #24
 801a61e:	42ab      	cmp	r3, r5
 801a620:	d8f6      	bhi.n	801a610 <uxr_reset_stream_storage+0x64>
 801a622:	bd70      	pop	{r4, r5, r6, pc}

0801a624 <uxr_add_output_best_effort_buffer>:
 801a624:	b510      	push	{r4, lr}
 801a626:	7c04      	ldrb	r4, [r0, #16]
 801a628:	b082      	sub	sp, #8
 801a62a:	f104 0c01 	add.w	ip, r4, #1
 801a62e:	f880 c010 	strb.w	ip, [r0, #16]
 801a632:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801a636:	f002 f9c7 	bl	801c9c8 <uxr_init_output_best_effort_stream>
 801a63a:	2201      	movs	r2, #1
 801a63c:	4620      	mov	r0, r4
 801a63e:	4611      	mov	r1, r2
 801a640:	b002      	add	sp, #8
 801a642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a646:	f7ff bf4d 	b.w	801a4e4 <uxr_stream_id>
 801a64a:	bf00      	nop

0801a64c <uxr_add_output_reliable_buffer>:
 801a64c:	b510      	push	{r4, lr}
 801a64e:	b084      	sub	sp, #16
 801a650:	4684      	mov	ip, r0
 801a652:	2028      	movs	r0, #40	@ 0x28
 801a654:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801a658:	9400      	str	r4, [sp, #0]
 801a65a:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801a65e:	fb00 c004 	mla	r0, r0, r4, ip
 801a662:	f104 0e01 	add.w	lr, r4, #1
 801a666:	3018      	adds	r0, #24
 801a668:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801a66c:	f002 fa2c 	bl	801cac8 <uxr_init_output_reliable_stream>
 801a670:	2201      	movs	r2, #1
 801a672:	2102      	movs	r1, #2
 801a674:	4620      	mov	r0, r4
 801a676:	b004      	add	sp, #16
 801a678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a67c:	f7ff bf32 	b.w	801a4e4 <uxr_stream_id>

0801a680 <uxr_add_input_best_effort_buffer>:
 801a680:	b510      	push	{r4, lr}
 801a682:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801a686:	b082      	sub	sp, #8
 801a688:	1c62      	adds	r2, r4, #1
 801a68a:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801a68e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801a692:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a696:	f001 ffa3 	bl	801c5e0 <uxr_init_input_best_effort_stream>
 801a69a:	2200      	movs	r2, #0
 801a69c:	2101      	movs	r1, #1
 801a69e:	4620      	mov	r0, r4
 801a6a0:	b002      	add	sp, #8
 801a6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6a6:	f7ff bf1d 	b.w	801a4e4 <uxr_stream_id>
 801a6aa:	bf00      	nop

0801a6ac <uxr_add_input_reliable_buffer>:
 801a6ac:	b510      	push	{r4, lr}
 801a6ae:	b084      	sub	sp, #16
 801a6b0:	4684      	mov	ip, r0
 801a6b2:	2018      	movs	r0, #24
 801a6b4:	9c06      	ldr	r4, [sp, #24]
 801a6b6:	9400      	str	r4, [sp, #0]
 801a6b8:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801a6bc:	fb00 c004 	mla	r0, r0, r4, ip
 801a6c0:	f104 0e01 	add.w	lr, r4, #1
 801a6c4:	3048      	adds	r0, #72	@ 0x48
 801a6c6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801a6ca:	f001 ffd3 	bl	801c674 <uxr_init_input_reliable_stream>
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	2102      	movs	r1, #2
 801a6d2:	4620      	mov	r0, r4
 801a6d4:	b004      	add	sp, #16
 801a6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6da:	f7ff bf03 	b.w	801a4e4 <uxr_stream_id>
 801a6de:	bf00      	nop

0801a6e0 <uxr_get_output_best_effort_stream>:
 801a6e0:	7c03      	ldrb	r3, [r0, #16]
 801a6e2:	428b      	cmp	r3, r1
 801a6e4:	bf8c      	ite	hi
 801a6e6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801a6ea:	2000      	movls	r0, #0
 801a6ec:	4770      	bx	lr
 801a6ee:	bf00      	nop

0801a6f0 <uxr_get_output_reliable_stream>:
 801a6f0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801a6f4:	428b      	cmp	r3, r1
 801a6f6:	d904      	bls.n	801a702 <uxr_get_output_reliable_stream+0x12>
 801a6f8:	2328      	movs	r3, #40	@ 0x28
 801a6fa:	fb03 0001 	mla	r0, r3, r1, r0
 801a6fe:	3018      	adds	r0, #24
 801a700:	4770      	bx	lr
 801a702:	2000      	movs	r0, #0
 801a704:	4770      	bx	lr
 801a706:	bf00      	nop

0801a708 <uxr_get_input_best_effort_stream>:
 801a708:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801a70c:	428b      	cmp	r3, r1
 801a70e:	d903      	bls.n	801a718 <uxr_get_input_best_effort_stream+0x10>
 801a710:	3121      	adds	r1, #33	@ 0x21
 801a712:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a716:	4770      	bx	lr
 801a718:	2000      	movs	r0, #0
 801a71a:	4770      	bx	lr

0801a71c <uxr_get_input_reliable_stream>:
 801a71c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801a720:	428b      	cmp	r3, r1
 801a722:	d904      	bls.n	801a72e <uxr_get_input_reliable_stream+0x12>
 801a724:	2318      	movs	r3, #24
 801a726:	fb03 0001 	mla	r0, r3, r1, r0
 801a72a:	3048      	adds	r0, #72	@ 0x48
 801a72c:	4770      	bx	lr
 801a72e:	2000      	movs	r0, #0
 801a730:	4770      	bx	lr
 801a732:	bf00      	nop

0801a734 <uxr_output_streams_confirmed>:
 801a734:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801a738:	b183      	cbz	r3, 801a75c <uxr_output_streams_confirmed+0x28>
 801a73a:	b570      	push	{r4, r5, r6, lr}
 801a73c:	4606      	mov	r6, r0
 801a73e:	f100 0518 	add.w	r5, r0, #24
 801a742:	2400      	movs	r4, #0
 801a744:	e000      	b.n	801a748 <uxr_output_streams_confirmed+0x14>
 801a746:	b140      	cbz	r0, 801a75a <uxr_output_streams_confirmed+0x26>
 801a748:	4628      	mov	r0, r5
 801a74a:	3401      	adds	r4, #1
 801a74c:	f002 fc68 	bl	801d020 <uxr_is_output_up_to_date>
 801a750:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801a754:	3528      	adds	r5, #40	@ 0x28
 801a756:	42a3      	cmp	r3, r4
 801a758:	d8f5      	bhi.n	801a746 <uxr_output_streams_confirmed+0x12>
 801a75a:	bd70      	pop	{r4, r5, r6, pc}
 801a75c:	2001      	movs	r0, #1
 801a75e:	4770      	bx	lr

0801a760 <uxr_buffer_submessage_header>:
 801a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a762:	460e      	mov	r6, r1
 801a764:	2104      	movs	r1, #4
 801a766:	4604      	mov	r4, r0
 801a768:	4615      	mov	r5, r2
 801a76a:	461f      	mov	r7, r3
 801a76c:	f7f6 fb5a 	bl	8010e24 <ucdr_align_to>
 801a770:	2301      	movs	r3, #1
 801a772:	4631      	mov	r1, r6
 801a774:	4620      	mov	r0, r4
 801a776:	ea47 0203 	orr.w	r2, r7, r3
 801a77a:	7523      	strb	r3, [r4, #20]
 801a77c:	462b      	mov	r3, r5
 801a77e:	f000 f8d5 	bl	801a92c <uxr_serialize_submessage_header>
 801a782:	4620      	mov	r0, r4
 801a784:	f7f6 fb64 	bl	8010e50 <ucdr_buffer_remaining>
 801a788:	42a8      	cmp	r0, r5
 801a78a:	bf34      	ite	cc
 801a78c:	2000      	movcc	r0, #0
 801a78e:	2001      	movcs	r0, #1
 801a790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a792:	bf00      	nop

0801a794 <uxr_read_submessage_header>:
 801a794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a798:	4604      	mov	r4, r0
 801a79a:	460d      	mov	r5, r1
 801a79c:	2104      	movs	r1, #4
 801a79e:	4616      	mov	r6, r2
 801a7a0:	4698      	mov	r8, r3
 801a7a2:	f7f6 fb3f 	bl	8010e24 <ucdr_align_to>
 801a7a6:	4620      	mov	r0, r4
 801a7a8:	f7f6 fb52 	bl	8010e50 <ucdr_buffer_remaining>
 801a7ac:	2803      	cmp	r0, #3
 801a7ae:	bf8c      	ite	hi
 801a7b0:	2701      	movhi	r7, #1
 801a7b2:	2700      	movls	r7, #0
 801a7b4:	d802      	bhi.n	801a7bc <uxr_read_submessage_header+0x28>
 801a7b6:	4638      	mov	r0, r7
 801a7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7bc:	4633      	mov	r3, r6
 801a7be:	4642      	mov	r2, r8
 801a7c0:	4620      	mov	r0, r4
 801a7c2:	4629      	mov	r1, r5
 801a7c4:	f000 f8c6 	bl	801a954 <uxr_deserialize_submessage_header>
 801a7c8:	f898 3000 	ldrb.w	r3, [r8]
 801a7cc:	4638      	mov	r0, r7
 801a7ce:	f003 0201 	and.w	r2, r3, #1
 801a7d2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801a7d6:	f888 3000 	strb.w	r3, [r8]
 801a7da:	7522      	strb	r2, [r4, #20]
 801a7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a7e0 <uxr_submessage_padding>:
 801a7e0:	f010 0003 	ands.w	r0, r0, #3
 801a7e4:	bf18      	it	ne
 801a7e6:	f1c0 0004 	rsbne	r0, r0, #4
 801a7ea:	4770      	bx	lr

0801a7ec <uxr_millis>:
 801a7ec:	b510      	push	{r4, lr}
 801a7ee:	b084      	sub	sp, #16
 801a7f0:	2001      	movs	r0, #1
 801a7f2:	4669      	mov	r1, sp
 801a7f4:	f7e7 f8e4 	bl	80019c0 <clock_gettime>
 801a7f8:	4908      	ldr	r1, [pc, #32]	@ (801a81c <uxr_millis+0x30>)
 801a7fa:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801a7fe:	fba0 0301 	umull	r0, r3, r0, r1
 801a802:	1900      	adds	r0, r0, r4
 801a804:	fb01 3102 	mla	r1, r1, r2, r3
 801a808:	4a05      	ldr	r2, [pc, #20]	@ (801a820 <uxr_millis+0x34>)
 801a80a:	f04f 0300 	mov.w	r3, #0
 801a80e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801a812:	f7e5 fdcd 	bl	80003b0 <__aeabi_ldivmod>
 801a816:	b004      	add	sp, #16
 801a818:	bd10      	pop	{r4, pc}
 801a81a:	bf00      	nop
 801a81c:	3b9aca00 	.word	0x3b9aca00
 801a820:	000f4240 	.word	0x000f4240

0801a824 <uxr_nanos>:
 801a824:	b510      	push	{r4, lr}
 801a826:	b084      	sub	sp, #16
 801a828:	2001      	movs	r0, #1
 801a82a:	4669      	mov	r1, sp
 801a82c:	f7e7 f8c8 	bl	80019c0 <clock_gettime>
 801a830:	4a06      	ldr	r2, [pc, #24]	@ (801a84c <uxr_nanos+0x28>)
 801a832:	9800      	ldr	r0, [sp, #0]
 801a834:	9902      	ldr	r1, [sp, #8]
 801a836:	fba0 0302 	umull	r0, r3, r0, r2
 801a83a:	9c01      	ldr	r4, [sp, #4]
 801a83c:	1840      	adds	r0, r0, r1
 801a83e:	fb02 3304 	mla	r3, r2, r4, r3
 801a842:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801a846:	b004      	add	sp, #16
 801a848:	bd10      	pop	{r4, pc}
 801a84a:	bf00      	nop
 801a84c:	3b9aca00 	.word	0x3b9aca00

0801a850 <uxr_prepare_output_stream>:
 801a850:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a852:	b087      	sub	sp, #28
 801a854:	2707      	movs	r7, #7
 801a856:	2500      	movs	r5, #0
 801a858:	461c      	mov	r4, r3
 801a85a:	4606      	mov	r6, r0
 801a85c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a860:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a862:	e9cd 7500 	strd	r7, r5, [sp]
 801a866:	3204      	adds	r2, #4
 801a868:	f7ff f852 	bl	8019910 <uxr_prepare_stream_to_write_submessage>
 801a86c:	f080 0201 	eor.w	r2, r0, #1
 801a870:	b2d2      	uxtb	r2, r2
 801a872:	75a2      	strb	r2, [r4, #22]
 801a874:	b112      	cbz	r2, 801a87c <uxr_prepare_output_stream+0x2c>
 801a876:	4628      	mov	r0, r5
 801a878:	b007      	add	sp, #28
 801a87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a87c:	aa05      	add	r2, sp, #20
 801a87e:	9902      	ldr	r1, [sp, #8]
 801a880:	4630      	mov	r0, r6
 801a882:	f7ff f981 	bl	8019b88 <uxr_init_base_object_request>
 801a886:	a905      	add	r1, sp, #20
 801a888:	4605      	mov	r5, r0
 801a88a:	4620      	mov	r0, r4
 801a88c:	f000 ffbe 	bl	801b80c <uxr_serialize_WRITE_DATA_Payload_Data>
 801a890:	69a6      	ldr	r6, [r4, #24]
 801a892:	69e7      	ldr	r7, [r4, #28]
 801a894:	4620      	mov	r0, r4
 801a896:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801a89a:	1a52      	subs	r2, r2, r1
 801a89c:	f7f6 faa6 	bl	8010dec <ucdr_init_buffer>
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	463a      	mov	r2, r7
 801a8a4:	4631      	mov	r1, r6
 801a8a6:	f7f6 fa75 	bl	8010d94 <ucdr_set_on_full_buffer_callback>
 801a8aa:	4628      	mov	r0, r5
 801a8ac:	b007      	add	sp, #28
 801a8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a8b0 <uxr_serialize_message_header>:
 801a8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8b2:	4616      	mov	r6, r2
 801a8b4:	b083      	sub	sp, #12
 801a8b6:	4604      	mov	r4, r0
 801a8b8:	460d      	mov	r5, r1
 801a8ba:	9301      	str	r3, [sp, #4]
 801a8bc:	9f08      	ldr	r7, [sp, #32]
 801a8be:	f7f5 f82b 	bl	800f918 <ucdr_serialize_uint8_t>
 801a8c2:	4631      	mov	r1, r6
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	f7f5 f827 	bl	800f918 <ucdr_serialize_uint8_t>
 801a8ca:	9a01      	ldr	r2, [sp, #4]
 801a8cc:	2101      	movs	r1, #1
 801a8ce:	4620      	mov	r0, r4
 801a8d0:	f7f5 f8ce 	bl	800fa70 <ucdr_serialize_endian_uint16_t>
 801a8d4:	062b      	lsls	r3, r5, #24
 801a8d6:	d501      	bpl.n	801a8dc <uxr_serialize_message_header+0x2c>
 801a8d8:	b003      	add	sp, #12
 801a8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8dc:	2204      	movs	r2, #4
 801a8de:	4639      	mov	r1, r7
 801a8e0:	4620      	mov	r0, r4
 801a8e2:	b003      	add	sp, #12
 801a8e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a8e8:	f7fd bbfa 	b.w	80180e0 <ucdr_serialize_array_uint8_t>

0801a8ec <uxr_deserialize_message_header>:
 801a8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8ee:	4616      	mov	r6, r2
 801a8f0:	b083      	sub	sp, #12
 801a8f2:	4604      	mov	r4, r0
 801a8f4:	460d      	mov	r5, r1
 801a8f6:	9301      	str	r3, [sp, #4]
 801a8f8:	9f08      	ldr	r7, [sp, #32]
 801a8fa:	f7f5 f823 	bl	800f944 <ucdr_deserialize_uint8_t>
 801a8fe:	4631      	mov	r1, r6
 801a900:	4620      	mov	r0, r4
 801a902:	f7f5 f81f 	bl	800f944 <ucdr_deserialize_uint8_t>
 801a906:	9a01      	ldr	r2, [sp, #4]
 801a908:	2101      	movs	r1, #1
 801a90a:	4620      	mov	r0, r4
 801a90c:	f7f5 f9a4 	bl	800fc58 <ucdr_deserialize_endian_uint16_t>
 801a910:	f995 3000 	ldrsb.w	r3, [r5]
 801a914:	2b00      	cmp	r3, #0
 801a916:	da01      	bge.n	801a91c <uxr_deserialize_message_header+0x30>
 801a918:	b003      	add	sp, #12
 801a91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a91c:	2204      	movs	r2, #4
 801a91e:	4639      	mov	r1, r7
 801a920:	4620      	mov	r0, r4
 801a922:	b003      	add	sp, #12
 801a924:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a928:	f7fd bc3e 	b.w	80181a8 <ucdr_deserialize_array_uint8_t>

0801a92c <uxr_serialize_submessage_header>:
 801a92c:	b530      	push	{r4, r5, lr}
 801a92e:	4615      	mov	r5, r2
 801a930:	b083      	sub	sp, #12
 801a932:	4604      	mov	r4, r0
 801a934:	9301      	str	r3, [sp, #4]
 801a936:	f7f4 ffef 	bl	800f918 <ucdr_serialize_uint8_t>
 801a93a:	4629      	mov	r1, r5
 801a93c:	4620      	mov	r0, r4
 801a93e:	f7f4 ffeb 	bl	800f918 <ucdr_serialize_uint8_t>
 801a942:	9a01      	ldr	r2, [sp, #4]
 801a944:	2101      	movs	r1, #1
 801a946:	4620      	mov	r0, r4
 801a948:	b003      	add	sp, #12
 801a94a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a94e:	f7f5 b88f 	b.w	800fa70 <ucdr_serialize_endian_uint16_t>
 801a952:	bf00      	nop

0801a954 <uxr_deserialize_submessage_header>:
 801a954:	b530      	push	{r4, r5, lr}
 801a956:	4615      	mov	r5, r2
 801a958:	b083      	sub	sp, #12
 801a95a:	4604      	mov	r4, r0
 801a95c:	9301      	str	r3, [sp, #4]
 801a95e:	f7f4 fff1 	bl	800f944 <ucdr_deserialize_uint8_t>
 801a962:	4629      	mov	r1, r5
 801a964:	4620      	mov	r0, r4
 801a966:	f7f4 ffed 	bl	800f944 <ucdr_deserialize_uint8_t>
 801a96a:	9a01      	ldr	r2, [sp, #4]
 801a96c:	2101      	movs	r1, #1
 801a96e:	4620      	mov	r0, r4
 801a970:	b003      	add	sp, #12
 801a972:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a976:	f7f5 b96f 	b.w	800fc58 <ucdr_deserialize_endian_uint16_t>
 801a97a:	bf00      	nop

0801a97c <uxr_serialize_CLIENT_Representation>:
 801a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a980:	2204      	movs	r2, #4
 801a982:	460e      	mov	r6, r1
 801a984:	4605      	mov	r5, r0
 801a986:	f7fd fbab 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801a98a:	4607      	mov	r7, r0
 801a98c:	2202      	movs	r2, #2
 801a98e:	1d31      	adds	r1, r6, #4
 801a990:	4628      	mov	r0, r5
 801a992:	f7fd fba5 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801a996:	4038      	ands	r0, r7
 801a998:	2202      	movs	r2, #2
 801a99a:	1db1      	adds	r1, r6, #6
 801a99c:	b2c7      	uxtb	r7, r0
 801a99e:	4628      	mov	r0, r5
 801a9a0:	f7fd fb9e 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801a9a4:	2204      	movs	r2, #4
 801a9a6:	4007      	ands	r7, r0
 801a9a8:	f106 0108 	add.w	r1, r6, #8
 801a9ac:	4628      	mov	r0, r5
 801a9ae:	f7fd fb97 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801a9b2:	4007      	ands	r7, r0
 801a9b4:	7b31      	ldrb	r1, [r6, #12]
 801a9b6:	4628      	mov	r0, r5
 801a9b8:	f7f4 ffae 	bl	800f918 <ucdr_serialize_uint8_t>
 801a9bc:	7b71      	ldrb	r1, [r6, #13]
 801a9be:	4007      	ands	r7, r0
 801a9c0:	4628      	mov	r0, r5
 801a9c2:	f7f4 ff7b 	bl	800f8bc <ucdr_serialize_bool>
 801a9c6:	7b73      	ldrb	r3, [r6, #13]
 801a9c8:	ea07 0800 	and.w	r8, r7, r0
 801a9cc:	b93b      	cbnz	r3, 801a9de <uxr_serialize_CLIENT_Representation+0x62>
 801a9ce:	8bb1      	ldrh	r1, [r6, #28]
 801a9d0:	4628      	mov	r0, r5
 801a9d2:	f7f4 ffcd 	bl	800f970 <ucdr_serialize_uint16_t>
 801a9d6:	ea08 0000 	and.w	r0, r8, r0
 801a9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a9de:	6931      	ldr	r1, [r6, #16]
 801a9e0:	4628      	mov	r0, r5
 801a9e2:	f7f5 f9af 	bl	800fd44 <ucdr_serialize_uint32_t>
 801a9e6:	6933      	ldr	r3, [r6, #16]
 801a9e8:	b1e3      	cbz	r3, 801aa24 <uxr_serialize_CLIENT_Representation+0xa8>
 801a9ea:	b1c0      	cbz	r0, 801aa1e <uxr_serialize_CLIENT_Representation+0xa2>
 801a9ec:	4637      	mov	r7, r6
 801a9ee:	f04f 0900 	mov.w	r9, #0
 801a9f2:	e000      	b.n	801a9f6 <uxr_serialize_CLIENT_Representation+0x7a>
 801a9f4:	b19c      	cbz	r4, 801aa1e <uxr_serialize_CLIENT_Representation+0xa2>
 801a9f6:	6979      	ldr	r1, [r7, #20]
 801a9f8:	4628      	mov	r0, r5
 801a9fa:	f001 fdd9 	bl	801c5b0 <ucdr_serialize_string>
 801a9fe:	69b9      	ldr	r1, [r7, #24]
 801aa00:	4604      	mov	r4, r0
 801aa02:	4628      	mov	r0, r5
 801aa04:	f001 fdd4 	bl	801c5b0 <ucdr_serialize_string>
 801aa08:	f109 0901 	add.w	r9, r9, #1
 801aa0c:	6933      	ldr	r3, [r6, #16]
 801aa0e:	4004      	ands	r4, r0
 801aa10:	3708      	adds	r7, #8
 801aa12:	4599      	cmp	r9, r3
 801aa14:	b2e4      	uxtb	r4, r4
 801aa16:	d3ed      	bcc.n	801a9f4 <uxr_serialize_CLIENT_Representation+0x78>
 801aa18:	ea08 0804 	and.w	r8, r8, r4
 801aa1c:	e7d7      	b.n	801a9ce <uxr_serialize_CLIENT_Representation+0x52>
 801aa1e:	f04f 0800 	mov.w	r8, #0
 801aa22:	e7d4      	b.n	801a9ce <uxr_serialize_CLIENT_Representation+0x52>
 801aa24:	ea08 0800 	and.w	r8, r8, r0
 801aa28:	e7d1      	b.n	801a9ce <uxr_serialize_CLIENT_Representation+0x52>
 801aa2a:	bf00      	nop

0801aa2c <uxr_deserialize_CLIENT_Representation>:
 801aa2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa30:	2204      	movs	r2, #4
 801aa32:	460c      	mov	r4, r1
 801aa34:	4605      	mov	r5, r0
 801aa36:	f7fd fbb7 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801aa3a:	4607      	mov	r7, r0
 801aa3c:	2202      	movs	r2, #2
 801aa3e:	1d21      	adds	r1, r4, #4
 801aa40:	4628      	mov	r0, r5
 801aa42:	f7fd fbb1 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801aa46:	4038      	ands	r0, r7
 801aa48:	2202      	movs	r2, #2
 801aa4a:	1da1      	adds	r1, r4, #6
 801aa4c:	b2c6      	uxtb	r6, r0
 801aa4e:	4628      	mov	r0, r5
 801aa50:	f7fd fbaa 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801aa54:	2204      	movs	r2, #4
 801aa56:	4006      	ands	r6, r0
 801aa58:	f104 0108 	add.w	r1, r4, #8
 801aa5c:	4628      	mov	r0, r5
 801aa5e:	f7fd fba3 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801aa62:	4006      	ands	r6, r0
 801aa64:	f104 010c 	add.w	r1, r4, #12
 801aa68:	4628      	mov	r0, r5
 801aa6a:	f7f4 ff6b 	bl	800f944 <ucdr_deserialize_uint8_t>
 801aa6e:	f104 010d 	add.w	r1, r4, #13
 801aa72:	ea06 0700 	and.w	r7, r6, r0
 801aa76:	4628      	mov	r0, r5
 801aa78:	f7f4 ff36 	bl	800f8e8 <ucdr_deserialize_bool>
 801aa7c:	7b63      	ldrb	r3, [r4, #13]
 801aa7e:	4007      	ands	r7, r0
 801aa80:	b93b      	cbnz	r3, 801aa92 <uxr_deserialize_CLIENT_Representation+0x66>
 801aa82:	f104 011c 	add.w	r1, r4, #28
 801aa86:	4628      	mov	r0, r5
 801aa88:	f7f5 f872 	bl	800fb70 <ucdr_deserialize_uint16_t>
 801aa8c:	4038      	ands	r0, r7
 801aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa92:	f104 0110 	add.w	r1, r4, #16
 801aa96:	4628      	mov	r0, r5
 801aa98:	f7f5 fa84 	bl	800ffa4 <ucdr_deserialize_uint32_t>
 801aa9c:	6923      	ldr	r3, [r4, #16]
 801aa9e:	2b01      	cmp	r3, #1
 801aaa0:	d903      	bls.n	801aaaa <uxr_deserialize_CLIENT_Representation+0x7e>
 801aaa2:	2301      	movs	r3, #1
 801aaa4:	2700      	movs	r7, #0
 801aaa6:	75ab      	strb	r3, [r5, #22]
 801aaa8:	e7eb      	b.n	801aa82 <uxr_deserialize_CLIENT_Representation+0x56>
 801aaaa:	b30b      	cbz	r3, 801aaf0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801aaac:	b1f0      	cbz	r0, 801aaec <uxr_deserialize_CLIENT_Representation+0xc0>
 801aaae:	46a0      	mov	r8, r4
 801aab0:	f04f 0900 	mov.w	r9, #0
 801aab4:	e000      	b.n	801aab8 <uxr_deserialize_CLIENT_Representation+0x8c>
 801aab6:	b1ce      	cbz	r6, 801aaec <uxr_deserialize_CLIENT_Representation+0xc0>
 801aab8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801aabc:	f108 0808 	add.w	r8, r8, #8
 801aac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801aac4:	4628      	mov	r0, r5
 801aac6:	f001 fd83 	bl	801c5d0 <ucdr_deserialize_string>
 801aaca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801aace:	4606      	mov	r6, r0
 801aad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801aad4:	4628      	mov	r0, r5
 801aad6:	f109 0901 	add.w	r9, r9, #1
 801aada:	f001 fd79 	bl	801c5d0 <ucdr_deserialize_string>
 801aade:	6923      	ldr	r3, [r4, #16]
 801aae0:	4006      	ands	r6, r0
 801aae2:	4599      	cmp	r9, r3
 801aae4:	b2f6      	uxtb	r6, r6
 801aae6:	d3e6      	bcc.n	801aab6 <uxr_deserialize_CLIENT_Representation+0x8a>
 801aae8:	4037      	ands	r7, r6
 801aaea:	e7ca      	b.n	801aa82 <uxr_deserialize_CLIENT_Representation+0x56>
 801aaec:	2700      	movs	r7, #0
 801aaee:	e7c8      	b.n	801aa82 <uxr_deserialize_CLIENT_Representation+0x56>
 801aaf0:	4007      	ands	r7, r0
 801aaf2:	e7c6      	b.n	801aa82 <uxr_deserialize_CLIENT_Representation+0x56>

0801aaf4 <uxr_serialize_AGENT_Representation>:
 801aaf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aaf8:	2204      	movs	r2, #4
 801aafa:	460f      	mov	r7, r1
 801aafc:	4605      	mov	r5, r0
 801aafe:	f7fd faef 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801ab02:	4604      	mov	r4, r0
 801ab04:	2202      	movs	r2, #2
 801ab06:	1d39      	adds	r1, r7, #4
 801ab08:	4628      	mov	r0, r5
 801ab0a:	f7fd fae9 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801ab0e:	4020      	ands	r0, r4
 801ab10:	2202      	movs	r2, #2
 801ab12:	1db9      	adds	r1, r7, #6
 801ab14:	b2c4      	uxtb	r4, r0
 801ab16:	4628      	mov	r0, r5
 801ab18:	f7fd fae2 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801ab1c:	7a39      	ldrb	r1, [r7, #8]
 801ab1e:	4004      	ands	r4, r0
 801ab20:	4628      	mov	r0, r5
 801ab22:	f7f4 fecb 	bl	800f8bc <ucdr_serialize_bool>
 801ab26:	7a3b      	ldrb	r3, [r7, #8]
 801ab28:	ea00 0804 	and.w	r8, r0, r4
 801ab2c:	b913      	cbnz	r3, 801ab34 <uxr_serialize_AGENT_Representation+0x40>
 801ab2e:	4640      	mov	r0, r8
 801ab30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab34:	68f9      	ldr	r1, [r7, #12]
 801ab36:	4628      	mov	r0, r5
 801ab38:	f7f5 f904 	bl	800fd44 <ucdr_serialize_uint32_t>
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	b303      	cbz	r3, 801ab82 <uxr_serialize_AGENT_Representation+0x8e>
 801ab40:	b1d0      	cbz	r0, 801ab78 <uxr_serialize_AGENT_Representation+0x84>
 801ab42:	463e      	mov	r6, r7
 801ab44:	f04f 0900 	mov.w	r9, #0
 801ab48:	e000      	b.n	801ab4c <uxr_serialize_AGENT_Representation+0x58>
 801ab4a:	b1ac      	cbz	r4, 801ab78 <uxr_serialize_AGENT_Representation+0x84>
 801ab4c:	6931      	ldr	r1, [r6, #16]
 801ab4e:	4628      	mov	r0, r5
 801ab50:	f001 fd2e 	bl	801c5b0 <ucdr_serialize_string>
 801ab54:	6971      	ldr	r1, [r6, #20]
 801ab56:	4604      	mov	r4, r0
 801ab58:	4628      	mov	r0, r5
 801ab5a:	f001 fd29 	bl	801c5b0 <ucdr_serialize_string>
 801ab5e:	f109 0901 	add.w	r9, r9, #1
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	4004      	ands	r4, r0
 801ab66:	3608      	adds	r6, #8
 801ab68:	4599      	cmp	r9, r3
 801ab6a:	b2e4      	uxtb	r4, r4
 801ab6c:	d3ed      	bcc.n	801ab4a <uxr_serialize_AGENT_Representation+0x56>
 801ab6e:	ea08 0804 	and.w	r8, r8, r4
 801ab72:	4640      	mov	r0, r8
 801ab74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab78:	f04f 0800 	mov.w	r8, #0
 801ab7c:	4640      	mov	r0, r8
 801ab7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab82:	ea08 0800 	and.w	r8, r8, r0
 801ab86:	e7d2      	b.n	801ab2e <uxr_serialize_AGENT_Representation+0x3a>

0801ab88 <uxr_serialize_DATAWRITER_Representation>:
 801ab88:	b570      	push	{r4, r5, r6, lr}
 801ab8a:	460d      	mov	r5, r1
 801ab8c:	7809      	ldrb	r1, [r1, #0]
 801ab8e:	4606      	mov	r6, r0
 801ab90:	f7f4 fec2 	bl	800f918 <ucdr_serialize_uint8_t>
 801ab94:	4604      	mov	r4, r0
 801ab96:	b130      	cbz	r0, 801aba6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801ab98:	782b      	ldrb	r3, [r5, #0]
 801ab9a:	2b02      	cmp	r3, #2
 801ab9c:	d00c      	beq.n	801abb8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801ab9e:	2b03      	cmp	r3, #3
 801aba0:	d010      	beq.n	801abc4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801aba2:	2b01      	cmp	r3, #1
 801aba4:	d008      	beq.n	801abb8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801aba6:	2202      	movs	r2, #2
 801aba8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801abac:	4630      	mov	r0, r6
 801abae:	f7fd fa97 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801abb2:	4020      	ands	r0, r4
 801abb4:	b2c0      	uxtb	r0, r0
 801abb6:	bd70      	pop	{r4, r5, r6, pc}
 801abb8:	6869      	ldr	r1, [r5, #4]
 801abba:	4630      	mov	r0, r6
 801abbc:	f001 fcf8 	bl	801c5b0 <ucdr_serialize_string>
 801abc0:	4604      	mov	r4, r0
 801abc2:	e7f0      	b.n	801aba6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801abc4:	4629      	mov	r1, r5
 801abc6:	4630      	mov	r0, r6
 801abc8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801abcc:	3104      	adds	r1, #4
 801abce:	f7f7 fead 	bl	801292c <ucdr_serialize_sequence_uint8_t>
 801abd2:	4604      	mov	r4, r0
 801abd4:	e7e7      	b.n	801aba6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801abd6:	bf00      	nop

0801abd8 <uxr_serialize_ObjectVariant.part.0>:
 801abd8:	b570      	push	{r4, r5, r6, lr}
 801abda:	780b      	ldrb	r3, [r1, #0]
 801abdc:	460c      	mov	r4, r1
 801abde:	4605      	mov	r5, r0
 801abe0:	3b01      	subs	r3, #1
 801abe2:	2b0d      	cmp	r3, #13
 801abe4:	d854      	bhi.n	801ac90 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801abe6:	e8df f003 	tbb	[pc, r3]
 801abea:	0730      	.short	0x0730
 801abec:	07071b1b 	.word	0x07071b1b
 801abf0:	0c530707 	.word	0x0c530707
 801abf4:	494e0c0c 	.word	0x494e0c0c
 801abf8:	3104      	adds	r1, #4
 801abfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abfe:	f7ff bfc3 	b.w	801ab88 <uxr_serialize_DATAWRITER_Representation>
 801ac02:	7909      	ldrb	r1, [r1, #4]
 801ac04:	f7f4 fe88 	bl	800f918 <ucdr_serialize_uint8_t>
 801ac08:	b1e8      	cbz	r0, 801ac46 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801ac0a:	7923      	ldrb	r3, [r4, #4]
 801ac0c:	2b01      	cmp	r3, #1
 801ac0e:	d001      	beq.n	801ac14 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801ac10:	2b02      	cmp	r3, #2
 801ac12:	d13d      	bne.n	801ac90 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801ac14:	68a1      	ldr	r1, [r4, #8]
 801ac16:	4628      	mov	r0, r5
 801ac18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac1c:	f001 bcc8 	b.w	801c5b0 <ucdr_serialize_string>
 801ac20:	7909      	ldrb	r1, [r1, #4]
 801ac22:	f7f4 fe79 	bl	800f918 <ucdr_serialize_uint8_t>
 801ac26:	4606      	mov	r6, r0
 801ac28:	b120      	cbz	r0, 801ac34 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801ac2a:	7923      	ldrb	r3, [r4, #4]
 801ac2c:	2b02      	cmp	r3, #2
 801ac2e:	d039      	beq.n	801aca4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801ac30:	2b03      	cmp	r3, #3
 801ac32:	d02f      	beq.n	801ac94 <uxr_serialize_ObjectVariant.part.0+0xbc>
 801ac34:	2202      	movs	r2, #2
 801ac36:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801ac3a:	4628      	mov	r0, r5
 801ac3c:	f7fd fa50 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801ac40:	4030      	ands	r0, r6
 801ac42:	b2c0      	uxtb	r0, r0
 801ac44:	bd70      	pop	{r4, r5, r6, pc}
 801ac46:	2000      	movs	r0, #0
 801ac48:	bd70      	pop	{r4, r5, r6, pc}
 801ac4a:	7909      	ldrb	r1, [r1, #4]
 801ac4c:	f7f4 fe64 	bl	800f918 <ucdr_serialize_uint8_t>
 801ac50:	4606      	mov	r6, r0
 801ac52:	b158      	cbz	r0, 801ac6c <uxr_serialize_ObjectVariant.part.0+0x94>
 801ac54:	7923      	ldrb	r3, [r4, #4]
 801ac56:	2b02      	cmp	r3, #2
 801ac58:	d003      	beq.n	801ac62 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801ac5a:	2b03      	cmp	r3, #3
 801ac5c:	d028      	beq.n	801acb0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801ac5e:	2b01      	cmp	r3, #1
 801ac60:	d104      	bne.n	801ac6c <uxr_serialize_ObjectVariant.part.0+0x94>
 801ac62:	68a1      	ldr	r1, [r4, #8]
 801ac64:	4628      	mov	r0, r5
 801ac66:	f001 fca3 	bl	801c5b0 <ucdr_serialize_string>
 801ac6a:	4606      	mov	r6, r0
 801ac6c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801ac70:	4628      	mov	r0, r5
 801ac72:	f7f5 fb8d 	bl	8010390 <ucdr_serialize_int16_t>
 801ac76:	4030      	ands	r0, r6
 801ac78:	b2c0      	uxtb	r0, r0
 801ac7a:	bd70      	pop	{r4, r5, r6, pc}
 801ac7c:	3104      	adds	r1, #4
 801ac7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac82:	f7ff be7b 	b.w	801a97c <uxr_serialize_CLIENT_Representation>
 801ac86:	3104      	adds	r1, #4
 801ac88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac8c:	f7ff bf32 	b.w	801aaf4 <uxr_serialize_AGENT_Representation>
 801ac90:	2001      	movs	r0, #1
 801ac92:	bd70      	pop	{r4, r5, r6, pc}
 801ac94:	68a2      	ldr	r2, [r4, #8]
 801ac96:	f104 010c 	add.w	r1, r4, #12
 801ac9a:	4628      	mov	r0, r5
 801ac9c:	f7f7 fe46 	bl	801292c <ucdr_serialize_sequence_uint8_t>
 801aca0:	4606      	mov	r6, r0
 801aca2:	e7c7      	b.n	801ac34 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801aca4:	68a1      	ldr	r1, [r4, #8]
 801aca6:	4628      	mov	r0, r5
 801aca8:	f001 fc82 	bl	801c5b0 <ucdr_serialize_string>
 801acac:	4606      	mov	r6, r0
 801acae:	e7c1      	b.n	801ac34 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801acb0:	68a2      	ldr	r2, [r4, #8]
 801acb2:	f104 010c 	add.w	r1, r4, #12
 801acb6:	4628      	mov	r0, r5
 801acb8:	f7f7 fe38 	bl	801292c <ucdr_serialize_sequence_uint8_t>
 801acbc:	4606      	mov	r6, r0
 801acbe:	e7d5      	b.n	801ac6c <uxr_serialize_ObjectVariant.part.0+0x94>

0801acc0 <uxr_deserialize_DATAWRITER_Representation>:
 801acc0:	b570      	push	{r4, r5, r6, lr}
 801acc2:	4606      	mov	r6, r0
 801acc4:	460d      	mov	r5, r1
 801acc6:	f7f4 fe3d 	bl	800f944 <ucdr_deserialize_uint8_t>
 801acca:	4604      	mov	r4, r0
 801accc:	b130      	cbz	r0, 801acdc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801acce:	782b      	ldrb	r3, [r5, #0]
 801acd0:	2b02      	cmp	r3, #2
 801acd2:	d00c      	beq.n	801acee <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801acd4:	2b03      	cmp	r3, #3
 801acd6:	d012      	beq.n	801acfe <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801acd8:	2b01      	cmp	r3, #1
 801acda:	d008      	beq.n	801acee <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801acdc:	2202      	movs	r2, #2
 801acde:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801ace2:	4630      	mov	r0, r6
 801ace4:	f7fd fa60 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801ace8:	4020      	ands	r0, r4
 801acea:	b2c0      	uxtb	r0, r0
 801acec:	bd70      	pop	{r4, r5, r6, pc}
 801acee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801acf2:	6869      	ldr	r1, [r5, #4]
 801acf4:	4630      	mov	r0, r6
 801acf6:	f001 fc6b 	bl	801c5d0 <ucdr_deserialize_string>
 801acfa:	4604      	mov	r4, r0
 801acfc:	e7ee      	b.n	801acdc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801acfe:	1d2b      	adds	r3, r5, #4
 801ad00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ad04:	f105 0108 	add.w	r1, r5, #8
 801ad08:	4630      	mov	r0, r6
 801ad0a:	f7f7 fe21 	bl	8012950 <ucdr_deserialize_sequence_uint8_t>
 801ad0e:	4604      	mov	r4, r0
 801ad10:	e7e4      	b.n	801acdc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801ad12:	bf00      	nop

0801ad14 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801ad14:	b570      	push	{r4, r5, r6, lr}
 801ad16:	460d      	mov	r5, r1
 801ad18:	7809      	ldrb	r1, [r1, #0]
 801ad1a:	4606      	mov	r6, r0
 801ad1c:	f7f4 fdce 	bl	800f8bc <ucdr_serialize_bool>
 801ad20:	782b      	ldrb	r3, [r5, #0]
 801ad22:	4604      	mov	r4, r0
 801ad24:	b94b      	cbnz	r3, 801ad3a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801ad26:	7a29      	ldrb	r1, [r5, #8]
 801ad28:	4630      	mov	r0, r6
 801ad2a:	f7f4 fdc7 	bl	800f8bc <ucdr_serialize_bool>
 801ad2e:	7a2b      	ldrb	r3, [r5, #8]
 801ad30:	4004      	ands	r4, r0
 801ad32:	b2e4      	uxtb	r4, r4
 801ad34:	b943      	cbnz	r3, 801ad48 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801ad36:	4620      	mov	r0, r4
 801ad38:	bd70      	pop	{r4, r5, r6, pc}
 801ad3a:	6869      	ldr	r1, [r5, #4]
 801ad3c:	4630      	mov	r0, r6
 801ad3e:	f001 fc37 	bl	801c5b0 <ucdr_serialize_string>
 801ad42:	4004      	ands	r4, r0
 801ad44:	b2e4      	uxtb	r4, r4
 801ad46:	e7ee      	b.n	801ad26 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801ad48:	68e9      	ldr	r1, [r5, #12]
 801ad4a:	4630      	mov	r0, r6
 801ad4c:	f001 fc30 	bl	801c5b0 <ucdr_serialize_string>
 801ad50:	4004      	ands	r4, r0
 801ad52:	4620      	mov	r0, r4
 801ad54:	bd70      	pop	{r4, r5, r6, pc}
 801ad56:	bf00      	nop

0801ad58 <uxr_serialize_OBJK_Topic_Binary>:
 801ad58:	b570      	push	{r4, r5, r6, lr}
 801ad5a:	460d      	mov	r5, r1
 801ad5c:	4606      	mov	r6, r0
 801ad5e:	6809      	ldr	r1, [r1, #0]
 801ad60:	f001 fc26 	bl	801c5b0 <ucdr_serialize_string>
 801ad64:	4604      	mov	r4, r0
 801ad66:	7929      	ldrb	r1, [r5, #4]
 801ad68:	4630      	mov	r0, r6
 801ad6a:	f7f4 fda7 	bl	800f8bc <ucdr_serialize_bool>
 801ad6e:	792b      	ldrb	r3, [r5, #4]
 801ad70:	4004      	ands	r4, r0
 801ad72:	b2e4      	uxtb	r4, r4
 801ad74:	b943      	cbnz	r3, 801ad88 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801ad76:	7b29      	ldrb	r1, [r5, #12]
 801ad78:	4630      	mov	r0, r6
 801ad7a:	f7f4 fd9f 	bl	800f8bc <ucdr_serialize_bool>
 801ad7e:	7b2b      	ldrb	r3, [r5, #12]
 801ad80:	4004      	ands	r4, r0
 801ad82:	b93b      	cbnz	r3, 801ad94 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801ad84:	4620      	mov	r0, r4
 801ad86:	bd70      	pop	{r4, r5, r6, pc}
 801ad88:	68a9      	ldr	r1, [r5, #8]
 801ad8a:	4630      	mov	r0, r6
 801ad8c:	f001 fc10 	bl	801c5b0 <ucdr_serialize_string>
 801ad90:	4004      	ands	r4, r0
 801ad92:	e7f0      	b.n	801ad76 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801ad94:	6929      	ldr	r1, [r5, #16]
 801ad96:	4630      	mov	r0, r6
 801ad98:	f001 fc0a 	bl	801c5b0 <ucdr_serialize_string>
 801ad9c:	4004      	ands	r4, r0
 801ad9e:	b2e4      	uxtb	r4, r4
 801ada0:	4620      	mov	r0, r4
 801ada2:	bd70      	pop	{r4, r5, r6, pc}

0801ada4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801ada4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ada8:	460c      	mov	r4, r1
 801adaa:	7809      	ldrb	r1, [r1, #0]
 801adac:	4606      	mov	r6, r0
 801adae:	f7f4 fd85 	bl	800f8bc <ucdr_serialize_bool>
 801adb2:	7823      	ldrb	r3, [r4, #0]
 801adb4:	4605      	mov	r5, r0
 801adb6:	b96b      	cbnz	r3, 801add4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801adb8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801adbc:	4630      	mov	r0, r6
 801adbe:	f7f4 fd7d 	bl	800f8bc <ucdr_serialize_bool>
 801adc2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801adc6:	4005      	ands	r5, r0
 801adc8:	b2ed      	uxtb	r5, r5
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d169      	bne.n	801aea2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801adce:	4628      	mov	r0, r5
 801add0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801add4:	6861      	ldr	r1, [r4, #4]
 801add6:	4630      	mov	r0, r6
 801add8:	f7f4 ffb4 	bl	800fd44 <ucdr_serialize_uint32_t>
 801addc:	6863      	ldr	r3, [r4, #4]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d06b      	beq.n	801aeba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801ade2:	2800      	cmp	r0, #0
 801ade4:	d067      	beq.n	801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ade6:	68a1      	ldr	r1, [r4, #8]
 801ade8:	4630      	mov	r0, r6
 801adea:	f001 fbe1 	bl	801c5b0 <ucdr_serialize_string>
 801adee:	6863      	ldr	r3, [r4, #4]
 801adf0:	2b01      	cmp	r3, #1
 801adf2:	d953      	bls.n	801ae9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801adf4:	2800      	cmp	r0, #0
 801adf6:	d05e      	beq.n	801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801adf8:	68e1      	ldr	r1, [r4, #12]
 801adfa:	4630      	mov	r0, r6
 801adfc:	f001 fbd8 	bl	801c5b0 <ucdr_serialize_string>
 801ae00:	6863      	ldr	r3, [r4, #4]
 801ae02:	2b02      	cmp	r3, #2
 801ae04:	d94a      	bls.n	801ae9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ae06:	2800      	cmp	r0, #0
 801ae08:	d055      	beq.n	801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ae0a:	6921      	ldr	r1, [r4, #16]
 801ae0c:	4630      	mov	r0, r6
 801ae0e:	f001 fbcf 	bl	801c5b0 <ucdr_serialize_string>
 801ae12:	6863      	ldr	r3, [r4, #4]
 801ae14:	2b03      	cmp	r3, #3
 801ae16:	d941      	bls.n	801ae9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ae18:	2800      	cmp	r0, #0
 801ae1a:	d04c      	beq.n	801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ae1c:	6961      	ldr	r1, [r4, #20]
 801ae1e:	4630      	mov	r0, r6
 801ae20:	f001 fbc6 	bl	801c5b0 <ucdr_serialize_string>
 801ae24:	6863      	ldr	r3, [r4, #4]
 801ae26:	2b04      	cmp	r3, #4
 801ae28:	d938      	bls.n	801ae9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ae2a:	2800      	cmp	r0, #0
 801ae2c:	d043      	beq.n	801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ae2e:	69a1      	ldr	r1, [r4, #24]
 801ae30:	4630      	mov	r0, r6
 801ae32:	f001 fbbd 	bl	801c5b0 <ucdr_serialize_string>
 801ae36:	6863      	ldr	r3, [r4, #4]
 801ae38:	2b05      	cmp	r3, #5
 801ae3a:	d92f      	bls.n	801ae9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ae3c:	2800      	cmp	r0, #0
 801ae3e:	d03a      	beq.n	801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ae40:	69e1      	ldr	r1, [r4, #28]
 801ae42:	4630      	mov	r0, r6
 801ae44:	f001 fbb4 	bl	801c5b0 <ucdr_serialize_string>
 801ae48:	6863      	ldr	r3, [r4, #4]
 801ae4a:	2b06      	cmp	r3, #6
 801ae4c:	d926      	bls.n	801ae9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ae4e:	b390      	cbz	r0, 801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ae50:	6a21      	ldr	r1, [r4, #32]
 801ae52:	4630      	mov	r0, r6
 801ae54:	f001 fbac 	bl	801c5b0 <ucdr_serialize_string>
 801ae58:	6863      	ldr	r3, [r4, #4]
 801ae5a:	2b07      	cmp	r3, #7
 801ae5c:	d91e      	bls.n	801ae9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ae5e:	b350      	cbz	r0, 801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ae60:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801ae62:	4630      	mov	r0, r6
 801ae64:	f001 fba4 	bl	801c5b0 <ucdr_serialize_string>
 801ae68:	6863      	ldr	r3, [r4, #4]
 801ae6a:	2b08      	cmp	r3, #8
 801ae6c:	d916      	bls.n	801ae9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ae6e:	b310      	cbz	r0, 801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ae70:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801ae72:	4630      	mov	r0, r6
 801ae74:	f001 fb9c 	bl	801c5b0 <ucdr_serialize_string>
 801ae78:	6863      	ldr	r3, [r4, #4]
 801ae7a:	2b09      	cmp	r3, #9
 801ae7c:	d90e      	bls.n	801ae9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ae7e:	b1d0      	cbz	r0, 801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ae80:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801ae84:	2709      	movs	r7, #9
 801ae86:	e000      	b.n	801ae8a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801ae88:	b1a8      	cbz	r0, 801aeb6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ae8a:	f858 1b04 	ldr.w	r1, [r8], #4
 801ae8e:	4630      	mov	r0, r6
 801ae90:	f001 fb8e 	bl	801c5b0 <ucdr_serialize_string>
 801ae94:	3701      	adds	r7, #1
 801ae96:	6862      	ldr	r2, [r4, #4]
 801ae98:	4297      	cmp	r7, r2
 801ae9a:	d3f5      	bcc.n	801ae88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801ae9c:	4005      	ands	r5, r0
 801ae9e:	b2ed      	uxtb	r5, r5
 801aea0:	e78a      	b.n	801adb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801aea2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801aea4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801aea8:	4630      	mov	r0, r6
 801aeaa:	f7f7 fd3f 	bl	801292c <ucdr_serialize_sequence_uint8_t>
 801aeae:	4005      	ands	r5, r0
 801aeb0:	4628      	mov	r0, r5
 801aeb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aeb6:	2500      	movs	r5, #0
 801aeb8:	e77e      	b.n	801adb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801aeba:	4028      	ands	r0, r5
 801aebc:	b2c5      	uxtb	r5, r0
 801aebe:	e77b      	b.n	801adb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801aec0 <uxr_serialize_OBJK_Publisher_Binary>:
 801aec0:	b570      	push	{r4, r5, r6, lr}
 801aec2:	460d      	mov	r5, r1
 801aec4:	7809      	ldrb	r1, [r1, #0]
 801aec6:	4606      	mov	r6, r0
 801aec8:	f7f4 fcf8 	bl	800f8bc <ucdr_serialize_bool>
 801aecc:	782b      	ldrb	r3, [r5, #0]
 801aece:	4604      	mov	r4, r0
 801aed0:	b94b      	cbnz	r3, 801aee6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801aed2:	7a29      	ldrb	r1, [r5, #8]
 801aed4:	4630      	mov	r0, r6
 801aed6:	f7f4 fcf1 	bl	800f8bc <ucdr_serialize_bool>
 801aeda:	7a2b      	ldrb	r3, [r5, #8]
 801aedc:	4004      	ands	r4, r0
 801aede:	b2e4      	uxtb	r4, r4
 801aee0:	b943      	cbnz	r3, 801aef4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801aee2:	4620      	mov	r0, r4
 801aee4:	bd70      	pop	{r4, r5, r6, pc}
 801aee6:	6869      	ldr	r1, [r5, #4]
 801aee8:	4630      	mov	r0, r6
 801aeea:	f001 fb61 	bl	801c5b0 <ucdr_serialize_string>
 801aeee:	4004      	ands	r4, r0
 801aef0:	b2e4      	uxtb	r4, r4
 801aef2:	e7ee      	b.n	801aed2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801aef4:	f105 010c 	add.w	r1, r5, #12
 801aef8:	4630      	mov	r0, r6
 801aefa:	f7ff ff53 	bl	801ada4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801aefe:	4004      	ands	r4, r0
 801af00:	4620      	mov	r0, r4
 801af02:	bd70      	pop	{r4, r5, r6, pc}

0801af04 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af08:	460c      	mov	r4, r1
 801af0a:	7809      	ldrb	r1, [r1, #0]
 801af0c:	4606      	mov	r6, r0
 801af0e:	f7f4 fcd5 	bl	800f8bc <ucdr_serialize_bool>
 801af12:	7823      	ldrb	r3, [r4, #0]
 801af14:	4605      	mov	r5, r0
 801af16:	b96b      	cbnz	r3, 801af34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801af18:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801af1c:	4630      	mov	r0, r6
 801af1e:	f7f4 fccd 	bl	800f8bc <ucdr_serialize_bool>
 801af22:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801af26:	4005      	ands	r5, r0
 801af28:	b2ed      	uxtb	r5, r5
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d169      	bne.n	801b002 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801af2e:	4628      	mov	r0, r5
 801af30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af34:	6861      	ldr	r1, [r4, #4]
 801af36:	4630      	mov	r0, r6
 801af38:	f7f4 ff04 	bl	800fd44 <ucdr_serialize_uint32_t>
 801af3c:	6863      	ldr	r3, [r4, #4]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d06b      	beq.n	801b01a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801af42:	2800      	cmp	r0, #0
 801af44:	d067      	beq.n	801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801af46:	68a1      	ldr	r1, [r4, #8]
 801af48:	4630      	mov	r0, r6
 801af4a:	f001 fb31 	bl	801c5b0 <ucdr_serialize_string>
 801af4e:	6863      	ldr	r3, [r4, #4]
 801af50:	2b01      	cmp	r3, #1
 801af52:	d953      	bls.n	801affc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801af54:	2800      	cmp	r0, #0
 801af56:	d05e      	beq.n	801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801af58:	68e1      	ldr	r1, [r4, #12]
 801af5a:	4630      	mov	r0, r6
 801af5c:	f001 fb28 	bl	801c5b0 <ucdr_serialize_string>
 801af60:	6863      	ldr	r3, [r4, #4]
 801af62:	2b02      	cmp	r3, #2
 801af64:	d94a      	bls.n	801affc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801af66:	2800      	cmp	r0, #0
 801af68:	d055      	beq.n	801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801af6a:	6921      	ldr	r1, [r4, #16]
 801af6c:	4630      	mov	r0, r6
 801af6e:	f001 fb1f 	bl	801c5b0 <ucdr_serialize_string>
 801af72:	6863      	ldr	r3, [r4, #4]
 801af74:	2b03      	cmp	r3, #3
 801af76:	d941      	bls.n	801affc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801af78:	2800      	cmp	r0, #0
 801af7a:	d04c      	beq.n	801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801af7c:	6961      	ldr	r1, [r4, #20]
 801af7e:	4630      	mov	r0, r6
 801af80:	f001 fb16 	bl	801c5b0 <ucdr_serialize_string>
 801af84:	6863      	ldr	r3, [r4, #4]
 801af86:	2b04      	cmp	r3, #4
 801af88:	d938      	bls.n	801affc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801af8a:	2800      	cmp	r0, #0
 801af8c:	d043      	beq.n	801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801af8e:	69a1      	ldr	r1, [r4, #24]
 801af90:	4630      	mov	r0, r6
 801af92:	f001 fb0d 	bl	801c5b0 <ucdr_serialize_string>
 801af96:	6863      	ldr	r3, [r4, #4]
 801af98:	2b05      	cmp	r3, #5
 801af9a:	d92f      	bls.n	801affc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801af9c:	2800      	cmp	r0, #0
 801af9e:	d03a      	beq.n	801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801afa0:	69e1      	ldr	r1, [r4, #28]
 801afa2:	4630      	mov	r0, r6
 801afa4:	f001 fb04 	bl	801c5b0 <ucdr_serialize_string>
 801afa8:	6863      	ldr	r3, [r4, #4]
 801afaa:	2b06      	cmp	r3, #6
 801afac:	d926      	bls.n	801affc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801afae:	b390      	cbz	r0, 801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801afb0:	6a21      	ldr	r1, [r4, #32]
 801afb2:	4630      	mov	r0, r6
 801afb4:	f001 fafc 	bl	801c5b0 <ucdr_serialize_string>
 801afb8:	6863      	ldr	r3, [r4, #4]
 801afba:	2b07      	cmp	r3, #7
 801afbc:	d91e      	bls.n	801affc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801afbe:	b350      	cbz	r0, 801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801afc0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801afc2:	4630      	mov	r0, r6
 801afc4:	f001 faf4 	bl	801c5b0 <ucdr_serialize_string>
 801afc8:	6863      	ldr	r3, [r4, #4]
 801afca:	2b08      	cmp	r3, #8
 801afcc:	d916      	bls.n	801affc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801afce:	b310      	cbz	r0, 801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801afd0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801afd2:	4630      	mov	r0, r6
 801afd4:	f001 faec 	bl	801c5b0 <ucdr_serialize_string>
 801afd8:	6863      	ldr	r3, [r4, #4]
 801afda:	2b09      	cmp	r3, #9
 801afdc:	d90e      	bls.n	801affc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801afde:	b1d0      	cbz	r0, 801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801afe0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801afe4:	2709      	movs	r7, #9
 801afe6:	e000      	b.n	801afea <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801afe8:	b1a8      	cbz	r0, 801b016 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801afea:	f858 1b04 	ldr.w	r1, [r8], #4
 801afee:	4630      	mov	r0, r6
 801aff0:	f001 fade 	bl	801c5b0 <ucdr_serialize_string>
 801aff4:	3701      	adds	r7, #1
 801aff6:	6862      	ldr	r2, [r4, #4]
 801aff8:	4297      	cmp	r7, r2
 801affa:	d3f5      	bcc.n	801afe8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801affc:	4005      	ands	r5, r0
 801affe:	b2ed      	uxtb	r5, r5
 801b000:	e78a      	b.n	801af18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801b002:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b004:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801b008:	4630      	mov	r0, r6
 801b00a:	f7f7 fc8f 	bl	801292c <ucdr_serialize_sequence_uint8_t>
 801b00e:	4005      	ands	r5, r0
 801b010:	4628      	mov	r0, r5
 801b012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b016:	2500      	movs	r5, #0
 801b018:	e77e      	b.n	801af18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801b01a:	4028      	ands	r0, r5
 801b01c:	b2c5      	uxtb	r5, r0
 801b01e:	e77b      	b.n	801af18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801b020 <uxr_serialize_OBJK_Subscriber_Binary>:
 801b020:	b570      	push	{r4, r5, r6, lr}
 801b022:	460d      	mov	r5, r1
 801b024:	7809      	ldrb	r1, [r1, #0]
 801b026:	4606      	mov	r6, r0
 801b028:	f7f4 fc48 	bl	800f8bc <ucdr_serialize_bool>
 801b02c:	782b      	ldrb	r3, [r5, #0]
 801b02e:	4604      	mov	r4, r0
 801b030:	b94b      	cbnz	r3, 801b046 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801b032:	7a29      	ldrb	r1, [r5, #8]
 801b034:	4630      	mov	r0, r6
 801b036:	f7f4 fc41 	bl	800f8bc <ucdr_serialize_bool>
 801b03a:	7a2b      	ldrb	r3, [r5, #8]
 801b03c:	4004      	ands	r4, r0
 801b03e:	b2e4      	uxtb	r4, r4
 801b040:	b943      	cbnz	r3, 801b054 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801b042:	4620      	mov	r0, r4
 801b044:	bd70      	pop	{r4, r5, r6, pc}
 801b046:	6869      	ldr	r1, [r5, #4]
 801b048:	4630      	mov	r0, r6
 801b04a:	f001 fab1 	bl	801c5b0 <ucdr_serialize_string>
 801b04e:	4004      	ands	r4, r0
 801b050:	b2e4      	uxtb	r4, r4
 801b052:	e7ee      	b.n	801b032 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801b054:	f105 010c 	add.w	r1, r5, #12
 801b058:	4630      	mov	r0, r6
 801b05a:	f7ff ff53 	bl	801af04 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801b05e:	4004      	ands	r4, r0
 801b060:	4620      	mov	r0, r4
 801b062:	bd70      	pop	{r4, r5, r6, pc}

0801b064 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801b064:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801b068:	4688      	mov	r8, r1
 801b06a:	4681      	mov	r9, r0
 801b06c:	8809      	ldrh	r1, [r1, #0]
 801b06e:	f7f4 fc7f 	bl	800f970 <ucdr_serialize_uint16_t>
 801b072:	4606      	mov	r6, r0
 801b074:	f898 1002 	ldrb.w	r1, [r8, #2]
 801b078:	4648      	mov	r0, r9
 801b07a:	f7f4 fc1f 	bl	800f8bc <ucdr_serialize_bool>
 801b07e:	f898 3002 	ldrb.w	r3, [r8, #2]
 801b082:	4006      	ands	r6, r0
 801b084:	b2f5      	uxtb	r5, r6
 801b086:	b9eb      	cbnz	r3, 801b0c4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801b088:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b08c:	4648      	mov	r0, r9
 801b08e:	f7f4 fc15 	bl	800f8bc <ucdr_serialize_bool>
 801b092:	f898 3006 	ldrb.w	r3, [r8, #6]
 801b096:	4005      	ands	r5, r0
 801b098:	bb7b      	cbnz	r3, 801b0fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801b09a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801b09e:	4648      	mov	r0, r9
 801b0a0:	f7f4 fc0c 	bl	800f8bc <ucdr_serialize_bool>
 801b0a4:	f898 300c 	ldrb.w	r3, [r8, #12]
 801b0a8:	4005      	ands	r5, r0
 801b0aa:	b9f3      	cbnz	r3, 801b0ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801b0ac:	f898 1014 	ldrb.w	r1, [r8, #20]
 801b0b0:	4648      	mov	r0, r9
 801b0b2:	f7f4 fc03 	bl	800f8bc <ucdr_serialize_bool>
 801b0b6:	f898 3014 	ldrb.w	r3, [r8, #20]
 801b0ba:	4005      	ands	r5, r0
 801b0bc:	b94b      	cbnz	r3, 801b0d2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801b0be:	4628      	mov	r0, r5
 801b0c0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801b0c4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801b0c8:	4648      	mov	r0, r9
 801b0ca:	f7f4 fc51 	bl	800f970 <ucdr_serialize_uint16_t>
 801b0ce:	4005      	ands	r5, r0
 801b0d0:	e7da      	b.n	801b088 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801b0d2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801b0d6:	f108 011c 	add.w	r1, r8, #28
 801b0da:	4648      	mov	r0, r9
 801b0dc:	f7f7 fc26 	bl	801292c <ucdr_serialize_sequence_uint8_t>
 801b0e0:	4028      	ands	r0, r5
 801b0e2:	b2c5      	uxtb	r5, r0
 801b0e4:	4628      	mov	r0, r5
 801b0e6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801b0ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b0ee:	4648      	mov	r0, r9
 801b0f0:	f7f4 fe28 	bl	800fd44 <ucdr_serialize_uint32_t>
 801b0f4:	4028      	ands	r0, r5
 801b0f6:	b2c5      	uxtb	r5, r0
 801b0f8:	e7d8      	b.n	801b0ac <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801b0fa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b0fe:	4648      	mov	r0, r9
 801b100:	f7f4 fe20 	bl	800fd44 <ucdr_serialize_uint32_t>
 801b104:	4028      	ands	r0, r5
 801b106:	b2c5      	uxtb	r5, r0
 801b108:	e7c7      	b.n	801b09a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801b10a:	bf00      	nop

0801b10c <uxr_serialize_OBJK_DataReader_Binary>:
 801b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b10e:	2202      	movs	r2, #2
 801b110:	460c      	mov	r4, r1
 801b112:	4606      	mov	r6, r0
 801b114:	f7fc ffe4 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b118:	4605      	mov	r5, r0
 801b11a:	78a1      	ldrb	r1, [r4, #2]
 801b11c:	4630      	mov	r0, r6
 801b11e:	f7f4 fbcd 	bl	800f8bc <ucdr_serialize_bool>
 801b122:	78a3      	ldrb	r3, [r4, #2]
 801b124:	4005      	ands	r5, r0
 801b126:	b2ed      	uxtb	r5, r5
 801b128:	b90b      	cbnz	r3, 801b12e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801b12a:	4628      	mov	r0, r5
 801b12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b12e:	f104 0108 	add.w	r1, r4, #8
 801b132:	4630      	mov	r0, r6
 801b134:	f7ff ff96 	bl	801b064 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801b138:	4607      	mov	r7, r0
 801b13a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801b13e:	4630      	mov	r0, r6
 801b140:	f7f4 fbbc 	bl	800f8bc <ucdr_serialize_bool>
 801b144:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b148:	4038      	ands	r0, r7
 801b14a:	b2c7      	uxtb	r7, r0
 801b14c:	b95b      	cbnz	r3, 801b166 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801b14e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801b152:	4630      	mov	r0, r6
 801b154:	f7f4 fbb2 	bl	800f8bc <ucdr_serialize_bool>
 801b158:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801b15c:	4007      	ands	r7, r0
 801b15e:	b94b      	cbnz	r3, 801b174 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801b160:	403d      	ands	r5, r7
 801b162:	4628      	mov	r0, r5
 801b164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b166:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801b16a:	4630      	mov	r0, r6
 801b16c:	f7f5 f840 	bl	80101f0 <ucdr_serialize_uint64_t>
 801b170:	4007      	ands	r7, r0
 801b172:	e7ec      	b.n	801b14e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801b174:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801b176:	4630      	mov	r0, r6
 801b178:	f001 fa1a 	bl	801c5b0 <ucdr_serialize_string>
 801b17c:	4007      	ands	r7, r0
 801b17e:	b2ff      	uxtb	r7, r7
 801b180:	e7ee      	b.n	801b160 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801b182:	bf00      	nop

0801b184 <uxr_serialize_OBJK_DataWriter_Binary>:
 801b184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b186:	2202      	movs	r2, #2
 801b188:	460d      	mov	r5, r1
 801b18a:	4606      	mov	r6, r0
 801b18c:	f7fc ffa8 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b190:	4604      	mov	r4, r0
 801b192:	78a9      	ldrb	r1, [r5, #2]
 801b194:	4630      	mov	r0, r6
 801b196:	f7f4 fb91 	bl	800f8bc <ucdr_serialize_bool>
 801b19a:	78ab      	ldrb	r3, [r5, #2]
 801b19c:	4004      	ands	r4, r0
 801b19e:	b2e4      	uxtb	r4, r4
 801b1a0:	b90b      	cbnz	r3, 801b1a6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801b1a2:	4620      	mov	r0, r4
 801b1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1a6:	f105 0108 	add.w	r1, r5, #8
 801b1aa:	4630      	mov	r0, r6
 801b1ac:	f7ff ff5a 	bl	801b064 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801b1b0:	4607      	mov	r7, r0
 801b1b2:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801b1b6:	4630      	mov	r0, r6
 801b1b8:	f7f4 fb80 	bl	800f8bc <ucdr_serialize_bool>
 801b1bc:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801b1c0:	4038      	ands	r0, r7
 801b1c2:	b2c7      	uxtb	r7, r0
 801b1c4:	b913      	cbnz	r3, 801b1cc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801b1c6:	403c      	ands	r4, r7
 801b1c8:	4620      	mov	r0, r4
 801b1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1cc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801b1d0:	4630      	mov	r0, r6
 801b1d2:	f7f5 f80d 	bl	80101f0 <ucdr_serialize_uint64_t>
 801b1d6:	4007      	ands	r7, r0
 801b1d8:	e7f5      	b.n	801b1c6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801b1da:	bf00      	nop

0801b1dc <uxr_deserialize_ObjectVariant>:
 801b1dc:	b570      	push	{r4, r5, r6, lr}
 801b1de:	4605      	mov	r5, r0
 801b1e0:	460e      	mov	r6, r1
 801b1e2:	f7f4 fbaf 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b1e6:	b168      	cbz	r0, 801b204 <uxr_deserialize_ObjectVariant+0x28>
 801b1e8:	7833      	ldrb	r3, [r6, #0]
 801b1ea:	4604      	mov	r4, r0
 801b1ec:	3b01      	subs	r3, #1
 801b1ee:	2b0d      	cmp	r3, #13
 801b1f0:	d809      	bhi.n	801b206 <uxr_deserialize_ObjectVariant+0x2a>
 801b1f2:	e8df f003 	tbb	[pc, r3]
 801b1f6:	0a41      	.short	0x0a41
 801b1f8:	0a0a2323 	.word	0x0a0a2323
 801b1fc:	10080a0a 	.word	0x10080a0a
 801b200:	565c1010 	.word	0x565c1010
 801b204:	2400      	movs	r4, #0
 801b206:	4620      	mov	r0, r4
 801b208:	bd70      	pop	{r4, r5, r6, pc}
 801b20a:	1d31      	adds	r1, r6, #4
 801b20c:	4628      	mov	r0, r5
 801b20e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b212:	f7ff bd55 	b.w	801acc0 <uxr_deserialize_DATAWRITER_Representation>
 801b216:	1d31      	adds	r1, r6, #4
 801b218:	4628      	mov	r0, r5
 801b21a:	f7f4 fb93 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b21e:	2800      	cmp	r0, #0
 801b220:	d0f0      	beq.n	801b204 <uxr_deserialize_ObjectVariant+0x28>
 801b222:	7933      	ldrb	r3, [r6, #4]
 801b224:	2b01      	cmp	r3, #1
 801b226:	d001      	beq.n	801b22c <uxr_deserialize_ObjectVariant+0x50>
 801b228:	2b02      	cmp	r3, #2
 801b22a:	d1ec      	bne.n	801b206 <uxr_deserialize_ObjectVariant+0x2a>
 801b22c:	68b1      	ldr	r1, [r6, #8]
 801b22e:	4628      	mov	r0, r5
 801b230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b238:	f001 b9ca 	b.w	801c5d0 <ucdr_deserialize_string>
 801b23c:	1d31      	adds	r1, r6, #4
 801b23e:	4628      	mov	r0, r5
 801b240:	f7f4 fb80 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b244:	4604      	mov	r4, r0
 801b246:	b170      	cbz	r0, 801b266 <uxr_deserialize_ObjectVariant+0x8a>
 801b248:	7933      	ldrb	r3, [r6, #4]
 801b24a:	2b02      	cmp	r3, #2
 801b24c:	d04c      	beq.n	801b2e8 <uxr_deserialize_ObjectVariant+0x10c>
 801b24e:	2b03      	cmp	r3, #3
 801b250:	d109      	bne.n	801b266 <uxr_deserialize_ObjectVariant+0x8a>
 801b252:	f106 0308 	add.w	r3, r6, #8
 801b256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b25a:	f106 010c 	add.w	r1, r6, #12
 801b25e:	4628      	mov	r0, r5
 801b260:	f7f7 fb76 	bl	8012950 <ucdr_deserialize_sequence_uint8_t>
 801b264:	4604      	mov	r4, r0
 801b266:	2202      	movs	r2, #2
 801b268:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801b26c:	4628      	mov	r0, r5
 801b26e:	f7fc ff9b 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b272:	4020      	ands	r0, r4
 801b274:	b2c4      	uxtb	r4, r0
 801b276:	e7c6      	b.n	801b206 <uxr_deserialize_ObjectVariant+0x2a>
 801b278:	1d31      	adds	r1, r6, #4
 801b27a:	4628      	mov	r0, r5
 801b27c:	f7f4 fb62 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b280:	4604      	mov	r4, r0
 801b282:	b130      	cbz	r0, 801b292 <uxr_deserialize_ObjectVariant+0xb6>
 801b284:	7933      	ldrb	r3, [r6, #4]
 801b286:	2b02      	cmp	r3, #2
 801b288:	d036      	beq.n	801b2f8 <uxr_deserialize_ObjectVariant+0x11c>
 801b28a:	2b03      	cmp	r3, #3
 801b28c:	d03c      	beq.n	801b308 <uxr_deserialize_ObjectVariant+0x12c>
 801b28e:	2b01      	cmp	r3, #1
 801b290:	d032      	beq.n	801b2f8 <uxr_deserialize_ObjectVariant+0x11c>
 801b292:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801b296:	4628      	mov	r0, r5
 801b298:	f7f5 f8fa 	bl	8010490 <ucdr_deserialize_int16_t>
 801b29c:	4020      	ands	r0, r4
 801b29e:	b2c4      	uxtb	r4, r0
 801b2a0:	e7b1      	b.n	801b206 <uxr_deserialize_ObjectVariant+0x2a>
 801b2a2:	1d31      	adds	r1, r6, #4
 801b2a4:	4628      	mov	r0, r5
 801b2a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b2aa:	f7ff bbbf 	b.w	801aa2c <uxr_deserialize_CLIENT_Representation>
 801b2ae:	2204      	movs	r2, #4
 801b2b0:	4628      	mov	r0, r5
 801b2b2:	18b1      	adds	r1, r6, r2
 801b2b4:	f7fc ff78 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b2b8:	4604      	mov	r4, r0
 801b2ba:	2202      	movs	r2, #2
 801b2bc:	f106 0108 	add.w	r1, r6, #8
 801b2c0:	4628      	mov	r0, r5
 801b2c2:	f7fc ff71 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b2c6:	4004      	ands	r4, r0
 801b2c8:	2202      	movs	r2, #2
 801b2ca:	f106 010a 	add.w	r1, r6, #10
 801b2ce:	4628      	mov	r0, r5
 801b2d0:	b2e4      	uxtb	r4, r4
 801b2d2:	f7fc ff69 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b2d6:	4603      	mov	r3, r0
 801b2d8:	f106 010c 	add.w	r1, r6, #12
 801b2dc:	4628      	mov	r0, r5
 801b2de:	401c      	ands	r4, r3
 801b2e0:	f7f4 fb02 	bl	800f8e8 <ucdr_deserialize_bool>
 801b2e4:	4004      	ands	r4, r0
 801b2e6:	e78e      	b.n	801b206 <uxr_deserialize_ObjectVariant+0x2a>
 801b2e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b2ec:	68b1      	ldr	r1, [r6, #8]
 801b2ee:	4628      	mov	r0, r5
 801b2f0:	f001 f96e 	bl	801c5d0 <ucdr_deserialize_string>
 801b2f4:	4604      	mov	r4, r0
 801b2f6:	e7b6      	b.n	801b266 <uxr_deserialize_ObjectVariant+0x8a>
 801b2f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b2fc:	68b1      	ldr	r1, [r6, #8]
 801b2fe:	4628      	mov	r0, r5
 801b300:	f001 f966 	bl	801c5d0 <ucdr_deserialize_string>
 801b304:	4604      	mov	r4, r0
 801b306:	e7c4      	b.n	801b292 <uxr_deserialize_ObjectVariant+0xb6>
 801b308:	f106 0308 	add.w	r3, r6, #8
 801b30c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b310:	f106 010c 	add.w	r1, r6, #12
 801b314:	4628      	mov	r0, r5
 801b316:	f7f7 fb1b 	bl	8012950 <ucdr_deserialize_sequence_uint8_t>
 801b31a:	4604      	mov	r4, r0
 801b31c:	e7b9      	b.n	801b292 <uxr_deserialize_ObjectVariant+0xb6>
 801b31e:	bf00      	nop

0801b320 <uxr_deserialize_BaseObjectRequest>:
 801b320:	b570      	push	{r4, r5, r6, lr}
 801b322:	2202      	movs	r2, #2
 801b324:	4605      	mov	r5, r0
 801b326:	460e      	mov	r6, r1
 801b328:	f7fc ff3e 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b32c:	2202      	movs	r2, #2
 801b32e:	4604      	mov	r4, r0
 801b330:	4628      	mov	r0, r5
 801b332:	18b1      	adds	r1, r6, r2
 801b334:	f7fc ff38 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b338:	4020      	ands	r0, r4
 801b33a:	b2c0      	uxtb	r0, r0
 801b33c:	bd70      	pop	{r4, r5, r6, pc}
 801b33e:	bf00      	nop

0801b340 <uxr_serialize_ActivityInfoVariant>:
 801b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b344:	460e      	mov	r6, r1
 801b346:	7809      	ldrb	r1, [r1, #0]
 801b348:	4680      	mov	r8, r0
 801b34a:	f7f4 fae5 	bl	800f918 <ucdr_serialize_uint8_t>
 801b34e:	4607      	mov	r7, r0
 801b350:	b138      	cbz	r0, 801b362 <uxr_serialize_ActivityInfoVariant+0x22>
 801b352:	7833      	ldrb	r3, [r6, #0]
 801b354:	2b06      	cmp	r3, #6
 801b356:	f000 8081 	beq.w	801b45c <uxr_serialize_ActivityInfoVariant+0x11c>
 801b35a:	2b0d      	cmp	r3, #13
 801b35c:	d014      	beq.n	801b388 <uxr_serialize_ActivityInfoVariant+0x48>
 801b35e:	2b05      	cmp	r3, #5
 801b360:	d002      	beq.n	801b368 <uxr_serialize_ActivityInfoVariant+0x28>
 801b362:	4638      	mov	r0, r7
 801b364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b368:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b36c:	4640      	mov	r0, r8
 801b36e:	f7f5 f80f 	bl	8010390 <ucdr_serialize_int16_t>
 801b372:	4607      	mov	r7, r0
 801b374:	4640      	mov	r0, r8
 801b376:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801b37a:	f7f4 ff39 	bl	80101f0 <ucdr_serialize_uint64_t>
 801b37e:	4038      	ands	r0, r7
 801b380:	b2c7      	uxtb	r7, r0
 801b382:	4638      	mov	r0, r7
 801b384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b388:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b38c:	4640      	mov	r0, r8
 801b38e:	f7f4 ffff 	bl	8010390 <ucdr_serialize_int16_t>
 801b392:	68f1      	ldr	r1, [r6, #12]
 801b394:	4607      	mov	r7, r0
 801b396:	4640      	mov	r0, r8
 801b398:	f7f4 fcd4 	bl	800fd44 <ucdr_serialize_uint32_t>
 801b39c:	68f3      	ldr	r3, [r6, #12]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d0ed      	beq.n	801b37e <uxr_serialize_ActivityInfoVariant+0x3e>
 801b3a2:	b318      	cbz	r0, 801b3ec <uxr_serialize_ActivityInfoVariant+0xac>
 801b3a4:	f106 090c 	add.w	r9, r6, #12
 801b3a8:	2400      	movs	r4, #0
 801b3aa:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801b3ae:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801b3b2:	7c29      	ldrb	r1, [r5, #16]
 801b3b4:	4640      	mov	r0, r8
 801b3b6:	f7f4 faaf 	bl	800f918 <ucdr_serialize_uint8_t>
 801b3ba:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801b3be:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801b3c2:	2800      	cmp	r0, #0
 801b3c4:	d051      	beq.n	801b46a <uxr_serialize_ActivityInfoVariant+0x12a>
 801b3c6:	7c2b      	ldrb	r3, [r5, #16]
 801b3c8:	00c9      	lsls	r1, r1, #3
 801b3ca:	2b03      	cmp	r3, #3
 801b3cc:	d854      	bhi.n	801b478 <uxr_serialize_ActivityInfoVariant+0x138>
 801b3ce:	e8df f003 	tbb	[pc, r3]
 801b3d2:	2133      	.short	0x2133
 801b3d4:	020f      	.short	0x020f
 801b3d6:	4449      	add	r1, r9
 801b3d8:	4640      	mov	r0, r8
 801b3da:	6889      	ldr	r1, [r1, #8]
 801b3dc:	f001 f8e8 	bl	801c5b0 <ucdr_serialize_string>
 801b3e0:	3401      	adds	r4, #1
 801b3e2:	68f2      	ldr	r2, [r6, #12]
 801b3e4:	4294      	cmp	r4, r2
 801b3e6:	d244      	bcs.n	801b472 <uxr_serialize_ActivityInfoVariant+0x132>
 801b3e8:	2800      	cmp	r0, #0
 801b3ea:	d1de      	bne.n	801b3aa <uxr_serialize_ActivityInfoVariant+0x6a>
 801b3ec:	2700      	movs	r7, #0
 801b3ee:	e7b8      	b.n	801b362 <uxr_serialize_ActivityInfoVariant+0x22>
 801b3f0:	3108      	adds	r1, #8
 801b3f2:	44a2      	add	sl, r4
 801b3f4:	2210      	movs	r2, #16
 801b3f6:	4640      	mov	r0, r8
 801b3f8:	4449      	add	r1, r9
 801b3fa:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801b3fe:	f7fc fe6f 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b402:	4605      	mov	r5, r0
 801b404:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801b408:	4640      	mov	r0, r8
 801b40a:	f7f4 fc9b 	bl	800fd44 <ucdr_serialize_uint32_t>
 801b40e:	4028      	ands	r0, r5
 801b410:	b2c0      	uxtb	r0, r0
 801b412:	e7e5      	b.n	801b3e0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801b414:	3108      	adds	r1, #8
 801b416:	44a2      	add	sl, r4
 801b418:	2204      	movs	r2, #4
 801b41a:	4640      	mov	r0, r8
 801b41c:	4449      	add	r1, r9
 801b41e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801b422:	f7fc fe5d 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b426:	4605      	mov	r5, r0
 801b428:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801b42c:	4640      	mov	r0, r8
 801b42e:	f7f4 fa9f 	bl	800f970 <ucdr_serialize_uint16_t>
 801b432:	4028      	ands	r0, r5
 801b434:	b2c0      	uxtb	r0, r0
 801b436:	e7d3      	b.n	801b3e0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801b438:	3108      	adds	r1, #8
 801b43a:	44a2      	add	sl, r4
 801b43c:	2202      	movs	r2, #2
 801b43e:	4640      	mov	r0, r8
 801b440:	4449      	add	r1, r9
 801b442:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801b446:	f7fc fe4b 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b44a:	4605      	mov	r5, r0
 801b44c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801b450:	4640      	mov	r0, r8
 801b452:	f7f4 fa61 	bl	800f918 <ucdr_serialize_uint8_t>
 801b456:	4028      	ands	r0, r5
 801b458:	b2c0      	uxtb	r0, r0
 801b45a:	e7c1      	b.n	801b3e0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801b45c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b460:	4640      	mov	r0, r8
 801b462:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b466:	f7f4 bf93 	b.w	8010390 <ucdr_serialize_int16_t>
 801b46a:	3401      	adds	r4, #1
 801b46c:	68f2      	ldr	r2, [r6, #12]
 801b46e:	42a2      	cmp	r2, r4
 801b470:	d8bc      	bhi.n	801b3ec <uxr_serialize_ActivityInfoVariant+0xac>
 801b472:	4007      	ands	r7, r0
 801b474:	b2ff      	uxtb	r7, r7
 801b476:	e774      	b.n	801b362 <uxr_serialize_ActivityInfoVariant+0x22>
 801b478:	3401      	adds	r4, #1
 801b47a:	68f3      	ldr	r3, [r6, #12]
 801b47c:	3518      	adds	r5, #24
 801b47e:	429c      	cmp	r4, r3
 801b480:	d397      	bcc.n	801b3b2 <uxr_serialize_ActivityInfoVariant+0x72>
 801b482:	e76e      	b.n	801b362 <uxr_serialize_ActivityInfoVariant+0x22>

0801b484 <uxr_deserialize_BaseObjectReply>:
 801b484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b488:	2202      	movs	r2, #2
 801b48a:	4606      	mov	r6, r0
 801b48c:	460f      	mov	r7, r1
 801b48e:	f7fc fe8b 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b492:	2202      	movs	r2, #2
 801b494:	4605      	mov	r5, r0
 801b496:	4630      	mov	r0, r6
 801b498:	18b9      	adds	r1, r7, r2
 801b49a:	f7fc fe85 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b49e:	4680      	mov	r8, r0
 801b4a0:	1d39      	adds	r1, r7, #4
 801b4a2:	4630      	mov	r0, r6
 801b4a4:	f7f4 fa4e 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b4a8:	ea05 0508 	and.w	r5, r5, r8
 801b4ac:	4604      	mov	r4, r0
 801b4ae:	1d79      	adds	r1, r7, #5
 801b4b0:	4630      	mov	r0, r6
 801b4b2:	402c      	ands	r4, r5
 801b4b4:	f7f4 fa46 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b4b8:	4020      	ands	r0, r4
 801b4ba:	b2c0      	uxtb	r0, r0
 801b4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b4c0 <uxr_serialize_ReadSpecification>:
 801b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4c2:	460e      	mov	r6, r1
 801b4c4:	4607      	mov	r7, r0
 801b4c6:	7809      	ldrb	r1, [r1, #0]
 801b4c8:	f7f4 fa26 	bl	800f918 <ucdr_serialize_uint8_t>
 801b4cc:	4604      	mov	r4, r0
 801b4ce:	7871      	ldrb	r1, [r6, #1]
 801b4d0:	4638      	mov	r0, r7
 801b4d2:	f7f4 fa21 	bl	800f918 <ucdr_serialize_uint8_t>
 801b4d6:	4004      	ands	r4, r0
 801b4d8:	78b1      	ldrb	r1, [r6, #2]
 801b4da:	4638      	mov	r0, r7
 801b4dc:	f7f4 f9ee 	bl	800f8bc <ucdr_serialize_bool>
 801b4e0:	78b3      	ldrb	r3, [r6, #2]
 801b4e2:	b2e4      	uxtb	r4, r4
 801b4e4:	4004      	ands	r4, r0
 801b4e6:	b943      	cbnz	r3, 801b4fa <uxr_serialize_ReadSpecification+0x3a>
 801b4e8:	7a31      	ldrb	r1, [r6, #8]
 801b4ea:	4638      	mov	r0, r7
 801b4ec:	f7f4 f9e6 	bl	800f8bc <ucdr_serialize_bool>
 801b4f0:	7a33      	ldrb	r3, [r6, #8]
 801b4f2:	4004      	ands	r4, r0
 801b4f4:	b93b      	cbnz	r3, 801b506 <uxr_serialize_ReadSpecification+0x46>
 801b4f6:	4620      	mov	r0, r4
 801b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4fa:	6871      	ldr	r1, [r6, #4]
 801b4fc:	4638      	mov	r0, r7
 801b4fe:	f001 f857 	bl	801c5b0 <ucdr_serialize_string>
 801b502:	4004      	ands	r4, r0
 801b504:	e7f0      	b.n	801b4e8 <uxr_serialize_ReadSpecification+0x28>
 801b506:	8971      	ldrh	r1, [r6, #10]
 801b508:	4638      	mov	r0, r7
 801b50a:	f7f4 fa31 	bl	800f970 <ucdr_serialize_uint16_t>
 801b50e:	4605      	mov	r5, r0
 801b510:	89b1      	ldrh	r1, [r6, #12]
 801b512:	4638      	mov	r0, r7
 801b514:	f7f4 fa2c 	bl	800f970 <ucdr_serialize_uint16_t>
 801b518:	4005      	ands	r5, r0
 801b51a:	89f1      	ldrh	r1, [r6, #14]
 801b51c:	4638      	mov	r0, r7
 801b51e:	b2ed      	uxtb	r5, r5
 801b520:	f7f4 fa26 	bl	800f970 <ucdr_serialize_uint16_t>
 801b524:	8a31      	ldrh	r1, [r6, #16]
 801b526:	4025      	ands	r5, r4
 801b528:	4604      	mov	r4, r0
 801b52a:	4638      	mov	r0, r7
 801b52c:	4025      	ands	r5, r4
 801b52e:	f7f4 fa1f 	bl	800f970 <ucdr_serialize_uint16_t>
 801b532:	ea00 0405 	and.w	r4, r0, r5
 801b536:	4620      	mov	r0, r4
 801b538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b53a:	bf00      	nop

0801b53c <uxr_serialize_CREATE_CLIENT_Payload>:
 801b53c:	f7ff ba1e 	b.w	801a97c <uxr_serialize_CLIENT_Representation>

0801b540 <uxr_serialize_CREATE_Payload>:
 801b540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b542:	2202      	movs	r2, #2
 801b544:	4607      	mov	r7, r0
 801b546:	460e      	mov	r6, r1
 801b548:	f7fc fdca 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b54c:	2202      	movs	r2, #2
 801b54e:	4605      	mov	r5, r0
 801b550:	4638      	mov	r0, r7
 801b552:	18b1      	adds	r1, r6, r2
 801b554:	f7fc fdc4 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b558:	7931      	ldrb	r1, [r6, #4]
 801b55a:	4604      	mov	r4, r0
 801b55c:	4638      	mov	r0, r7
 801b55e:	f7f4 f9db 	bl	800f918 <ucdr_serialize_uint8_t>
 801b562:	b170      	cbz	r0, 801b582 <uxr_serialize_CREATE_Payload+0x42>
 801b564:	7933      	ldrb	r3, [r6, #4]
 801b566:	402c      	ands	r4, r5
 801b568:	3b01      	subs	r3, #1
 801b56a:	b2e4      	uxtb	r4, r4
 801b56c:	2b0d      	cmp	r3, #13
 801b56e:	d809      	bhi.n	801b584 <uxr_serialize_CREATE_Payload+0x44>
 801b570:	e8df f003 	tbb	[pc, r3]
 801b574:	23230a4c 	.word	0x23230a4c
 801b578:	0a0a0a0a 	.word	0x0a0a0a0a
 801b57c:	12121208 	.word	0x12121208
 801b580:	3e45      	.short	0x3e45
 801b582:	2400      	movs	r4, #0
 801b584:	4620      	mov	r0, r4
 801b586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b588:	f106 0108 	add.w	r1, r6, #8
 801b58c:	4638      	mov	r0, r7
 801b58e:	f7ff fafb 	bl	801ab88 <uxr_serialize_DATAWRITER_Representation>
 801b592:	4004      	ands	r4, r0
 801b594:	4620      	mov	r0, r4
 801b596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b598:	7a31      	ldrb	r1, [r6, #8]
 801b59a:	4638      	mov	r0, r7
 801b59c:	f7f4 f9bc 	bl	800f918 <ucdr_serialize_uint8_t>
 801b5a0:	2800      	cmp	r0, #0
 801b5a2:	d0ee      	beq.n	801b582 <uxr_serialize_CREATE_Payload+0x42>
 801b5a4:	7a33      	ldrb	r3, [r6, #8]
 801b5a6:	2b01      	cmp	r3, #1
 801b5a8:	d001      	beq.n	801b5ae <uxr_serialize_CREATE_Payload+0x6e>
 801b5aa:	2b02      	cmp	r3, #2
 801b5ac:	d1ea      	bne.n	801b584 <uxr_serialize_CREATE_Payload+0x44>
 801b5ae:	68f1      	ldr	r1, [r6, #12]
 801b5b0:	4638      	mov	r0, r7
 801b5b2:	f000 fffd 	bl	801c5b0 <ucdr_serialize_string>
 801b5b6:	4004      	ands	r4, r0
 801b5b8:	e7e4      	b.n	801b584 <uxr_serialize_CREATE_Payload+0x44>
 801b5ba:	7a31      	ldrb	r1, [r6, #8]
 801b5bc:	4638      	mov	r0, r7
 801b5be:	f7f4 f9ab 	bl	800f918 <ucdr_serialize_uint8_t>
 801b5c2:	4605      	mov	r5, r0
 801b5c4:	b158      	cbz	r0, 801b5de <uxr_serialize_CREATE_Payload+0x9e>
 801b5c6:	7a33      	ldrb	r3, [r6, #8]
 801b5c8:	2b02      	cmp	r3, #2
 801b5ca:	d034      	beq.n	801b636 <uxr_serialize_CREATE_Payload+0xf6>
 801b5cc:	2b03      	cmp	r3, #3
 801b5ce:	d106      	bne.n	801b5de <uxr_serialize_CREATE_Payload+0x9e>
 801b5d0:	68f2      	ldr	r2, [r6, #12]
 801b5d2:	f106 0110 	add.w	r1, r6, #16
 801b5d6:	4638      	mov	r0, r7
 801b5d8:	f7f7 f9a8 	bl	801292c <ucdr_serialize_sequence_uint8_t>
 801b5dc:	4605      	mov	r5, r0
 801b5de:	2202      	movs	r2, #2
 801b5e0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801b5e4:	4638      	mov	r0, r7
 801b5e6:	f7fc fd7b 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b5ea:	4028      	ands	r0, r5
 801b5ec:	4004      	ands	r4, r0
 801b5ee:	e7c9      	b.n	801b584 <uxr_serialize_CREATE_Payload+0x44>
 801b5f0:	f106 0108 	add.w	r1, r6, #8
 801b5f4:	4638      	mov	r0, r7
 801b5f6:	f7ff f9c1 	bl	801a97c <uxr_serialize_CLIENT_Representation>
 801b5fa:	4004      	ands	r4, r0
 801b5fc:	e7c2      	b.n	801b584 <uxr_serialize_CREATE_Payload+0x44>
 801b5fe:	f106 0108 	add.w	r1, r6, #8
 801b602:	4638      	mov	r0, r7
 801b604:	f7ff fa76 	bl	801aaf4 <uxr_serialize_AGENT_Representation>
 801b608:	4004      	ands	r4, r0
 801b60a:	e7bb      	b.n	801b584 <uxr_serialize_CREATE_Payload+0x44>
 801b60c:	7a31      	ldrb	r1, [r6, #8]
 801b60e:	4638      	mov	r0, r7
 801b610:	f7f4 f982 	bl	800f918 <ucdr_serialize_uint8_t>
 801b614:	4605      	mov	r5, r0
 801b616:	b130      	cbz	r0, 801b626 <uxr_serialize_CREATE_Payload+0xe6>
 801b618:	7a33      	ldrb	r3, [r6, #8]
 801b61a:	2b02      	cmp	r3, #2
 801b61c:	d011      	beq.n	801b642 <uxr_serialize_CREATE_Payload+0x102>
 801b61e:	2b03      	cmp	r3, #3
 801b620:	d015      	beq.n	801b64e <uxr_serialize_CREATE_Payload+0x10e>
 801b622:	2b01      	cmp	r3, #1
 801b624:	d00d      	beq.n	801b642 <uxr_serialize_CREATE_Payload+0x102>
 801b626:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801b62a:	4638      	mov	r0, r7
 801b62c:	f7f4 feb0 	bl	8010390 <ucdr_serialize_int16_t>
 801b630:	4028      	ands	r0, r5
 801b632:	4004      	ands	r4, r0
 801b634:	e7a6      	b.n	801b584 <uxr_serialize_CREATE_Payload+0x44>
 801b636:	68f1      	ldr	r1, [r6, #12]
 801b638:	4638      	mov	r0, r7
 801b63a:	f000 ffb9 	bl	801c5b0 <ucdr_serialize_string>
 801b63e:	4605      	mov	r5, r0
 801b640:	e7cd      	b.n	801b5de <uxr_serialize_CREATE_Payload+0x9e>
 801b642:	68f1      	ldr	r1, [r6, #12]
 801b644:	4638      	mov	r0, r7
 801b646:	f000 ffb3 	bl	801c5b0 <ucdr_serialize_string>
 801b64a:	4605      	mov	r5, r0
 801b64c:	e7eb      	b.n	801b626 <uxr_serialize_CREATE_Payload+0xe6>
 801b64e:	68f2      	ldr	r2, [r6, #12]
 801b650:	f106 0110 	add.w	r1, r6, #16
 801b654:	4638      	mov	r0, r7
 801b656:	f7f7 f969 	bl	801292c <ucdr_serialize_sequence_uint8_t>
 801b65a:	4605      	mov	r5, r0
 801b65c:	e7e3      	b.n	801b626 <uxr_serialize_CREATE_Payload+0xe6>
 801b65e:	bf00      	nop

0801b660 <uxr_deserialize_GET_INFO_Payload>:
 801b660:	b570      	push	{r4, r5, r6, lr}
 801b662:	2202      	movs	r2, #2
 801b664:	4605      	mov	r5, r0
 801b666:	460e      	mov	r6, r1
 801b668:	f7fc fd9e 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b66c:	2202      	movs	r2, #2
 801b66e:	4604      	mov	r4, r0
 801b670:	4628      	mov	r0, r5
 801b672:	18b1      	adds	r1, r6, r2
 801b674:	f7fc fd98 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b678:	4603      	mov	r3, r0
 801b67a:	1d31      	adds	r1, r6, #4
 801b67c:	4628      	mov	r0, r5
 801b67e:	401c      	ands	r4, r3
 801b680:	f7f4 fc90 	bl	800ffa4 <ucdr_deserialize_uint32_t>
 801b684:	b2e4      	uxtb	r4, r4
 801b686:	4020      	ands	r0, r4
 801b688:	bd70      	pop	{r4, r5, r6, pc}
 801b68a:	bf00      	nop

0801b68c <uxr_serialize_DELETE_Payload>:
 801b68c:	b570      	push	{r4, r5, r6, lr}
 801b68e:	2202      	movs	r2, #2
 801b690:	4605      	mov	r5, r0
 801b692:	460e      	mov	r6, r1
 801b694:	f7fc fd24 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b698:	2202      	movs	r2, #2
 801b69a:	4604      	mov	r4, r0
 801b69c:	4628      	mov	r0, r5
 801b69e:	18b1      	adds	r1, r6, r2
 801b6a0:	f7fc fd1e 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b6a4:	4020      	ands	r0, r4
 801b6a6:	b2c0      	uxtb	r0, r0
 801b6a8:	bd70      	pop	{r4, r5, r6, pc}
 801b6aa:	bf00      	nop

0801b6ac <uxr_deserialize_STATUS_AGENT_Payload>:
 801b6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6b0:	460e      	mov	r6, r1
 801b6b2:	4605      	mov	r5, r0
 801b6b4:	f7f4 f946 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b6b8:	4604      	mov	r4, r0
 801b6ba:	1c71      	adds	r1, r6, #1
 801b6bc:	4628      	mov	r0, r5
 801b6be:	f7f4 f941 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b6c2:	2204      	movs	r2, #4
 801b6c4:	4681      	mov	r9, r0
 801b6c6:	4628      	mov	r0, r5
 801b6c8:	18b1      	adds	r1, r6, r2
 801b6ca:	f7fc fd6d 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b6ce:	f106 0108 	add.w	r1, r6, #8
 801b6d2:	4680      	mov	r8, r0
 801b6d4:	2202      	movs	r2, #2
 801b6d6:	4628      	mov	r0, r5
 801b6d8:	f7fc fd66 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b6dc:	ea04 0309 	and.w	r3, r4, r9
 801b6e0:	4607      	mov	r7, r0
 801b6e2:	2202      	movs	r2, #2
 801b6e4:	b2db      	uxtb	r3, r3
 801b6e6:	f106 010a 	add.w	r1, r6, #10
 801b6ea:	4628      	mov	r0, r5
 801b6ec:	ea03 0408 	and.w	r4, r3, r8
 801b6f0:	f7fc fd5a 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b6f4:	4603      	mov	r3, r0
 801b6f6:	4628      	mov	r0, r5
 801b6f8:	403c      	ands	r4, r7
 801b6fa:	f106 010c 	add.w	r1, r6, #12
 801b6fe:	461d      	mov	r5, r3
 801b700:	f7f4 f8f2 	bl	800f8e8 <ucdr_deserialize_bool>
 801b704:	4025      	ands	r5, r4
 801b706:	4028      	ands	r0, r5
 801b708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801b70c <uxr_deserialize_STATUS_Payload>:
 801b70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b710:	2202      	movs	r2, #2
 801b712:	4606      	mov	r6, r0
 801b714:	460f      	mov	r7, r1
 801b716:	f7fc fd47 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b71a:	2202      	movs	r2, #2
 801b71c:	4605      	mov	r5, r0
 801b71e:	4630      	mov	r0, r6
 801b720:	18b9      	adds	r1, r7, r2
 801b722:	f7fc fd41 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b726:	4680      	mov	r8, r0
 801b728:	1d39      	adds	r1, r7, #4
 801b72a:	4630      	mov	r0, r6
 801b72c:	f7f4 f90a 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b730:	ea05 0508 	and.w	r5, r5, r8
 801b734:	4604      	mov	r4, r0
 801b736:	1d79      	adds	r1, r7, #5
 801b738:	4630      	mov	r0, r6
 801b73a:	402c      	ands	r4, r5
 801b73c:	f7f4 f902 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b740:	4020      	ands	r0, r4
 801b742:	b2c0      	uxtb	r0, r0
 801b744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b748 <uxr_serialize_INFO_Payload>:
 801b748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b74c:	2202      	movs	r2, #2
 801b74e:	460c      	mov	r4, r1
 801b750:	4605      	mov	r5, r0
 801b752:	f7fc fcc5 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b756:	2202      	movs	r2, #2
 801b758:	4680      	mov	r8, r0
 801b75a:	4628      	mov	r0, r5
 801b75c:	18a1      	adds	r1, r4, r2
 801b75e:	f7fc fcbf 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b762:	4607      	mov	r7, r0
 801b764:	7921      	ldrb	r1, [r4, #4]
 801b766:	4628      	mov	r0, r5
 801b768:	f7f4 f8d6 	bl	800f918 <ucdr_serialize_uint8_t>
 801b76c:	ea08 0807 	and.w	r8, r8, r7
 801b770:	4606      	mov	r6, r0
 801b772:	7961      	ldrb	r1, [r4, #5]
 801b774:	4628      	mov	r0, r5
 801b776:	ea06 0608 	and.w	r6, r6, r8
 801b77a:	f7f4 f8cd 	bl	800f918 <ucdr_serialize_uint8_t>
 801b77e:	7a21      	ldrb	r1, [r4, #8]
 801b780:	4030      	ands	r0, r6
 801b782:	b2c7      	uxtb	r7, r0
 801b784:	4628      	mov	r0, r5
 801b786:	f7f4 f899 	bl	800f8bc <ucdr_serialize_bool>
 801b78a:	7a23      	ldrb	r3, [r4, #8]
 801b78c:	4606      	mov	r6, r0
 801b78e:	b96b      	cbnz	r3, 801b7ac <uxr_serialize_INFO_Payload+0x64>
 801b790:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801b794:	4628      	mov	r0, r5
 801b796:	f7f4 f891 	bl	800f8bc <ucdr_serialize_bool>
 801b79a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801b79e:	4030      	ands	r0, r6
 801b7a0:	b2c6      	uxtb	r6, r0
 801b7a2:	b983      	cbnz	r3, 801b7c6 <uxr_serialize_INFO_Payload+0x7e>
 801b7a4:	ea06 0007 	and.w	r0, r6, r7
 801b7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7ac:	7b21      	ldrb	r1, [r4, #12]
 801b7ae:	4628      	mov	r0, r5
 801b7b0:	f7f4 f8b2 	bl	800f918 <ucdr_serialize_uint8_t>
 801b7b4:	b188      	cbz	r0, 801b7da <uxr_serialize_INFO_Payload+0x92>
 801b7b6:	f104 010c 	add.w	r1, r4, #12
 801b7ba:	4628      	mov	r0, r5
 801b7bc:	f7ff fa0c 	bl	801abd8 <uxr_serialize_ObjectVariant.part.0>
 801b7c0:	4030      	ands	r0, r6
 801b7c2:	b2c6      	uxtb	r6, r0
 801b7c4:	e7e4      	b.n	801b790 <uxr_serialize_INFO_Payload+0x48>
 801b7c6:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801b7ca:	4628      	mov	r0, r5
 801b7cc:	f7ff fdb8 	bl	801b340 <uxr_serialize_ActivityInfoVariant>
 801b7d0:	4006      	ands	r6, r0
 801b7d2:	ea06 0007 	and.w	r0, r6, r7
 801b7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7da:	4606      	mov	r6, r0
 801b7dc:	e7d8      	b.n	801b790 <uxr_serialize_INFO_Payload+0x48>
 801b7de:	bf00      	nop

0801b7e0 <uxr_serialize_READ_DATA_Payload>:
 801b7e0:	b570      	push	{r4, r5, r6, lr}
 801b7e2:	2202      	movs	r2, #2
 801b7e4:	4605      	mov	r5, r0
 801b7e6:	460e      	mov	r6, r1
 801b7e8:	f7fc fc7a 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b7ec:	2202      	movs	r2, #2
 801b7ee:	4604      	mov	r4, r0
 801b7f0:	4628      	mov	r0, r5
 801b7f2:	18b1      	adds	r1, r6, r2
 801b7f4:	f7fc fc74 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b7f8:	4603      	mov	r3, r0
 801b7fa:	1d31      	adds	r1, r6, #4
 801b7fc:	4628      	mov	r0, r5
 801b7fe:	401c      	ands	r4, r3
 801b800:	f7ff fe5e 	bl	801b4c0 <uxr_serialize_ReadSpecification>
 801b804:	b2e4      	uxtb	r4, r4
 801b806:	4020      	ands	r0, r4
 801b808:	bd70      	pop	{r4, r5, r6, pc}
 801b80a:	bf00      	nop

0801b80c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801b80c:	b570      	push	{r4, r5, r6, lr}
 801b80e:	2202      	movs	r2, #2
 801b810:	4605      	mov	r5, r0
 801b812:	460e      	mov	r6, r1
 801b814:	f7fc fc64 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b818:	2202      	movs	r2, #2
 801b81a:	4604      	mov	r4, r0
 801b81c:	4628      	mov	r0, r5
 801b81e:	18b1      	adds	r1, r6, r2
 801b820:	f7fc fc5e 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b824:	4020      	ands	r0, r4
 801b826:	b2c0      	uxtb	r0, r0
 801b828:	bd70      	pop	{r4, r5, r6, pc}
 801b82a:	bf00      	nop

0801b82c <uxr_serialize_ACKNACK_Payload>:
 801b82c:	b570      	push	{r4, r5, r6, lr}
 801b82e:	460c      	mov	r4, r1
 801b830:	4605      	mov	r5, r0
 801b832:	460e      	mov	r6, r1
 801b834:	f834 1b02 	ldrh.w	r1, [r4], #2
 801b838:	f7f4 f89a 	bl	800f970 <ucdr_serialize_uint16_t>
 801b83c:	2202      	movs	r2, #2
 801b83e:	4621      	mov	r1, r4
 801b840:	4604      	mov	r4, r0
 801b842:	4628      	mov	r0, r5
 801b844:	f7fc fc4c 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b848:	4603      	mov	r3, r0
 801b84a:	7931      	ldrb	r1, [r6, #4]
 801b84c:	4628      	mov	r0, r5
 801b84e:	401c      	ands	r4, r3
 801b850:	f7f4 f862 	bl	800f918 <ucdr_serialize_uint8_t>
 801b854:	b2e4      	uxtb	r4, r4
 801b856:	4020      	ands	r0, r4
 801b858:	bd70      	pop	{r4, r5, r6, pc}
 801b85a:	bf00      	nop

0801b85c <uxr_deserialize_ACKNACK_Payload>:
 801b85c:	b570      	push	{r4, r5, r6, lr}
 801b85e:	460e      	mov	r6, r1
 801b860:	4605      	mov	r5, r0
 801b862:	f7f4 f985 	bl	800fb70 <ucdr_deserialize_uint16_t>
 801b866:	2202      	movs	r2, #2
 801b868:	4604      	mov	r4, r0
 801b86a:	4628      	mov	r0, r5
 801b86c:	18b1      	adds	r1, r6, r2
 801b86e:	f7fc fc9b 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b872:	4603      	mov	r3, r0
 801b874:	1d31      	adds	r1, r6, #4
 801b876:	4628      	mov	r0, r5
 801b878:	401c      	ands	r4, r3
 801b87a:	f7f4 f863 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b87e:	b2e4      	uxtb	r4, r4
 801b880:	4020      	ands	r0, r4
 801b882:	bd70      	pop	{r4, r5, r6, pc}

0801b884 <uxr_serialize_HEARTBEAT_Payload>:
 801b884:	b570      	push	{r4, r5, r6, lr}
 801b886:	460d      	mov	r5, r1
 801b888:	4606      	mov	r6, r0
 801b88a:	8809      	ldrh	r1, [r1, #0]
 801b88c:	f7f4 f870 	bl	800f970 <ucdr_serialize_uint16_t>
 801b890:	8869      	ldrh	r1, [r5, #2]
 801b892:	4604      	mov	r4, r0
 801b894:	4630      	mov	r0, r6
 801b896:	f7f4 f86b 	bl	800f970 <ucdr_serialize_uint16_t>
 801b89a:	4603      	mov	r3, r0
 801b89c:	7929      	ldrb	r1, [r5, #4]
 801b89e:	4630      	mov	r0, r6
 801b8a0:	401c      	ands	r4, r3
 801b8a2:	f7f4 f839 	bl	800f918 <ucdr_serialize_uint8_t>
 801b8a6:	b2e4      	uxtb	r4, r4
 801b8a8:	4020      	ands	r0, r4
 801b8aa:	bd70      	pop	{r4, r5, r6, pc}

0801b8ac <uxr_deserialize_HEARTBEAT_Payload>:
 801b8ac:	b570      	push	{r4, r5, r6, lr}
 801b8ae:	460e      	mov	r6, r1
 801b8b0:	4605      	mov	r5, r0
 801b8b2:	f7f4 f95d 	bl	800fb70 <ucdr_deserialize_uint16_t>
 801b8b6:	4604      	mov	r4, r0
 801b8b8:	1cb1      	adds	r1, r6, #2
 801b8ba:	4628      	mov	r0, r5
 801b8bc:	f7f4 f958 	bl	800fb70 <ucdr_deserialize_uint16_t>
 801b8c0:	4603      	mov	r3, r0
 801b8c2:	1d31      	adds	r1, r6, #4
 801b8c4:	4628      	mov	r0, r5
 801b8c6:	401c      	ands	r4, r3
 801b8c8:	f7f4 f83c 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b8cc:	b2e4      	uxtb	r4, r4
 801b8ce:	4020      	ands	r0, r4
 801b8d0:	bd70      	pop	{r4, r5, r6, pc}
 801b8d2:	bf00      	nop

0801b8d4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801b8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8d8:	460e      	mov	r6, r1
 801b8da:	4605      	mov	r5, r0
 801b8dc:	f7f4 fee4 	bl	80106a8 <ucdr_deserialize_int32_t>
 801b8e0:	4607      	mov	r7, r0
 801b8e2:	1d31      	adds	r1, r6, #4
 801b8e4:	4628      	mov	r0, r5
 801b8e6:	f7f4 fb5d 	bl	800ffa4 <ucdr_deserialize_uint32_t>
 801b8ea:	4680      	mov	r8, r0
 801b8ec:	f106 0108 	add.w	r1, r6, #8
 801b8f0:	4628      	mov	r0, r5
 801b8f2:	f7f4 fed9 	bl	80106a8 <ucdr_deserialize_int32_t>
 801b8f6:	ea07 0708 	and.w	r7, r7, r8
 801b8fa:	4604      	mov	r4, r0
 801b8fc:	f106 010c 	add.w	r1, r6, #12
 801b900:	4628      	mov	r0, r5
 801b902:	403c      	ands	r4, r7
 801b904:	f7f4 fb4e 	bl	800ffa4 <ucdr_deserialize_uint32_t>
 801b908:	f106 0110 	add.w	r1, r6, #16
 801b90c:	4004      	ands	r4, r0
 801b90e:	4628      	mov	r0, r5
 801b910:	f7f4 feca 	bl	80106a8 <ucdr_deserialize_int32_t>
 801b914:	4603      	mov	r3, r0
 801b916:	b2e4      	uxtb	r4, r4
 801b918:	4628      	mov	r0, r5
 801b91a:	461d      	mov	r5, r3
 801b91c:	f106 0114 	add.w	r1, r6, #20
 801b920:	f7f4 fb40 	bl	800ffa4 <ucdr_deserialize_uint32_t>
 801b924:	402c      	ands	r4, r5
 801b926:	4020      	ands	r0, r4
 801b928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b92c <uxr_serialize_SampleIdentity>:
 801b92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b930:	4604      	mov	r4, r0
 801b932:	460d      	mov	r5, r1
 801b934:	220c      	movs	r2, #12
 801b936:	f7fc fbd3 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b93a:	2203      	movs	r2, #3
 801b93c:	f105 010c 	add.w	r1, r5, #12
 801b940:	4607      	mov	r7, r0
 801b942:	4620      	mov	r0, r4
 801b944:	f7fc fbcc 	bl	80180e0 <ucdr_serialize_array_uint8_t>
 801b948:	7be9      	ldrb	r1, [r5, #15]
 801b94a:	4680      	mov	r8, r0
 801b94c:	4620      	mov	r0, r4
 801b94e:	f7f3 ffe3 	bl	800f918 <ucdr_serialize_uint8_t>
 801b952:	6929      	ldr	r1, [r5, #16]
 801b954:	4606      	mov	r6, r0
 801b956:	4620      	mov	r0, r4
 801b958:	f7f4 fe0e 	bl	8010578 <ucdr_serialize_int32_t>
 801b95c:	ea07 0708 	and.w	r7, r7, r8
 801b960:	4603      	mov	r3, r0
 801b962:	4620      	mov	r0, r4
 801b964:	403e      	ands	r6, r7
 801b966:	6969      	ldr	r1, [r5, #20]
 801b968:	461c      	mov	r4, r3
 801b96a:	f7f4 f9eb 	bl	800fd44 <ucdr_serialize_uint32_t>
 801b96e:	4034      	ands	r4, r6
 801b970:	4020      	ands	r0, r4
 801b972:	b2c0      	uxtb	r0, r0
 801b974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b978 <uxr_deserialize_SampleIdentity>:
 801b978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b97c:	4604      	mov	r4, r0
 801b97e:	460d      	mov	r5, r1
 801b980:	220c      	movs	r2, #12
 801b982:	f7fc fc11 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b986:	2203      	movs	r2, #3
 801b988:	f105 010c 	add.w	r1, r5, #12
 801b98c:	4607      	mov	r7, r0
 801b98e:	4620      	mov	r0, r4
 801b990:	f7fc fc0a 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801b994:	f105 010f 	add.w	r1, r5, #15
 801b998:	4680      	mov	r8, r0
 801b99a:	4620      	mov	r0, r4
 801b99c:	f7f3 ffd2 	bl	800f944 <ucdr_deserialize_uint8_t>
 801b9a0:	f105 0110 	add.w	r1, r5, #16
 801b9a4:	4606      	mov	r6, r0
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	f7f4 fe7e 	bl	80106a8 <ucdr_deserialize_int32_t>
 801b9ac:	ea07 0708 	and.w	r7, r7, r8
 801b9b0:	4603      	mov	r3, r0
 801b9b2:	4620      	mov	r0, r4
 801b9b4:	403e      	ands	r6, r7
 801b9b6:	f105 0114 	add.w	r1, r5, #20
 801b9ba:	461c      	mov	r4, r3
 801b9bc:	f7f4 faf2 	bl	800ffa4 <ucdr_deserialize_uint32_t>
 801b9c0:	4034      	ands	r4, r6
 801b9c2:	4020      	ands	r0, r4
 801b9c4:	b2c0      	uxtb	r0, r0
 801b9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9ca:	bf00      	nop

0801b9cc <rcl_convert_rmw_ret_to_rcl_ret>:
 801b9cc:	280b      	cmp	r0, #11
 801b9ce:	dc0d      	bgt.n	801b9ec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b9d0:	2800      	cmp	r0, #0
 801b9d2:	db09      	blt.n	801b9e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b9d4:	280b      	cmp	r0, #11
 801b9d6:	d807      	bhi.n	801b9e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b9d8:	e8df f000 	tbb	[pc, r0]
 801b9dc:	07060607 	.word	0x07060607
 801b9e0:	06060606 	.word	0x06060606
 801b9e4:	07070606 	.word	0x07070606
 801b9e8:	2001      	movs	r0, #1
 801b9ea:	4770      	bx	lr
 801b9ec:	28cb      	cmp	r0, #203	@ 0xcb
 801b9ee:	bf18      	it	ne
 801b9f0:	2001      	movne	r0, #1
 801b9f2:	4770      	bx	lr

0801b9f4 <rcl_get_default_domain_id>:
 801b9f4:	b530      	push	{r4, r5, lr}
 801b9f6:	2300      	movs	r3, #0
 801b9f8:	b083      	sub	sp, #12
 801b9fa:	9300      	str	r3, [sp, #0]
 801b9fc:	b1d0      	cbz	r0, 801ba34 <rcl_get_default_domain_id+0x40>
 801b9fe:	4604      	mov	r4, r0
 801ba00:	4669      	mov	r1, sp
 801ba02:	4815      	ldr	r0, [pc, #84]	@ (801ba58 <rcl_get_default_domain_id+0x64>)
 801ba04:	f7f9 ff30 	bl	8015868 <rcutils_get_env>
 801ba08:	4602      	mov	r2, r0
 801ba0a:	b110      	cbz	r0, 801ba12 <rcl_get_default_domain_id+0x1e>
 801ba0c:	2001      	movs	r0, #1
 801ba0e:	b003      	add	sp, #12
 801ba10:	bd30      	pop	{r4, r5, pc}
 801ba12:	9b00      	ldr	r3, [sp, #0]
 801ba14:	b18b      	cbz	r3, 801ba3a <rcl_get_default_domain_id+0x46>
 801ba16:	7818      	ldrb	r0, [r3, #0]
 801ba18:	2800      	cmp	r0, #0
 801ba1a:	d0f8      	beq.n	801ba0e <rcl_get_default_domain_id+0x1a>
 801ba1c:	a901      	add	r1, sp, #4
 801ba1e:	4618      	mov	r0, r3
 801ba20:	9201      	str	r2, [sp, #4]
 801ba22:	f001 fd6b 	bl	801d4fc <strtoul>
 801ba26:	4605      	mov	r5, r0
 801ba28:	b150      	cbz	r0, 801ba40 <rcl_get_default_domain_id+0x4c>
 801ba2a:	1c43      	adds	r3, r0, #1
 801ba2c:	d00d      	beq.n	801ba4a <rcl_get_default_domain_id+0x56>
 801ba2e:	2000      	movs	r0, #0
 801ba30:	6025      	str	r5, [r4, #0]
 801ba32:	e7ec      	b.n	801ba0e <rcl_get_default_domain_id+0x1a>
 801ba34:	200b      	movs	r0, #11
 801ba36:	b003      	add	sp, #12
 801ba38:	bd30      	pop	{r4, r5, pc}
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	b003      	add	sp, #12
 801ba3e:	bd30      	pop	{r4, r5, pc}
 801ba40:	9b01      	ldr	r3, [sp, #4]
 801ba42:	781b      	ldrb	r3, [r3, #0]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d0f2      	beq.n	801ba2e <rcl_get_default_domain_id+0x3a>
 801ba48:	e7e0      	b.n	801ba0c <rcl_get_default_domain_id+0x18>
 801ba4a:	f002 f8d5 	bl	801dbf8 <__errno>
 801ba4e:	6803      	ldr	r3, [r0, #0]
 801ba50:	2b22      	cmp	r3, #34	@ 0x22
 801ba52:	d1ec      	bne.n	801ba2e <rcl_get_default_domain_id+0x3a>
 801ba54:	e7da      	b.n	801ba0c <rcl_get_default_domain_id+0x18>
 801ba56:	bf00      	nop
 801ba58:	080209f4 	.word	0x080209f4

0801ba5c <rcl_expand_topic_name>:
 801ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba60:	b08d      	sub	sp, #52	@ 0x34
 801ba62:	4698      	mov	r8, r3
 801ba64:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ba66:	9207      	str	r2, [sp, #28]
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	bf18      	it	ne
 801ba6c:	f1b8 0f00 	cmpne.w	r8, #0
 801ba70:	bf0c      	ite	eq
 801ba72:	2301      	moveq	r3, #1
 801ba74:	2300      	movne	r3, #0
 801ba76:	2a00      	cmp	r2, #0
 801ba78:	bf08      	it	eq
 801ba7a:	f043 0301 	orreq.w	r3, r3, #1
 801ba7e:	2900      	cmp	r1, #0
 801ba80:	bf08      	it	eq
 801ba82:	f043 0301 	orreq.w	r3, r3, #1
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d13d      	bne.n	801bb06 <rcl_expand_topic_name+0xaa>
 801ba8a:	fab0 f280 	clz	r2, r0
 801ba8e:	4604      	mov	r4, r0
 801ba90:	0952      	lsrs	r2, r2, #5
 801ba92:	2800      	cmp	r0, #0
 801ba94:	d037      	beq.n	801bb06 <rcl_expand_topic_name+0xaa>
 801ba96:	460f      	mov	r7, r1
 801ba98:	a90b      	add	r1, sp, #44	@ 0x2c
 801ba9a:	f000 f9f3 	bl	801be84 <rcl_validate_topic_name>
 801ba9e:	4605      	mov	r5, r0
 801baa0:	bb68      	cbnz	r0, 801bafe <rcl_expand_topic_name+0xa2>
 801baa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d137      	bne.n	801bb18 <rcl_expand_topic_name+0xbc>
 801baa8:	4602      	mov	r2, r0
 801baaa:	a90b      	add	r1, sp, #44	@ 0x2c
 801baac:	4638      	mov	r0, r7
 801baae:	f7fa faed 	bl	801608c <rmw_validate_node_name>
 801bab2:	bb68      	cbnz	r0, 801bb10 <rcl_expand_topic_name+0xb4>
 801bab4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d133      	bne.n	801bb22 <rcl_expand_topic_name+0xc6>
 801baba:	462a      	mov	r2, r5
 801babc:	a90b      	add	r1, sp, #44	@ 0x2c
 801babe:	9807      	ldr	r0, [sp, #28]
 801bac0:	f7fa fac6 	bl	8016050 <rmw_validate_namespace>
 801bac4:	bb20      	cbnz	r0, 801bb10 <rcl_expand_topic_name+0xb4>
 801bac6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801bac8:	2d00      	cmp	r5, #0
 801baca:	f040 80a2 	bne.w	801bc12 <rcl_expand_topic_name+0x1b6>
 801bace:	217b      	movs	r1, #123	@ 0x7b
 801bad0:	4620      	mov	r0, r4
 801bad2:	f001 ffaf 	bl	801da34 <strchr>
 801bad6:	7823      	ldrb	r3, [r4, #0]
 801bad8:	4681      	mov	r9, r0
 801bada:	bb20      	cbnz	r0, 801bb26 <rcl_expand_topic_name+0xca>
 801badc:	2b2f      	cmp	r3, #47	@ 0x2f
 801bade:	d122      	bne.n	801bb26 <rcl_expand_topic_name+0xca>
 801bae0:	ab19      	add	r3, sp, #100	@ 0x64
 801bae2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bae6:	ab16      	add	r3, sp, #88	@ 0x58
 801bae8:	e88d 0003 	stmia.w	sp, {r0, r1}
 801baec:	4620      	mov	r0, r4
 801baee:	cb0e      	ldmia	r3, {r1, r2, r3}
 801baf0:	f7fa f81c 	bl	8015b2c <rcutils_strdup>
 801baf4:	2800      	cmp	r0, #0
 801baf6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801baf8:	bf08      	it	eq
 801bafa:	250a      	moveq	r5, #10
 801bafc:	6018      	str	r0, [r3, #0]
 801bafe:	4628      	mov	r0, r5
 801bb00:	b00d      	add	sp, #52	@ 0x34
 801bb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb06:	250b      	movs	r5, #11
 801bb08:	4628      	mov	r0, r5
 801bb0a:	b00d      	add	sp, #52	@ 0x34
 801bb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb10:	f7ff ff5c 	bl	801b9cc <rcl_convert_rmw_ret_to_rcl_ret>
 801bb14:	4605      	mov	r5, r0
 801bb16:	e7f2      	b.n	801bafe <rcl_expand_topic_name+0xa2>
 801bb18:	2567      	movs	r5, #103	@ 0x67
 801bb1a:	4628      	mov	r0, r5
 801bb1c:	b00d      	add	sp, #52	@ 0x34
 801bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb22:	25c9      	movs	r5, #201	@ 0xc9
 801bb24:	e7eb      	b.n	801bafe <rcl_expand_topic_name+0xa2>
 801bb26:	2b7e      	cmp	r3, #126	@ 0x7e
 801bb28:	d075      	beq.n	801bc16 <rcl_expand_topic_name+0x1ba>
 801bb2a:	f1b9 0f00 	cmp.w	r9, #0
 801bb2e:	f000 80c2 	beq.w	801bcb6 <rcl_expand_topic_name+0x25a>
 801bb32:	2300      	movs	r3, #0
 801bb34:	46a2      	mov	sl, r4
 801bb36:	461e      	mov	r6, r3
 801bb38:	9508      	str	r5, [sp, #32]
 801bb3a:	4655      	mov	r5, sl
 801bb3c:	9409      	str	r4, [sp, #36]	@ 0x24
 801bb3e:	46b2      	mov	sl, r6
 801bb40:	464c      	mov	r4, r9
 801bb42:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801bb46:	2c00      	cmp	r4, #0
 801bb48:	f000 80ae 	beq.w	801bca8 <rcl_expand_topic_name+0x24c>
 801bb4c:	217d      	movs	r1, #125	@ 0x7d
 801bb4e:	4628      	mov	r0, r5
 801bb50:	f001 ff70 	bl	801da34 <strchr>
 801bb54:	eba0 0904 	sub.w	r9, r0, r4
 801bb58:	4621      	mov	r1, r4
 801bb5a:	4869      	ldr	r0, [pc, #420]	@ (801bd00 <rcl_expand_topic_name+0x2a4>)
 801bb5c:	f109 0601 	add.w	r6, r9, #1
 801bb60:	4632      	mov	r2, r6
 801bb62:	f001 ff74 	bl	801da4e <strncmp>
 801bb66:	2800      	cmp	r0, #0
 801bb68:	d051      	beq.n	801bc0e <rcl_expand_topic_name+0x1b2>
 801bb6a:	4632      	mov	r2, r6
 801bb6c:	4621      	mov	r1, r4
 801bb6e:	4865      	ldr	r0, [pc, #404]	@ (801bd04 <rcl_expand_topic_name+0x2a8>)
 801bb70:	f001 ff6d 	bl	801da4e <strncmp>
 801bb74:	b128      	cbz	r0, 801bb82 <rcl_expand_topic_name+0x126>
 801bb76:	4632      	mov	r2, r6
 801bb78:	4621      	mov	r1, r4
 801bb7a:	4863      	ldr	r0, [pc, #396]	@ (801bd08 <rcl_expand_topic_name+0x2ac>)
 801bb7c:	f001 ff67 	bl	801da4e <strncmp>
 801bb80:	bb38      	cbnz	r0, 801bbd2 <rcl_expand_topic_name+0x176>
 801bb82:	46d9      	mov	r9, fp
 801bb84:	ab18      	add	r3, sp, #96	@ 0x60
 801bb86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801bb8a:	ab16      	add	r3, sp, #88	@ 0x58
 801bb8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bb90:	4620      	mov	r0, r4
 801bb92:	4631      	mov	r1, r6
 801bb94:	cb0c      	ldmia	r3, {r2, r3}
 801bb96:	f7f9 ffeb 	bl	8015b70 <rcutils_strndup>
 801bb9a:	4604      	mov	r4, r0
 801bb9c:	2800      	cmp	r0, #0
 801bb9e:	f000 80a3 	beq.w	801bce8 <rcl_expand_topic_name+0x28c>
 801bba2:	464a      	mov	r2, r9
 801bba4:	4628      	mov	r0, r5
 801bba6:	ab16      	add	r3, sp, #88	@ 0x58
 801bba8:	4621      	mov	r1, r4
 801bbaa:	f7f9 febf 	bl	801592c <rcutils_repl_str>
 801bbae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bbb0:	4605      	mov	r5, r0
 801bbb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bbb4:	4620      	mov	r0, r4
 801bbb6:	4798      	blx	r3
 801bbb8:	4650      	mov	r0, sl
 801bbba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bbbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bbbe:	4798      	blx	r3
 801bbc0:	2d00      	cmp	r5, #0
 801bbc2:	d06c      	beq.n	801bc9e <rcl_expand_topic_name+0x242>
 801bbc4:	217b      	movs	r1, #123	@ 0x7b
 801bbc6:	4628      	mov	r0, r5
 801bbc8:	f001 ff34 	bl	801da34 <strchr>
 801bbcc:	46aa      	mov	sl, r5
 801bbce:	4604      	mov	r4, r0
 801bbd0:	e7b9      	b.n	801bb46 <rcl_expand_topic_name+0xea>
 801bbd2:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801bbd6:	1c61      	adds	r1, r4, #1
 801bbd8:	4640      	mov	r0, r8
 801bbda:	f7fa f8e1 	bl	8015da0 <rcutils_string_map_getn>
 801bbde:	4681      	mov	r9, r0
 801bbe0:	2800      	cmp	r0, #0
 801bbe2:	d1cf      	bne.n	801bb84 <rcl_expand_topic_name+0x128>
 801bbe4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bbe6:	aa18      	add	r2, sp, #96	@ 0x60
 801bbe8:	2569      	movs	r5, #105	@ 0x69
 801bbea:	6018      	str	r0, [r3, #0]
 801bbec:	ab16      	add	r3, sp, #88	@ 0x58
 801bbee:	ca07      	ldmia	r2, {r0, r1, r2}
 801bbf0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bbf4:	4631      	mov	r1, r6
 801bbf6:	4620      	mov	r0, r4
 801bbf8:	cb0c      	ldmia	r3, {r2, r3}
 801bbfa:	f7f9 ffb9 	bl	8015b70 <rcutils_strndup>
 801bbfe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bc00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bc02:	4798      	blx	r3
 801bc04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bc06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bc08:	4650      	mov	r0, sl
 801bc0a:	4798      	blx	r3
 801bc0c:	e777      	b.n	801bafe <rcl_expand_topic_name+0xa2>
 801bc0e:	46b9      	mov	r9, r7
 801bc10:	e7b8      	b.n	801bb84 <rcl_expand_topic_name+0x128>
 801bc12:	25ca      	movs	r5, #202	@ 0xca
 801bc14:	e773      	b.n	801bafe <rcl_expand_topic_name+0xa2>
 801bc16:	9e07      	ldr	r6, [sp, #28]
 801bc18:	4630      	mov	r0, r6
 801bc1a:	f7e4 fb6b 	bl	80002f4 <strlen>
 801bc1e:	4a3b      	ldr	r2, [pc, #236]	@ (801bd0c <rcl_expand_topic_name+0x2b0>)
 801bc20:	4b3b      	ldr	r3, [pc, #236]	@ (801bd10 <rcl_expand_topic_name+0x2b4>)
 801bc22:	9603      	str	r6, [sp, #12]
 801bc24:	2801      	cmp	r0, #1
 801bc26:	bf18      	it	ne
 801bc28:	4613      	movne	r3, r2
 801bc2a:	9704      	str	r7, [sp, #16]
 801bc2c:	9302      	str	r3, [sp, #8]
 801bc2e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801bc30:	9300      	str	r3, [sp, #0]
 801bc32:	1c63      	adds	r3, r4, #1
 801bc34:	9305      	str	r3, [sp, #20]
 801bc36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bc3a:	9301      	str	r3, [sp, #4]
 801bc3c:	ab16      	add	r3, sp, #88	@ 0x58
 801bc3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bc40:	f7f9 fe3a 	bl	80158b8 <rcutils_format_string_limit>
 801bc44:	4606      	mov	r6, r0
 801bc46:	b350      	cbz	r0, 801bc9e <rcl_expand_topic_name+0x242>
 801bc48:	f1b9 0f00 	cmp.w	r9, #0
 801bc4c:	d005      	beq.n	801bc5a <rcl_expand_topic_name+0x1fe>
 801bc4e:	217b      	movs	r1, #123	@ 0x7b
 801bc50:	46b2      	mov	sl, r6
 801bc52:	f001 feef 	bl	801da34 <strchr>
 801bc56:	4681      	mov	r9, r0
 801bc58:	e76e      	b.n	801bb38 <rcl_expand_topic_name+0xdc>
 801bc5a:	7833      	ldrb	r3, [r6, #0]
 801bc5c:	2b2f      	cmp	r3, #47	@ 0x2f
 801bc5e:	d01b      	beq.n	801bc98 <rcl_expand_topic_name+0x23c>
 801bc60:	9c07      	ldr	r4, [sp, #28]
 801bc62:	4620      	mov	r0, r4
 801bc64:	f7e4 fb46 	bl	80002f4 <strlen>
 801bc68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bc6c:	4a29      	ldr	r2, [pc, #164]	@ (801bd14 <rcl_expand_topic_name+0x2b8>)
 801bc6e:	9301      	str	r3, [sp, #4]
 801bc70:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801bc72:	9604      	str	r6, [sp, #16]
 801bc74:	9300      	str	r3, [sp, #0]
 801bc76:	4b28      	ldr	r3, [pc, #160]	@ (801bd18 <rcl_expand_topic_name+0x2bc>)
 801bc78:	9403      	str	r4, [sp, #12]
 801bc7a:	2801      	cmp	r0, #1
 801bc7c:	bf18      	it	ne
 801bc7e:	4613      	movne	r3, r2
 801bc80:	9302      	str	r3, [sp, #8]
 801bc82:	ab16      	add	r3, sp, #88	@ 0x58
 801bc84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bc86:	f7f9 fe17 	bl	80158b8 <rcutils_format_string_limit>
 801bc8a:	4603      	mov	r3, r0
 801bc8c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801bc8e:	4630      	mov	r0, r6
 801bc90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bc92:	461e      	mov	r6, r3
 801bc94:	4790      	blx	r2
 801bc96:	b116      	cbz	r6, 801bc9e <rcl_expand_topic_name+0x242>
 801bc98:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bc9a:	601e      	str	r6, [r3, #0]
 801bc9c:	e72f      	b.n	801bafe <rcl_expand_topic_name+0xa2>
 801bc9e:	2300      	movs	r3, #0
 801bca0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801bca2:	250a      	movs	r5, #10
 801bca4:	6013      	str	r3, [r2, #0]
 801bca6:	e72a      	b.n	801bafe <rcl_expand_topic_name+0xa2>
 801bca8:	4653      	mov	r3, sl
 801bcaa:	4656      	mov	r6, sl
 801bcac:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d1d2      	bne.n	801bc5a <rcl_expand_topic_name+0x1fe>
 801bcb4:	7823      	ldrb	r3, [r4, #0]
 801bcb6:	2b2f      	cmp	r3, #47	@ 0x2f
 801bcb8:	d01e      	beq.n	801bcf8 <rcl_expand_topic_name+0x29c>
 801bcba:	9e07      	ldr	r6, [sp, #28]
 801bcbc:	4630      	mov	r0, r6
 801bcbe:	f7e4 fb19 	bl	80002f4 <strlen>
 801bcc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801bcc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bcc8:	9603      	str	r6, [sp, #12]
 801bcca:	9404      	str	r4, [sp, #16]
 801bccc:	e9cd 2300 	strd	r2, r3, [sp]
 801bcd0:	4a10      	ldr	r2, [pc, #64]	@ (801bd14 <rcl_expand_topic_name+0x2b8>)
 801bcd2:	4b11      	ldr	r3, [pc, #68]	@ (801bd18 <rcl_expand_topic_name+0x2bc>)
 801bcd4:	2801      	cmp	r0, #1
 801bcd6:	bf18      	it	ne
 801bcd8:	4613      	movne	r3, r2
 801bcda:	9302      	str	r3, [sp, #8]
 801bcdc:	ab16      	add	r3, sp, #88	@ 0x58
 801bcde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bce0:	f7f9 fdea 	bl	80158b8 <rcutils_format_string_limit>
 801bce4:	4606      	mov	r6, r0
 801bce6:	e7d6      	b.n	801bc96 <rcl_expand_topic_name+0x23a>
 801bce8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801bcec:	4650      	mov	r0, sl
 801bcee:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bcf0:	6014      	str	r4, [r2, #0]
 801bcf2:	250a      	movs	r5, #10
 801bcf4:	4798      	blx	r3
 801bcf6:	e702      	b.n	801bafe <rcl_expand_topic_name+0xa2>
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	461e      	mov	r6, r3
 801bcfc:	e7cc      	b.n	801bc98 <rcl_expand_topic_name+0x23c>
 801bcfe:	bf00      	nop
 801bd00:	08020a0c 	.word	0x08020a0c
 801bd04:	08020a14 	.word	0x08020a14
 801bd08:	08020a1c 	.word	0x08020a1c
 801bd0c:	08020a04 	.word	0x08020a04
 801bd10:	08020730 	.word	0x08020730
 801bd14:	08020150 	.word	0x08020150
 801bd18:	08020148 	.word	0x08020148

0801bd1c <rcl_get_default_topic_name_substitutions>:
 801bd1c:	2800      	cmp	r0, #0
 801bd1e:	bf0c      	ite	eq
 801bd20:	200b      	moveq	r0, #11
 801bd22:	2000      	movne	r0, #0
 801bd24:	4770      	bx	lr
 801bd26:	bf00      	nop

0801bd28 <rcl_get_zero_initialized_guard_condition>:
 801bd28:	4a03      	ldr	r2, [pc, #12]	@ (801bd38 <rcl_get_zero_initialized_guard_condition+0x10>)
 801bd2a:	4603      	mov	r3, r0
 801bd2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bd30:	e883 0003 	stmia.w	r3, {r0, r1}
 801bd34:	4618      	mov	r0, r3
 801bd36:	4770      	bx	lr
 801bd38:	08020a28 	.word	0x08020a28

0801bd3c <rcl_guard_condition_init_from_rmw>:
 801bd3c:	b082      	sub	sp, #8
 801bd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd42:	b086      	sub	sp, #24
 801bd44:	4604      	mov	r4, r0
 801bd46:	460e      	mov	r6, r1
 801bd48:	4615      	mov	r5, r2
 801bd4a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801bd4e:	f10d 0e04 	add.w	lr, sp, #4
 801bd52:	f84c 3f04 	str.w	r3, [ip, #4]!
 801bd56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bd5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bd5e:	f8dc 3000 	ldr.w	r3, [ip]
 801bd62:	a801      	add	r0, sp, #4
 801bd64:	f8ce 3000 	str.w	r3, [lr]
 801bd68:	f7f6 f830 	bl	8011dcc <rcutils_allocator_is_valid>
 801bd6c:	f080 0301 	eor.w	r3, r0, #1
 801bd70:	b2db      	uxtb	r3, r3
 801bd72:	bb3b      	cbnz	r3, 801bdc4 <rcl_guard_condition_init_from_rmw+0x88>
 801bd74:	b334      	cbz	r4, 801bdc4 <rcl_guard_condition_init_from_rmw+0x88>
 801bd76:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801bd7a:	f1b8 0f00 	cmp.w	r8, #0
 801bd7e:	d11a      	bne.n	801bdb6 <rcl_guard_condition_init_from_rmw+0x7a>
 801bd80:	b305      	cbz	r5, 801bdc4 <rcl_guard_condition_init_from_rmw+0x88>
 801bd82:	4628      	mov	r0, r5
 801bd84:	f7f6 fe98 	bl	8012ab8 <rcl_context_is_valid>
 801bd88:	b1f0      	cbz	r0, 801bdc8 <rcl_guard_condition_init_from_rmw+0x8c>
 801bd8a:	9b01      	ldr	r3, [sp, #4]
 801bd8c:	201c      	movs	r0, #28
 801bd8e:	9905      	ldr	r1, [sp, #20]
 801bd90:	4798      	blx	r3
 801bd92:	4607      	mov	r7, r0
 801bd94:	6060      	str	r0, [r4, #4]
 801bd96:	b320      	cbz	r0, 801bde2 <rcl_guard_condition_init_from_rmw+0xa6>
 801bd98:	b1c6      	cbz	r6, 801bdcc <rcl_guard_condition_init_from_rmw+0x90>
 801bd9a:	6006      	str	r6, [r0, #0]
 801bd9c:	f880 8004 	strb.w	r8, [r0, #4]
 801bda0:	ac01      	add	r4, sp, #4
 801bda2:	f107 0c08 	add.w	ip, r7, #8
 801bda6:	2500      	movs	r5, #0
 801bda8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bdaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bdae:	6823      	ldr	r3, [r4, #0]
 801bdb0:	f8cc 3000 	str.w	r3, [ip]
 801bdb4:	e000      	b.n	801bdb8 <rcl_guard_condition_init_from_rmw+0x7c>
 801bdb6:	2564      	movs	r5, #100	@ 0x64
 801bdb8:	4628      	mov	r0, r5
 801bdba:	b006      	add	sp, #24
 801bdbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bdc0:	b002      	add	sp, #8
 801bdc2:	4770      	bx	lr
 801bdc4:	250b      	movs	r5, #11
 801bdc6:	e7f7      	b.n	801bdb8 <rcl_guard_condition_init_from_rmw+0x7c>
 801bdc8:	2565      	movs	r5, #101	@ 0x65
 801bdca:	e7f5      	b.n	801bdb8 <rcl_guard_condition_init_from_rmw+0x7c>
 801bdcc:	6828      	ldr	r0, [r5, #0]
 801bdce:	3028      	adds	r0, #40	@ 0x28
 801bdd0:	f000 fada 	bl	801c388 <rmw_create_guard_condition>
 801bdd4:	6038      	str	r0, [r7, #0]
 801bdd6:	6867      	ldr	r7, [r4, #4]
 801bdd8:	683e      	ldr	r6, [r7, #0]
 801bdda:	b126      	cbz	r6, 801bde6 <rcl_guard_condition_init_from_rmw+0xaa>
 801bddc:	2301      	movs	r3, #1
 801bdde:	713b      	strb	r3, [r7, #4]
 801bde0:	e7de      	b.n	801bda0 <rcl_guard_condition_init_from_rmw+0x64>
 801bde2:	250a      	movs	r5, #10
 801bde4:	e7e8      	b.n	801bdb8 <rcl_guard_condition_init_from_rmw+0x7c>
 801bde6:	9b02      	ldr	r3, [sp, #8]
 801bde8:	4638      	mov	r0, r7
 801bdea:	9905      	ldr	r1, [sp, #20]
 801bdec:	2501      	movs	r5, #1
 801bdee:	4798      	blx	r3
 801bdf0:	6066      	str	r6, [r4, #4]
 801bdf2:	e7e1      	b.n	801bdb8 <rcl_guard_condition_init_from_rmw+0x7c>

0801bdf4 <rcl_guard_condition_fini>:
 801bdf4:	b570      	push	{r4, r5, r6, lr}
 801bdf6:	b082      	sub	sp, #8
 801bdf8:	b1f0      	cbz	r0, 801be38 <rcl_guard_condition_fini+0x44>
 801bdfa:	6843      	ldr	r3, [r0, #4]
 801bdfc:	4604      	mov	r4, r0
 801bdfe:	b163      	cbz	r3, 801be1a <rcl_guard_condition_fini+0x26>
 801be00:	6818      	ldr	r0, [r3, #0]
 801be02:	68de      	ldr	r6, [r3, #12]
 801be04:	6999      	ldr	r1, [r3, #24]
 801be06:	b160      	cbz	r0, 801be22 <rcl_guard_condition_fini+0x2e>
 801be08:	791d      	ldrb	r5, [r3, #4]
 801be0a:	b965      	cbnz	r5, 801be26 <rcl_guard_condition_fini+0x32>
 801be0c:	4618      	mov	r0, r3
 801be0e:	47b0      	blx	r6
 801be10:	2300      	movs	r3, #0
 801be12:	4628      	mov	r0, r5
 801be14:	6063      	str	r3, [r4, #4]
 801be16:	b002      	add	sp, #8
 801be18:	bd70      	pop	{r4, r5, r6, pc}
 801be1a:	461d      	mov	r5, r3
 801be1c:	4628      	mov	r0, r5
 801be1e:	b002      	add	sp, #8
 801be20:	bd70      	pop	{r4, r5, r6, pc}
 801be22:	4605      	mov	r5, r0
 801be24:	e7f2      	b.n	801be0c <rcl_guard_condition_fini+0x18>
 801be26:	9101      	str	r1, [sp, #4]
 801be28:	f000 fac4 	bl	801c3b4 <rmw_destroy_guard_condition>
 801be2c:	1e05      	subs	r5, r0, #0
 801be2e:	6863      	ldr	r3, [r4, #4]
 801be30:	9901      	ldr	r1, [sp, #4]
 801be32:	bf18      	it	ne
 801be34:	2501      	movne	r5, #1
 801be36:	e7e9      	b.n	801be0c <rcl_guard_condition_fini+0x18>
 801be38:	250b      	movs	r5, #11
 801be3a:	4628      	mov	r0, r5
 801be3c:	b002      	add	sp, #8
 801be3e:	bd70      	pop	{r4, r5, r6, pc}

0801be40 <rcl_guard_condition_get_default_options>:
 801be40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be42:	b087      	sub	sp, #28
 801be44:	4606      	mov	r6, r0
 801be46:	4c0b      	ldr	r4, [pc, #44]	@ (801be74 <rcl_guard_condition_get_default_options+0x34>)
 801be48:	4668      	mov	r0, sp
 801be4a:	f7f5 ffb1 	bl	8011db0 <rcutils_get_default_allocator>
 801be4e:	46ee      	mov	lr, sp
 801be50:	46a4      	mov	ip, r4
 801be52:	4625      	mov	r5, r4
 801be54:	4634      	mov	r4, r6
 801be56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801be5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801be5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be60:	f8de 7000 	ldr.w	r7, [lr]
 801be64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801be66:	4630      	mov	r0, r6
 801be68:	f8cc 7000 	str.w	r7, [ip]
 801be6c:	6027      	str	r7, [r4, #0]
 801be6e:	b007      	add	sp, #28
 801be70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be72:	bf00      	nop
 801be74:	24069648 	.word	0x24069648

0801be78 <rcl_guard_condition_get_rmw_handle>:
 801be78:	b110      	cbz	r0, 801be80 <rcl_guard_condition_get_rmw_handle+0x8>
 801be7a:	6840      	ldr	r0, [r0, #4]
 801be7c:	b100      	cbz	r0, 801be80 <rcl_guard_condition_get_rmw_handle+0x8>
 801be7e:	6800      	ldr	r0, [r0, #0]
 801be80:	4770      	bx	lr
 801be82:	bf00      	nop

0801be84 <rcl_validate_topic_name>:
 801be84:	2800      	cmp	r0, #0
 801be86:	f000 8089 	beq.w	801bf9c <rcl_validate_topic_name+0x118>
 801be8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be8e:	460e      	mov	r6, r1
 801be90:	2900      	cmp	r1, #0
 801be92:	f000 8085 	beq.w	801bfa0 <rcl_validate_topic_name+0x11c>
 801be96:	4604      	mov	r4, r0
 801be98:	4617      	mov	r7, r2
 801be9a:	f7e4 fa2b 	bl	80002f4 <strlen>
 801be9e:	b1b0      	cbz	r0, 801bece <rcl_validate_topic_name+0x4a>
 801bea0:	f894 e000 	ldrb.w	lr, [r4]
 801bea4:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801c008 <rcl_validate_topic_name+0x184>
 801bea8:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801beac:	f013 0304 	ands.w	r3, r3, #4
 801beb0:	d139      	bne.n	801bf26 <rcl_validate_topic_name+0xa2>
 801beb2:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801beb6:	f814 2008 	ldrb.w	r2, [r4, r8]
 801beba:	2a2f      	cmp	r2, #47	@ 0x2f
 801bebc:	d10f      	bne.n	801bede <rcl_validate_topic_name+0x5a>
 801bebe:	2202      	movs	r2, #2
 801bec0:	6032      	str	r2, [r6, #0]
 801bec2:	b3a7      	cbz	r7, 801bf2e <rcl_validate_topic_name+0xaa>
 801bec4:	4618      	mov	r0, r3
 801bec6:	f8c7 8000 	str.w	r8, [r7]
 801beca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bece:	2301      	movs	r3, #1
 801bed0:	6033      	str	r3, [r6, #0]
 801bed2:	b367      	cbz	r7, 801bf2e <rcl_validate_topic_name+0xaa>
 801bed4:	2300      	movs	r3, #0
 801bed6:	4618      	mov	r0, r3
 801bed8:	603b      	str	r3, [r7, #0]
 801beda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bede:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801bee2:	461d      	mov	r5, r3
 801bee4:	4619      	mov	r1, r3
 801bee6:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801beea:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801beee:	f1b9 0f09 	cmp.w	r9, #9
 801bef2:	d91f      	bls.n	801bf34 <rcl_validate_topic_name+0xb0>
 801bef4:	f022 0920 	bic.w	r9, r2, #32
 801bef8:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801befc:	f1b9 0f19 	cmp.w	r9, #25
 801bf00:	d918      	bls.n	801bf34 <rcl_validate_topic_name+0xb0>
 801bf02:	2a5f      	cmp	r2, #95	@ 0x5f
 801bf04:	d024      	beq.n	801bf50 <rcl_validate_topic_name+0xcc>
 801bf06:	2a2f      	cmp	r2, #47	@ 0x2f
 801bf08:	d058      	beq.n	801bfbc <rcl_validate_topic_name+0x138>
 801bf0a:	2a7e      	cmp	r2, #126	@ 0x7e
 801bf0c:	d04a      	beq.n	801bfa4 <rcl_validate_topic_name+0x120>
 801bf0e:	2a7b      	cmp	r2, #123	@ 0x7b
 801bf10:	d05b      	beq.n	801bfca <rcl_validate_topic_name+0x146>
 801bf12:	2a7d      	cmp	r2, #125	@ 0x7d
 801bf14:	d169      	bne.n	801bfea <rcl_validate_topic_name+0x166>
 801bf16:	2d00      	cmp	r5, #0
 801bf18:	d15c      	bne.n	801bfd4 <rcl_validate_topic_name+0x150>
 801bf1a:	2305      	movs	r3, #5
 801bf1c:	6033      	str	r3, [r6, #0]
 801bf1e:	b137      	cbz	r7, 801bf2e <rcl_validate_topic_name+0xaa>
 801bf20:	2000      	movs	r0, #0
 801bf22:	6039      	str	r1, [r7, #0]
 801bf24:	e7d9      	b.n	801beda <rcl_validate_topic_name+0x56>
 801bf26:	2304      	movs	r3, #4
 801bf28:	6033      	str	r3, [r6, #0]
 801bf2a:	2f00      	cmp	r7, #0
 801bf2c:	d1d2      	bne.n	801bed4 <rcl_validate_topic_name+0x50>
 801bf2e:	2000      	movs	r0, #0
 801bf30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf34:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bf38:	0752      	lsls	r2, r2, #29
 801bf3a:	d509      	bpl.n	801bf50 <rcl_validate_topic_name+0xcc>
 801bf3c:	2900      	cmp	r1, #0
 801bf3e:	bf0c      	ite	eq
 801bf40:	2200      	moveq	r2, #0
 801bf42:	f005 0201 	andne.w	r2, r5, #1
 801bf46:	b11a      	cbz	r2, 801bf50 <rcl_validate_topic_name+0xcc>
 801bf48:	1e4d      	subs	r5, r1, #1
 801bf4a:	429d      	cmp	r5, r3
 801bf4c:	d031      	beq.n	801bfb2 <rcl_validate_topic_name+0x12e>
 801bf4e:	4615      	mov	r5, r2
 801bf50:	3101      	adds	r1, #1
 801bf52:	4288      	cmp	r0, r1
 801bf54:	d1c7      	bne.n	801bee6 <rcl_validate_topic_name+0x62>
 801bf56:	2d00      	cmp	r5, #0
 801bf58:	d142      	bne.n	801bfe0 <rcl_validate_topic_name+0x15c>
 801bf5a:	4628      	mov	r0, r5
 801bf5c:	2301      	movs	r3, #1
 801bf5e:	e00c      	b.n	801bf7a <rcl_validate_topic_name+0xf6>
 801bf60:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801bf64:	d101      	bne.n	801bf6a <rcl_validate_topic_name+0xe6>
 801bf66:	2801      	cmp	r0, #1
 801bf68:	d047      	beq.n	801bffa <rcl_validate_topic_name+0x176>
 801bf6a:	1c5a      	adds	r2, r3, #1
 801bf6c:	428b      	cmp	r3, r1
 801bf6e:	f100 0001 	add.w	r0, r0, #1
 801bf72:	f104 0401 	add.w	r4, r4, #1
 801bf76:	4613      	mov	r3, r2
 801bf78:	d22e      	bcs.n	801bfd8 <rcl_validate_topic_name+0x154>
 801bf7a:	4580      	cmp	r8, r0
 801bf7c:	d0f5      	beq.n	801bf6a <rcl_validate_topic_name+0xe6>
 801bf7e:	7822      	ldrb	r2, [r4, #0]
 801bf80:	2a2f      	cmp	r2, #47	@ 0x2f
 801bf82:	d1ed      	bne.n	801bf60 <rcl_validate_topic_name+0xdc>
 801bf84:	7862      	ldrb	r2, [r4, #1]
 801bf86:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bf8a:	0752      	lsls	r2, r2, #29
 801bf8c:	d5ed      	bpl.n	801bf6a <rcl_validate_topic_name+0xe6>
 801bf8e:	2204      	movs	r2, #4
 801bf90:	6032      	str	r2, [r6, #0]
 801bf92:	2f00      	cmp	r7, #0
 801bf94:	d0cb      	beq.n	801bf2e <rcl_validate_topic_name+0xaa>
 801bf96:	2000      	movs	r0, #0
 801bf98:	603b      	str	r3, [r7, #0]
 801bf9a:	e79e      	b.n	801beda <rcl_validate_topic_name+0x56>
 801bf9c:	200b      	movs	r0, #11
 801bf9e:	4770      	bx	lr
 801bfa0:	200b      	movs	r0, #11
 801bfa2:	e79a      	b.n	801beda <rcl_validate_topic_name+0x56>
 801bfa4:	2900      	cmp	r1, #0
 801bfa6:	d0d3      	beq.n	801bf50 <rcl_validate_topic_name+0xcc>
 801bfa8:	2306      	movs	r3, #6
 801bfaa:	6033      	str	r3, [r6, #0]
 801bfac:	2f00      	cmp	r7, #0
 801bfae:	d1b7      	bne.n	801bf20 <rcl_validate_topic_name+0x9c>
 801bfb0:	e7bd      	b.n	801bf2e <rcl_validate_topic_name+0xaa>
 801bfb2:	2309      	movs	r3, #9
 801bfb4:	6033      	str	r3, [r6, #0]
 801bfb6:	2f00      	cmp	r7, #0
 801bfb8:	d1b2      	bne.n	801bf20 <rcl_validate_topic_name+0x9c>
 801bfba:	e7b8      	b.n	801bf2e <rcl_validate_topic_name+0xaa>
 801bfbc:	2d00      	cmp	r5, #0
 801bfbe:	d0c7      	beq.n	801bf50 <rcl_validate_topic_name+0xcc>
 801bfc0:	2308      	movs	r3, #8
 801bfc2:	6033      	str	r3, [r6, #0]
 801bfc4:	2f00      	cmp	r7, #0
 801bfc6:	d1ab      	bne.n	801bf20 <rcl_validate_topic_name+0x9c>
 801bfc8:	e7b1      	b.n	801bf2e <rcl_validate_topic_name+0xaa>
 801bfca:	2d00      	cmp	r5, #0
 801bfcc:	d1f8      	bne.n	801bfc0 <rcl_validate_topic_name+0x13c>
 801bfce:	460b      	mov	r3, r1
 801bfd0:	2501      	movs	r5, #1
 801bfd2:	e7bd      	b.n	801bf50 <rcl_validate_topic_name+0xcc>
 801bfd4:	2500      	movs	r5, #0
 801bfd6:	e7bb      	b.n	801bf50 <rcl_validate_topic_name+0xcc>
 801bfd8:	2300      	movs	r3, #0
 801bfda:	4618      	mov	r0, r3
 801bfdc:	6033      	str	r3, [r6, #0]
 801bfde:	e77c      	b.n	801beda <rcl_validate_topic_name+0x56>
 801bfe0:	2205      	movs	r2, #5
 801bfe2:	6032      	str	r2, [r6, #0]
 801bfe4:	2f00      	cmp	r7, #0
 801bfe6:	d1d6      	bne.n	801bf96 <rcl_validate_topic_name+0x112>
 801bfe8:	e7a1      	b.n	801bf2e <rcl_validate_topic_name+0xaa>
 801bfea:	2d00      	cmp	r5, #0
 801bfec:	bf14      	ite	ne
 801bfee:	2308      	movne	r3, #8
 801bff0:	2303      	moveq	r3, #3
 801bff2:	6033      	str	r3, [r6, #0]
 801bff4:	2f00      	cmp	r7, #0
 801bff6:	d193      	bne.n	801bf20 <rcl_validate_topic_name+0x9c>
 801bff8:	e799      	b.n	801bf2e <rcl_validate_topic_name+0xaa>
 801bffa:	2307      	movs	r3, #7
 801bffc:	6033      	str	r3, [r6, #0]
 801bffe:	2f00      	cmp	r7, #0
 801c000:	d095      	beq.n	801bf2e <rcl_validate_topic_name+0xaa>
 801c002:	2301      	movs	r3, #1
 801c004:	e7c7      	b.n	801bf96 <rcl_validate_topic_name+0x112>
 801c006:	bf00      	nop
 801c008:	08020bae 	.word	0x08020bae

0801c00c <rcutils_string_array_fini>:
 801c00c:	b328      	cbz	r0, 801c05a <rcutils_string_array_fini+0x4e>
 801c00e:	b570      	push	{r4, r5, r6, lr}
 801c010:	4604      	mov	r4, r0
 801c012:	6840      	ldr	r0, [r0, #4]
 801c014:	b1e0      	cbz	r0, 801c050 <rcutils_string_array_fini+0x44>
 801c016:	f104 0008 	add.w	r0, r4, #8
 801c01a:	f7f5 fed7 	bl	8011dcc <rcutils_allocator_is_valid>
 801c01e:	b1c0      	cbz	r0, 801c052 <rcutils_string_array_fini+0x46>
 801c020:	6823      	ldr	r3, [r4, #0]
 801c022:	b1c3      	cbz	r3, 801c056 <rcutils_string_array_fini+0x4a>
 801c024:	2500      	movs	r5, #0
 801c026:	6860      	ldr	r0, [r4, #4]
 801c028:	462e      	mov	r6, r5
 801c02a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c02e:	68e3      	ldr	r3, [r4, #12]
 801c030:	69a1      	ldr	r1, [r4, #24]
 801c032:	4798      	blx	r3
 801c034:	e9d4 3000 	ldrd	r3, r0, [r4]
 801c038:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801c03c:	3501      	adds	r5, #1
 801c03e:	429d      	cmp	r5, r3
 801c040:	d3f3      	bcc.n	801c02a <rcutils_string_array_fini+0x1e>
 801c042:	68e3      	ldr	r3, [r4, #12]
 801c044:	69a1      	ldr	r1, [r4, #24]
 801c046:	4798      	blx	r3
 801c048:	2300      	movs	r3, #0
 801c04a:	4618      	mov	r0, r3
 801c04c:	e9c4 3300 	strd	r3, r3, [r4]
 801c050:	bd70      	pop	{r4, r5, r6, pc}
 801c052:	200b      	movs	r0, #11
 801c054:	bd70      	pop	{r4, r5, r6, pc}
 801c056:	6860      	ldr	r0, [r4, #4]
 801c058:	e7f3      	b.n	801c042 <rcutils_string_array_fini+0x36>
 801c05a:	200b      	movs	r0, #11
 801c05c:	4770      	bx	lr
 801c05e:	bf00      	nop

0801c060 <rmw_time_equal>:
 801c060:	b4f0      	push	{r4, r5, r6, r7}
 801c062:	b084      	sub	sp, #16
 801c064:	ac04      	add	r4, sp, #16
 801c066:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801c06a:	4603      	mov	r3, r0
 801c06c:	4925      	ldr	r1, [pc, #148]	@ (801c104 <rmw_time_equal+0xa4>)
 801c06e:	9d01      	ldr	r5, [sp, #4]
 801c070:	4610      	mov	r0, r2
 801c072:	4299      	cmp	r1, r3
 801c074:	f04f 0202 	mov.w	r2, #2
 801c078:	9e03      	ldr	r6, [sp, #12]
 801c07a:	41aa      	sbcs	r2, r5
 801c07c:	d330      	bcc.n	801c0e0 <rmw_time_equal+0x80>
 801c07e:	4c22      	ldr	r4, [pc, #136]	@ (801c108 <rmw_time_equal+0xa8>)
 801c080:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c084:	fba3 3204 	umull	r3, r2, r3, r4
 801c088:	fb04 2205 	mla	r2, r4, r5, r2
 801c08c:	43dd      	mvns	r5, r3
 801c08e:	1a8c      	subs	r4, r1, r2
 801c090:	4285      	cmp	r5, r0
 801c092:	41b4      	sbcs	r4, r6
 801c094:	d332      	bcc.n	801c0fc <rmw_time_equal+0x9c>
 801c096:	eb10 0c03 	adds.w	ip, r0, r3
 801c09a:	eb42 0106 	adc.w	r1, r2, r6
 801c09e:	4819      	ldr	r0, [pc, #100]	@ (801c104 <rmw_time_equal+0xa4>)
 801c0a0:	2202      	movs	r2, #2
 801c0a2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c0a4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c0a6:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801c0aa:	4298      	cmp	r0, r3
 801c0ac:	41b2      	sbcs	r2, r6
 801c0ae:	d31c      	bcc.n	801c0ea <rmw_time_equal+0x8a>
 801c0b0:	4c15      	ldr	r4, [pc, #84]	@ (801c108 <rmw_time_equal+0xa8>)
 801c0b2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801c0b6:	fba3 3204 	umull	r3, r2, r3, r4
 801c0ba:	fb04 2206 	mla	r2, r4, r6, r2
 801c0be:	43de      	mvns	r6, r3
 801c0c0:	1a84      	subs	r4, r0, r2
 801c0c2:	42ae      	cmp	r6, r5
 801c0c4:	41bc      	sbcs	r4, r7
 801c0c6:	d315      	bcc.n	801c0f4 <rmw_time_equal+0x94>
 801c0c8:	195b      	adds	r3, r3, r5
 801c0ca:	eb42 0207 	adc.w	r2, r2, r7
 801c0ce:	428a      	cmp	r2, r1
 801c0d0:	bf08      	it	eq
 801c0d2:	4563      	cmpeq	r3, ip
 801c0d4:	bf0c      	ite	eq
 801c0d6:	2001      	moveq	r0, #1
 801c0d8:	2000      	movne	r0, #0
 801c0da:	b004      	add	sp, #16
 801c0dc:	bcf0      	pop	{r4, r5, r6, r7}
 801c0de:	4770      	bx	lr
 801c0e0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801c0e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c0e8:	e7d9      	b.n	801c09e <rmw_time_equal+0x3e>
 801c0ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c0ee:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801c0f2:	e7ec      	b.n	801c0ce <rmw_time_equal+0x6e>
 801c0f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c0f8:	4602      	mov	r2, r0
 801c0fa:	e7e8      	b.n	801c0ce <rmw_time_equal+0x6e>
 801c0fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801c100:	e7cd      	b.n	801c09e <rmw_time_equal+0x3e>
 801c102:	bf00      	nop
 801c104:	25c17d04 	.word	0x25c17d04
 801c108:	3b9aca00 	.word	0x3b9aca00

0801c10c <rmw_time_total_nsec>:
 801c10c:	b470      	push	{r4, r5, r6}
 801c10e:	b085      	sub	sp, #20
 801c110:	ac04      	add	r4, sp, #16
 801c112:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801c116:	4603      	mov	r3, r0
 801c118:	4913      	ldr	r1, [pc, #76]	@ (801c168 <rmw_time_total_nsec+0x5c>)
 801c11a:	9d01      	ldr	r5, [sp, #4]
 801c11c:	4610      	mov	r0, r2
 801c11e:	4299      	cmp	r1, r3
 801c120:	f04f 0202 	mov.w	r2, #2
 801c124:	9e03      	ldr	r6, [sp, #12]
 801c126:	41aa      	sbcs	r2, r5
 801c128:	d311      	bcc.n	801c14e <rmw_time_total_nsec+0x42>
 801c12a:	4c10      	ldr	r4, [pc, #64]	@ (801c16c <rmw_time_total_nsec+0x60>)
 801c12c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c130:	fba3 3204 	umull	r3, r2, r3, r4
 801c134:	fb04 2205 	mla	r2, r4, r5, r2
 801c138:	43dd      	mvns	r5, r3
 801c13a:	1a8c      	subs	r4, r1, r2
 801c13c:	4285      	cmp	r5, r0
 801c13e:	41b4      	sbcs	r4, r6
 801c140:	d30c      	bcc.n	801c15c <rmw_time_total_nsec+0x50>
 801c142:	1818      	adds	r0, r3, r0
 801c144:	eb42 0106 	adc.w	r1, r2, r6
 801c148:	b005      	add	sp, #20
 801c14a:	bc70      	pop	{r4, r5, r6}
 801c14c:	4770      	bx	lr
 801c14e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c152:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c156:	b005      	add	sp, #20
 801c158:	bc70      	pop	{r4, r5, r6}
 801c15a:	4770      	bx	lr
 801c15c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c160:	b005      	add	sp, #20
 801c162:	bc70      	pop	{r4, r5, r6}
 801c164:	4770      	bx	lr
 801c166:	bf00      	nop
 801c168:	25c17d04 	.word	0x25c17d04
 801c16c:	3b9aca00 	.word	0x3b9aca00

0801c170 <on_status>:
 801c170:	b082      	sub	sp, #8
 801c172:	b002      	add	sp, #8
 801c174:	4770      	bx	lr
 801c176:	bf00      	nop

0801c178 <on_topic>:
 801c178:	4a23      	ldr	r2, [pc, #140]	@ (801c208 <on_topic+0x90>)
 801c17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c17e:	6812      	ldr	r2, [r2, #0]
 801c180:	b094      	sub	sp, #80	@ 0x50
 801c182:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801c184:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801c188:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c18a:	9312      	str	r3, [sp, #72]	@ 0x48
 801c18c:	b3c2      	cbz	r2, 801c200 <on_topic+0x88>
 801c18e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801c192:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801c196:	e001      	b.n	801c19c <on_topic+0x24>
 801c198:	6852      	ldr	r2, [r2, #4]
 801c19a:	b38a      	cbz	r2, 801c200 <on_topic+0x88>
 801c19c:	6894      	ldr	r4, [r2, #8]
 801c19e:	8aa3      	ldrh	r3, [r4, #20]
 801c1a0:	428b      	cmp	r3, r1
 801c1a2:	d1f9      	bne.n	801c198 <on_topic+0x20>
 801c1a4:	7da3      	ldrb	r3, [r4, #22]
 801c1a6:	4283      	cmp	r3, r0
 801c1a8:	d1f6      	bne.n	801c198 <on_topic+0x20>
 801c1aa:	2248      	movs	r2, #72	@ 0x48
 801c1ac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801c1b0:	4668      	mov	r0, sp
 801c1b2:	f001 fd56 	bl	801dc62 <memcpy>
 801c1b6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801c1ba:	4620      	mov	r0, r4
 801c1bc:	cb0c      	ldmia	r3, {r2, r3}
 801c1be:	f7fb fba7 	bl	8017910 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c1c2:	4607      	mov	r7, r0
 801c1c4:	b1e0      	cbz	r0, 801c200 <on_topic+0x88>
 801c1c6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801c1ca:	462a      	mov	r2, r5
 801c1cc:	4630      	mov	r0, r6
 801c1ce:	f108 0110 	add.w	r1, r8, #16
 801c1d2:	f7fb ffe9 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801c1d6:	b930      	cbnz	r0, 801c1e6 <on_topic+0x6e>
 801c1d8:	4639      	mov	r1, r7
 801c1da:	480c      	ldr	r0, [pc, #48]	@ (801c20c <on_topic+0x94>)
 801c1dc:	b014      	add	sp, #80	@ 0x50
 801c1de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c1e2:	f000 b8bd 	b.w	801c360 <put_memory>
 801c1e6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801c1ea:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801c1ee:	f000 f967 	bl	801c4c0 <rmw_uros_epoch_nanos>
 801c1f2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801c1f6:	2305      	movs	r3, #5
 801c1f8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c1fc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801c200:	b014      	add	sp, #80	@ 0x50
 801c202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c206:	bf00      	nop
 801c208:	24069614 	.word	0x24069614
 801c20c:	24069604 	.word	0x24069604

0801c210 <on_request>:
 801c210:	4824      	ldr	r0, [pc, #144]	@ (801c2a4 <on_request+0x94>)
 801c212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c216:	6800      	ldr	r0, [r0, #0]
 801c218:	b094      	sub	sp, #80	@ 0x50
 801c21a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801c21c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801c220:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c222:	2800      	cmp	r0, #0
 801c224:	d03b      	beq.n	801c29e <on_request+0x8e>
 801c226:	461d      	mov	r5, r3
 801c228:	e001      	b.n	801c22e <on_request+0x1e>
 801c22a:	6840      	ldr	r0, [r0, #4]
 801c22c:	b3b8      	cbz	r0, 801c29e <on_request+0x8e>
 801c22e:	6884      	ldr	r4, [r0, #8]
 801c230:	8b21      	ldrh	r1, [r4, #24]
 801c232:	4291      	cmp	r1, r2
 801c234:	d1f9      	bne.n	801c22a <on_request+0x1a>
 801c236:	2248      	movs	r2, #72	@ 0x48
 801c238:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801c23c:	4668      	mov	r0, sp
 801c23e:	f001 fd10 	bl	801dc62 <memcpy>
 801c242:	f104 0320 	add.w	r3, r4, #32
 801c246:	4620      	mov	r0, r4
 801c248:	cb0c      	ldmia	r3, {r2, r3}
 801c24a:	f7fb fb61 	bl	8017910 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c24e:	4680      	mov	r8, r0
 801c250:	b328      	cbz	r0, 801c29e <on_request+0x8e>
 801c252:	4630      	mov	r0, r6
 801c254:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801c258:	463a      	mov	r2, r7
 801c25a:	f106 0110 	add.w	r1, r6, #16
 801c25e:	f7fb ffa3 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801c262:	b930      	cbnz	r0, 801c272 <on_request+0x62>
 801c264:	4641      	mov	r1, r8
 801c266:	4810      	ldr	r0, [pc, #64]	@ (801c2a8 <on_request+0x98>)
 801c268:	b014      	add	sp, #80	@ 0x50
 801c26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c26e:	f000 b877 	b.w	801c360 <put_memory>
 801c272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c274:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801c278:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801c27c:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801c280:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c284:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c288:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c28c:	f000 f918 	bl	801c4c0 <rmw_uros_epoch_nanos>
 801c290:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801c294:	2303      	movs	r3, #3
 801c296:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c29a:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801c29e:	b014      	add	sp, #80	@ 0x50
 801c2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2a4:	240695e4 	.word	0x240695e4
 801c2a8:	24069604 	.word	0x24069604

0801c2ac <on_reply>:
 801c2ac:	4822      	ldr	r0, [pc, #136]	@ (801c338 <on_reply+0x8c>)
 801c2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2b2:	6800      	ldr	r0, [r0, #0]
 801c2b4:	b094      	sub	sp, #80	@ 0x50
 801c2b6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801c2b8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801c2bc:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c2be:	b3b8      	cbz	r0, 801c330 <on_reply+0x84>
 801c2c0:	461d      	mov	r5, r3
 801c2c2:	e001      	b.n	801c2c8 <on_reply+0x1c>
 801c2c4:	6840      	ldr	r0, [r0, #4]
 801c2c6:	b398      	cbz	r0, 801c330 <on_reply+0x84>
 801c2c8:	6884      	ldr	r4, [r0, #8]
 801c2ca:	8b21      	ldrh	r1, [r4, #24]
 801c2cc:	4291      	cmp	r1, r2
 801c2ce:	d1f9      	bne.n	801c2c4 <on_reply+0x18>
 801c2d0:	2248      	movs	r2, #72	@ 0x48
 801c2d2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801c2d6:	4668      	mov	r0, sp
 801c2d8:	f001 fcc3 	bl	801dc62 <memcpy>
 801c2dc:	f104 0320 	add.w	r3, r4, #32
 801c2e0:	4620      	mov	r0, r4
 801c2e2:	cb0c      	ldmia	r3, {r2, r3}
 801c2e4:	f7fb fb14 	bl	8017910 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c2e8:	4680      	mov	r8, r0
 801c2ea:	b308      	cbz	r0, 801c330 <on_reply+0x84>
 801c2ec:	4630      	mov	r0, r6
 801c2ee:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801c2f2:	463a      	mov	r2, r7
 801c2f4:	f106 0110 	add.w	r1, r6, #16
 801c2f8:	f7fb ff56 	bl	80181a8 <ucdr_deserialize_array_uint8_t>
 801c2fc:	b930      	cbnz	r0, 801c30c <on_reply+0x60>
 801c2fe:	4641      	mov	r1, r8
 801c300:	480e      	ldr	r0, [pc, #56]	@ (801c33c <on_reply+0x90>)
 801c302:	b014      	add	sp, #80	@ 0x50
 801c304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c308:	f000 b82a 	b.w	801c360 <put_memory>
 801c30c:	2200      	movs	r2, #0
 801c30e:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801c312:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801c316:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801c31a:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801c31e:	f000 f8cf 	bl	801c4c0 <rmw_uros_epoch_nanos>
 801c322:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801c326:	2304      	movs	r3, #4
 801c328:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c32c:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801c330:	b014      	add	sp, #80	@ 0x50
 801c332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c336:	bf00      	nop
 801c338:	24064cf8 	.word	0x24064cf8
 801c33c:	24069604 	.word	0x24069604

0801c340 <get_memory>:
 801c340:	4603      	mov	r3, r0
 801c342:	6840      	ldr	r0, [r0, #4]
 801c344:	b158      	cbz	r0, 801c35e <get_memory+0x1e>
 801c346:	6842      	ldr	r2, [r0, #4]
 801c348:	605a      	str	r2, [r3, #4]
 801c34a:	b10a      	cbz	r2, 801c350 <get_memory+0x10>
 801c34c:	2100      	movs	r1, #0
 801c34e:	6011      	str	r1, [r2, #0]
 801c350:	681a      	ldr	r2, [r3, #0]
 801c352:	6042      	str	r2, [r0, #4]
 801c354:	b102      	cbz	r2, 801c358 <get_memory+0x18>
 801c356:	6010      	str	r0, [r2, #0]
 801c358:	2200      	movs	r2, #0
 801c35a:	6002      	str	r2, [r0, #0]
 801c35c:	6018      	str	r0, [r3, #0]
 801c35e:	4770      	bx	lr

0801c360 <put_memory>:
 801c360:	680b      	ldr	r3, [r1, #0]
 801c362:	b10b      	cbz	r3, 801c368 <put_memory+0x8>
 801c364:	684a      	ldr	r2, [r1, #4]
 801c366:	605a      	str	r2, [r3, #4]
 801c368:	684a      	ldr	r2, [r1, #4]
 801c36a:	b102      	cbz	r2, 801c36e <put_memory+0xe>
 801c36c:	6013      	str	r3, [r2, #0]
 801c36e:	6803      	ldr	r3, [r0, #0]
 801c370:	428b      	cmp	r3, r1
 801c372:	6843      	ldr	r3, [r0, #4]
 801c374:	bf08      	it	eq
 801c376:	6002      	streq	r2, [r0, #0]
 801c378:	604b      	str	r3, [r1, #4]
 801c37a:	b103      	cbz	r3, 801c37e <put_memory+0x1e>
 801c37c:	6019      	str	r1, [r3, #0]
 801c37e:	2300      	movs	r3, #0
 801c380:	600b      	str	r3, [r1, #0]
 801c382:	6041      	str	r1, [r0, #4]
 801c384:	4770      	bx	lr
 801c386:	bf00      	nop

0801c388 <rmw_create_guard_condition>:
 801c388:	b538      	push	{r3, r4, r5, lr}
 801c38a:	4605      	mov	r5, r0
 801c38c:	4808      	ldr	r0, [pc, #32]	@ (801c3b0 <rmw_create_guard_condition+0x28>)
 801c38e:	f7ff ffd7 	bl	801c340 <get_memory>
 801c392:	4603      	mov	r3, r0
 801c394:	b148      	cbz	r0, 801c3aa <rmw_create_guard_condition+0x22>
 801c396:	6884      	ldr	r4, [r0, #8]
 801c398:	2300      	movs	r3, #0
 801c39a:	61e5      	str	r5, [r4, #28]
 801c39c:	7423      	strb	r3, [r4, #16]
 801c39e:	f7f9 ff19 	bl	80161d4 <rmw_get_implementation_identifier>
 801c3a2:	f104 0314 	add.w	r3, r4, #20
 801c3a6:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	bd38      	pop	{r3, r4, r5, pc}
 801c3ae:	bf00      	nop
 801c3b0:	240695a4 	.word	0x240695a4

0801c3b4 <rmw_destroy_guard_condition>:
 801c3b4:	b508      	push	{r3, lr}
 801c3b6:	4b08      	ldr	r3, [pc, #32]	@ (801c3d8 <rmw_destroy_guard_condition+0x24>)
 801c3b8:	6819      	ldr	r1, [r3, #0]
 801c3ba:	b911      	cbnz	r1, 801c3c2 <rmw_destroy_guard_condition+0xe>
 801c3bc:	e00a      	b.n	801c3d4 <rmw_destroy_guard_condition+0x20>
 801c3be:	6849      	ldr	r1, [r1, #4]
 801c3c0:	b141      	cbz	r1, 801c3d4 <rmw_destroy_guard_condition+0x20>
 801c3c2:	688b      	ldr	r3, [r1, #8]
 801c3c4:	3314      	adds	r3, #20
 801c3c6:	4298      	cmp	r0, r3
 801c3c8:	d1f9      	bne.n	801c3be <rmw_destroy_guard_condition+0xa>
 801c3ca:	4803      	ldr	r0, [pc, #12]	@ (801c3d8 <rmw_destroy_guard_condition+0x24>)
 801c3cc:	f7ff ffc8 	bl	801c360 <put_memory>
 801c3d0:	2000      	movs	r0, #0
 801c3d2:	bd08      	pop	{r3, pc}
 801c3d4:	2001      	movs	r0, #1
 801c3d6:	bd08      	pop	{r3, pc}
 801c3d8:	240695a4 	.word	0x240695a4

0801c3dc <create_topic>:
 801c3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3e0:	4605      	mov	r5, r0
 801c3e2:	b084      	sub	sp, #16
 801c3e4:	4822      	ldr	r0, [pc, #136]	@ (801c470 <create_topic+0x94>)
 801c3e6:	460f      	mov	r7, r1
 801c3e8:	4616      	mov	r6, r2
 801c3ea:	f7ff ffa9 	bl	801c340 <get_memory>
 801c3ee:	4604      	mov	r4, r0
 801c3f0:	2800      	cmp	r0, #0
 801c3f2:	d039      	beq.n	801c468 <create_topic+0x8c>
 801c3f4:	692b      	ldr	r3, [r5, #16]
 801c3f6:	2102      	movs	r1, #2
 801c3f8:	6884      	ldr	r4, [r0, #8]
 801c3fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c3fe:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801c478 <create_topic+0x9c>
 801c402:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801c406:	1c42      	adds	r2, r0, #1
 801c408:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801c40c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801c410:	f7fc f9f2 	bl	80187f8 <uxr_object_id>
 801c414:	223c      	movs	r2, #60	@ 0x3c
 801c416:	6120      	str	r0, [r4, #16]
 801c418:	4641      	mov	r1, r8
 801c41a:	4638      	mov	r0, r7
 801c41c:	f7fb fbdc 	bl	8017bd8 <generate_topic_name>
 801c420:	b1f0      	cbz	r0, 801c460 <create_topic+0x84>
 801c422:	4f14      	ldr	r7, [pc, #80]	@ (801c474 <create_topic+0x98>)
 801c424:	4630      	mov	r0, r6
 801c426:	2264      	movs	r2, #100	@ 0x64
 801c428:	4639      	mov	r1, r7
 801c42a:	f7fb fba7 	bl	8017b7c <generate_type_name>
 801c42e:	b1b8      	cbz	r0, 801c460 <create_topic+0x84>
 801c430:	6928      	ldr	r0, [r5, #16]
 801c432:	2106      	movs	r1, #6
 801c434:	696b      	ldr	r3, [r5, #20]
 801c436:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801c43a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c43e:	f8cd 8000 	str.w	r8, [sp]
 801c442:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801c446:	6811      	ldr	r1, [r2, #0]
 801c448:	6922      	ldr	r2, [r4, #16]
 801c44a:	f7fb ff93 	bl	8018374 <uxr_buffer_create_topic_bin>
 801c44e:	4602      	mov	r2, r0
 801c450:	6928      	ldr	r0, [r5, #16]
 801c452:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801c456:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801c45a:	f7fb fb5b 	bl	8017b14 <run_xrce_session>
 801c45e:	b918      	cbnz	r0, 801c468 <create_topic+0x8c>
 801c460:	4620      	mov	r0, r4
 801c462:	2400      	movs	r4, #0
 801c464:	f7fb fa48 	bl	80178f8 <rmw_uxrce_fini_topic_memory>
 801c468:	4620      	mov	r0, r4
 801c46a:	b004      	add	sp, #16
 801c46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c470:	24069624 	.word	0x24069624
 801c474:	24069698 	.word	0x24069698
 801c478:	2406965c 	.word	0x2406965c

0801c47c <destroy_topic>:
 801c47c:	b538      	push	{r3, r4, r5, lr}
 801c47e:	6985      	ldr	r5, [r0, #24]
 801c480:	b1dd      	cbz	r5, 801c4ba <destroy_topic+0x3e>
 801c482:	4604      	mov	r4, r0
 801c484:	6928      	ldr	r0, [r5, #16]
 801c486:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801c48a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c48e:	6922      	ldr	r2, [r4, #16]
 801c490:	6819      	ldr	r1, [r3, #0]
 801c492:	f7fb fef1 	bl	8018278 <uxr_buffer_delete_entity>
 801c496:	4602      	mov	r2, r0
 801c498:	6928      	ldr	r0, [r5, #16]
 801c49a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801c49e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801c4a2:	f7fb fb37 	bl	8017b14 <run_xrce_session>
 801c4a6:	4603      	mov	r3, r0
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	bf14      	ite	ne
 801c4ae:	2400      	movne	r4, #0
 801c4b0:	2402      	moveq	r4, #2
 801c4b2:	f7fb fa21 	bl	80178f8 <rmw_uxrce_fini_topic_memory>
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	bd38      	pop	{r3, r4, r5, pc}
 801c4ba:	2401      	movs	r4, #1
 801c4bc:	4620      	mov	r0, r4
 801c4be:	bd38      	pop	{r3, r4, r5, pc}

0801c4c0 <rmw_uros_epoch_nanos>:
 801c4c0:	4b05      	ldr	r3, [pc, #20]	@ (801c4d8 <rmw_uros_epoch_nanos+0x18>)
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	b123      	cbz	r3, 801c4d0 <rmw_uros_epoch_nanos+0x10>
 801c4c6:	6898      	ldr	r0, [r3, #8]
 801c4c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c4cc:	f7fc bc0c 	b.w	8018ce8 <uxr_epoch_nanos>
 801c4d0:	2000      	movs	r0, #0
 801c4d2:	2100      	movs	r1, #0
 801c4d4:	4770      	bx	lr
 801c4d6:	bf00      	nop
 801c4d8:	240695f4 	.word	0x240695f4

0801c4dc <rosidl_runtime_c__String__init>:
 801c4dc:	b510      	push	{r4, lr}
 801c4de:	4604      	mov	r4, r0
 801c4e0:	b086      	sub	sp, #24
 801c4e2:	b170      	cbz	r0, 801c502 <rosidl_runtime_c__String__init+0x26>
 801c4e4:	a801      	add	r0, sp, #4
 801c4e6:	f7f5 fc63 	bl	8011db0 <rcutils_get_default_allocator>
 801c4ea:	9b01      	ldr	r3, [sp, #4]
 801c4ec:	9905      	ldr	r1, [sp, #20]
 801c4ee:	2001      	movs	r0, #1
 801c4f0:	4798      	blx	r3
 801c4f2:	6020      	str	r0, [r4, #0]
 801c4f4:	b128      	cbz	r0, 801c502 <rosidl_runtime_c__String__init+0x26>
 801c4f6:	2100      	movs	r1, #0
 801c4f8:	2201      	movs	r2, #1
 801c4fa:	7001      	strb	r1, [r0, #0]
 801c4fc:	4610      	mov	r0, r2
 801c4fe:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801c502:	b006      	add	sp, #24
 801c504:	bd10      	pop	{r4, pc}
 801c506:	bf00      	nop

0801c508 <rosidl_runtime_c__String__fini>:
 801c508:	b320      	cbz	r0, 801c554 <rosidl_runtime_c__String__fini+0x4c>
 801c50a:	6803      	ldr	r3, [r0, #0]
 801c50c:	b510      	push	{r4, lr}
 801c50e:	4604      	mov	r4, r0
 801c510:	b086      	sub	sp, #24
 801c512:	b173      	cbz	r3, 801c532 <rosidl_runtime_c__String__fini+0x2a>
 801c514:	6883      	ldr	r3, [r0, #8]
 801c516:	b1f3      	cbz	r3, 801c556 <rosidl_runtime_c__String__fini+0x4e>
 801c518:	a801      	add	r0, sp, #4
 801c51a:	f7f5 fc49 	bl	8011db0 <rcutils_get_default_allocator>
 801c51e:	9b02      	ldr	r3, [sp, #8]
 801c520:	9905      	ldr	r1, [sp, #20]
 801c522:	6820      	ldr	r0, [r4, #0]
 801c524:	4798      	blx	r3
 801c526:	2300      	movs	r3, #0
 801c528:	e9c4 3300 	strd	r3, r3, [r4]
 801c52c:	60a3      	str	r3, [r4, #8]
 801c52e:	b006      	add	sp, #24
 801c530:	bd10      	pop	{r4, pc}
 801c532:	6843      	ldr	r3, [r0, #4]
 801c534:	b9db      	cbnz	r3, 801c56e <rosidl_runtime_c__String__fini+0x66>
 801c536:	6883      	ldr	r3, [r0, #8]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d0f8      	beq.n	801c52e <rosidl_runtime_c__String__fini+0x26>
 801c53c:	4b12      	ldr	r3, [pc, #72]	@ (801c588 <rosidl_runtime_c__String__fini+0x80>)
 801c53e:	2251      	movs	r2, #81	@ 0x51
 801c540:	2101      	movs	r1, #1
 801c542:	4812      	ldr	r0, [pc, #72]	@ (801c58c <rosidl_runtime_c__String__fini+0x84>)
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	68db      	ldr	r3, [r3, #12]
 801c548:	f001 f8f0 	bl	801d72c <fwrite>
 801c54c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c550:	f000 fdac 	bl	801d0ac <exit>
 801c554:	4770      	bx	lr
 801c556:	4b0c      	ldr	r3, [pc, #48]	@ (801c588 <rosidl_runtime_c__String__fini+0x80>)
 801c558:	224c      	movs	r2, #76	@ 0x4c
 801c55a:	2101      	movs	r1, #1
 801c55c:	480c      	ldr	r0, [pc, #48]	@ (801c590 <rosidl_runtime_c__String__fini+0x88>)
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	68db      	ldr	r3, [r3, #12]
 801c562:	f001 f8e3 	bl	801d72c <fwrite>
 801c566:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c56a:	f000 fd9f 	bl	801d0ac <exit>
 801c56e:	4b06      	ldr	r3, [pc, #24]	@ (801c588 <rosidl_runtime_c__String__fini+0x80>)
 801c570:	224e      	movs	r2, #78	@ 0x4e
 801c572:	2101      	movs	r1, #1
 801c574:	4807      	ldr	r0, [pc, #28]	@ (801c594 <rosidl_runtime_c__String__fini+0x8c>)
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	68db      	ldr	r3, [r3, #12]
 801c57a:	f001 f8d7 	bl	801d72c <fwrite>
 801c57e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c582:	f000 fd93 	bl	801d0ac <exit>
 801c586:	bf00      	nop
 801c588:	24001210 	.word	0x24001210
 801c58c:	08020aec 	.word	0x08020aec
 801c590:	08020a4c 	.word	0x08020a4c
 801c594:	08020a9c 	.word	0x08020a9c

0801c598 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 801c598:	3800      	subs	r0, #0
 801c59a:	bf18      	it	ne
 801c59c:	2001      	movne	r0, #1
 801c59e:	4770      	bx	lr

0801c5a0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 801c5a0:	4770      	bx	lr
 801c5a2:	bf00      	nop

0801c5a4 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 801c5a4:	3800      	subs	r0, #0
 801c5a6:	bf18      	it	ne
 801c5a8:	2001      	movne	r0, #1
 801c5aa:	4770      	bx	lr

0801c5ac <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 801c5ac:	4770      	bx	lr
 801c5ae:	bf00      	nop

0801c5b0 <ucdr_serialize_string>:
 801c5b0:	b510      	push	{r4, lr}
 801c5b2:	b082      	sub	sp, #8
 801c5b4:	4604      	mov	r4, r0
 801c5b6:	4608      	mov	r0, r1
 801c5b8:	9101      	str	r1, [sp, #4]
 801c5ba:	f7e3 fe9b 	bl	80002f4 <strlen>
 801c5be:	4602      	mov	r2, r0
 801c5c0:	9901      	ldr	r1, [sp, #4]
 801c5c2:	4620      	mov	r0, r4
 801c5c4:	3201      	adds	r2, #1
 801c5c6:	b002      	add	sp, #8
 801c5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5cc:	f7f6 b982 	b.w	80128d4 <ucdr_serialize_sequence_char>

0801c5d0 <ucdr_deserialize_string>:
 801c5d0:	b500      	push	{lr}
 801c5d2:	b083      	sub	sp, #12
 801c5d4:	ab01      	add	r3, sp, #4
 801c5d6:	f7f6 f98f 	bl	80128f8 <ucdr_deserialize_sequence_char>
 801c5da:	b003      	add	sp, #12
 801c5dc:	f85d fb04 	ldr.w	pc, [sp], #4

0801c5e0 <uxr_init_input_best_effort_stream>:
 801c5e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c5e4:	8003      	strh	r3, [r0, #0]
 801c5e6:	4770      	bx	lr

0801c5e8 <uxr_reset_input_best_effort_stream>:
 801c5e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c5ec:	8003      	strh	r3, [r0, #0]
 801c5ee:	4770      	bx	lr

0801c5f0 <uxr_receive_best_effort_message>:
 801c5f0:	b538      	push	{r3, r4, r5, lr}
 801c5f2:	4604      	mov	r4, r0
 801c5f4:	8800      	ldrh	r0, [r0, #0]
 801c5f6:	460d      	mov	r5, r1
 801c5f8:	f000 fd24 	bl	801d044 <uxr_seq_num_cmp>
 801c5fc:	4603      	mov	r3, r0
 801c5fe:	0fc0      	lsrs	r0, r0, #31
 801c600:	2b00      	cmp	r3, #0
 801c602:	bfb8      	it	lt
 801c604:	8025      	strhlt	r5, [r4, #0]
 801c606:	bd38      	pop	{r3, r4, r5, pc}

0801c608 <on_full_input_buffer>:
 801c608:	b570      	push	{r4, r5, r6, lr}
 801c60a:	460c      	mov	r4, r1
 801c60c:	4605      	mov	r5, r0
 801c60e:	8908      	ldrh	r0, [r1, #8]
 801c610:	682b      	ldr	r3, [r5, #0]
 801c612:	7d26      	ldrb	r6, [r4, #20]
 801c614:	e9d1 1200 	ldrd	r1, r2, [r1]
 801c618:	fbb2 f2f0 	udiv	r2, r2, r0
 801c61c:	eba3 0c01 	sub.w	ip, r3, r1
 801c620:	fbbc fcf2 	udiv	ip, ip, r2
 801c624:	f10c 0c01 	add.w	ip, ip, #1
 801c628:	fa1f f38c 	uxth.w	r3, ip
 801c62c:	fbb3 fcf0 	udiv	ip, r3, r0
 801c630:	fb00 331c 	mls	r3, r0, ip, r3
 801c634:	b29b      	uxth	r3, r3
 801c636:	fb02 f303 	mul.w	r3, r2, r3
 801c63a:	1d18      	adds	r0, r3, #4
 801c63c:	4408      	add	r0, r1
 801c63e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801c642:	b116      	cbz	r6, 801c64a <on_full_input_buffer+0x42>
 801c644:	2600      	movs	r6, #0
 801c646:	f840 6c04 	str.w	r6, [r0, #-4]
 801c64a:	2a03      	cmp	r2, #3
 801c64c:	d801      	bhi.n	801c652 <on_full_input_buffer+0x4a>
 801c64e:	2001      	movs	r0, #1
 801c650:	bd70      	pop	{r4, r5, r6, pc}
 801c652:	3308      	adds	r3, #8
 801c654:	4628      	mov	r0, r5
 801c656:	3a04      	subs	r2, #4
 801c658:	4419      	add	r1, r3
 801c65a:	692b      	ldr	r3, [r5, #16]
 801c65c:	f7f4 fbbe 	bl	8010ddc <ucdr_init_buffer_origin>
 801c660:	4628      	mov	r0, r5
 801c662:	4622      	mov	r2, r4
 801c664:	4902      	ldr	r1, [pc, #8]	@ (801c670 <on_full_input_buffer+0x68>)
 801c666:	f7f4 fb95 	bl	8010d94 <ucdr_set_on_full_buffer_callback>
 801c66a:	2000      	movs	r0, #0
 801c66c:	bd70      	pop	{r4, r5, r6, pc}
 801c66e:	bf00      	nop
 801c670:	0801c609 	.word	0x0801c609

0801c674 <uxr_init_input_reliable_stream>:
 801c674:	b510      	push	{r4, lr}
 801c676:	e9c0 1200 	strd	r1, r2, [r0]
 801c67a:	2400      	movs	r4, #0
 801c67c:	9a02      	ldr	r2, [sp, #8]
 801c67e:	8103      	strh	r3, [r0, #8]
 801c680:	6102      	str	r2, [r0, #16]
 801c682:	7504      	strb	r4, [r0, #20]
 801c684:	b1c3      	cbz	r3, 801c6b8 <uxr_init_input_reliable_stream+0x44>
 801c686:	600c      	str	r4, [r1, #0]
 801c688:	8901      	ldrh	r1, [r0, #8]
 801c68a:	2901      	cmp	r1, #1
 801c68c:	d914      	bls.n	801c6b8 <uxr_init_input_reliable_stream+0x44>
 801c68e:	f04f 0c01 	mov.w	ip, #1
 801c692:	6843      	ldr	r3, [r0, #4]
 801c694:	f10c 0e01 	add.w	lr, ip, #1
 801c698:	fbbc f2f1 	udiv	r2, ip, r1
 801c69c:	fbb3 f3f1 	udiv	r3, r3, r1
 801c6a0:	fb01 c212 	mls	r2, r1, r2, ip
 801c6a4:	fa1f fc8e 	uxth.w	ip, lr
 801c6a8:	b292      	uxth	r2, r2
 801c6aa:	fb02 f303 	mul.w	r3, r2, r3
 801c6ae:	6802      	ldr	r2, [r0, #0]
 801c6b0:	50d4      	str	r4, [r2, r3]
 801c6b2:	8901      	ldrh	r1, [r0, #8]
 801c6b4:	4561      	cmp	r1, ip
 801c6b6:	d8ec      	bhi.n	801c692 <uxr_init_input_reliable_stream+0x1e>
 801c6b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c6bc:	60c3      	str	r3, [r0, #12]
 801c6be:	bd10      	pop	{r4, pc}

0801c6c0 <uxr_reset_input_reliable_stream>:
 801c6c0:	8901      	ldrh	r1, [r0, #8]
 801c6c2:	b1d9      	cbz	r1, 801c6fc <uxr_reset_input_reliable_stream+0x3c>
 801c6c4:	b510      	push	{r4, lr}
 801c6c6:	f04f 0e00 	mov.w	lr, #0
 801c6ca:	46f4      	mov	ip, lr
 801c6cc:	4674      	mov	r4, lr
 801c6ce:	6843      	ldr	r3, [r0, #4]
 801c6d0:	f10e 0e01 	add.w	lr, lr, #1
 801c6d4:	fbbc f2f1 	udiv	r2, ip, r1
 801c6d8:	fbb3 f3f1 	udiv	r3, r3, r1
 801c6dc:	fb01 c212 	mls	r2, r1, r2, ip
 801c6e0:	fa1f fc8e 	uxth.w	ip, lr
 801c6e4:	b292      	uxth	r2, r2
 801c6e6:	fb02 f303 	mul.w	r3, r2, r3
 801c6ea:	6802      	ldr	r2, [r0, #0]
 801c6ec:	50d4      	str	r4, [r2, r3]
 801c6ee:	8901      	ldrh	r1, [r0, #8]
 801c6f0:	4561      	cmp	r1, ip
 801c6f2:	d8ec      	bhi.n	801c6ce <uxr_reset_input_reliable_stream+0xe>
 801c6f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c6f8:	60c3      	str	r3, [r0, #12]
 801c6fa:	bd10      	pop	{r4, pc}
 801c6fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c700:	60c3      	str	r3, [r0, #12]
 801c702:	4770      	bx	lr

0801c704 <uxr_receive_reliable_message>:
 801c704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c708:	4604      	mov	r4, r0
 801c70a:	460d      	mov	r5, r1
 801c70c:	8901      	ldrh	r1, [r0, #8]
 801c70e:	4617      	mov	r7, r2
 801c710:	8980      	ldrh	r0, [r0, #12]
 801c712:	4698      	mov	r8, r3
 801c714:	f000 fc8e 	bl	801d034 <uxr_seq_num_add>
 801c718:	4629      	mov	r1, r5
 801c71a:	4606      	mov	r6, r0
 801c71c:	89a0      	ldrh	r0, [r4, #12]
 801c71e:	f000 fc91 	bl	801d044 <uxr_seq_num_cmp>
 801c722:	2800      	cmp	r0, #0
 801c724:	db0a      	blt.n	801c73c <uxr_receive_reliable_message+0x38>
 801c726:	2600      	movs	r6, #0
 801c728:	4629      	mov	r1, r5
 801c72a:	89e0      	ldrh	r0, [r4, #14]
 801c72c:	f000 fc8a 	bl	801d044 <uxr_seq_num_cmp>
 801c730:	2800      	cmp	r0, #0
 801c732:	da00      	bge.n	801c736 <uxr_receive_reliable_message+0x32>
 801c734:	81e5      	strh	r5, [r4, #14]
 801c736:	4630      	mov	r0, r6
 801c738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c73c:	4630      	mov	r0, r6
 801c73e:	4629      	mov	r1, r5
 801c740:	f000 fc80 	bl	801d044 <uxr_seq_num_cmp>
 801c744:	2800      	cmp	r0, #0
 801c746:	dbee      	blt.n	801c726 <uxr_receive_reliable_message+0x22>
 801c748:	6923      	ldr	r3, [r4, #16]
 801c74a:	4638      	mov	r0, r7
 801c74c:	4798      	blx	r3
 801c74e:	4681      	mov	r9, r0
 801c750:	2101      	movs	r1, #1
 801c752:	89a0      	ldrh	r0, [r4, #12]
 801c754:	f000 fc6e 	bl	801d034 <uxr_seq_num_add>
 801c758:	f1b9 0f00 	cmp.w	r9, #0
 801c75c:	bf08      	it	eq
 801c75e:	4285      	cmpeq	r5, r0
 801c760:	bf0c      	ite	eq
 801c762:	2601      	moveq	r6, #1
 801c764:	2600      	movne	r6, #0
 801c766:	d104      	bne.n	801c772 <uxr_receive_reliable_message+0x6e>
 801c768:	2300      	movs	r3, #0
 801c76a:	9a08      	ldr	r2, [sp, #32]
 801c76c:	81a0      	strh	r0, [r4, #12]
 801c76e:	7013      	strb	r3, [r2, #0]
 801c770:	e7da      	b.n	801c728 <uxr_receive_reliable_message+0x24>
 801c772:	8922      	ldrh	r2, [r4, #8]
 801c774:	6863      	ldr	r3, [r4, #4]
 801c776:	fbb5 f0f2 	udiv	r0, r5, r2
 801c77a:	fbb3 f3f2 	udiv	r3, r3, r2
 801c77e:	fb02 5010 	mls	r0, r2, r0, r5
 801c782:	b280      	uxth	r0, r0
 801c784:	fb03 f000 	mul.w	r0, r3, r0
 801c788:	6823      	ldr	r3, [r4, #0]
 801c78a:	3004      	adds	r0, #4
 801c78c:	4418      	add	r0, r3
 801c78e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d1c7      	bne.n	801c726 <uxr_receive_reliable_message+0x22>
 801c796:	4639      	mov	r1, r7
 801c798:	4642      	mov	r2, r8
 801c79a:	f001 fa62 	bl	801dc62 <memcpy>
 801c79e:	8921      	ldrh	r1, [r4, #8]
 801c7a0:	6863      	ldr	r3, [r4, #4]
 801c7a2:	fbb5 f2f1 	udiv	r2, r5, r1
 801c7a6:	fbb3 f3f1 	udiv	r3, r3, r1
 801c7aa:	fb01 5212 	mls	r2, r1, r2, r5
 801c7ae:	b292      	uxth	r2, r2
 801c7b0:	fb02 f303 	mul.w	r3, r2, r3
 801c7b4:	6822      	ldr	r2, [r4, #0]
 801c7b6:	f842 8003 	str.w	r8, [r2, r3]
 801c7ba:	2301      	movs	r3, #1
 801c7bc:	9a08      	ldr	r2, [sp, #32]
 801c7be:	7013      	strb	r3, [r2, #0]
 801c7c0:	f1b9 0f00 	cmp.w	r9, #0
 801c7c4:	d0af      	beq.n	801c726 <uxr_receive_reliable_message+0x22>
 801c7c6:	89a6      	ldrh	r6, [r4, #12]
 801c7c8:	2101      	movs	r1, #1
 801c7ca:	4630      	mov	r0, r6
 801c7cc:	f000 fc32 	bl	801d034 <uxr_seq_num_add>
 801c7d0:	8921      	ldrh	r1, [r4, #8]
 801c7d2:	6863      	ldr	r3, [r4, #4]
 801c7d4:	4606      	mov	r6, r0
 801c7d6:	fbb0 f2f1 	udiv	r2, r0, r1
 801c7da:	fbb3 f3f1 	udiv	r3, r3, r1
 801c7de:	fb01 0212 	mls	r2, r1, r2, r0
 801c7e2:	6820      	ldr	r0, [r4, #0]
 801c7e4:	b292      	uxth	r2, r2
 801c7e6:	fb02 f303 	mul.w	r3, r2, r3
 801c7ea:	3304      	adds	r3, #4
 801c7ec:	4418      	add	r0, r3
 801c7ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d097      	beq.n	801c726 <uxr_receive_reliable_message+0x22>
 801c7f6:	6923      	ldr	r3, [r4, #16]
 801c7f8:	4798      	blx	r3
 801c7fa:	2802      	cmp	r0, #2
 801c7fc:	d002      	beq.n	801c804 <uxr_receive_reliable_message+0x100>
 801c7fe:	2801      	cmp	r0, #1
 801c800:	d0e2      	beq.n	801c7c8 <uxr_receive_reliable_message+0xc4>
 801c802:	e790      	b.n	801c726 <uxr_receive_reliable_message+0x22>
 801c804:	2601      	movs	r6, #1
 801c806:	e78f      	b.n	801c728 <uxr_receive_reliable_message+0x24>

0801c808 <uxr_next_input_reliable_buffer_available>:
 801c808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c80c:	4604      	mov	r4, r0
 801c80e:	460f      	mov	r7, r1
 801c810:	8980      	ldrh	r0, [r0, #12]
 801c812:	2101      	movs	r1, #1
 801c814:	4690      	mov	r8, r2
 801c816:	f000 fc0d 	bl	801d034 <uxr_seq_num_add>
 801c81a:	8922      	ldrh	r2, [r4, #8]
 801c81c:	6866      	ldr	r6, [r4, #4]
 801c81e:	fbb0 f3f2 	udiv	r3, r0, r2
 801c822:	fbb6 f6f2 	udiv	r6, r6, r2
 801c826:	fb02 0313 	mls	r3, r2, r3, r0
 801c82a:	b29b      	uxth	r3, r3
 801c82c:	fb03 f606 	mul.w	r6, r3, r6
 801c830:	6823      	ldr	r3, [r4, #0]
 801c832:	3604      	adds	r6, #4
 801c834:	441e      	add	r6, r3
 801c836:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801c83a:	f1b9 0f00 	cmp.w	r9, #0
 801c83e:	d023      	beq.n	801c888 <uxr_next_input_reliable_buffer_available+0x80>
 801c840:	4605      	mov	r5, r0
 801c842:	6923      	ldr	r3, [r4, #16]
 801c844:	4630      	mov	r0, r6
 801c846:	4798      	blx	r3
 801c848:	4682      	mov	sl, r0
 801c84a:	b300      	cbz	r0, 801c88e <uxr_next_input_reliable_buffer_available+0x86>
 801c84c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801c850:	2101      	movs	r1, #1
 801c852:	4650      	mov	r0, sl
 801c854:	f000 fbee 	bl	801d034 <uxr_seq_num_add>
 801c858:	8921      	ldrh	r1, [r4, #8]
 801c85a:	4682      	mov	sl, r0
 801c85c:	6863      	ldr	r3, [r4, #4]
 801c85e:	6820      	ldr	r0, [r4, #0]
 801c860:	fbba f2f1 	udiv	r2, sl, r1
 801c864:	fbb3 f3f1 	udiv	r3, r3, r1
 801c868:	fb01 a212 	mls	r2, r1, r2, sl
 801c86c:	b292      	uxth	r2, r2
 801c86e:	fb02 f303 	mul.w	r3, r2, r3
 801c872:	3304      	adds	r3, #4
 801c874:	4418      	add	r0, r3
 801c876:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c87a:	b12b      	cbz	r3, 801c888 <uxr_next_input_reliable_buffer_available+0x80>
 801c87c:	6923      	ldr	r3, [r4, #16]
 801c87e:	4798      	blx	r3
 801c880:	2802      	cmp	r0, #2
 801c882:	d01b      	beq.n	801c8bc <uxr_next_input_reliable_buffer_available+0xb4>
 801c884:	2801      	cmp	r0, #1
 801c886:	d0e3      	beq.n	801c850 <uxr_next_input_reliable_buffer_available+0x48>
 801c888:	2000      	movs	r0, #0
 801c88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c88e:	464a      	mov	r2, r9
 801c890:	4631      	mov	r1, r6
 801c892:	4638      	mov	r0, r7
 801c894:	f7f4 faaa 	bl	8010dec <ucdr_init_buffer>
 801c898:	8921      	ldrh	r1, [r4, #8]
 801c89a:	6863      	ldr	r3, [r4, #4]
 801c89c:	2001      	movs	r0, #1
 801c89e:	fbb5 f2f1 	udiv	r2, r5, r1
 801c8a2:	fbb3 f3f1 	udiv	r3, r3, r1
 801c8a6:	fb01 5212 	mls	r2, r1, r2, r5
 801c8aa:	b292      	uxth	r2, r2
 801c8ac:	fb02 f303 	mul.w	r3, r2, r3
 801c8b0:	6822      	ldr	r2, [r4, #0]
 801c8b2:	f842 a003 	str.w	sl, [r2, r3]
 801c8b6:	81a5      	strh	r5, [r4, #12]
 801c8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8bc:	8920      	ldrh	r0, [r4, #8]
 801c8be:	eb06 0108 	add.w	r1, r6, r8
 801c8c2:	6863      	ldr	r3, [r4, #4]
 801c8c4:	eba9 0208 	sub.w	r2, r9, r8
 801c8c8:	fbb5 f6f0 	udiv	r6, r5, r0
 801c8cc:	fbb3 f3f0 	udiv	r3, r3, r0
 801c8d0:	fb00 5516 	mls	r5, r0, r6, r5
 801c8d4:	2000      	movs	r0, #0
 801c8d6:	b2ad      	uxth	r5, r5
 801c8d8:	fb03 f505 	mul.w	r5, r3, r5
 801c8dc:	6823      	ldr	r3, [r4, #0]
 801c8de:	5158      	str	r0, [r3, r5]
 801c8e0:	4638      	mov	r0, r7
 801c8e2:	f7f4 fa83 	bl	8010dec <ucdr_init_buffer>
 801c8e6:	4638      	mov	r0, r7
 801c8e8:	4622      	mov	r2, r4
 801c8ea:	4903      	ldr	r1, [pc, #12]	@ (801c8f8 <uxr_next_input_reliable_buffer_available+0xf0>)
 801c8ec:	f7f4 fa52 	bl	8010d94 <ucdr_set_on_full_buffer_callback>
 801c8f0:	2001      	movs	r0, #1
 801c8f2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801c8f6:	e7c8      	b.n	801c88a <uxr_next_input_reliable_buffer_available+0x82>
 801c8f8:	0801c609 	.word	0x0801c609

0801c8fc <uxr_process_heartbeat>:
 801c8fc:	b538      	push	{r3, r4, r5, lr}
 801c8fe:	4611      	mov	r1, r2
 801c900:	4604      	mov	r4, r0
 801c902:	89c0      	ldrh	r0, [r0, #14]
 801c904:	4615      	mov	r5, r2
 801c906:	f000 fb9d 	bl	801d044 <uxr_seq_num_cmp>
 801c90a:	2800      	cmp	r0, #0
 801c90c:	bfb8      	it	lt
 801c90e:	81e5      	strhlt	r5, [r4, #14]
 801c910:	bd38      	pop	{r3, r4, r5, pc}
 801c912:	bf00      	nop

0801c914 <uxr_compute_acknack>:
 801c914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c918:	8903      	ldrh	r3, [r0, #8]
 801c91a:	4604      	mov	r4, r0
 801c91c:	460f      	mov	r7, r1
 801c91e:	8985      	ldrh	r5, [r0, #12]
 801c920:	b1db      	cbz	r3, 801c95a <uxr_compute_acknack+0x46>
 801c922:	4628      	mov	r0, r5
 801c924:	2601      	movs	r6, #1
 801c926:	e004      	b.n	801c932 <uxr_compute_acknack+0x1e>
 801c928:	4566      	cmp	r6, ip
 801c92a:	f106 0601 	add.w	r6, r6, #1
 801c92e:	d214      	bcs.n	801c95a <uxr_compute_acknack+0x46>
 801c930:	89a0      	ldrh	r0, [r4, #12]
 801c932:	b2b1      	uxth	r1, r6
 801c934:	f000 fb7e 	bl	801d034 <uxr_seq_num_add>
 801c938:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c93c:	fbb0 f2fc 	udiv	r2, r0, ip
 801c940:	e9d4 1300 	ldrd	r1, r3, [r4]
 801c944:	fb0c 0212 	mls	r2, ip, r2, r0
 801c948:	fbb3 f3fc 	udiv	r3, r3, ip
 801c94c:	b292      	uxth	r2, r2
 801c94e:	fb02 f303 	mul.w	r3, r2, r3
 801c952:	58cb      	ldr	r3, [r1, r3]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d1e7      	bne.n	801c928 <uxr_compute_acknack+0x14>
 801c958:	4605      	mov	r5, r0
 801c95a:	803d      	strh	r5, [r7, #0]
 801c95c:	2101      	movs	r1, #1
 801c95e:	89e6      	ldrh	r6, [r4, #14]
 801c960:	4628      	mov	r0, r5
 801c962:	f000 fb6b 	bl	801d03c <uxr_seq_num_sub>
 801c966:	4601      	mov	r1, r0
 801c968:	4630      	mov	r0, r6
 801c96a:	f000 fb67 	bl	801d03c <uxr_seq_num_sub>
 801c96e:	4606      	mov	r6, r0
 801c970:	b328      	cbz	r0, 801c9be <uxr_compute_acknack+0xaa>
 801c972:	f04f 0900 	mov.w	r9, #0
 801c976:	f04f 0801 	mov.w	r8, #1
 801c97a:	464d      	mov	r5, r9
 801c97c:	fa1f f189 	uxth.w	r1, r9
 801c980:	8838      	ldrh	r0, [r7, #0]
 801c982:	f000 fb57 	bl	801d034 <uxr_seq_num_add>
 801c986:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c98a:	6861      	ldr	r1, [r4, #4]
 801c98c:	fa08 fe09 	lsl.w	lr, r8, r9
 801c990:	6822      	ldr	r2, [r4, #0]
 801c992:	f109 0901 	add.w	r9, r9, #1
 801c996:	ea4e 0e05 	orr.w	lr, lr, r5
 801c99a:	fbb0 f3fc 	udiv	r3, r0, ip
 801c99e:	fbb1 f1fc 	udiv	r1, r1, ip
 801c9a2:	fb03 001c 	mls	r0, r3, ip, r0
 801c9a6:	b283      	uxth	r3, r0
 801c9a8:	fb01 f303 	mul.w	r3, r1, r3
 801c9ac:	58d3      	ldr	r3, [r2, r3]
 801c9ae:	b90b      	cbnz	r3, 801c9b4 <uxr_compute_acknack+0xa0>
 801c9b0:	fa1f f58e 	uxth.w	r5, lr
 801c9b4:	454e      	cmp	r6, r9
 801c9b6:	d1e1      	bne.n	801c97c <uxr_compute_acknack+0x68>
 801c9b8:	4628      	mov	r0, r5
 801c9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c9be:	4605      	mov	r5, r0
 801c9c0:	4628      	mov	r0, r5
 801c9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c9c6:	bf00      	nop

0801c9c8 <uxr_init_output_best_effort_stream>:
 801c9c8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801c9cc:	6001      	str	r1, [r0, #0]
 801c9ce:	7303      	strb	r3, [r0, #12]
 801c9d0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c9d4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801c9d8:	4770      	bx	lr
 801c9da:	bf00      	nop

0801c9dc <uxr_reset_output_best_effort_stream>:
 801c9dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c9e0:	7b03      	ldrb	r3, [r0, #12]
 801c9e2:	81c2      	strh	r2, [r0, #14]
 801c9e4:	6043      	str	r3, [r0, #4]
 801c9e6:	4770      	bx	lr

0801c9e8 <uxr_prepare_best_effort_buffer_to_write>:
 801c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9ea:	4604      	mov	r4, r0
 801c9ec:	b083      	sub	sp, #12
 801c9ee:	6840      	ldr	r0, [r0, #4]
 801c9f0:	460d      	mov	r5, r1
 801c9f2:	4616      	mov	r6, r2
 801c9f4:	f7fd fef4 	bl	801a7e0 <uxr_submessage_padding>
 801c9f8:	6863      	ldr	r3, [r4, #4]
 801c9fa:	4418      	add	r0, r3
 801c9fc:	68a3      	ldr	r3, [r4, #8]
 801c9fe:	1942      	adds	r2, r0, r5
 801ca00:	4293      	cmp	r3, r2
 801ca02:	bf2c      	ite	cs
 801ca04:	2701      	movcs	r7, #1
 801ca06:	2700      	movcc	r7, #0
 801ca08:	d202      	bcs.n	801ca10 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801ca0a:	4638      	mov	r0, r7
 801ca0c:	b003      	add	sp, #12
 801ca0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca10:	9000      	str	r0, [sp, #0]
 801ca12:	2300      	movs	r3, #0
 801ca14:	4630      	mov	r0, r6
 801ca16:	6821      	ldr	r1, [r4, #0]
 801ca18:	f7f4 f9d6 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 801ca1c:	6861      	ldr	r1, [r4, #4]
 801ca1e:	4638      	mov	r0, r7
 801ca20:	4429      	add	r1, r5
 801ca22:	6061      	str	r1, [r4, #4]
 801ca24:	b003      	add	sp, #12
 801ca26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca28 <uxr_prepare_best_effort_buffer_to_send>:
 801ca28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca2c:	4604      	mov	r4, r0
 801ca2e:	461d      	mov	r5, r3
 801ca30:	6840      	ldr	r0, [r0, #4]
 801ca32:	7b23      	ldrb	r3, [r4, #12]
 801ca34:	4298      	cmp	r0, r3
 801ca36:	bf8c      	ite	hi
 801ca38:	2601      	movhi	r6, #1
 801ca3a:	2600      	movls	r6, #0
 801ca3c:	d802      	bhi.n	801ca44 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801ca3e:	4630      	mov	r0, r6
 801ca40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca44:	4688      	mov	r8, r1
 801ca46:	89e0      	ldrh	r0, [r4, #14]
 801ca48:	2101      	movs	r1, #1
 801ca4a:	4617      	mov	r7, r2
 801ca4c:	f000 faf2 	bl	801d034 <uxr_seq_num_add>
 801ca50:	6823      	ldr	r3, [r4, #0]
 801ca52:	81e0      	strh	r0, [r4, #14]
 801ca54:	8028      	strh	r0, [r5, #0]
 801ca56:	4630      	mov	r0, r6
 801ca58:	f8c8 3000 	str.w	r3, [r8]
 801ca5c:	6863      	ldr	r3, [r4, #4]
 801ca5e:	603b      	str	r3, [r7, #0]
 801ca60:	7b23      	ldrb	r3, [r4, #12]
 801ca62:	6063      	str	r3, [r4, #4]
 801ca64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ca68 <on_full_output_buffer>:
 801ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca6a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801ca6e:	460c      	mov	r4, r1
 801ca70:	6803      	ldr	r3, [r0, #0]
 801ca72:	4605      	mov	r5, r0
 801ca74:	7b26      	ldrb	r6, [r4, #12]
 801ca76:	e9d1 1200 	ldrd	r1, r2, [r1]
 801ca7a:	fbb2 f2fc 	udiv	r2, r2, ip
 801ca7e:	eba3 0e01 	sub.w	lr, r3, r1
 801ca82:	6903      	ldr	r3, [r0, #16]
 801ca84:	fbbe fef2 	udiv	lr, lr, r2
 801ca88:	f10e 0e01 	add.w	lr, lr, #1
 801ca8c:	fa1f fe8e 	uxth.w	lr, lr
 801ca90:	fbbe f7fc 	udiv	r7, lr, ip
 801ca94:	fb0c ec17 	mls	ip, ip, r7, lr
 801ca98:	fa1f fc8c 	uxth.w	ip, ip
 801ca9c:	fb02 fc0c 	mul.w	ip, r2, ip
 801caa0:	f851 200c 	ldr.w	r2, [r1, ip]
 801caa4:	44b4      	add	ip, r6
 801caa6:	1b92      	subs	r2, r2, r6
 801caa8:	f10c 0c08 	add.w	ip, ip, #8
 801caac:	3a04      	subs	r2, #4
 801caae:	4461      	add	r1, ip
 801cab0:	f7f4 f994 	bl	8010ddc <ucdr_init_buffer_origin>
 801cab4:	4628      	mov	r0, r5
 801cab6:	4622      	mov	r2, r4
 801cab8:	4902      	ldr	r1, [pc, #8]	@ (801cac4 <on_full_output_buffer+0x5c>)
 801caba:	f7f4 f96b 	bl	8010d94 <ucdr_set_on_full_buffer_callback>
 801cabe:	2000      	movs	r0, #0
 801cac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cac2:	bf00      	nop
 801cac4:	0801ca69 	.word	0x0801ca69

0801cac8 <uxr_init_output_reliable_stream>:
 801cac8:	b530      	push	{r4, r5, lr}
 801caca:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801cace:	8103      	strh	r3, [r0, #8]
 801cad0:	7304      	strb	r4, [r0, #12]
 801cad2:	e9c0 1200 	strd	r1, r2, [r0]
 801cad6:	b1e3      	cbz	r3, 801cb12 <uxr_init_output_reliable_stream+0x4a>
 801cad8:	600c      	str	r4, [r1, #0]
 801cada:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801cade:	f1bc 0f01 	cmp.w	ip, #1
 801cae2:	d916      	bls.n	801cb12 <uxr_init_output_reliable_stream+0x4a>
 801cae4:	f04f 0e01 	mov.w	lr, #1
 801cae8:	6843      	ldr	r3, [r0, #4]
 801caea:	f10e 0501 	add.w	r5, lr, #1
 801caee:	7b04      	ldrb	r4, [r0, #12]
 801caf0:	6801      	ldr	r1, [r0, #0]
 801caf2:	fbbe f2fc 	udiv	r2, lr, ip
 801caf6:	fbb3 f3fc 	udiv	r3, r3, ip
 801cafa:	fb0c e212 	mls	r2, ip, r2, lr
 801cafe:	fa1f fe85 	uxth.w	lr, r5
 801cb02:	b292      	uxth	r2, r2
 801cb04:	fb02 f303 	mul.w	r3, r2, r3
 801cb08:	50cc      	str	r4, [r1, r3]
 801cb0a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801cb0e:	45f4      	cmp	ip, lr
 801cb10:	d8ea      	bhi.n	801cae8 <uxr_init_output_reliable_stream+0x20>
 801cb12:	4b07      	ldr	r3, [pc, #28]	@ (801cb30 <uxr_init_output_reliable_stream+0x68>)
 801cb14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cb18:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801cb1c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801cb20:	f8c0 300e 	str.w	r3, [r0, #14]
 801cb24:	2300      	movs	r3, #0
 801cb26:	8242      	strh	r2, [r0, #18]
 801cb28:	8403      	strh	r3, [r0, #32]
 801cb2a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801cb2e:	bd30      	pop	{r4, r5, pc}
 801cb30:	ffff0000 	.word	0xffff0000
 801cb34:	00000000 	.word	0x00000000

0801cb38 <uxr_reset_output_reliable_stream>:
 801cb38:	8901      	ldrh	r1, [r0, #8]
 801cb3a:	b510      	push	{r4, lr}
 801cb3c:	b1b1      	cbz	r1, 801cb6c <uxr_reset_output_reliable_stream+0x34>
 801cb3e:	f04f 0e00 	mov.w	lr, #0
 801cb42:	46f4      	mov	ip, lr
 801cb44:	6843      	ldr	r3, [r0, #4]
 801cb46:	f10e 0e01 	add.w	lr, lr, #1
 801cb4a:	7b04      	ldrb	r4, [r0, #12]
 801cb4c:	fbbc f2f1 	udiv	r2, ip, r1
 801cb50:	fbb3 f3f1 	udiv	r3, r3, r1
 801cb54:	fb01 c212 	mls	r2, r1, r2, ip
 801cb58:	fa1f fc8e 	uxth.w	ip, lr
 801cb5c:	b292      	uxth	r2, r2
 801cb5e:	fb02 f303 	mul.w	r3, r2, r3
 801cb62:	6802      	ldr	r2, [r0, #0]
 801cb64:	50d4      	str	r4, [r2, r3]
 801cb66:	8901      	ldrh	r1, [r0, #8]
 801cb68:	4561      	cmp	r1, ip
 801cb6a:	d8eb      	bhi.n	801cb44 <uxr_reset_output_reliable_stream+0xc>
 801cb6c:	4b08      	ldr	r3, [pc, #32]	@ (801cb90 <uxr_reset_output_reliable_stream+0x58>)
 801cb6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cb72:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801cb88 <uxr_reset_output_reliable_stream+0x50>
 801cb76:	f8c0 300e 	str.w	r3, [r0, #14]
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	8242      	strh	r2, [r0, #18]
 801cb7e:	8403      	strh	r3, [r0, #32]
 801cb80:	ed80 7b06 	vstr	d7, [r0, #24]
 801cb84:	bd10      	pop	{r4, pc}
 801cb86:	bf00      	nop
 801cb88:	ffffffff 	.word	0xffffffff
 801cb8c:	7fffffff 	.word	0x7fffffff
 801cb90:	ffff0000 	.word	0xffff0000

0801cb94 <uxr_prepare_reliable_buffer_to_write>:
 801cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb98:	4604      	mov	r4, r0
 801cb9a:	b091      	sub	sp, #68	@ 0x44
 801cb9c:	8900      	ldrh	r0, [r0, #8]
 801cb9e:	468b      	mov	fp, r1
 801cba0:	89e6      	ldrh	r6, [r4, #14]
 801cba2:	9204      	str	r2, [sp, #16]
 801cba4:	6865      	ldr	r5, [r4, #4]
 801cba6:	6823      	ldr	r3, [r4, #0]
 801cba8:	f894 900c 	ldrb.w	r9, [r4, #12]
 801cbac:	fbb6 f2f0 	udiv	r2, r6, r0
 801cbb0:	fbb5 f5f0 	udiv	r5, r5, r0
 801cbb4:	fb00 6212 	mls	r2, r0, r2, r6
 801cbb8:	1f2f      	subs	r7, r5, #4
 801cbba:	b292      	uxth	r2, r2
 801cbbc:	fb05 3202 	mla	r2, r5, r2, r3
 801cbc0:	1d11      	adds	r1, r2, #4
 801cbc2:	f8d2 8000 	ldr.w	r8, [r2]
 801cbc6:	9103      	str	r1, [sp, #12]
 801cbc8:	2800      	cmp	r0, #0
 801cbca:	f000 814a 	beq.w	801ce62 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801cbce:	f04f 0c00 	mov.w	ip, #0
 801cbd2:	46e2      	mov	sl, ip
 801cbd4:	4661      	mov	r1, ip
 801cbd6:	f10c 0c01 	add.w	ip, ip, #1
 801cbda:	fbb1 f2f0 	udiv	r2, r1, r0
 801cbde:	fb00 1212 	mls	r2, r0, r2, r1
 801cbe2:	fa1f f18c 	uxth.w	r1, ip
 801cbe6:	b292      	uxth	r2, r2
 801cbe8:	fb05 f202 	mul.w	r2, r5, r2
 801cbec:	589a      	ldr	r2, [r3, r2]
 801cbee:	454a      	cmp	r2, r9
 801cbf0:	d103      	bne.n	801cbfa <uxr_prepare_reliable_buffer_to_write+0x66>
 801cbf2:	f10a 0a01 	add.w	sl, sl, #1
 801cbf6:	fa1f fa8a 	uxth.w	sl, sl
 801cbfa:	4281      	cmp	r1, r0
 801cbfc:	d3eb      	bcc.n	801cbd6 <uxr_prepare_reliable_buffer_to_write+0x42>
 801cbfe:	4640      	mov	r0, r8
 801cc00:	2104      	movs	r1, #4
 801cc02:	f8cd a014 	str.w	sl, [sp, #20]
 801cc06:	f7f4 f8f5 	bl	8010df4 <ucdr_alignment>
 801cc0a:	4480      	add	r8, r0
 801cc0c:	eb08 020b 	add.w	r2, r8, fp
 801cc10:	42ba      	cmp	r2, r7
 801cc12:	f240 80ca 	bls.w	801cdaa <uxr_prepare_reliable_buffer_to_write+0x216>
 801cc16:	7b22      	ldrb	r2, [r4, #12]
 801cc18:	445a      	add	r2, fp
 801cc1a:	42ba      	cmp	r2, r7
 801cc1c:	f240 80b2 	bls.w	801cd84 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801cc20:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801cc24:	b2bb      	uxth	r3, r7
 801cc26:	eba2 0209 	sub.w	r2, r2, r9
 801cc2a:	441a      	add	r2, r3
 801cc2c:	b292      	uxth	r2, r2
 801cc2e:	fb0a f902 	mul.w	r9, sl, r2
 801cc32:	9205      	str	r2, [sp, #20]
 801cc34:	45d9      	cmp	r9, fp
 801cc36:	9206      	str	r2, [sp, #24]
 801cc38:	f0c0 80b3 	bcc.w	801cda2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801cc3c:	f108 0204 	add.w	r2, r8, #4
 801cc40:	42ba      	cmp	r2, r7
 801cc42:	f080 80da 	bcs.w	801cdfa <uxr_prepare_reliable_buffer_to_write+0x266>
 801cc46:	f1a3 0904 	sub.w	r9, r3, #4
 801cc4a:	9b05      	ldr	r3, [sp, #20]
 801cc4c:	eba9 0908 	sub.w	r9, r9, r8
 801cc50:	fa1f f989 	uxth.w	r9, r9
 801cc54:	ebab 0b09 	sub.w	fp, fp, r9
 801cc58:	fbbb f2f3 	udiv	r2, fp, r3
 801cc5c:	fb03 b312 	mls	r3, r3, r2, fp
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	f040 80c4 	bne.w	801cdee <uxr_prepare_reliable_buffer_to_write+0x25a>
 801cc66:	b293      	uxth	r3, r2
 801cc68:	4553      	cmp	r3, sl
 801cc6a:	f200 809a 	bhi.w	801cda2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	f000 80f9 	beq.w	801ce66 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801cc74:	f8cd 801c 	str.w	r8, [sp, #28]
 801cc78:	f04f 0a00 	mov.w	sl, #0
 801cc7c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cc80:	f10d 0b20 	add.w	fp, sp, #32
 801cc84:	9505      	str	r5, [sp, #20]
 801cc86:	461d      	mov	r5, r3
 801cc88:	e000      	b.n	801cc8c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801cc8a:	46c1      	mov	r9, r8
 801cc8c:	8922      	ldrh	r2, [r4, #8]
 801cc8e:	4658      	mov	r0, fp
 801cc90:	6863      	ldr	r3, [r4, #4]
 801cc92:	f10a 0a01 	add.w	sl, sl, #1
 801cc96:	fbb6 f1f2 	udiv	r1, r6, r2
 801cc9a:	fbb3 f3f2 	udiv	r3, r3, r2
 801cc9e:	fb02 6111 	mls	r1, r2, r1, r6
 801cca2:	463a      	mov	r2, r7
 801cca4:	b289      	uxth	r1, r1
 801cca6:	fb03 f101 	mul.w	r1, r3, r1
 801ccaa:	6823      	ldr	r3, [r4, #0]
 801ccac:	3104      	adds	r1, #4
 801ccae:	4419      	add	r1, r3
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801ccb6:	f8cd c000 	str.w	ip, [sp]
 801ccba:	f7f4 f885 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 801ccbe:	464a      	mov	r2, r9
 801ccc0:	2300      	movs	r3, #0
 801ccc2:	210d      	movs	r1, #13
 801ccc4:	4658      	mov	r0, fp
 801ccc6:	f7fd fd4b 	bl	801a760 <uxr_buffer_submessage_header>
 801ccca:	8921      	ldrh	r1, [r4, #8]
 801cccc:	6863      	ldr	r3, [r4, #4]
 801ccce:	4630      	mov	r0, r6
 801ccd0:	fbb6 f2f1 	udiv	r2, r6, r1
 801ccd4:	fbb3 f3f1 	udiv	r3, r3, r1
 801ccd8:	fb01 6212 	mls	r2, r1, r2, r6
 801ccdc:	2101      	movs	r1, #1
 801ccde:	b292      	uxth	r2, r2
 801cce0:	fb02 f303 	mul.w	r3, r2, r3
 801cce4:	6822      	ldr	r2, [r4, #0]
 801cce6:	50d7      	str	r7, [r2, r3]
 801cce8:	f000 f9a4 	bl	801d034 <uxr_seq_num_add>
 801ccec:	4606      	mov	r6, r0
 801ccee:	fa1f f38a 	uxth.w	r3, sl
 801ccf2:	429d      	cmp	r5, r3
 801ccf4:	d8c9      	bhi.n	801cc8a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801ccf6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ccfa:	9d05      	ldr	r5, [sp, #20]
 801ccfc:	8920      	ldrh	r0, [r4, #8]
 801ccfe:	463a      	mov	r2, r7
 801cd00:	6863      	ldr	r3, [r4, #4]
 801cd02:	fbb6 f1f0 	udiv	r1, r6, r0
 801cd06:	fbb3 f3f0 	udiv	r3, r3, r0
 801cd0a:	fb00 6111 	mls	r1, r0, r1, r6
 801cd0e:	4658      	mov	r0, fp
 801cd10:	b289      	uxth	r1, r1
 801cd12:	fb01 f303 	mul.w	r3, r1, r3
 801cd16:	6821      	ldr	r1, [r4, #0]
 801cd18:	3304      	adds	r3, #4
 801cd1a:	4419      	add	r1, r3
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801cd22:	9700      	str	r7, [sp, #0]
 801cd24:	f7f4 f850 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 801cd28:	9f06      	ldr	r7, [sp, #24]
 801cd2a:	4658      	mov	r0, fp
 801cd2c:	2302      	movs	r3, #2
 801cd2e:	b2ba      	uxth	r2, r7
 801cd30:	210d      	movs	r1, #13
 801cd32:	f7fd fd15 	bl	801a760 <uxr_buffer_submessage_header>
 801cd36:	f108 0104 	add.w	r1, r8, #4
 801cd3a:	9b03      	ldr	r3, [sp, #12]
 801cd3c:	f1a5 0208 	sub.w	r2, r5, #8
 801cd40:	8925      	ldrh	r5, [r4, #8]
 801cd42:	440b      	add	r3, r1
 801cd44:	eba2 0208 	sub.w	r2, r2, r8
 801cd48:	fbb6 f0f5 	udiv	r0, r6, r5
 801cd4c:	4619      	mov	r1, r3
 801cd4e:	6863      	ldr	r3, [r4, #4]
 801cd50:	fb05 6010 	mls	r0, r5, r0, r6
 801cd54:	fbb3 f3f5 	udiv	r3, r3, r5
 801cd58:	b280      	uxth	r0, r0
 801cd5a:	6825      	ldr	r5, [r4, #0]
 801cd5c:	fb00 f303 	mul.w	r3, r0, r3
 801cd60:	7b20      	ldrb	r0, [r4, #12]
 801cd62:	3004      	adds	r0, #4
 801cd64:	4438      	add	r0, r7
 801cd66:	50e8      	str	r0, [r5, r3]
 801cd68:	9d04      	ldr	r5, [sp, #16]
 801cd6a:	4628      	mov	r0, r5
 801cd6c:	f7f4 f83e 	bl	8010dec <ucdr_init_buffer>
 801cd70:	4628      	mov	r0, r5
 801cd72:	4622      	mov	r2, r4
 801cd74:	493d      	ldr	r1, [pc, #244]	@ (801ce6c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801cd76:	f7f4 f80d 	bl	8010d94 <ucdr_set_on_full_buffer_callback>
 801cd7a:	2001      	movs	r0, #1
 801cd7c:	81e6      	strh	r6, [r4, #14]
 801cd7e:	b011      	add	sp, #68	@ 0x44
 801cd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd84:	2101      	movs	r1, #1
 801cd86:	89e0      	ldrh	r0, [r4, #14]
 801cd88:	f000 f954 	bl	801d034 <uxr_seq_num_add>
 801cd8c:	4605      	mov	r5, r0
 801cd8e:	8921      	ldrh	r1, [r4, #8]
 801cd90:	8a60      	ldrh	r0, [r4, #18]
 801cd92:	f000 f94f 	bl	801d034 <uxr_seq_num_add>
 801cd96:	4601      	mov	r1, r0
 801cd98:	4628      	mov	r0, r5
 801cd9a:	f000 f953 	bl	801d044 <uxr_seq_num_cmp>
 801cd9e:	2800      	cmp	r0, #0
 801cda0:	dd44      	ble.n	801ce2c <uxr_prepare_reliable_buffer_to_write+0x298>
 801cda2:	2000      	movs	r0, #0
 801cda4:	b011      	add	sp, #68	@ 0x44
 801cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdaa:	8921      	ldrh	r1, [r4, #8]
 801cdac:	8a60      	ldrh	r0, [r4, #18]
 801cdae:	9205      	str	r2, [sp, #20]
 801cdb0:	f000 f940 	bl	801d034 <uxr_seq_num_add>
 801cdb4:	4601      	mov	r1, r0
 801cdb6:	4630      	mov	r0, r6
 801cdb8:	f000 f944 	bl	801d044 <uxr_seq_num_cmp>
 801cdbc:	2800      	cmp	r0, #0
 801cdbe:	9a05      	ldr	r2, [sp, #20]
 801cdc0:	dcef      	bgt.n	801cda2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801cdc2:	8925      	ldrh	r5, [r4, #8]
 801cdc4:	e9d4 7300 	ldrd	r7, r3, [r4]
 801cdc8:	fbb6 f4f5 	udiv	r4, r6, r5
 801cdcc:	fbb3 f3f5 	udiv	r3, r3, r5
 801cdd0:	fb05 6414 	mls	r4, r5, r4, r6
 801cdd4:	b2a4      	uxth	r4, r4
 801cdd6:	fb04 f303 	mul.w	r3, r4, r3
 801cdda:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801cdde:	50fa      	str	r2, [r7, r3]
 801cde0:	2300      	movs	r3, #0
 801cde2:	f8cd 8000 	str.w	r8, [sp]
 801cde6:	f7f3 ffef 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 801cdea:	2001      	movs	r0, #1
 801cdec:	e7da      	b.n	801cda4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801cdee:	3201      	adds	r2, #1
 801cdf0:	9306      	str	r3, [sp, #24]
 801cdf2:	b293      	uxth	r3, r2
 801cdf4:	4553      	cmp	r3, sl
 801cdf6:	d8d4      	bhi.n	801cda2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801cdf8:	e739      	b.n	801cc6e <uxr_prepare_reliable_buffer_to_write+0xda>
 801cdfa:	4630      	mov	r0, r6
 801cdfc:	2101      	movs	r1, #1
 801cdfe:	9307      	str	r3, [sp, #28]
 801ce00:	f000 f918 	bl	801d034 <uxr_seq_num_add>
 801ce04:	4606      	mov	r6, r0
 801ce06:	8920      	ldrh	r0, [r4, #8]
 801ce08:	6862      	ldr	r2, [r4, #4]
 801ce0a:	fbb6 f1f0 	udiv	r1, r6, r0
 801ce0e:	fbb2 f2f0 	udiv	r2, r2, r0
 801ce12:	fb00 6111 	mls	r1, r0, r1, r6
 801ce16:	b289      	uxth	r1, r1
 801ce18:	fb01 f202 	mul.w	r2, r1, r2
 801ce1c:	6821      	ldr	r1, [r4, #0]
 801ce1e:	3204      	adds	r2, #4
 801ce20:	188b      	adds	r3, r1, r2
 801ce22:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ce26:	9303      	str	r3, [sp, #12]
 801ce28:	9b07      	ldr	r3, [sp, #28]
 801ce2a:	e70c      	b.n	801cc46 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ce2c:	8921      	ldrh	r1, [r4, #8]
 801ce2e:	6863      	ldr	r3, [r4, #4]
 801ce30:	9804      	ldr	r0, [sp, #16]
 801ce32:	fbb5 f2f1 	udiv	r2, r5, r1
 801ce36:	fbb3 f3f1 	udiv	r3, r3, r1
 801ce3a:	fb01 5212 	mls	r2, r1, r2, r5
 801ce3e:	6821      	ldr	r1, [r4, #0]
 801ce40:	b292      	uxth	r2, r2
 801ce42:	fb02 f303 	mul.w	r3, r2, r3
 801ce46:	7b22      	ldrb	r2, [r4, #12]
 801ce48:	3304      	adds	r3, #4
 801ce4a:	445a      	add	r2, fp
 801ce4c:	4419      	add	r1, r3
 801ce4e:	f841 2c04 	str.w	r2, [r1, #-4]
 801ce52:	7b23      	ldrb	r3, [r4, #12]
 801ce54:	9300      	str	r3, [sp, #0]
 801ce56:	2300      	movs	r3, #0
 801ce58:	f7f3 ffb6 	bl	8010dc8 <ucdr_init_buffer_origin_offset>
 801ce5c:	2001      	movs	r0, #1
 801ce5e:	81e5      	strh	r5, [r4, #14]
 801ce60:	e7a0      	b.n	801cda4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801ce62:	4682      	mov	sl, r0
 801ce64:	e6cb      	b.n	801cbfe <uxr_prepare_reliable_buffer_to_write+0x6a>
 801ce66:	f10d 0b20 	add.w	fp, sp, #32
 801ce6a:	e747      	b.n	801ccfc <uxr_prepare_reliable_buffer_to_write+0x168>
 801ce6c:	0801ca69 	.word	0x0801ca69

0801ce70 <uxr_prepare_next_reliable_buffer_to_send>:
 801ce70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce72:	4604      	mov	r4, r0
 801ce74:	461d      	mov	r5, r3
 801ce76:	460f      	mov	r7, r1
 801ce78:	8a00      	ldrh	r0, [r0, #16]
 801ce7a:	2101      	movs	r1, #1
 801ce7c:	4616      	mov	r6, r2
 801ce7e:	f000 f8d9 	bl	801d034 <uxr_seq_num_add>
 801ce82:	8028      	strh	r0, [r5, #0]
 801ce84:	8922      	ldrh	r2, [r4, #8]
 801ce86:	6863      	ldr	r3, [r4, #4]
 801ce88:	fbb0 f1f2 	udiv	r1, r0, r2
 801ce8c:	fbb3 f3f2 	udiv	r3, r3, r2
 801ce90:	fb02 0c11 	mls	ip, r2, r1, r0
 801ce94:	89e1      	ldrh	r1, [r4, #14]
 801ce96:	fa1f fc8c 	uxth.w	ip, ip
 801ce9a:	fb0c fc03 	mul.w	ip, ip, r3
 801ce9e:	6823      	ldr	r3, [r4, #0]
 801cea0:	f10c 0c04 	add.w	ip, ip, #4
 801cea4:	4463      	add	r3, ip
 801cea6:	603b      	str	r3, [r7, #0]
 801cea8:	6823      	ldr	r3, [r4, #0]
 801ceaa:	449c      	add	ip, r3
 801ceac:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801ceb0:	6033      	str	r3, [r6, #0]
 801ceb2:	f000 f8c7 	bl	801d044 <uxr_seq_num_cmp>
 801ceb6:	2800      	cmp	r0, #0
 801ceb8:	dd01      	ble.n	801cebe <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801ceba:	2000      	movs	r0, #0
 801cebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cebe:	7b23      	ldrb	r3, [r4, #12]
 801cec0:	6832      	ldr	r2, [r6, #0]
 801cec2:	429a      	cmp	r2, r3
 801cec4:	d9f9      	bls.n	801ceba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801cec6:	8a61      	ldrh	r1, [r4, #18]
 801cec8:	8a20      	ldrh	r0, [r4, #16]
 801ceca:	f000 f8b7 	bl	801d03c <uxr_seq_num_sub>
 801cece:	8923      	ldrh	r3, [r4, #8]
 801ced0:	4283      	cmp	r3, r0
 801ced2:	d0f2      	beq.n	801ceba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ced4:	8828      	ldrh	r0, [r5, #0]
 801ced6:	89e3      	ldrh	r3, [r4, #14]
 801ced8:	8220      	strh	r0, [r4, #16]
 801ceda:	4298      	cmp	r0, r3
 801cedc:	d001      	beq.n	801cee2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801cede:	2001      	movs	r0, #1
 801cee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cee2:	2101      	movs	r1, #1
 801cee4:	f000 f8a6 	bl	801d034 <uxr_seq_num_add>
 801cee8:	4603      	mov	r3, r0
 801ceea:	2001      	movs	r0, #1
 801ceec:	81e3      	strh	r3, [r4, #14]
 801ceee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cef0 <uxr_update_output_stream_heartbeat_timestamp>:
 801cef0:	b570      	push	{r4, r5, r6, lr}
 801cef2:	8a01      	ldrh	r1, [r0, #16]
 801cef4:	4604      	mov	r4, r0
 801cef6:	8a40      	ldrh	r0, [r0, #18]
 801cef8:	4615      	mov	r5, r2
 801cefa:	461e      	mov	r6, r3
 801cefc:	f000 f8a2 	bl	801d044 <uxr_seq_num_cmp>
 801cf00:	2800      	cmp	r0, #0
 801cf02:	db07      	blt.n	801cf14 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801cf04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cf08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cf0c:	2000      	movs	r0, #0
 801cf0e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801cf12:	bd70      	pop	{r4, r5, r6, pc}
 801cf14:	f894 0020 	ldrb.w	r0, [r4, #32]
 801cf18:	b940      	cbnz	r0, 801cf2c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801cf1a:	2301      	movs	r3, #1
 801cf1c:	f884 3020 	strb.w	r3, [r4, #32]
 801cf20:	3564      	adds	r5, #100	@ 0x64
 801cf22:	f146 0600 	adc.w	r6, r6, #0
 801cf26:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801cf2a:	bd70      	pop	{r4, r5, r6, pc}
 801cf2c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801cf30:	4295      	cmp	r5, r2
 801cf32:	eb76 0303 	sbcs.w	r3, r6, r3
 801cf36:	db04      	blt.n	801cf42 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801cf38:	1c43      	adds	r3, r0, #1
 801cf3a:	2001      	movs	r0, #1
 801cf3c:	f884 3020 	strb.w	r3, [r4, #32]
 801cf40:	e7ee      	b.n	801cf20 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801cf42:	2000      	movs	r0, #0
 801cf44:	e7ec      	b.n	801cf20 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801cf46:	bf00      	nop

0801cf48 <uxr_begin_output_nack_buffer_it>:
 801cf48:	8a40      	ldrh	r0, [r0, #18]
 801cf4a:	4770      	bx	lr

0801cf4c <uxr_next_reliable_nack_buffer_to_send>:
 801cf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf50:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801cf54:	b197      	cbz	r7, 801cf7c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801cf56:	4680      	mov	r8, r0
 801cf58:	460d      	mov	r5, r1
 801cf5a:	4616      	mov	r6, r2
 801cf5c:	461c      	mov	r4, r3
 801cf5e:	8818      	ldrh	r0, [r3, #0]
 801cf60:	2101      	movs	r1, #1
 801cf62:	f000 f867 	bl	801d034 <uxr_seq_num_add>
 801cf66:	8020      	strh	r0, [r4, #0]
 801cf68:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801cf6c:	f000 f86a 	bl	801d044 <uxr_seq_num_cmp>
 801cf70:	2800      	cmp	r0, #0
 801cf72:	dd06      	ble.n	801cf82 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801cf74:	2300      	movs	r3, #0
 801cf76:	461f      	mov	r7, r3
 801cf78:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801cf7c:	4638      	mov	r0, r7
 801cf7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf82:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801cf86:	8820      	ldrh	r0, [r4, #0]
 801cf88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cf8c:	fbb0 f3f2 	udiv	r3, r0, r2
 801cf90:	fbb1 fcf2 	udiv	ip, r1, r2
 801cf94:	fb02 0313 	mls	r3, r2, r3, r0
 801cf98:	b29b      	uxth	r3, r3
 801cf9a:	fb03 fc0c 	mul.w	ip, r3, ip
 801cf9e:	f8d8 3000 	ldr.w	r3, [r8]
 801cfa2:	f10c 0c04 	add.w	ip, ip, #4
 801cfa6:	4463      	add	r3, ip
 801cfa8:	602b      	str	r3, [r5, #0]
 801cfaa:	f8d8 3000 	ldr.w	r3, [r8]
 801cfae:	4463      	add	r3, ip
 801cfb0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801cfb4:	6033      	str	r3, [r6, #0]
 801cfb6:	f898 200c 	ldrb.w	r2, [r8, #12]
 801cfba:	429a      	cmp	r2, r3
 801cfbc:	d0d0      	beq.n	801cf60 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801cfbe:	e7dd      	b.n	801cf7c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801cfc0 <uxr_process_acknack>:
 801cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfc2:	4604      	mov	r4, r0
 801cfc4:	460e      	mov	r6, r1
 801cfc6:	4610      	mov	r0, r2
 801cfc8:	2101      	movs	r1, #1
 801cfca:	f000 f837 	bl	801d03c <uxr_seq_num_sub>
 801cfce:	8a61      	ldrh	r1, [r4, #18]
 801cfd0:	f000 f834 	bl	801d03c <uxr_seq_num_sub>
 801cfd4:	b1c8      	cbz	r0, 801d00a <uxr_process_acknack+0x4a>
 801cfd6:	4605      	mov	r5, r0
 801cfd8:	2700      	movs	r7, #0
 801cfda:	2101      	movs	r1, #1
 801cfdc:	8a60      	ldrh	r0, [r4, #18]
 801cfde:	f000 f829 	bl	801d034 <uxr_seq_num_add>
 801cfe2:	8923      	ldrh	r3, [r4, #8]
 801cfe4:	6862      	ldr	r2, [r4, #4]
 801cfe6:	3701      	adds	r7, #1
 801cfe8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801cfec:	6821      	ldr	r1, [r4, #0]
 801cfee:	42bd      	cmp	r5, r7
 801cff0:	8260      	strh	r0, [r4, #18]
 801cff2:	fbb0 fef3 	udiv	lr, r0, r3
 801cff6:	fbb2 f2f3 	udiv	r2, r2, r3
 801cffa:	fb03 031e 	mls	r3, r3, lr, r0
 801cffe:	b29b      	uxth	r3, r3
 801d000:	fb02 f303 	mul.w	r3, r2, r3
 801d004:	f841 c003 	str.w	ip, [r1, r3]
 801d008:	d1e7      	bne.n	801cfda <uxr_process_acknack+0x1a>
 801d00a:	3e00      	subs	r6, #0
 801d00c:	f04f 0300 	mov.w	r3, #0
 801d010:	bf18      	it	ne
 801d012:	2601      	movne	r6, #1
 801d014:	f884 3020 	strb.w	r3, [r4, #32]
 801d018:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801d01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d01e:	bf00      	nop

0801d020 <uxr_is_output_up_to_date>:
 801d020:	8a01      	ldrh	r1, [r0, #16]
 801d022:	8a40      	ldrh	r0, [r0, #18]
 801d024:	b508      	push	{r3, lr}
 801d026:	f000 f80d 	bl	801d044 <uxr_seq_num_cmp>
 801d02a:	fab0 f080 	clz	r0, r0
 801d02e:	0940      	lsrs	r0, r0, #5
 801d030:	bd08      	pop	{r3, pc}
 801d032:	bf00      	nop

0801d034 <uxr_seq_num_add>:
 801d034:	4408      	add	r0, r1
 801d036:	b280      	uxth	r0, r0
 801d038:	4770      	bx	lr
 801d03a:	bf00      	nop

0801d03c <uxr_seq_num_sub>:
 801d03c:	1a40      	subs	r0, r0, r1
 801d03e:	b280      	uxth	r0, r0
 801d040:	4770      	bx	lr
 801d042:	bf00      	nop

0801d044 <uxr_seq_num_cmp>:
 801d044:	4288      	cmp	r0, r1
 801d046:	d011      	beq.n	801d06c <uxr_seq_num_cmp+0x28>
 801d048:	d309      	bcc.n	801d05e <uxr_seq_num_cmp+0x1a>
 801d04a:	4288      	cmp	r0, r1
 801d04c:	d910      	bls.n	801d070 <uxr_seq_num_cmp+0x2c>
 801d04e:	1a40      	subs	r0, r0, r1
 801d050:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801d054:	bfd4      	ite	le
 801d056:	2001      	movle	r0, #1
 801d058:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801d05c:	4770      	bx	lr
 801d05e:	1a0b      	subs	r3, r1, r0
 801d060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d064:	daf1      	bge.n	801d04a <uxr_seq_num_cmp+0x6>
 801d066:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d06a:	4770      	bx	lr
 801d06c:	2000      	movs	r0, #0
 801d06e:	4770      	bx	lr
 801d070:	2001      	movs	r0, #1
 801d072:	4770      	bx	lr

0801d074 <calloc>:
 801d074:	4b02      	ldr	r3, [pc, #8]	@ (801d080 <calloc+0xc>)
 801d076:	460a      	mov	r2, r1
 801d078:	4601      	mov	r1, r0
 801d07a:	6818      	ldr	r0, [r3, #0]
 801d07c:	f000 b802 	b.w	801d084 <_calloc_r>
 801d080:	24001210 	.word	0x24001210

0801d084 <_calloc_r>:
 801d084:	b570      	push	{r4, r5, r6, lr}
 801d086:	fba1 5402 	umull	r5, r4, r1, r2
 801d08a:	b93c      	cbnz	r4, 801d09c <_calloc_r+0x18>
 801d08c:	4629      	mov	r1, r5
 801d08e:	f000 f899 	bl	801d1c4 <_malloc_r>
 801d092:	4606      	mov	r6, r0
 801d094:	b928      	cbnz	r0, 801d0a2 <_calloc_r+0x1e>
 801d096:	2600      	movs	r6, #0
 801d098:	4630      	mov	r0, r6
 801d09a:	bd70      	pop	{r4, r5, r6, pc}
 801d09c:	220c      	movs	r2, #12
 801d09e:	6002      	str	r2, [r0, #0]
 801d0a0:	e7f9      	b.n	801d096 <_calloc_r+0x12>
 801d0a2:	462a      	mov	r2, r5
 801d0a4:	4621      	mov	r1, r4
 801d0a6:	f000 fcbd 	bl	801da24 <memset>
 801d0aa:	e7f5      	b.n	801d098 <_calloc_r+0x14>

0801d0ac <exit>:
 801d0ac:	b508      	push	{r3, lr}
 801d0ae:	4b06      	ldr	r3, [pc, #24]	@ (801d0c8 <exit+0x1c>)
 801d0b0:	4604      	mov	r4, r0
 801d0b2:	b113      	cbz	r3, 801d0ba <exit+0xe>
 801d0b4:	2100      	movs	r1, #0
 801d0b6:	f3af 8000 	nop.w
 801d0ba:	4b04      	ldr	r3, [pc, #16]	@ (801d0cc <exit+0x20>)
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	b103      	cbz	r3, 801d0c2 <exit+0x16>
 801d0c0:	4798      	blx	r3
 801d0c2:	4620      	mov	r0, r4
 801d0c4:	f7e4 fdda 	bl	8001c7c <_exit>
 801d0c8:	00000000 	.word	0x00000000
 801d0cc:	2406983c 	.word	0x2406983c

0801d0d0 <getenv>:
 801d0d0:	b507      	push	{r0, r1, r2, lr}
 801d0d2:	4b04      	ldr	r3, [pc, #16]	@ (801d0e4 <getenv+0x14>)
 801d0d4:	4601      	mov	r1, r0
 801d0d6:	aa01      	add	r2, sp, #4
 801d0d8:	6818      	ldr	r0, [r3, #0]
 801d0da:	f000 f805 	bl	801d0e8 <_findenv_r>
 801d0de:	b003      	add	sp, #12
 801d0e0:	f85d fb04 	ldr.w	pc, [sp], #4
 801d0e4:	24001210 	.word	0x24001210

0801d0e8 <_findenv_r>:
 801d0e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0ec:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801d15c <_findenv_r+0x74>
 801d0f0:	4606      	mov	r6, r0
 801d0f2:	4689      	mov	r9, r1
 801d0f4:	4617      	mov	r7, r2
 801d0f6:	f000 fde1 	bl	801dcbc <__env_lock>
 801d0fa:	f8da 4000 	ldr.w	r4, [sl]
 801d0fe:	b134      	cbz	r4, 801d10e <_findenv_r+0x26>
 801d100:	464b      	mov	r3, r9
 801d102:	4698      	mov	r8, r3
 801d104:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d108:	b13a      	cbz	r2, 801d11a <_findenv_r+0x32>
 801d10a:	2a3d      	cmp	r2, #61	@ 0x3d
 801d10c:	d1f9      	bne.n	801d102 <_findenv_r+0x1a>
 801d10e:	4630      	mov	r0, r6
 801d110:	f000 fdda 	bl	801dcc8 <__env_unlock>
 801d114:	2000      	movs	r0, #0
 801d116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d11a:	eba8 0809 	sub.w	r8, r8, r9
 801d11e:	46a3      	mov	fp, r4
 801d120:	f854 0b04 	ldr.w	r0, [r4], #4
 801d124:	2800      	cmp	r0, #0
 801d126:	d0f2      	beq.n	801d10e <_findenv_r+0x26>
 801d128:	4642      	mov	r2, r8
 801d12a:	4649      	mov	r1, r9
 801d12c:	f000 fc8f 	bl	801da4e <strncmp>
 801d130:	2800      	cmp	r0, #0
 801d132:	d1f4      	bne.n	801d11e <_findenv_r+0x36>
 801d134:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d138:	eb03 0508 	add.w	r5, r3, r8
 801d13c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d140:	2b3d      	cmp	r3, #61	@ 0x3d
 801d142:	d1ec      	bne.n	801d11e <_findenv_r+0x36>
 801d144:	f8da 3000 	ldr.w	r3, [sl]
 801d148:	ebab 0303 	sub.w	r3, fp, r3
 801d14c:	109b      	asrs	r3, r3, #2
 801d14e:	4630      	mov	r0, r6
 801d150:	603b      	str	r3, [r7, #0]
 801d152:	f000 fdb9 	bl	801dcc8 <__env_unlock>
 801d156:	1c68      	adds	r0, r5, #1
 801d158:	e7dd      	b.n	801d116 <_findenv_r+0x2e>
 801d15a:	bf00      	nop
 801d15c:	24000000 	.word	0x24000000

0801d160 <malloc>:
 801d160:	4b02      	ldr	r3, [pc, #8]	@ (801d16c <malloc+0xc>)
 801d162:	4601      	mov	r1, r0
 801d164:	6818      	ldr	r0, [r3, #0]
 801d166:	f000 b82d 	b.w	801d1c4 <_malloc_r>
 801d16a:	bf00      	nop
 801d16c:	24001210 	.word	0x24001210

0801d170 <free>:
 801d170:	4b02      	ldr	r3, [pc, #8]	@ (801d17c <free+0xc>)
 801d172:	4601      	mov	r1, r0
 801d174:	6818      	ldr	r0, [r3, #0]
 801d176:	f000 bdad 	b.w	801dcd4 <_free_r>
 801d17a:	bf00      	nop
 801d17c:	24001210 	.word	0x24001210

0801d180 <sbrk_aligned>:
 801d180:	b570      	push	{r4, r5, r6, lr}
 801d182:	4e0f      	ldr	r6, [pc, #60]	@ (801d1c0 <sbrk_aligned+0x40>)
 801d184:	460c      	mov	r4, r1
 801d186:	6831      	ldr	r1, [r6, #0]
 801d188:	4605      	mov	r5, r0
 801d18a:	b911      	cbnz	r1, 801d192 <sbrk_aligned+0x12>
 801d18c:	f000 fd12 	bl	801dbb4 <_sbrk_r>
 801d190:	6030      	str	r0, [r6, #0]
 801d192:	4621      	mov	r1, r4
 801d194:	4628      	mov	r0, r5
 801d196:	f000 fd0d 	bl	801dbb4 <_sbrk_r>
 801d19a:	1c43      	adds	r3, r0, #1
 801d19c:	d103      	bne.n	801d1a6 <sbrk_aligned+0x26>
 801d19e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801d1a2:	4620      	mov	r0, r4
 801d1a4:	bd70      	pop	{r4, r5, r6, pc}
 801d1a6:	1cc4      	adds	r4, r0, #3
 801d1a8:	f024 0403 	bic.w	r4, r4, #3
 801d1ac:	42a0      	cmp	r0, r4
 801d1ae:	d0f8      	beq.n	801d1a2 <sbrk_aligned+0x22>
 801d1b0:	1a21      	subs	r1, r4, r0
 801d1b2:	4628      	mov	r0, r5
 801d1b4:	f000 fcfe 	bl	801dbb4 <_sbrk_r>
 801d1b8:	3001      	adds	r0, #1
 801d1ba:	d1f2      	bne.n	801d1a2 <sbrk_aligned+0x22>
 801d1bc:	e7ef      	b.n	801d19e <sbrk_aligned+0x1e>
 801d1be:	bf00      	nop
 801d1c0:	240696fc 	.word	0x240696fc

0801d1c4 <_malloc_r>:
 801d1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1c8:	1ccd      	adds	r5, r1, #3
 801d1ca:	f025 0503 	bic.w	r5, r5, #3
 801d1ce:	3508      	adds	r5, #8
 801d1d0:	2d0c      	cmp	r5, #12
 801d1d2:	bf38      	it	cc
 801d1d4:	250c      	movcc	r5, #12
 801d1d6:	2d00      	cmp	r5, #0
 801d1d8:	4606      	mov	r6, r0
 801d1da:	db01      	blt.n	801d1e0 <_malloc_r+0x1c>
 801d1dc:	42a9      	cmp	r1, r5
 801d1de:	d904      	bls.n	801d1ea <_malloc_r+0x26>
 801d1e0:	230c      	movs	r3, #12
 801d1e2:	6033      	str	r3, [r6, #0]
 801d1e4:	2000      	movs	r0, #0
 801d1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d2c0 <_malloc_r+0xfc>
 801d1ee:	f000 f869 	bl	801d2c4 <__malloc_lock>
 801d1f2:	f8d8 3000 	ldr.w	r3, [r8]
 801d1f6:	461c      	mov	r4, r3
 801d1f8:	bb44      	cbnz	r4, 801d24c <_malloc_r+0x88>
 801d1fa:	4629      	mov	r1, r5
 801d1fc:	4630      	mov	r0, r6
 801d1fe:	f7ff ffbf 	bl	801d180 <sbrk_aligned>
 801d202:	1c43      	adds	r3, r0, #1
 801d204:	4604      	mov	r4, r0
 801d206:	d158      	bne.n	801d2ba <_malloc_r+0xf6>
 801d208:	f8d8 4000 	ldr.w	r4, [r8]
 801d20c:	4627      	mov	r7, r4
 801d20e:	2f00      	cmp	r7, #0
 801d210:	d143      	bne.n	801d29a <_malloc_r+0xd6>
 801d212:	2c00      	cmp	r4, #0
 801d214:	d04b      	beq.n	801d2ae <_malloc_r+0xea>
 801d216:	6823      	ldr	r3, [r4, #0]
 801d218:	4639      	mov	r1, r7
 801d21a:	4630      	mov	r0, r6
 801d21c:	eb04 0903 	add.w	r9, r4, r3
 801d220:	f000 fcc8 	bl	801dbb4 <_sbrk_r>
 801d224:	4581      	cmp	r9, r0
 801d226:	d142      	bne.n	801d2ae <_malloc_r+0xea>
 801d228:	6821      	ldr	r1, [r4, #0]
 801d22a:	1a6d      	subs	r5, r5, r1
 801d22c:	4629      	mov	r1, r5
 801d22e:	4630      	mov	r0, r6
 801d230:	f7ff ffa6 	bl	801d180 <sbrk_aligned>
 801d234:	3001      	adds	r0, #1
 801d236:	d03a      	beq.n	801d2ae <_malloc_r+0xea>
 801d238:	6823      	ldr	r3, [r4, #0]
 801d23a:	442b      	add	r3, r5
 801d23c:	6023      	str	r3, [r4, #0]
 801d23e:	f8d8 3000 	ldr.w	r3, [r8]
 801d242:	685a      	ldr	r2, [r3, #4]
 801d244:	bb62      	cbnz	r2, 801d2a0 <_malloc_r+0xdc>
 801d246:	f8c8 7000 	str.w	r7, [r8]
 801d24a:	e00f      	b.n	801d26c <_malloc_r+0xa8>
 801d24c:	6822      	ldr	r2, [r4, #0]
 801d24e:	1b52      	subs	r2, r2, r5
 801d250:	d420      	bmi.n	801d294 <_malloc_r+0xd0>
 801d252:	2a0b      	cmp	r2, #11
 801d254:	d917      	bls.n	801d286 <_malloc_r+0xc2>
 801d256:	1961      	adds	r1, r4, r5
 801d258:	42a3      	cmp	r3, r4
 801d25a:	6025      	str	r5, [r4, #0]
 801d25c:	bf18      	it	ne
 801d25e:	6059      	strne	r1, [r3, #4]
 801d260:	6863      	ldr	r3, [r4, #4]
 801d262:	bf08      	it	eq
 801d264:	f8c8 1000 	streq.w	r1, [r8]
 801d268:	5162      	str	r2, [r4, r5]
 801d26a:	604b      	str	r3, [r1, #4]
 801d26c:	4630      	mov	r0, r6
 801d26e:	f000 f82f 	bl	801d2d0 <__malloc_unlock>
 801d272:	f104 000b 	add.w	r0, r4, #11
 801d276:	1d23      	adds	r3, r4, #4
 801d278:	f020 0007 	bic.w	r0, r0, #7
 801d27c:	1ac2      	subs	r2, r0, r3
 801d27e:	bf1c      	itt	ne
 801d280:	1a1b      	subne	r3, r3, r0
 801d282:	50a3      	strne	r3, [r4, r2]
 801d284:	e7af      	b.n	801d1e6 <_malloc_r+0x22>
 801d286:	6862      	ldr	r2, [r4, #4]
 801d288:	42a3      	cmp	r3, r4
 801d28a:	bf0c      	ite	eq
 801d28c:	f8c8 2000 	streq.w	r2, [r8]
 801d290:	605a      	strne	r2, [r3, #4]
 801d292:	e7eb      	b.n	801d26c <_malloc_r+0xa8>
 801d294:	4623      	mov	r3, r4
 801d296:	6864      	ldr	r4, [r4, #4]
 801d298:	e7ae      	b.n	801d1f8 <_malloc_r+0x34>
 801d29a:	463c      	mov	r4, r7
 801d29c:	687f      	ldr	r7, [r7, #4]
 801d29e:	e7b6      	b.n	801d20e <_malloc_r+0x4a>
 801d2a0:	461a      	mov	r2, r3
 801d2a2:	685b      	ldr	r3, [r3, #4]
 801d2a4:	42a3      	cmp	r3, r4
 801d2a6:	d1fb      	bne.n	801d2a0 <_malloc_r+0xdc>
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	6053      	str	r3, [r2, #4]
 801d2ac:	e7de      	b.n	801d26c <_malloc_r+0xa8>
 801d2ae:	230c      	movs	r3, #12
 801d2b0:	6033      	str	r3, [r6, #0]
 801d2b2:	4630      	mov	r0, r6
 801d2b4:	f000 f80c 	bl	801d2d0 <__malloc_unlock>
 801d2b8:	e794      	b.n	801d1e4 <_malloc_r+0x20>
 801d2ba:	6005      	str	r5, [r0, #0]
 801d2bc:	e7d6      	b.n	801d26c <_malloc_r+0xa8>
 801d2be:	bf00      	nop
 801d2c0:	24069700 	.word	0x24069700

0801d2c4 <__malloc_lock>:
 801d2c4:	4801      	ldr	r0, [pc, #4]	@ (801d2cc <__malloc_lock+0x8>)
 801d2c6:	f000 bcc2 	b.w	801dc4e <__retarget_lock_acquire_recursive>
 801d2ca:	bf00      	nop
 801d2cc:	24069845 	.word	0x24069845

0801d2d0 <__malloc_unlock>:
 801d2d0:	4801      	ldr	r0, [pc, #4]	@ (801d2d8 <__malloc_unlock+0x8>)
 801d2d2:	f000 bcbd 	b.w	801dc50 <__retarget_lock_release_recursive>
 801d2d6:	bf00      	nop
 801d2d8:	24069845 	.word	0x24069845

0801d2dc <srand>:
 801d2dc:	b538      	push	{r3, r4, r5, lr}
 801d2de:	4b10      	ldr	r3, [pc, #64]	@ (801d320 <srand+0x44>)
 801d2e0:	681d      	ldr	r5, [r3, #0]
 801d2e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d2e4:	4604      	mov	r4, r0
 801d2e6:	b9b3      	cbnz	r3, 801d316 <srand+0x3a>
 801d2e8:	2018      	movs	r0, #24
 801d2ea:	f7ff ff39 	bl	801d160 <malloc>
 801d2ee:	4602      	mov	r2, r0
 801d2f0:	6328      	str	r0, [r5, #48]	@ 0x30
 801d2f2:	b920      	cbnz	r0, 801d2fe <srand+0x22>
 801d2f4:	4b0b      	ldr	r3, [pc, #44]	@ (801d324 <srand+0x48>)
 801d2f6:	480c      	ldr	r0, [pc, #48]	@ (801d328 <srand+0x4c>)
 801d2f8:	2146      	movs	r1, #70	@ 0x46
 801d2fa:	f000 fcc1 	bl	801dc80 <__assert_func>
 801d2fe:	490b      	ldr	r1, [pc, #44]	@ (801d32c <srand+0x50>)
 801d300:	4b0b      	ldr	r3, [pc, #44]	@ (801d330 <srand+0x54>)
 801d302:	e9c0 1300 	strd	r1, r3, [r0]
 801d306:	4b0b      	ldr	r3, [pc, #44]	@ (801d334 <srand+0x58>)
 801d308:	6083      	str	r3, [r0, #8]
 801d30a:	230b      	movs	r3, #11
 801d30c:	8183      	strh	r3, [r0, #12]
 801d30e:	2100      	movs	r1, #0
 801d310:	2001      	movs	r0, #1
 801d312:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d316:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d318:	2200      	movs	r2, #0
 801d31a:	611c      	str	r4, [r3, #16]
 801d31c:	615a      	str	r2, [r3, #20]
 801d31e:	bd38      	pop	{r3, r4, r5, pc}
 801d320:	24001210 	.word	0x24001210
 801d324:	08020b3e 	.word	0x08020b3e
 801d328:	08020b55 	.word	0x08020b55
 801d32c:	abcd330e 	.word	0xabcd330e
 801d330:	e66d1234 	.word	0xe66d1234
 801d334:	0005deec 	.word	0x0005deec

0801d338 <rand>:
 801d338:	4b16      	ldr	r3, [pc, #88]	@ (801d394 <rand+0x5c>)
 801d33a:	b510      	push	{r4, lr}
 801d33c:	681c      	ldr	r4, [r3, #0]
 801d33e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d340:	b9b3      	cbnz	r3, 801d370 <rand+0x38>
 801d342:	2018      	movs	r0, #24
 801d344:	f7ff ff0c 	bl	801d160 <malloc>
 801d348:	4602      	mov	r2, r0
 801d34a:	6320      	str	r0, [r4, #48]	@ 0x30
 801d34c:	b920      	cbnz	r0, 801d358 <rand+0x20>
 801d34e:	4b12      	ldr	r3, [pc, #72]	@ (801d398 <rand+0x60>)
 801d350:	4812      	ldr	r0, [pc, #72]	@ (801d39c <rand+0x64>)
 801d352:	2152      	movs	r1, #82	@ 0x52
 801d354:	f000 fc94 	bl	801dc80 <__assert_func>
 801d358:	4911      	ldr	r1, [pc, #68]	@ (801d3a0 <rand+0x68>)
 801d35a:	4b12      	ldr	r3, [pc, #72]	@ (801d3a4 <rand+0x6c>)
 801d35c:	e9c0 1300 	strd	r1, r3, [r0]
 801d360:	4b11      	ldr	r3, [pc, #68]	@ (801d3a8 <rand+0x70>)
 801d362:	6083      	str	r3, [r0, #8]
 801d364:	230b      	movs	r3, #11
 801d366:	8183      	strh	r3, [r0, #12]
 801d368:	2100      	movs	r1, #0
 801d36a:	2001      	movs	r0, #1
 801d36c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d370:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d372:	480e      	ldr	r0, [pc, #56]	@ (801d3ac <rand+0x74>)
 801d374:	690b      	ldr	r3, [r1, #16]
 801d376:	694c      	ldr	r4, [r1, #20]
 801d378:	4a0d      	ldr	r2, [pc, #52]	@ (801d3b0 <rand+0x78>)
 801d37a:	4358      	muls	r0, r3
 801d37c:	fb02 0004 	mla	r0, r2, r4, r0
 801d380:	fba3 3202 	umull	r3, r2, r3, r2
 801d384:	3301      	adds	r3, #1
 801d386:	eb40 0002 	adc.w	r0, r0, r2
 801d38a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d38e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d392:	bd10      	pop	{r4, pc}
 801d394:	24001210 	.word	0x24001210
 801d398:	08020b3e 	.word	0x08020b3e
 801d39c:	08020b55 	.word	0x08020b55
 801d3a0:	abcd330e 	.word	0xabcd330e
 801d3a4:	e66d1234 	.word	0xe66d1234
 801d3a8:	0005deec 	.word	0x0005deec
 801d3ac:	5851f42d 	.word	0x5851f42d
 801d3b0:	4c957f2d 	.word	0x4c957f2d

0801d3b4 <realloc>:
 801d3b4:	4b02      	ldr	r3, [pc, #8]	@ (801d3c0 <realloc+0xc>)
 801d3b6:	460a      	mov	r2, r1
 801d3b8:	4601      	mov	r1, r0
 801d3ba:	6818      	ldr	r0, [r3, #0]
 801d3bc:	f000 b802 	b.w	801d3c4 <_realloc_r>
 801d3c0:	24001210 	.word	0x24001210

0801d3c4 <_realloc_r>:
 801d3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3c8:	4680      	mov	r8, r0
 801d3ca:	4615      	mov	r5, r2
 801d3cc:	460c      	mov	r4, r1
 801d3ce:	b921      	cbnz	r1, 801d3da <_realloc_r+0x16>
 801d3d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d3d4:	4611      	mov	r1, r2
 801d3d6:	f7ff bef5 	b.w	801d1c4 <_malloc_r>
 801d3da:	b92a      	cbnz	r2, 801d3e8 <_realloc_r+0x24>
 801d3dc:	f000 fc7a 	bl	801dcd4 <_free_r>
 801d3e0:	2400      	movs	r4, #0
 801d3e2:	4620      	mov	r0, r4
 801d3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3e8:	f000 fcbe 	bl	801dd68 <_malloc_usable_size_r>
 801d3ec:	4285      	cmp	r5, r0
 801d3ee:	4606      	mov	r6, r0
 801d3f0:	d802      	bhi.n	801d3f8 <_realloc_r+0x34>
 801d3f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d3f6:	d8f4      	bhi.n	801d3e2 <_realloc_r+0x1e>
 801d3f8:	4629      	mov	r1, r5
 801d3fa:	4640      	mov	r0, r8
 801d3fc:	f7ff fee2 	bl	801d1c4 <_malloc_r>
 801d400:	4607      	mov	r7, r0
 801d402:	2800      	cmp	r0, #0
 801d404:	d0ec      	beq.n	801d3e0 <_realloc_r+0x1c>
 801d406:	42b5      	cmp	r5, r6
 801d408:	462a      	mov	r2, r5
 801d40a:	4621      	mov	r1, r4
 801d40c:	bf28      	it	cs
 801d40e:	4632      	movcs	r2, r6
 801d410:	f000 fc27 	bl	801dc62 <memcpy>
 801d414:	4621      	mov	r1, r4
 801d416:	4640      	mov	r0, r8
 801d418:	f000 fc5c 	bl	801dcd4 <_free_r>
 801d41c:	463c      	mov	r4, r7
 801d41e:	e7e0      	b.n	801d3e2 <_realloc_r+0x1e>

0801d420 <_strtoul_l.constprop.0>:
 801d420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d424:	4e34      	ldr	r6, [pc, #208]	@ (801d4f8 <_strtoul_l.constprop.0+0xd8>)
 801d426:	4686      	mov	lr, r0
 801d428:	460d      	mov	r5, r1
 801d42a:	4628      	mov	r0, r5
 801d42c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d430:	5d37      	ldrb	r7, [r6, r4]
 801d432:	f017 0708 	ands.w	r7, r7, #8
 801d436:	d1f8      	bne.n	801d42a <_strtoul_l.constprop.0+0xa>
 801d438:	2c2d      	cmp	r4, #45	@ 0x2d
 801d43a:	d12f      	bne.n	801d49c <_strtoul_l.constprop.0+0x7c>
 801d43c:	782c      	ldrb	r4, [r5, #0]
 801d43e:	2701      	movs	r7, #1
 801d440:	1c85      	adds	r5, r0, #2
 801d442:	f033 0010 	bics.w	r0, r3, #16
 801d446:	d109      	bne.n	801d45c <_strtoul_l.constprop.0+0x3c>
 801d448:	2c30      	cmp	r4, #48	@ 0x30
 801d44a:	d12c      	bne.n	801d4a6 <_strtoul_l.constprop.0+0x86>
 801d44c:	7828      	ldrb	r0, [r5, #0]
 801d44e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801d452:	2858      	cmp	r0, #88	@ 0x58
 801d454:	d127      	bne.n	801d4a6 <_strtoul_l.constprop.0+0x86>
 801d456:	786c      	ldrb	r4, [r5, #1]
 801d458:	2310      	movs	r3, #16
 801d45a:	3502      	adds	r5, #2
 801d45c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d460:	2600      	movs	r6, #0
 801d462:	fbb8 f8f3 	udiv	r8, r8, r3
 801d466:	fb03 f908 	mul.w	r9, r3, r8
 801d46a:	ea6f 0909 	mvn.w	r9, r9
 801d46e:	4630      	mov	r0, r6
 801d470:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801d474:	f1bc 0f09 	cmp.w	ip, #9
 801d478:	d81c      	bhi.n	801d4b4 <_strtoul_l.constprop.0+0x94>
 801d47a:	4664      	mov	r4, ip
 801d47c:	42a3      	cmp	r3, r4
 801d47e:	dd2a      	ble.n	801d4d6 <_strtoul_l.constprop.0+0xb6>
 801d480:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801d484:	d007      	beq.n	801d496 <_strtoul_l.constprop.0+0x76>
 801d486:	4580      	cmp	r8, r0
 801d488:	d322      	bcc.n	801d4d0 <_strtoul_l.constprop.0+0xb0>
 801d48a:	d101      	bne.n	801d490 <_strtoul_l.constprop.0+0x70>
 801d48c:	45a1      	cmp	r9, r4
 801d48e:	db1f      	blt.n	801d4d0 <_strtoul_l.constprop.0+0xb0>
 801d490:	fb00 4003 	mla	r0, r0, r3, r4
 801d494:	2601      	movs	r6, #1
 801d496:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d49a:	e7e9      	b.n	801d470 <_strtoul_l.constprop.0+0x50>
 801d49c:	2c2b      	cmp	r4, #43	@ 0x2b
 801d49e:	bf04      	itt	eq
 801d4a0:	782c      	ldrbeq	r4, [r5, #0]
 801d4a2:	1c85      	addeq	r5, r0, #2
 801d4a4:	e7cd      	b.n	801d442 <_strtoul_l.constprop.0+0x22>
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d1d8      	bne.n	801d45c <_strtoul_l.constprop.0+0x3c>
 801d4aa:	2c30      	cmp	r4, #48	@ 0x30
 801d4ac:	bf0c      	ite	eq
 801d4ae:	2308      	moveq	r3, #8
 801d4b0:	230a      	movne	r3, #10
 801d4b2:	e7d3      	b.n	801d45c <_strtoul_l.constprop.0+0x3c>
 801d4b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801d4b8:	f1bc 0f19 	cmp.w	ip, #25
 801d4bc:	d801      	bhi.n	801d4c2 <_strtoul_l.constprop.0+0xa2>
 801d4be:	3c37      	subs	r4, #55	@ 0x37
 801d4c0:	e7dc      	b.n	801d47c <_strtoul_l.constprop.0+0x5c>
 801d4c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801d4c6:	f1bc 0f19 	cmp.w	ip, #25
 801d4ca:	d804      	bhi.n	801d4d6 <_strtoul_l.constprop.0+0xb6>
 801d4cc:	3c57      	subs	r4, #87	@ 0x57
 801d4ce:	e7d5      	b.n	801d47c <_strtoul_l.constprop.0+0x5c>
 801d4d0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801d4d4:	e7df      	b.n	801d496 <_strtoul_l.constprop.0+0x76>
 801d4d6:	1c73      	adds	r3, r6, #1
 801d4d8:	d106      	bne.n	801d4e8 <_strtoul_l.constprop.0+0xc8>
 801d4da:	2322      	movs	r3, #34	@ 0x22
 801d4dc:	f8ce 3000 	str.w	r3, [lr]
 801d4e0:	4630      	mov	r0, r6
 801d4e2:	b932      	cbnz	r2, 801d4f2 <_strtoul_l.constprop.0+0xd2>
 801d4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d4e8:	b107      	cbz	r7, 801d4ec <_strtoul_l.constprop.0+0xcc>
 801d4ea:	4240      	negs	r0, r0
 801d4ec:	2a00      	cmp	r2, #0
 801d4ee:	d0f9      	beq.n	801d4e4 <_strtoul_l.constprop.0+0xc4>
 801d4f0:	b106      	cbz	r6, 801d4f4 <_strtoul_l.constprop.0+0xd4>
 801d4f2:	1e69      	subs	r1, r5, #1
 801d4f4:	6011      	str	r1, [r2, #0]
 801d4f6:	e7f5      	b.n	801d4e4 <_strtoul_l.constprop.0+0xc4>
 801d4f8:	08020bae 	.word	0x08020bae

0801d4fc <strtoul>:
 801d4fc:	4613      	mov	r3, r2
 801d4fe:	460a      	mov	r2, r1
 801d500:	4601      	mov	r1, r0
 801d502:	4802      	ldr	r0, [pc, #8]	@ (801d50c <strtoul+0x10>)
 801d504:	6800      	ldr	r0, [r0, #0]
 801d506:	f7ff bf8b 	b.w	801d420 <_strtoul_l.constprop.0>
 801d50a:	bf00      	nop
 801d50c:	24001210 	.word	0x24001210

0801d510 <std>:
 801d510:	2300      	movs	r3, #0
 801d512:	b510      	push	{r4, lr}
 801d514:	4604      	mov	r4, r0
 801d516:	e9c0 3300 	strd	r3, r3, [r0]
 801d51a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d51e:	6083      	str	r3, [r0, #8]
 801d520:	8181      	strh	r1, [r0, #12]
 801d522:	6643      	str	r3, [r0, #100]	@ 0x64
 801d524:	81c2      	strh	r2, [r0, #14]
 801d526:	6183      	str	r3, [r0, #24]
 801d528:	4619      	mov	r1, r3
 801d52a:	2208      	movs	r2, #8
 801d52c:	305c      	adds	r0, #92	@ 0x5c
 801d52e:	f000 fa79 	bl	801da24 <memset>
 801d532:	4b0d      	ldr	r3, [pc, #52]	@ (801d568 <std+0x58>)
 801d534:	6263      	str	r3, [r4, #36]	@ 0x24
 801d536:	4b0d      	ldr	r3, [pc, #52]	@ (801d56c <std+0x5c>)
 801d538:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d53a:	4b0d      	ldr	r3, [pc, #52]	@ (801d570 <std+0x60>)
 801d53c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d53e:	4b0d      	ldr	r3, [pc, #52]	@ (801d574 <std+0x64>)
 801d540:	6323      	str	r3, [r4, #48]	@ 0x30
 801d542:	4b0d      	ldr	r3, [pc, #52]	@ (801d578 <std+0x68>)
 801d544:	6224      	str	r4, [r4, #32]
 801d546:	429c      	cmp	r4, r3
 801d548:	d006      	beq.n	801d558 <std+0x48>
 801d54a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d54e:	4294      	cmp	r4, r2
 801d550:	d002      	beq.n	801d558 <std+0x48>
 801d552:	33d0      	adds	r3, #208	@ 0xd0
 801d554:	429c      	cmp	r4, r3
 801d556:	d105      	bne.n	801d564 <std+0x54>
 801d558:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d560:	f000 bb74 	b.w	801dc4c <__retarget_lock_init_recursive>
 801d564:	bd10      	pop	{r4, pc}
 801d566:	bf00      	nop
 801d568:	0801d7b1 	.word	0x0801d7b1
 801d56c:	0801d7d3 	.word	0x0801d7d3
 801d570:	0801d80b 	.word	0x0801d80b
 801d574:	0801d82f 	.word	0x0801d82f
 801d578:	24069704 	.word	0x24069704

0801d57c <stdio_exit_handler>:
 801d57c:	4a02      	ldr	r2, [pc, #8]	@ (801d588 <stdio_exit_handler+0xc>)
 801d57e:	4903      	ldr	r1, [pc, #12]	@ (801d58c <stdio_exit_handler+0x10>)
 801d580:	4803      	ldr	r0, [pc, #12]	@ (801d590 <stdio_exit_handler+0x14>)
 801d582:	f000 b869 	b.w	801d658 <_fwalk_sglue>
 801d586:	bf00      	nop
 801d588:	24001204 	.word	0x24001204
 801d58c:	0801e44d 	.word	0x0801e44d
 801d590:	24001214 	.word	0x24001214

0801d594 <cleanup_stdio>:
 801d594:	6841      	ldr	r1, [r0, #4]
 801d596:	4b0c      	ldr	r3, [pc, #48]	@ (801d5c8 <cleanup_stdio+0x34>)
 801d598:	4299      	cmp	r1, r3
 801d59a:	b510      	push	{r4, lr}
 801d59c:	4604      	mov	r4, r0
 801d59e:	d001      	beq.n	801d5a4 <cleanup_stdio+0x10>
 801d5a0:	f000 ff54 	bl	801e44c <_fflush_r>
 801d5a4:	68a1      	ldr	r1, [r4, #8]
 801d5a6:	4b09      	ldr	r3, [pc, #36]	@ (801d5cc <cleanup_stdio+0x38>)
 801d5a8:	4299      	cmp	r1, r3
 801d5aa:	d002      	beq.n	801d5b2 <cleanup_stdio+0x1e>
 801d5ac:	4620      	mov	r0, r4
 801d5ae:	f000 ff4d 	bl	801e44c <_fflush_r>
 801d5b2:	68e1      	ldr	r1, [r4, #12]
 801d5b4:	4b06      	ldr	r3, [pc, #24]	@ (801d5d0 <cleanup_stdio+0x3c>)
 801d5b6:	4299      	cmp	r1, r3
 801d5b8:	d004      	beq.n	801d5c4 <cleanup_stdio+0x30>
 801d5ba:	4620      	mov	r0, r4
 801d5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d5c0:	f000 bf44 	b.w	801e44c <_fflush_r>
 801d5c4:	bd10      	pop	{r4, pc}
 801d5c6:	bf00      	nop
 801d5c8:	24069704 	.word	0x24069704
 801d5cc:	2406976c 	.word	0x2406976c
 801d5d0:	240697d4 	.word	0x240697d4

0801d5d4 <global_stdio_init.part.0>:
 801d5d4:	b510      	push	{r4, lr}
 801d5d6:	4b0b      	ldr	r3, [pc, #44]	@ (801d604 <global_stdio_init.part.0+0x30>)
 801d5d8:	4c0b      	ldr	r4, [pc, #44]	@ (801d608 <global_stdio_init.part.0+0x34>)
 801d5da:	4a0c      	ldr	r2, [pc, #48]	@ (801d60c <global_stdio_init.part.0+0x38>)
 801d5dc:	601a      	str	r2, [r3, #0]
 801d5de:	4620      	mov	r0, r4
 801d5e0:	2200      	movs	r2, #0
 801d5e2:	2104      	movs	r1, #4
 801d5e4:	f7ff ff94 	bl	801d510 <std>
 801d5e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d5ec:	2201      	movs	r2, #1
 801d5ee:	2109      	movs	r1, #9
 801d5f0:	f7ff ff8e 	bl	801d510 <std>
 801d5f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d5f8:	2202      	movs	r2, #2
 801d5fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d5fe:	2112      	movs	r1, #18
 801d600:	f7ff bf86 	b.w	801d510 <std>
 801d604:	2406983c 	.word	0x2406983c
 801d608:	24069704 	.word	0x24069704
 801d60c:	0801d57d 	.word	0x0801d57d

0801d610 <__sfp_lock_acquire>:
 801d610:	4801      	ldr	r0, [pc, #4]	@ (801d618 <__sfp_lock_acquire+0x8>)
 801d612:	f000 bb1c 	b.w	801dc4e <__retarget_lock_acquire_recursive>
 801d616:	bf00      	nop
 801d618:	24069846 	.word	0x24069846

0801d61c <__sfp_lock_release>:
 801d61c:	4801      	ldr	r0, [pc, #4]	@ (801d624 <__sfp_lock_release+0x8>)
 801d61e:	f000 bb17 	b.w	801dc50 <__retarget_lock_release_recursive>
 801d622:	bf00      	nop
 801d624:	24069846 	.word	0x24069846

0801d628 <__sinit>:
 801d628:	b510      	push	{r4, lr}
 801d62a:	4604      	mov	r4, r0
 801d62c:	f7ff fff0 	bl	801d610 <__sfp_lock_acquire>
 801d630:	6a23      	ldr	r3, [r4, #32]
 801d632:	b11b      	cbz	r3, 801d63c <__sinit+0x14>
 801d634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d638:	f7ff bff0 	b.w	801d61c <__sfp_lock_release>
 801d63c:	4b04      	ldr	r3, [pc, #16]	@ (801d650 <__sinit+0x28>)
 801d63e:	6223      	str	r3, [r4, #32]
 801d640:	4b04      	ldr	r3, [pc, #16]	@ (801d654 <__sinit+0x2c>)
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	2b00      	cmp	r3, #0
 801d646:	d1f5      	bne.n	801d634 <__sinit+0xc>
 801d648:	f7ff ffc4 	bl	801d5d4 <global_stdio_init.part.0>
 801d64c:	e7f2      	b.n	801d634 <__sinit+0xc>
 801d64e:	bf00      	nop
 801d650:	0801d595 	.word	0x0801d595
 801d654:	2406983c 	.word	0x2406983c

0801d658 <_fwalk_sglue>:
 801d658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d65c:	4607      	mov	r7, r0
 801d65e:	4688      	mov	r8, r1
 801d660:	4614      	mov	r4, r2
 801d662:	2600      	movs	r6, #0
 801d664:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d668:	f1b9 0901 	subs.w	r9, r9, #1
 801d66c:	d505      	bpl.n	801d67a <_fwalk_sglue+0x22>
 801d66e:	6824      	ldr	r4, [r4, #0]
 801d670:	2c00      	cmp	r4, #0
 801d672:	d1f7      	bne.n	801d664 <_fwalk_sglue+0xc>
 801d674:	4630      	mov	r0, r6
 801d676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d67a:	89ab      	ldrh	r3, [r5, #12]
 801d67c:	2b01      	cmp	r3, #1
 801d67e:	d907      	bls.n	801d690 <_fwalk_sglue+0x38>
 801d680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d684:	3301      	adds	r3, #1
 801d686:	d003      	beq.n	801d690 <_fwalk_sglue+0x38>
 801d688:	4629      	mov	r1, r5
 801d68a:	4638      	mov	r0, r7
 801d68c:	47c0      	blx	r8
 801d68e:	4306      	orrs	r6, r0
 801d690:	3568      	adds	r5, #104	@ 0x68
 801d692:	e7e9      	b.n	801d668 <_fwalk_sglue+0x10>

0801d694 <_fwrite_r>:
 801d694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d698:	9c08      	ldr	r4, [sp, #32]
 801d69a:	468a      	mov	sl, r1
 801d69c:	4690      	mov	r8, r2
 801d69e:	fb02 f903 	mul.w	r9, r2, r3
 801d6a2:	4606      	mov	r6, r0
 801d6a4:	b118      	cbz	r0, 801d6ae <_fwrite_r+0x1a>
 801d6a6:	6a03      	ldr	r3, [r0, #32]
 801d6a8:	b90b      	cbnz	r3, 801d6ae <_fwrite_r+0x1a>
 801d6aa:	f7ff ffbd 	bl	801d628 <__sinit>
 801d6ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d6b0:	07dd      	lsls	r5, r3, #31
 801d6b2:	d405      	bmi.n	801d6c0 <_fwrite_r+0x2c>
 801d6b4:	89a3      	ldrh	r3, [r4, #12]
 801d6b6:	0598      	lsls	r0, r3, #22
 801d6b8:	d402      	bmi.n	801d6c0 <_fwrite_r+0x2c>
 801d6ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d6bc:	f000 fac7 	bl	801dc4e <__retarget_lock_acquire_recursive>
 801d6c0:	89a3      	ldrh	r3, [r4, #12]
 801d6c2:	0719      	lsls	r1, r3, #28
 801d6c4:	d516      	bpl.n	801d6f4 <_fwrite_r+0x60>
 801d6c6:	6923      	ldr	r3, [r4, #16]
 801d6c8:	b1a3      	cbz	r3, 801d6f4 <_fwrite_r+0x60>
 801d6ca:	2500      	movs	r5, #0
 801d6cc:	454d      	cmp	r5, r9
 801d6ce:	d01f      	beq.n	801d710 <_fwrite_r+0x7c>
 801d6d0:	68a7      	ldr	r7, [r4, #8]
 801d6d2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801d6d6:	3f01      	subs	r7, #1
 801d6d8:	2f00      	cmp	r7, #0
 801d6da:	60a7      	str	r7, [r4, #8]
 801d6dc:	da04      	bge.n	801d6e8 <_fwrite_r+0x54>
 801d6de:	69a3      	ldr	r3, [r4, #24]
 801d6e0:	429f      	cmp	r7, r3
 801d6e2:	db0f      	blt.n	801d704 <_fwrite_r+0x70>
 801d6e4:	290a      	cmp	r1, #10
 801d6e6:	d00d      	beq.n	801d704 <_fwrite_r+0x70>
 801d6e8:	6823      	ldr	r3, [r4, #0]
 801d6ea:	1c5a      	adds	r2, r3, #1
 801d6ec:	6022      	str	r2, [r4, #0]
 801d6ee:	7019      	strb	r1, [r3, #0]
 801d6f0:	3501      	adds	r5, #1
 801d6f2:	e7eb      	b.n	801d6cc <_fwrite_r+0x38>
 801d6f4:	4621      	mov	r1, r4
 801d6f6:	4630      	mov	r0, r6
 801d6f8:	f000 f914 	bl	801d924 <__swsetup_r>
 801d6fc:	2800      	cmp	r0, #0
 801d6fe:	d0e4      	beq.n	801d6ca <_fwrite_r+0x36>
 801d700:	2500      	movs	r5, #0
 801d702:	e005      	b.n	801d710 <_fwrite_r+0x7c>
 801d704:	4622      	mov	r2, r4
 801d706:	4630      	mov	r0, r6
 801d708:	f000 f8ce 	bl	801d8a8 <__swbuf_r>
 801d70c:	3001      	adds	r0, #1
 801d70e:	d1ef      	bne.n	801d6f0 <_fwrite_r+0x5c>
 801d710:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d712:	07da      	lsls	r2, r3, #31
 801d714:	d405      	bmi.n	801d722 <_fwrite_r+0x8e>
 801d716:	89a3      	ldrh	r3, [r4, #12]
 801d718:	059b      	lsls	r3, r3, #22
 801d71a:	d402      	bmi.n	801d722 <_fwrite_r+0x8e>
 801d71c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d71e:	f000 fa97 	bl	801dc50 <__retarget_lock_release_recursive>
 801d722:	fbb5 f0f8 	udiv	r0, r5, r8
 801d726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d72c <fwrite>:
 801d72c:	b507      	push	{r0, r1, r2, lr}
 801d72e:	9300      	str	r3, [sp, #0]
 801d730:	4613      	mov	r3, r2
 801d732:	460a      	mov	r2, r1
 801d734:	4601      	mov	r1, r0
 801d736:	4803      	ldr	r0, [pc, #12]	@ (801d744 <fwrite+0x18>)
 801d738:	6800      	ldr	r0, [r0, #0]
 801d73a:	f7ff ffab 	bl	801d694 <_fwrite_r>
 801d73e:	b003      	add	sp, #12
 801d740:	f85d fb04 	ldr.w	pc, [sp], #4
 801d744:	24001210 	.word	0x24001210

0801d748 <sniprintf>:
 801d748:	b40c      	push	{r2, r3}
 801d74a:	b530      	push	{r4, r5, lr}
 801d74c:	4b17      	ldr	r3, [pc, #92]	@ (801d7ac <sniprintf+0x64>)
 801d74e:	1e0c      	subs	r4, r1, #0
 801d750:	681d      	ldr	r5, [r3, #0]
 801d752:	b09d      	sub	sp, #116	@ 0x74
 801d754:	da08      	bge.n	801d768 <sniprintf+0x20>
 801d756:	238b      	movs	r3, #139	@ 0x8b
 801d758:	602b      	str	r3, [r5, #0]
 801d75a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d75e:	b01d      	add	sp, #116	@ 0x74
 801d760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d764:	b002      	add	sp, #8
 801d766:	4770      	bx	lr
 801d768:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d76c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d770:	bf14      	ite	ne
 801d772:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d776:	4623      	moveq	r3, r4
 801d778:	9304      	str	r3, [sp, #16]
 801d77a:	9307      	str	r3, [sp, #28]
 801d77c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d780:	9002      	str	r0, [sp, #8]
 801d782:	9006      	str	r0, [sp, #24]
 801d784:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d788:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d78a:	ab21      	add	r3, sp, #132	@ 0x84
 801d78c:	a902      	add	r1, sp, #8
 801d78e:	4628      	mov	r0, r5
 801d790:	9301      	str	r3, [sp, #4]
 801d792:	f000 fb4d 	bl	801de30 <_svfiprintf_r>
 801d796:	1c43      	adds	r3, r0, #1
 801d798:	bfbc      	itt	lt
 801d79a:	238b      	movlt	r3, #139	@ 0x8b
 801d79c:	602b      	strlt	r3, [r5, #0]
 801d79e:	2c00      	cmp	r4, #0
 801d7a0:	d0dd      	beq.n	801d75e <sniprintf+0x16>
 801d7a2:	9b02      	ldr	r3, [sp, #8]
 801d7a4:	2200      	movs	r2, #0
 801d7a6:	701a      	strb	r2, [r3, #0]
 801d7a8:	e7d9      	b.n	801d75e <sniprintf+0x16>
 801d7aa:	bf00      	nop
 801d7ac:	24001210 	.word	0x24001210

0801d7b0 <__sread>:
 801d7b0:	b510      	push	{r4, lr}
 801d7b2:	460c      	mov	r4, r1
 801d7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7b8:	f000 f9ea 	bl	801db90 <_read_r>
 801d7bc:	2800      	cmp	r0, #0
 801d7be:	bfab      	itete	ge
 801d7c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d7c2:	89a3      	ldrhlt	r3, [r4, #12]
 801d7c4:	181b      	addge	r3, r3, r0
 801d7c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d7ca:	bfac      	ite	ge
 801d7cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d7ce:	81a3      	strhlt	r3, [r4, #12]
 801d7d0:	bd10      	pop	{r4, pc}

0801d7d2 <__swrite>:
 801d7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7d6:	461f      	mov	r7, r3
 801d7d8:	898b      	ldrh	r3, [r1, #12]
 801d7da:	05db      	lsls	r3, r3, #23
 801d7dc:	4605      	mov	r5, r0
 801d7de:	460c      	mov	r4, r1
 801d7e0:	4616      	mov	r6, r2
 801d7e2:	d505      	bpl.n	801d7f0 <__swrite+0x1e>
 801d7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7e8:	2302      	movs	r3, #2
 801d7ea:	2200      	movs	r2, #0
 801d7ec:	f000 f9be 	bl	801db6c <_lseek_r>
 801d7f0:	89a3      	ldrh	r3, [r4, #12]
 801d7f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d7f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d7fa:	81a3      	strh	r3, [r4, #12]
 801d7fc:	4632      	mov	r2, r6
 801d7fe:	463b      	mov	r3, r7
 801d800:	4628      	mov	r0, r5
 801d802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d806:	f000 b9e5 	b.w	801dbd4 <_write_r>

0801d80a <__sseek>:
 801d80a:	b510      	push	{r4, lr}
 801d80c:	460c      	mov	r4, r1
 801d80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d812:	f000 f9ab 	bl	801db6c <_lseek_r>
 801d816:	1c43      	adds	r3, r0, #1
 801d818:	89a3      	ldrh	r3, [r4, #12]
 801d81a:	bf15      	itete	ne
 801d81c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d81e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d822:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d826:	81a3      	strheq	r3, [r4, #12]
 801d828:	bf18      	it	ne
 801d82a:	81a3      	strhne	r3, [r4, #12]
 801d82c:	bd10      	pop	{r4, pc}

0801d82e <__sclose>:
 801d82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d832:	f000 b935 	b.w	801daa0 <_close_r>

0801d836 <_vsniprintf_r>:
 801d836:	b530      	push	{r4, r5, lr}
 801d838:	4614      	mov	r4, r2
 801d83a:	2c00      	cmp	r4, #0
 801d83c:	b09b      	sub	sp, #108	@ 0x6c
 801d83e:	4605      	mov	r5, r0
 801d840:	461a      	mov	r2, r3
 801d842:	da05      	bge.n	801d850 <_vsniprintf_r+0x1a>
 801d844:	238b      	movs	r3, #139	@ 0x8b
 801d846:	6003      	str	r3, [r0, #0]
 801d848:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d84c:	b01b      	add	sp, #108	@ 0x6c
 801d84e:	bd30      	pop	{r4, r5, pc}
 801d850:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d854:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d858:	bf14      	ite	ne
 801d85a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d85e:	4623      	moveq	r3, r4
 801d860:	9302      	str	r3, [sp, #8]
 801d862:	9305      	str	r3, [sp, #20]
 801d864:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d868:	9100      	str	r1, [sp, #0]
 801d86a:	9104      	str	r1, [sp, #16]
 801d86c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d870:	4669      	mov	r1, sp
 801d872:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d874:	f000 fadc 	bl	801de30 <_svfiprintf_r>
 801d878:	1c43      	adds	r3, r0, #1
 801d87a:	bfbc      	itt	lt
 801d87c:	238b      	movlt	r3, #139	@ 0x8b
 801d87e:	602b      	strlt	r3, [r5, #0]
 801d880:	2c00      	cmp	r4, #0
 801d882:	d0e3      	beq.n	801d84c <_vsniprintf_r+0x16>
 801d884:	9b00      	ldr	r3, [sp, #0]
 801d886:	2200      	movs	r2, #0
 801d888:	701a      	strb	r2, [r3, #0]
 801d88a:	e7df      	b.n	801d84c <_vsniprintf_r+0x16>

0801d88c <vsniprintf>:
 801d88c:	b507      	push	{r0, r1, r2, lr}
 801d88e:	9300      	str	r3, [sp, #0]
 801d890:	4613      	mov	r3, r2
 801d892:	460a      	mov	r2, r1
 801d894:	4601      	mov	r1, r0
 801d896:	4803      	ldr	r0, [pc, #12]	@ (801d8a4 <vsniprintf+0x18>)
 801d898:	6800      	ldr	r0, [r0, #0]
 801d89a:	f7ff ffcc 	bl	801d836 <_vsniprintf_r>
 801d89e:	b003      	add	sp, #12
 801d8a0:	f85d fb04 	ldr.w	pc, [sp], #4
 801d8a4:	24001210 	.word	0x24001210

0801d8a8 <__swbuf_r>:
 801d8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8aa:	460e      	mov	r6, r1
 801d8ac:	4614      	mov	r4, r2
 801d8ae:	4605      	mov	r5, r0
 801d8b0:	b118      	cbz	r0, 801d8ba <__swbuf_r+0x12>
 801d8b2:	6a03      	ldr	r3, [r0, #32]
 801d8b4:	b90b      	cbnz	r3, 801d8ba <__swbuf_r+0x12>
 801d8b6:	f7ff feb7 	bl	801d628 <__sinit>
 801d8ba:	69a3      	ldr	r3, [r4, #24]
 801d8bc:	60a3      	str	r3, [r4, #8]
 801d8be:	89a3      	ldrh	r3, [r4, #12]
 801d8c0:	071a      	lsls	r2, r3, #28
 801d8c2:	d501      	bpl.n	801d8c8 <__swbuf_r+0x20>
 801d8c4:	6923      	ldr	r3, [r4, #16]
 801d8c6:	b943      	cbnz	r3, 801d8da <__swbuf_r+0x32>
 801d8c8:	4621      	mov	r1, r4
 801d8ca:	4628      	mov	r0, r5
 801d8cc:	f000 f82a 	bl	801d924 <__swsetup_r>
 801d8d0:	b118      	cbz	r0, 801d8da <__swbuf_r+0x32>
 801d8d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d8d6:	4638      	mov	r0, r7
 801d8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8da:	6823      	ldr	r3, [r4, #0]
 801d8dc:	6922      	ldr	r2, [r4, #16]
 801d8de:	1a98      	subs	r0, r3, r2
 801d8e0:	6963      	ldr	r3, [r4, #20]
 801d8e2:	b2f6      	uxtb	r6, r6
 801d8e4:	4283      	cmp	r3, r0
 801d8e6:	4637      	mov	r7, r6
 801d8e8:	dc05      	bgt.n	801d8f6 <__swbuf_r+0x4e>
 801d8ea:	4621      	mov	r1, r4
 801d8ec:	4628      	mov	r0, r5
 801d8ee:	f000 fdad 	bl	801e44c <_fflush_r>
 801d8f2:	2800      	cmp	r0, #0
 801d8f4:	d1ed      	bne.n	801d8d2 <__swbuf_r+0x2a>
 801d8f6:	68a3      	ldr	r3, [r4, #8]
 801d8f8:	3b01      	subs	r3, #1
 801d8fa:	60a3      	str	r3, [r4, #8]
 801d8fc:	6823      	ldr	r3, [r4, #0]
 801d8fe:	1c5a      	adds	r2, r3, #1
 801d900:	6022      	str	r2, [r4, #0]
 801d902:	701e      	strb	r6, [r3, #0]
 801d904:	6962      	ldr	r2, [r4, #20]
 801d906:	1c43      	adds	r3, r0, #1
 801d908:	429a      	cmp	r2, r3
 801d90a:	d004      	beq.n	801d916 <__swbuf_r+0x6e>
 801d90c:	89a3      	ldrh	r3, [r4, #12]
 801d90e:	07db      	lsls	r3, r3, #31
 801d910:	d5e1      	bpl.n	801d8d6 <__swbuf_r+0x2e>
 801d912:	2e0a      	cmp	r6, #10
 801d914:	d1df      	bne.n	801d8d6 <__swbuf_r+0x2e>
 801d916:	4621      	mov	r1, r4
 801d918:	4628      	mov	r0, r5
 801d91a:	f000 fd97 	bl	801e44c <_fflush_r>
 801d91e:	2800      	cmp	r0, #0
 801d920:	d0d9      	beq.n	801d8d6 <__swbuf_r+0x2e>
 801d922:	e7d6      	b.n	801d8d2 <__swbuf_r+0x2a>

0801d924 <__swsetup_r>:
 801d924:	b538      	push	{r3, r4, r5, lr}
 801d926:	4b29      	ldr	r3, [pc, #164]	@ (801d9cc <__swsetup_r+0xa8>)
 801d928:	4605      	mov	r5, r0
 801d92a:	6818      	ldr	r0, [r3, #0]
 801d92c:	460c      	mov	r4, r1
 801d92e:	b118      	cbz	r0, 801d938 <__swsetup_r+0x14>
 801d930:	6a03      	ldr	r3, [r0, #32]
 801d932:	b90b      	cbnz	r3, 801d938 <__swsetup_r+0x14>
 801d934:	f7ff fe78 	bl	801d628 <__sinit>
 801d938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d93c:	0719      	lsls	r1, r3, #28
 801d93e:	d422      	bmi.n	801d986 <__swsetup_r+0x62>
 801d940:	06da      	lsls	r2, r3, #27
 801d942:	d407      	bmi.n	801d954 <__swsetup_r+0x30>
 801d944:	2209      	movs	r2, #9
 801d946:	602a      	str	r2, [r5, #0]
 801d948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d94c:	81a3      	strh	r3, [r4, #12]
 801d94e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d952:	e033      	b.n	801d9bc <__swsetup_r+0x98>
 801d954:	0758      	lsls	r0, r3, #29
 801d956:	d512      	bpl.n	801d97e <__swsetup_r+0x5a>
 801d958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d95a:	b141      	cbz	r1, 801d96e <__swsetup_r+0x4a>
 801d95c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d960:	4299      	cmp	r1, r3
 801d962:	d002      	beq.n	801d96a <__swsetup_r+0x46>
 801d964:	4628      	mov	r0, r5
 801d966:	f000 f9b5 	bl	801dcd4 <_free_r>
 801d96a:	2300      	movs	r3, #0
 801d96c:	6363      	str	r3, [r4, #52]	@ 0x34
 801d96e:	89a3      	ldrh	r3, [r4, #12]
 801d970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d974:	81a3      	strh	r3, [r4, #12]
 801d976:	2300      	movs	r3, #0
 801d978:	6063      	str	r3, [r4, #4]
 801d97a:	6923      	ldr	r3, [r4, #16]
 801d97c:	6023      	str	r3, [r4, #0]
 801d97e:	89a3      	ldrh	r3, [r4, #12]
 801d980:	f043 0308 	orr.w	r3, r3, #8
 801d984:	81a3      	strh	r3, [r4, #12]
 801d986:	6923      	ldr	r3, [r4, #16]
 801d988:	b94b      	cbnz	r3, 801d99e <__swsetup_r+0x7a>
 801d98a:	89a3      	ldrh	r3, [r4, #12]
 801d98c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d994:	d003      	beq.n	801d99e <__swsetup_r+0x7a>
 801d996:	4621      	mov	r1, r4
 801d998:	4628      	mov	r0, r5
 801d99a:	f000 fdb7 	bl	801e50c <__smakebuf_r>
 801d99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d9a2:	f013 0201 	ands.w	r2, r3, #1
 801d9a6:	d00a      	beq.n	801d9be <__swsetup_r+0x9a>
 801d9a8:	2200      	movs	r2, #0
 801d9aa:	60a2      	str	r2, [r4, #8]
 801d9ac:	6962      	ldr	r2, [r4, #20]
 801d9ae:	4252      	negs	r2, r2
 801d9b0:	61a2      	str	r2, [r4, #24]
 801d9b2:	6922      	ldr	r2, [r4, #16]
 801d9b4:	b942      	cbnz	r2, 801d9c8 <__swsetup_r+0xa4>
 801d9b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d9ba:	d1c5      	bne.n	801d948 <__swsetup_r+0x24>
 801d9bc:	bd38      	pop	{r3, r4, r5, pc}
 801d9be:	0799      	lsls	r1, r3, #30
 801d9c0:	bf58      	it	pl
 801d9c2:	6962      	ldrpl	r2, [r4, #20]
 801d9c4:	60a2      	str	r2, [r4, #8]
 801d9c6:	e7f4      	b.n	801d9b2 <__swsetup_r+0x8e>
 801d9c8:	2000      	movs	r0, #0
 801d9ca:	e7f7      	b.n	801d9bc <__swsetup_r+0x98>
 801d9cc:	24001210 	.word	0x24001210

0801d9d0 <memcmp>:
 801d9d0:	b510      	push	{r4, lr}
 801d9d2:	3901      	subs	r1, #1
 801d9d4:	4402      	add	r2, r0
 801d9d6:	4290      	cmp	r0, r2
 801d9d8:	d101      	bne.n	801d9de <memcmp+0xe>
 801d9da:	2000      	movs	r0, #0
 801d9dc:	e005      	b.n	801d9ea <memcmp+0x1a>
 801d9de:	7803      	ldrb	r3, [r0, #0]
 801d9e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d9e4:	42a3      	cmp	r3, r4
 801d9e6:	d001      	beq.n	801d9ec <memcmp+0x1c>
 801d9e8:	1b18      	subs	r0, r3, r4
 801d9ea:	bd10      	pop	{r4, pc}
 801d9ec:	3001      	adds	r0, #1
 801d9ee:	e7f2      	b.n	801d9d6 <memcmp+0x6>

0801d9f0 <memmove>:
 801d9f0:	4288      	cmp	r0, r1
 801d9f2:	b510      	push	{r4, lr}
 801d9f4:	eb01 0402 	add.w	r4, r1, r2
 801d9f8:	d902      	bls.n	801da00 <memmove+0x10>
 801d9fa:	4284      	cmp	r4, r0
 801d9fc:	4623      	mov	r3, r4
 801d9fe:	d807      	bhi.n	801da10 <memmove+0x20>
 801da00:	1e43      	subs	r3, r0, #1
 801da02:	42a1      	cmp	r1, r4
 801da04:	d008      	beq.n	801da18 <memmove+0x28>
 801da06:	f811 2b01 	ldrb.w	r2, [r1], #1
 801da0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801da0e:	e7f8      	b.n	801da02 <memmove+0x12>
 801da10:	4402      	add	r2, r0
 801da12:	4601      	mov	r1, r0
 801da14:	428a      	cmp	r2, r1
 801da16:	d100      	bne.n	801da1a <memmove+0x2a>
 801da18:	bd10      	pop	{r4, pc}
 801da1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801da1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801da22:	e7f7      	b.n	801da14 <memmove+0x24>

0801da24 <memset>:
 801da24:	4402      	add	r2, r0
 801da26:	4603      	mov	r3, r0
 801da28:	4293      	cmp	r3, r2
 801da2a:	d100      	bne.n	801da2e <memset+0xa>
 801da2c:	4770      	bx	lr
 801da2e:	f803 1b01 	strb.w	r1, [r3], #1
 801da32:	e7f9      	b.n	801da28 <memset+0x4>

0801da34 <strchr>:
 801da34:	b2c9      	uxtb	r1, r1
 801da36:	4603      	mov	r3, r0
 801da38:	4618      	mov	r0, r3
 801da3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801da3e:	b112      	cbz	r2, 801da46 <strchr+0x12>
 801da40:	428a      	cmp	r2, r1
 801da42:	d1f9      	bne.n	801da38 <strchr+0x4>
 801da44:	4770      	bx	lr
 801da46:	2900      	cmp	r1, #0
 801da48:	bf18      	it	ne
 801da4a:	2000      	movne	r0, #0
 801da4c:	4770      	bx	lr

0801da4e <strncmp>:
 801da4e:	b510      	push	{r4, lr}
 801da50:	b16a      	cbz	r2, 801da6e <strncmp+0x20>
 801da52:	3901      	subs	r1, #1
 801da54:	1884      	adds	r4, r0, r2
 801da56:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da5a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801da5e:	429a      	cmp	r2, r3
 801da60:	d103      	bne.n	801da6a <strncmp+0x1c>
 801da62:	42a0      	cmp	r0, r4
 801da64:	d001      	beq.n	801da6a <strncmp+0x1c>
 801da66:	2a00      	cmp	r2, #0
 801da68:	d1f5      	bne.n	801da56 <strncmp+0x8>
 801da6a:	1ad0      	subs	r0, r2, r3
 801da6c:	bd10      	pop	{r4, pc}
 801da6e:	4610      	mov	r0, r2
 801da70:	e7fc      	b.n	801da6c <strncmp+0x1e>

0801da72 <strstr>:
 801da72:	780a      	ldrb	r2, [r1, #0]
 801da74:	b570      	push	{r4, r5, r6, lr}
 801da76:	b96a      	cbnz	r2, 801da94 <strstr+0x22>
 801da78:	bd70      	pop	{r4, r5, r6, pc}
 801da7a:	429a      	cmp	r2, r3
 801da7c:	d109      	bne.n	801da92 <strstr+0x20>
 801da7e:	460c      	mov	r4, r1
 801da80:	4605      	mov	r5, r0
 801da82:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801da86:	2b00      	cmp	r3, #0
 801da88:	d0f6      	beq.n	801da78 <strstr+0x6>
 801da8a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801da8e:	429e      	cmp	r6, r3
 801da90:	d0f7      	beq.n	801da82 <strstr+0x10>
 801da92:	3001      	adds	r0, #1
 801da94:	7803      	ldrb	r3, [r0, #0]
 801da96:	2b00      	cmp	r3, #0
 801da98:	d1ef      	bne.n	801da7a <strstr+0x8>
 801da9a:	4618      	mov	r0, r3
 801da9c:	e7ec      	b.n	801da78 <strstr+0x6>
	...

0801daa0 <_close_r>:
 801daa0:	b538      	push	{r3, r4, r5, lr}
 801daa2:	4d06      	ldr	r5, [pc, #24]	@ (801dabc <_close_r+0x1c>)
 801daa4:	2300      	movs	r3, #0
 801daa6:	4604      	mov	r4, r0
 801daa8:	4608      	mov	r0, r1
 801daaa:	602b      	str	r3, [r5, #0]
 801daac:	f7e4 f92a 	bl	8001d04 <_close>
 801dab0:	1c43      	adds	r3, r0, #1
 801dab2:	d102      	bne.n	801daba <_close_r+0x1a>
 801dab4:	682b      	ldr	r3, [r5, #0]
 801dab6:	b103      	cbz	r3, 801daba <_close_r+0x1a>
 801dab8:	6023      	str	r3, [r4, #0]
 801daba:	bd38      	pop	{r3, r4, r5, pc}
 801dabc:	24069840 	.word	0x24069840

0801dac0 <_reclaim_reent>:
 801dac0:	4b29      	ldr	r3, [pc, #164]	@ (801db68 <_reclaim_reent+0xa8>)
 801dac2:	681b      	ldr	r3, [r3, #0]
 801dac4:	4283      	cmp	r3, r0
 801dac6:	b570      	push	{r4, r5, r6, lr}
 801dac8:	4604      	mov	r4, r0
 801daca:	d04b      	beq.n	801db64 <_reclaim_reent+0xa4>
 801dacc:	69c3      	ldr	r3, [r0, #28]
 801dace:	b1ab      	cbz	r3, 801dafc <_reclaim_reent+0x3c>
 801dad0:	68db      	ldr	r3, [r3, #12]
 801dad2:	b16b      	cbz	r3, 801daf0 <_reclaim_reent+0x30>
 801dad4:	2500      	movs	r5, #0
 801dad6:	69e3      	ldr	r3, [r4, #28]
 801dad8:	68db      	ldr	r3, [r3, #12]
 801dada:	5959      	ldr	r1, [r3, r5]
 801dadc:	2900      	cmp	r1, #0
 801dade:	d13b      	bne.n	801db58 <_reclaim_reent+0x98>
 801dae0:	3504      	adds	r5, #4
 801dae2:	2d80      	cmp	r5, #128	@ 0x80
 801dae4:	d1f7      	bne.n	801dad6 <_reclaim_reent+0x16>
 801dae6:	69e3      	ldr	r3, [r4, #28]
 801dae8:	4620      	mov	r0, r4
 801daea:	68d9      	ldr	r1, [r3, #12]
 801daec:	f000 f8f2 	bl	801dcd4 <_free_r>
 801daf0:	69e3      	ldr	r3, [r4, #28]
 801daf2:	6819      	ldr	r1, [r3, #0]
 801daf4:	b111      	cbz	r1, 801dafc <_reclaim_reent+0x3c>
 801daf6:	4620      	mov	r0, r4
 801daf8:	f000 f8ec 	bl	801dcd4 <_free_r>
 801dafc:	6961      	ldr	r1, [r4, #20]
 801dafe:	b111      	cbz	r1, 801db06 <_reclaim_reent+0x46>
 801db00:	4620      	mov	r0, r4
 801db02:	f000 f8e7 	bl	801dcd4 <_free_r>
 801db06:	69e1      	ldr	r1, [r4, #28]
 801db08:	b111      	cbz	r1, 801db10 <_reclaim_reent+0x50>
 801db0a:	4620      	mov	r0, r4
 801db0c:	f000 f8e2 	bl	801dcd4 <_free_r>
 801db10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801db12:	b111      	cbz	r1, 801db1a <_reclaim_reent+0x5a>
 801db14:	4620      	mov	r0, r4
 801db16:	f000 f8dd 	bl	801dcd4 <_free_r>
 801db1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801db1c:	b111      	cbz	r1, 801db24 <_reclaim_reent+0x64>
 801db1e:	4620      	mov	r0, r4
 801db20:	f000 f8d8 	bl	801dcd4 <_free_r>
 801db24:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801db26:	b111      	cbz	r1, 801db2e <_reclaim_reent+0x6e>
 801db28:	4620      	mov	r0, r4
 801db2a:	f000 f8d3 	bl	801dcd4 <_free_r>
 801db2e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801db30:	b111      	cbz	r1, 801db38 <_reclaim_reent+0x78>
 801db32:	4620      	mov	r0, r4
 801db34:	f000 f8ce 	bl	801dcd4 <_free_r>
 801db38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801db3a:	b111      	cbz	r1, 801db42 <_reclaim_reent+0x82>
 801db3c:	4620      	mov	r0, r4
 801db3e:	f000 f8c9 	bl	801dcd4 <_free_r>
 801db42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801db44:	b111      	cbz	r1, 801db4c <_reclaim_reent+0x8c>
 801db46:	4620      	mov	r0, r4
 801db48:	f000 f8c4 	bl	801dcd4 <_free_r>
 801db4c:	6a23      	ldr	r3, [r4, #32]
 801db4e:	b14b      	cbz	r3, 801db64 <_reclaim_reent+0xa4>
 801db50:	4620      	mov	r0, r4
 801db52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db56:	4718      	bx	r3
 801db58:	680e      	ldr	r6, [r1, #0]
 801db5a:	4620      	mov	r0, r4
 801db5c:	f000 f8ba 	bl	801dcd4 <_free_r>
 801db60:	4631      	mov	r1, r6
 801db62:	e7bb      	b.n	801dadc <_reclaim_reent+0x1c>
 801db64:	bd70      	pop	{r4, r5, r6, pc}
 801db66:	bf00      	nop
 801db68:	24001210 	.word	0x24001210

0801db6c <_lseek_r>:
 801db6c:	b538      	push	{r3, r4, r5, lr}
 801db6e:	4d07      	ldr	r5, [pc, #28]	@ (801db8c <_lseek_r+0x20>)
 801db70:	4604      	mov	r4, r0
 801db72:	4608      	mov	r0, r1
 801db74:	4611      	mov	r1, r2
 801db76:	2200      	movs	r2, #0
 801db78:	602a      	str	r2, [r5, #0]
 801db7a:	461a      	mov	r2, r3
 801db7c:	f7e4 f8e9 	bl	8001d52 <_lseek>
 801db80:	1c43      	adds	r3, r0, #1
 801db82:	d102      	bne.n	801db8a <_lseek_r+0x1e>
 801db84:	682b      	ldr	r3, [r5, #0]
 801db86:	b103      	cbz	r3, 801db8a <_lseek_r+0x1e>
 801db88:	6023      	str	r3, [r4, #0]
 801db8a:	bd38      	pop	{r3, r4, r5, pc}
 801db8c:	24069840 	.word	0x24069840

0801db90 <_read_r>:
 801db90:	b538      	push	{r3, r4, r5, lr}
 801db92:	4d07      	ldr	r5, [pc, #28]	@ (801dbb0 <_read_r+0x20>)
 801db94:	4604      	mov	r4, r0
 801db96:	4608      	mov	r0, r1
 801db98:	4611      	mov	r1, r2
 801db9a:	2200      	movs	r2, #0
 801db9c:	602a      	str	r2, [r5, #0]
 801db9e:	461a      	mov	r2, r3
 801dba0:	f7e4 f877 	bl	8001c92 <_read>
 801dba4:	1c43      	adds	r3, r0, #1
 801dba6:	d102      	bne.n	801dbae <_read_r+0x1e>
 801dba8:	682b      	ldr	r3, [r5, #0]
 801dbaa:	b103      	cbz	r3, 801dbae <_read_r+0x1e>
 801dbac:	6023      	str	r3, [r4, #0]
 801dbae:	bd38      	pop	{r3, r4, r5, pc}
 801dbb0:	24069840 	.word	0x24069840

0801dbb4 <_sbrk_r>:
 801dbb4:	b538      	push	{r3, r4, r5, lr}
 801dbb6:	4d06      	ldr	r5, [pc, #24]	@ (801dbd0 <_sbrk_r+0x1c>)
 801dbb8:	2300      	movs	r3, #0
 801dbba:	4604      	mov	r4, r0
 801dbbc:	4608      	mov	r0, r1
 801dbbe:	602b      	str	r3, [r5, #0]
 801dbc0:	f7e4 f8d4 	bl	8001d6c <_sbrk>
 801dbc4:	1c43      	adds	r3, r0, #1
 801dbc6:	d102      	bne.n	801dbce <_sbrk_r+0x1a>
 801dbc8:	682b      	ldr	r3, [r5, #0]
 801dbca:	b103      	cbz	r3, 801dbce <_sbrk_r+0x1a>
 801dbcc:	6023      	str	r3, [r4, #0]
 801dbce:	bd38      	pop	{r3, r4, r5, pc}
 801dbd0:	24069840 	.word	0x24069840

0801dbd4 <_write_r>:
 801dbd4:	b538      	push	{r3, r4, r5, lr}
 801dbd6:	4d07      	ldr	r5, [pc, #28]	@ (801dbf4 <_write_r+0x20>)
 801dbd8:	4604      	mov	r4, r0
 801dbda:	4608      	mov	r0, r1
 801dbdc:	4611      	mov	r1, r2
 801dbde:	2200      	movs	r2, #0
 801dbe0:	602a      	str	r2, [r5, #0]
 801dbe2:	461a      	mov	r2, r3
 801dbe4:	f7e4 f872 	bl	8001ccc <_write>
 801dbe8:	1c43      	adds	r3, r0, #1
 801dbea:	d102      	bne.n	801dbf2 <_write_r+0x1e>
 801dbec:	682b      	ldr	r3, [r5, #0]
 801dbee:	b103      	cbz	r3, 801dbf2 <_write_r+0x1e>
 801dbf0:	6023      	str	r3, [r4, #0]
 801dbf2:	bd38      	pop	{r3, r4, r5, pc}
 801dbf4:	24069840 	.word	0x24069840

0801dbf8 <__errno>:
 801dbf8:	4b01      	ldr	r3, [pc, #4]	@ (801dc00 <__errno+0x8>)
 801dbfa:	6818      	ldr	r0, [r3, #0]
 801dbfc:	4770      	bx	lr
 801dbfe:	bf00      	nop
 801dc00:	24001210 	.word	0x24001210

0801dc04 <__libc_init_array>:
 801dc04:	b570      	push	{r4, r5, r6, lr}
 801dc06:	4d0d      	ldr	r5, [pc, #52]	@ (801dc3c <__libc_init_array+0x38>)
 801dc08:	4c0d      	ldr	r4, [pc, #52]	@ (801dc40 <__libc_init_array+0x3c>)
 801dc0a:	1b64      	subs	r4, r4, r5
 801dc0c:	10a4      	asrs	r4, r4, #2
 801dc0e:	2600      	movs	r6, #0
 801dc10:	42a6      	cmp	r6, r4
 801dc12:	d109      	bne.n	801dc28 <__libc_init_array+0x24>
 801dc14:	4d0b      	ldr	r5, [pc, #44]	@ (801dc44 <__libc_init_array+0x40>)
 801dc16:	4c0c      	ldr	r4, [pc, #48]	@ (801dc48 <__libc_init_array+0x44>)
 801dc18:	f000 fe62 	bl	801e8e0 <_init>
 801dc1c:	1b64      	subs	r4, r4, r5
 801dc1e:	10a4      	asrs	r4, r4, #2
 801dc20:	2600      	movs	r6, #0
 801dc22:	42a6      	cmp	r6, r4
 801dc24:	d105      	bne.n	801dc32 <__libc_init_array+0x2e>
 801dc26:	bd70      	pop	{r4, r5, r6, pc}
 801dc28:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc2c:	4798      	blx	r3
 801dc2e:	3601      	adds	r6, #1
 801dc30:	e7ee      	b.n	801dc10 <__libc_init_array+0xc>
 801dc32:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc36:	4798      	blx	r3
 801dc38:	3601      	adds	r6, #1
 801dc3a:	e7f2      	b.n	801dc22 <__libc_init_array+0x1e>
 801dc3c:	08020d28 	.word	0x08020d28
 801dc40:	08020d28 	.word	0x08020d28
 801dc44:	08020d28 	.word	0x08020d28
 801dc48:	08020d64 	.word	0x08020d64

0801dc4c <__retarget_lock_init_recursive>:
 801dc4c:	4770      	bx	lr

0801dc4e <__retarget_lock_acquire_recursive>:
 801dc4e:	4770      	bx	lr

0801dc50 <__retarget_lock_release_recursive>:
 801dc50:	4770      	bx	lr

0801dc52 <strcpy>:
 801dc52:	4603      	mov	r3, r0
 801dc54:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dc58:	f803 2b01 	strb.w	r2, [r3], #1
 801dc5c:	2a00      	cmp	r2, #0
 801dc5e:	d1f9      	bne.n	801dc54 <strcpy+0x2>
 801dc60:	4770      	bx	lr

0801dc62 <memcpy>:
 801dc62:	440a      	add	r2, r1
 801dc64:	4291      	cmp	r1, r2
 801dc66:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801dc6a:	d100      	bne.n	801dc6e <memcpy+0xc>
 801dc6c:	4770      	bx	lr
 801dc6e:	b510      	push	{r4, lr}
 801dc70:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dc74:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dc78:	4291      	cmp	r1, r2
 801dc7a:	d1f9      	bne.n	801dc70 <memcpy+0xe>
 801dc7c:	bd10      	pop	{r4, pc}
	...

0801dc80 <__assert_func>:
 801dc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dc82:	4614      	mov	r4, r2
 801dc84:	461a      	mov	r2, r3
 801dc86:	4b09      	ldr	r3, [pc, #36]	@ (801dcac <__assert_func+0x2c>)
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	4605      	mov	r5, r0
 801dc8c:	68d8      	ldr	r0, [r3, #12]
 801dc8e:	b954      	cbnz	r4, 801dca6 <__assert_func+0x26>
 801dc90:	4b07      	ldr	r3, [pc, #28]	@ (801dcb0 <__assert_func+0x30>)
 801dc92:	461c      	mov	r4, r3
 801dc94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dc98:	9100      	str	r1, [sp, #0]
 801dc9a:	462b      	mov	r3, r5
 801dc9c:	4905      	ldr	r1, [pc, #20]	@ (801dcb4 <__assert_func+0x34>)
 801dc9e:	f000 fbfd 	bl	801e49c <fiprintf>
 801dca2:	f000 fc91 	bl	801e5c8 <abort>
 801dca6:	4b04      	ldr	r3, [pc, #16]	@ (801dcb8 <__assert_func+0x38>)
 801dca8:	e7f4      	b.n	801dc94 <__assert_func+0x14>
 801dcaa:	bf00      	nop
 801dcac:	24001210 	.word	0x24001210
 801dcb0:	08020ce9 	.word	0x08020ce9
 801dcb4:	08020cbb 	.word	0x08020cbb
 801dcb8:	08020cae 	.word	0x08020cae

0801dcbc <__env_lock>:
 801dcbc:	4801      	ldr	r0, [pc, #4]	@ (801dcc4 <__env_lock+0x8>)
 801dcbe:	f7ff bfc6 	b.w	801dc4e <__retarget_lock_acquire_recursive>
 801dcc2:	bf00      	nop
 801dcc4:	24069844 	.word	0x24069844

0801dcc8 <__env_unlock>:
 801dcc8:	4801      	ldr	r0, [pc, #4]	@ (801dcd0 <__env_unlock+0x8>)
 801dcca:	f7ff bfc1 	b.w	801dc50 <__retarget_lock_release_recursive>
 801dcce:	bf00      	nop
 801dcd0:	24069844 	.word	0x24069844

0801dcd4 <_free_r>:
 801dcd4:	b538      	push	{r3, r4, r5, lr}
 801dcd6:	4605      	mov	r5, r0
 801dcd8:	2900      	cmp	r1, #0
 801dcda:	d041      	beq.n	801dd60 <_free_r+0x8c>
 801dcdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dce0:	1f0c      	subs	r4, r1, #4
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	bfb8      	it	lt
 801dce6:	18e4      	addlt	r4, r4, r3
 801dce8:	f7ff faec 	bl	801d2c4 <__malloc_lock>
 801dcec:	4a1d      	ldr	r2, [pc, #116]	@ (801dd64 <_free_r+0x90>)
 801dcee:	6813      	ldr	r3, [r2, #0]
 801dcf0:	b933      	cbnz	r3, 801dd00 <_free_r+0x2c>
 801dcf2:	6063      	str	r3, [r4, #4]
 801dcf4:	6014      	str	r4, [r2, #0]
 801dcf6:	4628      	mov	r0, r5
 801dcf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dcfc:	f7ff bae8 	b.w	801d2d0 <__malloc_unlock>
 801dd00:	42a3      	cmp	r3, r4
 801dd02:	d908      	bls.n	801dd16 <_free_r+0x42>
 801dd04:	6820      	ldr	r0, [r4, #0]
 801dd06:	1821      	adds	r1, r4, r0
 801dd08:	428b      	cmp	r3, r1
 801dd0a:	bf01      	itttt	eq
 801dd0c:	6819      	ldreq	r1, [r3, #0]
 801dd0e:	685b      	ldreq	r3, [r3, #4]
 801dd10:	1809      	addeq	r1, r1, r0
 801dd12:	6021      	streq	r1, [r4, #0]
 801dd14:	e7ed      	b.n	801dcf2 <_free_r+0x1e>
 801dd16:	461a      	mov	r2, r3
 801dd18:	685b      	ldr	r3, [r3, #4]
 801dd1a:	b10b      	cbz	r3, 801dd20 <_free_r+0x4c>
 801dd1c:	42a3      	cmp	r3, r4
 801dd1e:	d9fa      	bls.n	801dd16 <_free_r+0x42>
 801dd20:	6811      	ldr	r1, [r2, #0]
 801dd22:	1850      	adds	r0, r2, r1
 801dd24:	42a0      	cmp	r0, r4
 801dd26:	d10b      	bne.n	801dd40 <_free_r+0x6c>
 801dd28:	6820      	ldr	r0, [r4, #0]
 801dd2a:	4401      	add	r1, r0
 801dd2c:	1850      	adds	r0, r2, r1
 801dd2e:	4283      	cmp	r3, r0
 801dd30:	6011      	str	r1, [r2, #0]
 801dd32:	d1e0      	bne.n	801dcf6 <_free_r+0x22>
 801dd34:	6818      	ldr	r0, [r3, #0]
 801dd36:	685b      	ldr	r3, [r3, #4]
 801dd38:	6053      	str	r3, [r2, #4]
 801dd3a:	4408      	add	r0, r1
 801dd3c:	6010      	str	r0, [r2, #0]
 801dd3e:	e7da      	b.n	801dcf6 <_free_r+0x22>
 801dd40:	d902      	bls.n	801dd48 <_free_r+0x74>
 801dd42:	230c      	movs	r3, #12
 801dd44:	602b      	str	r3, [r5, #0]
 801dd46:	e7d6      	b.n	801dcf6 <_free_r+0x22>
 801dd48:	6820      	ldr	r0, [r4, #0]
 801dd4a:	1821      	adds	r1, r4, r0
 801dd4c:	428b      	cmp	r3, r1
 801dd4e:	bf04      	itt	eq
 801dd50:	6819      	ldreq	r1, [r3, #0]
 801dd52:	685b      	ldreq	r3, [r3, #4]
 801dd54:	6063      	str	r3, [r4, #4]
 801dd56:	bf04      	itt	eq
 801dd58:	1809      	addeq	r1, r1, r0
 801dd5a:	6021      	streq	r1, [r4, #0]
 801dd5c:	6054      	str	r4, [r2, #4]
 801dd5e:	e7ca      	b.n	801dcf6 <_free_r+0x22>
 801dd60:	bd38      	pop	{r3, r4, r5, pc}
 801dd62:	bf00      	nop
 801dd64:	24069700 	.word	0x24069700

0801dd68 <_malloc_usable_size_r>:
 801dd68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dd6c:	1f18      	subs	r0, r3, #4
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	bfbc      	itt	lt
 801dd72:	580b      	ldrlt	r3, [r1, r0]
 801dd74:	18c0      	addlt	r0, r0, r3
 801dd76:	4770      	bx	lr

0801dd78 <__ssputs_r>:
 801dd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd7c:	688e      	ldr	r6, [r1, #8]
 801dd7e:	461f      	mov	r7, r3
 801dd80:	42be      	cmp	r6, r7
 801dd82:	680b      	ldr	r3, [r1, #0]
 801dd84:	4682      	mov	sl, r0
 801dd86:	460c      	mov	r4, r1
 801dd88:	4690      	mov	r8, r2
 801dd8a:	d82d      	bhi.n	801dde8 <__ssputs_r+0x70>
 801dd8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dd90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801dd94:	d026      	beq.n	801dde4 <__ssputs_r+0x6c>
 801dd96:	6965      	ldr	r5, [r4, #20]
 801dd98:	6909      	ldr	r1, [r1, #16]
 801dd9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dd9e:	eba3 0901 	sub.w	r9, r3, r1
 801dda2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dda6:	1c7b      	adds	r3, r7, #1
 801dda8:	444b      	add	r3, r9
 801ddaa:	106d      	asrs	r5, r5, #1
 801ddac:	429d      	cmp	r5, r3
 801ddae:	bf38      	it	cc
 801ddb0:	461d      	movcc	r5, r3
 801ddb2:	0553      	lsls	r3, r2, #21
 801ddb4:	d527      	bpl.n	801de06 <__ssputs_r+0x8e>
 801ddb6:	4629      	mov	r1, r5
 801ddb8:	f7ff fa04 	bl	801d1c4 <_malloc_r>
 801ddbc:	4606      	mov	r6, r0
 801ddbe:	b360      	cbz	r0, 801de1a <__ssputs_r+0xa2>
 801ddc0:	6921      	ldr	r1, [r4, #16]
 801ddc2:	464a      	mov	r2, r9
 801ddc4:	f7ff ff4d 	bl	801dc62 <memcpy>
 801ddc8:	89a3      	ldrh	r3, [r4, #12]
 801ddca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ddce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ddd2:	81a3      	strh	r3, [r4, #12]
 801ddd4:	6126      	str	r6, [r4, #16]
 801ddd6:	6165      	str	r5, [r4, #20]
 801ddd8:	444e      	add	r6, r9
 801ddda:	eba5 0509 	sub.w	r5, r5, r9
 801ddde:	6026      	str	r6, [r4, #0]
 801dde0:	60a5      	str	r5, [r4, #8]
 801dde2:	463e      	mov	r6, r7
 801dde4:	42be      	cmp	r6, r7
 801dde6:	d900      	bls.n	801ddea <__ssputs_r+0x72>
 801dde8:	463e      	mov	r6, r7
 801ddea:	6820      	ldr	r0, [r4, #0]
 801ddec:	4632      	mov	r2, r6
 801ddee:	4641      	mov	r1, r8
 801ddf0:	f7ff fdfe 	bl	801d9f0 <memmove>
 801ddf4:	68a3      	ldr	r3, [r4, #8]
 801ddf6:	1b9b      	subs	r3, r3, r6
 801ddf8:	60a3      	str	r3, [r4, #8]
 801ddfa:	6823      	ldr	r3, [r4, #0]
 801ddfc:	4433      	add	r3, r6
 801ddfe:	6023      	str	r3, [r4, #0]
 801de00:	2000      	movs	r0, #0
 801de02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de06:	462a      	mov	r2, r5
 801de08:	f7ff fadc 	bl	801d3c4 <_realloc_r>
 801de0c:	4606      	mov	r6, r0
 801de0e:	2800      	cmp	r0, #0
 801de10:	d1e0      	bne.n	801ddd4 <__ssputs_r+0x5c>
 801de12:	6921      	ldr	r1, [r4, #16]
 801de14:	4650      	mov	r0, sl
 801de16:	f7ff ff5d 	bl	801dcd4 <_free_r>
 801de1a:	230c      	movs	r3, #12
 801de1c:	f8ca 3000 	str.w	r3, [sl]
 801de20:	89a3      	ldrh	r3, [r4, #12]
 801de22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de26:	81a3      	strh	r3, [r4, #12]
 801de28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801de2c:	e7e9      	b.n	801de02 <__ssputs_r+0x8a>
	...

0801de30 <_svfiprintf_r>:
 801de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de34:	4698      	mov	r8, r3
 801de36:	898b      	ldrh	r3, [r1, #12]
 801de38:	061b      	lsls	r3, r3, #24
 801de3a:	b09d      	sub	sp, #116	@ 0x74
 801de3c:	4607      	mov	r7, r0
 801de3e:	460d      	mov	r5, r1
 801de40:	4614      	mov	r4, r2
 801de42:	d510      	bpl.n	801de66 <_svfiprintf_r+0x36>
 801de44:	690b      	ldr	r3, [r1, #16]
 801de46:	b973      	cbnz	r3, 801de66 <_svfiprintf_r+0x36>
 801de48:	2140      	movs	r1, #64	@ 0x40
 801de4a:	f7ff f9bb 	bl	801d1c4 <_malloc_r>
 801de4e:	6028      	str	r0, [r5, #0]
 801de50:	6128      	str	r0, [r5, #16]
 801de52:	b930      	cbnz	r0, 801de62 <_svfiprintf_r+0x32>
 801de54:	230c      	movs	r3, #12
 801de56:	603b      	str	r3, [r7, #0]
 801de58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801de5c:	b01d      	add	sp, #116	@ 0x74
 801de5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de62:	2340      	movs	r3, #64	@ 0x40
 801de64:	616b      	str	r3, [r5, #20]
 801de66:	2300      	movs	r3, #0
 801de68:	9309      	str	r3, [sp, #36]	@ 0x24
 801de6a:	2320      	movs	r3, #32
 801de6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801de70:	f8cd 800c 	str.w	r8, [sp, #12]
 801de74:	2330      	movs	r3, #48	@ 0x30
 801de76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e014 <_svfiprintf_r+0x1e4>
 801de7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801de7e:	f04f 0901 	mov.w	r9, #1
 801de82:	4623      	mov	r3, r4
 801de84:	469a      	mov	sl, r3
 801de86:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de8a:	b10a      	cbz	r2, 801de90 <_svfiprintf_r+0x60>
 801de8c:	2a25      	cmp	r2, #37	@ 0x25
 801de8e:	d1f9      	bne.n	801de84 <_svfiprintf_r+0x54>
 801de90:	ebba 0b04 	subs.w	fp, sl, r4
 801de94:	d00b      	beq.n	801deae <_svfiprintf_r+0x7e>
 801de96:	465b      	mov	r3, fp
 801de98:	4622      	mov	r2, r4
 801de9a:	4629      	mov	r1, r5
 801de9c:	4638      	mov	r0, r7
 801de9e:	f7ff ff6b 	bl	801dd78 <__ssputs_r>
 801dea2:	3001      	adds	r0, #1
 801dea4:	f000 80a7 	beq.w	801dff6 <_svfiprintf_r+0x1c6>
 801dea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801deaa:	445a      	add	r2, fp
 801deac:	9209      	str	r2, [sp, #36]	@ 0x24
 801deae:	f89a 3000 	ldrb.w	r3, [sl]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	f000 809f 	beq.w	801dff6 <_svfiprintf_r+0x1c6>
 801deb8:	2300      	movs	r3, #0
 801deba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801debe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dec2:	f10a 0a01 	add.w	sl, sl, #1
 801dec6:	9304      	str	r3, [sp, #16]
 801dec8:	9307      	str	r3, [sp, #28]
 801deca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dece:	931a      	str	r3, [sp, #104]	@ 0x68
 801ded0:	4654      	mov	r4, sl
 801ded2:	2205      	movs	r2, #5
 801ded4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ded8:	484e      	ldr	r0, [pc, #312]	@ (801e014 <_svfiprintf_r+0x1e4>)
 801deda:	f7e2 fa19 	bl	8000310 <memchr>
 801dede:	9a04      	ldr	r2, [sp, #16]
 801dee0:	b9d8      	cbnz	r0, 801df1a <_svfiprintf_r+0xea>
 801dee2:	06d0      	lsls	r0, r2, #27
 801dee4:	bf44      	itt	mi
 801dee6:	2320      	movmi	r3, #32
 801dee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801deec:	0711      	lsls	r1, r2, #28
 801deee:	bf44      	itt	mi
 801def0:	232b      	movmi	r3, #43	@ 0x2b
 801def2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801def6:	f89a 3000 	ldrb.w	r3, [sl]
 801defa:	2b2a      	cmp	r3, #42	@ 0x2a
 801defc:	d015      	beq.n	801df2a <_svfiprintf_r+0xfa>
 801defe:	9a07      	ldr	r2, [sp, #28]
 801df00:	4654      	mov	r4, sl
 801df02:	2000      	movs	r0, #0
 801df04:	f04f 0c0a 	mov.w	ip, #10
 801df08:	4621      	mov	r1, r4
 801df0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801df0e:	3b30      	subs	r3, #48	@ 0x30
 801df10:	2b09      	cmp	r3, #9
 801df12:	d94b      	bls.n	801dfac <_svfiprintf_r+0x17c>
 801df14:	b1b0      	cbz	r0, 801df44 <_svfiprintf_r+0x114>
 801df16:	9207      	str	r2, [sp, #28]
 801df18:	e014      	b.n	801df44 <_svfiprintf_r+0x114>
 801df1a:	eba0 0308 	sub.w	r3, r0, r8
 801df1e:	fa09 f303 	lsl.w	r3, r9, r3
 801df22:	4313      	orrs	r3, r2
 801df24:	9304      	str	r3, [sp, #16]
 801df26:	46a2      	mov	sl, r4
 801df28:	e7d2      	b.n	801ded0 <_svfiprintf_r+0xa0>
 801df2a:	9b03      	ldr	r3, [sp, #12]
 801df2c:	1d19      	adds	r1, r3, #4
 801df2e:	681b      	ldr	r3, [r3, #0]
 801df30:	9103      	str	r1, [sp, #12]
 801df32:	2b00      	cmp	r3, #0
 801df34:	bfbb      	ittet	lt
 801df36:	425b      	neglt	r3, r3
 801df38:	f042 0202 	orrlt.w	r2, r2, #2
 801df3c:	9307      	strge	r3, [sp, #28]
 801df3e:	9307      	strlt	r3, [sp, #28]
 801df40:	bfb8      	it	lt
 801df42:	9204      	strlt	r2, [sp, #16]
 801df44:	7823      	ldrb	r3, [r4, #0]
 801df46:	2b2e      	cmp	r3, #46	@ 0x2e
 801df48:	d10a      	bne.n	801df60 <_svfiprintf_r+0x130>
 801df4a:	7863      	ldrb	r3, [r4, #1]
 801df4c:	2b2a      	cmp	r3, #42	@ 0x2a
 801df4e:	d132      	bne.n	801dfb6 <_svfiprintf_r+0x186>
 801df50:	9b03      	ldr	r3, [sp, #12]
 801df52:	1d1a      	adds	r2, r3, #4
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	9203      	str	r2, [sp, #12]
 801df58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801df5c:	3402      	adds	r4, #2
 801df5e:	9305      	str	r3, [sp, #20]
 801df60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e024 <_svfiprintf_r+0x1f4>
 801df64:	7821      	ldrb	r1, [r4, #0]
 801df66:	2203      	movs	r2, #3
 801df68:	4650      	mov	r0, sl
 801df6a:	f7e2 f9d1 	bl	8000310 <memchr>
 801df6e:	b138      	cbz	r0, 801df80 <_svfiprintf_r+0x150>
 801df70:	9b04      	ldr	r3, [sp, #16]
 801df72:	eba0 000a 	sub.w	r0, r0, sl
 801df76:	2240      	movs	r2, #64	@ 0x40
 801df78:	4082      	lsls	r2, r0
 801df7a:	4313      	orrs	r3, r2
 801df7c:	3401      	adds	r4, #1
 801df7e:	9304      	str	r3, [sp, #16]
 801df80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df84:	4824      	ldr	r0, [pc, #144]	@ (801e018 <_svfiprintf_r+0x1e8>)
 801df86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801df8a:	2206      	movs	r2, #6
 801df8c:	f7e2 f9c0 	bl	8000310 <memchr>
 801df90:	2800      	cmp	r0, #0
 801df92:	d036      	beq.n	801e002 <_svfiprintf_r+0x1d2>
 801df94:	4b21      	ldr	r3, [pc, #132]	@ (801e01c <_svfiprintf_r+0x1ec>)
 801df96:	bb1b      	cbnz	r3, 801dfe0 <_svfiprintf_r+0x1b0>
 801df98:	9b03      	ldr	r3, [sp, #12]
 801df9a:	3307      	adds	r3, #7
 801df9c:	f023 0307 	bic.w	r3, r3, #7
 801dfa0:	3308      	adds	r3, #8
 801dfa2:	9303      	str	r3, [sp, #12]
 801dfa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfa6:	4433      	add	r3, r6
 801dfa8:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfaa:	e76a      	b.n	801de82 <_svfiprintf_r+0x52>
 801dfac:	fb0c 3202 	mla	r2, ip, r2, r3
 801dfb0:	460c      	mov	r4, r1
 801dfb2:	2001      	movs	r0, #1
 801dfb4:	e7a8      	b.n	801df08 <_svfiprintf_r+0xd8>
 801dfb6:	2300      	movs	r3, #0
 801dfb8:	3401      	adds	r4, #1
 801dfba:	9305      	str	r3, [sp, #20]
 801dfbc:	4619      	mov	r1, r3
 801dfbe:	f04f 0c0a 	mov.w	ip, #10
 801dfc2:	4620      	mov	r0, r4
 801dfc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dfc8:	3a30      	subs	r2, #48	@ 0x30
 801dfca:	2a09      	cmp	r2, #9
 801dfcc:	d903      	bls.n	801dfd6 <_svfiprintf_r+0x1a6>
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d0c6      	beq.n	801df60 <_svfiprintf_r+0x130>
 801dfd2:	9105      	str	r1, [sp, #20]
 801dfd4:	e7c4      	b.n	801df60 <_svfiprintf_r+0x130>
 801dfd6:	fb0c 2101 	mla	r1, ip, r1, r2
 801dfda:	4604      	mov	r4, r0
 801dfdc:	2301      	movs	r3, #1
 801dfde:	e7f0      	b.n	801dfc2 <_svfiprintf_r+0x192>
 801dfe0:	ab03      	add	r3, sp, #12
 801dfe2:	9300      	str	r3, [sp, #0]
 801dfe4:	462a      	mov	r2, r5
 801dfe6:	4b0e      	ldr	r3, [pc, #56]	@ (801e020 <_svfiprintf_r+0x1f0>)
 801dfe8:	a904      	add	r1, sp, #16
 801dfea:	4638      	mov	r0, r7
 801dfec:	f3af 8000 	nop.w
 801dff0:	1c42      	adds	r2, r0, #1
 801dff2:	4606      	mov	r6, r0
 801dff4:	d1d6      	bne.n	801dfa4 <_svfiprintf_r+0x174>
 801dff6:	89ab      	ldrh	r3, [r5, #12]
 801dff8:	065b      	lsls	r3, r3, #25
 801dffa:	f53f af2d 	bmi.w	801de58 <_svfiprintf_r+0x28>
 801dffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e000:	e72c      	b.n	801de5c <_svfiprintf_r+0x2c>
 801e002:	ab03      	add	r3, sp, #12
 801e004:	9300      	str	r3, [sp, #0]
 801e006:	462a      	mov	r2, r5
 801e008:	4b05      	ldr	r3, [pc, #20]	@ (801e020 <_svfiprintf_r+0x1f0>)
 801e00a:	a904      	add	r1, sp, #16
 801e00c:	4638      	mov	r0, r7
 801e00e:	f000 f879 	bl	801e104 <_printf_i>
 801e012:	e7ed      	b.n	801dff0 <_svfiprintf_r+0x1c0>
 801e014:	08020cea 	.word	0x08020cea
 801e018:	08020cf4 	.word	0x08020cf4
 801e01c:	00000000 	.word	0x00000000
 801e020:	0801dd79 	.word	0x0801dd79
 801e024:	08020cf0 	.word	0x08020cf0

0801e028 <_printf_common>:
 801e028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e02c:	4616      	mov	r6, r2
 801e02e:	4698      	mov	r8, r3
 801e030:	688a      	ldr	r2, [r1, #8]
 801e032:	690b      	ldr	r3, [r1, #16]
 801e034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e038:	4293      	cmp	r3, r2
 801e03a:	bfb8      	it	lt
 801e03c:	4613      	movlt	r3, r2
 801e03e:	6033      	str	r3, [r6, #0]
 801e040:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e044:	4607      	mov	r7, r0
 801e046:	460c      	mov	r4, r1
 801e048:	b10a      	cbz	r2, 801e04e <_printf_common+0x26>
 801e04a:	3301      	adds	r3, #1
 801e04c:	6033      	str	r3, [r6, #0]
 801e04e:	6823      	ldr	r3, [r4, #0]
 801e050:	0699      	lsls	r1, r3, #26
 801e052:	bf42      	ittt	mi
 801e054:	6833      	ldrmi	r3, [r6, #0]
 801e056:	3302      	addmi	r3, #2
 801e058:	6033      	strmi	r3, [r6, #0]
 801e05a:	6825      	ldr	r5, [r4, #0]
 801e05c:	f015 0506 	ands.w	r5, r5, #6
 801e060:	d106      	bne.n	801e070 <_printf_common+0x48>
 801e062:	f104 0a19 	add.w	sl, r4, #25
 801e066:	68e3      	ldr	r3, [r4, #12]
 801e068:	6832      	ldr	r2, [r6, #0]
 801e06a:	1a9b      	subs	r3, r3, r2
 801e06c:	42ab      	cmp	r3, r5
 801e06e:	dc26      	bgt.n	801e0be <_printf_common+0x96>
 801e070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e074:	6822      	ldr	r2, [r4, #0]
 801e076:	3b00      	subs	r3, #0
 801e078:	bf18      	it	ne
 801e07a:	2301      	movne	r3, #1
 801e07c:	0692      	lsls	r2, r2, #26
 801e07e:	d42b      	bmi.n	801e0d8 <_printf_common+0xb0>
 801e080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e084:	4641      	mov	r1, r8
 801e086:	4638      	mov	r0, r7
 801e088:	47c8      	blx	r9
 801e08a:	3001      	adds	r0, #1
 801e08c:	d01e      	beq.n	801e0cc <_printf_common+0xa4>
 801e08e:	6823      	ldr	r3, [r4, #0]
 801e090:	6922      	ldr	r2, [r4, #16]
 801e092:	f003 0306 	and.w	r3, r3, #6
 801e096:	2b04      	cmp	r3, #4
 801e098:	bf02      	ittt	eq
 801e09a:	68e5      	ldreq	r5, [r4, #12]
 801e09c:	6833      	ldreq	r3, [r6, #0]
 801e09e:	1aed      	subeq	r5, r5, r3
 801e0a0:	68a3      	ldr	r3, [r4, #8]
 801e0a2:	bf0c      	ite	eq
 801e0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e0a8:	2500      	movne	r5, #0
 801e0aa:	4293      	cmp	r3, r2
 801e0ac:	bfc4      	itt	gt
 801e0ae:	1a9b      	subgt	r3, r3, r2
 801e0b0:	18ed      	addgt	r5, r5, r3
 801e0b2:	2600      	movs	r6, #0
 801e0b4:	341a      	adds	r4, #26
 801e0b6:	42b5      	cmp	r5, r6
 801e0b8:	d11a      	bne.n	801e0f0 <_printf_common+0xc8>
 801e0ba:	2000      	movs	r0, #0
 801e0bc:	e008      	b.n	801e0d0 <_printf_common+0xa8>
 801e0be:	2301      	movs	r3, #1
 801e0c0:	4652      	mov	r2, sl
 801e0c2:	4641      	mov	r1, r8
 801e0c4:	4638      	mov	r0, r7
 801e0c6:	47c8      	blx	r9
 801e0c8:	3001      	adds	r0, #1
 801e0ca:	d103      	bne.n	801e0d4 <_printf_common+0xac>
 801e0cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0d4:	3501      	adds	r5, #1
 801e0d6:	e7c6      	b.n	801e066 <_printf_common+0x3e>
 801e0d8:	18e1      	adds	r1, r4, r3
 801e0da:	1c5a      	adds	r2, r3, #1
 801e0dc:	2030      	movs	r0, #48	@ 0x30
 801e0de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e0e2:	4422      	add	r2, r4
 801e0e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e0e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e0ec:	3302      	adds	r3, #2
 801e0ee:	e7c7      	b.n	801e080 <_printf_common+0x58>
 801e0f0:	2301      	movs	r3, #1
 801e0f2:	4622      	mov	r2, r4
 801e0f4:	4641      	mov	r1, r8
 801e0f6:	4638      	mov	r0, r7
 801e0f8:	47c8      	blx	r9
 801e0fa:	3001      	adds	r0, #1
 801e0fc:	d0e6      	beq.n	801e0cc <_printf_common+0xa4>
 801e0fe:	3601      	adds	r6, #1
 801e100:	e7d9      	b.n	801e0b6 <_printf_common+0x8e>
	...

0801e104 <_printf_i>:
 801e104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e108:	7e0f      	ldrb	r7, [r1, #24]
 801e10a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e10c:	2f78      	cmp	r7, #120	@ 0x78
 801e10e:	4691      	mov	r9, r2
 801e110:	4680      	mov	r8, r0
 801e112:	460c      	mov	r4, r1
 801e114:	469a      	mov	sl, r3
 801e116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e11a:	d807      	bhi.n	801e12c <_printf_i+0x28>
 801e11c:	2f62      	cmp	r7, #98	@ 0x62
 801e11e:	d80a      	bhi.n	801e136 <_printf_i+0x32>
 801e120:	2f00      	cmp	r7, #0
 801e122:	f000 80d2 	beq.w	801e2ca <_printf_i+0x1c6>
 801e126:	2f58      	cmp	r7, #88	@ 0x58
 801e128:	f000 80b9 	beq.w	801e29e <_printf_i+0x19a>
 801e12c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e134:	e03a      	b.n	801e1ac <_printf_i+0xa8>
 801e136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e13a:	2b15      	cmp	r3, #21
 801e13c:	d8f6      	bhi.n	801e12c <_printf_i+0x28>
 801e13e:	a101      	add	r1, pc, #4	@ (adr r1, 801e144 <_printf_i+0x40>)
 801e140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e144:	0801e19d 	.word	0x0801e19d
 801e148:	0801e1b1 	.word	0x0801e1b1
 801e14c:	0801e12d 	.word	0x0801e12d
 801e150:	0801e12d 	.word	0x0801e12d
 801e154:	0801e12d 	.word	0x0801e12d
 801e158:	0801e12d 	.word	0x0801e12d
 801e15c:	0801e1b1 	.word	0x0801e1b1
 801e160:	0801e12d 	.word	0x0801e12d
 801e164:	0801e12d 	.word	0x0801e12d
 801e168:	0801e12d 	.word	0x0801e12d
 801e16c:	0801e12d 	.word	0x0801e12d
 801e170:	0801e2b1 	.word	0x0801e2b1
 801e174:	0801e1db 	.word	0x0801e1db
 801e178:	0801e26b 	.word	0x0801e26b
 801e17c:	0801e12d 	.word	0x0801e12d
 801e180:	0801e12d 	.word	0x0801e12d
 801e184:	0801e2d3 	.word	0x0801e2d3
 801e188:	0801e12d 	.word	0x0801e12d
 801e18c:	0801e1db 	.word	0x0801e1db
 801e190:	0801e12d 	.word	0x0801e12d
 801e194:	0801e12d 	.word	0x0801e12d
 801e198:	0801e273 	.word	0x0801e273
 801e19c:	6833      	ldr	r3, [r6, #0]
 801e19e:	1d1a      	adds	r2, r3, #4
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	6032      	str	r2, [r6, #0]
 801e1a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e1a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e1ac:	2301      	movs	r3, #1
 801e1ae:	e09d      	b.n	801e2ec <_printf_i+0x1e8>
 801e1b0:	6833      	ldr	r3, [r6, #0]
 801e1b2:	6820      	ldr	r0, [r4, #0]
 801e1b4:	1d19      	adds	r1, r3, #4
 801e1b6:	6031      	str	r1, [r6, #0]
 801e1b8:	0606      	lsls	r6, r0, #24
 801e1ba:	d501      	bpl.n	801e1c0 <_printf_i+0xbc>
 801e1bc:	681d      	ldr	r5, [r3, #0]
 801e1be:	e003      	b.n	801e1c8 <_printf_i+0xc4>
 801e1c0:	0645      	lsls	r5, r0, #25
 801e1c2:	d5fb      	bpl.n	801e1bc <_printf_i+0xb8>
 801e1c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e1c8:	2d00      	cmp	r5, #0
 801e1ca:	da03      	bge.n	801e1d4 <_printf_i+0xd0>
 801e1cc:	232d      	movs	r3, #45	@ 0x2d
 801e1ce:	426d      	negs	r5, r5
 801e1d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e1d4:	4859      	ldr	r0, [pc, #356]	@ (801e33c <_printf_i+0x238>)
 801e1d6:	230a      	movs	r3, #10
 801e1d8:	e011      	b.n	801e1fe <_printf_i+0xfa>
 801e1da:	6821      	ldr	r1, [r4, #0]
 801e1dc:	6833      	ldr	r3, [r6, #0]
 801e1de:	0608      	lsls	r0, r1, #24
 801e1e0:	f853 5b04 	ldr.w	r5, [r3], #4
 801e1e4:	d402      	bmi.n	801e1ec <_printf_i+0xe8>
 801e1e6:	0649      	lsls	r1, r1, #25
 801e1e8:	bf48      	it	mi
 801e1ea:	b2ad      	uxthmi	r5, r5
 801e1ec:	2f6f      	cmp	r7, #111	@ 0x6f
 801e1ee:	4853      	ldr	r0, [pc, #332]	@ (801e33c <_printf_i+0x238>)
 801e1f0:	6033      	str	r3, [r6, #0]
 801e1f2:	bf14      	ite	ne
 801e1f4:	230a      	movne	r3, #10
 801e1f6:	2308      	moveq	r3, #8
 801e1f8:	2100      	movs	r1, #0
 801e1fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e1fe:	6866      	ldr	r6, [r4, #4]
 801e200:	60a6      	str	r6, [r4, #8]
 801e202:	2e00      	cmp	r6, #0
 801e204:	bfa2      	ittt	ge
 801e206:	6821      	ldrge	r1, [r4, #0]
 801e208:	f021 0104 	bicge.w	r1, r1, #4
 801e20c:	6021      	strge	r1, [r4, #0]
 801e20e:	b90d      	cbnz	r5, 801e214 <_printf_i+0x110>
 801e210:	2e00      	cmp	r6, #0
 801e212:	d04b      	beq.n	801e2ac <_printf_i+0x1a8>
 801e214:	4616      	mov	r6, r2
 801e216:	fbb5 f1f3 	udiv	r1, r5, r3
 801e21a:	fb03 5711 	mls	r7, r3, r1, r5
 801e21e:	5dc7      	ldrb	r7, [r0, r7]
 801e220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e224:	462f      	mov	r7, r5
 801e226:	42bb      	cmp	r3, r7
 801e228:	460d      	mov	r5, r1
 801e22a:	d9f4      	bls.n	801e216 <_printf_i+0x112>
 801e22c:	2b08      	cmp	r3, #8
 801e22e:	d10b      	bne.n	801e248 <_printf_i+0x144>
 801e230:	6823      	ldr	r3, [r4, #0]
 801e232:	07df      	lsls	r7, r3, #31
 801e234:	d508      	bpl.n	801e248 <_printf_i+0x144>
 801e236:	6923      	ldr	r3, [r4, #16]
 801e238:	6861      	ldr	r1, [r4, #4]
 801e23a:	4299      	cmp	r1, r3
 801e23c:	bfde      	ittt	le
 801e23e:	2330      	movle	r3, #48	@ 0x30
 801e240:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e244:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801e248:	1b92      	subs	r2, r2, r6
 801e24a:	6122      	str	r2, [r4, #16]
 801e24c:	f8cd a000 	str.w	sl, [sp]
 801e250:	464b      	mov	r3, r9
 801e252:	aa03      	add	r2, sp, #12
 801e254:	4621      	mov	r1, r4
 801e256:	4640      	mov	r0, r8
 801e258:	f7ff fee6 	bl	801e028 <_printf_common>
 801e25c:	3001      	adds	r0, #1
 801e25e:	d14a      	bne.n	801e2f6 <_printf_i+0x1f2>
 801e260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e264:	b004      	add	sp, #16
 801e266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e26a:	6823      	ldr	r3, [r4, #0]
 801e26c:	f043 0320 	orr.w	r3, r3, #32
 801e270:	6023      	str	r3, [r4, #0]
 801e272:	4833      	ldr	r0, [pc, #204]	@ (801e340 <_printf_i+0x23c>)
 801e274:	2778      	movs	r7, #120	@ 0x78
 801e276:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e27a:	6823      	ldr	r3, [r4, #0]
 801e27c:	6831      	ldr	r1, [r6, #0]
 801e27e:	061f      	lsls	r7, r3, #24
 801e280:	f851 5b04 	ldr.w	r5, [r1], #4
 801e284:	d402      	bmi.n	801e28c <_printf_i+0x188>
 801e286:	065f      	lsls	r7, r3, #25
 801e288:	bf48      	it	mi
 801e28a:	b2ad      	uxthmi	r5, r5
 801e28c:	6031      	str	r1, [r6, #0]
 801e28e:	07d9      	lsls	r1, r3, #31
 801e290:	bf44      	itt	mi
 801e292:	f043 0320 	orrmi.w	r3, r3, #32
 801e296:	6023      	strmi	r3, [r4, #0]
 801e298:	b11d      	cbz	r5, 801e2a2 <_printf_i+0x19e>
 801e29a:	2310      	movs	r3, #16
 801e29c:	e7ac      	b.n	801e1f8 <_printf_i+0xf4>
 801e29e:	4827      	ldr	r0, [pc, #156]	@ (801e33c <_printf_i+0x238>)
 801e2a0:	e7e9      	b.n	801e276 <_printf_i+0x172>
 801e2a2:	6823      	ldr	r3, [r4, #0]
 801e2a4:	f023 0320 	bic.w	r3, r3, #32
 801e2a8:	6023      	str	r3, [r4, #0]
 801e2aa:	e7f6      	b.n	801e29a <_printf_i+0x196>
 801e2ac:	4616      	mov	r6, r2
 801e2ae:	e7bd      	b.n	801e22c <_printf_i+0x128>
 801e2b0:	6833      	ldr	r3, [r6, #0]
 801e2b2:	6825      	ldr	r5, [r4, #0]
 801e2b4:	6961      	ldr	r1, [r4, #20]
 801e2b6:	1d18      	adds	r0, r3, #4
 801e2b8:	6030      	str	r0, [r6, #0]
 801e2ba:	062e      	lsls	r6, r5, #24
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	d501      	bpl.n	801e2c4 <_printf_i+0x1c0>
 801e2c0:	6019      	str	r1, [r3, #0]
 801e2c2:	e002      	b.n	801e2ca <_printf_i+0x1c6>
 801e2c4:	0668      	lsls	r0, r5, #25
 801e2c6:	d5fb      	bpl.n	801e2c0 <_printf_i+0x1bc>
 801e2c8:	8019      	strh	r1, [r3, #0]
 801e2ca:	2300      	movs	r3, #0
 801e2cc:	6123      	str	r3, [r4, #16]
 801e2ce:	4616      	mov	r6, r2
 801e2d0:	e7bc      	b.n	801e24c <_printf_i+0x148>
 801e2d2:	6833      	ldr	r3, [r6, #0]
 801e2d4:	1d1a      	adds	r2, r3, #4
 801e2d6:	6032      	str	r2, [r6, #0]
 801e2d8:	681e      	ldr	r6, [r3, #0]
 801e2da:	6862      	ldr	r2, [r4, #4]
 801e2dc:	2100      	movs	r1, #0
 801e2de:	4630      	mov	r0, r6
 801e2e0:	f7e2 f816 	bl	8000310 <memchr>
 801e2e4:	b108      	cbz	r0, 801e2ea <_printf_i+0x1e6>
 801e2e6:	1b80      	subs	r0, r0, r6
 801e2e8:	6060      	str	r0, [r4, #4]
 801e2ea:	6863      	ldr	r3, [r4, #4]
 801e2ec:	6123      	str	r3, [r4, #16]
 801e2ee:	2300      	movs	r3, #0
 801e2f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e2f4:	e7aa      	b.n	801e24c <_printf_i+0x148>
 801e2f6:	6923      	ldr	r3, [r4, #16]
 801e2f8:	4632      	mov	r2, r6
 801e2fa:	4649      	mov	r1, r9
 801e2fc:	4640      	mov	r0, r8
 801e2fe:	47d0      	blx	sl
 801e300:	3001      	adds	r0, #1
 801e302:	d0ad      	beq.n	801e260 <_printf_i+0x15c>
 801e304:	6823      	ldr	r3, [r4, #0]
 801e306:	079b      	lsls	r3, r3, #30
 801e308:	d413      	bmi.n	801e332 <_printf_i+0x22e>
 801e30a:	68e0      	ldr	r0, [r4, #12]
 801e30c:	9b03      	ldr	r3, [sp, #12]
 801e30e:	4298      	cmp	r0, r3
 801e310:	bfb8      	it	lt
 801e312:	4618      	movlt	r0, r3
 801e314:	e7a6      	b.n	801e264 <_printf_i+0x160>
 801e316:	2301      	movs	r3, #1
 801e318:	4632      	mov	r2, r6
 801e31a:	4649      	mov	r1, r9
 801e31c:	4640      	mov	r0, r8
 801e31e:	47d0      	blx	sl
 801e320:	3001      	adds	r0, #1
 801e322:	d09d      	beq.n	801e260 <_printf_i+0x15c>
 801e324:	3501      	adds	r5, #1
 801e326:	68e3      	ldr	r3, [r4, #12]
 801e328:	9903      	ldr	r1, [sp, #12]
 801e32a:	1a5b      	subs	r3, r3, r1
 801e32c:	42ab      	cmp	r3, r5
 801e32e:	dcf2      	bgt.n	801e316 <_printf_i+0x212>
 801e330:	e7eb      	b.n	801e30a <_printf_i+0x206>
 801e332:	2500      	movs	r5, #0
 801e334:	f104 0619 	add.w	r6, r4, #25
 801e338:	e7f5      	b.n	801e326 <_printf_i+0x222>
 801e33a:	bf00      	nop
 801e33c:	08020cfb 	.word	0x08020cfb
 801e340:	08020d0c 	.word	0x08020d0c

0801e344 <__sflush_r>:
 801e344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e34c:	0716      	lsls	r6, r2, #28
 801e34e:	4605      	mov	r5, r0
 801e350:	460c      	mov	r4, r1
 801e352:	d454      	bmi.n	801e3fe <__sflush_r+0xba>
 801e354:	684b      	ldr	r3, [r1, #4]
 801e356:	2b00      	cmp	r3, #0
 801e358:	dc02      	bgt.n	801e360 <__sflush_r+0x1c>
 801e35a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e35c:	2b00      	cmp	r3, #0
 801e35e:	dd48      	ble.n	801e3f2 <__sflush_r+0xae>
 801e360:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e362:	2e00      	cmp	r6, #0
 801e364:	d045      	beq.n	801e3f2 <__sflush_r+0xae>
 801e366:	2300      	movs	r3, #0
 801e368:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e36c:	682f      	ldr	r7, [r5, #0]
 801e36e:	6a21      	ldr	r1, [r4, #32]
 801e370:	602b      	str	r3, [r5, #0]
 801e372:	d030      	beq.n	801e3d6 <__sflush_r+0x92>
 801e374:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e376:	89a3      	ldrh	r3, [r4, #12]
 801e378:	0759      	lsls	r1, r3, #29
 801e37a:	d505      	bpl.n	801e388 <__sflush_r+0x44>
 801e37c:	6863      	ldr	r3, [r4, #4]
 801e37e:	1ad2      	subs	r2, r2, r3
 801e380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e382:	b10b      	cbz	r3, 801e388 <__sflush_r+0x44>
 801e384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e386:	1ad2      	subs	r2, r2, r3
 801e388:	2300      	movs	r3, #0
 801e38a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e38c:	6a21      	ldr	r1, [r4, #32]
 801e38e:	4628      	mov	r0, r5
 801e390:	47b0      	blx	r6
 801e392:	1c43      	adds	r3, r0, #1
 801e394:	89a3      	ldrh	r3, [r4, #12]
 801e396:	d106      	bne.n	801e3a6 <__sflush_r+0x62>
 801e398:	6829      	ldr	r1, [r5, #0]
 801e39a:	291d      	cmp	r1, #29
 801e39c:	d82b      	bhi.n	801e3f6 <__sflush_r+0xb2>
 801e39e:	4a2a      	ldr	r2, [pc, #168]	@ (801e448 <__sflush_r+0x104>)
 801e3a0:	410a      	asrs	r2, r1
 801e3a2:	07d6      	lsls	r6, r2, #31
 801e3a4:	d427      	bmi.n	801e3f6 <__sflush_r+0xb2>
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	6062      	str	r2, [r4, #4]
 801e3aa:	04d9      	lsls	r1, r3, #19
 801e3ac:	6922      	ldr	r2, [r4, #16]
 801e3ae:	6022      	str	r2, [r4, #0]
 801e3b0:	d504      	bpl.n	801e3bc <__sflush_r+0x78>
 801e3b2:	1c42      	adds	r2, r0, #1
 801e3b4:	d101      	bne.n	801e3ba <__sflush_r+0x76>
 801e3b6:	682b      	ldr	r3, [r5, #0]
 801e3b8:	b903      	cbnz	r3, 801e3bc <__sflush_r+0x78>
 801e3ba:	6560      	str	r0, [r4, #84]	@ 0x54
 801e3bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e3be:	602f      	str	r7, [r5, #0]
 801e3c0:	b1b9      	cbz	r1, 801e3f2 <__sflush_r+0xae>
 801e3c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e3c6:	4299      	cmp	r1, r3
 801e3c8:	d002      	beq.n	801e3d0 <__sflush_r+0x8c>
 801e3ca:	4628      	mov	r0, r5
 801e3cc:	f7ff fc82 	bl	801dcd4 <_free_r>
 801e3d0:	2300      	movs	r3, #0
 801e3d2:	6363      	str	r3, [r4, #52]	@ 0x34
 801e3d4:	e00d      	b.n	801e3f2 <__sflush_r+0xae>
 801e3d6:	2301      	movs	r3, #1
 801e3d8:	4628      	mov	r0, r5
 801e3da:	47b0      	blx	r6
 801e3dc:	4602      	mov	r2, r0
 801e3de:	1c50      	adds	r0, r2, #1
 801e3e0:	d1c9      	bne.n	801e376 <__sflush_r+0x32>
 801e3e2:	682b      	ldr	r3, [r5, #0]
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d0c6      	beq.n	801e376 <__sflush_r+0x32>
 801e3e8:	2b1d      	cmp	r3, #29
 801e3ea:	d001      	beq.n	801e3f0 <__sflush_r+0xac>
 801e3ec:	2b16      	cmp	r3, #22
 801e3ee:	d11e      	bne.n	801e42e <__sflush_r+0xea>
 801e3f0:	602f      	str	r7, [r5, #0]
 801e3f2:	2000      	movs	r0, #0
 801e3f4:	e022      	b.n	801e43c <__sflush_r+0xf8>
 801e3f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e3fa:	b21b      	sxth	r3, r3
 801e3fc:	e01b      	b.n	801e436 <__sflush_r+0xf2>
 801e3fe:	690f      	ldr	r7, [r1, #16]
 801e400:	2f00      	cmp	r7, #0
 801e402:	d0f6      	beq.n	801e3f2 <__sflush_r+0xae>
 801e404:	0793      	lsls	r3, r2, #30
 801e406:	680e      	ldr	r6, [r1, #0]
 801e408:	bf08      	it	eq
 801e40a:	694b      	ldreq	r3, [r1, #20]
 801e40c:	600f      	str	r7, [r1, #0]
 801e40e:	bf18      	it	ne
 801e410:	2300      	movne	r3, #0
 801e412:	eba6 0807 	sub.w	r8, r6, r7
 801e416:	608b      	str	r3, [r1, #8]
 801e418:	f1b8 0f00 	cmp.w	r8, #0
 801e41c:	dde9      	ble.n	801e3f2 <__sflush_r+0xae>
 801e41e:	6a21      	ldr	r1, [r4, #32]
 801e420:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e422:	4643      	mov	r3, r8
 801e424:	463a      	mov	r2, r7
 801e426:	4628      	mov	r0, r5
 801e428:	47b0      	blx	r6
 801e42a:	2800      	cmp	r0, #0
 801e42c:	dc08      	bgt.n	801e440 <__sflush_r+0xfc>
 801e42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e436:	81a3      	strh	r3, [r4, #12]
 801e438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e440:	4407      	add	r7, r0
 801e442:	eba8 0800 	sub.w	r8, r8, r0
 801e446:	e7e7      	b.n	801e418 <__sflush_r+0xd4>
 801e448:	dfbffffe 	.word	0xdfbffffe

0801e44c <_fflush_r>:
 801e44c:	b538      	push	{r3, r4, r5, lr}
 801e44e:	690b      	ldr	r3, [r1, #16]
 801e450:	4605      	mov	r5, r0
 801e452:	460c      	mov	r4, r1
 801e454:	b913      	cbnz	r3, 801e45c <_fflush_r+0x10>
 801e456:	2500      	movs	r5, #0
 801e458:	4628      	mov	r0, r5
 801e45a:	bd38      	pop	{r3, r4, r5, pc}
 801e45c:	b118      	cbz	r0, 801e466 <_fflush_r+0x1a>
 801e45e:	6a03      	ldr	r3, [r0, #32]
 801e460:	b90b      	cbnz	r3, 801e466 <_fflush_r+0x1a>
 801e462:	f7ff f8e1 	bl	801d628 <__sinit>
 801e466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d0f3      	beq.n	801e456 <_fflush_r+0xa>
 801e46e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e470:	07d0      	lsls	r0, r2, #31
 801e472:	d404      	bmi.n	801e47e <_fflush_r+0x32>
 801e474:	0599      	lsls	r1, r3, #22
 801e476:	d402      	bmi.n	801e47e <_fflush_r+0x32>
 801e478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e47a:	f7ff fbe8 	bl	801dc4e <__retarget_lock_acquire_recursive>
 801e47e:	4628      	mov	r0, r5
 801e480:	4621      	mov	r1, r4
 801e482:	f7ff ff5f 	bl	801e344 <__sflush_r>
 801e486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e488:	07da      	lsls	r2, r3, #31
 801e48a:	4605      	mov	r5, r0
 801e48c:	d4e4      	bmi.n	801e458 <_fflush_r+0xc>
 801e48e:	89a3      	ldrh	r3, [r4, #12]
 801e490:	059b      	lsls	r3, r3, #22
 801e492:	d4e1      	bmi.n	801e458 <_fflush_r+0xc>
 801e494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e496:	f7ff fbdb 	bl	801dc50 <__retarget_lock_release_recursive>
 801e49a:	e7dd      	b.n	801e458 <_fflush_r+0xc>

0801e49c <fiprintf>:
 801e49c:	b40e      	push	{r1, r2, r3}
 801e49e:	b503      	push	{r0, r1, lr}
 801e4a0:	4601      	mov	r1, r0
 801e4a2:	ab03      	add	r3, sp, #12
 801e4a4:	4805      	ldr	r0, [pc, #20]	@ (801e4bc <fiprintf+0x20>)
 801e4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e4aa:	6800      	ldr	r0, [r0, #0]
 801e4ac:	9301      	str	r3, [sp, #4]
 801e4ae:	f000 f8bb 	bl	801e628 <_vfiprintf_r>
 801e4b2:	b002      	add	sp, #8
 801e4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e4b8:	b003      	add	sp, #12
 801e4ba:	4770      	bx	lr
 801e4bc:	24001210 	.word	0x24001210

0801e4c0 <__swhatbuf_r>:
 801e4c0:	b570      	push	{r4, r5, r6, lr}
 801e4c2:	460c      	mov	r4, r1
 801e4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4c8:	2900      	cmp	r1, #0
 801e4ca:	b096      	sub	sp, #88	@ 0x58
 801e4cc:	4615      	mov	r5, r2
 801e4ce:	461e      	mov	r6, r3
 801e4d0:	da0d      	bge.n	801e4ee <__swhatbuf_r+0x2e>
 801e4d2:	89a3      	ldrh	r3, [r4, #12]
 801e4d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e4d8:	f04f 0100 	mov.w	r1, #0
 801e4dc:	bf14      	ite	ne
 801e4de:	2340      	movne	r3, #64	@ 0x40
 801e4e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e4e4:	2000      	movs	r0, #0
 801e4e6:	6031      	str	r1, [r6, #0]
 801e4e8:	602b      	str	r3, [r5, #0]
 801e4ea:	b016      	add	sp, #88	@ 0x58
 801e4ec:	bd70      	pop	{r4, r5, r6, pc}
 801e4ee:	466a      	mov	r2, sp
 801e4f0:	f000 f848 	bl	801e584 <_fstat_r>
 801e4f4:	2800      	cmp	r0, #0
 801e4f6:	dbec      	blt.n	801e4d2 <__swhatbuf_r+0x12>
 801e4f8:	9901      	ldr	r1, [sp, #4]
 801e4fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e4fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e502:	4259      	negs	r1, r3
 801e504:	4159      	adcs	r1, r3
 801e506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e50a:	e7eb      	b.n	801e4e4 <__swhatbuf_r+0x24>

0801e50c <__smakebuf_r>:
 801e50c:	898b      	ldrh	r3, [r1, #12]
 801e50e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e510:	079d      	lsls	r5, r3, #30
 801e512:	4606      	mov	r6, r0
 801e514:	460c      	mov	r4, r1
 801e516:	d507      	bpl.n	801e528 <__smakebuf_r+0x1c>
 801e518:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e51c:	6023      	str	r3, [r4, #0]
 801e51e:	6123      	str	r3, [r4, #16]
 801e520:	2301      	movs	r3, #1
 801e522:	6163      	str	r3, [r4, #20]
 801e524:	b003      	add	sp, #12
 801e526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e528:	ab01      	add	r3, sp, #4
 801e52a:	466a      	mov	r2, sp
 801e52c:	f7ff ffc8 	bl	801e4c0 <__swhatbuf_r>
 801e530:	9f00      	ldr	r7, [sp, #0]
 801e532:	4605      	mov	r5, r0
 801e534:	4639      	mov	r1, r7
 801e536:	4630      	mov	r0, r6
 801e538:	f7fe fe44 	bl	801d1c4 <_malloc_r>
 801e53c:	b948      	cbnz	r0, 801e552 <__smakebuf_r+0x46>
 801e53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e542:	059a      	lsls	r2, r3, #22
 801e544:	d4ee      	bmi.n	801e524 <__smakebuf_r+0x18>
 801e546:	f023 0303 	bic.w	r3, r3, #3
 801e54a:	f043 0302 	orr.w	r3, r3, #2
 801e54e:	81a3      	strh	r3, [r4, #12]
 801e550:	e7e2      	b.n	801e518 <__smakebuf_r+0xc>
 801e552:	89a3      	ldrh	r3, [r4, #12]
 801e554:	6020      	str	r0, [r4, #0]
 801e556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e55a:	81a3      	strh	r3, [r4, #12]
 801e55c:	9b01      	ldr	r3, [sp, #4]
 801e55e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e562:	b15b      	cbz	r3, 801e57c <__smakebuf_r+0x70>
 801e564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e568:	4630      	mov	r0, r6
 801e56a:	f000 f81d 	bl	801e5a8 <_isatty_r>
 801e56e:	b128      	cbz	r0, 801e57c <__smakebuf_r+0x70>
 801e570:	89a3      	ldrh	r3, [r4, #12]
 801e572:	f023 0303 	bic.w	r3, r3, #3
 801e576:	f043 0301 	orr.w	r3, r3, #1
 801e57a:	81a3      	strh	r3, [r4, #12]
 801e57c:	89a3      	ldrh	r3, [r4, #12]
 801e57e:	431d      	orrs	r5, r3
 801e580:	81a5      	strh	r5, [r4, #12]
 801e582:	e7cf      	b.n	801e524 <__smakebuf_r+0x18>

0801e584 <_fstat_r>:
 801e584:	b538      	push	{r3, r4, r5, lr}
 801e586:	4d07      	ldr	r5, [pc, #28]	@ (801e5a4 <_fstat_r+0x20>)
 801e588:	2300      	movs	r3, #0
 801e58a:	4604      	mov	r4, r0
 801e58c:	4608      	mov	r0, r1
 801e58e:	4611      	mov	r1, r2
 801e590:	602b      	str	r3, [r5, #0]
 801e592:	f7e3 fbc3 	bl	8001d1c <_fstat>
 801e596:	1c43      	adds	r3, r0, #1
 801e598:	d102      	bne.n	801e5a0 <_fstat_r+0x1c>
 801e59a:	682b      	ldr	r3, [r5, #0]
 801e59c:	b103      	cbz	r3, 801e5a0 <_fstat_r+0x1c>
 801e59e:	6023      	str	r3, [r4, #0]
 801e5a0:	bd38      	pop	{r3, r4, r5, pc}
 801e5a2:	bf00      	nop
 801e5a4:	24069840 	.word	0x24069840

0801e5a8 <_isatty_r>:
 801e5a8:	b538      	push	{r3, r4, r5, lr}
 801e5aa:	4d06      	ldr	r5, [pc, #24]	@ (801e5c4 <_isatty_r+0x1c>)
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	4604      	mov	r4, r0
 801e5b0:	4608      	mov	r0, r1
 801e5b2:	602b      	str	r3, [r5, #0]
 801e5b4:	f7e3 fbc2 	bl	8001d3c <_isatty>
 801e5b8:	1c43      	adds	r3, r0, #1
 801e5ba:	d102      	bne.n	801e5c2 <_isatty_r+0x1a>
 801e5bc:	682b      	ldr	r3, [r5, #0]
 801e5be:	b103      	cbz	r3, 801e5c2 <_isatty_r+0x1a>
 801e5c0:	6023      	str	r3, [r4, #0]
 801e5c2:	bd38      	pop	{r3, r4, r5, pc}
 801e5c4:	24069840 	.word	0x24069840

0801e5c8 <abort>:
 801e5c8:	b508      	push	{r3, lr}
 801e5ca:	2006      	movs	r0, #6
 801e5cc:	f000 f96c 	bl	801e8a8 <raise>
 801e5d0:	2001      	movs	r0, #1
 801e5d2:	f7e3 fb53 	bl	8001c7c <_exit>

0801e5d6 <__sfputc_r>:
 801e5d6:	6893      	ldr	r3, [r2, #8]
 801e5d8:	3b01      	subs	r3, #1
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	b410      	push	{r4}
 801e5de:	6093      	str	r3, [r2, #8]
 801e5e0:	da08      	bge.n	801e5f4 <__sfputc_r+0x1e>
 801e5e2:	6994      	ldr	r4, [r2, #24]
 801e5e4:	42a3      	cmp	r3, r4
 801e5e6:	db01      	blt.n	801e5ec <__sfputc_r+0x16>
 801e5e8:	290a      	cmp	r1, #10
 801e5ea:	d103      	bne.n	801e5f4 <__sfputc_r+0x1e>
 801e5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e5f0:	f7ff b95a 	b.w	801d8a8 <__swbuf_r>
 801e5f4:	6813      	ldr	r3, [r2, #0]
 801e5f6:	1c58      	adds	r0, r3, #1
 801e5f8:	6010      	str	r0, [r2, #0]
 801e5fa:	7019      	strb	r1, [r3, #0]
 801e5fc:	4608      	mov	r0, r1
 801e5fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e602:	4770      	bx	lr

0801e604 <__sfputs_r>:
 801e604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e606:	4606      	mov	r6, r0
 801e608:	460f      	mov	r7, r1
 801e60a:	4614      	mov	r4, r2
 801e60c:	18d5      	adds	r5, r2, r3
 801e60e:	42ac      	cmp	r4, r5
 801e610:	d101      	bne.n	801e616 <__sfputs_r+0x12>
 801e612:	2000      	movs	r0, #0
 801e614:	e007      	b.n	801e626 <__sfputs_r+0x22>
 801e616:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e61a:	463a      	mov	r2, r7
 801e61c:	4630      	mov	r0, r6
 801e61e:	f7ff ffda 	bl	801e5d6 <__sfputc_r>
 801e622:	1c43      	adds	r3, r0, #1
 801e624:	d1f3      	bne.n	801e60e <__sfputs_r+0xa>
 801e626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e628 <_vfiprintf_r>:
 801e628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e62c:	460d      	mov	r5, r1
 801e62e:	b09d      	sub	sp, #116	@ 0x74
 801e630:	4614      	mov	r4, r2
 801e632:	4698      	mov	r8, r3
 801e634:	4606      	mov	r6, r0
 801e636:	b118      	cbz	r0, 801e640 <_vfiprintf_r+0x18>
 801e638:	6a03      	ldr	r3, [r0, #32]
 801e63a:	b90b      	cbnz	r3, 801e640 <_vfiprintf_r+0x18>
 801e63c:	f7fe fff4 	bl	801d628 <__sinit>
 801e640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e642:	07d9      	lsls	r1, r3, #31
 801e644:	d405      	bmi.n	801e652 <_vfiprintf_r+0x2a>
 801e646:	89ab      	ldrh	r3, [r5, #12]
 801e648:	059a      	lsls	r2, r3, #22
 801e64a:	d402      	bmi.n	801e652 <_vfiprintf_r+0x2a>
 801e64c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e64e:	f7ff fafe 	bl	801dc4e <__retarget_lock_acquire_recursive>
 801e652:	89ab      	ldrh	r3, [r5, #12]
 801e654:	071b      	lsls	r3, r3, #28
 801e656:	d501      	bpl.n	801e65c <_vfiprintf_r+0x34>
 801e658:	692b      	ldr	r3, [r5, #16]
 801e65a:	b99b      	cbnz	r3, 801e684 <_vfiprintf_r+0x5c>
 801e65c:	4629      	mov	r1, r5
 801e65e:	4630      	mov	r0, r6
 801e660:	f7ff f960 	bl	801d924 <__swsetup_r>
 801e664:	b170      	cbz	r0, 801e684 <_vfiprintf_r+0x5c>
 801e666:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e668:	07dc      	lsls	r4, r3, #31
 801e66a:	d504      	bpl.n	801e676 <_vfiprintf_r+0x4e>
 801e66c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e670:	b01d      	add	sp, #116	@ 0x74
 801e672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e676:	89ab      	ldrh	r3, [r5, #12]
 801e678:	0598      	lsls	r0, r3, #22
 801e67a:	d4f7      	bmi.n	801e66c <_vfiprintf_r+0x44>
 801e67c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e67e:	f7ff fae7 	bl	801dc50 <__retarget_lock_release_recursive>
 801e682:	e7f3      	b.n	801e66c <_vfiprintf_r+0x44>
 801e684:	2300      	movs	r3, #0
 801e686:	9309      	str	r3, [sp, #36]	@ 0x24
 801e688:	2320      	movs	r3, #32
 801e68a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e68e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e692:	2330      	movs	r3, #48	@ 0x30
 801e694:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e844 <_vfiprintf_r+0x21c>
 801e698:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e69c:	f04f 0901 	mov.w	r9, #1
 801e6a0:	4623      	mov	r3, r4
 801e6a2:	469a      	mov	sl, r3
 801e6a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e6a8:	b10a      	cbz	r2, 801e6ae <_vfiprintf_r+0x86>
 801e6aa:	2a25      	cmp	r2, #37	@ 0x25
 801e6ac:	d1f9      	bne.n	801e6a2 <_vfiprintf_r+0x7a>
 801e6ae:	ebba 0b04 	subs.w	fp, sl, r4
 801e6b2:	d00b      	beq.n	801e6cc <_vfiprintf_r+0xa4>
 801e6b4:	465b      	mov	r3, fp
 801e6b6:	4622      	mov	r2, r4
 801e6b8:	4629      	mov	r1, r5
 801e6ba:	4630      	mov	r0, r6
 801e6bc:	f7ff ffa2 	bl	801e604 <__sfputs_r>
 801e6c0:	3001      	adds	r0, #1
 801e6c2:	f000 80a7 	beq.w	801e814 <_vfiprintf_r+0x1ec>
 801e6c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e6c8:	445a      	add	r2, fp
 801e6ca:	9209      	str	r2, [sp, #36]	@ 0x24
 801e6cc:	f89a 3000 	ldrb.w	r3, [sl]
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	f000 809f 	beq.w	801e814 <_vfiprintf_r+0x1ec>
 801e6d6:	2300      	movs	r3, #0
 801e6d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e6dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e6e0:	f10a 0a01 	add.w	sl, sl, #1
 801e6e4:	9304      	str	r3, [sp, #16]
 801e6e6:	9307      	str	r3, [sp, #28]
 801e6e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e6ec:	931a      	str	r3, [sp, #104]	@ 0x68
 801e6ee:	4654      	mov	r4, sl
 801e6f0:	2205      	movs	r2, #5
 801e6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6f6:	4853      	ldr	r0, [pc, #332]	@ (801e844 <_vfiprintf_r+0x21c>)
 801e6f8:	f7e1 fe0a 	bl	8000310 <memchr>
 801e6fc:	9a04      	ldr	r2, [sp, #16]
 801e6fe:	b9d8      	cbnz	r0, 801e738 <_vfiprintf_r+0x110>
 801e700:	06d1      	lsls	r1, r2, #27
 801e702:	bf44      	itt	mi
 801e704:	2320      	movmi	r3, #32
 801e706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e70a:	0713      	lsls	r3, r2, #28
 801e70c:	bf44      	itt	mi
 801e70e:	232b      	movmi	r3, #43	@ 0x2b
 801e710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e714:	f89a 3000 	ldrb.w	r3, [sl]
 801e718:	2b2a      	cmp	r3, #42	@ 0x2a
 801e71a:	d015      	beq.n	801e748 <_vfiprintf_r+0x120>
 801e71c:	9a07      	ldr	r2, [sp, #28]
 801e71e:	4654      	mov	r4, sl
 801e720:	2000      	movs	r0, #0
 801e722:	f04f 0c0a 	mov.w	ip, #10
 801e726:	4621      	mov	r1, r4
 801e728:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e72c:	3b30      	subs	r3, #48	@ 0x30
 801e72e:	2b09      	cmp	r3, #9
 801e730:	d94b      	bls.n	801e7ca <_vfiprintf_r+0x1a2>
 801e732:	b1b0      	cbz	r0, 801e762 <_vfiprintf_r+0x13a>
 801e734:	9207      	str	r2, [sp, #28]
 801e736:	e014      	b.n	801e762 <_vfiprintf_r+0x13a>
 801e738:	eba0 0308 	sub.w	r3, r0, r8
 801e73c:	fa09 f303 	lsl.w	r3, r9, r3
 801e740:	4313      	orrs	r3, r2
 801e742:	9304      	str	r3, [sp, #16]
 801e744:	46a2      	mov	sl, r4
 801e746:	e7d2      	b.n	801e6ee <_vfiprintf_r+0xc6>
 801e748:	9b03      	ldr	r3, [sp, #12]
 801e74a:	1d19      	adds	r1, r3, #4
 801e74c:	681b      	ldr	r3, [r3, #0]
 801e74e:	9103      	str	r1, [sp, #12]
 801e750:	2b00      	cmp	r3, #0
 801e752:	bfbb      	ittet	lt
 801e754:	425b      	neglt	r3, r3
 801e756:	f042 0202 	orrlt.w	r2, r2, #2
 801e75a:	9307      	strge	r3, [sp, #28]
 801e75c:	9307      	strlt	r3, [sp, #28]
 801e75e:	bfb8      	it	lt
 801e760:	9204      	strlt	r2, [sp, #16]
 801e762:	7823      	ldrb	r3, [r4, #0]
 801e764:	2b2e      	cmp	r3, #46	@ 0x2e
 801e766:	d10a      	bne.n	801e77e <_vfiprintf_r+0x156>
 801e768:	7863      	ldrb	r3, [r4, #1]
 801e76a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e76c:	d132      	bne.n	801e7d4 <_vfiprintf_r+0x1ac>
 801e76e:	9b03      	ldr	r3, [sp, #12]
 801e770:	1d1a      	adds	r2, r3, #4
 801e772:	681b      	ldr	r3, [r3, #0]
 801e774:	9203      	str	r2, [sp, #12]
 801e776:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e77a:	3402      	adds	r4, #2
 801e77c:	9305      	str	r3, [sp, #20]
 801e77e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e854 <_vfiprintf_r+0x22c>
 801e782:	7821      	ldrb	r1, [r4, #0]
 801e784:	2203      	movs	r2, #3
 801e786:	4650      	mov	r0, sl
 801e788:	f7e1 fdc2 	bl	8000310 <memchr>
 801e78c:	b138      	cbz	r0, 801e79e <_vfiprintf_r+0x176>
 801e78e:	9b04      	ldr	r3, [sp, #16]
 801e790:	eba0 000a 	sub.w	r0, r0, sl
 801e794:	2240      	movs	r2, #64	@ 0x40
 801e796:	4082      	lsls	r2, r0
 801e798:	4313      	orrs	r3, r2
 801e79a:	3401      	adds	r4, #1
 801e79c:	9304      	str	r3, [sp, #16]
 801e79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7a2:	4829      	ldr	r0, [pc, #164]	@ (801e848 <_vfiprintf_r+0x220>)
 801e7a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e7a8:	2206      	movs	r2, #6
 801e7aa:	f7e1 fdb1 	bl	8000310 <memchr>
 801e7ae:	2800      	cmp	r0, #0
 801e7b0:	d03f      	beq.n	801e832 <_vfiprintf_r+0x20a>
 801e7b2:	4b26      	ldr	r3, [pc, #152]	@ (801e84c <_vfiprintf_r+0x224>)
 801e7b4:	bb1b      	cbnz	r3, 801e7fe <_vfiprintf_r+0x1d6>
 801e7b6:	9b03      	ldr	r3, [sp, #12]
 801e7b8:	3307      	adds	r3, #7
 801e7ba:	f023 0307 	bic.w	r3, r3, #7
 801e7be:	3308      	adds	r3, #8
 801e7c0:	9303      	str	r3, [sp, #12]
 801e7c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7c4:	443b      	add	r3, r7
 801e7c6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e7c8:	e76a      	b.n	801e6a0 <_vfiprintf_r+0x78>
 801e7ca:	fb0c 3202 	mla	r2, ip, r2, r3
 801e7ce:	460c      	mov	r4, r1
 801e7d0:	2001      	movs	r0, #1
 801e7d2:	e7a8      	b.n	801e726 <_vfiprintf_r+0xfe>
 801e7d4:	2300      	movs	r3, #0
 801e7d6:	3401      	adds	r4, #1
 801e7d8:	9305      	str	r3, [sp, #20]
 801e7da:	4619      	mov	r1, r3
 801e7dc:	f04f 0c0a 	mov.w	ip, #10
 801e7e0:	4620      	mov	r0, r4
 801e7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e7e6:	3a30      	subs	r2, #48	@ 0x30
 801e7e8:	2a09      	cmp	r2, #9
 801e7ea:	d903      	bls.n	801e7f4 <_vfiprintf_r+0x1cc>
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	d0c6      	beq.n	801e77e <_vfiprintf_r+0x156>
 801e7f0:	9105      	str	r1, [sp, #20]
 801e7f2:	e7c4      	b.n	801e77e <_vfiprintf_r+0x156>
 801e7f4:	fb0c 2101 	mla	r1, ip, r1, r2
 801e7f8:	4604      	mov	r4, r0
 801e7fa:	2301      	movs	r3, #1
 801e7fc:	e7f0      	b.n	801e7e0 <_vfiprintf_r+0x1b8>
 801e7fe:	ab03      	add	r3, sp, #12
 801e800:	9300      	str	r3, [sp, #0]
 801e802:	462a      	mov	r2, r5
 801e804:	4b12      	ldr	r3, [pc, #72]	@ (801e850 <_vfiprintf_r+0x228>)
 801e806:	a904      	add	r1, sp, #16
 801e808:	4630      	mov	r0, r6
 801e80a:	f3af 8000 	nop.w
 801e80e:	4607      	mov	r7, r0
 801e810:	1c78      	adds	r0, r7, #1
 801e812:	d1d6      	bne.n	801e7c2 <_vfiprintf_r+0x19a>
 801e814:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e816:	07d9      	lsls	r1, r3, #31
 801e818:	d405      	bmi.n	801e826 <_vfiprintf_r+0x1fe>
 801e81a:	89ab      	ldrh	r3, [r5, #12]
 801e81c:	059a      	lsls	r2, r3, #22
 801e81e:	d402      	bmi.n	801e826 <_vfiprintf_r+0x1fe>
 801e820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e822:	f7ff fa15 	bl	801dc50 <__retarget_lock_release_recursive>
 801e826:	89ab      	ldrh	r3, [r5, #12]
 801e828:	065b      	lsls	r3, r3, #25
 801e82a:	f53f af1f 	bmi.w	801e66c <_vfiprintf_r+0x44>
 801e82e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e830:	e71e      	b.n	801e670 <_vfiprintf_r+0x48>
 801e832:	ab03      	add	r3, sp, #12
 801e834:	9300      	str	r3, [sp, #0]
 801e836:	462a      	mov	r2, r5
 801e838:	4b05      	ldr	r3, [pc, #20]	@ (801e850 <_vfiprintf_r+0x228>)
 801e83a:	a904      	add	r1, sp, #16
 801e83c:	4630      	mov	r0, r6
 801e83e:	f7ff fc61 	bl	801e104 <_printf_i>
 801e842:	e7e4      	b.n	801e80e <_vfiprintf_r+0x1e6>
 801e844:	08020cea 	.word	0x08020cea
 801e848:	08020cf4 	.word	0x08020cf4
 801e84c:	00000000 	.word	0x00000000
 801e850:	0801e605 	.word	0x0801e605
 801e854:	08020cf0 	.word	0x08020cf0

0801e858 <_raise_r>:
 801e858:	291f      	cmp	r1, #31
 801e85a:	b538      	push	{r3, r4, r5, lr}
 801e85c:	4605      	mov	r5, r0
 801e85e:	460c      	mov	r4, r1
 801e860:	d904      	bls.n	801e86c <_raise_r+0x14>
 801e862:	2316      	movs	r3, #22
 801e864:	6003      	str	r3, [r0, #0]
 801e866:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e86a:	bd38      	pop	{r3, r4, r5, pc}
 801e86c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e86e:	b112      	cbz	r2, 801e876 <_raise_r+0x1e>
 801e870:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e874:	b94b      	cbnz	r3, 801e88a <_raise_r+0x32>
 801e876:	4628      	mov	r0, r5
 801e878:	f000 f830 	bl	801e8dc <_getpid_r>
 801e87c:	4622      	mov	r2, r4
 801e87e:	4601      	mov	r1, r0
 801e880:	4628      	mov	r0, r5
 801e882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e886:	f000 b817 	b.w	801e8b8 <_kill_r>
 801e88a:	2b01      	cmp	r3, #1
 801e88c:	d00a      	beq.n	801e8a4 <_raise_r+0x4c>
 801e88e:	1c59      	adds	r1, r3, #1
 801e890:	d103      	bne.n	801e89a <_raise_r+0x42>
 801e892:	2316      	movs	r3, #22
 801e894:	6003      	str	r3, [r0, #0]
 801e896:	2001      	movs	r0, #1
 801e898:	e7e7      	b.n	801e86a <_raise_r+0x12>
 801e89a:	2100      	movs	r1, #0
 801e89c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e8a0:	4620      	mov	r0, r4
 801e8a2:	4798      	blx	r3
 801e8a4:	2000      	movs	r0, #0
 801e8a6:	e7e0      	b.n	801e86a <_raise_r+0x12>

0801e8a8 <raise>:
 801e8a8:	4b02      	ldr	r3, [pc, #8]	@ (801e8b4 <raise+0xc>)
 801e8aa:	4601      	mov	r1, r0
 801e8ac:	6818      	ldr	r0, [r3, #0]
 801e8ae:	f7ff bfd3 	b.w	801e858 <_raise_r>
 801e8b2:	bf00      	nop
 801e8b4:	24001210 	.word	0x24001210

0801e8b8 <_kill_r>:
 801e8b8:	b538      	push	{r3, r4, r5, lr}
 801e8ba:	4d07      	ldr	r5, [pc, #28]	@ (801e8d8 <_kill_r+0x20>)
 801e8bc:	2300      	movs	r3, #0
 801e8be:	4604      	mov	r4, r0
 801e8c0:	4608      	mov	r0, r1
 801e8c2:	4611      	mov	r1, r2
 801e8c4:	602b      	str	r3, [r5, #0]
 801e8c6:	f7e3 f9c9 	bl	8001c5c <_kill>
 801e8ca:	1c43      	adds	r3, r0, #1
 801e8cc:	d102      	bne.n	801e8d4 <_kill_r+0x1c>
 801e8ce:	682b      	ldr	r3, [r5, #0]
 801e8d0:	b103      	cbz	r3, 801e8d4 <_kill_r+0x1c>
 801e8d2:	6023      	str	r3, [r4, #0]
 801e8d4:	bd38      	pop	{r3, r4, r5, pc}
 801e8d6:	bf00      	nop
 801e8d8:	24069840 	.word	0x24069840

0801e8dc <_getpid_r>:
 801e8dc:	f7e3 b9b6 	b.w	8001c4c <_getpid>

0801e8e0 <_init>:
 801e8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8e2:	bf00      	nop
 801e8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e8e6:	bc08      	pop	{r3}
 801e8e8:	469e      	mov	lr, r3
 801e8ea:	4770      	bx	lr

0801e8ec <_fini>:
 801e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8ee:	bf00      	nop
 801e8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e8f2:	bc08      	pop	{r3}
 801e8f4:	469e      	mov	lr, r3
 801e8f6:	4770      	bx	lr
