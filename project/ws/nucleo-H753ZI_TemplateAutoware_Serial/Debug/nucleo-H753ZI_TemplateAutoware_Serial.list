
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123b4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a5c  08012654  08012654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080140b0  080140b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  080140b8  080140b8  000150b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080140f8  080140f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013ec  24000000  080140fc  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000320f4  240013ec  080154e8  000173ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240334e0  080154e8  000174e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000173ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029cc8  00000000  00000000  0001741a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005099  00000000  00000000  000410e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e30  00000000  00000000  00046180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001753  00000000  00000000  00047fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e4b3  00000000  00000000  00049703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002bf5b  00000000  00000000  00087bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018ed0f  00000000  00000000  000b3b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  00242820  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008724  00000000  00000000  00242898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  0024afbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013ec 	.word	0x240013ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801263c 	.word	0x0801263c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f0 	.word	0x240013f0
 80002dc:	0801263c 	.word	0x0801263c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000314:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000318:	f000 b96a 	b.w	80005f0 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	9d08      	ldr	r5, [sp, #32]
 800033a:	460c      	mov	r4, r1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d14e      	bne.n	80003de <__udivmoddi4+0xaa>
 8000340:	4694      	mov	ip, r2
 8000342:	458c      	cmp	ip, r1
 8000344:	4686      	mov	lr, r0
 8000346:	fab2 f282 	clz	r2, r2
 800034a:	d962      	bls.n	8000412 <__udivmoddi4+0xde>
 800034c:	b14a      	cbz	r2, 8000362 <__udivmoddi4+0x2e>
 800034e:	f1c2 0320 	rsb	r3, r2, #32
 8000352:	4091      	lsls	r1, r2
 8000354:	fa20 f303 	lsr.w	r3, r0, r3
 8000358:	fa0c fc02 	lsl.w	ip, ip, r2
 800035c:	4319      	orrs	r1, r3
 800035e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f f68c 	uxth.w	r6, ip
 800036a:	fbb1 f4f7 	udiv	r4, r1, r7
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb07 1114 	mls	r1, r7, r4, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb04 f106 	mul.w	r1, r4, r6
 800037e:	4299      	cmp	r1, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x64>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800038a:	f080 8112 	bcs.w	80005b2 <__udivmoddi4+0x27e>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 810f 	bls.w	80005b2 <__udivmoddi4+0x27e>
 8000394:	3c02      	subs	r4, #2
 8000396:	4463      	add	r3, ip
 8000398:	1a59      	subs	r1, r3, r1
 800039a:	fa1f f38e 	uxth.w	r3, lr
 800039e:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a2:	fb07 1110 	mls	r1, r7, r0, r1
 80003a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003aa:	fb00 f606 	mul.w	r6, r0, r6
 80003ae:	429e      	cmp	r6, r3
 80003b0:	d90a      	bls.n	80003c8 <__udivmoddi4+0x94>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003ba:	f080 80fc 	bcs.w	80005b6 <__udivmoddi4+0x282>
 80003be:	429e      	cmp	r6, r3
 80003c0:	f240 80f9 	bls.w	80005b6 <__udivmoddi4+0x282>
 80003c4:	4463      	add	r3, ip
 80003c6:	3802      	subs	r0, #2
 80003c8:	1b9b      	subs	r3, r3, r6
 80003ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ce:	2100      	movs	r1, #0
 80003d0:	b11d      	cbz	r5, 80003da <__udivmoddi4+0xa6>
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	2200      	movs	r2, #0
 80003d6:	e9c5 3200 	strd	r3, r2, [r5]
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d905      	bls.n	80003ee <__udivmoddi4+0xba>
 80003e2:	b10d      	cbz	r5, 80003e8 <__udivmoddi4+0xb4>
 80003e4:	e9c5 0100 	strd	r0, r1, [r5]
 80003e8:	2100      	movs	r1, #0
 80003ea:	4608      	mov	r0, r1
 80003ec:	e7f5      	b.n	80003da <__udivmoddi4+0xa6>
 80003ee:	fab3 f183 	clz	r1, r3
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d146      	bne.n	8000484 <__udivmoddi4+0x150>
 80003f6:	42a3      	cmp	r3, r4
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xcc>
 80003fa:	4290      	cmp	r0, r2
 80003fc:	f0c0 80f0 	bcc.w	80005e0 <__udivmoddi4+0x2ac>
 8000400:	1a86      	subs	r6, r0, r2
 8000402:	eb64 0303 	sbc.w	r3, r4, r3
 8000406:	2001      	movs	r0, #1
 8000408:	2d00      	cmp	r5, #0
 800040a:	d0e6      	beq.n	80003da <__udivmoddi4+0xa6>
 800040c:	e9c5 6300 	strd	r6, r3, [r5]
 8000410:	e7e3      	b.n	80003da <__udivmoddi4+0xa6>
 8000412:	2a00      	cmp	r2, #0
 8000414:	f040 8090 	bne.w	8000538 <__udivmoddi4+0x204>
 8000418:	eba1 040c 	sub.w	r4, r1, ip
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	2101      	movs	r1, #1
 8000426:	fbb4 f6f8 	udiv	r6, r4, r8
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb08 4416 	mls	r4, r8, r6, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb07 f006 	mul.w	r0, r7, r6
 800043a:	4298      	cmp	r0, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x11c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x11a>
 8000448:	4298      	cmp	r0, r3
 800044a:	f200 80cd 	bhi.w	80005e8 <__udivmoddi4+0x2b4>
 800044e:	4626      	mov	r6, r4
 8000450:	1a1c      	subs	r4, r3, r0
 8000452:	fa1f f38e 	uxth.w	r3, lr
 8000456:	fbb4 f0f8 	udiv	r0, r4, r8
 800045a:	fb08 4410 	mls	r4, r8, r0, r4
 800045e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000462:	fb00 f707 	mul.w	r7, r0, r7
 8000466:	429f      	cmp	r7, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x148>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x146>
 8000474:	429f      	cmp	r7, r3
 8000476:	f200 80b0 	bhi.w	80005da <__udivmoddi4+0x2a6>
 800047a:	4620      	mov	r0, r4
 800047c:	1bdb      	subs	r3, r3, r7
 800047e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000482:	e7a5      	b.n	80003d0 <__udivmoddi4+0x9c>
 8000484:	f1c1 0620 	rsb	r6, r1, #32
 8000488:	408b      	lsls	r3, r1
 800048a:	fa22 f706 	lsr.w	r7, r2, r6
 800048e:	431f      	orrs	r7, r3
 8000490:	fa20 fc06 	lsr.w	ip, r0, r6
 8000494:	fa04 f301 	lsl.w	r3, r4, r1
 8000498:	ea43 030c 	orr.w	r3, r3, ip
 800049c:	40f4      	lsrs	r4, r6
 800049e:	fa00 f801 	lsl.w	r8, r0, r1
 80004a2:	0c38      	lsrs	r0, r7, #16
 80004a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004a8:	fbb4 fef0 	udiv	lr, r4, r0
 80004ac:	fa1f fc87 	uxth.w	ip, r7
 80004b0:	fb00 441e 	mls	r4, r0, lr, r4
 80004b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b8:	fb0e f90c 	mul.w	r9, lr, ip
 80004bc:	45a1      	cmp	r9, r4
 80004be:	fa02 f201 	lsl.w	r2, r2, r1
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x1a6>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004ca:	f080 8084 	bcs.w	80005d6 <__udivmoddi4+0x2a2>
 80004ce:	45a1      	cmp	r9, r4
 80004d0:	f240 8081 	bls.w	80005d6 <__udivmoddi4+0x2a2>
 80004d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d8:	443c      	add	r4, r7
 80004da:	eba4 0409 	sub.w	r4, r4, r9
 80004de:	fa1f f983 	uxth.w	r9, r3
 80004e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004e6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f2:	45a4      	cmp	ip, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1d2>
 80004f6:	193c      	adds	r4, r7, r4
 80004f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004fc:	d267      	bcs.n	80005ce <__udivmoddi4+0x29a>
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d965      	bls.n	80005ce <__udivmoddi4+0x29a>
 8000502:	3b02      	subs	r3, #2
 8000504:	443c      	add	r4, r7
 8000506:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800050a:	fba0 9302 	umull	r9, r3, r0, r2
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	429c      	cmp	r4, r3
 8000514:	46ce      	mov	lr, r9
 8000516:	469c      	mov	ip, r3
 8000518:	d351      	bcc.n	80005be <__udivmoddi4+0x28a>
 800051a:	d04e      	beq.n	80005ba <__udivmoddi4+0x286>
 800051c:	b155      	cbz	r5, 8000534 <__udivmoddi4+0x200>
 800051e:	ebb8 030e 	subs.w	r3, r8, lr
 8000522:	eb64 040c 	sbc.w	r4, r4, ip
 8000526:	fa04 f606 	lsl.w	r6, r4, r6
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431e      	orrs	r6, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	e9c5 6400 	strd	r6, r4, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	e750      	b.n	80003da <__udivmoddi4+0xa6>
 8000538:	f1c2 0320 	rsb	r3, r2, #32
 800053c:	fa20 f103 	lsr.w	r1, r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa24 f303 	lsr.w	r3, r4, r3
 8000548:	4094      	lsls	r4, r2
 800054a:	430c      	orrs	r4, r1
 800054c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000550:	fa00 fe02 	lsl.w	lr, r0, r2
 8000554:	fa1f f78c 	uxth.w	r7, ip
 8000558:	fbb3 f0f8 	udiv	r0, r3, r8
 800055c:	fb08 3110 	mls	r1, r8, r0, r3
 8000560:	0c23      	lsrs	r3, r4, #16
 8000562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000566:	fb00 f107 	mul.w	r1, r0, r7
 800056a:	4299      	cmp	r1, r3
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x24c>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000576:	d22c      	bcs.n	80005d2 <__udivmoddi4+0x29e>
 8000578:	4299      	cmp	r1, r3
 800057a:	d92a      	bls.n	80005d2 <__udivmoddi4+0x29e>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1a5b      	subs	r3, r3, r1
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb3 f1f8 	udiv	r1, r3, r8
 8000588:	fb08 3311 	mls	r3, r8, r1, r3
 800058c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000590:	fb01 f307 	mul.w	r3, r1, r7
 8000594:	42a3      	cmp	r3, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x276>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a0:	d213      	bcs.n	80005ca <__udivmoddi4+0x296>
 80005a2:	42a3      	cmp	r3, r4
 80005a4:	d911      	bls.n	80005ca <__udivmoddi4+0x296>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	1ae4      	subs	r4, r4, r3
 80005ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b0:	e739      	b.n	8000426 <__udivmoddi4+0xf2>
 80005b2:	4604      	mov	r4, r0
 80005b4:	e6f0      	b.n	8000398 <__udivmoddi4+0x64>
 80005b6:	4608      	mov	r0, r1
 80005b8:	e706      	b.n	80003c8 <__udivmoddi4+0x94>
 80005ba:	45c8      	cmp	r8, r9
 80005bc:	d2ae      	bcs.n	800051c <__udivmoddi4+0x1e8>
 80005be:	ebb9 0e02 	subs.w	lr, r9, r2
 80005c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7a8      	b.n	800051c <__udivmoddi4+0x1e8>
 80005ca:	4631      	mov	r1, r6
 80005cc:	e7ed      	b.n	80005aa <__udivmoddi4+0x276>
 80005ce:	4603      	mov	r3, r0
 80005d0:	e799      	b.n	8000506 <__udivmoddi4+0x1d2>
 80005d2:	4630      	mov	r0, r6
 80005d4:	e7d4      	b.n	8000580 <__udivmoddi4+0x24c>
 80005d6:	46d6      	mov	lr, sl
 80005d8:	e77f      	b.n	80004da <__udivmoddi4+0x1a6>
 80005da:	4463      	add	r3, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e74d      	b.n	800047c <__udivmoddi4+0x148>
 80005e0:	4606      	mov	r6, r0
 80005e2:	4623      	mov	r3, r4
 80005e4:	4608      	mov	r0, r1
 80005e6:	e70f      	b.n	8000408 <__udivmoddi4+0xd4>
 80005e8:	3e02      	subs	r6, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	e730      	b.n	8000450 <__udivmoddi4+0x11c>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800061a:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <MX_ADC1_Init+0x108>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000620:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800065e:	2203      	movs	r2, #3
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000678:	f001 fd10 	bl	800209c <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000682:	f000 fb97 	bl	8000db4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000692:	f002 fd33 	bl	80030fc <HAL_ADCEx_MultiModeConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800069c:	f000 fb8a 	bl	8000db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_ADC1_Init+0x10c>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2306      	movs	r3, #6
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80006a8:	2306      	movs	r3, #6
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006c4:	f001 ff6e 	bl	80025a4 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 fb71 	bl	8000db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_ADC1_Init+0x110>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d6:	230c      	movs	r3, #12
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006e0:	f001 ff60 	bl	80025a4 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ea:	f000 fb63 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24001408 	.word	0x24001408
 80006fc:	40022000 	.word	0x40022000
 8000700:	19200040 	.word	0x19200040
 8000704:	08600004 	.word	0x08600004

08000708 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ba      	sub	sp, #232	@ 0xe8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	22c0      	movs	r2, #192	@ 0xc0
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f011 fd15 	bl	8012158 <memset>
  if(adcHandle->Instance==ADC1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a45      	ldr	r2, [pc, #276]	@ (8000848 <HAL_ADC_MspInit+0x140>)
 8000734:	4293      	cmp	r3, r2
 8000736:	f040 8083 	bne.w	8000840 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800074a:	2325      	movs	r3, #37	@ 0x25
 800074c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800075e:	2320      	movs	r3, #32
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4618      	mov	r0, r3
 8000774:	f005 ffd8 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800077e:	f000 fb19 	bl	8000db4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000788:	4a30      	ldr	r2, [pc, #192]	@ (800084c <HAL_ADC_MspInit+0x144>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000792:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a0:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	@ (8000850 <HAL_ADC_MspInit+0x148>)
 80007da:	f004 fd5f 	bl	800529c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <HAL_ADC_MspInit+0x150>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800081c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000826:	f002 fe27 	bl	8003478 <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8000830:	f000 fac0 	bl	8000db4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000838:	64da      	str	r2, [r3, #76]	@ 0x4c
 800083a:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	37e8      	adds	r7, #232	@ 0xe8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40022000 	.word	0x40022000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021400 	.word	0x58021400
 8000854:	2400146c 	.word	0x2400146c
 8000858:	40020410 	.word	0x40020410

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_DMA_Init+0x50>)
 8000864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000868:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <MX_DMA_Init+0x50>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_DMA_Init+0x50>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_DMA_Init+0x50>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <MX_DMA_Init+0x50>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_DMA_Init+0x50>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	58024400 	.word	0x58024400

080008b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 80008b4:	480a      	ldr	r0, [pc, #40]	@ (80008e0 <MX_FREERTOS_Init+0x30>)
 80008b6:	f00b f9b5 	bl	800bc24 <osMutexNew>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a09      	ldr	r2, [pc, #36]	@ (80008e4 <MX_FREERTOS_Init+0x34>)
 80008be:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <MX_FREERTOS_Init+0x38>)
 80008c2:	f00b f9af 	bl	800bc24 <osMutexNew>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <MX_FREERTOS_Init+0x3c>)
 80008ca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <MX_FREERTOS_Init+0x40>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4808      	ldr	r0, [pc, #32]	@ (80008f4 <MX_FREERTOS_Init+0x44>)
 80008d2:	f00b f8c7 	bl	800ba64 <osThreadNew>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <MX_FREERTOS_Init+0x48>)
 80008da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	080126d8 	.word	0x080126d8
 80008e4:	240014fc 	.word	0x240014fc
 80008e8:	080126e8 	.word	0x080126e8
 80008ec:	24001500 	.word	0x24001500
 80008f0:	080126b4 	.word	0x080126b4
 80008f4:	080011d1 	.word	0x080011d1
 80008f8:	240014f8 	.word	0x240014f8

080008fc <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800090c:	d10d      	bne.n	800092a <HAL_GPIO_EXTI_Callback+0x2e>
    ucButtonState ^= 1;
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <HAL_GPIO_EXTI_Callback+0x38>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	f083 0301 	eor.w	r3, r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_GPIO_EXTI_Callback+0x38>)
 800091a:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, 0x1000);
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_GPIO_EXTI_Callback+0x3c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000924:	4618      	mov	r0, r3
 8000926:	f00b f92f 	bl	800bb88 <osThreadFlagsSet>
  }
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	24001504 	.word	0x24001504
 8000938:	240014f8 	.word	0x240014f8

0800093c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b9e      	ldr	r3, [pc, #632]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	4a9c      	ldr	r2, [pc, #624]	@ (8000bcc <MX_GPIO_Init+0x290>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000962:	4b9a      	ldr	r3, [pc, #616]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	623b      	str	r3, [r7, #32]
 800096e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000970:	4b96      	ldr	r3, [pc, #600]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	4a95      	ldr	r2, [pc, #596]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800097c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000980:	4b92      	ldr	r3, [pc, #584]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b8f      	ldr	r3, [pc, #572]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	4a8d      	ldr	r2, [pc, #564]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099e:	4b8b      	ldr	r3, [pc, #556]	@ (8000bcc <MX_GPIO_Init+0x290>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b87      	ldr	r3, [pc, #540]	@ (8000bcc <MX_GPIO_Init+0x290>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	4a86      	ldr	r2, [pc, #536]	@ (8000bcc <MX_GPIO_Init+0x290>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009bc:	4b83      	ldr	r3, [pc, #524]	@ (8000bcc <MX_GPIO_Init+0x290>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b80      	ldr	r3, [pc, #512]	@ (8000bcc <MX_GPIO_Init+0x290>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	4a7e      	ldr	r2, [pc, #504]	@ (8000bcc <MX_GPIO_Init+0x290>)
 80009d2:	f043 0320 	orr.w	r3, r3, #32
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009da:	4b7c      	ldr	r3, [pc, #496]	@ (8000bcc <MX_GPIO_Init+0x290>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	f003 0320 	and.w	r3, r3, #32
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e8:	4b78      	ldr	r3, [pc, #480]	@ (8000bcc <MX_GPIO_Init+0x290>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ee:	4a77      	ldr	r2, [pc, #476]	@ (8000bcc <MX_GPIO_Init+0x290>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f8:	4b74      	ldr	r3, [pc, #464]	@ (8000bcc <MX_GPIO_Init+0x290>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a06:	4b71      	ldr	r3, [pc, #452]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	4a6f      	ldr	r2, [pc, #444]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a16:	4b6d      	ldr	r3, [pc, #436]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a24:	4b69      	ldr	r3, [pc, #420]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2a:	4a68      	ldr	r2, [pc, #416]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000a2c:	f043 0310 	orr.w	r3, r3, #16
 8000a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a34:	4b65      	ldr	r3, [pc, #404]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3a:	f003 0310 	and.w	r3, r3, #16
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a48:	4861      	ldr	r0, [pc, #388]	@ (8000bd0 <MX_GPIO_Init+0x294>)
 8000a4a:	f004 fdd7 	bl	80055fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a54:	485f      	ldr	r0, [pc, #380]	@ (8000bd4 <MX_GPIO_Init+0x298>)
 8000a56:	f004 fdd1 	bl	80055fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	485e      	ldr	r0, [pc, #376]	@ (8000bd8 <MX_GPIO_Init+0x29c>)
 8000a60:	f004 fdcc 	bl	80055fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4858      	ldr	r0, [pc, #352]	@ (8000bdc <MX_GPIO_Init+0x2a0>)
 8000a7a:	f004 fc0f 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a7e:	2332      	movs	r3, #50	@ 0x32
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8e:	230b      	movs	r3, #11
 8000a90:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4850      	ldr	r0, [pc, #320]	@ (8000bdc <MX_GPIO_Init+0x2a0>)
 8000a9a:	f004 fbff 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a9e:	2386      	movs	r3, #134	@ 0x86
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aae:	230b      	movs	r3, #11
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4849      	ldr	r0, [pc, #292]	@ (8000be0 <MX_GPIO_Init+0x2a4>)
 8000aba:	f004 fbef 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000abe:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	483e      	ldr	r0, [pc, #248]	@ (8000bd0 <MX_GPIO_Init+0x294>)
 8000ad8:	f004 fbe0 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8000adc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	483c      	ldr	r0, [pc, #240]	@ (8000be4 <MX_GPIO_Init+0x2a8>)
 8000af4:	f004 fbd2 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0a:	230b      	movs	r3, #11
 8000b0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	482e      	ldr	r0, [pc, #184]	@ (8000bd0 <MX_GPIO_Init+0x294>)
 8000b16:	f004 fbc1 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	4828      	ldr	r0, [pc, #160]	@ (8000bd4 <MX_GPIO_Init+0x298>)
 8000b34:	f004 fbb2 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b38:	2380      	movs	r3, #128	@ 0x80
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4826      	ldr	r0, [pc, #152]	@ (8000be8 <MX_GPIO_Init+0x2ac>)
 8000b4e:	f004 fba5 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b52:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b64:	230a      	movs	r3, #10
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481c      	ldr	r0, [pc, #112]	@ (8000be0 <MX_GPIO_Init+0x2a4>)
 8000b70:	f004 fb94 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b74:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4815      	ldr	r0, [pc, #84]	@ (8000be8 <MX_GPIO_Init+0x2ac>)
 8000b92:	f004 fb83 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b96:	2302      	movs	r3, #2
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	480a      	ldr	r0, [pc, #40]	@ (8000bd8 <MX_GPIO_Init+0x29c>)
 8000bae:	f004 fb75 	bl	800529c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2107      	movs	r1, #7
 8000bb6:	2028      	movs	r0, #40	@ 0x28
 8000bb8:	f002 fc36 	bl	8003428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bbc:	2028      	movs	r0, #40	@ 0x28
 8000bbe:	f002 fc4d 	bl	800345c <HAL_NVIC_EnableIRQ>

}
 8000bc2:	bf00      	nop
 8000bc4:	3738      	adds	r7, #56	@ 0x38
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58020400 	.word	0x58020400
 8000bd4:	58020c00 	.word	0x58020c00
 8000bd8:	58021000 	.word	0x58021000
 8000bdc:	58020800 	.word	0x58020800
 8000be0:	58020000 	.word	0x58020000
 8000be4:	58021400 	.word	0x58021400
 8000be8:	58021800 	.word	0x58021800

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f000 ffe0 	bl	8001bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f81c 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f7ff fea0 	bl	800093c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bfc:	f7ff fe2e 	bl	800085c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c00:	f000 fbc6 	bl	8001390 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c04:	f7ff fcf6 	bl	80005f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c08:	f000 fb76 	bl	80012f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	4906      	ldr	r1, [pc, #24]	@ (8000c28 <main+0x3c>)
 8000c10:	4806      	ldr	r0, [pc, #24]	@ (8000c2c <main+0x40>)
 8000c12:	f001 fbe5 	bl	80023e0 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c16:	f00a fedb 	bl	800b9d0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c1a:	f7ff fe49 	bl	80008b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c1e:	f00a fefb 	bl	800ba18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c22:	bf00      	nop
 8000c24:	e7fd      	b.n	8000c22 <main+0x36>
 8000c26:	bf00      	nop
 8000c28:	24001508 	.word	0x24001508
 8000c2c:	24001408 	.word	0x24001408

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b09e      	sub	sp, #120	@ 0x78
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3a:	224c      	movs	r2, #76	@ 0x4c
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f011 fa8a 	bl	8012158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2220      	movs	r2, #32
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f011 fa83 	bl	8012158 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c52:	2002      	movs	r0, #2
 8000c54:	f004 fd06 	bl	8005664 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b49      	ldr	r3, [pc, #292]	@ (8000d84 <SystemClock_Config+0x154>)
 8000c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c60:	4a48      	ldr	r2, [pc, #288]	@ (8000d84 <SystemClock_Config+0x154>)
 8000c62:	f023 0301 	bic.w	r3, r3, #1
 8000c66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c68:	4b46      	ldr	r3, [pc, #280]	@ (8000d84 <SystemClock_Config+0x154>)
 8000c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b45      	ldr	r3, [pc, #276]	@ (8000d88 <SystemClock_Config+0x158>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a44      	ldr	r2, [pc, #272]	@ (8000d88 <SystemClock_Config+0x158>)
 8000c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b42      	ldr	r3, [pc, #264]	@ (8000d88 <SystemClock_Config+0x158>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c8a:	bf00      	nop
 8000c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d88 <SystemClock_Config+0x158>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c98:	d1f8      	bne.n	8000c8c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d8c <SystemClock_Config+0x15c>)
 8000c9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ca0:	4a3a      	ldr	r2, [pc, #232]	@ (8000d8c <SystemClock_Config+0x15c>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000caa:	4b38      	ldr	r3, [pc, #224]	@ (8000d8c <SystemClock_Config+0x15c>)
 8000cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	4b32      	ldr	r3, [pc, #200]	@ (8000d88 <SystemClock_Config+0x158>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a31      	ldr	r2, [pc, #196]	@ (8000d88 <SystemClock_Config+0x158>)
 8000cc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d88 <SystemClock_Config+0x158>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d84 <SystemClock_Config+0x154>)
 8000cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8000d84 <SystemClock_Config+0x154>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cde:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <SystemClock_Config+0x154>)
 8000ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cea:	bf00      	nop
 8000cec:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <SystemClock_Config+0x158>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf8:	d1f8      	bne.n	8000cec <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000cfe:	2380      	movs	r3, #128	@ 0x80
 8000d00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000d02:	2320      	movs	r3, #32
 8000d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000d12:	23f0      	movs	r3, #240	@ 0xf0
 8000d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d22:	2308      	movs	r3, #8
 8000d24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d32:	4618      	mov	r0, r3
 8000d34:	f004 fcd0 	bl	80056d8 <HAL_RCC_OscConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000d3e:	f000 f839 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d42:	233f      	movs	r3, #63	@ 0x3f
 8000d44:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d46:	2303      	movs	r3, #3
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d52:	2340      	movs	r3, #64	@ 0x40
 8000d54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d56:	2340      	movs	r3, #64	@ 0x40
 8000d58:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d60:	2340      	movs	r3, #64	@ 0x40
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2104      	movs	r1, #4
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f005 f90e 	bl	8005f8c <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000d76:	f000 f81d 	bl	8000db4 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3778      	adds	r7, #120	@ 0x78
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58000400 	.word	0x58000400
 8000d88:	58024800 	.word	0x58024800
 8000d8c:	58024400 	.word	0x58024400

08000d90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000da2:	f000 ff43 	bl	8001c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40001000 	.word	0x40001000

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <Error_Handler+0x8>

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <HAL_MspInit+0x38>)
 8000dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_MspInit+0x38>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_MspInit+0x38>)
 8000dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	210f      	movs	r1, #15
 8000de8:	f06f 0001 	mvn.w	r0, #1
 8000dec:	f002 fb1c 	bl	8003428 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	58024400 	.word	0x58024400

08000dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b090      	sub	sp, #64	@ 0x40
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b0f      	cmp	r3, #15
 8000e08:	d827      	bhi.n	8000e5a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	2036      	movs	r0, #54	@ 0x36
 8000e10:	f002 fb0a 	bl	8003428 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e14:	2036      	movs	r0, #54	@ 0x36
 8000e16:	f002 fb21 	bl	800345c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000e1a:	4a29      	ldr	r2, [pc, #164]	@ (8000ec0 <HAL_InitTick+0xc4>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e20:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <HAL_InitTick+0xc8>)
 8000e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e26:	4a27      	ldr	r2, [pc, #156]	@ (8000ec4 <HAL_InitTick+0xc8>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e30:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <HAL_InitTick+0xc8>)
 8000e32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e3e:	f107 0210 	add.w	r2, r7, #16
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f005 fc2b 	bl	80066a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e50:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d106      	bne.n	8000e66 <HAL_InitTick+0x6a>
 8000e58:	e001      	b.n	8000e5e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e02b      	b.n	8000eb6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e5e:	f005 fbf5 	bl	800664c <HAL_RCC_GetPCLK1Freq>
 8000e62:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000e64:	e004      	b.n	8000e70 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e66:	f005 fbf1 	bl	800664c <HAL_RCC_GetPCLK1Freq>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e72:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <HAL_InitTick+0xcc>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	0c9b      	lsrs	r3, r3, #18
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <HAL_InitTick+0xd0>)
 8000e80:	4a13      	ldr	r2, [pc, #76]	@ (8000ed0 <HAL_InitTick+0xd4>)
 8000e82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_InitTick+0xd0>)
 8000e86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <HAL_InitTick+0xd0>)
 8000e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_InitTick+0xd0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <HAL_InitTick+0xd0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e9e:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <HAL_InitTick+0xd0>)
 8000ea0:	f008 f940 	bl	8009124 <HAL_TIM_Base_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d104      	bne.n	8000eb4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000eaa:	4808      	ldr	r0, [pc, #32]	@ (8000ecc <HAL_InitTick+0xd0>)
 8000eac:	f008 f99c 	bl	80091e8 <HAL_TIM_Base_Start_IT>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	e000      	b.n	8000eb6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3740      	adds	r7, #64	@ 0x40
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	24000008 	.word	0x24000008
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	431bde83 	.word	0x431bde83
 8000ecc:	24001510 	.word	0x24001510
 8000ed0:	40001000 	.word	0x40001000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <USART3_IRQHandler+0x10>)
 8000f12:	f008 fe03 	bl	8009b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	240015f4 	.word	0x240015f4

08000f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8000f24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f28:	f004 fb81 	bl	800562e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <TIM6_DAC_IRQHandler+0x10>)
 8000f36:	f008 f9cf 	bl	80092d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	24001510 	.word	0x24001510

08000f44 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f4e:	f011 f9b7 	bl	80122c0 <__errno>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2216      	movs	r2, #22
 8000f56:	601a      	str	r2, [r3, #0]
  return -1;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_exit>:

void _exit (int status)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ffe7 	bl	8000f44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f76:	bf00      	nop
 8000f78:	e7fd      	b.n	8000f76 <_exit+0x12>

08000f7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e00a      	b.n	8000fa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8c:	f3af 8000 	nop.w
 8000f90:	4601      	mov	r1, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	60ba      	str	r2, [r7, #8]
 8000f98:	b2ca      	uxtb	r2, r1
 8000f9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	dbf0      	blt.n	8000f8c <_read+0x12>
  }

  return len;
 8000faa:	687b      	ldr	r3, [r7, #4]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e009      	b.n	8000fda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	60ba      	str	r2, [r7, #8]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	dbf1      	blt.n	8000fc6 <_write+0x12>
  }
  return len;
 8000fe2:	687b      	ldr	r3, [r7, #4]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_close>:

int _close(int file)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001014:	605a      	str	r2, [r3, #4]
  return 0;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_isatty>:

int _isatty(int file)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103a:	b480      	push	{r7}
 800103c:	b085      	sub	sp, #20
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f011 f91c 	bl	80122c0 <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	24080000 	.word	0x24080000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	2400155c 	.word	0x2400155c
 80010bc:	240334e0 	.word	0x240334e0

080010c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010c4:	4b37      	ldr	r3, [pc, #220]	@ (80011a4 <SystemInit+0xe4>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ca:	4a36      	ldr	r2, [pc, #216]	@ (80011a4 <SystemInit+0xe4>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010d4:	4b34      	ldr	r3, [pc, #208]	@ (80011a8 <SystemInit+0xe8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	2b06      	cmp	r3, #6
 80010de:	d807      	bhi.n	80010f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010e0:	4b31      	ldr	r3, [pc, #196]	@ (80011a8 <SystemInit+0xe8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 030f 	bic.w	r3, r3, #15
 80010e8:	4a2f      	ldr	r2, [pc, #188]	@ (80011a8 <SystemInit+0xe8>)
 80010ea:	f043 0307 	orr.w	r3, r3, #7
 80010ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010f0:	4b2e      	ldr	r3, [pc, #184]	@ (80011ac <SystemInit+0xec>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a2d      	ldr	r2, [pc, #180]	@ (80011ac <SystemInit+0xec>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <SystemInit+0xec>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <SystemInit+0xec>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4929      	ldr	r1, [pc, #164]	@ (80011ac <SystemInit+0xec>)
 8001108:	4b29      	ldr	r3, [pc, #164]	@ (80011b0 <SystemInit+0xf0>)
 800110a:	4013      	ands	r3, r2
 800110c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800110e:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <SystemInit+0xe8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <SystemInit+0xe8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 030f 	bic.w	r3, r3, #15
 8001122:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <SystemInit+0xe8>)
 8001124:	f043 0307 	orr.w	r3, r3, #7
 8001128:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <SystemInit+0xec>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <SystemInit+0xec>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001136:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <SystemInit+0xec>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <SystemInit+0xec>)
 800113e:	4a1d      	ldr	r2, [pc, #116]	@ (80011b4 <SystemInit+0xf4>)
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <SystemInit+0xec>)
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <SystemInit+0xf8>)
 8001146:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <SystemInit+0xec>)
 800114a:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <SystemInit+0xfc>)
 800114c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <SystemInit+0xec>)
 8001150:	2200      	movs	r2, #0
 8001152:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <SystemInit+0xec>)
 8001156:	4a19      	ldr	r2, [pc, #100]	@ (80011bc <SystemInit+0xfc>)
 8001158:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <SystemInit+0xec>)
 800115c:	2200      	movs	r2, #0
 800115e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <SystemInit+0xec>)
 8001162:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <SystemInit+0xfc>)
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <SystemInit+0xec>)
 8001168:	2200      	movs	r2, #0
 800116a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <SystemInit+0xec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	@ (80011ac <SystemInit+0xec>)
 8001172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001176:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <SystemInit+0xec>)
 800117a:	2200      	movs	r2, #0
 800117c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <SystemInit+0x100>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <SystemInit+0x104>)
 8001184:	4013      	ands	r3, r2
 8001186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800118a:	d202      	bcs.n	8001192 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <SystemInit+0x108>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <SystemInit+0x10c>)
 8001194:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001198:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	52002000 	.word	0x52002000
 80011ac:	58024400 	.word	0x58024400
 80011b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b4:	02020200 	.word	0x02020200
 80011b8:	01ff0000 	.word	0x01ff0000
 80011bc:	01010280 	.word	0x01010280
 80011c0:	5c001000 	.word	0x5c001000
 80011c4:	ffff0000 	.word	0xffff0000
 80011c8:	51008108 	.word	0x51008108
 80011cc:	52004000 	.word	0x52004000

080011d0 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0a6      	sub	sp, #152	@ 0x98
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	6078      	str	r0, [r7, #4]

  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;
  unsigned char ucGetVehicleDataAttempts = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

  // Joystick calibration
  unsigned int uiX0   = 33970;
 80011de:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 80011e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  unsigned int uiXMin = 1057;
 80011e6:	f240 4321 	movw	r3, #1057	@ 0x421
 80011ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  unsigned int uiXMax = 65535;
 80011ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  unsigned int uiY0   = 33580;
 80011f6:	f248 332c 	movw	r3, #33580	@ 0x832c
 80011fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned int uiYMin = 1062;
 80011fc:	f240 4326 	movw	r3, #1062	@ 0x426
 8001200:	67bb      	str	r3, [r7, #120]	@ 0x78
  unsigned int uiYMax = 65535;
 8001202:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001206:	677b      	str	r3, [r7, #116]	@ 0x74
  unsigned char cDmaBuffer[UART2_DMA_BUFFER_SIZE]; // TODO Ajustar o buffer pro tamanho da mensagem, manter a mais nova

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, cDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2240      	movs	r2, #64	@ 0x40
 800120e:	4619      	mov	r1, r3
 8001210:	4834      	ldr	r0, [pc, #208]	@ (80012e4 <StartTaskControle+0x114>)
 8001212:	f008 fb25 	bl	8009860 <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = AUTOWARE;
 8001216:	2301      	movs	r3, #1
 8001218:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

  // TESTING CODE FOR UART -- START

	xControlAction.fTrottle = 11.11;
 800121c:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <StartTaskControle+0x118>)
 800121e:	4a33      	ldr	r2, [pc, #204]	@ (80012ec <StartTaskControle+0x11c>)
 8001220:	601a      	str	r2, [r3, #0]
	xControlAction.fBrake = 22.22;
 8001222:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <StartTaskControle+0x118>)
 8001224:	4a32      	ldr	r2, [pc, #200]	@ (80012f0 <StartTaskControle+0x120>)
 8001226:	605a      	str	r2, [r3, #4]
	xControlAction.fSteeringAngle = 33.33;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <StartTaskControle+0x118>)
 800122a:	4a32      	ldr	r2, [pc, #200]	@ (80012f4 <StartTaskControle+0x124>)
 800122c:	609a      	str	r2, [r3, #8]
	xControlAction.ucManualGearShift = 1;
 800122e:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <StartTaskControle+0x118>)
 8001230:	2201      	movs	r2, #1
 8001232:	739a      	strb	r2, [r3, #14]
	xControlAction.ucHandBrake = 2;
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <StartTaskControle+0x118>)
 8001236:	2202      	movs	r2, #2
 8001238:	731a      	strb	r2, [r3, #12]
	xControlAction.ucReverse = 3;
 800123a:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <StartTaskControle+0x118>)
 800123c:	2203      	movs	r2, #3
 800123e:	735a      	strb	r2, [r3, #13]
	xControlAction.ucControlMode = MANUAL;
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <StartTaskControle+0x118>)
 8001242:	2202      	movs	r2, #2
 8001244:	741a      	strb	r2, [r3, #16]
	xControlAction.ucGear = 4;
 8001246:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <StartTaskControle+0x118>)
 8001248:	2204      	movs	r2, #4
 800124a:	73da      	strb	r2, [r3, #15]

  while(1){

	vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 800124c:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <StartTaskControle+0x118>)
 800124e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001252:	9201      	str	r2, [sp, #4]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800125a:	f000 fa9d 	bl	8001798 <vGetStringFromControlAction>

	// Send cTxMsgToCarla to CARLA
	if (huart2.gState == HAL_UART_STATE_READY)
 800125e:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <StartTaskControle+0x114>)
 8001260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001264:	2b20      	cmp	r3, #32
 8001266:	d10c      	bne.n	8001282 <StartTaskControle+0xb2>
	{
	  HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, strlen((char * ) ucTxMsgToCarla));
 8001268:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f841 	bl	80002f4 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800127a:	4619      	mov	r1, r3
 800127c:	4819      	ldr	r0, [pc, #100]	@ (80012e4 <StartTaskControle+0x114>)
 800127e:	f008 fa6f 	bl	8009760 <HAL_UART_Transmit_DMA>
	}

	do{

	    HAL_UART_DMAPause(&huart2); // Maybe its not a good idea pause DMA just after transmit
 8001282:	4818      	ldr	r0, [pc, #96]	@ (80012e4 <StartTaskControle+0x114>)
 8001284:	f008 fb38 	bl	80098f8 <HAL_UART_DMAPause>
		ucFlagFullMsg = ucGetVehicleStatusFromString(&xVehicleStatus, cDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001288:	f107 0108 	add.w	r1, r7, #8
 800128c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001290:	2240      	movs	r2, #64	@ 0x40
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fb00 	bl	8001898 <ucGetVehicleStatusFromString>
 8001298:	4603      	mov	r3, r0
 800129a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	    HAL_UART_DMAResume(&huart2);
 800129e:	4811      	ldr	r0, [pc, #68]	@ (80012e4 <StartTaskControle+0x114>)
 80012a0:	f008 fbb8 	bl	8009a14 <HAL_UART_DMAResume>
		ucGetVehicleDataAttempts++;
 80012a4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80012a8:	3301      	adds	r3, #1
 80012aa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	} while(!ucFlagFullMsg || ucGetVehicleDataAttempts < MAX_VEHICLE_GET_DATA_ATTEMPTS); //NAO_ENCONTRAR_O_$ -> Precisa da mensagem inteira
 80012ae:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0e5      	beq.n	8001282 <StartTaskControle+0xb2>
 80012b6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d9e1      	bls.n	8001282 <StartTaskControle+0xb2>
	if(ucGetVehicleDataAttempts == MAX_VEHICLE_GET_DATA_ATTEMPTS)
	{
		// Chamar rotina de emergência
	}

	xControlAction.fTrottle = xVehicleStatus.xHeadingRate.fFloat;
 80012be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012c0:	4a09      	ldr	r2, [pc, #36]	@ (80012e8 <StartTaskControle+0x118>)
 80012c2:	6013      	str	r3, [r2, #0]
	xControlAction.fBrake = xVehicleStatus.xLatSpeed.fFloat;
 80012c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012c6:	4a08      	ldr	r2, [pc, #32]	@ (80012e8 <StartTaskControle+0x118>)
 80012c8:	6053      	str	r3, [r2, #4]
	xControlAction.fSteeringAngle = xVehicleStatus.xLongSpeed.fFloat;
 80012ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012cc:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <StartTaskControle+0x118>)
 80012ce:	6093      	str	r3, [r2, #8]
	xControlAction.ucGear = xVehicleStatus.ucGear+1;
 80012d0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <StartTaskControle+0x118>)
 80012da:	73da      	strb	r2, [r3, #15]

	HAL_Delay(15);
 80012dc:	200f      	movs	r0, #15
 80012de:	f000 fcc5 	bl	8001c6c <HAL_Delay>
	vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80012e2:	e7b3      	b.n	800124c <StartTaskControle+0x7c>
 80012e4:	24001560 	.word	0x24001560
 80012e8:	240014e4 	.word	0x240014e4
 80012ec:	4131c28f 	.word	0x4131c28f
 80012f0:	41b1c28f 	.word	0x41b1c28f
 80012f4:	420551ec 	.word	0x420551ec

080012f8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 80012fe:	4a23      	ldr	r2, [pc, #140]	@ (800138c <MX_USART2_UART_Init+0x94>)
 8001300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 8001304:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001340:	4811      	ldr	r0, [pc, #68]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 8001342:	f008 f9bd 	bl	80096c0 <HAL_UART_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800134c:	f7ff fd32 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001350:	2100      	movs	r1, #0
 8001352:	480d      	ldr	r0, [pc, #52]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 8001354:	f00a fa2e 	bl	800b7b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800135e:	f7ff fd29 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4808      	ldr	r0, [pc, #32]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 8001366:	f00a fa63 	bl	800b830 <HAL_UARTEx_SetRxFifoThreshold>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001370:	f7ff fd20 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	@ (8001388 <MX_USART2_UART_Init+0x90>)
 8001376:	f00a f9e4 	bl	800b742 <HAL_UARTEx_DisableFifoMode>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001380:	f7ff fd18 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	24001560 	.word	0x24001560
 800138c:	40004400 	.word	0x40004400

08001390 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001394:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 8001396:	4a23      	ldr	r2, [pc, #140]	@ (8001424 <MX_USART3_UART_Init+0x94>)
 8001398:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 800139c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80013a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c6:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013cc:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013d8:	4811      	ldr	r0, [pc, #68]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013da:	f008 f971 	bl	80096c0 <HAL_UART_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013e4:	f7ff fce6 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e8:	2100      	movs	r1, #0
 80013ea:	480d      	ldr	r0, [pc, #52]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013ec:	f00a f9e2 	bl	800b7b4 <HAL_UARTEx_SetTxFifoThreshold>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013f6:	f7ff fcdd 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4808      	ldr	r0, [pc, #32]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 80013fe:	f00a fa17 	bl	800b830 <HAL_UARTEx_SetRxFifoThreshold>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001408:	f7ff fcd4 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	@ (8001420 <MX_USART3_UART_Init+0x90>)
 800140e:	f00a f998 	bl	800b742 <HAL_UARTEx_DisableFifoMode>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001418:	f7ff fccc 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	240015f4 	.word	0x240015f4
 8001424:	40004800 	.word	0x40004800

08001428 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0be      	sub	sp, #248	@ 0xf8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	22c0      	movs	r2, #192	@ 0xc0
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f010 fe85 	bl	8012158 <memset>
  if(uartHandle->Instance==USART2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a66      	ldr	r2, [pc, #408]	@ (80015ec <HAL_UART_MspInit+0x1c4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	f040 80d9 	bne.w	800160c <HAL_UART_MspInit+0x1e4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800145a:	f04f 0202 	mov.w	r2, #2
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4618      	mov	r0, r3
 8001472:	f005 f959 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800147c:	f7ff fc9a 	bl	8000db4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001480:	4b5b      	ldr	r3, [pc, #364]	@ (80015f0 <HAL_UART_MspInit+0x1c8>)
 8001482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001486:	4a5a      	ldr	r2, [pc, #360]	@ (80015f0 <HAL_UART_MspInit+0x1c8>)
 8001488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800148c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001490:	4b57      	ldr	r3, [pc, #348]	@ (80015f0 <HAL_UART_MspInit+0x1c8>)
 8001492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b54      	ldr	r3, [pc, #336]	@ (80015f0 <HAL_UART_MspInit+0x1c8>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a4:	4a52      	ldr	r2, [pc, #328]	@ (80015f0 <HAL_UART_MspInit+0x1c8>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ae:	4b50      	ldr	r3, [pc, #320]	@ (80015f0 <HAL_UART_MspInit+0x1c8>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	4b4c      	ldr	r3, [pc, #304]	@ (80015f0 <HAL_UART_MspInit+0x1c8>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c2:	4a4b      	ldr	r2, [pc, #300]	@ (80015f0 <HAL_UART_MspInit+0x1c8>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014cc:	4b48      	ldr	r3, [pc, #288]	@ (80015f0 <HAL_UART_MspInit+0x1c8>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014da:	2308      	movs	r3, #8
 80014dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f2:	2307      	movs	r3, #7
 80014f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014fc:	4619      	mov	r1, r3
 80014fe:	483d      	ldr	r0, [pc, #244]	@ (80015f4 <HAL_UART_MspInit+0x1cc>)
 8001500:	f003 fecc 	bl	800529c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001504:	2320      	movs	r3, #32
 8001506:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151c:	2307      	movs	r3, #7
 800151e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001522:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001526:	4619      	mov	r1, r3
 8001528:	4833      	ldr	r0, [pc, #204]	@ (80015f8 <HAL_UART_MspInit+0x1d0>)
 800152a:	f003 feb7 	bl	800529c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 800152e:	4b33      	ldr	r3, [pc, #204]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 8001530:	4a33      	ldr	r2, [pc, #204]	@ (8001600 <HAL_UART_MspInit+0x1d8>)
 8001532:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001534:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 8001536:	222b      	movs	r2, #43	@ 0x2b
 8001538:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153a:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001540:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001546:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 8001548:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800154c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154e:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001554:	4b29      	ldr	r3, [pc, #164]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800155a:	4b28      	ldr	r3, [pc, #160]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 800155c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001560:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001562:	4b26      	ldr	r3, [pc, #152]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 8001564:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001568:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156a:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001570:	4822      	ldr	r0, [pc, #136]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 8001572:	f001 ff81 	bl	8003478 <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 800157c:	f7ff fc1a 	bl	8000db4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a1e      	ldr	r2, [pc, #120]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 8001584:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001588:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <HAL_UART_MspInit+0x1d4>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 8001590:	4a1d      	ldr	r2, [pc, #116]	@ (8001608 <HAL_UART_MspInit+0x1e0>)
 8001592:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 8001596:	222c      	movs	r2, #44	@ 0x2c
 8001598:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 800159c:	2240      	movs	r2, #64	@ 0x40
 800159e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 80015a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015c0:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 80015c2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015c6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015ce:	480d      	ldr	r0, [pc, #52]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 80015d0:	f001 ff52 	bl	8003478 <HAL_DMA_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_UART_MspInit+0x1b6>
    {
      Error_Handler();
 80015da:	f7ff fbeb 	bl	8000db4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 80015e2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015e4:	4a07      	ldr	r2, [pc, #28]	@ (8001604 <HAL_UART_MspInit+0x1dc>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015ea:	e0c2      	b.n	8001772 <HAL_UART_MspInit+0x34a>
 80015ec:	40004400 	.word	0x40004400
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58020000 	.word	0x58020000
 80015f8:	58020c00 	.word	0x58020c00
 80015fc:	24001688 	.word	0x24001688
 8001600:	40020428 	.word	0x40020428
 8001604:	24001700 	.word	0x24001700
 8001608:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a5a      	ldr	r2, [pc, #360]	@ (800177c <HAL_UART_MspInit+0x354>)
 8001612:	4293      	cmp	r3, r2
 8001614:	f040 80ad 	bne.w	8001772 <HAL_UART_MspInit+0x34a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001618:	f04f 0202 	mov.w	r2, #2
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	4618      	mov	r0, r3
 8001630:	f005 f87a 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_UART_MspInit+0x216>
      Error_Handler();
 800163a:	f7ff fbbb 	bl	8000db4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800163e:	4b50      	ldr	r3, [pc, #320]	@ (8001780 <HAL_UART_MspInit+0x358>)
 8001640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001644:	4a4e      	ldr	r2, [pc, #312]	@ (8001780 <HAL_UART_MspInit+0x358>)
 8001646:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800164e:	4b4c      	ldr	r3, [pc, #304]	@ (8001780 <HAL_UART_MspInit+0x358>)
 8001650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b48      	ldr	r3, [pc, #288]	@ (8001780 <HAL_UART_MspInit+0x358>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001662:	4a47      	ldr	r2, [pc, #284]	@ (8001780 <HAL_UART_MspInit+0x358>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800166c:	4b44      	ldr	r3, [pc, #272]	@ (8001780 <HAL_UART_MspInit+0x358>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800167a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001694:	2307      	movs	r3, #7
 8001696:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800169e:	4619      	mov	r1, r3
 80016a0:	4838      	ldr	r0, [pc, #224]	@ (8001784 <HAL_UART_MspInit+0x35c>)
 80016a2:	f003 fdfb 	bl	800529c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80016a6:	4b38      	ldr	r3, [pc, #224]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016a8:	4a38      	ldr	r2, [pc, #224]	@ (800178c <HAL_UART_MspInit+0x364>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80016ac:	4b36      	ldr	r3, [pc, #216]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016ae:	222d      	movs	r2, #45	@ 0x2d
 80016b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b2:	4b35      	ldr	r3, [pc, #212]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016be:	4b32      	ldr	r3, [pc, #200]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016c4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c6:	4b30      	ldr	r3, [pc, #192]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80016d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016da:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016dc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80016e0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e2:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80016e8:	4827      	ldr	r0, [pc, #156]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016ea:	f001 fec5 	bl	8003478 <HAL_DMA_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 80016f4:	f7ff fb5e 	bl	8000db4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a23      	ldr	r2, [pc, #140]	@ (8001788 <HAL_UART_MspInit+0x360>)
 80016fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001700:	4a21      	ldr	r2, [pc, #132]	@ (8001788 <HAL_UART_MspInit+0x360>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001706:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <HAL_UART_MspInit+0x368>)
 8001708:	4a22      	ldr	r2, [pc, #136]	@ (8001794 <HAL_UART_MspInit+0x36c>)
 800170a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800170c:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <HAL_UART_MspInit+0x368>)
 800170e:	222e      	movs	r2, #46	@ 0x2e
 8001710:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001712:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <HAL_UART_MspInit+0x368>)
 8001714:	2240      	movs	r2, #64	@ 0x40
 8001716:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001718:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <HAL_UART_MspInit+0x368>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171e:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <HAL_UART_MspInit+0x368>)
 8001720:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001724:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_UART_MspInit+0x368>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_UART_MspInit+0x368>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001732:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_UART_MspInit+0x368>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_UART_MspInit+0x368>)
 800173a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800173e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <HAL_UART_MspInit+0x368>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001746:	4812      	ldr	r0, [pc, #72]	@ (8001790 <HAL_UART_MspInit+0x368>)
 8001748:	f001 fe96 	bl	8003478 <HAL_DMA_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_UART_MspInit+0x32e>
      Error_Handler();
 8001752:	f7ff fb2f 	bl	8000db4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <HAL_UART_MspInit+0x368>)
 800175a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800175c:	4a0c      	ldr	r2, [pc, #48]	@ (8001790 <HAL_UART_MspInit+0x368>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2108      	movs	r1, #8
 8001766:	2027      	movs	r0, #39	@ 0x27
 8001768:	f001 fe5e 	bl	8003428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800176c:	2027      	movs	r0, #39	@ 0x27
 800176e:	f001 fe75 	bl	800345c <HAL_NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	37f8      	adds	r7, #248	@ 0xf8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40004800 	.word	0x40004800
 8001780:	58024400 	.word	0x58024400
 8001784:	58020c00 	.word	0x58020c00
 8001788:	24001778 	.word	0x24001778
 800178c:	40020010 	.word	0x40020010
 8001790:	240017f0 	.word	0x240017f0
 8001794:	40020028 	.word	0x40020028

08001798 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8001798:	b084      	sub	sp, #16
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	f107 0c18 	add.w	ip, r7, #24
 80017a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  float_bytes xThrottle;
  float_bytes xSteering;
  float_bytes xBrake;

  xThrottle.fFloat = xControlActionTx.fTrottle;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	60fb      	str	r3, [r7, #12]
  xSteering.fFloat = xControlActionTx.fSteeringAngle;
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	60bb      	str	r3, [r7, #8]
  xBrake.fFloat = xControlActionTx.fBrake;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	607b      	str	r3, [r7, #4]

  ucTxMsg[0]  = (unsigned char)'#';
 80017b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b6:	2223      	movs	r2, #35	@ 0x23
 80017b8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'T';
 80017ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017bc:	3301      	adds	r3, #1
 80017be:	2254      	movs	r2, #84	@ 0x54
 80017c0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xThrottle.ucBytes[0];
 80017c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c4:	3302      	adds	r3, #2
 80017c6:	7b3a      	ldrb	r2, [r7, #12]
 80017c8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xThrottle.ucBytes[1];
 80017ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017cc:	3303      	adds	r3, #3
 80017ce:	7b7a      	ldrb	r2, [r7, #13]
 80017d0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xThrottle.ucBytes[2];
 80017d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d4:	3304      	adds	r3, #4
 80017d6:	7bba      	ldrb	r2, [r7, #14]
 80017d8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xThrottle.ucBytes[3];
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	3305      	adds	r3, #5
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'S';
 80017e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e4:	3306      	adds	r3, #6
 80017e6:	2253      	movs	r2, #83	@ 0x53
 80017e8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xSteering.ucBytes[0];
 80017ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ec:	3307      	adds	r3, #7
 80017ee:	7a3a      	ldrb	r2, [r7, #8]
 80017f0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xSteering.ucBytes[1];
 80017f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f4:	3308      	adds	r3, #8
 80017f6:	7a7a      	ldrb	r2, [r7, #9]
 80017f8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xSteering.ucBytes[2];
 80017fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fc:	3309      	adds	r3, #9
 80017fe:	7aba      	ldrb	r2, [r7, #10]
 8001800:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xSteering.ucBytes[3];
 8001802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001804:	330a      	adds	r3, #10
 8001806:	7afa      	ldrb	r2, [r7, #11]
 8001808:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'B';
 800180a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180c:	330b      	adds	r3, #11
 800180e:	2242      	movs	r2, #66	@ 0x42
 8001810:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xBrake.ucBytes[0];
 8001812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001814:	330c      	adds	r3, #12
 8001816:	793a      	ldrb	r2, [r7, #4]
 8001818:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xBrake.ucBytes[1];
 800181a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800181c:	330d      	adds	r3, #13
 800181e:	797a      	ldrb	r2, [r7, #5]
 8001820:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xBrake.ucBytes[2];
 8001822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001824:	330e      	adds	r3, #14
 8001826:	79ba      	ldrb	r2, [r7, #6]
 8001828:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xBrake.ucBytes[3];
 800182a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800182c:	330f      	adds	r3, #15
 800182e:	79fa      	ldrb	r2, [r7, #7]
 8001830:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'H';
 8001832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001834:	3310      	adds	r3, #16
 8001836:	2248      	movs	r2, #72	@ 0x48
 8001838:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.ucHandBrake;
 800183a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183c:	3311      	adds	r3, #17
 800183e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001842:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = (unsigned char)'R';
 8001844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001846:	3312      	adds	r3, #18
 8001848:	2252      	movs	r2, #82	@ 0x52
 800184a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.ucReverse;
 800184c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184e:	3313      	adds	r3, #19
 8001850:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001854:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = (unsigned char)'G';
 8001856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001858:	3314      	adds	r3, #20
 800185a:	2247      	movs	r2, #71	@ 0x47
 800185c:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = xControlActionTx.ucGear;
 800185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001860:	3315      	adds	r3, #21
 8001862:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001866:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = (unsigned char)'M';
 8001868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186a:	3316      	adds	r3, #22
 800186c:	224d      	movs	r2, #77	@ 0x4d
 800186e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.ucManualGearShift;
 8001870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001872:	3317      	adds	r3, #23
 8001874:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001878:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = (unsigned char)'$';
 800187a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187c:	3318      	adds	r3, #24
 800187e:	2224      	movs	r2, #36	@ 0x24
 8001880:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = (unsigned char)'\0';
 8001882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001884:	3319      	adds	r3, #25
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
  
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	b004      	add	sp, #16
 8001896:	4770      	bx	lr

08001898 <ucGetVehicleStatusFromString>:
  * @param  ucSmState: State machine state.
  * @param  ucBufferSize: DMA buffer size.
  * @retval String casted in uc that will be send in serial.
  */
unsigned char ucGetVehicleStatusFromString(vehicle_status * xVehicleStatusRx, unsigned char * ucStringRx, unsigned char ucBufferSize)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	71fb      	strb	r3, [r7, #7]
  unsigned char ucSmState = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]
  unsigned char ucDataProcessed = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75bb      	strb	r3, [r7, #22]
  unsigned char ucIndex = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	757b      	strb	r3, [r7, #21]

  while(ucDataProcessed < strlen((char * )ucStringRx))
 80018b2:	e147      	b.n	8001b44 <ucGetVehicleStatusFromString+0x2ac>
  {
    switch (ucSmState)
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b28      	cmp	r3, #40	@ 0x28
 80018b8:	f200 8135 	bhi.w	8001b26 <ucGetVehicleStatusFromString+0x28e>
 80018bc:	a201      	add	r2, pc, #4	@ (adr r2, 80018c4 <ucGetVehicleStatusFromString+0x2c>)
 80018be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c2:	bf00      	nop
 80018c4:	08001969 	.word	0x08001969
 80018c8:	08001981 	.word	0x08001981
 80018cc:	08001b27 	.word	0x08001b27
 80018d0:	08001b27 	.word	0x08001b27
 80018d4:	08001b27 	.word	0x08001b27
 80018d8:	08001b27 	.word	0x08001b27
 80018dc:	08001b27 	.word	0x08001b27
 80018e0:	08001b27 	.word	0x08001b27
 80018e4:	08001b27 	.word	0x08001b27
 80018e8:	08001b27 	.word	0x08001b27
 80018ec:	08001a3d 	.word	0x08001a3d
 80018f0:	08001a4f 	.word	0x08001a4f
 80018f4:	08001a61 	.word	0x08001a61
 80018f8:	08001a73 	.word	0x08001a73
 80018fc:	08001b27 	.word	0x08001b27
 8001900:	08001b27 	.word	0x08001b27
 8001904:	08001b27 	.word	0x08001b27
 8001908:	08001b27 	.word	0x08001b27
 800190c:	08001b27 	.word	0x08001b27
 8001910:	08001b27 	.word	0x08001b27
 8001914:	08001a85 	.word	0x08001a85
 8001918:	08001a97 	.word	0x08001a97
 800191c:	08001aa9 	.word	0x08001aa9
 8001920:	08001abb 	.word	0x08001abb
 8001924:	08001b27 	.word	0x08001b27
 8001928:	08001b27 	.word	0x08001b27
 800192c:	08001b27 	.word	0x08001b27
 8001930:	08001b27 	.word	0x08001b27
 8001934:	08001b27 	.word	0x08001b27
 8001938:	08001b27 	.word	0x08001b27
 800193c:	08001acd 	.word	0x08001acd
 8001940:	08001adf 	.word	0x08001adf
 8001944:	08001af1 	.word	0x08001af1
 8001948:	08001b03 	.word	0x08001b03
 800194c:	08001b27 	.word	0x08001b27
 8001950:	08001b27 	.word	0x08001b27
 8001954:	08001b27 	.word	0x08001b27
 8001958:	08001b27 	.word	0x08001b27
 800195c:	08001b27 	.word	0x08001b27
 8001960:	08001b27 	.word	0x08001b27
 8001964:	08001b15 	.word	0x08001b15
    {
      case 0:
        if('#' == ucStringRx[ucIndex])
 8001968:	7d7b      	ldrb	r3, [r7, #21]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b23      	cmp	r3, #35	@ 0x23
 8001972:	f040 80da 	bne.w	8001b2a <ucGetVehicleStatusFromString+0x292>
        {
          ucSmState = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	75fb      	strb	r3, [r7, #23]
          ucDataProcessed = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	75bb      	strb	r3, [r7, #22]
        }
        break;
 800197e:	e0d4      	b.n	8001b2a <ucGetVehicleStatusFromString+0x292>
      
      case 1:
        switch (ucStringRx[ucIndex])
 8001980:	7d7b      	ldrb	r3, [r7, #21]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	4413      	add	r3, r2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	3b24      	subs	r3, #36	@ 0x24
 800198a:	2b20      	cmp	r3, #32
 800198c:	d854      	bhi.n	8001a38 <ucGetVehicleStatusFromString+0x1a0>
 800198e:	a201      	add	r2, pc, #4	@ (adr r2, 8001994 <ucGetVehicleStatusFromString+0xfc>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	08001a31 	.word	0x08001a31
 8001998:	08001a39 	.word	0x08001a39
 800199c:	08001a39 	.word	0x08001a39
 80019a0:	08001a39 	.word	0x08001a39
 80019a4:	08001a39 	.word	0x08001a39
 80019a8:	08001a39 	.word	0x08001a39
 80019ac:	08001a39 	.word	0x08001a39
 80019b0:	08001a39 	.word	0x08001a39
 80019b4:	08001a39 	.word	0x08001a39
 80019b8:	08001a39 	.word	0x08001a39
 80019bc:	08001a39 	.word	0x08001a39
 80019c0:	08001a39 	.word	0x08001a39
 80019c4:	08001a39 	.word	0x08001a39
 80019c8:	08001a39 	.word	0x08001a39
 80019cc:	08001a39 	.word	0x08001a39
 80019d0:	08001a39 	.word	0x08001a39
 80019d4:	08001a39 	.word	0x08001a39
 80019d8:	08001a39 	.word	0x08001a39
 80019dc:	08001a39 	.word	0x08001a39
 80019e0:	08001a39 	.word	0x08001a39
 80019e4:	08001a39 	.word	0x08001a39
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a39 	.word	0x08001a39
 80019f0:	08001a39 	.word	0x08001a39
 80019f4:	08001a39 	.word	0x08001a39
 80019f8:	08001a39 	.word	0x08001a39
 80019fc:	08001a39 	.word	0x08001a39
 8001a00:	08001a39 	.word	0x08001a39
 8001a04:	08001a39 	.word	0x08001a39
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a1f 	.word	0x08001a1f
 8001a10:	08001a25 	.word	0x08001a25
 8001a14:	08001a2b 	.word	0x08001a2b
        {
          case 'A':
            ucSmState = 10;
 8001a18:	230a      	movs	r3, #10
 8001a1a:	75fb      	strb	r3, [r7, #23]
            break;
 8001a1c:	e00d      	b.n	8001a3a <ucGetVehicleStatusFromString+0x1a2>

          case 'B':
            ucSmState = 20;
 8001a1e:	2314      	movs	r3, #20
 8001a20:	75fb      	strb	r3, [r7, #23]
            break;
 8001a22:	e00a      	b.n	8001a3a <ucGetVehicleStatusFromString+0x1a2>

          case 'C':
            ucSmState = 30;
 8001a24:	231e      	movs	r3, #30
 8001a26:	75fb      	strb	r3, [r7, #23]
            break;
 8001a28:	e007      	b.n	8001a3a <ucGetVehicleStatusFromString+0x1a2>

          case 'D':
            ucSmState = 40;
 8001a2a:	2328      	movs	r3, #40	@ 0x28
 8001a2c:	75fb      	strb	r3, [r7, #23]
            break;
 8001a2e:	e004      	b.n	8001a3a <ucGetVehicleStatusFromString+0x1a2>

          case '$':
            ucSmState = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	75fb      	strb	r3, [r7, #23]
            return 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e08e      	b.n	8001b56 <ucGetVehicleStatusFromString+0x2be>
            break;
                
          default:
              break;
 8001a38:	bf00      	nop
        }
        break;
 8001a3a:	e077      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 10:
        xVehicleStatusRx->xLongSpeed.ucBytes[0] = ucStringRx[ucIndex];
 8001a3c:	7d7b      	ldrb	r3, [r7, #21]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	4413      	add	r3, r2
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	701a      	strb	r2, [r3, #0]
        ucSmState = 11;
 8001a48:	230b      	movs	r3, #11
 8001a4a:	75fb      	strb	r3, [r7, #23]
        break;
 8001a4c:	e06e      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 11:
        xVehicleStatusRx->xLongSpeed.ucBytes[1] = ucStringRx[ucIndex];
 8001a4e:	7d7b      	ldrb	r3, [r7, #21]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	4413      	add	r3, r2
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	705a      	strb	r2, [r3, #1]
        ucSmState = 12;
 8001a5a:	230c      	movs	r3, #12
 8001a5c:	75fb      	strb	r3, [r7, #23]
        break;
 8001a5e:	e065      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 12:
        xVehicleStatusRx->xLongSpeed.ucBytes[2] = ucStringRx[ucIndex];
 8001a60:	7d7b      	ldrb	r3, [r7, #21]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	4413      	add	r3, r2
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	709a      	strb	r2, [r3, #2]
        ucSmState = 13;
 8001a6c:	230d      	movs	r3, #13
 8001a6e:	75fb      	strb	r3, [r7, #23]
        break;
 8001a70:	e05c      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 13:
        xVehicleStatusRx->xLongSpeed.ucBytes[3] = ucStringRx[ucIndex];
 8001a72:	7d7b      	ldrb	r3, [r7, #21]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	4413      	add	r3, r2
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	70da      	strb	r2, [r3, #3]
        ucSmState = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	75fb      	strb	r3, [r7, #23]
        break;
 8001a82:	e053      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 20:
        xVehicleStatusRx->xLatSpeed.ucBytes[0] = ucStringRx[ucIndex];
 8001a84:	7d7b      	ldrb	r3, [r7, #21]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	4413      	add	r3, r2
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	711a      	strb	r2, [r3, #4]
        ucSmState = 21;
 8001a90:	2315      	movs	r3, #21
 8001a92:	75fb      	strb	r3, [r7, #23]
        break;
 8001a94:	e04a      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 21:
        xVehicleStatusRx->xLatSpeed.ucBytes[1] = ucStringRx[ucIndex];
 8001a96:	7d7b      	ldrb	r3, [r7, #21]
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	715a      	strb	r2, [r3, #5]
        ucSmState = 22;
 8001aa2:	2316      	movs	r3, #22
 8001aa4:	75fb      	strb	r3, [r7, #23]
        break;
 8001aa6:	e041      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 22:
        xVehicleStatusRx->xLatSpeed.ucBytes[2] = ucStringRx[ucIndex];
 8001aa8:	7d7b      	ldrb	r3, [r7, #21]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	4413      	add	r3, r2
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	719a      	strb	r2, [r3, #6]
        ucSmState = 23;
 8001ab4:	2317      	movs	r3, #23
 8001ab6:	75fb      	strb	r3, [r7, #23]
        break;
 8001ab8:	e038      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 23:
        xVehicleStatusRx->xLatSpeed.ucBytes[3] = ucStringRx[ucIndex];
 8001aba:	7d7b      	ldrb	r3, [r7, #21]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	71da      	strb	r2, [r3, #7]
        ucSmState = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
        break;
 8001aca:	e02f      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 30:
        xVehicleStatusRx->xHeadingRate.ucBytes[0] = ucStringRx[ucIndex];
 8001acc:	7d7b      	ldrb	r3, [r7, #21]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	721a      	strb	r2, [r3, #8]
        ucSmState = 31;
 8001ad8:	231f      	movs	r3, #31
 8001ada:	75fb      	strb	r3, [r7, #23]
        break;
 8001adc:	e026      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 31:
        xVehicleStatusRx->xHeadingRate.ucBytes[1] = ucStringRx[ucIndex];
 8001ade:	7d7b      	ldrb	r3, [r7, #21]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	725a      	strb	r2, [r3, #9]
        ucSmState = 32;
 8001aea:	2320      	movs	r3, #32
 8001aec:	75fb      	strb	r3, [r7, #23]
        break;
 8001aee:	e01d      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 32:
        xVehicleStatusRx->xHeadingRate.ucBytes[2] = ucStringRx[ucIndex];
 8001af0:	7d7b      	ldrb	r3, [r7, #21]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	4413      	add	r3, r2
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	729a      	strb	r2, [r3, #10]
        ucSmState = 33;
 8001afc:	2321      	movs	r3, #33	@ 0x21
 8001afe:	75fb      	strb	r3, [r7, #23]
        break;
 8001b00:	e014      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 33:
        xVehicleStatusRx->xHeadingRate.ucBytes[3] = ucStringRx[ucIndex];
 8001b02:	7d7b      	ldrb	r3, [r7, #21]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	4413      	add	r3, r2
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	72da      	strb	r2, [r3, #11]
        ucSmState = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
        break;
 8001b12:	e00b      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>

      case 40:
        xVehicleStatusRx->ucGear = ucStringRx[ucIndex];
 8001b14:	7d7b      	ldrb	r3, [r7, #21]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4413      	add	r3, r2
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	731a      	strb	r2, [r3, #12]
        ucSmState = 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	75fb      	strb	r3, [r7, #23]
        break;
 8001b24:	e002      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>


      default:
          break;
 8001b26:	bf00      	nop
 8001b28:	e000      	b.n	8001b2c <ucGetVehicleStatusFromString+0x294>
        break;
 8001b2a:	bf00      	nop
    }

    ucIndex = (ucIndex + 1) % ucBufferSize;
 8001b2c:	7d7b      	ldrb	r3, [r7, #21]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	79fa      	ldrb	r2, [r7, #7]
 8001b32:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b36:	fb01 f202 	mul.w	r2, r1, r2
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	757b      	strb	r3, [r7, #21]
    ucDataProcessed++;
 8001b3e:	7dbb      	ldrb	r3, [r7, #22]
 8001b40:	3301      	adds	r3, #1
 8001b42:	75bb      	strb	r3, [r7, #22]
  while(ucDataProcessed < strlen((char * )ucStringRx))
 8001b44:	7dbc      	ldrb	r4, [r7, #22]
 8001b46:	68b8      	ldr	r0, [r7, #8]
 8001b48:	f7fe fbd4 	bl	80002f4 <strlen>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	429c      	cmp	r4, r3
 8001b50:	f4ff aeb0 	bcc.w	80018b4 <ucGetVehicleStatusFromString+0x1c>

  }
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	bf00      	nop

08001b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b64:	f7ff faac 	bl	80010c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b68:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6a:	490d      	ldr	r1, [pc, #52]	@ (8001ba0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b80:	4c0a      	ldr	r4, [pc, #40]	@ (8001bac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f010 fb9d 	bl	80122cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b92:	f7ff f82b 	bl	8000bec <main>
  bx  lr
 8001b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b98:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ba0:	240013ec 	.word	0x240013ec
  ldr r2, =_sidata
 8001ba4:	080140fc 	.word	0x080140fc
  ldr r2, =_sbss
 8001ba8:	240013ec 	.word	0x240013ec
  ldr r4, =_ebss
 8001bac:	240334e0 	.word	0x240334e0

08001bb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC3_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bba:	2003      	movs	r0, #3
 8001bbc:	f001 fc29 	bl	8003412 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bc0:	f004 fb9a 	bl	80062f8 <HAL_RCC_GetSysClockFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <HAL_Init+0x68>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	4913      	ldr	r1, [pc, #76]	@ (8001c20 <HAL_Init+0x6c>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bde:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <HAL_Init+0x68>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c20 <HAL_Init+0x6c>)
 8001be8:	5cd3      	ldrb	r3, [r2, r3]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <HAL_Init+0x70>)
 8001bf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c28 <HAL_Init+0x74>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f7ff f8fc 	bl	8000dfc <HAL_InitTick>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e002      	b.n	8001c14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c0e:	f7ff f8d7 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	080126f8 	.word	0x080126f8
 8001c24:	24000004 	.word	0x24000004
 8001c28:	24000000 	.word	0x24000000

08001c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_IncTick+0x20>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_IncTick+0x24>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a04      	ldr	r2, [pc, #16]	@ (8001c50 <HAL_IncTick+0x24>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2400000c 	.word	0x2400000c
 8001c50:	24001868 	.word	0x24001868

08001c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <HAL_GetTick+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	24001868 	.word	0x24001868

08001c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff ffee 	bl	8001c54 <HAL_GetTick>
 8001c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c84:	d005      	beq.n	8001c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <HAL_Delay+0x44>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c92:	bf00      	nop
 8001c94:	f7ff ffde 	bl	8001c54 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d8f7      	bhi.n	8001c94 <HAL_Delay+0x28>
  {
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2400000c 	.word	0x2400000c

08001cb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <HAL_GetREVID+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	5c001000 	.word	0x5c001000

08001ccc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3360      	adds	r3, #96	@ 0x60
 8001d46:	461a      	mov	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d68:	bf00      	nop
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	431a      	orrs	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	611a      	str	r2, [r3, #16]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b087      	sub	sp, #28
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3360      	adds	r3, #96	@ 0x60
 8001db6:	461a      	mov	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	601a      	str	r2, [r3, #0]
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	371c      	adds	r7, #28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b087      	sub	sp, #28
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3330      	adds	r3, #48	@ 0x30
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	4413      	add	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	211f      	movs	r1, #31
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	401a      	ands	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0e9b      	lsrs	r3, r3, #26
 8001e3a:	f003 011f 	and.w	r1, r3, #31
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f023 0203 	bic.w	r2, r3, #3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3314      	adds	r3, #20
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	0e5b      	lsrs	r3, r3, #25
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0d1b      	lsrs	r3, r3, #20
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2107      	movs	r1, #7
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	0d1b      	lsrs	r3, r3, #20
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001eca:	bf00      	nop
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0318 	and.w	r3, r3, #24
 8001efa:	4908      	ldr	r1, [pc, #32]	@ (8001f1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001efc:	40d9      	lsrs	r1, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	400b      	ands	r3, r1
 8001f02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f06:	431a      	orrs	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	000fffff 	.word	0x000fffff

08001f20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6093      	str	r3, [r2, #8]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	5fffffc0 	.word	0x5fffffc0

08001f60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <LL_ADC_EnableInternalRegulator+0x24>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	6fffffc0 	.word	0x6fffffc0

08001fb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fc4:	d101      	bne.n	8001fca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <LL_ADC_Enable+0x24>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	f043 0201 	orr.w	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	7fffffc0 	.word	0x7fffffc0

08002000 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <LL_ADC_IsEnabled+0x18>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <LL_ADC_IsEnabled+0x1a>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <LL_ADC_REG_StartConversion+0x24>)
 8002036:	4013      	ands	r3, r2
 8002038:	f043 0204 	orr.w	r2, r3, #4
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	7fffffc0 	.word	0x7fffffc0

08002050 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b04      	cmp	r3, #4
 8002062:	d101      	bne.n	8002068 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b08      	cmp	r3, #8
 8002088:	d101      	bne.n	800208e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e18f      	b.n	80023d6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d109      	bne.n	80020d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7fe fb1f 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff3f 	bl	8001f60 <LL_ADC_IsDeepPowerDownEnabled>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff25 	bl	8001f3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff5a 	bl	8001fb0 <LL_ADC_IsInternalRegulatorEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d114      	bne.n	800212c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff3e 	bl	8001f88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210c:	4b87      	ldr	r3, [pc, #540]	@ (800232c <HAL_ADC_Init+0x290>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	4a87      	ldr	r2, [pc, #540]	@ (8002330 <HAL_ADC_Init+0x294>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	3301      	adds	r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800211e:	e002      	b.n	8002126 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	3b01      	subs	r3, #1
 8002124:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f9      	bne.n	8002120 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff3d 	bl	8001fb0 <LL_ADC_IsInternalRegulatorEnabled>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10d      	bne.n	8002158 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002140:	f043 0210 	orr.w	r2, r3, #16
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214c:	f043 0201 	orr.w	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff77 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 8002162:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 8129 	bne.w	80023c4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f040 8125 	bne.w	80023c4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002182:	f043 0202 	orr.w	r2, r3, #2
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff36 	bl	8002000 <LL_ADC_IsEnabled>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d136      	bne.n	8002208 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a65      	ldr	r2, [pc, #404]	@ (8002334 <HAL_ADC_Init+0x298>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_ADC_Init+0x112>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a63      	ldr	r2, [pc, #396]	@ (8002338 <HAL_ADC_Init+0x29c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10e      	bne.n	80021cc <HAL_ADC_Init+0x130>
 80021ae:	4861      	ldr	r0, [pc, #388]	@ (8002334 <HAL_ADC_Init+0x298>)
 80021b0:	f7ff ff26 	bl	8002000 <LL_ADC_IsEnabled>
 80021b4:	4604      	mov	r4, r0
 80021b6:	4860      	ldr	r0, [pc, #384]	@ (8002338 <HAL_ADC_Init+0x29c>)
 80021b8:	f7ff ff22 	bl	8002000 <LL_ADC_IsEnabled>
 80021bc:	4603      	mov	r3, r0
 80021be:	4323      	orrs	r3, r4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e008      	b.n	80021de <HAL_ADC_Init+0x142>
 80021cc:	485b      	ldr	r0, [pc, #364]	@ (800233c <HAL_ADC_Init+0x2a0>)
 80021ce:	f7ff ff17 	bl	8002000 <LL_ADC_IsEnabled>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d012      	beq.n	8002208 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a53      	ldr	r2, [pc, #332]	@ (8002334 <HAL_ADC_Init+0x298>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_ADC_Init+0x15a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a51      	ldr	r2, [pc, #324]	@ (8002338 <HAL_ADC_Init+0x29c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_Init+0x15e>
 80021f6:	4a52      	ldr	r2, [pc, #328]	@ (8002340 <HAL_ADC_Init+0x2a4>)
 80021f8:	e000      	b.n	80021fc <HAL_ADC_Init+0x160>
 80021fa:	4a52      	ldr	r2, [pc, #328]	@ (8002344 <HAL_ADC_Init+0x2a8>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4619      	mov	r1, r3
 8002202:	4610      	mov	r0, r2
 8002204:	f7ff fd62 	bl	8001ccc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002208:	f7ff fd54 	bl	8001cb4 <HAL_GetREVID>
 800220c:	4603      	mov	r3, r0
 800220e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002212:	4293      	cmp	r3, r2
 8002214:	d914      	bls.n	8002240 <HAL_ADC_Init+0x1a4>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b10      	cmp	r3, #16
 800221c:	d110      	bne.n	8002240 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7d5b      	ldrb	r3, [r3, #21]
 8002222:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002228:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800222e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7f1b      	ldrb	r3, [r3, #28]
 8002234:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002236:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002238:	f043 030c 	orr.w	r3, r3, #12
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	e00d      	b.n	800225c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7d5b      	ldrb	r3, [r3, #21]
 8002244:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800224a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002250:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7f1b      	ldrb	r3, [r3, #28]
 8002256:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7f1b      	ldrb	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d106      	bne.n	8002272 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	3b01      	subs	r3, #1
 800226a:	045b      	lsls	r3, r3, #17
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002286:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	4b2c      	ldr	r3, [pc, #176]	@ (8002348 <HAL_ADC_Init+0x2ac>)
 8002296:	4013      	ands	r3, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	69b9      	ldr	r1, [r7, #24]
 800229e:	430b      	orrs	r3, r1
 80022a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fed2 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 80022ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fedf 	bl	8002076 <LL_ADC_INJ_IsConversionOngoing>
 80022b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d15f      	bne.n	8002380 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d15c      	bne.n	8002380 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7d1b      	ldrb	r3, [r3, #20]
 80022ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <HAL_ADC_Init+0x2b0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	69b9      	ldr	r1, [r7, #24]
 80022e4:	430b      	orrs	r3, r1
 80022e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d130      	bne.n	8002354 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <HAL_ADC_Init+0x2b4>)
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002306:	3a01      	subs	r2, #1
 8002308:	0411      	lsls	r1, r2, #16
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800230e:	4311      	orrs	r1, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002314:	4311      	orrs	r1, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800231a:	430a      	orrs	r2, r1
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	611a      	str	r2, [r3, #16]
 8002328:	e01c      	b.n	8002364 <HAL_ADC_Init+0x2c8>
 800232a:	bf00      	nop
 800232c:	24000000 	.word	0x24000000
 8002330:	053e2d63 	.word	0x053e2d63
 8002334:	40022000 	.word	0x40022000
 8002338:	40022100 	.word	0x40022100
 800233c:	58026000 	.word	0x58026000
 8002340:	40022300 	.word	0x40022300
 8002344:	58026300 	.word	0x58026300
 8002348:	fff0c003 	.word	0xfff0c003
 800234c:	ffffbffc 	.word	0xffffbffc
 8002350:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fd8c 	bl	8002e98 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d10c      	bne.n	80023a2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f023 010f 	bic.w	r1, r3, #15
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	1e5a      	subs	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	631a      	str	r2, [r3, #48]	@ 0x30
 80023a0:	e007      	b.n	80023b2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 020f 	bic.w	r2, r2, #15
 80023b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80023c2:	e007      	b.n	80023d4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c8:	f043 0210 	orr.w	r2, r3, #16
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	@ 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd90      	pop	{r4, r7, pc}
 80023de:	bf00      	nop

080023e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a55      	ldr	r2, [pc, #340]	@ (8002548 <HAL_ADC_Start_DMA+0x168>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_ADC_Start_DMA+0x20>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a54      	ldr	r2, [pc, #336]	@ (800254c <HAL_ADC_Start_DMA+0x16c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_Start_DMA+0x24>
 8002400:	4b53      	ldr	r3, [pc, #332]	@ (8002550 <HAL_ADC_Start_DMA+0x170>)
 8002402:	e000      	b.n	8002406 <HAL_ADC_Start_DMA+0x26>
 8002404:	4b53      	ldr	r3, [pc, #332]	@ (8002554 <HAL_ADC_Start_DMA+0x174>)
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fd8a 	bl	8001f20 <LL_ADC_GetMultimode>
 800240c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fe1c 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 808c 	bne.w	8002538 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_ADC_Start_DMA+0x4e>
 800242a:	2302      	movs	r3, #2
 800242c:	e087      	b.n	800253e <HAL_ADC_Start_DMA+0x15e>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d002      	beq.n	8002448 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b09      	cmp	r3, #9
 8002446:	d170      	bne.n	800252a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fc07 	bl	8002c5c <ADC_Enable>
 800244e:	4603      	mov	r3, r0
 8002450:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d163      	bne.n	8002520 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800245c:	4b3e      	ldr	r3, [pc, #248]	@ (8002558 <HAL_ADC_Start_DMA+0x178>)
 800245e:	4013      	ands	r3, r2
 8002460:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a37      	ldr	r2, [pc, #220]	@ (800254c <HAL_ADC_Start_DMA+0x16c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d002      	beq.n	8002478 <HAL_ADC_Start_DMA+0x98>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	e000      	b.n	800247a <HAL_ADC_Start_DMA+0x9a>
 8002478:	4b33      	ldr	r3, [pc, #204]	@ (8002548 <HAL_ADC_Start_DMA+0x168>)
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	4293      	cmp	r3, r2
 8002480:	d002      	beq.n	8002488 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a4:	f023 0206 	bic.w	r2, r3, #6
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80024ac:	e002      	b.n	80024b4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b8:	4a28      	ldr	r2, [pc, #160]	@ (800255c <HAL_ADC_Start_DMA+0x17c>)
 80024ba:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c0:	4a27      	ldr	r2, [pc, #156]	@ (8002560 <HAL_ADC_Start_DMA+0x180>)
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c8:	4a26      	ldr	r2, [pc, #152]	@ (8002564 <HAL_ADC_Start_DMA+0x184>)
 80024ca:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	221c      	movs	r2, #28
 80024d2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0210 	orr.w	r2, r2, #16
 80024ea:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f7ff fcaf 	bl	8001e5a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3340      	adds	r3, #64	@ 0x40
 8002506:	4619      	mov	r1, r3
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f001 fb10 	bl	8003b30 <HAL_DMA_Start_IT>
 8002510:	4603      	mov	r3, r0
 8002512:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fd85 	bl	8002028 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800251e:	e00d      	b.n	800253c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002528:	e008      	b.n	800253c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002536:	e001      	b.n	800253c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002538:	2302      	movs	r3, #2
 800253a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800253c:	7dfb      	ldrb	r3, [r7, #23]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40022100 	.word	0x40022100
 8002550:	40022300 	.word	0x40022300
 8002554:	58026300 	.word	0x58026300
 8002558:	fffff0fe 	.word	0xfffff0fe
 800255c:	08002d71 	.word	0x08002d71
 8002560:	08002e49 	.word	0x08002e49
 8002564:	08002e65 	.word	0x08002e65

08002568 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b0a1      	sub	sp, #132	@ 0x84
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a65      	ldr	r2, [pc, #404]	@ (8002754 <HAL_ADC_ConfigChannel+0x1b0>)
 80025be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x2a>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e32e      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x688>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fd38 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 8313 	bne.w	8002c0e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db2c      	blt.n	800264a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d108      	bne.n	800260e <HAL_ADC_ConfigChannel+0x6a>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2201      	movs	r2, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	e016      	b.n	800263c <HAL_ADC_ConfigChannel+0x98>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800261c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800261e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002626:	2320      	movs	r3, #32
 8002628:	e003      	b.n	8002632 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800262a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2201      	movs	r2, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	69d1      	ldr	r1, [r2, #28]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	430b      	orrs	r3, r1
 8002648:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	f7ff fbd3 	bl	8001e02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fcf5 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 8002666:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fd02 	bl	8002076 <LL_ADC_INJ_IsConversionOngoing>
 8002672:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 80b8 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800267c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80b4 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6819      	ldr	r1, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	461a      	mov	r2, r3
 8002692:	f7ff fbf5 	bl	8001e80 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002696:	4b30      	ldr	r3, [pc, #192]	@ (8002758 <HAL_ADC_ConfigChannel+0x1b4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800269e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026a2:	d10b      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x118>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	e01d      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x154>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10b      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x13e>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	e00a      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x154>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d02c      	beq.n	800275c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6919      	ldr	r1, [r3, #16]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002710:	f7ff fb10 	bl	8001d34 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6919      	ldr	r1, [r3, #16]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	7e5b      	ldrb	r3, [r3, #25]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d102      	bne.n	800272a <HAL_ADC_ConfigChannel+0x186>
 8002724:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002728:	e000      	b.n	800272c <HAL_ADC_ConfigChannel+0x188>
 800272a:	2300      	movs	r3, #0
 800272c:	461a      	mov	r2, r3
 800272e:	f7ff fb3a 	bl	8001da6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6919      	ldr	r1, [r3, #16]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	7e1b      	ldrb	r3, [r3, #24]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d102      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x1a4>
 8002742:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002746:	e000      	b.n	800274a <HAL_ADC_ConfigChannel+0x1a6>
 8002748:	2300      	movs	r3, #0
 800274a:	461a      	mov	r2, r3
 800274c:	f7ff fb12 	bl	8001d74 <LL_ADC_SetDataRightShift>
 8002750:	e04c      	b.n	80027ec <HAL_ADC_ConfigChannel+0x248>
 8002752:	bf00      	nop
 8002754:	47ff0000 	.word	0x47ff0000
 8002758:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002762:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	069b      	lsls	r3, r3, #26
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800277e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002786:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	069b      	lsls	r3, r3, #26
 8002790:	429a      	cmp	r2, r3
 8002792:	d107      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027a2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	069b      	lsls	r3, r3, #26
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027c6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	069b      	lsls	r3, r3, #26
 80027d8:	429a      	cmp	r2, r3
 80027da:	d107      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027ea:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fc05 	bl	8002000 <LL_ADC_IsEnabled>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 8211 	bne.w	8002c20 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	461a      	mov	r2, r3
 800280c:	f7ff fb64 	bl	8001ed8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4aa1      	ldr	r2, [pc, #644]	@ (8002a9c <HAL_ADC_ConfigChannel+0x4f8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	f040 812e 	bne.w	8002a78 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x2a0>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0e9b      	lsrs	r3, r3, #26
 8002832:	3301      	adds	r3, #1
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	2b09      	cmp	r3, #9
 800283a:	bf94      	ite	ls
 800283c:	2301      	movls	r3, #1
 800283e:	2300      	movhi	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e019      	b.n	8002878 <HAL_ADC_ConfigChannel+0x2d4>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002854:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800285c:	2320      	movs	r3, #32
 800285e:	e003      	b.n	8002868 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2b09      	cmp	r3, #9
 8002870:	bf94      	ite	ls
 8002872:	2301      	movls	r3, #1
 8002874:	2300      	movhi	r3, #0
 8002876:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002878:	2b00      	cmp	r3, #0
 800287a:	d079      	beq.n	8002970 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002884:	2b00      	cmp	r3, #0
 8002886:	d107      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2f4>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	3301      	adds	r3, #1
 8002890:	069b      	lsls	r3, r3, #26
 8002892:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002896:	e015      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x320>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80028a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028a8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80028aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e003      	b.n	80028bc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80028b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	069b      	lsls	r3, r3, #26
 80028c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x340>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0e9b      	lsrs	r3, r3, #26
 80028d6:	3301      	adds	r3, #1
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	e017      	b.n	8002914 <HAL_ADC_ConfigChannel+0x370>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80028fc:	2320      	movs	r3, #32
 80028fe:	e003      	b.n	8002908 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	3301      	adds	r3, #1
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	ea42 0103 	orr.w	r1, r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_ADC_ConfigChannel+0x396>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	3301      	adds	r3, #1
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	051b      	lsls	r3, r3, #20
 8002938:	e018      	b.n	800296c <HAL_ADC_ConfigChannel+0x3c8>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800294c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e003      	b.n	800295e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f003 021f 	and.w	r2, r3, #31
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296c:	430b      	orrs	r3, r1
 800296e:	e07e      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_ADC_ConfigChannel+0x3e8>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	3301      	adds	r3, #1
 8002984:	069b      	lsls	r3, r3, #26
 8002986:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800298a:	e015      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x414>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800299e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80029a4:	2320      	movs	r3, #32
 80029a6:	e003      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80029a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	069b      	lsls	r3, r3, #26
 80029b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x434>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	3301      	adds	r3, #1
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	2101      	movs	r1, #1
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	e017      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x464>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	61bb      	str	r3, [r7, #24]
  return result;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e003      	b.n	80029fc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	ea42 0103 	orr.w	r1, r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x490>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	3b1e      	subs	r3, #30
 8002a2c:	051b      	lsls	r3, r3, #20
 8002a2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a32:	e01b      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x4c8>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	60fb      	str	r3, [r7, #12]
  return result;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f003 021f 	and.w	r2, r3, #31
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	3b1e      	subs	r3, #30
 8002a66:	051b      	lsls	r3, r3, #20
 8002a68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	6892      	ldr	r2, [r2, #8]
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7ff fa04 	bl	8001e80 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f280 80cf 	bge.w	8002c20 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a06      	ldr	r2, [pc, #24]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x4fc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADC_ConfigChannel+0x4f2>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a04      	ldr	r2, [pc, #16]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x500>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10a      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x508>
 8002a96:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x504>)
 8002a98:	e009      	b.n	8002aae <HAL_ADC_ConfigChannel+0x50a>
 8002a9a:	bf00      	nop
 8002a9c:	47ff0000 	.word	0x47ff0000
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40022100 	.word	0x40022100
 8002aa8:	40022300 	.word	0x40022300
 8002aac:	4b61      	ldr	r3, [pc, #388]	@ (8002c34 <HAL_ADC_ConfigChannel+0x690>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f932 	bl	8001d18 <LL_ADC_GetCommonPathInternalCh>
 8002ab4:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5f      	ldr	r2, [pc, #380]	@ (8002c38 <HAL_ADC_ConfigChannel+0x694>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_ADC_ConfigChannel+0x526>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c3c <HAL_ADC_ConfigChannel+0x698>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x544>
 8002aca:	485b      	ldr	r0, [pc, #364]	@ (8002c38 <HAL_ADC_ConfigChannel+0x694>)
 8002acc:	f7ff fa98 	bl	8002000 <LL_ADC_IsEnabled>
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	485a      	ldr	r0, [pc, #360]	@ (8002c3c <HAL_ADC_ConfigChannel+0x698>)
 8002ad4:	f7ff fa94 	bl	8002000 <LL_ADC_IsEnabled>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4323      	orrs	r3, r4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	e008      	b.n	8002afa <HAL_ADC_ConfigChannel+0x556>
 8002ae8:	4855      	ldr	r0, [pc, #340]	@ (8002c40 <HAL_ADC_ConfigChannel+0x69c>)
 8002aea:	f7ff fa89 	bl	8002000 <LL_ADC_IsEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d07d      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a50      	ldr	r2, [pc, #320]	@ (8002c44 <HAL_ADC_ConfigChannel+0x6a0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d130      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x5c6>
 8002b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d12b      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a4a      	ldr	r2, [pc, #296]	@ (8002c40 <HAL_ADC_ConfigChannel+0x69c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	f040 8081 	bne.w	8002c20 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a45      	ldr	r2, [pc, #276]	@ (8002c38 <HAL_ADC_ConfigChannel+0x694>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d004      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x58e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a43      	ldr	r2, [pc, #268]	@ (8002c3c <HAL_ADC_ConfigChannel+0x698>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x592>
 8002b32:	4a45      	ldr	r2, [pc, #276]	@ (8002c48 <HAL_ADC_ConfigChannel+0x6a4>)
 8002b34:	e000      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x594>
 8002b36:	4a3f      	ldr	r2, [pc, #252]	@ (8002c34 <HAL_ADC_ConfigChannel+0x690>)
 8002b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f7ff f8d6 	bl	8001cf2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b46:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_ADC_ConfigChannel+0x6a8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	4a40      	ldr	r2, [pc, #256]	@ (8002c50 <HAL_ADC_ConfigChannel+0x6ac>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	3301      	adds	r3, #1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b5a:	e002      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f9      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b68:	e05a      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a39      	ldr	r2, [pc, #228]	@ (8002c54 <HAL_ADC_ConfigChannel+0x6b0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d11e      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x60e>
 8002b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d119      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2f      	ldr	r2, [pc, #188]	@ (8002c40 <HAL_ADC_ConfigChannel+0x69c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d14b      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002c38 <HAL_ADC_ConfigChannel+0x694>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x5f8>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a29      	ldr	r2, [pc, #164]	@ (8002c3c <HAL_ADC_ConfigChannel+0x698>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x5fc>
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002c48 <HAL_ADC_ConfigChannel+0x6a4>)
 8002b9e:	e000      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x5fe>
 8002ba0:	4a24      	ldr	r2, [pc, #144]	@ (8002c34 <HAL_ADC_ConfigChannel+0x690>)
 8002ba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ba4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4610      	mov	r0, r2
 8002bac:	f7ff f8a1 	bl	8001cf2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb0:	e036      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a28      	ldr	r2, [pc, #160]	@ (8002c58 <HAL_ADC_ConfigChannel+0x6b4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d131      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x67c>
 8002bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d12c      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <HAL_ADC_ConfigChannel+0x69c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d127      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a18      	ldr	r2, [pc, #96]	@ (8002c38 <HAL_ADC_ConfigChannel+0x694>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x640>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a17      	ldr	r2, [pc, #92]	@ (8002c3c <HAL_ADC_ConfigChannel+0x698>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x644>
 8002be4:	4a18      	ldr	r2, [pc, #96]	@ (8002c48 <HAL_ADC_ConfigChannel+0x6a4>)
 8002be6:	e000      	b.n	8002bea <HAL_ADC_ConfigChannel+0x646>
 8002be8:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <HAL_ADC_ConfigChannel+0x690>)
 8002bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	f7ff f87d 	bl	8001cf2 <LL_ADC_SetCommonPathInternalCh>
 8002bf8:	e012      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	f043 0220 	orr.w	r2, r3, #32
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002c0c:	e008      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3784      	adds	r7, #132	@ 0x84
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}
 8002c34:	58026300 	.word	0x58026300
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40022100 	.word	0x40022100
 8002c40:	58026000 	.word	0x58026000
 8002c44:	cb840000 	.word	0xcb840000
 8002c48:	40022300 	.word	0x40022300
 8002c4c:	24000000 	.word	0x24000000
 8002c50:	053e2d63 	.word	0x053e2d63
 8002c54:	c7520000 	.word	0xc7520000
 8002c58:	cfb80000 	.word	0xcfb80000

08002c5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff f9c9 	bl	8002000 <LL_ADC_IsEnabled>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d16e      	bne.n	8002d52 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	4b38      	ldr	r3, [pc, #224]	@ (8002d5c <ADC_Enable+0x100>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c86:	f043 0210 	orr.w	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e05a      	b.n	8002d54 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff f998 	bl	8001fd8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe ffd4 	bl	8001c54 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8002d60 <ADC_Enable+0x104>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d004      	beq.n	8002cc2 <ADC_Enable+0x66>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a29      	ldr	r2, [pc, #164]	@ (8002d64 <ADC_Enable+0x108>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <ADC_Enable+0x6a>
 8002cc2:	4b29      	ldr	r3, [pc, #164]	@ (8002d68 <ADC_Enable+0x10c>)
 8002cc4:	e000      	b.n	8002cc8 <ADC_Enable+0x6c>
 8002cc6:	4b29      	ldr	r3, [pc, #164]	@ (8002d6c <ADC_Enable+0x110>)
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff f929 	bl	8001f20 <LL_ADC_GetMultimode>
 8002cce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a23      	ldr	r2, [pc, #140]	@ (8002d64 <ADC_Enable+0x108>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d002      	beq.n	8002ce0 <ADC_Enable+0x84>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	e000      	b.n	8002ce2 <ADC_Enable+0x86>
 8002ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d60 <ADC_Enable+0x104>)
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02c      	beq.n	8002d44 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d130      	bne.n	8002d52 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf0:	e028      	b.n	8002d44 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f982 	bl	8002000 <LL_ADC_IsEnabled>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff f966 	bl	8001fd8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d0c:	f7fe ffa2 	bl	8001c54 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d914      	bls.n	8002d44 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d00d      	beq.n	8002d44 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f043 0210 	orr.w	r2, r3, #16
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e007      	b.n	8002d54 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d1cf      	bne.n	8002cf2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	8000003f 	.word	0x8000003f
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40022100 	.word	0x40022100
 8002d68:	40022300 	.word	0x40022300
 8002d6c:	58026300 	.word	0x58026300

08002d70 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d14b      	bne.n	8002e22 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d021      	beq.n	8002de8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff f817 	bl	8001ddc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d032      	beq.n	8002e1a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d12b      	bne.n	8002e1a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11f      	bne.n	8002e1a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002de6:	e018      	b.n	8002e1a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d111      	bne.n	8002e1a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff fba4 	bl	8002568 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e20:	e00e      	b.n	8002e40 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff fbae 	bl	8002590 <HAL_ADC_ErrorCallback>
}
 8002e34:	e004      	b.n	8002e40 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff fb90 	bl	800257c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e82:	f043 0204 	orr.w	r2, r3, #4
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff fb80 	bl	8002590 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a7a      	ldr	r2, [pc, #488]	@ (8003090 <ADC_ConfigureBoostMode+0x1f8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <ADC_ConfigureBoostMode+0x1c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a79      	ldr	r2, [pc, #484]	@ (8003094 <ADC_ConfigureBoostMode+0x1fc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d109      	bne.n	8002ec8 <ADC_ConfigureBoostMode+0x30>
 8002eb4:	4b78      	ldr	r3, [pc, #480]	@ (8003098 <ADC_ConfigureBoostMode+0x200>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf14      	ite	ne
 8002ec0:	2301      	movne	r3, #1
 8002ec2:	2300      	moveq	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e008      	b.n	8002eda <ADC_ConfigureBoostMode+0x42>
 8002ec8:	4b74      	ldr	r3, [pc, #464]	@ (800309c <ADC_ConfigureBoostMode+0x204>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01c      	beq.n	8002f18 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002ede:	f003 fb85 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 8002ee2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002eec:	d010      	beq.n	8002f10 <ADC_ConfigureBoostMode+0x78>
 8002eee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ef2:	d873      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x144>
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef8:	d002      	beq.n	8002f00 <ADC_ConfigureBoostMode+0x68>
 8002efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002efe:	d16d      	bne.n	8002fdc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	60fb      	str	r3, [r7, #12]
        break;
 8002f0e:	e068      	b.n	8002fe2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	60fb      	str	r3, [r7, #12]
        break;
 8002f16:	e064      	b.n	8002fe2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f18:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f1c:	f04f 0100 	mov.w	r1, #0
 8002f20:	f004 fe0c 	bl	8007b3c <HAL_RCCEx_GetPeriphCLKFreq>
 8002f24:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f2e:	d051      	beq.n	8002fd4 <ADC_ConfigureBoostMode+0x13c>
 8002f30:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f34:	d854      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0x148>
 8002f36:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f3a:	d047      	beq.n	8002fcc <ADC_ConfigureBoostMode+0x134>
 8002f3c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f40:	d84e      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0x148>
 8002f42:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f46:	d03d      	beq.n	8002fc4 <ADC_ConfigureBoostMode+0x12c>
 8002f48:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f4c:	d848      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0x148>
 8002f4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f52:	d033      	beq.n	8002fbc <ADC_ConfigureBoostMode+0x124>
 8002f54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f58:	d842      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0x148>
 8002f5a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f5e:	d029      	beq.n	8002fb4 <ADC_ConfigureBoostMode+0x11c>
 8002f60:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f64:	d83c      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0x148>
 8002f66:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f6a:	d01a      	beq.n	8002fa2 <ADC_ConfigureBoostMode+0x10a>
 8002f6c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f70:	d836      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0x148>
 8002f72:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f76:	d014      	beq.n	8002fa2 <ADC_ConfigureBoostMode+0x10a>
 8002f78:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f7c:	d830      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0x148>
 8002f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f82:	d00e      	beq.n	8002fa2 <ADC_ConfigureBoostMode+0x10a>
 8002f84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f88:	d82a      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0x148>
 8002f8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f8e:	d008      	beq.n	8002fa2 <ADC_ConfigureBoostMode+0x10a>
 8002f90:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f94:	d824      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0x148>
 8002f96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f9a:	d002      	beq.n	8002fa2 <ADC_ConfigureBoostMode+0x10a>
 8002f9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fa0:	d11e      	bne.n	8002fe0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	0c9b      	lsrs	r3, r3, #18
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	60fb      	str	r3, [r7, #12]
        break;
 8002fb2:	e016      	b.n	8002fe2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	60fb      	str	r3, [r7, #12]
        break;
 8002fba:	e012      	b.n	8002fe2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	60fb      	str	r3, [r7, #12]
        break;
 8002fc2:	e00e      	b.n	8002fe2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	60fb      	str	r3, [r7, #12]
        break;
 8002fca:	e00a      	b.n	8002fe2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	09db      	lsrs	r3, r3, #7
 8002fd0:	60fb      	str	r3, [r7, #12]
        break;
 8002fd2:	e006      	b.n	8002fe2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	60fb      	str	r3, [r7, #12]
        break;
 8002fda:	e002      	b.n	8002fe2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002fdc:	bf00      	nop
 8002fde:	e000      	b.n	8002fe2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002fe0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002fe2:	f7fe fe67 	bl	8001cb4 <HAL_GetREVID>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d815      	bhi.n	800301c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80030a0 <ADC_ConfigureBoostMode+0x208>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d908      	bls.n	800300a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003006:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003008:	e03e      	b.n	8003088 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003018:	609a      	str	r2, [r3, #8]
}
 800301a:	e035      	b.n	8003088 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <ADC_ConfigureBoostMode+0x20c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d808      	bhi.n	800303c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003038:	609a      	str	r2, [r3, #8]
}
 800303a:	e025      	b.n	8003088 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <ADC_ConfigureBoostMode+0x210>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d80a      	bhi.n	800305a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003056:	609a      	str	r2, [r3, #8]
}
 8003058:	e016      	b.n	8003088 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a13      	ldr	r2, [pc, #76]	@ (80030ac <ADC_ConfigureBoostMode+0x214>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d80a      	bhi.n	8003078 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003074:	609a      	str	r2, [r3, #8]
}
 8003076:	e007      	b.n	8003088 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40022000 	.word	0x40022000
 8003094:	40022100 	.word	0x40022100
 8003098:	40022300 	.word	0x40022300
 800309c:	58026300 	.word	0x58026300
 80030a0:	01312d00 	.word	0x01312d00
 80030a4:	005f5e10 	.word	0x005f5e10
 80030a8:	00bebc20 	.word	0x00bebc20
 80030ac:	017d7840 	.word	0x017d7840

080030b0 <LL_ADC_IsEnabled>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <LL_ADC_IsEnabled+0x18>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <LL_ADC_IsEnabled+0x1a>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d101      	bne.n	80030ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b09f      	sub	sp, #124	@ 0x7c
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003116:	2302      	movs	r3, #2
 8003118:	e0be      	b.n	8003298 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003122:	2300      	movs	r3, #0
 8003124:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003126:	2300      	movs	r3, #0
 8003128:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5c      	ldr	r2, [pc, #368]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d102      	bne.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003134:	4b5b      	ldr	r3, [pc, #364]	@ (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	e001      	b.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e09d      	b.n	8003298 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ffb9 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 8003164:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ffb3 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d17f      	bne.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003178:	2b00      	cmp	r3, #0
 800317a:	d17c      	bne.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a47      	ldr	r2, [pc, #284]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a46      	ldr	r2, [pc, #280]	@ (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003190:	4b45      	ldr	r3, [pc, #276]	@ (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003192:	e000      	b.n	8003196 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003194:	4b45      	ldr	r3, [pc, #276]	@ (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003196:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d039      	beq.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80031a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031b0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a3a      	ldr	r2, [pc, #232]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a38      	ldr	r2, [pc, #224]	@ (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10e      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031c6:	4836      	ldr	r0, [pc, #216]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031c8:	f7ff ff72 	bl	80030b0 <LL_ADC_IsEnabled>
 80031cc:	4604      	mov	r4, r0
 80031ce:	4835      	ldr	r0, [pc, #212]	@ (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031d0:	f7ff ff6e 	bl	80030b0 <LL_ADC_IsEnabled>
 80031d4:	4603      	mov	r3, r0
 80031d6:	4323      	orrs	r3, r4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e008      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80031e4:	4832      	ldr	r0, [pc, #200]	@ (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80031e6:	f7ff ff63 	bl	80030b0 <LL_ADC_IsEnabled>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d047      	beq.n	800328a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	4b2d      	ldr	r3, [pc, #180]	@ (80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003200:	4013      	ands	r3, r2
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	6811      	ldr	r1, [r2, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	6892      	ldr	r2, [r2, #8]
 800320a:	430a      	orrs	r2, r1
 800320c:	431a      	orrs	r2, r3
 800320e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003210:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003212:	e03a      	b.n	800328a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800321c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800321e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1e      	ldr	r2, [pc, #120]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1d      	ldr	r2, [pc, #116]	@ (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10e      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003234:	481a      	ldr	r0, [pc, #104]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003236:	f7ff ff3b 	bl	80030b0 <LL_ADC_IsEnabled>
 800323a:	4604      	mov	r4, r0
 800323c:	4819      	ldr	r0, [pc, #100]	@ (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800323e:	f7ff ff37 	bl	80030b0 <LL_ADC_IsEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	4323      	orrs	r3, r4
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e008      	b.n	8003264 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003252:	4817      	ldr	r0, [pc, #92]	@ (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003254:	f7ff ff2c 	bl	80030b0 <LL_ADC_IsEnabled>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d010      	beq.n	800328a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800326e:	4013      	ands	r3, r2
 8003270:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003272:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003274:	e009      	b.n	800328a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003288:	e000      	b.n	800328c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800328a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003294:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003298:	4618      	mov	r0, r3
 800329a:	377c      	adds	r7, #124	@ 0x7c
 800329c:	46bd      	mov	sp, r7
 800329e:	bd90      	pop	{r4, r7, pc}
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40022100 	.word	0x40022100
 80032a8:	40022300 	.word	0x40022300
 80032ac:	58026300 	.word	0x58026300
 80032b0:	58026000 	.word	0x58026000
 80032b4:	fffff0e0 	.word	0xfffff0e0

080032b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <__NVIC_SetPriorityGrouping+0x40>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e6:	4a04      	ldr	r2, [pc, #16]	@ (80032f8 <__NVIC_SetPriorityGrouping+0x40>)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	60d3      	str	r3, [r2, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000ed00 	.word	0xe000ed00
 80032fc:	05fa0000 	.word	0x05fa0000

08003300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	@ (8003354 <__NVIC_EnableIRQ+0x38>)
 8003336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	@ (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	@ (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	@ 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	@ 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ff4c 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003436:	f7ff ff63 	bl	8003300 <__NVIC_GetPriorityGrouping>
 800343a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	6978      	ldr	r0, [r7, #20]
 8003442:	f7ff ffb3 	bl	80033ac <NVIC_EncodePriority>
 8003446:	4602      	mov	r2, r0
 8003448:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff82 	bl	8003358 <__NVIC_SetPriority>
}
 8003454:	bf00      	nop
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff56 	bl	800331c <__NVIC_EnableIRQ>
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003480:	f7fe fbe8 	bl	8001c54 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e316      	b.n	8003abe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a66      	ldr	r2, [pc, #408]	@ (8003630 <HAL_DMA_Init+0x1b8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d04a      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a65      	ldr	r2, [pc, #404]	@ (8003634 <HAL_DMA_Init+0x1bc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d045      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a63      	ldr	r2, [pc, #396]	@ (8003638 <HAL_DMA_Init+0x1c0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d040      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a62      	ldr	r2, [pc, #392]	@ (800363c <HAL_DMA_Init+0x1c4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d03b      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a60      	ldr	r2, [pc, #384]	@ (8003640 <HAL_DMA_Init+0x1c8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d036      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003644 <HAL_DMA_Init+0x1cc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d031      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003648 <HAL_DMA_Init+0x1d0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d02c      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a5c      	ldr	r2, [pc, #368]	@ (800364c <HAL_DMA_Init+0x1d4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d027      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003650 <HAL_DMA_Init+0x1d8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d022      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a59      	ldr	r2, [pc, #356]	@ (8003654 <HAL_DMA_Init+0x1dc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d01d      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a57      	ldr	r2, [pc, #348]	@ (8003658 <HAL_DMA_Init+0x1e0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d018      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a56      	ldr	r2, [pc, #344]	@ (800365c <HAL_DMA_Init+0x1e4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a54      	ldr	r2, [pc, #336]	@ (8003660 <HAL_DMA_Init+0x1e8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00e      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a53      	ldr	r2, [pc, #332]	@ (8003664 <HAL_DMA_Init+0x1ec>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a51      	ldr	r2, [pc, #324]	@ (8003668 <HAL_DMA_Init+0x1f0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_DMA_Init+0xb8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a50      	ldr	r2, [pc, #320]	@ (800366c <HAL_DMA_Init+0x1f4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_DMA_Init+0xbc>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_DMA_Init+0xbe>
 8003534:	2300      	movs	r3, #0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 813b 	beq.w	80037b2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a37      	ldr	r2, [pc, #220]	@ (8003630 <HAL_DMA_Init+0x1b8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d04a      	beq.n	80035ec <HAL_DMA_Init+0x174>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a36      	ldr	r2, [pc, #216]	@ (8003634 <HAL_DMA_Init+0x1bc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d045      	beq.n	80035ec <HAL_DMA_Init+0x174>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a34      	ldr	r2, [pc, #208]	@ (8003638 <HAL_DMA_Init+0x1c0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d040      	beq.n	80035ec <HAL_DMA_Init+0x174>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a33      	ldr	r2, [pc, #204]	@ (800363c <HAL_DMA_Init+0x1c4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d03b      	beq.n	80035ec <HAL_DMA_Init+0x174>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a31      	ldr	r2, [pc, #196]	@ (8003640 <HAL_DMA_Init+0x1c8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d036      	beq.n	80035ec <HAL_DMA_Init+0x174>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a30      	ldr	r2, [pc, #192]	@ (8003644 <HAL_DMA_Init+0x1cc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d031      	beq.n	80035ec <HAL_DMA_Init+0x174>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2e      	ldr	r2, [pc, #184]	@ (8003648 <HAL_DMA_Init+0x1d0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d02c      	beq.n	80035ec <HAL_DMA_Init+0x174>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2d      	ldr	r2, [pc, #180]	@ (800364c <HAL_DMA_Init+0x1d4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d027      	beq.n	80035ec <HAL_DMA_Init+0x174>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003650 <HAL_DMA_Init+0x1d8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d022      	beq.n	80035ec <HAL_DMA_Init+0x174>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003654 <HAL_DMA_Init+0x1dc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d01d      	beq.n	80035ec <HAL_DMA_Init+0x174>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a28      	ldr	r2, [pc, #160]	@ (8003658 <HAL_DMA_Init+0x1e0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d018      	beq.n	80035ec <HAL_DMA_Init+0x174>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a27      	ldr	r2, [pc, #156]	@ (800365c <HAL_DMA_Init+0x1e4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <HAL_DMA_Init+0x174>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a25      	ldr	r2, [pc, #148]	@ (8003660 <HAL_DMA_Init+0x1e8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <HAL_DMA_Init+0x174>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a24      	ldr	r2, [pc, #144]	@ (8003664 <HAL_DMA_Init+0x1ec>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_DMA_Init+0x174>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a22      	ldr	r2, [pc, #136]	@ (8003668 <HAL_DMA_Init+0x1f0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_DMA_Init+0x174>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a21      	ldr	r2, [pc, #132]	@ (800366c <HAL_DMA_Init+0x1f4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d108      	bne.n	80035fe <HAL_DMA_Init+0x186>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e007      	b.n	800360e <HAL_DMA_Init+0x196>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800360e:	e02f      	b.n	8003670 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003610:	f7fe fb20 	bl	8001c54 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b05      	cmp	r3, #5
 800361c:	d928      	bls.n	8003670 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2203      	movs	r2, #3
 8003628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e246      	b.n	8003abe <HAL_DMA_Init+0x646>
 8003630:	40020010 	.word	0x40020010
 8003634:	40020028 	.word	0x40020028
 8003638:	40020040 	.word	0x40020040
 800363c:	40020058 	.word	0x40020058
 8003640:	40020070 	.word	0x40020070
 8003644:	40020088 	.word	0x40020088
 8003648:	400200a0 	.word	0x400200a0
 800364c:	400200b8 	.word	0x400200b8
 8003650:	40020410 	.word	0x40020410
 8003654:	40020428 	.word	0x40020428
 8003658:	40020440 	.word	0x40020440
 800365c:	40020458 	.word	0x40020458
 8003660:	40020470 	.word	0x40020470
 8003664:	40020488 	.word	0x40020488
 8003668:	400204a0 	.word	0x400204a0
 800366c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1c8      	bne.n	8003610 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4b83      	ldr	r3, [pc, #524]	@ (8003898 <HAL_DMA_Init+0x420>)
 800368a:	4013      	ands	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003696:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d107      	bne.n	80036d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	4313      	orrs	r3, r2
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80036d4:	4b71      	ldr	r3, [pc, #452]	@ (800389c <HAL_DMA_Init+0x424>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b71      	ldr	r3, [pc, #452]	@ (80038a0 <HAL_DMA_Init+0x428>)
 80036da:	4013      	ands	r3, r2
 80036dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036e0:	d328      	bcc.n	8003734 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b28      	cmp	r3, #40	@ 0x28
 80036e8:	d903      	bls.n	80036f2 <HAL_DMA_Init+0x27a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80036f0:	d917      	bls.n	8003722 <HAL_DMA_Init+0x2aa>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80036f8:	d903      	bls.n	8003702 <HAL_DMA_Init+0x28a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b42      	cmp	r3, #66	@ 0x42
 8003700:	d90f      	bls.n	8003722 <HAL_DMA_Init+0x2aa>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b46      	cmp	r3, #70	@ 0x46
 8003708:	d903      	bls.n	8003712 <HAL_DMA_Init+0x29a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b48      	cmp	r3, #72	@ 0x48
 8003710:	d907      	bls.n	8003722 <HAL_DMA_Init+0x2aa>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b4e      	cmp	r3, #78	@ 0x4e
 8003718:	d905      	bls.n	8003726 <HAL_DMA_Init+0x2ae>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b52      	cmp	r3, #82	@ 0x52
 8003720:	d801      	bhi.n	8003726 <HAL_DMA_Init+0x2ae>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_DMA_Init+0x2b0>
 8003726:	2300      	movs	r3, #0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003732:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0307 	bic.w	r3, r3, #7
 800374a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	2b04      	cmp	r3, #4
 800375c:	d117      	bne.n	800378e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00e      	beq.n	800378e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f001 fc09 	bl	8004f88 <DMA_CheckFifoParam>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2240      	movs	r2, #64	@ 0x40
 8003780:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e197      	b.n	8003abe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f001 fb44 	bl	8004e24 <DMA_CalcBaseAndBitshift>
 800379c:	4603      	mov	r3, r0
 800379e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	223f      	movs	r2, #63	@ 0x3f
 80037aa:	409a      	lsls	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	e0cd      	b.n	800394e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a3b      	ldr	r2, [pc, #236]	@ (80038a4 <HAL_DMA_Init+0x42c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d022      	beq.n	8003802 <HAL_DMA_Init+0x38a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a39      	ldr	r2, [pc, #228]	@ (80038a8 <HAL_DMA_Init+0x430>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01d      	beq.n	8003802 <HAL_DMA_Init+0x38a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a38      	ldr	r2, [pc, #224]	@ (80038ac <HAL_DMA_Init+0x434>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d018      	beq.n	8003802 <HAL_DMA_Init+0x38a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a36      	ldr	r2, [pc, #216]	@ (80038b0 <HAL_DMA_Init+0x438>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_DMA_Init+0x38a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a35      	ldr	r2, [pc, #212]	@ (80038b4 <HAL_DMA_Init+0x43c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00e      	beq.n	8003802 <HAL_DMA_Init+0x38a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a33      	ldr	r2, [pc, #204]	@ (80038b8 <HAL_DMA_Init+0x440>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_DMA_Init+0x38a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a32      	ldr	r2, [pc, #200]	@ (80038bc <HAL_DMA_Init+0x444>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_DMA_Init+0x38a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a30      	ldr	r2, [pc, #192]	@ (80038c0 <HAL_DMA_Init+0x448>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_DMA_Init+0x38e>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_DMA_Init+0x390>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8097 	beq.w	800393c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a24      	ldr	r2, [pc, #144]	@ (80038a4 <HAL_DMA_Init+0x42c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d021      	beq.n	800385c <HAL_DMA_Init+0x3e4>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a22      	ldr	r2, [pc, #136]	@ (80038a8 <HAL_DMA_Init+0x430>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01c      	beq.n	800385c <HAL_DMA_Init+0x3e4>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a21      	ldr	r2, [pc, #132]	@ (80038ac <HAL_DMA_Init+0x434>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d017      	beq.n	800385c <HAL_DMA_Init+0x3e4>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1f      	ldr	r2, [pc, #124]	@ (80038b0 <HAL_DMA_Init+0x438>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d012      	beq.n	800385c <HAL_DMA_Init+0x3e4>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1e      	ldr	r2, [pc, #120]	@ (80038b4 <HAL_DMA_Init+0x43c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00d      	beq.n	800385c <HAL_DMA_Init+0x3e4>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1c      	ldr	r2, [pc, #112]	@ (80038b8 <HAL_DMA_Init+0x440>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d008      	beq.n	800385c <HAL_DMA_Init+0x3e4>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1b      	ldr	r2, [pc, #108]	@ (80038bc <HAL_DMA_Init+0x444>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <HAL_DMA_Init+0x3e4>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a19      	ldr	r2, [pc, #100]	@ (80038c0 <HAL_DMA_Init+0x448>)
 800385a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	4b13      	ldr	r3, [pc, #76]	@ (80038c4 <HAL_DMA_Init+0x44c>)
 8003878:	4013      	ands	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d021      	beq.n	80038c8 <HAL_DMA_Init+0x450>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b80      	cmp	r3, #128	@ 0x80
 800388a:	d102      	bne.n	8003892 <HAL_DMA_Init+0x41a>
 800388c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003890:	e01b      	b.n	80038ca <HAL_DMA_Init+0x452>
 8003892:	2300      	movs	r3, #0
 8003894:	e019      	b.n	80038ca <HAL_DMA_Init+0x452>
 8003896:	bf00      	nop
 8003898:	fe10803f 	.word	0xfe10803f
 800389c:	5c001000 	.word	0x5c001000
 80038a0:	ffff0000 	.word	0xffff0000
 80038a4:	58025408 	.word	0x58025408
 80038a8:	5802541c 	.word	0x5802541c
 80038ac:	58025430 	.word	0x58025430
 80038b0:	58025444 	.word	0x58025444
 80038b4:	58025458 	.word	0x58025458
 80038b8:	5802546c 	.word	0x5802546c
 80038bc:	58025480 	.word	0x58025480
 80038c0:	58025494 	.word	0x58025494
 80038c4:	fffe000f 	.word	0xfffe000f
 80038c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68d2      	ldr	r2, [r2, #12]
 80038ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ac8 <HAL_DMA_Init+0x650>)
 8003910:	4413      	add	r3, r2
 8003912:	4a6e      	ldr	r2, [pc, #440]	@ (8003acc <HAL_DMA_Init+0x654>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	009a      	lsls	r2, r3, #2
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f001 fa7f 	bl	8004e24 <DMA_CalcBaseAndBitshift>
 8003926:	4603      	mov	r3, r0
 8003928:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2201      	movs	r2, #1
 8003934:	409a      	lsls	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e008      	b.n	800394e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2240      	movs	r2, #64	@ 0x40
 8003940:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2203      	movs	r2, #3
 8003946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0b7      	b.n	8003abe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a5f      	ldr	r2, [pc, #380]	@ (8003ad0 <HAL_DMA_Init+0x658>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d072      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ad4 <HAL_DMA_Init+0x65c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d06d      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a5c      	ldr	r2, [pc, #368]	@ (8003ad8 <HAL_DMA_Init+0x660>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d068      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a5a      	ldr	r2, [pc, #360]	@ (8003adc <HAL_DMA_Init+0x664>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d063      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a59      	ldr	r2, [pc, #356]	@ (8003ae0 <HAL_DMA_Init+0x668>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d05e      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a57      	ldr	r2, [pc, #348]	@ (8003ae4 <HAL_DMA_Init+0x66c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d059      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a56      	ldr	r2, [pc, #344]	@ (8003ae8 <HAL_DMA_Init+0x670>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d054      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a54      	ldr	r2, [pc, #336]	@ (8003aec <HAL_DMA_Init+0x674>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d04f      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a53      	ldr	r2, [pc, #332]	@ (8003af0 <HAL_DMA_Init+0x678>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d04a      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a51      	ldr	r2, [pc, #324]	@ (8003af4 <HAL_DMA_Init+0x67c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d045      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a50      	ldr	r2, [pc, #320]	@ (8003af8 <HAL_DMA_Init+0x680>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d040      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a4e      	ldr	r2, [pc, #312]	@ (8003afc <HAL_DMA_Init+0x684>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d03b      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003b00 <HAL_DMA_Init+0x688>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d036      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003b04 <HAL_DMA_Init+0x68c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d031      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a4a      	ldr	r2, [pc, #296]	@ (8003b08 <HAL_DMA_Init+0x690>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d02c      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a48      	ldr	r2, [pc, #288]	@ (8003b0c <HAL_DMA_Init+0x694>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d027      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a47      	ldr	r2, [pc, #284]	@ (8003b10 <HAL_DMA_Init+0x698>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a45      	ldr	r2, [pc, #276]	@ (8003b14 <HAL_DMA_Init+0x69c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01d      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a44      	ldr	r2, [pc, #272]	@ (8003b18 <HAL_DMA_Init+0x6a0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a42      	ldr	r2, [pc, #264]	@ (8003b1c <HAL_DMA_Init+0x6a4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a41      	ldr	r2, [pc, #260]	@ (8003b20 <HAL_DMA_Init+0x6a8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a3f      	ldr	r2, [pc, #252]	@ (8003b24 <HAL_DMA_Init+0x6ac>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b28 <HAL_DMA_Init+0x6b0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_DMA_Init+0x5c6>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a3c      	ldr	r2, [pc, #240]	@ (8003b2c <HAL_DMA_Init+0x6b4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <HAL_DMA_Init+0x5ca>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_DMA_Init+0x5cc>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d032      	beq.n	8003aae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f001 fb19 	bl	8005080 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b80      	cmp	r3, #128	@ 0x80
 8003a54:	d102      	bne.n	8003a5c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a70:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_DMA_Init+0x624>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d80c      	bhi.n	8003a9c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f001 fb96 	bl	80051b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	e008      	b.n	8003aae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	a7fdabf8 	.word	0xa7fdabf8
 8003acc:	cccccccd 	.word	0xcccccccd
 8003ad0:	40020010 	.word	0x40020010
 8003ad4:	40020028 	.word	0x40020028
 8003ad8:	40020040 	.word	0x40020040
 8003adc:	40020058 	.word	0x40020058
 8003ae0:	40020070 	.word	0x40020070
 8003ae4:	40020088 	.word	0x40020088
 8003ae8:	400200a0 	.word	0x400200a0
 8003aec:	400200b8 	.word	0x400200b8
 8003af0:	40020410 	.word	0x40020410
 8003af4:	40020428 	.word	0x40020428
 8003af8:	40020440 	.word	0x40020440
 8003afc:	40020458 	.word	0x40020458
 8003b00:	40020470 	.word	0x40020470
 8003b04:	40020488 	.word	0x40020488
 8003b08:	400204a0 	.word	0x400204a0
 8003b0c:	400204b8 	.word	0x400204b8
 8003b10:	58025408 	.word	0x58025408
 8003b14:	5802541c 	.word	0x5802541c
 8003b18:	58025430 	.word	0x58025430
 8003b1c:	58025444 	.word	0x58025444
 8003b20:	58025458 	.word	0x58025458
 8003b24:	5802546c 	.word	0x5802546c
 8003b28:	58025480 	.word	0x58025480
 8003b2c:	58025494 	.word	0x58025494

08003b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e226      	b.n	8003f9a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_DMA_Start_IT+0x2a>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e21f      	b.n	8003f9a <HAL_DMA_Start_IT+0x46a>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	f040 820a 	bne.w	8003f84 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a68      	ldr	r2, [pc, #416]	@ (8003d24 <HAL_DMA_Start_IT+0x1f4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d04a      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a66      	ldr	r2, [pc, #408]	@ (8003d28 <HAL_DMA_Start_IT+0x1f8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d045      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a65      	ldr	r2, [pc, #404]	@ (8003d2c <HAL_DMA_Start_IT+0x1fc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d040      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a63      	ldr	r2, [pc, #396]	@ (8003d30 <HAL_DMA_Start_IT+0x200>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d03b      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a62      	ldr	r2, [pc, #392]	@ (8003d34 <HAL_DMA_Start_IT+0x204>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d036      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a60      	ldr	r2, [pc, #384]	@ (8003d38 <HAL_DMA_Start_IT+0x208>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d031      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a5f      	ldr	r2, [pc, #380]	@ (8003d3c <HAL_DMA_Start_IT+0x20c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d02c      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003d40 <HAL_DMA_Start_IT+0x210>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d027      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a5c      	ldr	r2, [pc, #368]	@ (8003d44 <HAL_DMA_Start_IT+0x214>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d022      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a5a      	ldr	r2, [pc, #360]	@ (8003d48 <HAL_DMA_Start_IT+0x218>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01d      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a59      	ldr	r2, [pc, #356]	@ (8003d4c <HAL_DMA_Start_IT+0x21c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a57      	ldr	r2, [pc, #348]	@ (8003d50 <HAL_DMA_Start_IT+0x220>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a56      	ldr	r2, [pc, #344]	@ (8003d54 <HAL_DMA_Start_IT+0x224>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a54      	ldr	r2, [pc, #336]	@ (8003d58 <HAL_DMA_Start_IT+0x228>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a53      	ldr	r2, [pc, #332]	@ (8003d5c <HAL_DMA_Start_IT+0x22c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_DMA_Start_IT+0xee>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a51      	ldr	r2, [pc, #324]	@ (8003d60 <HAL_DMA_Start_IT+0x230>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d108      	bne.n	8003c30 <HAL_DMA_Start_IT+0x100>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e007      	b.n	8003c40 <HAL_DMA_Start_IT+0x110>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 ff40 	bl	8004acc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a34      	ldr	r2, [pc, #208]	@ (8003d24 <HAL_DMA_Start_IT+0x1f4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d04a      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a33      	ldr	r2, [pc, #204]	@ (8003d28 <HAL_DMA_Start_IT+0x1f8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d045      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a31      	ldr	r2, [pc, #196]	@ (8003d2c <HAL_DMA_Start_IT+0x1fc>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d040      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a30      	ldr	r2, [pc, #192]	@ (8003d30 <HAL_DMA_Start_IT+0x200>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d03b      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a2e      	ldr	r2, [pc, #184]	@ (8003d34 <HAL_DMA_Start_IT+0x204>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d036      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2d      	ldr	r2, [pc, #180]	@ (8003d38 <HAL_DMA_Start_IT+0x208>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d031      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d3c <HAL_DMA_Start_IT+0x20c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02c      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2a      	ldr	r2, [pc, #168]	@ (8003d40 <HAL_DMA_Start_IT+0x210>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d027      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a28      	ldr	r2, [pc, #160]	@ (8003d44 <HAL_DMA_Start_IT+0x214>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d022      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a27      	ldr	r2, [pc, #156]	@ (8003d48 <HAL_DMA_Start_IT+0x218>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d01d      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a25      	ldr	r2, [pc, #148]	@ (8003d4c <HAL_DMA_Start_IT+0x21c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d018      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a24      	ldr	r2, [pc, #144]	@ (8003d50 <HAL_DMA_Start_IT+0x220>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a22      	ldr	r2, [pc, #136]	@ (8003d54 <HAL_DMA_Start_IT+0x224>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a21      	ldr	r2, [pc, #132]	@ (8003d58 <HAL_DMA_Start_IT+0x228>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8003d5c <HAL_DMA_Start_IT+0x22c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_DMA_Start_IT+0x1bc>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d60 <HAL_DMA_Start_IT+0x230>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <HAL_DMA_Start_IT+0x1c0>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_DMA_Start_IT+0x1c2>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d036      	beq.n	8003d64 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 021e 	bic.w	r2, r3, #30
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0216 	orr.w	r2, r2, #22
 8003d08:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d03e      	beq.n	8003d90 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0208 	orr.w	r2, r2, #8
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e035      	b.n	8003d90 <HAL_DMA_Start_IT+0x260>
 8003d24:	40020010 	.word	0x40020010
 8003d28:	40020028 	.word	0x40020028
 8003d2c:	40020040 	.word	0x40020040
 8003d30:	40020058 	.word	0x40020058
 8003d34:	40020070 	.word	0x40020070
 8003d38:	40020088 	.word	0x40020088
 8003d3c:	400200a0 	.word	0x400200a0
 8003d40:	400200b8 	.word	0x400200b8
 8003d44:	40020410 	.word	0x40020410
 8003d48:	40020428 	.word	0x40020428
 8003d4c:	40020440 	.word	0x40020440
 8003d50:	40020458 	.word	0x40020458
 8003d54:	40020470 	.word	0x40020470
 8003d58:	40020488 	.word	0x40020488
 8003d5c:	400204a0 	.word	0x400204a0
 8003d60:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 020e 	bic.w	r2, r3, #14
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 020a 	orr.w	r2, r2, #10
 8003d76:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0204 	orr.w	r2, r2, #4
 8003d8e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a83      	ldr	r2, [pc, #524]	@ (8003fa4 <HAL_DMA_Start_IT+0x474>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d072      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a82      	ldr	r2, [pc, #520]	@ (8003fa8 <HAL_DMA_Start_IT+0x478>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d06d      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a80      	ldr	r2, [pc, #512]	@ (8003fac <HAL_DMA_Start_IT+0x47c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d068      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7f      	ldr	r2, [pc, #508]	@ (8003fb0 <HAL_DMA_Start_IT+0x480>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d063      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a7d      	ldr	r2, [pc, #500]	@ (8003fb4 <HAL_DMA_Start_IT+0x484>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d05e      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7c      	ldr	r2, [pc, #496]	@ (8003fb8 <HAL_DMA_Start_IT+0x488>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d059      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a7a      	ldr	r2, [pc, #488]	@ (8003fbc <HAL_DMA_Start_IT+0x48c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d054      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a79      	ldr	r2, [pc, #484]	@ (8003fc0 <HAL_DMA_Start_IT+0x490>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d04f      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a77      	ldr	r2, [pc, #476]	@ (8003fc4 <HAL_DMA_Start_IT+0x494>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d04a      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a76      	ldr	r2, [pc, #472]	@ (8003fc8 <HAL_DMA_Start_IT+0x498>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d045      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a74      	ldr	r2, [pc, #464]	@ (8003fcc <HAL_DMA_Start_IT+0x49c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d040      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a73      	ldr	r2, [pc, #460]	@ (8003fd0 <HAL_DMA_Start_IT+0x4a0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d03b      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a71      	ldr	r2, [pc, #452]	@ (8003fd4 <HAL_DMA_Start_IT+0x4a4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d036      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a70      	ldr	r2, [pc, #448]	@ (8003fd8 <HAL_DMA_Start_IT+0x4a8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d031      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a6e      	ldr	r2, [pc, #440]	@ (8003fdc <HAL_DMA_Start_IT+0x4ac>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02c      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6d      	ldr	r2, [pc, #436]	@ (8003fe0 <HAL_DMA_Start_IT+0x4b0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d027      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a6b      	ldr	r2, [pc, #428]	@ (8003fe4 <HAL_DMA_Start_IT+0x4b4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d022      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6a      	ldr	r2, [pc, #424]	@ (8003fe8 <HAL_DMA_Start_IT+0x4b8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d01d      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a68      	ldr	r2, [pc, #416]	@ (8003fec <HAL_DMA_Start_IT+0x4bc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a67      	ldr	r2, [pc, #412]	@ (8003ff0 <HAL_DMA_Start_IT+0x4c0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a65      	ldr	r2, [pc, #404]	@ (8003ff4 <HAL_DMA_Start_IT+0x4c4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a64      	ldr	r2, [pc, #400]	@ (8003ff8 <HAL_DMA_Start_IT+0x4c8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a62      	ldr	r2, [pc, #392]	@ (8003ffc <HAL_DMA_Start_IT+0x4cc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_DMA_Start_IT+0x350>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a61      	ldr	r2, [pc, #388]	@ (8004000 <HAL_DMA_Start_IT+0x4d0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_DMA_Start_IT+0x354>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_DMA_Start_IT+0x356>
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01a      	beq.n	8003ec0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ebe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a37      	ldr	r2, [pc, #220]	@ (8003fa4 <HAL_DMA_Start_IT+0x474>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d04a      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a36      	ldr	r2, [pc, #216]	@ (8003fa8 <HAL_DMA_Start_IT+0x478>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d045      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a34      	ldr	r2, [pc, #208]	@ (8003fac <HAL_DMA_Start_IT+0x47c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d040      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a33      	ldr	r2, [pc, #204]	@ (8003fb0 <HAL_DMA_Start_IT+0x480>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d03b      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a31      	ldr	r2, [pc, #196]	@ (8003fb4 <HAL_DMA_Start_IT+0x484>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d036      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a30      	ldr	r2, [pc, #192]	@ (8003fb8 <HAL_DMA_Start_IT+0x488>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d031      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2e      	ldr	r2, [pc, #184]	@ (8003fbc <HAL_DMA_Start_IT+0x48c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d02c      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc0 <HAL_DMA_Start_IT+0x490>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d027      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2b      	ldr	r2, [pc, #172]	@ (8003fc4 <HAL_DMA_Start_IT+0x494>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d022      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc8 <HAL_DMA_Start_IT+0x498>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d01d      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a28      	ldr	r2, [pc, #160]	@ (8003fcc <HAL_DMA_Start_IT+0x49c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d018      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a27      	ldr	r2, [pc, #156]	@ (8003fd0 <HAL_DMA_Start_IT+0x4a0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d013      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a25      	ldr	r2, [pc, #148]	@ (8003fd4 <HAL_DMA_Start_IT+0x4a4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00e      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a24      	ldr	r2, [pc, #144]	@ (8003fd8 <HAL_DMA_Start_IT+0x4a8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d009      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a22      	ldr	r2, [pc, #136]	@ (8003fdc <HAL_DMA_Start_IT+0x4ac>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d004      	beq.n	8003f60 <HAL_DMA_Start_IT+0x430>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a21      	ldr	r2, [pc, #132]	@ (8003fe0 <HAL_DMA_Start_IT+0x4b0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d108      	bne.n	8003f72 <HAL_DMA_Start_IT+0x442>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e012      	b.n	8003f98 <HAL_DMA_Start_IT+0x468>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0201 	orr.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e009      	b.n	8003f98 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f8a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40020010 	.word	0x40020010
 8003fa8:	40020028 	.word	0x40020028
 8003fac:	40020040 	.word	0x40020040
 8003fb0:	40020058 	.word	0x40020058
 8003fb4:	40020070 	.word	0x40020070
 8003fb8:	40020088 	.word	0x40020088
 8003fbc:	400200a0 	.word	0x400200a0
 8003fc0:	400200b8 	.word	0x400200b8
 8003fc4:	40020410 	.word	0x40020410
 8003fc8:	40020428 	.word	0x40020428
 8003fcc:	40020440 	.word	0x40020440
 8003fd0:	40020458 	.word	0x40020458
 8003fd4:	40020470 	.word	0x40020470
 8003fd8:	40020488 	.word	0x40020488
 8003fdc:	400204a0 	.word	0x400204a0
 8003fe0:	400204b8 	.word	0x400204b8
 8003fe4:	58025408 	.word	0x58025408
 8003fe8:	5802541c 	.word	0x5802541c
 8003fec:	58025430 	.word	0x58025430
 8003ff0:	58025444 	.word	0x58025444
 8003ff4:	58025458 	.word	0x58025458
 8003ff8:	5802546c 	.word	0x5802546c
 8003ffc:	58025480 	.word	0x58025480
 8004000:	58025494 	.word	0x58025494

08004004 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800400c:	f7fd fe22 	bl	8001c54 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e2dc      	b.n	80045d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d008      	beq.n	800403a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2280      	movs	r2, #128	@ 0x80
 800402c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e2cd      	b.n	80045d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a76      	ldr	r2, [pc, #472]	@ (8004218 <HAL_DMA_Abort+0x214>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d04a      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a74      	ldr	r2, [pc, #464]	@ (800421c <HAL_DMA_Abort+0x218>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d045      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a73      	ldr	r2, [pc, #460]	@ (8004220 <HAL_DMA_Abort+0x21c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d040      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a71      	ldr	r2, [pc, #452]	@ (8004224 <HAL_DMA_Abort+0x220>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d03b      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a70      	ldr	r2, [pc, #448]	@ (8004228 <HAL_DMA_Abort+0x224>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d036      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6e      	ldr	r2, [pc, #440]	@ (800422c <HAL_DMA_Abort+0x228>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d031      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6d      	ldr	r2, [pc, #436]	@ (8004230 <HAL_DMA_Abort+0x22c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d02c      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6b      	ldr	r2, [pc, #428]	@ (8004234 <HAL_DMA_Abort+0x230>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d027      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6a      	ldr	r2, [pc, #424]	@ (8004238 <HAL_DMA_Abort+0x234>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d022      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a68      	ldr	r2, [pc, #416]	@ (800423c <HAL_DMA_Abort+0x238>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01d      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a67      	ldr	r2, [pc, #412]	@ (8004240 <HAL_DMA_Abort+0x23c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d018      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a65      	ldr	r2, [pc, #404]	@ (8004244 <HAL_DMA_Abort+0x240>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a64      	ldr	r2, [pc, #400]	@ (8004248 <HAL_DMA_Abort+0x244>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a62      	ldr	r2, [pc, #392]	@ (800424c <HAL_DMA_Abort+0x248>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a61      	ldr	r2, [pc, #388]	@ (8004250 <HAL_DMA_Abort+0x24c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_DMA_Abort+0xd6>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a5f      	ldr	r2, [pc, #380]	@ (8004254 <HAL_DMA_Abort+0x250>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d101      	bne.n	80040de <HAL_DMA_Abort+0xda>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_DMA_Abort+0xdc>
 80040de:	2300      	movs	r3, #0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 021e 	bic.w	r2, r2, #30
 80040f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004102:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e00a      	b.n	8004122 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 020e 	bic.w	r2, r2, #14
 800411a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3c      	ldr	r2, [pc, #240]	@ (8004218 <HAL_DMA_Abort+0x214>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d072      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a3a      	ldr	r2, [pc, #232]	@ (800421c <HAL_DMA_Abort+0x218>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d06d      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a39      	ldr	r2, [pc, #228]	@ (8004220 <HAL_DMA_Abort+0x21c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d068      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a37      	ldr	r2, [pc, #220]	@ (8004224 <HAL_DMA_Abort+0x220>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d063      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a36      	ldr	r2, [pc, #216]	@ (8004228 <HAL_DMA_Abort+0x224>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d05e      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a34      	ldr	r2, [pc, #208]	@ (800422c <HAL_DMA_Abort+0x228>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d059      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a33      	ldr	r2, [pc, #204]	@ (8004230 <HAL_DMA_Abort+0x22c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d054      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a31      	ldr	r2, [pc, #196]	@ (8004234 <HAL_DMA_Abort+0x230>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d04f      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a30      	ldr	r2, [pc, #192]	@ (8004238 <HAL_DMA_Abort+0x234>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d04a      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a2e      	ldr	r2, [pc, #184]	@ (800423c <HAL_DMA_Abort+0x238>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d045      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a2d      	ldr	r2, [pc, #180]	@ (8004240 <HAL_DMA_Abort+0x23c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d040      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2b      	ldr	r2, [pc, #172]	@ (8004244 <HAL_DMA_Abort+0x240>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d03b      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2a      	ldr	r2, [pc, #168]	@ (8004248 <HAL_DMA_Abort+0x244>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d036      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a28      	ldr	r2, [pc, #160]	@ (800424c <HAL_DMA_Abort+0x248>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d031      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a27      	ldr	r2, [pc, #156]	@ (8004250 <HAL_DMA_Abort+0x24c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d02c      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a25      	ldr	r2, [pc, #148]	@ (8004254 <HAL_DMA_Abort+0x250>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d027      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a24      	ldr	r2, [pc, #144]	@ (8004258 <HAL_DMA_Abort+0x254>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d022      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a22      	ldr	r2, [pc, #136]	@ (800425c <HAL_DMA_Abort+0x258>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01d      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a21      	ldr	r2, [pc, #132]	@ (8004260 <HAL_DMA_Abort+0x25c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004264 <HAL_DMA_Abort+0x260>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004268 <HAL_DMA_Abort+0x264>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1c      	ldr	r2, [pc, #112]	@ (800426c <HAL_DMA_Abort+0x268>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1b      	ldr	r2, [pc, #108]	@ (8004270 <HAL_DMA_Abort+0x26c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_DMA_Abort+0x20e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	@ (8004274 <HAL_DMA_Abort+0x270>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d132      	bne.n	8004278 <HAL_DMA_Abort+0x274>
 8004212:	2301      	movs	r3, #1
 8004214:	e031      	b.n	800427a <HAL_DMA_Abort+0x276>
 8004216:	bf00      	nop
 8004218:	40020010 	.word	0x40020010
 800421c:	40020028 	.word	0x40020028
 8004220:	40020040 	.word	0x40020040
 8004224:	40020058 	.word	0x40020058
 8004228:	40020070 	.word	0x40020070
 800422c:	40020088 	.word	0x40020088
 8004230:	400200a0 	.word	0x400200a0
 8004234:	400200b8 	.word	0x400200b8
 8004238:	40020410 	.word	0x40020410
 800423c:	40020428 	.word	0x40020428
 8004240:	40020440 	.word	0x40020440
 8004244:	40020458 	.word	0x40020458
 8004248:	40020470 	.word	0x40020470
 800424c:	40020488 	.word	0x40020488
 8004250:	400204a0 	.word	0x400204a0
 8004254:	400204b8 	.word	0x400204b8
 8004258:	58025408 	.word	0x58025408
 800425c:	5802541c 	.word	0x5802541c
 8004260:	58025430 	.word	0x58025430
 8004264:	58025444 	.word	0x58025444
 8004268:	58025458 	.word	0x58025458
 800426c:	5802546c 	.word	0x5802546c
 8004270:	58025480 	.word	0x58025480
 8004274:	58025494 	.word	0x58025494
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800428c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a6d      	ldr	r2, [pc, #436]	@ (8004448 <HAL_DMA_Abort+0x444>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d04a      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6b      	ldr	r2, [pc, #428]	@ (800444c <HAL_DMA_Abort+0x448>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d045      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6a      	ldr	r2, [pc, #424]	@ (8004450 <HAL_DMA_Abort+0x44c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d040      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a68      	ldr	r2, [pc, #416]	@ (8004454 <HAL_DMA_Abort+0x450>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d03b      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a67      	ldr	r2, [pc, #412]	@ (8004458 <HAL_DMA_Abort+0x454>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d036      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a65      	ldr	r2, [pc, #404]	@ (800445c <HAL_DMA_Abort+0x458>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d031      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a64      	ldr	r2, [pc, #400]	@ (8004460 <HAL_DMA_Abort+0x45c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d02c      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a62      	ldr	r2, [pc, #392]	@ (8004464 <HAL_DMA_Abort+0x460>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d027      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a61      	ldr	r2, [pc, #388]	@ (8004468 <HAL_DMA_Abort+0x464>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d022      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a5f      	ldr	r2, [pc, #380]	@ (800446c <HAL_DMA_Abort+0x468>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01d      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004470 <HAL_DMA_Abort+0x46c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d018      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a5c      	ldr	r2, [pc, #368]	@ (8004474 <HAL_DMA_Abort+0x470>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a5b      	ldr	r2, [pc, #364]	@ (8004478 <HAL_DMA_Abort+0x474>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00e      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a59      	ldr	r2, [pc, #356]	@ (800447c <HAL_DMA_Abort+0x478>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d009      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a58      	ldr	r2, [pc, #352]	@ (8004480 <HAL_DMA_Abort+0x47c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_DMA_Abort+0x32a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a56      	ldr	r2, [pc, #344]	@ (8004484 <HAL_DMA_Abort+0x480>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d108      	bne.n	8004340 <HAL_DMA_Abort+0x33c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e007      	b.n	8004350 <HAL_DMA_Abort+0x34c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004350:	e013      	b.n	800437a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004352:	f7fd fc7f 	bl	8001c54 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b05      	cmp	r3, #5
 800435e:	d90c      	bls.n	800437a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2203      	movs	r2, #3
 800436a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e12d      	b.n	80045d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e5      	bne.n	8004352 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2f      	ldr	r2, [pc, #188]	@ (8004448 <HAL_DMA_Abort+0x444>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d04a      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a2d      	ldr	r2, [pc, #180]	@ (800444c <HAL_DMA_Abort+0x448>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d045      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2c      	ldr	r2, [pc, #176]	@ (8004450 <HAL_DMA_Abort+0x44c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d040      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004454 <HAL_DMA_Abort+0x450>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d03b      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a29      	ldr	r2, [pc, #164]	@ (8004458 <HAL_DMA_Abort+0x454>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d036      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a27      	ldr	r2, [pc, #156]	@ (800445c <HAL_DMA_Abort+0x458>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d031      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a26      	ldr	r2, [pc, #152]	@ (8004460 <HAL_DMA_Abort+0x45c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d02c      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a24      	ldr	r2, [pc, #144]	@ (8004464 <HAL_DMA_Abort+0x460>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d027      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a23      	ldr	r2, [pc, #140]	@ (8004468 <HAL_DMA_Abort+0x464>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d022      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a21      	ldr	r2, [pc, #132]	@ (800446c <HAL_DMA_Abort+0x468>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d01d      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a20      	ldr	r2, [pc, #128]	@ (8004470 <HAL_DMA_Abort+0x46c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d018      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004474 <HAL_DMA_Abort+0x470>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1d      	ldr	r2, [pc, #116]	@ (8004478 <HAL_DMA_Abort+0x474>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1b      	ldr	r2, [pc, #108]	@ (800447c <HAL_DMA_Abort+0x478>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d009      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1a      	ldr	r2, [pc, #104]	@ (8004480 <HAL_DMA_Abort+0x47c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_DMA_Abort+0x422>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a18      	ldr	r2, [pc, #96]	@ (8004484 <HAL_DMA_Abort+0x480>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_DMA_Abort+0x426>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_DMA_Abort+0x428>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d02b      	beq.n	8004488 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004434:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	223f      	movs	r2, #63	@ 0x3f
 8004440:	409a      	lsls	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	609a      	str	r2, [r3, #8]
 8004446:	e02a      	b.n	800449e <HAL_DMA_Abort+0x49a>
 8004448:	40020010 	.word	0x40020010
 800444c:	40020028 	.word	0x40020028
 8004450:	40020040 	.word	0x40020040
 8004454:	40020058 	.word	0x40020058
 8004458:	40020070 	.word	0x40020070
 800445c:	40020088 	.word	0x40020088
 8004460:	400200a0 	.word	0x400200a0
 8004464:	400200b8 	.word	0x400200b8
 8004468:	40020410 	.word	0x40020410
 800446c:	40020428 	.word	0x40020428
 8004470:	40020440 	.word	0x40020440
 8004474:	40020458 	.word	0x40020458
 8004478:	40020470 	.word	0x40020470
 800447c:	40020488 	.word	0x40020488
 8004480:	400204a0 	.word	0x400204a0
 8004484:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2201      	movs	r2, #1
 8004498:	409a      	lsls	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a4f      	ldr	r2, [pc, #316]	@ (80045e0 <HAL_DMA_Abort+0x5dc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d072      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a4d      	ldr	r2, [pc, #308]	@ (80045e4 <HAL_DMA_Abort+0x5e0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d06d      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a4c      	ldr	r2, [pc, #304]	@ (80045e8 <HAL_DMA_Abort+0x5e4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d068      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a4a      	ldr	r2, [pc, #296]	@ (80045ec <HAL_DMA_Abort+0x5e8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d063      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a49      	ldr	r2, [pc, #292]	@ (80045f0 <HAL_DMA_Abort+0x5ec>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d05e      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a47      	ldr	r2, [pc, #284]	@ (80045f4 <HAL_DMA_Abort+0x5f0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d059      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a46      	ldr	r2, [pc, #280]	@ (80045f8 <HAL_DMA_Abort+0x5f4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d054      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a44      	ldr	r2, [pc, #272]	@ (80045fc <HAL_DMA_Abort+0x5f8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d04f      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a43      	ldr	r2, [pc, #268]	@ (8004600 <HAL_DMA_Abort+0x5fc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d04a      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a41      	ldr	r2, [pc, #260]	@ (8004604 <HAL_DMA_Abort+0x600>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d045      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a40      	ldr	r2, [pc, #256]	@ (8004608 <HAL_DMA_Abort+0x604>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d040      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a3e      	ldr	r2, [pc, #248]	@ (800460c <HAL_DMA_Abort+0x608>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d03b      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a3d      	ldr	r2, [pc, #244]	@ (8004610 <HAL_DMA_Abort+0x60c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d036      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a3b      	ldr	r2, [pc, #236]	@ (8004614 <HAL_DMA_Abort+0x610>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d031      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3a      	ldr	r2, [pc, #232]	@ (8004618 <HAL_DMA_Abort+0x614>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d02c      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a38      	ldr	r2, [pc, #224]	@ (800461c <HAL_DMA_Abort+0x618>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d027      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a37      	ldr	r2, [pc, #220]	@ (8004620 <HAL_DMA_Abort+0x61c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d022      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a35      	ldr	r2, [pc, #212]	@ (8004624 <HAL_DMA_Abort+0x620>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01d      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a34      	ldr	r2, [pc, #208]	@ (8004628 <HAL_DMA_Abort+0x624>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d018      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a32      	ldr	r2, [pc, #200]	@ (800462c <HAL_DMA_Abort+0x628>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a31      	ldr	r2, [pc, #196]	@ (8004630 <HAL_DMA_Abort+0x62c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2f      	ldr	r2, [pc, #188]	@ (8004634 <HAL_DMA_Abort+0x630>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2e      	ldr	r2, [pc, #184]	@ (8004638 <HAL_DMA_Abort+0x634>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_DMA_Abort+0x58a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2c      	ldr	r2, [pc, #176]	@ (800463c <HAL_DMA_Abort+0x638>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d101      	bne.n	8004592 <HAL_DMA_Abort+0x58e>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_DMA_Abort+0x590>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d015      	beq.n	80045c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80045a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00c      	beq.n	80045c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40020010 	.word	0x40020010
 80045e4:	40020028 	.word	0x40020028
 80045e8:	40020040 	.word	0x40020040
 80045ec:	40020058 	.word	0x40020058
 80045f0:	40020070 	.word	0x40020070
 80045f4:	40020088 	.word	0x40020088
 80045f8:	400200a0 	.word	0x400200a0
 80045fc:	400200b8 	.word	0x400200b8
 8004600:	40020410 	.word	0x40020410
 8004604:	40020428 	.word	0x40020428
 8004608:	40020440 	.word	0x40020440
 800460c:	40020458 	.word	0x40020458
 8004610:	40020470 	.word	0x40020470
 8004614:	40020488 	.word	0x40020488
 8004618:	400204a0 	.word	0x400204a0
 800461c:	400204b8 	.word	0x400204b8
 8004620:	58025408 	.word	0x58025408
 8004624:	5802541c 	.word	0x5802541c
 8004628:	58025430 	.word	0x58025430
 800462c:	58025444 	.word	0x58025444
 8004630:	58025458 	.word	0x58025458
 8004634:	5802546c 	.word	0x5802546c
 8004638:	58025480 	.word	0x58025480
 800463c:	58025494 	.word	0x58025494

08004640 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e237      	b.n	8004ac2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d004      	beq.n	8004668 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2280      	movs	r2, #128	@ 0x80
 8004662:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e22c      	b.n	8004ac2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a5c      	ldr	r2, [pc, #368]	@ (80047e0 <HAL_DMA_Abort_IT+0x1a0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d04a      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a5b      	ldr	r2, [pc, #364]	@ (80047e4 <HAL_DMA_Abort_IT+0x1a4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d045      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a59      	ldr	r2, [pc, #356]	@ (80047e8 <HAL_DMA_Abort_IT+0x1a8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d040      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a58      	ldr	r2, [pc, #352]	@ (80047ec <HAL_DMA_Abort_IT+0x1ac>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d03b      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a56      	ldr	r2, [pc, #344]	@ (80047f0 <HAL_DMA_Abort_IT+0x1b0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d036      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a55      	ldr	r2, [pc, #340]	@ (80047f4 <HAL_DMA_Abort_IT+0x1b4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d031      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a53      	ldr	r2, [pc, #332]	@ (80047f8 <HAL_DMA_Abort_IT+0x1b8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d02c      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a52      	ldr	r2, [pc, #328]	@ (80047fc <HAL_DMA_Abort_IT+0x1bc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d027      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a50      	ldr	r2, [pc, #320]	@ (8004800 <HAL_DMA_Abort_IT+0x1c0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d022      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a4f      	ldr	r2, [pc, #316]	@ (8004804 <HAL_DMA_Abort_IT+0x1c4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d01d      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a4d      	ldr	r2, [pc, #308]	@ (8004808 <HAL_DMA_Abort_IT+0x1c8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d018      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a4c      	ldr	r2, [pc, #304]	@ (800480c <HAL_DMA_Abort_IT+0x1cc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d013      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004810 <HAL_DMA_Abort_IT+0x1d0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00e      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a49      	ldr	r2, [pc, #292]	@ (8004814 <HAL_DMA_Abort_IT+0x1d4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a47      	ldr	r2, [pc, #284]	@ (8004818 <HAL_DMA_Abort_IT+0x1d8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc8>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a46      	ldr	r2, [pc, #280]	@ (800481c <HAL_DMA_Abort_IT+0x1dc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d101      	bne.n	800470c <HAL_DMA_Abort_IT+0xcc>
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <HAL_DMA_Abort_IT+0xce>
 800470c:	2300      	movs	r3, #0
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8086 	beq.w	8004820 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2204      	movs	r2, #4
 8004718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2f      	ldr	r2, [pc, #188]	@ (80047e0 <HAL_DMA_Abort_IT+0x1a0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d04a      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2e      	ldr	r2, [pc, #184]	@ (80047e4 <HAL_DMA_Abort_IT+0x1a4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d045      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2c      	ldr	r2, [pc, #176]	@ (80047e8 <HAL_DMA_Abort_IT+0x1a8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d040      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2b      	ldr	r2, [pc, #172]	@ (80047ec <HAL_DMA_Abort_IT+0x1ac>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d03b      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a29      	ldr	r2, [pc, #164]	@ (80047f0 <HAL_DMA_Abort_IT+0x1b0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d036      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a28      	ldr	r2, [pc, #160]	@ (80047f4 <HAL_DMA_Abort_IT+0x1b4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d031      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a26      	ldr	r2, [pc, #152]	@ (80047f8 <HAL_DMA_Abort_IT+0x1b8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d02c      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a25      	ldr	r2, [pc, #148]	@ (80047fc <HAL_DMA_Abort_IT+0x1bc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d027      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a23      	ldr	r2, [pc, #140]	@ (8004800 <HAL_DMA_Abort_IT+0x1c0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a22      	ldr	r2, [pc, #136]	@ (8004804 <HAL_DMA_Abort_IT+0x1c4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01d      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a20      	ldr	r2, [pc, #128]	@ (8004808 <HAL_DMA_Abort_IT+0x1c8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1f      	ldr	r2, [pc, #124]	@ (800480c <HAL_DMA_Abort_IT+0x1cc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1d      	ldr	r2, [pc, #116]	@ (8004810 <HAL_DMA_Abort_IT+0x1d0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004814 <HAL_DMA_Abort_IT+0x1d4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004818 <HAL_DMA_Abort_IT+0x1d8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_DMA_Abort_IT+0x17c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a19      	ldr	r2, [pc, #100]	@ (800481c <HAL_DMA_Abort_IT+0x1dc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d108      	bne.n	80047ce <HAL_DMA_Abort_IT+0x18e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e178      	b.n	8004ac0 <HAL_DMA_Abort_IT+0x480>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e16f      	b.n	8004ac0 <HAL_DMA_Abort_IT+0x480>
 80047e0:	40020010 	.word	0x40020010
 80047e4:	40020028 	.word	0x40020028
 80047e8:	40020040 	.word	0x40020040
 80047ec:	40020058 	.word	0x40020058
 80047f0:	40020070 	.word	0x40020070
 80047f4:	40020088 	.word	0x40020088
 80047f8:	400200a0 	.word	0x400200a0
 80047fc:	400200b8 	.word	0x400200b8
 8004800:	40020410 	.word	0x40020410
 8004804:	40020428 	.word	0x40020428
 8004808:	40020440 	.word	0x40020440
 800480c:	40020458 	.word	0x40020458
 8004810:	40020470 	.word	0x40020470
 8004814:	40020488 	.word	0x40020488
 8004818:	400204a0 	.word	0x400204a0
 800481c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 020e 	bic.w	r2, r2, #14
 800482e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a6c      	ldr	r2, [pc, #432]	@ (80049e8 <HAL_DMA_Abort_IT+0x3a8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d04a      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a6b      	ldr	r2, [pc, #428]	@ (80049ec <HAL_DMA_Abort_IT+0x3ac>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d045      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a69      	ldr	r2, [pc, #420]	@ (80049f0 <HAL_DMA_Abort_IT+0x3b0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d040      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a68      	ldr	r2, [pc, #416]	@ (80049f4 <HAL_DMA_Abort_IT+0x3b4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d03b      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a66      	ldr	r2, [pc, #408]	@ (80049f8 <HAL_DMA_Abort_IT+0x3b8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d036      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a65      	ldr	r2, [pc, #404]	@ (80049fc <HAL_DMA_Abort_IT+0x3bc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d031      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a63      	ldr	r2, [pc, #396]	@ (8004a00 <HAL_DMA_Abort_IT+0x3c0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d02c      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a62      	ldr	r2, [pc, #392]	@ (8004a04 <HAL_DMA_Abort_IT+0x3c4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d027      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a60      	ldr	r2, [pc, #384]	@ (8004a08 <HAL_DMA_Abort_IT+0x3c8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d022      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a5f      	ldr	r2, [pc, #380]	@ (8004a0c <HAL_DMA_Abort_IT+0x3cc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d01d      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a5d      	ldr	r2, [pc, #372]	@ (8004a10 <HAL_DMA_Abort_IT+0x3d0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d018      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004a14 <HAL_DMA_Abort_IT+0x3d4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004a18 <HAL_DMA_Abort_IT+0x3d8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00e      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a59      	ldr	r2, [pc, #356]	@ (8004a1c <HAL_DMA_Abort_IT+0x3dc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d009      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a57      	ldr	r2, [pc, #348]	@ (8004a20 <HAL_DMA_Abort_IT+0x3e0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x290>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a56      	ldr	r2, [pc, #344]	@ (8004a24 <HAL_DMA_Abort_IT+0x3e4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d108      	bne.n	80048e2 <HAL_DMA_Abort_IT+0x2a2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	e007      	b.n	80048f2 <HAL_DMA_Abort_IT+0x2b2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a3c      	ldr	r2, [pc, #240]	@ (80049e8 <HAL_DMA_Abort_IT+0x3a8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d072      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3a      	ldr	r2, [pc, #232]	@ (80049ec <HAL_DMA_Abort_IT+0x3ac>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d06d      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a39      	ldr	r2, [pc, #228]	@ (80049f0 <HAL_DMA_Abort_IT+0x3b0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d068      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a37      	ldr	r2, [pc, #220]	@ (80049f4 <HAL_DMA_Abort_IT+0x3b4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d063      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a36      	ldr	r2, [pc, #216]	@ (80049f8 <HAL_DMA_Abort_IT+0x3b8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d05e      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a34      	ldr	r2, [pc, #208]	@ (80049fc <HAL_DMA_Abort_IT+0x3bc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d059      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a33      	ldr	r2, [pc, #204]	@ (8004a00 <HAL_DMA_Abort_IT+0x3c0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d054      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a31      	ldr	r2, [pc, #196]	@ (8004a04 <HAL_DMA_Abort_IT+0x3c4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d04f      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a30      	ldr	r2, [pc, #192]	@ (8004a08 <HAL_DMA_Abort_IT+0x3c8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d04a      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2e      	ldr	r2, [pc, #184]	@ (8004a0c <HAL_DMA_Abort_IT+0x3cc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d045      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a10 <HAL_DMA_Abort_IT+0x3d0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d040      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2b      	ldr	r2, [pc, #172]	@ (8004a14 <HAL_DMA_Abort_IT+0x3d4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d03b      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a18 <HAL_DMA_Abort_IT+0x3d8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d036      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a28      	ldr	r2, [pc, #160]	@ (8004a1c <HAL_DMA_Abort_IT+0x3dc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d031      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a27      	ldr	r2, [pc, #156]	@ (8004a20 <HAL_DMA_Abort_IT+0x3e0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d02c      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a25      	ldr	r2, [pc, #148]	@ (8004a24 <HAL_DMA_Abort_IT+0x3e4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d027      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a24      	ldr	r2, [pc, #144]	@ (8004a28 <HAL_DMA_Abort_IT+0x3e8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a22      	ldr	r2, [pc, #136]	@ (8004a2c <HAL_DMA_Abort_IT+0x3ec>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01d      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a21      	ldr	r2, [pc, #132]	@ (8004a30 <HAL_DMA_Abort_IT+0x3f0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a34 <HAL_DMA_Abort_IT+0x3f4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1e      	ldr	r2, [pc, #120]	@ (8004a38 <HAL_DMA_Abort_IT+0x3f8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a3c <HAL_DMA_Abort_IT+0x3fc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a40 <HAL_DMA_Abort_IT+0x400>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x3a2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a19      	ldr	r2, [pc, #100]	@ (8004a44 <HAL_DMA_Abort_IT+0x404>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d132      	bne.n	8004a48 <HAL_DMA_Abort_IT+0x408>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e031      	b.n	8004a4a <HAL_DMA_Abort_IT+0x40a>
 80049e6:	bf00      	nop
 80049e8:	40020010 	.word	0x40020010
 80049ec:	40020028 	.word	0x40020028
 80049f0:	40020040 	.word	0x40020040
 80049f4:	40020058 	.word	0x40020058
 80049f8:	40020070 	.word	0x40020070
 80049fc:	40020088 	.word	0x40020088
 8004a00:	400200a0 	.word	0x400200a0
 8004a04:	400200b8 	.word	0x400200b8
 8004a08:	40020410 	.word	0x40020410
 8004a0c:	40020428 	.word	0x40020428
 8004a10:	40020440 	.word	0x40020440
 8004a14:	40020458 	.word	0x40020458
 8004a18:	40020470 	.word	0x40020470
 8004a1c:	40020488 	.word	0x40020488
 8004a20:	400204a0 	.word	0x400204a0
 8004a24:	400204b8 	.word	0x400204b8
 8004a28:	58025408 	.word	0x58025408
 8004a2c:	5802541c 	.word	0x5802541c
 8004a30:	58025430 	.word	0x58025430
 8004a34:	58025444 	.word	0x58025444
 8004a38:	58025458 	.word	0x58025458
 8004a3c:	5802546c 	.word	0x5802546c
 8004a40:	58025480 	.word	0x58025480
 8004a44:	58025494 	.word	0x58025494
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d028      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00c      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop

08004acc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ade:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a7f      	ldr	r2, [pc, #508]	@ (8004ce8 <DMA_SetConfig+0x21c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d072      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a7d      	ldr	r2, [pc, #500]	@ (8004cec <DMA_SetConfig+0x220>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d06d      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a7c      	ldr	r2, [pc, #496]	@ (8004cf0 <DMA_SetConfig+0x224>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d068      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a7a      	ldr	r2, [pc, #488]	@ (8004cf4 <DMA_SetConfig+0x228>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d063      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a79      	ldr	r2, [pc, #484]	@ (8004cf8 <DMA_SetConfig+0x22c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d05e      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a77      	ldr	r2, [pc, #476]	@ (8004cfc <DMA_SetConfig+0x230>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d059      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a76      	ldr	r2, [pc, #472]	@ (8004d00 <DMA_SetConfig+0x234>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d054      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a74      	ldr	r2, [pc, #464]	@ (8004d04 <DMA_SetConfig+0x238>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d04f      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a73      	ldr	r2, [pc, #460]	@ (8004d08 <DMA_SetConfig+0x23c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d04a      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a71      	ldr	r2, [pc, #452]	@ (8004d0c <DMA_SetConfig+0x240>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d045      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a70      	ldr	r2, [pc, #448]	@ (8004d10 <DMA_SetConfig+0x244>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d040      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6e      	ldr	r2, [pc, #440]	@ (8004d14 <DMA_SetConfig+0x248>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d03b      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6d      	ldr	r2, [pc, #436]	@ (8004d18 <DMA_SetConfig+0x24c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d036      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8004d1c <DMA_SetConfig+0x250>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d031      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6a      	ldr	r2, [pc, #424]	@ (8004d20 <DMA_SetConfig+0x254>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d02c      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a68      	ldr	r2, [pc, #416]	@ (8004d24 <DMA_SetConfig+0x258>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d027      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a67      	ldr	r2, [pc, #412]	@ (8004d28 <DMA_SetConfig+0x25c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d022      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a65      	ldr	r2, [pc, #404]	@ (8004d2c <DMA_SetConfig+0x260>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a64      	ldr	r2, [pc, #400]	@ (8004d30 <DMA_SetConfig+0x264>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a62      	ldr	r2, [pc, #392]	@ (8004d34 <DMA_SetConfig+0x268>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a61      	ldr	r2, [pc, #388]	@ (8004d38 <DMA_SetConfig+0x26c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a5f      	ldr	r2, [pc, #380]	@ (8004d3c <DMA_SetConfig+0x270>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8004d40 <DMA_SetConfig+0x274>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <DMA_SetConfig+0x10a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8004d44 <DMA_SetConfig+0x278>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <DMA_SetConfig+0x10e>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <DMA_SetConfig+0x110>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00d      	beq.n	8004bfc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004be8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d004      	beq.n	8004bfc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004bfa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a39      	ldr	r2, [pc, #228]	@ (8004ce8 <DMA_SetConfig+0x21c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d04a      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a38      	ldr	r2, [pc, #224]	@ (8004cec <DMA_SetConfig+0x220>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d045      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a36      	ldr	r2, [pc, #216]	@ (8004cf0 <DMA_SetConfig+0x224>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d040      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a35      	ldr	r2, [pc, #212]	@ (8004cf4 <DMA_SetConfig+0x228>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d03b      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a33      	ldr	r2, [pc, #204]	@ (8004cf8 <DMA_SetConfig+0x22c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d036      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a32      	ldr	r2, [pc, #200]	@ (8004cfc <DMA_SetConfig+0x230>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d031      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a30      	ldr	r2, [pc, #192]	@ (8004d00 <DMA_SetConfig+0x234>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d02c      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a2f      	ldr	r2, [pc, #188]	@ (8004d04 <DMA_SetConfig+0x238>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d027      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2d      	ldr	r2, [pc, #180]	@ (8004d08 <DMA_SetConfig+0x23c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d022      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d0c <DMA_SetConfig+0x240>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d01d      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a2a      	ldr	r2, [pc, #168]	@ (8004d10 <DMA_SetConfig+0x244>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d018      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a29      	ldr	r2, [pc, #164]	@ (8004d14 <DMA_SetConfig+0x248>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a27      	ldr	r2, [pc, #156]	@ (8004d18 <DMA_SetConfig+0x24c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00e      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a26      	ldr	r2, [pc, #152]	@ (8004d1c <DMA_SetConfig+0x250>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d009      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a24      	ldr	r2, [pc, #144]	@ (8004d20 <DMA_SetConfig+0x254>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <DMA_SetConfig+0x1d0>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a23      	ldr	r2, [pc, #140]	@ (8004d24 <DMA_SetConfig+0x258>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <DMA_SetConfig+0x1d4>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <DMA_SetConfig+0x1d6>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d059      	beq.n	8004d5a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	223f      	movs	r2, #63	@ 0x3f
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cc4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b40      	cmp	r3, #64	@ 0x40
 8004cd4:	d138      	bne.n	8004d48 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ce6:	e086      	b.n	8004df6 <DMA_SetConfig+0x32a>
 8004ce8:	40020010 	.word	0x40020010
 8004cec:	40020028 	.word	0x40020028
 8004cf0:	40020040 	.word	0x40020040
 8004cf4:	40020058 	.word	0x40020058
 8004cf8:	40020070 	.word	0x40020070
 8004cfc:	40020088 	.word	0x40020088
 8004d00:	400200a0 	.word	0x400200a0
 8004d04:	400200b8 	.word	0x400200b8
 8004d08:	40020410 	.word	0x40020410
 8004d0c:	40020428 	.word	0x40020428
 8004d10:	40020440 	.word	0x40020440
 8004d14:	40020458 	.word	0x40020458
 8004d18:	40020470 	.word	0x40020470
 8004d1c:	40020488 	.word	0x40020488
 8004d20:	400204a0 	.word	0x400204a0
 8004d24:	400204b8 	.word	0x400204b8
 8004d28:	58025408 	.word	0x58025408
 8004d2c:	5802541c 	.word	0x5802541c
 8004d30:	58025430 	.word	0x58025430
 8004d34:	58025444 	.word	0x58025444
 8004d38:	58025458 	.word	0x58025458
 8004d3c:	5802546c 	.word	0x5802546c
 8004d40:	58025480 	.word	0x58025480
 8004d44:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	60da      	str	r2, [r3, #12]
}
 8004d58:	e04d      	b.n	8004df6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a29      	ldr	r2, [pc, #164]	@ (8004e04 <DMA_SetConfig+0x338>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d022      	beq.n	8004daa <DMA_SetConfig+0x2de>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a27      	ldr	r2, [pc, #156]	@ (8004e08 <DMA_SetConfig+0x33c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01d      	beq.n	8004daa <DMA_SetConfig+0x2de>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a26      	ldr	r2, [pc, #152]	@ (8004e0c <DMA_SetConfig+0x340>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d018      	beq.n	8004daa <DMA_SetConfig+0x2de>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a24      	ldr	r2, [pc, #144]	@ (8004e10 <DMA_SetConfig+0x344>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <DMA_SetConfig+0x2de>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a23      	ldr	r2, [pc, #140]	@ (8004e14 <DMA_SetConfig+0x348>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00e      	beq.n	8004daa <DMA_SetConfig+0x2de>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a21      	ldr	r2, [pc, #132]	@ (8004e18 <DMA_SetConfig+0x34c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d009      	beq.n	8004daa <DMA_SetConfig+0x2de>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a20      	ldr	r2, [pc, #128]	@ (8004e1c <DMA_SetConfig+0x350>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <DMA_SetConfig+0x2de>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e20 <DMA_SetConfig+0x354>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <DMA_SetConfig+0x2e2>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <DMA_SetConfig+0x2e4>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d020      	beq.n	8004df6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b40      	cmp	r3, #64	@ 0x40
 8004dd2:	d108      	bne.n	8004de6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	60da      	str	r2, [r3, #12]
}
 8004de4:	e007      	b.n	8004df6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	60da      	str	r2, [r3, #12]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	58025408 	.word	0x58025408
 8004e08:	5802541c 	.word	0x5802541c
 8004e0c:	58025430 	.word	0x58025430
 8004e10:	58025444 	.word	0x58025444
 8004e14:	58025458 	.word	0x58025458
 8004e18:	5802546c 	.word	0x5802546c
 8004e1c:	58025480 	.word	0x58025480
 8004e20:	58025494 	.word	0x58025494

08004e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a42      	ldr	r2, [pc, #264]	@ (8004f3c <DMA_CalcBaseAndBitshift+0x118>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d04a      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a41      	ldr	r2, [pc, #260]	@ (8004f40 <DMA_CalcBaseAndBitshift+0x11c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d045      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3f      	ldr	r2, [pc, #252]	@ (8004f44 <DMA_CalcBaseAndBitshift+0x120>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d040      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f48 <DMA_CalcBaseAndBitshift+0x124>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d03b      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a3c      	ldr	r2, [pc, #240]	@ (8004f4c <DMA_CalcBaseAndBitshift+0x128>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d036      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a3b      	ldr	r2, [pc, #236]	@ (8004f50 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d031      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a39      	ldr	r2, [pc, #228]	@ (8004f54 <DMA_CalcBaseAndBitshift+0x130>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d02c      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a38      	ldr	r2, [pc, #224]	@ (8004f58 <DMA_CalcBaseAndBitshift+0x134>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d027      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a36      	ldr	r2, [pc, #216]	@ (8004f5c <DMA_CalcBaseAndBitshift+0x138>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d022      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a35      	ldr	r2, [pc, #212]	@ (8004f60 <DMA_CalcBaseAndBitshift+0x13c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d01d      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a33      	ldr	r2, [pc, #204]	@ (8004f64 <DMA_CalcBaseAndBitshift+0x140>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a32      	ldr	r2, [pc, #200]	@ (8004f68 <DMA_CalcBaseAndBitshift+0x144>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a30      	ldr	r2, [pc, #192]	@ (8004f6c <DMA_CalcBaseAndBitshift+0x148>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8004f70 <DMA_CalcBaseAndBitshift+0x14c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8004f74 <DMA_CalcBaseAndBitshift+0x150>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <DMA_CalcBaseAndBitshift+0xa8>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f78 <DMA_CalcBaseAndBitshift+0x154>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <DMA_CalcBaseAndBitshift+0xac>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <DMA_CalcBaseAndBitshift+0xae>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d024      	beq.n	8004f20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	3b10      	subs	r3, #16
 8004ede:	4a27      	ldr	r2, [pc, #156]	@ (8004f7c <DMA_CalcBaseAndBitshift+0x158>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	4a24      	ldr	r2, [pc, #144]	@ (8004f80 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ef0:	5cd3      	ldrb	r3, [r2, r3]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d908      	bls.n	8004f10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	4b1f      	ldr	r3, [pc, #124]	@ (8004f84 <DMA_CalcBaseAndBitshift+0x160>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	1d1a      	adds	r2, r3, #4
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f0e:	e00d      	b.n	8004f2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	4b1b      	ldr	r3, [pc, #108]	@ (8004f84 <DMA_CalcBaseAndBitshift+0x160>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f1e:	e005      	b.n	8004f2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40020010 	.word	0x40020010
 8004f40:	40020028 	.word	0x40020028
 8004f44:	40020040 	.word	0x40020040
 8004f48:	40020058 	.word	0x40020058
 8004f4c:	40020070 	.word	0x40020070
 8004f50:	40020088 	.word	0x40020088
 8004f54:	400200a0 	.word	0x400200a0
 8004f58:	400200b8 	.word	0x400200b8
 8004f5c:	40020410 	.word	0x40020410
 8004f60:	40020428 	.word	0x40020428
 8004f64:	40020440 	.word	0x40020440
 8004f68:	40020458 	.word	0x40020458
 8004f6c:	40020470 	.word	0x40020470
 8004f70:	40020488 	.word	0x40020488
 8004f74:	400204a0 	.word	0x400204a0
 8004f78:	400204b8 	.word	0x400204b8
 8004f7c:	aaaaaaab 	.word	0xaaaaaaab
 8004f80:	08012708 	.word	0x08012708
 8004f84:	fffffc00 	.word	0xfffffc00

08004f88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d120      	bne.n	8004fde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d858      	bhi.n	8005056 <DMA_CheckFifoParam+0xce>
 8004fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fac <DMA_CheckFifoParam+0x24>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fbd 	.word	0x08004fbd
 8004fb0:	08004fcf 	.word	0x08004fcf
 8004fb4:	08004fbd 	.word	0x08004fbd
 8004fb8:	08005057 	.word	0x08005057
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d048      	beq.n	800505a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fcc:	e045      	b.n	800505a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fd6:	d142      	bne.n	800505e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fdc:	e03f      	b.n	800505e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe6:	d123      	bne.n	8005030 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d838      	bhi.n	8005062 <DMA_CheckFifoParam+0xda>
 8004ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <DMA_CheckFifoParam+0x70>)
 8004ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff6:	bf00      	nop
 8004ff8:	08005009 	.word	0x08005009
 8004ffc:	0800500f 	.word	0x0800500f
 8005000:	08005009 	.word	0x08005009
 8005004:	08005021 	.word	0x08005021
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
        break;
 800500c:	e030      	b.n	8005070 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d025      	beq.n	8005066 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800501e:	e022      	b.n	8005066 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005028:	d11f      	bne.n	800506a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800502e:	e01c      	b.n	800506a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	2b02      	cmp	r3, #2
 8005036:	d902      	bls.n	800503e <DMA_CheckFifoParam+0xb6>
 8005038:	2b03      	cmp	r3, #3
 800503a:	d003      	beq.n	8005044 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800503c:	e018      	b.n	8005070 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
        break;
 8005042:	e015      	b.n	8005070 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00e      	beq.n	800506e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	73fb      	strb	r3, [r7, #15]
    break;
 8005054:	e00b      	b.n	800506e <DMA_CheckFifoParam+0xe6>
        break;
 8005056:	bf00      	nop
 8005058:	e00a      	b.n	8005070 <DMA_CheckFifoParam+0xe8>
        break;
 800505a:	bf00      	nop
 800505c:	e008      	b.n	8005070 <DMA_CheckFifoParam+0xe8>
        break;
 800505e:	bf00      	nop
 8005060:	e006      	b.n	8005070 <DMA_CheckFifoParam+0xe8>
        break;
 8005062:	bf00      	nop
 8005064:	e004      	b.n	8005070 <DMA_CheckFifoParam+0xe8>
        break;
 8005066:	bf00      	nop
 8005068:	e002      	b.n	8005070 <DMA_CheckFifoParam+0xe8>
        break;
 800506a:	bf00      	nop
 800506c:	e000      	b.n	8005070 <DMA_CheckFifoParam+0xe8>
    break;
 800506e:	bf00      	nop
    }
  }

  return status;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop

08005080 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a38      	ldr	r2, [pc, #224]	@ (8005174 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d022      	beq.n	80050de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a36      	ldr	r2, [pc, #216]	@ (8005178 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01d      	beq.n	80050de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a35      	ldr	r2, [pc, #212]	@ (800517c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d018      	beq.n	80050de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a33      	ldr	r2, [pc, #204]	@ (8005180 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a32      	ldr	r2, [pc, #200]	@ (8005184 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a30      	ldr	r2, [pc, #192]	@ (8005188 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2f      	ldr	r2, [pc, #188]	@ (800518c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005190 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d101      	bne.n	80050e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80050e2:	2300      	movs	r3, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	3b08      	subs	r3, #8
 80050f0:	4a28      	ldr	r2, [pc, #160]	@ (8005194 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80050f2:	fba2 2303 	umull	r2, r3, r2, r3
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4b26      	ldr	r3, [pc, #152]	@ (8005198 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	461a      	mov	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a24      	ldr	r2, [pc, #144]	@ (800519c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800510c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2201      	movs	r2, #1
 8005116:	409a      	lsls	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800511c:	e024      	b.n	8005168 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	3b10      	subs	r3, #16
 8005126:	4a1e      	ldr	r2, [pc, #120]	@ (80051a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005128:	fba2 2303 	umull	r2, r3, r2, r3
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4a1c      	ldr	r2, [pc, #112]	@ (80051a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d806      	bhi.n	8005146 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4a1b      	ldr	r2, [pc, #108]	@ (80051a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d902      	bls.n	8005146 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3308      	adds	r3, #8
 8005144:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4b18      	ldr	r3, [pc, #96]	@ (80051ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	461a      	mov	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a16      	ldr	r2, [pc, #88]	@ (80051b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005158:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	2201      	movs	r2, #1
 8005162:	409a      	lsls	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	58025408 	.word	0x58025408
 8005178:	5802541c 	.word	0x5802541c
 800517c:	58025430 	.word	0x58025430
 8005180:	58025444 	.word	0x58025444
 8005184:	58025458 	.word	0x58025458
 8005188:	5802546c 	.word	0x5802546c
 800518c:	58025480 	.word	0x58025480
 8005190:	58025494 	.word	0x58025494
 8005194:	cccccccd 	.word	0xcccccccd
 8005198:	16009600 	.word	0x16009600
 800519c:	58025880 	.word	0x58025880
 80051a0:	aaaaaaab 	.word	0xaaaaaaab
 80051a4:	400204b8 	.word	0x400204b8
 80051a8:	4002040f 	.word	0x4002040f
 80051ac:	10008200 	.word	0x10008200
 80051b0:	40020880 	.word	0x40020880

080051b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d04a      	beq.n	8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d847      	bhi.n	8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a25      	ldr	r2, [pc, #148]	@ (800526c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d022      	beq.n	8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a24      	ldr	r2, [pc, #144]	@ (8005270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d01d      	beq.n	8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d018      	beq.n	8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1f      	ldr	r2, [pc, #124]	@ (800527c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1e      	ldr	r2, [pc, #120]	@ (8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d009      	beq.n	8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1c      	ldr	r2, [pc, #112]	@ (8005284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1b      	ldr	r2, [pc, #108]	@ (8005288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d101      	bne.n	8005224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005224:	2300      	movs	r3, #0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4b17      	ldr	r3, [pc, #92]	@ (800528c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	461a      	mov	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a15      	ldr	r2, [pc, #84]	@ (8005290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800523c:	671a      	str	r2, [r3, #112]	@ 0x70
 800523e:	e009      	b.n	8005254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4b14      	ldr	r3, [pc, #80]	@ (8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	461a      	mov	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a11      	ldr	r2, [pc, #68]	@ (8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005252:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3b01      	subs	r3, #1
 8005258:	2201      	movs	r2, #1
 800525a:	409a      	lsls	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	58025408 	.word	0x58025408
 8005270:	5802541c 	.word	0x5802541c
 8005274:	58025430 	.word	0x58025430
 8005278:	58025444 	.word	0x58025444
 800527c:	58025458 	.word	0x58025458
 8005280:	5802546c 	.word	0x5802546c
 8005284:	58025480 	.word	0x58025480
 8005288:	58025494 	.word	0x58025494
 800528c:	1600963f 	.word	0x1600963f
 8005290:	58025940 	.word	0x58025940
 8005294:	1000823f 	.word	0x1000823f
 8005298:	40020940 	.word	0x40020940

0800529c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	@ 0x24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052aa:	4b89      	ldr	r3, [pc, #548]	@ (80054d0 <HAL_GPIO_Init+0x234>)
 80052ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052ae:	e194      	b.n	80055da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	2101      	movs	r1, #1
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	fa01 f303 	lsl.w	r3, r1, r3
 80052bc:	4013      	ands	r3, r2
 80052be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8186 	beq.w	80055d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d005      	beq.n	80052e0 <HAL_GPIO_Init+0x44>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d130      	bne.n	8005342 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	2203      	movs	r2, #3
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	43db      	mvns	r3, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	4013      	ands	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4313      	orrs	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005316:	2201      	movs	r2, #1
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43db      	mvns	r3, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4013      	ands	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	f003 0201 	and.w	r2, r3, #1
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b03      	cmp	r3, #3
 800534c:	d017      	beq.n	800537e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	2203      	movs	r2, #3
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43db      	mvns	r3, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4013      	ands	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4313      	orrs	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d123      	bne.n	80053d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	08da      	lsrs	r2, r3, #3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3208      	adds	r2, #8
 8005392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	220f      	movs	r2, #15
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	08da      	lsrs	r2, r3, #3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3208      	adds	r2, #8
 80053cc:	69b9      	ldr	r1, [r7, #24]
 80053ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	2203      	movs	r2, #3
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	43db      	mvns	r3, r3
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	4013      	ands	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f003 0203 	and.w	r2, r3, #3
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80e0 	beq.w	80055d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005414:	4b2f      	ldr	r3, [pc, #188]	@ (80054d4 <HAL_GPIO_Init+0x238>)
 8005416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800541a:	4a2e      	ldr	r2, [pc, #184]	@ (80054d4 <HAL_GPIO_Init+0x238>)
 800541c:	f043 0302 	orr.w	r3, r3, #2
 8005420:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005424:	4b2b      	ldr	r3, [pc, #172]	@ (80054d4 <HAL_GPIO_Init+0x238>)
 8005426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005432:	4a29      	ldr	r2, [pc, #164]	@ (80054d8 <HAL_GPIO_Init+0x23c>)
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	089b      	lsrs	r3, r3, #2
 8005438:	3302      	adds	r3, #2
 800543a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	220f      	movs	r2, #15
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4013      	ands	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a20      	ldr	r2, [pc, #128]	@ (80054dc <HAL_GPIO_Init+0x240>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d052      	beq.n	8005504 <HAL_GPIO_Init+0x268>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1f      	ldr	r2, [pc, #124]	@ (80054e0 <HAL_GPIO_Init+0x244>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d031      	beq.n	80054ca <HAL_GPIO_Init+0x22e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1e      	ldr	r2, [pc, #120]	@ (80054e4 <HAL_GPIO_Init+0x248>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d02b      	beq.n	80054c6 <HAL_GPIO_Init+0x22a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1d      	ldr	r2, [pc, #116]	@ (80054e8 <HAL_GPIO_Init+0x24c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d025      	beq.n	80054c2 <HAL_GPIO_Init+0x226>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1c      	ldr	r2, [pc, #112]	@ (80054ec <HAL_GPIO_Init+0x250>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01f      	beq.n	80054be <HAL_GPIO_Init+0x222>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1b      	ldr	r2, [pc, #108]	@ (80054f0 <HAL_GPIO_Init+0x254>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d019      	beq.n	80054ba <HAL_GPIO_Init+0x21e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1a      	ldr	r2, [pc, #104]	@ (80054f4 <HAL_GPIO_Init+0x258>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_GPIO_Init+0x21a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <HAL_GPIO_Init+0x25c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00d      	beq.n	80054b2 <HAL_GPIO_Init+0x216>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a18      	ldr	r2, [pc, #96]	@ (80054fc <HAL_GPIO_Init+0x260>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d007      	beq.n	80054ae <HAL_GPIO_Init+0x212>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a17      	ldr	r2, [pc, #92]	@ (8005500 <HAL_GPIO_Init+0x264>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d101      	bne.n	80054aa <HAL_GPIO_Init+0x20e>
 80054a6:	2309      	movs	r3, #9
 80054a8:	e02d      	b.n	8005506 <HAL_GPIO_Init+0x26a>
 80054aa:	230a      	movs	r3, #10
 80054ac:	e02b      	b.n	8005506 <HAL_GPIO_Init+0x26a>
 80054ae:	2308      	movs	r3, #8
 80054b0:	e029      	b.n	8005506 <HAL_GPIO_Init+0x26a>
 80054b2:	2307      	movs	r3, #7
 80054b4:	e027      	b.n	8005506 <HAL_GPIO_Init+0x26a>
 80054b6:	2306      	movs	r3, #6
 80054b8:	e025      	b.n	8005506 <HAL_GPIO_Init+0x26a>
 80054ba:	2305      	movs	r3, #5
 80054bc:	e023      	b.n	8005506 <HAL_GPIO_Init+0x26a>
 80054be:	2304      	movs	r3, #4
 80054c0:	e021      	b.n	8005506 <HAL_GPIO_Init+0x26a>
 80054c2:	2303      	movs	r3, #3
 80054c4:	e01f      	b.n	8005506 <HAL_GPIO_Init+0x26a>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e01d      	b.n	8005506 <HAL_GPIO_Init+0x26a>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e01b      	b.n	8005506 <HAL_GPIO_Init+0x26a>
 80054ce:	bf00      	nop
 80054d0:	58000080 	.word	0x58000080
 80054d4:	58024400 	.word	0x58024400
 80054d8:	58000400 	.word	0x58000400
 80054dc:	58020000 	.word	0x58020000
 80054e0:	58020400 	.word	0x58020400
 80054e4:	58020800 	.word	0x58020800
 80054e8:	58020c00 	.word	0x58020c00
 80054ec:	58021000 	.word	0x58021000
 80054f0:	58021400 	.word	0x58021400
 80054f4:	58021800 	.word	0x58021800
 80054f8:	58021c00 	.word	0x58021c00
 80054fc:	58022000 	.word	0x58022000
 8005500:	58022400 	.word	0x58022400
 8005504:	2300      	movs	r3, #0
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	f002 0203 	and.w	r2, r2, #3
 800550c:	0092      	lsls	r2, r2, #2
 800550e:	4093      	lsls	r3, r2
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4313      	orrs	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005516:	4938      	ldr	r1, [pc, #224]	@ (80055f8 <HAL_GPIO_Init+0x35c>)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	3302      	adds	r3, #2
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	43db      	mvns	r3, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4013      	ands	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800554a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	43db      	mvns	r3, r3
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	4013      	ands	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005578:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	43db      	mvns	r3, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4013      	ands	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	3301      	adds	r3, #1
 80055d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f47f ae63 	bne.w	80052b0 <HAL_GPIO_Init+0x14>
  }
}
 80055ea:	bf00      	nop
 80055ec:	bf00      	nop
 80055ee:	3724      	adds	r7, #36	@ 0x24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	58000400 	.word	0x58000400

080055fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	807b      	strh	r3, [r7, #2]
 8005608:	4613      	mov	r3, r2
 800560a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800560c:	787b      	ldrb	r3, [r7, #1]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005612:	887a      	ldrh	r2, [r7, #2]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005618:	e003      	b.n	8005622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800561a:	887b      	ldrh	r3, [r7, #2]
 800561c:	041a      	lsls	r2, r3, #16
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	619a      	str	r2, [r3, #24]
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	4603      	mov	r3, r0
 8005636:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800563c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005648:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	4618      	mov	r0, r3
 8005656:	f7fb f951 	bl	80008fc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800566c:	4b19      	ldr	r3, [pc, #100]	@ (80056d4 <HAL_PWREx_ConfigSupply+0x70>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b04      	cmp	r3, #4
 8005676:	d00a      	beq.n	800568e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005678:	4b16      	ldr	r3, [pc, #88]	@ (80056d4 <HAL_PWREx_ConfigSupply+0x70>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	d001      	beq.n	800568a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e01f      	b.n	80056ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	e01d      	b.n	80056ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800568e:	4b11      	ldr	r3, [pc, #68]	@ (80056d4 <HAL_PWREx_ConfigSupply+0x70>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f023 0207 	bic.w	r2, r3, #7
 8005696:	490f      	ldr	r1, [pc, #60]	@ (80056d4 <HAL_PWREx_ConfigSupply+0x70>)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4313      	orrs	r3, r2
 800569c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800569e:	f7fc fad9 	bl	8001c54 <HAL_GetTick>
 80056a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056a4:	e009      	b.n	80056ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056a6:	f7fc fad5 	bl	8001c54 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056b4:	d901      	bls.n	80056ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e007      	b.n	80056ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056ba:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <HAL_PWREx_ConfigSupply+0x70>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056c6:	d1ee      	bne.n	80056a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	58024800 	.word	0x58024800

080056d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08c      	sub	sp, #48	@ 0x30
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d102      	bne.n	80056ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f000 bc48 	b.w	8005f7c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8088 	beq.w	800580a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056fa:	4b99      	ldr	r3, [pc, #612]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005704:	4b96      	ldr	r3, [pc, #600]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800570a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570c:	2b10      	cmp	r3, #16
 800570e:	d007      	beq.n	8005720 <HAL_RCC_OscConfig+0x48>
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	2b18      	cmp	r3, #24
 8005714:	d111      	bne.n	800573a <HAL_RCC_OscConfig+0x62>
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d10c      	bne.n	800573a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005720:	4b8f      	ldr	r3, [pc, #572]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d06d      	beq.n	8005808 <HAL_RCC_OscConfig+0x130>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d169      	bne.n	8005808 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f000 bc21 	b.w	8005f7c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005742:	d106      	bne.n	8005752 <HAL_RCC_OscConfig+0x7a>
 8005744:	4b86      	ldr	r3, [pc, #536]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a85      	ldr	r2, [pc, #532]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 800574a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	e02e      	b.n	80057b0 <HAL_RCC_OscConfig+0xd8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10c      	bne.n	8005774 <HAL_RCC_OscConfig+0x9c>
 800575a:	4b81      	ldr	r3, [pc, #516]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a80      	ldr	r2, [pc, #512]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	4b7e      	ldr	r3, [pc, #504]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a7d      	ldr	r2, [pc, #500]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 800576c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e01d      	b.n	80057b0 <HAL_RCC_OscConfig+0xd8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0xc0>
 800577e:	4b78      	ldr	r3, [pc, #480]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a77      	ldr	r2, [pc, #476]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4b75      	ldr	r3, [pc, #468]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a74      	ldr	r2, [pc, #464]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0xd8>
 8005798:	4b71      	ldr	r3, [pc, #452]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a70      	ldr	r2, [pc, #448]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 800579e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	4b6e      	ldr	r3, [pc, #440]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a6d      	ldr	r2, [pc, #436]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80057aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d013      	beq.n	80057e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fc fa4c 	bl	8001c54 <HAL_GetTick>
 80057bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c0:	f7fc fa48 	bl	8001c54 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	@ 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e3d4      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057d2:	4b63      	ldr	r3, [pc, #396]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCC_OscConfig+0xe8>
 80057de:	e014      	b.n	800580a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fc fa38 	bl	8001c54 <HAL_GetTick>
 80057e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e8:	f7fc fa34 	bl	8001c54 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	@ 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e3c0      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057fa:	4b59      	ldr	r3, [pc, #356]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x110>
 8005806:	e000      	b.n	800580a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 80ca 	beq.w	80059ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005818:	4b51      	ldr	r3, [pc, #324]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005820:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005822:	4b4f      	ldr	r3, [pc, #316]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d007      	beq.n	800583e <HAL_RCC_OscConfig+0x166>
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	2b18      	cmp	r3, #24
 8005832:	d156      	bne.n	80058e2 <HAL_RCC_OscConfig+0x20a>
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d151      	bne.n	80058e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800583e:	4b48      	ldr	r3, [pc, #288]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <HAL_RCC_OscConfig+0x17e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e392      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005856:	4b42      	ldr	r3, [pc, #264]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f023 0219 	bic.w	r2, r3, #25
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	493f      	ldr	r1, [pc, #252]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005864:	4313      	orrs	r3, r2
 8005866:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fc f9f4 	bl	8001c54 <HAL_GetTick>
 800586c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005870:	f7fc f9f0 	bl	8001c54 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e37c      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005882:	4b37      	ldr	r3, [pc, #220]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588e:	f7fc fa11 	bl	8001cb4 <HAL_GetREVID>
 8005892:	4603      	mov	r3, r0
 8005894:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005898:	4293      	cmp	r3, r2
 800589a:	d817      	bhi.n	80058cc <HAL_RCC_OscConfig+0x1f4>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b40      	cmp	r3, #64	@ 0x40
 80058a2:	d108      	bne.n	80058b6 <HAL_RCC_OscConfig+0x1de>
 80058a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80058ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80058ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058b4:	e07a      	b.n	80059ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	031b      	lsls	r3, r3, #12
 80058c4:	4926      	ldr	r1, [pc, #152]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058ca:	e06f      	b.n	80059ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058cc:	4b24      	ldr	r3, [pc, #144]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	4921      	ldr	r1, [pc, #132]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058e0:	e064      	b.n	80059ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d047      	beq.n	800597a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f023 0219 	bic.w	r2, r3, #25
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	491a      	ldr	r1, [pc, #104]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fc f9aa 	bl	8001c54 <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005904:	f7fc f9a6 	bl	8001c54 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e332      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005916:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005922:	f7fc f9c7 	bl	8001cb4 <HAL_GetREVID>
 8005926:	4603      	mov	r3, r0
 8005928:	f241 0203 	movw	r2, #4099	@ 0x1003
 800592c:	4293      	cmp	r3, r2
 800592e:	d819      	bhi.n	8005964 <HAL_RCC_OscConfig+0x28c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b40      	cmp	r3, #64	@ 0x40
 8005936:	d108      	bne.n	800594a <HAL_RCC_OscConfig+0x272>
 8005938:	4b09      	ldr	r3, [pc, #36]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005940:	4a07      	ldr	r2, [pc, #28]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 8005942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005946:	6053      	str	r3, [r2, #4]
 8005948:	e030      	b.n	80059ac <HAL_RCC_OscConfig+0x2d4>
 800594a:	4b05      	ldr	r3, [pc, #20]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	031b      	lsls	r3, r3, #12
 8005958:	4901      	ldr	r1, [pc, #4]	@ (8005960 <HAL_RCC_OscConfig+0x288>)
 800595a:	4313      	orrs	r3, r2
 800595c:	604b      	str	r3, [r1, #4]
 800595e:	e025      	b.n	80059ac <HAL_RCC_OscConfig+0x2d4>
 8005960:	58024400 	.word	0x58024400
 8005964:	4b9a      	ldr	r3, [pc, #616]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	061b      	lsls	r3, r3, #24
 8005972:	4997      	ldr	r1, [pc, #604]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005974:	4313      	orrs	r3, r2
 8005976:	604b      	str	r3, [r1, #4]
 8005978:	e018      	b.n	80059ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597a:	4b95      	ldr	r3, [pc, #596]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a94      	ldr	r2, [pc, #592]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005986:	f7fc f965 	bl	8001c54 <HAL_GetTick>
 800598a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598e:	f7fc f961 	bl	8001c54 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e2ed      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059a0:	4b8b      	ldr	r3, [pc, #556]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f0      	bne.n	800598e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80a9 	beq.w	8005b0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ba:	4b85      	ldr	r3, [pc, #532]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059c4:	4b82      	ldr	r3, [pc, #520]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d007      	beq.n	80059e0 <HAL_RCC_OscConfig+0x308>
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b18      	cmp	r3, #24
 80059d4:	d13a      	bne.n	8005a4c <HAL_RCC_OscConfig+0x374>
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d135      	bne.n	8005a4c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059e0:	4b7b      	ldr	r3, [pc, #492]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_RCC_OscConfig+0x320>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	2b80      	cmp	r3, #128	@ 0x80
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e2c1      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059f8:	f7fc f95c 	bl	8001cb4 <HAL_GetREVID>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d817      	bhi.n	8005a36 <HAL_RCC_OscConfig+0x35e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d108      	bne.n	8005a20 <HAL_RCC_OscConfig+0x348>
 8005a0e:	4b70      	ldr	r3, [pc, #448]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005a16:	4a6e      	ldr	r2, [pc, #440]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005a18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a1c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a1e:	e075      	b.n	8005b0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a20:	4b6b      	ldr	r3, [pc, #428]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	069b      	lsls	r3, r3, #26
 8005a2e:	4968      	ldr	r1, [pc, #416]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a34:	e06a      	b.n	8005b0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a36:	4b66      	ldr	r3, [pc, #408]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	061b      	lsls	r3, r3, #24
 8005a44:	4962      	ldr	r1, [pc, #392]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a4a:	e05f      	b.n	8005b0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d042      	beq.n	8005ada <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005a54:	4b5e      	ldr	r3, [pc, #376]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a5d      	ldr	r2, [pc, #372]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7fc f8f8 	bl	8001c54 <HAL_GetTick>
 8005a64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a68:	f7fc f8f4 	bl	8001c54 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e280      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a7a:	4b55      	ldr	r3, [pc, #340]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f0      	beq.n	8005a68 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a86:	f7fc f915 	bl	8001cb4 <HAL_GetREVID>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d817      	bhi.n	8005ac4 <HAL_RCC_OscConfig+0x3ec>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d108      	bne.n	8005aae <HAL_RCC_OscConfig+0x3d6>
 8005a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005aa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aaa:	6053      	str	r3, [r2, #4]
 8005aac:	e02e      	b.n	8005b0c <HAL_RCC_OscConfig+0x434>
 8005aae:	4b48      	ldr	r3, [pc, #288]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	069b      	lsls	r3, r3, #26
 8005abc:	4944      	ldr	r1, [pc, #272]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	604b      	str	r3, [r1, #4]
 8005ac2:	e023      	b.n	8005b0c <HAL_RCC_OscConfig+0x434>
 8005ac4:	4b42      	ldr	r3, [pc, #264]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	493f      	ldr	r1, [pc, #252]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60cb      	str	r3, [r1, #12]
 8005ad8:	e018      	b.n	8005b0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005ada:	4b3d      	ldr	r3, [pc, #244]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a3c      	ldr	r2, [pc, #240]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005ae0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae6:	f7fc f8b5 	bl	8001c54 <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005aee:	f7fc f8b1 	bl	8001c54 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e23d      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b00:	4b33      	ldr	r3, [pc, #204]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f0      	bne.n	8005aee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d036      	beq.n	8005b86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d019      	beq.n	8005b54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b20:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b24:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b2c:	f7fc f892 	bl	8001c54 <HAL_GetTick>
 8005b30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b34:	f7fc f88e 	bl	8001c54 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e21a      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b46:	4b22      	ldr	r3, [pc, #136]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x45c>
 8005b52:	e018      	b.n	8005b86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b54:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b58:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b60:	f7fc f878 	bl	8001c54 <HAL_GetTick>
 8005b64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b68:	f7fc f874 	bl	8001c54 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e200      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b7a:	4b15      	ldr	r3, [pc, #84]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f0      	bne.n	8005b68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d039      	beq.n	8005c06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01c      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ba4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ba6:	f7fc f855 	bl	8001c54 <HAL_GetTick>
 8005baa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bae:	f7fc f851 	bl	8001c54 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e1dd      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bc0:	4b03      	ldr	r3, [pc, #12]	@ (8005bd0 <HAL_RCC_OscConfig+0x4f8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0f0      	beq.n	8005bae <HAL_RCC_OscConfig+0x4d6>
 8005bcc:	e01b      	b.n	8005c06 <HAL_RCC_OscConfig+0x52e>
 8005bce:	bf00      	nop
 8005bd0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bd4:	4b9b      	ldr	r3, [pc, #620]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a9a      	ldr	r2, [pc, #616]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005bda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005be0:	f7fc f838 	bl	8001c54 <HAL_GetTick>
 8005be4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005be8:	f7fc f834 	bl	8001c54 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e1c0      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005bfa:	4b92      	ldr	r3, [pc, #584]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8081 	beq.w	8005d16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c14:	4b8c      	ldr	r3, [pc, #560]	@ (8005e48 <HAL_RCC_OscConfig+0x770>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a8b      	ldr	r2, [pc, #556]	@ (8005e48 <HAL_RCC_OscConfig+0x770>)
 8005c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c20:	f7fc f818 	bl	8001c54 <HAL_GetTick>
 8005c24:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c28:	f7fc f814 	bl	8001c54 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	@ 0x64
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e1a0      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c3a:	4b83      	ldr	r3, [pc, #524]	@ (8005e48 <HAL_RCC_OscConfig+0x770>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d106      	bne.n	8005c5c <HAL_RCC_OscConfig+0x584>
 8005c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c52:	4a7c      	ldr	r2, [pc, #496]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c5a:	e02d      	b.n	8005cb8 <HAL_RCC_OscConfig+0x5e0>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10c      	bne.n	8005c7e <HAL_RCC_OscConfig+0x5a6>
 8005c64:	4b77      	ldr	r3, [pc, #476]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c68:	4a76      	ldr	r2, [pc, #472]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
 8005c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c70:	4b74      	ldr	r3, [pc, #464]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c74:	4a73      	ldr	r2, [pc, #460]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005c76:	f023 0304 	bic.w	r3, r3, #4
 8005c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c7c:	e01c      	b.n	8005cb8 <HAL_RCC_OscConfig+0x5e0>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x5c8>
 8005c86:	4b6f      	ldr	r3, [pc, #444]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005c8c:	f043 0304 	orr.w	r3, r3, #4
 8005c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c92:	4b6c      	ldr	r3, [pc, #432]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c96:	4a6b      	ldr	r2, [pc, #428]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c9e:	e00b      	b.n	8005cb8 <HAL_RCC_OscConfig+0x5e0>
 8005ca0:	4b68      	ldr	r3, [pc, #416]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca4:	4a67      	ldr	r2, [pc, #412]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005ca6:	f023 0301 	bic.w	r3, r3, #1
 8005caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cac:	4b65      	ldr	r3, [pc, #404]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	4a64      	ldr	r2, [pc, #400]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005cb2:	f023 0304 	bic.w	r3, r3, #4
 8005cb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d015      	beq.n	8005cec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc0:	f7fb ffc8 	bl	8001c54 <HAL_GetTick>
 8005cc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cc6:	e00a      	b.n	8005cde <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc8:	f7fb ffc4 	bl	8001c54 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e14e      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cde:	4b59      	ldr	r3, [pc, #356]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0ee      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x5f0>
 8005cea:	e014      	b.n	8005d16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cec:	f7fb ffb2 	bl	8001c54 <HAL_GetTick>
 8005cf0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf4:	f7fb ffae 	bl	8001c54 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e138      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1ee      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 812d 	beq.w	8005f7a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d20:	4b48      	ldr	r3, [pc, #288]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d28:	2b18      	cmp	r3, #24
 8005d2a:	f000 80bd 	beq.w	8005ea8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	f040 809e 	bne.w	8005e74 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d38:	4b42      	ldr	r3, [pc, #264]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a41      	ldr	r2, [pc, #260]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d44:	f7fb ff86 	bl	8001c54 <HAL_GetTick>
 8005d48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fb ff82 	bl	8001c54 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e10e      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d5e:	4b39      	ldr	r3, [pc, #228]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d6a:	4b36      	ldr	r3, [pc, #216]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005d6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d6e:	4b37      	ldr	r3, [pc, #220]	@ (8005e4c <HAL_RCC_OscConfig+0x774>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d7a:	0112      	lsls	r2, r2, #4
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	4931      	ldr	r1, [pc, #196]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d92:	3b01      	subs	r3, #1
 8005d94:	025b      	lsls	r3, r3, #9
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	041b      	lsls	r3, r3, #16
 8005da2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dac:	3b01      	subs	r3, #1
 8005dae:	061b      	lsls	r3, r3, #24
 8005db0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005db4:	4923      	ldr	r1, [pc, #140]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005dba:	4b22      	ldr	r3, [pc, #136]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	4a21      	ldr	r2, [pc, #132]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dca:	4b21      	ldr	r3, [pc, #132]	@ (8005e50 <HAL_RCC_OscConfig+0x778>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005dd2:	00d2      	lsls	r2, r2, #3
 8005dd4:	491b      	ldr	r1, [pc, #108]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005dda:	4b1a      	ldr	r3, [pc, #104]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dde:	f023 020c 	bic.w	r2, r3, #12
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	4917      	ldr	r1, [pc, #92]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005dec:	4b15      	ldr	r3, [pc, #84]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df0:	f023 0202 	bic.w	r2, r3, #2
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df8:	4912      	ldr	r1, [pc, #72]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005dfe:	4b11      	ldr	r3, [pc, #68]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	4a10      	ldr	r2, [pc, #64]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e16:	4b0b      	ldr	r3, [pc, #44]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005e22:	4b08      	ldr	r3, [pc, #32]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	4a07      	ldr	r2, [pc, #28]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e2e:	4b05      	ldr	r3, [pc, #20]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a04      	ldr	r2, [pc, #16]	@ (8005e44 <HAL_RCC_OscConfig+0x76c>)
 8005e34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3a:	f7fb ff0b 	bl	8001c54 <HAL_GetTick>
 8005e3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e40:	e011      	b.n	8005e66 <HAL_RCC_OscConfig+0x78e>
 8005e42:	bf00      	nop
 8005e44:	58024400 	.word	0x58024400
 8005e48:	58024800 	.word	0x58024800
 8005e4c:	fffffc0c 	.word	0xfffffc0c
 8005e50:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e54:	f7fb fefe 	bl	8001c54 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e08a      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e66:	4b47      	ldr	r3, [pc, #284]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCC_OscConfig+0x77c>
 8005e72:	e082      	b.n	8005f7a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e74:	4b43      	ldr	r3, [pc, #268]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a42      	ldr	r2, [pc, #264]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005e7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fb fee8 	bl	8001c54 <HAL_GetTick>
 8005e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e88:	f7fb fee4 	bl	8001c54 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e070      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e9a:	4b3a      	ldr	r3, [pc, #232]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x7b0>
 8005ea6:	e068      	b.n	8005f7a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ea8:	4b36      	ldr	r3, [pc, #216]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005eae:	4b35      	ldr	r3, [pc, #212]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d031      	beq.n	8005f20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f003 0203 	and.w	r2, r3, #3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d12a      	bne.n	8005f20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d122      	bne.n	8005f20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d11a      	bne.n	8005f20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	0a5b      	lsrs	r3, r3, #9
 8005eee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d111      	bne.n	8005f20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	0c1b      	lsrs	r3, r3, #16
 8005f00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d108      	bne.n	8005f20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	0e1b      	lsrs	r3, r3, #24
 8005f12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d001      	beq.n	8005f24 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e02b      	b.n	8005f7c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005f24:	4b17      	ldr	r3, [pc, #92]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f28:	08db      	lsrs	r3, r3, #3
 8005f2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d01f      	beq.n	8005f7a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005f3a:	4b12      	ldr	r3, [pc, #72]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3e:	4a11      	ldr	r2, [pc, #68]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005f40:	f023 0301 	bic.w	r3, r3, #1
 8005f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f46:	f7fb fe85 	bl	8001c54 <HAL_GetTick>
 8005f4a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005f4c:	bf00      	nop
 8005f4e:	f7fb fe81 	bl	8001c54 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d0f9      	beq.n	8005f4e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <HAL_RCC_OscConfig+0x8b0>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f66:	00d2      	lsls	r2, r2, #3
 8005f68:	4906      	ldr	r1, [pc, #24]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005f6e:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	4a04      	ldr	r2, [pc, #16]	@ (8005f84 <HAL_RCC_OscConfig+0x8ac>)
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3730      	adds	r7, #48	@ 0x30
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	58024400 	.word	0x58024400
 8005f88:	ffff0007 	.word	0xffff0007

08005f8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e19c      	b.n	80062da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa0:	4b8a      	ldr	r3, [pc, #552]	@ (80061cc <HAL_RCC_ClockConfig+0x240>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d910      	bls.n	8005fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fae:	4b87      	ldr	r3, [pc, #540]	@ (80061cc <HAL_RCC_ClockConfig+0x240>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f023 020f 	bic.w	r2, r3, #15
 8005fb6:	4985      	ldr	r1, [pc, #532]	@ (80061cc <HAL_RCC_ClockConfig+0x240>)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	4b83      	ldr	r3, [pc, #524]	@ (80061cc <HAL_RCC_ClockConfig+0x240>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e184      	b.n	80062da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d010      	beq.n	8005ffe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	4b7b      	ldr	r3, [pc, #492]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d908      	bls.n	8005ffe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fec:	4b78      	ldr	r3, [pc, #480]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	4975      	ldr	r1, [pc, #468]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d010      	beq.n	800602c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	4b70      	ldr	r3, [pc, #448]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006016:	429a      	cmp	r2, r3
 8006018:	d908      	bls.n	800602c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800601a:	4b6d      	ldr	r3, [pc, #436]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	496a      	ldr	r1, [pc, #424]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 8006028:	4313      	orrs	r3, r2
 800602a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	d010      	beq.n	800605a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	4b64      	ldr	r3, [pc, #400]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006044:	429a      	cmp	r2, r3
 8006046:	d908      	bls.n	800605a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006048:	4b61      	ldr	r3, [pc, #388]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	495e      	ldr	r1, [pc, #376]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 8006056:	4313      	orrs	r3, r2
 8006058:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d010      	beq.n	8006088 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69da      	ldr	r2, [r3, #28]
 800606a:	4b59      	ldr	r3, [pc, #356]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006072:	429a      	cmp	r2, r3
 8006074:	d908      	bls.n	8006088 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006076:	4b56      	ldr	r3, [pc, #344]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	4953      	ldr	r1, [pc, #332]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 8006084:	4313      	orrs	r3, r2
 8006086:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d010      	beq.n	80060b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	4b4d      	ldr	r3, [pc, #308]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d908      	bls.n	80060b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a4:	4b4a      	ldr	r3, [pc, #296]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	f023 020f 	bic.w	r2, r3, #15
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4947      	ldr	r1, [pc, #284]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d055      	beq.n	800616e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80060c2:	4b43      	ldr	r3, [pc, #268]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	4940      	ldr	r1, [pc, #256]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d107      	bne.n	80060ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060dc:	4b3c      	ldr	r3, [pc, #240]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d121      	bne.n	800612c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0f6      	b.n	80062da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060f4:	4b36      	ldr	r3, [pc, #216]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d115      	bne.n	800612c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0ea      	b.n	80062da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d107      	bne.n	800611c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800610c:	4b30      	ldr	r3, [pc, #192]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e0de      	b.n	80062da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800611c:	4b2c      	ldr	r3, [pc, #176]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e0d6      	b.n	80062da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800612c:	4b28      	ldr	r3, [pc, #160]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f023 0207 	bic.w	r2, r3, #7
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4925      	ldr	r1, [pc, #148]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800613a:	4313      	orrs	r3, r2
 800613c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613e:	f7fb fd89 	bl	8001c54 <HAL_GetTick>
 8006142:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006144:	e00a      	b.n	800615c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006146:	f7fb fd85 	bl	8001c54 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e0be      	b.n	80062da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615c:	4b1c      	ldr	r3, [pc, #112]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	429a      	cmp	r2, r3
 800616c:	d1eb      	bne.n	8006146 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d010      	beq.n	800619c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	4b14      	ldr	r3, [pc, #80]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	429a      	cmp	r2, r3
 8006188:	d208      	bcs.n	800619c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800618a:	4b11      	ldr	r3, [pc, #68]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f023 020f 	bic.w	r2, r3, #15
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	490e      	ldr	r1, [pc, #56]	@ (80061d0 <HAL_RCC_ClockConfig+0x244>)
 8006198:	4313      	orrs	r3, r2
 800619a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800619c:	4b0b      	ldr	r3, [pc, #44]	@ (80061cc <HAL_RCC_ClockConfig+0x240>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d214      	bcs.n	80061d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061aa:	4b08      	ldr	r3, [pc, #32]	@ (80061cc <HAL_RCC_ClockConfig+0x240>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f023 020f 	bic.w	r2, r3, #15
 80061b2:	4906      	ldr	r1, [pc, #24]	@ (80061cc <HAL_RCC_ClockConfig+0x240>)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ba:	4b04      	ldr	r3, [pc, #16]	@ (80061cc <HAL_RCC_ClockConfig+0x240>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d005      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e086      	b.n	80062da <HAL_RCC_ClockConfig+0x34e>
 80061cc:	52002000 	.word	0x52002000
 80061d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d010      	beq.n	8006202 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	4b3f      	ldr	r3, [pc, #252]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d208      	bcs.n	8006202 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061f0:	4b3c      	ldr	r3, [pc, #240]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	4939      	ldr	r1, [pc, #228]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d010      	beq.n	8006230 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695a      	ldr	r2, [r3, #20]
 8006212:	4b34      	ldr	r3, [pc, #208]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800621a:	429a      	cmp	r2, r3
 800621c:	d208      	bcs.n	8006230 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800621e:	4b31      	ldr	r3, [pc, #196]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	492e      	ldr	r1, [pc, #184]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 800622c:	4313      	orrs	r3, r2
 800622e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	d010      	beq.n	800625e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699a      	ldr	r2, [r3, #24]
 8006240:	4b28      	ldr	r3, [pc, #160]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006248:	429a      	cmp	r2, r3
 800624a:	d208      	bcs.n	800625e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800624c:	4b25      	ldr	r3, [pc, #148]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	4922      	ldr	r1, [pc, #136]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 800625a:	4313      	orrs	r3, r2
 800625c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d010      	beq.n	800628c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69da      	ldr	r2, [r3, #28]
 800626e:	4b1d      	ldr	r3, [pc, #116]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006276:	429a      	cmp	r2, r3
 8006278:	d208      	bcs.n	800628c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800627a:	4b1a      	ldr	r3, [pc, #104]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	4917      	ldr	r1, [pc, #92]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 8006288:	4313      	orrs	r3, r2
 800628a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800628c:	f000 f834 	bl	80062f8 <HAL_RCC_GetSysClockFreq>
 8006290:	4602      	mov	r2, r0
 8006292:	4b14      	ldr	r3, [pc, #80]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	4912      	ldr	r1, [pc, #72]	@ (80062e8 <HAL_RCC_ClockConfig+0x35c>)
 800629e:	5ccb      	ldrb	r3, [r1, r3]
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	fa22 f303 	lsr.w	r3, r2, r3
 80062a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062aa:	4b0e      	ldr	r3, [pc, #56]	@ (80062e4 <HAL_RCC_ClockConfig+0x358>)
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	4a0d      	ldr	r2, [pc, #52]	@ (80062e8 <HAL_RCC_ClockConfig+0x35c>)
 80062b4:	5cd3      	ldrb	r3, [r2, r3]
 80062b6:	f003 031f 	and.w	r3, r3, #31
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
 80062c0:	4a0a      	ldr	r2, [pc, #40]	@ (80062ec <HAL_RCC_ClockConfig+0x360>)
 80062c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062c4:	4a0a      	ldr	r2, [pc, #40]	@ (80062f0 <HAL_RCC_ClockConfig+0x364>)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80062ca:	4b0a      	ldr	r3, [pc, #40]	@ (80062f4 <HAL_RCC_ClockConfig+0x368>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fa fd94 	bl	8000dfc <HAL_InitTick>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	58024400 	.word	0x58024400
 80062e8:	080126f8 	.word	0x080126f8
 80062ec:	24000004 	.word	0x24000004
 80062f0:	24000000 	.word	0x24000000
 80062f4:	24000008 	.word	0x24000008

080062f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b089      	sub	sp, #36	@ 0x24
 80062fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062fe:	4bb3      	ldr	r3, [pc, #716]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006306:	2b18      	cmp	r3, #24
 8006308:	f200 8155 	bhi.w	80065b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800630c:	a201      	add	r2, pc, #4	@ (adr r2, 8006314 <HAL_RCC_GetSysClockFreq+0x1c>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	08006379 	.word	0x08006379
 8006318:	080065b7 	.word	0x080065b7
 800631c:	080065b7 	.word	0x080065b7
 8006320:	080065b7 	.word	0x080065b7
 8006324:	080065b7 	.word	0x080065b7
 8006328:	080065b7 	.word	0x080065b7
 800632c:	080065b7 	.word	0x080065b7
 8006330:	080065b7 	.word	0x080065b7
 8006334:	0800639f 	.word	0x0800639f
 8006338:	080065b7 	.word	0x080065b7
 800633c:	080065b7 	.word	0x080065b7
 8006340:	080065b7 	.word	0x080065b7
 8006344:	080065b7 	.word	0x080065b7
 8006348:	080065b7 	.word	0x080065b7
 800634c:	080065b7 	.word	0x080065b7
 8006350:	080065b7 	.word	0x080065b7
 8006354:	080063a5 	.word	0x080063a5
 8006358:	080065b7 	.word	0x080065b7
 800635c:	080065b7 	.word	0x080065b7
 8006360:	080065b7 	.word	0x080065b7
 8006364:	080065b7 	.word	0x080065b7
 8006368:	080065b7 	.word	0x080065b7
 800636c:	080065b7 	.word	0x080065b7
 8006370:	080065b7 	.word	0x080065b7
 8006374:	080063ab 	.word	0x080063ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006378:	4b94      	ldr	r3, [pc, #592]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d009      	beq.n	8006398 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006384:	4b91      	ldr	r3, [pc, #580]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	08db      	lsrs	r3, r3, #3
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	4a90      	ldr	r2, [pc, #576]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006390:	fa22 f303 	lsr.w	r3, r2, r3
 8006394:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006396:	e111      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006398:	4b8d      	ldr	r3, [pc, #564]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800639a:	61bb      	str	r3, [r7, #24]
      break;
 800639c:	e10e      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800639e:	4b8d      	ldr	r3, [pc, #564]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063a0:	61bb      	str	r3, [r7, #24]
      break;
 80063a2:	e10b      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80063a4:	4b8c      	ldr	r3, [pc, #560]	@ (80065d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063a6:	61bb      	str	r3, [r7, #24]
      break;
 80063a8:	e108      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063aa:	4b88      	ldr	r3, [pc, #544]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80063b4:	4b85      	ldr	r3, [pc, #532]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063c0:	4b82      	ldr	r3, [pc, #520]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80063ca:	4b80      	ldr	r3, [pc, #512]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ce:	08db      	lsrs	r3, r3, #3
 80063d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	fb02 f303 	mul.w	r3, r2, r3
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80e1 	beq.w	80065b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	f000 8083 	beq.w	80064fc <HAL_RCC_GetSysClockFreq+0x204>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	f200 80a1 	bhi.w	8006540 <HAL_RCC_GetSysClockFreq+0x248>
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_RCC_GetSysClockFreq+0x114>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d056      	beq.n	80064b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800640a:	e099      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800640c:	4b6f      	ldr	r3, [pc, #444]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d02d      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006418:	4b6c      	ldr	r3, [pc, #432]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	08db      	lsrs	r3, r3, #3
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	4a6b      	ldr	r2, [pc, #428]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
 8006428:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	ee07 3a90 	vmov	s15, r3
 8006430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006442:	4b62      	ldr	r3, [pc, #392]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006452:	ed97 6a02 	vldr	s12, [r7, #8]
 8006456:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80065dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800645a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006472:	e087      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80065e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006486:	4b51      	ldr	r3, [pc, #324]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006496:	ed97 6a02 	vldr	s12, [r7, #8]
 800649a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80065dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800649e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064b6:	e065      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80065e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80064c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ca:	4b40      	ldr	r3, [pc, #256]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064da:	ed97 6a02 	vldr	s12, [r7, #8]
 80064de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80065dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80064e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064fa:	e043      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006506:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80065e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800650a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650e:	4b2f      	ldr	r3, [pc, #188]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006522:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80065dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800653e:	e021      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80065e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800654e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006552:	4b1e      	ldr	r3, [pc, #120]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006562:	ed97 6a02 	vldr	s12, [r7, #8]
 8006566:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80065dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800656a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006582:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006584:	4b11      	ldr	r3, [pc, #68]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006588:	0a5b      	lsrs	r3, r3, #9
 800658a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800658e:	3301      	adds	r3, #1
 8006590:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	ee07 3a90 	vmov	s15, r3
 8006598:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800659c:	edd7 6a07 	vldr	s13, [r7, #28]
 80065a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a8:	ee17 3a90 	vmov	r3, s15
 80065ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80065ae:	e005      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61bb      	str	r3, [r7, #24]
      break;
 80065b4:	e002      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80065b6:	4b07      	ldr	r3, [pc, #28]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065b8:	61bb      	str	r3, [r7, #24]
      break;
 80065ba:	bf00      	nop
  }

  return sysclockfreq;
 80065bc:	69bb      	ldr	r3, [r7, #24]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3724      	adds	r7, #36	@ 0x24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	58024400 	.word	0x58024400
 80065d0:	03d09000 	.word	0x03d09000
 80065d4:	003d0900 	.word	0x003d0900
 80065d8:	007a1200 	.word	0x007a1200
 80065dc:	46000000 	.word	0x46000000
 80065e0:	4c742400 	.word	0x4c742400
 80065e4:	4a742400 	.word	0x4a742400
 80065e8:	4af42400 	.word	0x4af42400

080065ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80065f2:	f7ff fe81 	bl	80062f8 <HAL_RCC_GetSysClockFreq>
 80065f6:	4602      	mov	r2, r0
 80065f8:	4b10      	ldr	r3, [pc, #64]	@ (800663c <HAL_RCC_GetHCLKFreq+0x50>)
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	0a1b      	lsrs	r3, r3, #8
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	490f      	ldr	r1, [pc, #60]	@ (8006640 <HAL_RCC_GetHCLKFreq+0x54>)
 8006604:	5ccb      	ldrb	r3, [r1, r3]
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	fa22 f303 	lsr.w	r3, r2, r3
 800660e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006610:	4b0a      	ldr	r3, [pc, #40]	@ (800663c <HAL_RCC_GetHCLKFreq+0x50>)
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	4a09      	ldr	r2, [pc, #36]	@ (8006640 <HAL_RCC_GetHCLKFreq+0x54>)
 800661a:	5cd3      	ldrb	r3, [r2, r3]
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	fa22 f303 	lsr.w	r3, r2, r3
 8006626:	4a07      	ldr	r2, [pc, #28]	@ (8006644 <HAL_RCC_GetHCLKFreq+0x58>)
 8006628:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800662a:	4a07      	ldr	r2, [pc, #28]	@ (8006648 <HAL_RCC_GetHCLKFreq+0x5c>)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006630:	4b04      	ldr	r3, [pc, #16]	@ (8006644 <HAL_RCC_GetHCLKFreq+0x58>)
 8006632:	681b      	ldr	r3, [r3, #0]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	58024400 	.word	0x58024400
 8006640:	080126f8 	.word	0x080126f8
 8006644:	24000004 	.word	0x24000004
 8006648:	24000000 	.word	0x24000000

0800664c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006650:	f7ff ffcc 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 8006654:	4602      	mov	r2, r0
 8006656:	4b06      	ldr	r3, [pc, #24]	@ (8006670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	091b      	lsrs	r3, r3, #4
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	4904      	ldr	r1, [pc, #16]	@ (8006674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006662:	5ccb      	ldrb	r3, [r1, r3]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	58024400 	.word	0x58024400
 8006674:	080126f8 	.word	0x080126f8

08006678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800667c:	f7ff ffb6 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 8006680:	4602      	mov	r2, r0
 8006682:	4b06      	ldr	r3, [pc, #24]	@ (800669c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	4904      	ldr	r1, [pc, #16]	@ (80066a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800668e:	5ccb      	ldrb	r3, [r1, r3]
 8006690:	f003 031f 	and.w	r3, r3, #31
 8006694:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006698:	4618      	mov	r0, r3
 800669a:	bd80      	pop	{r7, pc}
 800669c:	58024400 	.word	0x58024400
 80066a0:	080126f8 	.word	0x080126f8

080066a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	223f      	movs	r2, #63	@ 0x3f
 80066b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006720 <HAL_RCC_GetClockConfig+0x7c>)
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f003 0207 	and.w	r2, r3, #7
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80066c0:	4b17      	ldr	r3, [pc, #92]	@ (8006720 <HAL_RCC_GetClockConfig+0x7c>)
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80066cc:	4b14      	ldr	r3, [pc, #80]	@ (8006720 <HAL_RCC_GetClockConfig+0x7c>)
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80066d8:	4b11      	ldr	r3, [pc, #68]	@ (8006720 <HAL_RCC_GetClockConfig+0x7c>)
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80066e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <HAL_RCC_GetClockConfig+0x7c>)
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80066f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006720 <HAL_RCC_GetClockConfig+0x7c>)
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80066fc:	4b08      	ldr	r3, [pc, #32]	@ (8006720 <HAL_RCC_GetClockConfig+0x7c>)
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006708:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <HAL_RCC_GetClockConfig+0x80>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 020f 	and.w	r2, r3, #15
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	601a      	str	r2, [r3, #0]
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	58024400 	.word	0x58024400
 8006724:	52002000 	.word	0x52002000

08006728 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800672c:	b0ca      	sub	sp, #296	@ 0x128
 800672e:	af00      	add	r7, sp, #0
 8006730:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006734:	2300      	movs	r3, #0
 8006736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800673a:	2300      	movs	r3, #0
 800673c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800674c:	2500      	movs	r5, #0
 800674e:	ea54 0305 	orrs.w	r3, r4, r5
 8006752:	d049      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006758:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800675a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800675e:	d02f      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006760:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006764:	d828      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006766:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800676a:	d01a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800676c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006770:	d822      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800677a:	d007      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800677c:	e01c      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677e:	4bb8      	ldr	r3, [pc, #736]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006782:	4ab7      	ldr	r2, [pc, #732]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006788:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800678a:	e01a      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800678c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006790:	3308      	adds	r3, #8
 8006792:	2102      	movs	r1, #2
 8006794:	4618      	mov	r0, r3
 8006796:	f002 fb61 	bl	8008e5c <RCCEx_PLL2_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067a0:	e00f      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	3328      	adds	r3, #40	@ 0x28
 80067a8:	2102      	movs	r1, #2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f002 fc08 	bl	8008fc0 <RCCEx_PLL3_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067b6:	e004      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80067c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80067ca:	4ba5      	ldr	r3, [pc, #660]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067d8:	4aa1      	ldr	r2, [pc, #644]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067da:	430b      	orrs	r3, r1
 80067dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80067de:	e003      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80067f4:	f04f 0900 	mov.w	r9, #0
 80067f8:	ea58 0309 	orrs.w	r3, r8, r9
 80067fc:	d047      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006804:	2b04      	cmp	r3, #4
 8006806:	d82a      	bhi.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006808:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006825 	.word	0x08006825
 8006814:	08006833 	.word	0x08006833
 8006818:	08006849 	.word	0x08006849
 800681c:	08006867 	.word	0x08006867
 8006820:	08006867 	.word	0x08006867
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006824:	4b8e      	ldr	r3, [pc, #568]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006828:	4a8d      	ldr	r2, [pc, #564]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006830:	e01a      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	3308      	adds	r3, #8
 8006838:	2100      	movs	r1, #0
 800683a:	4618      	mov	r0, r3
 800683c:	f002 fb0e 	bl	8008e5c <RCCEx_PLL2_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006846:	e00f      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684c:	3328      	adds	r3, #40	@ 0x28
 800684e:	2100      	movs	r1, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f002 fbb5 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800685c:	e004      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006864:	e000      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006870:	4b7b      	ldr	r3, [pc, #492]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006874:	f023 0107 	bic.w	r1, r3, #7
 8006878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800687e:	4a78      	ldr	r2, [pc, #480]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006880:	430b      	orrs	r3, r1
 8006882:	6513      	str	r3, [r2, #80]	@ 0x50
 8006884:	e003      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800688a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800688e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800689a:	f04f 0b00 	mov.w	fp, #0
 800689e:	ea5a 030b 	orrs.w	r3, sl, fp
 80068a2:	d04c      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ae:	d030      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80068b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b4:	d829      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068b8:	d02d      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80068ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80068bc:	d825      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068be:	2b80      	cmp	r3, #128	@ 0x80
 80068c0:	d018      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80068c2:	2b80      	cmp	r3, #128	@ 0x80
 80068c4:	d821      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d007      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80068ce:	e01c      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d0:	4b63      	ldr	r3, [pc, #396]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d4:	4a62      	ldr	r2, [pc, #392]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068dc:	e01c      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e2:	3308      	adds	r3, #8
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f002 fab8 	bl	8008e5c <RCCEx_PLL2_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068f2:	e011      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	3328      	adds	r3, #40	@ 0x28
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f002 fb5f 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006908:	e006      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006910:	e002      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006920:	4b4f      	ldr	r3, [pc, #316]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006924:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692e:	4a4c      	ldr	r2, [pc, #304]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006930:	430b      	orrs	r3, r1
 8006932:	6513      	str	r3, [r2, #80]	@ 0x50
 8006934:	e003      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800693e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800694a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800694e:	2300      	movs	r3, #0
 8006950:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006954:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006958:	460b      	mov	r3, r1
 800695a:	4313      	orrs	r3, r2
 800695c:	d053      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006966:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800696a:	d035      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800696c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006970:	d82e      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006972:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006976:	d031      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006978:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800697c:	d828      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800697e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006982:	d01a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006984:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006988:	d822      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800698e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006992:	d007      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006994:	e01c      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006996:	4b32      	ldr	r3, [pc, #200]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	4a31      	ldr	r2, [pc, #196]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800699c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069a2:	e01c      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a8:	3308      	adds	r3, #8
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f002 fa55 	bl	8008e5c <RCCEx_PLL2_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069b8:	e011      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	3328      	adds	r3, #40	@ 0x28
 80069c0:	2100      	movs	r1, #0
 80069c2:	4618      	mov	r0, r3
 80069c4:	f002 fafc 	bl	8008fc0 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069ce:	e006      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069d6:	e002      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069d8:	bf00      	nop
 80069da:	e000      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80069e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80069fc:	e003      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006a12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a16:	2300      	movs	r3, #0
 8006a18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006a1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006a20:	460b      	mov	r3, r1
 8006a22:	4313      	orrs	r3, r2
 8006a24:	d056      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a32:	d038      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a38:	d831      	bhi.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a3e:	d034      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a44:	d82b      	bhi.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a4a:	d01d      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a50:	d825      	bhi.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d006      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a5a:	d00a      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a5c:	e01f      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a5e:	bf00      	nop
 8006a60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a64:	4ba2      	ldr	r3, [pc, #648]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a68:	4aa1      	ldr	r2, [pc, #644]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a70:	e01c      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	3308      	adds	r3, #8
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f002 f9ee 	bl	8008e5c <RCCEx_PLL2_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a86:	e011      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	3328      	adds	r3, #40	@ 0x28
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f002 fa95 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a9c:	e006      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aa4:	e002      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006aa6:	bf00      	nop
 8006aa8:	e000      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10b      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ac4:	4a8a      	ldr	r2, [pc, #552]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006aca:	e003      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006aea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006aee:	460b      	mov	r3, r1
 8006af0:	4313      	orrs	r3, r2
 8006af2:	d03a      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006afa:	2b30      	cmp	r3, #48	@ 0x30
 8006afc:	d01f      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006afe:	2b30      	cmp	r3, #48	@ 0x30
 8006b00:	d819      	bhi.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d00c      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d815      	bhi.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d019      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	d111      	bne.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b12:	4b77      	ldr	r3, [pc, #476]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	4a76      	ldr	r2, [pc, #472]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b1e:	e011      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b24:	3308      	adds	r3, #8
 8006b26:	2102      	movs	r1, #2
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f002 f997 	bl	8008e5c <RCCEx_PLL2_Config>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b34:	e006      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b3c:	e002      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b3e:	bf00      	nop
 8006b40:	e000      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b4c:	4b68      	ldr	r3, [pc, #416]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b50:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b5a:	4a65      	ldr	r2, [pc, #404]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b60:	e003      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006b76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4313      	orrs	r3, r2
 8006b88:	d051      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b94:	d035      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b9a:	d82e      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ba0:	d031      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006ba2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ba6:	d828      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bac:	d01a      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bb2:	d822      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bbc:	d007      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006bbe:	e01c      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	4a4a      	ldr	r2, [pc, #296]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bcc:	e01c      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f002 f940 	bl	8008e5c <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006be2:	e011      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be8:	3328      	adds	r3, #40	@ 0x28
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f002 f9e7 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bf8:	e006      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c00:	e002      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c02:	bf00      	nop
 8006c04:	e000      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c10:	4b37      	ldr	r3, [pc, #220]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c14:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1e:	4a34      	ldr	r2, [pc, #208]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c20:	430b      	orrs	r3, r1
 8006c22:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c24:	e003      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	d056      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c58:	d033      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c5e:	d82c      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c64:	d02f      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006c66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c6a:	d826      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c70:	d02b      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006c72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c76:	d820      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c7c:	d012      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c82:	d81a      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d022      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c8c:	d115      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c92:	3308      	adds	r3, #8
 8006c94:	2101      	movs	r1, #1
 8006c96:	4618      	mov	r0, r3
 8006c98:	f002 f8e0 	bl	8008e5c <RCCEx_PLL2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ca2:	e015      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca8:	3328      	adds	r3, #40	@ 0x28
 8006caa:	2101      	movs	r1, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f002 f987 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cb8:	e00a      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cc0:	e006      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cc2:	bf00      	nop
 8006cc4:	e004      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cc6:	bf00      	nop
 8006cc8:	e002      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e000      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10d      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006cd8:	4b05      	ldr	r3, [pc, #20]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cdc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ce6:	4a02      	ldr	r2, [pc, #8]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cec:	e006      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006cee:	bf00      	nop
 8006cf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	d055      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d28:	d033      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d2e:	d82c      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d34:	d02f      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3a:	d826      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d40:	d02b      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d46:	d820      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d4c:	d012      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d52:	d81a      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d022      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d5c:	d115      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d62:	3308      	adds	r3, #8
 8006d64:	2101      	movs	r1, #1
 8006d66:	4618      	mov	r0, r3
 8006d68:	f002 f878 	bl	8008e5c <RCCEx_PLL2_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d72:	e015      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	3328      	adds	r3, #40	@ 0x28
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f002 f91f 	bl	8008fc0 <RCCEx_PLL3_Config>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d88:	e00a      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d90:	e006      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d92:	bf00      	nop
 8006d94:	e004      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d96:	bf00      	nop
 8006d98:	e002      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d9a:	bf00      	nop
 8006d9c:	e000      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10b      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006da8:	4ba3      	ldr	r3, [pc, #652]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006db8:	4a9f      	ldr	r2, [pc, #636]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dbe:	e003      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006de2:	460b      	mov	r3, r1
 8006de4:	4313      	orrs	r3, r2
 8006de6:	d037      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df2:	d00e      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df8:	d816      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d018      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e02:	d111      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e04:	4b8c      	ldr	r3, [pc, #560]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e08:	4a8b      	ldr	r2, [pc, #556]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e10:	e00f      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e16:	3308      	adds	r3, #8
 8006e18:	2101      	movs	r1, #1
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f002 f81e 	bl	8008e5c <RCCEx_PLL2_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e26:	e004      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e2e:	e000      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e48:	4a7b      	ldr	r2, [pc, #492]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e4e:	e003      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4313      	orrs	r3, r2
 8006e76:	d039      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d81c      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006e82:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006ec5 	.word	0x08006ec5
 8006e8c:	08006e99 	.word	0x08006e99
 8006e90:	08006ea7 	.word	0x08006ea7
 8006e94:	08006ec5 	.word	0x08006ec5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4b67      	ldr	r3, [pc, #412]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	4a66      	ldr	r2, [pc, #408]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ea4:	e00f      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eaa:	3308      	adds	r3, #8
 8006eac:	2102      	movs	r1, #2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 ffd4 	bl	8008e5c <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006eba:	e004      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ec2:	e000      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ece:	4b5a      	ldr	r3, [pc, #360]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed2:	f023 0103 	bic.w	r1, r3, #3
 8006ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006edc:	4a56      	ldr	r2, [pc, #344]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ee2:	e003      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006efc:	2300      	movs	r3, #0
 8006efe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006f06:	460b      	mov	r3, r1
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f000 809f 	beq.w	800704c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a4a      	ldr	r2, [pc, #296]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f1a:	f7fa fe9b 	bl	8001c54 <HAL_GetTick>
 8006f1e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f22:	e00b      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f24:	f7fa fe96 	bl	8001c54 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b64      	cmp	r3, #100	@ 0x64
 8006f32:	d903      	bls.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f3a:	e005      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0ed      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d179      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f50:	4b39      	ldr	r3, [pc, #228]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f5c:	4053      	eors	r3, r2
 8006f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d015      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f66:	4b34      	ldr	r3, [pc, #208]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f72:	4b31      	ldr	r3, [pc, #196]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f76:	4a30      	ldr	r2, [pc, #192]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f82:	4a2d      	ldr	r2, [pc, #180]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f9e:	d118      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa0:	f7fa fe58 	bl	8001c54 <HAL_GetTick>
 8006fa4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fa8:	e00d      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006faa:	f7fa fe53 	bl	8001c54 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006fb4:	1ad2      	subs	r2, r2, r3
 8006fb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d903      	bls.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006fc4:	e005      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0eb      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d129      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fea:	d10e      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006fec:	4b12      	ldr	r3, [pc, #72]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ffc:	091a      	lsrs	r2, r3, #4
 8006ffe:	4b10      	ldr	r3, [pc, #64]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007000:	4013      	ands	r3, r2
 8007002:	4a0d      	ldr	r2, [pc, #52]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007004:	430b      	orrs	r3, r1
 8007006:	6113      	str	r3, [r2, #16]
 8007008:	e005      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800700a:	4b0b      	ldr	r3, [pc, #44]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	4a0a      	ldr	r2, [pc, #40]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007010:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007014:	6113      	str	r3, [r2, #16]
 8007016:	4b08      	ldr	r3, [pc, #32]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007018:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007026:	4a04      	ldr	r2, [pc, #16]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007028:	430b      	orrs	r3, r1
 800702a:	6713      	str	r3, [r2, #112]	@ 0x70
 800702c:	e00e      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800702e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007036:	e009      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007038:	58024400 	.word	0x58024400
 800703c:	58024800 	.word	0x58024800
 8007040:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800704c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f002 0301 	and.w	r3, r2, #1
 8007058:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800705c:	2300      	movs	r3, #0
 800705e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007062:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	f000 8089 	beq.w	8007180 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800706e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007072:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007074:	2b28      	cmp	r3, #40	@ 0x28
 8007076:	d86b      	bhi.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007078:	a201      	add	r2, pc, #4	@ (adr r2, 8007080 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707e:	bf00      	nop
 8007080:	08007159 	.word	0x08007159
 8007084:	08007151 	.word	0x08007151
 8007088:	08007151 	.word	0x08007151
 800708c:	08007151 	.word	0x08007151
 8007090:	08007151 	.word	0x08007151
 8007094:	08007151 	.word	0x08007151
 8007098:	08007151 	.word	0x08007151
 800709c:	08007151 	.word	0x08007151
 80070a0:	08007125 	.word	0x08007125
 80070a4:	08007151 	.word	0x08007151
 80070a8:	08007151 	.word	0x08007151
 80070ac:	08007151 	.word	0x08007151
 80070b0:	08007151 	.word	0x08007151
 80070b4:	08007151 	.word	0x08007151
 80070b8:	08007151 	.word	0x08007151
 80070bc:	08007151 	.word	0x08007151
 80070c0:	0800713b 	.word	0x0800713b
 80070c4:	08007151 	.word	0x08007151
 80070c8:	08007151 	.word	0x08007151
 80070cc:	08007151 	.word	0x08007151
 80070d0:	08007151 	.word	0x08007151
 80070d4:	08007151 	.word	0x08007151
 80070d8:	08007151 	.word	0x08007151
 80070dc:	08007151 	.word	0x08007151
 80070e0:	08007159 	.word	0x08007159
 80070e4:	08007151 	.word	0x08007151
 80070e8:	08007151 	.word	0x08007151
 80070ec:	08007151 	.word	0x08007151
 80070f0:	08007151 	.word	0x08007151
 80070f4:	08007151 	.word	0x08007151
 80070f8:	08007151 	.word	0x08007151
 80070fc:	08007151 	.word	0x08007151
 8007100:	08007159 	.word	0x08007159
 8007104:	08007151 	.word	0x08007151
 8007108:	08007151 	.word	0x08007151
 800710c:	08007151 	.word	0x08007151
 8007110:	08007151 	.word	0x08007151
 8007114:	08007151 	.word	0x08007151
 8007118:	08007151 	.word	0x08007151
 800711c:	08007151 	.word	0x08007151
 8007120:	08007159 	.word	0x08007159
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007128:	3308      	adds	r3, #8
 800712a:	2101      	movs	r1, #1
 800712c:	4618      	mov	r0, r3
 800712e:	f001 fe95 	bl	8008e5c <RCCEx_PLL2_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007138:	e00f      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713e:	3328      	adds	r3, #40	@ 0x28
 8007140:	2101      	movs	r1, #1
 8007142:	4618      	mov	r0, r3
 8007144:	f001 ff3c 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800714e:	e004      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007156:	e000      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007162:	4bbf      	ldr	r3, [pc, #764]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007166:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007170:	4abb      	ldr	r2, [pc, #748]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007172:	430b      	orrs	r3, r1
 8007174:	6553      	str	r3, [r2, #84]	@ 0x54
 8007176:	e003      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800717c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f002 0302 	and.w	r3, r2, #2
 800718c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007190:	2300      	movs	r3, #0
 8007192:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007196:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d041      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80071a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	d824      	bhi.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80071aa:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071fd 	.word	0x080071fd
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071df 	.word	0x080071df
 80071bc:	080071fd 	.word	0x080071fd
 80071c0:	080071fd 	.word	0x080071fd
 80071c4:	080071fd 	.word	0x080071fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071cc:	3308      	adds	r3, #8
 80071ce:	2101      	movs	r1, #1
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 fe43 	bl	8008e5c <RCCEx_PLL2_Config>
 80071d6:	4603      	mov	r3, r0
 80071d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071dc:	e00f      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e2:	3328      	adds	r3, #40	@ 0x28
 80071e4:	2101      	movs	r1, #1
 80071e6:	4618      	mov	r0, r3
 80071e8:	f001 feea 	bl	8008fc0 <RCCEx_PLL3_Config>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071f2:	e004      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071fa:	e000      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80071fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007206:	4b96      	ldr	r3, [pc, #600]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720a:	f023 0107 	bic.w	r1, r3, #7
 800720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007212:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007214:	4a92      	ldr	r2, [pc, #584]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007216:	430b      	orrs	r3, r1
 8007218:	6553      	str	r3, [r2, #84]	@ 0x54
 800721a:	e003      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f002 0304 	and.w	r3, r2, #4
 8007230:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007234:	2300      	movs	r3, #0
 8007236:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800723a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800723e:	460b      	mov	r3, r1
 8007240:	4313      	orrs	r3, r2
 8007242:	d044      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800724c:	2b05      	cmp	r3, #5
 800724e:	d825      	bhi.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007250:	a201      	add	r2, pc, #4	@ (adr r2, 8007258 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	080072a5 	.word	0x080072a5
 800725c:	08007271 	.word	0x08007271
 8007260:	08007287 	.word	0x08007287
 8007264:	080072a5 	.word	0x080072a5
 8007268:	080072a5 	.word	0x080072a5
 800726c:	080072a5 	.word	0x080072a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	3308      	adds	r3, #8
 8007276:	2101      	movs	r1, #1
 8007278:	4618      	mov	r0, r3
 800727a:	f001 fdef 	bl	8008e5c <RCCEx_PLL2_Config>
 800727e:	4603      	mov	r3, r0
 8007280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007284:	e00f      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728a:	3328      	adds	r3, #40	@ 0x28
 800728c:	2101      	movs	r1, #1
 800728e:	4618      	mov	r0, r3
 8007290:	f001 fe96 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800729a:	e004      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072a2:	e000      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80072a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10b      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072ae:	4b6c      	ldr	r3, [pc, #432]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b2:	f023 0107 	bic.w	r1, r3, #7
 80072b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072be:	4a68      	ldr	r2, [pc, #416]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072c0:	430b      	orrs	r3, r1
 80072c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80072c4:	e003      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	f002 0320 	and.w	r3, r2, #32
 80072da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072de:	2300      	movs	r3, #0
 80072e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80072e8:	460b      	mov	r3, r1
 80072ea:	4313      	orrs	r3, r2
 80072ec:	d055      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80072ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072fa:	d033      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80072fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007300:	d82c      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007306:	d02f      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730c:	d826      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800730e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007312:	d02b      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007314:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007318:	d820      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800731a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800731e:	d012      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007324:	d81a      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d022      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800732a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800732e:	d115      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007334:	3308      	adds	r3, #8
 8007336:	2100      	movs	r1, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f001 fd8f 	bl	8008e5c <RCCEx_PLL2_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007344:	e015      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	3328      	adds	r3, #40	@ 0x28
 800734c:	2102      	movs	r1, #2
 800734e:	4618      	mov	r0, r3
 8007350:	f001 fe36 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800735a:	e00a      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007362:	e006      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007364:	bf00      	nop
 8007366:	e004      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007368:	bf00      	nop
 800736a:	e002      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10b      	bne.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800737a:	4b39      	ldr	r3, [pc, #228]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800737c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738a:	4a35      	ldr	r2, [pc, #212]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800738c:	430b      	orrs	r3, r1
 800738e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007390:	e003      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80073a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073aa:	2300      	movs	r3, #0
 80073ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4313      	orrs	r3, r2
 80073b8:	d058      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80073c6:	d033      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80073c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80073cc:	d82c      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d2:	d02f      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80073d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d8:	d826      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073de:	d02b      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80073e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073e4:	d820      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073ea:	d012      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80073ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073f0:	d81a      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d022      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80073f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fa:	d115      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	3308      	adds	r3, #8
 8007402:	2100      	movs	r1, #0
 8007404:	4618      	mov	r0, r3
 8007406:	f001 fd29 	bl	8008e5c <RCCEx_PLL2_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007410:	e015      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007416:	3328      	adds	r3, #40	@ 0x28
 8007418:	2102      	movs	r1, #2
 800741a:	4618      	mov	r0, r3
 800741c:	f001 fdd0 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007426:	e00a      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800742e:	e006      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007430:	bf00      	nop
 8007432:	e004      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007434:	bf00      	nop
 8007436:	e002      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007438:	bf00      	nop
 800743a:	e000      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800743c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10e      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007446:	4b06      	ldr	r3, [pc, #24]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800744a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007456:	4a02      	ldr	r2, [pc, #8]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007458:	430b      	orrs	r3, r1
 800745a:	6593      	str	r3, [r2, #88]	@ 0x58
 800745c:	e006      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800745e:	bf00      	nop
 8007460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007478:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800747c:	2300      	movs	r3, #0
 800747e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007482:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007486:	460b      	mov	r3, r1
 8007488:	4313      	orrs	r3, r2
 800748a:	d055      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007490:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007494:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007498:	d033      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800749a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800749e:	d82c      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074a4:	d02f      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80074a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074aa:	d826      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80074b0:	d02b      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80074b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80074b6:	d820      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074bc:	d012      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80074be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074c2:	d81a      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d022      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80074c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074cc:	d115      	bne.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d2:	3308      	adds	r3, #8
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fcc0 	bl	8008e5c <RCCEx_PLL2_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074e2:	e015      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e8:	3328      	adds	r3, #40	@ 0x28
 80074ea:	2102      	movs	r1, #2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 fd67 	bl	8008fc0 <RCCEx_PLL3_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074f8:	e00a      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007500:	e006      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007502:	bf00      	nop
 8007504:	e004      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007506:	bf00      	nop
 8007508:	e002      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800750e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10b      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007518:	4ba1      	ldr	r3, [pc, #644]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800751a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800751c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007528:	4a9d      	ldr	r2, [pc, #628]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800752a:	430b      	orrs	r3, r1
 800752c:	6593      	str	r3, [r2, #88]	@ 0x58
 800752e:	e003      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	f002 0308 	and.w	r3, r2, #8
 8007544:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007548:	2300      	movs	r3, #0
 800754a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800754e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007552:	460b      	mov	r3, r1
 8007554:	4313      	orrs	r3, r2
 8007556:	d01e      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007564:	d10c      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756a:	3328      	adds	r3, #40	@ 0x28
 800756c:	2102      	movs	r1, #2
 800756e:	4618      	mov	r0, r3
 8007570:	f001 fd26 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007580:	4b87      	ldr	r3, [pc, #540]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007584:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007590:	4a83      	ldr	r2, [pc, #524]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007592:	430b      	orrs	r3, r1
 8007594:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f002 0310 	and.w	r3, r2, #16
 80075a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075a6:	2300      	movs	r3, #0
 80075a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80075b0:	460b      	mov	r3, r1
 80075b2:	4313      	orrs	r3, r2
 80075b4:	d01e      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075c2:	d10c      	bne.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c8:	3328      	adds	r3, #40	@ 0x28
 80075ca:	2102      	movs	r1, #2
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 fcf7 	bl	8008fc0 <RCCEx_PLL3_Config>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075de:	4b70      	ldr	r3, [pc, #448]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075ee:	4a6c      	ldr	r2, [pc, #432]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007600:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800760a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800760e:	460b      	mov	r3, r1
 8007610:	4313      	orrs	r3, r2
 8007612:	d03e      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800761c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007620:	d022      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007626:	d81b      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007630:	d00b      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007632:	e015      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007638:	3308      	adds	r3, #8
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fc0d 	bl	8008e5c <RCCEx_PLL2_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007648:	e00f      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764e:	3328      	adds	r3, #40	@ 0x28
 8007650:	2102      	movs	r1, #2
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fcb4 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800765e:	e004      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007666:	e000      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10b      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007672:	4b4b      	ldr	r3, [pc, #300]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007676:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800767a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007682:	4a47      	ldr	r2, [pc, #284]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007684:	430b      	orrs	r3, r1
 8007686:	6593      	str	r3, [r2, #88]	@ 0x58
 8007688:	e003      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800768e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800769e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076a0:	2300      	movs	r3, #0
 80076a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80076a8:	460b      	mov	r3, r1
 80076aa:	4313      	orrs	r3, r2
 80076ac:	d03b      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076ba:	d01f      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80076bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076c0:	d818      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80076c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076c6:	d003      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80076c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076cc:	d007      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80076ce:	e011      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4b33      	ldr	r3, [pc, #204]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	4a32      	ldr	r2, [pc, #200]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80076dc:	e00f      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e2:	3328      	adds	r3, #40	@ 0x28
 80076e4:	2101      	movs	r1, #1
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 fc6a 	bl	8008fc0 <RCCEx_PLL3_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80076f2:	e004      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076fa:	e000      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80076fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10b      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007706:	4b26      	ldr	r3, [pc, #152]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800770a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800770e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007716:	4a22      	ldr	r2, [pc, #136]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007718:	430b      	orrs	r3, r1
 800771a:	6553      	str	r3, [r2, #84]	@ 0x54
 800771c:	e003      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007732:	673b      	str	r3, [r7, #112]	@ 0x70
 8007734:	2300      	movs	r3, #0
 8007736:	677b      	str	r3, [r7, #116]	@ 0x74
 8007738:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800773c:	460b      	mov	r3, r1
 800773e:	4313      	orrs	r3, r2
 8007740:	d034      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800774c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007750:	d007      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007752:	e011      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007754:	4b12      	ldr	r3, [pc, #72]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	4a11      	ldr	r2, [pc, #68]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800775a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800775e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007760:	e00e      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007766:	3308      	adds	r3, #8
 8007768:	2102      	movs	r1, #2
 800776a:	4618      	mov	r0, r3
 800776c:	f001 fb76 	bl	8008e5c <RCCEx_PLL2_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007776:	e003      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800777e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10d      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007788:	4b05      	ldr	r3, [pc, #20]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800778a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800778c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007796:	4a02      	ldr	r2, [pc, #8]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007798:	430b      	orrs	r3, r1
 800779a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800779c:	e006      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800779e:	bf00      	nop
 80077a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80077b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077ba:	2300      	movs	r3, #0
 80077bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80077c2:	460b      	mov	r3, r1
 80077c4:	4313      	orrs	r3, r2
 80077c6:	d00c      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077cc:	3328      	adds	r3, #40	@ 0x28
 80077ce:	2102      	movs	r1, #2
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 fbf5 	bl	8008fc0 <RCCEx_PLL3_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80077ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80077f0:	2300      	movs	r3, #0
 80077f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80077f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80077f8:	460b      	mov	r3, r1
 80077fa:	4313      	orrs	r3, r2
 80077fc:	d038      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800780a:	d018      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800780c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007810:	d811      	bhi.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007816:	d014      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800781c:	d80b      	bhi.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007826:	d106      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007828:	4bc3      	ldr	r3, [pc, #780]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800782a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782c:	4ac2      	ldr	r2, [pc, #776]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800782e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007834:	e008      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800783c:	e004      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800783e:	bf00      	nop
 8007840:	e002      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007842:	bf00      	nop
 8007844:	e000      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10b      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007850:	4bb9      	ldr	r3, [pc, #740]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007854:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007860:	4ab5      	ldr	r2, [pc, #724]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007862:	430b      	orrs	r3, r1
 8007864:	6553      	str	r3, [r2, #84]	@ 0x54
 8007866:	e003      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800786c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800787c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800787e:	2300      	movs	r3, #0
 8007880:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007882:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007886:	460b      	mov	r3, r1
 8007888:	4313      	orrs	r3, r2
 800788a:	d009      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800788c:	4baa      	ldr	r3, [pc, #680]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800788e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007890:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800789a:	4aa7      	ldr	r2, [pc, #668]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800789c:	430b      	orrs	r3, r1
 800789e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80078ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80078ae:	2300      	movs	r3, #0
 80078b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80078b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80078b6:	460b      	mov	r3, r1
 80078b8:	4313      	orrs	r3, r2
 80078ba:	d00a      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80078bc:	4b9e      	ldr	r3, [pc, #632]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80078c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80078cc:	4a9a      	ldr	r2, [pc, #616]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ce:	430b      	orrs	r3, r1
 80078d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80078de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078e0:	2300      	movs	r3, #0
 80078e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80078e8:	460b      	mov	r3, r1
 80078ea:	4313      	orrs	r3, r2
 80078ec:	d009      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078ee:	4b92      	ldr	r3, [pc, #584]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078fc:	4a8e      	ldr	r2, [pc, #568]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078fe:	430b      	orrs	r3, r1
 8007900:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800790e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007910:	2300      	movs	r3, #0
 8007912:	647b      	str	r3, [r7, #68]	@ 0x44
 8007914:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007918:	460b      	mov	r3, r1
 800791a:	4313      	orrs	r3, r2
 800791c:	d00e      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800791e:	4b86      	ldr	r3, [pc, #536]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	4a85      	ldr	r2, [pc, #532]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007924:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007928:	6113      	str	r3, [r2, #16]
 800792a:	4b83      	ldr	r3, [pc, #524]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800792c:	6919      	ldr	r1, [r3, #16]
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007932:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007936:	4a80      	ldr	r2, [pc, #512]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007938:	430b      	orrs	r3, r1
 800793a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007948:	63bb      	str	r3, [r7, #56]	@ 0x38
 800794a:	2300      	movs	r3, #0
 800794c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800794e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007952:	460b      	mov	r3, r1
 8007954:	4313      	orrs	r3, r2
 8007956:	d009      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007958:	4b77      	ldr	r3, [pc, #476]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800795a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800795c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007966:	4a74      	ldr	r2, [pc, #464]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007968:	430b      	orrs	r3, r1
 800796a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007978:	633b      	str	r3, [r7, #48]	@ 0x30
 800797a:	2300      	movs	r3, #0
 800797c:	637b      	str	r3, [r7, #52]	@ 0x34
 800797e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007982:	460b      	mov	r3, r1
 8007984:	4313      	orrs	r3, r2
 8007986:	d00a      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007988:	4b6b      	ldr	r3, [pc, #428]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800798a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800798c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007998:	4a67      	ldr	r2, [pc, #412]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800799a:	430b      	orrs	r3, r1
 800799c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	2100      	movs	r1, #0
 80079a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80079b4:	460b      	mov	r3, r1
 80079b6:	4313      	orrs	r3, r2
 80079b8:	d011      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079be:	3308      	adds	r3, #8
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 fa4a 	bl	8008e5c <RCCEx_PLL2_Config>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80079ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80079de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	2100      	movs	r1, #0
 80079e8:	6239      	str	r1, [r7, #32]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80079f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80079f4:	460b      	mov	r3, r1
 80079f6:	4313      	orrs	r3, r2
 80079f8:	d011      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fe:	3308      	adds	r3, #8
 8007a00:	2101      	movs	r1, #1
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 fa2a 	bl	8008e5c <RCCEx_PLL2_Config>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	2100      	movs	r1, #0
 8007a28:	61b9      	str	r1, [r7, #24]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a34:	460b      	mov	r3, r1
 8007a36:	4313      	orrs	r3, r2
 8007a38:	d011      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3e:	3308      	adds	r3, #8
 8007a40:	2102      	movs	r1, #2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f001 fa0a 	bl	8008e5c <RCCEx_PLL2_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	2100      	movs	r1, #0
 8007a68:	6139      	str	r1, [r7, #16]
 8007a6a:	f003 0308 	and.w	r3, r3, #8
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a74:	460b      	mov	r3, r1
 8007a76:	4313      	orrs	r3, r2
 8007a78:	d011      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	3328      	adds	r3, #40	@ 0x28
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 fa9c 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	f003 0310 	and.w	r3, r3, #16
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	d011      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abe:	3328      	adds	r3, #40	@ 0x28
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 fa7c 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	607b      	str	r3, [r7, #4]
 8007af0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007af4:	460b      	mov	r3, r1
 8007af6:	4313      	orrs	r3, r2
 8007af8:	d011      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afe:	3328      	adds	r3, #40	@ 0x28
 8007b00:	2102      	movs	r1, #2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f001 fa5c 	bl	8008fc0 <RCCEx_PLL3_Config>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007b1e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	e000      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007b32:	46bd      	mov	sp, r7
 8007b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b38:	58024400 	.word	0x58024400

08007b3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b090      	sub	sp, #64	@ 0x40
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b4a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	f040 8094 	bne.w	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007b54:	4b9e      	ldr	r3, [pc, #632]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	f200 8087 	bhi.w	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007b66:	a201      	add	r2, pc, #4	@ (adr r2, 8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007b81 	.word	0x08007b81
 8007b70:	08007ba9 	.word	0x08007ba9
 8007b74:	08007bd1 	.word	0x08007bd1
 8007b78:	08007c6d 	.word	0x08007c6d
 8007b7c:	08007bf9 	.word	0x08007bf9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b80:	4b93      	ldr	r3, [pc, #588]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b8c:	d108      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b92:	4618      	mov	r0, r3
 8007b94:	f001 f810 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b9c:	f000 bd45 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba4:	f000 bd41 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ba8:	4b89      	ldr	r3, [pc, #548]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bb4:	d108      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bb6:	f107 0318 	add.w	r3, r7, #24
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fd54 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bc4:	f000 bd31 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bcc:	f000 bd2d 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bdc:	d108      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bde:	f107 030c 	add.w	r3, r7, #12
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 fe94 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bec:	f000 bd1d 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bf4:	f000 bd19 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bf8:	4b75      	ldr	r3, [pc, #468]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c00:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c02:	4b73      	ldr	r3, [pc, #460]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d10c      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c14:	4b6e      	ldr	r3, [pc, #440]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	08db      	lsrs	r3, r3, #3
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	4a6d      	ldr	r2, [pc, #436]	@ (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c20:	fa22 f303 	lsr.w	r3, r2, r3
 8007c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c26:	e01f      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c28:	4b69      	ldr	r3, [pc, #420]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c34:	d106      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c3c:	d102      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c3e:	4b66      	ldr	r3, [pc, #408]	@ (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c42:	e011      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c44:	4b62      	ldr	r3, [pc, #392]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c50:	d106      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c58:	d102      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c5a:	4b60      	ldr	r3, [pc, #384]	@ (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c5e:	e003      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c64:	f000 bce1 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c68:	f000 bcdf 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c70:	f000 bcdb 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c78:	f000 bcd7 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c80:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007c84:	430b      	orrs	r3, r1
 8007c86:	f040 80ad 	bne.w	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007c8a:	4b51      	ldr	r3, [pc, #324]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c8e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007c92:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c9a:	d056      	beq.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca2:	f200 8090 	bhi.w	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	2bc0      	cmp	r3, #192	@ 0xc0
 8007caa:	f000 8088 	beq.w	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb0:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cb2:	f200 8088 	bhi.w	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb8:	2b80      	cmp	r3, #128	@ 0x80
 8007cba:	d032      	beq.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	2b80      	cmp	r3, #128	@ 0x80
 8007cc0:	f200 8081 	bhi.w	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	2b40      	cmp	r3, #64	@ 0x40
 8007cce:	d014      	beq.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007cd0:	e079      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cde:	d108      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 ff67 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cee:	f000 bc9c 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf6:	f000 bc98 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cfa:	4b35      	ldr	r3, [pc, #212]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d06:	d108      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d08:	f107 0318 	add.w	r3, r7, #24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fcab 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d16:	f000 bc88 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1e:	f000 bc84 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d22:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d2e:	d108      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d30:	f107 030c 	add.w	r3, r7, #12
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 fdeb 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d3e:	f000 bc74 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d46:	f000 bc70 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d4a:	4b21      	ldr	r3, [pc, #132]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d54:	4b1e      	ldr	r3, [pc, #120]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d10c      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d66:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	08db      	lsrs	r3, r3, #3
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	4a18      	ldr	r2, [pc, #96]	@ (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d72:	fa22 f303 	lsr.w	r3, r2, r3
 8007d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d78:	e01f      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d7a:	4b15      	ldr	r3, [pc, #84]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d86:	d106      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d8e:	d102      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d90:	4b11      	ldr	r3, [pc, #68]	@ (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d94:	e011      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d96:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007da2:	d106      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007daa:	d102      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007dac:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007db0:	e003      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007db6:	f000 bc38 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dba:	f000 bc36 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dbe:	4b08      	ldr	r3, [pc, #32]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc2:	f000 bc32 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dca:	f000 bc2e 	b.w	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dce:	bf00      	nop
 8007dd0:	58024400 	.word	0x58024400
 8007dd4:	03d09000 	.word	0x03d09000
 8007dd8:	003d0900 	.word	0x003d0900
 8007ddc:	007a1200 	.word	0x007a1200
 8007de0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007dec:	430b      	orrs	r3, r1
 8007dee:	f040 809c 	bne.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007df2:	4b9e      	ldr	r3, [pc, #632]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007df6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007dfa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e02:	d054      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e0a:	f200 808b 	bhi.w	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e14:	f000 8083 	beq.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e1e:	f200 8081 	bhi.w	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e28:	d02f      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e30:	d878      	bhi.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e3e:	d012      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007e40:	e070      	b.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e42:	4b8a      	ldr	r3, [pc, #552]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 feaf 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e5e:	e3e4      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e64:	e3e1      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e66:	4b81      	ldr	r3, [pc, #516]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e72:	d107      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e74:	f107 0318 	add.w	r3, r7, #24
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fbf5 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e82:	e3d2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e88:	e3cf      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e8a:	4b78      	ldr	r3, [pc, #480]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e96:	d107      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e98:	f107 030c 	add.w	r3, r7, #12
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fd37 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea6:	e3c0      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eac:	e3bd      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eae:	4b6f      	ldr	r3, [pc, #444]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d10c      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d109      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eca:	4b68      	ldr	r3, [pc, #416]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	08db      	lsrs	r3, r3, #3
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	4a66      	ldr	r2, [pc, #408]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007edc:	e01e      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ede:	4b63      	ldr	r3, [pc, #396]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eea:	d106      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ef2:	d102      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ef8:	e010      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007efa:	4b5c      	ldr	r3, [pc, #368]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f06:	d106      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f0e:	d102      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f10:	4b59      	ldr	r3, [pc, #356]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f14:	e002      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f1a:	e386      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f1c:	e385      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f1e:	4b57      	ldr	r3, [pc, #348]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f22:	e382      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f28:	e37f      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f2e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007f32:	430b      	orrs	r3, r1
 8007f34:	f040 80a7 	bne.w	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007f38:	4b4c      	ldr	r3, [pc, #304]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f3c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007f40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f48:	d055      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f50:	f200 8096 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f5a:	f000 8084 	beq.w	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f64:	f200 808c 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f6e:	d030      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f76:	f200 8083 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f86:	d012      	beq.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007f88:	e07a      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f8a:	4b38      	ldr	r3, [pc, #224]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fe0b 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa6:	e340      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fac:	e33d      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fae:	4b2f      	ldr	r3, [pc, #188]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fba:	d107      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fbc:	f107 0318 	add.w	r3, r7, #24
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fb51 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fca:	e32e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd0:	e32b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fd2:	4b26      	ldr	r3, [pc, #152]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fde:	d107      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe0:	f107 030c 	add.w	r3, r7, #12
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fc93 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fee:	e31c      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff4:	e319      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ffa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ffe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008000:	4b1a      	ldr	r3, [pc, #104]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b04      	cmp	r3, #4
 800800a:	d10c      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800800c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800e:	2b00      	cmp	r3, #0
 8008010:	d109      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008012:	4b16      	ldr	r3, [pc, #88]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	08db      	lsrs	r3, r3, #3
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	4a14      	ldr	r2, [pc, #80]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800801e:	fa22 f303 	lsr.w	r3, r2, r3
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008024:	e01e      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008026:	4b11      	ldr	r3, [pc, #68]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800802e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008032:	d106      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800803a:	d102      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800803c:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008040:	e010      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008042:	4b0a      	ldr	r3, [pc, #40]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800804a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800804e:	d106      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008056:	d102      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008058:	4b07      	ldr	r3, [pc, #28]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800805c:	e002      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008062:	e2e2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008064:	e2e1      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008066:	4b05      	ldr	r3, [pc, #20]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800806a:	e2de      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800806c:	58024400 	.word	0x58024400
 8008070:	03d09000 	.word	0x03d09000
 8008074:	003d0900 	.word	0x003d0900
 8008078:	007a1200 	.word	0x007a1200
 800807c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008084:	e2d1      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800808a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800808e:	430b      	orrs	r3, r1
 8008090:	f040 809c 	bne.w	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008094:	4b93      	ldr	r3, [pc, #588]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008098:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800809c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800809e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080a4:	d054      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80080a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080ac:	f200 808b 	bhi.w	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080b6:	f000 8083 	beq.w	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080c0:	f200 8081 	bhi.w	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ca:	d02f      	beq.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080d2:	d878      	bhi.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e0:	d012      	beq.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80080e2:	e070      	b.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080e4:	4b7f      	ldr	r3, [pc, #508]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080f0:	d107      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fd5e 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008100:	e293      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008106:	e290      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008108:	4b76      	ldr	r3, [pc, #472]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008114:	d107      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008116:	f107 0318 	add.w	r3, r7, #24
 800811a:	4618      	mov	r0, r3
 800811c:	f000 faa4 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008124:	e281      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812a:	e27e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800812c:	4b6d      	ldr	r3, [pc, #436]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008138:	d107      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800813a:	f107 030c 	add.w	r3, r7, #12
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fbe6 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008148:	e26f      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814e:	e26c      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008150:	4b64      	ldr	r3, [pc, #400]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008154:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008158:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800815a:	4b62      	ldr	r3, [pc, #392]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b04      	cmp	r3, #4
 8008164:	d10c      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008168:	2b00      	cmp	r3, #0
 800816a:	d109      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800816c:	4b5d      	ldr	r3, [pc, #372]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	08db      	lsrs	r3, r3, #3
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	4a5c      	ldr	r2, [pc, #368]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
 800817c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800817e:	e01e      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008180:	4b58      	ldr	r3, [pc, #352]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800818c:	d106      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800818e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008194:	d102      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008196:	4b55      	ldr	r3, [pc, #340]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800819a:	e010      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800819c:	4b51      	ldr	r3, [pc, #324]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081a8:	d106      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80081aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081b0:	d102      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081b2:	4b4f      	ldr	r3, [pc, #316]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80081b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081b6:	e002      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081bc:	e235      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081be:	e234      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081c0:	4b4c      	ldr	r3, [pc, #304]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80081c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c4:	e231      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ca:	e22e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80081cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80081d4:	430b      	orrs	r3, r1
 80081d6:	f040 808f 	bne.w	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80081da:	4b42      	ldr	r3, [pc, #264]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081de:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80081e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081ea:	d06b      	beq.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80081ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081f2:	d874      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80081f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081fa:	d056      	beq.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80081fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008202:	d86c      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008206:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800820a:	d03b      	beq.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008212:	d864      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800821a:	d021      	beq.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800821c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008222:	d85c      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	2b00      	cmp	r3, #0
 8008228:	d004      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800822a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008230:	d004      	beq.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008232:	e054      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008234:	f7fe fa0a 	bl	800664c <HAL_RCC_GetPCLK1Freq>
 8008238:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800823a:	e1f6      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800823c:	4b29      	ldr	r3, [pc, #164]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008244:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008248:	d107      	bne.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800824a:	f107 0318 	add.w	r3, r7, #24
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fa0a 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008258:	e1e7      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800825e:	e1e4      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008260:	4b20      	ldr	r3, [pc, #128]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800826c:	d107      	bne.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800826e:	f107 030c 	add.w	r3, r7, #12
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fb4c 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800827c:	e1d5      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008282:	e1d2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008284:	4b17      	ldr	r3, [pc, #92]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b04      	cmp	r3, #4
 800828e:	d109      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008290:	4b14      	ldr	r3, [pc, #80]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	08db      	lsrs	r3, r3, #3
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	4a13      	ldr	r2, [pc, #76]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800829c:	fa22 f303 	lsr.w	r3, r2, r3
 80082a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a2:	e1c2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a8:	e1bf      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80082aa:	4b0e      	ldr	r3, [pc, #56]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b6:	d102      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80082b8:	4b0c      	ldr	r3, [pc, #48]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082bc:	e1b5      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c2:	e1b2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082c4:	4b07      	ldr	r3, [pc, #28]	@ (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082d0:	d102      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80082d2:	4b07      	ldr	r3, [pc, #28]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80082d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d6:	e1a8      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082dc:	e1a5      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e2:	e1a2      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082e4:	58024400 	.word	0x58024400
 80082e8:	03d09000 	.word	0x03d09000
 80082ec:	003d0900 	.word	0x003d0900
 80082f0:	007a1200 	.word	0x007a1200
 80082f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008300:	430b      	orrs	r3, r1
 8008302:	d173      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008304:	4b9c      	ldr	r3, [pc, #624]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800830c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800830e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008310:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008314:	d02f      	beq.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800831c:	d863      	bhi.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800832a:	d012      	beq.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800832c:	e05b      	b.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800832e:	4b92      	ldr	r3, [pc, #584]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800833a:	d107      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800833c:	f107 0318 	add.w	r3, r7, #24
 8008340:	4618      	mov	r0, r3
 8008342:	f000 f991 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800834a:	e16e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008350:	e16b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008352:	4b89      	ldr	r3, [pc, #548]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800835a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800835e:	d107      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008360:	f107 030c 	add.w	r3, r7, #12
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fad3 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800836e:	e15c      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008374:	e159      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008376:	4b80      	ldr	r3, [pc, #512]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800837a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800837e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008380:	4b7d      	ldr	r3, [pc, #500]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b04      	cmp	r3, #4
 800838a:	d10c      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838e:	2b00      	cmp	r3, #0
 8008390:	d109      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008392:	4b79      	ldr	r3, [pc, #484]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	08db      	lsrs	r3, r3, #3
 8008398:	f003 0303 	and.w	r3, r3, #3
 800839c:	4a77      	ldr	r2, [pc, #476]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800839e:	fa22 f303 	lsr.w	r3, r2, r3
 80083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083a4:	e01e      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083a6:	4b74      	ldr	r3, [pc, #464]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b2:	d106      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80083b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083ba:	d102      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083bc:	4b70      	ldr	r3, [pc, #448]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80083be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083c0:	e010      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083c2:	4b6d      	ldr	r3, [pc, #436]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ce:	d106      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80083d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083d6:	d102      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083d8:	4b6a      	ldr	r3, [pc, #424]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083dc:	e002      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80083e2:	e122      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083e4:	e121      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ea:	e11e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80083f4:	430b      	orrs	r3, r1
 80083f6:	d133      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80083f8:	4b5f      	ldr	r3, [pc, #380]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008400:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800840e:	d012      	beq.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008410:	e023      	b.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008412:	4b59      	ldr	r3, [pc, #356]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800841a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800841e:	d107      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fbc7 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800842e:	e0fc      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008434:	e0f9      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008436:	4b50      	ldr	r3, [pc, #320]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800843e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008442:	d107      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008444:	f107 0318 	add.w	r3, r7, #24
 8008448:	4618      	mov	r0, r3
 800844a:	f000 f90d 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008452:	e0ea      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008458:	e0e7      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800845e:	e0e4      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008464:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008468:	430b      	orrs	r3, r1
 800846a:	f040 808d 	bne.w	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800846e:	4b42      	ldr	r3, [pc, #264]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008472:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008476:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800847e:	d06b      	beq.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008486:	d874      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800848e:	d056      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008496:	d86c      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800849e:	d03b      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084a6:	d864      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ae:	d021      	beq.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80084b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b6:	d85c      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80084be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084c4:	d004      	beq.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80084c6:	e054      	b.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80084c8:	f000 f8b8 	bl	800863c <HAL_RCCEx_GetD3PCLK1Freq>
 80084cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084ce:	e0ac      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084d0:	4b29      	ldr	r3, [pc, #164]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084dc:	d107      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084de:	f107 0318 	add.w	r3, r7, #24
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f8c0 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ec:	e09d      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f2:	e09a      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084f4:	4b20      	ldr	r3, [pc, #128]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008500:	d107      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008502:	f107 030c 	add.w	r3, r7, #12
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fa02 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008510:	e08b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008516:	e088      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008518:	4b17      	ldr	r3, [pc, #92]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b04      	cmp	r3, #4
 8008522:	d109      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008524:	4b14      	ldr	r3, [pc, #80]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	08db      	lsrs	r3, r3, #3
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	4a13      	ldr	r2, [pc, #76]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008530:	fa22 f303 	lsr.w	r3, r2, r3
 8008534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008536:	e078      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853c:	e075      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800853e:	4b0e      	ldr	r3, [pc, #56]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800854a:	d102      	bne.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800854c:	4b0c      	ldr	r3, [pc, #48]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800854e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008550:	e06b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008556:	e068      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008558:	4b07      	ldr	r3, [pc, #28]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008560:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008564:	d102      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008566:	4b07      	ldr	r3, [pc, #28]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800856a:	e05e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008570:	e05b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008576:	e058      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008578:	58024400 	.word	0x58024400
 800857c:	03d09000 	.word	0x03d09000
 8008580:	003d0900 	.word	0x003d0900
 8008584:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800858c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008590:	430b      	orrs	r3, r1
 8008592:	d148      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008594:	4b27      	ldr	r3, [pc, #156]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008598:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800859c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800859e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a4:	d02a      	beq.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ac:	d838      	bhi.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80085ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80085b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ba:	d00d      	beq.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80085bc:	e030      	b.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085be:	4b1d      	ldr	r3, [pc, #116]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085ca:	d102      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80085cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d0:	e02b      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d6:	e028      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085d8:	4b16      	ldr	r3, [pc, #88]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085e4:	d107      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fae4 	bl	8008bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f4:	e019      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fa:	e016      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008604:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008608:	d107      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800860a:	f107 0318 	add.w	r3, r7, #24
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f82a 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008618:	e007      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800861e:	e004      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008624:	e001      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800862a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800862c:	4618      	mov	r0, r3
 800862e:	3740      	adds	r7, #64	@ 0x40
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	58024400 	.word	0x58024400
 8008638:	007a1200 	.word	0x007a1200

0800863c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008640:	f7fd ffd4 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 8008644:	4602      	mov	r2, r0
 8008646:	4b06      	ldr	r3, [pc, #24]	@ (8008660 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	091b      	lsrs	r3, r3, #4
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	4904      	ldr	r1, [pc, #16]	@ (8008664 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008652:	5ccb      	ldrb	r3, [r1, r3]
 8008654:	f003 031f 	and.w	r3, r3, #31
 8008658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800865c:	4618      	mov	r0, r3
 800865e:	bd80      	pop	{r7, pc}
 8008660:	58024400 	.word	0x58024400
 8008664:	080126f8 	.word	0x080126f8

08008668 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008668:	b480      	push	{r7}
 800866a:	b089      	sub	sp, #36	@ 0x24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008670:	4ba1      	ldr	r3, [pc, #644]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008674:	f003 0303 	and.w	r3, r3, #3
 8008678:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800867a:	4b9f      	ldr	r3, [pc, #636]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800867c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867e:	0b1b      	lsrs	r3, r3, #12
 8008680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008684:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008686:	4b9c      	ldr	r3, [pc, #624]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868a:	091b      	lsrs	r3, r3, #4
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008692:	4b99      	ldr	r3, [pc, #612]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008696:	08db      	lsrs	r3, r3, #3
 8008698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	fb02 f303 	mul.w	r3, r2, r3
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 8111 	beq.w	80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	f000 8083 	beq.w	80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	f200 80a1 	bhi.w	8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d056      	beq.n	8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086d2:	e099      	b.n	8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086d4:	4b88      	ldr	r3, [pc, #544]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d02d      	beq.n	800873c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086e0:	4b85      	ldr	r3, [pc, #532]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	08db      	lsrs	r3, r3, #3
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	4a84      	ldr	r2, [pc, #528]	@ (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086ec:	fa22 f303 	lsr.w	r3, r2, r3
 80086f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800870a:	4b7b      	ldr	r3, [pc, #492]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800870c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008712:	ee07 3a90 	vmov	s15, r3
 8008716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800871a:	ed97 6a03 	vldr	s12, [r7, #12]
 800871e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800872a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800872e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008736:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800873a:	e087      	b.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008746:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800874a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800874e:	4b6a      	ldr	r3, [pc, #424]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008762:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800876e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800877e:	e065      	b.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	ee07 3a90 	vmov	s15, r3
 8008786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800878e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008792:	4b59      	ldr	r3, [pc, #356]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879a:	ee07 3a90 	vmov	s15, r3
 800879e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087c2:	e043      	b.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800890c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087d6:	4b48      	ldr	r3, [pc, #288]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008806:	e021      	b.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	ee07 3a90 	vmov	s15, r3
 800880e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008812:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881a:	4b37      	ldr	r3, [pc, #220]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800881c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800881e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882a:	ed97 6a03 	vldr	s12, [r7, #12]
 800882e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800883e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800884a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800884c:	4b2a      	ldr	r3, [pc, #168]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800884e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008850:	0a5b      	lsrs	r3, r3, #9
 8008852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008866:	edd7 6a07 	vldr	s13, [r7, #28]
 800886a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800886e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008872:	ee17 2a90 	vmov	r2, s15
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800887a:	4b1f      	ldr	r3, [pc, #124]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800887c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008884:	ee07 3a90 	vmov	s15, r3
 8008888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008890:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008894:	edd7 6a07 	vldr	s13, [r7, #28]
 8008898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800889c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a0:	ee17 2a90 	vmov	r2, s15
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80088a8:	4b13      	ldr	r3, [pc, #76]	@ (80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ac:	0e1b      	lsrs	r3, r3, #24
 80088ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80088c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ce:	ee17 2a90 	vmov	r2, s15
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088d6:	e008      	b.n	80088ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	609a      	str	r2, [r3, #8]
}
 80088ea:	bf00      	nop
 80088ec:	3724      	adds	r7, #36	@ 0x24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	58024400 	.word	0x58024400
 80088fc:	03d09000 	.word	0x03d09000
 8008900:	46000000 	.word	0x46000000
 8008904:	4c742400 	.word	0x4c742400
 8008908:	4a742400 	.word	0x4a742400
 800890c:	4af42400 	.word	0x4af42400

08008910 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008910:	b480      	push	{r7}
 8008912:	b089      	sub	sp, #36	@ 0x24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008918:	4ba1      	ldr	r3, [pc, #644]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800891a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008922:	4b9f      	ldr	r3, [pc, #636]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008926:	0d1b      	lsrs	r3, r3, #20
 8008928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800892c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800892e:	4b9c      	ldr	r3, [pc, #624]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800893a:	4b99      	ldr	r3, [pc, #612]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800893c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893e:	08db      	lsrs	r3, r3, #3
 8008940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	fb02 f303 	mul.w	r3, r2, r3
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8111 	beq.w	8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	2b02      	cmp	r3, #2
 8008962:	f000 8083 	beq.w	8008a6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	2b02      	cmp	r3, #2
 800896a:	f200 80a1 	bhi.w	8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d056      	beq.n	8008a28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800897a:	e099      	b.n	8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800897c:	4b88      	ldr	r3, [pc, #544]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0320 	and.w	r3, r3, #32
 8008984:	2b00      	cmp	r3, #0
 8008986:	d02d      	beq.n	80089e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008988:	4b85      	ldr	r3, [pc, #532]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	08db      	lsrs	r3, r3, #3
 800898e:	f003 0303 	and.w	r3, r3, #3
 8008992:	4a84      	ldr	r2, [pc, #528]	@ (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008994:	fa22 f303 	lsr.w	r3, r2, r3
 8008998:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089b2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089e2:	e087      	b.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089f6:	4b6a      	ldr	r3, [pc, #424]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a26:	e065      	b.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3a:	4b59      	ldr	r3, [pc, #356]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a6a:	e043      	b.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a7e:	4b48      	ldr	r3, [pc, #288]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aae:	e021      	b.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac2:	4b37      	ldr	r3, [pc, #220]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ad6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008af2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008af4:	4b2a      	ldr	r3, [pc, #168]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af8:	0a5b      	lsrs	r3, r3, #9
 8008afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b1a:	ee17 2a90 	vmov	r2, s15
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008b22:	4b1f      	ldr	r3, [pc, #124]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b2c:	ee07 3a90 	vmov	s15, r3
 8008b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b48:	ee17 2a90 	vmov	r2, s15
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b50:	4b13      	ldr	r3, [pc, #76]	@ (8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b54:	0e1b      	lsrs	r3, r3, #24
 8008b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b76:	ee17 2a90 	vmov	r2, s15
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b7e:	e008      	b.n	8008b92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	609a      	str	r2, [r3, #8]
}
 8008b92:	bf00      	nop
 8008b94:	3724      	adds	r7, #36	@ 0x24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	58024400 	.word	0x58024400
 8008ba4:	03d09000 	.word	0x03d09000
 8008ba8:	46000000 	.word	0x46000000
 8008bac:	4c742400 	.word	0x4c742400
 8008bb0:	4a742400 	.word	0x4a742400
 8008bb4:	4af42400 	.word	0x4af42400

08008bb8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b089      	sub	sp, #36	@ 0x24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bc0:	4ba0      	ldr	r3, [pc, #640]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008bca:	4b9e      	ldr	r3, [pc, #632]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bce:	091b      	lsrs	r3, r3, #4
 8008bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bd4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008bd6:	4b9b      	ldr	r3, [pc, #620]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008be0:	4b98      	ldr	r3, [pc, #608]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be4:	08db      	lsrs	r3, r3, #3
 8008be6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	fb02 f303 	mul.w	r3, r2, r3
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 8111 	beq.w	8008e26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	f000 8083 	beq.w	8008d12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	f200 80a1 	bhi.w	8008d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d056      	beq.n	8008cce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008c20:	e099      	b.n	8008d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c22:	4b88      	ldr	r3, [pc, #544]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d02d      	beq.n	8008c8a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c2e:	4b85      	ldr	r3, [pc, #532]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	08db      	lsrs	r3, r3, #3
 8008c34:	f003 0303 	and.w	r3, r3, #3
 8008c38:	4a83      	ldr	r2, [pc, #524]	@ (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	ee07 3a90 	vmov	s15, r3
 8008c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c58:	4b7a      	ldr	r3, [pc, #488]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c60:	ee07 3a90 	vmov	s15, r3
 8008c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c6c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c84:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c88:	e087      	b.n	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c94:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008e50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9c:	4b69      	ldr	r3, [pc, #420]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca4:	ee07 3a90 	vmov	s15, r3
 8008ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ccc:	e065      	b.n	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	ee07 3a90 	vmov	s15, r3
 8008cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008e54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce0:	4b58      	ldr	r3, [pc, #352]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce8:	ee07 3a90 	vmov	s15, r3
 8008cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d10:	e043      	b.n	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d24:	4b47      	ldr	r3, [pc, #284]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2c:	ee07 3a90 	vmov	s15, r3
 8008d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d34:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d38:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d54:	e021      	b.n	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	ee07 3a90 	vmov	s15, r3
 8008d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d60:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008e50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d68:	4b36      	ldr	r3, [pc, #216]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d70:	ee07 3a90 	vmov	s15, r3
 8008d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d78:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9e:	0a5b      	lsrs	r3, r3, #9
 8008da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da4:	ee07 3a90 	vmov	s15, r3
 8008da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc0:	ee17 2a90 	vmov	r2, s15
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dcc:	0c1b      	lsrs	r3, r3, #16
 8008dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dee:	ee17 2a90 	vmov	r2, s15
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008df6:	4b13      	ldr	r3, [pc, #76]	@ (8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfa:	0e1b      	lsrs	r3, r3, #24
 8008dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e00:	ee07 3a90 	vmov	s15, r3
 8008e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1c:	ee17 2a90 	vmov	r2, s15
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e24:	e008      	b.n	8008e38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	609a      	str	r2, [r3, #8]
}
 8008e38:	bf00      	nop
 8008e3a:	3724      	adds	r7, #36	@ 0x24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	58024400 	.word	0x58024400
 8008e48:	03d09000 	.word	0x03d09000
 8008e4c:	46000000 	.word	0x46000000
 8008e50:	4c742400 	.word	0x4c742400
 8008e54:	4a742400 	.word	0x4a742400
 8008e58:	4af42400 	.word	0x4af42400

08008e5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e6a:	4b53      	ldr	r3, [pc, #332]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d101      	bne.n	8008e7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e099      	b.n	8008fae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a4e      	ldr	r2, [pc, #312]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008e80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e86:	f7f8 fee5 	bl	8001c54 <HAL_GetTick>
 8008e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e8c:	e008      	b.n	8008ea0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e8e:	f7f8 fee1 	bl	8001c54 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d901      	bls.n	8008ea0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e086      	b.n	8008fae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ea0:	4b45      	ldr	r3, [pc, #276]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f0      	bne.n	8008e8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008eac:	4b42      	ldr	r3, [pc, #264]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	031b      	lsls	r3, r3, #12
 8008eba:	493f      	ldr	r1, [pc, #252]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	025b      	lsls	r3, r3, #9
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	041b      	lsls	r3, r3, #16
 8008ede:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	061b      	lsls	r3, r3, #24
 8008eec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ef0:	4931      	ldr	r1, [pc, #196]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ef6:	4b30      	ldr	r3, [pc, #192]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	492d      	ldr	r1, [pc, #180]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f08:	4b2b      	ldr	r3, [pc, #172]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0c:	f023 0220 	bic.w	r2, r3, #32
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	4928      	ldr	r1, [pc, #160]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f1a:	4b27      	ldr	r3, [pc, #156]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1e:	4a26      	ldr	r2, [pc, #152]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f20:	f023 0310 	bic.w	r3, r3, #16
 8008f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f26:	4b24      	ldr	r3, [pc, #144]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f2a:	4b24      	ldr	r3, [pc, #144]	@ (8008fbc <RCCEx_PLL2_Config+0x160>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	69d2      	ldr	r2, [r2, #28]
 8008f32:	00d2      	lsls	r2, r2, #3
 8008f34:	4920      	ldr	r1, [pc, #128]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f40:	f043 0310 	orr.w	r3, r3, #16
 8008f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d106      	bne.n	8008f5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f50:	4a19      	ldr	r2, [pc, #100]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f58:	e00f      	b.n	8008f7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d106      	bne.n	8008f6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f60:	4b15      	ldr	r3, [pc, #84]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f64:	4a14      	ldr	r2, [pc, #80]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f6c:	e005      	b.n	8008f7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f6e:	4b12      	ldr	r3, [pc, #72]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f72:	4a11      	ldr	r2, [pc, #68]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008f80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f86:	f7f8 fe65 	bl	8001c54 <HAL_GetTick>
 8008f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f8c:	e008      	b.n	8008fa0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f8e:	f7f8 fe61 	bl	8001c54 <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d901      	bls.n	8008fa0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e006      	b.n	8008fae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fa0:	4b05      	ldr	r3, [pc, #20]	@ (8008fb8 <RCCEx_PLL2_Config+0x15c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0f0      	beq.n	8008f8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	ffff0007 	.word	0xffff0007

08008fc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fce:	4b53      	ldr	r3, [pc, #332]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd2:	f003 0303 	and.w	r3, r3, #3
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d101      	bne.n	8008fde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e099      	b.n	8009112 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fde:	4b4f      	ldr	r3, [pc, #316]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a4e      	ldr	r2, [pc, #312]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8008fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fea:	f7f8 fe33 	bl	8001c54 <HAL_GetTick>
 8008fee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ff0:	e008      	b.n	8009004 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ff2:	f7f8 fe2f 	bl	8001c54 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e086      	b.n	8009112 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009004:	4b45      	ldr	r3, [pc, #276]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1f0      	bne.n	8008ff2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009010:	4b42      	ldr	r3, [pc, #264]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009014:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	051b      	lsls	r3, r3, #20
 800901e:	493f      	ldr	r1, [pc, #252]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009020:	4313      	orrs	r3, r2
 8009022:	628b      	str	r3, [r1, #40]	@ 0x28
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	3b01      	subs	r3, #1
 800902a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	3b01      	subs	r3, #1
 8009034:	025b      	lsls	r3, r3, #9
 8009036:	b29b      	uxth	r3, r3
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	3b01      	subs	r3, #1
 8009040:	041b      	lsls	r3, r3, #16
 8009042:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009046:	431a      	orrs	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	3b01      	subs	r3, #1
 800904e:	061b      	lsls	r3, r3, #24
 8009050:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009054:	4931      	ldr	r1, [pc, #196]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009056:	4313      	orrs	r3, r2
 8009058:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800905a:	4b30      	ldr	r3, [pc, #192]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 800905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	492d      	ldr	r1, [pc, #180]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009068:	4313      	orrs	r3, r2
 800906a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800906c:	4b2b      	ldr	r3, [pc, #172]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 800906e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009070:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	4928      	ldr	r1, [pc, #160]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 800907a:	4313      	orrs	r3, r2
 800907c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800907e:	4b27      	ldr	r3, [pc, #156]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009082:	4a26      	ldr	r2, [pc, #152]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009088:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800908a:	4b24      	ldr	r3, [pc, #144]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 800908c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800908e:	4b24      	ldr	r3, [pc, #144]	@ (8009120 <RCCEx_PLL3_Config+0x160>)
 8009090:	4013      	ands	r3, r2
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	69d2      	ldr	r2, [r2, #28]
 8009096:	00d2      	lsls	r2, r2, #3
 8009098:	4920      	ldr	r1, [pc, #128]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 800909a:	4313      	orrs	r3, r2
 800909c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800909e:	4b1f      	ldr	r3, [pc, #124]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a2:	4a1e      	ldr	r2, [pc, #120]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d106      	bne.n	80090be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090b0:	4b1a      	ldr	r3, [pc, #104]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b4:	4a19      	ldr	r2, [pc, #100]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80090ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090bc:	e00f      	b.n	80090de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d106      	bne.n	80090d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090c4:	4b15      	ldr	r3, [pc, #84]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c8:	4a14      	ldr	r2, [pc, #80]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80090ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090d0:	e005      	b.n	80090de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090d2:	4b12      	ldr	r3, [pc, #72]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d6:	4a11      	ldr	r2, [pc, #68]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090de:	4b0f      	ldr	r3, [pc, #60]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a0e      	ldr	r2, [pc, #56]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 80090e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ea:	f7f8 fdb3 	bl	8001c54 <HAL_GetTick>
 80090ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090f0:	e008      	b.n	8009104 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090f2:	f7f8 fdaf 	bl	8001c54 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d901      	bls.n	8009104 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e006      	b.n	8009112 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009104:	4b05      	ldr	r3, [pc, #20]	@ (800911c <RCCEx_PLL3_Config+0x15c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0f0      	beq.n	80090f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	58024400 	.word	0x58024400
 8009120:	ffff0007 	.word	0xffff0007

08009124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e049      	b.n	80091ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f841 	bl	80091d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3304      	adds	r3, #4
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f000 f9e8 	bl	8009538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b083      	sub	sp, #12
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
	...

080091e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d001      	beq.n	8009200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e054      	b.n	80092aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2202      	movs	r2, #2
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0201 	orr.w	r2, r2, #1
 8009216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a26      	ldr	r2, [pc, #152]	@ (80092b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d022      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0x80>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800922a:	d01d      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0x80>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a22      	ldr	r2, [pc, #136]	@ (80092bc <HAL_TIM_Base_Start_IT+0xd4>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d018      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0x80>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a21      	ldr	r2, [pc, #132]	@ (80092c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d013      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0x80>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a1f      	ldr	r2, [pc, #124]	@ (80092c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00e      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0x80>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a1e      	ldr	r2, [pc, #120]	@ (80092c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d009      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0x80>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a1c      	ldr	r2, [pc, #112]	@ (80092cc <HAL_TIM_Base_Start_IT+0xe4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d004      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0x80>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a1b      	ldr	r2, [pc, #108]	@ (80092d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d115      	bne.n	8009294 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689a      	ldr	r2, [r3, #8]
 800926e:	4b19      	ldr	r3, [pc, #100]	@ (80092d4 <HAL_TIM_Base_Start_IT+0xec>)
 8009270:	4013      	ands	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b06      	cmp	r3, #6
 8009278:	d015      	beq.n	80092a6 <HAL_TIM_Base_Start_IT+0xbe>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009280:	d011      	beq.n	80092a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0201 	orr.w	r2, r2, #1
 8009290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009292:	e008      	b.n	80092a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0201 	orr.w	r2, r2, #1
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	e000      	b.n	80092a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	40010000 	.word	0x40010000
 80092bc:	40000400 	.word	0x40000400
 80092c0:	40000800 	.word	0x40000800
 80092c4:	40000c00 	.word	0x40000c00
 80092c8:	40010400 	.word	0x40010400
 80092cc:	40001800 	.word	0x40001800
 80092d0:	40014000 	.word	0x40014000
 80092d4:	00010007 	.word	0x00010007

080092d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d020      	beq.n	800933c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01b      	beq.n	800933c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f06f 0202 	mvn.w	r2, #2
 800930c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	f003 0303 	and.w	r3, r3, #3
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f8e9 	bl	80094fa <HAL_TIM_IC_CaptureCallback>
 8009328:	e005      	b.n	8009336 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f8db 	bl	80094e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f8ec 	bl	800950e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f003 0304 	and.w	r3, r3, #4
 8009342:	2b00      	cmp	r3, #0
 8009344:	d020      	beq.n	8009388 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d01b      	beq.n	8009388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f06f 0204 	mvn.w	r2, #4
 8009358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2202      	movs	r2, #2
 800935e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f8c3 	bl	80094fa <HAL_TIM_IC_CaptureCallback>
 8009374:	e005      	b.n	8009382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f8b5 	bl	80094e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f8c6 	bl	800950e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b00      	cmp	r3, #0
 8009390:	d020      	beq.n	80093d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f003 0308 	and.w	r3, r3, #8
 8009398:	2b00      	cmp	r3, #0
 800939a:	d01b      	beq.n	80093d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f06f 0208 	mvn.w	r2, #8
 80093a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2204      	movs	r2, #4
 80093aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	f003 0303 	and.w	r3, r3, #3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f89d 	bl	80094fa <HAL_TIM_IC_CaptureCallback>
 80093c0:	e005      	b.n	80093ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f88f 	bl	80094e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f8a0 	bl	800950e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f003 0310 	and.w	r3, r3, #16
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d020      	beq.n	8009420 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f003 0310 	and.w	r3, r3, #16
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01b      	beq.n	8009420 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f06f 0210 	mvn.w	r2, #16
 80093f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2208      	movs	r2, #8
 80093f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f877 	bl	80094fa <HAL_TIM_IC_CaptureCallback>
 800940c:	e005      	b.n	800941a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f869 	bl	80094e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f87a 	bl	800950e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00c      	beq.n	8009444 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	d007      	beq.n	8009444 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f06f 0201 	mvn.w	r2, #1
 800943c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7f7 fca6 	bl	8000d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800944a:	2b00      	cmp	r3, #0
 800944c:	d104      	bne.n	8009458 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00c      	beq.n	8009472 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800946a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f913 	bl	8009698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00c      	beq.n	8009496 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009482:	2b00      	cmp	r3, #0
 8009484:	d007      	beq.n	8009496 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800948e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f90b 	bl	80096ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00c      	beq.n	80094ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f834 	bl	8009522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f003 0320 	and.w	r3, r3, #32
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00c      	beq.n	80094de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d007      	beq.n	80094de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f06f 0220 	mvn.w	r2, #32
 80094d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f8d3 	bl	8009684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094de:	bf00      	nop
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009502:	bf00      	nop
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800950e:	b480      	push	{r7}
 8009510:	b083      	sub	sp, #12
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009516:	bf00      	nop
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800952a:	bf00      	nop
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
	...

08009538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a46      	ldr	r2, [pc, #280]	@ (8009664 <TIM_Base_SetConfig+0x12c>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d013      	beq.n	8009578 <TIM_Base_SetConfig+0x40>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009556:	d00f      	beq.n	8009578 <TIM_Base_SetConfig+0x40>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a43      	ldr	r2, [pc, #268]	@ (8009668 <TIM_Base_SetConfig+0x130>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00b      	beq.n	8009578 <TIM_Base_SetConfig+0x40>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a42      	ldr	r2, [pc, #264]	@ (800966c <TIM_Base_SetConfig+0x134>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d007      	beq.n	8009578 <TIM_Base_SetConfig+0x40>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a41      	ldr	r2, [pc, #260]	@ (8009670 <TIM_Base_SetConfig+0x138>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d003      	beq.n	8009578 <TIM_Base_SetConfig+0x40>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a40      	ldr	r2, [pc, #256]	@ (8009674 <TIM_Base_SetConfig+0x13c>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d108      	bne.n	800958a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800957e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	4313      	orrs	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a35      	ldr	r2, [pc, #212]	@ (8009664 <TIM_Base_SetConfig+0x12c>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d01f      	beq.n	80095d2 <TIM_Base_SetConfig+0x9a>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009598:	d01b      	beq.n	80095d2 <TIM_Base_SetConfig+0x9a>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a32      	ldr	r2, [pc, #200]	@ (8009668 <TIM_Base_SetConfig+0x130>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d017      	beq.n	80095d2 <TIM_Base_SetConfig+0x9a>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a31      	ldr	r2, [pc, #196]	@ (800966c <TIM_Base_SetConfig+0x134>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d013      	beq.n	80095d2 <TIM_Base_SetConfig+0x9a>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a30      	ldr	r2, [pc, #192]	@ (8009670 <TIM_Base_SetConfig+0x138>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00f      	beq.n	80095d2 <TIM_Base_SetConfig+0x9a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a2f      	ldr	r2, [pc, #188]	@ (8009674 <TIM_Base_SetConfig+0x13c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00b      	beq.n	80095d2 <TIM_Base_SetConfig+0x9a>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a2e      	ldr	r2, [pc, #184]	@ (8009678 <TIM_Base_SetConfig+0x140>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d007      	beq.n	80095d2 <TIM_Base_SetConfig+0x9a>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a2d      	ldr	r2, [pc, #180]	@ (800967c <TIM_Base_SetConfig+0x144>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d003      	beq.n	80095d2 <TIM_Base_SetConfig+0x9a>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009680 <TIM_Base_SetConfig+0x148>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d108      	bne.n	80095e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a16      	ldr	r2, [pc, #88]	@ (8009664 <TIM_Base_SetConfig+0x12c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d00f      	beq.n	8009630 <TIM_Base_SetConfig+0xf8>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a18      	ldr	r2, [pc, #96]	@ (8009674 <TIM_Base_SetConfig+0x13c>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d00b      	beq.n	8009630 <TIM_Base_SetConfig+0xf8>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a17      	ldr	r2, [pc, #92]	@ (8009678 <TIM_Base_SetConfig+0x140>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d007      	beq.n	8009630 <TIM_Base_SetConfig+0xf8>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a16      	ldr	r2, [pc, #88]	@ (800967c <TIM_Base_SetConfig+0x144>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d003      	beq.n	8009630 <TIM_Base_SetConfig+0xf8>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a15      	ldr	r2, [pc, #84]	@ (8009680 <TIM_Base_SetConfig+0x148>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d103      	bne.n	8009638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	691a      	ldr	r2, [r3, #16]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b01      	cmp	r3, #1
 8009648:	d105      	bne.n	8009656 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f023 0201 	bic.w	r2, r3, #1
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	611a      	str	r2, [r3, #16]
  }
}
 8009656:	bf00      	nop
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	40010000 	.word	0x40010000
 8009668:	40000400 	.word	0x40000400
 800966c:	40000800 	.word	0x40000800
 8009670:	40000c00 	.word	0x40000c00
 8009674:	40010400 	.word	0x40010400
 8009678:	40014000 	.word	0x40014000
 800967c:	40014400 	.word	0x40014400
 8009680:	40014800 	.word	0x40014800

08009684 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e042      	b.n	8009758 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d106      	bne.n	80096ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7f7 fe9f 	bl	8001428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2224      	movs	r2, #36	@ 0x24
 80096ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0201 	bic.w	r2, r2, #1
 8009700:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 fb66 	bl	800addc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fdfb 	bl	800a30c <UART_SetConfig>
 8009716:	4603      	mov	r3, r0
 8009718:	2b01      	cmp	r3, #1
 800971a:	d101      	bne.n	8009720 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e01b      	b.n	8009758 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800972e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689a      	ldr	r2, [r3, #8]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800973e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0201 	orr.w	r2, r2, #1
 800974e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 fbe5 	bl	800af20 <UART_CheckIdleState>
 8009756:	4603      	mov	r3, r0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b08a      	sub	sp, #40	@ 0x28
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	4613      	mov	r3, r2
 800976c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009774:	2b20      	cmp	r3, #32
 8009776:	d167      	bne.n	8009848 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <HAL_UART_Transmit_DMA+0x24>
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e060      	b.n	800984a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	88fa      	ldrh	r2, [r7, #6]
 8009792:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	88fa      	ldrh	r2, [r7, #6]
 800979a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2221      	movs	r2, #33	@ 0x21
 80097aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d028      	beq.n	8009808 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097ba:	4a26      	ldr	r2, [pc, #152]	@ (8009854 <HAL_UART_Transmit_DMA+0xf4>)
 80097bc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097c2:	4a25      	ldr	r2, [pc, #148]	@ (8009858 <HAL_UART_Transmit_DMA+0xf8>)
 80097c4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097ca:	4a24      	ldr	r2, [pc, #144]	@ (800985c <HAL_UART_Transmit_DMA+0xfc>)
 80097cc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097d2:	2200      	movs	r2, #0
 80097d4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097de:	4619      	mov	r1, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3328      	adds	r3, #40	@ 0x28
 80097e6:	461a      	mov	r2, r3
 80097e8:	88fb      	ldrh	r3, [r7, #6]
 80097ea:	f7fa f9a1 	bl	8003b30 <HAL_DMA_Start_IT>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d009      	beq.n	8009808 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2210      	movs	r2, #16
 80097f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2220      	movs	r2, #32
 8009800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e020      	b.n	800984a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2240      	movs	r2, #64	@ 0x40
 800980e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3308      	adds	r3, #8
 8009816:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	e853 3f00 	ldrex	r3, [r3]
 800981e:	613b      	str	r3, [r7, #16]
   return(result);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009826:	627b      	str	r3, [r7, #36]	@ 0x24
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3308      	adds	r3, #8
 800982e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009830:	623a      	str	r2, [r7, #32]
 8009832:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009834:	69f9      	ldr	r1, [r7, #28]
 8009836:	6a3a      	ldr	r2, [r7, #32]
 8009838:	e841 2300 	strex	r3, r2, [r1]
 800983c:	61bb      	str	r3, [r7, #24]
   return(result);
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1e5      	bne.n	8009810 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	e000      	b.n	800984a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009848:	2302      	movs	r3, #2
  }
}
 800984a:	4618      	mov	r0, r3
 800984c:	3728      	adds	r7, #40	@ 0x28
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	0800b3ed 	.word	0x0800b3ed
 8009858:	0800b483 	.word	0x0800b483
 800985c:	0800b605 	.word	0x0800b605

08009860 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08a      	sub	sp, #40	@ 0x28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009874:	2b20      	cmp	r3, #32
 8009876:	d137      	bne.n	80098e8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d002      	beq.n	8009884 <HAL_UART_Receive_DMA+0x24>
 800987e:	88fb      	ldrh	r3, [r7, #6]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e030      	b.n	80098ea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a18      	ldr	r2, [pc, #96]	@ (80098f4 <HAL_UART_Receive_DMA+0x94>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d01f      	beq.n	80098d8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d018      	beq.n	80098d8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	e853 3f00 	ldrex	r3, [r3]
 80098b2:	613b      	str	r3, [r7, #16]
   return(result);
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	461a      	mov	r2, r3
 80098c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c4:	623b      	str	r3, [r7, #32]
 80098c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	69f9      	ldr	r1, [r7, #28]
 80098ca:	6a3a      	ldr	r2, [r7, #32]
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e6      	bne.n	80098a6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80098d8:	88fb      	ldrh	r3, [r7, #6]
 80098da:	461a      	mov	r2, r3
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f001 fc36 	bl	800b150 <UART_Start_Receive_DMA>
 80098e4:	4603      	mov	r3, r0
 80098e6:	e000      	b.n	80098ea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80098e8:	2302      	movs	r3, #2
  }
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3728      	adds	r7, #40	@ 0x28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	58000c00 	.word	0x58000c00

080098f8 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b09d      	sub	sp, #116	@ 0x74
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009906:	66fb      	str	r3, [r7, #108]	@ 0x6c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800990e:	66bb      	str	r3, [r7, #104]	@ 0x68

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800991a:	2b80      	cmp	r3, #128	@ 0x80
 800991c:	d11c      	bne.n	8009958 <HAL_UART_DMAPause+0x60>
 800991e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009920:	2b21      	cmp	r3, #33	@ 0x21
 8009922:	d119      	bne.n	8009958 <HAL_UART_DMAPause+0x60>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3308      	adds	r3, #8
 800992a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800992e:	e853 3f00 	ldrex	r3, [r3]
 8009932:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800993a:	667b      	str	r3, [r7, #100]	@ 0x64
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3308      	adds	r3, #8
 8009942:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009944:	657a      	str	r2, [r7, #84]	@ 0x54
 8009946:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009948:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800994a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800994c:	e841 2300 	strex	r3, r2, [r1]
 8009950:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1e5      	bne.n	8009924 <HAL_UART_DMAPause+0x2c>
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009962:	2b40      	cmp	r3, #64	@ 0x40
 8009964:	d14f      	bne.n	8009a06 <HAL_UART_DMAPause+0x10e>
 8009966:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009968:	2b22      	cmp	r3, #34	@ 0x22
 800996a:	d14c      	bne.n	8009a06 <HAL_UART_DMAPause+0x10e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009974:	e853 3f00 	ldrex	r3, [r3]
 8009978:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009980:	663b      	str	r3, [r7, #96]	@ 0x60
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800998a:	643b      	str	r3, [r7, #64]	@ 0x40
 800998c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009990:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009992:	e841 2300 	strex	r3, r2, [r1]
 8009996:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e6      	bne.n	800996c <HAL_UART_DMAPause+0x74>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3308      	adds	r3, #8
 80099a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	f023 0301 	bic.w	r3, r3, #1
 80099b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80099be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e5      	bne.n	800999e <HAL_UART_DMAPause+0xa6>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099f2:	61ba      	str	r2, [r7, #24]
 80099f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	6979      	ldr	r1, [r7, #20]
 80099f8:	69ba      	ldr	r2, [r7, #24]
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e5      	bne.n	80099d2 <HAL_UART_DMAPause+0xda>
  }

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3774      	adds	r7, #116	@ 0x74
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b09b      	sub	sp, #108	@ 0x6c
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a22:	2b21      	cmp	r3, #33	@ 0x21
 8009a24:	d119      	bne.n	8009a5a <HAL_UART_DMAResume+0x46>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a30:	e853 3f00 	ldrex	r3, [r3]
 8009a34:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3308      	adds	r3, #8
 8009a44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a46:	657a      	str	r2, [r7, #84]	@ 0x54
 8009a48:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e5      	bne.n	8009a26 <HAL_UART_DMAResume+0x12>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a60:	2b22      	cmp	r3, #34	@ 0x22
 8009a62:	d154      	bne.n	8009b0e <HAL_UART_DMAResume+0xfa>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2208      	movs	r2, #8
 8009a6a:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d018      	beq.n	8009aa6 <HAL_UART_DMAResume+0x92>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7c:	e853 3f00 	ldrex	r3, [r3]
 8009a80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a88:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a92:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a94:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a9a:	e841 2300 	strex	r3, r2, [r1]
 8009a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1e6      	bne.n	8009a74 <HAL_UART_DMAResume+0x60>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3308      	adds	r3, #8
 8009aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	f043 0301 	orr.w	r3, r3, #1
 8009abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ace:	e841 2300 	strex	r3, r2, [r1]
 8009ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e5      	bne.n	8009aa6 <HAL_UART_DMAResume+0x92>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3308      	adds	r3, #8
 8009ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009af0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3308      	adds	r3, #8
 8009af8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009afa:	61ba      	str	r2, [r7, #24]
 8009afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	6979      	ldr	r1, [r7, #20]
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	e841 2300 	strex	r3, r2, [r1]
 8009b06:	613b      	str	r3, [r7, #16]
   return(result);
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e5      	bne.n	8009ada <HAL_UART_DMAResume+0xc6>
  }

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	376c      	adds	r7, #108	@ 0x6c
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b0ba      	sub	sp, #232	@ 0xe8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009b46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009b50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d11b      	bne.n	8009b90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b5c:	f003 0320 	and.w	r3, r3, #32
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d015      	beq.n	8009b90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b68:	f003 0320 	and.w	r3, r3, #32
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d105      	bne.n	8009b7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d009      	beq.n	8009b90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 8377 	beq.w	800a274 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	4798      	blx	r3
      }
      return;
 8009b8e:	e371      	b.n	800a274 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 8123 	beq.w	8009de0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8009dd4 <HAL_UART_IRQHandler+0x2b8>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d106      	bne.n	8009bb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ba6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009baa:	4b8b      	ldr	r3, [pc, #556]	@ (8009dd8 <HAL_UART_IRQHandler+0x2bc>)
 8009bac:	4013      	ands	r3, r2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 8116 	beq.w	8009de0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d011      	beq.n	8009be4 <HAL_UART_IRQHandler+0xc8>
 8009bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00b      	beq.n	8009be4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bda:	f043 0201 	orr.w	r2, r3, #1
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be8:	f003 0302 	and.w	r3, r3, #2
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d011      	beq.n	8009c14 <HAL_UART_IRQHandler+0xf8>
 8009bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bf4:	f003 0301 	and.w	r3, r3, #1
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2202      	movs	r2, #2
 8009c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c0a:	f043 0204 	orr.w	r2, r3, #4
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d011      	beq.n	8009c44 <HAL_UART_IRQHandler+0x128>
 8009c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c24:	f003 0301 	and.w	r3, r3, #1
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00b      	beq.n	8009c44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2204      	movs	r2, #4
 8009c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c3a:	f043 0202 	orr.w	r2, r3, #2
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c48:	f003 0308 	and.w	r3, r3, #8
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d017      	beq.n	8009c80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d105      	bne.n	8009c68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c60:	4b5c      	ldr	r3, [pc, #368]	@ (8009dd4 <HAL_UART_IRQHandler+0x2b8>)
 8009c62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00b      	beq.n	8009c80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2208      	movs	r2, #8
 8009c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c76:	f043 0208 	orr.w	r2, r3, #8
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d012      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x196>
 8009c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00c      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca8:	f043 0220 	orr.w	r2, r3, #32
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 82dd 	beq.w	800a278 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cc2:	f003 0320 	and.w	r3, r3, #32
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d013      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d105      	bne.n	8009ce2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d06:	2b40      	cmp	r3, #64	@ 0x40
 8009d08:	d005      	beq.n	8009d16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d054      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f001 fb02 	bl	800b320 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d26:	2b40      	cmp	r3, #64	@ 0x40
 8009d28:	d146      	bne.n	8009db8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3308      	adds	r3, #8
 8009d30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3308      	adds	r3, #8
 8009d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1d9      	bne.n	8009d2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d017      	beq.n	8009db0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d86:	4a15      	ldr	r2, [pc, #84]	@ (8009ddc <HAL_UART_IRQHandler+0x2c0>)
 8009d88:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fa fc55 	bl	8004640 <HAL_DMA_Abort_IT>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d019      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009daa:	4610      	mov	r0, r2
 8009dac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dae:	e00f      	b.n	8009dd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fa95 	bl	800a2e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db6:	e00b      	b.n	8009dd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fa91 	bl	800a2e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dbe:	e007      	b.n	8009dd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fa8d 	bl	800a2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009dce:	e253      	b.n	800a278 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd0:	bf00      	nop
    return;
 8009dd2:	e251      	b.n	800a278 <HAL_UART_IRQHandler+0x75c>
 8009dd4:	10000001 	.word	0x10000001
 8009dd8:	04000120 	.word	0x04000120
 8009ddc:	0800b685 	.word	0x0800b685

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	f040 81e7 	bne.w	800a1b8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dee:	f003 0310 	and.w	r3, r3, #16
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 81e0 	beq.w	800a1b8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dfc:	f003 0310 	and.w	r3, r3, #16
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 81d9 	beq.w	800a1b8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2210      	movs	r2, #16
 8009e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e18:	2b40      	cmp	r3, #64	@ 0x40
 8009e1a:	f040 8151 	bne.w	800a0c0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a96      	ldr	r2, [pc, #600]	@ (800a080 <HAL_UART_IRQHandler+0x564>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d068      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a93      	ldr	r2, [pc, #588]	@ (800a084 <HAL_UART_IRQHandler+0x568>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d061      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a91      	ldr	r2, [pc, #580]	@ (800a088 <HAL_UART_IRQHandler+0x56c>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d05a      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a8e      	ldr	r2, [pc, #568]	@ (800a08c <HAL_UART_IRQHandler+0x570>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d053      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a8c      	ldr	r2, [pc, #560]	@ (800a090 <HAL_UART_IRQHandler+0x574>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d04c      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a89      	ldr	r2, [pc, #548]	@ (800a094 <HAL_UART_IRQHandler+0x578>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d045      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a87      	ldr	r2, [pc, #540]	@ (800a098 <HAL_UART_IRQHandler+0x57c>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d03e      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a84      	ldr	r2, [pc, #528]	@ (800a09c <HAL_UART_IRQHandler+0x580>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d037      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a82      	ldr	r2, [pc, #520]	@ (800a0a0 <HAL_UART_IRQHandler+0x584>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d030      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a7f      	ldr	r2, [pc, #508]	@ (800a0a4 <HAL_UART_IRQHandler+0x588>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d029      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a7d      	ldr	r2, [pc, #500]	@ (800a0a8 <HAL_UART_IRQHandler+0x58c>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d022      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a7a      	ldr	r2, [pc, #488]	@ (800a0ac <HAL_UART_IRQHandler+0x590>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d01b      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a78      	ldr	r2, [pc, #480]	@ (800a0b0 <HAL_UART_IRQHandler+0x594>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d014      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a75      	ldr	r2, [pc, #468]	@ (800a0b4 <HAL_UART_IRQHandler+0x598>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d00d      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a73      	ldr	r2, [pc, #460]	@ (800a0b8 <HAL_UART_IRQHandler+0x59c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d006      	beq.n	8009efe <HAL_UART_IRQHandler+0x3e2>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a70      	ldr	r2, [pc, #448]	@ (800a0bc <HAL_UART_IRQHandler+0x5a0>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d106      	bne.n	8009f0c <HAL_UART_IRQHandler+0x3f0>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	e005      	b.n	8009f18 <HAL_UART_IRQHandler+0x3fc>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 81ab 	beq.w	800a27c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f30:	429a      	cmp	r2, r3
 8009f32:	f080 81a3 	bcs.w	800a27c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f4c:	f000 8087 	beq.w	800a05e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	461a      	mov	r2, r3
 8009f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f8a:	e841 2300 	strex	r3, r2, [r1]
 8009f8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1da      	bne.n	8009f50 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fac:	f023 0301 	bic.w	r3, r3, #1
 8009fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3308      	adds	r3, #8
 8009fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009fbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009fc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009fca:	e841 2300 	strex	r3, r2, [r1]
 8009fce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e1      	bne.n	8009f9a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3308      	adds	r3, #8
 8009fdc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ffa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a000:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e3      	bne.n	8009fd6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a024:	e853 3f00 	ldrex	r3, [r3]
 800a028:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a02a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a02c:	f023 0310 	bic.w	r3, r3, #16
 800a030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	461a      	mov	r2, r3
 800a03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a03e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a040:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a042:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a044:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a046:	e841 2300 	strex	r3, r2, [r1]
 800a04a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1e4      	bne.n	800a01c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a058:	4618      	mov	r0, r3
 800a05a:	f7f9 ffd3 	bl	8004004 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2202      	movs	r2, #2
 800a062:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a070:	b29b      	uxth	r3, r3
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	b29b      	uxth	r3, r3
 800a076:	4619      	mov	r1, r3
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f93b 	bl	800a2f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a07e:	e0fd      	b.n	800a27c <HAL_UART_IRQHandler+0x760>
 800a080:	40020010 	.word	0x40020010
 800a084:	40020028 	.word	0x40020028
 800a088:	40020040 	.word	0x40020040
 800a08c:	40020058 	.word	0x40020058
 800a090:	40020070 	.word	0x40020070
 800a094:	40020088 	.word	0x40020088
 800a098:	400200a0 	.word	0x400200a0
 800a09c:	400200b8 	.word	0x400200b8
 800a0a0:	40020410 	.word	0x40020410
 800a0a4:	40020428 	.word	0x40020428
 800a0a8:	40020440 	.word	0x40020440
 800a0ac:	40020458 	.word	0x40020458
 800a0b0:	40020470 	.word	0x40020470
 800a0b4:	40020488 	.word	0x40020488
 800a0b8:	400204a0 	.word	0x400204a0
 800a0bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 80cf 	beq.w	800a280 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a0e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 80ca 	beq.w	800a280 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a100:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
 800a10a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a10e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a110:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a112:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a116:	e841 2300 	strex	r3, r2, [r1]
 800a11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e4      	bne.n	800a0ec <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3308      	adds	r3, #8
 800a128:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	623b      	str	r3, [r7, #32]
   return(result);
 800a132:	6a3a      	ldr	r2, [r7, #32]
 800a134:	4b55      	ldr	r3, [pc, #340]	@ (800a28c <HAL_UART_IRQHandler+0x770>)
 800a136:	4013      	ands	r3, r2
 800a138:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3308      	adds	r3, #8
 800a142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a146:	633a      	str	r2, [r7, #48]	@ 0x30
 800a148:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a14c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a14e:	e841 2300 	strex	r3, r2, [r1]
 800a152:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1e3      	bne.n	800a122 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2220      	movs	r2, #32
 800a15e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	e853 3f00 	ldrex	r3, [r3]
 800a17a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f023 0310 	bic.w	r3, r3, #16
 800a182:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a190:	61fb      	str	r3, [r7, #28]
 800a192:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a194:	69b9      	ldr	r1, [r7, #24]
 800a196:	69fa      	ldr	r2, [r7, #28]
 800a198:	e841 2300 	strex	r3, r2, [r1]
 800a19c:	617b      	str	r3, [r7, #20]
   return(result);
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1e4      	bne.n	800a16e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f89f 	bl	800a2f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1b6:	e063      	b.n	800a280 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00e      	beq.n	800a1e2 <HAL_UART_IRQHandler+0x6c6>
 800a1c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d008      	beq.n	800a1e2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a1d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f001 fa93 	bl	800b706 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1e0:	e051      	b.n	800a286 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d014      	beq.n	800a218 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a1ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d105      	bne.n	800a206 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a1fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d008      	beq.n	800a218 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d03a      	beq.n	800a284 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	4798      	blx	r3
    }
    return;
 800a216:	e035      	b.n	800a284 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a21c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a220:	2b00      	cmp	r3, #0
 800a222:	d009      	beq.n	800a238 <HAL_UART_IRQHandler+0x71c>
 800a224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f001 fa3d 	bl	800b6b0 <UART_EndTransmit_IT>
    return;
 800a236:	e026      	b.n	800a286 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a23c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d009      	beq.n	800a258 <HAL_UART_IRQHandler+0x73c>
 800a244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a248:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d003      	beq.n	800a258 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f001 fa6c 	bl	800b72e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a256:	e016      	b.n	800a286 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a25c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a260:	2b00      	cmp	r3, #0
 800a262:	d010      	beq.n	800a286 <HAL_UART_IRQHandler+0x76a>
 800a264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	da0c      	bge.n	800a286 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 fa54 	bl	800b71a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a272:	e008      	b.n	800a286 <HAL_UART_IRQHandler+0x76a>
      return;
 800a274:	bf00      	nop
 800a276:	e006      	b.n	800a286 <HAL_UART_IRQHandler+0x76a>
    return;
 800a278:	bf00      	nop
 800a27a:	e004      	b.n	800a286 <HAL_UART_IRQHandler+0x76a>
      return;
 800a27c:	bf00      	nop
 800a27e:	e002      	b.n	800a286 <HAL_UART_IRQHandler+0x76a>
      return;
 800a280:	bf00      	nop
 800a282:	e000      	b.n	800a286 <HAL_UART_IRQHandler+0x76a>
    return;
 800a284:	bf00      	nop
  }
}
 800a286:	37e8      	adds	r7, #232	@ 0xe8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	effffffe 	.word	0xeffffffe

0800a290 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a30c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a310:	b092      	sub	sp, #72	@ 0x48
 800a312:	af00      	add	r7, sp, #0
 800a314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	689a      	ldr	r2, [r3, #8]
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	431a      	orrs	r2, r3
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	431a      	orrs	r2, r3
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	4313      	orrs	r3, r2
 800a332:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	4bbe      	ldr	r3, [pc, #760]	@ (800a634 <UART_SetConfig+0x328>)
 800a33c:	4013      	ands	r3, r2
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	6812      	ldr	r2, [r2, #0]
 800a342:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a344:	430b      	orrs	r3, r1
 800a346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	68da      	ldr	r2, [r3, #12]
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4ab3      	ldr	r2, [pc, #716]	@ (800a638 <UART_SetConfig+0x32c>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d004      	beq.n	800a378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a374:	4313      	orrs	r3, r2
 800a376:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689a      	ldr	r2, [r3, #8]
 800a37e:	4baf      	ldr	r3, [pc, #700]	@ (800a63c <UART_SetConfig+0x330>)
 800a380:	4013      	ands	r3, r2
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	6812      	ldr	r2, [r2, #0]
 800a386:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a388:	430b      	orrs	r3, r1
 800a38a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a392:	f023 010f 	bic.w	r1, r3, #15
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4aa6      	ldr	r2, [pc, #664]	@ (800a640 <UART_SetConfig+0x334>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d177      	bne.n	800a49c <UART_SetConfig+0x190>
 800a3ac:	4ba5      	ldr	r3, [pc, #660]	@ (800a644 <UART_SetConfig+0x338>)
 800a3ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a3b4:	2b28      	cmp	r3, #40	@ 0x28
 800a3b6:	d86d      	bhi.n	800a494 <UART_SetConfig+0x188>
 800a3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c0 <UART_SetConfig+0xb4>)
 800a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3be:	bf00      	nop
 800a3c0:	0800a465 	.word	0x0800a465
 800a3c4:	0800a495 	.word	0x0800a495
 800a3c8:	0800a495 	.word	0x0800a495
 800a3cc:	0800a495 	.word	0x0800a495
 800a3d0:	0800a495 	.word	0x0800a495
 800a3d4:	0800a495 	.word	0x0800a495
 800a3d8:	0800a495 	.word	0x0800a495
 800a3dc:	0800a495 	.word	0x0800a495
 800a3e0:	0800a46d 	.word	0x0800a46d
 800a3e4:	0800a495 	.word	0x0800a495
 800a3e8:	0800a495 	.word	0x0800a495
 800a3ec:	0800a495 	.word	0x0800a495
 800a3f0:	0800a495 	.word	0x0800a495
 800a3f4:	0800a495 	.word	0x0800a495
 800a3f8:	0800a495 	.word	0x0800a495
 800a3fc:	0800a495 	.word	0x0800a495
 800a400:	0800a475 	.word	0x0800a475
 800a404:	0800a495 	.word	0x0800a495
 800a408:	0800a495 	.word	0x0800a495
 800a40c:	0800a495 	.word	0x0800a495
 800a410:	0800a495 	.word	0x0800a495
 800a414:	0800a495 	.word	0x0800a495
 800a418:	0800a495 	.word	0x0800a495
 800a41c:	0800a495 	.word	0x0800a495
 800a420:	0800a47d 	.word	0x0800a47d
 800a424:	0800a495 	.word	0x0800a495
 800a428:	0800a495 	.word	0x0800a495
 800a42c:	0800a495 	.word	0x0800a495
 800a430:	0800a495 	.word	0x0800a495
 800a434:	0800a495 	.word	0x0800a495
 800a438:	0800a495 	.word	0x0800a495
 800a43c:	0800a495 	.word	0x0800a495
 800a440:	0800a485 	.word	0x0800a485
 800a444:	0800a495 	.word	0x0800a495
 800a448:	0800a495 	.word	0x0800a495
 800a44c:	0800a495 	.word	0x0800a495
 800a450:	0800a495 	.word	0x0800a495
 800a454:	0800a495 	.word	0x0800a495
 800a458:	0800a495 	.word	0x0800a495
 800a45c:	0800a495 	.word	0x0800a495
 800a460:	0800a48d 	.word	0x0800a48d
 800a464:	2301      	movs	r3, #1
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46a:	e222      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a46c:	2304      	movs	r3, #4
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a472:	e21e      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a474:	2308      	movs	r3, #8
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47a:	e21a      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a47c:	2310      	movs	r3, #16
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a482:	e216      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a484:	2320      	movs	r3, #32
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48a:	e212      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a48c:	2340      	movs	r3, #64	@ 0x40
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a492:	e20e      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a494:	2380      	movs	r3, #128	@ 0x80
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49a:	e20a      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a69      	ldr	r2, [pc, #420]	@ (800a648 <UART_SetConfig+0x33c>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d130      	bne.n	800a508 <UART_SetConfig+0x1fc>
 800a4a6:	4b67      	ldr	r3, [pc, #412]	@ (800a644 <UART_SetConfig+0x338>)
 800a4a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4aa:	f003 0307 	and.w	r3, r3, #7
 800a4ae:	2b05      	cmp	r3, #5
 800a4b0:	d826      	bhi.n	800a500 <UART_SetConfig+0x1f4>
 800a4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b8 <UART_SetConfig+0x1ac>)
 800a4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b8:	0800a4d1 	.word	0x0800a4d1
 800a4bc:	0800a4d9 	.word	0x0800a4d9
 800a4c0:	0800a4e1 	.word	0x0800a4e1
 800a4c4:	0800a4e9 	.word	0x0800a4e9
 800a4c8:	0800a4f1 	.word	0x0800a4f1
 800a4cc:	0800a4f9 	.word	0x0800a4f9
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d6:	e1ec      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a4d8:	2304      	movs	r3, #4
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4de:	e1e8      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e6:	e1e4      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ee:	e1e0      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a4f0:	2320      	movs	r3, #32
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e1dc      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a4f8:	2340      	movs	r3, #64	@ 0x40
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e1d8      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a500:	2380      	movs	r3, #128	@ 0x80
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a506:	e1d4      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a4f      	ldr	r2, [pc, #316]	@ (800a64c <UART_SetConfig+0x340>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d130      	bne.n	800a574 <UART_SetConfig+0x268>
 800a512:	4b4c      	ldr	r3, [pc, #304]	@ (800a644 <UART_SetConfig+0x338>)
 800a514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a516:	f003 0307 	and.w	r3, r3, #7
 800a51a:	2b05      	cmp	r3, #5
 800a51c:	d826      	bhi.n	800a56c <UART_SetConfig+0x260>
 800a51e:	a201      	add	r2, pc, #4	@ (adr r2, 800a524 <UART_SetConfig+0x218>)
 800a520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a524:	0800a53d 	.word	0x0800a53d
 800a528:	0800a545 	.word	0x0800a545
 800a52c:	0800a54d 	.word	0x0800a54d
 800a530:	0800a555 	.word	0x0800a555
 800a534:	0800a55d 	.word	0x0800a55d
 800a538:	0800a565 	.word	0x0800a565
 800a53c:	2300      	movs	r3, #0
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a542:	e1b6      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a544:	2304      	movs	r3, #4
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54a:	e1b2      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a54c:	2308      	movs	r3, #8
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a552:	e1ae      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a554:	2310      	movs	r3, #16
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55a:	e1aa      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a55c:	2320      	movs	r3, #32
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a562:	e1a6      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a564:	2340      	movs	r3, #64	@ 0x40
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56a:	e1a2      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a56c:	2380      	movs	r3, #128	@ 0x80
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a572:	e19e      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a35      	ldr	r2, [pc, #212]	@ (800a650 <UART_SetConfig+0x344>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d130      	bne.n	800a5e0 <UART_SetConfig+0x2d4>
 800a57e:	4b31      	ldr	r3, [pc, #196]	@ (800a644 <UART_SetConfig+0x338>)
 800a580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	2b05      	cmp	r3, #5
 800a588:	d826      	bhi.n	800a5d8 <UART_SetConfig+0x2cc>
 800a58a:	a201      	add	r2, pc, #4	@ (adr r2, 800a590 <UART_SetConfig+0x284>)
 800a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a590:	0800a5a9 	.word	0x0800a5a9
 800a594:	0800a5b1 	.word	0x0800a5b1
 800a598:	0800a5b9 	.word	0x0800a5b9
 800a59c:	0800a5c1 	.word	0x0800a5c1
 800a5a0:	0800a5c9 	.word	0x0800a5c9
 800a5a4:	0800a5d1 	.word	0x0800a5d1
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ae:	e180      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a5b0:	2304      	movs	r3, #4
 800a5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b6:	e17c      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a5b8:	2308      	movs	r3, #8
 800a5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5be:	e178      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a5c0:	2310      	movs	r3, #16
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c6:	e174      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a5c8:	2320      	movs	r3, #32
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ce:	e170      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a5d0:	2340      	movs	r3, #64	@ 0x40
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d6:	e16c      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a5d8:	2380      	movs	r3, #128	@ 0x80
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5de:	e168      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a654 <UART_SetConfig+0x348>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d142      	bne.n	800a670 <UART_SetConfig+0x364>
 800a5ea:	4b16      	ldr	r3, [pc, #88]	@ (800a644 <UART_SetConfig+0x338>)
 800a5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ee:	f003 0307 	and.w	r3, r3, #7
 800a5f2:	2b05      	cmp	r3, #5
 800a5f4:	d838      	bhi.n	800a668 <UART_SetConfig+0x35c>
 800a5f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5fc <UART_SetConfig+0x2f0>)
 800a5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fc:	0800a615 	.word	0x0800a615
 800a600:	0800a61d 	.word	0x0800a61d
 800a604:	0800a625 	.word	0x0800a625
 800a608:	0800a62d 	.word	0x0800a62d
 800a60c:	0800a659 	.word	0x0800a659
 800a610:	0800a661 	.word	0x0800a661
 800a614:	2300      	movs	r3, #0
 800a616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61a:	e14a      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a61c:	2304      	movs	r3, #4
 800a61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a622:	e146      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a624:	2308      	movs	r3, #8
 800a626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62a:	e142      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a62c:	2310      	movs	r3, #16
 800a62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a632:	e13e      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a634:	cfff69f3 	.word	0xcfff69f3
 800a638:	58000c00 	.word	0x58000c00
 800a63c:	11fff4ff 	.word	0x11fff4ff
 800a640:	40011000 	.word	0x40011000
 800a644:	58024400 	.word	0x58024400
 800a648:	40004400 	.word	0x40004400
 800a64c:	40004800 	.word	0x40004800
 800a650:	40004c00 	.word	0x40004c00
 800a654:	40005000 	.word	0x40005000
 800a658:	2320      	movs	r3, #32
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65e:	e128      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a660:	2340      	movs	r3, #64	@ 0x40
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a666:	e124      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a668:	2380      	movs	r3, #128	@ 0x80
 800a66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66e:	e120      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4acb      	ldr	r2, [pc, #812]	@ (800a9a4 <UART_SetConfig+0x698>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d176      	bne.n	800a768 <UART_SetConfig+0x45c>
 800a67a:	4bcb      	ldr	r3, [pc, #812]	@ (800a9a8 <UART_SetConfig+0x69c>)
 800a67c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a67e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a682:	2b28      	cmp	r3, #40	@ 0x28
 800a684:	d86c      	bhi.n	800a760 <UART_SetConfig+0x454>
 800a686:	a201      	add	r2, pc, #4	@ (adr r2, 800a68c <UART_SetConfig+0x380>)
 800a688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68c:	0800a731 	.word	0x0800a731
 800a690:	0800a761 	.word	0x0800a761
 800a694:	0800a761 	.word	0x0800a761
 800a698:	0800a761 	.word	0x0800a761
 800a69c:	0800a761 	.word	0x0800a761
 800a6a0:	0800a761 	.word	0x0800a761
 800a6a4:	0800a761 	.word	0x0800a761
 800a6a8:	0800a761 	.word	0x0800a761
 800a6ac:	0800a739 	.word	0x0800a739
 800a6b0:	0800a761 	.word	0x0800a761
 800a6b4:	0800a761 	.word	0x0800a761
 800a6b8:	0800a761 	.word	0x0800a761
 800a6bc:	0800a761 	.word	0x0800a761
 800a6c0:	0800a761 	.word	0x0800a761
 800a6c4:	0800a761 	.word	0x0800a761
 800a6c8:	0800a761 	.word	0x0800a761
 800a6cc:	0800a741 	.word	0x0800a741
 800a6d0:	0800a761 	.word	0x0800a761
 800a6d4:	0800a761 	.word	0x0800a761
 800a6d8:	0800a761 	.word	0x0800a761
 800a6dc:	0800a761 	.word	0x0800a761
 800a6e0:	0800a761 	.word	0x0800a761
 800a6e4:	0800a761 	.word	0x0800a761
 800a6e8:	0800a761 	.word	0x0800a761
 800a6ec:	0800a749 	.word	0x0800a749
 800a6f0:	0800a761 	.word	0x0800a761
 800a6f4:	0800a761 	.word	0x0800a761
 800a6f8:	0800a761 	.word	0x0800a761
 800a6fc:	0800a761 	.word	0x0800a761
 800a700:	0800a761 	.word	0x0800a761
 800a704:	0800a761 	.word	0x0800a761
 800a708:	0800a761 	.word	0x0800a761
 800a70c:	0800a751 	.word	0x0800a751
 800a710:	0800a761 	.word	0x0800a761
 800a714:	0800a761 	.word	0x0800a761
 800a718:	0800a761 	.word	0x0800a761
 800a71c:	0800a761 	.word	0x0800a761
 800a720:	0800a761 	.word	0x0800a761
 800a724:	0800a761 	.word	0x0800a761
 800a728:	0800a761 	.word	0x0800a761
 800a72c:	0800a759 	.word	0x0800a759
 800a730:	2301      	movs	r3, #1
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a736:	e0bc      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a738:	2304      	movs	r3, #4
 800a73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73e:	e0b8      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a740:	2308      	movs	r3, #8
 800a742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a746:	e0b4      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a748:	2310      	movs	r3, #16
 800a74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74e:	e0b0      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a750:	2320      	movs	r3, #32
 800a752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a756:	e0ac      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a758:	2340      	movs	r3, #64	@ 0x40
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75e:	e0a8      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a760:	2380      	movs	r3, #128	@ 0x80
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a766:	e0a4      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a8f      	ldr	r2, [pc, #572]	@ (800a9ac <UART_SetConfig+0x6a0>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d130      	bne.n	800a7d4 <UART_SetConfig+0x4c8>
 800a772:	4b8d      	ldr	r3, [pc, #564]	@ (800a9a8 <UART_SetConfig+0x69c>)
 800a774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	2b05      	cmp	r3, #5
 800a77c:	d826      	bhi.n	800a7cc <UART_SetConfig+0x4c0>
 800a77e:	a201      	add	r2, pc, #4	@ (adr r2, 800a784 <UART_SetConfig+0x478>)
 800a780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a784:	0800a79d 	.word	0x0800a79d
 800a788:	0800a7a5 	.word	0x0800a7a5
 800a78c:	0800a7ad 	.word	0x0800a7ad
 800a790:	0800a7b5 	.word	0x0800a7b5
 800a794:	0800a7bd 	.word	0x0800a7bd
 800a798:	0800a7c5 	.word	0x0800a7c5
 800a79c:	2300      	movs	r3, #0
 800a79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a2:	e086      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a7a4:	2304      	movs	r3, #4
 800a7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7aa:	e082      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a7ac:	2308      	movs	r3, #8
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b2:	e07e      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a7b4:	2310      	movs	r3, #16
 800a7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ba:	e07a      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a7bc:	2320      	movs	r3, #32
 800a7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c2:	e076      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a7c4:	2340      	movs	r3, #64	@ 0x40
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ca:	e072      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a7cc:	2380      	movs	r3, #128	@ 0x80
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d2:	e06e      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a75      	ldr	r2, [pc, #468]	@ (800a9b0 <UART_SetConfig+0x6a4>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d130      	bne.n	800a840 <UART_SetConfig+0x534>
 800a7de:	4b72      	ldr	r3, [pc, #456]	@ (800a9a8 <UART_SetConfig+0x69c>)
 800a7e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e2:	f003 0307 	and.w	r3, r3, #7
 800a7e6:	2b05      	cmp	r3, #5
 800a7e8:	d826      	bhi.n	800a838 <UART_SetConfig+0x52c>
 800a7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f0 <UART_SetConfig+0x4e4>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a809 	.word	0x0800a809
 800a7f4:	0800a811 	.word	0x0800a811
 800a7f8:	0800a819 	.word	0x0800a819
 800a7fc:	0800a821 	.word	0x0800a821
 800a800:	0800a829 	.word	0x0800a829
 800a804:	0800a831 	.word	0x0800a831
 800a808:	2300      	movs	r3, #0
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80e:	e050      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a810:	2304      	movs	r3, #4
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a816:	e04c      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a818:	2308      	movs	r3, #8
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81e:	e048      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a820:	2310      	movs	r3, #16
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a826:	e044      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a828:	2320      	movs	r3, #32
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82e:	e040      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a830:	2340      	movs	r3, #64	@ 0x40
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e03c      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a838:	2380      	movs	r3, #128	@ 0x80
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83e:	e038      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a5b      	ldr	r2, [pc, #364]	@ (800a9b4 <UART_SetConfig+0x6a8>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d130      	bne.n	800a8ac <UART_SetConfig+0x5a0>
 800a84a:	4b57      	ldr	r3, [pc, #348]	@ (800a9a8 <UART_SetConfig+0x69c>)
 800a84c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a84e:	f003 0307 	and.w	r3, r3, #7
 800a852:	2b05      	cmp	r3, #5
 800a854:	d826      	bhi.n	800a8a4 <UART_SetConfig+0x598>
 800a856:	a201      	add	r2, pc, #4	@ (adr r2, 800a85c <UART_SetConfig+0x550>)
 800a858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85c:	0800a875 	.word	0x0800a875
 800a860:	0800a87d 	.word	0x0800a87d
 800a864:	0800a885 	.word	0x0800a885
 800a868:	0800a88d 	.word	0x0800a88d
 800a86c:	0800a895 	.word	0x0800a895
 800a870:	0800a89d 	.word	0x0800a89d
 800a874:	2302      	movs	r3, #2
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87a:	e01a      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a87c:	2304      	movs	r3, #4
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a882:	e016      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a884:	2308      	movs	r3, #8
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88a:	e012      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a88c:	2310      	movs	r3, #16
 800a88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a892:	e00e      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a894:	2320      	movs	r3, #32
 800a896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89a:	e00a      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a89c:	2340      	movs	r3, #64	@ 0x40
 800a89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a2:	e006      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a8a4:	2380      	movs	r3, #128	@ 0x80
 800a8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8aa:	e002      	b.n	800a8b2 <UART_SetConfig+0x5a6>
 800a8ac:	2380      	movs	r3, #128	@ 0x80
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a3f      	ldr	r2, [pc, #252]	@ (800a9b4 <UART_SetConfig+0x6a8>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	f040 80f8 	bne.w	800aaae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a8c2:	2b20      	cmp	r3, #32
 800a8c4:	dc46      	bgt.n	800a954 <UART_SetConfig+0x648>
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	f2c0 8082 	blt.w	800a9d0 <UART_SetConfig+0x6c4>
 800a8cc:	3b02      	subs	r3, #2
 800a8ce:	2b1e      	cmp	r3, #30
 800a8d0:	d87e      	bhi.n	800a9d0 <UART_SetConfig+0x6c4>
 800a8d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d8 <UART_SetConfig+0x5cc>)
 800a8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d8:	0800a95b 	.word	0x0800a95b
 800a8dc:	0800a9d1 	.word	0x0800a9d1
 800a8e0:	0800a963 	.word	0x0800a963
 800a8e4:	0800a9d1 	.word	0x0800a9d1
 800a8e8:	0800a9d1 	.word	0x0800a9d1
 800a8ec:	0800a9d1 	.word	0x0800a9d1
 800a8f0:	0800a973 	.word	0x0800a973
 800a8f4:	0800a9d1 	.word	0x0800a9d1
 800a8f8:	0800a9d1 	.word	0x0800a9d1
 800a8fc:	0800a9d1 	.word	0x0800a9d1
 800a900:	0800a9d1 	.word	0x0800a9d1
 800a904:	0800a9d1 	.word	0x0800a9d1
 800a908:	0800a9d1 	.word	0x0800a9d1
 800a90c:	0800a9d1 	.word	0x0800a9d1
 800a910:	0800a983 	.word	0x0800a983
 800a914:	0800a9d1 	.word	0x0800a9d1
 800a918:	0800a9d1 	.word	0x0800a9d1
 800a91c:	0800a9d1 	.word	0x0800a9d1
 800a920:	0800a9d1 	.word	0x0800a9d1
 800a924:	0800a9d1 	.word	0x0800a9d1
 800a928:	0800a9d1 	.word	0x0800a9d1
 800a92c:	0800a9d1 	.word	0x0800a9d1
 800a930:	0800a9d1 	.word	0x0800a9d1
 800a934:	0800a9d1 	.word	0x0800a9d1
 800a938:	0800a9d1 	.word	0x0800a9d1
 800a93c:	0800a9d1 	.word	0x0800a9d1
 800a940:	0800a9d1 	.word	0x0800a9d1
 800a944:	0800a9d1 	.word	0x0800a9d1
 800a948:	0800a9d1 	.word	0x0800a9d1
 800a94c:	0800a9d1 	.word	0x0800a9d1
 800a950:	0800a9c3 	.word	0x0800a9c3
 800a954:	2b40      	cmp	r3, #64	@ 0x40
 800a956:	d037      	beq.n	800a9c8 <UART_SetConfig+0x6bc>
 800a958:	e03a      	b.n	800a9d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a95a:	f7fd fe6f 	bl	800863c <HAL_RCCEx_GetD3PCLK1Freq>
 800a95e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a960:	e03c      	b.n	800a9dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a966:	4618      	mov	r0, r3
 800a968:	f7fd fe7e 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a970:	e034      	b.n	800a9dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a972:	f107 0318 	add.w	r3, r7, #24
 800a976:	4618      	mov	r0, r3
 800a978:	f7fd ffca 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a980:	e02c      	b.n	800a9dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a982:	4b09      	ldr	r3, [pc, #36]	@ (800a9a8 <UART_SetConfig+0x69c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 0320 	and.w	r3, r3, #32
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d016      	beq.n	800a9bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a98e:	4b06      	ldr	r3, [pc, #24]	@ (800a9a8 <UART_SetConfig+0x69c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	08db      	lsrs	r3, r3, #3
 800a994:	f003 0303 	and.w	r3, r3, #3
 800a998:	4a07      	ldr	r2, [pc, #28]	@ (800a9b8 <UART_SetConfig+0x6ac>)
 800a99a:	fa22 f303 	lsr.w	r3, r2, r3
 800a99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9a0:	e01c      	b.n	800a9dc <UART_SetConfig+0x6d0>
 800a9a2:	bf00      	nop
 800a9a4:	40011400 	.word	0x40011400
 800a9a8:	58024400 	.word	0x58024400
 800a9ac:	40007800 	.word	0x40007800
 800a9b0:	40007c00 	.word	0x40007c00
 800a9b4:	58000c00 	.word	0x58000c00
 800a9b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a9bc:	4b9d      	ldr	r3, [pc, #628]	@ (800ac34 <UART_SetConfig+0x928>)
 800a9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c0:	e00c      	b.n	800a9dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9c2:	4b9d      	ldr	r3, [pc, #628]	@ (800ac38 <UART_SetConfig+0x92c>)
 800a9c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c6:	e009      	b.n	800a9dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ce:	e005      	b.n	800a9dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a9da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a9dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 81de 	beq.w	800ada0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e8:	4a94      	ldr	r2, [pc, #592]	@ (800ac3c <UART_SetConfig+0x930>)
 800a9ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	4413      	add	r3, r2
 800aa02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d305      	bcc.n	800aa14 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d903      	bls.n	800aa1c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa1a:	e1c1      	b.n	800ada0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa1e:	2200      	movs	r2, #0
 800aa20:	60bb      	str	r3, [r7, #8]
 800aa22:	60fa      	str	r2, [r7, #12]
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa28:	4a84      	ldr	r2, [pc, #528]	@ (800ac3c <UART_SetConfig+0x930>)
 800aa2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	2200      	movs	r2, #0
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	607a      	str	r2, [r7, #4]
 800aa36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa3e:	f7f5 fc61 	bl	8000304 <__aeabi_uldivmod>
 800aa42:	4602      	mov	r2, r0
 800aa44:	460b      	mov	r3, r1
 800aa46:	4610      	mov	r0, r2
 800aa48:	4619      	mov	r1, r3
 800aa4a:	f04f 0200 	mov.w	r2, #0
 800aa4e:	f04f 0300 	mov.w	r3, #0
 800aa52:	020b      	lsls	r3, r1, #8
 800aa54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa58:	0202      	lsls	r2, r0, #8
 800aa5a:	6979      	ldr	r1, [r7, #20]
 800aa5c:	6849      	ldr	r1, [r1, #4]
 800aa5e:	0849      	lsrs	r1, r1, #1
 800aa60:	2000      	movs	r0, #0
 800aa62:	460c      	mov	r4, r1
 800aa64:	4605      	mov	r5, r0
 800aa66:	eb12 0804 	adds.w	r8, r2, r4
 800aa6a:	eb43 0905 	adc.w	r9, r3, r5
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	469a      	mov	sl, r3
 800aa76:	4693      	mov	fp, r2
 800aa78:	4652      	mov	r2, sl
 800aa7a:	465b      	mov	r3, fp
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	4649      	mov	r1, r9
 800aa80:	f7f5 fc40 	bl	8000304 <__aeabi_uldivmod>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4613      	mov	r3, r2
 800aa8a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa92:	d308      	bcc.n	800aaa6 <UART_SetConfig+0x79a>
 800aa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa9a:	d204      	bcs.n	800aaa6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aaa2:	60da      	str	r2, [r3, #12]
 800aaa4:	e17c      	b.n	800ada0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aaac:	e178      	b.n	800ada0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aab6:	f040 80c5 	bne.w	800ac44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aaba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aabe:	2b20      	cmp	r3, #32
 800aac0:	dc48      	bgt.n	800ab54 <UART_SetConfig+0x848>
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	db7b      	blt.n	800abbe <UART_SetConfig+0x8b2>
 800aac6:	2b20      	cmp	r3, #32
 800aac8:	d879      	bhi.n	800abbe <UART_SetConfig+0x8b2>
 800aaca:	a201      	add	r2, pc, #4	@ (adr r2, 800aad0 <UART_SetConfig+0x7c4>)
 800aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad0:	0800ab5b 	.word	0x0800ab5b
 800aad4:	0800ab63 	.word	0x0800ab63
 800aad8:	0800abbf 	.word	0x0800abbf
 800aadc:	0800abbf 	.word	0x0800abbf
 800aae0:	0800ab6b 	.word	0x0800ab6b
 800aae4:	0800abbf 	.word	0x0800abbf
 800aae8:	0800abbf 	.word	0x0800abbf
 800aaec:	0800abbf 	.word	0x0800abbf
 800aaf0:	0800ab7b 	.word	0x0800ab7b
 800aaf4:	0800abbf 	.word	0x0800abbf
 800aaf8:	0800abbf 	.word	0x0800abbf
 800aafc:	0800abbf 	.word	0x0800abbf
 800ab00:	0800abbf 	.word	0x0800abbf
 800ab04:	0800abbf 	.word	0x0800abbf
 800ab08:	0800abbf 	.word	0x0800abbf
 800ab0c:	0800abbf 	.word	0x0800abbf
 800ab10:	0800ab8b 	.word	0x0800ab8b
 800ab14:	0800abbf 	.word	0x0800abbf
 800ab18:	0800abbf 	.word	0x0800abbf
 800ab1c:	0800abbf 	.word	0x0800abbf
 800ab20:	0800abbf 	.word	0x0800abbf
 800ab24:	0800abbf 	.word	0x0800abbf
 800ab28:	0800abbf 	.word	0x0800abbf
 800ab2c:	0800abbf 	.word	0x0800abbf
 800ab30:	0800abbf 	.word	0x0800abbf
 800ab34:	0800abbf 	.word	0x0800abbf
 800ab38:	0800abbf 	.word	0x0800abbf
 800ab3c:	0800abbf 	.word	0x0800abbf
 800ab40:	0800abbf 	.word	0x0800abbf
 800ab44:	0800abbf 	.word	0x0800abbf
 800ab48:	0800abbf 	.word	0x0800abbf
 800ab4c:	0800abbf 	.word	0x0800abbf
 800ab50:	0800abb1 	.word	0x0800abb1
 800ab54:	2b40      	cmp	r3, #64	@ 0x40
 800ab56:	d02e      	beq.n	800abb6 <UART_SetConfig+0x8aa>
 800ab58:	e031      	b.n	800abbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab5a:	f7fb fd77 	bl	800664c <HAL_RCC_GetPCLK1Freq>
 800ab5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab60:	e033      	b.n	800abca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab62:	f7fb fd89 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 800ab66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab68:	e02f      	b.n	800abca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fd fd7a 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab78:	e027      	b.n	800abca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab7a:	f107 0318 	add.w	r3, r7, #24
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fd fec6 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab88:	e01f      	b.n	800abca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab8a:	4b2d      	ldr	r3, [pc, #180]	@ (800ac40 <UART_SetConfig+0x934>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 0320 	and.w	r3, r3, #32
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d009      	beq.n	800abaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab96:	4b2a      	ldr	r3, [pc, #168]	@ (800ac40 <UART_SetConfig+0x934>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	08db      	lsrs	r3, r3, #3
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	4a24      	ldr	r2, [pc, #144]	@ (800ac34 <UART_SetConfig+0x928>)
 800aba2:	fa22 f303 	lsr.w	r3, r2, r3
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aba8:	e00f      	b.n	800abca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800abaa:	4b22      	ldr	r3, [pc, #136]	@ (800ac34 <UART_SetConfig+0x928>)
 800abac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abae:	e00c      	b.n	800abca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abb0:	4b21      	ldr	r3, [pc, #132]	@ (800ac38 <UART_SetConfig+0x92c>)
 800abb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb4:	e009      	b.n	800abca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abbc:	e005      	b.n	800abca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800abbe:	2300      	movs	r3, #0
 800abc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800abc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 80e7 	beq.w	800ada0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd6:	4a19      	ldr	r2, [pc, #100]	@ (800ac3c <UART_SetConfig+0x930>)
 800abd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abdc:	461a      	mov	r2, r3
 800abde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abe0:	fbb3 f3f2 	udiv	r3, r3, r2
 800abe4:	005a      	lsls	r2, r3, #1
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	085b      	lsrs	r3, r3, #1
 800abec:	441a      	add	r2, r3
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfa:	2b0f      	cmp	r3, #15
 800abfc:	d916      	bls.n	800ac2c <UART_SetConfig+0x920>
 800abfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac04:	d212      	bcs.n	800ac2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	f023 030f 	bic.w	r3, r3, #15
 800ac0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac12:	085b      	lsrs	r3, r3, #1
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	f003 0307 	and.w	r3, r3, #7
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ac28:	60da      	str	r2, [r3, #12]
 800ac2a:	e0b9      	b.n	800ada0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac32:	e0b5      	b.n	800ada0 <UART_SetConfig+0xa94>
 800ac34:	03d09000 	.word	0x03d09000
 800ac38:	003d0900 	.word	0x003d0900
 800ac3c:	08012710 	.word	0x08012710
 800ac40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac48:	2b20      	cmp	r3, #32
 800ac4a:	dc49      	bgt.n	800ace0 <UART_SetConfig+0x9d4>
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	db7c      	blt.n	800ad4a <UART_SetConfig+0xa3e>
 800ac50:	2b20      	cmp	r3, #32
 800ac52:	d87a      	bhi.n	800ad4a <UART_SetConfig+0xa3e>
 800ac54:	a201      	add	r2, pc, #4	@ (adr r2, 800ac5c <UART_SetConfig+0x950>)
 800ac56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5a:	bf00      	nop
 800ac5c:	0800ace7 	.word	0x0800ace7
 800ac60:	0800acef 	.word	0x0800acef
 800ac64:	0800ad4b 	.word	0x0800ad4b
 800ac68:	0800ad4b 	.word	0x0800ad4b
 800ac6c:	0800acf7 	.word	0x0800acf7
 800ac70:	0800ad4b 	.word	0x0800ad4b
 800ac74:	0800ad4b 	.word	0x0800ad4b
 800ac78:	0800ad4b 	.word	0x0800ad4b
 800ac7c:	0800ad07 	.word	0x0800ad07
 800ac80:	0800ad4b 	.word	0x0800ad4b
 800ac84:	0800ad4b 	.word	0x0800ad4b
 800ac88:	0800ad4b 	.word	0x0800ad4b
 800ac8c:	0800ad4b 	.word	0x0800ad4b
 800ac90:	0800ad4b 	.word	0x0800ad4b
 800ac94:	0800ad4b 	.word	0x0800ad4b
 800ac98:	0800ad4b 	.word	0x0800ad4b
 800ac9c:	0800ad17 	.word	0x0800ad17
 800aca0:	0800ad4b 	.word	0x0800ad4b
 800aca4:	0800ad4b 	.word	0x0800ad4b
 800aca8:	0800ad4b 	.word	0x0800ad4b
 800acac:	0800ad4b 	.word	0x0800ad4b
 800acb0:	0800ad4b 	.word	0x0800ad4b
 800acb4:	0800ad4b 	.word	0x0800ad4b
 800acb8:	0800ad4b 	.word	0x0800ad4b
 800acbc:	0800ad4b 	.word	0x0800ad4b
 800acc0:	0800ad4b 	.word	0x0800ad4b
 800acc4:	0800ad4b 	.word	0x0800ad4b
 800acc8:	0800ad4b 	.word	0x0800ad4b
 800accc:	0800ad4b 	.word	0x0800ad4b
 800acd0:	0800ad4b 	.word	0x0800ad4b
 800acd4:	0800ad4b 	.word	0x0800ad4b
 800acd8:	0800ad4b 	.word	0x0800ad4b
 800acdc:	0800ad3d 	.word	0x0800ad3d
 800ace0:	2b40      	cmp	r3, #64	@ 0x40
 800ace2:	d02e      	beq.n	800ad42 <UART_SetConfig+0xa36>
 800ace4:	e031      	b.n	800ad4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ace6:	f7fb fcb1 	bl	800664c <HAL_RCC_GetPCLK1Freq>
 800acea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acec:	e033      	b.n	800ad56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acee:	f7fb fcc3 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
 800acf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acf4:	e02f      	b.n	800ad56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fd fcb4 	bl	8008668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad04:	e027      	b.n	800ad56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad06:	f107 0318 	add.w	r3, r7, #24
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fd fe00 	bl	8008910 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad14:	e01f      	b.n	800ad56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad16:	4b2d      	ldr	r3, [pc, #180]	@ (800adcc <UART_SetConfig+0xac0>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0320 	and.w	r3, r3, #32
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d009      	beq.n	800ad36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad22:	4b2a      	ldr	r3, [pc, #168]	@ (800adcc <UART_SetConfig+0xac0>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	08db      	lsrs	r3, r3, #3
 800ad28:	f003 0303 	and.w	r3, r3, #3
 800ad2c:	4a28      	ldr	r2, [pc, #160]	@ (800add0 <UART_SetConfig+0xac4>)
 800ad2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad34:	e00f      	b.n	800ad56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ad36:	4b26      	ldr	r3, [pc, #152]	@ (800add0 <UART_SetConfig+0xac4>)
 800ad38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad3a:	e00c      	b.n	800ad56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad3c:	4b25      	ldr	r3, [pc, #148]	@ (800add4 <UART_SetConfig+0xac8>)
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad40:	e009      	b.n	800ad56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad48:	e005      	b.n	800ad56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ad54:	bf00      	nop
    }

    if (pclk != 0U)
 800ad56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d021      	beq.n	800ada0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad60:	4a1d      	ldr	r2, [pc, #116]	@ (800add8 <UART_SetConfig+0xacc>)
 800ad62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad66:	461a      	mov	r2, r3
 800ad68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad6a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	085b      	lsrs	r3, r3, #1
 800ad74:	441a      	add	r2, r3
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad82:	2b0f      	cmp	r3, #15
 800ad84:	d909      	bls.n	800ad9a <UART_SetConfig+0xa8e>
 800ad86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad8c:	d205      	bcs.n	800ad9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	60da      	str	r2, [r3, #12]
 800ad98:	e002      	b.n	800ada0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	2201      	movs	r2, #1
 800adac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2200      	movs	r2, #0
 800adb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2200      	movs	r2, #0
 800adba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800adbc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3748      	adds	r7, #72	@ 0x48
 800adc4:	46bd      	mov	sp, r7
 800adc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adca:	bf00      	nop
 800adcc:	58024400 	.word	0x58024400
 800add0:	03d09000 	.word	0x03d09000
 800add4:	003d0900 	.word	0x003d0900
 800add8:	08012710 	.word	0x08012710

0800addc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade8:	f003 0308 	and.w	r3, r3, #8
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00a      	beq.n	800ae06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	430a      	orrs	r2, r1
 800ae04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00a      	beq.n	800ae28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae2c:	f003 0302 	and.w	r3, r3, #2
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00a      	beq.n	800ae4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4e:	f003 0304 	and.w	r3, r3, #4
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00a      	beq.n	800ae6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae70:	f003 0310 	and.w	r3, r3, #16
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00a      	beq.n	800ae8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	430a      	orrs	r2, r1
 800ae8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae92:	f003 0320 	and.w	r3, r3, #32
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00a      	beq.n	800aeb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	430a      	orrs	r2, r1
 800aeae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d01a      	beq.n	800aef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	430a      	orrs	r2, r1
 800aed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aed6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aeda:	d10a      	bne.n	800aef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	430a      	orrs	r2, r1
 800aef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00a      	beq.n	800af14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	430a      	orrs	r2, r1
 800af12:	605a      	str	r2, [r3, #4]
  }
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b098      	sub	sp, #96	@ 0x60
 800af24:	af02      	add	r7, sp, #8
 800af26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af30:	f7f6 fe90 	bl	8001c54 <HAL_GetTick>
 800af34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 0308 	and.w	r3, r3, #8
 800af40:	2b08      	cmp	r3, #8
 800af42:	d12f      	bne.n	800afa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af4c:	2200      	movs	r2, #0
 800af4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 f88e 	bl	800b074 <UART_WaitOnFlagUntilTimeout>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d022      	beq.n	800afa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af66:	e853 3f00 	ldrex	r3, [r3]
 800af6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af72:	653b      	str	r3, [r7, #80]	@ 0x50
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	461a      	mov	r2, r3
 800af7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af84:	e841 2300 	strex	r3, r2, [r1]
 800af88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1e6      	bne.n	800af5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2220      	movs	r2, #32
 800af94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e063      	b.n	800b06c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f003 0304 	and.w	r3, r3, #4
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d149      	bne.n	800b046 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afba:	2200      	movs	r2, #0
 800afbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f857 	bl	800b074 <UART_WaitOnFlagUntilTimeout>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d03c      	beq.n	800b046 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	623b      	str	r3, [r7, #32]
   return(result);
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afea:	633b      	str	r3, [r7, #48]	@ 0x30
 800afec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e6      	bne.n	800afcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3308      	adds	r3, #8
 800b004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	e853 3f00 	ldrex	r3, [r3]
 800b00c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f023 0301 	bic.w	r3, r3, #1
 800b014:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3308      	adds	r3, #8
 800b01c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b01e:	61fa      	str	r2, [r7, #28]
 800b020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	69b9      	ldr	r1, [r7, #24]
 800b024:	69fa      	ldr	r2, [r7, #28]
 800b026:	e841 2300 	strex	r3, r2, [r1]
 800b02a:	617b      	str	r3, [r7, #20]
   return(result);
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1e5      	bne.n	800affe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2220      	movs	r2, #32
 800b036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e012      	b.n	800b06c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2220      	movs	r2, #32
 800b04a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2220      	movs	r2, #32
 800b052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3758      	adds	r7, #88	@ 0x58
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	4613      	mov	r3, r2
 800b082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b084:	e04f      	b.n	800b126 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b08c:	d04b      	beq.n	800b126 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b08e:	f7f6 fde1 	bl	8001c54 <HAL_GetTick>
 800b092:	4602      	mov	r2, r0
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d302      	bcc.n	800b0a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e04e      	b.n	800b146 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0304 	and.w	r3, r3, #4
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d037      	beq.n	800b126 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b80      	cmp	r3, #128	@ 0x80
 800b0ba:	d034      	beq.n	800b126 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b40      	cmp	r3, #64	@ 0x40
 800b0c0:	d031      	beq.n	800b126 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69db      	ldr	r3, [r3, #28]
 800b0c8:	f003 0308 	and.w	r3, r3, #8
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	d110      	bne.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2208      	movs	r2, #8
 800b0d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f000 f921 	bl	800b320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e029      	b.n	800b146 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	69db      	ldr	r3, [r3, #28]
 800b0f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b100:	d111      	bne.n	800b126 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b10a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f000 f907 	bl	800b320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2220      	movs	r2, #32
 800b116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b122:	2303      	movs	r3, #3
 800b124:	e00f      	b.n	800b146 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	69da      	ldr	r2, [r3, #28]
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	4013      	ands	r3, r2
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	429a      	cmp	r2, r3
 800b134:	bf0c      	ite	eq
 800b136:	2301      	moveq	r3, #1
 800b138:	2300      	movne	r3, #0
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	461a      	mov	r2, r3
 800b13e:	79fb      	ldrb	r3, [r7, #7]
 800b140:	429a      	cmp	r2, r3
 800b142:	d0a0      	beq.n	800b086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
	...

0800b150 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b096      	sub	sp, #88	@ 0x58
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	4613      	mov	r3, r2
 800b15c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	88fa      	ldrh	r2, [r7, #6]
 800b168:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2222      	movs	r2, #34	@ 0x22
 800b178:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b182:	2b00      	cmp	r3, #0
 800b184:	d02d      	beq.n	800b1e2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b18c:	4a40      	ldr	r2, [pc, #256]	@ (800b290 <UART_Start_Receive_DMA+0x140>)
 800b18e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b196:	4a3f      	ldr	r2, [pc, #252]	@ (800b294 <UART_Start_Receive_DMA+0x144>)
 800b198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1a0:	4a3d      	ldr	r2, [pc, #244]	@ (800b298 <UART_Start_Receive_DMA+0x148>)
 800b1a2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3324      	adds	r3, #36	@ 0x24
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	88fb      	ldrh	r3, [r7, #6]
 800b1c4:	f7f8 fcb4 	bl	8003b30 <HAL_DMA_Start_IT>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d009      	beq.n	800b1e2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2210      	movs	r2, #16
 800b1d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2220      	movs	r2, #32
 800b1da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e051      	b.n	800b286 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d018      	beq.n	800b21c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1f2:	e853 3f00 	ldrex	r3, [r3]
 800b1f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	461a      	mov	r2, r3
 800b206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b20a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b20e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b210:	e841 2300 	strex	r3, r2, [r1]
 800b214:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1e6      	bne.n	800b1ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3308      	adds	r3, #8
 800b222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b226:	e853 3f00 	ldrex	r3, [r3]
 800b22a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	f043 0301 	orr.w	r3, r3, #1
 800b232:	653b      	str	r3, [r7, #80]	@ 0x50
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3308      	adds	r3, #8
 800b23a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b23c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b23e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b240:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b242:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b244:	e841 2300 	strex	r3, r2, [r1]
 800b248:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1e5      	bne.n	800b21c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3308      	adds	r3, #8
 800b256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	613b      	str	r3, [r7, #16]
   return(result);
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3308      	adds	r3, #8
 800b26e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b270:	623a      	str	r2, [r7, #32]
 800b272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	69f9      	ldr	r1, [r7, #28]
 800b276:	6a3a      	ldr	r2, [r7, #32]
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e5      	bne.n	800b250 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3758      	adds	r7, #88	@ 0x58
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	0800b49f 	.word	0x0800b49f
 800b294:	0800b5c7 	.word	0x0800b5c7
 800b298:	0800b605 	.word	0x0800b605

0800b29c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b08f      	sub	sp, #60	@ 0x3c
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	e853 3f00 	ldrex	r3, [r3]
 800b2b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b2b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2c4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2ca:	e841 2300 	strex	r3, r2, [r1]
 800b2ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1e6      	bne.n	800b2a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3308      	adds	r3, #8
 800b2dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	e853 3f00 	ldrex	r3, [r3]
 800b2e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b2ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2f6:	61ba      	str	r2, [r7, #24]
 800b2f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fa:	6979      	ldr	r1, [r7, #20]
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	e841 2300 	strex	r3, r2, [r1]
 800b302:	613b      	str	r3, [r7, #16]
   return(result);
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1e5      	bne.n	800b2d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b312:	bf00      	nop
 800b314:	373c      	adds	r7, #60	@ 0x3c
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
	...

0800b320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b320:	b480      	push	{r7}
 800b322:	b095      	sub	sp, #84	@ 0x54
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b330:	e853 3f00 	ldrex	r3, [r3]
 800b334:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b33c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	461a      	mov	r2, r3
 800b344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b346:	643b      	str	r3, [r7, #64]	@ 0x40
 800b348:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b34c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b34e:	e841 2300 	strex	r3, r2, [r1]
 800b352:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1e6      	bne.n	800b328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3308      	adds	r3, #8
 800b360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	e853 3f00 	ldrex	r3, [r3]
 800b368:	61fb      	str	r3, [r7, #28]
   return(result);
 800b36a:	69fa      	ldr	r2, [r7, #28]
 800b36c:	4b1e      	ldr	r3, [pc, #120]	@ (800b3e8 <UART_EndRxTransfer+0xc8>)
 800b36e:	4013      	ands	r3, r2
 800b370:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3308      	adds	r3, #8
 800b378:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b37a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b37c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b382:	e841 2300 	strex	r3, r2, [r1]
 800b386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1e5      	bne.n	800b35a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b392:	2b01      	cmp	r3, #1
 800b394:	d118      	bne.n	800b3c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	e853 3f00 	ldrex	r3, [r3]
 800b3a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	f023 0310 	bic.w	r3, r3, #16
 800b3aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3b4:	61bb      	str	r3, [r7, #24]
 800b3b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b8:	6979      	ldr	r1, [r7, #20]
 800b3ba:	69ba      	ldr	r2, [r7, #24]
 800b3bc:	e841 2300 	strex	r3, r2, [r1]
 800b3c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1e6      	bne.n	800b396 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2220      	movs	r2, #32
 800b3cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b3dc:	bf00      	nop
 800b3de:	3754      	adds	r7, #84	@ 0x54
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	effffffe 	.word	0xeffffffe

0800b3ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b090      	sub	sp, #64	@ 0x40
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	69db      	ldr	r3, [r3, #28]
 800b3fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b402:	d037      	beq.n	800b474 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b406:	2200      	movs	r2, #0
 800b408:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3308      	adds	r3, #8
 800b412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	e853 3f00 	ldrex	r3, [r3]
 800b41a:	623b      	str	r3, [r7, #32]
   return(result);
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b422:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3308      	adds	r3, #8
 800b42a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b42c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b434:	e841 2300 	strex	r3, r2, [r1]
 800b438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1e5      	bne.n	800b40c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	e853 3f00 	ldrex	r3, [r3]
 800b44c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b454:	637b      	str	r3, [r7, #52]	@ 0x34
 800b456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	461a      	mov	r2, r3
 800b45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b45e:	61fb      	str	r3, [r7, #28]
 800b460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b462:	69b9      	ldr	r1, [r7, #24]
 800b464:	69fa      	ldr	r2, [r7, #28]
 800b466:	e841 2300 	strex	r3, r2, [r1]
 800b46a:	617b      	str	r3, [r7, #20]
   return(result);
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1e6      	bne.n	800b440 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b472:	e002      	b.n	800b47a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b474:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b476:	f7fe ff0b 	bl	800a290 <HAL_UART_TxCpltCallback>
}
 800b47a:	bf00      	nop
 800b47c:	3740      	adds	r7, #64	@ 0x40
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b084      	sub	sp, #16
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b48e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f7fe ff07 	bl	800a2a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b496:	bf00      	nop
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b09c      	sub	sp, #112	@ 0x70
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	69db      	ldr	r3, [r3, #28]
 800b4b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4b4:	d071      	beq.n	800b59a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b4b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4c6:	e853 3f00 	ldrex	r3, [r3]
 800b4ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b4cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4de:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b4e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b4e4:	e841 2300 	strex	r3, r2, [r1]
 800b4e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b4ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1e6      	bne.n	800b4be <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3308      	adds	r3, #8
 800b4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fa:	e853 3f00 	ldrex	r3, [r3]
 800b4fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b502:	f023 0301 	bic.w	r3, r3, #1
 800b506:	667b      	str	r3, [r7, #100]	@ 0x64
 800b508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3308      	adds	r3, #8
 800b50e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b510:	647a      	str	r2, [r7, #68]	@ 0x44
 800b512:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e5      	bne.n	800b4f0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3308      	adds	r3, #8
 800b52a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52e:	e853 3f00 	ldrex	r3, [r3]
 800b532:	623b      	str	r3, [r7, #32]
   return(result);
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b53a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b53c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3308      	adds	r3, #8
 800b542:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b544:	633a      	str	r2, [r7, #48]	@ 0x30
 800b546:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b548:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b54a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b54c:	e841 2300 	strex	r3, r2, [r1]
 800b550:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1e5      	bne.n	800b524 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b55a:	2220      	movs	r2, #32
 800b55c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b564:	2b01      	cmp	r3, #1
 800b566:	d118      	bne.n	800b59a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	60fb      	str	r3, [r7, #12]
   return(result);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f023 0310 	bic.w	r3, r3, #16
 800b57c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b57e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b586:	61fb      	str	r3, [r7, #28]
 800b588:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	69b9      	ldr	r1, [r7, #24]
 800b58c:	69fa      	ldr	r2, [r7, #28]
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	617b      	str	r3, [r7, #20]
   return(result);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e6      	bne.n	800b568 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b59a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b59c:	2200      	movs	r2, #0
 800b59e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d107      	bne.n	800b5b8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5b2:	f7fe fe9f 	bl	800a2f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5b6:	e002      	b.n	800b5be <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b5b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5ba:	f7fe fe7d 	bl	800a2b8 <HAL_UART_RxCpltCallback>
}
 800b5be:	bf00      	nop
 800b5c0:	3770      	adds	r7, #112	@ 0x70
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d109      	bne.n	800b5f6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5e8:	085b      	lsrs	r3, r3, #1
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7fe fe80 	bl	800a2f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5f4:	e002      	b.n	800b5fc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f7fe fe68 	bl	800a2cc <HAL_UART_RxHalfCpltCallback>
}
 800b5fc:	bf00      	nop
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b610:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b618:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b620:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b62c:	2b80      	cmp	r3, #128	@ 0x80
 800b62e:	d109      	bne.n	800b644 <UART_DMAError+0x40>
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	2b21      	cmp	r3, #33	@ 0x21
 800b634:	d106      	bne.n	800b644 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2200      	movs	r2, #0
 800b63a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b63e:	6978      	ldr	r0, [r7, #20]
 800b640:	f7ff fe2c 	bl	800b29c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b64e:	2b40      	cmp	r3, #64	@ 0x40
 800b650:	d109      	bne.n	800b666 <UART_DMAError+0x62>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b22      	cmp	r3, #34	@ 0x22
 800b656:	d106      	bne.n	800b666 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b660:	6978      	ldr	r0, [r7, #20]
 800b662:	f7ff fe5d 	bl	800b320 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b66c:	f043 0210 	orr.w	r2, r3, #16
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b676:	6978      	ldr	r0, [r7, #20]
 800b678:	f7fe fe32 	bl	800a2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b67c:	bf00      	nop
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b690:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f7fe fe1c 	bl	800a2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6a8:	bf00      	nop
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	e853 3f00 	ldrex	r3, [r3]
 800b6c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6cc:	61fb      	str	r3, [r7, #28]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	61bb      	str	r3, [r7, #24]
 800b6d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6da:	6979      	ldr	r1, [r7, #20]
 800b6dc:	69ba      	ldr	r2, [r7, #24]
 800b6de:	e841 2300 	strex	r3, r2, [r1]
 800b6e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1e6      	bne.n	800b6b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2220      	movs	r2, #32
 800b6ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7fe fdc9 	bl	800a290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6fe:	bf00      	nop
 800b700:	3720      	adds	r7, #32
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b70e:	bf00      	nop
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b083      	sub	sp, #12
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b722:	bf00      	nop
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b72e:	b480      	push	{r7}
 800b730:	b083      	sub	sp, #12
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b736:	bf00      	nop
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b742:	b480      	push	{r7}
 800b744:	b085      	sub	sp, #20
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b750:	2b01      	cmp	r3, #1
 800b752:	d101      	bne.n	800b758 <HAL_UARTEx_DisableFifoMode+0x16>
 800b754:	2302      	movs	r3, #2
 800b756:	e027      	b.n	800b7a8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2224      	movs	r2, #36	@ 0x24
 800b764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 0201 	bic.w	r2, r2, #1
 800b77e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b786:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2220      	movs	r2, #32
 800b79a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d101      	bne.n	800b7cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	e02d      	b.n	800b828 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2224      	movs	r2, #36	@ 0x24
 800b7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f022 0201 	bic.w	r2, r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	430a      	orrs	r2, r1
 800b806:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f84f 	bl	800b8ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2220      	movs	r2, #32
 800b81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b840:	2b01      	cmp	r3, #1
 800b842:	d101      	bne.n	800b848 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b844:	2302      	movs	r3, #2
 800b846:	e02d      	b.n	800b8a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2224      	movs	r2, #36	@ 0x24
 800b854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f022 0201 	bic.w	r2, r2, #1
 800b86e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	430a      	orrs	r2, r1
 800b882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f811 	bl	800b8ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2220      	movs	r2, #32
 800b896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d108      	bne.n	800b8ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b8cc:	e031      	b.n	800b932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b8ce:	2310      	movs	r3, #16
 800b8d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b8d2:	2310      	movs	r3, #16
 800b8d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	0e5b      	lsrs	r3, r3, #25
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	f003 0307 	and.w	r3, r3, #7
 800b8e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	0f5b      	lsrs	r3, r3, #29
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	f003 0307 	and.w	r3, r3, #7
 800b8f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
 800b8f8:	7b3a      	ldrb	r2, [r7, #12]
 800b8fa:	4911      	ldr	r1, [pc, #68]	@ (800b940 <UARTEx_SetNbDataToProcess+0x94>)
 800b8fc:	5c8a      	ldrb	r2, [r1, r2]
 800b8fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b902:	7b3a      	ldrb	r2, [r7, #12]
 800b904:	490f      	ldr	r1, [pc, #60]	@ (800b944 <UARTEx_SetNbDataToProcess+0x98>)
 800b906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b908:	fb93 f3f2 	sdiv	r3, r3, r2
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	7b7a      	ldrb	r2, [r7, #13]
 800b918:	4909      	ldr	r1, [pc, #36]	@ (800b940 <UARTEx_SetNbDataToProcess+0x94>)
 800b91a:	5c8a      	ldrb	r2, [r1, r2]
 800b91c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b920:	7b7a      	ldrb	r2, [r7, #13]
 800b922:	4908      	ldr	r1, [pc, #32]	@ (800b944 <UARTEx_SetNbDataToProcess+0x98>)
 800b924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b926:	fb93 f3f2 	sdiv	r3, r3, r2
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b932:	bf00      	nop
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	08012728 	.word	0x08012728
 800b944:	08012730 	.word	0x08012730

0800b948 <__NVIC_SetPriority>:
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	4603      	mov	r3, r0
 800b950:	6039      	str	r1, [r7, #0]
 800b952:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	db0a      	blt.n	800b972 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	490c      	ldr	r1, [pc, #48]	@ (800b994 <__NVIC_SetPriority+0x4c>)
 800b962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b966:	0112      	lsls	r2, r2, #4
 800b968:	b2d2      	uxtb	r2, r2
 800b96a:	440b      	add	r3, r1
 800b96c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b970:	e00a      	b.n	800b988 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	b2da      	uxtb	r2, r3
 800b976:	4908      	ldr	r1, [pc, #32]	@ (800b998 <__NVIC_SetPriority+0x50>)
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	f003 030f 	and.w	r3, r3, #15
 800b97e:	3b04      	subs	r3, #4
 800b980:	0112      	lsls	r2, r2, #4
 800b982:	b2d2      	uxtb	r2, r2
 800b984:	440b      	add	r3, r1
 800b986:	761a      	strb	r2, [r3, #24]
}
 800b988:	bf00      	nop
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	e000e100 	.word	0xe000e100
 800b998:	e000ed00 	.word	0xe000ed00

0800b99c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b99c:	b580      	push	{r7, lr}
 800b99e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b9a0:	4b05      	ldr	r3, [pc, #20]	@ (800b9b8 <SysTick_Handler+0x1c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b9a4:	f001 fe50 	bl	800d648 <xTaskGetSchedulerState>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d001      	beq.n	800b9b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b9ae:	f002 fdf3 	bl	800e598 <xPortSysTickHandler>
  }
}
 800b9b2:	bf00      	nop
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	e000e010 	.word	0xe000e010

0800b9bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	f06f 0004 	mvn.w	r0, #4
 800b9c6:	f7ff ffbf 	bl	800b948 <__NVIC_SetPriority>
#endif
}
 800b9ca:	bf00      	nop
 800b9cc:	bd80      	pop	{r7, pc}
	...

0800b9d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9d6:	f3ef 8305 	mrs	r3, IPSR
 800b9da:	603b      	str	r3, [r7, #0]
  return(result);
 800b9dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b9e2:	f06f 0305 	mvn.w	r3, #5
 800b9e6:	607b      	str	r3, [r7, #4]
 800b9e8:	e00c      	b.n	800ba04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b9ea:	4b0a      	ldr	r3, [pc, #40]	@ (800ba14 <osKernelInitialize+0x44>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d105      	bne.n	800b9fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b9f2:	4b08      	ldr	r3, [pc, #32]	@ (800ba14 <osKernelInitialize+0x44>)
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	607b      	str	r3, [r7, #4]
 800b9fc:	e002      	b.n	800ba04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b9fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba04:	687b      	ldr	r3, [r7, #4]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	2400186c 	.word	0x2400186c

0800ba18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba1e:	f3ef 8305 	mrs	r3, IPSR
 800ba22:	603b      	str	r3, [r7, #0]
  return(result);
 800ba24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ba2a:	f06f 0305 	mvn.w	r3, #5
 800ba2e:	607b      	str	r3, [r7, #4]
 800ba30:	e010      	b.n	800ba54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ba32:	4b0b      	ldr	r3, [pc, #44]	@ (800ba60 <osKernelStart+0x48>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d109      	bne.n	800ba4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ba3a:	f7ff ffbf 	bl	800b9bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ba3e:	4b08      	ldr	r3, [pc, #32]	@ (800ba60 <osKernelStart+0x48>)
 800ba40:	2202      	movs	r2, #2
 800ba42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ba44:	f001 f99c 	bl	800cd80 <vTaskStartScheduler>
      stat = osOK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	607b      	str	r3, [r7, #4]
 800ba4c:	e002      	b.n	800ba54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ba4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba54:	687b      	ldr	r3, [r7, #4]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	2400186c 	.word	0x2400186c

0800ba64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b08e      	sub	sp, #56	@ 0x38
 800ba68:	af04      	add	r7, sp, #16
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ba70:	2300      	movs	r3, #0
 800ba72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba74:	f3ef 8305 	mrs	r3, IPSR
 800ba78:	617b      	str	r3, [r7, #20]
  return(result);
 800ba7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d17e      	bne.n	800bb7e <osThreadNew+0x11a>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d07b      	beq.n	800bb7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ba86:	2380      	movs	r3, #128	@ 0x80
 800ba88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ba8a:	2318      	movs	r3, #24
 800ba8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ba92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d045      	beq.n	800bb2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d002      	beq.n	800baac <osThreadNew+0x48>
        name = attr->name;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	699b      	ldr	r3, [r3, #24]
 800bab8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d008      	beq.n	800bad2 <osThreadNew+0x6e>
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	2b38      	cmp	r3, #56	@ 0x38
 800bac4:	d805      	bhi.n	800bad2 <osThreadNew+0x6e>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <osThreadNew+0x72>
        return (NULL);
 800bad2:	2300      	movs	r3, #0
 800bad4:	e054      	b.n	800bb80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	089b      	lsrs	r3, r3, #2
 800bae4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00e      	beq.n	800bb0c <osThreadNew+0xa8>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	2ba7      	cmp	r3, #167	@ 0xa7
 800baf4:	d90a      	bls.n	800bb0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d006      	beq.n	800bb0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d002      	beq.n	800bb0c <osThreadNew+0xa8>
        mem = 1;
 800bb06:	2301      	movs	r3, #1
 800bb08:	61bb      	str	r3, [r7, #24]
 800bb0a:	e010      	b.n	800bb2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10c      	bne.n	800bb2e <osThreadNew+0xca>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d108      	bne.n	800bb2e <osThreadNew+0xca>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d104      	bne.n	800bb2e <osThreadNew+0xca>
          mem = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	61bb      	str	r3, [r7, #24]
 800bb28:	e001      	b.n	800bb2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d110      	bne.n	800bb56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb3c:	9202      	str	r2, [sp, #8]
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	6a3a      	ldr	r2, [r7, #32]
 800bb48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f000 ff5a 	bl	800ca04 <xTaskCreateStatic>
 800bb50:	4603      	mov	r3, r0
 800bb52:	613b      	str	r3, [r7, #16]
 800bb54:	e013      	b.n	800bb7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d110      	bne.n	800bb7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	f107 0310 	add.w	r3, r7, #16
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	9300      	str	r3, [sp, #0]
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f000 ffa8 	bl	800cac4 <xTaskCreate>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d001      	beq.n	800bb7e <osThreadNew+0x11a>
            hTask = NULL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bb7e:	693b      	ldr	r3, [r7, #16]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3728      	adds	r7, #40	@ 0x28
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af02      	add	r7, sp, #8
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <osThreadFlagsSet+0x1a>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	da03      	bge.n	800bbaa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800bba2:	f06f 0303 	mvn.w	r3, #3
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	e035      	b.n	800bc16 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800bbaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bbae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbb0:	f3ef 8305 	mrs	r3, IPSR
 800bbb4:	613b      	str	r3, [r7, #16]
  return(result);
 800bbb6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d01f      	beq.n	800bbfc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800bbc0:	f107 0308 	add.w	r3, r7, #8
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	2201      	movs	r2, #1
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6978      	ldr	r0, [r7, #20]
 800bbce:	f001 fe8b 	bl	800d8e8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800bbd2:	f107 030c 	add.w	r3, r7, #12
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	9200      	str	r2, [sp, #0]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2100      	movs	r1, #0
 800bbde:	6978      	ldr	r0, [r7, #20]
 800bbe0:	f001 fe82 	bl	800d8e8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d015      	beq.n	800bc16 <osThreadFlagsSet+0x8e>
 800bbea:	4b0d      	ldr	r3, [pc, #52]	@ (800bc20 <osThreadFlagsSet+0x98>)
 800bbec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	e00c      	b.n	800bc16 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	2201      	movs	r2, #1
 800bc00:	6839      	ldr	r1, [r7, #0]
 800bc02:	6978      	ldr	r0, [r7, #20]
 800bc04:	f001 fdae 	bl	800d764 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800bc08:	f107 030c 	add.w	r3, r7, #12
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2100      	movs	r1, #0
 800bc10:	6978      	ldr	r0, [r7, #20]
 800bc12:	f001 fda7 	bl	800d764 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800bc16:	68fb      	ldr	r3, [r7, #12]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	e000ed04 	.word	0xe000ed04

0800bc24 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b088      	sub	sp, #32
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc30:	f3ef 8305 	mrs	r3, IPSR
 800bc34:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc36:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d174      	bne.n	800bd26 <osMutexNew+0x102>
    if (attr != NULL) {
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d003      	beq.n	800bc4a <osMutexNew+0x26>
      type = attr->attr_bits;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	61bb      	str	r3, [r7, #24]
 800bc48:	e001      	b.n	800bc4e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	f003 0301 	and.w	r3, r3, #1
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <osMutexNew+0x3a>
      rmtx = 1U;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	617b      	str	r3, [r7, #20]
 800bc5c:	e001      	b.n	800bc62 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	f003 0308 	and.w	r3, r3, #8
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d15c      	bne.n	800bd26 <osMutexNew+0x102>
      mem = -1;
 800bc6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc70:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d015      	beq.n	800bca4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d006      	beq.n	800bc8e <osMutexNew+0x6a>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	2b4f      	cmp	r3, #79	@ 0x4f
 800bc86:	d902      	bls.n	800bc8e <osMutexNew+0x6a>
          mem = 1;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	613b      	str	r3, [r7, #16]
 800bc8c:	e00c      	b.n	800bca8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d108      	bne.n	800bca8 <osMutexNew+0x84>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d104      	bne.n	800bca8 <osMutexNew+0x84>
            mem = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	613b      	str	r3, [r7, #16]
 800bca2:	e001      	b.n	800bca8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d112      	bne.n	800bcd4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d007      	beq.n	800bcc4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	4619      	mov	r1, r3
 800bcba:	2004      	movs	r0, #4
 800bcbc:	f000 fa97 	bl	800c1ee <xQueueCreateMutexStatic>
 800bcc0:	61f8      	str	r0, [r7, #28]
 800bcc2:	e016      	b.n	800bcf2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	4619      	mov	r1, r3
 800bcca:	2001      	movs	r0, #1
 800bccc:	f000 fa8f 	bl	800c1ee <xQueueCreateMutexStatic>
 800bcd0:	61f8      	str	r0, [r7, #28]
 800bcd2:	e00e      	b.n	800bcf2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d10b      	bne.n	800bcf2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d004      	beq.n	800bcea <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800bce0:	2004      	movs	r0, #4
 800bce2:	f000 fa6c 	bl	800c1be <xQueueCreateMutex>
 800bce6:	61f8      	str	r0, [r7, #28]
 800bce8:	e003      	b.n	800bcf2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800bcea:	2001      	movs	r0, #1
 800bcec:	f000 fa67 	bl	800c1be <xQueueCreateMutex>
 800bcf0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00c      	beq.n	800bd12 <osMutexNew+0xee>
        if (attr != NULL) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d003      	beq.n	800bd06 <osMutexNew+0xe2>
          name = attr->name;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	e001      	b.n	800bd0a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800bd0a:	68f9      	ldr	r1, [r7, #12]
 800bd0c:	69f8      	ldr	r0, [r7, #28]
 800bd0e:	f000 fe1b 	bl	800c948 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d006      	beq.n	800bd26 <osMutexNew+0x102>
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	f043 0301 	orr.w	r3, r3, #1
 800bd24:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bd26:	69fb      	ldr	r3, [r7, #28]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3720      	adds	r7, #32
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4a07      	ldr	r2, [pc, #28]	@ (800bd5c <vApplicationGetIdleTaskMemory+0x2c>)
 800bd40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	4a06      	ldr	r2, [pc, #24]	@ (800bd60 <vApplicationGetIdleTaskMemory+0x30>)
 800bd46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2280      	movs	r2, #128	@ 0x80
 800bd4c:	601a      	str	r2, [r3, #0]
}
 800bd4e:	bf00      	nop
 800bd50:	3714      	adds	r7, #20
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	24001870 	.word	0x24001870
 800bd60:	24001918 	.word	0x24001918

0800bd64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	4a07      	ldr	r2, [pc, #28]	@ (800bd90 <vApplicationGetTimerTaskMemory+0x2c>)
 800bd74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	4a06      	ldr	r2, [pc, #24]	@ (800bd94 <vApplicationGetTimerTaskMemory+0x30>)
 800bd7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bd82:	601a      	str	r2, [r3, #0]
}
 800bd84:	bf00      	nop
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr
 800bd90:	24001b18 	.word	0x24001b18
 800bd94:	24001bc0 	.word	0x24001bc0

0800bd98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f103 0208 	add.w	r2, r3, #8
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f103 0208 	add.w	r2, r3, #8
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f103 0208 	add.w	r2, r3, #8
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b085      	sub	sp, #20
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
 800bdfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	689a      	ldr	r2, [r3, #8]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	1c5a      	adds	r2, r3, #1
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	601a      	str	r2, [r3, #0]
}
 800be2e:	bf00      	nop
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be3a:	b480      	push	{r7}
 800be3c:	b085      	sub	sp, #20
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be50:	d103      	bne.n	800be5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	60fb      	str	r3, [r7, #12]
 800be58:	e00c      	b.n	800be74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3308      	adds	r3, #8
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	e002      	b.n	800be68 <vListInsert+0x2e>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	429a      	cmp	r2, r3
 800be72:	d2f6      	bcs.n	800be62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	601a      	str	r2, [r3, #0]
}
 800bea0:	bf00      	nop
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	6892      	ldr	r2, [r2, #8]
 800bec2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6852      	ldr	r2, [r2, #4]
 800becc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d103      	bne.n	800bee0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689a      	ldr	r2, [r3, #8]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	1e5a      	subs	r2, r3, #1
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10b      	bne.n	800bf2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf26:	bf00      	nop
 800bf28:	bf00      	nop
 800bf2a:	e7fd      	b.n	800bf28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf2c:	f002 faa4 	bl	800e478 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf38:	68f9      	ldr	r1, [r7, #12]
 800bf3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bf3c:	fb01 f303 	mul.w	r3, r1, r3
 800bf40:	441a      	add	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	68f9      	ldr	r1, [r7, #12]
 800bf60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bf62:	fb01 f303 	mul.w	r3, r1, r3
 800bf66:	441a      	add	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	22ff      	movs	r2, #255	@ 0xff
 800bf70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	22ff      	movs	r2, #255	@ 0xff
 800bf78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d114      	bne.n	800bfac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d01a      	beq.n	800bfc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3310      	adds	r3, #16
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f001 f994 	bl	800d2bc <xTaskRemoveFromEventList>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d012      	beq.n	800bfc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfd0 <xQueueGenericReset+0xd0>)
 800bf9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	e009      	b.n	800bfc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	3310      	adds	r3, #16
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff fef1 	bl	800bd98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3324      	adds	r3, #36	@ 0x24
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7ff feec 	bl	800bd98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bfc0:	f002 fa8c 	bl	800e4dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bfc4:	2301      	movs	r3, #1
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	e000ed04 	.word	0xe000ed04

0800bfd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08e      	sub	sp, #56	@ 0x38
 800bfd8:	af02      	add	r7, sp, #8
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10b      	bne.n	800c000 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bffa:	bf00      	nop
 800bffc:	bf00      	nop
 800bffe:	e7fd      	b.n	800bffc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10b      	bne.n	800c01e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c018:	bf00      	nop
 800c01a:	bf00      	nop
 800c01c:	e7fd      	b.n	800c01a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <xQueueGenericCreateStatic+0x56>
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <xQueueGenericCreateStatic+0x5a>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e000      	b.n	800c030 <xQueueGenericCreateStatic+0x5c>
 800c02e:	2300      	movs	r3, #0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10b      	bne.n	800c04c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	623b      	str	r3, [r7, #32]
}
 800c046:	bf00      	nop
 800c048:	bf00      	nop
 800c04a:	e7fd      	b.n	800c048 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d102      	bne.n	800c058 <xQueueGenericCreateStatic+0x84>
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <xQueueGenericCreateStatic+0x88>
 800c058:	2301      	movs	r3, #1
 800c05a:	e000      	b.n	800c05e <xQueueGenericCreateStatic+0x8a>
 800c05c:	2300      	movs	r3, #0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10b      	bne.n	800c07a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	61fb      	str	r3, [r7, #28]
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop
 800c078:	e7fd      	b.n	800c076 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c07a:	2350      	movs	r3, #80	@ 0x50
 800c07c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	2b50      	cmp	r3, #80	@ 0x50
 800c082:	d00b      	beq.n	800c09c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c088:	f383 8811 	msr	BASEPRI, r3
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	61bb      	str	r3, [r7, #24]
}
 800c096:	bf00      	nop
 800c098:	bf00      	nop
 800c09a:	e7fd      	b.n	800c098 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c09c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00d      	beq.n	800c0c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c0b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	68b9      	ldr	r1, [r7, #8]
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f000 f840 	bl	800c144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3730      	adds	r7, #48	@ 0x30
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b08a      	sub	sp, #40	@ 0x28
 800c0d2:	af02      	add	r7, sp, #8
 800c0d4:	60f8      	str	r0, [r7, #12]
 800c0d6:	60b9      	str	r1, [r7, #8]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10b      	bne.n	800c0fa <xQueueGenericCreate+0x2c>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	613b      	str	r3, [r7, #16]
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop
 800c0f8:	e7fd      	b.n	800c0f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	fb02 f303 	mul.w	r3, r2, r3
 800c102:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	3350      	adds	r3, #80	@ 0x50
 800c108:	4618      	mov	r0, r3
 800c10a:	f002 fad7 	bl	800e6bc <pvPortMalloc>
 800c10e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d011      	beq.n	800c13a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	3350      	adds	r3, #80	@ 0x50
 800c11e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c128:	79fa      	ldrb	r2, [r7, #7]
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	4613      	mov	r3, r2
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	68b9      	ldr	r1, [r7, #8]
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f000 f805 	bl	800c144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c13a:	69bb      	ldr	r3, [r7, #24]
	}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d103      	bne.n	800c160 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	601a      	str	r2, [r3, #0]
 800c15e:	e002      	b.n	800c166 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c172:	2101      	movs	r1, #1
 800c174:	69b8      	ldr	r0, [r7, #24]
 800c176:	f7ff fec3 	bl	800bf00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	78fa      	ldrb	r2, [r7, #3]
 800c17e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c182:	bf00      	nop
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b082      	sub	sp, #8
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00e      	beq.n	800c1b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f837 	bl	800c224 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c1b6:	bf00      	nop
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b086      	sub	sp, #24
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	617b      	str	r3, [r7, #20]
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c1d0:	79fb      	ldrb	r3, [r7, #7]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	6939      	ldr	r1, [r7, #16]
 800c1d6:	6978      	ldr	r0, [r7, #20]
 800c1d8:	f7ff ff79 	bl	800c0ce <xQueueGenericCreate>
 800c1dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f7ff ffd3 	bl	800c18a <prvInitialiseMutex>

		return xNewQueue;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
	}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b088      	sub	sp, #32
 800c1f2:	af02      	add	r7, sp, #8
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	6039      	str	r1, [r7, #0]
 800c1f8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	617b      	str	r3, [r7, #20]
 800c1fe:	2300      	movs	r3, #0
 800c200:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c202:	79fb      	ldrb	r3, [r7, #7]
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2200      	movs	r2, #0
 800c20a:	6939      	ldr	r1, [r7, #16]
 800c20c:	6978      	ldr	r0, [r7, #20]
 800c20e:	f7ff fee1 	bl	800bfd4 <xQueueGenericCreateStatic>
 800c212:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f7ff ffb8 	bl	800c18a <prvInitialiseMutex>

		return xNewQueue;
 800c21a:	68fb      	ldr	r3, [r7, #12]
	}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3718      	adds	r7, #24
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08e      	sub	sp, #56	@ 0x38
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
 800c230:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c232:	2300      	movs	r3, #0
 800c234:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10b      	bne.n	800c258 <xQueueGenericSend+0x34>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c252:	bf00      	nop
 800c254:	bf00      	nop
 800c256:	e7fd      	b.n	800c254 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d103      	bne.n	800c266 <xQueueGenericSend+0x42>
 800c25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <xQueueGenericSend+0x46>
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <xQueueGenericSend+0x48>
 800c26a:	2300      	movs	r3, #0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10b      	bne.n	800c288 <xQueueGenericSend+0x64>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c282:	bf00      	nop
 800c284:	bf00      	nop
 800c286:	e7fd      	b.n	800c284 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d103      	bne.n	800c296 <xQueueGenericSend+0x72>
 800c28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c292:	2b01      	cmp	r3, #1
 800c294:	d101      	bne.n	800c29a <xQueueGenericSend+0x76>
 800c296:	2301      	movs	r3, #1
 800c298:	e000      	b.n	800c29c <xQueueGenericSend+0x78>
 800c29a:	2300      	movs	r3, #0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10b      	bne.n	800c2b8 <xQueueGenericSend+0x94>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	623b      	str	r3, [r7, #32]
}
 800c2b2:	bf00      	nop
 800c2b4:	bf00      	nop
 800c2b6:	e7fd      	b.n	800c2b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2b8:	f001 f9c6 	bl	800d648 <xTaskGetSchedulerState>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d102      	bne.n	800c2c8 <xQueueGenericSend+0xa4>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <xQueueGenericSend+0xa8>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e000      	b.n	800c2ce <xQueueGenericSend+0xaa>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10b      	bne.n	800c2ea <xQueueGenericSend+0xc6>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	61fb      	str	r3, [r7, #28]
}
 800c2e4:	bf00      	nop
 800c2e6:	bf00      	nop
 800c2e8:	e7fd      	b.n	800c2e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2ea:	f002 f8c5 	bl	800e478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d302      	bcc.n	800c300 <xQueueGenericSend+0xdc>
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d129      	bne.n	800c354 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c300:	683a      	ldr	r2, [r7, #0]
 800c302:	68b9      	ldr	r1, [r7, #8]
 800c304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c306:	f000 fa0f 	bl	800c728 <prvCopyDataToQueue>
 800c30a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c310:	2b00      	cmp	r3, #0
 800c312:	d010      	beq.n	800c336 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c316:	3324      	adds	r3, #36	@ 0x24
 800c318:	4618      	mov	r0, r3
 800c31a:	f000 ffcf 	bl	800d2bc <xTaskRemoveFromEventList>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d013      	beq.n	800c34c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c324:	4b3f      	ldr	r3, [pc, #252]	@ (800c424 <xQueueGenericSend+0x200>)
 800c326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	f3bf 8f6f 	isb	sy
 800c334:	e00a      	b.n	800c34c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d007      	beq.n	800c34c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c33c:	4b39      	ldr	r3, [pc, #228]	@ (800c424 <xQueueGenericSend+0x200>)
 800c33e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c34c:	f002 f8c6 	bl	800e4dc <vPortExitCritical>
				return pdPASS;
 800c350:	2301      	movs	r3, #1
 800c352:	e063      	b.n	800c41c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d103      	bne.n	800c362 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c35a:	f002 f8bf 	bl	800e4dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c35e:	2300      	movs	r3, #0
 800c360:	e05c      	b.n	800c41c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c364:	2b00      	cmp	r3, #0
 800c366:	d106      	bne.n	800c376 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c368:	f107 0314 	add.w	r3, r7, #20
 800c36c:	4618      	mov	r0, r3
 800c36e:	f001 f809 	bl	800d384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c372:	2301      	movs	r3, #1
 800c374:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c376:	f002 f8b1 	bl	800e4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c37a:	f000 fd71 	bl	800ce60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c37e:	f002 f87b 	bl	800e478 <vPortEnterCritical>
 800c382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c384:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c388:	b25b      	sxtb	r3, r3
 800c38a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c38e:	d103      	bne.n	800c398 <xQueueGenericSend+0x174>
 800c390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c392:	2200      	movs	r2, #0
 800c394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c39e:	b25b      	sxtb	r3, r3
 800c3a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3a4:	d103      	bne.n	800c3ae <xQueueGenericSend+0x18a>
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3ae:	f002 f895 	bl	800e4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3b2:	1d3a      	adds	r2, r7, #4
 800c3b4:	f107 0314 	add.w	r3, r7, #20
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fff8 	bl	800d3b0 <xTaskCheckForTimeOut>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d124      	bne.n	800c410 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c3c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3c8:	f000 faa6 	bl	800c918 <prvIsQueueFull>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d018      	beq.n	800c404 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d4:	3310      	adds	r3, #16
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	4611      	mov	r1, r2
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 ff1c 	bl	800d218 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c3e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3e2:	f000 fa31 	bl	800c848 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c3e6:	f000 fd49 	bl	800ce7c <xTaskResumeAll>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f47f af7c 	bne.w	800c2ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c424 <xQueueGenericSend+0x200>)
 800c3f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3f8:	601a      	str	r2, [r3, #0]
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	e772      	b.n	800c2ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c406:	f000 fa1f 	bl	800c848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c40a:	f000 fd37 	bl	800ce7c <xTaskResumeAll>
 800c40e:	e76c      	b.n	800c2ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c412:	f000 fa19 	bl	800c848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c416:	f000 fd31 	bl	800ce7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c41a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3738      	adds	r7, #56	@ 0x38
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	e000ed04 	.word	0xe000ed04

0800c428 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b090      	sub	sp, #64	@ 0x40
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
 800c434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10b      	bne.n	800c458 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	e7fd      	b.n	800c454 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d103      	bne.n	800c466 <xQueueGenericSendFromISR+0x3e>
 800c45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c462:	2b00      	cmp	r3, #0
 800c464:	d101      	bne.n	800c46a <xQueueGenericSendFromISR+0x42>
 800c466:	2301      	movs	r3, #1
 800c468:	e000      	b.n	800c46c <xQueueGenericSendFromISR+0x44>
 800c46a:	2300      	movs	r3, #0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d10b      	bne.n	800c488 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c482:	bf00      	nop
 800c484:	bf00      	nop
 800c486:	e7fd      	b.n	800c484 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	d103      	bne.n	800c496 <xQueueGenericSendFromISR+0x6e>
 800c48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c492:	2b01      	cmp	r3, #1
 800c494:	d101      	bne.n	800c49a <xQueueGenericSendFromISR+0x72>
 800c496:	2301      	movs	r3, #1
 800c498:	e000      	b.n	800c49c <xQueueGenericSendFromISR+0x74>
 800c49a:	2300      	movs	r3, #0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10b      	bne.n	800c4b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	623b      	str	r3, [r7, #32]
}
 800c4b2:	bf00      	nop
 800c4b4:	bf00      	nop
 800c4b6:	e7fd      	b.n	800c4b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4b8:	f002 f8be 	bl	800e638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c4bc:	f3ef 8211 	mrs	r2, BASEPRI
 800c4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	61fa      	str	r2, [r7, #28]
 800c4d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c4d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d302      	bcc.n	800c4ea <xQueueGenericSendFromISR+0xc2>
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d12f      	bne.n	800c54a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	68b9      	ldr	r1, [r7, #8]
 800c4fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c500:	f000 f912 	bl	800c728 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c504:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c50c:	d112      	bne.n	800c534 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c512:	2b00      	cmp	r3, #0
 800c514:	d016      	beq.n	800c544 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c518:	3324      	adds	r3, #36	@ 0x24
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 fece 	bl	800d2bc <xTaskRemoveFromEventList>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00e      	beq.n	800c544 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00b      	beq.n	800c544 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	e007      	b.n	800c544 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c534:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c538:	3301      	adds	r3, #1
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	b25a      	sxtb	r2, r3
 800c53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c544:	2301      	movs	r3, #1
 800c546:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c548:	e001      	b.n	800c54e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c54a:	2300      	movs	r3, #0
 800c54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c550:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c558:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3740      	adds	r7, #64	@ 0x40
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b08c      	sub	sp, #48	@ 0x30
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c570:	2300      	movs	r3, #0
 800c572:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10b      	bne.n	800c596 <xQueueReceive+0x32>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	623b      	str	r3, [r7, #32]
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	e7fd      	b.n	800c592 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d103      	bne.n	800c5a4 <xQueueReceive+0x40>
 800c59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <xQueueReceive+0x44>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e000      	b.n	800c5aa <xQueueReceive+0x46>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10b      	bne.n	800c5c6 <xQueueReceive+0x62>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	61fb      	str	r3, [r7, #28]
}
 800c5c0:	bf00      	nop
 800c5c2:	bf00      	nop
 800c5c4:	e7fd      	b.n	800c5c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5c6:	f001 f83f 	bl	800d648 <xTaskGetSchedulerState>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d102      	bne.n	800c5d6 <xQueueReceive+0x72>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d101      	bne.n	800c5da <xQueueReceive+0x76>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e000      	b.n	800c5dc <xQueueReceive+0x78>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10b      	bne.n	800c5f8 <xQueueReceive+0x94>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	61bb      	str	r3, [r7, #24]
}
 800c5f2:	bf00      	nop
 800c5f4:	bf00      	nop
 800c5f6:	e7fd      	b.n	800c5f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5f8:	f001 ff3e 	bl	800e478 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c600:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c604:	2b00      	cmp	r3, #0
 800c606:	d01f      	beq.n	800c648 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c608:	68b9      	ldr	r1, [r7, #8]
 800c60a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c60c:	f000 f8f6 	bl	800c7fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c612:	1e5a      	subs	r2, r3, #1
 800c614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c616:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00f      	beq.n	800c640 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c622:	3310      	adds	r3, #16
 800c624:	4618      	mov	r0, r3
 800c626:	f000 fe49 	bl	800d2bc <xTaskRemoveFromEventList>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d007      	beq.n	800c640 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c630:	4b3c      	ldr	r3, [pc, #240]	@ (800c724 <xQueueReceive+0x1c0>)
 800c632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c640:	f001 ff4c 	bl	800e4dc <vPortExitCritical>
				return pdPASS;
 800c644:	2301      	movs	r3, #1
 800c646:	e069      	b.n	800c71c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d103      	bne.n	800c656 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c64e:	f001 ff45 	bl	800e4dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c652:	2300      	movs	r3, #0
 800c654:	e062      	b.n	800c71c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d106      	bne.n	800c66a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c65c:	f107 0310 	add.w	r3, r7, #16
 800c660:	4618      	mov	r0, r3
 800c662:	f000 fe8f 	bl	800d384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c666:	2301      	movs	r3, #1
 800c668:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c66a:	f001 ff37 	bl	800e4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c66e:	f000 fbf7 	bl	800ce60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c672:	f001 ff01 	bl	800e478 <vPortEnterCritical>
 800c676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c67c:	b25b      	sxtb	r3, r3
 800c67e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c682:	d103      	bne.n	800c68c <xQueueReceive+0x128>
 800c684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c68e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c692:	b25b      	sxtb	r3, r3
 800c694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c698:	d103      	bne.n	800c6a2 <xQueueReceive+0x13e>
 800c69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6a2:	f001 ff1b 	bl	800e4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6a6:	1d3a      	adds	r2, r7, #4
 800c6a8:	f107 0310 	add.w	r3, r7, #16
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 fe7e 	bl	800d3b0 <xTaskCheckForTimeOut>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d123      	bne.n	800c702 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6bc:	f000 f916 	bl	800c8ec <prvIsQueueEmpty>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d017      	beq.n	800c6f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c8:	3324      	adds	r3, #36	@ 0x24
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 fda2 	bl	800d218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6d6:	f000 f8b7 	bl	800c848 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6da:	f000 fbcf 	bl	800ce7c <xTaskResumeAll>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d189      	bne.n	800c5f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c6e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c724 <xQueueReceive+0x1c0>)
 800c6e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ea:	601a      	str	r2, [r3, #0]
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	e780      	b.n	800c5f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c6f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6f8:	f000 f8a6 	bl	800c848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6fc:	f000 fbbe 	bl	800ce7c <xTaskResumeAll>
 800c700:	e77a      	b.n	800c5f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c704:	f000 f8a0 	bl	800c848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c708:	f000 fbb8 	bl	800ce7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c70c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c70e:	f000 f8ed 	bl	800c8ec <prvIsQueueEmpty>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	f43f af6f 	beq.w	800c5f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c71a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3730      	adds	r7, #48	@ 0x30
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	e000ed04 	.word	0xe000ed04

0800c728 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b086      	sub	sp, #24
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c734:	2300      	movs	r3, #0
 800c736:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c73c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10d      	bne.n	800c762 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d14d      	bne.n	800c7ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	4618      	mov	r0, r3
 800c754:	f000 ff96 	bl	800d684 <xTaskPriorityDisinherit>
 800c758:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	609a      	str	r2, [r3, #8]
 800c760:	e043      	b.n	800c7ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d119      	bne.n	800c79c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6858      	ldr	r0, [r3, #4]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c770:	461a      	mov	r2, r3
 800c772:	68b9      	ldr	r1, [r7, #8]
 800c774:	f005 fdd1 	bl	801231a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c780:	441a      	add	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d32b      	bcc.n	800c7ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	605a      	str	r2, [r3, #4]
 800c79a:	e026      	b.n	800c7ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	68d8      	ldr	r0, [r3, #12]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	68b9      	ldr	r1, [r7, #8]
 800c7a8:	f005 fdb7 	bl	801231a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	68da      	ldr	r2, [r3, #12]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7b4:	425b      	negs	r3, r3
 800c7b6:	441a      	add	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	68da      	ldr	r2, [r3, #12]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d207      	bcs.n	800c7d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	689a      	ldr	r2, [r3, #8]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7d0:	425b      	negs	r3, r3
 800c7d2:	441a      	add	r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d105      	bne.n	800c7ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d002      	beq.n	800c7ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	1c5a      	adds	r2, r3, #1
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c7f2:	697b      	ldr	r3, [r7, #20]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3718      	adds	r7, #24
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d018      	beq.n	800c840 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68da      	ldr	r2, [r3, #12]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c816:	441a      	add	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68da      	ldr	r2, [r3, #12]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	429a      	cmp	r2, r3
 800c826:	d303      	bcc.n	800c830 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	68d9      	ldr	r1, [r3, #12]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c838:	461a      	mov	r2, r3
 800c83a:	6838      	ldr	r0, [r7, #0]
 800c83c:	f005 fd6d 	bl	801231a <memcpy>
	}
}
 800c840:	bf00      	nop
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c850:	f001 fe12 	bl	800e478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c85a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c85c:	e011      	b.n	800c882 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c862:	2b00      	cmp	r3, #0
 800c864:	d012      	beq.n	800c88c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	3324      	adds	r3, #36	@ 0x24
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 fd26 	bl	800d2bc <xTaskRemoveFromEventList>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d001      	beq.n	800c87a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c876:	f000 fdff 	bl	800d478 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
 800c87c:	3b01      	subs	r3, #1
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c886:	2b00      	cmp	r3, #0
 800c888:	dce9      	bgt.n	800c85e <prvUnlockQueue+0x16>
 800c88a:	e000      	b.n	800c88e <prvUnlockQueue+0x46>
					break;
 800c88c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	22ff      	movs	r2, #255	@ 0xff
 800c892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c896:	f001 fe21 	bl	800e4dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c89a:	f001 fded 	bl	800e478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8a6:	e011      	b.n	800c8cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d012      	beq.n	800c8d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3310      	adds	r3, #16
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 fd01 	bl	800d2bc <xTaskRemoveFromEventList>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d001      	beq.n	800c8c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c8c0:	f000 fdda 	bl	800d478 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c8c4:	7bbb      	ldrb	r3, [r7, #14]
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	dce9      	bgt.n	800c8a8 <prvUnlockQueue+0x60>
 800c8d4:	e000      	b.n	800c8d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c8d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	22ff      	movs	r2, #255	@ 0xff
 800c8dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c8e0:	f001 fdfc 	bl	800e4dc <vPortExitCritical>
}
 800c8e4:	bf00      	nop
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8f4:	f001 fdc0 	bl	800e478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d102      	bne.n	800c906 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c900:	2301      	movs	r3, #1
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e001      	b.n	800c90a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c906:	2300      	movs	r3, #0
 800c908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c90a:	f001 fde7 	bl	800e4dc <vPortExitCritical>

	return xReturn;
 800c90e:	68fb      	ldr	r3, [r7, #12]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c920:	f001 fdaa 	bl	800e478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d102      	bne.n	800c936 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c930:	2301      	movs	r3, #1
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	e001      	b.n	800c93a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c936:	2300      	movs	r3, #0
 800c938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c93a:	f001 fdcf 	bl	800e4dc <vPortExitCritical>

	return xReturn;
 800c93e:	68fb      	ldr	r3, [r7, #12]
}
 800c940:	4618      	mov	r0, r3
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c952:	2300      	movs	r3, #0
 800c954:	60fb      	str	r3, [r7, #12]
 800c956:	e014      	b.n	800c982 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c958:	4a0f      	ldr	r2, [pc, #60]	@ (800c998 <vQueueAddToRegistry+0x50>)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d10b      	bne.n	800c97c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c964:	490c      	ldr	r1, [pc, #48]	@ (800c998 <vQueueAddToRegistry+0x50>)
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	683a      	ldr	r2, [r7, #0]
 800c96a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c96e:	4a0a      	ldr	r2, [pc, #40]	@ (800c998 <vQueueAddToRegistry+0x50>)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	00db      	lsls	r3, r3, #3
 800c974:	4413      	add	r3, r2
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c97a:	e006      	b.n	800c98a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	3301      	adds	r3, #1
 800c980:	60fb      	str	r3, [r7, #12]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2b07      	cmp	r3, #7
 800c986:	d9e7      	bls.n	800c958 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c988:	bf00      	nop
 800c98a:	bf00      	nop
 800c98c:	3714      	adds	r7, #20
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr
 800c996:	bf00      	nop
 800c998:	24001fc0 	.word	0x24001fc0

0800c99c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c9ac:	f001 fd64 	bl	800e478 <vPortEnterCritical>
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9b6:	b25b      	sxtb	r3, r3
 800c9b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9bc:	d103      	bne.n	800c9c6 <vQueueWaitForMessageRestricted+0x2a>
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9cc:	b25b      	sxtb	r3, r3
 800c9ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9d2:	d103      	bne.n	800c9dc <vQueueWaitForMessageRestricted+0x40>
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c9dc:	f001 fd7e 	bl	800e4dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d106      	bne.n	800c9f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	3324      	adds	r3, #36	@ 0x24
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 fc37 	bl	800d264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c9f6:	6978      	ldr	r0, [r7, #20]
 800c9f8:	f7ff ff26 	bl	800c848 <prvUnlockQueue>
	}
 800c9fc:	bf00      	nop
 800c9fe:	3718      	adds	r7, #24
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b08e      	sub	sp, #56	@ 0x38
 800ca08:	af04      	add	r7, sp, #16
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
 800ca10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ca12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d10b      	bne.n	800ca30 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ca18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca1c:	f383 8811 	msr	BASEPRI, r3
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	f3bf 8f4f 	dsb	sy
 800ca28:	623b      	str	r3, [r7, #32]
}
 800ca2a:	bf00      	nop
 800ca2c:	bf00      	nop
 800ca2e:	e7fd      	b.n	800ca2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ca30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10b      	bne.n	800ca4e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	61fb      	str	r3, [r7, #28]
}
 800ca48:	bf00      	nop
 800ca4a:	bf00      	nop
 800ca4c:	e7fd      	b.n	800ca4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca4e:	23a8      	movs	r3, #168	@ 0xa8
 800ca50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	2ba8      	cmp	r3, #168	@ 0xa8
 800ca56:	d00b      	beq.n	800ca70 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ca58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca5c:	f383 8811 	msr	BASEPRI, r3
 800ca60:	f3bf 8f6f 	isb	sy
 800ca64:	f3bf 8f4f 	dsb	sy
 800ca68:	61bb      	str	r3, [r7, #24]
}
 800ca6a:	bf00      	nop
 800ca6c:	bf00      	nop
 800ca6e:	e7fd      	b.n	800ca6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d01e      	beq.n	800cab6 <xTaskCreateStatic+0xb2>
 800ca78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d01b      	beq.n	800cab6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8a:	2202      	movs	r2, #2
 800ca8c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca90:	2300      	movs	r3, #0
 800ca92:	9303      	str	r3, [sp, #12]
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	9302      	str	r3, [sp, #8]
 800ca98:	f107 0314 	add.w	r3, r7, #20
 800ca9c:	9301      	str	r3, [sp, #4]
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa0:	9300      	str	r3, [sp, #0]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	68b9      	ldr	r1, [r7, #8]
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 f851 	bl	800cb50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cab0:	f000 f8f6 	bl	800cca0 <prvAddNewTaskToReadyList>
 800cab4:	e001      	b.n	800caba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800caba:	697b      	ldr	r3, [r7, #20]
	}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3728      	adds	r7, #40	@ 0x28
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b08c      	sub	sp, #48	@ 0x30
 800cac8:	af04      	add	r7, sp, #16
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	603b      	str	r3, [r7, #0]
 800cad0:	4613      	mov	r3, r2
 800cad2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cad4:	88fb      	ldrh	r3, [r7, #6]
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4618      	mov	r0, r3
 800cada:	f001 fdef 	bl	800e6bc <pvPortMalloc>
 800cade:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00e      	beq.n	800cb04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cae6:	20a8      	movs	r0, #168	@ 0xa8
 800cae8:	f001 fde8 	bl	800e6bc <pvPortMalloc>
 800caec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800caee:	69fb      	ldr	r3, [r7, #28]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d003      	beq.n	800cafc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	697a      	ldr	r2, [r7, #20]
 800caf8:	631a      	str	r2, [r3, #48]	@ 0x30
 800cafa:	e005      	b.n	800cb08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cafc:	6978      	ldr	r0, [r7, #20]
 800cafe:	f001 feab 	bl	800e858 <vPortFree>
 800cb02:	e001      	b.n	800cb08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cb04:	2300      	movs	r3, #0
 800cb06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d017      	beq.n	800cb3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb16:	88fa      	ldrh	r2, [r7, #6]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9303      	str	r3, [sp, #12]
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	9302      	str	r3, [sp, #8]
 800cb20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb22:	9301      	str	r3, [sp, #4]
 800cb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	68b9      	ldr	r1, [r7, #8]
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 f80f 	bl	800cb50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb32:	69f8      	ldr	r0, [r7, #28]
 800cb34:	f000 f8b4 	bl	800cca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	61bb      	str	r3, [r7, #24]
 800cb3c:	e002      	b.n	800cb44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb44:	69bb      	ldr	r3, [r7, #24]
	}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3720      	adds	r7, #32
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
	...

0800cb50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
 800cb5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	461a      	mov	r2, r3
 800cb68:	21a5      	movs	r1, #165	@ 0xa5
 800cb6a:	f005 faf5 	bl	8012158 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb72:	6879      	ldr	r1, [r7, #4]
 800cb74:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cb78:	440b      	add	r3, r1
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	4413      	add	r3, r2
 800cb7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	f023 0307 	bic.w	r3, r3, #7
 800cb86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	f003 0307 	and.w	r3, r3, #7
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00b      	beq.n	800cbaa <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	617b      	str	r3, [r7, #20]
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop
 800cba8:	e7fd      	b.n	800cba6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d01f      	beq.n	800cbf0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	61fb      	str	r3, [r7, #28]
 800cbb4:	e012      	b.n	800cbdc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	4413      	add	r3, r2
 800cbbc:	7819      	ldrb	r1, [r3, #0]
 800cbbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	3334      	adds	r3, #52	@ 0x34
 800cbc6:	460a      	mov	r2, r1
 800cbc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	4413      	add	r3, r2
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d006      	beq.n	800cbe4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	61fb      	str	r3, [r7, #28]
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	2b0f      	cmp	r3, #15
 800cbe0:	d9e9      	bls.n	800cbb6 <prvInitialiseNewTask+0x66>
 800cbe2:	e000      	b.n	800cbe6 <prvInitialiseNewTask+0x96>
			{
				break;
 800cbe4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cbee:	e003      	b.n	800cbf8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfa:	2b37      	cmp	r3, #55	@ 0x37
 800cbfc:	d901      	bls.n	800cc02 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbfe:	2337      	movs	r3, #55	@ 0x37
 800cc00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cc08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc0c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc10:	2200      	movs	r2, #0
 800cc12:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	3304      	adds	r3, #4
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7ff f8dd 	bl	800bdd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc20:	3318      	adds	r3, #24
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7ff f8d8 	bl	800bdd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc40:	2200      	movs	r2, #0
 800cc42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc50:	3354      	adds	r3, #84	@ 0x54
 800cc52:	224c      	movs	r2, #76	@ 0x4c
 800cc54:	2100      	movs	r1, #0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f005 fa7e 	bl	8012158 <memset>
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5e:	4a0d      	ldr	r2, [pc, #52]	@ (800cc94 <prvInitialiseNewTask+0x144>)
 800cc60:	659a      	str	r2, [r3, #88]	@ 0x58
 800cc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc64:	4a0c      	ldr	r2, [pc, #48]	@ (800cc98 <prvInitialiseNewTask+0x148>)
 800cc66:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6a:	4a0c      	ldr	r2, [pc, #48]	@ (800cc9c <prvInitialiseNewTask+0x14c>)
 800cc6c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc6e:	683a      	ldr	r2, [r7, #0]
 800cc70:	68f9      	ldr	r1, [r7, #12]
 800cc72:	69b8      	ldr	r0, [r7, #24]
 800cc74:	f001 facc 	bl	800e210 <pxPortInitialiseStack>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc8a:	bf00      	nop
 800cc8c:	3720      	adds	r7, #32
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	2403339c 	.word	0x2403339c
 800cc98:	24033404 	.word	0x24033404
 800cc9c:	2403346c 	.word	0x2403346c

0800cca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cca8:	f001 fbe6 	bl	800e478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ccac:	4b2d      	ldr	r3, [pc, #180]	@ (800cd64 <prvAddNewTaskToReadyList+0xc4>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	4a2c      	ldr	r2, [pc, #176]	@ (800cd64 <prvAddNewTaskToReadyList+0xc4>)
 800ccb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ccb6:	4b2c      	ldr	r3, [pc, #176]	@ (800cd68 <prvAddNewTaskToReadyList+0xc8>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d109      	bne.n	800ccd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ccbe:	4a2a      	ldr	r2, [pc, #168]	@ (800cd68 <prvAddNewTaskToReadyList+0xc8>)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ccc4:	4b27      	ldr	r3, [pc, #156]	@ (800cd64 <prvAddNewTaskToReadyList+0xc4>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d110      	bne.n	800ccee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cccc:	f000 fbf8 	bl	800d4c0 <prvInitialiseTaskLists>
 800ccd0:	e00d      	b.n	800ccee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ccd2:	4b26      	ldr	r3, [pc, #152]	@ (800cd6c <prvAddNewTaskToReadyList+0xcc>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d109      	bne.n	800ccee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ccda:	4b23      	ldr	r3, [pc, #140]	@ (800cd68 <prvAddNewTaskToReadyList+0xc8>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d802      	bhi.n	800ccee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cce8:	4a1f      	ldr	r2, [pc, #124]	@ (800cd68 <prvAddNewTaskToReadyList+0xc8>)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ccee:	4b20      	ldr	r3, [pc, #128]	@ (800cd70 <prvAddNewTaskToReadyList+0xd0>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	4a1e      	ldr	r2, [pc, #120]	@ (800cd70 <prvAddNewTaskToReadyList+0xd0>)
 800ccf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ccf8:	4b1d      	ldr	r3, [pc, #116]	@ (800cd70 <prvAddNewTaskToReadyList+0xd0>)
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd04:	4b1b      	ldr	r3, [pc, #108]	@ (800cd74 <prvAddNewTaskToReadyList+0xd4>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d903      	bls.n	800cd14 <prvAddNewTaskToReadyList+0x74>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd10:	4a18      	ldr	r2, [pc, #96]	@ (800cd74 <prvAddNewTaskToReadyList+0xd4>)
 800cd12:	6013      	str	r3, [r2, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd18:	4613      	mov	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4413      	add	r3, r2
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	4a15      	ldr	r2, [pc, #84]	@ (800cd78 <prvAddNewTaskToReadyList+0xd8>)
 800cd22:	441a      	add	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	3304      	adds	r3, #4
 800cd28:	4619      	mov	r1, r3
 800cd2a:	4610      	mov	r0, r2
 800cd2c:	f7ff f861 	bl	800bdf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cd30:	f001 fbd4 	bl	800e4dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cd34:	4b0d      	ldr	r3, [pc, #52]	@ (800cd6c <prvAddNewTaskToReadyList+0xcc>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00e      	beq.n	800cd5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd3c:	4b0a      	ldr	r3, [pc, #40]	@ (800cd68 <prvAddNewTaskToReadyList+0xc8>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d207      	bcs.n	800cd5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd4a:	4b0c      	ldr	r3, [pc, #48]	@ (800cd7c <prvAddNewTaskToReadyList+0xdc>)
 800cd4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	240024d4 	.word	0x240024d4
 800cd68:	24002000 	.word	0x24002000
 800cd6c:	240024e0 	.word	0x240024e0
 800cd70:	240024f0 	.word	0x240024f0
 800cd74:	240024dc 	.word	0x240024dc
 800cd78:	24002004 	.word	0x24002004
 800cd7c:	e000ed04 	.word	0xe000ed04

0800cd80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b08a      	sub	sp, #40	@ 0x28
 800cd84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd8e:	463a      	mov	r2, r7
 800cd90:	1d39      	adds	r1, r7, #4
 800cd92:	f107 0308 	add.w	r3, r7, #8
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe ffca 	bl	800bd30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd9c:	6839      	ldr	r1, [r7, #0]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	9202      	str	r2, [sp, #8]
 800cda4:	9301      	str	r3, [sp, #4]
 800cda6:	2300      	movs	r3, #0
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	2300      	movs	r3, #0
 800cdac:	460a      	mov	r2, r1
 800cdae:	4924      	ldr	r1, [pc, #144]	@ (800ce40 <vTaskStartScheduler+0xc0>)
 800cdb0:	4824      	ldr	r0, [pc, #144]	@ (800ce44 <vTaskStartScheduler+0xc4>)
 800cdb2:	f7ff fe27 	bl	800ca04 <xTaskCreateStatic>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	4a23      	ldr	r2, [pc, #140]	@ (800ce48 <vTaskStartScheduler+0xc8>)
 800cdba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cdbc:	4b22      	ldr	r3, [pc, #136]	@ (800ce48 <vTaskStartScheduler+0xc8>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	617b      	str	r3, [r7, #20]
 800cdc8:	e001      	b.n	800cdce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d102      	bne.n	800cdda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cdd4:	f000 fec2 	bl	800db5c <xTimerCreateTimerTask>
 800cdd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d11b      	bne.n	800ce18 <vTaskStartScheduler+0x98>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	613b      	str	r3, [r7, #16]
}
 800cdf2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cdf4:	4b15      	ldr	r3, [pc, #84]	@ (800ce4c <vTaskStartScheduler+0xcc>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	3354      	adds	r3, #84	@ 0x54
 800cdfa:	4a15      	ldr	r2, [pc, #84]	@ (800ce50 <vTaskStartScheduler+0xd0>)
 800cdfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cdfe:	4b15      	ldr	r3, [pc, #84]	@ (800ce54 <vTaskStartScheduler+0xd4>)
 800ce00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce06:	4b14      	ldr	r3, [pc, #80]	@ (800ce58 <vTaskStartScheduler+0xd8>)
 800ce08:	2201      	movs	r2, #1
 800ce0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce0c:	4b13      	ldr	r3, [pc, #76]	@ (800ce5c <vTaskStartScheduler+0xdc>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce12:	f001 fa8d 	bl	800e330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce16:	e00f      	b.n	800ce38 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce1e:	d10b      	bne.n	800ce38 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ce20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	60fb      	str	r3, [r7, #12]
}
 800ce32:	bf00      	nop
 800ce34:	bf00      	nop
 800ce36:	e7fd      	b.n	800ce34 <vTaskStartScheduler+0xb4>
}
 800ce38:	bf00      	nop
 800ce3a:	3718      	adds	r7, #24
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	0801269c 	.word	0x0801269c
 800ce44:	0800d491 	.word	0x0800d491
 800ce48:	240024f8 	.word	0x240024f8
 800ce4c:	24002000 	.word	0x24002000
 800ce50:	2400139c 	.word	0x2400139c
 800ce54:	240024f4 	.word	0x240024f4
 800ce58:	240024e0 	.word	0x240024e0
 800ce5c:	240024d8 	.word	0x240024d8

0800ce60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce60:	b480      	push	{r7}
 800ce62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce64:	4b04      	ldr	r3, [pc, #16]	@ (800ce78 <vTaskSuspendAll+0x18>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	4a03      	ldr	r2, [pc, #12]	@ (800ce78 <vTaskSuspendAll+0x18>)
 800ce6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce6e:	bf00      	nop
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	240024fc 	.word	0x240024fc

0800ce7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce82:	2300      	movs	r3, #0
 800ce84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce86:	2300      	movs	r3, #0
 800ce88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce8a:	4b42      	ldr	r3, [pc, #264]	@ (800cf94 <xTaskResumeAll+0x118>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10b      	bne.n	800ceaa <xTaskResumeAll+0x2e>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	603b      	str	r3, [r7, #0]
}
 800cea4:	bf00      	nop
 800cea6:	bf00      	nop
 800cea8:	e7fd      	b.n	800cea6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ceaa:	f001 fae5 	bl	800e478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ceae:	4b39      	ldr	r3, [pc, #228]	@ (800cf94 <xTaskResumeAll+0x118>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	4a37      	ldr	r2, [pc, #220]	@ (800cf94 <xTaskResumeAll+0x118>)
 800ceb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ceb8:	4b36      	ldr	r3, [pc, #216]	@ (800cf94 <xTaskResumeAll+0x118>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d162      	bne.n	800cf86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cec0:	4b35      	ldr	r3, [pc, #212]	@ (800cf98 <xTaskResumeAll+0x11c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d05e      	beq.n	800cf86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cec8:	e02f      	b.n	800cf2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceca:	4b34      	ldr	r3, [pc, #208]	@ (800cf9c <xTaskResumeAll+0x120>)
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3318      	adds	r3, #24
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fe ffe8 	bl	800beac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3304      	adds	r3, #4
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fe ffe3 	bl	800beac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceea:	4b2d      	ldr	r3, [pc, #180]	@ (800cfa0 <xTaskResumeAll+0x124>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d903      	bls.n	800cefa <xTaskResumeAll+0x7e>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef6:	4a2a      	ldr	r2, [pc, #168]	@ (800cfa0 <xTaskResumeAll+0x124>)
 800cef8:	6013      	str	r3, [r2, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cefe:	4613      	mov	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4a27      	ldr	r2, [pc, #156]	@ (800cfa4 <xTaskResumeAll+0x128>)
 800cf08:	441a      	add	r2, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	4619      	mov	r1, r3
 800cf10:	4610      	mov	r0, r2
 800cf12:	f7fe ff6e 	bl	800bdf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf1a:	4b23      	ldr	r3, [pc, #140]	@ (800cfa8 <xTaskResumeAll+0x12c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d302      	bcc.n	800cf2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cf24:	4b21      	ldr	r3, [pc, #132]	@ (800cfac <xTaskResumeAll+0x130>)
 800cf26:	2201      	movs	r2, #1
 800cf28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf2a:	4b1c      	ldr	r3, [pc, #112]	@ (800cf9c <xTaskResumeAll+0x120>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1cb      	bne.n	800ceca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d001      	beq.n	800cf3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf38:	f000 fb66 	bl	800d608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cf3c:	4b1c      	ldr	r3, [pc, #112]	@ (800cfb0 <xTaskResumeAll+0x134>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d010      	beq.n	800cf6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf48:	f000 f846 	bl	800cfd8 <xTaskIncrementTick>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cf52:	4b16      	ldr	r3, [pc, #88]	@ (800cfac <xTaskResumeAll+0x130>)
 800cf54:	2201      	movs	r2, #1
 800cf56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1f1      	bne.n	800cf48 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cf64:	4b12      	ldr	r3, [pc, #72]	@ (800cfb0 <xTaskResumeAll+0x134>)
 800cf66:	2200      	movs	r2, #0
 800cf68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf6a:	4b10      	ldr	r3, [pc, #64]	@ (800cfac <xTaskResumeAll+0x130>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d009      	beq.n	800cf86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf72:	2301      	movs	r3, #1
 800cf74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf76:	4b0f      	ldr	r3, [pc, #60]	@ (800cfb4 <xTaskResumeAll+0x138>)
 800cf78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf86:	f001 faa9 	bl	800e4dc <vPortExitCritical>

	return xAlreadyYielded;
 800cf8a:	68bb      	ldr	r3, [r7, #8]
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	240024fc 	.word	0x240024fc
 800cf98:	240024d4 	.word	0x240024d4
 800cf9c:	24002494 	.word	0x24002494
 800cfa0:	240024dc 	.word	0x240024dc
 800cfa4:	24002004 	.word	0x24002004
 800cfa8:	24002000 	.word	0x24002000
 800cfac:	240024e8 	.word	0x240024e8
 800cfb0:	240024e4 	.word	0x240024e4
 800cfb4:	e000ed04 	.word	0xe000ed04

0800cfb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cfbe:	4b05      	ldr	r3, [pc, #20]	@ (800cfd4 <xTaskGetTickCount+0x1c>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cfc4:	687b      	ldr	r3, [r7, #4]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	240024d8 	.word	0x240024d8

0800cfd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b086      	sub	sp, #24
 800cfdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfe2:	4b4f      	ldr	r3, [pc, #316]	@ (800d120 <xTaskIncrementTick+0x148>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f040 8090 	bne.w	800d10c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfec:	4b4d      	ldr	r3, [pc, #308]	@ (800d124 <xTaskIncrementTick+0x14c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	3301      	adds	r3, #1
 800cff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cff4:	4a4b      	ldr	r2, [pc, #300]	@ (800d124 <xTaskIncrementTick+0x14c>)
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d121      	bne.n	800d044 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d000:	4b49      	ldr	r3, [pc, #292]	@ (800d128 <xTaskIncrementTick+0x150>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00b      	beq.n	800d022 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00e:	f383 8811 	msr	BASEPRI, r3
 800d012:	f3bf 8f6f 	isb	sy
 800d016:	f3bf 8f4f 	dsb	sy
 800d01a:	603b      	str	r3, [r7, #0]
}
 800d01c:	bf00      	nop
 800d01e:	bf00      	nop
 800d020:	e7fd      	b.n	800d01e <xTaskIncrementTick+0x46>
 800d022:	4b41      	ldr	r3, [pc, #260]	@ (800d128 <xTaskIncrementTick+0x150>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	60fb      	str	r3, [r7, #12]
 800d028:	4b40      	ldr	r3, [pc, #256]	@ (800d12c <xTaskIncrementTick+0x154>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a3e      	ldr	r2, [pc, #248]	@ (800d128 <xTaskIncrementTick+0x150>)
 800d02e:	6013      	str	r3, [r2, #0]
 800d030:	4a3e      	ldr	r2, [pc, #248]	@ (800d12c <xTaskIncrementTick+0x154>)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	4b3e      	ldr	r3, [pc, #248]	@ (800d130 <xTaskIncrementTick+0x158>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	3301      	adds	r3, #1
 800d03c:	4a3c      	ldr	r2, [pc, #240]	@ (800d130 <xTaskIncrementTick+0x158>)
 800d03e:	6013      	str	r3, [r2, #0]
 800d040:	f000 fae2 	bl	800d608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d044:	4b3b      	ldr	r3, [pc, #236]	@ (800d134 <xTaskIncrementTick+0x15c>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d349      	bcc.n	800d0e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d04e:	4b36      	ldr	r3, [pc, #216]	@ (800d128 <xTaskIncrementTick+0x150>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d104      	bne.n	800d062 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d058:	4b36      	ldr	r3, [pc, #216]	@ (800d134 <xTaskIncrementTick+0x15c>)
 800d05a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d05e:	601a      	str	r2, [r3, #0]
					break;
 800d060:	e03f      	b.n	800d0e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d062:	4b31      	ldr	r3, [pc, #196]	@ (800d128 <xTaskIncrementTick+0x150>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	429a      	cmp	r2, r3
 800d078:	d203      	bcs.n	800d082 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d07a:	4a2e      	ldr	r2, [pc, #184]	@ (800d134 <xTaskIncrementTick+0x15c>)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d080:	e02f      	b.n	800d0e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	3304      	adds	r3, #4
 800d086:	4618      	mov	r0, r3
 800d088:	f7fe ff10 	bl	800beac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d090:	2b00      	cmp	r3, #0
 800d092:	d004      	beq.n	800d09e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	3318      	adds	r3, #24
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fe ff07 	bl	800beac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0a2:	4b25      	ldr	r3, [pc, #148]	@ (800d138 <xTaskIncrementTick+0x160>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d903      	bls.n	800d0b2 <xTaskIncrementTick+0xda>
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ae:	4a22      	ldr	r2, [pc, #136]	@ (800d138 <xTaskIncrementTick+0x160>)
 800d0b0:	6013      	str	r3, [r2, #0]
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4a1f      	ldr	r2, [pc, #124]	@ (800d13c <xTaskIncrementTick+0x164>)
 800d0c0:	441a      	add	r2, r3
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	3304      	adds	r3, #4
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	f7fe fe92 	bl	800bdf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0d2:	4b1b      	ldr	r3, [pc, #108]	@ (800d140 <xTaskIncrementTick+0x168>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d3b8      	bcc.n	800d04e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0e0:	e7b5      	b.n	800d04e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d0e2:	4b17      	ldr	r3, [pc, #92]	@ (800d140 <xTaskIncrementTick+0x168>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0e8:	4914      	ldr	r1, [pc, #80]	@ (800d13c <xTaskIncrementTick+0x164>)
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	440b      	add	r3, r1
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d901      	bls.n	800d0fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d0fe:	4b11      	ldr	r3, [pc, #68]	@ (800d144 <xTaskIncrementTick+0x16c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d007      	beq.n	800d116 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d106:	2301      	movs	r3, #1
 800d108:	617b      	str	r3, [r7, #20]
 800d10a:	e004      	b.n	800d116 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d10c:	4b0e      	ldr	r3, [pc, #56]	@ (800d148 <xTaskIncrementTick+0x170>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	3301      	adds	r3, #1
 800d112:	4a0d      	ldr	r2, [pc, #52]	@ (800d148 <xTaskIncrementTick+0x170>)
 800d114:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d116:	697b      	ldr	r3, [r7, #20]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3718      	adds	r7, #24
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	240024fc 	.word	0x240024fc
 800d124:	240024d8 	.word	0x240024d8
 800d128:	2400248c 	.word	0x2400248c
 800d12c:	24002490 	.word	0x24002490
 800d130:	240024ec 	.word	0x240024ec
 800d134:	240024f4 	.word	0x240024f4
 800d138:	240024dc 	.word	0x240024dc
 800d13c:	24002004 	.word	0x24002004
 800d140:	24002000 	.word	0x24002000
 800d144:	240024e8 	.word	0x240024e8
 800d148:	240024e4 	.word	0x240024e4

0800d14c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d152:	4b2b      	ldr	r3, [pc, #172]	@ (800d200 <vTaskSwitchContext+0xb4>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d003      	beq.n	800d162 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d15a:	4b2a      	ldr	r3, [pc, #168]	@ (800d204 <vTaskSwitchContext+0xb8>)
 800d15c:	2201      	movs	r2, #1
 800d15e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d160:	e047      	b.n	800d1f2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d162:	4b28      	ldr	r3, [pc, #160]	@ (800d204 <vTaskSwitchContext+0xb8>)
 800d164:	2200      	movs	r2, #0
 800d166:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d168:	4b27      	ldr	r3, [pc, #156]	@ (800d208 <vTaskSwitchContext+0xbc>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	60fb      	str	r3, [r7, #12]
 800d16e:	e011      	b.n	800d194 <vTaskSwitchContext+0x48>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10b      	bne.n	800d18e <vTaskSwitchContext+0x42>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	607b      	str	r3, [r7, #4]
}
 800d188:	bf00      	nop
 800d18a:	bf00      	nop
 800d18c:	e7fd      	b.n	800d18a <vTaskSwitchContext+0x3e>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	3b01      	subs	r3, #1
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	491d      	ldr	r1, [pc, #116]	@ (800d20c <vTaskSwitchContext+0xc0>)
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	4613      	mov	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4413      	add	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	440b      	add	r3, r1
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d0e3      	beq.n	800d170 <vTaskSwitchContext+0x24>
 800d1a8:	68fa      	ldr	r2, [r7, #12]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	4413      	add	r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4a16      	ldr	r2, [pc, #88]	@ (800d20c <vTaskSwitchContext+0xc0>)
 800d1b4:	4413      	add	r3, r2
 800d1b6:	60bb      	str	r3, [r7, #8]
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	605a      	str	r2, [r3, #4]
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	3308      	adds	r3, #8
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d104      	bne.n	800d1d8 <vTaskSwitchContext+0x8c>
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	605a      	str	r2, [r3, #4]
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	4a0c      	ldr	r2, [pc, #48]	@ (800d210 <vTaskSwitchContext+0xc4>)
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	4a09      	ldr	r2, [pc, #36]	@ (800d208 <vTaskSwitchContext+0xbc>)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d1e8:	4b09      	ldr	r3, [pc, #36]	@ (800d210 <vTaskSwitchContext+0xc4>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3354      	adds	r3, #84	@ 0x54
 800d1ee:	4a09      	ldr	r2, [pc, #36]	@ (800d214 <vTaskSwitchContext+0xc8>)
 800d1f0:	6013      	str	r3, [r2, #0]
}
 800d1f2:	bf00      	nop
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	240024fc 	.word	0x240024fc
 800d204:	240024e8 	.word	0x240024e8
 800d208:	240024dc 	.word	0x240024dc
 800d20c:	24002004 	.word	0x24002004
 800d210:	24002000 	.word	0x24002000
 800d214:	2400139c 	.word	0x2400139c

0800d218 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10b      	bne.n	800d240 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	60fb      	str	r3, [r7, #12]
}
 800d23a:	bf00      	nop
 800d23c:	bf00      	nop
 800d23e:	e7fd      	b.n	800d23c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d240:	4b07      	ldr	r3, [pc, #28]	@ (800d260 <vTaskPlaceOnEventList+0x48>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3318      	adds	r3, #24
 800d246:	4619      	mov	r1, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7fe fdf6 	bl	800be3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d24e:	2101      	movs	r1, #1
 800d250:	6838      	ldr	r0, [r7, #0]
 800d252:	f000 fc2f 	bl	800dab4 <prvAddCurrentTaskToDelayedList>
}
 800d256:	bf00      	nop
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	24002000 	.word	0x24002000

0800d264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10b      	bne.n	800d28e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	617b      	str	r3, [r7, #20]
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	e7fd      	b.n	800d28a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d28e:	4b0a      	ldr	r3, [pc, #40]	@ (800d2b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3318      	adds	r3, #24
 800d294:	4619      	mov	r1, r3
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f7fe fdab 	bl	800bdf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d002      	beq.n	800d2a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d2a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d2a8:	6879      	ldr	r1, [r7, #4]
 800d2aa:	68b8      	ldr	r0, [r7, #8]
 800d2ac:	f000 fc02 	bl	800dab4 <prvAddCurrentTaskToDelayedList>
	}
 800d2b0:	bf00      	nop
 800d2b2:	3718      	adds	r7, #24
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	24002000 	.word	0x24002000

0800d2bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d10b      	bne.n	800d2ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	60fb      	str	r3, [r7, #12]
}
 800d2e4:	bf00      	nop
 800d2e6:	bf00      	nop
 800d2e8:	e7fd      	b.n	800d2e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	3318      	adds	r3, #24
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe fddc 	bl	800beac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2f4:	4b1d      	ldr	r3, [pc, #116]	@ (800d36c <xTaskRemoveFromEventList+0xb0>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d11d      	bne.n	800d338 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	3304      	adds	r3, #4
 800d300:	4618      	mov	r0, r3
 800d302:	f7fe fdd3 	bl	800beac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d30a:	4b19      	ldr	r3, [pc, #100]	@ (800d370 <xTaskRemoveFromEventList+0xb4>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d903      	bls.n	800d31a <xTaskRemoveFromEventList+0x5e>
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d316:	4a16      	ldr	r2, [pc, #88]	@ (800d370 <xTaskRemoveFromEventList+0xb4>)
 800d318:	6013      	str	r3, [r2, #0]
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d31e:	4613      	mov	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4413      	add	r3, r2
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4a13      	ldr	r2, [pc, #76]	@ (800d374 <xTaskRemoveFromEventList+0xb8>)
 800d328:	441a      	add	r2, r3
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	3304      	adds	r3, #4
 800d32e:	4619      	mov	r1, r3
 800d330:	4610      	mov	r0, r2
 800d332:	f7fe fd5e 	bl	800bdf2 <vListInsertEnd>
 800d336:	e005      	b.n	800d344 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	3318      	adds	r3, #24
 800d33c:	4619      	mov	r1, r3
 800d33e:	480e      	ldr	r0, [pc, #56]	@ (800d378 <xTaskRemoveFromEventList+0xbc>)
 800d340:	f7fe fd57 	bl	800bdf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d348:	4b0c      	ldr	r3, [pc, #48]	@ (800d37c <xTaskRemoveFromEventList+0xc0>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d34e:	429a      	cmp	r2, r3
 800d350:	d905      	bls.n	800d35e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d352:	2301      	movs	r3, #1
 800d354:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d356:	4b0a      	ldr	r3, [pc, #40]	@ (800d380 <xTaskRemoveFromEventList+0xc4>)
 800d358:	2201      	movs	r2, #1
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	e001      	b.n	800d362 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d35e:	2300      	movs	r3, #0
 800d360:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d362:	697b      	ldr	r3, [r7, #20]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3718      	adds	r7, #24
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	240024fc 	.word	0x240024fc
 800d370:	240024dc 	.word	0x240024dc
 800d374:	24002004 	.word	0x24002004
 800d378:	24002494 	.word	0x24002494
 800d37c:	24002000 	.word	0x24002000
 800d380:	240024e8 	.word	0x240024e8

0800d384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d38c:	4b06      	ldr	r3, [pc, #24]	@ (800d3a8 <vTaskInternalSetTimeOutState+0x24>)
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d394:	4b05      	ldr	r3, [pc, #20]	@ (800d3ac <vTaskInternalSetTimeOutState+0x28>)
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	605a      	str	r2, [r3, #4]
}
 800d39c:	bf00      	nop
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr
 800d3a8:	240024ec 	.word	0x240024ec
 800d3ac:	240024d8 	.word	0x240024d8

0800d3b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b088      	sub	sp, #32
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d10b      	bne.n	800d3d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	613b      	str	r3, [r7, #16]
}
 800d3d2:	bf00      	nop
 800d3d4:	bf00      	nop
 800d3d6:	e7fd      	b.n	800d3d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10b      	bne.n	800d3f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	60fb      	str	r3, [r7, #12]
}
 800d3f0:	bf00      	nop
 800d3f2:	bf00      	nop
 800d3f4:	e7fd      	b.n	800d3f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d3f6:	f001 f83f 	bl	800e478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d3fa:	4b1d      	ldr	r3, [pc, #116]	@ (800d470 <xTaskCheckForTimeOut+0xc0>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	69ba      	ldr	r2, [r7, #24]
 800d406:	1ad3      	subs	r3, r2, r3
 800d408:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d412:	d102      	bne.n	800d41a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d414:	2300      	movs	r3, #0
 800d416:	61fb      	str	r3, [r7, #28]
 800d418:	e023      	b.n	800d462 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	4b15      	ldr	r3, [pc, #84]	@ (800d474 <xTaskCheckForTimeOut+0xc4>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	429a      	cmp	r2, r3
 800d424:	d007      	beq.n	800d436 <xTaskCheckForTimeOut+0x86>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	69ba      	ldr	r2, [r7, #24]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d302      	bcc.n	800d436 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d430:	2301      	movs	r3, #1
 800d432:	61fb      	str	r3, [r7, #28]
 800d434:	e015      	b.n	800d462 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	697a      	ldr	r2, [r7, #20]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d20b      	bcs.n	800d458 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	1ad2      	subs	r2, r2, r3
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7ff ff99 	bl	800d384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d452:	2300      	movs	r3, #0
 800d454:	61fb      	str	r3, [r7, #28]
 800d456:	e004      	b.n	800d462 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	2200      	movs	r2, #0
 800d45c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d45e:	2301      	movs	r3, #1
 800d460:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d462:	f001 f83b 	bl	800e4dc <vPortExitCritical>

	return xReturn;
 800d466:	69fb      	ldr	r3, [r7, #28]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3720      	adds	r7, #32
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	240024d8 	.word	0x240024d8
 800d474:	240024ec 	.word	0x240024ec

0800d478 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d478:	b480      	push	{r7}
 800d47a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d47c:	4b03      	ldr	r3, [pc, #12]	@ (800d48c <vTaskMissedYield+0x14>)
 800d47e:	2201      	movs	r2, #1
 800d480:	601a      	str	r2, [r3, #0]
}
 800d482:	bf00      	nop
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	240024e8 	.word	0x240024e8

0800d490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d498:	f000 f852 	bl	800d540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d49c:	4b06      	ldr	r3, [pc, #24]	@ (800d4b8 <prvIdleTask+0x28>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d9f9      	bls.n	800d498 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d4a4:	4b05      	ldr	r3, [pc, #20]	@ (800d4bc <prvIdleTask+0x2c>)
 800d4a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4aa:	601a      	str	r2, [r3, #0]
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d4b4:	e7f0      	b.n	800d498 <prvIdleTask+0x8>
 800d4b6:	bf00      	nop
 800d4b8:	24002004 	.word	0x24002004
 800d4bc:	e000ed04 	.word	0xe000ed04

0800d4c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	607b      	str	r3, [r7, #4]
 800d4ca:	e00c      	b.n	800d4e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	4413      	add	r3, r2
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	4a12      	ldr	r2, [pc, #72]	@ (800d520 <prvInitialiseTaskLists+0x60>)
 800d4d8:	4413      	add	r3, r2
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe fc5c 	bl	800bd98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	607b      	str	r3, [r7, #4]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b37      	cmp	r3, #55	@ 0x37
 800d4ea:	d9ef      	bls.n	800d4cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d4ec:	480d      	ldr	r0, [pc, #52]	@ (800d524 <prvInitialiseTaskLists+0x64>)
 800d4ee:	f7fe fc53 	bl	800bd98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d4f2:	480d      	ldr	r0, [pc, #52]	@ (800d528 <prvInitialiseTaskLists+0x68>)
 800d4f4:	f7fe fc50 	bl	800bd98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d4f8:	480c      	ldr	r0, [pc, #48]	@ (800d52c <prvInitialiseTaskLists+0x6c>)
 800d4fa:	f7fe fc4d 	bl	800bd98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d4fe:	480c      	ldr	r0, [pc, #48]	@ (800d530 <prvInitialiseTaskLists+0x70>)
 800d500:	f7fe fc4a 	bl	800bd98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d504:	480b      	ldr	r0, [pc, #44]	@ (800d534 <prvInitialiseTaskLists+0x74>)
 800d506:	f7fe fc47 	bl	800bd98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d50a:	4b0b      	ldr	r3, [pc, #44]	@ (800d538 <prvInitialiseTaskLists+0x78>)
 800d50c:	4a05      	ldr	r2, [pc, #20]	@ (800d524 <prvInitialiseTaskLists+0x64>)
 800d50e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d510:	4b0a      	ldr	r3, [pc, #40]	@ (800d53c <prvInitialiseTaskLists+0x7c>)
 800d512:	4a05      	ldr	r2, [pc, #20]	@ (800d528 <prvInitialiseTaskLists+0x68>)
 800d514:	601a      	str	r2, [r3, #0]
}
 800d516:	bf00      	nop
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	24002004 	.word	0x24002004
 800d524:	24002464 	.word	0x24002464
 800d528:	24002478 	.word	0x24002478
 800d52c:	24002494 	.word	0x24002494
 800d530:	240024a8 	.word	0x240024a8
 800d534:	240024c0 	.word	0x240024c0
 800d538:	2400248c 	.word	0x2400248c
 800d53c:	24002490 	.word	0x24002490

0800d540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d546:	e019      	b.n	800d57c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d548:	f000 ff96 	bl	800e478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d54c:	4b10      	ldr	r3, [pc, #64]	@ (800d590 <prvCheckTasksWaitingTermination+0x50>)
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	3304      	adds	r3, #4
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fe fca7 	bl	800beac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d55e:	4b0d      	ldr	r3, [pc, #52]	@ (800d594 <prvCheckTasksWaitingTermination+0x54>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3b01      	subs	r3, #1
 800d564:	4a0b      	ldr	r2, [pc, #44]	@ (800d594 <prvCheckTasksWaitingTermination+0x54>)
 800d566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d568:	4b0b      	ldr	r3, [pc, #44]	@ (800d598 <prvCheckTasksWaitingTermination+0x58>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	3b01      	subs	r3, #1
 800d56e:	4a0a      	ldr	r2, [pc, #40]	@ (800d598 <prvCheckTasksWaitingTermination+0x58>)
 800d570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d572:	f000 ffb3 	bl	800e4dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f810 	bl	800d59c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d57c:	4b06      	ldr	r3, [pc, #24]	@ (800d598 <prvCheckTasksWaitingTermination+0x58>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1e1      	bne.n	800d548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	240024a8 	.word	0x240024a8
 800d594:	240024d4 	.word	0x240024d4
 800d598:	240024bc 	.word	0x240024bc

0800d59c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	3354      	adds	r3, #84	@ 0x54
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f004 fded 	bl	8012188 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d108      	bne.n	800d5ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f001 f94b 	bl	800e858 <vPortFree>
				vPortFree( pxTCB );
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f001 f948 	bl	800e858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d5c8:	e019      	b.n	800d5fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d103      	bne.n	800d5dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f001 f93f 	bl	800e858 <vPortFree>
	}
 800d5da:	e010      	b.n	800d5fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d00b      	beq.n	800d5fe <prvDeleteTCB+0x62>
	__asm volatile
 800d5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	60fb      	str	r3, [r7, #12]
}
 800d5f8:	bf00      	nop
 800d5fa:	bf00      	nop
 800d5fc:	e7fd      	b.n	800d5fa <prvDeleteTCB+0x5e>
	}
 800d5fe:	bf00      	nop
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
	...

0800d608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d60e:	4b0c      	ldr	r3, [pc, #48]	@ (800d640 <prvResetNextTaskUnblockTime+0x38>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d104      	bne.n	800d622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d618:	4b0a      	ldr	r3, [pc, #40]	@ (800d644 <prvResetNextTaskUnblockTime+0x3c>)
 800d61a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d61e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d620:	e008      	b.n	800d634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d622:	4b07      	ldr	r3, [pc, #28]	@ (800d640 <prvResetNextTaskUnblockTime+0x38>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	4a04      	ldr	r2, [pc, #16]	@ (800d644 <prvResetNextTaskUnblockTime+0x3c>)
 800d632:	6013      	str	r3, [r2, #0]
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	2400248c 	.word	0x2400248c
 800d644:	240024f4 	.word	0x240024f4

0800d648 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d64e:	4b0b      	ldr	r3, [pc, #44]	@ (800d67c <xTaskGetSchedulerState+0x34>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d102      	bne.n	800d65c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d656:	2301      	movs	r3, #1
 800d658:	607b      	str	r3, [r7, #4]
 800d65a:	e008      	b.n	800d66e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d65c:	4b08      	ldr	r3, [pc, #32]	@ (800d680 <xTaskGetSchedulerState+0x38>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d102      	bne.n	800d66a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d664:	2302      	movs	r3, #2
 800d666:	607b      	str	r3, [r7, #4]
 800d668:	e001      	b.n	800d66e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d66a:	2300      	movs	r3, #0
 800d66c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d66e:	687b      	ldr	r3, [r7, #4]
	}
 800d670:	4618      	mov	r0, r3
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	240024e0 	.word	0x240024e0
 800d680:	240024fc 	.word	0x240024fc

0800d684 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d690:	2300      	movs	r3, #0
 800d692:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d058      	beq.n	800d74c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d69a:	4b2f      	ldr	r3, [pc, #188]	@ (800d758 <xTaskPriorityDisinherit+0xd4>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	693a      	ldr	r2, [r7, #16]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d00b      	beq.n	800d6bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	60fb      	str	r3, [r7, #12]
}
 800d6b6:	bf00      	nop
 800d6b8:	bf00      	nop
 800d6ba:	e7fd      	b.n	800d6b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10b      	bne.n	800d6dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c8:	f383 8811 	msr	BASEPRI, r3
 800d6cc:	f3bf 8f6f 	isb	sy
 800d6d0:	f3bf 8f4f 	dsb	sy
 800d6d4:	60bb      	str	r3, [r7, #8]
}
 800d6d6:	bf00      	nop
 800d6d8:	bf00      	nop
 800d6da:	e7fd      	b.n	800d6d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6e0:	1e5a      	subs	r2, r3, #1
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d02c      	beq.n	800d74c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d128      	bne.n	800d74c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fe fbd4 	bl	800beac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d710:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d71c:	4b0f      	ldr	r3, [pc, #60]	@ (800d75c <xTaskPriorityDisinherit+0xd8>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	429a      	cmp	r2, r3
 800d722:	d903      	bls.n	800d72c <xTaskPriorityDisinherit+0xa8>
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d728:	4a0c      	ldr	r2, [pc, #48]	@ (800d75c <xTaskPriorityDisinherit+0xd8>)
 800d72a:	6013      	str	r3, [r2, #0]
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d730:	4613      	mov	r3, r2
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4413      	add	r3, r2
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	4a09      	ldr	r2, [pc, #36]	@ (800d760 <xTaskPriorityDisinherit+0xdc>)
 800d73a:	441a      	add	r2, r3
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	3304      	adds	r3, #4
 800d740:	4619      	mov	r1, r3
 800d742:	4610      	mov	r0, r2
 800d744:	f7fe fb55 	bl	800bdf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d748:	2301      	movs	r3, #1
 800d74a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d74c:	697b      	ldr	r3, [r7, #20]
	}
 800d74e:	4618      	mov	r0, r3
 800d750:	3718      	adds	r7, #24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	24002000 	.word	0x24002000
 800d75c:	240024dc 	.word	0x240024dc
 800d760:	24002004 	.word	0x24002004

0800d764 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d764:	b580      	push	{r7, lr}
 800d766:	b08a      	sub	sp, #40	@ 0x28
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	603b      	str	r3, [r7, #0]
 800d770:	4613      	mov	r3, r2
 800d772:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d774:	2301      	movs	r3, #1
 800d776:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10b      	bne.n	800d796 <xTaskGenericNotify+0x32>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	61bb      	str	r3, [r7, #24]
}
 800d790:	bf00      	nop
 800d792:	bf00      	nop
 800d794:	e7fd      	b.n	800d792 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d79a:	f000 fe6d 	bl	800e478 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d004      	beq.n	800d7ae <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d7a4:	6a3b      	ldr	r3, [r7, #32]
 800d7a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d7ae:	6a3b      	ldr	r3, [r7, #32]
 800d7b0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d7b4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d7b6:	6a3b      	ldr	r3, [r7, #32]
 800d7b8:	2202      	movs	r2, #2
 800d7ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800d7be:	79fb      	ldrb	r3, [r7, #7]
 800d7c0:	2b04      	cmp	r3, #4
 800d7c2:	d82e      	bhi.n	800d822 <xTaskGenericNotify+0xbe>
 800d7c4:	a201      	add	r2, pc, #4	@ (adr r2, 800d7cc <xTaskGenericNotify+0x68>)
 800d7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ca:	bf00      	nop
 800d7cc:	0800d847 	.word	0x0800d847
 800d7d0:	0800d7e1 	.word	0x0800d7e1
 800d7d4:	0800d7f3 	.word	0x0800d7f3
 800d7d8:	0800d803 	.word	0x0800d803
 800d7dc:	0800d80d 	.word	0x0800d80d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d7e0:	6a3b      	ldr	r3, [r7, #32]
 800d7e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	431a      	orrs	r2, r3
 800d7ea:	6a3b      	ldr	r3, [r7, #32]
 800d7ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d7f0:	e02c      	b.n	800d84c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d7f2:	6a3b      	ldr	r3, [r7, #32]
 800d7f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d800:	e024      	b.n	800d84c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d802:	6a3b      	ldr	r3, [r7, #32]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d80a:	e01f      	b.n	800d84c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d80c:	7ffb      	ldrb	r3, [r7, #31]
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d004      	beq.n	800d81c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d81a:	e017      	b.n	800d84c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800d81c:	2300      	movs	r3, #0
 800d81e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800d820:	e014      	b.n	800d84c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d82c:	d00d      	beq.n	800d84a <xTaskGenericNotify+0xe6>
	__asm volatile
 800d82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	617b      	str	r3, [r7, #20]
}
 800d840:	bf00      	nop
 800d842:	bf00      	nop
 800d844:	e7fd      	b.n	800d842 <xTaskGenericNotify+0xde>
					break;
 800d846:	bf00      	nop
 800d848:	e000      	b.n	800d84c <xTaskGenericNotify+0xe8>

					break;
 800d84a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d84c:	7ffb      	ldrb	r3, [r7, #31]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d13b      	bne.n	800d8ca <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d852:	6a3b      	ldr	r3, [r7, #32]
 800d854:	3304      	adds	r3, #4
 800d856:	4618      	mov	r0, r3
 800d858:	f7fe fb28 	bl	800beac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d85c:	6a3b      	ldr	r3, [r7, #32]
 800d85e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d860:	4b1d      	ldr	r3, [pc, #116]	@ (800d8d8 <xTaskGenericNotify+0x174>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	429a      	cmp	r2, r3
 800d866:	d903      	bls.n	800d870 <xTaskGenericNotify+0x10c>
 800d868:	6a3b      	ldr	r3, [r7, #32]
 800d86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d86c:	4a1a      	ldr	r2, [pc, #104]	@ (800d8d8 <xTaskGenericNotify+0x174>)
 800d86e:	6013      	str	r3, [r2, #0]
 800d870:	6a3b      	ldr	r3, [r7, #32]
 800d872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d874:	4613      	mov	r3, r2
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	4a17      	ldr	r2, [pc, #92]	@ (800d8dc <xTaskGenericNotify+0x178>)
 800d87e:	441a      	add	r2, r3
 800d880:	6a3b      	ldr	r3, [r7, #32]
 800d882:	3304      	adds	r3, #4
 800d884:	4619      	mov	r1, r3
 800d886:	4610      	mov	r0, r2
 800d888:	f7fe fab3 	bl	800bdf2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d88c:	6a3b      	ldr	r3, [r7, #32]
 800d88e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00b      	beq.n	800d8ac <xTaskGenericNotify+0x148>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	613b      	str	r3, [r7, #16]
}
 800d8a6:	bf00      	nop
 800d8a8:	bf00      	nop
 800d8aa:	e7fd      	b.n	800d8a8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8ac:	6a3b      	ldr	r3, [r7, #32]
 800d8ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d8e0 <xTaskGenericNotify+0x17c>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d907      	bls.n	800d8ca <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d8ba:	4b0a      	ldr	r3, [pc, #40]	@ (800d8e4 <xTaskGenericNotify+0x180>)
 800d8bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	f3bf 8f4f 	dsb	sy
 800d8c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d8ca:	f000 fe07 	bl	800e4dc <vPortExitCritical>

		return xReturn;
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3728      	adds	r7, #40	@ 0x28
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	240024dc 	.word	0x240024dc
 800d8dc:	24002004 	.word	0x24002004
 800d8e0:	24002000 	.word	0x24002000
 800d8e4:	e000ed04 	.word	0xe000ed04

0800d8e8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08e      	sub	sp, #56	@ 0x38
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10b      	bne.n	800d91a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800d902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d914:	bf00      	nop
 800d916:	bf00      	nop
 800d918:	e7fd      	b.n	800d916 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d91a:	f000 fe8d 	bl	800e638 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800d922:	f3ef 8211 	mrs	r2, BASEPRI
 800d926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	623a      	str	r2, [r7, #32]
 800d938:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d93a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d93c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d004      	beq.n	800d94e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d946:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95a:	2202      	movs	r2, #2
 800d95c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800d960:	79fb      	ldrb	r3, [r7, #7]
 800d962:	2b04      	cmp	r3, #4
 800d964:	d82e      	bhi.n	800d9c4 <xTaskGenericNotifyFromISR+0xdc>
 800d966:	a201      	add	r2, pc, #4	@ (adr r2, 800d96c <xTaskGenericNotifyFromISR+0x84>)
 800d968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d96c:	0800d9e9 	.word	0x0800d9e9
 800d970:	0800d981 	.word	0x0800d981
 800d974:	0800d993 	.word	0x0800d993
 800d978:	0800d9a3 	.word	0x0800d9a3
 800d97c:	0800d9ad 	.word	0x0800d9ad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d982:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	431a      	orrs	r2, r3
 800d98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d990:	e02d      	b.n	800d9ee <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d994:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d998:	1c5a      	adds	r2, r3, #1
 800d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d9a0:	e025      	b.n	800d9ee <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d9aa:	e020      	b.n	800d9ee <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d9ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d004      	beq.n	800d9be <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d9bc:	e017      	b.n	800d9ee <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800d9c2:	e014      	b.n	800d9ee <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d9ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9ce:	d00d      	beq.n	800d9ec <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800d9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	61bb      	str	r3, [r7, #24]
}
 800d9e2:	bf00      	nop
 800d9e4:	bf00      	nop
 800d9e6:	e7fd      	b.n	800d9e4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d9e8:	bf00      	nop
 800d9ea:	e000      	b.n	800d9ee <xTaskGenericNotifyFromISR+0x106>
					break;
 800d9ec:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d9ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d147      	bne.n	800da86 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00b      	beq.n	800da16 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	617b      	str	r3, [r7, #20]
}
 800da10:	bf00      	nop
 800da12:	bf00      	nop
 800da14:	e7fd      	b.n	800da12 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da16:	4b21      	ldr	r3, [pc, #132]	@ (800da9c <xTaskGenericNotifyFromISR+0x1b4>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d11d      	bne.n	800da5a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da20:	3304      	adds	r3, #4
 800da22:	4618      	mov	r0, r3
 800da24:	f7fe fa42 	bl	800beac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da2c:	4b1c      	ldr	r3, [pc, #112]	@ (800daa0 <xTaskGenericNotifyFromISR+0x1b8>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	429a      	cmp	r2, r3
 800da32:	d903      	bls.n	800da3c <xTaskGenericNotifyFromISR+0x154>
 800da34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da38:	4a19      	ldr	r2, [pc, #100]	@ (800daa0 <xTaskGenericNotifyFromISR+0x1b8>)
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da40:	4613      	mov	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4a16      	ldr	r2, [pc, #88]	@ (800daa4 <xTaskGenericNotifyFromISR+0x1bc>)
 800da4a:	441a      	add	r2, r3
 800da4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4e:	3304      	adds	r3, #4
 800da50:	4619      	mov	r1, r3
 800da52:	4610      	mov	r0, r2
 800da54:	f7fe f9cd 	bl	800bdf2 <vListInsertEnd>
 800da58:	e005      	b.n	800da66 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800da5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da5c:	3318      	adds	r3, #24
 800da5e:	4619      	mov	r1, r3
 800da60:	4811      	ldr	r0, [pc, #68]	@ (800daa8 <xTaskGenericNotifyFromISR+0x1c0>)
 800da62:	f7fe f9c6 	bl	800bdf2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da6a:	4b10      	ldr	r3, [pc, #64]	@ (800daac <xTaskGenericNotifyFromISR+0x1c4>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da70:	429a      	cmp	r2, r3
 800da72:	d908      	bls.n	800da86 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800da74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da76:	2b00      	cmp	r3, #0
 800da78:	d002      	beq.n	800da80 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800da7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da7c:	2201      	movs	r2, #1
 800da7e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800da80:	4b0b      	ldr	r3, [pc, #44]	@ (800dab0 <xTaskGenericNotifyFromISR+0x1c8>)
 800da82:	2201      	movs	r2, #1
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	f383 8811 	msr	BASEPRI, r3
}
 800da90:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800da92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800da94:	4618      	mov	r0, r3
 800da96:	3738      	adds	r7, #56	@ 0x38
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	240024fc 	.word	0x240024fc
 800daa0:	240024dc 	.word	0x240024dc
 800daa4:	24002004 	.word	0x24002004
 800daa8:	24002494 	.word	0x24002494
 800daac:	24002000 	.word	0x24002000
 800dab0:	240024e8 	.word	0x240024e8

0800dab4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dabe:	4b21      	ldr	r3, [pc, #132]	@ (800db44 <prvAddCurrentTaskToDelayedList+0x90>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dac4:	4b20      	ldr	r3, [pc, #128]	@ (800db48 <prvAddCurrentTaskToDelayedList+0x94>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	3304      	adds	r3, #4
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fe f9ee 	bl	800beac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dad6:	d10a      	bne.n	800daee <prvAddCurrentTaskToDelayedList+0x3a>
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d007      	beq.n	800daee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dade:	4b1a      	ldr	r3, [pc, #104]	@ (800db48 <prvAddCurrentTaskToDelayedList+0x94>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3304      	adds	r3, #4
 800dae4:	4619      	mov	r1, r3
 800dae6:	4819      	ldr	r0, [pc, #100]	@ (800db4c <prvAddCurrentTaskToDelayedList+0x98>)
 800dae8:	f7fe f983 	bl	800bdf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800daec:	e026      	b.n	800db3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4413      	add	r3, r2
 800daf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800daf6:	4b14      	ldr	r3, [pc, #80]	@ (800db48 <prvAddCurrentTaskToDelayedList+0x94>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dafe:	68ba      	ldr	r2, [r7, #8]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	429a      	cmp	r2, r3
 800db04:	d209      	bcs.n	800db1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db06:	4b12      	ldr	r3, [pc, #72]	@ (800db50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	4b0f      	ldr	r3, [pc, #60]	@ (800db48 <prvAddCurrentTaskToDelayedList+0x94>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3304      	adds	r3, #4
 800db10:	4619      	mov	r1, r3
 800db12:	4610      	mov	r0, r2
 800db14:	f7fe f991 	bl	800be3a <vListInsert>
}
 800db18:	e010      	b.n	800db3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db1a:	4b0e      	ldr	r3, [pc, #56]	@ (800db54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	4b0a      	ldr	r3, [pc, #40]	@ (800db48 <prvAddCurrentTaskToDelayedList+0x94>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	3304      	adds	r3, #4
 800db24:	4619      	mov	r1, r3
 800db26:	4610      	mov	r0, r2
 800db28:	f7fe f987 	bl	800be3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db2c:	4b0a      	ldr	r3, [pc, #40]	@ (800db58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	68ba      	ldr	r2, [r7, #8]
 800db32:	429a      	cmp	r2, r3
 800db34:	d202      	bcs.n	800db3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db36:	4a08      	ldr	r2, [pc, #32]	@ (800db58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	6013      	str	r3, [r2, #0]
}
 800db3c:	bf00      	nop
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	240024d8 	.word	0x240024d8
 800db48:	24002000 	.word	0x24002000
 800db4c:	240024c0 	.word	0x240024c0
 800db50:	24002490 	.word	0x24002490
 800db54:	2400248c 	.word	0x2400248c
 800db58:	240024f4 	.word	0x240024f4

0800db5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b08a      	sub	sp, #40	@ 0x28
 800db60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db66:	f000 fb13 	bl	800e190 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db6a:	4b1d      	ldr	r3, [pc, #116]	@ (800dbe0 <xTimerCreateTimerTask+0x84>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d021      	beq.n	800dbb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db72:	2300      	movs	r3, #0
 800db74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db76:	2300      	movs	r3, #0
 800db78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db7a:	1d3a      	adds	r2, r7, #4
 800db7c:	f107 0108 	add.w	r1, r7, #8
 800db80:	f107 030c 	add.w	r3, r7, #12
 800db84:	4618      	mov	r0, r3
 800db86:	f7fe f8ed 	bl	800bd64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db8a:	6879      	ldr	r1, [r7, #4]
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	9202      	str	r2, [sp, #8]
 800db92:	9301      	str	r3, [sp, #4]
 800db94:	2302      	movs	r3, #2
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	2300      	movs	r3, #0
 800db9a:	460a      	mov	r2, r1
 800db9c:	4911      	ldr	r1, [pc, #68]	@ (800dbe4 <xTimerCreateTimerTask+0x88>)
 800db9e:	4812      	ldr	r0, [pc, #72]	@ (800dbe8 <xTimerCreateTimerTask+0x8c>)
 800dba0:	f7fe ff30 	bl	800ca04 <xTaskCreateStatic>
 800dba4:	4603      	mov	r3, r0
 800dba6:	4a11      	ldr	r2, [pc, #68]	@ (800dbec <xTimerCreateTimerTask+0x90>)
 800dba8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dbaa:	4b10      	ldr	r3, [pc, #64]	@ (800dbec <xTimerCreateTimerTask+0x90>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d001      	beq.n	800dbb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d10b      	bne.n	800dbd4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc0:	f383 8811 	msr	BASEPRI, r3
 800dbc4:	f3bf 8f6f 	isb	sy
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	613b      	str	r3, [r7, #16]
}
 800dbce:	bf00      	nop
 800dbd0:	bf00      	nop
 800dbd2:	e7fd      	b.n	800dbd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dbd4:	697b      	ldr	r3, [r7, #20]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3718      	adds	r7, #24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	24002530 	.word	0x24002530
 800dbe4:	080126a4 	.word	0x080126a4
 800dbe8:	0800dd29 	.word	0x0800dd29
 800dbec:	24002534 	.word	0x24002534

0800dbf0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b08a      	sub	sp, #40	@ 0x28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
 800dbfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d10b      	bne.n	800dc20 <xTimerGenericCommand+0x30>
	__asm volatile
 800dc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc0c:	f383 8811 	msr	BASEPRI, r3
 800dc10:	f3bf 8f6f 	isb	sy
 800dc14:	f3bf 8f4f 	dsb	sy
 800dc18:	623b      	str	r3, [r7, #32]
}
 800dc1a:	bf00      	nop
 800dc1c:	bf00      	nop
 800dc1e:	e7fd      	b.n	800dc1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc20:	4b19      	ldr	r3, [pc, #100]	@ (800dc88 <xTimerGenericCommand+0x98>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d02a      	beq.n	800dc7e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	2b05      	cmp	r3, #5
 800dc38:	dc18      	bgt.n	800dc6c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc3a:	f7ff fd05 	bl	800d648 <xTaskGetSchedulerState>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	d109      	bne.n	800dc58 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc44:	4b10      	ldr	r3, [pc, #64]	@ (800dc88 <xTimerGenericCommand+0x98>)
 800dc46:	6818      	ldr	r0, [r3, #0]
 800dc48:	f107 0110 	add.w	r1, r7, #16
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc50:	f7fe fae8 	bl	800c224 <xQueueGenericSend>
 800dc54:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc56:	e012      	b.n	800dc7e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc58:	4b0b      	ldr	r3, [pc, #44]	@ (800dc88 <xTimerGenericCommand+0x98>)
 800dc5a:	6818      	ldr	r0, [r3, #0]
 800dc5c:	f107 0110 	add.w	r1, r7, #16
 800dc60:	2300      	movs	r3, #0
 800dc62:	2200      	movs	r2, #0
 800dc64:	f7fe fade 	bl	800c224 <xQueueGenericSend>
 800dc68:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc6a:	e008      	b.n	800dc7e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc6c:	4b06      	ldr	r3, [pc, #24]	@ (800dc88 <xTimerGenericCommand+0x98>)
 800dc6e:	6818      	ldr	r0, [r3, #0]
 800dc70:	f107 0110 	add.w	r1, r7, #16
 800dc74:	2300      	movs	r3, #0
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	f7fe fbd6 	bl	800c428 <xQueueGenericSendFromISR>
 800dc7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3728      	adds	r7, #40	@ 0x28
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	24002530 	.word	0x24002530

0800dc8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b088      	sub	sp, #32
 800dc90:	af02      	add	r7, sp, #8
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc96:	4b23      	ldr	r3, [pc, #140]	@ (800dd24 <prvProcessExpiredTimer+0x98>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	3304      	adds	r3, #4
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7fe f901 	bl	800beac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcb0:	f003 0304 	and.w	r3, r3, #4
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d023      	beq.n	800dd00 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	699a      	ldr	r2, [r3, #24]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	18d1      	adds	r1, r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	6978      	ldr	r0, [r7, #20]
 800dcc6:	f000 f8d5 	bl	800de74 <prvInsertTimerInActiveList>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d020      	beq.n	800dd12 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	2100      	movs	r1, #0
 800dcda:	6978      	ldr	r0, [r7, #20]
 800dcdc:	f7ff ff88 	bl	800dbf0 <xTimerGenericCommand>
 800dce0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d114      	bne.n	800dd12 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	60fb      	str	r3, [r7, #12]
}
 800dcfa:	bf00      	nop
 800dcfc:	bf00      	nop
 800dcfe:	e7fd      	b.n	800dcfc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd06:	f023 0301 	bic.w	r3, r3, #1
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	6a1b      	ldr	r3, [r3, #32]
 800dd16:	6978      	ldr	r0, [r7, #20]
 800dd18:	4798      	blx	r3
}
 800dd1a:	bf00      	nop
 800dd1c:	3718      	adds	r7, #24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	24002528 	.word	0x24002528

0800dd28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd30:	f107 0308 	add.w	r3, r7, #8
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 f859 	bl	800ddec <prvGetNextExpireTime>
 800dd3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	4619      	mov	r1, r3
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f000 f805 	bl	800dd50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd46:	f000 f8d7 	bl	800def8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd4a:	bf00      	nop
 800dd4c:	e7f0      	b.n	800dd30 <prvTimerTask+0x8>
	...

0800dd50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd5a:	f7ff f881 	bl	800ce60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd5e:	f107 0308 	add.w	r3, r7, #8
 800dd62:	4618      	mov	r0, r3
 800dd64:	f000 f866 	bl	800de34 <prvSampleTimeNow>
 800dd68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d130      	bne.n	800ddd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10a      	bne.n	800dd8c <prvProcessTimerOrBlockTask+0x3c>
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d806      	bhi.n	800dd8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd7e:	f7ff f87d 	bl	800ce7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd82:	68f9      	ldr	r1, [r7, #12]
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7ff ff81 	bl	800dc8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd8a:	e024      	b.n	800ddd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d008      	beq.n	800dda4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dd92:	4b13      	ldr	r3, [pc, #76]	@ (800dde0 <prvProcessTimerOrBlockTask+0x90>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d101      	bne.n	800dda0 <prvProcessTimerOrBlockTask+0x50>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	e000      	b.n	800dda2 <prvProcessTimerOrBlockTask+0x52>
 800dda0:	2300      	movs	r3, #0
 800dda2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dda4:	4b0f      	ldr	r3, [pc, #60]	@ (800dde4 <prvProcessTimerOrBlockTask+0x94>)
 800dda6:	6818      	ldr	r0, [r3, #0]
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	683a      	ldr	r2, [r7, #0]
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	f7fe fdf3 	bl	800c99c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ddb6:	f7ff f861 	bl	800ce7c <xTaskResumeAll>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10a      	bne.n	800ddd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ddc0:	4b09      	ldr	r3, [pc, #36]	@ (800dde8 <prvProcessTimerOrBlockTask+0x98>)
 800ddc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddc6:	601a      	str	r2, [r3, #0]
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	f3bf 8f6f 	isb	sy
}
 800ddd0:	e001      	b.n	800ddd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ddd2:	f7ff f853 	bl	800ce7c <xTaskResumeAll>
}
 800ddd6:	bf00      	nop
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	2400252c 	.word	0x2400252c
 800dde4:	24002530 	.word	0x24002530
 800dde8:	e000ed04 	.word	0xe000ed04

0800ddec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ddf4:	4b0e      	ldr	r3, [pc, #56]	@ (800de30 <prvGetNextExpireTime+0x44>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d101      	bne.n	800de02 <prvGetNextExpireTime+0x16>
 800ddfe:	2201      	movs	r2, #1
 800de00:	e000      	b.n	800de04 <prvGetNextExpireTime+0x18>
 800de02:	2200      	movs	r2, #0
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d105      	bne.n	800de1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de10:	4b07      	ldr	r3, [pc, #28]	@ (800de30 <prvGetNextExpireTime+0x44>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	60fb      	str	r3, [r7, #12]
 800de1a:	e001      	b.n	800de20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de1c:	2300      	movs	r3, #0
 800de1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de20:	68fb      	ldr	r3, [r7, #12]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3714      	adds	r7, #20
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	24002528 	.word	0x24002528

0800de34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de3c:	f7ff f8bc 	bl	800cfb8 <xTaskGetTickCount>
 800de40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de42:	4b0b      	ldr	r3, [pc, #44]	@ (800de70 <prvSampleTimeNow+0x3c>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d205      	bcs.n	800de58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de4c:	f000 f93a 	bl	800e0c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	601a      	str	r2, [r3, #0]
 800de56:	e002      	b.n	800de5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de5e:	4a04      	ldr	r2, [pc, #16]	@ (800de70 <prvSampleTimeNow+0x3c>)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de64:	68fb      	ldr	r3, [r7, #12]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	24002538 	.word	0x24002538

0800de74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
 800de80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de82:	2300      	movs	r3, #0
 800de84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	429a      	cmp	r2, r3
 800de98:	d812      	bhi.n	800dec0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	1ad2      	subs	r2, r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d302      	bcc.n	800deae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dea8:	2301      	movs	r3, #1
 800deaa:	617b      	str	r3, [r7, #20]
 800deac:	e01b      	b.n	800dee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800deae:	4b10      	ldr	r3, [pc, #64]	@ (800def0 <prvInsertTimerInActiveList+0x7c>)
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	3304      	adds	r3, #4
 800deb6:	4619      	mov	r1, r3
 800deb8:	4610      	mov	r0, r2
 800deba:	f7fd ffbe 	bl	800be3a <vListInsert>
 800debe:	e012      	b.n	800dee6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d206      	bcs.n	800ded6 <prvInsertTimerInActiveList+0x62>
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	429a      	cmp	r2, r3
 800dece:	d302      	bcc.n	800ded6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ded0:	2301      	movs	r3, #1
 800ded2:	617b      	str	r3, [r7, #20]
 800ded4:	e007      	b.n	800dee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ded6:	4b07      	ldr	r3, [pc, #28]	@ (800def4 <prvInsertTimerInActiveList+0x80>)
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	3304      	adds	r3, #4
 800dede:	4619      	mov	r1, r3
 800dee0:	4610      	mov	r0, r2
 800dee2:	f7fd ffaa 	bl	800be3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dee6:	697b      	ldr	r3, [r7, #20]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	2400252c 	.word	0x2400252c
 800def4:	24002528 	.word	0x24002528

0800def8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b08e      	sub	sp, #56	@ 0x38
 800defc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800defe:	e0ce      	b.n	800e09e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	da19      	bge.n	800df3a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df06:	1d3b      	adds	r3, r7, #4
 800df08:	3304      	adds	r3, #4
 800df0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10b      	bne.n	800df2a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800df12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	61fb      	str	r3, [r7, #28]
}
 800df24:	bf00      	nop
 800df26:	bf00      	nop
 800df28:	e7fd      	b.n	800df26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df30:	6850      	ldr	r0, [r2, #4]
 800df32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df34:	6892      	ldr	r2, [r2, #8]
 800df36:	4611      	mov	r1, r2
 800df38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f2c0 80ae 	blt.w	800e09e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df48:	695b      	ldr	r3, [r3, #20]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d004      	beq.n	800df58 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df50:	3304      	adds	r3, #4
 800df52:	4618      	mov	r0, r3
 800df54:	f7fd ffaa 	bl	800beac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df58:	463b      	mov	r3, r7
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7ff ff6a 	bl	800de34 <prvSampleTimeNow>
 800df60:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2b09      	cmp	r3, #9
 800df66:	f200 8097 	bhi.w	800e098 <prvProcessReceivedCommands+0x1a0>
 800df6a:	a201      	add	r2, pc, #4	@ (adr r2, 800df70 <prvProcessReceivedCommands+0x78>)
 800df6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df70:	0800df99 	.word	0x0800df99
 800df74:	0800df99 	.word	0x0800df99
 800df78:	0800df99 	.word	0x0800df99
 800df7c:	0800e00f 	.word	0x0800e00f
 800df80:	0800e023 	.word	0x0800e023
 800df84:	0800e06f 	.word	0x0800e06f
 800df88:	0800df99 	.word	0x0800df99
 800df8c:	0800df99 	.word	0x0800df99
 800df90:	0800e00f 	.word	0x0800e00f
 800df94:	0800e023 	.word	0x0800e023
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df9e:	f043 0301 	orr.w	r3, r3, #1
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfae:	699b      	ldr	r3, [r3, #24]
 800dfb0:	18d1      	adds	r1, r2, r3
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfb8:	f7ff ff5c 	bl	800de74 <prvInsertTimerInActiveList>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d06c      	beq.n	800e09c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc4:	6a1b      	ldr	r3, [r3, #32]
 800dfc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfd0:	f003 0304 	and.w	r3, r3, #4
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d061      	beq.n	800e09c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfdc:	699b      	ldr	r3, [r3, #24]
 800dfde:	441a      	add	r2, r3
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfea:	f7ff fe01 	bl	800dbf0 <xTimerGenericCommand>
 800dfee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dff0:	6a3b      	ldr	r3, [r7, #32]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d152      	bne.n	800e09c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800dff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
 800e006:	61bb      	str	r3, [r7, #24]
}
 800e008:	bf00      	nop
 800e00a:	bf00      	nop
 800e00c:	e7fd      	b.n	800e00a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e014:	f023 0301 	bic.w	r3, r3, #1
 800e018:	b2da      	uxtb	r2, r3
 800e01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e01c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e020:	e03d      	b.n	800e09e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e028:	f043 0301 	orr.w	r3, r3, #1
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e030:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e034:	68ba      	ldr	r2, [r7, #8]
 800e036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e038:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e03c:	699b      	ldr	r3, [r3, #24]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10b      	bne.n	800e05a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	617b      	str	r3, [r7, #20]
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop
 800e058:	e7fd      	b.n	800e056 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e05c:	699a      	ldr	r2, [r3, #24]
 800e05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e060:	18d1      	adds	r1, r2, r3
 800e062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e068:	f7ff ff04 	bl	800de74 <prvInsertTimerInActiveList>
					break;
 800e06c:	e017      	b.n	800e09e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e070:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e074:	f003 0302 	and.w	r3, r3, #2
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d103      	bne.n	800e084 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e07c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e07e:	f000 fbeb 	bl	800e858 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e082:	e00c      	b.n	800e09e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e086:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e08a:	f023 0301 	bic.w	r3, r3, #1
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e092:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e096:	e002      	b.n	800e09e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e098:	bf00      	nop
 800e09a:	e000      	b.n	800e09e <prvProcessReceivedCommands+0x1a6>
					break;
 800e09c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e09e:	4b08      	ldr	r3, [pc, #32]	@ (800e0c0 <prvProcessReceivedCommands+0x1c8>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	1d39      	adds	r1, r7, #4
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fe fa5c 	bl	800c564 <xQueueReceive>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f47f af26 	bne.w	800df00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e0b4:	bf00      	nop
 800e0b6:	bf00      	nop
 800e0b8:	3730      	adds	r7, #48	@ 0x30
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	24002530 	.word	0x24002530

0800e0c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b088      	sub	sp, #32
 800e0c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0ca:	e049      	b.n	800e160 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0cc:	4b2e      	ldr	r3, [pc, #184]	@ (800e188 <prvSwitchTimerLists+0xc4>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0d6:	4b2c      	ldr	r3, [pc, #176]	@ (800e188 <prvSwitchTimerLists+0xc4>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fd fee1 	bl	800beac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6a1b      	ldr	r3, [r3, #32]
 800e0ee:	68f8      	ldr	r0, [r7, #12]
 800e0f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0f8:	f003 0304 	and.w	r3, r3, #4
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d02f      	beq.n	800e160 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	699b      	ldr	r3, [r3, #24]
 800e104:	693a      	ldr	r2, [r7, #16]
 800e106:	4413      	add	r3, r2
 800e108:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d90e      	bls.n	800e130 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	68ba      	ldr	r2, [r7, #8]
 800e116:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e11e:	4b1a      	ldr	r3, [pc, #104]	@ (800e188 <prvSwitchTimerLists+0xc4>)
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	3304      	adds	r3, #4
 800e126:	4619      	mov	r1, r3
 800e128:	4610      	mov	r0, r2
 800e12a:	f7fd fe86 	bl	800be3a <vListInsert>
 800e12e:	e017      	b.n	800e160 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e130:	2300      	movs	r3, #0
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	2300      	movs	r3, #0
 800e136:	693a      	ldr	r2, [r7, #16]
 800e138:	2100      	movs	r1, #0
 800e13a:	68f8      	ldr	r0, [r7, #12]
 800e13c:	f7ff fd58 	bl	800dbf0 <xTimerGenericCommand>
 800e140:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10b      	bne.n	800e160 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e14c:	f383 8811 	msr	BASEPRI, r3
 800e150:	f3bf 8f6f 	isb	sy
 800e154:	f3bf 8f4f 	dsb	sy
 800e158:	603b      	str	r3, [r7, #0]
}
 800e15a:	bf00      	nop
 800e15c:	bf00      	nop
 800e15e:	e7fd      	b.n	800e15c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e160:	4b09      	ldr	r3, [pc, #36]	@ (800e188 <prvSwitchTimerLists+0xc4>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1b0      	bne.n	800e0cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e16a:	4b07      	ldr	r3, [pc, #28]	@ (800e188 <prvSwitchTimerLists+0xc4>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e170:	4b06      	ldr	r3, [pc, #24]	@ (800e18c <prvSwitchTimerLists+0xc8>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a04      	ldr	r2, [pc, #16]	@ (800e188 <prvSwitchTimerLists+0xc4>)
 800e176:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e178:	4a04      	ldr	r2, [pc, #16]	@ (800e18c <prvSwitchTimerLists+0xc8>)
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	6013      	str	r3, [r2, #0]
}
 800e17e:	bf00      	nop
 800e180:	3718      	adds	r7, #24
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	24002528 	.word	0x24002528
 800e18c:	2400252c 	.word	0x2400252c

0800e190 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e196:	f000 f96f 	bl	800e478 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e19a:	4b15      	ldr	r3, [pc, #84]	@ (800e1f0 <prvCheckForValidListAndQueue+0x60>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d120      	bne.n	800e1e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e1a2:	4814      	ldr	r0, [pc, #80]	@ (800e1f4 <prvCheckForValidListAndQueue+0x64>)
 800e1a4:	f7fd fdf8 	bl	800bd98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e1a8:	4813      	ldr	r0, [pc, #76]	@ (800e1f8 <prvCheckForValidListAndQueue+0x68>)
 800e1aa:	f7fd fdf5 	bl	800bd98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e1ae:	4b13      	ldr	r3, [pc, #76]	@ (800e1fc <prvCheckForValidListAndQueue+0x6c>)
 800e1b0:	4a10      	ldr	r2, [pc, #64]	@ (800e1f4 <prvCheckForValidListAndQueue+0x64>)
 800e1b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e1b4:	4b12      	ldr	r3, [pc, #72]	@ (800e200 <prvCheckForValidListAndQueue+0x70>)
 800e1b6:	4a10      	ldr	r2, [pc, #64]	@ (800e1f8 <prvCheckForValidListAndQueue+0x68>)
 800e1b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	4b11      	ldr	r3, [pc, #68]	@ (800e204 <prvCheckForValidListAndQueue+0x74>)
 800e1c0:	4a11      	ldr	r2, [pc, #68]	@ (800e208 <prvCheckForValidListAndQueue+0x78>)
 800e1c2:	2110      	movs	r1, #16
 800e1c4:	200a      	movs	r0, #10
 800e1c6:	f7fd ff05 	bl	800bfd4 <xQueueGenericCreateStatic>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	4a08      	ldr	r2, [pc, #32]	@ (800e1f0 <prvCheckForValidListAndQueue+0x60>)
 800e1ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e1d0:	4b07      	ldr	r3, [pc, #28]	@ (800e1f0 <prvCheckForValidListAndQueue+0x60>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d005      	beq.n	800e1e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e1d8:	4b05      	ldr	r3, [pc, #20]	@ (800e1f0 <prvCheckForValidListAndQueue+0x60>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	490b      	ldr	r1, [pc, #44]	@ (800e20c <prvCheckForValidListAndQueue+0x7c>)
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fbb2 	bl	800c948 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1e4:	f000 f97a 	bl	800e4dc <vPortExitCritical>
}
 800e1e8:	bf00      	nop
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	24002530 	.word	0x24002530
 800e1f4:	24002500 	.word	0x24002500
 800e1f8:	24002514 	.word	0x24002514
 800e1fc:	24002528 	.word	0x24002528
 800e200:	2400252c 	.word	0x2400252c
 800e204:	240025dc 	.word	0x240025dc
 800e208:	2400253c 	.word	0x2400253c
 800e20c:	080126ac 	.word	0x080126ac

0800e210 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e210:	b480      	push	{r7}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	3b04      	subs	r3, #4
 800e220:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	3b04      	subs	r3, #4
 800e22e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	f023 0201 	bic.w	r2, r3, #1
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3b04      	subs	r3, #4
 800e23e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e240:	4a0c      	ldr	r2, [pc, #48]	@ (800e274 <pxPortInitialiseStack+0x64>)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	3b14      	subs	r3, #20
 800e24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	3b04      	subs	r3, #4
 800e256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f06f 0202 	mvn.w	r2, #2
 800e25e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	3b20      	subs	r3, #32
 800e264:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e266:	68fb      	ldr	r3, [r7, #12]
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3714      	adds	r7, #20
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr
 800e274:	0800e279 	.word	0x0800e279

0800e278 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e282:	4b13      	ldr	r3, [pc, #76]	@ (800e2d0 <prvTaskExitError+0x58>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e28a:	d00b      	beq.n	800e2a4 <prvTaskExitError+0x2c>
	__asm volatile
 800e28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e290:	f383 8811 	msr	BASEPRI, r3
 800e294:	f3bf 8f6f 	isb	sy
 800e298:	f3bf 8f4f 	dsb	sy
 800e29c:	60fb      	str	r3, [r7, #12]
}
 800e29e:	bf00      	nop
 800e2a0:	bf00      	nop
 800e2a2:	e7fd      	b.n	800e2a0 <prvTaskExitError+0x28>
	__asm volatile
 800e2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a8:	f383 8811 	msr	BASEPRI, r3
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	60bb      	str	r3, [r7, #8]
}
 800e2b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e2b8:	bf00      	nop
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d0fc      	beq.n	800e2ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e2c0:	bf00      	nop
 800e2c2:	bf00      	nop
 800e2c4:	3714      	adds	r7, #20
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	24000010 	.word	0x24000010
	...

0800e2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e2e0:	4b07      	ldr	r3, [pc, #28]	@ (800e300 <pxCurrentTCBConst2>)
 800e2e2:	6819      	ldr	r1, [r3, #0]
 800e2e4:	6808      	ldr	r0, [r1, #0]
 800e2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ea:	f380 8809 	msr	PSP, r0
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f04f 0000 	mov.w	r0, #0
 800e2f6:	f380 8811 	msr	BASEPRI, r0
 800e2fa:	4770      	bx	lr
 800e2fc:	f3af 8000 	nop.w

0800e300 <pxCurrentTCBConst2>:
 800e300:	24002000 	.word	0x24002000
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e304:	bf00      	nop
 800e306:	bf00      	nop

0800e308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e308:	4808      	ldr	r0, [pc, #32]	@ (800e32c <prvPortStartFirstTask+0x24>)
 800e30a:	6800      	ldr	r0, [r0, #0]
 800e30c:	6800      	ldr	r0, [r0, #0]
 800e30e:	f380 8808 	msr	MSP, r0
 800e312:	f04f 0000 	mov.w	r0, #0
 800e316:	f380 8814 	msr	CONTROL, r0
 800e31a:	b662      	cpsie	i
 800e31c:	b661      	cpsie	f
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	df00      	svc	0
 800e328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e32a:	bf00      	nop
 800e32c:	e000ed08 	.word	0xe000ed08

0800e330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b086      	sub	sp, #24
 800e334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e336:	4b47      	ldr	r3, [pc, #284]	@ (800e454 <xPortStartScheduler+0x124>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a47      	ldr	r2, [pc, #284]	@ (800e458 <xPortStartScheduler+0x128>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d10b      	bne.n	800e358 <xPortStartScheduler+0x28>
	__asm volatile
 800e340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e344:	f383 8811 	msr	BASEPRI, r3
 800e348:	f3bf 8f6f 	isb	sy
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	613b      	str	r3, [r7, #16]
}
 800e352:	bf00      	nop
 800e354:	bf00      	nop
 800e356:	e7fd      	b.n	800e354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e358:	4b3e      	ldr	r3, [pc, #248]	@ (800e454 <xPortStartScheduler+0x124>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a3f      	ldr	r2, [pc, #252]	@ (800e45c <xPortStartScheduler+0x12c>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d10b      	bne.n	800e37a <xPortStartScheduler+0x4a>
	__asm volatile
 800e362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	60fb      	str	r3, [r7, #12]
}
 800e374:	bf00      	nop
 800e376:	bf00      	nop
 800e378:	e7fd      	b.n	800e376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e37a:	4b39      	ldr	r3, [pc, #228]	@ (800e460 <xPortStartScheduler+0x130>)
 800e37c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	b2db      	uxtb	r3, r3
 800e384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	22ff      	movs	r2, #255	@ 0xff
 800e38a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	b2db      	uxtb	r3, r3
 800e392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e394:	78fb      	ldrb	r3, [r7, #3]
 800e396:	b2db      	uxtb	r3, r3
 800e398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	4b31      	ldr	r3, [pc, #196]	@ (800e464 <xPortStartScheduler+0x134>)
 800e3a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3a2:	4b31      	ldr	r3, [pc, #196]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3a4:	2207      	movs	r2, #7
 800e3a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3a8:	e009      	b.n	800e3be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e3aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e3b4:	78fb      	ldrb	r3, [r7, #3]
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3be:	78fb      	ldrb	r3, [r7, #3]
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3c6:	2b80      	cmp	r3, #128	@ 0x80
 800e3c8:	d0ef      	beq.n	800e3aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e3ca:	4b27      	ldr	r3, [pc, #156]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f1c3 0307 	rsb	r3, r3, #7
 800e3d2:	2b04      	cmp	r3, #4
 800e3d4:	d00b      	beq.n	800e3ee <xPortStartScheduler+0xbe>
	__asm volatile
 800e3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3da:	f383 8811 	msr	BASEPRI, r3
 800e3de:	f3bf 8f6f 	isb	sy
 800e3e2:	f3bf 8f4f 	dsb	sy
 800e3e6:	60bb      	str	r3, [r7, #8]
}
 800e3e8:	bf00      	nop
 800e3ea:	bf00      	nop
 800e3ec:	e7fd      	b.n	800e3ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e3ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	021b      	lsls	r3, r3, #8
 800e3f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e3f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e400:	4a19      	ldr	r2, [pc, #100]	@ (800e468 <xPortStartScheduler+0x138>)
 800e402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	b2da      	uxtb	r2, r3
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e40c:	4b17      	ldr	r3, [pc, #92]	@ (800e46c <xPortStartScheduler+0x13c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4a16      	ldr	r2, [pc, #88]	@ (800e46c <xPortStartScheduler+0x13c>)
 800e412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e418:	4b14      	ldr	r3, [pc, #80]	@ (800e46c <xPortStartScheduler+0x13c>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a13      	ldr	r2, [pc, #76]	@ (800e46c <xPortStartScheduler+0x13c>)
 800e41e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e424:	f000 f8da 	bl	800e5dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e428:	4b11      	ldr	r3, [pc, #68]	@ (800e470 <xPortStartScheduler+0x140>)
 800e42a:	2200      	movs	r2, #0
 800e42c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e42e:	f000 f8f9 	bl	800e624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e432:	4b10      	ldr	r3, [pc, #64]	@ (800e474 <xPortStartScheduler+0x144>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a0f      	ldr	r2, [pc, #60]	@ (800e474 <xPortStartScheduler+0x144>)
 800e438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e43c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e43e:	f7ff ff63 	bl	800e308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e442:	f7fe fe83 	bl	800d14c <vTaskSwitchContext>
	prvTaskExitError();
 800e446:	f7ff ff17 	bl	800e278 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	e000ed00 	.word	0xe000ed00
 800e458:	410fc271 	.word	0x410fc271
 800e45c:	410fc270 	.word	0x410fc270
 800e460:	e000e400 	.word	0xe000e400
 800e464:	2400262c 	.word	0x2400262c
 800e468:	24002630 	.word	0x24002630
 800e46c:	e000ed20 	.word	0xe000ed20
 800e470:	24000010 	.word	0x24000010
 800e474:	e000ef34 	.word	0xe000ef34

0800e478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
	__asm volatile
 800e47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	607b      	str	r3, [r7, #4]
}
 800e490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e492:	4b10      	ldr	r3, [pc, #64]	@ (800e4d4 <vPortEnterCritical+0x5c>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3301      	adds	r3, #1
 800e498:	4a0e      	ldr	r2, [pc, #56]	@ (800e4d4 <vPortEnterCritical+0x5c>)
 800e49a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e49c:	4b0d      	ldr	r3, [pc, #52]	@ (800e4d4 <vPortEnterCritical+0x5c>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d110      	bne.n	800e4c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e4d8 <vPortEnterCritical+0x60>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	603b      	str	r3, [r7, #0]
}
 800e4c0:	bf00      	nop
 800e4c2:	bf00      	nop
 800e4c4:	e7fd      	b.n	800e4c2 <vPortEnterCritical+0x4a>
	}
}
 800e4c6:	bf00      	nop
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	24000010 	.word	0x24000010
 800e4d8:	e000ed04 	.word	0xe000ed04

0800e4dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4e2:	4b12      	ldr	r3, [pc, #72]	@ (800e52c <vPortExitCritical+0x50>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10b      	bne.n	800e502 <vPortExitCritical+0x26>
	__asm volatile
 800e4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	607b      	str	r3, [r7, #4]
}
 800e4fc:	bf00      	nop
 800e4fe:	bf00      	nop
 800e500:	e7fd      	b.n	800e4fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e502:	4b0a      	ldr	r3, [pc, #40]	@ (800e52c <vPortExitCritical+0x50>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3b01      	subs	r3, #1
 800e508:	4a08      	ldr	r2, [pc, #32]	@ (800e52c <vPortExitCritical+0x50>)
 800e50a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e50c:	4b07      	ldr	r3, [pc, #28]	@ (800e52c <vPortExitCritical+0x50>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d105      	bne.n	800e520 <vPortExitCritical+0x44>
 800e514:	2300      	movs	r3, #0
 800e516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	f383 8811 	msr	BASEPRI, r3
}
 800e51e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e520:	bf00      	nop
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	24000010 	.word	0x24000010

0800e530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e530:	f3ef 8009 	mrs	r0, PSP
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	4b15      	ldr	r3, [pc, #84]	@ (800e590 <pxCurrentTCBConst>)
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	f01e 0f10 	tst.w	lr, #16
 800e540:	bf08      	it	eq
 800e542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54a:	6010      	str	r0, [r2, #0]
 800e54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e554:	f380 8811 	msr	BASEPRI, r0
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f7fe fdf4 	bl	800d14c <vTaskSwitchContext>
 800e564:	f04f 0000 	mov.w	r0, #0
 800e568:	f380 8811 	msr	BASEPRI, r0
 800e56c:	bc09      	pop	{r0, r3}
 800e56e:	6819      	ldr	r1, [r3, #0]
 800e570:	6808      	ldr	r0, [r1, #0]
 800e572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e576:	f01e 0f10 	tst.w	lr, #16
 800e57a:	bf08      	it	eq
 800e57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e580:	f380 8809 	msr	PSP, r0
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	f3af 8000 	nop.w

0800e590 <pxCurrentTCBConst>:
 800e590:	24002000 	.word	0x24002000
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e594:	bf00      	nop
 800e596:	bf00      	nop

0800e598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
	__asm volatile
 800e59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	607b      	str	r3, [r7, #4]
}
 800e5b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e5b2:	f7fe fd11 	bl	800cfd8 <xTaskIncrementTick>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d003      	beq.n	800e5c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5bc:	4b06      	ldr	r3, [pc, #24]	@ (800e5d8 <xPortSysTickHandler+0x40>)
 800e5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	f383 8811 	msr	BASEPRI, r3
}
 800e5ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5d0:	bf00      	nop
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	e000ed04 	.word	0xe000ed04

0800e5dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e5dc:	b480      	push	{r7}
 800e5de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e610 <vPortSetupTimerInterrupt+0x34>)
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e614 <vPortSetupTimerInterrupt+0x38>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e618 <vPortSetupTimerInterrupt+0x3c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a0a      	ldr	r2, [pc, #40]	@ (800e61c <vPortSetupTimerInterrupt+0x40>)
 800e5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5f6:	099b      	lsrs	r3, r3, #6
 800e5f8:	4a09      	ldr	r2, [pc, #36]	@ (800e620 <vPortSetupTimerInterrupt+0x44>)
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5fe:	4b04      	ldr	r3, [pc, #16]	@ (800e610 <vPortSetupTimerInterrupt+0x34>)
 800e600:	2207      	movs	r2, #7
 800e602:	601a      	str	r2, [r3, #0]
}
 800e604:	bf00      	nop
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	e000e010 	.word	0xe000e010
 800e614:	e000e018 	.word	0xe000e018
 800e618:	24000000 	.word	0x24000000
 800e61c:	10624dd3 	.word	0x10624dd3
 800e620:	e000e014 	.word	0xe000e014

0800e624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e634 <vPortEnableVFP+0x10>
 800e628:	6801      	ldr	r1, [r0, #0]
 800e62a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e62e:	6001      	str	r1, [r0, #0]
 800e630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e632:	bf00      	nop
 800e634:	e000ed88 	.word	0xe000ed88

0800e638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e63e:	f3ef 8305 	mrs	r3, IPSR
 800e642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2b0f      	cmp	r3, #15
 800e648:	d915      	bls.n	800e676 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e64a:	4a18      	ldr	r2, [pc, #96]	@ (800e6ac <vPortValidateInterruptPriority+0x74>)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4413      	add	r3, r2
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e654:	4b16      	ldr	r3, [pc, #88]	@ (800e6b0 <vPortValidateInterruptPriority+0x78>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	7afa      	ldrb	r2, [r7, #11]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d20b      	bcs.n	800e676 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	607b      	str	r3, [r7, #4]
}
 800e670:	bf00      	nop
 800e672:	bf00      	nop
 800e674:	e7fd      	b.n	800e672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e676:	4b0f      	ldr	r3, [pc, #60]	@ (800e6b4 <vPortValidateInterruptPriority+0x7c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e67e:	4b0e      	ldr	r3, [pc, #56]	@ (800e6b8 <vPortValidateInterruptPriority+0x80>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	429a      	cmp	r2, r3
 800e684:	d90b      	bls.n	800e69e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	603b      	str	r3, [r7, #0]
}
 800e698:	bf00      	nop
 800e69a:	bf00      	nop
 800e69c:	e7fd      	b.n	800e69a <vPortValidateInterruptPriority+0x62>
	}
 800e69e:	bf00      	nop
 800e6a0:	3714      	adds	r7, #20
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop
 800e6ac:	e000e3f0 	.word	0xe000e3f0
 800e6b0:	2400262c 	.word	0x2400262c
 800e6b4:	e000ed0c 	.word	0xe000ed0c
 800e6b8:	24002630 	.word	0x24002630

0800e6bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b08a      	sub	sp, #40	@ 0x28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e6c8:	f7fe fbca 	bl	800ce60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800e840 <pvPortMalloc+0x184>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d101      	bne.n	800e6d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6d4:	f000 f924 	bl	800e920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6d8:	4b5a      	ldr	r3, [pc, #360]	@ (800e844 <pvPortMalloc+0x188>)
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4013      	ands	r3, r2
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f040 8095 	bne.w	800e810 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d01e      	beq.n	800e72a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e6ec:	2208      	movs	r2, #8
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f003 0307 	and.w	r3, r3, #7
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d015      	beq.n	800e72a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f023 0307 	bic.w	r3, r3, #7
 800e704:	3308      	adds	r3, #8
 800e706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f003 0307 	and.w	r3, r3, #7
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00b      	beq.n	800e72a <pvPortMalloc+0x6e>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	617b      	str	r3, [r7, #20]
}
 800e724:	bf00      	nop
 800e726:	bf00      	nop
 800e728:	e7fd      	b.n	800e726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d06f      	beq.n	800e810 <pvPortMalloc+0x154>
 800e730:	4b45      	ldr	r3, [pc, #276]	@ (800e848 <pvPortMalloc+0x18c>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	429a      	cmp	r2, r3
 800e738:	d86a      	bhi.n	800e810 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e73a:	4b44      	ldr	r3, [pc, #272]	@ (800e84c <pvPortMalloc+0x190>)
 800e73c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e73e:	4b43      	ldr	r3, [pc, #268]	@ (800e84c <pvPortMalloc+0x190>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e744:	e004      	b.n	800e750 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	429a      	cmp	r2, r3
 800e758:	d903      	bls.n	800e762 <pvPortMalloc+0xa6>
 800e75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1f1      	bne.n	800e746 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e762:	4b37      	ldr	r3, [pc, #220]	@ (800e840 <pvPortMalloc+0x184>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e768:	429a      	cmp	r2, r3
 800e76a:	d051      	beq.n	800e810 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e76c:	6a3b      	ldr	r3, [r7, #32]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2208      	movs	r2, #8
 800e772:	4413      	add	r3, r2
 800e774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	6a3b      	ldr	r3, [r7, #32]
 800e77c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e780:	685a      	ldr	r2, [r3, #4]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	1ad2      	subs	r2, r2, r3
 800e786:	2308      	movs	r3, #8
 800e788:	005b      	lsls	r3, r3, #1
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d920      	bls.n	800e7d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4413      	add	r3, r2
 800e794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	f003 0307 	and.w	r3, r3, #7
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d00b      	beq.n	800e7b8 <pvPortMalloc+0xfc>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	613b      	str	r3, [r7, #16]
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	e7fd      	b.n	800e7b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ba:	685a      	ldr	r2, [r3, #4]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	1ad2      	subs	r2, r2, r3
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7ca:	69b8      	ldr	r0, [r7, #24]
 800e7cc:	f000 f90c 	bl	800e9e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e7d0:	4b1d      	ldr	r3, [pc, #116]	@ (800e848 <pvPortMalloc+0x18c>)
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	1ad3      	subs	r3, r2, r3
 800e7da:	4a1b      	ldr	r2, [pc, #108]	@ (800e848 <pvPortMalloc+0x18c>)
 800e7dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7de:	4b1a      	ldr	r3, [pc, #104]	@ (800e848 <pvPortMalloc+0x18c>)
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800e850 <pvPortMalloc+0x194>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d203      	bcs.n	800e7f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e7ea:	4b17      	ldr	r3, [pc, #92]	@ (800e848 <pvPortMalloc+0x18c>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a18      	ldr	r2, [pc, #96]	@ (800e850 <pvPortMalloc+0x194>)
 800e7f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f4:	685a      	ldr	r2, [r3, #4]
 800e7f6:	4b13      	ldr	r3, [pc, #76]	@ (800e844 <pvPortMalloc+0x188>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	431a      	orrs	r2, r3
 800e7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e802:	2200      	movs	r2, #0
 800e804:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e806:	4b13      	ldr	r3, [pc, #76]	@ (800e854 <pvPortMalloc+0x198>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	3301      	adds	r3, #1
 800e80c:	4a11      	ldr	r2, [pc, #68]	@ (800e854 <pvPortMalloc+0x198>)
 800e80e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e810:	f7fe fb34 	bl	800ce7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	f003 0307 	and.w	r3, r3, #7
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00b      	beq.n	800e836 <pvPortMalloc+0x17a>
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e822:	f383 8811 	msr	BASEPRI, r3
 800e826:	f3bf 8f6f 	isb	sy
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	60fb      	str	r3, [r7, #12]
}
 800e830:	bf00      	nop
 800e832:	bf00      	nop
 800e834:	e7fd      	b.n	800e832 <pvPortMalloc+0x176>
	return pvReturn;
 800e836:	69fb      	ldr	r3, [r7, #28]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3728      	adds	r7, #40	@ 0x28
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	2403337c 	.word	0x2403337c
 800e844:	24033390 	.word	0x24033390
 800e848:	24033380 	.word	0x24033380
 800e84c:	24033374 	.word	0x24033374
 800e850:	24033384 	.word	0x24033384
 800e854:	24033388 	.word	0x24033388

0800e858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b086      	sub	sp, #24
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d04f      	beq.n	800e90a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e86a:	2308      	movs	r3, #8
 800e86c:	425b      	negs	r3, r3
 800e86e:	697a      	ldr	r2, [r7, #20]
 800e870:	4413      	add	r3, r2
 800e872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	685a      	ldr	r2, [r3, #4]
 800e87c:	4b25      	ldr	r3, [pc, #148]	@ (800e914 <vPortFree+0xbc>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4013      	ands	r3, r2
 800e882:	2b00      	cmp	r3, #0
 800e884:	d10b      	bne.n	800e89e <vPortFree+0x46>
	__asm volatile
 800e886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e88a:	f383 8811 	msr	BASEPRI, r3
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	60fb      	str	r3, [r7, #12]
}
 800e898:	bf00      	nop
 800e89a:	bf00      	nop
 800e89c:	e7fd      	b.n	800e89a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00b      	beq.n	800e8be <vPortFree+0x66>
	__asm volatile
 800e8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	60bb      	str	r3, [r7, #8]
}
 800e8b8:	bf00      	nop
 800e8ba:	bf00      	nop
 800e8bc:	e7fd      	b.n	800e8ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	685a      	ldr	r2, [r3, #4]
 800e8c2:	4b14      	ldr	r3, [pc, #80]	@ (800e914 <vPortFree+0xbc>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d01e      	beq.n	800e90a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d11a      	bne.n	800e90a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e914 <vPortFree+0xbc>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	43db      	mvns	r3, r3
 800e8de:	401a      	ands	r2, r3
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e8e4:	f7fe fabc 	bl	800ce60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	685a      	ldr	r2, [r3, #4]
 800e8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e918 <vPortFree+0xc0>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	4a09      	ldr	r2, [pc, #36]	@ (800e918 <vPortFree+0xc0>)
 800e8f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e8f6:	6938      	ldr	r0, [r7, #16]
 800e8f8:	f000 f876 	bl	800e9e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e8fc:	4b07      	ldr	r3, [pc, #28]	@ (800e91c <vPortFree+0xc4>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	3301      	adds	r3, #1
 800e902:	4a06      	ldr	r2, [pc, #24]	@ (800e91c <vPortFree+0xc4>)
 800e904:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e906:	f7fe fab9 	bl	800ce7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e90a:	bf00      	nop
 800e90c:	3718      	adds	r7, #24
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	24033390 	.word	0x24033390
 800e918:	24033380 	.word	0x24033380
 800e91c:	2403338c 	.word	0x2403338c

0800e920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e926:	4b29      	ldr	r3, [pc, #164]	@ (800e9cc <prvHeapInit+0xac>)
 800e928:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e92a:	4b29      	ldr	r3, [pc, #164]	@ (800e9d0 <prvHeapInit+0xb0>)
 800e92c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f003 0307 	and.w	r3, r3, #7
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00c      	beq.n	800e952 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	3307      	adds	r3, #7
 800e93c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f023 0307 	bic.w	r3, r3, #7
 800e944:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e946:	68ba      	ldr	r2, [r7, #8]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	4a20      	ldr	r2, [pc, #128]	@ (800e9d0 <prvHeapInit+0xb0>)
 800e94e:	4413      	add	r3, r2
 800e950:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e956:	4a1f      	ldr	r2, [pc, #124]	@ (800e9d4 <prvHeapInit+0xb4>)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e95c:	4b1d      	ldr	r3, [pc, #116]	@ (800e9d4 <prvHeapInit+0xb4>)
 800e95e:	2200      	movs	r2, #0
 800e960:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68ba      	ldr	r2, [r7, #8]
 800e966:	4413      	add	r3, r2
 800e968:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e96a:	2208      	movs	r2, #8
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	1a9b      	subs	r3, r3, r2
 800e970:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f023 0307 	bic.w	r3, r3, #7
 800e978:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	4a16      	ldr	r2, [pc, #88]	@ (800e9d8 <prvHeapInit+0xb8>)
 800e97e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e980:	4b15      	ldr	r3, [pc, #84]	@ (800e9d8 <prvHeapInit+0xb8>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2200      	movs	r2, #0
 800e986:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e988:	4b13      	ldr	r3, [pc, #76]	@ (800e9d8 <prvHeapInit+0xb8>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2200      	movs	r2, #0
 800e98e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	1ad2      	subs	r2, r2, r3
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e99e:	4b0e      	ldr	r3, [pc, #56]	@ (800e9d8 <prvHeapInit+0xb8>)
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	4a0c      	ldr	r2, [pc, #48]	@ (800e9dc <prvHeapInit+0xbc>)
 800e9ac:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	4a0b      	ldr	r2, [pc, #44]	@ (800e9e0 <prvHeapInit+0xc0>)
 800e9b4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e9e4 <prvHeapInit+0xc4>)
 800e9b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e9bc:	601a      	str	r2, [r3, #0]
}
 800e9be:	bf00      	nop
 800e9c0:	3714      	adds	r7, #20
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	00030d40 	.word	0x00030d40
 800e9d0:	24002634 	.word	0x24002634
 800e9d4:	24033374 	.word	0x24033374
 800e9d8:	2403337c 	.word	0x2403337c
 800e9dc:	24033384 	.word	0x24033384
 800e9e0:	24033380 	.word	0x24033380
 800e9e4:	24033390 	.word	0x24033390

0800e9e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e9f0:	4b28      	ldr	r3, [pc, #160]	@ (800ea94 <prvInsertBlockIntoFreeList+0xac>)
 800e9f2:	60fb      	str	r3, [r7, #12]
 800e9f4:	e002      	b.n	800e9fc <prvInsertBlockIntoFreeList+0x14>
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	60fb      	str	r3, [r7, #12]
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d8f7      	bhi.n	800e9f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	68ba      	ldr	r2, [r7, #8]
 800ea10:	4413      	add	r3, r2
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d108      	bne.n	800ea2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	441a      	add	r2, r3
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	68ba      	ldr	r2, [r7, #8]
 800ea34:	441a      	add	r2, r3
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d118      	bne.n	800ea70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	4b15      	ldr	r3, [pc, #84]	@ (800ea98 <prvInsertBlockIntoFreeList+0xb0>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d00d      	beq.n	800ea66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	685a      	ldr	r2, [r3, #4]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	441a      	add	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	e008      	b.n	800ea78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea66:	4b0c      	ldr	r3, [pc, #48]	@ (800ea98 <prvInsertBlockIntoFreeList+0xb0>)
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	601a      	str	r2, [r3, #0]
 800ea6e:	e003      	b.n	800ea78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d002      	beq.n	800ea86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	687a      	ldr	r2, [r7, #4]
 800ea84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea86:	bf00      	nop
 800ea88:	3714      	adds	r7, #20
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	24033374 	.word	0x24033374
 800ea98:	2403337c 	.word	0x2403337c

0800ea9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800ea9c:	4a02      	ldr	r2, [pc, #8]	@ (800eaa8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 800ea9e:	4b03      	ldr	r3, [pc, #12]	@ (800eaac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 800eaa0:	6812      	ldr	r2, [r2, #0]
 800eaa2:	601a      	str	r2, [r3, #0]
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	24000e0c 	.word	0x24000e0c
 800eaac:	2400001c 	.word	0x2400001c

0800eab0 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 800eab0:	f002 bb96 	b.w	80111e0 <autoware_control_msgs__msg__Control__init>

0800eab4 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 800eab4:	f002 bbea 	b.w	801128c <autoware_control_msgs__msg__Control__fini>

0800eab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800eab8:	b510      	push	{r4, lr}
 800eaba:	4c0c      	ldr	r4, [pc, #48]	@ (800eaec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 800eabc:	f001 f892 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eac0:	60e0      	str	r0, [r4, #12]
 800eac2:	f001 f88f 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eac6:	64a0      	str	r0, [r4, #72]	@ 0x48
 800eac8:	f000 f81a 	bl	800eb00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800eacc:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800ead0:	f000 f832 	bl	800eb38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800ead4:	4b06      	ldr	r3, [pc, #24]	@ (800eaf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800ead6:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	b10a      	cbz	r2, 800eae2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 800eade:	4804      	ldr	r0, [pc, #16]	@ (800eaf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800eae0:	bd10      	pop	{r4, pc}
 800eae2:	4a04      	ldr	r2, [pc, #16]	@ (800eaf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 800eae4:	4802      	ldr	r0, [pc, #8]	@ (800eaf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800eae6:	6812      	ldr	r2, [r2, #0]
 800eae8:	601a      	str	r2, [r3, #0]
 800eaea:	bd10      	pop	{r4, pc}
 800eaec:	24000028 	.word	0x24000028
 800eaf0:	24000118 	.word	0x24000118
 800eaf4:	24000e10 	.word	0x24000e10

0800eaf8 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 800eaf8:	f002 bbdc 	b.w	80112b4 <autoware_control_msgs__msg__Lateral__init>

0800eafc <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 800eafc:	f002 bbfe 	b.w	80112fc <autoware_control_msgs__msg__Lateral__fini>

0800eb00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800eb00:	b510      	push	{r4, lr}
 800eb02:	4c08      	ldr	r4, [pc, #32]	@ (800eb24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 800eb04:	f001 f86e 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eb08:	60e0      	str	r0, [r4, #12]
 800eb0a:	f001 f86b 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eb0e:	4b06      	ldr	r3, [pc, #24]	@ (800eb28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800eb10:	64a0      	str	r0, [r4, #72]	@ 0x48
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	b10a      	cbz	r2, 800eb1a <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 800eb16:	4804      	ldr	r0, [pc, #16]	@ (800eb28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800eb18:	bd10      	pop	{r4, pc}
 800eb1a:	4a04      	ldr	r2, [pc, #16]	@ (800eb2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 800eb1c:	4802      	ldr	r0, [pc, #8]	@ (800eb28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800eb1e:	6812      	ldr	r2, [r2, #0]
 800eb20:	601a      	str	r2, [r3, #0]
 800eb22:	bd10      	pop	{r4, pc}
 800eb24:	24000124 	.word	0x24000124
 800eb28:	24000250 	.word	0x24000250
 800eb2c:	24000e10 	.word	0x24000e10

0800eb30 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 800eb30:	f002 bbf0 	b.w	8011314 <autoware_control_msgs__msg__Longitudinal__init>

0800eb34 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 800eb34:	f002 bc12 	b.w	801135c <autoware_control_msgs__msg__Longitudinal__fini>

0800eb38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800eb38:	b510      	push	{r4, lr}
 800eb3a:	4c08      	ldr	r4, [pc, #32]	@ (800eb5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 800eb3c:	f001 f852 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eb40:	60e0      	str	r0, [r4, #12]
 800eb42:	f001 f84f 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eb46:	4b06      	ldr	r3, [pc, #24]	@ (800eb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800eb48:	64a0      	str	r0, [r4, #72]	@ 0x48
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	b10a      	cbz	r2, 800eb52 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 800eb4e:	4804      	ldr	r0, [pc, #16]	@ (800eb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800eb50:	bd10      	pop	{r4, pc}
 800eb52:	4a04      	ldr	r2, [pc, #16]	@ (800eb64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 800eb54:	4802      	ldr	r0, [pc, #8]	@ (800eb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800eb56:	6812      	ldr	r2, [r2, #0]
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	bd10      	pop	{r4, pc}
 800eb5c:	2400025c 	.word	0x2400025c
 800eb60:	24000400 	.word	0x24000400
 800eb64:	24000e10 	.word	0x24000e10

0800eb68 <get_serialized_size_autoware_control_msgs__msg__Control>:
 800eb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	b1c8      	cbz	r0, 800eba2 <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 800eb6e:	460f      	mov	r7, r1
 800eb70:	f001 f846 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800eb74:	4606      	mov	r6, r0
 800eb76:	f104 0008 	add.w	r0, r4, #8
 800eb7a:	443e      	add	r6, r7
 800eb7c:	4631      	mov	r1, r6
 800eb7e:	f001 f83f 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800eb82:	4605      	mov	r5, r0
 800eb84:	f104 0010 	add.w	r0, r4, #16
 800eb88:	4435      	add	r5, r6
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	f000 f8a2 	bl	800ecd4 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800eb90:	4601      	mov	r1, r0
 800eb92:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800eb96:	440d      	add	r5, r1
 800eb98:	4629      	mov	r1, r5
 800eb9a:	f000 f9a7 	bl	800eeec <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800eb9e:	1bc0      	subs	r0, r0, r7
 800eba0:	4428      	add	r0, r5
 800eba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eba4 <_Control__cdr_deserialize>:
 800eba4:	b570      	push	{r4, r5, r6, lr}
 800eba6:	460c      	mov	r4, r1
 800eba8:	b329      	cbz	r1, 800ebf6 <_Control__cdr_deserialize+0x52>
 800ebaa:	4605      	mov	r5, r0
 800ebac:	f001 f88c 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	4621      	mov	r1, r4
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	4798      	blx	r3
 800ebbc:	f001 f884 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	f104 0108 	add.w	r1, r4, #8
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	4798      	blx	r3
 800ebce:	f000 f95b 	bl	800ee88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	f104 0110 	add.w	r1, r4, #16
 800ebd8:	4628      	mov	r0, r5
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	4798      	blx	r3
 800ebe0:	f000 fa28 	bl	800f034 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 800ebea:	4628      	mov	r0, r5
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	4718      	bx	r3
 800ebf6:	4608      	mov	r0, r1
 800ebf8:	bd70      	pop	{r4, r5, r6, pc}
 800ebfa:	bf00      	nop

0800ebfc <_Control__cdr_serialize>:
 800ebfc:	b338      	cbz	r0, 800ec4e <_Control__cdr_serialize+0x52>
 800ebfe:	b570      	push	{r4, r5, r6, lr}
 800ec00:	4604      	mov	r4, r0
 800ec02:	460d      	mov	r5, r1
 800ec04:	f001 f860 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	4629      	mov	r1, r5
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	689b      	ldr	r3, [r3, #8]
 800ec12:	4798      	blx	r3
 800ec14:	f001 f858 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	f104 0008 	add.w	r0, r4, #8
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	4798      	blx	r3
 800ec26:	f000 f92f 	bl	800ee88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	f104 0010 	add.w	r0, r4, #16
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	4798      	blx	r3
 800ec38:	f000 f9fc 	bl	800f034 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	4629      	mov	r1, r5
 800ec40:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	4718      	bx	r3
 800ec4e:	4770      	bx	lr

0800ec50 <_Control__get_serialized_size>:
 800ec50:	b538      	push	{r3, r4, r5, lr}
 800ec52:	4604      	mov	r4, r0
 800ec54:	b1b8      	cbz	r0, 800ec86 <_Control__get_serialized_size+0x36>
 800ec56:	2100      	movs	r1, #0
 800ec58:	f000 ffd2 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800ec5c:	4605      	mov	r5, r0
 800ec5e:	f104 0008 	add.w	r0, r4, #8
 800ec62:	4629      	mov	r1, r5
 800ec64:	f000 ffcc 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800ec68:	4601      	mov	r1, r0
 800ec6a:	f104 0010 	add.w	r0, r4, #16
 800ec6e:	440d      	add	r5, r1
 800ec70:	4629      	mov	r1, r5
 800ec72:	f000 f82f 	bl	800ecd4 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800ec76:	4601      	mov	r1, r0
 800ec78:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800ec7c:	440d      	add	r5, r1
 800ec7e:	4629      	mov	r1, r5
 800ec80:	f000 f934 	bl	800eeec <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800ec84:	4428      	add	r0, r5
 800ec86:	bd38      	pop	{r3, r4, r5, pc}

0800ec88 <_Control__max_serialized_size>:
 800ec88:	b530      	push	{r4, r5, lr}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	2100      	movs	r1, #0
 800ec90:	f10d 0007 	add.w	r0, sp, #7
 800ec94:	f88d 3007 	strb.w	r3, [sp, #7]
 800ec98:	f001 f802 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	f10d 0007 	add.w	r0, sp, #7
 800eca2:	4621      	mov	r1, r4
 800eca4:	f000 fffc 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800eca8:	4605      	mov	r5, r0
 800ecaa:	f10d 0007 	add.w	r0, sp, #7
 800ecae:	4425      	add	r5, r4
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	f000 f8c7 	bl	800ee44 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	f10d 0007 	add.w	r0, sp, #7
 800ecbc:	442c      	add	r4, r5
 800ecbe:	4621      	mov	r1, r4
 800ecc0:	f000 f980 	bl	800efc4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800ecc4:	4420      	add	r0, r4
 800ecc6:	b003      	add	sp, #12
 800ecc8:	bd30      	pop	{r4, r5, pc}
 800ecca:	bf00      	nop

0800eccc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800eccc:	4800      	ldr	r0, [pc, #0]	@ (800ecd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 800ecce:	4770      	bx	lr
 800ecd0:	2400040c 	.word	0x2400040c

0800ecd4 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 800ecd4:	b5b0      	push	{r4, r5, r7, lr}
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	b1f0      	cbz	r0, 800ed18 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 800ecda:	460d      	mov	r5, r1
 800ecdc:	f000 ff90 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800ece0:	4607      	mov	r7, r0
 800ece2:	f104 0008 	add.w	r0, r4, #8
 800ece6:	442f      	add	r7, r5
 800ece8:	f1c5 0501 	rsb	r5, r5, #1
 800ecec:	4639      	mov	r1, r7
 800ecee:	f000 ff87 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800ecf2:	4407      	add	r7, r0
 800ecf4:	2104      	movs	r1, #4
 800ecf6:	4638      	mov	r0, r7
 800ecf8:	f001 fea8 	bl	8010a4c <ucdr_alignment>
 800ecfc:	2104      	movs	r1, #4
 800ecfe:	1844      	adds	r4, r0, r1
 800ed00:	443c      	add	r4, r7
 800ed02:	4620      	mov	r0, r4
 800ed04:	f001 fea2 	bl	8010a4c <ucdr_alignment>
 800ed08:	3004      	adds	r0, #4
 800ed0a:	2101      	movs	r1, #1
 800ed0c:	4404      	add	r4, r0
 800ed0e:	4620      	mov	r0, r4
 800ed10:	f001 fe9c 	bl	8010a4c <ucdr_alignment>
 800ed14:	4428      	add	r0, r5
 800ed16:	4420      	add	r0, r4
 800ed18:	bdb0      	pop	{r4, r5, r7, pc}
 800ed1a:	bf00      	nop

0800ed1c <_Lateral__cdr_deserialize>:
 800ed1c:	b538      	push	{r3, r4, r5, lr}
 800ed1e:	460c      	mov	r4, r1
 800ed20:	b311      	cbz	r1, 800ed68 <_Lateral__cdr_deserialize+0x4c>
 800ed22:	4605      	mov	r5, r0
 800ed24:	f000 ffd0 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	4628      	mov	r0, r5
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	68db      	ldr	r3, [r3, #12]
 800ed32:	4798      	blx	r3
 800ed34:	f000 ffc8 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	f104 0108 	add.w	r1, r4, #8
 800ed3e:	4628      	mov	r0, r5
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	4798      	blx	r3
 800ed46:	f104 0110 	add.w	r1, r4, #16
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	f001 fc30 	bl	80105b0 <ucdr_deserialize_float>
 800ed50:	f104 0114 	add.w	r1, r4, #20
 800ed54:	4628      	mov	r0, r5
 800ed56:	f001 fc2b 	bl	80105b0 <ucdr_deserialize_float>
 800ed5a:	f104 0118 	add.w	r1, r4, #24
 800ed5e:	4628      	mov	r0, r5
 800ed60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed64:	f000 bfca 	b.w	800fcfc <ucdr_deserialize_bool>
 800ed68:	4608      	mov	r0, r1
 800ed6a:	bd38      	pop	{r3, r4, r5, pc}

0800ed6c <_Lateral__cdr_serialize>:
 800ed6c:	b318      	cbz	r0, 800edb6 <_Lateral__cdr_serialize+0x4a>
 800ed6e:	b538      	push	{r3, r4, r5, lr}
 800ed70:	4604      	mov	r4, r0
 800ed72:	460d      	mov	r5, r1
 800ed74:	f000 ffa8 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	4629      	mov	r1, r5
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	689b      	ldr	r3, [r3, #8]
 800ed82:	4798      	blx	r3
 800ed84:	f000 ffa0 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	4629      	mov	r1, r5
 800ed8c:	f104 0008 	add.w	r0, r4, #8
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	4798      	blx	r3
 800ed96:	ed94 0a04 	vldr	s0, [r4, #16]
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f001 fb70 	bl	8010480 <ucdr_serialize_float>
 800eda0:	ed94 0a05 	vldr	s0, [r4, #20]
 800eda4:	4628      	mov	r0, r5
 800eda6:	f001 fb6b 	bl	8010480 <ucdr_serialize_float>
 800edaa:	7e21      	ldrb	r1, [r4, #24]
 800edac:	4628      	mov	r0, r5
 800edae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edb2:	f000 bf8d 	b.w	800fcd0 <ucdr_serialize_bool>
 800edb6:	4770      	bx	lr

0800edb8 <_Lateral__get_serialized_size>:
 800edb8:	b538      	push	{r3, r4, r5, lr}
 800edba:	4604      	mov	r4, r0
 800edbc:	b1d8      	cbz	r0, 800edf6 <_Lateral__get_serialized_size+0x3e>
 800edbe:	2100      	movs	r1, #0
 800edc0:	f000 ff1e 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800edc4:	4605      	mov	r5, r0
 800edc6:	f104 0008 	add.w	r0, r4, #8
 800edca:	4629      	mov	r1, r5
 800edcc:	f000 ff18 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800edd0:	4405      	add	r5, r0
 800edd2:	2104      	movs	r1, #4
 800edd4:	4628      	mov	r0, r5
 800edd6:	f001 fe39 	bl	8010a4c <ucdr_alignment>
 800edda:	2104      	movs	r1, #4
 800eddc:	4408      	add	r0, r1
 800edde:	1944      	adds	r4, r0, r5
 800ede0:	4620      	mov	r0, r4
 800ede2:	f001 fe33 	bl	8010a4c <ucdr_alignment>
 800ede6:	3004      	adds	r0, #4
 800ede8:	2101      	movs	r1, #1
 800edea:	4404      	add	r4, r0
 800edec:	4620      	mov	r0, r4
 800edee:	f001 fe2d 	bl	8010a4c <ucdr_alignment>
 800edf2:	3001      	adds	r0, #1
 800edf4:	4420      	add	r0, r4
 800edf6:	bd38      	pop	{r3, r4, r5, pc}

0800edf8 <_Lateral__max_serialized_size>:
 800edf8:	b530      	push	{r4, r5, lr}
 800edfa:	b083      	sub	sp, #12
 800edfc:	2501      	movs	r5, #1
 800edfe:	2100      	movs	r1, #0
 800ee00:	f10d 0007 	add.w	r0, sp, #7
 800ee04:	f88d 5007 	strb.w	r5, [sp, #7]
 800ee08:	f000 ff4a 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	f10d 0007 	add.w	r0, sp, #7
 800ee12:	4621      	mov	r1, r4
 800ee14:	f000 ff44 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800ee18:	4404      	add	r4, r0
 800ee1a:	2104      	movs	r1, #4
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f001 fe15 	bl	8010a4c <ucdr_alignment>
 800ee22:	2104      	movs	r1, #4
 800ee24:	4408      	add	r0, r1
 800ee26:	4404      	add	r4, r0
 800ee28:	4620      	mov	r0, r4
 800ee2a:	f001 fe0f 	bl	8010a4c <ucdr_alignment>
 800ee2e:	3004      	adds	r0, #4
 800ee30:	4629      	mov	r1, r5
 800ee32:	4404      	add	r4, r0
 800ee34:	4620      	mov	r0, r4
 800ee36:	f001 fe09 	bl	8010a4c <ucdr_alignment>
 800ee3a:	4428      	add	r0, r5
 800ee3c:	4420      	add	r0, r4
 800ee3e:	b003      	add	sp, #12
 800ee40:	bd30      	pop	{r4, r5, pc}
 800ee42:	bf00      	nop

0800ee44 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 800ee44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee46:	2701      	movs	r7, #1
 800ee48:	460c      	mov	r4, r1
 800ee4a:	4606      	mov	r6, r0
 800ee4c:	7007      	strb	r7, [r0, #0]
 800ee4e:	f000 ff27 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800ee52:	4605      	mov	r5, r0
 800ee54:	4630      	mov	r0, r6
 800ee56:	4425      	add	r5, r4
 800ee58:	1b3c      	subs	r4, r7, r4
 800ee5a:	4629      	mov	r1, r5
 800ee5c:	f000 ff20 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800ee60:	4405      	add	r5, r0
 800ee62:	2104      	movs	r1, #4
 800ee64:	4628      	mov	r0, r5
 800ee66:	f001 fdf1 	bl	8010a4c <ucdr_alignment>
 800ee6a:	2104      	movs	r1, #4
 800ee6c:	4408      	add	r0, r1
 800ee6e:	4405      	add	r5, r0
 800ee70:	4628      	mov	r0, r5
 800ee72:	f001 fdeb 	bl	8010a4c <ucdr_alignment>
 800ee76:	3004      	adds	r0, #4
 800ee78:	4639      	mov	r1, r7
 800ee7a:	4405      	add	r5, r0
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	f001 fde5 	bl	8010a4c <ucdr_alignment>
 800ee82:	4420      	add	r0, r4
 800ee84:	4428      	add	r0, r5
 800ee86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ee88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800ee88:	4800      	ldr	r0, [pc, #0]	@ (800ee8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 800ee8a:	4770      	bx	lr
 800ee8c:	24000434 	.word	0x24000434

0800ee90 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 800ee90:	b570      	push	{r4, r5, r6, lr}
 800ee92:	460c      	mov	r4, r1
 800ee94:	4606      	mov	r6, r0
 800ee96:	f000 feb3 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800ee9a:	4605      	mov	r5, r0
 800ee9c:	f106 0008 	add.w	r0, r6, #8
 800eea0:	4425      	add	r5, r4
 800eea2:	f1c4 0401 	rsb	r4, r4, #1
 800eea6:	4629      	mov	r1, r5
 800eea8:	f000 feaa 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800eeac:	4405      	add	r5, r0
 800eeae:	2104      	movs	r1, #4
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	f001 fdcb 	bl	8010a4c <ucdr_alignment>
 800eeb6:	2104      	movs	r1, #4
 800eeb8:	4408      	add	r0, r1
 800eeba:	4405      	add	r5, r0
 800eebc:	4628      	mov	r0, r5
 800eebe:	f001 fdc5 	bl	8010a4c <ucdr_alignment>
 800eec2:	2104      	movs	r1, #4
 800eec4:	4408      	add	r0, r1
 800eec6:	1946      	adds	r6, r0, r5
 800eec8:	4630      	mov	r0, r6
 800eeca:	f001 fdbf 	bl	8010a4c <ucdr_alignment>
 800eece:	1d05      	adds	r5, r0, #4
 800eed0:	2101      	movs	r1, #1
 800eed2:	4435      	add	r5, r6
 800eed4:	4628      	mov	r0, r5
 800eed6:	f001 fdb9 	bl	8010a4c <ucdr_alignment>
 800eeda:	2101      	movs	r1, #1
 800eedc:	4408      	add	r0, r1
 800eede:	4405      	add	r5, r0
 800eee0:	4628      	mov	r0, r5
 800eee2:	f001 fdb3 	bl	8010a4c <ucdr_alignment>
 800eee6:	4420      	add	r0, r4
 800eee8:	4428      	add	r0, r5
 800eeea:	bd70      	pop	{r4, r5, r6, pc}

0800eeec <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800eeec:	b108      	cbz	r0, 800eef2 <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 800eeee:	f7ff bfcf 	b.w	800ee90 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800eef2:	4770      	bx	lr

0800eef4 <_Longitudinal__get_serialized_size>:
 800eef4:	b110      	cbz	r0, 800eefc <_Longitudinal__get_serialized_size+0x8>
 800eef6:	2100      	movs	r1, #0
 800eef8:	f7ff bfca 	b.w	800ee90 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800eefc:	4770      	bx	lr
 800eefe:	bf00      	nop

0800ef00 <_Longitudinal__cdr_deserialize>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	460c      	mov	r4, r1
 800ef04:	b361      	cbz	r1, 800ef60 <_Longitudinal__cdr_deserialize+0x60>
 800ef06:	4605      	mov	r5, r0
 800ef08:	f000 fede 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	4621      	mov	r1, r4
 800ef10:	4628      	mov	r0, r5
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	4798      	blx	r3
 800ef18:	f000 fed6 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	f104 0108 	add.w	r1, r4, #8
 800ef22:	4628      	mov	r0, r5
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	4798      	blx	r3
 800ef2a:	f104 0110 	add.w	r1, r4, #16
 800ef2e:	4628      	mov	r0, r5
 800ef30:	f001 fb3e 	bl	80105b0 <ucdr_deserialize_float>
 800ef34:	f104 0114 	add.w	r1, r4, #20
 800ef38:	4628      	mov	r0, r5
 800ef3a:	f001 fb39 	bl	80105b0 <ucdr_deserialize_float>
 800ef3e:	f104 0118 	add.w	r1, r4, #24
 800ef42:	4628      	mov	r0, r5
 800ef44:	f001 fb34 	bl	80105b0 <ucdr_deserialize_float>
 800ef48:	f104 011c 	add.w	r1, r4, #28
 800ef4c:	4628      	mov	r0, r5
 800ef4e:	f000 fed5 	bl	800fcfc <ucdr_deserialize_bool>
 800ef52:	f104 011d 	add.w	r1, r4, #29
 800ef56:	4628      	mov	r0, r5
 800ef58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef5c:	f000 bece 	b.w	800fcfc <ucdr_deserialize_bool>
 800ef60:	4608      	mov	r0, r1
 800ef62:	bd38      	pop	{r3, r4, r5, pc}

0800ef64 <_Longitudinal__cdr_serialize>:
 800ef64:	b360      	cbz	r0, 800efc0 <_Longitudinal__cdr_serialize+0x5c>
 800ef66:	b538      	push	{r3, r4, r5, lr}
 800ef68:	4604      	mov	r4, r0
 800ef6a:	460d      	mov	r5, r1
 800ef6c:	f000 feac 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ef70:	4603      	mov	r3, r0
 800ef72:	4629      	mov	r1, r5
 800ef74:	4620      	mov	r0, r4
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	689b      	ldr	r3, [r3, #8]
 800ef7a:	4798      	blx	r3
 800ef7c:	f000 fea4 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ef80:	4603      	mov	r3, r0
 800ef82:	4629      	mov	r1, r5
 800ef84:	f104 0008 	add.w	r0, r4, #8
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	689b      	ldr	r3, [r3, #8]
 800ef8c:	4798      	blx	r3
 800ef8e:	ed94 0a04 	vldr	s0, [r4, #16]
 800ef92:	4628      	mov	r0, r5
 800ef94:	f001 fa74 	bl	8010480 <ucdr_serialize_float>
 800ef98:	ed94 0a05 	vldr	s0, [r4, #20]
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f001 fa6f 	bl	8010480 <ucdr_serialize_float>
 800efa2:	ed94 0a06 	vldr	s0, [r4, #24]
 800efa6:	4628      	mov	r0, r5
 800efa8:	f001 fa6a 	bl	8010480 <ucdr_serialize_float>
 800efac:	7f21      	ldrb	r1, [r4, #28]
 800efae:	4628      	mov	r0, r5
 800efb0:	f000 fe8e 	bl	800fcd0 <ucdr_serialize_bool>
 800efb4:	7f61      	ldrb	r1, [r4, #29]
 800efb6:	4628      	mov	r0, r5
 800efb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efbc:	f000 be88 	b.w	800fcd0 <ucdr_serialize_bool>
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop

0800efc4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800efc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc6:	2701      	movs	r7, #1
 800efc8:	460c      	mov	r4, r1
 800efca:	4606      	mov	r6, r0
 800efcc:	7007      	strb	r7, [r0, #0]
 800efce:	f000 fe67 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800efd2:	4605      	mov	r5, r0
 800efd4:	4630      	mov	r0, r6
 800efd6:	4425      	add	r5, r4
 800efd8:	1b3c      	subs	r4, r7, r4
 800efda:	4629      	mov	r1, r5
 800efdc:	f000 fe60 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800efe0:	4405      	add	r5, r0
 800efe2:	2104      	movs	r1, #4
 800efe4:	4628      	mov	r0, r5
 800efe6:	f001 fd31 	bl	8010a4c <ucdr_alignment>
 800efea:	2104      	movs	r1, #4
 800efec:	4408      	add	r0, r1
 800efee:	4405      	add	r5, r0
 800eff0:	4628      	mov	r0, r5
 800eff2:	f001 fd2b 	bl	8010a4c <ucdr_alignment>
 800eff6:	2104      	movs	r1, #4
 800eff8:	4408      	add	r0, r1
 800effa:	1946      	adds	r6, r0, r5
 800effc:	4630      	mov	r0, r6
 800effe:	f001 fd25 	bl	8010a4c <ucdr_alignment>
 800f002:	1d05      	adds	r5, r0, #4
 800f004:	4639      	mov	r1, r7
 800f006:	4435      	add	r5, r6
 800f008:	4628      	mov	r0, r5
 800f00a:	f001 fd1f 	bl	8010a4c <ucdr_alignment>
 800f00e:	4438      	add	r0, r7
 800f010:	4639      	mov	r1, r7
 800f012:	4405      	add	r5, r0
 800f014:	4628      	mov	r0, r5
 800f016:	f001 fd19 	bl	8010a4c <ucdr_alignment>
 800f01a:	4420      	add	r0, r4
 800f01c:	4428      	add	r0, r5
 800f01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f020 <_Longitudinal__max_serialized_size>:
 800f020:	b500      	push	{lr}
 800f022:	b083      	sub	sp, #12
 800f024:	2100      	movs	r1, #0
 800f026:	f10d 0007 	add.w	r0, sp, #7
 800f02a:	f7ff ffcb 	bl	800efc4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800f02e:	b003      	add	sp, #12
 800f030:	f85d fb04 	ldr.w	pc, [sp], #4

0800f034 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800f034:	4800      	ldr	r0, [pc, #0]	@ (800f038 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 800f036:	4770      	bx	lr
 800f038:	2400045c 	.word	0x2400045c

0800f03c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800f03c:	4b04      	ldr	r3, [pc, #16]	@ (800f050 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 800f03e:	4805      	ldr	r0, [pc, #20]	@ (800f054 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4905      	ldr	r1, [pc, #20]	@ (800f058 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 800f044:	4a05      	ldr	r2, [pc, #20]	@ (800f05c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800f046:	6003      	str	r3, [r0, #0]
 800f048:	600b      	str	r3, [r1, #0]
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop
 800f050:	24000e0c 	.word	0x24000e0c
 800f054:	240004a8 	.word	0x240004a8
 800f058:	240004b4 	.word	0x240004b4
 800f05c:	2400048c 	.word	0x2400048c

0800f060 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800f060:	4a02      	ldr	r2, [pc, #8]	@ (800f06c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 800f062:	4b03      	ldr	r3, [pc, #12]	@ (800f070 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 800f064:	6812      	ldr	r2, [r2, #0]
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop
 800f06c:	24000e0c 	.word	0x24000e0c
 800f070:	240004c8 	.word	0x240004c8

0800f074 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800f074:	4a02      	ldr	r2, [pc, #8]	@ (800f080 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 800f076:	4b03      	ldr	r3, [pc, #12]	@ (800f084 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 800f078:	6812      	ldr	r2, [r2, #0]
 800f07a:	601a      	str	r2, [r3, #0]
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	24000e0c 	.word	0x24000e0c
 800f084:	240004dc 	.word	0x240004dc

0800f088 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800f088:	4a02      	ldr	r2, [pc, #8]	@ (800f094 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 800f08a:	4b03      	ldr	r3, [pc, #12]	@ (800f098 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 800f08c:	6812      	ldr	r2, [r2, #0]
 800f08e:	601a      	str	r2, [r3, #0]
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	24000e0c 	.word	0x24000e0c
 800f098:	240004f0 	.word	0x240004f0

0800f09c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800f09c:	4a02      	ldr	r2, [pc, #8]	@ (800f0a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 800f09e:	4b03      	ldr	r3, [pc, #12]	@ (800f0ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 800f0a0:	6812      	ldr	r2, [r2, #0]
 800f0a2:	601a      	str	r2, [r3, #0]
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	24000e0c 	.word	0x24000e0c
 800f0ac:	24000504 	.word	0x24000504

0800f0b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800f0b0:	4a02      	ldr	r2, [pc, #8]	@ (800f0bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 800f0b2:	4b03      	ldr	r3, [pc, #12]	@ (800f0c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 800f0b4:	6812      	ldr	r2, [r2, #0]
 800f0b6:	601a      	str	r2, [r3, #0]
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	24000e0c 	.word	0x24000e0c
 800f0c0:	24000518 	.word	0x24000518

0800f0c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800f0c4:	4a02      	ldr	r2, [pc, #8]	@ (800f0d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 800f0c6:	4b03      	ldr	r3, [pc, #12]	@ (800f0d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 800f0c8:	6812      	ldr	r2, [r2, #0]
 800f0ca:	601a      	str	r2, [r3, #0]
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	24000e0c 	.word	0x24000e0c
 800f0d4:	2400052c 	.word	0x2400052c

0800f0d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800f0d8:	4a02      	ldr	r2, [pc, #8]	@ (800f0e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 800f0da:	4b03      	ldr	r3, [pc, #12]	@ (800f0e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 800f0dc:	6812      	ldr	r2, [r2, #0]
 800f0de:	601a      	str	r2, [r3, #0]
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop
 800f0e4:	24000e0c 	.word	0x24000e0c
 800f0e8:	24000540 	.word	0x24000540

0800f0ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800f0ec:	4a02      	ldr	r2, [pc, #8]	@ (800f0f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 800f0ee:	4b03      	ldr	r3, [pc, #12]	@ (800f0fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 800f0f0:	6812      	ldr	r2, [r2, #0]
 800f0f2:	601a      	str	r2, [r3, #0]
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	24000e0c 	.word	0x24000e0c
 800f0fc:	24000554 	.word	0x24000554

0800f100 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800f100:	4a02      	ldr	r2, [pc, #8]	@ (800f10c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 800f102:	4b03      	ldr	r3, [pc, #12]	@ (800f110 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 800f104:	6812      	ldr	r2, [r2, #0]
 800f106:	601a      	str	r2, [r3, #0]
 800f108:	4770      	bx	lr
 800f10a:	bf00      	nop
 800f10c:	24000e0c 	.word	0x24000e0c
 800f110:	24000568 	.word	0x24000568

0800f114 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 800f114:	f002 b92e 	b.w	8011374 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

0800f118 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 800f118:	f002 b93e 	b.w	8011398 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

0800f11c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 800f11c:	f002 b940 	b.w	80113a0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

0800f120 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 800f120:	f002 b942 	b.w	80113a8 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

0800f124 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800f124:	b508      	push	{r3, lr}
 800f126:	f000 fd5d 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f12a:	4b06      	ldr	r3, [pc, #24]	@ (800f144 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800f12c:	4906      	ldr	r1, [pc, #24]	@ (800f148 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	60c8      	str	r0, [r1, #12]
 800f132:	b10a      	cbz	r2, 800f138 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 800f134:	4803      	ldr	r0, [pc, #12]	@ (800f144 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800f136:	bd08      	pop	{r3, pc}
 800f138:	4a04      	ldr	r2, [pc, #16]	@ (800f14c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 800f13a:	4802      	ldr	r0, [pc, #8]	@ (800f144 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800f13c:	6812      	ldr	r2, [r2, #0]
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	bd08      	pop	{r3, pc}
 800f142:	bf00      	nop
 800f144:	240005ec 	.word	0x240005ec
 800f148:	24000574 	.word	0x24000574
 800f14c:	24000e10 	.word	0x24000e10

0800f150 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800f150:	4b04      	ldr	r3, [pc, #16]	@ (800f164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	b10a      	cbz	r2, 800f15a <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 800f156:	4803      	ldr	r0, [pc, #12]	@ (800f164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800f158:	4770      	bx	lr
 800f15a:	4a03      	ldr	r2, [pc, #12]	@ (800f168 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 800f15c:	4801      	ldr	r0, [pc, #4]	@ (800f164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800f15e:	6812      	ldr	r2, [r2, #0]
 800f160:	601a      	str	r2, [r3, #0]
 800f162:	4770      	bx	lr
 800f164:	24000634 	.word	0x24000634
 800f168:	24000e10 	.word	0x24000e10

0800f16c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 800f16c:	4b16      	ldr	r3, [pc, #88]	@ (800f1c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	b510      	push	{r4, lr}
 800f172:	b132      	cbz	r2, 800f182 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 800f174:	685c      	ldr	r4, [r3, #4]
 800f176:	68a3      	ldr	r3, [r4, #8]
 800f178:	b153      	cbz	r3, 800f190 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 800f17a:	68e3      	ldr	r3, [r4, #12]
 800f17c:	b1a3      	cbz	r3, 800f1a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 800f17e:	4812      	ldr	r0, [pc, #72]	@ (800f1c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800f180:	bd10      	pop	{r4, pc}
 800f182:	4a12      	ldr	r2, [pc, #72]	@ (800f1cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800f184:	685c      	ldr	r4, [r3, #4]
 800f186:	6812      	ldr	r2, [r2, #0]
 800f188:	601a      	str	r2, [r3, #0]
 800f18a:	68a3      	ldr	r3, [r4, #8]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1f4      	bne.n	800f17a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 800f190:	f000 fd28 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f194:	4b0e      	ldr	r3, [pc, #56]	@ (800f1d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 800f196:	490f      	ldr	r1, [pc, #60]	@ (800f1d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	60c8      	str	r0, [r1, #12]
 800f19c:	b17a      	cbz	r2, 800f1be <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	60a3      	str	r3, [r4, #8]
 800f1a2:	68e3      	ldr	r3, [r4, #12]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d1ea      	bne.n	800f17e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 800f1a8:	4b0b      	ldr	r3, [pc, #44]	@ (800f1d8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	b11a      	cbz	r2, 800f1b6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	4805      	ldr	r0, [pc, #20]	@ (800f1c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800f1b2:	60e3      	str	r3, [r4, #12]
 800f1b4:	bd10      	pop	{r4, pc}
 800f1b6:	4a05      	ldr	r2, [pc, #20]	@ (800f1cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800f1b8:	6812      	ldr	r2, [r2, #0]
 800f1ba:	601a      	str	r2, [r3, #0]
 800f1bc:	e7f7      	b.n	800f1ae <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 800f1be:	4a03      	ldr	r2, [pc, #12]	@ (800f1cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800f1c0:	6812      	ldr	r2, [r2, #0]
 800f1c2:	601a      	str	r2, [r3, #0]
 800f1c4:	e7eb      	b.n	800f19e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 800f1c6:	bf00      	nop
 800f1c8:	24000650 	.word	0x24000650
 800f1cc:	24000e10 	.word	0x24000e10
 800f1d0:	240005ec 	.word	0x240005ec
 800f1d4:	24000574 	.word	0x24000574
 800f1d8:	24000634 	.word	0x24000634

0800f1dc <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 800f1dc:	f002 b8e6 	b.w	80113ac <autoware_vehicle_msgs__msg__ControlModeReport__init>

0800f1e0 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 800f1e0:	f002 b8f6 	b.w	80113d0 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

0800f1e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800f1e4:	b508      	push	{r3, lr}
 800f1e6:	f000 fcfd 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f1ea:	4b06      	ldr	r3, [pc, #24]	@ (800f204 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800f1ec:	4906      	ldr	r1, [pc, #24]	@ (800f208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	60c8      	str	r0, [r1, #12]
 800f1f2:	b10a      	cbz	r2, 800f1f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 800f1f4:	4803      	ldr	r0, [pc, #12]	@ (800f204 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800f1f6:	bd08      	pop	{r3, pc}
 800f1f8:	4a04      	ldr	r2, [pc, #16]	@ (800f20c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 800f1fa:	4802      	ldr	r0, [pc, #8]	@ (800f204 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800f1fc:	6812      	ldr	r2, [r2, #0]
 800f1fe:	601a      	str	r2, [r3, #0]
 800f200:	bd08      	pop	{r3, pc}
 800f202:	bf00      	nop
 800f204:	240006d4 	.word	0x240006d4
 800f208:	2400065c 	.word	0x2400065c
 800f20c:	24000e10 	.word	0x24000e10

0800f210 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 800f210:	f002 b8e2 	b.w	80113d8 <autoware_vehicle_msgs__msg__GearCommand__init>

0800f214 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 800f214:	f002 b8f2 	b.w	80113fc <autoware_vehicle_msgs__msg__GearCommand__fini>

0800f218 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800f218:	b508      	push	{r3, lr}
 800f21a:	f000 fce3 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f21e:	4b06      	ldr	r3, [pc, #24]	@ (800f238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800f220:	4906      	ldr	r1, [pc, #24]	@ (800f23c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	60c8      	str	r0, [r1, #12]
 800f226:	b10a      	cbz	r2, 800f22c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 800f228:	4803      	ldr	r0, [pc, #12]	@ (800f238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800f22a:	bd08      	pop	{r3, pc}
 800f22c:	4a04      	ldr	r2, [pc, #16]	@ (800f240 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 800f22e:	4802      	ldr	r0, [pc, #8]	@ (800f238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800f230:	6812      	ldr	r2, [r2, #0]
 800f232:	601a      	str	r2, [r3, #0]
 800f234:	bd08      	pop	{r3, pc}
 800f236:	bf00      	nop
 800f238:	24000758 	.word	0x24000758
 800f23c:	240006e0 	.word	0x240006e0
 800f240:	24000e10 	.word	0x24000e10

0800f244 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 800f244:	f002 b8de 	b.w	8011404 <autoware_vehicle_msgs__msg__GearReport__init>

0800f248 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 800f248:	f002 b8ee 	b.w	8011428 <autoware_vehicle_msgs__msg__GearReport__fini>

0800f24c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800f24c:	b508      	push	{r3, lr}
 800f24e:	f000 fcc9 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f252:	4b06      	ldr	r3, [pc, #24]	@ (800f26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800f254:	4906      	ldr	r1, [pc, #24]	@ (800f270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	60c8      	str	r0, [r1, #12]
 800f25a:	b10a      	cbz	r2, 800f260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 800f25c:	4803      	ldr	r0, [pc, #12]	@ (800f26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800f25e:	bd08      	pop	{r3, pc}
 800f260:	4a04      	ldr	r2, [pc, #16]	@ (800f274 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 800f262:	4802      	ldr	r0, [pc, #8]	@ (800f26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800f264:	6812      	ldr	r2, [r2, #0]
 800f266:	601a      	str	r2, [r3, #0]
 800f268:	bd08      	pop	{r3, pc}
 800f26a:	bf00      	nop
 800f26c:	240007dc 	.word	0x240007dc
 800f270:	24000764 	.word	0x24000764
 800f274:	24000e10 	.word	0x24000e10

0800f278 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 800f278:	f002 b8da 	b.w	8011430 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

0800f27c <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 800f27c:	f002 b8ea 	b.w	8011454 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

0800f280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800f280:	b508      	push	{r3, lr}
 800f282:	f000 fcaf 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f286:	4b06      	ldr	r3, [pc, #24]	@ (800f2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800f288:	4906      	ldr	r1, [pc, #24]	@ (800f2a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	60c8      	str	r0, [r1, #12]
 800f28e:	b10a      	cbz	r2, 800f294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 800f290:	4803      	ldr	r0, [pc, #12]	@ (800f2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800f292:	bd08      	pop	{r3, pc}
 800f294:	4a04      	ldr	r2, [pc, #16]	@ (800f2a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 800f296:	4802      	ldr	r0, [pc, #8]	@ (800f2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800f298:	6812      	ldr	r2, [r2, #0]
 800f29a:	601a      	str	r2, [r3, #0]
 800f29c:	bd08      	pop	{r3, pc}
 800f29e:	bf00      	nop
 800f2a0:	24000860 	.word	0x24000860
 800f2a4:	240007e8 	.word	0x240007e8
 800f2a8:	24000e10 	.word	0x24000e10

0800f2ac <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 800f2ac:	f002 b8d6 	b.w	801145c <autoware_vehicle_msgs__msg__HazardLightsReport__init>

0800f2b0 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 800f2b0:	f002 b8e6 	b.w	8011480 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

0800f2b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800f2b4:	b508      	push	{r3, lr}
 800f2b6:	f000 fc95 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f2ba:	4b06      	ldr	r3, [pc, #24]	@ (800f2d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800f2bc:	4906      	ldr	r1, [pc, #24]	@ (800f2d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	60c8      	str	r0, [r1, #12]
 800f2c2:	b10a      	cbz	r2, 800f2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 800f2c4:	4803      	ldr	r0, [pc, #12]	@ (800f2d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800f2c6:	bd08      	pop	{r3, pc}
 800f2c8:	4a04      	ldr	r2, [pc, #16]	@ (800f2dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 800f2ca:	4802      	ldr	r0, [pc, #8]	@ (800f2d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800f2cc:	6812      	ldr	r2, [r2, #0]
 800f2ce:	601a      	str	r2, [r3, #0]
 800f2d0:	bd08      	pop	{r3, pc}
 800f2d2:	bf00      	nop
 800f2d4:	240008e4 	.word	0x240008e4
 800f2d8:	2400086c 	.word	0x2400086c
 800f2dc:	24000e10 	.word	0x24000e10

0800f2e0 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 800f2e0:	f002 b8d2 	b.w	8011488 <autoware_vehicle_msgs__msg__SteeringReport__init>

0800f2e4 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 800f2e4:	f002 b8e2 	b.w	80114ac <autoware_vehicle_msgs__msg__SteeringReport__fini>

0800f2e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800f2e8:	b508      	push	{r3, lr}
 800f2ea:	f000 fc7b 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f2ee:	4b06      	ldr	r3, [pc, #24]	@ (800f308 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800f2f0:	4906      	ldr	r1, [pc, #24]	@ (800f30c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	60c8      	str	r0, [r1, #12]
 800f2f6:	b10a      	cbz	r2, 800f2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 800f2f8:	4803      	ldr	r0, [pc, #12]	@ (800f308 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800f2fa:	bd08      	pop	{r3, pc}
 800f2fc:	4a04      	ldr	r2, [pc, #16]	@ (800f310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 800f2fe:	4802      	ldr	r0, [pc, #8]	@ (800f308 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800f300:	6812      	ldr	r2, [r2, #0]
 800f302:	601a      	str	r2, [r3, #0]
 800f304:	bd08      	pop	{r3, pc}
 800f306:	bf00      	nop
 800f308:	24000968 	.word	0x24000968
 800f30c:	240008f0 	.word	0x240008f0
 800f310:	24000e10 	.word	0x24000e10

0800f314 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 800f314:	f002 b8ce 	b.w	80114b4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

0800f318 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 800f318:	f002 b8de 	b.w	80114d8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

0800f31c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800f31c:	b508      	push	{r3, lr}
 800f31e:	f000 fc61 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f322:	4b06      	ldr	r3, [pc, #24]	@ (800f33c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800f324:	4906      	ldr	r1, [pc, #24]	@ (800f340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	60c8      	str	r0, [r1, #12]
 800f32a:	b10a      	cbz	r2, 800f330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 800f32c:	4803      	ldr	r0, [pc, #12]	@ (800f33c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800f32e:	bd08      	pop	{r3, pc}
 800f330:	4a04      	ldr	r2, [pc, #16]	@ (800f344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 800f332:	4802      	ldr	r0, [pc, #8]	@ (800f33c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800f334:	6812      	ldr	r2, [r2, #0]
 800f336:	601a      	str	r2, [r3, #0]
 800f338:	bd08      	pop	{r3, pc}
 800f33a:	bf00      	nop
 800f33c:	240009ec 	.word	0x240009ec
 800f340:	24000974 	.word	0x24000974
 800f344:	24000e10 	.word	0x24000e10

0800f348 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 800f348:	f002 b8ca 	b.w	80114e0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

0800f34c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 800f34c:	f002 b8da 	b.w	8011504 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

0800f350 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800f350:	b508      	push	{r3, lr}
 800f352:	f000 fc47 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f356:	4b06      	ldr	r3, [pc, #24]	@ (800f370 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800f358:	4906      	ldr	r1, [pc, #24]	@ (800f374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	60c8      	str	r0, [r1, #12]
 800f35e:	b10a      	cbz	r2, 800f364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 800f360:	4803      	ldr	r0, [pc, #12]	@ (800f370 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800f362:	bd08      	pop	{r3, pc}
 800f364:	4a04      	ldr	r2, [pc, #16]	@ (800f378 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 800f366:	4802      	ldr	r0, [pc, #8]	@ (800f370 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800f368:	6812      	ldr	r2, [r2, #0]
 800f36a:	601a      	str	r2, [r3, #0]
 800f36c:	bd08      	pop	{r3, pc}
 800f36e:	bf00      	nop
 800f370:	24000a70 	.word	0x24000a70
 800f374:	240009f8 	.word	0x240009f8
 800f378:	24000e10 	.word	0x24000e10

0800f37c <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 800f37c:	f002 b8c6 	b.w	801150c <autoware_vehicle_msgs__msg__VelocityReport__init>

0800f380 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 800f380:	f002 b8d6 	b.w	8011530 <autoware_vehicle_msgs__msg__VelocityReport__fini>

0800f384 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800f384:	b508      	push	{r3, lr}
 800f386:	f001 fc57 	bl	8010c38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f38a:	4b06      	ldr	r3, [pc, #24]	@ (800f3a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800f38c:	4906      	ldr	r1, [pc, #24]	@ (800f3a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	60c8      	str	r0, [r1, #12]
 800f392:	b10a      	cbz	r2, 800f398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 800f394:	4803      	ldr	r0, [pc, #12]	@ (800f3a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800f396:	bd08      	pop	{r3, pc}
 800f398:	4a04      	ldr	r2, [pc, #16]	@ (800f3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 800f39a:	4802      	ldr	r0, [pc, #8]	@ (800f3a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800f39c:	6812      	ldr	r2, [r2, #0]
 800f39e:	601a      	str	r2, [r3, #0]
 800f3a0:	bd08      	pop	{r3, pc}
 800f3a2:	bf00      	nop
 800f3a4:	24000b6c 	.word	0x24000b6c
 800f3a8:	24000a7c 	.word	0x24000a7c
 800f3ac:	24000e10 	.word	0x24000e10

0800f3b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800f3b0:	4800      	ldr	r0, [pc, #0]	@ (800f3b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 800f3b2:	4770      	bx	lr
 800f3b4:	24000b94 	.word	0x24000b94

0800f3b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800f3b8:	4800      	ldr	r0, [pc, #0]	@ (800f3bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 800f3ba:	4770      	bx	lr
 800f3bc:	24000ba0 	.word	0x24000ba0

0800f3c0 <_ControlModeCommand_Response__max_serialized_size>:
 800f3c0:	2101      	movs	r1, #1
 800f3c2:	2000      	movs	r0, #0
 800f3c4:	b508      	push	{r3, lr}
 800f3c6:	f001 fb41 	bl	8010a4c <ucdr_alignment>
 800f3ca:	3001      	adds	r0, #1
 800f3cc:	bd08      	pop	{r3, pc}
 800f3ce:	bf00      	nop

0800f3d0 <_ControlModeCommand_Response__cdr_deserialize>:
 800f3d0:	b109      	cbz	r1, 800f3d6 <_ControlModeCommand_Response__cdr_deserialize+0x6>
 800f3d2:	f000 bc93 	b.w	800fcfc <ucdr_deserialize_bool>
 800f3d6:	4608      	mov	r0, r1
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop

0800f3dc <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800f3dc:	b538      	push	{r3, r4, r5, lr}
 800f3de:	b158      	cbz	r0, 800f3f8 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 800f3e0:	460d      	mov	r5, r1
 800f3e2:	f000 fc0d 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f3e6:	2101      	movs	r1, #1
 800f3e8:	182c      	adds	r4, r5, r0
 800f3ea:	f1c5 0501 	rsb	r5, r5, #1
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f001 fb2c 	bl	8010a4c <ucdr_alignment>
 800f3f4:	4428      	add	r0, r5
 800f3f6:	4420      	add	r0, r4
 800f3f8:	bd38      	pop	{r3, r4, r5, pc}
 800f3fa:	bf00      	nop

0800f3fc <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800f3fc:	b138      	cbz	r0, 800f40e <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 800f3fe:	b508      	push	{r3, lr}
 800f400:	460b      	mov	r3, r1
 800f402:	2101      	movs	r1, #1
 800f404:	4618      	mov	r0, r3
 800f406:	f001 fb21 	bl	8010a4c <ucdr_alignment>
 800f40a:	3001      	adds	r0, #1
 800f40c:	bd08      	pop	{r3, pc}
 800f40e:	4770      	bx	lr

0800f410 <_ControlModeCommand_Request__cdr_deserialize>:
 800f410:	b538      	push	{r3, r4, r5, lr}
 800f412:	460c      	mov	r4, r1
 800f414:	b179      	cbz	r1, 800f436 <_ControlModeCommand_Request__cdr_deserialize+0x26>
 800f416:	4605      	mov	r5, r0
 800f418:	f000 fc56 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f41c:	4603      	mov	r3, r0
 800f41e:	4621      	mov	r1, r4
 800f420:	4628      	mov	r0, r5
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	4798      	blx	r3
 800f428:	f104 0108 	add.w	r1, r4, #8
 800f42c:	4628      	mov	r0, r5
 800f42e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f432:	f000 bc91 	b.w	800fd58 <ucdr_deserialize_uint8_t>
 800f436:	4608      	mov	r0, r1
 800f438:	bd38      	pop	{r3, r4, r5, pc}
 800f43a:	bf00      	nop

0800f43c <_ControlModeCommand_Request__cdr_serialize>:
 800f43c:	b180      	cbz	r0, 800f460 <_ControlModeCommand_Request__cdr_serialize+0x24>
 800f43e:	b538      	push	{r3, r4, r5, lr}
 800f440:	4604      	mov	r4, r0
 800f442:	460d      	mov	r5, r1
 800f444:	f000 fc40 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f448:	4603      	mov	r3, r0
 800f44a:	4629      	mov	r1, r5
 800f44c:	4620      	mov	r0, r4
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	689b      	ldr	r3, [r3, #8]
 800f452:	4798      	blx	r3
 800f454:	7a21      	ldrb	r1, [r4, #8]
 800f456:	4628      	mov	r0, r5
 800f458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f45c:	f000 bc66 	b.w	800fd2c <ucdr_serialize_uint8_t>
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop

0800f464 <_ControlModeCommand_Response__cdr_serialize>:
 800f464:	460a      	mov	r2, r1
 800f466:	b118      	cbz	r0, 800f470 <_ControlModeCommand_Response__cdr_serialize+0xc>
 800f468:	7801      	ldrb	r1, [r0, #0]
 800f46a:	4610      	mov	r0, r2
 800f46c:	f000 bc30 	b.w	800fcd0 <ucdr_serialize_bool>
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop

0800f474 <_ControlModeCommand_Response__get_serialized_size>:
 800f474:	b130      	cbz	r0, 800f484 <_ControlModeCommand_Response__get_serialized_size+0x10>
 800f476:	2101      	movs	r1, #1
 800f478:	2000      	movs	r0, #0
 800f47a:	b508      	push	{r3, lr}
 800f47c:	f001 fae6 	bl	8010a4c <ucdr_alignment>
 800f480:	3001      	adds	r0, #1
 800f482:	bd08      	pop	{r3, pc}
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop

0800f488 <_ControlModeCommand_Request__get_serialized_size>:
 800f488:	b150      	cbz	r0, 800f4a0 <_ControlModeCommand_Request__get_serialized_size+0x18>
 800f48a:	2100      	movs	r1, #0
 800f48c:	b510      	push	{r4, lr}
 800f48e:	f000 fbb7 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f492:	4604      	mov	r4, r0
 800f494:	2101      	movs	r1, #1
 800f496:	f001 fad9 	bl	8010a4c <ucdr_alignment>
 800f49a:	4420      	add	r0, r4
 800f49c:	3001      	adds	r0, #1
 800f49e:	bd10      	pop	{r4, pc}
 800f4a0:	4770      	bx	lr
 800f4a2:	bf00      	nop

0800f4a4 <_ControlModeCommand_Request__max_serialized_size>:
 800f4a4:	b510      	push	{r4, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	2401      	movs	r4, #1
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	f10d 0007 	add.w	r0, sp, #7
 800f4b0:	f88d 4007 	strb.w	r4, [sp, #7]
 800f4b4:	f000 fbf4 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800f4b8:	4621      	mov	r1, r4
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	f001 fac6 	bl	8010a4c <ucdr_alignment>
 800f4c0:	4420      	add	r0, r4
 800f4c2:	3001      	adds	r0, #1
 800f4c4:	b002      	add	sp, #8
 800f4c6:	bd10      	pop	{r4, pc}

0800f4c8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 800f4c8:	4800      	ldr	r0, [pc, #0]	@ (800f4cc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 800f4ca:	4770      	bx	lr
 800f4cc:	24000b88 	.word	0x24000b88

0800f4d0 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	b158      	cbz	r0, 800f4ec <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 800f4d4:	460d      	mov	r5, r1
 800f4d6:	f000 fb93 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f4da:	2101      	movs	r1, #1
 800f4dc:	182c      	adds	r4, r5, r0
 800f4de:	f1c5 0501 	rsb	r5, r5, #1
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f001 fab2 	bl	8010a4c <ucdr_alignment>
 800f4e8:	4428      	add	r0, r5
 800f4ea:	4420      	add	r0, r4
 800f4ec:	bd38      	pop	{r3, r4, r5, pc}
 800f4ee:	bf00      	nop

0800f4f0 <_ControlModeReport__cdr_deserialize>:
 800f4f0:	b538      	push	{r3, r4, r5, lr}
 800f4f2:	460c      	mov	r4, r1
 800f4f4:	b179      	cbz	r1, 800f516 <_ControlModeReport__cdr_deserialize+0x26>
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	f000 fbe6 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	4621      	mov	r1, r4
 800f500:	4628      	mov	r0, r5
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	4798      	blx	r3
 800f508:	f104 0108 	add.w	r1, r4, #8
 800f50c:	4628      	mov	r0, r5
 800f50e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f512:	f000 bc21 	b.w	800fd58 <ucdr_deserialize_uint8_t>
 800f516:	4608      	mov	r0, r1
 800f518:	bd38      	pop	{r3, r4, r5, pc}
 800f51a:	bf00      	nop

0800f51c <_ControlModeReport__cdr_serialize>:
 800f51c:	b180      	cbz	r0, 800f540 <_ControlModeReport__cdr_serialize+0x24>
 800f51e:	b538      	push	{r3, r4, r5, lr}
 800f520:	4604      	mov	r4, r0
 800f522:	460d      	mov	r5, r1
 800f524:	f000 fbd0 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f528:	4603      	mov	r3, r0
 800f52a:	4629      	mov	r1, r5
 800f52c:	4620      	mov	r0, r4
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	4798      	blx	r3
 800f534:	7a21      	ldrb	r1, [r4, #8]
 800f536:	4628      	mov	r0, r5
 800f538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f53c:	f000 bbf6 	b.w	800fd2c <ucdr_serialize_uint8_t>
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop

0800f544 <_ControlModeReport__get_serialized_size>:
 800f544:	b150      	cbz	r0, 800f55c <_ControlModeReport__get_serialized_size+0x18>
 800f546:	2100      	movs	r1, #0
 800f548:	b510      	push	{r4, lr}
 800f54a:	f000 fb59 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f54e:	4604      	mov	r4, r0
 800f550:	2101      	movs	r1, #1
 800f552:	f001 fa7b 	bl	8010a4c <ucdr_alignment>
 800f556:	4420      	add	r0, r4
 800f558:	3001      	adds	r0, #1
 800f55a:	bd10      	pop	{r4, pc}
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop

0800f560 <_ControlModeReport__max_serialized_size>:
 800f560:	b510      	push	{r4, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	2401      	movs	r4, #1
 800f566:	2100      	movs	r1, #0
 800f568:	f10d 0007 	add.w	r0, sp, #7
 800f56c:	f88d 4007 	strb.w	r4, [sp, #7]
 800f570:	f000 fb96 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800f574:	4621      	mov	r1, r4
 800f576:	4604      	mov	r4, r0
 800f578:	f001 fa68 	bl	8010a4c <ucdr_alignment>
 800f57c:	4420      	add	r0, r4
 800f57e:	3001      	adds	r0, #1
 800f580:	b002      	add	sp, #8
 800f582:	bd10      	pop	{r4, pc}

0800f584 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800f584:	4800      	ldr	r0, [pc, #0]	@ (800f588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 800f586:	4770      	bx	lr
 800f588:	24000be4 	.word	0x24000be4

0800f58c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 800f58c:	b538      	push	{r3, r4, r5, lr}
 800f58e:	b158      	cbz	r0, 800f5a8 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 800f590:	460d      	mov	r5, r1
 800f592:	f000 fb35 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f596:	2101      	movs	r1, #1
 800f598:	182c      	adds	r4, r5, r0
 800f59a:	f1c5 0501 	rsb	r5, r5, #1
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f001 fa54 	bl	8010a4c <ucdr_alignment>
 800f5a4:	4428      	add	r0, r5
 800f5a6:	4420      	add	r0, r4
 800f5a8:	bd38      	pop	{r3, r4, r5, pc}
 800f5aa:	bf00      	nop

0800f5ac <_GearCommand__cdr_deserialize>:
 800f5ac:	b538      	push	{r3, r4, r5, lr}
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	b179      	cbz	r1, 800f5d2 <_GearCommand__cdr_deserialize+0x26>
 800f5b2:	4605      	mov	r5, r0
 800f5b4:	f000 fb88 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	4621      	mov	r1, r4
 800f5bc:	4628      	mov	r0, r5
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	4798      	blx	r3
 800f5c4:	f104 0108 	add.w	r1, r4, #8
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5ce:	f000 bbc3 	b.w	800fd58 <ucdr_deserialize_uint8_t>
 800f5d2:	4608      	mov	r0, r1
 800f5d4:	bd38      	pop	{r3, r4, r5, pc}
 800f5d6:	bf00      	nop

0800f5d8 <_GearCommand__cdr_serialize>:
 800f5d8:	b180      	cbz	r0, 800f5fc <_GearCommand__cdr_serialize+0x24>
 800f5da:	b538      	push	{r3, r4, r5, lr}
 800f5dc:	4604      	mov	r4, r0
 800f5de:	460d      	mov	r5, r1
 800f5e0:	f000 fb72 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	689b      	ldr	r3, [r3, #8]
 800f5ee:	4798      	blx	r3
 800f5f0:	7a21      	ldrb	r1, [r4, #8]
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5f8:	f000 bb98 	b.w	800fd2c <ucdr_serialize_uint8_t>
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop

0800f600 <_GearCommand__get_serialized_size>:
 800f600:	b150      	cbz	r0, 800f618 <_GearCommand__get_serialized_size+0x18>
 800f602:	2100      	movs	r1, #0
 800f604:	b510      	push	{r4, lr}
 800f606:	f000 fafb 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f60a:	4604      	mov	r4, r0
 800f60c:	2101      	movs	r1, #1
 800f60e:	f001 fa1d 	bl	8010a4c <ucdr_alignment>
 800f612:	4420      	add	r0, r4
 800f614:	3001      	adds	r0, #1
 800f616:	bd10      	pop	{r4, pc}
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop

0800f61c <_GearCommand__max_serialized_size>:
 800f61c:	b510      	push	{r4, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	2401      	movs	r4, #1
 800f622:	2100      	movs	r1, #0
 800f624:	f10d 0007 	add.w	r0, sp, #7
 800f628:	f88d 4007 	strb.w	r4, [sp, #7]
 800f62c:	f000 fb38 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800f630:	4621      	mov	r1, r4
 800f632:	4604      	mov	r4, r0
 800f634:	f001 fa0a 	bl	8010a4c <ucdr_alignment>
 800f638:	4420      	add	r0, r4
 800f63a:	3001      	adds	r0, #1
 800f63c:	b002      	add	sp, #8
 800f63e:	bd10      	pop	{r4, pc}

0800f640 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800f640:	4800      	ldr	r0, [pc, #0]	@ (800f644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 800f642:	4770      	bx	lr
 800f644:	24000c0c 	.word	0x24000c0c

0800f648 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	b158      	cbz	r0, 800f664 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 800f64c:	460d      	mov	r5, r1
 800f64e:	f000 fad7 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f652:	2101      	movs	r1, #1
 800f654:	182c      	adds	r4, r5, r0
 800f656:	f1c5 0501 	rsb	r5, r5, #1
 800f65a:	4620      	mov	r0, r4
 800f65c:	f001 f9f6 	bl	8010a4c <ucdr_alignment>
 800f660:	4428      	add	r0, r5
 800f662:	4420      	add	r0, r4
 800f664:	bd38      	pop	{r3, r4, r5, pc}
 800f666:	bf00      	nop

0800f668 <_GearReport__cdr_deserialize>:
 800f668:	b538      	push	{r3, r4, r5, lr}
 800f66a:	460c      	mov	r4, r1
 800f66c:	b179      	cbz	r1, 800f68e <_GearReport__cdr_deserialize+0x26>
 800f66e:	4605      	mov	r5, r0
 800f670:	f000 fb2a 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f674:	4603      	mov	r3, r0
 800f676:	4621      	mov	r1, r4
 800f678:	4628      	mov	r0, r5
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	4798      	blx	r3
 800f680:	f104 0108 	add.w	r1, r4, #8
 800f684:	4628      	mov	r0, r5
 800f686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f68a:	f000 bb65 	b.w	800fd58 <ucdr_deserialize_uint8_t>
 800f68e:	4608      	mov	r0, r1
 800f690:	bd38      	pop	{r3, r4, r5, pc}
 800f692:	bf00      	nop

0800f694 <_GearReport__cdr_serialize>:
 800f694:	b180      	cbz	r0, 800f6b8 <_GearReport__cdr_serialize+0x24>
 800f696:	b538      	push	{r3, r4, r5, lr}
 800f698:	4604      	mov	r4, r0
 800f69a:	460d      	mov	r5, r1
 800f69c:	f000 fb14 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	4629      	mov	r1, r5
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	4798      	blx	r3
 800f6ac:	7a21      	ldrb	r1, [r4, #8]
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6b4:	f000 bb3a 	b.w	800fd2c <ucdr_serialize_uint8_t>
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop

0800f6bc <_GearReport__get_serialized_size>:
 800f6bc:	b150      	cbz	r0, 800f6d4 <_GearReport__get_serialized_size+0x18>
 800f6be:	2100      	movs	r1, #0
 800f6c0:	b510      	push	{r4, lr}
 800f6c2:	f000 fa9d 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f6c6:	4604      	mov	r4, r0
 800f6c8:	2101      	movs	r1, #1
 800f6ca:	f001 f9bf 	bl	8010a4c <ucdr_alignment>
 800f6ce:	4420      	add	r0, r4
 800f6d0:	3001      	adds	r0, #1
 800f6d2:	bd10      	pop	{r4, pc}
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop

0800f6d8 <_GearReport__max_serialized_size>:
 800f6d8:	b510      	push	{r4, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	2401      	movs	r4, #1
 800f6de:	2100      	movs	r1, #0
 800f6e0:	f10d 0007 	add.w	r0, sp, #7
 800f6e4:	f88d 4007 	strb.w	r4, [sp, #7]
 800f6e8:	f000 fada 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	f001 f9ac 	bl	8010a4c <ucdr_alignment>
 800f6f4:	4420      	add	r0, r4
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	b002      	add	sp, #8
 800f6fa:	bd10      	pop	{r4, pc}

0800f6fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800f6fc:	4800      	ldr	r0, [pc, #0]	@ (800f700 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 800f6fe:	4770      	bx	lr
 800f700:	24000c34 	.word	0x24000c34

0800f704 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	b158      	cbz	r0, 800f720 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 800f708:	460d      	mov	r5, r1
 800f70a:	f000 fa79 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f70e:	2101      	movs	r1, #1
 800f710:	182c      	adds	r4, r5, r0
 800f712:	f1c5 0501 	rsb	r5, r5, #1
 800f716:	4620      	mov	r0, r4
 800f718:	f001 f998 	bl	8010a4c <ucdr_alignment>
 800f71c:	4428      	add	r0, r5
 800f71e:	4420      	add	r0, r4
 800f720:	bd38      	pop	{r3, r4, r5, pc}
 800f722:	bf00      	nop

0800f724 <_HazardLightsCommand__cdr_deserialize>:
 800f724:	b538      	push	{r3, r4, r5, lr}
 800f726:	460c      	mov	r4, r1
 800f728:	b179      	cbz	r1, 800f74a <_HazardLightsCommand__cdr_deserialize+0x26>
 800f72a:	4605      	mov	r5, r0
 800f72c:	f000 facc 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f730:	4603      	mov	r3, r0
 800f732:	4621      	mov	r1, r4
 800f734:	4628      	mov	r0, r5
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	4798      	blx	r3
 800f73c:	f104 0108 	add.w	r1, r4, #8
 800f740:	4628      	mov	r0, r5
 800f742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f746:	f000 bb07 	b.w	800fd58 <ucdr_deserialize_uint8_t>
 800f74a:	4608      	mov	r0, r1
 800f74c:	bd38      	pop	{r3, r4, r5, pc}
 800f74e:	bf00      	nop

0800f750 <_HazardLightsCommand__cdr_serialize>:
 800f750:	b180      	cbz	r0, 800f774 <_HazardLightsCommand__cdr_serialize+0x24>
 800f752:	b538      	push	{r3, r4, r5, lr}
 800f754:	4604      	mov	r4, r0
 800f756:	460d      	mov	r5, r1
 800f758:	f000 fab6 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f75c:	4603      	mov	r3, r0
 800f75e:	4629      	mov	r1, r5
 800f760:	4620      	mov	r0, r4
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	4798      	blx	r3
 800f768:	7a21      	ldrb	r1, [r4, #8]
 800f76a:	4628      	mov	r0, r5
 800f76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f770:	f000 badc 	b.w	800fd2c <ucdr_serialize_uint8_t>
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop

0800f778 <_HazardLightsCommand__get_serialized_size>:
 800f778:	b150      	cbz	r0, 800f790 <_HazardLightsCommand__get_serialized_size+0x18>
 800f77a:	2100      	movs	r1, #0
 800f77c:	b510      	push	{r4, lr}
 800f77e:	f000 fa3f 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f782:	4604      	mov	r4, r0
 800f784:	2101      	movs	r1, #1
 800f786:	f001 f961 	bl	8010a4c <ucdr_alignment>
 800f78a:	4420      	add	r0, r4
 800f78c:	3001      	adds	r0, #1
 800f78e:	bd10      	pop	{r4, pc}
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop

0800f794 <_HazardLightsCommand__max_serialized_size>:
 800f794:	b510      	push	{r4, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	2401      	movs	r4, #1
 800f79a:	2100      	movs	r1, #0
 800f79c:	f10d 0007 	add.w	r0, sp, #7
 800f7a0:	f88d 4007 	strb.w	r4, [sp, #7]
 800f7a4:	f000 fa7c 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800f7a8:	4621      	mov	r1, r4
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	f001 f94e 	bl	8010a4c <ucdr_alignment>
 800f7b0:	4420      	add	r0, r4
 800f7b2:	3001      	adds	r0, #1
 800f7b4:	b002      	add	sp, #8
 800f7b6:	bd10      	pop	{r4, pc}

0800f7b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800f7b8:	4800      	ldr	r0, [pc, #0]	@ (800f7bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 800f7ba:	4770      	bx	lr
 800f7bc:	24000c5c 	.word	0x24000c5c

0800f7c0 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	b158      	cbz	r0, 800f7dc <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 800f7c4:	460d      	mov	r5, r1
 800f7c6:	f000 fa1b 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f7ca:	2101      	movs	r1, #1
 800f7cc:	182c      	adds	r4, r5, r0
 800f7ce:	f1c5 0501 	rsb	r5, r5, #1
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f001 f93a 	bl	8010a4c <ucdr_alignment>
 800f7d8:	4428      	add	r0, r5
 800f7da:	4420      	add	r0, r4
 800f7dc:	bd38      	pop	{r3, r4, r5, pc}
 800f7de:	bf00      	nop

0800f7e0 <_HazardLightsReport__cdr_deserialize>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	460c      	mov	r4, r1
 800f7e4:	b179      	cbz	r1, 800f806 <_HazardLightsReport__cdr_deserialize+0x26>
 800f7e6:	4605      	mov	r5, r0
 800f7e8:	f000 fa6e 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	4621      	mov	r1, r4
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	68db      	ldr	r3, [r3, #12]
 800f7f6:	4798      	blx	r3
 800f7f8:	f104 0108 	add.w	r1, r4, #8
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f802:	f000 baa9 	b.w	800fd58 <ucdr_deserialize_uint8_t>
 800f806:	4608      	mov	r0, r1
 800f808:	bd38      	pop	{r3, r4, r5, pc}
 800f80a:	bf00      	nop

0800f80c <_HazardLightsReport__cdr_serialize>:
 800f80c:	b180      	cbz	r0, 800f830 <_HazardLightsReport__cdr_serialize+0x24>
 800f80e:	b538      	push	{r3, r4, r5, lr}
 800f810:	4604      	mov	r4, r0
 800f812:	460d      	mov	r5, r1
 800f814:	f000 fa58 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f818:	4603      	mov	r3, r0
 800f81a:	4629      	mov	r1, r5
 800f81c:	4620      	mov	r0, r4
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	689b      	ldr	r3, [r3, #8]
 800f822:	4798      	blx	r3
 800f824:	7a21      	ldrb	r1, [r4, #8]
 800f826:	4628      	mov	r0, r5
 800f828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f82c:	f000 ba7e 	b.w	800fd2c <ucdr_serialize_uint8_t>
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop

0800f834 <_HazardLightsReport__get_serialized_size>:
 800f834:	b150      	cbz	r0, 800f84c <_HazardLightsReport__get_serialized_size+0x18>
 800f836:	2100      	movs	r1, #0
 800f838:	b510      	push	{r4, lr}
 800f83a:	f000 f9e1 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f83e:	4604      	mov	r4, r0
 800f840:	2101      	movs	r1, #1
 800f842:	f001 f903 	bl	8010a4c <ucdr_alignment>
 800f846:	4420      	add	r0, r4
 800f848:	3001      	adds	r0, #1
 800f84a:	bd10      	pop	{r4, pc}
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop

0800f850 <_HazardLightsReport__max_serialized_size>:
 800f850:	b510      	push	{r4, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	2401      	movs	r4, #1
 800f856:	2100      	movs	r1, #0
 800f858:	f10d 0007 	add.w	r0, sp, #7
 800f85c:	f88d 4007 	strb.w	r4, [sp, #7]
 800f860:	f000 fa1e 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800f864:	4621      	mov	r1, r4
 800f866:	4604      	mov	r4, r0
 800f868:	f001 f8f0 	bl	8010a4c <ucdr_alignment>
 800f86c:	4420      	add	r0, r4
 800f86e:	3001      	adds	r0, #1
 800f870:	b002      	add	sp, #8
 800f872:	bd10      	pop	{r4, pc}

0800f874 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800f874:	4800      	ldr	r0, [pc, #0]	@ (800f878 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 800f876:	4770      	bx	lr
 800f878:	24000c84 	.word	0x24000c84

0800f87c <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 800f87c:	b538      	push	{r3, r4, r5, lr}
 800f87e:	b158      	cbz	r0, 800f898 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 800f880:	460d      	mov	r5, r1
 800f882:	f000 f9bd 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f886:	2104      	movs	r1, #4
 800f888:	182c      	adds	r4, r5, r0
 800f88a:	f1c5 0504 	rsb	r5, r5, #4
 800f88e:	4620      	mov	r0, r4
 800f890:	f001 f8dc 	bl	8010a4c <ucdr_alignment>
 800f894:	4428      	add	r0, r5
 800f896:	4420      	add	r0, r4
 800f898:	bd38      	pop	{r3, r4, r5, pc}
 800f89a:	bf00      	nop

0800f89c <_SteeringReport__cdr_deserialize>:
 800f89c:	b538      	push	{r3, r4, r5, lr}
 800f89e:	460c      	mov	r4, r1
 800f8a0:	b179      	cbz	r1, 800f8c2 <_SteeringReport__cdr_deserialize+0x26>
 800f8a2:	4605      	mov	r5, r0
 800f8a4:	f000 fa10 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	4621      	mov	r1, r4
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	4798      	blx	r3
 800f8b4:	f104 0108 	add.w	r1, r4, #8
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8be:	f000 be77 	b.w	80105b0 <ucdr_deserialize_float>
 800f8c2:	4608      	mov	r0, r1
 800f8c4:	bd38      	pop	{r3, r4, r5, pc}
 800f8c6:	bf00      	nop

0800f8c8 <_SteeringReport__cdr_serialize>:
 800f8c8:	b188      	cbz	r0, 800f8ee <_SteeringReport__cdr_serialize+0x26>
 800f8ca:	b538      	push	{r3, r4, r5, lr}
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	460d      	mov	r5, r1
 800f8d0:	f000 f9fa 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	4620      	mov	r0, r4
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	4798      	blx	r3
 800f8e0:	ed94 0a02 	vldr	s0, [r4, #8]
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8ea:	f000 bdc9 	b.w	8010480 <ucdr_serialize_float>
 800f8ee:	4770      	bx	lr

0800f8f0 <_SteeringReport__get_serialized_size>:
 800f8f0:	b150      	cbz	r0, 800f908 <_SteeringReport__get_serialized_size+0x18>
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	b510      	push	{r4, lr}
 800f8f6:	f000 f983 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	2104      	movs	r1, #4
 800f8fe:	f001 f8a5 	bl	8010a4c <ucdr_alignment>
 800f902:	4420      	add	r0, r4
 800f904:	3004      	adds	r0, #4
 800f906:	bd10      	pop	{r4, pc}
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop

0800f90c <_SteeringReport__max_serialized_size>:
 800f90c:	b510      	push	{r4, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	2301      	movs	r3, #1
 800f912:	2100      	movs	r1, #0
 800f914:	f10d 0007 	add.w	r0, sp, #7
 800f918:	f88d 3007 	strb.w	r3, [sp, #7]
 800f91c:	f000 f9c0 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800f920:	4604      	mov	r4, r0
 800f922:	2104      	movs	r1, #4
 800f924:	f001 f892 	bl	8010a4c <ucdr_alignment>
 800f928:	4420      	add	r0, r4
 800f92a:	3004      	adds	r0, #4
 800f92c:	b002      	add	sp, #8
 800f92e:	bd10      	pop	{r4, pc}

0800f930 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800f930:	4800      	ldr	r0, [pc, #0]	@ (800f934 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 800f932:	4770      	bx	lr
 800f934:	24000cac 	.word	0x24000cac

0800f938 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800f938:	b538      	push	{r3, r4, r5, lr}
 800f93a:	b158      	cbz	r0, 800f954 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 800f93c:	460d      	mov	r5, r1
 800f93e:	f000 f95f 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f942:	2101      	movs	r1, #1
 800f944:	182c      	adds	r4, r5, r0
 800f946:	f1c5 0501 	rsb	r5, r5, #1
 800f94a:	4620      	mov	r0, r4
 800f94c:	f001 f87e 	bl	8010a4c <ucdr_alignment>
 800f950:	4428      	add	r0, r5
 800f952:	4420      	add	r0, r4
 800f954:	bd38      	pop	{r3, r4, r5, pc}
 800f956:	bf00      	nop

0800f958 <_TurnIndicatorsCommand__cdr_deserialize>:
 800f958:	b538      	push	{r3, r4, r5, lr}
 800f95a:	460c      	mov	r4, r1
 800f95c:	b179      	cbz	r1, 800f97e <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 800f95e:	4605      	mov	r5, r0
 800f960:	f000 f9b2 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f964:	4603      	mov	r3, r0
 800f966:	4621      	mov	r1, r4
 800f968:	4628      	mov	r0, r5
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	68db      	ldr	r3, [r3, #12]
 800f96e:	4798      	blx	r3
 800f970:	f104 0108 	add.w	r1, r4, #8
 800f974:	4628      	mov	r0, r5
 800f976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f97a:	f000 b9ed 	b.w	800fd58 <ucdr_deserialize_uint8_t>
 800f97e:	4608      	mov	r0, r1
 800f980:	bd38      	pop	{r3, r4, r5, pc}
 800f982:	bf00      	nop

0800f984 <_TurnIndicatorsCommand__cdr_serialize>:
 800f984:	b180      	cbz	r0, 800f9a8 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 800f986:	b538      	push	{r3, r4, r5, lr}
 800f988:	4604      	mov	r4, r0
 800f98a:	460d      	mov	r5, r1
 800f98c:	f000 f99c 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f990:	4603      	mov	r3, r0
 800f992:	4629      	mov	r1, r5
 800f994:	4620      	mov	r0, r4
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	4798      	blx	r3
 800f99c:	7a21      	ldrb	r1, [r4, #8]
 800f99e:	4628      	mov	r0, r5
 800f9a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9a4:	f000 b9c2 	b.w	800fd2c <ucdr_serialize_uint8_t>
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop

0800f9ac <_TurnIndicatorsCommand__get_serialized_size>:
 800f9ac:	b150      	cbz	r0, 800f9c4 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	b510      	push	{r4, lr}
 800f9b2:	f000 f925 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	2101      	movs	r1, #1
 800f9ba:	f001 f847 	bl	8010a4c <ucdr_alignment>
 800f9be:	4420      	add	r0, r4
 800f9c0:	3001      	adds	r0, #1
 800f9c2:	bd10      	pop	{r4, pc}
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop

0800f9c8 <_TurnIndicatorsCommand__max_serialized_size>:
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	2401      	movs	r4, #1
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	f10d 0007 	add.w	r0, sp, #7
 800f9d4:	f88d 4007 	strb.w	r4, [sp, #7]
 800f9d8:	f000 f962 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800f9dc:	4621      	mov	r1, r4
 800f9de:	4604      	mov	r4, r0
 800f9e0:	f001 f834 	bl	8010a4c <ucdr_alignment>
 800f9e4:	4420      	add	r0, r4
 800f9e6:	3001      	adds	r0, #1
 800f9e8:	b002      	add	sp, #8
 800f9ea:	bd10      	pop	{r4, pc}

0800f9ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800f9ec:	4800      	ldr	r0, [pc, #0]	@ (800f9f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 800f9ee:	4770      	bx	lr
 800f9f0:	24000cd4 	.word	0x24000cd4

0800f9f4 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800f9f4:	b538      	push	{r3, r4, r5, lr}
 800f9f6:	b158      	cbz	r0, 800fa10 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 800f9f8:	460d      	mov	r5, r1
 800f9fa:	f000 f901 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800f9fe:	2101      	movs	r1, #1
 800fa00:	182c      	adds	r4, r5, r0
 800fa02:	f1c5 0501 	rsb	r5, r5, #1
 800fa06:	4620      	mov	r0, r4
 800fa08:	f001 f820 	bl	8010a4c <ucdr_alignment>
 800fa0c:	4428      	add	r0, r5
 800fa0e:	4420      	add	r0, r4
 800fa10:	bd38      	pop	{r3, r4, r5, pc}
 800fa12:	bf00      	nop

0800fa14 <_TurnIndicatorsReport__cdr_deserialize>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	460c      	mov	r4, r1
 800fa18:	b179      	cbz	r1, 800fa3a <_TurnIndicatorsReport__cdr_deserialize+0x26>
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	f000 f954 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa20:	4603      	mov	r3, r0
 800fa22:	4621      	mov	r1, r4
 800fa24:	4628      	mov	r0, r5
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	68db      	ldr	r3, [r3, #12]
 800fa2a:	4798      	blx	r3
 800fa2c:	f104 0108 	add.w	r1, r4, #8
 800fa30:	4628      	mov	r0, r5
 800fa32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa36:	f000 b98f 	b.w	800fd58 <ucdr_deserialize_uint8_t>
 800fa3a:	4608      	mov	r0, r1
 800fa3c:	bd38      	pop	{r3, r4, r5, pc}
 800fa3e:	bf00      	nop

0800fa40 <_TurnIndicatorsReport__cdr_serialize>:
 800fa40:	b180      	cbz	r0, 800fa64 <_TurnIndicatorsReport__cdr_serialize+0x24>
 800fa42:	b538      	push	{r3, r4, r5, lr}
 800fa44:	4604      	mov	r4, r0
 800fa46:	460d      	mov	r5, r1
 800fa48:	f000 f93e 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	4629      	mov	r1, r5
 800fa50:	4620      	mov	r0, r4
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	689b      	ldr	r3, [r3, #8]
 800fa56:	4798      	blx	r3
 800fa58:	7a21      	ldrb	r1, [r4, #8]
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa60:	f000 b964 	b.w	800fd2c <ucdr_serialize_uint8_t>
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop

0800fa68 <_TurnIndicatorsReport__get_serialized_size>:
 800fa68:	b150      	cbz	r0, 800fa80 <_TurnIndicatorsReport__get_serialized_size+0x18>
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	b510      	push	{r4, lr}
 800fa6e:	f000 f8c7 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 800fa72:	4604      	mov	r4, r0
 800fa74:	2101      	movs	r1, #1
 800fa76:	f000 ffe9 	bl	8010a4c <ucdr_alignment>
 800fa7a:	4420      	add	r0, r4
 800fa7c:	3001      	adds	r0, #1
 800fa7e:	bd10      	pop	{r4, pc}
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop

0800fa84 <_TurnIndicatorsReport__max_serialized_size>:
 800fa84:	b510      	push	{r4, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	2401      	movs	r4, #1
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	f10d 0007 	add.w	r0, sp, #7
 800fa90:	f88d 4007 	strb.w	r4, [sp, #7]
 800fa94:	f000 f904 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 800fa98:	4621      	mov	r1, r4
 800fa9a:	4604      	mov	r4, r0
 800fa9c:	f000 ffd6 	bl	8010a4c <ucdr_alignment>
 800faa0:	4420      	add	r0, r4
 800faa2:	3001      	adds	r0, #1
 800faa4:	b002      	add	sp, #8
 800faa6:	bd10      	pop	{r4, pc}

0800faa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800faa8:	4800      	ldr	r0, [pc, #0]	@ (800faac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 800faaa:	4770      	bx	lr
 800faac:	24000cfc 	.word	0x24000cfc

0800fab0 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 800fab0:	b1c8      	cbz	r0, 800fae6 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 800fab2:	b570      	push	{r4, r5, r6, lr}
 800fab4:	460d      	mov	r5, r1
 800fab6:	f001 f8e3 	bl	8010c80 <get_serialized_size_std_msgs__msg__Header>
 800faba:	2104      	movs	r1, #4
 800fabc:	182e      	adds	r6, r5, r0
 800fabe:	f1c5 0504 	rsb	r5, r5, #4
 800fac2:	4630      	mov	r0, r6
 800fac4:	f000 ffc2 	bl	8010a4c <ucdr_alignment>
 800fac8:	2104      	movs	r1, #4
 800faca:	1844      	adds	r4, r0, r1
 800facc:	4434      	add	r4, r6
 800face:	4620      	mov	r0, r4
 800fad0:	f000 ffbc 	bl	8010a4c <ucdr_alignment>
 800fad4:	2104      	movs	r1, #4
 800fad6:	4408      	add	r0, r1
 800fad8:	4404      	add	r4, r0
 800fada:	4620      	mov	r0, r4
 800fadc:	f000 ffb6 	bl	8010a4c <ucdr_alignment>
 800fae0:	4428      	add	r0, r5
 800fae2:	4420      	add	r0, r4
 800fae4:	bd70      	pop	{r4, r5, r6, pc}
 800fae6:	4770      	bx	lr

0800fae8 <_VelocityReport__cdr_deserialize>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	460c      	mov	r4, r1
 800faec:	b1c9      	cbz	r1, 800fb22 <_VelocityReport__cdr_deserialize+0x3a>
 800faee:	4605      	mov	r5, r0
 800faf0:	f001 f94a 	bl	8010d88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800faf4:	4603      	mov	r3, r0
 800faf6:	4621      	mov	r1, r4
 800faf8:	4628      	mov	r0, r5
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	4798      	blx	r3
 800fb00:	f104 0114 	add.w	r1, r4, #20
 800fb04:	4628      	mov	r0, r5
 800fb06:	f000 fd53 	bl	80105b0 <ucdr_deserialize_float>
 800fb0a:	f104 0118 	add.w	r1, r4, #24
 800fb0e:	4628      	mov	r0, r5
 800fb10:	f000 fd4e 	bl	80105b0 <ucdr_deserialize_float>
 800fb14:	f104 011c 	add.w	r1, r4, #28
 800fb18:	4628      	mov	r0, r5
 800fb1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb1e:	f000 bd47 	b.w	80105b0 <ucdr_deserialize_float>
 800fb22:	4608      	mov	r0, r1
 800fb24:	bd38      	pop	{r3, r4, r5, pc}
 800fb26:	bf00      	nop

0800fb28 <_VelocityReport__cdr_serialize>:
 800fb28:	b1d8      	cbz	r0, 800fb62 <_VelocityReport__cdr_serialize+0x3a>
 800fb2a:	b538      	push	{r3, r4, r5, lr}
 800fb2c:	4604      	mov	r4, r0
 800fb2e:	460d      	mov	r5, r1
 800fb30:	f001 f92a 	bl	8010d88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800fb34:	4603      	mov	r3, r0
 800fb36:	4629      	mov	r1, r5
 800fb38:	4620      	mov	r0, r4
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	689b      	ldr	r3, [r3, #8]
 800fb3e:	4798      	blx	r3
 800fb40:	ed94 0a05 	vldr	s0, [r4, #20]
 800fb44:	4628      	mov	r0, r5
 800fb46:	f000 fc9b 	bl	8010480 <ucdr_serialize_float>
 800fb4a:	ed94 0a06 	vldr	s0, [r4, #24]
 800fb4e:	4628      	mov	r0, r5
 800fb50:	f000 fc96 	bl	8010480 <ucdr_serialize_float>
 800fb54:	ed94 0a07 	vldr	s0, [r4, #28]
 800fb58:	4628      	mov	r0, r5
 800fb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb5e:	f000 bc8f 	b.w	8010480 <ucdr_serialize_float>
 800fb62:	4770      	bx	lr

0800fb64 <_VelocityReport__get_serialized_size>:
 800fb64:	b1b0      	cbz	r0, 800fb94 <_VelocityReport__get_serialized_size+0x30>
 800fb66:	2100      	movs	r1, #0
 800fb68:	b510      	push	{r4, lr}
 800fb6a:	f001 f889 	bl	8010c80 <get_serialized_size_std_msgs__msg__Header>
 800fb6e:	4604      	mov	r4, r0
 800fb70:	2104      	movs	r1, #4
 800fb72:	f000 ff6b 	bl	8010a4c <ucdr_alignment>
 800fb76:	2104      	movs	r1, #4
 800fb78:	4420      	add	r0, r4
 800fb7a:	1844      	adds	r4, r0, r1
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	f000 ff65 	bl	8010a4c <ucdr_alignment>
 800fb82:	2104      	movs	r1, #4
 800fb84:	4408      	add	r0, r1
 800fb86:	4404      	add	r4, r0
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f000 ff5f 	bl	8010a4c <ucdr_alignment>
 800fb8e:	3004      	adds	r0, #4
 800fb90:	4420      	add	r0, r4
 800fb92:	bd10      	pop	{r4, pc}
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop

0800fb98 <_VelocityReport__max_serialized_size>:
 800fb98:	b510      	push	{r4, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	2100      	movs	r1, #0
 800fba0:	f10d 0007 	add.w	r0, sp, #7
 800fba4:	f88d 3007 	strb.w	r3, [sp, #7]
 800fba8:	f001 f8e4 	bl	8010d74 <max_serialized_size_std_msgs__msg__Header>
 800fbac:	4604      	mov	r4, r0
 800fbae:	2104      	movs	r1, #4
 800fbb0:	f000 ff4c 	bl	8010a4c <ucdr_alignment>
 800fbb4:	2104      	movs	r1, #4
 800fbb6:	4420      	add	r0, r4
 800fbb8:	1844      	adds	r4, r0, r1
 800fbba:	4620      	mov	r0, r4
 800fbbc:	f000 ff46 	bl	8010a4c <ucdr_alignment>
 800fbc0:	2104      	movs	r1, #4
 800fbc2:	4408      	add	r0, r1
 800fbc4:	4404      	add	r4, r0
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f000 ff40 	bl	8010a4c <ucdr_alignment>
 800fbcc:	3004      	adds	r0, #4
 800fbce:	4420      	add	r0, r4
 800fbd0:	b002      	add	sp, #8
 800fbd2:	bd10      	pop	{r4, pc}

0800fbd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800fbd4:	4800      	ldr	r0, [pc, #0]	@ (800fbd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 800fbd6:	4770      	bx	lr
 800fbd8:	24000d24 	.word	0x24000d24

0800fbdc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800fbdc:	f001 bcac 	b.w	8011538 <builtin_interfaces__msg__Time__init>

0800fbe0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800fbe0:	f001 bcae 	b.w	8011540 <builtin_interfaces__msg__Time__fini>

0800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fbe4:	4b04      	ldr	r3, [pc, #16]	@ (800fbf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	b10a      	cbz	r2, 800fbee <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800fbea:	4803      	ldr	r0, [pc, #12]	@ (800fbf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fbec:	4770      	bx	lr
 800fbee:	4a03      	ldr	r2, [pc, #12]	@ (800fbfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800fbf0:	4801      	ldr	r0, [pc, #4]	@ (800fbf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fbf2:	6812      	ldr	r2, [r2, #0]
 800fbf4:	601a      	str	r2, [r3, #0]
 800fbf6:	4770      	bx	lr
 800fbf8:	24000dc4 	.word	0x24000dc4
 800fbfc:	24000e10 	.word	0x24000e10

0800fc00 <get_serialized_size_builtin_interfaces__msg__Time>:
 800fc00:	b180      	cbz	r0, 800fc24 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800fc02:	b538      	push	{r3, r4, r5, lr}
 800fc04:	460d      	mov	r5, r1
 800fc06:	2104      	movs	r1, #4
 800fc08:	4628      	mov	r0, r5
 800fc0a:	f000 ff1f 	bl	8010a4c <ucdr_alignment>
 800fc0e:	1d2b      	adds	r3, r5, #4
 800fc10:	f1c5 0504 	rsb	r5, r5, #4
 800fc14:	2104      	movs	r1, #4
 800fc16:	181c      	adds	r4, r3, r0
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f000 ff17 	bl	8010a4c <ucdr_alignment>
 800fc1e:	4428      	add	r0, r5
 800fc20:	4420      	add	r0, r4
 800fc22:	bd38      	pop	{r3, r4, r5, pc}
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop

0800fc28 <_Time__cdr_deserialize>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	b141      	cbz	r1, 800fc40 <_Time__cdr_deserialize+0x18>
 800fc2e:	4605      	mov	r5, r0
 800fc30:	f000 fb96 	bl	8010360 <ucdr_deserialize_int32_t>
 800fc34:	1d21      	adds	r1, r4, #4
 800fc36:	4628      	mov	r0, r5
 800fc38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc3c:	f000 b9d2 	b.w	800ffe4 <ucdr_deserialize_uint32_t>
 800fc40:	4608      	mov	r0, r1
 800fc42:	bd38      	pop	{r3, r4, r5, pc}

0800fc44 <_Time__cdr_serialize>:
 800fc44:	b160      	cbz	r0, 800fc60 <_Time__cdr_serialize+0x1c>
 800fc46:	b538      	push	{r3, r4, r5, lr}
 800fc48:	460d      	mov	r5, r1
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	6801      	ldr	r1, [r0, #0]
 800fc4e:	4628      	mov	r0, r5
 800fc50:	f000 faee 	bl	8010230 <ucdr_serialize_int32_t>
 800fc54:	6861      	ldr	r1, [r4, #4]
 800fc56:	4628      	mov	r0, r5
 800fc58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc5c:	f000 b892 	b.w	800fd84 <ucdr_serialize_uint32_t>
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop

0800fc64 <_Time__get_serialized_size>:
 800fc64:	b160      	cbz	r0, 800fc80 <_Time__get_serialized_size+0x1c>
 800fc66:	2104      	movs	r1, #4
 800fc68:	2000      	movs	r0, #0
 800fc6a:	b510      	push	{r4, lr}
 800fc6c:	f000 feee 	bl	8010a4c <ucdr_alignment>
 800fc70:	2104      	movs	r1, #4
 800fc72:	1844      	adds	r4, r0, r1
 800fc74:	4620      	mov	r0, r4
 800fc76:	f000 fee9 	bl	8010a4c <ucdr_alignment>
 800fc7a:	3004      	adds	r0, #4
 800fc7c:	4420      	add	r0, r4
 800fc7e:	bd10      	pop	{r4, pc}
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop

0800fc84 <_Time__max_serialized_size>:
 800fc84:	b510      	push	{r4, lr}
 800fc86:	2104      	movs	r1, #4
 800fc88:	2000      	movs	r0, #0
 800fc8a:	f000 fedf 	bl	8010a4c <ucdr_alignment>
 800fc8e:	2104      	movs	r1, #4
 800fc90:	1844      	adds	r4, r0, r1
 800fc92:	4620      	mov	r0, r4
 800fc94:	f000 feda 	bl	8010a4c <ucdr_alignment>
 800fc98:	3004      	adds	r0, #4
 800fc9a:	4420      	add	r0, r4
 800fc9c:	bd10      	pop	{r4, pc}
 800fc9e:	bf00      	nop

0800fca0 <max_serialized_size_builtin_interfaces__msg__Time>:
 800fca0:	b538      	push	{r3, r4, r5, lr}
 800fca2:	460c      	mov	r4, r1
 800fca4:	2301      	movs	r3, #1
 800fca6:	2104      	movs	r1, #4
 800fca8:	1d25      	adds	r5, r4, #4
 800fcaa:	7003      	strb	r3, [r0, #0]
 800fcac:	4620      	mov	r0, r4
 800fcae:	f1c4 0404 	rsb	r4, r4, #4
 800fcb2:	f000 fecb 	bl	8010a4c <ucdr_alignment>
 800fcb6:	4405      	add	r5, r0
 800fcb8:	2104      	movs	r1, #4
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f000 fec6 	bl	8010a4c <ucdr_alignment>
 800fcc0:	4420      	add	r0, r4
 800fcc2:	4428      	add	r0, r5
 800fcc4:	bd38      	pop	{r3, r4, r5, pc}
 800fcc6:	bf00      	nop

0800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fcc8:	4800      	ldr	r0, [pc, #0]	@ (800fccc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800fcca:	4770      	bx	lr
 800fccc:	24000dd0 	.word	0x24000dd0

0800fcd0 <ucdr_serialize_bool>:
 800fcd0:	b538      	push	{r3, r4, r5, lr}
 800fcd2:	460d      	mov	r5, r1
 800fcd4:	2101      	movs	r1, #1
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	f000 fe9c 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 800fcdc:	b148      	cbz	r0, 800fcf2 <ucdr_serialize_bool+0x22>
 800fcde:	68a3      	ldr	r3, [r4, #8]
 800fce0:	2101      	movs	r1, #1
 800fce2:	701d      	strb	r5, [r3, #0]
 800fce4:	68a2      	ldr	r2, [r4, #8]
 800fce6:	6923      	ldr	r3, [r4, #16]
 800fce8:	440a      	add	r2, r1
 800fcea:	7561      	strb	r1, [r4, #21]
 800fcec:	440b      	add	r3, r1
 800fcee:	60a2      	str	r2, [r4, #8]
 800fcf0:	6123      	str	r3, [r4, #16]
 800fcf2:	7da0      	ldrb	r0, [r4, #22]
 800fcf4:	f080 0001 	eor.w	r0, r0, #1
 800fcf8:	bd38      	pop	{r3, r4, r5, pc}
 800fcfa:	bf00      	nop

0800fcfc <ucdr_deserialize_bool>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	460d      	mov	r5, r1
 800fd00:	2101      	movs	r1, #1
 800fd02:	4604      	mov	r4, r0
 800fd04:	f000 fe86 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 800fd08:	b160      	cbz	r0, 800fd24 <ucdr_deserialize_bool+0x28>
 800fd0a:	68a2      	ldr	r2, [r4, #8]
 800fd0c:	2101      	movs	r1, #1
 800fd0e:	6923      	ldr	r3, [r4, #16]
 800fd10:	f812 0b01 	ldrb.w	r0, [r2], #1
 800fd14:	440b      	add	r3, r1
 800fd16:	3800      	subs	r0, #0
 800fd18:	bf18      	it	ne
 800fd1a:	2001      	movne	r0, #1
 800fd1c:	7028      	strb	r0, [r5, #0]
 800fd1e:	60a2      	str	r2, [r4, #8]
 800fd20:	6123      	str	r3, [r4, #16]
 800fd22:	7561      	strb	r1, [r4, #21]
 800fd24:	7da0      	ldrb	r0, [r4, #22]
 800fd26:	f080 0001 	eor.w	r0, r0, #1
 800fd2a:	bd38      	pop	{r3, r4, r5, pc}

0800fd2c <ucdr_serialize_uint8_t>:
 800fd2c:	b538      	push	{r3, r4, r5, lr}
 800fd2e:	460d      	mov	r5, r1
 800fd30:	2101      	movs	r1, #1
 800fd32:	4604      	mov	r4, r0
 800fd34:	f000 fe6e 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 800fd38:	b148      	cbz	r0, 800fd4e <ucdr_serialize_uint8_t+0x22>
 800fd3a:	68a3      	ldr	r3, [r4, #8]
 800fd3c:	2101      	movs	r1, #1
 800fd3e:	701d      	strb	r5, [r3, #0]
 800fd40:	68a2      	ldr	r2, [r4, #8]
 800fd42:	6923      	ldr	r3, [r4, #16]
 800fd44:	440a      	add	r2, r1
 800fd46:	7561      	strb	r1, [r4, #21]
 800fd48:	440b      	add	r3, r1
 800fd4a:	60a2      	str	r2, [r4, #8]
 800fd4c:	6123      	str	r3, [r4, #16]
 800fd4e:	7da0      	ldrb	r0, [r4, #22]
 800fd50:	f080 0001 	eor.w	r0, r0, #1
 800fd54:	bd38      	pop	{r3, r4, r5, pc}
 800fd56:	bf00      	nop

0800fd58 <ucdr_deserialize_uint8_t>:
 800fd58:	b538      	push	{r3, r4, r5, lr}
 800fd5a:	460d      	mov	r5, r1
 800fd5c:	2101      	movs	r1, #1
 800fd5e:	4604      	mov	r4, r0
 800fd60:	f000 fe58 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 800fd64:	b150      	cbz	r0, 800fd7c <ucdr_deserialize_uint8_t+0x24>
 800fd66:	68a3      	ldr	r3, [r4, #8]
 800fd68:	2101      	movs	r1, #1
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	702b      	strb	r3, [r5, #0]
 800fd6e:	68a2      	ldr	r2, [r4, #8]
 800fd70:	6923      	ldr	r3, [r4, #16]
 800fd72:	440a      	add	r2, r1
 800fd74:	7561      	strb	r1, [r4, #21]
 800fd76:	440b      	add	r3, r1
 800fd78:	60a2      	str	r2, [r4, #8]
 800fd7a:	6123      	str	r3, [r4, #16]
 800fd7c:	7da0      	ldrb	r0, [r4, #22]
 800fd7e:	f080 0001 	eor.w	r0, r0, #1
 800fd82:	bd38      	pop	{r3, r4, r5, pc}

0800fd84 <ucdr_serialize_uint32_t>:
 800fd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd88:	b082      	sub	sp, #8
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	9101      	str	r1, [sp, #4]
 800fd8e:	2104      	movs	r1, #4
 800fd90:	f000 fe64 	bl	8010a5c <ucdr_buffer_alignment>
 800fd94:	4601      	mov	r1, r0
 800fd96:	4620      	mov	r0, r4
 800fd98:	7d67      	ldrb	r7, [r4, #21]
 800fd9a:	f000 fea3 	bl	8010ae4 <ucdr_advance_buffer>
 800fd9e:	2104      	movs	r1, #4
 800fda0:	4620      	mov	r0, r4
 800fda2:	f000 fe2b 	bl	80109fc <ucdr_check_buffer_available_for>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	d139      	bne.n	800fe1e <ucdr_serialize_uint32_t+0x9a>
 800fdaa:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fdae:	42ab      	cmp	r3, r5
 800fdb0:	d930      	bls.n	800fe14 <ucdr_serialize_uint32_t+0x90>
 800fdb2:	1b5e      	subs	r6, r3, r5
 800fdb4:	60a3      	str	r3, [r4, #8]
 800fdb6:	6923      	ldr	r3, [r4, #16]
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f1c6 0804 	rsb	r8, r6, #4
 800fdbe:	4433      	add	r3, r6
 800fdc0:	4641      	mov	r1, r8
 800fdc2:	6123      	str	r3, [r4, #16]
 800fdc4:	f000 fe26 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d04c      	beq.n	800fe66 <ucdr_serialize_uint32_t+0xe2>
 800fdcc:	7d23      	ldrb	r3, [r4, #20]
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d063      	beq.n	800fe9a <ucdr_serialize_uint32_t+0x116>
 800fdd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fdd6:	702b      	strb	r3, [r5, #0]
 800fdd8:	2e00      	cmp	r6, #0
 800fdda:	d051      	beq.n	800fe80 <ucdr_serialize_uint32_t+0xfc>
 800fddc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fde0:	2e01      	cmp	r6, #1
 800fde2:	706b      	strb	r3, [r5, #1]
 800fde4:	d050      	beq.n	800fe88 <ucdr_serialize_uint32_t+0x104>
 800fde6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fdea:	2e02      	cmp	r6, #2
 800fdec:	70ab      	strb	r3, [r5, #2]
 800fdee:	d04f      	beq.n	800fe90 <ucdr_serialize_uint32_t+0x10c>
 800fdf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fdf4:	70eb      	strb	r3, [r5, #3]
 800fdf6:	6923      	ldr	r3, [r4, #16]
 800fdf8:	2104      	movs	r1, #4
 800fdfa:	68a2      	ldr	r2, [r4, #8]
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	7da0      	ldrb	r0, [r4, #22]
 800fe00:	4442      	add	r2, r8
 800fe02:	7561      	strb	r1, [r4, #21]
 800fe04:	1b9e      	subs	r6, r3, r6
 800fe06:	f080 0001 	eor.w	r0, r0, #1
 800fe0a:	60a2      	str	r2, [r4, #8]
 800fe0c:	6126      	str	r6, [r4, #16]
 800fe0e:	b002      	add	sp, #8
 800fe10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe14:	2104      	movs	r1, #4
 800fe16:	4620      	mov	r0, r4
 800fe18:	f000 fdfc 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 800fe1c:	b1d0      	cbz	r0, 800fe54 <ucdr_serialize_uint32_t+0xd0>
 800fe1e:	7d23      	ldrb	r3, [r4, #20]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	68a3      	ldr	r3, [r4, #8]
 800fe24:	d01c      	beq.n	800fe60 <ucdr_serialize_uint32_t+0xdc>
 800fe26:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fe2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe2e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fe32:	7018      	strb	r0, [r3, #0]
 800fe34:	68a3      	ldr	r3, [r4, #8]
 800fe36:	705a      	strb	r2, [r3, #1]
 800fe38:	68a3      	ldr	r3, [r4, #8]
 800fe3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe3e:	7099      	strb	r1, [r3, #2]
 800fe40:	68a3      	ldr	r3, [r4, #8]
 800fe42:	70da      	strb	r2, [r3, #3]
 800fe44:	2104      	movs	r1, #4
 800fe46:	68a2      	ldr	r2, [r4, #8]
 800fe48:	6923      	ldr	r3, [r4, #16]
 800fe4a:	440a      	add	r2, r1
 800fe4c:	7561      	strb	r1, [r4, #21]
 800fe4e:	440b      	add	r3, r1
 800fe50:	60a2      	str	r2, [r4, #8]
 800fe52:	6123      	str	r3, [r4, #16]
 800fe54:	7da0      	ldrb	r0, [r4, #22]
 800fe56:	f080 0001 	eor.w	r0, r0, #1
 800fe5a:	b002      	add	sp, #8
 800fe5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe60:	9a01      	ldr	r2, [sp, #4]
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	e7ee      	b.n	800fe44 <ucdr_serialize_uint32_t+0xc0>
 800fe66:	68a2      	ldr	r2, [r4, #8]
 800fe68:	6923      	ldr	r3, [r4, #16]
 800fe6a:	7da0      	ldrb	r0, [r4, #22]
 800fe6c:	1b92      	subs	r2, r2, r6
 800fe6e:	1b9b      	subs	r3, r3, r6
 800fe70:	7567      	strb	r7, [r4, #21]
 800fe72:	f080 0001 	eor.w	r0, r0, #1
 800fe76:	60a2      	str	r2, [r4, #8]
 800fe78:	6123      	str	r3, [r4, #16]
 800fe7a:	b002      	add	sp, #8
 800fe7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe80:	68a3      	ldr	r3, [r4, #8]
 800fe82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe86:	701a      	strb	r2, [r3, #0]
 800fe88:	68a3      	ldr	r3, [r4, #8]
 800fe8a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe8e:	701a      	strb	r2, [r3, #0]
 800fe90:	68a3      	ldr	r3, [r4, #8]
 800fe92:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe96:	701a      	strb	r2, [r3, #0]
 800fe98:	e7ad      	b.n	800fdf6 <ucdr_serialize_uint32_t+0x72>
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	ad01      	add	r5, sp, #4
 800fe9e:	4632      	mov	r2, r6
 800fea0:	4629      	mov	r1, r5
 800fea2:	f002 fa3a 	bl	801231a <memcpy>
 800fea6:	4642      	mov	r2, r8
 800fea8:	19a9      	adds	r1, r5, r6
 800feaa:	68a0      	ldr	r0, [r4, #8]
 800feac:	f002 fa35 	bl	801231a <memcpy>
 800feb0:	e7a1      	b.n	800fdf6 <ucdr_serialize_uint32_t+0x72>
 800feb2:	bf00      	nop

0800feb4 <ucdr_serialize_endian_uint32_t>:
 800feb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800feb8:	4604      	mov	r4, r0
 800feba:	b083      	sub	sp, #12
 800febc:	460d      	mov	r5, r1
 800febe:	2104      	movs	r1, #4
 800fec0:	9201      	str	r2, [sp, #4]
 800fec2:	f000 fdcb 	bl	8010a5c <ucdr_buffer_alignment>
 800fec6:	4601      	mov	r1, r0
 800fec8:	4620      	mov	r0, r4
 800feca:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fece:	f000 fe09 	bl	8010ae4 <ucdr_advance_buffer>
 800fed2:	2104      	movs	r1, #4
 800fed4:	4620      	mov	r0, r4
 800fed6:	f000 fd91 	bl	80109fc <ucdr_check_buffer_available_for>
 800feda:	2800      	cmp	r0, #0
 800fedc:	d138      	bne.n	800ff50 <ucdr_serialize_endian_uint32_t+0x9c>
 800fede:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fee2:	42b7      	cmp	r7, r6
 800fee4:	d92f      	bls.n	800ff46 <ucdr_serialize_endian_uint32_t+0x92>
 800fee6:	6923      	ldr	r3, [r4, #16]
 800fee8:	4620      	mov	r0, r4
 800feea:	60a7      	str	r7, [r4, #8]
 800feec:	1bbf      	subs	r7, r7, r6
 800feee:	443b      	add	r3, r7
 800fef0:	f1c7 0904 	rsb	r9, r7, #4
 800fef4:	6123      	str	r3, [r4, #16]
 800fef6:	4649      	mov	r1, r9
 800fef8:	f000 fd8c 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d04a      	beq.n	800ff96 <ucdr_serialize_endian_uint32_t+0xe2>
 800ff00:	2d01      	cmp	r5, #1
 800ff02:	d063      	beq.n	800ffcc <ucdr_serialize_endian_uint32_t+0x118>
 800ff04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff08:	7033      	strb	r3, [r6, #0]
 800ff0a:	2f00      	cmp	r7, #0
 800ff0c:	d051      	beq.n	800ffb2 <ucdr_serialize_endian_uint32_t+0xfe>
 800ff0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff12:	2f01      	cmp	r7, #1
 800ff14:	7073      	strb	r3, [r6, #1]
 800ff16:	d050      	beq.n	800ffba <ucdr_serialize_endian_uint32_t+0x106>
 800ff18:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ff1c:	2f02      	cmp	r7, #2
 800ff1e:	70b3      	strb	r3, [r6, #2]
 800ff20:	d04f      	beq.n	800ffc2 <ucdr_serialize_endian_uint32_t+0x10e>
 800ff22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ff26:	70f3      	strb	r3, [r6, #3]
 800ff28:	6923      	ldr	r3, [r4, #16]
 800ff2a:	2104      	movs	r1, #4
 800ff2c:	68a2      	ldr	r2, [r4, #8]
 800ff2e:	7da0      	ldrb	r0, [r4, #22]
 800ff30:	3304      	adds	r3, #4
 800ff32:	444a      	add	r2, r9
 800ff34:	7561      	strb	r1, [r4, #21]
 800ff36:	1bdb      	subs	r3, r3, r7
 800ff38:	f080 0001 	eor.w	r0, r0, #1
 800ff3c:	60a2      	str	r2, [r4, #8]
 800ff3e:	6123      	str	r3, [r4, #16]
 800ff40:	b003      	add	sp, #12
 800ff42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff46:	2104      	movs	r1, #4
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f000 fd63 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 800ff4e:	b1c8      	cbz	r0, 800ff84 <ucdr_serialize_endian_uint32_t+0xd0>
 800ff50:	2d01      	cmp	r5, #1
 800ff52:	68a3      	ldr	r3, [r4, #8]
 800ff54:	d01c      	beq.n	800ff90 <ucdr_serialize_endian_uint32_t+0xdc>
 800ff56:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ff5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff5e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ff62:	7018      	strb	r0, [r3, #0]
 800ff64:	68a3      	ldr	r3, [r4, #8]
 800ff66:	705a      	strb	r2, [r3, #1]
 800ff68:	68a3      	ldr	r3, [r4, #8]
 800ff6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff6e:	7099      	strb	r1, [r3, #2]
 800ff70:	68a3      	ldr	r3, [r4, #8]
 800ff72:	70da      	strb	r2, [r3, #3]
 800ff74:	2104      	movs	r1, #4
 800ff76:	68a2      	ldr	r2, [r4, #8]
 800ff78:	6923      	ldr	r3, [r4, #16]
 800ff7a:	440a      	add	r2, r1
 800ff7c:	7561      	strb	r1, [r4, #21]
 800ff7e:	440b      	add	r3, r1
 800ff80:	60a2      	str	r2, [r4, #8]
 800ff82:	6123      	str	r3, [r4, #16]
 800ff84:	7da0      	ldrb	r0, [r4, #22]
 800ff86:	f080 0001 	eor.w	r0, r0, #1
 800ff8a:	b003      	add	sp, #12
 800ff8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff90:	9a01      	ldr	r2, [sp, #4]
 800ff92:	601a      	str	r2, [r3, #0]
 800ff94:	e7ee      	b.n	800ff74 <ucdr_serialize_endian_uint32_t+0xc0>
 800ff96:	68a2      	ldr	r2, [r4, #8]
 800ff98:	6923      	ldr	r3, [r4, #16]
 800ff9a:	7da0      	ldrb	r0, [r4, #22]
 800ff9c:	1bd2      	subs	r2, r2, r7
 800ff9e:	1bdb      	subs	r3, r3, r7
 800ffa0:	f884 8015 	strb.w	r8, [r4, #21]
 800ffa4:	f080 0001 	eor.w	r0, r0, #1
 800ffa8:	60a2      	str	r2, [r4, #8]
 800ffaa:	6123      	str	r3, [r4, #16]
 800ffac:	b003      	add	sp, #12
 800ffae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffb2:	68a3      	ldr	r3, [r4, #8]
 800ffb4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ffb8:	701a      	strb	r2, [r3, #0]
 800ffba:	68a3      	ldr	r3, [r4, #8]
 800ffbc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ffc0:	701a      	strb	r2, [r3, #0]
 800ffc2:	68a3      	ldr	r3, [r4, #8]
 800ffc4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ffc8:	701a      	strb	r2, [r3, #0]
 800ffca:	e7ad      	b.n	800ff28 <ucdr_serialize_endian_uint32_t+0x74>
 800ffcc:	ad01      	add	r5, sp, #4
 800ffce:	463a      	mov	r2, r7
 800ffd0:	4630      	mov	r0, r6
 800ffd2:	4629      	mov	r1, r5
 800ffd4:	f002 f9a1 	bl	801231a <memcpy>
 800ffd8:	464a      	mov	r2, r9
 800ffda:	19e9      	adds	r1, r5, r7
 800ffdc:	68a0      	ldr	r0, [r4, #8]
 800ffde:	f002 f99c 	bl	801231a <memcpy>
 800ffe2:	e7a1      	b.n	800ff28 <ucdr_serialize_endian_uint32_t+0x74>

0800ffe4 <ucdr_deserialize_uint32_t>:
 800ffe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffe8:	4604      	mov	r4, r0
 800ffea:	460d      	mov	r5, r1
 800ffec:	2104      	movs	r1, #4
 800ffee:	f000 fd35 	bl	8010a5c <ucdr_buffer_alignment>
 800fff2:	4601      	mov	r1, r0
 800fff4:	4620      	mov	r0, r4
 800fff6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fffa:	f000 fd73 	bl	8010ae4 <ucdr_advance_buffer>
 800fffe:	2104      	movs	r1, #4
 8010000:	4620      	mov	r0, r4
 8010002:	f000 fcfb 	bl	80109fc <ucdr_check_buffer_available_for>
 8010006:	2800      	cmp	r0, #0
 8010008:	d138      	bne.n	801007c <ucdr_deserialize_uint32_t+0x98>
 801000a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801000e:	42b7      	cmp	r7, r6
 8010010:	d92f      	bls.n	8010072 <ucdr_deserialize_uint32_t+0x8e>
 8010012:	6923      	ldr	r3, [r4, #16]
 8010014:	4620      	mov	r0, r4
 8010016:	60a7      	str	r7, [r4, #8]
 8010018:	1bbf      	subs	r7, r7, r6
 801001a:	443b      	add	r3, r7
 801001c:	f1c7 0904 	rsb	r9, r7, #4
 8010020:	6123      	str	r3, [r4, #16]
 8010022:	4649      	mov	r1, r9
 8010024:	f000 fcf6 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 8010028:	2800      	cmp	r0, #0
 801002a:	d046      	beq.n	80100ba <ucdr_deserialize_uint32_t+0xd6>
 801002c:	7d23      	ldrb	r3, [r4, #20]
 801002e:	2b01      	cmp	r3, #1
 8010030:	d05c      	beq.n	80100ec <ucdr_deserialize_uint32_t+0x108>
 8010032:	78f3      	ldrb	r3, [r6, #3]
 8010034:	702b      	strb	r3, [r5, #0]
 8010036:	2f00      	cmp	r7, #0
 8010038:	d04c      	beq.n	80100d4 <ucdr_deserialize_uint32_t+0xf0>
 801003a:	78b3      	ldrb	r3, [r6, #2]
 801003c:	2f01      	cmp	r7, #1
 801003e:	706b      	strb	r3, [r5, #1]
 8010040:	f105 0302 	add.w	r3, r5, #2
 8010044:	d04a      	beq.n	80100dc <ucdr_deserialize_uint32_t+0xf8>
 8010046:	7873      	ldrb	r3, [r6, #1]
 8010048:	2f02      	cmp	r7, #2
 801004a:	70ab      	strb	r3, [r5, #2]
 801004c:	f105 0303 	add.w	r3, r5, #3
 8010050:	d048      	beq.n	80100e4 <ucdr_deserialize_uint32_t+0x100>
 8010052:	7833      	ldrb	r3, [r6, #0]
 8010054:	70eb      	strb	r3, [r5, #3]
 8010056:	6923      	ldr	r3, [r4, #16]
 8010058:	2104      	movs	r1, #4
 801005a:	68a2      	ldr	r2, [r4, #8]
 801005c:	3304      	adds	r3, #4
 801005e:	7da0      	ldrb	r0, [r4, #22]
 8010060:	444a      	add	r2, r9
 8010062:	7561      	strb	r1, [r4, #21]
 8010064:	1bdb      	subs	r3, r3, r7
 8010066:	f080 0001 	eor.w	r0, r0, #1
 801006a:	60a2      	str	r2, [r4, #8]
 801006c:	6123      	str	r3, [r4, #16]
 801006e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010072:	2104      	movs	r1, #4
 8010074:	4620      	mov	r0, r4
 8010076:	f000 fccd 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 801007a:	b1b0      	cbz	r0, 80100aa <ucdr_deserialize_uint32_t+0xc6>
 801007c:	7d23      	ldrb	r3, [r4, #20]
 801007e:	2b01      	cmp	r3, #1
 8010080:	68a3      	ldr	r3, [r4, #8]
 8010082:	d017      	beq.n	80100b4 <ucdr_deserialize_uint32_t+0xd0>
 8010084:	78db      	ldrb	r3, [r3, #3]
 8010086:	702b      	strb	r3, [r5, #0]
 8010088:	68a3      	ldr	r3, [r4, #8]
 801008a:	789b      	ldrb	r3, [r3, #2]
 801008c:	706b      	strb	r3, [r5, #1]
 801008e:	68a3      	ldr	r3, [r4, #8]
 8010090:	785b      	ldrb	r3, [r3, #1]
 8010092:	70ab      	strb	r3, [r5, #2]
 8010094:	68a3      	ldr	r3, [r4, #8]
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	70eb      	strb	r3, [r5, #3]
 801009a:	2104      	movs	r1, #4
 801009c:	68a2      	ldr	r2, [r4, #8]
 801009e:	6923      	ldr	r3, [r4, #16]
 80100a0:	440a      	add	r2, r1
 80100a2:	7561      	strb	r1, [r4, #21]
 80100a4:	440b      	add	r3, r1
 80100a6:	60a2      	str	r2, [r4, #8]
 80100a8:	6123      	str	r3, [r4, #16]
 80100aa:	7da0      	ldrb	r0, [r4, #22]
 80100ac:	f080 0001 	eor.w	r0, r0, #1
 80100b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	602b      	str	r3, [r5, #0]
 80100b8:	e7ef      	b.n	801009a <ucdr_deserialize_uint32_t+0xb6>
 80100ba:	68a2      	ldr	r2, [r4, #8]
 80100bc:	6923      	ldr	r3, [r4, #16]
 80100be:	1bd2      	subs	r2, r2, r7
 80100c0:	7da0      	ldrb	r0, [r4, #22]
 80100c2:	1bdb      	subs	r3, r3, r7
 80100c4:	f884 8015 	strb.w	r8, [r4, #21]
 80100c8:	f080 0001 	eor.w	r0, r0, #1
 80100cc:	60a2      	str	r2, [r4, #8]
 80100ce:	6123      	str	r3, [r4, #16]
 80100d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100d4:	68a3      	ldr	r3, [r4, #8]
 80100d6:	789b      	ldrb	r3, [r3, #2]
 80100d8:	706b      	strb	r3, [r5, #1]
 80100da:	1cab      	adds	r3, r5, #2
 80100dc:	68a2      	ldr	r2, [r4, #8]
 80100de:	7852      	ldrb	r2, [r2, #1]
 80100e0:	f803 2b01 	strb.w	r2, [r3], #1
 80100e4:	68a2      	ldr	r2, [r4, #8]
 80100e6:	7812      	ldrb	r2, [r2, #0]
 80100e8:	701a      	strb	r2, [r3, #0]
 80100ea:	e7b4      	b.n	8010056 <ucdr_deserialize_uint32_t+0x72>
 80100ec:	4631      	mov	r1, r6
 80100ee:	463a      	mov	r2, r7
 80100f0:	4628      	mov	r0, r5
 80100f2:	f002 f912 	bl	801231a <memcpy>
 80100f6:	464a      	mov	r2, r9
 80100f8:	19e8      	adds	r0, r5, r7
 80100fa:	68a1      	ldr	r1, [r4, #8]
 80100fc:	f002 f90d 	bl	801231a <memcpy>
 8010100:	e7a9      	b.n	8010056 <ucdr_deserialize_uint32_t+0x72>
 8010102:	bf00      	nop

08010104 <ucdr_deserialize_endian_uint32_t>:
 8010104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010108:	4604      	mov	r4, r0
 801010a:	460e      	mov	r6, r1
 801010c:	2104      	movs	r1, #4
 801010e:	4615      	mov	r5, r2
 8010110:	f000 fca4 	bl	8010a5c <ucdr_buffer_alignment>
 8010114:	4601      	mov	r1, r0
 8010116:	4620      	mov	r0, r4
 8010118:	f894 8015 	ldrb.w	r8, [r4, #21]
 801011c:	f000 fce2 	bl	8010ae4 <ucdr_advance_buffer>
 8010120:	2104      	movs	r1, #4
 8010122:	4620      	mov	r0, r4
 8010124:	f000 fc6a 	bl	80109fc <ucdr_check_buffer_available_for>
 8010128:	2800      	cmp	r0, #0
 801012a:	d13c      	bne.n	80101a6 <ucdr_deserialize_endian_uint32_t+0xa2>
 801012c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8010130:	42bb      	cmp	r3, r7
 8010132:	d933      	bls.n	801019c <ucdr_deserialize_endian_uint32_t+0x98>
 8010134:	eba3 0907 	sub.w	r9, r3, r7
 8010138:	60a3      	str	r3, [r4, #8]
 801013a:	6923      	ldr	r3, [r4, #16]
 801013c:	4620      	mov	r0, r4
 801013e:	f1c9 0a04 	rsb	sl, r9, #4
 8010142:	444b      	add	r3, r9
 8010144:	4651      	mov	r1, sl
 8010146:	6123      	str	r3, [r4, #16]
 8010148:	f000 fc64 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 801014c:	2800      	cmp	r0, #0
 801014e:	d048      	beq.n	80101e2 <ucdr_deserialize_endian_uint32_t+0xde>
 8010150:	2e01      	cmp	r6, #1
 8010152:	d061      	beq.n	8010218 <ucdr_deserialize_endian_uint32_t+0x114>
 8010154:	78fb      	ldrb	r3, [r7, #3]
 8010156:	702b      	strb	r3, [r5, #0]
 8010158:	f1b9 0f00 	cmp.w	r9, #0
 801015c:	d050      	beq.n	8010200 <ucdr_deserialize_endian_uint32_t+0xfc>
 801015e:	78bb      	ldrb	r3, [r7, #2]
 8010160:	f1b9 0f01 	cmp.w	r9, #1
 8010164:	706b      	strb	r3, [r5, #1]
 8010166:	f105 0302 	add.w	r3, r5, #2
 801016a:	d04d      	beq.n	8010208 <ucdr_deserialize_endian_uint32_t+0x104>
 801016c:	787b      	ldrb	r3, [r7, #1]
 801016e:	f1b9 0f02 	cmp.w	r9, #2
 8010172:	70ab      	strb	r3, [r5, #2]
 8010174:	f105 0303 	add.w	r3, r5, #3
 8010178:	d04a      	beq.n	8010210 <ucdr_deserialize_endian_uint32_t+0x10c>
 801017a:	783b      	ldrb	r3, [r7, #0]
 801017c:	70eb      	strb	r3, [r5, #3]
 801017e:	6923      	ldr	r3, [r4, #16]
 8010180:	2104      	movs	r1, #4
 8010182:	68a2      	ldr	r2, [r4, #8]
 8010184:	3304      	adds	r3, #4
 8010186:	7da0      	ldrb	r0, [r4, #22]
 8010188:	4452      	add	r2, sl
 801018a:	7561      	strb	r1, [r4, #21]
 801018c:	eba3 0309 	sub.w	r3, r3, r9
 8010190:	f080 0001 	eor.w	r0, r0, #1
 8010194:	60a2      	str	r2, [r4, #8]
 8010196:	6123      	str	r3, [r4, #16]
 8010198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801019c:	2104      	movs	r1, #4
 801019e:	4620      	mov	r0, r4
 80101a0:	f000 fc38 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 80101a4:	b1a8      	cbz	r0, 80101d2 <ucdr_deserialize_endian_uint32_t+0xce>
 80101a6:	2e01      	cmp	r6, #1
 80101a8:	68a3      	ldr	r3, [r4, #8]
 80101aa:	d017      	beq.n	80101dc <ucdr_deserialize_endian_uint32_t+0xd8>
 80101ac:	78db      	ldrb	r3, [r3, #3]
 80101ae:	702b      	strb	r3, [r5, #0]
 80101b0:	68a3      	ldr	r3, [r4, #8]
 80101b2:	789b      	ldrb	r3, [r3, #2]
 80101b4:	706b      	strb	r3, [r5, #1]
 80101b6:	68a3      	ldr	r3, [r4, #8]
 80101b8:	785b      	ldrb	r3, [r3, #1]
 80101ba:	70ab      	strb	r3, [r5, #2]
 80101bc:	68a3      	ldr	r3, [r4, #8]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	70eb      	strb	r3, [r5, #3]
 80101c2:	2104      	movs	r1, #4
 80101c4:	68a2      	ldr	r2, [r4, #8]
 80101c6:	6923      	ldr	r3, [r4, #16]
 80101c8:	440a      	add	r2, r1
 80101ca:	7561      	strb	r1, [r4, #21]
 80101cc:	440b      	add	r3, r1
 80101ce:	60a2      	str	r2, [r4, #8]
 80101d0:	6123      	str	r3, [r4, #16]
 80101d2:	7da0      	ldrb	r0, [r4, #22]
 80101d4:	f080 0001 	eor.w	r0, r0, #1
 80101d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	602b      	str	r3, [r5, #0]
 80101e0:	e7ef      	b.n	80101c2 <ucdr_deserialize_endian_uint32_t+0xbe>
 80101e2:	68a2      	ldr	r2, [r4, #8]
 80101e4:	6923      	ldr	r3, [r4, #16]
 80101e6:	eba2 0209 	sub.w	r2, r2, r9
 80101ea:	7da0      	ldrb	r0, [r4, #22]
 80101ec:	eba3 0309 	sub.w	r3, r3, r9
 80101f0:	f884 8015 	strb.w	r8, [r4, #21]
 80101f4:	f080 0001 	eor.w	r0, r0, #1
 80101f8:	60a2      	str	r2, [r4, #8]
 80101fa:	6123      	str	r3, [r4, #16]
 80101fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010200:	68a3      	ldr	r3, [r4, #8]
 8010202:	789b      	ldrb	r3, [r3, #2]
 8010204:	706b      	strb	r3, [r5, #1]
 8010206:	1cab      	adds	r3, r5, #2
 8010208:	68a2      	ldr	r2, [r4, #8]
 801020a:	7852      	ldrb	r2, [r2, #1]
 801020c:	f803 2b01 	strb.w	r2, [r3], #1
 8010210:	68a2      	ldr	r2, [r4, #8]
 8010212:	7812      	ldrb	r2, [r2, #0]
 8010214:	701a      	strb	r2, [r3, #0]
 8010216:	e7b2      	b.n	801017e <ucdr_deserialize_endian_uint32_t+0x7a>
 8010218:	4639      	mov	r1, r7
 801021a:	464a      	mov	r2, r9
 801021c:	4628      	mov	r0, r5
 801021e:	f002 f87c 	bl	801231a <memcpy>
 8010222:	4652      	mov	r2, sl
 8010224:	eb05 0009 	add.w	r0, r5, r9
 8010228:	68a1      	ldr	r1, [r4, #8]
 801022a:	f002 f876 	bl	801231a <memcpy>
 801022e:	e7a6      	b.n	801017e <ucdr_deserialize_endian_uint32_t+0x7a>

08010230 <ucdr_serialize_int32_t>:
 8010230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010234:	b082      	sub	sp, #8
 8010236:	4604      	mov	r4, r0
 8010238:	9101      	str	r1, [sp, #4]
 801023a:	2104      	movs	r1, #4
 801023c:	f000 fc0e 	bl	8010a5c <ucdr_buffer_alignment>
 8010240:	4601      	mov	r1, r0
 8010242:	4620      	mov	r0, r4
 8010244:	7d67      	ldrb	r7, [r4, #21]
 8010246:	f000 fc4d 	bl	8010ae4 <ucdr_advance_buffer>
 801024a:	2104      	movs	r1, #4
 801024c:	4620      	mov	r0, r4
 801024e:	f000 fbd5 	bl	80109fc <ucdr_check_buffer_available_for>
 8010252:	2800      	cmp	r0, #0
 8010254:	d139      	bne.n	80102ca <ucdr_serialize_int32_t+0x9a>
 8010256:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801025a:	42ab      	cmp	r3, r5
 801025c:	d930      	bls.n	80102c0 <ucdr_serialize_int32_t+0x90>
 801025e:	1b5e      	subs	r6, r3, r5
 8010260:	60a3      	str	r3, [r4, #8]
 8010262:	6923      	ldr	r3, [r4, #16]
 8010264:	4620      	mov	r0, r4
 8010266:	f1c6 0804 	rsb	r8, r6, #4
 801026a:	4433      	add	r3, r6
 801026c:	4641      	mov	r1, r8
 801026e:	6123      	str	r3, [r4, #16]
 8010270:	f000 fbd0 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 8010274:	2800      	cmp	r0, #0
 8010276:	d04c      	beq.n	8010312 <ucdr_serialize_int32_t+0xe2>
 8010278:	7d23      	ldrb	r3, [r4, #20]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d063      	beq.n	8010346 <ucdr_serialize_int32_t+0x116>
 801027e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010282:	702b      	strb	r3, [r5, #0]
 8010284:	2e00      	cmp	r6, #0
 8010286:	d051      	beq.n	801032c <ucdr_serialize_int32_t+0xfc>
 8010288:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801028c:	2e01      	cmp	r6, #1
 801028e:	706b      	strb	r3, [r5, #1]
 8010290:	d050      	beq.n	8010334 <ucdr_serialize_int32_t+0x104>
 8010292:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010296:	2e02      	cmp	r6, #2
 8010298:	70ab      	strb	r3, [r5, #2]
 801029a:	d04f      	beq.n	801033c <ucdr_serialize_int32_t+0x10c>
 801029c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80102a0:	70eb      	strb	r3, [r5, #3]
 80102a2:	6923      	ldr	r3, [r4, #16]
 80102a4:	2104      	movs	r1, #4
 80102a6:	68a2      	ldr	r2, [r4, #8]
 80102a8:	3304      	adds	r3, #4
 80102aa:	7da0      	ldrb	r0, [r4, #22]
 80102ac:	4442      	add	r2, r8
 80102ae:	7561      	strb	r1, [r4, #21]
 80102b0:	1b9e      	subs	r6, r3, r6
 80102b2:	f080 0001 	eor.w	r0, r0, #1
 80102b6:	60a2      	str	r2, [r4, #8]
 80102b8:	6126      	str	r6, [r4, #16]
 80102ba:	b002      	add	sp, #8
 80102bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c0:	2104      	movs	r1, #4
 80102c2:	4620      	mov	r0, r4
 80102c4:	f000 fba6 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 80102c8:	b1d0      	cbz	r0, 8010300 <ucdr_serialize_int32_t+0xd0>
 80102ca:	7d23      	ldrb	r3, [r4, #20]
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	68a3      	ldr	r3, [r4, #8]
 80102d0:	d01c      	beq.n	801030c <ucdr_serialize_int32_t+0xdc>
 80102d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80102d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102da:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80102de:	7018      	strb	r0, [r3, #0]
 80102e0:	68a3      	ldr	r3, [r4, #8]
 80102e2:	705a      	strb	r2, [r3, #1]
 80102e4:	68a3      	ldr	r3, [r4, #8]
 80102e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80102ea:	7099      	strb	r1, [r3, #2]
 80102ec:	68a3      	ldr	r3, [r4, #8]
 80102ee:	70da      	strb	r2, [r3, #3]
 80102f0:	2104      	movs	r1, #4
 80102f2:	68a2      	ldr	r2, [r4, #8]
 80102f4:	6923      	ldr	r3, [r4, #16]
 80102f6:	440a      	add	r2, r1
 80102f8:	7561      	strb	r1, [r4, #21]
 80102fa:	440b      	add	r3, r1
 80102fc:	60a2      	str	r2, [r4, #8]
 80102fe:	6123      	str	r3, [r4, #16]
 8010300:	7da0      	ldrb	r0, [r4, #22]
 8010302:	f080 0001 	eor.w	r0, r0, #1
 8010306:	b002      	add	sp, #8
 8010308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801030c:	9a01      	ldr	r2, [sp, #4]
 801030e:	601a      	str	r2, [r3, #0]
 8010310:	e7ee      	b.n	80102f0 <ucdr_serialize_int32_t+0xc0>
 8010312:	68a2      	ldr	r2, [r4, #8]
 8010314:	6923      	ldr	r3, [r4, #16]
 8010316:	7da0      	ldrb	r0, [r4, #22]
 8010318:	1b92      	subs	r2, r2, r6
 801031a:	1b9b      	subs	r3, r3, r6
 801031c:	7567      	strb	r7, [r4, #21]
 801031e:	f080 0001 	eor.w	r0, r0, #1
 8010322:	60a2      	str	r2, [r4, #8]
 8010324:	6123      	str	r3, [r4, #16]
 8010326:	b002      	add	sp, #8
 8010328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801032c:	68a3      	ldr	r3, [r4, #8]
 801032e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010332:	701a      	strb	r2, [r3, #0]
 8010334:	68a3      	ldr	r3, [r4, #8]
 8010336:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801033a:	701a      	strb	r2, [r3, #0]
 801033c:	68a3      	ldr	r3, [r4, #8]
 801033e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010342:	701a      	strb	r2, [r3, #0]
 8010344:	e7ad      	b.n	80102a2 <ucdr_serialize_int32_t+0x72>
 8010346:	4628      	mov	r0, r5
 8010348:	ad01      	add	r5, sp, #4
 801034a:	4632      	mov	r2, r6
 801034c:	4629      	mov	r1, r5
 801034e:	f001 ffe4 	bl	801231a <memcpy>
 8010352:	4642      	mov	r2, r8
 8010354:	19a9      	adds	r1, r5, r6
 8010356:	68a0      	ldr	r0, [r4, #8]
 8010358:	f001 ffdf 	bl	801231a <memcpy>
 801035c:	e7a1      	b.n	80102a2 <ucdr_serialize_int32_t+0x72>
 801035e:	bf00      	nop

08010360 <ucdr_deserialize_int32_t>:
 8010360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010364:	4604      	mov	r4, r0
 8010366:	460d      	mov	r5, r1
 8010368:	2104      	movs	r1, #4
 801036a:	f000 fb77 	bl	8010a5c <ucdr_buffer_alignment>
 801036e:	4601      	mov	r1, r0
 8010370:	4620      	mov	r0, r4
 8010372:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010376:	f000 fbb5 	bl	8010ae4 <ucdr_advance_buffer>
 801037a:	2104      	movs	r1, #4
 801037c:	4620      	mov	r0, r4
 801037e:	f000 fb3d 	bl	80109fc <ucdr_check_buffer_available_for>
 8010382:	2800      	cmp	r0, #0
 8010384:	d138      	bne.n	80103f8 <ucdr_deserialize_int32_t+0x98>
 8010386:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801038a:	42b7      	cmp	r7, r6
 801038c:	d92f      	bls.n	80103ee <ucdr_deserialize_int32_t+0x8e>
 801038e:	6923      	ldr	r3, [r4, #16]
 8010390:	4620      	mov	r0, r4
 8010392:	60a7      	str	r7, [r4, #8]
 8010394:	1bbf      	subs	r7, r7, r6
 8010396:	443b      	add	r3, r7
 8010398:	f1c7 0904 	rsb	r9, r7, #4
 801039c:	6123      	str	r3, [r4, #16]
 801039e:	4649      	mov	r1, r9
 80103a0:	f000 fb38 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 80103a4:	2800      	cmp	r0, #0
 80103a6:	d046      	beq.n	8010436 <ucdr_deserialize_int32_t+0xd6>
 80103a8:	7d23      	ldrb	r3, [r4, #20]
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	d05c      	beq.n	8010468 <ucdr_deserialize_int32_t+0x108>
 80103ae:	78f3      	ldrb	r3, [r6, #3]
 80103b0:	702b      	strb	r3, [r5, #0]
 80103b2:	2f00      	cmp	r7, #0
 80103b4:	d04c      	beq.n	8010450 <ucdr_deserialize_int32_t+0xf0>
 80103b6:	78b3      	ldrb	r3, [r6, #2]
 80103b8:	2f01      	cmp	r7, #1
 80103ba:	706b      	strb	r3, [r5, #1]
 80103bc:	f105 0302 	add.w	r3, r5, #2
 80103c0:	d04a      	beq.n	8010458 <ucdr_deserialize_int32_t+0xf8>
 80103c2:	7873      	ldrb	r3, [r6, #1]
 80103c4:	2f02      	cmp	r7, #2
 80103c6:	70ab      	strb	r3, [r5, #2]
 80103c8:	f105 0303 	add.w	r3, r5, #3
 80103cc:	d048      	beq.n	8010460 <ucdr_deserialize_int32_t+0x100>
 80103ce:	7833      	ldrb	r3, [r6, #0]
 80103d0:	70eb      	strb	r3, [r5, #3]
 80103d2:	6923      	ldr	r3, [r4, #16]
 80103d4:	2104      	movs	r1, #4
 80103d6:	68a2      	ldr	r2, [r4, #8]
 80103d8:	3304      	adds	r3, #4
 80103da:	7da0      	ldrb	r0, [r4, #22]
 80103dc:	444a      	add	r2, r9
 80103de:	7561      	strb	r1, [r4, #21]
 80103e0:	1bdb      	subs	r3, r3, r7
 80103e2:	f080 0001 	eor.w	r0, r0, #1
 80103e6:	60a2      	str	r2, [r4, #8]
 80103e8:	6123      	str	r3, [r4, #16]
 80103ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ee:	2104      	movs	r1, #4
 80103f0:	4620      	mov	r0, r4
 80103f2:	f000 fb0f 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 80103f6:	b1b0      	cbz	r0, 8010426 <ucdr_deserialize_int32_t+0xc6>
 80103f8:	7d23      	ldrb	r3, [r4, #20]
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	68a3      	ldr	r3, [r4, #8]
 80103fe:	d017      	beq.n	8010430 <ucdr_deserialize_int32_t+0xd0>
 8010400:	78db      	ldrb	r3, [r3, #3]
 8010402:	702b      	strb	r3, [r5, #0]
 8010404:	68a3      	ldr	r3, [r4, #8]
 8010406:	789b      	ldrb	r3, [r3, #2]
 8010408:	706b      	strb	r3, [r5, #1]
 801040a:	68a3      	ldr	r3, [r4, #8]
 801040c:	785b      	ldrb	r3, [r3, #1]
 801040e:	70ab      	strb	r3, [r5, #2]
 8010410:	68a3      	ldr	r3, [r4, #8]
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	70eb      	strb	r3, [r5, #3]
 8010416:	2104      	movs	r1, #4
 8010418:	68a2      	ldr	r2, [r4, #8]
 801041a:	6923      	ldr	r3, [r4, #16]
 801041c:	440a      	add	r2, r1
 801041e:	7561      	strb	r1, [r4, #21]
 8010420:	440b      	add	r3, r1
 8010422:	60a2      	str	r2, [r4, #8]
 8010424:	6123      	str	r3, [r4, #16]
 8010426:	7da0      	ldrb	r0, [r4, #22]
 8010428:	f080 0001 	eor.w	r0, r0, #1
 801042c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	602b      	str	r3, [r5, #0]
 8010434:	e7ef      	b.n	8010416 <ucdr_deserialize_int32_t+0xb6>
 8010436:	68a2      	ldr	r2, [r4, #8]
 8010438:	6923      	ldr	r3, [r4, #16]
 801043a:	1bd2      	subs	r2, r2, r7
 801043c:	7da0      	ldrb	r0, [r4, #22]
 801043e:	1bdb      	subs	r3, r3, r7
 8010440:	f884 8015 	strb.w	r8, [r4, #21]
 8010444:	f080 0001 	eor.w	r0, r0, #1
 8010448:	60a2      	str	r2, [r4, #8]
 801044a:	6123      	str	r3, [r4, #16]
 801044c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010450:	68a3      	ldr	r3, [r4, #8]
 8010452:	789b      	ldrb	r3, [r3, #2]
 8010454:	706b      	strb	r3, [r5, #1]
 8010456:	1cab      	adds	r3, r5, #2
 8010458:	68a2      	ldr	r2, [r4, #8]
 801045a:	7852      	ldrb	r2, [r2, #1]
 801045c:	f803 2b01 	strb.w	r2, [r3], #1
 8010460:	68a2      	ldr	r2, [r4, #8]
 8010462:	7812      	ldrb	r2, [r2, #0]
 8010464:	701a      	strb	r2, [r3, #0]
 8010466:	e7b4      	b.n	80103d2 <ucdr_deserialize_int32_t+0x72>
 8010468:	4631      	mov	r1, r6
 801046a:	463a      	mov	r2, r7
 801046c:	4628      	mov	r0, r5
 801046e:	f001 ff54 	bl	801231a <memcpy>
 8010472:	464a      	mov	r2, r9
 8010474:	19e8      	adds	r0, r5, r7
 8010476:	68a1      	ldr	r1, [r4, #8]
 8010478:	f001 ff4f 	bl	801231a <memcpy>
 801047c:	e7a9      	b.n	80103d2 <ucdr_deserialize_int32_t+0x72>
 801047e:	bf00      	nop

08010480 <ucdr_serialize_float>:
 8010480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010484:	4604      	mov	r4, r0
 8010486:	b082      	sub	sp, #8
 8010488:	2104      	movs	r1, #4
 801048a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801048e:	f000 fae5 	bl	8010a5c <ucdr_buffer_alignment>
 8010492:	4601      	mov	r1, r0
 8010494:	4620      	mov	r0, r4
 8010496:	7d67      	ldrb	r7, [r4, #21]
 8010498:	f000 fb24 	bl	8010ae4 <ucdr_advance_buffer>
 801049c:	2104      	movs	r1, #4
 801049e:	4620      	mov	r0, r4
 80104a0:	f000 faac 	bl	80109fc <ucdr_check_buffer_available_for>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d139      	bne.n	801051c <ucdr_serialize_float+0x9c>
 80104a8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80104ac:	42ab      	cmp	r3, r5
 80104ae:	d930      	bls.n	8010512 <ucdr_serialize_float+0x92>
 80104b0:	1b5e      	subs	r6, r3, r5
 80104b2:	60a3      	str	r3, [r4, #8]
 80104b4:	6923      	ldr	r3, [r4, #16]
 80104b6:	4620      	mov	r0, r4
 80104b8:	f1c6 0804 	rsb	r8, r6, #4
 80104bc:	4433      	add	r3, r6
 80104be:	4641      	mov	r1, r8
 80104c0:	6123      	str	r3, [r4, #16]
 80104c2:	f000 faa7 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d04c      	beq.n	8010564 <ucdr_serialize_float+0xe4>
 80104ca:	7d23      	ldrb	r3, [r4, #20]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d063      	beq.n	8010598 <ucdr_serialize_float+0x118>
 80104d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80104d4:	702b      	strb	r3, [r5, #0]
 80104d6:	2e00      	cmp	r6, #0
 80104d8:	d051      	beq.n	801057e <ucdr_serialize_float+0xfe>
 80104da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80104de:	2e01      	cmp	r6, #1
 80104e0:	706b      	strb	r3, [r5, #1]
 80104e2:	d050      	beq.n	8010586 <ucdr_serialize_float+0x106>
 80104e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80104e8:	2e02      	cmp	r6, #2
 80104ea:	70ab      	strb	r3, [r5, #2]
 80104ec:	d04f      	beq.n	801058e <ucdr_serialize_float+0x10e>
 80104ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80104f2:	70eb      	strb	r3, [r5, #3]
 80104f4:	6923      	ldr	r3, [r4, #16]
 80104f6:	2104      	movs	r1, #4
 80104f8:	68a2      	ldr	r2, [r4, #8]
 80104fa:	3304      	adds	r3, #4
 80104fc:	7da0      	ldrb	r0, [r4, #22]
 80104fe:	4442      	add	r2, r8
 8010500:	7561      	strb	r1, [r4, #21]
 8010502:	1b9e      	subs	r6, r3, r6
 8010504:	f080 0001 	eor.w	r0, r0, #1
 8010508:	60a2      	str	r2, [r4, #8]
 801050a:	6126      	str	r6, [r4, #16]
 801050c:	b002      	add	sp, #8
 801050e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010512:	2104      	movs	r1, #4
 8010514:	4620      	mov	r0, r4
 8010516:	f000 fa7d 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 801051a:	b1d0      	cbz	r0, 8010552 <ucdr_serialize_float+0xd2>
 801051c:	7d23      	ldrb	r3, [r4, #20]
 801051e:	2b01      	cmp	r3, #1
 8010520:	68a3      	ldr	r3, [r4, #8]
 8010522:	d01c      	beq.n	801055e <ucdr_serialize_float+0xde>
 8010524:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010528:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801052c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010530:	7018      	strb	r0, [r3, #0]
 8010532:	68a3      	ldr	r3, [r4, #8]
 8010534:	705a      	strb	r2, [r3, #1]
 8010536:	68a3      	ldr	r3, [r4, #8]
 8010538:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801053c:	7099      	strb	r1, [r3, #2]
 801053e:	68a3      	ldr	r3, [r4, #8]
 8010540:	70da      	strb	r2, [r3, #3]
 8010542:	2104      	movs	r1, #4
 8010544:	68a2      	ldr	r2, [r4, #8]
 8010546:	6923      	ldr	r3, [r4, #16]
 8010548:	440a      	add	r2, r1
 801054a:	7561      	strb	r1, [r4, #21]
 801054c:	440b      	add	r3, r1
 801054e:	60a2      	str	r2, [r4, #8]
 8010550:	6123      	str	r3, [r4, #16]
 8010552:	7da0      	ldrb	r0, [r4, #22]
 8010554:	f080 0001 	eor.w	r0, r0, #1
 8010558:	b002      	add	sp, #8
 801055a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801055e:	9a01      	ldr	r2, [sp, #4]
 8010560:	601a      	str	r2, [r3, #0]
 8010562:	e7ee      	b.n	8010542 <ucdr_serialize_float+0xc2>
 8010564:	68a2      	ldr	r2, [r4, #8]
 8010566:	6923      	ldr	r3, [r4, #16]
 8010568:	7da0      	ldrb	r0, [r4, #22]
 801056a:	1b92      	subs	r2, r2, r6
 801056c:	1b9b      	subs	r3, r3, r6
 801056e:	7567      	strb	r7, [r4, #21]
 8010570:	f080 0001 	eor.w	r0, r0, #1
 8010574:	60a2      	str	r2, [r4, #8]
 8010576:	6123      	str	r3, [r4, #16]
 8010578:	b002      	add	sp, #8
 801057a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801057e:	68a3      	ldr	r3, [r4, #8]
 8010580:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010584:	701a      	strb	r2, [r3, #0]
 8010586:	68a3      	ldr	r3, [r4, #8]
 8010588:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801058c:	701a      	strb	r2, [r3, #0]
 801058e:	68a3      	ldr	r3, [r4, #8]
 8010590:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010594:	701a      	strb	r2, [r3, #0]
 8010596:	e7ad      	b.n	80104f4 <ucdr_serialize_float+0x74>
 8010598:	4628      	mov	r0, r5
 801059a:	ad01      	add	r5, sp, #4
 801059c:	4632      	mov	r2, r6
 801059e:	4629      	mov	r1, r5
 80105a0:	f001 febb 	bl	801231a <memcpy>
 80105a4:	4642      	mov	r2, r8
 80105a6:	19a9      	adds	r1, r5, r6
 80105a8:	68a0      	ldr	r0, [r4, #8]
 80105aa:	f001 feb6 	bl	801231a <memcpy>
 80105ae:	e7a1      	b.n	80104f4 <ucdr_serialize_float+0x74>

080105b0 <ucdr_deserialize_float>:
 80105b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b4:	4604      	mov	r4, r0
 80105b6:	460d      	mov	r5, r1
 80105b8:	2104      	movs	r1, #4
 80105ba:	f000 fa4f 	bl	8010a5c <ucdr_buffer_alignment>
 80105be:	4601      	mov	r1, r0
 80105c0:	4620      	mov	r0, r4
 80105c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80105c6:	f000 fa8d 	bl	8010ae4 <ucdr_advance_buffer>
 80105ca:	2104      	movs	r1, #4
 80105cc:	4620      	mov	r0, r4
 80105ce:	f000 fa15 	bl	80109fc <ucdr_check_buffer_available_for>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	d138      	bne.n	8010648 <ucdr_deserialize_float+0x98>
 80105d6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80105da:	42b7      	cmp	r7, r6
 80105dc:	d92f      	bls.n	801063e <ucdr_deserialize_float+0x8e>
 80105de:	6923      	ldr	r3, [r4, #16]
 80105e0:	4620      	mov	r0, r4
 80105e2:	60a7      	str	r7, [r4, #8]
 80105e4:	1bbf      	subs	r7, r7, r6
 80105e6:	443b      	add	r3, r7
 80105e8:	f1c7 0904 	rsb	r9, r7, #4
 80105ec:	6123      	str	r3, [r4, #16]
 80105ee:	4649      	mov	r1, r9
 80105f0:	f000 fa10 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d046      	beq.n	8010686 <ucdr_deserialize_float+0xd6>
 80105f8:	7d23      	ldrb	r3, [r4, #20]
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d05c      	beq.n	80106b8 <ucdr_deserialize_float+0x108>
 80105fe:	78f3      	ldrb	r3, [r6, #3]
 8010600:	702b      	strb	r3, [r5, #0]
 8010602:	2f00      	cmp	r7, #0
 8010604:	d04c      	beq.n	80106a0 <ucdr_deserialize_float+0xf0>
 8010606:	78b3      	ldrb	r3, [r6, #2]
 8010608:	2f01      	cmp	r7, #1
 801060a:	706b      	strb	r3, [r5, #1]
 801060c:	f105 0302 	add.w	r3, r5, #2
 8010610:	d04a      	beq.n	80106a8 <ucdr_deserialize_float+0xf8>
 8010612:	7873      	ldrb	r3, [r6, #1]
 8010614:	2f02      	cmp	r7, #2
 8010616:	70ab      	strb	r3, [r5, #2]
 8010618:	f105 0303 	add.w	r3, r5, #3
 801061c:	d048      	beq.n	80106b0 <ucdr_deserialize_float+0x100>
 801061e:	7833      	ldrb	r3, [r6, #0]
 8010620:	70eb      	strb	r3, [r5, #3]
 8010622:	6923      	ldr	r3, [r4, #16]
 8010624:	2104      	movs	r1, #4
 8010626:	68a2      	ldr	r2, [r4, #8]
 8010628:	3304      	adds	r3, #4
 801062a:	7da0      	ldrb	r0, [r4, #22]
 801062c:	444a      	add	r2, r9
 801062e:	7561      	strb	r1, [r4, #21]
 8010630:	1bdb      	subs	r3, r3, r7
 8010632:	f080 0001 	eor.w	r0, r0, #1
 8010636:	60a2      	str	r2, [r4, #8]
 8010638:	6123      	str	r3, [r4, #16]
 801063a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801063e:	2104      	movs	r1, #4
 8010640:	4620      	mov	r0, r4
 8010642:	f000 f9e7 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 8010646:	b1b0      	cbz	r0, 8010676 <ucdr_deserialize_float+0xc6>
 8010648:	7d23      	ldrb	r3, [r4, #20]
 801064a:	2b01      	cmp	r3, #1
 801064c:	68a3      	ldr	r3, [r4, #8]
 801064e:	d017      	beq.n	8010680 <ucdr_deserialize_float+0xd0>
 8010650:	78db      	ldrb	r3, [r3, #3]
 8010652:	702b      	strb	r3, [r5, #0]
 8010654:	68a3      	ldr	r3, [r4, #8]
 8010656:	789b      	ldrb	r3, [r3, #2]
 8010658:	706b      	strb	r3, [r5, #1]
 801065a:	68a3      	ldr	r3, [r4, #8]
 801065c:	785b      	ldrb	r3, [r3, #1]
 801065e:	70ab      	strb	r3, [r5, #2]
 8010660:	68a3      	ldr	r3, [r4, #8]
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	70eb      	strb	r3, [r5, #3]
 8010666:	2104      	movs	r1, #4
 8010668:	68a2      	ldr	r2, [r4, #8]
 801066a:	6923      	ldr	r3, [r4, #16]
 801066c:	440a      	add	r2, r1
 801066e:	7561      	strb	r1, [r4, #21]
 8010670:	440b      	add	r3, r1
 8010672:	60a2      	str	r2, [r4, #8]
 8010674:	6123      	str	r3, [r4, #16]
 8010676:	7da0      	ldrb	r0, [r4, #22]
 8010678:	f080 0001 	eor.w	r0, r0, #1
 801067c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	602b      	str	r3, [r5, #0]
 8010684:	e7ef      	b.n	8010666 <ucdr_deserialize_float+0xb6>
 8010686:	68a2      	ldr	r2, [r4, #8]
 8010688:	6923      	ldr	r3, [r4, #16]
 801068a:	1bd2      	subs	r2, r2, r7
 801068c:	7da0      	ldrb	r0, [r4, #22]
 801068e:	1bdb      	subs	r3, r3, r7
 8010690:	f884 8015 	strb.w	r8, [r4, #21]
 8010694:	f080 0001 	eor.w	r0, r0, #1
 8010698:	60a2      	str	r2, [r4, #8]
 801069a:	6123      	str	r3, [r4, #16]
 801069c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106a0:	68a3      	ldr	r3, [r4, #8]
 80106a2:	789b      	ldrb	r3, [r3, #2]
 80106a4:	706b      	strb	r3, [r5, #1]
 80106a6:	1cab      	adds	r3, r5, #2
 80106a8:	68a2      	ldr	r2, [r4, #8]
 80106aa:	7852      	ldrb	r2, [r2, #1]
 80106ac:	f803 2b01 	strb.w	r2, [r3], #1
 80106b0:	68a2      	ldr	r2, [r4, #8]
 80106b2:	7812      	ldrb	r2, [r2, #0]
 80106b4:	701a      	strb	r2, [r3, #0]
 80106b6:	e7b4      	b.n	8010622 <ucdr_deserialize_float+0x72>
 80106b8:	4631      	mov	r1, r6
 80106ba:	463a      	mov	r2, r7
 80106bc:	4628      	mov	r0, r5
 80106be:	f001 fe2c 	bl	801231a <memcpy>
 80106c2:	464a      	mov	r2, r9
 80106c4:	19e8      	adds	r0, r5, r7
 80106c6:	68a1      	ldr	r1, [r4, #8]
 80106c8:	f001 fe27 	bl	801231a <memcpy>
 80106cc:	e7a9      	b.n	8010622 <ucdr_deserialize_float+0x72>
 80106ce:	bf00      	nop

080106d0 <ucdr_serialize_double>:
 80106d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d4:	4604      	mov	r4, r0
 80106d6:	b082      	sub	sp, #8
 80106d8:	2108      	movs	r1, #8
 80106da:	ed8d 0b00 	vstr	d0, [sp]
 80106de:	f000 f9bd 	bl	8010a5c <ucdr_buffer_alignment>
 80106e2:	4601      	mov	r1, r0
 80106e4:	4620      	mov	r0, r4
 80106e6:	7d67      	ldrb	r7, [r4, #21]
 80106e8:	f000 f9fc 	bl	8010ae4 <ucdr_advance_buffer>
 80106ec:	2108      	movs	r1, #8
 80106ee:	4620      	mov	r0, r4
 80106f0:	f000 f984 	bl	80109fc <ucdr_check_buffer_available_for>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	d14e      	bne.n	8010796 <ucdr_serialize_double+0xc6>
 80106f8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80106fc:	42ab      	cmp	r3, r5
 80106fe:	d945      	bls.n	801078c <ucdr_serialize_double+0xbc>
 8010700:	1b5e      	subs	r6, r3, r5
 8010702:	60a3      	str	r3, [r4, #8]
 8010704:	6923      	ldr	r3, [r4, #16]
 8010706:	4620      	mov	r0, r4
 8010708:	f1c6 0808 	rsb	r8, r6, #8
 801070c:	4433      	add	r3, r6
 801070e:	4641      	mov	r1, r8
 8010710:	6123      	str	r3, [r4, #16]
 8010712:	f000 f97f 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 8010716:	2800      	cmp	r0, #0
 8010718:	d074      	beq.n	8010804 <ucdr_serialize_double+0x134>
 801071a:	7d23      	ldrb	r3, [r4, #20]
 801071c:	2b01      	cmp	r3, #1
 801071e:	f000 809b 	beq.w	8010858 <ucdr_serialize_double+0x188>
 8010722:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010726:	702b      	strb	r3, [r5, #0]
 8010728:	2e00      	cmp	r6, #0
 801072a:	d078      	beq.n	801081e <ucdr_serialize_double+0x14e>
 801072c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010730:	2e01      	cmp	r6, #1
 8010732:	706b      	strb	r3, [r5, #1]
 8010734:	d077      	beq.n	8010826 <ucdr_serialize_double+0x156>
 8010736:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801073a:	2e02      	cmp	r6, #2
 801073c:	70ab      	strb	r3, [r5, #2]
 801073e:	d076      	beq.n	801082e <ucdr_serialize_double+0x15e>
 8010740:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010744:	2e03      	cmp	r6, #3
 8010746:	70eb      	strb	r3, [r5, #3]
 8010748:	d075      	beq.n	8010836 <ucdr_serialize_double+0x166>
 801074a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801074e:	2e04      	cmp	r6, #4
 8010750:	712b      	strb	r3, [r5, #4]
 8010752:	d074      	beq.n	801083e <ucdr_serialize_double+0x16e>
 8010754:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010758:	2e05      	cmp	r6, #5
 801075a:	716b      	strb	r3, [r5, #5]
 801075c:	d073      	beq.n	8010846 <ucdr_serialize_double+0x176>
 801075e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010762:	2e06      	cmp	r6, #6
 8010764:	71ab      	strb	r3, [r5, #6]
 8010766:	d072      	beq.n	801084e <ucdr_serialize_double+0x17e>
 8010768:	f89d 3000 	ldrb.w	r3, [sp]
 801076c:	71eb      	strb	r3, [r5, #7]
 801076e:	6923      	ldr	r3, [r4, #16]
 8010770:	2108      	movs	r1, #8
 8010772:	68a2      	ldr	r2, [r4, #8]
 8010774:	3308      	adds	r3, #8
 8010776:	7da0      	ldrb	r0, [r4, #22]
 8010778:	4442      	add	r2, r8
 801077a:	7561      	strb	r1, [r4, #21]
 801077c:	1b9e      	subs	r6, r3, r6
 801077e:	f080 0001 	eor.w	r0, r0, #1
 8010782:	60a2      	str	r2, [r4, #8]
 8010784:	6126      	str	r6, [r4, #16]
 8010786:	b002      	add	sp, #8
 8010788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801078c:	2108      	movs	r1, #8
 801078e:	4620      	mov	r0, r4
 8010790:	f000 f940 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 8010794:	b350      	cbz	r0, 80107ec <ucdr_serialize_double+0x11c>
 8010796:	7d23      	ldrb	r3, [r4, #20]
 8010798:	2b01      	cmp	r3, #1
 801079a:	d02d      	beq.n	80107f8 <ucdr_serialize_double+0x128>
 801079c:	68a3      	ldr	r3, [r4, #8]
 801079e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80107a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80107a6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80107aa:	7018      	strb	r0, [r3, #0]
 80107ac:	68a3      	ldr	r3, [r4, #8]
 80107ae:	705a      	strb	r2, [r3, #1]
 80107b0:	68a3      	ldr	r3, [r4, #8]
 80107b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80107b6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80107ba:	7099      	strb	r1, [r3, #2]
 80107bc:	68a3      	ldr	r3, [r4, #8]
 80107be:	70da      	strb	r2, [r3, #3]
 80107c0:	68a3      	ldr	r3, [r4, #8]
 80107c2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80107c6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80107ca:	7118      	strb	r0, [r3, #4]
 80107cc:	68a3      	ldr	r3, [r4, #8]
 80107ce:	715a      	strb	r2, [r3, #5]
 80107d0:	68a3      	ldr	r3, [r4, #8]
 80107d2:	f89d 2000 	ldrb.w	r2, [sp]
 80107d6:	7199      	strb	r1, [r3, #6]
 80107d8:	68a3      	ldr	r3, [r4, #8]
 80107da:	71da      	strb	r2, [r3, #7]
 80107dc:	2108      	movs	r1, #8
 80107de:	68a2      	ldr	r2, [r4, #8]
 80107e0:	6923      	ldr	r3, [r4, #16]
 80107e2:	440a      	add	r2, r1
 80107e4:	7561      	strb	r1, [r4, #21]
 80107e6:	440b      	add	r3, r1
 80107e8:	60a2      	str	r2, [r4, #8]
 80107ea:	6123      	str	r3, [r4, #16]
 80107ec:	7da0      	ldrb	r0, [r4, #22]
 80107ee:	f080 0001 	eor.w	r0, r0, #1
 80107f2:	b002      	add	sp, #8
 80107f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107f8:	466b      	mov	r3, sp
 80107fa:	68a2      	ldr	r2, [r4, #8]
 80107fc:	cb03      	ldmia	r3!, {r0, r1}
 80107fe:	6010      	str	r0, [r2, #0]
 8010800:	6051      	str	r1, [r2, #4]
 8010802:	e7eb      	b.n	80107dc <ucdr_serialize_double+0x10c>
 8010804:	68a2      	ldr	r2, [r4, #8]
 8010806:	6923      	ldr	r3, [r4, #16]
 8010808:	7da0      	ldrb	r0, [r4, #22]
 801080a:	1b92      	subs	r2, r2, r6
 801080c:	1b9b      	subs	r3, r3, r6
 801080e:	7567      	strb	r7, [r4, #21]
 8010810:	f080 0001 	eor.w	r0, r0, #1
 8010814:	60a2      	str	r2, [r4, #8]
 8010816:	6123      	str	r3, [r4, #16]
 8010818:	b002      	add	sp, #8
 801081a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801081e:	68a3      	ldr	r3, [r4, #8]
 8010820:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010824:	701a      	strb	r2, [r3, #0]
 8010826:	68a3      	ldr	r3, [r4, #8]
 8010828:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801082c:	701a      	strb	r2, [r3, #0]
 801082e:	68a3      	ldr	r3, [r4, #8]
 8010830:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010834:	701a      	strb	r2, [r3, #0]
 8010836:	68a3      	ldr	r3, [r4, #8]
 8010838:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801083c:	701a      	strb	r2, [r3, #0]
 801083e:	68a3      	ldr	r3, [r4, #8]
 8010840:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010844:	701a      	strb	r2, [r3, #0]
 8010846:	68a3      	ldr	r3, [r4, #8]
 8010848:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801084c:	701a      	strb	r2, [r3, #0]
 801084e:	68a3      	ldr	r3, [r4, #8]
 8010850:	f89d 2000 	ldrb.w	r2, [sp]
 8010854:	701a      	strb	r2, [r3, #0]
 8010856:	e78a      	b.n	801076e <ucdr_serialize_double+0x9e>
 8010858:	4628      	mov	r0, r5
 801085a:	466d      	mov	r5, sp
 801085c:	4632      	mov	r2, r6
 801085e:	4629      	mov	r1, r5
 8010860:	f001 fd5b 	bl	801231a <memcpy>
 8010864:	4642      	mov	r2, r8
 8010866:	19a9      	adds	r1, r5, r6
 8010868:	68a0      	ldr	r0, [r4, #8]
 801086a:	f001 fd56 	bl	801231a <memcpy>
 801086e:	e77e      	b.n	801076e <ucdr_serialize_double+0x9e>

08010870 <ucdr_deserialize_double>:
 8010870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010874:	4604      	mov	r4, r0
 8010876:	460d      	mov	r5, r1
 8010878:	2108      	movs	r1, #8
 801087a:	f000 f8ef 	bl	8010a5c <ucdr_buffer_alignment>
 801087e:	4601      	mov	r1, r0
 8010880:	4620      	mov	r0, r4
 8010882:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010886:	f000 f92d 	bl	8010ae4 <ucdr_advance_buffer>
 801088a:	2108      	movs	r1, #8
 801088c:	4620      	mov	r0, r4
 801088e:	f000 f8b5 	bl	80109fc <ucdr_check_buffer_available_for>
 8010892:	2800      	cmp	r0, #0
 8010894:	d151      	bne.n	801093a <ucdr_deserialize_double+0xca>
 8010896:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801089a:	42be      	cmp	r6, r7
 801089c:	d948      	bls.n	8010930 <ucdr_deserialize_double+0xc0>
 801089e:	6923      	ldr	r3, [r4, #16]
 80108a0:	4620      	mov	r0, r4
 80108a2:	60a6      	str	r6, [r4, #8]
 80108a4:	1bf6      	subs	r6, r6, r7
 80108a6:	4433      	add	r3, r6
 80108a8:	f1c6 0908 	rsb	r9, r6, #8
 80108ac:	6123      	str	r3, [r4, #16]
 80108ae:	4649      	mov	r1, r9
 80108b0:	f000 f8b0 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	d06d      	beq.n	8010994 <ucdr_deserialize_double+0x124>
 80108b8:	7d23      	ldrb	r3, [r4, #20]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	f000 8093 	beq.w	80109e6 <ucdr_deserialize_double+0x176>
 80108c0:	79fb      	ldrb	r3, [r7, #7]
 80108c2:	702b      	strb	r3, [r5, #0]
 80108c4:	2e00      	cmp	r6, #0
 80108c6:	d072      	beq.n	80109ae <ucdr_deserialize_double+0x13e>
 80108c8:	79bb      	ldrb	r3, [r7, #6]
 80108ca:	2e01      	cmp	r6, #1
 80108cc:	706b      	strb	r3, [r5, #1]
 80108ce:	f105 0302 	add.w	r3, r5, #2
 80108d2:	d070      	beq.n	80109b6 <ucdr_deserialize_double+0x146>
 80108d4:	797b      	ldrb	r3, [r7, #5]
 80108d6:	2e02      	cmp	r6, #2
 80108d8:	70ab      	strb	r3, [r5, #2]
 80108da:	f105 0303 	add.w	r3, r5, #3
 80108de:	d06e      	beq.n	80109be <ucdr_deserialize_double+0x14e>
 80108e0:	793b      	ldrb	r3, [r7, #4]
 80108e2:	2e03      	cmp	r6, #3
 80108e4:	70eb      	strb	r3, [r5, #3]
 80108e6:	f105 0304 	add.w	r3, r5, #4
 80108ea:	d06c      	beq.n	80109c6 <ucdr_deserialize_double+0x156>
 80108ec:	78fb      	ldrb	r3, [r7, #3]
 80108ee:	2e04      	cmp	r6, #4
 80108f0:	712b      	strb	r3, [r5, #4]
 80108f2:	f105 0305 	add.w	r3, r5, #5
 80108f6:	d06a      	beq.n	80109ce <ucdr_deserialize_double+0x15e>
 80108f8:	78bb      	ldrb	r3, [r7, #2]
 80108fa:	2e05      	cmp	r6, #5
 80108fc:	716b      	strb	r3, [r5, #5]
 80108fe:	f105 0306 	add.w	r3, r5, #6
 8010902:	d068      	beq.n	80109d6 <ucdr_deserialize_double+0x166>
 8010904:	787b      	ldrb	r3, [r7, #1]
 8010906:	2e06      	cmp	r6, #6
 8010908:	71ab      	strb	r3, [r5, #6]
 801090a:	f105 0307 	add.w	r3, r5, #7
 801090e:	d066      	beq.n	80109de <ucdr_deserialize_double+0x16e>
 8010910:	783b      	ldrb	r3, [r7, #0]
 8010912:	71eb      	strb	r3, [r5, #7]
 8010914:	6923      	ldr	r3, [r4, #16]
 8010916:	2108      	movs	r1, #8
 8010918:	68a2      	ldr	r2, [r4, #8]
 801091a:	3308      	adds	r3, #8
 801091c:	7da0      	ldrb	r0, [r4, #22]
 801091e:	444a      	add	r2, r9
 8010920:	7561      	strb	r1, [r4, #21]
 8010922:	1b9e      	subs	r6, r3, r6
 8010924:	f080 0001 	eor.w	r0, r0, #1
 8010928:	60a2      	str	r2, [r4, #8]
 801092a:	6126      	str	r6, [r4, #16]
 801092c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010930:	2108      	movs	r1, #8
 8010932:	4620      	mov	r0, r4
 8010934:	f000 f86e 	bl	8010a14 <ucdr_check_final_buffer_behavior>
 8010938:	b310      	cbz	r0, 8010980 <ucdr_deserialize_double+0x110>
 801093a:	7d23      	ldrb	r3, [r4, #20]
 801093c:	2b01      	cmp	r3, #1
 801093e:	68a3      	ldr	r3, [r4, #8]
 8010940:	d023      	beq.n	801098a <ucdr_deserialize_double+0x11a>
 8010942:	79db      	ldrb	r3, [r3, #7]
 8010944:	702b      	strb	r3, [r5, #0]
 8010946:	68a3      	ldr	r3, [r4, #8]
 8010948:	799b      	ldrb	r3, [r3, #6]
 801094a:	706b      	strb	r3, [r5, #1]
 801094c:	68a3      	ldr	r3, [r4, #8]
 801094e:	795b      	ldrb	r3, [r3, #5]
 8010950:	70ab      	strb	r3, [r5, #2]
 8010952:	68a3      	ldr	r3, [r4, #8]
 8010954:	791b      	ldrb	r3, [r3, #4]
 8010956:	70eb      	strb	r3, [r5, #3]
 8010958:	68a3      	ldr	r3, [r4, #8]
 801095a:	78db      	ldrb	r3, [r3, #3]
 801095c:	712b      	strb	r3, [r5, #4]
 801095e:	68a3      	ldr	r3, [r4, #8]
 8010960:	789b      	ldrb	r3, [r3, #2]
 8010962:	716b      	strb	r3, [r5, #5]
 8010964:	68a3      	ldr	r3, [r4, #8]
 8010966:	785b      	ldrb	r3, [r3, #1]
 8010968:	71ab      	strb	r3, [r5, #6]
 801096a:	68a3      	ldr	r3, [r4, #8]
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	71eb      	strb	r3, [r5, #7]
 8010970:	2108      	movs	r1, #8
 8010972:	68a2      	ldr	r2, [r4, #8]
 8010974:	6923      	ldr	r3, [r4, #16]
 8010976:	440a      	add	r2, r1
 8010978:	7561      	strb	r1, [r4, #21]
 801097a:	440b      	add	r3, r1
 801097c:	60a2      	str	r2, [r4, #8]
 801097e:	6123      	str	r3, [r4, #16]
 8010980:	7da0      	ldrb	r0, [r4, #22]
 8010982:	f080 0001 	eor.w	r0, r0, #1
 8010986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	602a      	str	r2, [r5, #0]
 8010990:	606b      	str	r3, [r5, #4]
 8010992:	e7ed      	b.n	8010970 <ucdr_deserialize_double+0x100>
 8010994:	68a2      	ldr	r2, [r4, #8]
 8010996:	6923      	ldr	r3, [r4, #16]
 8010998:	1b92      	subs	r2, r2, r6
 801099a:	7da0      	ldrb	r0, [r4, #22]
 801099c:	1b9b      	subs	r3, r3, r6
 801099e:	f884 8015 	strb.w	r8, [r4, #21]
 80109a2:	f080 0001 	eor.w	r0, r0, #1
 80109a6:	60a2      	str	r2, [r4, #8]
 80109a8:	6123      	str	r3, [r4, #16]
 80109aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109ae:	68a3      	ldr	r3, [r4, #8]
 80109b0:	799b      	ldrb	r3, [r3, #6]
 80109b2:	706b      	strb	r3, [r5, #1]
 80109b4:	1cab      	adds	r3, r5, #2
 80109b6:	68a2      	ldr	r2, [r4, #8]
 80109b8:	7952      	ldrb	r2, [r2, #5]
 80109ba:	f803 2b01 	strb.w	r2, [r3], #1
 80109be:	68a2      	ldr	r2, [r4, #8]
 80109c0:	7912      	ldrb	r2, [r2, #4]
 80109c2:	f803 2b01 	strb.w	r2, [r3], #1
 80109c6:	68a2      	ldr	r2, [r4, #8]
 80109c8:	78d2      	ldrb	r2, [r2, #3]
 80109ca:	f803 2b01 	strb.w	r2, [r3], #1
 80109ce:	68a2      	ldr	r2, [r4, #8]
 80109d0:	7892      	ldrb	r2, [r2, #2]
 80109d2:	f803 2b01 	strb.w	r2, [r3], #1
 80109d6:	68a2      	ldr	r2, [r4, #8]
 80109d8:	7852      	ldrb	r2, [r2, #1]
 80109da:	f803 2b01 	strb.w	r2, [r3], #1
 80109de:	68a2      	ldr	r2, [r4, #8]
 80109e0:	7812      	ldrb	r2, [r2, #0]
 80109e2:	701a      	strb	r2, [r3, #0]
 80109e4:	e796      	b.n	8010914 <ucdr_deserialize_double+0xa4>
 80109e6:	4639      	mov	r1, r7
 80109e8:	4632      	mov	r2, r6
 80109ea:	4628      	mov	r0, r5
 80109ec:	f001 fc95 	bl	801231a <memcpy>
 80109f0:	464a      	mov	r2, r9
 80109f2:	19a8      	adds	r0, r5, r6
 80109f4:	68a1      	ldr	r1, [r4, #8]
 80109f6:	f001 fc90 	bl	801231a <memcpy>
 80109fa:	e78b      	b.n	8010914 <ucdr_deserialize_double+0xa4>

080109fc <ucdr_check_buffer_available_for>:
 80109fc:	7d83      	ldrb	r3, [r0, #22]
 80109fe:	b93b      	cbnz	r3, 8010a10 <ucdr_check_buffer_available_for+0x14>
 8010a00:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010a04:	4419      	add	r1, r3
 8010a06:	4288      	cmp	r0, r1
 8010a08:	bf34      	ite	cc
 8010a0a:	2000      	movcc	r0, #0
 8010a0c:	2001      	movcs	r0, #1
 8010a0e:	4770      	bx	lr
 8010a10:	2000      	movs	r0, #0
 8010a12:	4770      	bx	lr

08010a14 <ucdr_check_final_buffer_behavior>:
 8010a14:	7d83      	ldrb	r3, [r0, #22]
 8010a16:	b943      	cbnz	r3, 8010a2a <ucdr_check_final_buffer_behavior+0x16>
 8010a18:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010a1c:	b510      	push	{r4, lr}
 8010a1e:	4291      	cmp	r1, r2
 8010a20:	4604      	mov	r4, r0
 8010a22:	d205      	bcs.n	8010a30 <ucdr_check_final_buffer_behavior+0x1c>
 8010a24:	2301      	movs	r3, #1
 8010a26:	4618      	mov	r0, r3
 8010a28:	bd10      	pop	{r4, pc}
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	4770      	bx	lr
 8010a30:	6982      	ldr	r2, [r0, #24]
 8010a32:	b13a      	cbz	r2, 8010a44 <ucdr_check_final_buffer_behavior+0x30>
 8010a34:	69c1      	ldr	r1, [r0, #28]
 8010a36:	4790      	blx	r2
 8010a38:	f080 0301 	eor.w	r3, r0, #1
 8010a3c:	75a0      	strb	r0, [r4, #22]
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	4618      	mov	r0, r3
 8010a42:	bd10      	pop	{r4, pc}
 8010a44:	2001      	movs	r0, #1
 8010a46:	75a0      	strb	r0, [r4, #22]
 8010a48:	e7fa      	b.n	8010a40 <ucdr_check_final_buffer_behavior+0x2c>
 8010a4a:	bf00      	nop

08010a4c <ucdr_alignment>:
 8010a4c:	fbb0 f2f1 	udiv	r2, r0, r1
 8010a50:	fb02 0011 	mls	r0, r2, r1, r0
 8010a54:	1e4b      	subs	r3, r1, #1
 8010a56:	1a08      	subs	r0, r1, r0
 8010a58:	4018      	ands	r0, r3
 8010a5a:	4770      	bx	lr

08010a5c <ucdr_buffer_alignment>:
 8010a5c:	7d43      	ldrb	r3, [r0, #21]
 8010a5e:	428b      	cmp	r3, r1
 8010a60:	d209      	bcs.n	8010a76 <ucdr_buffer_alignment+0x1a>
 8010a62:	6903      	ldr	r3, [r0, #16]
 8010a64:	1e4a      	subs	r2, r1, #1
 8010a66:	fbb3 f0f1 	udiv	r0, r3, r1
 8010a6a:	fb01 3010 	mls	r0, r1, r0, r3
 8010a6e:	1a09      	subs	r1, r1, r0
 8010a70:	ea01 0002 	and.w	r0, r1, r2
 8010a74:	4770      	bx	lr
 8010a76:	2000      	movs	r0, #0
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop

08010a7c <ucdr_align_to>:
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4604      	mov	r4, r0
 8010a80:	460d      	mov	r5, r1
 8010a82:	f7ff ffeb 	bl	8010a5c <ucdr_buffer_alignment>
 8010a86:	68a3      	ldr	r3, [r4, #8]
 8010a88:	7565      	strb	r5, [r4, #21]
 8010a8a:	181a      	adds	r2, r3, r0
 8010a8c:	6923      	ldr	r3, [r4, #16]
 8010a8e:	4418      	add	r0, r3
 8010a90:	6863      	ldr	r3, [r4, #4]
 8010a92:	4293      	cmp	r3, r2
 8010a94:	6120      	str	r0, [r4, #16]
 8010a96:	bf28      	it	cs
 8010a98:	4613      	movcs	r3, r2
 8010a9a:	60a3      	str	r3, [r4, #8]
 8010a9c:	bd38      	pop	{r3, r4, r5, pc}
 8010a9e:	bf00      	nop

08010aa0 <ucdr_buffer_remaining>:
 8010aa0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010aa4:	1a10      	subs	r0, r2, r0
 8010aa6:	4770      	bx	lr

08010aa8 <ucdr_check_final_buffer_behavior_array>:
 8010aa8:	b538      	push	{r3, r4, r5, lr}
 8010aaa:	7d83      	ldrb	r3, [r0, #22]
 8010aac:	b9a3      	cbnz	r3, 8010ad8 <ucdr_check_final_buffer_behavior_array+0x30>
 8010aae:	4604      	mov	r4, r0
 8010ab0:	460d      	mov	r5, r1
 8010ab2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d300      	bcc.n	8010abc <ucdr_check_final_buffer_behavior_array+0x14>
 8010aba:	b931      	cbnz	r1, 8010aca <ucdr_check_final_buffer_behavior_array+0x22>
 8010abc:	4620      	mov	r0, r4
 8010abe:	f7ff ffef 	bl	8010aa0 <ucdr_buffer_remaining>
 8010ac2:	42a8      	cmp	r0, r5
 8010ac4:	bf28      	it	cs
 8010ac6:	4628      	movcs	r0, r5
 8010ac8:	bd38      	pop	{r3, r4, r5, pc}
 8010aca:	6983      	ldr	r3, [r0, #24]
 8010acc:	b133      	cbz	r3, 8010adc <ucdr_check_final_buffer_behavior_array+0x34>
 8010ace:	69c1      	ldr	r1, [r0, #28]
 8010ad0:	4798      	blx	r3
 8010ad2:	75a0      	strb	r0, [r4, #22]
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d0f1      	beq.n	8010abc <ucdr_check_final_buffer_behavior_array+0x14>
 8010ad8:	2000      	movs	r0, #0
 8010ada:	bd38      	pop	{r3, r4, r5, pc}
 8010adc:	2301      	movs	r3, #1
 8010ade:	7583      	strb	r3, [r0, #22]
 8010ae0:	e7fa      	b.n	8010ad8 <ucdr_check_final_buffer_behavior_array+0x30>
 8010ae2:	bf00      	nop

08010ae4 <ucdr_advance_buffer>:
 8010ae4:	b538      	push	{r3, r4, r5, lr}
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	460d      	mov	r5, r1
 8010aea:	f7ff ff87 	bl	80109fc <ucdr_check_buffer_available_for>
 8010aee:	b178      	cbz	r0, 8010b10 <ucdr_advance_buffer+0x2c>
 8010af0:	6923      	ldr	r3, [r4, #16]
 8010af2:	68a2      	ldr	r2, [r4, #8]
 8010af4:	442b      	add	r3, r5
 8010af6:	442a      	add	r2, r5
 8010af8:	6123      	str	r3, [r4, #16]
 8010afa:	2301      	movs	r3, #1
 8010afc:	60a2      	str	r2, [r4, #8]
 8010afe:	7563      	strb	r3, [r4, #21]
 8010b00:	bd38      	pop	{r3, r4, r5, pc}
 8010b02:	68a2      	ldr	r2, [r4, #8]
 8010b04:	1a2d      	subs	r5, r5, r0
 8010b06:	6923      	ldr	r3, [r4, #16]
 8010b08:	4402      	add	r2, r0
 8010b0a:	4418      	add	r0, r3
 8010b0c:	60a2      	str	r2, [r4, #8]
 8010b0e:	6120      	str	r0, [r4, #16]
 8010b10:	4629      	mov	r1, r5
 8010b12:	2201      	movs	r2, #1
 8010b14:	4620      	mov	r0, r4
 8010b16:	f7ff ffc7 	bl	8010aa8 <ucdr_check_final_buffer_behavior_array>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	d1f1      	bne.n	8010b02 <ucdr_advance_buffer+0x1e>
 8010b1e:	2301      	movs	r3, #1
 8010b20:	7563      	strb	r3, [r4, #21]
 8010b22:	bd38      	pop	{r3, r4, r5, pc}

08010b24 <__default_zero_allocate>:
 8010b24:	f001 b802 	b.w	8011b2c <calloc>

08010b28 <__default_reallocate>:
 8010b28:	f001 b8ec 	b.w	8011d04 <realloc>

08010b2c <__default_deallocate>:
 8010b2c:	f001 b834 	b.w	8011b98 <free>

08010b30 <__default_allocate>:
 8010b30:	f001 b82a 	b.w	8011b88 <malloc>

08010b34 <rcutils_get_default_allocator>:
 8010b34:	b510      	push	{r4, lr}
 8010b36:	4c05      	ldr	r4, [pc, #20]	@ (8010b4c <rcutils_get_default_allocator+0x18>)
 8010b38:	4686      	mov	lr, r0
 8010b3a:	4684      	mov	ip, r0
 8010b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b42:	6823      	ldr	r3, [r4, #0]
 8010b44:	4670      	mov	r0, lr
 8010b46:	f8cc 3000 	str.w	r3, [ip]
 8010b4a:	bd10      	pop	{r4, pc}
 8010b4c:	24000df8 	.word	0x24000df8

08010b50 <get_message_typesupport_handle_function>:
 8010b50:	b510      	push	{r4, lr}
 8010b52:	4604      	mov	r4, r0
 8010b54:	6800      	ldr	r0, [r0, #0]
 8010b56:	f7ef fbc3 	bl	80002e0 <strcmp>
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	bf0c      	ite	eq
 8010b5e:	4620      	moveq	r0, r4
 8010b60:	2000      	movne	r0, #0
 8010b62:	bd10      	pop	{r4, pc}

08010b64 <get_service_typesupport_handle_function>:
 8010b64:	b510      	push	{r4, lr}
 8010b66:	4604      	mov	r4, r0
 8010b68:	6800      	ldr	r0, [r0, #0]
 8010b6a:	f7ef fbb9 	bl	80002e0 <strcmp>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	bf0c      	ite	eq
 8010b72:	4620      	moveq	r0, r4
 8010b74:	2000      	movne	r0, #0
 8010b76:	bd10      	pop	{r4, pc}

08010b78 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8010b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7c:	6805      	ldr	r5, [r0, #0]
 8010b7e:	4604      	mov	r4, r0
 8010b80:	460e      	mov	r6, r1
 8010b82:	4628      	mov	r0, r5
 8010b84:	f7ef fbac 	bl	80002e0 <strcmp>
 8010b88:	b1c8      	cbz	r0, 8010bbe <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8010b8a:	4b11      	ldr	r3, [pc, #68]	@ (8010bd0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	429d      	cmp	r5, r3
 8010b90:	d112      	bne.n	8010bb8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010b92:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010b96:	f8d8 4000 	ldr.w	r4, [r8]
 8010b9a:	b16c      	cbz	r4, 8010bb8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010b9c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010ba0:	2700      	movs	r7, #0
 8010ba2:	3d04      	subs	r5, #4
 8010ba4:	4631      	mov	r1, r6
 8010ba6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010baa:	f7ef fb99 	bl	80002e0 <strcmp>
 8010bae:	00bb      	lsls	r3, r7, #2
 8010bb0:	b140      	cbz	r0, 8010bc4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8010bb2:	3701      	adds	r7, #1
 8010bb4:	42bc      	cmp	r4, r7
 8010bb6:	d1f5      	bne.n	8010ba4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8010bb8:	2000      	movs	r0, #0
 8010bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bc4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bcc:	58d3      	ldr	r3, [r2, r3]
 8010bce:	4718      	bx	r3
 8010bd0:	24000e0c 	.word	0x24000e0c

08010bd4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8010bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd8:	6805      	ldr	r5, [r0, #0]
 8010bda:	4604      	mov	r4, r0
 8010bdc:	460e      	mov	r6, r1
 8010bde:	4628      	mov	r0, r5
 8010be0:	f7ef fb7e 	bl	80002e0 <strcmp>
 8010be4:	b1c8      	cbz	r0, 8010c1a <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8010be6:	4b11      	ldr	r3, [pc, #68]	@ (8010c2c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	429d      	cmp	r5, r3
 8010bec:	d112      	bne.n	8010c14 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8010bee:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010bf2:	f8d8 4000 	ldr.w	r4, [r8]
 8010bf6:	b16c      	cbz	r4, 8010c14 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8010bf8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010bfc:	2700      	movs	r7, #0
 8010bfe:	3d04      	subs	r5, #4
 8010c00:	4631      	mov	r1, r6
 8010c02:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010c06:	f7ef fb6b 	bl	80002e0 <strcmp>
 8010c0a:	00bb      	lsls	r3, r7, #2
 8010c0c:	b140      	cbz	r0, 8010c20 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8010c0e:	3701      	adds	r7, #1
 8010c10:	42bc      	cmp	r4, r7
 8010c12:	d1f5      	bne.n	8010c00 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8010c14:	2000      	movs	r0, #0
 8010c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c20:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c28:	58d3      	ldr	r3, [r2, r3]
 8010c2a:	4718      	bx	r3
 8010c2c:	24000e0c 	.word	0x24000e0c

08010c30 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8010c30:	f000 bcb4 	b.w	801159c <std_msgs__msg__Header__init>

08010c34 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8010c34:	f000 bcd6 	b.w	80115e4 <std_msgs__msg__Header__fini>

08010c38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010c38:	b508      	push	{r3, lr}
 8010c3a:	f7fe ffd3 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010c3e:	4b06      	ldr	r3, [pc, #24]	@ (8010c58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010c40:	4906      	ldr	r1, [pc, #24]	@ (8010c5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8010c42:	681a      	ldr	r2, [r3, #0]
 8010c44:	60c8      	str	r0, [r1, #12]
 8010c46:	b10a      	cbz	r2, 8010c4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8010c48:	4803      	ldr	r0, [pc, #12]	@ (8010c58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010c4a:	bd08      	pop	{r3, pc}
 8010c4c:	4a04      	ldr	r2, [pc, #16]	@ (8010c60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8010c4e:	4802      	ldr	r0, [pc, #8]	@ (8010c58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010c50:	6812      	ldr	r2, [r2, #0]
 8010c52:	601a      	str	r2, [r3, #0]
 8010c54:	bd08      	pop	{r3, pc}
 8010c56:	bf00      	nop
 8010c58:	24000e8c 	.word	0x24000e8c
 8010c5c:	24000e14 	.word	0x24000e14
 8010c60:	24000e10 	.word	0x24000e10

08010c64 <_Header__max_serialized_size>:
 8010c64:	b500      	push	{lr}
 8010c66:	b083      	sub	sp, #12
 8010c68:	2301      	movs	r3, #1
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	f10d 0007 	add.w	r0, sp, #7
 8010c70:	f88d 3007 	strb.w	r3, [sp, #7]
 8010c74:	f7ff f814 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010c78:	b003      	add	sp, #12
 8010c7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c7e:	bf00      	nop

08010c80 <get_serialized_size_std_msgs__msg__Header>:
 8010c80:	b570      	push	{r4, r5, r6, lr}
 8010c82:	4605      	mov	r5, r0
 8010c84:	b168      	cbz	r0, 8010ca2 <get_serialized_size_std_msgs__msg__Header+0x22>
 8010c86:	460c      	mov	r4, r1
 8010c88:	f7fe ffba 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 8010c8c:	2104      	movs	r1, #4
 8010c8e:	1826      	adds	r6, r4, r0
 8010c90:	f1c4 0405 	rsb	r4, r4, #5
 8010c94:	4630      	mov	r0, r6
 8010c96:	f7ff fed9 	bl	8010a4c <ucdr_alignment>
 8010c9a:	68e9      	ldr	r1, [r5, #12]
 8010c9c:	440c      	add	r4, r1
 8010c9e:	4404      	add	r4, r0
 8010ca0:	19a0      	adds	r0, r4, r6
 8010ca2:	bd70      	pop	{r4, r5, r6, pc}

08010ca4 <_Header__cdr_deserialize>:
 8010ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ca6:	460c      	mov	r4, r1
 8010ca8:	b083      	sub	sp, #12
 8010caa:	b1e9      	cbz	r1, 8010ce8 <_Header__cdr_deserialize+0x44>
 8010cac:	4606      	mov	r6, r0
 8010cae:	f7ff f80b 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	4621      	mov	r1, r4
 8010cb6:	4630      	mov	r0, r6
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	68db      	ldr	r3, [r3, #12]
 8010cbc:	4798      	blx	r3
 8010cbe:	6927      	ldr	r7, [r4, #16]
 8010cc0:	ab01      	add	r3, sp, #4
 8010cc2:	68a1      	ldr	r1, [r4, #8]
 8010cc4:	463a      	mov	r2, r7
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	f000 fc4e 	bl	8011568 <ucdr_deserialize_sequence_char>
 8010ccc:	9b01      	ldr	r3, [sp, #4]
 8010cce:	4605      	mov	r5, r0
 8010cd0:	b920      	cbnz	r0, 8010cdc <_Header__cdr_deserialize+0x38>
 8010cd2:	429f      	cmp	r7, r3
 8010cd4:	d30c      	bcc.n	8010cf0 <_Header__cdr_deserialize+0x4c>
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	b003      	add	sp, #12
 8010cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cdc:	b103      	cbz	r3, 8010ce0 <_Header__cdr_deserialize+0x3c>
 8010cde:	3b01      	subs	r3, #1
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	60e3      	str	r3, [r4, #12]
 8010ce4:	b003      	add	sp, #12
 8010ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ce8:	460d      	mov	r5, r1
 8010cea:	4628      	mov	r0, r5
 8010cec:	b003      	add	sp, #12
 8010cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cf0:	2101      	movs	r1, #1
 8010cf2:	4630      	mov	r0, r6
 8010cf4:	75b5      	strb	r5, [r6, #22]
 8010cf6:	7571      	strb	r1, [r6, #21]
 8010cf8:	60e5      	str	r5, [r4, #12]
 8010cfa:	f7ff febf 	bl	8010a7c <ucdr_align_to>
 8010cfe:	4630      	mov	r0, r6
 8010d00:	9901      	ldr	r1, [sp, #4]
 8010d02:	f7ff feef 	bl	8010ae4 <ucdr_advance_buffer>
 8010d06:	4628      	mov	r0, r5
 8010d08:	b003      	add	sp, #12
 8010d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010d0c <_Header__cdr_serialize>:
 8010d0c:	b308      	cbz	r0, 8010d52 <_Header__cdr_serialize+0x46>
 8010d0e:	b570      	push	{r4, r5, r6, lr}
 8010d10:	4604      	mov	r4, r0
 8010d12:	460d      	mov	r5, r1
 8010d14:	f7fe ffd8 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	689b      	ldr	r3, [r3, #8]
 8010d22:	4798      	blx	r3
 8010d24:	68a6      	ldr	r6, [r4, #8]
 8010d26:	b15e      	cbz	r6, 8010d40 <_Header__cdr_serialize+0x34>
 8010d28:	4630      	mov	r0, r6
 8010d2a:	f7ef fae3 	bl	80002f4 <strlen>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	1c42      	adds	r2, r0, #1
 8010d32:	4631      	mov	r1, r6
 8010d34:	4628      	mov	r0, r5
 8010d36:	60e3      	str	r3, [r4, #12]
 8010d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d3c:	f000 bc02 	b.w	8011544 <ucdr_serialize_sequence_char>
 8010d40:	4633      	mov	r3, r6
 8010d42:	4632      	mov	r2, r6
 8010d44:	4631      	mov	r1, r6
 8010d46:	4628      	mov	r0, r5
 8010d48:	60e3      	str	r3, [r4, #12]
 8010d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d4e:	f000 bbf9 	b.w	8011544 <ucdr_serialize_sequence_char>
 8010d52:	4770      	bx	lr

08010d54 <_Header__get_serialized_size>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4604      	mov	r4, r0
 8010d58:	b150      	cbz	r0, 8010d70 <_Header__get_serialized_size+0x1c>
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	f7fe ff50 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 8010d60:	2104      	movs	r1, #4
 8010d62:	4605      	mov	r5, r0
 8010d64:	f7ff fe72 	bl	8010a4c <ucdr_alignment>
 8010d68:	68e2      	ldr	r2, [r4, #12]
 8010d6a:	3205      	adds	r2, #5
 8010d6c:	1953      	adds	r3, r2, r5
 8010d6e:	4418      	add	r0, r3
 8010d70:	bd38      	pop	{r3, r4, r5, pc}
 8010d72:	bf00      	nop

08010d74 <max_serialized_size_std_msgs__msg__Header>:
 8010d74:	2301      	movs	r3, #1
 8010d76:	b510      	push	{r4, lr}
 8010d78:	7003      	strb	r3, [r0, #0]
 8010d7a:	4604      	mov	r4, r0
 8010d7c:	f7fe ff90 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010d80:	2300      	movs	r3, #0
 8010d82:	7023      	strb	r3, [r4, #0]
 8010d84:	bd10      	pop	{r4, pc}
 8010d86:	bf00      	nop

08010d88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010d88:	4800      	ldr	r0, [pc, #0]	@ (8010d8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8010d8a:	4770      	bx	lr
 8010d8c:	24000e98 	.word	0x24000e98

08010d90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8010d90:	4a02      	ldr	r2, [pc, #8]	@ (8010d9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8010d92:	4b03      	ldr	r3, [pc, #12]	@ (8010da0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8010d94:	6812      	ldr	r2, [r2, #0]
 8010d96:	601a      	str	r2, [r3, #0]
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop
 8010d9c:	24000e0c 	.word	0x24000e0c
 8010da0:	24000ec8 	.word	0x24000ec8

08010da4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8010da4:	4a02      	ldr	r2, [pc, #8]	@ (8010db0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 8010da6:	4b03      	ldr	r3, [pc, #12]	@ (8010db4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 8010da8:	6812      	ldr	r2, [r2, #0]
 8010daa:	601a      	str	r2, [r3, #0]
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	24000e0c 	.word	0x24000e0c
 8010db4:	24000edc 	.word	0x24000edc

08010db8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8010db8:	4a02      	ldr	r2, [pc, #8]	@ (8010dc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 8010dba:	4b03      	ldr	r3, [pc, #12]	@ (8010dc8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8010dbc:	6812      	ldr	r2, [r2, #0]
 8010dbe:	601a      	str	r2, [r3, #0]
 8010dc0:	4770      	bx	lr
 8010dc2:	bf00      	nop
 8010dc4:	24000e0c 	.word	0x24000e0c
 8010dc8:	24000ef0 	.word	0x24000ef0

08010dcc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8010dcc:	4a02      	ldr	r2, [pc, #8]	@ (8010dd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8010dce:	4b03      	ldr	r3, [pc, #12]	@ (8010ddc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8010dd0:	6812      	ldr	r2, [r2, #0]
 8010dd2:	601a      	str	r2, [r3, #0]
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop
 8010dd8:	24000e0c 	.word	0x24000e0c
 8010ddc:	24000f04 	.word	0x24000f04

08010de0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8010de0:	f000 bc0c 	b.w	80115fc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08010de4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8010de4:	f000 bc2e 	b.w	8011644 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08010de8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8010de8:	b510      	push	{r4, lr}
 8010dea:	4c08      	ldr	r4, [pc, #32]	@ (8010e0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8010dec:	f7ff ff24 	bl	8010c38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010df0:	60e0      	str	r0, [r4, #12]
 8010df2:	f000 fc93 	bl	801171c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8010df6:	4b06      	ldr	r3, [pc, #24]	@ (8010e10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8010df8:	64a0      	str	r0, [r4, #72]	@ 0x48
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	b10a      	cbz	r2, 8010e02 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 8010dfe:	4804      	ldr	r0, [pc, #16]	@ (8010e10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8010e00:	bd10      	pop	{r4, pc}
 8010e02:	4a04      	ldr	r2, [pc, #16]	@ (8010e14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 8010e04:	4802      	ldr	r0, [pc, #8]	@ (8010e10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8010e06:	6812      	ldr	r2, [r2, #0]
 8010e08:	601a      	str	r2, [r3, #0]
 8010e0a:	bd10      	pop	{r4, pc}
 8010e0c:	24000f10 	.word	0x24000f10
 8010e10:	24000f88 	.word	0x24000f88
 8010e14:	24000e10 	.word	0x24000e10

08010e18 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8010e18:	f000 bc20 	b.w	801165c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

08010e1c <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 8010e1c:	f000 bc42 	b.w	80116a4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08010e20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8010e20:	b510      	push	{r4, lr}
 8010e22:	4c08      	ldr	r4, [pc, #32]	@ (8010e44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8010e24:	f7ff ff08 	bl	8010c38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010e28:	60e0      	str	r0, [r4, #12]
 8010e2a:	f000 fc89 	bl	8011740 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8010e2e:	4b06      	ldr	r3, [pc, #24]	@ (8010e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8010e30:	64a0      	str	r0, [r4, #72]	@ 0x48
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	b10a      	cbz	r2, 8010e3a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 8010e36:	4804      	ldr	r0, [pc, #16]	@ (8010e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8010e38:	bd10      	pop	{r4, pc}
 8010e3a:	4a04      	ldr	r2, [pc, #16]	@ (8010e4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 8010e3c:	4802      	ldr	r0, [pc, #8]	@ (8010e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8010e3e:	6812      	ldr	r2, [r2, #0]
 8010e40:	601a      	str	r2, [r3, #0]
 8010e42:	bd10      	pop	{r4, pc}
 8010e44:	24000f94 	.word	0x24000f94
 8010e48:	2400100c 	.word	0x2400100c
 8010e4c:	24000e10 	.word	0x24000e10

08010e50 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 8010e50:	f000 bc34 	b.w	80116bc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

08010e54 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 8010e54:	f000 bc44 	b.w	80116e0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08010e58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8010e58:	b508      	push	{r3, lr}
 8010e5a:	f7fe fec3 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e5e:	4b06      	ldr	r3, [pc, #24]	@ (8010e78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8010e60:	4906      	ldr	r1, [pc, #24]	@ (8010e7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	60c8      	str	r0, [r1, #12]
 8010e66:	b10a      	cbz	r2, 8010e6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8010e68:	4803      	ldr	r0, [pc, #12]	@ (8010e78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8010e6a:	bd08      	pop	{r3, pc}
 8010e6c:	4a04      	ldr	r2, [pc, #16]	@ (8010e80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 8010e6e:	4802      	ldr	r0, [pc, #8]	@ (8010e78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8010e70:	6812      	ldr	r2, [r2, #0]
 8010e72:	601a      	str	r2, [r3, #0]
 8010e74:	bd08      	pop	{r3, pc}
 8010e76:	bf00      	nop
 8010e78:	24001090 	.word	0x24001090
 8010e7c:	24001018 	.word	0x24001018
 8010e80:	24000e10 	.word	0x24000e10

08010e84 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8010e84:	f000 bc30 	b.w	80116e8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08010e88 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8010e88:	f000 bc40 	b.w	801170c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08010e8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8010e8c:	b508      	push	{r3, lr}
 8010e8e:	f7fe fea9 	bl	800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e92:	4b06      	ldr	r3, [pc, #24]	@ (8010eac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8010e94:	4906      	ldr	r1, [pc, #24]	@ (8010eb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	60c8      	str	r0, [r1, #12]
 8010e9a:	b10a      	cbz	r2, 8010ea0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8010e9c:	4803      	ldr	r0, [pc, #12]	@ (8010eac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8010e9e:	bd08      	pop	{r3, pc}
 8010ea0:	4a04      	ldr	r2, [pc, #16]	@ (8010eb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8010ea2:	4802      	ldr	r0, [pc, #8]	@ (8010eac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8010ea4:	6812      	ldr	r2, [r2, #0]
 8010ea6:	601a      	str	r2, [r3, #0]
 8010ea8:	bd08      	pop	{r3, pc}
 8010eaa:	bf00      	nop
 8010eac:	24001114 	.word	0x24001114
 8010eb0:	2400109c 	.word	0x2400109c
 8010eb4:	24000e10 	.word	0x24000e10

08010eb8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	4604      	mov	r4, r0
 8010ebc:	b150      	cbz	r0, 8010ed4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8010ebe:	460d      	mov	r5, r1
 8010ec0:	f7ff fede 	bl	8010c80 <get_serialized_size_std_msgs__msg__Header>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	f104 0018 	add.w	r0, r4, #24
 8010eca:	461c      	mov	r4, r3
 8010ecc:	18e9      	adds	r1, r5, r3
 8010ece:	f000 fc45 	bl	801175c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8010ed2:	4420      	add	r0, r4
 8010ed4:	bd38      	pop	{r3, r4, r5, pc}
 8010ed6:	bf00      	nop

08010ed8 <_ActuationCommandStamped__cdr_deserialize>:
 8010ed8:	b570      	push	{r4, r5, r6, lr}
 8010eda:	460c      	mov	r4, r1
 8010edc:	b199      	cbz	r1, 8010f06 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8010ede:	4605      	mov	r5, r0
 8010ee0:	f7ff ff52 	bl	8010d88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	4621      	mov	r1, r4
 8010ee8:	4628      	mov	r0, r5
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	68db      	ldr	r3, [r3, #12]
 8010eee:	4798      	blx	r3
 8010ef0:	f000 fcbc 	bl	801186c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	f104 0118 	add.w	r1, r4, #24
 8010efa:	4628      	mov	r0, r5
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	4718      	bx	r3
 8010f06:	4608      	mov	r0, r1
 8010f08:	bd70      	pop	{r4, r5, r6, pc}
 8010f0a:	bf00      	nop

08010f0c <_ActuationCommandStamped__cdr_serialize>:
 8010f0c:	b510      	push	{r4, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	9101      	str	r1, [sp, #4]
 8010f12:	b1a0      	cbz	r0, 8010f3e <_ActuationCommandStamped__cdr_serialize+0x32>
 8010f14:	4604      	mov	r4, r0
 8010f16:	f7ff ff37 	bl	8010d88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	9901      	ldr	r1, [sp, #4]
 8010f1e:	4620      	mov	r0, r4
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	689b      	ldr	r3, [r3, #8]
 8010f24:	4798      	blx	r3
 8010f26:	f000 fca1 	bl	801186c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	9901      	ldr	r1, [sp, #4]
 8010f2e:	f104 0018 	add.w	r0, r4, #24
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	689b      	ldr	r3, [r3, #8]
 8010f36:	b002      	add	sp, #8
 8010f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f3c:	4718      	bx	r3
 8010f3e:	b002      	add	sp, #8
 8010f40:	bd10      	pop	{r4, pc}
 8010f42:	bf00      	nop

08010f44 <_ActuationCommandStamped__get_serialized_size>:
 8010f44:	b510      	push	{r4, lr}
 8010f46:	4604      	mov	r4, r0
 8010f48:	b148      	cbz	r0, 8010f5e <_ActuationCommandStamped__get_serialized_size+0x1a>
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	f7ff fe98 	bl	8010c80 <get_serialized_size_std_msgs__msg__Header>
 8010f50:	4601      	mov	r1, r0
 8010f52:	f104 0018 	add.w	r0, r4, #24
 8010f56:	460c      	mov	r4, r1
 8010f58:	f000 fc00 	bl	801175c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8010f5c:	4420      	add	r0, r4
 8010f5e:	bd10      	pop	{r4, pc}

08010f60 <_ActuationCommandStamped__max_serialized_size>:
 8010f60:	b510      	push	{r4, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	2301      	movs	r3, #1
 8010f66:	2100      	movs	r1, #0
 8010f68:	f10d 0007 	add.w	r0, sp, #7
 8010f6c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010f70:	f7ff ff00 	bl	8010d74 <max_serialized_size_std_msgs__msg__Header>
 8010f74:	4604      	mov	r4, r0
 8010f76:	f10d 0007 	add.w	r0, sp, #7
 8010f7a:	4621      	mov	r1, r4
 8010f7c:	f000 fc5c 	bl	8011838 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8010f80:	4420      	add	r0, r4
 8010f82:	b002      	add	sp, #8
 8010f84:	bd10      	pop	{r4, pc}
 8010f86:	bf00      	nop

08010f88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8010f88:	4800      	ldr	r0, [pc, #0]	@ (8010f8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8010f8a:	4770      	bx	lr
 8010f8c:	24001120 	.word	0x24001120

08010f90 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8010f90:	b538      	push	{r3, r4, r5, lr}
 8010f92:	4604      	mov	r4, r0
 8010f94:	b150      	cbz	r0, 8010fac <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8010f96:	460d      	mov	r5, r1
 8010f98:	f7ff fe72 	bl	8010c80 <get_serialized_size_std_msgs__msg__Header>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	f104 0018 	add.w	r0, r4, #24
 8010fa2:	461c      	mov	r4, r3
 8010fa4:	18e9      	adds	r1, r5, r3
 8010fa6:	f000 fc65 	bl	8011874 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8010faa:	4420      	add	r0, r4
 8010fac:	bd38      	pop	{r3, r4, r5, pc}
 8010fae:	bf00      	nop

08010fb0 <_ActuationStatusStamped__cdr_deserialize>:
 8010fb0:	b570      	push	{r4, r5, r6, lr}
 8010fb2:	460c      	mov	r4, r1
 8010fb4:	b199      	cbz	r1, 8010fde <_ActuationStatusStamped__cdr_deserialize+0x2e>
 8010fb6:	4605      	mov	r5, r0
 8010fb8:	f7ff fee6 	bl	8010d88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	4621      	mov	r1, r4
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	68db      	ldr	r3, [r3, #12]
 8010fc6:	4798      	blx	r3
 8010fc8:	f000 fcdc 	bl	8011984 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	f104 0118 	add.w	r1, r4, #24
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	4718      	bx	r3
 8010fde:	4608      	mov	r0, r1
 8010fe0:	bd70      	pop	{r4, r5, r6, pc}
 8010fe2:	bf00      	nop

08010fe4 <_ActuationStatusStamped__cdr_serialize>:
 8010fe4:	b510      	push	{r4, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	9101      	str	r1, [sp, #4]
 8010fea:	b1a0      	cbz	r0, 8011016 <_ActuationStatusStamped__cdr_serialize+0x32>
 8010fec:	4604      	mov	r4, r0
 8010fee:	f7ff fecb 	bl	8010d88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	9901      	ldr	r1, [sp, #4]
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	689b      	ldr	r3, [r3, #8]
 8010ffc:	4798      	blx	r3
 8010ffe:	f000 fcc1 	bl	8011984 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8011002:	4603      	mov	r3, r0
 8011004:	9901      	ldr	r1, [sp, #4]
 8011006:	f104 0018 	add.w	r0, r4, #24
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	b002      	add	sp, #8
 8011010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011014:	4718      	bx	r3
 8011016:	b002      	add	sp, #8
 8011018:	bd10      	pop	{r4, pc}
 801101a:	bf00      	nop

0801101c <_ActuationStatusStamped__get_serialized_size>:
 801101c:	b510      	push	{r4, lr}
 801101e:	4604      	mov	r4, r0
 8011020:	b148      	cbz	r0, 8011036 <_ActuationStatusStamped__get_serialized_size+0x1a>
 8011022:	2100      	movs	r1, #0
 8011024:	f7ff fe2c 	bl	8010c80 <get_serialized_size_std_msgs__msg__Header>
 8011028:	4601      	mov	r1, r0
 801102a:	f104 0018 	add.w	r0, r4, #24
 801102e:	460c      	mov	r4, r1
 8011030:	f000 fc20 	bl	8011874 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011034:	4420      	add	r0, r4
 8011036:	bd10      	pop	{r4, pc}

08011038 <_ActuationStatusStamped__max_serialized_size>:
 8011038:	b510      	push	{r4, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	2301      	movs	r3, #1
 801103e:	2100      	movs	r1, #0
 8011040:	f10d 0007 	add.w	r0, sp, #7
 8011044:	f88d 3007 	strb.w	r3, [sp, #7]
 8011048:	f7ff fe94 	bl	8010d74 <max_serialized_size_std_msgs__msg__Header>
 801104c:	4604      	mov	r4, r0
 801104e:	f10d 0007 	add.w	r0, sp, #7
 8011052:	4621      	mov	r1, r4
 8011054:	f000 fc7c 	bl	8011950 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011058:	4420      	add	r0, r4
 801105a:	b002      	add	sp, #8
 801105c:	bd10      	pop	{r4, pc}
 801105e:	bf00      	nop

08011060 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8011060:	4800      	ldr	r0, [pc, #0]	@ (8011064 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8011062:	4770      	bx	lr
 8011064:	24001148 	.word	0x24001148

08011068 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	b158      	cbz	r0, 8011084 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 801106c:	460d      	mov	r5, r1
 801106e:	f7fe fdc7 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 8011072:	2104      	movs	r1, #4
 8011074:	182c      	adds	r4, r5, r0
 8011076:	f1c5 0504 	rsb	r5, r5, #4
 801107a:	4620      	mov	r0, r4
 801107c:	f7ff fce6 	bl	8010a4c <ucdr_alignment>
 8011080:	4428      	add	r0, r5
 8011082:	4420      	add	r0, r4
 8011084:	bd38      	pop	{r3, r4, r5, pc}
 8011086:	bf00      	nop

08011088 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8011088:	b538      	push	{r3, r4, r5, lr}
 801108a:	460c      	mov	r4, r1
 801108c:	b179      	cbz	r1, 80110ae <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 801108e:	4605      	mov	r5, r0
 8011090:	f7fe fe1a 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011094:	4603      	mov	r3, r0
 8011096:	4621      	mov	r1, r4
 8011098:	4628      	mov	r0, r5
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	68db      	ldr	r3, [r3, #12]
 801109e:	4798      	blx	r3
 80110a0:	f104 0108 	add.w	r1, r4, #8
 80110a4:	4628      	mov	r0, r5
 80110a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110aa:	f7ff ba81 	b.w	80105b0 <ucdr_deserialize_float>
 80110ae:	4608      	mov	r0, r1
 80110b0:	bd38      	pop	{r3, r4, r5, pc}
 80110b2:	bf00      	nop

080110b4 <_SteeringWheelStatusStamped__cdr_serialize>:
 80110b4:	b188      	cbz	r0, 80110da <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 80110b6:	b538      	push	{r3, r4, r5, lr}
 80110b8:	4604      	mov	r4, r0
 80110ba:	460d      	mov	r5, r1
 80110bc:	f7fe fe04 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80110c0:	4603      	mov	r3, r0
 80110c2:	4629      	mov	r1, r5
 80110c4:	4620      	mov	r0, r4
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	4798      	blx	r3
 80110cc:	ed94 0a02 	vldr	s0, [r4, #8]
 80110d0:	4628      	mov	r0, r5
 80110d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110d6:	f7ff b9d3 	b.w	8010480 <ucdr_serialize_float>
 80110da:	4770      	bx	lr

080110dc <_SteeringWheelStatusStamped__get_serialized_size>:
 80110dc:	b150      	cbz	r0, 80110f4 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 80110de:	2100      	movs	r1, #0
 80110e0:	b510      	push	{r4, lr}
 80110e2:	f7fe fd8d 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 80110e6:	4604      	mov	r4, r0
 80110e8:	2104      	movs	r1, #4
 80110ea:	f7ff fcaf 	bl	8010a4c <ucdr_alignment>
 80110ee:	4420      	add	r0, r4
 80110f0:	3004      	adds	r0, #4
 80110f2:	bd10      	pop	{r4, pc}
 80110f4:	4770      	bx	lr
 80110f6:	bf00      	nop

080110f8 <_SteeringWheelStatusStamped__max_serialized_size>:
 80110f8:	b510      	push	{r4, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	2301      	movs	r3, #1
 80110fe:	2100      	movs	r1, #0
 8011100:	f10d 0007 	add.w	r0, sp, #7
 8011104:	f88d 3007 	strb.w	r3, [sp, #7]
 8011108:	f7fe fdca 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 801110c:	4604      	mov	r4, r0
 801110e:	2104      	movs	r1, #4
 8011110:	f7ff fc9c 	bl	8010a4c <ucdr_alignment>
 8011114:	4420      	add	r0, r4
 8011116:	3004      	adds	r0, #4
 8011118:	b002      	add	sp, #8
 801111a:	bd10      	pop	{r4, pc}

0801111c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 801111c:	4800      	ldr	r0, [pc, #0]	@ (8011120 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 801111e:	4770      	bx	lr
 8011120:	24001170 	.word	0x24001170

08011124 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8011124:	b538      	push	{r3, r4, r5, lr}
 8011126:	b158      	cbz	r0, 8011140 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8011128:	460d      	mov	r5, r1
 801112a:	f7fe fd69 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 801112e:	2101      	movs	r1, #1
 8011130:	182c      	adds	r4, r5, r0
 8011132:	f1c5 0501 	rsb	r5, r5, #1
 8011136:	4620      	mov	r0, r4
 8011138:	f7ff fc88 	bl	8010a4c <ucdr_alignment>
 801113c:	4428      	add	r0, r5
 801113e:	4420      	add	r0, r4
 8011140:	bd38      	pop	{r3, r4, r5, pc}
 8011142:	bf00      	nop

08011144 <_VehicleEmergencyStamped__cdr_deserialize>:
 8011144:	b538      	push	{r3, r4, r5, lr}
 8011146:	460c      	mov	r4, r1
 8011148:	b179      	cbz	r1, 801116a <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 801114a:	4605      	mov	r5, r0
 801114c:	f7fe fdbc 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011150:	4603      	mov	r3, r0
 8011152:	4621      	mov	r1, r4
 8011154:	4628      	mov	r0, r5
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	68db      	ldr	r3, [r3, #12]
 801115a:	4798      	blx	r3
 801115c:	f104 0108 	add.w	r1, r4, #8
 8011160:	4628      	mov	r0, r5
 8011162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011166:	f7fe bdc9 	b.w	800fcfc <ucdr_deserialize_bool>
 801116a:	4608      	mov	r0, r1
 801116c:	bd38      	pop	{r3, r4, r5, pc}
 801116e:	bf00      	nop

08011170 <_VehicleEmergencyStamped__cdr_serialize>:
 8011170:	b180      	cbz	r0, 8011194 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8011172:	b538      	push	{r3, r4, r5, lr}
 8011174:	4604      	mov	r4, r0
 8011176:	460d      	mov	r5, r1
 8011178:	f7fe fda6 	bl	800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801117c:	4603      	mov	r3, r0
 801117e:	4629      	mov	r1, r5
 8011180:	4620      	mov	r0, r4
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	689b      	ldr	r3, [r3, #8]
 8011186:	4798      	blx	r3
 8011188:	7a21      	ldrb	r1, [r4, #8]
 801118a:	4628      	mov	r0, r5
 801118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011190:	f7fe bd9e 	b.w	800fcd0 <ucdr_serialize_bool>
 8011194:	4770      	bx	lr
 8011196:	bf00      	nop

08011198 <_VehicleEmergencyStamped__get_serialized_size>:
 8011198:	b150      	cbz	r0, 80111b0 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 801119a:	2100      	movs	r1, #0
 801119c:	b510      	push	{r4, lr}
 801119e:	f7fe fd2f 	bl	800fc00 <get_serialized_size_builtin_interfaces__msg__Time>
 80111a2:	4604      	mov	r4, r0
 80111a4:	2101      	movs	r1, #1
 80111a6:	f7ff fc51 	bl	8010a4c <ucdr_alignment>
 80111aa:	4420      	add	r0, r4
 80111ac:	3001      	adds	r0, #1
 80111ae:	bd10      	pop	{r4, pc}
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop

080111b4 <_VehicleEmergencyStamped__max_serialized_size>:
 80111b4:	b510      	push	{r4, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	2401      	movs	r4, #1
 80111ba:	2100      	movs	r1, #0
 80111bc:	f10d 0007 	add.w	r0, sp, #7
 80111c0:	f88d 4007 	strb.w	r4, [sp, #7]
 80111c4:	f7fe fd6c 	bl	800fca0 <max_serialized_size_builtin_interfaces__msg__Time>
 80111c8:	4621      	mov	r1, r4
 80111ca:	4604      	mov	r4, r0
 80111cc:	f7ff fc3e 	bl	8010a4c <ucdr_alignment>
 80111d0:	4420      	add	r0, r4
 80111d2:	3001      	adds	r0, #1
 80111d4:	b002      	add	sp, #8
 80111d6:	bd10      	pop	{r4, pc}

080111d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80111d8:	4800      	ldr	r0, [pc, #0]	@ (80111dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 80111da:	4770      	bx	lr
 80111dc:	24001198 	.word	0x24001198

080111e0 <autoware_control_msgs__msg__Control__init>:
 80111e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111e4:	4605      	mov	r5, r0
 80111e6:	b3c0      	cbz	r0, 801125a <autoware_control_msgs__msg__Control__init+0x7a>
 80111e8:	f000 f9a6 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80111ec:	4604      	mov	r4, r0
 80111ee:	b310      	cbz	r0, 8011236 <autoware_control_msgs__msg__Control__init+0x56>
 80111f0:	f105 0608 	add.w	r6, r5, #8
 80111f4:	4630      	mov	r0, r6
 80111f6:	f000 f99f 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80111fa:	4604      	mov	r4, r0
 80111fc:	2800      	cmp	r0, #0
 80111fe:	d040      	beq.n	8011282 <autoware_control_msgs__msg__Control__init+0xa2>
 8011200:	f105 0710 	add.w	r7, r5, #16
 8011204:	4638      	mov	r0, r7
 8011206:	f000 f855 	bl	80112b4 <autoware_control_msgs__msg__Lateral__init>
 801120a:	4604      	mov	r4, r0
 801120c:	b348      	cbz	r0, 8011262 <autoware_control_msgs__msg__Control__init+0x82>
 801120e:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 8011212:	4640      	mov	r0, r8
 8011214:	f000 f87e 	bl	8011314 <autoware_control_msgs__msg__Longitudinal__init>
 8011218:	4604      	mov	r4, r0
 801121a:	b9d8      	cbnz	r0, 8011254 <autoware_control_msgs__msg__Control__init+0x74>
 801121c:	4628      	mov	r0, r5
 801121e:	f000 f98f 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011222:	4630      	mov	r0, r6
 8011224:	f000 f98c 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011228:	4638      	mov	r0, r7
 801122a:	f000 f867 	bl	80112fc <autoware_control_msgs__msg__Lateral__fini>
 801122e:	4640      	mov	r0, r8
 8011230:	f000 f894 	bl	801135c <autoware_control_msgs__msg__Longitudinal__fini>
 8011234:	e00e      	b.n	8011254 <autoware_control_msgs__msg__Control__init+0x74>
 8011236:	4628      	mov	r0, r5
 8011238:	f000 f982 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 801123c:	f105 0008 	add.w	r0, r5, #8
 8011240:	f000 f97e 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011244:	f105 0010 	add.w	r0, r5, #16
 8011248:	f000 f858 	bl	80112fc <autoware_control_msgs__msg__Lateral__fini>
 801124c:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8011250:	f000 f884 	bl	801135c <autoware_control_msgs__msg__Longitudinal__fini>
 8011254:	4620      	mov	r0, r4
 8011256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801125a:	4604      	mov	r4, r0
 801125c:	4620      	mov	r0, r4
 801125e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011262:	4628      	mov	r0, r5
 8011264:	f000 f96c 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011268:	4630      	mov	r0, r6
 801126a:	f000 f969 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 801126e:	4638      	mov	r0, r7
 8011270:	f000 f844 	bl	80112fc <autoware_control_msgs__msg__Lateral__fini>
 8011274:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8011278:	f000 f870 	bl	801135c <autoware_control_msgs__msg__Longitudinal__fini>
 801127c:	4620      	mov	r0, r4
 801127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011282:	4628      	mov	r0, r5
 8011284:	f000 f95c 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011288:	4630      	mov	r0, r6
 801128a:	e7d9      	b.n	8011240 <autoware_control_msgs__msg__Control__init+0x60>

0801128c <autoware_control_msgs__msg__Control__fini>:
 801128c:	b188      	cbz	r0, 80112b2 <autoware_control_msgs__msg__Control__fini+0x26>
 801128e:	b510      	push	{r4, lr}
 8011290:	4604      	mov	r4, r0
 8011292:	f000 f955 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011296:	f104 0008 	add.w	r0, r4, #8
 801129a:	f000 f951 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 801129e:	f104 0010 	add.w	r0, r4, #16
 80112a2:	f000 f82b 	bl	80112fc <autoware_control_msgs__msg__Lateral__fini>
 80112a6:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80112aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112ae:	f000 b855 	b.w	801135c <autoware_control_msgs__msg__Longitudinal__fini>
 80112b2:	4770      	bx	lr

080112b4 <autoware_control_msgs__msg__Lateral__init>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	4605      	mov	r5, r0
 80112b8:	b1a8      	cbz	r0, 80112e6 <autoware_control_msgs__msg__Lateral__init+0x32>
 80112ba:	f000 f93d 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80112be:	4604      	mov	r4, r0
 80112c0:	b140      	cbz	r0, 80112d4 <autoware_control_msgs__msg__Lateral__init+0x20>
 80112c2:	f105 0608 	add.w	r6, r5, #8
 80112c6:	4630      	mov	r0, r6
 80112c8:	f000 f936 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80112cc:	4604      	mov	r4, r0
 80112ce:	b168      	cbz	r0, 80112ec <autoware_control_msgs__msg__Lateral__init+0x38>
 80112d0:	4620      	mov	r0, r4
 80112d2:	bd70      	pop	{r4, r5, r6, pc}
 80112d4:	4628      	mov	r0, r5
 80112d6:	f000 f933 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80112da:	f105 0008 	add.w	r0, r5, #8
 80112de:	f000 f92f 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80112e2:	4620      	mov	r0, r4
 80112e4:	bd70      	pop	{r4, r5, r6, pc}
 80112e6:	4604      	mov	r4, r0
 80112e8:	4620      	mov	r0, r4
 80112ea:	bd70      	pop	{r4, r5, r6, pc}
 80112ec:	4628      	mov	r0, r5
 80112ee:	f000 f927 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80112f2:	4630      	mov	r0, r6
 80112f4:	f000 f924 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80112f8:	e7ea      	b.n	80112d0 <autoware_control_msgs__msg__Lateral__init+0x1c>
 80112fa:	bf00      	nop

080112fc <autoware_control_msgs__msg__Lateral__fini>:
 80112fc:	b148      	cbz	r0, 8011312 <autoware_control_msgs__msg__Lateral__fini+0x16>
 80112fe:	b510      	push	{r4, lr}
 8011300:	4604      	mov	r4, r0
 8011302:	f000 f91d 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011306:	f104 0008 	add.w	r0, r4, #8
 801130a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801130e:	f000 b917 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 8011312:	4770      	bx	lr

08011314 <autoware_control_msgs__msg__Longitudinal__init>:
 8011314:	b570      	push	{r4, r5, r6, lr}
 8011316:	4605      	mov	r5, r0
 8011318:	b1a8      	cbz	r0, 8011346 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 801131a:	f000 f90d 	bl	8011538 <builtin_interfaces__msg__Time__init>
 801131e:	4604      	mov	r4, r0
 8011320:	b140      	cbz	r0, 8011334 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 8011322:	f105 0608 	add.w	r6, r5, #8
 8011326:	4630      	mov	r0, r6
 8011328:	f000 f906 	bl	8011538 <builtin_interfaces__msg__Time__init>
 801132c:	4604      	mov	r4, r0
 801132e:	b168      	cbz	r0, 801134c <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8011330:	4620      	mov	r0, r4
 8011332:	bd70      	pop	{r4, r5, r6, pc}
 8011334:	4628      	mov	r0, r5
 8011336:	f000 f903 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 801133a:	f105 0008 	add.w	r0, r5, #8
 801133e:	f000 f8ff 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011342:	4620      	mov	r0, r4
 8011344:	bd70      	pop	{r4, r5, r6, pc}
 8011346:	4604      	mov	r4, r0
 8011348:	4620      	mov	r0, r4
 801134a:	bd70      	pop	{r4, r5, r6, pc}
 801134c:	4628      	mov	r0, r5
 801134e:	f000 f8f7 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011352:	4630      	mov	r0, r6
 8011354:	f000 f8f4 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011358:	e7ea      	b.n	8011330 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 801135a:	bf00      	nop

0801135c <autoware_control_msgs__msg__Longitudinal__fini>:
 801135c:	b148      	cbz	r0, 8011372 <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 801135e:	b510      	push	{r4, lr}
 8011360:	4604      	mov	r4, r0
 8011362:	f000 f8ed 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011366:	f104 0008 	add.w	r0, r4, #8
 801136a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801136e:	f000 b8e7 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 8011372:	4770      	bx	lr

08011374 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8011374:	b538      	push	{r3, r4, r5, lr}
 8011376:	4604      	mov	r4, r0
 8011378:	b128      	cbz	r0, 8011386 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 801137a:	f000 f8dd 	bl	8011538 <builtin_interfaces__msg__Time__init>
 801137e:	4605      	mov	r5, r0
 8011380:	b120      	cbz	r0, 801138c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8011382:	4628      	mov	r0, r5
 8011384:	bd38      	pop	{r3, r4, r5, pc}
 8011386:	4605      	mov	r5, r0
 8011388:	4628      	mov	r0, r5
 801138a:	bd38      	pop	{r3, r4, r5, pc}
 801138c:	4620      	mov	r0, r4
 801138e:	f000 f8d7 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011392:	4628      	mov	r0, r5
 8011394:	bd38      	pop	{r3, r4, r5, pc}
 8011396:	bf00      	nop

08011398 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8011398:	b108      	cbz	r0, 801139e <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 801139a:	f000 b8d1 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 801139e:	4770      	bx	lr

080113a0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 80113a0:	3800      	subs	r0, #0
 80113a2:	bf18      	it	ne
 80113a4:	2001      	movne	r0, #1
 80113a6:	4770      	bx	lr

080113a8 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 80113a8:	4770      	bx	lr
 80113aa:	bf00      	nop

080113ac <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 80113ac:	b538      	push	{r3, r4, r5, lr}
 80113ae:	4604      	mov	r4, r0
 80113b0:	b128      	cbz	r0, 80113be <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 80113b2:	f000 f8c1 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80113b6:	4605      	mov	r5, r0
 80113b8:	b120      	cbz	r0, 80113c4 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 80113ba:	4628      	mov	r0, r5
 80113bc:	bd38      	pop	{r3, r4, r5, pc}
 80113be:	4605      	mov	r5, r0
 80113c0:	4628      	mov	r0, r5
 80113c2:	bd38      	pop	{r3, r4, r5, pc}
 80113c4:	4620      	mov	r0, r4
 80113c6:	f000 f8bb 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80113ca:	4628      	mov	r0, r5
 80113cc:	bd38      	pop	{r3, r4, r5, pc}
 80113ce:	bf00      	nop

080113d0 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 80113d0:	b108      	cbz	r0, 80113d6 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 80113d2:	f000 b8b5 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 80113d6:	4770      	bx	lr

080113d8 <autoware_vehicle_msgs__msg__GearCommand__init>:
 80113d8:	b538      	push	{r3, r4, r5, lr}
 80113da:	4604      	mov	r4, r0
 80113dc:	b128      	cbz	r0, 80113ea <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 80113de:	f000 f8ab 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80113e2:	4605      	mov	r5, r0
 80113e4:	b120      	cbz	r0, 80113f0 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 80113e6:	4628      	mov	r0, r5
 80113e8:	bd38      	pop	{r3, r4, r5, pc}
 80113ea:	4605      	mov	r5, r0
 80113ec:	4628      	mov	r0, r5
 80113ee:	bd38      	pop	{r3, r4, r5, pc}
 80113f0:	4620      	mov	r0, r4
 80113f2:	f000 f8a5 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80113f6:	4628      	mov	r0, r5
 80113f8:	bd38      	pop	{r3, r4, r5, pc}
 80113fa:	bf00      	nop

080113fc <autoware_vehicle_msgs__msg__GearCommand__fini>:
 80113fc:	b108      	cbz	r0, 8011402 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 80113fe:	f000 b89f 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 8011402:	4770      	bx	lr

08011404 <autoware_vehicle_msgs__msg__GearReport__init>:
 8011404:	b538      	push	{r3, r4, r5, lr}
 8011406:	4604      	mov	r4, r0
 8011408:	b128      	cbz	r0, 8011416 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 801140a:	f000 f895 	bl	8011538 <builtin_interfaces__msg__Time__init>
 801140e:	4605      	mov	r5, r0
 8011410:	b120      	cbz	r0, 801141c <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 8011412:	4628      	mov	r0, r5
 8011414:	bd38      	pop	{r3, r4, r5, pc}
 8011416:	4605      	mov	r5, r0
 8011418:	4628      	mov	r0, r5
 801141a:	bd38      	pop	{r3, r4, r5, pc}
 801141c:	4620      	mov	r0, r4
 801141e:	f000 f88f 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011422:	4628      	mov	r0, r5
 8011424:	bd38      	pop	{r3, r4, r5, pc}
 8011426:	bf00      	nop

08011428 <autoware_vehicle_msgs__msg__GearReport__fini>:
 8011428:	b108      	cbz	r0, 801142e <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 801142a:	f000 b889 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 801142e:	4770      	bx	lr

08011430 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 8011430:	b538      	push	{r3, r4, r5, lr}
 8011432:	4604      	mov	r4, r0
 8011434:	b128      	cbz	r0, 8011442 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 8011436:	f000 f87f 	bl	8011538 <builtin_interfaces__msg__Time__init>
 801143a:	4605      	mov	r5, r0
 801143c:	b120      	cbz	r0, 8011448 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 801143e:	4628      	mov	r0, r5
 8011440:	bd38      	pop	{r3, r4, r5, pc}
 8011442:	4605      	mov	r5, r0
 8011444:	4628      	mov	r0, r5
 8011446:	bd38      	pop	{r3, r4, r5, pc}
 8011448:	4620      	mov	r0, r4
 801144a:	f000 f879 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 801144e:	4628      	mov	r0, r5
 8011450:	bd38      	pop	{r3, r4, r5, pc}
 8011452:	bf00      	nop

08011454 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8011454:	b108      	cbz	r0, 801145a <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8011456:	f000 b873 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 801145a:	4770      	bx	lr

0801145c <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 801145c:	b538      	push	{r3, r4, r5, lr}
 801145e:	4604      	mov	r4, r0
 8011460:	b128      	cbz	r0, 801146e <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 8011462:	f000 f869 	bl	8011538 <builtin_interfaces__msg__Time__init>
 8011466:	4605      	mov	r5, r0
 8011468:	b120      	cbz	r0, 8011474 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 801146a:	4628      	mov	r0, r5
 801146c:	bd38      	pop	{r3, r4, r5, pc}
 801146e:	4605      	mov	r5, r0
 8011470:	4628      	mov	r0, r5
 8011472:	bd38      	pop	{r3, r4, r5, pc}
 8011474:	4620      	mov	r0, r4
 8011476:	f000 f863 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 801147a:	4628      	mov	r0, r5
 801147c:	bd38      	pop	{r3, r4, r5, pc}
 801147e:	bf00      	nop

08011480 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8011480:	b108      	cbz	r0, 8011486 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8011482:	f000 b85d 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 8011486:	4770      	bx	lr

08011488 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8011488:	b538      	push	{r3, r4, r5, lr}
 801148a:	4604      	mov	r4, r0
 801148c:	b128      	cbz	r0, 801149a <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 801148e:	f000 f853 	bl	8011538 <builtin_interfaces__msg__Time__init>
 8011492:	4605      	mov	r5, r0
 8011494:	b120      	cbz	r0, 80114a0 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8011496:	4628      	mov	r0, r5
 8011498:	bd38      	pop	{r3, r4, r5, pc}
 801149a:	4605      	mov	r5, r0
 801149c:	4628      	mov	r0, r5
 801149e:	bd38      	pop	{r3, r4, r5, pc}
 80114a0:	4620      	mov	r0, r4
 80114a2:	f000 f84d 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80114a6:	4628      	mov	r0, r5
 80114a8:	bd38      	pop	{r3, r4, r5, pc}
 80114aa:	bf00      	nop

080114ac <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 80114ac:	b108      	cbz	r0, 80114b2 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 80114ae:	f000 b847 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 80114b2:	4770      	bx	lr

080114b4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 80114b4:	b538      	push	{r3, r4, r5, lr}
 80114b6:	4604      	mov	r4, r0
 80114b8:	b128      	cbz	r0, 80114c6 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 80114ba:	f000 f83d 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80114be:	4605      	mov	r5, r0
 80114c0:	b120      	cbz	r0, 80114cc <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 80114c2:	4628      	mov	r0, r5
 80114c4:	bd38      	pop	{r3, r4, r5, pc}
 80114c6:	4605      	mov	r5, r0
 80114c8:	4628      	mov	r0, r5
 80114ca:	bd38      	pop	{r3, r4, r5, pc}
 80114cc:	4620      	mov	r0, r4
 80114ce:	f000 f837 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80114d2:	4628      	mov	r0, r5
 80114d4:	bd38      	pop	{r3, r4, r5, pc}
 80114d6:	bf00      	nop

080114d8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 80114d8:	b108      	cbz	r0, 80114de <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 80114da:	f000 b831 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 80114de:	4770      	bx	lr

080114e0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 80114e0:	b538      	push	{r3, r4, r5, lr}
 80114e2:	4604      	mov	r4, r0
 80114e4:	b128      	cbz	r0, 80114f2 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 80114e6:	f000 f827 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80114ea:	4605      	mov	r5, r0
 80114ec:	b120      	cbz	r0, 80114f8 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 80114ee:	4628      	mov	r0, r5
 80114f0:	bd38      	pop	{r3, r4, r5, pc}
 80114f2:	4605      	mov	r5, r0
 80114f4:	4628      	mov	r0, r5
 80114f6:	bd38      	pop	{r3, r4, r5, pc}
 80114f8:	4620      	mov	r0, r4
 80114fa:	f000 f821 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80114fe:	4628      	mov	r0, r5
 8011500:	bd38      	pop	{r3, r4, r5, pc}
 8011502:	bf00      	nop

08011504 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8011504:	b108      	cbz	r0, 801150a <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8011506:	f000 b81b 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 801150a:	4770      	bx	lr

0801150c <autoware_vehicle_msgs__msg__VelocityReport__init>:
 801150c:	b538      	push	{r3, r4, r5, lr}
 801150e:	4604      	mov	r4, r0
 8011510:	b128      	cbz	r0, 801151e <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 8011512:	f000 f843 	bl	801159c <std_msgs__msg__Header__init>
 8011516:	4605      	mov	r5, r0
 8011518:	b120      	cbz	r0, 8011524 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 801151a:	4628      	mov	r0, r5
 801151c:	bd38      	pop	{r3, r4, r5, pc}
 801151e:	4605      	mov	r5, r0
 8011520:	4628      	mov	r0, r5
 8011522:	bd38      	pop	{r3, r4, r5, pc}
 8011524:	4620      	mov	r0, r4
 8011526:	f000 f85d 	bl	80115e4 <std_msgs__msg__Header__fini>
 801152a:	4628      	mov	r0, r5
 801152c:	bd38      	pop	{r3, r4, r5, pc}
 801152e:	bf00      	nop

08011530 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 8011530:	b108      	cbz	r0, 8011536 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8011532:	f000 b857 	b.w	80115e4 <std_msgs__msg__Header__fini>
 8011536:	4770      	bx	lr

08011538 <builtin_interfaces__msg__Time__init>:
 8011538:	3800      	subs	r0, #0
 801153a:	bf18      	it	ne
 801153c:	2001      	movne	r0, #1
 801153e:	4770      	bx	lr

08011540 <builtin_interfaces__msg__Time__fini>:
 8011540:	4770      	bx	lr
 8011542:	bf00      	nop

08011544 <ucdr_serialize_sequence_char>:
 8011544:	b570      	push	{r4, r5, r6, lr}
 8011546:	4615      	mov	r5, r2
 8011548:	460e      	mov	r6, r1
 801154a:	7d01      	ldrb	r1, [r0, #20]
 801154c:	4604      	mov	r4, r0
 801154e:	f7fe fcb1 	bl	800feb4 <ucdr_serialize_endian_uint32_t>
 8011552:	b90d      	cbnz	r5, 8011558 <ucdr_serialize_sequence_char+0x14>
 8011554:	2001      	movs	r0, #1
 8011556:	bd70      	pop	{r4, r5, r6, pc}
 8011558:	462b      	mov	r3, r5
 801155a:	4632      	mov	r2, r6
 801155c:	7d21      	ldrb	r1, [r4, #20]
 801155e:	4620      	mov	r0, r4
 8011560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011564:	f000 ba12 	b.w	801198c <ucdr_serialize_endian_array_char>

08011568 <ucdr_deserialize_sequence_char>:
 8011568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801156c:	461d      	mov	r5, r3
 801156e:	4616      	mov	r6, r2
 8011570:	460f      	mov	r7, r1
 8011572:	461a      	mov	r2, r3
 8011574:	7d01      	ldrb	r1, [r0, #20]
 8011576:	4604      	mov	r4, r0
 8011578:	f7fe fdc4 	bl	8010104 <ucdr_deserialize_endian_uint32_t>
 801157c:	682b      	ldr	r3, [r5, #0]
 801157e:	429e      	cmp	r6, r3
 8011580:	d201      	bcs.n	8011586 <ucdr_deserialize_sequence_char+0x1e>
 8011582:	2201      	movs	r2, #1
 8011584:	75a2      	strb	r2, [r4, #22]
 8011586:	b913      	cbnz	r3, 801158e <ucdr_deserialize_sequence_char+0x26>
 8011588:	2001      	movs	r0, #1
 801158a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801158e:	463a      	mov	r2, r7
 8011590:	7d21      	ldrb	r1, [r4, #20]
 8011592:	4620      	mov	r0, r4
 8011594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011598:	f000 ba2a 	b.w	80119f0 <ucdr_deserialize_endian_array_char>

0801159c <std_msgs__msg__Header__init>:
 801159c:	b570      	push	{r4, r5, r6, lr}
 801159e:	4605      	mov	r5, r0
 80115a0:	b1a8      	cbz	r0, 80115ce <std_msgs__msg__Header__init+0x32>
 80115a2:	f7ff ffc9 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80115a6:	4604      	mov	r4, r0
 80115a8:	b140      	cbz	r0, 80115bc <std_msgs__msg__Header__init+0x20>
 80115aa:	f105 0608 	add.w	r6, r5, #8
 80115ae:	4630      	mov	r0, r6
 80115b0:	f000 fa52 	bl	8011a58 <rosidl_runtime_c__String__init>
 80115b4:	4604      	mov	r4, r0
 80115b6:	b168      	cbz	r0, 80115d4 <std_msgs__msg__Header__init+0x38>
 80115b8:	4620      	mov	r0, r4
 80115ba:	bd70      	pop	{r4, r5, r6, pc}
 80115bc:	4628      	mov	r0, r5
 80115be:	f7ff ffbf 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80115c2:	f105 0008 	add.w	r0, r5, #8
 80115c6:	f000 fa5d 	bl	8011a84 <rosidl_runtime_c__String__fini>
 80115ca:	4620      	mov	r0, r4
 80115cc:	bd70      	pop	{r4, r5, r6, pc}
 80115ce:	4604      	mov	r4, r0
 80115d0:	4620      	mov	r0, r4
 80115d2:	bd70      	pop	{r4, r5, r6, pc}
 80115d4:	4628      	mov	r0, r5
 80115d6:	f7ff ffb3 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80115da:	4630      	mov	r0, r6
 80115dc:	f000 fa52 	bl	8011a84 <rosidl_runtime_c__String__fini>
 80115e0:	e7ea      	b.n	80115b8 <std_msgs__msg__Header__init+0x1c>
 80115e2:	bf00      	nop

080115e4 <std_msgs__msg__Header__fini>:
 80115e4:	b148      	cbz	r0, 80115fa <std_msgs__msg__Header__fini+0x16>
 80115e6:	b510      	push	{r4, lr}
 80115e8:	4604      	mov	r4, r0
 80115ea:	f7ff ffa9 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80115ee:	f104 0008 	add.w	r0, r4, #8
 80115f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115f6:	f000 ba45 	b.w	8011a84 <rosidl_runtime_c__String__fini>
 80115fa:	4770      	bx	lr

080115fc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 80115fc:	b570      	push	{r4, r5, r6, lr}
 80115fe:	4605      	mov	r5, r0
 8011600:	b1a8      	cbz	r0, 801162e <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 8011602:	f7ff ffcb 	bl	801159c <std_msgs__msg__Header__init>
 8011606:	4604      	mov	r4, r0
 8011608:	b140      	cbz	r0, 801161c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801160a:	f105 0618 	add.w	r6, r5, #24
 801160e:	4630      	mov	r0, r6
 8011610:	f000 fa80 	bl	8011b14 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 8011614:	4604      	mov	r4, r0
 8011616:	b168      	cbz	r0, 8011634 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 8011618:	4620      	mov	r0, r4
 801161a:	bd70      	pop	{r4, r5, r6, pc}
 801161c:	4628      	mov	r0, r5
 801161e:	f7ff ffe1 	bl	80115e4 <std_msgs__msg__Header__fini>
 8011622:	f105 0018 	add.w	r0, r5, #24
 8011626:	f000 fa79 	bl	8011b1c <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801162a:	4620      	mov	r0, r4
 801162c:	bd70      	pop	{r4, r5, r6, pc}
 801162e:	4604      	mov	r4, r0
 8011630:	4620      	mov	r0, r4
 8011632:	bd70      	pop	{r4, r5, r6, pc}
 8011634:	4628      	mov	r0, r5
 8011636:	f7ff ffd5 	bl	80115e4 <std_msgs__msg__Header__fini>
 801163a:	4630      	mov	r0, r6
 801163c:	f000 fa6e 	bl	8011b1c <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8011640:	e7ea      	b.n	8011618 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8011642:	bf00      	nop

08011644 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8011644:	b148      	cbz	r0, 801165a <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8011646:	b510      	push	{r4, lr}
 8011648:	4604      	mov	r4, r0
 801164a:	f7ff ffcb 	bl	80115e4 <std_msgs__msg__Header__fini>
 801164e:	f104 0018 	add.w	r0, r4, #24
 8011652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011656:	f000 ba61 	b.w	8011b1c <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801165a:	4770      	bx	lr

0801165c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801165c:	b570      	push	{r4, r5, r6, lr}
 801165e:	4605      	mov	r5, r0
 8011660:	b1a8      	cbz	r0, 801168e <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 8011662:	f7ff ff9b 	bl	801159c <std_msgs__msg__Header__init>
 8011666:	4604      	mov	r4, r0
 8011668:	b140      	cbz	r0, 801167c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801166a:	f105 0618 	add.w	r6, r5, #24
 801166e:	4630      	mov	r0, r6
 8011670:	f000 fa56 	bl	8011b20 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8011674:	4604      	mov	r4, r0
 8011676:	b168      	cbz	r0, 8011694 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8011678:	4620      	mov	r0, r4
 801167a:	bd70      	pop	{r4, r5, r6, pc}
 801167c:	4628      	mov	r0, r5
 801167e:	f7ff ffb1 	bl	80115e4 <std_msgs__msg__Header__fini>
 8011682:	f105 0018 	add.w	r0, r5, #24
 8011686:	f000 fa4f 	bl	8011b28 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801168a:	4620      	mov	r0, r4
 801168c:	bd70      	pop	{r4, r5, r6, pc}
 801168e:	4604      	mov	r4, r0
 8011690:	4620      	mov	r0, r4
 8011692:	bd70      	pop	{r4, r5, r6, pc}
 8011694:	4628      	mov	r0, r5
 8011696:	f7ff ffa5 	bl	80115e4 <std_msgs__msg__Header__fini>
 801169a:	4630      	mov	r0, r6
 801169c:	f000 fa44 	bl	8011b28 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 80116a0:	e7ea      	b.n	8011678 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 80116a2:	bf00      	nop

080116a4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 80116a4:	b148      	cbz	r0, 80116ba <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 80116a6:	b510      	push	{r4, lr}
 80116a8:	4604      	mov	r4, r0
 80116aa:	f7ff ff9b 	bl	80115e4 <std_msgs__msg__Header__fini>
 80116ae:	f104 0018 	add.w	r0, r4, #24
 80116b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116b6:	f000 ba37 	b.w	8011b28 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 80116ba:	4770      	bx	lr

080116bc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 80116bc:	b538      	push	{r3, r4, r5, lr}
 80116be:	4604      	mov	r4, r0
 80116c0:	b128      	cbz	r0, 80116ce <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 80116c2:	f7ff ff39 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80116c6:	4605      	mov	r5, r0
 80116c8:	b120      	cbz	r0, 80116d4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 80116ca:	4628      	mov	r0, r5
 80116cc:	bd38      	pop	{r3, r4, r5, pc}
 80116ce:	4605      	mov	r5, r0
 80116d0:	4628      	mov	r0, r5
 80116d2:	bd38      	pop	{r3, r4, r5, pc}
 80116d4:	4620      	mov	r0, r4
 80116d6:	f7ff ff33 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 80116da:	4628      	mov	r0, r5
 80116dc:	bd38      	pop	{r3, r4, r5, pc}
 80116de:	bf00      	nop

080116e0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 80116e0:	b108      	cbz	r0, 80116e6 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 80116e2:	f7ff bf2d 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 80116e6:	4770      	bx	lr

080116e8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 80116e8:	b538      	push	{r3, r4, r5, lr}
 80116ea:	4604      	mov	r4, r0
 80116ec:	b128      	cbz	r0, 80116fa <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 80116ee:	f7ff ff23 	bl	8011538 <builtin_interfaces__msg__Time__init>
 80116f2:	4605      	mov	r5, r0
 80116f4:	b120      	cbz	r0, 8011700 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 80116f6:	4628      	mov	r0, r5
 80116f8:	bd38      	pop	{r3, r4, r5, pc}
 80116fa:	4605      	mov	r5, r0
 80116fc:	4628      	mov	r0, r5
 80116fe:	bd38      	pop	{r3, r4, r5, pc}
 8011700:	4620      	mov	r0, r4
 8011702:	f7ff ff1d 	bl	8011540 <builtin_interfaces__msg__Time__fini>
 8011706:	4628      	mov	r0, r5
 8011708:	bd38      	pop	{r3, r4, r5, pc}
 801170a:	bf00      	nop

0801170c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801170c:	b108      	cbz	r0, 8011712 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801170e:	f7ff bf17 	b.w	8011540 <builtin_interfaces__msg__Time__fini>
 8011712:	4770      	bx	lr

08011714 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 8011714:	f000 b9fe 	b.w	8011b14 <tier4_vehicle_msgs__msg__ActuationCommand__init>

08011718 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 8011718:	f000 ba00 	b.w	8011b1c <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801171c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801171c:	4b04      	ldr	r3, [pc, #16]	@ (8011730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801171e:	681a      	ldr	r2, [r3, #0]
 8011720:	b10a      	cbz	r2, 8011726 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 8011722:	4803      	ldr	r0, [pc, #12]	@ (8011730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8011724:	4770      	bx	lr
 8011726:	4a03      	ldr	r2, [pc, #12]	@ (8011734 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 8011728:	4801      	ldr	r0, [pc, #4]	@ (8011730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801172a:	6812      	ldr	r2, [r2, #0]
 801172c:	601a      	str	r2, [r3, #0]
 801172e:	4770      	bx	lr
 8011730:	24001274 	.word	0x24001274
 8011734:	24000e10 	.word	0x24000e10

08011738 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 8011738:	f000 b9f2 	b.w	8011b20 <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801173c <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801173c:	f000 b9f4 	b.w	8011b28 <tier4_vehicle_msgs__msg__ActuationStatus__fini>

08011740 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8011740:	4b04      	ldr	r3, [pc, #16]	@ (8011754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	b10a      	cbz	r2, 801174a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 8011746:	4803      	ldr	r0, [pc, #12]	@ (8011754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8011748:	4770      	bx	lr
 801174a:	4a03      	ldr	r2, [pc, #12]	@ (8011758 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801174c:	4801      	ldr	r0, [pc, #4]	@ (8011754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801174e:	6812      	ldr	r2, [r2, #0]
 8011750:	601a      	str	r2, [r3, #0]
 8011752:	4770      	bx	lr
 8011754:	24001334 	.word	0x24001334
 8011758:	24000e10 	.word	0x24000e10

0801175c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801175c:	b1b8      	cbz	r0, 801178e <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801175e:	b538      	push	{r3, r4, r5, lr}
 8011760:	460d      	mov	r5, r1
 8011762:	2108      	movs	r1, #8
 8011764:	4628      	mov	r0, r5
 8011766:	f7ff f971 	bl	8010a4c <ucdr_alignment>
 801176a:	f105 0308 	add.w	r3, r5, #8
 801176e:	2108      	movs	r1, #8
 8011770:	f1c5 0508 	rsb	r5, r5, #8
 8011774:	181c      	adds	r4, r3, r0
 8011776:	4620      	mov	r0, r4
 8011778:	f7ff f968 	bl	8010a4c <ucdr_alignment>
 801177c:	2108      	movs	r1, #8
 801177e:	4408      	add	r0, r1
 8011780:	4404      	add	r4, r0
 8011782:	4620      	mov	r0, r4
 8011784:	f7ff f962 	bl	8010a4c <ucdr_alignment>
 8011788:	4428      	add	r0, r5
 801178a:	4420      	add	r0, r4
 801178c:	bd38      	pop	{r3, r4, r5, pc}
 801178e:	4770      	bx	lr

08011790 <_ActuationCommand__cdr_deserialize>:
 8011790:	b538      	push	{r3, r4, r5, lr}
 8011792:	460c      	mov	r4, r1
 8011794:	b171      	cbz	r1, 80117b4 <_ActuationCommand__cdr_deserialize+0x24>
 8011796:	4605      	mov	r5, r0
 8011798:	f7ff f86a 	bl	8010870 <ucdr_deserialize_double>
 801179c:	f104 0108 	add.w	r1, r4, #8
 80117a0:	4628      	mov	r0, r5
 80117a2:	f7ff f865 	bl	8010870 <ucdr_deserialize_double>
 80117a6:	f104 0110 	add.w	r1, r4, #16
 80117aa:	4628      	mov	r0, r5
 80117ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117b0:	f7ff b85e 	b.w	8010870 <ucdr_deserialize_double>
 80117b4:	4608      	mov	r0, r1
 80117b6:	bd38      	pop	{r3, r4, r5, pc}

080117b8 <_ActuationCommand__cdr_serialize>:
 80117b8:	b198      	cbz	r0, 80117e2 <_ActuationCommand__cdr_serialize+0x2a>
 80117ba:	b538      	push	{r3, r4, r5, lr}
 80117bc:	460d      	mov	r5, r1
 80117be:	4604      	mov	r4, r0
 80117c0:	ed90 0b00 	vldr	d0, [r0]
 80117c4:	4608      	mov	r0, r1
 80117c6:	f7fe ff83 	bl	80106d0 <ucdr_serialize_double>
 80117ca:	4628      	mov	r0, r5
 80117cc:	ed94 0b02 	vldr	d0, [r4, #8]
 80117d0:	f7fe ff7e 	bl	80106d0 <ucdr_serialize_double>
 80117d4:	4628      	mov	r0, r5
 80117d6:	ed94 0b04 	vldr	d0, [r4, #16]
 80117da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117de:	f7fe bf77 	b.w	80106d0 <ucdr_serialize_double>
 80117e2:	4770      	bx	lr

080117e4 <_ActuationCommand__get_serialized_size>:
 80117e4:	b190      	cbz	r0, 801180c <_ActuationCommand__get_serialized_size+0x28>
 80117e6:	2108      	movs	r1, #8
 80117e8:	2000      	movs	r0, #0
 80117ea:	b510      	push	{r4, lr}
 80117ec:	f7ff f92e 	bl	8010a4c <ucdr_alignment>
 80117f0:	2108      	movs	r1, #8
 80117f2:	1844      	adds	r4, r0, r1
 80117f4:	4620      	mov	r0, r4
 80117f6:	f7ff f929 	bl	8010a4c <ucdr_alignment>
 80117fa:	2108      	movs	r1, #8
 80117fc:	4408      	add	r0, r1
 80117fe:	4404      	add	r4, r0
 8011800:	4620      	mov	r0, r4
 8011802:	f7ff f923 	bl	8010a4c <ucdr_alignment>
 8011806:	3008      	adds	r0, #8
 8011808:	4420      	add	r0, r4
 801180a:	bd10      	pop	{r4, pc}
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop

08011810 <_ActuationCommand__max_serialized_size>:
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	2108      	movs	r1, #8
 8011814:	2000      	movs	r0, #0
 8011816:	f7ff f919 	bl	8010a4c <ucdr_alignment>
 801181a:	2108      	movs	r1, #8
 801181c:	1845      	adds	r5, r0, r1
 801181e:	4628      	mov	r0, r5
 8011820:	f7ff f914 	bl	8010a4c <ucdr_alignment>
 8011824:	2108      	movs	r1, #8
 8011826:	1844      	adds	r4, r0, r1
 8011828:	442c      	add	r4, r5
 801182a:	4620      	mov	r0, r4
 801182c:	f7ff f90e 	bl	8010a4c <ucdr_alignment>
 8011830:	3008      	adds	r0, #8
 8011832:	4420      	add	r0, r4
 8011834:	bd38      	pop	{r3, r4, r5, pc}
 8011836:	bf00      	nop

08011838 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8011838:	b570      	push	{r4, r5, r6, lr}
 801183a:	460c      	mov	r4, r1
 801183c:	2301      	movs	r3, #1
 801183e:	2108      	movs	r1, #8
 8011840:	f104 0508 	add.w	r5, r4, #8
 8011844:	7003      	strb	r3, [r0, #0]
 8011846:	4620      	mov	r0, r4
 8011848:	f1c4 0408 	rsb	r4, r4, #8
 801184c:	f7ff f8fe 	bl	8010a4c <ucdr_alignment>
 8011850:	1946      	adds	r6, r0, r5
 8011852:	2108      	movs	r1, #8
 8011854:	4630      	mov	r0, r6
 8011856:	f7ff f8f9 	bl	8010a4c <ucdr_alignment>
 801185a:	2108      	movs	r1, #8
 801185c:	1845      	adds	r5, r0, r1
 801185e:	4435      	add	r5, r6
 8011860:	4628      	mov	r0, r5
 8011862:	f7ff f8f3 	bl	8010a4c <ucdr_alignment>
 8011866:	4420      	add	r0, r4
 8011868:	4428      	add	r0, r5
 801186a:	bd70      	pop	{r4, r5, r6, pc}

0801186c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801186c:	4800      	ldr	r0, [pc, #0]	@ (8011870 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801186e:	4770      	bx	lr
 8011870:	24001340 	.word	0x24001340

08011874 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8011874:	b1b8      	cbz	r0, 80118a6 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 8011876:	b538      	push	{r3, r4, r5, lr}
 8011878:	460d      	mov	r5, r1
 801187a:	2108      	movs	r1, #8
 801187c:	4628      	mov	r0, r5
 801187e:	f7ff f8e5 	bl	8010a4c <ucdr_alignment>
 8011882:	f105 0308 	add.w	r3, r5, #8
 8011886:	2108      	movs	r1, #8
 8011888:	f1c5 0508 	rsb	r5, r5, #8
 801188c:	181c      	adds	r4, r3, r0
 801188e:	4620      	mov	r0, r4
 8011890:	f7ff f8dc 	bl	8010a4c <ucdr_alignment>
 8011894:	2108      	movs	r1, #8
 8011896:	4408      	add	r0, r1
 8011898:	4404      	add	r4, r0
 801189a:	4620      	mov	r0, r4
 801189c:	f7ff f8d6 	bl	8010a4c <ucdr_alignment>
 80118a0:	4428      	add	r0, r5
 80118a2:	4420      	add	r0, r4
 80118a4:	bd38      	pop	{r3, r4, r5, pc}
 80118a6:	4770      	bx	lr

080118a8 <_ActuationStatus__cdr_deserialize>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	460c      	mov	r4, r1
 80118ac:	b171      	cbz	r1, 80118cc <_ActuationStatus__cdr_deserialize+0x24>
 80118ae:	4605      	mov	r5, r0
 80118b0:	f7fe ffde 	bl	8010870 <ucdr_deserialize_double>
 80118b4:	f104 0108 	add.w	r1, r4, #8
 80118b8:	4628      	mov	r0, r5
 80118ba:	f7fe ffd9 	bl	8010870 <ucdr_deserialize_double>
 80118be:	f104 0110 	add.w	r1, r4, #16
 80118c2:	4628      	mov	r0, r5
 80118c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118c8:	f7fe bfd2 	b.w	8010870 <ucdr_deserialize_double>
 80118cc:	4608      	mov	r0, r1
 80118ce:	bd38      	pop	{r3, r4, r5, pc}

080118d0 <_ActuationStatus__cdr_serialize>:
 80118d0:	b198      	cbz	r0, 80118fa <_ActuationStatus__cdr_serialize+0x2a>
 80118d2:	b538      	push	{r3, r4, r5, lr}
 80118d4:	460d      	mov	r5, r1
 80118d6:	4604      	mov	r4, r0
 80118d8:	ed90 0b00 	vldr	d0, [r0]
 80118dc:	4608      	mov	r0, r1
 80118de:	f7fe fef7 	bl	80106d0 <ucdr_serialize_double>
 80118e2:	4628      	mov	r0, r5
 80118e4:	ed94 0b02 	vldr	d0, [r4, #8]
 80118e8:	f7fe fef2 	bl	80106d0 <ucdr_serialize_double>
 80118ec:	4628      	mov	r0, r5
 80118ee:	ed94 0b04 	vldr	d0, [r4, #16]
 80118f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118f6:	f7fe beeb 	b.w	80106d0 <ucdr_serialize_double>
 80118fa:	4770      	bx	lr

080118fc <_ActuationStatus__get_serialized_size>:
 80118fc:	b190      	cbz	r0, 8011924 <_ActuationStatus__get_serialized_size+0x28>
 80118fe:	2108      	movs	r1, #8
 8011900:	2000      	movs	r0, #0
 8011902:	b510      	push	{r4, lr}
 8011904:	f7ff f8a2 	bl	8010a4c <ucdr_alignment>
 8011908:	2108      	movs	r1, #8
 801190a:	1844      	adds	r4, r0, r1
 801190c:	4620      	mov	r0, r4
 801190e:	f7ff f89d 	bl	8010a4c <ucdr_alignment>
 8011912:	2108      	movs	r1, #8
 8011914:	4408      	add	r0, r1
 8011916:	4404      	add	r4, r0
 8011918:	4620      	mov	r0, r4
 801191a:	f7ff f897 	bl	8010a4c <ucdr_alignment>
 801191e:	3008      	adds	r0, #8
 8011920:	4420      	add	r0, r4
 8011922:	bd10      	pop	{r4, pc}
 8011924:	4770      	bx	lr
 8011926:	bf00      	nop

08011928 <_ActuationStatus__max_serialized_size>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	2108      	movs	r1, #8
 801192c:	2000      	movs	r0, #0
 801192e:	f7ff f88d 	bl	8010a4c <ucdr_alignment>
 8011932:	2108      	movs	r1, #8
 8011934:	1845      	adds	r5, r0, r1
 8011936:	4628      	mov	r0, r5
 8011938:	f7ff f888 	bl	8010a4c <ucdr_alignment>
 801193c:	2108      	movs	r1, #8
 801193e:	1844      	adds	r4, r0, r1
 8011940:	442c      	add	r4, r5
 8011942:	4620      	mov	r0, r4
 8011944:	f7ff f882 	bl	8010a4c <ucdr_alignment>
 8011948:	3008      	adds	r0, #8
 801194a:	4420      	add	r0, r4
 801194c:	bd38      	pop	{r3, r4, r5, pc}
 801194e:	bf00      	nop

08011950 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8011950:	b570      	push	{r4, r5, r6, lr}
 8011952:	460c      	mov	r4, r1
 8011954:	2301      	movs	r3, #1
 8011956:	2108      	movs	r1, #8
 8011958:	f104 0508 	add.w	r5, r4, #8
 801195c:	7003      	strb	r3, [r0, #0]
 801195e:	4620      	mov	r0, r4
 8011960:	f1c4 0408 	rsb	r4, r4, #8
 8011964:	f7ff f872 	bl	8010a4c <ucdr_alignment>
 8011968:	1946      	adds	r6, r0, r5
 801196a:	2108      	movs	r1, #8
 801196c:	4630      	mov	r0, r6
 801196e:	f7ff f86d 	bl	8010a4c <ucdr_alignment>
 8011972:	2108      	movs	r1, #8
 8011974:	1845      	adds	r5, r0, r1
 8011976:	4435      	add	r5, r6
 8011978:	4628      	mov	r0, r5
 801197a:	f7ff f867 	bl	8010a4c <ucdr_alignment>
 801197e:	4420      	add	r0, r4
 8011980:	4428      	add	r0, r5
 8011982:	bd70      	pop	{r4, r5, r6, pc}

08011984 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8011984:	4800      	ldr	r0, [pc, #0]	@ (8011988 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 8011986:	4770      	bx	lr
 8011988:	24001368 	.word	0x24001368

0801198c <ucdr_serialize_endian_array_char>:
 801198c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011990:	4619      	mov	r1, r3
 8011992:	461f      	mov	r7, r3
 8011994:	4605      	mov	r5, r0
 8011996:	4690      	mov	r8, r2
 8011998:	f7ff f830 	bl	80109fc <ucdr_check_buffer_available_for>
 801199c:	b9e0      	cbnz	r0, 80119d8 <ucdr_serialize_endian_array_char+0x4c>
 801199e:	463e      	mov	r6, r7
 80119a0:	e00b      	b.n	80119ba <ucdr_serialize_endian_array_char+0x2e>
 80119a2:	4441      	add	r1, r8
 80119a4:	68a8      	ldr	r0, [r5, #8]
 80119a6:	4622      	mov	r2, r4
 80119a8:	1b36      	subs	r6, r6, r4
 80119aa:	f000 fcb6 	bl	801231a <memcpy>
 80119ae:	68ab      	ldr	r3, [r5, #8]
 80119b0:	6928      	ldr	r0, [r5, #16]
 80119b2:	4423      	add	r3, r4
 80119b4:	4420      	add	r0, r4
 80119b6:	60ab      	str	r3, [r5, #8]
 80119b8:	6128      	str	r0, [r5, #16]
 80119ba:	4631      	mov	r1, r6
 80119bc:	2201      	movs	r2, #1
 80119be:	4628      	mov	r0, r5
 80119c0:	f7ff f872 	bl	8010aa8 <ucdr_check_final_buffer_behavior_array>
 80119c4:	1bb9      	subs	r1, r7, r6
 80119c6:	4604      	mov	r4, r0
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d1ea      	bne.n	80119a2 <ucdr_serialize_endian_array_char+0x16>
 80119cc:	2301      	movs	r3, #1
 80119ce:	7da8      	ldrb	r0, [r5, #22]
 80119d0:	756b      	strb	r3, [r5, #21]
 80119d2:	4058      	eors	r0, r3
 80119d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119d8:	463a      	mov	r2, r7
 80119da:	4641      	mov	r1, r8
 80119dc:	68a8      	ldr	r0, [r5, #8]
 80119de:	f000 fc9c 	bl	801231a <memcpy>
 80119e2:	68aa      	ldr	r2, [r5, #8]
 80119e4:	692b      	ldr	r3, [r5, #16]
 80119e6:	443a      	add	r2, r7
 80119e8:	443b      	add	r3, r7
 80119ea:	60aa      	str	r2, [r5, #8]
 80119ec:	612b      	str	r3, [r5, #16]
 80119ee:	e7ed      	b.n	80119cc <ucdr_serialize_endian_array_char+0x40>

080119f0 <ucdr_deserialize_endian_array_char>:
 80119f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119f4:	4619      	mov	r1, r3
 80119f6:	461f      	mov	r7, r3
 80119f8:	4605      	mov	r5, r0
 80119fa:	4690      	mov	r8, r2
 80119fc:	f7fe fffe 	bl	80109fc <ucdr_check_buffer_available_for>
 8011a00:	b9e8      	cbnz	r0, 8011a3e <ucdr_deserialize_endian_array_char+0x4e>
 8011a02:	463e      	mov	r6, r7
 8011a04:	e00c      	b.n	8011a20 <ucdr_deserialize_endian_array_char+0x30>
 8011a06:	eb08 0003 	add.w	r0, r8, r3
 8011a0a:	68a9      	ldr	r1, [r5, #8]
 8011a0c:	4622      	mov	r2, r4
 8011a0e:	1b36      	subs	r6, r6, r4
 8011a10:	f000 fc83 	bl	801231a <memcpy>
 8011a14:	68ab      	ldr	r3, [r5, #8]
 8011a16:	6928      	ldr	r0, [r5, #16]
 8011a18:	4423      	add	r3, r4
 8011a1a:	4420      	add	r0, r4
 8011a1c:	60ab      	str	r3, [r5, #8]
 8011a1e:	6128      	str	r0, [r5, #16]
 8011a20:	4631      	mov	r1, r6
 8011a22:	2201      	movs	r2, #1
 8011a24:	4628      	mov	r0, r5
 8011a26:	f7ff f83f 	bl	8010aa8 <ucdr_check_final_buffer_behavior_array>
 8011a2a:	1bbb      	subs	r3, r7, r6
 8011a2c:	4604      	mov	r4, r0
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d1e9      	bne.n	8011a06 <ucdr_deserialize_endian_array_char+0x16>
 8011a32:	2301      	movs	r3, #1
 8011a34:	7da8      	ldrb	r0, [r5, #22]
 8011a36:	756b      	strb	r3, [r5, #21]
 8011a38:	4058      	eors	r0, r3
 8011a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a3e:	463a      	mov	r2, r7
 8011a40:	68a9      	ldr	r1, [r5, #8]
 8011a42:	4640      	mov	r0, r8
 8011a44:	f000 fc69 	bl	801231a <memcpy>
 8011a48:	68aa      	ldr	r2, [r5, #8]
 8011a4a:	692b      	ldr	r3, [r5, #16]
 8011a4c:	443a      	add	r2, r7
 8011a4e:	443b      	add	r3, r7
 8011a50:	60aa      	str	r2, [r5, #8]
 8011a52:	612b      	str	r3, [r5, #16]
 8011a54:	e7ed      	b.n	8011a32 <ucdr_deserialize_endian_array_char+0x42>
 8011a56:	bf00      	nop

08011a58 <rosidl_runtime_c__String__init>:
 8011a58:	b510      	push	{r4, lr}
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	b086      	sub	sp, #24
 8011a5e:	b170      	cbz	r0, 8011a7e <rosidl_runtime_c__String__init+0x26>
 8011a60:	a801      	add	r0, sp, #4
 8011a62:	f7ff f867 	bl	8010b34 <rcutils_get_default_allocator>
 8011a66:	9b01      	ldr	r3, [sp, #4]
 8011a68:	9905      	ldr	r1, [sp, #20]
 8011a6a:	2001      	movs	r0, #1
 8011a6c:	4798      	blx	r3
 8011a6e:	6020      	str	r0, [r4, #0]
 8011a70:	b128      	cbz	r0, 8011a7e <rosidl_runtime_c__String__init+0x26>
 8011a72:	2100      	movs	r1, #0
 8011a74:	2201      	movs	r2, #1
 8011a76:	7001      	strb	r1, [r0, #0]
 8011a78:	4610      	mov	r0, r2
 8011a7a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8011a7e:	b006      	add	sp, #24
 8011a80:	bd10      	pop	{r4, pc}
 8011a82:	bf00      	nop

08011a84 <rosidl_runtime_c__String__fini>:
 8011a84:	b320      	cbz	r0, 8011ad0 <rosidl_runtime_c__String__fini+0x4c>
 8011a86:	6803      	ldr	r3, [r0, #0]
 8011a88:	b510      	push	{r4, lr}
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	b086      	sub	sp, #24
 8011a8e:	b173      	cbz	r3, 8011aae <rosidl_runtime_c__String__fini+0x2a>
 8011a90:	6883      	ldr	r3, [r0, #8]
 8011a92:	b1f3      	cbz	r3, 8011ad2 <rosidl_runtime_c__String__fini+0x4e>
 8011a94:	a801      	add	r0, sp, #4
 8011a96:	f7ff f84d 	bl	8010b34 <rcutils_get_default_allocator>
 8011a9a:	9b02      	ldr	r3, [sp, #8]
 8011a9c:	9905      	ldr	r1, [sp, #20]
 8011a9e:	6820      	ldr	r0, [r4, #0]
 8011aa0:	4798      	blx	r3
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	e9c4 3300 	strd	r3, r3, [r4]
 8011aa8:	60a3      	str	r3, [r4, #8]
 8011aaa:	b006      	add	sp, #24
 8011aac:	bd10      	pop	{r4, pc}
 8011aae:	6843      	ldr	r3, [r0, #4]
 8011ab0:	b9db      	cbnz	r3, 8011aea <rosidl_runtime_c__String__fini+0x66>
 8011ab2:	6883      	ldr	r3, [r0, #8]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d0f8      	beq.n	8011aaa <rosidl_runtime_c__String__fini+0x26>
 8011ab8:	4b12      	ldr	r3, [pc, #72]	@ (8011b04 <rosidl_runtime_c__String__fini+0x80>)
 8011aba:	2251      	movs	r2, #81	@ 0x51
 8011abc:	2101      	movs	r1, #1
 8011abe:	4812      	ldr	r0, [pc, #72]	@ (8011b08 <rosidl_runtime_c__String__fini+0x84>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	68db      	ldr	r3, [r3, #12]
 8011ac4:	f000 fa62 	bl	8011f8c <fwrite>
 8011ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011acc:	f000 f84a 	bl	8011b64 <exit>
 8011ad0:	4770      	bx	lr
 8011ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8011b04 <rosidl_runtime_c__String__fini+0x80>)
 8011ad4:	224c      	movs	r2, #76	@ 0x4c
 8011ad6:	2101      	movs	r1, #1
 8011ad8:	480c      	ldr	r0, [pc, #48]	@ (8011b0c <rosidl_runtime_c__String__fini+0x88>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	f000 fa55 	bl	8011f8c <fwrite>
 8011ae2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ae6:	f000 f83d 	bl	8011b64 <exit>
 8011aea:	4b06      	ldr	r3, [pc, #24]	@ (8011b04 <rosidl_runtime_c__String__fini+0x80>)
 8011aec:	224e      	movs	r2, #78	@ 0x4e
 8011aee:	2101      	movs	r1, #1
 8011af0:	4807      	ldr	r0, [pc, #28]	@ (8011b10 <rosidl_runtime_c__String__fini+0x8c>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	68db      	ldr	r3, [r3, #12]
 8011af6:	f000 fa49 	bl	8011f8c <fwrite>
 8011afa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011afe:	f000 f831 	bl	8011b64 <exit>
 8011b02:	bf00      	nop
 8011b04:	2400139c 	.word	0x2400139c
 8011b08:	0801405c 	.word	0x0801405c
 8011b0c:	08013fbc 	.word	0x08013fbc
 8011b10:	0801400c 	.word	0x0801400c

08011b14 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8011b14:	3800      	subs	r0, #0
 8011b16:	bf18      	it	ne
 8011b18:	2001      	movne	r0, #1
 8011b1a:	4770      	bx	lr

08011b1c <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop

08011b20 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8011b20:	3800      	subs	r0, #0
 8011b22:	bf18      	it	ne
 8011b24:	2001      	movne	r0, #1
 8011b26:	4770      	bx	lr

08011b28 <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 8011b28:	4770      	bx	lr
 8011b2a:	bf00      	nop

08011b2c <calloc>:
 8011b2c:	4b02      	ldr	r3, [pc, #8]	@ (8011b38 <calloc+0xc>)
 8011b2e:	460a      	mov	r2, r1
 8011b30:	4601      	mov	r1, r0
 8011b32:	6818      	ldr	r0, [r3, #0]
 8011b34:	f000 b802 	b.w	8011b3c <_calloc_r>
 8011b38:	2400139c 	.word	0x2400139c

08011b3c <_calloc_r>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	fba1 5402 	umull	r5, r4, r1, r2
 8011b42:	b93c      	cbnz	r4, 8011b54 <_calloc_r+0x18>
 8011b44:	4629      	mov	r1, r5
 8011b46:	f000 f851 	bl	8011bec <_malloc_r>
 8011b4a:	4606      	mov	r6, r0
 8011b4c:	b928      	cbnz	r0, 8011b5a <_calloc_r+0x1e>
 8011b4e:	2600      	movs	r6, #0
 8011b50:	4630      	mov	r0, r6
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	220c      	movs	r2, #12
 8011b56:	6002      	str	r2, [r0, #0]
 8011b58:	e7f9      	b.n	8011b4e <_calloc_r+0x12>
 8011b5a:	462a      	mov	r2, r5
 8011b5c:	4621      	mov	r1, r4
 8011b5e:	f000 fafb 	bl	8012158 <memset>
 8011b62:	e7f5      	b.n	8011b50 <_calloc_r+0x14>

08011b64 <exit>:
 8011b64:	b508      	push	{r3, lr}
 8011b66:	4b06      	ldr	r3, [pc, #24]	@ (8011b80 <exit+0x1c>)
 8011b68:	4604      	mov	r4, r0
 8011b6a:	b113      	cbz	r3, 8011b72 <exit+0xe>
 8011b6c:	2100      	movs	r1, #0
 8011b6e:	f3af 8000 	nop.w
 8011b72:	4b04      	ldr	r3, [pc, #16]	@ (8011b84 <exit+0x20>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	b103      	cbz	r3, 8011b7a <exit+0x16>
 8011b78:	4798      	blx	r3
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f7ef f9f2 	bl	8000f64 <_exit>
 8011b80:	00000000 	.word	0x00000000
 8011b84:	240334d4 	.word	0x240334d4

08011b88 <malloc>:
 8011b88:	4b02      	ldr	r3, [pc, #8]	@ (8011b94 <malloc+0xc>)
 8011b8a:	4601      	mov	r1, r0
 8011b8c:	6818      	ldr	r0, [r3, #0]
 8011b8e:	f000 b82d 	b.w	8011bec <_malloc_r>
 8011b92:	bf00      	nop
 8011b94:	2400139c 	.word	0x2400139c

08011b98 <free>:
 8011b98:	4b02      	ldr	r3, [pc, #8]	@ (8011ba4 <free+0xc>)
 8011b9a:	4601      	mov	r1, r0
 8011b9c:	6818      	ldr	r0, [r3, #0]
 8011b9e:	f000 bbcb 	b.w	8012338 <_free_r>
 8011ba2:	bf00      	nop
 8011ba4:	2400139c 	.word	0x2400139c

08011ba8 <sbrk_aligned>:
 8011ba8:	b570      	push	{r4, r5, r6, lr}
 8011baa:	4e0f      	ldr	r6, [pc, #60]	@ (8011be8 <sbrk_aligned+0x40>)
 8011bac:	460c      	mov	r4, r1
 8011bae:	6831      	ldr	r1, [r6, #0]
 8011bb0:	4605      	mov	r5, r0
 8011bb2:	b911      	cbnz	r1, 8011bba <sbrk_aligned+0x12>
 8011bb4:	f000 fb62 	bl	801227c <_sbrk_r>
 8011bb8:	6030      	str	r0, [r6, #0]
 8011bba:	4621      	mov	r1, r4
 8011bbc:	4628      	mov	r0, r5
 8011bbe:	f000 fb5d 	bl	801227c <_sbrk_r>
 8011bc2:	1c43      	adds	r3, r0, #1
 8011bc4:	d103      	bne.n	8011bce <sbrk_aligned+0x26>
 8011bc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011bca:	4620      	mov	r0, r4
 8011bcc:	bd70      	pop	{r4, r5, r6, pc}
 8011bce:	1cc4      	adds	r4, r0, #3
 8011bd0:	f024 0403 	bic.w	r4, r4, #3
 8011bd4:	42a0      	cmp	r0, r4
 8011bd6:	d0f8      	beq.n	8011bca <sbrk_aligned+0x22>
 8011bd8:	1a21      	subs	r1, r4, r0
 8011bda:	4628      	mov	r0, r5
 8011bdc:	f000 fb4e 	bl	801227c <_sbrk_r>
 8011be0:	3001      	adds	r0, #1
 8011be2:	d1f2      	bne.n	8011bca <sbrk_aligned+0x22>
 8011be4:	e7ef      	b.n	8011bc6 <sbrk_aligned+0x1e>
 8011be6:	bf00      	nop
 8011be8:	24033394 	.word	0x24033394

08011bec <_malloc_r>:
 8011bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bf0:	1ccd      	adds	r5, r1, #3
 8011bf2:	f025 0503 	bic.w	r5, r5, #3
 8011bf6:	3508      	adds	r5, #8
 8011bf8:	2d0c      	cmp	r5, #12
 8011bfa:	bf38      	it	cc
 8011bfc:	250c      	movcc	r5, #12
 8011bfe:	2d00      	cmp	r5, #0
 8011c00:	4606      	mov	r6, r0
 8011c02:	db01      	blt.n	8011c08 <_malloc_r+0x1c>
 8011c04:	42a9      	cmp	r1, r5
 8011c06:	d904      	bls.n	8011c12 <_malloc_r+0x26>
 8011c08:	230c      	movs	r3, #12
 8011c0a:	6033      	str	r3, [r6, #0]
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011ce8 <_malloc_r+0xfc>
 8011c16:	f000 f869 	bl	8011cec <__malloc_lock>
 8011c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8011c1e:	461c      	mov	r4, r3
 8011c20:	bb44      	cbnz	r4, 8011c74 <_malloc_r+0x88>
 8011c22:	4629      	mov	r1, r5
 8011c24:	4630      	mov	r0, r6
 8011c26:	f7ff ffbf 	bl	8011ba8 <sbrk_aligned>
 8011c2a:	1c43      	adds	r3, r0, #1
 8011c2c:	4604      	mov	r4, r0
 8011c2e:	d158      	bne.n	8011ce2 <_malloc_r+0xf6>
 8011c30:	f8d8 4000 	ldr.w	r4, [r8]
 8011c34:	4627      	mov	r7, r4
 8011c36:	2f00      	cmp	r7, #0
 8011c38:	d143      	bne.n	8011cc2 <_malloc_r+0xd6>
 8011c3a:	2c00      	cmp	r4, #0
 8011c3c:	d04b      	beq.n	8011cd6 <_malloc_r+0xea>
 8011c3e:	6823      	ldr	r3, [r4, #0]
 8011c40:	4639      	mov	r1, r7
 8011c42:	4630      	mov	r0, r6
 8011c44:	eb04 0903 	add.w	r9, r4, r3
 8011c48:	f000 fb18 	bl	801227c <_sbrk_r>
 8011c4c:	4581      	cmp	r9, r0
 8011c4e:	d142      	bne.n	8011cd6 <_malloc_r+0xea>
 8011c50:	6821      	ldr	r1, [r4, #0]
 8011c52:	1a6d      	subs	r5, r5, r1
 8011c54:	4629      	mov	r1, r5
 8011c56:	4630      	mov	r0, r6
 8011c58:	f7ff ffa6 	bl	8011ba8 <sbrk_aligned>
 8011c5c:	3001      	adds	r0, #1
 8011c5e:	d03a      	beq.n	8011cd6 <_malloc_r+0xea>
 8011c60:	6823      	ldr	r3, [r4, #0]
 8011c62:	442b      	add	r3, r5
 8011c64:	6023      	str	r3, [r4, #0]
 8011c66:	f8d8 3000 	ldr.w	r3, [r8]
 8011c6a:	685a      	ldr	r2, [r3, #4]
 8011c6c:	bb62      	cbnz	r2, 8011cc8 <_malloc_r+0xdc>
 8011c6e:	f8c8 7000 	str.w	r7, [r8]
 8011c72:	e00f      	b.n	8011c94 <_malloc_r+0xa8>
 8011c74:	6822      	ldr	r2, [r4, #0]
 8011c76:	1b52      	subs	r2, r2, r5
 8011c78:	d420      	bmi.n	8011cbc <_malloc_r+0xd0>
 8011c7a:	2a0b      	cmp	r2, #11
 8011c7c:	d917      	bls.n	8011cae <_malloc_r+0xc2>
 8011c7e:	1961      	adds	r1, r4, r5
 8011c80:	42a3      	cmp	r3, r4
 8011c82:	6025      	str	r5, [r4, #0]
 8011c84:	bf18      	it	ne
 8011c86:	6059      	strne	r1, [r3, #4]
 8011c88:	6863      	ldr	r3, [r4, #4]
 8011c8a:	bf08      	it	eq
 8011c8c:	f8c8 1000 	streq.w	r1, [r8]
 8011c90:	5162      	str	r2, [r4, r5]
 8011c92:	604b      	str	r3, [r1, #4]
 8011c94:	4630      	mov	r0, r6
 8011c96:	f000 f82f 	bl	8011cf8 <__malloc_unlock>
 8011c9a:	f104 000b 	add.w	r0, r4, #11
 8011c9e:	1d23      	adds	r3, r4, #4
 8011ca0:	f020 0007 	bic.w	r0, r0, #7
 8011ca4:	1ac2      	subs	r2, r0, r3
 8011ca6:	bf1c      	itt	ne
 8011ca8:	1a1b      	subne	r3, r3, r0
 8011caa:	50a3      	strne	r3, [r4, r2]
 8011cac:	e7af      	b.n	8011c0e <_malloc_r+0x22>
 8011cae:	6862      	ldr	r2, [r4, #4]
 8011cb0:	42a3      	cmp	r3, r4
 8011cb2:	bf0c      	ite	eq
 8011cb4:	f8c8 2000 	streq.w	r2, [r8]
 8011cb8:	605a      	strne	r2, [r3, #4]
 8011cba:	e7eb      	b.n	8011c94 <_malloc_r+0xa8>
 8011cbc:	4623      	mov	r3, r4
 8011cbe:	6864      	ldr	r4, [r4, #4]
 8011cc0:	e7ae      	b.n	8011c20 <_malloc_r+0x34>
 8011cc2:	463c      	mov	r4, r7
 8011cc4:	687f      	ldr	r7, [r7, #4]
 8011cc6:	e7b6      	b.n	8011c36 <_malloc_r+0x4a>
 8011cc8:	461a      	mov	r2, r3
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	42a3      	cmp	r3, r4
 8011cce:	d1fb      	bne.n	8011cc8 <_malloc_r+0xdc>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	6053      	str	r3, [r2, #4]
 8011cd4:	e7de      	b.n	8011c94 <_malloc_r+0xa8>
 8011cd6:	230c      	movs	r3, #12
 8011cd8:	6033      	str	r3, [r6, #0]
 8011cda:	4630      	mov	r0, r6
 8011cdc:	f000 f80c 	bl	8011cf8 <__malloc_unlock>
 8011ce0:	e794      	b.n	8011c0c <_malloc_r+0x20>
 8011ce2:	6005      	str	r5, [r0, #0]
 8011ce4:	e7d6      	b.n	8011c94 <_malloc_r+0xa8>
 8011ce6:	bf00      	nop
 8011ce8:	24033398 	.word	0x24033398

08011cec <__malloc_lock>:
 8011cec:	4801      	ldr	r0, [pc, #4]	@ (8011cf4 <__malloc_lock+0x8>)
 8011cee:	f000 bb12 	b.w	8012316 <__retarget_lock_acquire_recursive>
 8011cf2:	bf00      	nop
 8011cf4:	240334dc 	.word	0x240334dc

08011cf8 <__malloc_unlock>:
 8011cf8:	4801      	ldr	r0, [pc, #4]	@ (8011d00 <__malloc_unlock+0x8>)
 8011cfa:	f000 bb0d 	b.w	8012318 <__retarget_lock_release_recursive>
 8011cfe:	bf00      	nop
 8011d00:	240334dc 	.word	0x240334dc

08011d04 <realloc>:
 8011d04:	4b02      	ldr	r3, [pc, #8]	@ (8011d10 <realloc+0xc>)
 8011d06:	460a      	mov	r2, r1
 8011d08:	4601      	mov	r1, r0
 8011d0a:	6818      	ldr	r0, [r3, #0]
 8011d0c:	f000 b802 	b.w	8011d14 <_realloc_r>
 8011d10:	2400139c 	.word	0x2400139c

08011d14 <_realloc_r>:
 8011d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d18:	4680      	mov	r8, r0
 8011d1a:	4615      	mov	r5, r2
 8011d1c:	460c      	mov	r4, r1
 8011d1e:	b921      	cbnz	r1, 8011d2a <_realloc_r+0x16>
 8011d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d24:	4611      	mov	r1, r2
 8011d26:	f7ff bf61 	b.w	8011bec <_malloc_r>
 8011d2a:	b92a      	cbnz	r2, 8011d38 <_realloc_r+0x24>
 8011d2c:	f000 fb04 	bl	8012338 <_free_r>
 8011d30:	2400      	movs	r4, #0
 8011d32:	4620      	mov	r0, r4
 8011d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d38:	f000 fb48 	bl	80123cc <_malloc_usable_size_r>
 8011d3c:	4285      	cmp	r5, r0
 8011d3e:	4606      	mov	r6, r0
 8011d40:	d802      	bhi.n	8011d48 <_realloc_r+0x34>
 8011d42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011d46:	d8f4      	bhi.n	8011d32 <_realloc_r+0x1e>
 8011d48:	4629      	mov	r1, r5
 8011d4a:	4640      	mov	r0, r8
 8011d4c:	f7ff ff4e 	bl	8011bec <_malloc_r>
 8011d50:	4607      	mov	r7, r0
 8011d52:	2800      	cmp	r0, #0
 8011d54:	d0ec      	beq.n	8011d30 <_realloc_r+0x1c>
 8011d56:	42b5      	cmp	r5, r6
 8011d58:	462a      	mov	r2, r5
 8011d5a:	4621      	mov	r1, r4
 8011d5c:	bf28      	it	cs
 8011d5e:	4632      	movcs	r2, r6
 8011d60:	f000 fadb 	bl	801231a <memcpy>
 8011d64:	4621      	mov	r1, r4
 8011d66:	4640      	mov	r0, r8
 8011d68:	f000 fae6 	bl	8012338 <_free_r>
 8011d6c:	463c      	mov	r4, r7
 8011d6e:	e7e0      	b.n	8011d32 <_realloc_r+0x1e>

08011d70 <std>:
 8011d70:	2300      	movs	r3, #0
 8011d72:	b510      	push	{r4, lr}
 8011d74:	4604      	mov	r4, r0
 8011d76:	e9c0 3300 	strd	r3, r3, [r0]
 8011d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d7e:	6083      	str	r3, [r0, #8]
 8011d80:	8181      	strh	r1, [r0, #12]
 8011d82:	6643      	str	r3, [r0, #100]	@ 0x64
 8011d84:	81c2      	strh	r2, [r0, #14]
 8011d86:	6183      	str	r3, [r0, #24]
 8011d88:	4619      	mov	r1, r3
 8011d8a:	2208      	movs	r2, #8
 8011d8c:	305c      	adds	r0, #92	@ 0x5c
 8011d8e:	f000 f9e3 	bl	8012158 <memset>
 8011d92:	4b0d      	ldr	r3, [pc, #52]	@ (8011dc8 <std+0x58>)
 8011d94:	6263      	str	r3, [r4, #36]	@ 0x24
 8011d96:	4b0d      	ldr	r3, [pc, #52]	@ (8011dcc <std+0x5c>)
 8011d98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8011dd0 <std+0x60>)
 8011d9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8011dd4 <std+0x64>)
 8011da0:	6323      	str	r3, [r4, #48]	@ 0x30
 8011da2:	4b0d      	ldr	r3, [pc, #52]	@ (8011dd8 <std+0x68>)
 8011da4:	6224      	str	r4, [r4, #32]
 8011da6:	429c      	cmp	r4, r3
 8011da8:	d006      	beq.n	8011db8 <std+0x48>
 8011daa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011dae:	4294      	cmp	r4, r2
 8011db0:	d002      	beq.n	8011db8 <std+0x48>
 8011db2:	33d0      	adds	r3, #208	@ 0xd0
 8011db4:	429c      	cmp	r4, r3
 8011db6:	d105      	bne.n	8011dc4 <std+0x54>
 8011db8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dc0:	f000 baa8 	b.w	8012314 <__retarget_lock_init_recursive>
 8011dc4:	bd10      	pop	{r4, pc}
 8011dc6:	bf00      	nop
 8011dc8:	08011fa9 	.word	0x08011fa9
 8011dcc:	08011fcb 	.word	0x08011fcb
 8011dd0:	08012003 	.word	0x08012003
 8011dd4:	08012027 	.word	0x08012027
 8011dd8:	2403339c 	.word	0x2403339c

08011ddc <stdio_exit_handler>:
 8011ddc:	4a02      	ldr	r2, [pc, #8]	@ (8011de8 <stdio_exit_handler+0xc>)
 8011dde:	4903      	ldr	r1, [pc, #12]	@ (8011dec <stdio_exit_handler+0x10>)
 8011de0:	4803      	ldr	r0, [pc, #12]	@ (8011df0 <stdio_exit_handler+0x14>)
 8011de2:	f000 b869 	b.w	8011eb8 <_fwalk_sglue>
 8011de6:	bf00      	nop
 8011de8:	24001390 	.word	0x24001390
 8011dec:	080124e5 	.word	0x080124e5
 8011df0:	240013a0 	.word	0x240013a0

08011df4 <cleanup_stdio>:
 8011df4:	6841      	ldr	r1, [r0, #4]
 8011df6:	4b0c      	ldr	r3, [pc, #48]	@ (8011e28 <cleanup_stdio+0x34>)
 8011df8:	4299      	cmp	r1, r3
 8011dfa:	b510      	push	{r4, lr}
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	d001      	beq.n	8011e04 <cleanup_stdio+0x10>
 8011e00:	f000 fb70 	bl	80124e4 <_fflush_r>
 8011e04:	68a1      	ldr	r1, [r4, #8]
 8011e06:	4b09      	ldr	r3, [pc, #36]	@ (8011e2c <cleanup_stdio+0x38>)
 8011e08:	4299      	cmp	r1, r3
 8011e0a:	d002      	beq.n	8011e12 <cleanup_stdio+0x1e>
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f000 fb69 	bl	80124e4 <_fflush_r>
 8011e12:	68e1      	ldr	r1, [r4, #12]
 8011e14:	4b06      	ldr	r3, [pc, #24]	@ (8011e30 <cleanup_stdio+0x3c>)
 8011e16:	4299      	cmp	r1, r3
 8011e18:	d004      	beq.n	8011e24 <cleanup_stdio+0x30>
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e20:	f000 bb60 	b.w	80124e4 <_fflush_r>
 8011e24:	bd10      	pop	{r4, pc}
 8011e26:	bf00      	nop
 8011e28:	2403339c 	.word	0x2403339c
 8011e2c:	24033404 	.word	0x24033404
 8011e30:	2403346c 	.word	0x2403346c

08011e34 <global_stdio_init.part.0>:
 8011e34:	b510      	push	{r4, lr}
 8011e36:	4b0b      	ldr	r3, [pc, #44]	@ (8011e64 <global_stdio_init.part.0+0x30>)
 8011e38:	4c0b      	ldr	r4, [pc, #44]	@ (8011e68 <global_stdio_init.part.0+0x34>)
 8011e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8011e6c <global_stdio_init.part.0+0x38>)
 8011e3c:	601a      	str	r2, [r3, #0]
 8011e3e:	4620      	mov	r0, r4
 8011e40:	2200      	movs	r2, #0
 8011e42:	2104      	movs	r1, #4
 8011e44:	f7ff ff94 	bl	8011d70 <std>
 8011e48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	2109      	movs	r1, #9
 8011e50:	f7ff ff8e 	bl	8011d70 <std>
 8011e54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011e58:	2202      	movs	r2, #2
 8011e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e5e:	2112      	movs	r1, #18
 8011e60:	f7ff bf86 	b.w	8011d70 <std>
 8011e64:	240334d4 	.word	0x240334d4
 8011e68:	2403339c 	.word	0x2403339c
 8011e6c:	08011ddd 	.word	0x08011ddd

08011e70 <__sfp_lock_acquire>:
 8011e70:	4801      	ldr	r0, [pc, #4]	@ (8011e78 <__sfp_lock_acquire+0x8>)
 8011e72:	f000 ba50 	b.w	8012316 <__retarget_lock_acquire_recursive>
 8011e76:	bf00      	nop
 8011e78:	240334dd 	.word	0x240334dd

08011e7c <__sfp_lock_release>:
 8011e7c:	4801      	ldr	r0, [pc, #4]	@ (8011e84 <__sfp_lock_release+0x8>)
 8011e7e:	f000 ba4b 	b.w	8012318 <__retarget_lock_release_recursive>
 8011e82:	bf00      	nop
 8011e84:	240334dd 	.word	0x240334dd

08011e88 <__sinit>:
 8011e88:	b510      	push	{r4, lr}
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	f7ff fff0 	bl	8011e70 <__sfp_lock_acquire>
 8011e90:	6a23      	ldr	r3, [r4, #32]
 8011e92:	b11b      	cbz	r3, 8011e9c <__sinit+0x14>
 8011e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e98:	f7ff bff0 	b.w	8011e7c <__sfp_lock_release>
 8011e9c:	4b04      	ldr	r3, [pc, #16]	@ (8011eb0 <__sinit+0x28>)
 8011e9e:	6223      	str	r3, [r4, #32]
 8011ea0:	4b04      	ldr	r3, [pc, #16]	@ (8011eb4 <__sinit+0x2c>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d1f5      	bne.n	8011e94 <__sinit+0xc>
 8011ea8:	f7ff ffc4 	bl	8011e34 <global_stdio_init.part.0>
 8011eac:	e7f2      	b.n	8011e94 <__sinit+0xc>
 8011eae:	bf00      	nop
 8011eb0:	08011df5 	.word	0x08011df5
 8011eb4:	240334d4 	.word	0x240334d4

08011eb8 <_fwalk_sglue>:
 8011eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ebc:	4607      	mov	r7, r0
 8011ebe:	4688      	mov	r8, r1
 8011ec0:	4614      	mov	r4, r2
 8011ec2:	2600      	movs	r6, #0
 8011ec4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ec8:	f1b9 0901 	subs.w	r9, r9, #1
 8011ecc:	d505      	bpl.n	8011eda <_fwalk_sglue+0x22>
 8011ece:	6824      	ldr	r4, [r4, #0]
 8011ed0:	2c00      	cmp	r4, #0
 8011ed2:	d1f7      	bne.n	8011ec4 <_fwalk_sglue+0xc>
 8011ed4:	4630      	mov	r0, r6
 8011ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eda:	89ab      	ldrh	r3, [r5, #12]
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	d907      	bls.n	8011ef0 <_fwalk_sglue+0x38>
 8011ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	d003      	beq.n	8011ef0 <_fwalk_sglue+0x38>
 8011ee8:	4629      	mov	r1, r5
 8011eea:	4638      	mov	r0, r7
 8011eec:	47c0      	blx	r8
 8011eee:	4306      	orrs	r6, r0
 8011ef0:	3568      	adds	r5, #104	@ 0x68
 8011ef2:	e7e9      	b.n	8011ec8 <_fwalk_sglue+0x10>

08011ef4 <_fwrite_r>:
 8011ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ef8:	9c08      	ldr	r4, [sp, #32]
 8011efa:	468a      	mov	sl, r1
 8011efc:	4690      	mov	r8, r2
 8011efe:	fb02 f903 	mul.w	r9, r2, r3
 8011f02:	4606      	mov	r6, r0
 8011f04:	b118      	cbz	r0, 8011f0e <_fwrite_r+0x1a>
 8011f06:	6a03      	ldr	r3, [r0, #32]
 8011f08:	b90b      	cbnz	r3, 8011f0e <_fwrite_r+0x1a>
 8011f0a:	f7ff ffbd 	bl	8011e88 <__sinit>
 8011f0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f10:	07dd      	lsls	r5, r3, #31
 8011f12:	d405      	bmi.n	8011f20 <_fwrite_r+0x2c>
 8011f14:	89a3      	ldrh	r3, [r4, #12]
 8011f16:	0598      	lsls	r0, r3, #22
 8011f18:	d402      	bmi.n	8011f20 <_fwrite_r+0x2c>
 8011f1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f1c:	f000 f9fb 	bl	8012316 <__retarget_lock_acquire_recursive>
 8011f20:	89a3      	ldrh	r3, [r4, #12]
 8011f22:	0719      	lsls	r1, r3, #28
 8011f24:	d516      	bpl.n	8011f54 <_fwrite_r+0x60>
 8011f26:	6923      	ldr	r3, [r4, #16]
 8011f28:	b1a3      	cbz	r3, 8011f54 <_fwrite_r+0x60>
 8011f2a:	2500      	movs	r5, #0
 8011f2c:	454d      	cmp	r5, r9
 8011f2e:	d01f      	beq.n	8011f70 <_fwrite_r+0x7c>
 8011f30:	68a7      	ldr	r7, [r4, #8]
 8011f32:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8011f36:	3f01      	subs	r7, #1
 8011f38:	2f00      	cmp	r7, #0
 8011f3a:	60a7      	str	r7, [r4, #8]
 8011f3c:	da04      	bge.n	8011f48 <_fwrite_r+0x54>
 8011f3e:	69a3      	ldr	r3, [r4, #24]
 8011f40:	429f      	cmp	r7, r3
 8011f42:	db0f      	blt.n	8011f64 <_fwrite_r+0x70>
 8011f44:	290a      	cmp	r1, #10
 8011f46:	d00d      	beq.n	8011f64 <_fwrite_r+0x70>
 8011f48:	6823      	ldr	r3, [r4, #0]
 8011f4a:	1c5a      	adds	r2, r3, #1
 8011f4c:	6022      	str	r2, [r4, #0]
 8011f4e:	7019      	strb	r1, [r3, #0]
 8011f50:	3501      	adds	r5, #1
 8011f52:	e7eb      	b.n	8011f2c <_fwrite_r+0x38>
 8011f54:	4621      	mov	r1, r4
 8011f56:	4630      	mov	r0, r6
 8011f58:	f000 f8a8 	bl	80120ac <__swsetup_r>
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	d0e4      	beq.n	8011f2a <_fwrite_r+0x36>
 8011f60:	2500      	movs	r5, #0
 8011f62:	e005      	b.n	8011f70 <_fwrite_r+0x7c>
 8011f64:	4622      	mov	r2, r4
 8011f66:	4630      	mov	r0, r6
 8011f68:	f000 f861 	bl	801202e <__swbuf_r>
 8011f6c:	3001      	adds	r0, #1
 8011f6e:	d1ef      	bne.n	8011f50 <_fwrite_r+0x5c>
 8011f70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f72:	07da      	lsls	r2, r3, #31
 8011f74:	d405      	bmi.n	8011f82 <_fwrite_r+0x8e>
 8011f76:	89a3      	ldrh	r3, [r4, #12]
 8011f78:	059b      	lsls	r3, r3, #22
 8011f7a:	d402      	bmi.n	8011f82 <_fwrite_r+0x8e>
 8011f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f7e:	f000 f9cb 	bl	8012318 <__retarget_lock_release_recursive>
 8011f82:	fbb5 f0f8 	udiv	r0, r5, r8
 8011f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08011f8c <fwrite>:
 8011f8c:	b507      	push	{r0, r1, r2, lr}
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	4613      	mov	r3, r2
 8011f92:	460a      	mov	r2, r1
 8011f94:	4601      	mov	r1, r0
 8011f96:	4803      	ldr	r0, [pc, #12]	@ (8011fa4 <fwrite+0x18>)
 8011f98:	6800      	ldr	r0, [r0, #0]
 8011f9a:	f7ff ffab 	bl	8011ef4 <_fwrite_r>
 8011f9e:	b003      	add	sp, #12
 8011fa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fa4:	2400139c 	.word	0x2400139c

08011fa8 <__sread>:
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	460c      	mov	r4, r1
 8011fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fb0:	f000 f952 	bl	8012258 <_read_r>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	bfab      	itete	ge
 8011fb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011fba:	89a3      	ldrhlt	r3, [r4, #12]
 8011fbc:	181b      	addge	r3, r3, r0
 8011fbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011fc2:	bfac      	ite	ge
 8011fc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011fc6:	81a3      	strhlt	r3, [r4, #12]
 8011fc8:	bd10      	pop	{r4, pc}

08011fca <__swrite>:
 8011fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fce:	461f      	mov	r7, r3
 8011fd0:	898b      	ldrh	r3, [r1, #12]
 8011fd2:	05db      	lsls	r3, r3, #23
 8011fd4:	4605      	mov	r5, r0
 8011fd6:	460c      	mov	r4, r1
 8011fd8:	4616      	mov	r6, r2
 8011fda:	d505      	bpl.n	8011fe8 <__swrite+0x1e>
 8011fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fe0:	2302      	movs	r3, #2
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	f000 f926 	bl	8012234 <_lseek_r>
 8011fe8:	89a3      	ldrh	r3, [r4, #12]
 8011fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011ff2:	81a3      	strh	r3, [r4, #12]
 8011ff4:	4632      	mov	r2, r6
 8011ff6:	463b      	mov	r3, r7
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffe:	f000 b94d 	b.w	801229c <_write_r>

08012002 <__sseek>:
 8012002:	b510      	push	{r4, lr}
 8012004:	460c      	mov	r4, r1
 8012006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801200a:	f000 f913 	bl	8012234 <_lseek_r>
 801200e:	1c43      	adds	r3, r0, #1
 8012010:	89a3      	ldrh	r3, [r4, #12]
 8012012:	bf15      	itete	ne
 8012014:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012016:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801201a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801201e:	81a3      	strheq	r3, [r4, #12]
 8012020:	bf18      	it	ne
 8012022:	81a3      	strhne	r3, [r4, #12]
 8012024:	bd10      	pop	{r4, pc}

08012026 <__sclose>:
 8012026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801202a:	f000 b89d 	b.w	8012168 <_close_r>

0801202e <__swbuf_r>:
 801202e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012030:	460e      	mov	r6, r1
 8012032:	4614      	mov	r4, r2
 8012034:	4605      	mov	r5, r0
 8012036:	b118      	cbz	r0, 8012040 <__swbuf_r+0x12>
 8012038:	6a03      	ldr	r3, [r0, #32]
 801203a:	b90b      	cbnz	r3, 8012040 <__swbuf_r+0x12>
 801203c:	f7ff ff24 	bl	8011e88 <__sinit>
 8012040:	69a3      	ldr	r3, [r4, #24]
 8012042:	60a3      	str	r3, [r4, #8]
 8012044:	89a3      	ldrh	r3, [r4, #12]
 8012046:	071a      	lsls	r2, r3, #28
 8012048:	d501      	bpl.n	801204e <__swbuf_r+0x20>
 801204a:	6923      	ldr	r3, [r4, #16]
 801204c:	b943      	cbnz	r3, 8012060 <__swbuf_r+0x32>
 801204e:	4621      	mov	r1, r4
 8012050:	4628      	mov	r0, r5
 8012052:	f000 f82b 	bl	80120ac <__swsetup_r>
 8012056:	b118      	cbz	r0, 8012060 <__swbuf_r+0x32>
 8012058:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801205c:	4638      	mov	r0, r7
 801205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012060:	6823      	ldr	r3, [r4, #0]
 8012062:	6922      	ldr	r2, [r4, #16]
 8012064:	1a98      	subs	r0, r3, r2
 8012066:	6963      	ldr	r3, [r4, #20]
 8012068:	b2f6      	uxtb	r6, r6
 801206a:	4283      	cmp	r3, r0
 801206c:	4637      	mov	r7, r6
 801206e:	dc05      	bgt.n	801207c <__swbuf_r+0x4e>
 8012070:	4621      	mov	r1, r4
 8012072:	4628      	mov	r0, r5
 8012074:	f000 fa36 	bl	80124e4 <_fflush_r>
 8012078:	2800      	cmp	r0, #0
 801207a:	d1ed      	bne.n	8012058 <__swbuf_r+0x2a>
 801207c:	68a3      	ldr	r3, [r4, #8]
 801207e:	3b01      	subs	r3, #1
 8012080:	60a3      	str	r3, [r4, #8]
 8012082:	6823      	ldr	r3, [r4, #0]
 8012084:	1c5a      	adds	r2, r3, #1
 8012086:	6022      	str	r2, [r4, #0]
 8012088:	701e      	strb	r6, [r3, #0]
 801208a:	6962      	ldr	r2, [r4, #20]
 801208c:	1c43      	adds	r3, r0, #1
 801208e:	429a      	cmp	r2, r3
 8012090:	d004      	beq.n	801209c <__swbuf_r+0x6e>
 8012092:	89a3      	ldrh	r3, [r4, #12]
 8012094:	07db      	lsls	r3, r3, #31
 8012096:	d5e1      	bpl.n	801205c <__swbuf_r+0x2e>
 8012098:	2e0a      	cmp	r6, #10
 801209a:	d1df      	bne.n	801205c <__swbuf_r+0x2e>
 801209c:	4621      	mov	r1, r4
 801209e:	4628      	mov	r0, r5
 80120a0:	f000 fa20 	bl	80124e4 <_fflush_r>
 80120a4:	2800      	cmp	r0, #0
 80120a6:	d0d9      	beq.n	801205c <__swbuf_r+0x2e>
 80120a8:	e7d6      	b.n	8012058 <__swbuf_r+0x2a>
	...

080120ac <__swsetup_r>:
 80120ac:	b538      	push	{r3, r4, r5, lr}
 80120ae:	4b29      	ldr	r3, [pc, #164]	@ (8012154 <__swsetup_r+0xa8>)
 80120b0:	4605      	mov	r5, r0
 80120b2:	6818      	ldr	r0, [r3, #0]
 80120b4:	460c      	mov	r4, r1
 80120b6:	b118      	cbz	r0, 80120c0 <__swsetup_r+0x14>
 80120b8:	6a03      	ldr	r3, [r0, #32]
 80120ba:	b90b      	cbnz	r3, 80120c0 <__swsetup_r+0x14>
 80120bc:	f7ff fee4 	bl	8011e88 <__sinit>
 80120c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120c4:	0719      	lsls	r1, r3, #28
 80120c6:	d422      	bmi.n	801210e <__swsetup_r+0x62>
 80120c8:	06da      	lsls	r2, r3, #27
 80120ca:	d407      	bmi.n	80120dc <__swsetup_r+0x30>
 80120cc:	2209      	movs	r2, #9
 80120ce:	602a      	str	r2, [r5, #0]
 80120d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120d4:	81a3      	strh	r3, [r4, #12]
 80120d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120da:	e033      	b.n	8012144 <__swsetup_r+0x98>
 80120dc:	0758      	lsls	r0, r3, #29
 80120de:	d512      	bpl.n	8012106 <__swsetup_r+0x5a>
 80120e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120e2:	b141      	cbz	r1, 80120f6 <__swsetup_r+0x4a>
 80120e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120e8:	4299      	cmp	r1, r3
 80120ea:	d002      	beq.n	80120f2 <__swsetup_r+0x46>
 80120ec:	4628      	mov	r0, r5
 80120ee:	f000 f923 	bl	8012338 <_free_r>
 80120f2:	2300      	movs	r3, #0
 80120f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80120f6:	89a3      	ldrh	r3, [r4, #12]
 80120f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80120fc:	81a3      	strh	r3, [r4, #12]
 80120fe:	2300      	movs	r3, #0
 8012100:	6063      	str	r3, [r4, #4]
 8012102:	6923      	ldr	r3, [r4, #16]
 8012104:	6023      	str	r3, [r4, #0]
 8012106:	89a3      	ldrh	r3, [r4, #12]
 8012108:	f043 0308 	orr.w	r3, r3, #8
 801210c:	81a3      	strh	r3, [r4, #12]
 801210e:	6923      	ldr	r3, [r4, #16]
 8012110:	b94b      	cbnz	r3, 8012126 <__swsetup_r+0x7a>
 8012112:	89a3      	ldrh	r3, [r4, #12]
 8012114:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801211c:	d003      	beq.n	8012126 <__swsetup_r+0x7a>
 801211e:	4621      	mov	r1, r4
 8012120:	4628      	mov	r0, r5
 8012122:	f000 fa2d 	bl	8012580 <__smakebuf_r>
 8012126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801212a:	f013 0201 	ands.w	r2, r3, #1
 801212e:	d00a      	beq.n	8012146 <__swsetup_r+0x9a>
 8012130:	2200      	movs	r2, #0
 8012132:	60a2      	str	r2, [r4, #8]
 8012134:	6962      	ldr	r2, [r4, #20]
 8012136:	4252      	negs	r2, r2
 8012138:	61a2      	str	r2, [r4, #24]
 801213a:	6922      	ldr	r2, [r4, #16]
 801213c:	b942      	cbnz	r2, 8012150 <__swsetup_r+0xa4>
 801213e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012142:	d1c5      	bne.n	80120d0 <__swsetup_r+0x24>
 8012144:	bd38      	pop	{r3, r4, r5, pc}
 8012146:	0799      	lsls	r1, r3, #30
 8012148:	bf58      	it	pl
 801214a:	6962      	ldrpl	r2, [r4, #20]
 801214c:	60a2      	str	r2, [r4, #8]
 801214e:	e7f4      	b.n	801213a <__swsetup_r+0x8e>
 8012150:	2000      	movs	r0, #0
 8012152:	e7f7      	b.n	8012144 <__swsetup_r+0x98>
 8012154:	2400139c 	.word	0x2400139c

08012158 <memset>:
 8012158:	4402      	add	r2, r0
 801215a:	4603      	mov	r3, r0
 801215c:	4293      	cmp	r3, r2
 801215e:	d100      	bne.n	8012162 <memset+0xa>
 8012160:	4770      	bx	lr
 8012162:	f803 1b01 	strb.w	r1, [r3], #1
 8012166:	e7f9      	b.n	801215c <memset+0x4>

08012168 <_close_r>:
 8012168:	b538      	push	{r3, r4, r5, lr}
 801216a:	4d06      	ldr	r5, [pc, #24]	@ (8012184 <_close_r+0x1c>)
 801216c:	2300      	movs	r3, #0
 801216e:	4604      	mov	r4, r0
 8012170:	4608      	mov	r0, r1
 8012172:	602b      	str	r3, [r5, #0]
 8012174:	f7ee ff3a 	bl	8000fec <_close>
 8012178:	1c43      	adds	r3, r0, #1
 801217a:	d102      	bne.n	8012182 <_close_r+0x1a>
 801217c:	682b      	ldr	r3, [r5, #0]
 801217e:	b103      	cbz	r3, 8012182 <_close_r+0x1a>
 8012180:	6023      	str	r3, [r4, #0]
 8012182:	bd38      	pop	{r3, r4, r5, pc}
 8012184:	240334d8 	.word	0x240334d8

08012188 <_reclaim_reent>:
 8012188:	4b29      	ldr	r3, [pc, #164]	@ (8012230 <_reclaim_reent+0xa8>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	4283      	cmp	r3, r0
 801218e:	b570      	push	{r4, r5, r6, lr}
 8012190:	4604      	mov	r4, r0
 8012192:	d04b      	beq.n	801222c <_reclaim_reent+0xa4>
 8012194:	69c3      	ldr	r3, [r0, #28]
 8012196:	b1ab      	cbz	r3, 80121c4 <_reclaim_reent+0x3c>
 8012198:	68db      	ldr	r3, [r3, #12]
 801219a:	b16b      	cbz	r3, 80121b8 <_reclaim_reent+0x30>
 801219c:	2500      	movs	r5, #0
 801219e:	69e3      	ldr	r3, [r4, #28]
 80121a0:	68db      	ldr	r3, [r3, #12]
 80121a2:	5959      	ldr	r1, [r3, r5]
 80121a4:	2900      	cmp	r1, #0
 80121a6:	d13b      	bne.n	8012220 <_reclaim_reent+0x98>
 80121a8:	3504      	adds	r5, #4
 80121aa:	2d80      	cmp	r5, #128	@ 0x80
 80121ac:	d1f7      	bne.n	801219e <_reclaim_reent+0x16>
 80121ae:	69e3      	ldr	r3, [r4, #28]
 80121b0:	4620      	mov	r0, r4
 80121b2:	68d9      	ldr	r1, [r3, #12]
 80121b4:	f000 f8c0 	bl	8012338 <_free_r>
 80121b8:	69e3      	ldr	r3, [r4, #28]
 80121ba:	6819      	ldr	r1, [r3, #0]
 80121bc:	b111      	cbz	r1, 80121c4 <_reclaim_reent+0x3c>
 80121be:	4620      	mov	r0, r4
 80121c0:	f000 f8ba 	bl	8012338 <_free_r>
 80121c4:	6961      	ldr	r1, [r4, #20]
 80121c6:	b111      	cbz	r1, 80121ce <_reclaim_reent+0x46>
 80121c8:	4620      	mov	r0, r4
 80121ca:	f000 f8b5 	bl	8012338 <_free_r>
 80121ce:	69e1      	ldr	r1, [r4, #28]
 80121d0:	b111      	cbz	r1, 80121d8 <_reclaim_reent+0x50>
 80121d2:	4620      	mov	r0, r4
 80121d4:	f000 f8b0 	bl	8012338 <_free_r>
 80121d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80121da:	b111      	cbz	r1, 80121e2 <_reclaim_reent+0x5a>
 80121dc:	4620      	mov	r0, r4
 80121de:	f000 f8ab 	bl	8012338 <_free_r>
 80121e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80121e4:	b111      	cbz	r1, 80121ec <_reclaim_reent+0x64>
 80121e6:	4620      	mov	r0, r4
 80121e8:	f000 f8a6 	bl	8012338 <_free_r>
 80121ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80121ee:	b111      	cbz	r1, 80121f6 <_reclaim_reent+0x6e>
 80121f0:	4620      	mov	r0, r4
 80121f2:	f000 f8a1 	bl	8012338 <_free_r>
 80121f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80121f8:	b111      	cbz	r1, 8012200 <_reclaim_reent+0x78>
 80121fa:	4620      	mov	r0, r4
 80121fc:	f000 f89c 	bl	8012338 <_free_r>
 8012200:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012202:	b111      	cbz	r1, 801220a <_reclaim_reent+0x82>
 8012204:	4620      	mov	r0, r4
 8012206:	f000 f897 	bl	8012338 <_free_r>
 801220a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801220c:	b111      	cbz	r1, 8012214 <_reclaim_reent+0x8c>
 801220e:	4620      	mov	r0, r4
 8012210:	f000 f892 	bl	8012338 <_free_r>
 8012214:	6a23      	ldr	r3, [r4, #32]
 8012216:	b14b      	cbz	r3, 801222c <_reclaim_reent+0xa4>
 8012218:	4620      	mov	r0, r4
 801221a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801221e:	4718      	bx	r3
 8012220:	680e      	ldr	r6, [r1, #0]
 8012222:	4620      	mov	r0, r4
 8012224:	f000 f888 	bl	8012338 <_free_r>
 8012228:	4631      	mov	r1, r6
 801222a:	e7bb      	b.n	80121a4 <_reclaim_reent+0x1c>
 801222c:	bd70      	pop	{r4, r5, r6, pc}
 801222e:	bf00      	nop
 8012230:	2400139c 	.word	0x2400139c

08012234 <_lseek_r>:
 8012234:	b538      	push	{r3, r4, r5, lr}
 8012236:	4d07      	ldr	r5, [pc, #28]	@ (8012254 <_lseek_r+0x20>)
 8012238:	4604      	mov	r4, r0
 801223a:	4608      	mov	r0, r1
 801223c:	4611      	mov	r1, r2
 801223e:	2200      	movs	r2, #0
 8012240:	602a      	str	r2, [r5, #0]
 8012242:	461a      	mov	r2, r3
 8012244:	f7ee fef9 	bl	800103a <_lseek>
 8012248:	1c43      	adds	r3, r0, #1
 801224a:	d102      	bne.n	8012252 <_lseek_r+0x1e>
 801224c:	682b      	ldr	r3, [r5, #0]
 801224e:	b103      	cbz	r3, 8012252 <_lseek_r+0x1e>
 8012250:	6023      	str	r3, [r4, #0]
 8012252:	bd38      	pop	{r3, r4, r5, pc}
 8012254:	240334d8 	.word	0x240334d8

08012258 <_read_r>:
 8012258:	b538      	push	{r3, r4, r5, lr}
 801225a:	4d07      	ldr	r5, [pc, #28]	@ (8012278 <_read_r+0x20>)
 801225c:	4604      	mov	r4, r0
 801225e:	4608      	mov	r0, r1
 8012260:	4611      	mov	r1, r2
 8012262:	2200      	movs	r2, #0
 8012264:	602a      	str	r2, [r5, #0]
 8012266:	461a      	mov	r2, r3
 8012268:	f7ee fe87 	bl	8000f7a <_read>
 801226c:	1c43      	adds	r3, r0, #1
 801226e:	d102      	bne.n	8012276 <_read_r+0x1e>
 8012270:	682b      	ldr	r3, [r5, #0]
 8012272:	b103      	cbz	r3, 8012276 <_read_r+0x1e>
 8012274:	6023      	str	r3, [r4, #0]
 8012276:	bd38      	pop	{r3, r4, r5, pc}
 8012278:	240334d8 	.word	0x240334d8

0801227c <_sbrk_r>:
 801227c:	b538      	push	{r3, r4, r5, lr}
 801227e:	4d06      	ldr	r5, [pc, #24]	@ (8012298 <_sbrk_r+0x1c>)
 8012280:	2300      	movs	r3, #0
 8012282:	4604      	mov	r4, r0
 8012284:	4608      	mov	r0, r1
 8012286:	602b      	str	r3, [r5, #0]
 8012288:	f7ee fee4 	bl	8001054 <_sbrk>
 801228c:	1c43      	adds	r3, r0, #1
 801228e:	d102      	bne.n	8012296 <_sbrk_r+0x1a>
 8012290:	682b      	ldr	r3, [r5, #0]
 8012292:	b103      	cbz	r3, 8012296 <_sbrk_r+0x1a>
 8012294:	6023      	str	r3, [r4, #0]
 8012296:	bd38      	pop	{r3, r4, r5, pc}
 8012298:	240334d8 	.word	0x240334d8

0801229c <_write_r>:
 801229c:	b538      	push	{r3, r4, r5, lr}
 801229e:	4d07      	ldr	r5, [pc, #28]	@ (80122bc <_write_r+0x20>)
 80122a0:	4604      	mov	r4, r0
 80122a2:	4608      	mov	r0, r1
 80122a4:	4611      	mov	r1, r2
 80122a6:	2200      	movs	r2, #0
 80122a8:	602a      	str	r2, [r5, #0]
 80122aa:	461a      	mov	r2, r3
 80122ac:	f7ee fe82 	bl	8000fb4 <_write>
 80122b0:	1c43      	adds	r3, r0, #1
 80122b2:	d102      	bne.n	80122ba <_write_r+0x1e>
 80122b4:	682b      	ldr	r3, [r5, #0]
 80122b6:	b103      	cbz	r3, 80122ba <_write_r+0x1e>
 80122b8:	6023      	str	r3, [r4, #0]
 80122ba:	bd38      	pop	{r3, r4, r5, pc}
 80122bc:	240334d8 	.word	0x240334d8

080122c0 <__errno>:
 80122c0:	4b01      	ldr	r3, [pc, #4]	@ (80122c8 <__errno+0x8>)
 80122c2:	6818      	ldr	r0, [r3, #0]
 80122c4:	4770      	bx	lr
 80122c6:	bf00      	nop
 80122c8:	2400139c 	.word	0x2400139c

080122cc <__libc_init_array>:
 80122cc:	b570      	push	{r4, r5, r6, lr}
 80122ce:	4d0d      	ldr	r5, [pc, #52]	@ (8012304 <__libc_init_array+0x38>)
 80122d0:	4c0d      	ldr	r4, [pc, #52]	@ (8012308 <__libc_init_array+0x3c>)
 80122d2:	1b64      	subs	r4, r4, r5
 80122d4:	10a4      	asrs	r4, r4, #2
 80122d6:	2600      	movs	r6, #0
 80122d8:	42a6      	cmp	r6, r4
 80122da:	d109      	bne.n	80122f0 <__libc_init_array+0x24>
 80122dc:	4d0b      	ldr	r5, [pc, #44]	@ (801230c <__libc_init_array+0x40>)
 80122de:	4c0c      	ldr	r4, [pc, #48]	@ (8012310 <__libc_init_array+0x44>)
 80122e0:	f000 f9ac 	bl	801263c <_init>
 80122e4:	1b64      	subs	r4, r4, r5
 80122e6:	10a4      	asrs	r4, r4, #2
 80122e8:	2600      	movs	r6, #0
 80122ea:	42a6      	cmp	r6, r4
 80122ec:	d105      	bne.n	80122fa <__libc_init_array+0x2e>
 80122ee:	bd70      	pop	{r4, r5, r6, pc}
 80122f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80122f4:	4798      	blx	r3
 80122f6:	3601      	adds	r6, #1
 80122f8:	e7ee      	b.n	80122d8 <__libc_init_array+0xc>
 80122fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80122fe:	4798      	blx	r3
 8012300:	3601      	adds	r6, #1
 8012302:	e7f2      	b.n	80122ea <__libc_init_array+0x1e>
 8012304:	080140b8 	.word	0x080140b8
 8012308:	080140b8 	.word	0x080140b8
 801230c:	080140b8 	.word	0x080140b8
 8012310:	080140f8 	.word	0x080140f8

08012314 <__retarget_lock_init_recursive>:
 8012314:	4770      	bx	lr

08012316 <__retarget_lock_acquire_recursive>:
 8012316:	4770      	bx	lr

08012318 <__retarget_lock_release_recursive>:
 8012318:	4770      	bx	lr

0801231a <memcpy>:
 801231a:	440a      	add	r2, r1
 801231c:	4291      	cmp	r1, r2
 801231e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012322:	d100      	bne.n	8012326 <memcpy+0xc>
 8012324:	4770      	bx	lr
 8012326:	b510      	push	{r4, lr}
 8012328:	f811 4b01 	ldrb.w	r4, [r1], #1
 801232c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012330:	4291      	cmp	r1, r2
 8012332:	d1f9      	bne.n	8012328 <memcpy+0xe>
 8012334:	bd10      	pop	{r4, pc}
	...

08012338 <_free_r>:
 8012338:	b538      	push	{r3, r4, r5, lr}
 801233a:	4605      	mov	r5, r0
 801233c:	2900      	cmp	r1, #0
 801233e:	d041      	beq.n	80123c4 <_free_r+0x8c>
 8012340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012344:	1f0c      	subs	r4, r1, #4
 8012346:	2b00      	cmp	r3, #0
 8012348:	bfb8      	it	lt
 801234a:	18e4      	addlt	r4, r4, r3
 801234c:	f7ff fcce 	bl	8011cec <__malloc_lock>
 8012350:	4a1d      	ldr	r2, [pc, #116]	@ (80123c8 <_free_r+0x90>)
 8012352:	6813      	ldr	r3, [r2, #0]
 8012354:	b933      	cbnz	r3, 8012364 <_free_r+0x2c>
 8012356:	6063      	str	r3, [r4, #4]
 8012358:	6014      	str	r4, [r2, #0]
 801235a:	4628      	mov	r0, r5
 801235c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012360:	f7ff bcca 	b.w	8011cf8 <__malloc_unlock>
 8012364:	42a3      	cmp	r3, r4
 8012366:	d908      	bls.n	801237a <_free_r+0x42>
 8012368:	6820      	ldr	r0, [r4, #0]
 801236a:	1821      	adds	r1, r4, r0
 801236c:	428b      	cmp	r3, r1
 801236e:	bf01      	itttt	eq
 8012370:	6819      	ldreq	r1, [r3, #0]
 8012372:	685b      	ldreq	r3, [r3, #4]
 8012374:	1809      	addeq	r1, r1, r0
 8012376:	6021      	streq	r1, [r4, #0]
 8012378:	e7ed      	b.n	8012356 <_free_r+0x1e>
 801237a:	461a      	mov	r2, r3
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	b10b      	cbz	r3, 8012384 <_free_r+0x4c>
 8012380:	42a3      	cmp	r3, r4
 8012382:	d9fa      	bls.n	801237a <_free_r+0x42>
 8012384:	6811      	ldr	r1, [r2, #0]
 8012386:	1850      	adds	r0, r2, r1
 8012388:	42a0      	cmp	r0, r4
 801238a:	d10b      	bne.n	80123a4 <_free_r+0x6c>
 801238c:	6820      	ldr	r0, [r4, #0]
 801238e:	4401      	add	r1, r0
 8012390:	1850      	adds	r0, r2, r1
 8012392:	4283      	cmp	r3, r0
 8012394:	6011      	str	r1, [r2, #0]
 8012396:	d1e0      	bne.n	801235a <_free_r+0x22>
 8012398:	6818      	ldr	r0, [r3, #0]
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	6053      	str	r3, [r2, #4]
 801239e:	4408      	add	r0, r1
 80123a0:	6010      	str	r0, [r2, #0]
 80123a2:	e7da      	b.n	801235a <_free_r+0x22>
 80123a4:	d902      	bls.n	80123ac <_free_r+0x74>
 80123a6:	230c      	movs	r3, #12
 80123a8:	602b      	str	r3, [r5, #0]
 80123aa:	e7d6      	b.n	801235a <_free_r+0x22>
 80123ac:	6820      	ldr	r0, [r4, #0]
 80123ae:	1821      	adds	r1, r4, r0
 80123b0:	428b      	cmp	r3, r1
 80123b2:	bf04      	itt	eq
 80123b4:	6819      	ldreq	r1, [r3, #0]
 80123b6:	685b      	ldreq	r3, [r3, #4]
 80123b8:	6063      	str	r3, [r4, #4]
 80123ba:	bf04      	itt	eq
 80123bc:	1809      	addeq	r1, r1, r0
 80123be:	6021      	streq	r1, [r4, #0]
 80123c0:	6054      	str	r4, [r2, #4]
 80123c2:	e7ca      	b.n	801235a <_free_r+0x22>
 80123c4:	bd38      	pop	{r3, r4, r5, pc}
 80123c6:	bf00      	nop
 80123c8:	24033398 	.word	0x24033398

080123cc <_malloc_usable_size_r>:
 80123cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123d0:	1f18      	subs	r0, r3, #4
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	bfbc      	itt	lt
 80123d6:	580b      	ldrlt	r3, [r1, r0]
 80123d8:	18c0      	addlt	r0, r0, r3
 80123da:	4770      	bx	lr

080123dc <__sflush_r>:
 80123dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80123e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123e4:	0716      	lsls	r6, r2, #28
 80123e6:	4605      	mov	r5, r0
 80123e8:	460c      	mov	r4, r1
 80123ea:	d454      	bmi.n	8012496 <__sflush_r+0xba>
 80123ec:	684b      	ldr	r3, [r1, #4]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	dc02      	bgt.n	80123f8 <__sflush_r+0x1c>
 80123f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	dd48      	ble.n	801248a <__sflush_r+0xae>
 80123f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80123fa:	2e00      	cmp	r6, #0
 80123fc:	d045      	beq.n	801248a <__sflush_r+0xae>
 80123fe:	2300      	movs	r3, #0
 8012400:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012404:	682f      	ldr	r7, [r5, #0]
 8012406:	6a21      	ldr	r1, [r4, #32]
 8012408:	602b      	str	r3, [r5, #0]
 801240a:	d030      	beq.n	801246e <__sflush_r+0x92>
 801240c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801240e:	89a3      	ldrh	r3, [r4, #12]
 8012410:	0759      	lsls	r1, r3, #29
 8012412:	d505      	bpl.n	8012420 <__sflush_r+0x44>
 8012414:	6863      	ldr	r3, [r4, #4]
 8012416:	1ad2      	subs	r2, r2, r3
 8012418:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801241a:	b10b      	cbz	r3, 8012420 <__sflush_r+0x44>
 801241c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801241e:	1ad2      	subs	r2, r2, r3
 8012420:	2300      	movs	r3, #0
 8012422:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012424:	6a21      	ldr	r1, [r4, #32]
 8012426:	4628      	mov	r0, r5
 8012428:	47b0      	blx	r6
 801242a:	1c43      	adds	r3, r0, #1
 801242c:	89a3      	ldrh	r3, [r4, #12]
 801242e:	d106      	bne.n	801243e <__sflush_r+0x62>
 8012430:	6829      	ldr	r1, [r5, #0]
 8012432:	291d      	cmp	r1, #29
 8012434:	d82b      	bhi.n	801248e <__sflush_r+0xb2>
 8012436:	4a2a      	ldr	r2, [pc, #168]	@ (80124e0 <__sflush_r+0x104>)
 8012438:	410a      	asrs	r2, r1
 801243a:	07d6      	lsls	r6, r2, #31
 801243c:	d427      	bmi.n	801248e <__sflush_r+0xb2>
 801243e:	2200      	movs	r2, #0
 8012440:	6062      	str	r2, [r4, #4]
 8012442:	04d9      	lsls	r1, r3, #19
 8012444:	6922      	ldr	r2, [r4, #16]
 8012446:	6022      	str	r2, [r4, #0]
 8012448:	d504      	bpl.n	8012454 <__sflush_r+0x78>
 801244a:	1c42      	adds	r2, r0, #1
 801244c:	d101      	bne.n	8012452 <__sflush_r+0x76>
 801244e:	682b      	ldr	r3, [r5, #0]
 8012450:	b903      	cbnz	r3, 8012454 <__sflush_r+0x78>
 8012452:	6560      	str	r0, [r4, #84]	@ 0x54
 8012454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012456:	602f      	str	r7, [r5, #0]
 8012458:	b1b9      	cbz	r1, 801248a <__sflush_r+0xae>
 801245a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801245e:	4299      	cmp	r1, r3
 8012460:	d002      	beq.n	8012468 <__sflush_r+0x8c>
 8012462:	4628      	mov	r0, r5
 8012464:	f7ff ff68 	bl	8012338 <_free_r>
 8012468:	2300      	movs	r3, #0
 801246a:	6363      	str	r3, [r4, #52]	@ 0x34
 801246c:	e00d      	b.n	801248a <__sflush_r+0xae>
 801246e:	2301      	movs	r3, #1
 8012470:	4628      	mov	r0, r5
 8012472:	47b0      	blx	r6
 8012474:	4602      	mov	r2, r0
 8012476:	1c50      	adds	r0, r2, #1
 8012478:	d1c9      	bne.n	801240e <__sflush_r+0x32>
 801247a:	682b      	ldr	r3, [r5, #0]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d0c6      	beq.n	801240e <__sflush_r+0x32>
 8012480:	2b1d      	cmp	r3, #29
 8012482:	d001      	beq.n	8012488 <__sflush_r+0xac>
 8012484:	2b16      	cmp	r3, #22
 8012486:	d11e      	bne.n	80124c6 <__sflush_r+0xea>
 8012488:	602f      	str	r7, [r5, #0]
 801248a:	2000      	movs	r0, #0
 801248c:	e022      	b.n	80124d4 <__sflush_r+0xf8>
 801248e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012492:	b21b      	sxth	r3, r3
 8012494:	e01b      	b.n	80124ce <__sflush_r+0xf2>
 8012496:	690f      	ldr	r7, [r1, #16]
 8012498:	2f00      	cmp	r7, #0
 801249a:	d0f6      	beq.n	801248a <__sflush_r+0xae>
 801249c:	0793      	lsls	r3, r2, #30
 801249e:	680e      	ldr	r6, [r1, #0]
 80124a0:	bf08      	it	eq
 80124a2:	694b      	ldreq	r3, [r1, #20]
 80124a4:	600f      	str	r7, [r1, #0]
 80124a6:	bf18      	it	ne
 80124a8:	2300      	movne	r3, #0
 80124aa:	eba6 0807 	sub.w	r8, r6, r7
 80124ae:	608b      	str	r3, [r1, #8]
 80124b0:	f1b8 0f00 	cmp.w	r8, #0
 80124b4:	dde9      	ble.n	801248a <__sflush_r+0xae>
 80124b6:	6a21      	ldr	r1, [r4, #32]
 80124b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80124ba:	4643      	mov	r3, r8
 80124bc:	463a      	mov	r2, r7
 80124be:	4628      	mov	r0, r5
 80124c0:	47b0      	blx	r6
 80124c2:	2800      	cmp	r0, #0
 80124c4:	dc08      	bgt.n	80124d8 <__sflush_r+0xfc>
 80124c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124ce:	81a3      	strh	r3, [r4, #12]
 80124d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80124d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d8:	4407      	add	r7, r0
 80124da:	eba8 0800 	sub.w	r8, r8, r0
 80124de:	e7e7      	b.n	80124b0 <__sflush_r+0xd4>
 80124e0:	dfbffffe 	.word	0xdfbffffe

080124e4 <_fflush_r>:
 80124e4:	b538      	push	{r3, r4, r5, lr}
 80124e6:	690b      	ldr	r3, [r1, #16]
 80124e8:	4605      	mov	r5, r0
 80124ea:	460c      	mov	r4, r1
 80124ec:	b913      	cbnz	r3, 80124f4 <_fflush_r+0x10>
 80124ee:	2500      	movs	r5, #0
 80124f0:	4628      	mov	r0, r5
 80124f2:	bd38      	pop	{r3, r4, r5, pc}
 80124f4:	b118      	cbz	r0, 80124fe <_fflush_r+0x1a>
 80124f6:	6a03      	ldr	r3, [r0, #32]
 80124f8:	b90b      	cbnz	r3, 80124fe <_fflush_r+0x1a>
 80124fa:	f7ff fcc5 	bl	8011e88 <__sinit>
 80124fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d0f3      	beq.n	80124ee <_fflush_r+0xa>
 8012506:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012508:	07d0      	lsls	r0, r2, #31
 801250a:	d404      	bmi.n	8012516 <_fflush_r+0x32>
 801250c:	0599      	lsls	r1, r3, #22
 801250e:	d402      	bmi.n	8012516 <_fflush_r+0x32>
 8012510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012512:	f7ff ff00 	bl	8012316 <__retarget_lock_acquire_recursive>
 8012516:	4628      	mov	r0, r5
 8012518:	4621      	mov	r1, r4
 801251a:	f7ff ff5f 	bl	80123dc <__sflush_r>
 801251e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012520:	07da      	lsls	r2, r3, #31
 8012522:	4605      	mov	r5, r0
 8012524:	d4e4      	bmi.n	80124f0 <_fflush_r+0xc>
 8012526:	89a3      	ldrh	r3, [r4, #12]
 8012528:	059b      	lsls	r3, r3, #22
 801252a:	d4e1      	bmi.n	80124f0 <_fflush_r+0xc>
 801252c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801252e:	f7ff fef3 	bl	8012318 <__retarget_lock_release_recursive>
 8012532:	e7dd      	b.n	80124f0 <_fflush_r+0xc>

08012534 <__swhatbuf_r>:
 8012534:	b570      	push	{r4, r5, r6, lr}
 8012536:	460c      	mov	r4, r1
 8012538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801253c:	2900      	cmp	r1, #0
 801253e:	b096      	sub	sp, #88	@ 0x58
 8012540:	4615      	mov	r5, r2
 8012542:	461e      	mov	r6, r3
 8012544:	da0d      	bge.n	8012562 <__swhatbuf_r+0x2e>
 8012546:	89a3      	ldrh	r3, [r4, #12]
 8012548:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801254c:	f04f 0100 	mov.w	r1, #0
 8012550:	bf14      	ite	ne
 8012552:	2340      	movne	r3, #64	@ 0x40
 8012554:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012558:	2000      	movs	r0, #0
 801255a:	6031      	str	r1, [r6, #0]
 801255c:	602b      	str	r3, [r5, #0]
 801255e:	b016      	add	sp, #88	@ 0x58
 8012560:	bd70      	pop	{r4, r5, r6, pc}
 8012562:	466a      	mov	r2, sp
 8012564:	f000 f848 	bl	80125f8 <_fstat_r>
 8012568:	2800      	cmp	r0, #0
 801256a:	dbec      	blt.n	8012546 <__swhatbuf_r+0x12>
 801256c:	9901      	ldr	r1, [sp, #4]
 801256e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012572:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012576:	4259      	negs	r1, r3
 8012578:	4159      	adcs	r1, r3
 801257a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801257e:	e7eb      	b.n	8012558 <__swhatbuf_r+0x24>

08012580 <__smakebuf_r>:
 8012580:	898b      	ldrh	r3, [r1, #12]
 8012582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012584:	079d      	lsls	r5, r3, #30
 8012586:	4606      	mov	r6, r0
 8012588:	460c      	mov	r4, r1
 801258a:	d507      	bpl.n	801259c <__smakebuf_r+0x1c>
 801258c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012590:	6023      	str	r3, [r4, #0]
 8012592:	6123      	str	r3, [r4, #16]
 8012594:	2301      	movs	r3, #1
 8012596:	6163      	str	r3, [r4, #20]
 8012598:	b003      	add	sp, #12
 801259a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801259c:	ab01      	add	r3, sp, #4
 801259e:	466a      	mov	r2, sp
 80125a0:	f7ff ffc8 	bl	8012534 <__swhatbuf_r>
 80125a4:	9f00      	ldr	r7, [sp, #0]
 80125a6:	4605      	mov	r5, r0
 80125a8:	4639      	mov	r1, r7
 80125aa:	4630      	mov	r0, r6
 80125ac:	f7ff fb1e 	bl	8011bec <_malloc_r>
 80125b0:	b948      	cbnz	r0, 80125c6 <__smakebuf_r+0x46>
 80125b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125b6:	059a      	lsls	r2, r3, #22
 80125b8:	d4ee      	bmi.n	8012598 <__smakebuf_r+0x18>
 80125ba:	f023 0303 	bic.w	r3, r3, #3
 80125be:	f043 0302 	orr.w	r3, r3, #2
 80125c2:	81a3      	strh	r3, [r4, #12]
 80125c4:	e7e2      	b.n	801258c <__smakebuf_r+0xc>
 80125c6:	89a3      	ldrh	r3, [r4, #12]
 80125c8:	6020      	str	r0, [r4, #0]
 80125ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125ce:	81a3      	strh	r3, [r4, #12]
 80125d0:	9b01      	ldr	r3, [sp, #4]
 80125d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80125d6:	b15b      	cbz	r3, 80125f0 <__smakebuf_r+0x70>
 80125d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125dc:	4630      	mov	r0, r6
 80125de:	f000 f81d 	bl	801261c <_isatty_r>
 80125e2:	b128      	cbz	r0, 80125f0 <__smakebuf_r+0x70>
 80125e4:	89a3      	ldrh	r3, [r4, #12]
 80125e6:	f023 0303 	bic.w	r3, r3, #3
 80125ea:	f043 0301 	orr.w	r3, r3, #1
 80125ee:	81a3      	strh	r3, [r4, #12]
 80125f0:	89a3      	ldrh	r3, [r4, #12]
 80125f2:	431d      	orrs	r5, r3
 80125f4:	81a5      	strh	r5, [r4, #12]
 80125f6:	e7cf      	b.n	8012598 <__smakebuf_r+0x18>

080125f8 <_fstat_r>:
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	4d07      	ldr	r5, [pc, #28]	@ (8012618 <_fstat_r+0x20>)
 80125fc:	2300      	movs	r3, #0
 80125fe:	4604      	mov	r4, r0
 8012600:	4608      	mov	r0, r1
 8012602:	4611      	mov	r1, r2
 8012604:	602b      	str	r3, [r5, #0]
 8012606:	f7ee fcfd 	bl	8001004 <_fstat>
 801260a:	1c43      	adds	r3, r0, #1
 801260c:	d102      	bne.n	8012614 <_fstat_r+0x1c>
 801260e:	682b      	ldr	r3, [r5, #0]
 8012610:	b103      	cbz	r3, 8012614 <_fstat_r+0x1c>
 8012612:	6023      	str	r3, [r4, #0]
 8012614:	bd38      	pop	{r3, r4, r5, pc}
 8012616:	bf00      	nop
 8012618:	240334d8 	.word	0x240334d8

0801261c <_isatty_r>:
 801261c:	b538      	push	{r3, r4, r5, lr}
 801261e:	4d06      	ldr	r5, [pc, #24]	@ (8012638 <_isatty_r+0x1c>)
 8012620:	2300      	movs	r3, #0
 8012622:	4604      	mov	r4, r0
 8012624:	4608      	mov	r0, r1
 8012626:	602b      	str	r3, [r5, #0]
 8012628:	f7ee fcfc 	bl	8001024 <_isatty>
 801262c:	1c43      	adds	r3, r0, #1
 801262e:	d102      	bne.n	8012636 <_isatty_r+0x1a>
 8012630:	682b      	ldr	r3, [r5, #0]
 8012632:	b103      	cbz	r3, 8012636 <_isatty_r+0x1a>
 8012634:	6023      	str	r3, [r4, #0]
 8012636:	bd38      	pop	{r3, r4, r5, pc}
 8012638:	240334d8 	.word	0x240334d8

0801263c <_init>:
 801263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263e:	bf00      	nop
 8012640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012642:	bc08      	pop	{r3}
 8012644:	469e      	mov	lr, r3
 8012646:	4770      	bx	lr

08012648 <_fini>:
 8012648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264a:	bf00      	nop
 801264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801264e:	bc08      	pop	{r3}
 8012650:	469e      	mov	lr, r3
 8012652:	4770      	bx	lr
