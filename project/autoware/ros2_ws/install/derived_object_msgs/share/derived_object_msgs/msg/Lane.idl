// generated from rosidl_adapter/resource/msg.idl.em
// with input from derived_object_msgs/msg/Lane.msg
// generated code does not contain a copyright notice


module derived_object_msgs {
  module msg {
    module Lane_Constants {
      const uint8 LANE_QUALITY_INVALID = 0;
      const uint8 LANE_QUALITY_UNKNOWN = 1;
      const uint8 LANE_QUALITY_NOT_AVAILABLE = 2;
      const uint8 LANE_QUALITY_0 = 3;
      const uint8 LANE_QUALITY_1 = 4;
      const uint8 LANE_QUALITY_2 = 5;
      const uint8 LANE_QUALITY_3 = 6;
      const uint8 LANE_QUALITY_4 = 7;
      const uint8 LANE_QUALITY_5 = 8;
      const uint8 LANE_QUALITY_6 = 9;
      const uint8 LANE_QUALITY_7 = 10;
      const uint8 LANE_QUALITY_8 = 11;
      const uint8 LANE_QUALITY_9 = 12;
      const uint8 LANE_QUALITY_KIND_COUNT = 13;
      const uint8 LANE_MARKER_INVALID = 0;
      const uint8 LANE_MARKER_UNKNOWN = 1;
      const uint8 LANE_MARKER_NOT_AVAILABLE = 2;
      const uint8 LANE_MARKER_NONE = 3;
      const uint8 LANE_MARKER_SOLID = 4;
      const uint8 LANE_MARKER_DASHED = 5;
      const uint8 LANE_MARKER_VIRTUAL = 6;
      const uint8 LANE_MARKER_DOTS = 7;
      const uint8 LANE_MARKER_ROAD_EDGE = 8;
      const uint8 LANE_MARKER_DOUBLE_LINE = 9;
      const uint8 LANE_MARKER_KIND_COUNT = 10;
      const uint8 LANE_CURVE_MODEL_INVALID = 0;
      const uint8 LANE_CURVE_MODEL_UNKNOWN = 1;
      const uint8 LANE_CURVE_MODEL_NOT_AVAILABLE = 2;
      const uint8 LANE_CURVE_MODEL_LINEAR = 3;
      const uint8 LANE_CURVE_MODEL_PARABOLIC = 4;
      const uint8 LANE_CURVE_MODEL_3D = 5;
      const uint8 LANE_CURVE_MODEL_KIND_COUNT = 6;
    };
    @verbatim (language="comment", text=
      "Lane Definition Message" "\n"
      "Contains information on a single lane marker")
    struct Lane {
      @verbatim (language="comment", text=
        "Visual quality of lane marker")
      uint8 quality;

      @verbatim (language="comment", text=
        "Solid, dashed, ...")
      uint8 marker_kind;

      @verbatim (language="comment", text=
        "Order of equation")
      uint8 curve_model_kind;

      @verbatim (language="comment", text=
        "Lateral distance from sensor to marker (m)")
      double marker_offset;

      @verbatim (language="comment", text=
        "Angle of marker relative to sensor (rad)")
      double heading_angle;

      @verbatim (language="comment", text=
        "Curvature of the lane marker at the camera (1/m)")
      double curvature;

      @verbatim (language="comment", text=
        "Amount curvature changes as you move away from the camera (1/m^2)")
      double curvature_derivative;

      @verbatim (language="comment", text=
        "Width of the painted marker (not distance between lane markers) (m)")
      double marker_width;

      @verbatim (language="comment", text=
        "Physical view range of the lane mark (m)")
      double view_range;
    };
  };
};
