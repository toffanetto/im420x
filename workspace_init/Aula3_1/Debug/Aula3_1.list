
Aula3_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b54  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08009df4  08009df4  0000adf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e80  08009e80  0000ae80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e88  08009e88  0000ae88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009e8c  08009e8c  0000ae8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  08009e90  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  08009ef0  0000b060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  08009f50  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  24000120  08009fb0  0000b120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000940  08009fb0  0000b940  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2d6  00000000  00000000  0000b14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e1  00000000  00000000  0002a424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0002de08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000113e  00000000  00000000  0002f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a5de  00000000  00000000  0003056e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f316  00000000  00000000  0006ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016db2d  00000000  00000000  00089e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f798f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000636c  00000000  00000000  001f79d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001fdd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009ddc 	.word	0x08009ddc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08009ddc 	.word	0x08009ddc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_ETH_Init+0x80>)
 8000686:	4a1f      	ldr	r2, [pc, #124]	@ (8000704 <MX_ETH_Init+0x84>)
 8000688:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800068a:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <MX_ETH_Init+0x88>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000690:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <MX_ETH_Init+0x88>)
 8000692:	2280      	movs	r2, #128	@ 0x80
 8000694:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_ETH_Init+0x88>)
 8000698:	22e1      	movs	r2, #225	@ 0xe1
 800069a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800069c:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_ETH_Init+0x88>)
 800069e:	2200      	movs	r2, #0
 80006a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006a2:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <MX_ETH_Init+0x88>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006a8:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_ETH_Init+0x88>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_ETH_Init+0x80>)
 80006b0:	4a15      	ldr	r2, [pc, #84]	@ (8000708 <MX_ETH_Init+0x88>)
 80006b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_ETH_Init+0x80>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_ETH_Init+0x80>)
 80006bc:	4a13      	ldr	r2, [pc, #76]	@ (800070c <MX_ETH_Init+0x8c>)
 80006be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_ETH_Init+0x80>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <MX_ETH_Init+0x90>)
 80006c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_ETH_Init+0x80>)
 80006c8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006ce:	480c      	ldr	r0, [pc, #48]	@ (8000700 <MX_ETH_Init+0x80>)
 80006d0:	f001 fd10 	bl	80020f4 <HAL_ETH_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 faa9 	bl	8000c30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006de:	2238      	movs	r2, #56	@ 0x38
 80006e0:	2100      	movs	r1, #0
 80006e2:	480c      	ldr	r0, [pc, #48]	@ (8000714 <MX_ETH_Init+0x94>)
 80006e4:	f008 fefa 	bl	80094dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <MX_ETH_Init+0x94>)
 80006ea:	2221      	movs	r2, #33	@ 0x21
 80006ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_ETH_Init+0x94>)
 80006f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006f6:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_ETH_Init+0x94>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	24000174 	.word	0x24000174
 8000704:	40028000 	.word	0x40028000
 8000708:	24000224 	.word	0x24000224
 800070c:	240000c0 	.word	0x240000c0
 8000710:	24000060 	.word	0x24000060
 8000714:	2400013c 	.word	0x2400013c

08000718 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	@ 0x38
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a59      	ldr	r2, [pc, #356]	@ (800089c <HAL_ETH_MspInit+0x184>)
 8000736:	4293      	cmp	r3, r2
 8000738:	f040 80ab 	bne.w	8000892 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800073c:	4b58      	ldr	r3, [pc, #352]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 800073e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000742:	4a57      	ldr	r2, [pc, #348]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 8000744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000748:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800074c:	4b54      	ldr	r3, [pc, #336]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 800074e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800075a:	4b51      	ldr	r3, [pc, #324]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 800075c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000760:	4a4f      	ldr	r2, [pc, #316]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 8000762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000766:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800076a:	4b4d      	ldr	r3, [pc, #308]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 800076c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000774:	61fb      	str	r3, [r7, #28]
 8000776:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000778:	4b49      	ldr	r3, [pc, #292]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 800077a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800077e:	4a48      	ldr	r2, [pc, #288]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 8000780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000784:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000788:	4b45      	ldr	r3, [pc, #276]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 800078a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b42      	ldr	r3, [pc, #264]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	4a40      	ldr	r2, [pc, #256]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a6:	4b3e      	ldr	r3, [pc, #248]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b3a      	ldr	r3, [pc, #232]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ba:	4a39      	ldr	r2, [pc, #228]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007c4:	4b36      	ldr	r3, [pc, #216]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b33      	ldr	r3, [pc, #204]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a31      	ldr	r2, [pc, #196]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 80007da:	f043 0302 	orr.w	r3, r3, #2
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b2f      	ldr	r3, [pc, #188]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 0302 	and.w	r3, r3, #2
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f0:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	4a2a      	ldr	r2, [pc, #168]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000800:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <HAL_ETH_MspInit+0x188>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800080e:	2332      	movs	r3, #50	@ 0x32
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081e:	230b      	movs	r3, #11
 8000820:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000826:	4619      	mov	r1, r3
 8000828:	481e      	ldr	r0, [pc, #120]	@ (80008a4 <HAL_ETH_MspInit+0x18c>)
 800082a:	f002 f897 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800082e:	2386      	movs	r3, #134	@ 0x86
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800083e:	230b      	movs	r3, #11
 8000840:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000846:	4619      	mov	r1, r3
 8000848:	4817      	ldr	r0, [pc, #92]	@ (80008a8 <HAL_ETH_MspInit+0x190>)
 800084a:	f002 f887 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800084e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000860:	230b      	movs	r3, #11
 8000862:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000868:	4619      	mov	r1, r3
 800086a:	4810      	ldr	r0, [pc, #64]	@ (80008ac <HAL_ETH_MspInit+0x194>)
 800086c:	f002 f876 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000870:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000882:	230b      	movs	r3, #11
 8000884:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088a:	4619      	mov	r1, r3
 800088c:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <HAL_ETH_MspInit+0x198>)
 800088e:	f002 f865 	bl	800295c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3738      	adds	r7, #56	@ 0x38
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40028000 	.word	0x40028000
 80008a0:	58024400 	.word	0x58024400
 80008a4:	58020800 	.word	0x58020800
 80008a8:	58020000 	.word	0x58020000
 80008ac:	58020400 	.word	0x58020400
 80008b0:	58021800 	.word	0x58021800

080008b4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	@ 0x30
 80008b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b62      	ldr	r3, [pc, #392]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d0:	4a60      	ldr	r2, [pc, #384]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008da:	4b5e      	ldr	r3, [pc, #376]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e8:	4b5a      	ldr	r3, [pc, #360]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ee:	4a59      	ldr	r2, [pc, #356]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f8:	4b56      	ldr	r3, [pc, #344]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 80008fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b53      	ldr	r3, [pc, #332]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	4a51      	ldr	r2, [pc, #324]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000916:	4b4f      	ldr	r3, [pc, #316]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000924:	4b4b      	ldr	r3, [pc, #300]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092a:	4a4a      	ldr	r2, [pc, #296]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000934:	4b47      	ldr	r3, [pc, #284]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	4b44      	ldr	r3, [pc, #272]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000948:	4a42      	ldr	r2, [pc, #264]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 800094a:	f043 0308 	orr.w	r3, r3, #8
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000952:	4b40      	ldr	r3, [pc, #256]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000960:	4b3c      	ldr	r3, [pc, #240]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a3b      	ldr	r2, [pc, #236]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b38      	ldr	r3, [pc, #224]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097e:	4b35      	ldr	r3, [pc, #212]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	4a33      	ldr	r2, [pc, #204]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098e:	4b31      	ldr	r3, [pc, #196]	@ (8000a54 <MX_GPIO_Init+0x1a0>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	f003 0310 	and.w	r3, r3, #16
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009a2:	482d      	ldr	r0, [pc, #180]	@ (8000a58 <MX_GPIO_Init+0x1a4>)
 80009a4:	f002 f98a 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ae:	482b      	ldr	r0, [pc, #172]	@ (8000a5c <MX_GPIO_Init+0x1a8>)
 80009b0:	f002 f984 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2102      	movs	r1, #2
 80009b8:	4829      	ldr	r0, [pc, #164]	@ (8000a60 <MX_GPIO_Init+0x1ac>)
 80009ba:	f002 f97f 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4824      	ldr	r0, [pc, #144]	@ (8000a64 <MX_GPIO_Init+0x1b0>)
 80009d4:	f001 ffc2 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009d8:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4819      	ldr	r0, [pc, #100]	@ (8000a58 <MX_GPIO_Init+0x1a4>)
 80009f2:	f001 ffb3 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4813      	ldr	r0, [pc, #76]	@ (8000a5c <MX_GPIO_Init+0x1a8>)
 8000a10:	f001 ffa4 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a14:	2380      	movs	r3, #128	@ 0x80
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	480f      	ldr	r0, [pc, #60]	@ (8000a68 <MX_GPIO_Init+0x1b4>)
 8000a2a:	f001 ff97 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <MX_GPIO_Init+0x1ac>)
 8000a46:	f001 ff89 	bl	800295c <HAL_GPIO_Init>

}
 8000a4a:	bf00      	nop
 8000a4c:	3730      	adds	r7, #48	@ 0x30
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	58024400 	.word	0x58024400
 8000a58:	58020400 	.word	0x58020400
 8000a5c:	58020c00 	.word	0x58020c00
 8000a60:	58021000 	.word	0x58021000
 8000a64:	58020800 	.word	0x58020800
 8000a68:	58021800 	.word	0x58021800

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a70:	f000 fbf6 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a74:	f000 f81a 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a78:	f7ff ff1c 	bl	80008b4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a7c:	f7ff fe00 	bl	8000680 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a80:	f000 fa58 	bl	8000f34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a84:	f000 fb14 	bl	80010b0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000a88:	f000 f9f4 	bl	8000e74 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <main+0x34>)
 8000a8e:	f005 f92d 	bl	8005cec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart3, &ucRx, 1);
 8000a92:	2201      	movs	r2, #1
 8000a94:	4903      	ldr	r1, [pc, #12]	@ (8000aa4 <main+0x38>)
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <main+0x3c>)
 8000a98:	f005 fd06 	bl	80064a8 <HAL_UART_Receive_IT>
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <main+0x30>
 8000aa0:	24000230 	.word	0x24000230
 8000aa4:	2400022a 	.word	0x2400022a
 8000aa8:	2400027c 	.word	0x2400027c

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09c      	sub	sp, #112	@ 0x70
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	224c      	movs	r2, #76	@ 0x4c
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f008 fd0e 	bl	80094dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f008 fd08 	bl	80094dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000acc:	2002      	movs	r0, #2
 8000ace:	f002 fa59 	bl	8002f84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b33      	ldr	r3, [pc, #204]	@ (8000ba4 <SystemClock_Config+0xf8>)
 8000ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ada:	4a32      	ldr	r2, [pc, #200]	@ (8000ba4 <SystemClock_Config+0xf8>)
 8000adc:	f023 0301 	bic.w	r3, r3, #1
 8000ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ae2:	4b30      	ldr	r3, [pc, #192]	@ (8000ba4 <SystemClock_Config+0xf8>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba8 <SystemClock_Config+0xfc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000af4:	4a2c      	ldr	r2, [pc, #176]	@ (8000ba8 <SystemClock_Config+0xfc>)
 8000af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba8 <SystemClock_Config+0xfc>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b08:	bf00      	nop
 8000b0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <SystemClock_Config+0xfc>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b16:	d1f8      	bne.n	8000b0a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b1c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b26:	2340      	movs	r3, #64	@ 0x40
 8000b28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000b36:	2318      	movs	r3, #24
 8000b38:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b46:	230c      	movs	r3, #12
 8000b48:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fa5e 	bl	8003018 <HAL_RCC_OscConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b62:	f000 f865 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	233f      	movs	r3, #63	@ 0x3f
 8000b68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fe9e 	bl	80038cc <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b96:	f000 f84b 	bl	8000c30 <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3770      	adds	r7, #112	@ 0x70
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	58000400 	.word	0x58000400
 8000ba8:	58024800 	.word	0x58024800

08000bac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(htim == &htim6)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d103      	bne.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0x18>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000bc0:	f002 f895 	bl	8002cee <HAL_GPIO_TogglePin>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	24000230 	.word	0x24000230
 8000bd0:	58021000 	.word	0x58021000

08000bd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0a2      	sub	sp, #136	@ 0x88
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  unsigned char ucBuff[128];
  if(huart == &huart3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a11      	ldr	r2, [pc, #68]	@ (8000c24 <HAL_UART_RxCpltCallback+0x50>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d108      	bne.n	8000bf6 <HAL_UART_RxCpltCallback+0x22>
	sprintf((char*)ucBuff, "Foi recebida uma letra: %c\n\r", ucRx);
 8000be4:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <HAL_UART_RxCpltCallback+0x54>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	490f      	ldr	r1, [pc, #60]	@ (8000c2c <HAL_UART_RxCpltCallback+0x58>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f008 fc53 	bl	800949c <siprintf>
    HAL_UART_Transmit_IT(&huart3, ucBuff, strlen((char*)ucBuff));
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fb70 	bl	80002e0 <strlen>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <HAL_UART_RxCpltCallback+0x50>)
 8000c0c:	f005 fbb8 	bl	8006380 <HAL_UART_Transmit_IT>
  	HAL_UART_Receive_IT(&huart3, &ucRx, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	4905      	ldr	r1, [pc, #20]	@ (8000c28 <HAL_UART_RxCpltCallback+0x54>)
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <HAL_UART_RxCpltCallback+0x50>)
 8000c16:	f005 fc47 	bl	80064a8 <HAL_UART_Receive_IT>
}
 8000c1a:	bf00      	nop
 8000c1c:	3788      	adds	r7, #136	@ 0x88
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2400027c 	.word	0x2400027c
 8000c28:	2400022a 	.word	0x2400022a
 8000c2c:	08009df4 	.word	0x08009df4

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <Error_Handler+0x8>

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_MspInit+0x30>)
 8000c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c48:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_MspInit+0x30>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_MspInit+0x30>)
 8000c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	58024400 	.word	0x58024400

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <NMI_Handler+0x4>

08000c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <MemManage_Handler+0x4>

08000c88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc6:	f000 fb3d 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <USART3_IRQHandler+0x10>)
 8000cd6:	f005 fc33 	bl	8006540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2400027c 	.word	0x2400027c

08000ce4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <TIM6_DAC_IRQHandler+0x10>)
 8000cea:	f005 f877 	bl	8005ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24000230 	.word	0x24000230

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f008 fbe0 	bl	80094ec <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	24080000 	.word	0x24080000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	2400022c 	.word	0x2400022c
 8000d60:	24000940 	.word	0x24000940

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d68:	4b37      	ldr	r3, [pc, #220]	@ (8000e48 <SystemInit+0xe4>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a36      	ldr	r2, [pc, #216]	@ (8000e48 <SystemInit+0xe4>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d78:	4b34      	ldr	r3, [pc, #208]	@ (8000e4c <SystemInit+0xe8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 030f 	and.w	r3, r3, #15
 8000d80:	2b06      	cmp	r3, #6
 8000d82:	d807      	bhi.n	8000d94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d84:	4b31      	ldr	r3, [pc, #196]	@ (8000e4c <SystemInit+0xe8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 030f 	bic.w	r3, r3, #15
 8000d8c:	4a2f      	ldr	r2, [pc, #188]	@ (8000e4c <SystemInit+0xe8>)
 8000d8e:	f043 0307 	orr.w	r3, r3, #7
 8000d92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d94:	4b2e      	ldr	r3, [pc, #184]	@ (8000e50 <SystemInit+0xec>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a2d      	ldr	r2, [pc, #180]	@ (8000e50 <SystemInit+0xec>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000da0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e50 <SystemInit+0xec>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000da6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <SystemInit+0xec>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4929      	ldr	r1, [pc, #164]	@ (8000e50 <SystemInit+0xec>)
 8000dac:	4b29      	ldr	r3, [pc, #164]	@ (8000e54 <SystemInit+0xf0>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <SystemInit+0xe8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dbe:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <SystemInit+0xe8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f023 030f 	bic.w	r3, r3, #15
 8000dc6:	4a21      	ldr	r2, [pc, #132]	@ (8000e4c <SystemInit+0xe8>)
 8000dc8:	f043 0307 	orr.w	r3, r3, #7
 8000dcc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dce:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <SystemInit+0xec>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e50 <SystemInit+0xec>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <SystemInit+0xec>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <SystemInit+0xec>)
 8000de2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <SystemInit+0xf4>)
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <SystemInit+0xec>)
 8000de8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <SystemInit+0xf8>)
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dec:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <SystemInit+0xec>)
 8000dee:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <SystemInit+0xfc>)
 8000df0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <SystemInit+0xec>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000df8:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <SystemInit+0xec>)
 8000dfa:	4a19      	ldr	r2, [pc, #100]	@ (8000e60 <SystemInit+0xfc>)
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <SystemInit+0xec>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <SystemInit+0xec>)
 8000e06:	4a16      	ldr	r2, [pc, #88]	@ (8000e60 <SystemInit+0xfc>)
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <SystemInit+0xec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <SystemInit+0xec>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	@ (8000e50 <SystemInit+0xec>)
 8000e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <SystemInit+0xec>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <SystemInit+0x100>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <SystemInit+0x104>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e2e:	d202      	bcs.n	8000e36 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <SystemInit+0x108>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <SystemInit+0x10c>)
 8000e38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	52002000 	.word	0x52002000
 8000e50:	58024400 	.word	0x58024400
 8000e54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e58:	02020200 	.word	0x02020200
 8000e5c:	01ff0000 	.word	0x01ff0000
 8000e60:	01010280 	.word	0x01010280
 8000e64:	5c001000 	.word	0x5c001000
 8000e68:	ffff0000 	.word	0xffff0000
 8000e6c:	51008108 	.word	0x51008108
 8000e70:	52004000 	.word	0x52004000

08000e74 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <MX_TIM6_Init+0x68>)
 8000e86:	4a16      	ldr	r2, [pc, #88]	@ (8000ee0 <MX_TIM6_Init+0x6c>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6400-1;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_TIM6_Init+0x68>)
 8000e8c:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000e90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_TIM6_Init+0x68>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8000e98:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <MX_TIM6_Init+0x68>)
 8000e9a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e9e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MX_TIM6_Init+0x68>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ea6:	480d      	ldr	r0, [pc, #52]	@ (8000edc <MX_TIM6_Init+0x68>)
 8000ea8:	f004 fec8 	bl	8005c3c <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000eb2:	f7ff febd 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	@ (8000edc <MX_TIM6_Init+0x68>)
 8000ec4:	f005 f960 	bl	8006188 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000ece:	f7ff feaf 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	24000230 	.word	0x24000230
 8000ee0:	40001000 	.word	0x40001000

08000ee4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8000f2c <HAL_TIM_Base_MspInit+0x48>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d116      	bne.n	8000f24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_TIM_Base_MspInit+0x4c>)
 8000ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000efc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <HAL_TIM_Base_MspInit+0x4c>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_TIM_Base_MspInit+0x4c>)
 8000f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2036      	movs	r0, #54	@ 0x36
 8000f1a:	f000 fb52 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f1e:	2036      	movs	r0, #54	@ 0x36
 8000f20:	f000 fb69 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40001000 	.word	0x40001000
 8000f30:	58024400 	.word	0x58024400

08000f34 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f38:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f3a:	4a23      	ldr	r2, [pc, #140]	@ (8000fc8 <MX_USART3_UART_Init+0x94>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7c:	4811      	ldr	r0, [pc, #68]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f7e:	f005 f9af 	bl	80062e0 <HAL_UART_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f88:	f7ff fe52 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f90:	f007 feb1 	bl	8008cf6 <HAL_UARTEx_SetTxFifoThreshold>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f9a:	f7ff fe49 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4808      	ldr	r0, [pc, #32]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000fa2:	f007 fee6 	bl	8008d72 <HAL_UARTEx_SetRxFifoThreshold>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fac:	f7ff fe40 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000fb2:	f007 fe67 	bl	8008c84 <HAL_UARTEx_DisableFifoMode>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fbc:	f7ff fe38 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2400027c 	.word	0x2400027c
 8000fc8:	40004800 	.word	0x40004800

08000fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0ba      	sub	sp, #232	@ 0xe8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	22c0      	movs	r2, #192	@ 0xc0
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f008 fa75 	bl	80094dc <memset>
  if(uartHandle->Instance==USART3)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a2b      	ldr	r2, [pc, #172]	@ (80010a4 <HAL_UART_MspInit+0xd8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d14e      	bne.n	800109a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ffc:	f04f 0202 	mov.w	r2, #2
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4618      	mov	r0, r3
 8001014:	f002 ffe6 	bl	8003fe4 <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800101e:	f7ff fe07 	bl	8000c30 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001022:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <HAL_UART_MspInit+0xdc>)
 8001024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001028:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <HAL_UART_MspInit+0xdc>)
 800102a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800102e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_UART_MspInit+0xdc>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001040:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <HAL_UART_MspInit+0xdc>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <HAL_UART_MspInit+0xdc>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_UART_MspInit+0xdc>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800105e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001062:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001078:	2307      	movs	r3, #7
 800107a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001082:	4619      	mov	r1, r3
 8001084:	4809      	ldr	r0, [pc, #36]	@ (80010ac <HAL_UART_MspInit+0xe0>)
 8001086:	f001 fc69 	bl	800295c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2027      	movs	r0, #39	@ 0x27
 8001090:	f000 fa97 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001094:	2027      	movs	r0, #39	@ 0x27
 8001096:	f000 faae 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	37e8      	adds	r7, #232	@ 0xe8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40004800 	.word	0x40004800
 80010a8:	58024400 	.word	0x58024400
 80010ac:	58020c00 	.word	0x58020c00

080010b0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010b6:	4a16      	ldr	r2, [pc, #88]	@ (8001110 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80010b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010bc:	2209      	movs	r2, #9
 80010be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010c2:	2202      	movs	r2, #2
 80010c4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f8:	f001 fe13 	bl	8002d22 <HAL_PCD_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001102:	f7ff fd95 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	24000310 	.word	0x24000310
 8001110:	40080000 	.word	0x40080000

08001114 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0ba      	sub	sp, #232	@ 0xe8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	22c0      	movs	r2, #192	@ 0xc0
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f008 f9d1 	bl	80094dc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a30      	ldr	r2, [pc, #192]	@ (8001200 <HAL_PCD_MspInit+0xec>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d159      	bne.n	80011f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001144:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001150:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4618      	mov	r0, r3
 800115e:	f002 ff41 	bl	8003fe4 <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001168:	f7ff fd62 	bl	8000c30 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800116c:	f001 ff44 	bl	8002ff8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <HAL_PCD_MspInit+0xf0>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001176:	4a23      	ldr	r2, [pc, #140]	@ (8001204 <HAL_PCD_MspInit+0xf0>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <HAL_PCD_MspInit+0xf0>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800118e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011a8:	230a      	movs	r3, #10
 80011aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4814      	ldr	r0, [pc, #80]	@ (8001208 <HAL_PCD_MspInit+0xf4>)
 80011b6:	f001 fbd1 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <HAL_PCD_MspInit+0xf4>)
 80011d6:	f001 fbc1 	bl	800295c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_PCD_MspInit+0xf0>)
 80011dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011e0:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_PCD_MspInit+0xf0>)
 80011e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_PCD_MspInit+0xf0>)
 80011ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	37e8      	adds	r7, #232	@ 0xe8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40080000 	.word	0x40080000
 8001204:	58024400 	.word	0x58024400
 8001208:	58020000 	.word	0x58020000

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001244 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001210:	f7ff fda8 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	@ (8001258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123a:	f008 f95d 	bl	80094f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fc15 	bl	8000a6c <main>
  bx  lr
 8001242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001248:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800124c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001250:	08009e90 	.word	0x08009e90
  ldr r2, =_sbss
 8001254:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8001258:	24000940 	.word	0x24000940

0800125c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC3_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001266:	2003      	movs	r0, #3
 8001268:	f000 f9a0 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800126c:	f002 fce4 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8001270:	4602      	mov	r2, r0
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_Init+0x68>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	4913      	ldr	r1, [pc, #76]	@ (80012cc <HAL_Init+0x6c>)
 800127e:	5ccb      	ldrb	r3, [r1, r3]
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_Init+0x68>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <HAL_Init+0x6c>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	4a0b      	ldr	r2, [pc, #44]	@ (80012d0 <HAL_Init+0x70>)
 80012a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012a4:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <HAL_Init+0x74>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f814 	bl	80012d8 <HAL_InitTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e002      	b.n	80012c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ba:	f7ff fcbf 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	58024400 	.word	0x58024400
 80012cc:	08009e14 	.word	0x08009e14
 80012d0:	24000004 	.word	0x24000004
 80012d4:	24000000 	.word	0x24000000

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012e0:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_InitTick+0x60>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e021      	b.n	8001330 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <HAL_InitTick+0x64>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_InitTick+0x60>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f985 	bl	8001612 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001320:	f000 f94f 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	@ (8001340 <HAL_InitTick+0x68>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2400000c 	.word	0x2400000c
 800133c:	24000000 	.word	0x24000000
 8001340:	24000008 	.word	0x24000008

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2400000c 	.word	0x2400000c
 8001368:	240007f4 	.word	0x240007f4

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	240007f4 	.word	0x240007f4

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2400000c 	.word	0x2400000c

080013cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <HAL_GetREVID+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0c1b      	lsrs	r3, r3, #16
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	5c001000 	.word	0x5c001000

080013e4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80013f4:	4904      	ldr	r1, [pc, #16]	@ (8001408 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	58000400 	.word	0x58000400

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	4313      	orrs	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	@ (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	05fa0000 	.word	0x05fa0000

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	@ (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	@ (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	@ (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	@ 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	@ 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800158c:	f7ff ff8e 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff29 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff40 	bl	8001454 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff90 	bl	8001500 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5f 	bl	80014ac <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff33 	bl	8001470 <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa4 	bl	8001568 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff fe9a 	bl	800136c <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e2dc      	b.n	8001bfe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d008      	beq.n	8001662 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2280      	movs	r2, #128	@ 0x80
 8001654:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e2cd      	b.n	8001bfe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a76      	ldr	r2, [pc, #472]	@ (8001840 <HAL_DMA_Abort+0x214>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d04a      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a74      	ldr	r2, [pc, #464]	@ (8001844 <HAL_DMA_Abort+0x218>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d045      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a73      	ldr	r2, [pc, #460]	@ (8001848 <HAL_DMA_Abort+0x21c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d040      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a71      	ldr	r2, [pc, #452]	@ (800184c <HAL_DMA_Abort+0x220>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d03b      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a70      	ldr	r2, [pc, #448]	@ (8001850 <HAL_DMA_Abort+0x224>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d036      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6e      	ldr	r2, [pc, #440]	@ (8001854 <HAL_DMA_Abort+0x228>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d031      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6d      	ldr	r2, [pc, #436]	@ (8001858 <HAL_DMA_Abort+0x22c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d02c      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a6b      	ldr	r2, [pc, #428]	@ (800185c <HAL_DMA_Abort+0x230>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d027      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a6a      	ldr	r2, [pc, #424]	@ (8001860 <HAL_DMA_Abort+0x234>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d022      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a68      	ldr	r2, [pc, #416]	@ (8001864 <HAL_DMA_Abort+0x238>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01d      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a67      	ldr	r2, [pc, #412]	@ (8001868 <HAL_DMA_Abort+0x23c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d018      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a65      	ldr	r2, [pc, #404]	@ (800186c <HAL_DMA_Abort+0x240>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a64      	ldr	r2, [pc, #400]	@ (8001870 <HAL_DMA_Abort+0x244>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d00e      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a62      	ldr	r2, [pc, #392]	@ (8001874 <HAL_DMA_Abort+0x248>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d009      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a61      	ldr	r2, [pc, #388]	@ (8001878 <HAL_DMA_Abort+0x24c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d004      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a5f      	ldr	r2, [pc, #380]	@ (800187c <HAL_DMA_Abort+0x250>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_DMA_Abort+0xda>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_DMA_Abort+0xdc>
 8001706:	2300      	movs	r3, #0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 021e 	bic.w	r2, r2, #30
 800171a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800172a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e00a      	b.n	800174a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 020e 	bic.w	r2, r2, #14
 8001742:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a3c      	ldr	r2, [pc, #240]	@ (8001840 <HAL_DMA_Abort+0x214>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d072      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a3a      	ldr	r2, [pc, #232]	@ (8001844 <HAL_DMA_Abort+0x218>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d06d      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a39      	ldr	r2, [pc, #228]	@ (8001848 <HAL_DMA_Abort+0x21c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d068      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a37      	ldr	r2, [pc, #220]	@ (800184c <HAL_DMA_Abort+0x220>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d063      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a36      	ldr	r2, [pc, #216]	@ (8001850 <HAL_DMA_Abort+0x224>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a34      	ldr	r2, [pc, #208]	@ (8001854 <HAL_DMA_Abort+0x228>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d059      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a33      	ldr	r2, [pc, #204]	@ (8001858 <HAL_DMA_Abort+0x22c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d054      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <HAL_DMA_Abort+0x230>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d04f      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a30      	ldr	r2, [pc, #192]	@ (8001860 <HAL_DMA_Abort+0x234>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d04a      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001864 <HAL_DMA_Abort+0x238>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d045      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001868 <HAL_DMA_Abort+0x23c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d040      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a2b      	ldr	r2, [pc, #172]	@ (800186c <HAL_DMA_Abort+0x240>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d03b      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001870 <HAL_DMA_Abort+0x244>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d036      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a28      	ldr	r2, [pc, #160]	@ (8001874 <HAL_DMA_Abort+0x248>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d031      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a27      	ldr	r2, [pc, #156]	@ (8001878 <HAL_DMA_Abort+0x24c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d02c      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a25      	ldr	r2, [pc, #148]	@ (800187c <HAL_DMA_Abort+0x250>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d027      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a24      	ldr	r2, [pc, #144]	@ (8001880 <HAL_DMA_Abort+0x254>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d022      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a22      	ldr	r2, [pc, #136]	@ (8001884 <HAL_DMA_Abort+0x258>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d01d      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a21      	ldr	r2, [pc, #132]	@ (8001888 <HAL_DMA_Abort+0x25c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d018      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <HAL_DMA_Abort+0x260>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1e      	ldr	r2, [pc, #120]	@ (8001890 <HAL_DMA_Abort+0x264>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00e      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1c      	ldr	r2, [pc, #112]	@ (8001894 <HAL_DMA_Abort+0x268>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d009      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1b      	ldr	r2, [pc, #108]	@ (8001898 <HAL_DMA_Abort+0x26c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d004      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a19      	ldr	r2, [pc, #100]	@ (800189c <HAL_DMA_Abort+0x270>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d132      	bne.n	80018a0 <HAL_DMA_Abort+0x274>
 800183a:	2301      	movs	r3, #1
 800183c:	e031      	b.n	80018a2 <HAL_DMA_Abort+0x276>
 800183e:	bf00      	nop
 8001840:	40020010 	.word	0x40020010
 8001844:	40020028 	.word	0x40020028
 8001848:	40020040 	.word	0x40020040
 800184c:	40020058 	.word	0x40020058
 8001850:	40020070 	.word	0x40020070
 8001854:	40020088 	.word	0x40020088
 8001858:	400200a0 	.word	0x400200a0
 800185c:	400200b8 	.word	0x400200b8
 8001860:	40020410 	.word	0x40020410
 8001864:	40020428 	.word	0x40020428
 8001868:	40020440 	.word	0x40020440
 800186c:	40020458 	.word	0x40020458
 8001870:	40020470 	.word	0x40020470
 8001874:	40020488 	.word	0x40020488
 8001878:	400204a0 	.word	0x400204a0
 800187c:	400204b8 	.word	0x400204b8
 8001880:	58025408 	.word	0x58025408
 8001884:	5802541c 	.word	0x5802541c
 8001888:	58025430 	.word	0x58025430
 800188c:	58025444 	.word	0x58025444
 8001890:	58025458 	.word	0x58025458
 8001894:	5802546c 	.word	0x5802546c
 8001898:	58025480 	.word	0x58025480
 800189c:	58025494 	.word	0x58025494
 80018a0:	2300      	movs	r3, #0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001a70 <HAL_DMA_Abort+0x444>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d04a      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001a74 <HAL_DMA_Abort+0x448>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d045      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001a78 <HAL_DMA_Abort+0x44c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d040      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a68      	ldr	r2, [pc, #416]	@ (8001a7c <HAL_DMA_Abort+0x450>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d03b      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a67      	ldr	r2, [pc, #412]	@ (8001a80 <HAL_DMA_Abort+0x454>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d036      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a65      	ldr	r2, [pc, #404]	@ (8001a84 <HAL_DMA_Abort+0x458>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d031      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a64      	ldr	r2, [pc, #400]	@ (8001a88 <HAL_DMA_Abort+0x45c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d02c      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a62      	ldr	r2, [pc, #392]	@ (8001a8c <HAL_DMA_Abort+0x460>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d027      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a61      	ldr	r2, [pc, #388]	@ (8001a90 <HAL_DMA_Abort+0x464>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d022      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a5f      	ldr	r2, [pc, #380]	@ (8001a94 <HAL_DMA_Abort+0x468>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d01d      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a5e      	ldr	r2, [pc, #376]	@ (8001a98 <HAL_DMA_Abort+0x46c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d018      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a5c      	ldr	r2, [pc, #368]	@ (8001a9c <HAL_DMA_Abort+0x470>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a5b      	ldr	r2, [pc, #364]	@ (8001aa0 <HAL_DMA_Abort+0x474>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00e      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a59      	ldr	r2, [pc, #356]	@ (8001aa4 <HAL_DMA_Abort+0x478>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d009      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a58      	ldr	r2, [pc, #352]	@ (8001aa8 <HAL_DMA_Abort+0x47c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d004      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a56      	ldr	r2, [pc, #344]	@ (8001aac <HAL_DMA_Abort+0x480>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d108      	bne.n	8001968 <HAL_DMA_Abort+0x33c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e007      	b.n	8001978 <HAL_DMA_Abort+0x34c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001978:	e013      	b.n	80019a2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800197a:	f7ff fcf7 	bl	800136c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b05      	cmp	r3, #5
 8001986:	d90c      	bls.n	80019a2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2220      	movs	r2, #32
 800198c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2203      	movs	r2, #3
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e12d      	b.n	8001bfe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e5      	bne.n	800197a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a70 <HAL_DMA_Abort+0x444>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d04a      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001a74 <HAL_DMA_Abort+0x448>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d045      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001a78 <HAL_DMA_Abort+0x44c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d040      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a7c <HAL_DMA_Abort+0x450>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d03b      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a29      	ldr	r2, [pc, #164]	@ (8001a80 <HAL_DMA_Abort+0x454>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d036      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a27      	ldr	r2, [pc, #156]	@ (8001a84 <HAL_DMA_Abort+0x458>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d031      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a26      	ldr	r2, [pc, #152]	@ (8001a88 <HAL_DMA_Abort+0x45c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d02c      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a24      	ldr	r2, [pc, #144]	@ (8001a8c <HAL_DMA_Abort+0x460>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d027      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a23      	ldr	r2, [pc, #140]	@ (8001a90 <HAL_DMA_Abort+0x464>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d022      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a21      	ldr	r2, [pc, #132]	@ (8001a94 <HAL_DMA_Abort+0x468>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d01d      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a20      	ldr	r2, [pc, #128]	@ (8001a98 <HAL_DMA_Abort+0x46c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d018      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1e      	ldr	r2, [pc, #120]	@ (8001a9c <HAL_DMA_Abort+0x470>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d013      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa0 <HAL_DMA_Abort+0x474>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d00e      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa4 <HAL_DMA_Abort+0x478>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d009      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa8 <HAL_DMA_Abort+0x47c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d004      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <HAL_DMA_Abort+0x480>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_DMA_Abort+0x426>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_DMA_Abort+0x428>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d02b      	beq.n	8001ab0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	223f      	movs	r2, #63	@ 0x3f
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	e02a      	b.n	8001ac6 <HAL_DMA_Abort+0x49a>
 8001a70:	40020010 	.word	0x40020010
 8001a74:	40020028 	.word	0x40020028
 8001a78:	40020040 	.word	0x40020040
 8001a7c:	40020058 	.word	0x40020058
 8001a80:	40020070 	.word	0x40020070
 8001a84:	40020088 	.word	0x40020088
 8001a88:	400200a0 	.word	0x400200a0
 8001a8c:	400200b8 	.word	0x400200b8
 8001a90:	40020410 	.word	0x40020410
 8001a94:	40020428 	.word	0x40020428
 8001a98:	40020440 	.word	0x40020440
 8001a9c:	40020458 	.word	0x40020458
 8001aa0:	40020470 	.word	0x40020470
 8001aa4:	40020488 	.word	0x40020488
 8001aa8:	400204a0 	.word	0x400204a0
 8001aac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2201      	movs	r2, #1
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a4f      	ldr	r2, [pc, #316]	@ (8001c08 <HAL_DMA_Abort+0x5dc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d072      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c0c <HAL_DMA_Abort+0x5e0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d06d      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a4c      	ldr	r2, [pc, #304]	@ (8001c10 <HAL_DMA_Abort+0x5e4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d068      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8001c14 <HAL_DMA_Abort+0x5e8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d063      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a49      	ldr	r2, [pc, #292]	@ (8001c18 <HAL_DMA_Abort+0x5ec>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d05e      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a47      	ldr	r2, [pc, #284]	@ (8001c1c <HAL_DMA_Abort+0x5f0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d059      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a46      	ldr	r2, [pc, #280]	@ (8001c20 <HAL_DMA_Abort+0x5f4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d054      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a44      	ldr	r2, [pc, #272]	@ (8001c24 <HAL_DMA_Abort+0x5f8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d04f      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a43      	ldr	r2, [pc, #268]	@ (8001c28 <HAL_DMA_Abort+0x5fc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04a      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a41      	ldr	r2, [pc, #260]	@ (8001c2c <HAL_DMA_Abort+0x600>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d045      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a40      	ldr	r2, [pc, #256]	@ (8001c30 <HAL_DMA_Abort+0x604>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d040      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a3e      	ldr	r2, [pc, #248]	@ (8001c34 <HAL_DMA_Abort+0x608>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d03b      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a3d      	ldr	r2, [pc, #244]	@ (8001c38 <HAL_DMA_Abort+0x60c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d036      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c3c <HAL_DMA_Abort+0x610>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d031      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a3a      	ldr	r2, [pc, #232]	@ (8001c40 <HAL_DMA_Abort+0x614>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d02c      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a38      	ldr	r2, [pc, #224]	@ (8001c44 <HAL_DMA_Abort+0x618>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d027      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a37      	ldr	r2, [pc, #220]	@ (8001c48 <HAL_DMA_Abort+0x61c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d022      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a35      	ldr	r2, [pc, #212]	@ (8001c4c <HAL_DMA_Abort+0x620>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01d      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a34      	ldr	r2, [pc, #208]	@ (8001c50 <HAL_DMA_Abort+0x624>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d018      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a32      	ldr	r2, [pc, #200]	@ (8001c54 <HAL_DMA_Abort+0x628>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a31      	ldr	r2, [pc, #196]	@ (8001c58 <HAL_DMA_Abort+0x62c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c5c <HAL_DMA_Abort+0x630>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d009      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c60 <HAL_DMA_Abort+0x634>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c64 <HAL_DMA_Abort+0x638>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_DMA_Abort+0x58e>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_DMA_Abort+0x590>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d015      	beq.n	8001bec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001bc8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00c      	beq.n	8001bec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001be0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001bea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40020010 	.word	0x40020010
 8001c0c:	40020028 	.word	0x40020028
 8001c10:	40020040 	.word	0x40020040
 8001c14:	40020058 	.word	0x40020058
 8001c18:	40020070 	.word	0x40020070
 8001c1c:	40020088 	.word	0x40020088
 8001c20:	400200a0 	.word	0x400200a0
 8001c24:	400200b8 	.word	0x400200b8
 8001c28:	40020410 	.word	0x40020410
 8001c2c:	40020428 	.word	0x40020428
 8001c30:	40020440 	.word	0x40020440
 8001c34:	40020458 	.word	0x40020458
 8001c38:	40020470 	.word	0x40020470
 8001c3c:	40020488 	.word	0x40020488
 8001c40:	400204a0 	.word	0x400204a0
 8001c44:	400204b8 	.word	0x400204b8
 8001c48:	58025408 	.word	0x58025408
 8001c4c:	5802541c 	.word	0x5802541c
 8001c50:	58025430 	.word	0x58025430
 8001c54:	58025444 	.word	0x58025444
 8001c58:	58025458 	.word	0x58025458
 8001c5c:	5802546c 	.word	0x5802546c
 8001c60:	58025480 	.word	0x58025480
 8001c64:	58025494 	.word	0x58025494

08001c68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e237      	b.n	80020ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2280      	movs	r2, #128	@ 0x80
 8001c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e22c      	b.n	80020ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a5c      	ldr	r2, [pc, #368]	@ (8001e08 <HAL_DMA_Abort_IT+0x1a0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d04a      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8001e0c <HAL_DMA_Abort_IT+0x1a4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d045      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a59      	ldr	r2, [pc, #356]	@ (8001e10 <HAL_DMA_Abort_IT+0x1a8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d040      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a58      	ldr	r2, [pc, #352]	@ (8001e14 <HAL_DMA_Abort_IT+0x1ac>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d03b      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a56      	ldr	r2, [pc, #344]	@ (8001e18 <HAL_DMA_Abort_IT+0x1b0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d036      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a55      	ldr	r2, [pc, #340]	@ (8001e1c <HAL_DMA_Abort_IT+0x1b4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d031      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a53      	ldr	r2, [pc, #332]	@ (8001e20 <HAL_DMA_Abort_IT+0x1b8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d02c      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a52      	ldr	r2, [pc, #328]	@ (8001e24 <HAL_DMA_Abort_IT+0x1bc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d027      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a50      	ldr	r2, [pc, #320]	@ (8001e28 <HAL_DMA_Abort_IT+0x1c0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d022      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a4f      	ldr	r2, [pc, #316]	@ (8001e2c <HAL_DMA_Abort_IT+0x1c4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d01d      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a4d      	ldr	r2, [pc, #308]	@ (8001e30 <HAL_DMA_Abort_IT+0x1c8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d018      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a4c      	ldr	r2, [pc, #304]	@ (8001e34 <HAL_DMA_Abort_IT+0x1cc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e38 <HAL_DMA_Abort_IT+0x1d0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00e      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a49      	ldr	r2, [pc, #292]	@ (8001e3c <HAL_DMA_Abort_IT+0x1d4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a47      	ldr	r2, [pc, #284]	@ (8001e40 <HAL_DMA_Abort_IT+0x1d8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <HAL_DMA_Abort_IT+0x1dc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_DMA_Abort_IT+0xcc>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_DMA_Abort_IT+0xce>
 8001d34:	2300      	movs	r3, #0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8086 	beq.w	8001e48 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2f      	ldr	r2, [pc, #188]	@ (8001e08 <HAL_DMA_Abort_IT+0x1a0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d04a      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a2e      	ldr	r2, [pc, #184]	@ (8001e0c <HAL_DMA_Abort_IT+0x1a4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d045      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e10 <HAL_DMA_Abort_IT+0x1a8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d040      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <HAL_DMA_Abort_IT+0x1ac>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d03b      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a29      	ldr	r2, [pc, #164]	@ (8001e18 <HAL_DMA_Abort_IT+0x1b0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d036      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a28      	ldr	r2, [pc, #160]	@ (8001e1c <HAL_DMA_Abort_IT+0x1b4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d031      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <HAL_DMA_Abort_IT+0x1b8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d02c      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a25      	ldr	r2, [pc, #148]	@ (8001e24 <HAL_DMA_Abort_IT+0x1bc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d027      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a23      	ldr	r2, [pc, #140]	@ (8001e28 <HAL_DMA_Abort_IT+0x1c0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d022      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a22      	ldr	r2, [pc, #136]	@ (8001e2c <HAL_DMA_Abort_IT+0x1c4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d01d      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a20      	ldr	r2, [pc, #128]	@ (8001e30 <HAL_DMA_Abort_IT+0x1c8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d018      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e34 <HAL_DMA_Abort_IT+0x1cc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d013      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e38 <HAL_DMA_Abort_IT+0x1d0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00e      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1c      	ldr	r2, [pc, #112]	@ (8001e3c <HAL_DMA_Abort_IT+0x1d4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d009      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e40 <HAL_DMA_Abort_IT+0x1d8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d004      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <HAL_DMA_Abort_IT+0x1dc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d108      	bne.n	8001df6 <HAL_DMA_Abort_IT+0x18e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e178      	b.n	80020e8 <HAL_DMA_Abort_IT+0x480>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0201 	bic.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e16f      	b.n	80020e8 <HAL_DMA_Abort_IT+0x480>
 8001e08:	40020010 	.word	0x40020010
 8001e0c:	40020028 	.word	0x40020028
 8001e10:	40020040 	.word	0x40020040
 8001e14:	40020058 	.word	0x40020058
 8001e18:	40020070 	.word	0x40020070
 8001e1c:	40020088 	.word	0x40020088
 8001e20:	400200a0 	.word	0x400200a0
 8001e24:	400200b8 	.word	0x400200b8
 8001e28:	40020410 	.word	0x40020410
 8001e2c:	40020428 	.word	0x40020428
 8001e30:	40020440 	.word	0x40020440
 8001e34:	40020458 	.word	0x40020458
 8001e38:	40020470 	.word	0x40020470
 8001e3c:	40020488 	.word	0x40020488
 8001e40:	400204a0 	.word	0x400204a0
 8001e44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 020e 	bic.w	r2, r2, #14
 8001e56:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6c      	ldr	r2, [pc, #432]	@ (8002010 <HAL_DMA_Abort_IT+0x3a8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d04a      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6b      	ldr	r2, [pc, #428]	@ (8002014 <HAL_DMA_Abort_IT+0x3ac>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d045      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a69      	ldr	r2, [pc, #420]	@ (8002018 <HAL_DMA_Abort_IT+0x3b0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d040      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a68      	ldr	r2, [pc, #416]	@ (800201c <HAL_DMA_Abort_IT+0x3b4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d03b      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a66      	ldr	r2, [pc, #408]	@ (8002020 <HAL_DMA_Abort_IT+0x3b8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d036      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a65      	ldr	r2, [pc, #404]	@ (8002024 <HAL_DMA_Abort_IT+0x3bc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d031      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a63      	ldr	r2, [pc, #396]	@ (8002028 <HAL_DMA_Abort_IT+0x3c0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d02c      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a62      	ldr	r2, [pc, #392]	@ (800202c <HAL_DMA_Abort_IT+0x3c4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d027      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a60      	ldr	r2, [pc, #384]	@ (8002030 <HAL_DMA_Abort_IT+0x3c8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d022      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a5f      	ldr	r2, [pc, #380]	@ (8002034 <HAL_DMA_Abort_IT+0x3cc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d01d      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5d      	ldr	r2, [pc, #372]	@ (8002038 <HAL_DMA_Abort_IT+0x3d0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d018      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5c      	ldr	r2, [pc, #368]	@ (800203c <HAL_DMA_Abort_IT+0x3d4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5a      	ldr	r2, [pc, #360]	@ (8002040 <HAL_DMA_Abort_IT+0x3d8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00e      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a59      	ldr	r2, [pc, #356]	@ (8002044 <HAL_DMA_Abort_IT+0x3dc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d009      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a57      	ldr	r2, [pc, #348]	@ (8002048 <HAL_DMA_Abort_IT+0x3e0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a56      	ldr	r2, [pc, #344]	@ (800204c <HAL_DMA_Abort_IT+0x3e4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d108      	bne.n	8001f0a <HAL_DMA_Abort_IT+0x2a2>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e007      	b.n	8001f1a <HAL_DMA_Abort_IT+0x2b2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	@ (8002010 <HAL_DMA_Abort_IT+0x3a8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d072      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3a      	ldr	r2, [pc, #232]	@ (8002014 <HAL_DMA_Abort_IT+0x3ac>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d06d      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a39      	ldr	r2, [pc, #228]	@ (8002018 <HAL_DMA_Abort_IT+0x3b0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d068      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a37      	ldr	r2, [pc, #220]	@ (800201c <HAL_DMA_Abort_IT+0x3b4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d063      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a36      	ldr	r2, [pc, #216]	@ (8002020 <HAL_DMA_Abort_IT+0x3b8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d05e      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a34      	ldr	r2, [pc, #208]	@ (8002024 <HAL_DMA_Abort_IT+0x3bc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d059      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a33      	ldr	r2, [pc, #204]	@ (8002028 <HAL_DMA_Abort_IT+0x3c0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d054      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a31      	ldr	r2, [pc, #196]	@ (800202c <HAL_DMA_Abort_IT+0x3c4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d04f      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a30      	ldr	r2, [pc, #192]	@ (8002030 <HAL_DMA_Abort_IT+0x3c8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d04a      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2e      	ldr	r2, [pc, #184]	@ (8002034 <HAL_DMA_Abort_IT+0x3cc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d045      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2d      	ldr	r2, [pc, #180]	@ (8002038 <HAL_DMA_Abort_IT+0x3d0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d040      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800203c <HAL_DMA_Abort_IT+0x3d4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d03b      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2a      	ldr	r2, [pc, #168]	@ (8002040 <HAL_DMA_Abort_IT+0x3d8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d036      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a28      	ldr	r2, [pc, #160]	@ (8002044 <HAL_DMA_Abort_IT+0x3dc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d031      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a27      	ldr	r2, [pc, #156]	@ (8002048 <HAL_DMA_Abort_IT+0x3e0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d02c      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a25      	ldr	r2, [pc, #148]	@ (800204c <HAL_DMA_Abort_IT+0x3e4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d027      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <HAL_DMA_Abort_IT+0x3e8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a22      	ldr	r2, [pc, #136]	@ (8002054 <HAL_DMA_Abort_IT+0x3ec>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01d      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a21      	ldr	r2, [pc, #132]	@ (8002058 <HAL_DMA_Abort_IT+0x3f0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d018      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800205c <HAL_DMA_Abort_IT+0x3f4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8002060 <HAL_DMA_Abort_IT+0x3f8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00e      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <HAL_DMA_Abort_IT+0x3fc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8002068 <HAL_DMA_Abort_IT+0x400>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d004      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_DMA_Abort_IT+0x404>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d132      	bne.n	8002070 <HAL_DMA_Abort_IT+0x408>
 800200a:	2301      	movs	r3, #1
 800200c:	e031      	b.n	8002072 <HAL_DMA_Abort_IT+0x40a>
 800200e:	bf00      	nop
 8002010:	40020010 	.word	0x40020010
 8002014:	40020028 	.word	0x40020028
 8002018:	40020040 	.word	0x40020040
 800201c:	40020058 	.word	0x40020058
 8002020:	40020070 	.word	0x40020070
 8002024:	40020088 	.word	0x40020088
 8002028:	400200a0 	.word	0x400200a0
 800202c:	400200b8 	.word	0x400200b8
 8002030:	40020410 	.word	0x40020410
 8002034:	40020428 	.word	0x40020428
 8002038:	40020440 	.word	0x40020440
 800203c:	40020458 	.word	0x40020458
 8002040:	40020470 	.word	0x40020470
 8002044:	40020488 	.word	0x40020488
 8002048:	400204a0 	.word	0x400204a0
 800204c:	400204b8 	.word	0x400204b8
 8002050:	58025408 	.word	0x58025408
 8002054:	5802541c 	.word	0x5802541c
 8002058:	58025430 	.word	0x58025430
 800205c:	58025444 	.word	0x58025444
 8002060:	58025458 	.word	0x58025458
 8002064:	5802546c 	.word	0x5802546c
 8002068:	58025480 	.word	0x58025480
 800206c:	58025494 	.word	0x58025494
 8002070:	2300      	movs	r3, #0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d028      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002084:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	2201      	movs	r2, #1
 8002096:	409a      	lsls	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00c      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop

080020f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0e3      	b.n	80022ce <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2223      	movs	r2, #35	@ 0x23
 8002114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7fe fafd 	bl	8000718 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	4b6e      	ldr	r3, [pc, #440]	@ (80022d8 <HAL_ETH_Init+0x1e4>)
 8002120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002124:	4a6c      	ldr	r2, [pc, #432]	@ (80022d8 <HAL_ETH_Init+0x1e4>)
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800212e:	4b6a      	ldr	r3, [pc, #424]	@ (80022d8 <HAL_ETH_Init+0x1e4>)
 8002130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7a1b      	ldrb	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d103      	bne.n	800214c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff f94d 	bl	80013e4 <HAL_SYSCFG_ETHInterfaceSelect>
 800214a:	e003      	b.n	8002154 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800214c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002150:	f7ff f948 	bl	80013e4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002154:	4b61      	ldr	r3, [pc, #388]	@ (80022dc <HAL_ETH_Init+0x1e8>)
 8002156:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800216e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002170:	f7ff f8fc 	bl	800136c <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002176:	e011      	b.n	800219c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002178:	f7ff f8f8 	bl	800136c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002186:	d909      	bls.n	800219c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2204      	movs	r2, #4
 800218c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	22e0      	movs	r2, #224	@ 0xe0
 8002194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e098      	b.n	80022ce <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e4      	bne.n	8002178 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f89e 	bl	80022f0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80021b4:	f001 feba 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a49      	ldr	r2, [pc, #292]	@ (80022e0 <HAL_ETH_Init+0x1ec>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	0c9a      	lsrs	r2, r3, #18
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3a01      	subs	r2, #1
 80021c8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fa81 	bl	80026d4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021da:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80021de:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021ee:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	22e0      	movs	r2, #224	@ 0xe0
 800220a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e05d      	b.n	80022ce <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800221a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800221e:	4b31      	ldr	r3, [pc, #196]	@ (80022e4 <HAL_ETH_Init+0x1f0>)
 8002220:	4013      	ands	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6952      	ldr	r2, [r2, #20]
 8002226:	0051      	lsls	r1, r2, #1
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	430b      	orrs	r3, r1
 800222e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002232:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fae9 	bl	800280e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fb2f 	bl	80028a0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	3305      	adds	r3, #5
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	021a      	lsls	r2, r3, #8
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	3303      	adds	r3, #3
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	061a      	lsls	r2, r3, #24
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	3302      	adds	r3, #2
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	3301      	adds	r3, #1
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002280:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800228e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002290:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <HAL_ETH_Init+0x1f4>)
 80022a2:	430b      	orrs	r3, r1
 80022a4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b0d      	ldr	r3, [pc, #52]	@ (80022ec <HAL_ETH_Init+0x1f8>)
 80022b6:	430b      	orrs	r3, r1
 80022b8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2210      	movs	r2, #16
 80022c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	58024400 	.word	0x58024400
 80022dc:	58000400 	.word	0x58000400
 80022e0:	431bde83 	.word	0x431bde83
 80022e4:	ffff8001 	.word	0xffff8001
 80022e8:	0c020060 	.word	0x0c020060
 80022ec:	0c20c000 	.word	0x0c20c000

080022f0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002300:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002308:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800230a:	f001 fe0f 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 800230e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d804      	bhi.n	8002322 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e022      	b.n	8002368 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4a16      	ldr	r2, [pc, #88]	@ (8002380 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d204      	bcs.n	8002334 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e019      	b.n	8002368 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4a13      	ldr	r2, [pc, #76]	@ (8002384 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d915      	bls.n	8002368 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d804      	bhi.n	800234e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e00c      	b.n	8002368 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4a0e      	ldr	r2, [pc, #56]	@ (800238c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d804      	bhi.n	8002360 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	e003      	b.n	8002368 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002366:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	02160ebf 	.word	0x02160ebf
 8002380:	03938700 	.word	0x03938700
 8002384:	05f5e0ff 	.word	0x05f5e0ff
 8002388:	08f0d17f 	.word	0x08f0d17f
 800238c:	0ee6b27f 	.word	0x0ee6b27f

08002390 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80023a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	791b      	ldrb	r3, [r3, #4]
 80023a8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80023aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	7b1b      	ldrb	r3, [r3, #12]
 80023b0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80023b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	7b5b      	ldrb	r3, [r3, #13]
 80023b8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7b9b      	ldrb	r3, [r3, #14]
 80023c0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80023c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	7bdb      	ldrb	r3, [r3, #15]
 80023c8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	7c12      	ldrb	r2, [r2, #16]
 80023d0:	2a00      	cmp	r2, #0
 80023d2:	d102      	bne.n	80023da <ETH_SetMACConfig+0x4a>
 80023d4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023d8:	e000      	b.n	80023dc <ETH_SetMACConfig+0x4c>
 80023da:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	7c52      	ldrb	r2, [r2, #17]
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d102      	bne.n	80023ec <ETH_SetMACConfig+0x5c>
 80023e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023ea:	e000      	b.n	80023ee <ETH_SetMACConfig+0x5e>
 80023ec:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	7c9b      	ldrb	r3, [r3, #18]
 80023f4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023f6:	431a      	orrs	r2, r3
               macconf->Speed |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80023fc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002402:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	7f1b      	ldrb	r3, [r3, #28]
 8002408:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800240a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	7f5b      	ldrb	r3, [r3, #29]
 8002410:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002412:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	7f92      	ldrb	r2, [r2, #30]
 8002418:	2a00      	cmp	r2, #0
 800241a:	d102      	bne.n	8002422 <ETH_SetMACConfig+0x92>
 800241c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002420:	e000      	b.n	8002424 <ETH_SetMACConfig+0x94>
 8002422:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002424:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	7fdb      	ldrb	r3, [r3, #31]
 800242a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800242c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002434:	2a00      	cmp	r2, #0
 8002436:	d102      	bne.n	800243e <ETH_SetMACConfig+0xae>
 8002438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800243c:	e000      	b.n	8002440 <ETH_SetMACConfig+0xb0>
 800243e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002440:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002446:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800244e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002450:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b56      	ldr	r3, [pc, #344]	@ (80025bc <ETH_SetMACConfig+0x22c>)
 8002462:	4013      	ands	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	430b      	orrs	r3, r1
 800246c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002472:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800247a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800247c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002484:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002486:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800248e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002490:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002498:	2a00      	cmp	r2, #0
 800249a:	d102      	bne.n	80024a2 <ETH_SetMACConfig+0x112>
 800249c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024a0:	e000      	b.n	80024a4 <ETH_SetMACConfig+0x114>
 80024a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80024a4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4b42      	ldr	r3, [pc, #264]	@ (80025c0 <ETH_SetMACConfig+0x230>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	68f9      	ldr	r1, [r7, #12]
 80024be:	430b      	orrs	r3, r1
 80024c0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024c8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	4b3a      	ldr	r3, [pc, #232]	@ (80025c4 <ETH_SetMACConfig+0x234>)
 80024da:	4013      	ands	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	430b      	orrs	r3, r1
 80024e4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024ec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024f2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80024fa:	2a00      	cmp	r2, #0
 80024fc:	d101      	bne.n	8002502 <ETH_SetMACConfig+0x172>
 80024fe:	2280      	movs	r2, #128	@ 0x80
 8002500:	e000      	b.n	8002504 <ETH_SetMACConfig+0x174>
 8002502:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002504:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002516:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800251a:	4013      	ands	r3, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	68f9      	ldr	r1, [r7, #12]
 8002522:	430b      	orrs	r3, r1
 8002524:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800252c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002534:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002542:	f023 0103 	bic.w	r1, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	430a      	orrs	r2, r1
 800254e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800255a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002576:	2a00      	cmp	r2, #0
 8002578:	d101      	bne.n	800257e <ETH_SetMACConfig+0x1ee>
 800257a:	2240      	movs	r2, #64	@ 0x40
 800257c:	e000      	b.n	8002580 <ETH_SetMACConfig+0x1f0>
 800257e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002580:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002588:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800258a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002592:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80025a0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	00048083 	.word	0x00048083
 80025c0:	c0f88000 	.word	0xc0f88000
 80025c4:	fffffef0 	.word	0xfffffef0

080025c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b38      	ldr	r3, [pc, #224]	@ (80026c0 <ETH_SetDMAConfig+0xf8>)
 80025de:	4013      	ands	r3, r2
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	6811      	ldr	r1, [r2, #0]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025ee:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	791b      	ldrb	r3, [r3, #4]
 80025f4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	7b1b      	ldrb	r3, [r3, #12]
 8002600:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4b2c      	ldr	r3, [pc, #176]	@ (80026c4 <ETH_SetDMAConfig+0xfc>)
 8002612:	4013      	ands	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	430b      	orrs	r3, r1
 800261c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002620:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7b5b      	ldrb	r3, [r3, #13]
 8002626:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002638:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800263c:	4b22      	ldr	r3, [pc, #136]	@ (80026c8 <ETH_SetDMAConfig+0x100>)
 800263e:	4013      	ands	r3, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	430b      	orrs	r3, r1
 8002648:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800264c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	7d1b      	ldrb	r3, [r3, #20]
 8002658:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800265a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	7f5b      	ldrb	r3, [r3, #29]
 8002660:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800266e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002672:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <ETH_SetDMAConfig+0x104>)
 8002674:	4013      	ands	r3, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	430b      	orrs	r3, r1
 800267e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002682:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	7f1b      	ldrb	r3, [r3, #28]
 800268a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800269c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <ETH_SetDMAConfig+0x108>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	430b      	orrs	r3, r1
 80026ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026b0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	ffff87fd 	.word	0xffff87fd
 80026c4:	ffff2ffe 	.word	0xffff2ffe
 80026c8:	fffec000 	.word	0xfffec000
 80026cc:	ffc0efef 	.word	0xffc0efef
 80026d0:	7fc0ffff 	.word	0x7fc0ffff

080026d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b0a4      	sub	sp, #144	@ 0x90
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026e2:	2300      	movs	r3, #0
 80026e4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002710:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002714:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800271c:	2300      	movs	r3, #0
 800271e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800272c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002730:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002738:	2300      	movs	r3, #0
 800273a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800273c:	2301      	movs	r3, #1
 800273e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800274e:	2300      	movs	r3, #0
 8002750:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002752:	2300      	movs	r3, #0
 8002754:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002756:	2300      	movs	r3, #0
 8002758:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800276c:	2320      	movs	r3, #32
 800276e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800277e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002784:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002788:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002790:	2302      	movs	r3, #2
 8002792:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80027ae:	2300      	movs	r3, #0
 80027b0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff fde6 	bl	8002390 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027c4:	2301      	movs	r3, #1
 80027c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027c8:	2301      	movs	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027de:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80027f4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027fa:	f107 0308 	add.w	r3, r7, #8
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff fee1 	bl	80025c8 <ETH_SetDMAConfig>
}
 8002806:	bf00      	nop
 8002808:	3790      	adds	r7, #144	@ 0x90
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e01d      	b.n	8002858 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68d9      	ldr	r1, [r3, #12]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	3206      	adds	r2, #6
 800284e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d9de      	bls.n	800281c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286c:	461a      	mov	r2, r3
 800286e:	2303      	movs	r3, #3
 8002870:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002880:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002890:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e023      	b.n	80028f6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6919      	ldr	r1, [r3, #16]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2200      	movs	r2, #0
 80028ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2200      	movs	r2, #0
 80028d6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2200      	movs	r2, #0
 80028e2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	3212      	adds	r2, #18
 80028ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d9d8      	bls.n	80028ae <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002922:	461a      	mov	r2, r3
 8002924:	2303      	movs	r3, #3
 8002926:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002936:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800294a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	@ 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800296a:	4b89      	ldr	r3, [pc, #548]	@ (8002b90 <HAL_GPIO_Init+0x234>)
 800296c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800296e:	e194      	b.n	8002c9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2101      	movs	r1, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8186 	beq.w	8002c94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d005      	beq.n	80029a0 <HAL_GPIO_Init+0x44>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d130      	bne.n	8002a02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d6:	2201      	movs	r2, #1
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 0201 	and.w	r2, r3, #1
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d017      	beq.n	8002a3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	2203      	movs	r2, #3
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d123      	bne.n	8002a92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	08da      	lsrs	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3208      	adds	r2, #8
 8002a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	220f      	movs	r2, #15
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	08da      	lsrs	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3208      	adds	r2, #8
 8002a8c:	69b9      	ldr	r1, [r7, #24]
 8002a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0203 	and.w	r2, r3, #3
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80e0 	beq.w	8002c94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8002b94 <HAL_GPIO_Init+0x238>)
 8002ad6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ada:	4a2e      	ldr	r2, [pc, #184]	@ (8002b94 <HAL_GPIO_Init+0x238>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b94 <HAL_GPIO_Init+0x238>)
 8002ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002af2:	4a29      	ldr	r2, [pc, #164]	@ (8002b98 <HAL_GPIO_Init+0x23c>)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	3302      	adds	r3, #2
 8002afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	220f      	movs	r2, #15
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a20      	ldr	r2, [pc, #128]	@ (8002b9c <HAL_GPIO_Init+0x240>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d052      	beq.n	8002bc4 <HAL_GPIO_Init+0x268>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba0 <HAL_GPIO_Init+0x244>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d031      	beq.n	8002b8a <HAL_GPIO_Init+0x22e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba4 <HAL_GPIO_Init+0x248>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d02b      	beq.n	8002b86 <HAL_GPIO_Init+0x22a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba8 <HAL_GPIO_Init+0x24c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d025      	beq.n	8002b82 <HAL_GPIO_Init+0x226>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1c      	ldr	r2, [pc, #112]	@ (8002bac <HAL_GPIO_Init+0x250>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01f      	beq.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb0 <HAL_GPIO_Init+0x254>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d019      	beq.n	8002b7a <HAL_GPIO_Init+0x21e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb4 <HAL_GPIO_Init+0x258>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_GPIO_Init+0x21a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a19      	ldr	r2, [pc, #100]	@ (8002bb8 <HAL_GPIO_Init+0x25c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00d      	beq.n	8002b72 <HAL_GPIO_Init+0x216>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a18      	ldr	r2, [pc, #96]	@ (8002bbc <HAL_GPIO_Init+0x260>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <HAL_GPIO_Init+0x212>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a17      	ldr	r2, [pc, #92]	@ (8002bc0 <HAL_GPIO_Init+0x264>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_GPIO_Init+0x20e>
 8002b66:	2309      	movs	r3, #9
 8002b68:	e02d      	b.n	8002bc6 <HAL_GPIO_Init+0x26a>
 8002b6a:	230a      	movs	r3, #10
 8002b6c:	e02b      	b.n	8002bc6 <HAL_GPIO_Init+0x26a>
 8002b6e:	2308      	movs	r3, #8
 8002b70:	e029      	b.n	8002bc6 <HAL_GPIO_Init+0x26a>
 8002b72:	2307      	movs	r3, #7
 8002b74:	e027      	b.n	8002bc6 <HAL_GPIO_Init+0x26a>
 8002b76:	2306      	movs	r3, #6
 8002b78:	e025      	b.n	8002bc6 <HAL_GPIO_Init+0x26a>
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	e023      	b.n	8002bc6 <HAL_GPIO_Init+0x26a>
 8002b7e:	2304      	movs	r3, #4
 8002b80:	e021      	b.n	8002bc6 <HAL_GPIO_Init+0x26a>
 8002b82:	2303      	movs	r3, #3
 8002b84:	e01f      	b.n	8002bc6 <HAL_GPIO_Init+0x26a>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e01d      	b.n	8002bc6 <HAL_GPIO_Init+0x26a>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e01b      	b.n	8002bc6 <HAL_GPIO_Init+0x26a>
 8002b8e:	bf00      	nop
 8002b90:	58000080 	.word	0x58000080
 8002b94:	58024400 	.word	0x58024400
 8002b98:	58000400 	.word	0x58000400
 8002b9c:	58020000 	.word	0x58020000
 8002ba0:	58020400 	.word	0x58020400
 8002ba4:	58020800 	.word	0x58020800
 8002ba8:	58020c00 	.word	0x58020c00
 8002bac:	58021000 	.word	0x58021000
 8002bb0:	58021400 	.word	0x58021400
 8002bb4:	58021800 	.word	0x58021800
 8002bb8:	58021c00 	.word	0x58021c00
 8002bbc:	58022000 	.word	0x58022000
 8002bc0:	58022400 	.word	0x58022400
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	f002 0203 	and.w	r2, r2, #3
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	4093      	lsls	r3, r2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd6:	4938      	ldr	r1, [pc, #224]	@ (8002cb8 <HAL_GPIO_Init+0x35c>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f47f ae63 	bne.w	8002970 <HAL_GPIO_Init+0x14>
  }
}
 8002caa:	bf00      	nop
 8002cac:	bf00      	nop
 8002cae:	3724      	adds	r7, #36	@ 0x24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	58000400 	.word	0x58000400

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d00:	887a      	ldrh	r2, [r7, #2]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	041a      	lsls	r2, r3, #16
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	400b      	ands	r3, r1
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af02      	add	r7, sp, #8
 8002d28:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0fe      	b.n	8002f32 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7fe f9e3 	bl	8001114 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2203      	movs	r2, #3
 8002d52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f006 f908 	bl	8008f70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7c1a      	ldrb	r2, [r3, #16]
 8002d68:	f88d 2000 	strb.w	r2, [sp]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d70:	f006 f88c 	bl	8008e8c <USB_CoreInit>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0d5      	b.n	8002f32 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f006 f900 	bl	8008f92 <USB_SetCurrentMode>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0c6      	b.n	8002f32 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	e04a      	b.n	8002e40 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3315      	adds	r3, #21
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3314      	adds	r3, #20
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	b298      	uxth	r0, r3
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	332e      	adds	r3, #46	@ 0x2e
 8002de6:	4602      	mov	r2, r0
 8002de8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3318      	adds	r3, #24
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	331c      	adds	r3, #28
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	3320      	adds	r3, #32
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3324      	adds	r3, #36	@ 0x24
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	791b      	ldrb	r3, [r3, #4]
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d3af      	bcc.n	8002daa <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
 8002e4e:	e044      	b.n	8002eda <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	791b      	ldrb	r3, [r3, #4]
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d3b5      	bcc.n	8002e50 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7c1a      	ldrb	r2, [r3, #16]
 8002eec:	f88d 2000 	strb.w	r2, [sp]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ef4:	f006 f89a 	bl	800902c <USB_DevInit>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2202      	movs	r2, #2
 8002f02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e013      	b.n	8002f32 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7b1b      	ldrb	r3, [r3, #12]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d102      	bne.n	8002f26 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f80b 	bl	8002f3c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f006 fa55 	bl	80093da <USB_DevDisconnect>

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	10000003 	.word	0x10000003

08002f84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d00a      	beq.n	8002fae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f98:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e01f      	b.n	8002fea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e01d      	b.n	8002fea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f023 0207 	bic.w	r2, r3, #7
 8002fb6:	490f      	ldr	r1, [pc, #60]	@ (8002ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fbe:	f7fe f9d5 	bl	800136c <HAL_GetTick>
 8002fc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fc4:	e009      	b.n	8002fda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fc6:	f7fe f9d1 	bl	800136c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fd4:	d901      	bls.n	8002fda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e007      	b.n	8002fea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	58024800 	.word	0x58024800

08002ff8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a04      	ldr	r2, [pc, #16]	@ (8003014 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003006:	60d3      	str	r3, [r2, #12]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	58024800 	.word	0x58024800

08003018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	@ 0x30
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f000 bc48 	b.w	80038bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8088 	beq.w	800314a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303a:	4b99      	ldr	r3, [pc, #612]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003044:	4b96      	ldr	r3, [pc, #600]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800304a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304c:	2b10      	cmp	r3, #16
 800304e:	d007      	beq.n	8003060 <HAL_RCC_OscConfig+0x48>
 8003050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003052:	2b18      	cmp	r3, #24
 8003054:	d111      	bne.n	800307a <HAL_RCC_OscConfig+0x62>
 8003056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d10c      	bne.n	800307a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	4b8f      	ldr	r3, [pc, #572]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d06d      	beq.n	8003148 <HAL_RCC_OscConfig+0x130>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d169      	bne.n	8003148 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f000 bc21 	b.w	80038bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x7a>
 8003084:	4b86      	ldr	r3, [pc, #536]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a85      	ldr	r2, [pc, #532]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800308a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	e02e      	b.n	80030f0 <HAL_RCC_OscConfig+0xd8>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x9c>
 800309a:	4b81      	ldr	r3, [pc, #516]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a80      	ldr	r2, [pc, #512]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b7e      	ldr	r3, [pc, #504]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a7d      	ldr	r2, [pc, #500]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e01d      	b.n	80030f0 <HAL_RCC_OscConfig+0xd8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030be:	4b78      	ldr	r3, [pc, #480]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a77      	ldr	r2, [pc, #476]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b75      	ldr	r3, [pc, #468]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a74      	ldr	r2, [pc, #464]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0xd8>
 80030d8:	4b71      	ldr	r3, [pc, #452]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a70      	ldr	r2, [pc, #448]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b6e      	ldr	r3, [pc, #440]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a6d      	ldr	r2, [pc, #436]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe f938 	bl	800136c <HAL_GetTick>
 80030fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe f934 	bl	800136c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e3d4      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003112:	4b63      	ldr	r3, [pc, #396]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe f924 	bl	800136c <HAL_GetTick>
 8003124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe f920 	bl	800136c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	@ 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e3c0      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800313a:	4b59      	ldr	r3, [pc, #356]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x110>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80ca 	beq.w	80032ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003158:	4b51      	ldr	r3, [pc, #324]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003160:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003162:	4b4f      	ldr	r3, [pc, #316]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_RCC_OscConfig+0x166>
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	2b18      	cmp	r3, #24
 8003172:	d156      	bne.n	8003222 <HAL_RCC_OscConfig+0x20a>
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d151      	bne.n	8003222 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800317e:	4b48      	ldr	r3, [pc, #288]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_RCC_OscConfig+0x17e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e392      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003196:	4b42      	ldr	r3, [pc, #264]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 0219 	bic.w	r2, r3, #25
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	493f      	ldr	r1, [pc, #252]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe f8e0 	bl	800136c <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fe f8dc 	bl	800136c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e37c      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c2:	4b37      	ldr	r3, [pc, #220]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	f7fe f8fd 	bl	80013cc <HAL_GetREVID>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031d8:	4293      	cmp	r3, r2
 80031da:	d817      	bhi.n	800320c <HAL_RCC_OscConfig+0x1f4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b40      	cmp	r3, #64	@ 0x40
 80031e2:	d108      	bne.n	80031f6 <HAL_RCC_OscConfig+0x1de>
 80031e4:	4b2e      	ldr	r3, [pc, #184]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80031ec:	4a2c      	ldr	r2, [pc, #176]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f4:	e07a      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b2a      	ldr	r3, [pc, #168]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	031b      	lsls	r3, r3, #12
 8003204:	4926      	ldr	r1, [pc, #152]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320a:	e06f      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	4921      	ldr	r1, [pc, #132]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003220:	e064      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d047      	beq.n	80032ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800322a:	4b1d      	ldr	r3, [pc, #116]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 0219 	bic.w	r2, r3, #25
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	491a      	ldr	r1, [pc, #104]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe f896 	bl	800136c <HAL_GetTick>
 8003240:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003244:	f7fe f892 	bl	800136c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e332      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003256:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003262:	f7fe f8b3 	bl	80013cc <HAL_GetREVID>
 8003266:	4603      	mov	r3, r0
 8003268:	f241 0203 	movw	r2, #4099	@ 0x1003
 800326c:	4293      	cmp	r3, r2
 800326e:	d819      	bhi.n	80032a4 <HAL_RCC_OscConfig+0x28c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d108      	bne.n	800328a <HAL_RCC_OscConfig+0x272>
 8003278:	4b09      	ldr	r3, [pc, #36]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003280:	4a07      	ldr	r2, [pc, #28]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003286:	6053      	str	r3, [r2, #4]
 8003288:	e030      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
 800328a:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	031b      	lsls	r3, r3, #12
 8003298:	4901      	ldr	r1, [pc, #4]	@ (80032a0 <HAL_RCC_OscConfig+0x288>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
 800329e:	e025      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
 80032a0:	58024400 	.word	0x58024400
 80032a4:	4b9a      	ldr	r3, [pc, #616]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	4997      	ldr	r1, [pc, #604]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
 80032b8:	e018      	b.n	80032ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ba:	4b95      	ldr	r3, [pc, #596]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a94      	ldr	r2, [pc, #592]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe f851 	bl	800136c <HAL_GetTick>
 80032ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe f84d 	bl	800136c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e2ed      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032e0:	4b8b      	ldr	r3, [pc, #556]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a9 	beq.w	800344c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fa:	4b85      	ldr	r3, [pc, #532]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003302:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003304:	4b82      	ldr	r3, [pc, #520]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d007      	beq.n	8003320 <HAL_RCC_OscConfig+0x308>
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b18      	cmp	r3, #24
 8003314:	d13a      	bne.n	800338c <HAL_RCC_OscConfig+0x374>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d135      	bne.n	800338c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003320:	4b7b      	ldr	r3, [pc, #492]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x320>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b80      	cmp	r3, #128	@ 0x80
 8003332:	d001      	beq.n	8003338 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e2c1      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003338:	f7fe f848 	bl	80013cc <HAL_GetREVID>
 800333c:	4603      	mov	r3, r0
 800333e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003342:	4293      	cmp	r3, r2
 8003344:	d817      	bhi.n	8003376 <HAL_RCC_OscConfig+0x35e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	2b20      	cmp	r3, #32
 800334c:	d108      	bne.n	8003360 <HAL_RCC_OscConfig+0x348>
 800334e:	4b70      	ldr	r3, [pc, #448]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003356:	4a6e      	ldr	r2, [pc, #440]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003358:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800335c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800335e:	e075      	b.n	800344c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003360:	4b6b      	ldr	r3, [pc, #428]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	069b      	lsls	r3, r3, #26
 800336e:	4968      	ldr	r1, [pc, #416]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003374:	e06a      	b.n	800344c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003376:	4b66      	ldr	r3, [pc, #408]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	4962      	ldr	r1, [pc, #392]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800338a:	e05f      	b.n	800344c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d042      	beq.n	800341a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003394:	4b5e      	ldr	r3, [pc, #376]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5d      	ldr	r2, [pc, #372]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 800339a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fd ffe4 	bl	800136c <HAL_GetTick>
 80033a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033a8:	f7fd ffe0 	bl	800136c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e280      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033ba:	4b55      	ldr	r3, [pc, #340]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033c6:	f7fe f801 	bl	80013cc <HAL_GetREVID>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d817      	bhi.n	8003404 <HAL_RCC_OscConfig+0x3ec>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d108      	bne.n	80033ee <HAL_RCC_OscConfig+0x3d6>
 80033dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80033e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80033e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033ea:	6053      	str	r3, [r2, #4]
 80033ec:	e02e      	b.n	800344c <HAL_RCC_OscConfig+0x434>
 80033ee:	4b48      	ldr	r3, [pc, #288]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	069b      	lsls	r3, r3, #26
 80033fc:	4944      	ldr	r1, [pc, #272]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
 8003402:	e023      	b.n	800344c <HAL_RCC_OscConfig+0x434>
 8003404:	4b42      	ldr	r3, [pc, #264]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	493f      	ldr	r1, [pc, #252]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003414:	4313      	orrs	r3, r2
 8003416:	60cb      	str	r3, [r1, #12]
 8003418:	e018      	b.n	800344c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800341a:	4b3d      	ldr	r3, [pc, #244]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a3c      	ldr	r2, [pc, #240]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003426:	f7fd ffa1 	bl	800136c <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800342e:	f7fd ff9d 	bl	800136c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e23d      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003440:	4b33      	ldr	r3, [pc, #204]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d036      	beq.n	80034c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d019      	beq.n	8003494 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003460:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003464:	4a2a      	ldr	r2, [pc, #168]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fd ff7e 	bl	800136c <HAL_GetTick>
 8003470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003474:	f7fd ff7a 	bl	800136c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e21a      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003486:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x45c>
 8003492:	e018      	b.n	80034c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003494:	4b1e      	ldr	r3, [pc, #120]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003498:	4a1d      	ldr	r2, [pc, #116]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fd ff64 	bl	800136c <HAL_GetTick>
 80034a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fd ff60 	bl	800136c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e200      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034ba:	4b15      	ldr	r3, [pc, #84]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80034bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d039      	beq.n	8003546 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01c      	beq.n	8003514 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034da:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a0c      	ldr	r2, [pc, #48]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034e6:	f7fd ff41 	bl	800136c <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ee:	f7fd ff3d 	bl	800136c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1dd      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003500:	4b03      	ldr	r3, [pc, #12]	@ (8003510 <HAL_RCC_OscConfig+0x4f8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x4d6>
 800350c:	e01b      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
 800350e:	bf00      	nop
 8003510:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003514:	4b9b      	ldr	r3, [pc, #620]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a9a      	ldr	r2, [pc, #616]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800351a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800351e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003520:	f7fd ff24 	bl	800136c <HAL_GetTick>
 8003524:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003528:	f7fd ff20 	bl	800136c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e1c0      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800353a:	4b92      	ldr	r3, [pc, #584]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8081 	beq.w	8003656 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003554:	4b8c      	ldr	r3, [pc, #560]	@ (8003788 <HAL_RCC_OscConfig+0x770>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a8b      	ldr	r2, [pc, #556]	@ (8003788 <HAL_RCC_OscConfig+0x770>)
 800355a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800355e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003560:	f7fd ff04 	bl	800136c <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003568:	f7fd ff00 	bl	800136c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	@ 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1a0      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800357a:	4b83      	ldr	r3, [pc, #524]	@ (8003788 <HAL_RCC_OscConfig+0x770>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d106      	bne.n	800359c <HAL_RCC_OscConfig+0x584>
 800358e:	4b7d      	ldr	r3, [pc, #500]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	4a7c      	ldr	r2, [pc, #496]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6713      	str	r3, [r2, #112]	@ 0x70
 800359a:	e02d      	b.n	80035f8 <HAL_RCC_OscConfig+0x5e0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10c      	bne.n	80035be <HAL_RCC_OscConfig+0x5a6>
 80035a4:	4b77      	ldr	r3, [pc, #476]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a8:	4a76      	ldr	r2, [pc, #472]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b0:	4b74      	ldr	r3, [pc, #464]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b4:	4a73      	ldr	r2, [pc, #460]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035b6:	f023 0304 	bic.w	r3, r3, #4
 80035ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80035bc:	e01c      	b.n	80035f8 <HAL_RCC_OscConfig+0x5e0>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c8>
 80035c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035cc:	f043 0304 	orr.w	r3, r3, #4
 80035d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035de:	e00b      	b.n	80035f8 <HAL_RCC_OscConfig+0x5e0>
 80035e0:	4b68      	ldr	r3, [pc, #416]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e4:	4a67      	ldr	r2, [pc, #412]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ec:	4b65      	ldr	r3, [pc, #404]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f0:	4a64      	ldr	r2, [pc, #400]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80035f2:	f023 0304 	bic.w	r3, r3, #4
 80035f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d015      	beq.n	800362c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fd feb4 	bl	800136c <HAL_GetTick>
 8003604:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fd feb0 	bl	800136c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e14e      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800361e:	4b59      	ldr	r3, [pc, #356]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0ee      	beq.n	8003608 <HAL_RCC_OscConfig+0x5f0>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fd fe9e 	bl	800136c <HAL_GetTick>
 8003630:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fd fe9a 	bl	800136c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e138      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800364a:	4b4e      	ldr	r3, [pc, #312]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ee      	bne.n	8003634 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 812d 	beq.w	80038ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003660:	4b48      	ldr	r3, [pc, #288]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003668:	2b18      	cmp	r3, #24
 800366a:	f000 80bd 	beq.w	80037e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	2b02      	cmp	r3, #2
 8003674:	f040 809e 	bne.w	80037b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003678:	4b42      	ldr	r3, [pc, #264]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a41      	ldr	r2, [pc, #260]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800367e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd fe72 	bl	800136c <HAL_GetTick>
 8003688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fd fe6e 	bl	800136c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e10e      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800369e:	4b39      	ldr	r3, [pc, #228]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036aa:	4b36      	ldr	r3, [pc, #216]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80036ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036ae:	4b37      	ldr	r3, [pc, #220]	@ (800378c <HAL_RCC_OscConfig+0x774>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	430a      	orrs	r2, r1
 80036be:	4931      	ldr	r1, [pc, #196]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c8:	3b01      	subs	r3, #1
 80036ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d2:	3b01      	subs	r3, #1
 80036d4:	025b      	lsls	r3, r3, #9
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036de:	3b01      	subs	r3, #1
 80036e0:	041b      	lsls	r3, r3, #16
 80036e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ec:	3b01      	subs	r3, #1
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036f4:	4923      	ldr	r1, [pc, #140]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036fa:	4b22      	ldr	r3, [pc, #136]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 80036fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fe:	4a21      	ldr	r2, [pc, #132]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003706:	4b1f      	ldr	r3, [pc, #124]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800370a:	4b21      	ldr	r3, [pc, #132]	@ (8003790 <HAL_RCC_OscConfig+0x778>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003712:	00d2      	lsls	r2, r2, #3
 8003714:	491b      	ldr	r1, [pc, #108]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800371a:	4b1a      	ldr	r3, [pc, #104]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	f023 020c 	bic.w	r2, r3, #12
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	4917      	ldr	r1, [pc, #92]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800372c:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	f023 0202 	bic.w	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003738:	4912      	ldr	r1, [pc, #72]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800373a:	4313      	orrs	r3, r2
 800373c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800373e:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	4a10      	ldr	r2, [pc, #64]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374a:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800374c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374e:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003754:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003756:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	4a0a      	ldr	r2, [pc, #40]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003760:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003762:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	4a07      	ldr	r2, [pc, #28]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376e:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a04      	ldr	r2, [pc, #16]	@ (8003784 <HAL_RCC_OscConfig+0x76c>)
 8003774:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fd fdf7 	bl	800136c <HAL_GetTick>
 800377e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003780:	e011      	b.n	80037a6 <HAL_RCC_OscConfig+0x78e>
 8003782:	bf00      	nop
 8003784:	58024400 	.word	0x58024400
 8003788:	58024800 	.word	0x58024800
 800378c:	fffffc0c 	.word	0xfffffc0c
 8003790:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fdea 	bl	800136c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e08a      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037a6:	4b47      	ldr	r3, [pc, #284]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x77c>
 80037b2:	e082      	b.n	80038ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b4:	4b43      	ldr	r3, [pc, #268]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a42      	ldr	r2, [pc, #264]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd fdd4 	bl	800136c <HAL_GetTick>
 80037c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fd fdd0 	bl	800136c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e070      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037da:	4b3a      	ldr	r3, [pc, #232]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x7b0>
 80037e6:	e068      	b.n	80038ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037e8:	4b36      	ldr	r3, [pc, #216]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037ee:	4b35      	ldr	r3, [pc, #212]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d031      	beq.n	8003860 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 0203 	and.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d12a      	bne.n	8003860 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d122      	bne.n	8003860 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d11a      	bne.n	8003860 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	0a5b      	lsrs	r3, r3, #9
 800382e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003836:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d111      	bne.n	8003860 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	0c1b      	lsrs	r3, r3, #16
 8003840:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d108      	bne.n	8003860 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	0e1b      	lsrs	r3, r3, #24
 8003852:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e02b      	b.n	80038bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003864:	4b17      	ldr	r3, [pc, #92]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 8003866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800386e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	429a      	cmp	r2, r3
 8003878:	d01f      	beq.n	80038ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800387a:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	4a11      	ldr	r2, [pc, #68]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003886:	f7fd fd71 	bl	800136c <HAL_GetTick>
 800388a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800388c:	bf00      	nop
 800388e:	f7fd fd6d 	bl	800136c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	4293      	cmp	r3, r2
 8003898:	d0f9      	beq.n	800388e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800389a:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 800389c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <HAL_RCC_OscConfig+0x8b0>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038a6:	00d2      	lsls	r2, r2, #3
 80038a8:	4906      	ldr	r1, [pc, #24]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80038ae:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b2:	4a04      	ldr	r2, [pc, #16]	@ (80038c4 <HAL_RCC_OscConfig+0x8ac>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3730      	adds	r7, #48	@ 0x30
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	58024400 	.word	0x58024400
 80038c8:	ffff0007 	.word	0xffff0007

080038cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e19c      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	4b8a      	ldr	r3, [pc, #552]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d910      	bls.n	8003910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b87      	ldr	r3, [pc, #540]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 020f 	bic.w	r2, r3, #15
 80038f6:	4985      	ldr	r1, [pc, #532]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b83      	ldr	r3, [pc, #524]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e184      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d010      	beq.n	800393e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	4b7b      	ldr	r3, [pc, #492]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003928:	429a      	cmp	r2, r3
 800392a:	d908      	bls.n	800393e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800392c:	4b78      	ldr	r3, [pc, #480]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	4975      	ldr	r1, [pc, #468]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 800393a:	4313      	orrs	r3, r2
 800393c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d010      	beq.n	800396c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	4b70      	ldr	r3, [pc, #448]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003956:	429a      	cmp	r2, r3
 8003958:	d908      	bls.n	800396c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800395a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	496a      	ldr	r1, [pc, #424]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003968:	4313      	orrs	r3, r2
 800396a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d010      	beq.n	800399a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699a      	ldr	r2, [r3, #24]
 800397c:	4b64      	ldr	r3, [pc, #400]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003984:	429a      	cmp	r2, r3
 8003986:	d908      	bls.n	800399a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003988:	4b61      	ldr	r3, [pc, #388]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	495e      	ldr	r1, [pc, #376]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003996:	4313      	orrs	r3, r2
 8003998:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d010      	beq.n	80039c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69da      	ldr	r2, [r3, #28]
 80039aa:	4b59      	ldr	r3, [pc, #356]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d908      	bls.n	80039c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039b6:	4b56      	ldr	r3, [pc, #344]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4953      	ldr	r1, [pc, #332]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d908      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f023 020f 	bic.w	r2, r3, #15
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4947      	ldr	r1, [pc, #284]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d055      	beq.n	8003aae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a02:	4b43      	ldr	r3, [pc, #268]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	4940      	ldr	r1, [pc, #256]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d121      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0f6      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a34:	4b36      	ldr	r3, [pc, #216]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d115      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0ea      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a4c:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0de      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0d6      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a6c:	4b28      	ldr	r3, [pc, #160]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f023 0207 	bic.w	r2, r3, #7
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4925      	ldr	r1, [pc, #148]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7e:	f7fd fc75 	bl	800136c <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a86:	f7fd fc71 	bl	800136c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0be      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d1eb      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d010      	beq.n	8003adc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	4b14      	ldr	r3, [pc, #80]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d208      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aca:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f023 020f 	bic.w	r2, r3, #15
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	490e      	ldr	r1, [pc, #56]	@ (8003b10 <HAL_RCC_ClockConfig+0x244>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003adc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d214      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 020f 	bic.w	r2, r3, #15
 8003af2:	4906      	ldr	r1, [pc, #24]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <HAL_RCC_ClockConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e086      	b.n	8003c1a <HAL_RCC_ClockConfig+0x34e>
 8003b0c:	52002000 	.word	0x52002000
 8003b10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d010      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	4b3f      	ldr	r3, [pc, #252]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d208      	bcs.n	8003b42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b30:	4b3c      	ldr	r3, [pc, #240]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	4939      	ldr	r1, [pc, #228]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	4b34      	ldr	r3, [pc, #208]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d208      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b5e:	4b31      	ldr	r3, [pc, #196]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	492e      	ldr	r1, [pc, #184]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d010      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	4b28      	ldr	r3, [pc, #160]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d208      	bcs.n	8003b9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b8c:	4b25      	ldr	r3, [pc, #148]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4922      	ldr	r1, [pc, #136]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d010      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d208      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bba:	4b1a      	ldr	r3, [pc, #104]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	4917      	ldr	r1, [pc, #92]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bcc:	f000 f834 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	4912      	ldr	r1, [pc, #72]	@ (8003c28 <HAL_RCC_ClockConfig+0x35c>)
 8003bde:	5ccb      	ldrb	r3, [r1, r3]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bea:	4b0e      	ldr	r3, [pc, #56]	@ (8003c24 <HAL_RCC_ClockConfig+0x358>)
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8003c28 <HAL_RCC_ClockConfig+0x35c>)
 8003bf4:	5cd3      	ldrb	r3, [r2, r3]
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <HAL_RCC_ClockConfig+0x360>)
 8003c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c04:	4a0a      	ldr	r2, [pc, #40]	@ (8003c30 <HAL_RCC_ClockConfig+0x364>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <HAL_RCC_ClockConfig+0x368>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fb62 	bl	80012d8 <HAL_InitTick>
 8003c14:	4603      	mov	r3, r0
 8003c16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	58024400 	.word	0x58024400
 8003c28:	08009e14 	.word	0x08009e14
 8003c2c:	24000004 	.word	0x24000004
 8003c30:	24000000 	.word	0x24000000
 8003c34:	24000008 	.word	0x24000008

08003c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b089      	sub	sp, #36	@ 0x24
 8003c3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c3e:	4bb3      	ldr	r3, [pc, #716]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c46:	2b18      	cmp	r3, #24
 8003c48:	f200 8155 	bhi.w	8003ef6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003cb9 	.word	0x08003cb9
 8003c58:	08003ef7 	.word	0x08003ef7
 8003c5c:	08003ef7 	.word	0x08003ef7
 8003c60:	08003ef7 	.word	0x08003ef7
 8003c64:	08003ef7 	.word	0x08003ef7
 8003c68:	08003ef7 	.word	0x08003ef7
 8003c6c:	08003ef7 	.word	0x08003ef7
 8003c70:	08003ef7 	.word	0x08003ef7
 8003c74:	08003cdf 	.word	0x08003cdf
 8003c78:	08003ef7 	.word	0x08003ef7
 8003c7c:	08003ef7 	.word	0x08003ef7
 8003c80:	08003ef7 	.word	0x08003ef7
 8003c84:	08003ef7 	.word	0x08003ef7
 8003c88:	08003ef7 	.word	0x08003ef7
 8003c8c:	08003ef7 	.word	0x08003ef7
 8003c90:	08003ef7 	.word	0x08003ef7
 8003c94:	08003ce5 	.word	0x08003ce5
 8003c98:	08003ef7 	.word	0x08003ef7
 8003c9c:	08003ef7 	.word	0x08003ef7
 8003ca0:	08003ef7 	.word	0x08003ef7
 8003ca4:	08003ef7 	.word	0x08003ef7
 8003ca8:	08003ef7 	.word	0x08003ef7
 8003cac:	08003ef7 	.word	0x08003ef7
 8003cb0:	08003ef7 	.word	0x08003ef7
 8003cb4:	08003ceb 	.word	0x08003ceb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cb8:	4b94      	ldr	r3, [pc, #592]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cc4:	4b91      	ldr	r3, [pc, #580]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	4a90      	ldr	r2, [pc, #576]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003cd6:	e111      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003cd8:	4b8d      	ldr	r3, [pc, #564]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cda:	61bb      	str	r3, [r7, #24]
      break;
 8003cdc:	e10e      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003cde:	4b8d      	ldr	r3, [pc, #564]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ce0:	61bb      	str	r3, [r7, #24]
      break;
 8003ce2:	e10b      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ce6:	61bb      	str	r3, [r7, #24]
      break;
 8003ce8:	e108      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cea:	4b88      	ldr	r3, [pc, #544]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003cf4:	4b85      	ldr	r3, [pc, #532]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cfe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d00:	4b82      	ldr	r3, [pc, #520]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d0a:	4b80      	ldr	r3, [pc, #512]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0e:	08db      	lsrs	r3, r3, #3
 8003d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80e1 	beq.w	8003ef0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	f000 8083 	beq.w	8003e3c <HAL_RCC_GetSysClockFreq+0x204>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	f200 80a1 	bhi.w	8003e80 <HAL_RCC_GetSysClockFreq+0x248>
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x114>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d056      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d4a:	e099      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d02d      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d58:	4b6c      	ldr	r3, [pc, #432]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	08db      	lsrs	r3, r3, #3
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	4a6b      	ldr	r2, [pc, #428]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
 8003d68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d82:	4b62      	ldr	r3, [pc, #392]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d96:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003db2:	e087      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003f20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc6:	4b51      	ldr	r3, [pc, #324]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dda:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003df6:	e065      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003f24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0a:	4b40      	ldr	r3, [pc, #256]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e3a:	e043      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003f28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e7e:	e021      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003f24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b1e      	ldr	r3, [pc, #120]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ea6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ec2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ec4:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	0a5b      	lsrs	r3, r3, #9
 8003eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ece:	3301      	adds	r3, #1
 8003ed0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee8:	ee17 3a90 	vmov	r3, s15
 8003eec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003eee:	e005      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
      break;
 8003ef4:	e002      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ef6:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ef8:	61bb      	str	r3, [r7, #24]
      break;
 8003efa:	bf00      	nop
  }

  return sysclockfreq;
 8003efc:	69bb      	ldr	r3, [r7, #24]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3724      	adds	r7, #36	@ 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	03d09000 	.word	0x03d09000
 8003f14:	003d0900 	.word	0x003d0900
 8003f18:	007a1200 	.word	0x007a1200
 8003f1c:	46000000 	.word	0x46000000
 8003f20:	4c742400 	.word	0x4c742400
 8003f24:	4a742400 	.word	0x4a742400
 8003f28:	4af42400 	.word	0x4af42400

08003f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f32:	f7ff fe81 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	490f      	ldr	r1, [pc, #60]	@ (8003f80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f44:	5ccb      	ldrb	r3, [r1, r3]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f50:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	fa22 f303 	lsr.w	r3, r2, r3
 8003f66:	4a07      	ldr	r2, [pc, #28]	@ (8003f84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f6a:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f70:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	08009e14 	.word	0x08009e14
 8003f84:	24000004 	.word	0x24000004
 8003f88:	24000000 	.word	0x24000000

08003f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f90:	f7ff ffcc 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4904      	ldr	r1, [pc, #16]	@ (8003fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	08009e14 	.word	0x08009e14

08003fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003fbc:	f7ff ffb6 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4904      	ldr	r1, [pc, #16]	@ (8003fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	08009e14 	.word	0x08009e14

08003fe4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe8:	b0ca      	sub	sp, #296	@ 0x128
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004008:	2500      	movs	r5, #0
 800400a:	ea54 0305 	orrs.w	r3, r4, r5
 800400e:	d049      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004016:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800401a:	d02f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800401c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004020:	d828      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004026:	d01a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800402c:	d822      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004036:	d007      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004038:	e01c      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800403a:	4bb8      	ldr	r3, [pc, #736]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	4ab7      	ldr	r2, [pc, #732]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004044:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004046:	e01a      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404c:	3308      	adds	r3, #8
 800404e:	2102      	movs	r1, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fc8f 	bl	8005974 <RCCEx_PLL2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800405c:	e00f      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	3328      	adds	r3, #40	@ 0x28
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f001 fd36 	bl	8005ad8 <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004086:	4ba5      	ldr	r3, [pc, #660]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004092:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004094:	4aa1      	ldr	r2, [pc, #644]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004096:	430b      	orrs	r3, r1
 8004098:	6513      	str	r3, [r2, #80]	@ 0x50
 800409a:	e003      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80040b0:	f04f 0900 	mov.w	r9, #0
 80040b4:	ea58 0309 	orrs.w	r3, r8, r9
 80040b8:	d047      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d82a      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80040c4:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040e1 	.word	0x080040e1
 80040d0:	080040ef 	.word	0x080040ef
 80040d4:	08004105 	.word	0x08004105
 80040d8:	08004123 	.word	0x08004123
 80040dc:	08004123 	.word	0x08004123
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e0:	4b8e      	ldr	r3, [pc, #568]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e4:	4a8d      	ldr	r2, [pc, #564]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040ec:	e01a      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	3308      	adds	r3, #8
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 fc3c 	bl	8005974 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004102:	e00f      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004108:	3328      	adds	r3, #40	@ 0x28
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fce3 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004118:	e004      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004120:	e000      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800412c:	4b7b      	ldr	r3, [pc, #492]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800412e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004130:	f023 0107 	bic.w	r1, r3, #7
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	4a78      	ldr	r2, [pc, #480]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800413c:	430b      	orrs	r3, r1
 800413e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004140:	e003      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004156:	f04f 0b00 	mov.w	fp, #0
 800415a:	ea5a 030b 	orrs.w	r3, sl, fp
 800415e:	d04c      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800416a:	d030      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800416c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004170:	d829      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004172:	2bc0      	cmp	r3, #192	@ 0xc0
 8004174:	d02d      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004176:	2bc0      	cmp	r3, #192	@ 0xc0
 8004178:	d825      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800417a:	2b80      	cmp	r3, #128	@ 0x80
 800417c:	d018      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800417e:	2b80      	cmp	r3, #128	@ 0x80
 8004180:	d821      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004186:	2b40      	cmp	r3, #64	@ 0x40
 8004188:	d007      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800418a:	e01c      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418c:	4b63      	ldr	r3, [pc, #396]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	4a62      	ldr	r2, [pc, #392]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004198:	e01c      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419e:	3308      	adds	r3, #8
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 fbe6 	bl	8005974 <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80041ae:	e011      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b4:	3328      	adds	r3, #40	@ 0x28
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 fc8d 	bl	8005ad8 <RCCEx_PLL3_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80041c4:	e006      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041cc:	e002      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80041d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80041dc:	4b4f      	ldr	r3, [pc, #316]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	4a4c      	ldr	r2, [pc, #304]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80041f0:	e003      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004206:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800420a:	2300      	movs	r3, #0
 800420c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004210:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004214:	460b      	mov	r3, r1
 8004216:	4313      	orrs	r3, r2
 8004218:	d053      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004222:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004226:	d035      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004228:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800422c:	d82e      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800422e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004232:	d031      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004234:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004238:	d828      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800423a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800423e:	d01a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004244:	d822      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800424a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800424e:	d007      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004250:	e01c      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004252:	4b32      	ldr	r3, [pc, #200]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	4a31      	ldr	r2, [pc, #196]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800425c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800425e:	e01c      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	3308      	adds	r3, #8
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fb83 	bl	8005974 <RCCEx_PLL2_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004274:	e011      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	3328      	adds	r3, #40	@ 0x28
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f001 fc2a 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800428a:	e006      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004292:	e002      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80042a2:	4b1e      	ldr	r3, [pc, #120]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042b2:	4a1a      	ldr	r2, [pc, #104]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80042ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80042d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d056      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80042ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ee:	d038      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80042f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042f4:	d831      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042fa:	d034      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80042fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004300:	d82b      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004306:	d01d      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800430c:	d825      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004312:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004318:	e01f      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800431a:	bf00      	nop
 800431c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004320:	4ba2      	ldr	r3, [pc, #648]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	4aa1      	ldr	r2, [pc, #644]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800432c:	e01c      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	3308      	adds	r3, #8
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f001 fb1c 	bl	8005974 <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004342:	e011      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	3328      	adds	r3, #40	@ 0x28
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fbc3 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004358:	e006      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004370:	4b8e      	ldr	r3, [pc, #568]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004374:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004380:	4a8a      	ldr	r2, [pc, #552]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004382:	430b      	orrs	r3, r1
 8004384:	6593      	str	r3, [r2, #88]	@ 0x58
 8004386:	e003      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800438c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800439c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80043a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d03a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b6:	2b30      	cmp	r3, #48	@ 0x30
 80043b8:	d01f      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80043ba:	2b30      	cmp	r3, #48	@ 0x30
 80043bc:	d819      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d00c      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d815      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d019      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d111      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ce:	4b77      	ldr	r3, [pc, #476]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	4a76      	ldr	r2, [pc, #472]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043da:	e011      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	3308      	adds	r3, #8
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fac5 	bl	8005974 <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004408:	4b68      	ldr	r3, [pc, #416]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800440a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004416:	4a65      	ldr	r2, [pc, #404]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004418:	430b      	orrs	r3, r1
 800441a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004432:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800443c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d051      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004450:	d035      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004456:	d82e      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004458:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800445c:	d031      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800445e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004462:	d828      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004468:	d01a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446e:	d822      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004478:	d007      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800447a:	e01c      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447c:	4b4b      	ldr	r3, [pc, #300]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	4a4a      	ldr	r2, [pc, #296]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004488:	e01c      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448e:	3308      	adds	r3, #8
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f001 fa6e 	bl	8005974 <RCCEx_PLL2_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800449e:	e011      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	3328      	adds	r3, #40	@ 0x28
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 fb15 	bl	8005ad8 <RCCEx_PLL3_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044b4:	e006      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044bc:	e002      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80044c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044cc:	4b37      	ldr	r3, [pc, #220]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044da:	4a34      	ldr	r2, [pc, #208]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6513      	str	r3, [r2, #80]	@ 0x50
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80044f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044fa:	2300      	movs	r3, #0
 80044fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004500:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d056      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004514:	d033      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004516:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800451a:	d82c      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800451c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004520:	d02f      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004522:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004526:	d826      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004528:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800452c:	d02b      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800452e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004532:	d820      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004538:	d012      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800453a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800453e:	d81a      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d022      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004548:	d115      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	3308      	adds	r3, #8
 8004550:	2101      	movs	r1, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fa0e 	bl	8005974 <RCCEx_PLL2_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800455e:	e015      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004564:	3328      	adds	r3, #40	@ 0x28
 8004566:	2101      	movs	r1, #1
 8004568:	4618      	mov	r0, r3
 800456a:	f001 fab5 	bl	8005ad8 <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004574:	e00a      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800457c:	e006      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800457e:	bf00      	nop
 8004580:	e004      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800458a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10d      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004598:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800459c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a2:	4a02      	ldr	r2, [pc, #8]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80045a8:	e006      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80045aa:	bf00      	nop
 80045ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80045c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045c8:	2300      	movs	r3, #0
 80045ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4313      	orrs	r3, r2
 80045d6:	d055      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045e4:	d033      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80045e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045ea:	d82c      	bhi.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f0:	d02f      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f6:	d826      	bhi.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045fc:	d02b      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80045fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004602:	d820      	bhi.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004608:	d012      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800460a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800460e:	d81a      	bhi.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d022      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004614:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004618:	d115      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	3308      	adds	r3, #8
 8004620:	2101      	movs	r1, #1
 8004622:	4618      	mov	r0, r3
 8004624:	f001 f9a6 	bl	8005974 <RCCEx_PLL2_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800462e:	e015      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	3328      	adds	r3, #40	@ 0x28
 8004636:	2101      	movs	r1, #1
 8004638:	4618      	mov	r0, r3
 800463a:	f001 fa4d 	bl	8005ad8 <RCCEx_PLL3_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004644:	e00a      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800464c:	e006      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800464e:	bf00      	nop
 8004650:	e004      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800465a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10b      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004664:	4ba3      	ldr	r3, [pc, #652]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004668:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004674:	4a9f      	ldr	r2, [pc, #636]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004676:	430b      	orrs	r3, r1
 8004678:	6593      	str	r3, [r2, #88]	@ 0x58
 800467a:	e003      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800469a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d037      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046ae:	d00e      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80046b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046b4:	d816      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d018      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 80046ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046be:	d111      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c0:	4b8c      	ldr	r3, [pc, #560]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	4a8b      	ldr	r2, [pc, #556]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046cc:	e00f      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	3308      	adds	r3, #8
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 f94c 	bl	8005974 <RCCEx_PLL2_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046e2:	e004      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046ea:	e000      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80046ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046f6:	4b7f      	ldr	r3, [pc, #508]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004704:	4a7b      	ldr	r2, [pc, #492]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004706:	430b      	orrs	r3, r1
 8004708:	6513      	str	r3, [r2, #80]	@ 0x50
 800470a:	e003      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800472a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800472e:	460b      	mov	r3, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	d039      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473a:	2b03      	cmp	r3, #3
 800473c:	d81c      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800473e:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	08004781 	.word	0x08004781
 8004748:	08004755 	.word	0x08004755
 800474c:	08004763 	.word	0x08004763
 8004750:	08004781 	.word	0x08004781
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004754:	4b67      	ldr	r3, [pc, #412]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	4a66      	ldr	r2, [pc, #408]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800475a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800475e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004760:	e00f      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	3308      	adds	r3, #8
 8004768:	2102      	movs	r1, #2
 800476a:	4618      	mov	r0, r3
 800476c:	f001 f902 	bl	8005974 <RCCEx_PLL2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004776:	e004      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800478a:	4b5a      	ldr	r3, [pc, #360]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800478c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478e:	f023 0103 	bic.w	r1, r3, #3
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004798:	4a56      	ldr	r2, [pc, #344]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800479a:	430b      	orrs	r3, r1
 800479c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80047b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f000 809f 	beq.w	8004908 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ca:	4b4b      	ldr	r3, [pc, #300]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a4a      	ldr	r2, [pc, #296]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d6:	f7fc fdc9 	bl	800136c <HAL_GetTick>
 80047da:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047de:	e00b      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e0:	f7fc fdc4 	bl	800136c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b64      	cmp	r3, #100	@ 0x64
 80047ee:	d903      	bls.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f6:	e005      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f8:	4b3f      	ldr	r3, [pc, #252]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ed      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004808:	2b00      	cmp	r3, #0
 800480a:	d179      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800480c:	4b39      	ldr	r3, [pc, #228]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800480e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004814:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004818:	4053      	eors	r3, r2
 800481a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481e:	2b00      	cmp	r3, #0
 8004820:	d015      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004822:	4b34      	ldr	r3, [pc, #208]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800482e:	4b31      	ldr	r3, [pc, #196]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	4a30      	ldr	r2, [pc, #192]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004838:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800483a:	4b2e      	ldr	r3, [pc, #184]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	4a2d      	ldr	r2, [pc, #180]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004844:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004846:	4a2b      	ldr	r2, [pc, #172]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004848:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800484c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800485a:	d118      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fc fd86 	bl	800136c <HAL_GetTick>
 8004860:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004864:	e00d      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fc fd81 	bl	800136c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004870:	1ad2      	subs	r2, r2, r3
 8004872:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004876:	429a      	cmp	r2, r3
 8004878:	d903      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004880:	e005      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004882:	4b1c      	ldr	r3, [pc, #112]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0eb      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004892:	2b00      	cmp	r3, #0
 8004894:	d129      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800489e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a6:	d10e      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80048a8:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048b8:	091a      	lsrs	r2, r3, #4
 80048ba:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80048bc:	4013      	ands	r3, r2
 80048be:	4a0d      	ldr	r2, [pc, #52]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6113      	str	r3, [r2, #16]
 80048c4:	e005      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	4a0a      	ldr	r2, [pc, #40]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048d0:	6113      	str	r3, [r2, #16]
 80048d2:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e2:	4a04      	ldr	r2, [pc, #16]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e8:	e00e      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80048f2:	e009      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80048f4:	58024400 	.word	0x58024400
 80048f8:	58024800 	.word	0x58024800
 80048fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f002 0301 	and.w	r3, r2, #1
 8004914:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004918:	2300      	movs	r3, #0
 800491a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800491e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004922:	460b      	mov	r3, r1
 8004924:	4313      	orrs	r3, r2
 8004926:	f000 8089 	beq.w	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004930:	2b28      	cmp	r3, #40	@ 0x28
 8004932:	d86b      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004934:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	08004a15 	.word	0x08004a15
 8004940:	08004a0d 	.word	0x08004a0d
 8004944:	08004a0d 	.word	0x08004a0d
 8004948:	08004a0d 	.word	0x08004a0d
 800494c:	08004a0d 	.word	0x08004a0d
 8004950:	08004a0d 	.word	0x08004a0d
 8004954:	08004a0d 	.word	0x08004a0d
 8004958:	08004a0d 	.word	0x08004a0d
 800495c:	080049e1 	.word	0x080049e1
 8004960:	08004a0d 	.word	0x08004a0d
 8004964:	08004a0d 	.word	0x08004a0d
 8004968:	08004a0d 	.word	0x08004a0d
 800496c:	08004a0d 	.word	0x08004a0d
 8004970:	08004a0d 	.word	0x08004a0d
 8004974:	08004a0d 	.word	0x08004a0d
 8004978:	08004a0d 	.word	0x08004a0d
 800497c:	080049f7 	.word	0x080049f7
 8004980:	08004a0d 	.word	0x08004a0d
 8004984:	08004a0d 	.word	0x08004a0d
 8004988:	08004a0d 	.word	0x08004a0d
 800498c:	08004a0d 	.word	0x08004a0d
 8004990:	08004a0d 	.word	0x08004a0d
 8004994:	08004a0d 	.word	0x08004a0d
 8004998:	08004a0d 	.word	0x08004a0d
 800499c:	08004a15 	.word	0x08004a15
 80049a0:	08004a0d 	.word	0x08004a0d
 80049a4:	08004a0d 	.word	0x08004a0d
 80049a8:	08004a0d 	.word	0x08004a0d
 80049ac:	08004a0d 	.word	0x08004a0d
 80049b0:	08004a0d 	.word	0x08004a0d
 80049b4:	08004a0d 	.word	0x08004a0d
 80049b8:	08004a0d 	.word	0x08004a0d
 80049bc:	08004a15 	.word	0x08004a15
 80049c0:	08004a0d 	.word	0x08004a0d
 80049c4:	08004a0d 	.word	0x08004a0d
 80049c8:	08004a0d 	.word	0x08004a0d
 80049cc:	08004a0d 	.word	0x08004a0d
 80049d0:	08004a0d 	.word	0x08004a0d
 80049d4:	08004a0d 	.word	0x08004a0d
 80049d8:	08004a0d 	.word	0x08004a0d
 80049dc:	08004a15 	.word	0x08004a15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e4:	3308      	adds	r3, #8
 80049e6:	2101      	movs	r1, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 ffc3 	bl	8005974 <RCCEx_PLL2_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049f4:	e00f      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fa:	3328      	adds	r3, #40	@ 0x28
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f001 f86a 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a0a:	e004      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a12:	e000      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a1e:	4bbf      	ldr	r3, [pc, #764]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a2c:	4abb      	ldr	r2, [pc, #748]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a32:	e003      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f002 0302 	and.w	r3, r2, #2
 8004a48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004a52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004a56:	460b      	mov	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	d041      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d824      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004ab9 	.word	0x08004ab9
 8004a70:	08004a85 	.word	0x08004a85
 8004a74:	08004a9b 	.word	0x08004a9b
 8004a78:	08004ab9 	.word	0x08004ab9
 8004a7c:	08004ab9 	.word	0x08004ab9
 8004a80:	08004ab9 	.word	0x08004ab9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a88:	3308      	adds	r3, #8
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ff71 	bl	8005974 <RCCEx_PLL2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a98:	e00f      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9e:	3328      	adds	r3, #40	@ 0x28
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f818 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004aae:	e004      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ac2:	4b96      	ldr	r3, [pc, #600]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac6:	f023 0107 	bic.w	r1, r3, #7
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ad0:	4a92      	ldr	r2, [pc, #584]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ad6:	e003      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f002 0304 	and.w	r3, r2, #4
 8004aec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004af6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4313      	orrs	r3, r2
 8004afe:	d044      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b08:	2b05      	cmp	r3, #5
 8004b0a:	d825      	bhi.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b61 	.word	0x08004b61
 8004b18:	08004b2d 	.word	0x08004b2d
 8004b1c:	08004b43 	.word	0x08004b43
 8004b20:	08004b61 	.word	0x08004b61
 8004b24:	08004b61 	.word	0x08004b61
 8004b28:	08004b61 	.word	0x08004b61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b30:	3308      	adds	r3, #8
 8004b32:	2101      	movs	r1, #1
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 ff1d 	bl	8005974 <RCCEx_PLL2_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b40:	e00f      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b46:	3328      	adds	r3, #40	@ 0x28
 8004b48:	2101      	movs	r1, #1
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 ffc4 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b56:	e004      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b5e:	e000      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6e:	f023 0107 	bic.w	r1, r3, #7
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7a:	4a68      	ldr	r2, [pc, #416]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b80:	e003      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f002 0320 	and.w	r3, r2, #32
 8004b96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	d055      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bb6:	d033      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bbc:	d82c      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc2:	d02f      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc8:	d826      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004bca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bce:	d02b      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004bd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bd4:	d820      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bda:	d012      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004be0:	d81a      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d022      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bea:	d115      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 febd 	bl	8005974 <RCCEx_PLL2_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c00:	e015      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c06:	3328      	adds	r3, #40	@ 0x28
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 ff64 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c16:	e00a      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c1e:	e006      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c20:	bf00      	nop
 8004c22:	e004      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c24:	bf00      	nop
 8004c26:	e002      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c28:	bf00      	nop
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c36:	4b39      	ldr	r3, [pc, #228]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c46:	4a35      	ldr	r2, [pc, #212]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c4c:	e003      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c66:	2300      	movs	r3, #0
 8004c68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004c6c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4313      	orrs	r3, r2
 8004c74:	d058      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c7e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c82:	d033      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004c84:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c88:	d82c      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c8e:	d02f      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c94:	d826      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c9a:	d02b      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004c9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ca0:	d820      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca6:	d012      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cac:	d81a      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d022      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb6:	d115      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fe57 	bl	8005974 <RCCEx_PLL2_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ccc:	e015      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd2:	3328      	adds	r3, #40	@ 0x28
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fefe 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cea:	e006      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cec:	bf00      	nop
 8004cee:	e004      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cf0:	bf00      	nop
 8004cf2:	e002      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cf4:	bf00      	nop
 8004cf6:	e000      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10e      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d02:	4b06      	ldr	r3, [pc, #24]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d06:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d12:	4a02      	ldr	r2, [pc, #8]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d18:	e006      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004d1a:	bf00      	nop
 8004d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004d42:	460b      	mov	r3, r1
 8004d44:	4313      	orrs	r3, r2
 8004d46:	d055      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d50:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d54:	d033      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004d56:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d5a:	d82c      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d60:	d02f      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d66:	d826      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d68:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d6c:	d02b      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004d6e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d72:	d820      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d78:	d012      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d7e:	d81a      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d022      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d88:	d115      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8e:	3308      	adds	r3, #8
 8004d90:	2100      	movs	r1, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fdee 	bl	8005974 <RCCEx_PLL2_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d9e:	e015      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da4:	3328      	adds	r3, #40	@ 0x28
 8004da6:	2102      	movs	r1, #2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fe95 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004db4:	e00a      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dbe:	bf00      	nop
 8004dc0:	e004      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dc2:	bf00      	nop
 8004dc4:	e002      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004dd4:	4ba1      	ldr	r3, [pc, #644]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004de4:	4a9d      	ldr	r2, [pc, #628]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004de6:	430b      	orrs	r3, r1
 8004de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f002 0308 	and.w	r3, r2, #8
 8004e00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e04:	2300      	movs	r3, #0
 8004e06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4313      	orrs	r3, r2
 8004e12:	d01e      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e26:	3328      	adds	r3, #40	@ 0x28
 8004e28:	2102      	movs	r1, #2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fe54 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e3c:	4b87      	ldr	r3, [pc, #540]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e4c:	4a83      	ldr	r2, [pc, #524]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f002 0310 	and.w	r3, r2, #16
 8004e5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e62:	2300      	movs	r3, #0
 8004e64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	d01e      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e84:	3328      	adds	r3, #40	@ 0x28
 8004e86:	2102      	movs	r1, #2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fe25 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e9a:	4b70      	ldr	r3, [pc, #448]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eaa:	4a6c      	ldr	r2, [pc, #432]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eac:	430b      	orrs	r3, r1
 8004eae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ec6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	d03e      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ed8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004edc:	d022      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004ede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ee2:	d81b      	bhi.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eec:	d00b      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004eee:	e015      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fd3b 	bl	8005974 <RCCEx_PLL2_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f04:	e00f      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0a:	3328      	adds	r3, #40	@ 0x28
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fde2 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f1a:	e004      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f22:	e000      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f2e:	4b4b      	ldr	r3, [pc, #300]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f3e:	4a47      	ldr	r2, [pc, #284]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f44:	e003      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f64:	460b      	mov	r3, r1
 8004f66:	4313      	orrs	r3, r2
 8004f68:	d03b      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f76:	d01f      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004f78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f7c:	d818      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f82:	d003      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004f84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f88:	d007      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004f8a:	e011      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8c:	4b33      	ldr	r3, [pc, #204]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	4a32      	ldr	r2, [pc, #200]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f98:	e00f      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	3328      	adds	r3, #40	@ 0x28
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fd98 	bl	8005ad8 <RCCEx_PLL3_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fae:	e004      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fb6:	e000      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10b      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fc2:	4b26      	ldr	r3, [pc, #152]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd2:	4a22      	ldr	r2, [pc, #136]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fd8:	e003      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004fee:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ff4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	d034      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800500c:	d007      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800500e:	e011      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005010:	4b12      	ldr	r3, [pc, #72]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	4a11      	ldr	r2, [pc, #68]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800501a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800501c:	e00e      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005022:	3308      	adds	r3, #8
 8005024:	2102      	movs	r1, #2
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fca4 	bl	8005974 <RCCEx_PLL2_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005032:	e003      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800503a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10d      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005048:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800504c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005052:	4a02      	ldr	r2, [pc, #8]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005054:	430b      	orrs	r3, r1
 8005056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005058:	e006      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800505a:	bf00      	nop
 800505c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005064:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005076:	2300      	movs	r3, #0
 8005078:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800507a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800507e:	460b      	mov	r3, r1
 8005080:	4313      	orrs	r3, r2
 8005082:	d00c      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005088:	3328      	adds	r3, #40	@ 0x28
 800508a:	2102      	movs	r1, #2
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fd23 	bl	8005ad8 <RCCEx_PLL3_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800509e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80050aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80050ac:	2300      	movs	r3, #0
 80050ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80050b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80050b4:	460b      	mov	r3, r1
 80050b6:	4313      	orrs	r3, r2
 80050b8:	d038      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050c6:	d018      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80050c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050cc:	d811      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80050ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d2:	d014      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80050d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d8:	d80b      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d011      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80050de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050e2:	d106      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e4:	4bc3      	ldr	r3, [pc, #780]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	4ac2      	ldr	r2, [pc, #776]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80050f0:	e008      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050f8:	e004      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050fa:	bf00      	nop
 80050fc:	e002      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800510c:	4bb9      	ldr	r3, [pc, #740]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800510e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005110:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800511c:	4ab5      	ldr	r2, [pc, #724]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800511e:	430b      	orrs	r3, r1
 8005120:	6553      	str	r3, [r2, #84]	@ 0x54
 8005122:	e003      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800512c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005138:	65bb      	str	r3, [r7, #88]	@ 0x58
 800513a:	2300      	movs	r3, #0
 800513c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800513e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005142:	460b      	mov	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	d009      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005148:	4baa      	ldr	r3, [pc, #680]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800514a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005156:	4aa7      	ldr	r2, [pc, #668]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005158:	430b      	orrs	r3, r1
 800515a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800515c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005168:	653b      	str	r3, [r7, #80]	@ 0x50
 800516a:	2300      	movs	r3, #0
 800516c:	657b      	str	r3, [r7, #84]	@ 0x54
 800516e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005172:	460b      	mov	r3, r1
 8005174:	4313      	orrs	r3, r2
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005178:	4b9e      	ldr	r3, [pc, #632]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005184:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005188:	4a9a      	ldr	r2, [pc, #616]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800518a:	430b      	orrs	r3, r1
 800518c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800519a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800519c:	2300      	movs	r3, #0
 800519e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80051a4:	460b      	mov	r3, r1
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051aa:	4b92      	ldr	r3, [pc, #584]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051b8:	4a8e      	ldr	r2, [pc, #568]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ba:	430b      	orrs	r3, r1
 80051bc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80051ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80051cc:	2300      	movs	r3, #0
 80051ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80051d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051da:	4b86      	ldr	r3, [pc, #536]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	4a85      	ldr	r2, [pc, #532]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80051e4:	6113      	str	r3, [r2, #16]
 80051e6:	4b83      	ldr	r3, [pc, #524]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e8:	6919      	ldr	r1, [r3, #16]
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051f2:	4a80      	ldr	r2, [pc, #512]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005204:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005206:	2300      	movs	r3, #0
 8005208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800520a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800520e:	460b      	mov	r3, r1
 8005210:	4313      	orrs	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005214:	4b77      	ldr	r3, [pc, #476]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005218:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005222:	4a74      	ldr	r2, [pc, #464]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005224:	430b      	orrs	r3, r1
 8005226:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005234:	633b      	str	r3, [r7, #48]	@ 0x30
 8005236:	2300      	movs	r3, #0
 8005238:	637b      	str	r3, [r7, #52]	@ 0x34
 800523a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800523e:	460b      	mov	r3, r1
 8005240:	4313      	orrs	r3, r2
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005244:	4b6b      	ldr	r3, [pc, #428]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005248:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800524c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005254:	4a67      	ldr	r2, [pc, #412]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005256:	430b      	orrs	r3, r1
 8005258:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	2100      	movs	r1, #0
 8005264:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800526c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005270:	460b      	mov	r3, r1
 8005272:	4313      	orrs	r3, r2
 8005274:	d011      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527a:	3308      	adds	r3, #8
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fb78 	bl	8005974 <RCCEx_PLL2_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800528a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	2100      	movs	r1, #0
 80052a4:	6239      	str	r1, [r7, #32]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80052b0:	460b      	mov	r3, r1
 80052b2:	4313      	orrs	r3, r2
 80052b4:	d011      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ba:	3308      	adds	r3, #8
 80052bc:	2101      	movs	r1, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fb58 	bl	8005974 <RCCEx_PLL2_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	2100      	movs	r1, #0
 80052e4:	61b9      	str	r1, [r7, #24]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052f0:	460b      	mov	r3, r1
 80052f2:	4313      	orrs	r3, r2
 80052f4:	d011      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fa:	3308      	adds	r3, #8
 80052fc:	2102      	movs	r1, #2
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fb38 	bl	8005974 <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800530a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005316:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800531a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	2100      	movs	r1, #0
 8005324:	6139      	str	r1, [r7, #16]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005330:	460b      	mov	r3, r1
 8005332:	4313      	orrs	r3, r2
 8005334:	d011      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	3328      	adds	r3, #40	@ 0x28
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fbca 	bl	8005ad8 <RCCEx_PLL3_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800534a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	2100      	movs	r1, #0
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	f003 0310 	and.w	r3, r3, #16
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005370:	460b      	mov	r3, r1
 8005372:	4313      	orrs	r3, r2
 8005374:	d011      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	3328      	adds	r3, #40	@ 0x28
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fbaa 	bl	8005ad8 <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800538a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	2100      	movs	r1, #0
 80053a4:	6039      	str	r1, [r7, #0]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80053b0:	460b      	mov	r3, r1
 80053b2:	4313      	orrs	r3, r2
 80053b4:	d011      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ba:	3328      	adds	r3, #40	@ 0x28
 80053bc:	2102      	movs	r1, #2
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fb8a 	bl	8005ad8 <RCCEx_PLL3_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80053ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80053da:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80053ee:	46bd      	mov	sp, r7
 80053f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053f4:	58024400 	.word	0x58024400

080053f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80053fc:	f7fe fd96 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4904      	ldr	r1, [pc, #16]	@ (8005420 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	58024400 	.word	0x58024400
 8005420:	08009e14 	.word	0x08009e14

08005424 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	@ 0x24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800542c:	4ba1      	ldr	r3, [pc, #644]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005436:	4b9f      	ldr	r3, [pc, #636]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	0b1b      	lsrs	r3, r3, #12
 800543c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005440:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005442:	4b9c      	ldr	r3, [pc, #624]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005446:	091b      	lsrs	r3, r3, #4
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800544e:	4b99      	ldr	r3, [pc, #612]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005452:	08db      	lsrs	r3, r3, #3
 8005454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8111 	beq.w	8005694 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b02      	cmp	r3, #2
 8005476:	f000 8083 	beq.w	8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2b02      	cmp	r3, #2
 800547e:	f200 80a1 	bhi.w	80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d056      	beq.n	800553c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800548e:	e099      	b.n	80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005490:	4b88      	ldr	r3, [pc, #544]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d02d      	beq.n	80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800549c:	4b85      	ldr	r3, [pc, #532]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	08db      	lsrs	r3, r3, #3
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	4a84      	ldr	r2, [pc, #528]	@ (80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
 80054ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c6:	4b7b      	ldr	r3, [pc, #492]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054f6:	e087      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550a:	4b6a      	ldr	r3, [pc, #424]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800550c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551a:	ed97 6a03 	vldr	s12, [r7, #12]
 800551e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800553a:	e065      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005546:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800554a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554e:	4b59      	ldr	r3, [pc, #356]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005562:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800557e:	e043      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800558e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005592:	4b48      	ldr	r3, [pc, #288]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055c2:	e021      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d6:	4b37      	ldr	r3, [pc, #220]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005606:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005608:	4b2a      	ldr	r3, [pc, #168]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800560a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560c:	0a5b      	lsrs	r3, r3, #9
 800560e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800561e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005622:	edd7 6a07 	vldr	s13, [r7, #28]
 8005626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800562a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562e:	ee17 2a90 	vmov	r2, s15
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005636:	4b1f      	ldr	r3, [pc, #124]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	0c1b      	lsrs	r3, r3, #16
 800563c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800564c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005650:	edd7 6a07 	vldr	s13, [r7, #28]
 8005654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800565c:	ee17 2a90 	vmov	r2, s15
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005664:	4b13      	ldr	r3, [pc, #76]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800567a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800567e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568a:	ee17 2a90 	vmov	r2, s15
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005692:	e008      	b.n	80056a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	609a      	str	r2, [r3, #8]
}
 80056a6:	bf00      	nop
 80056a8:	3724      	adds	r7, #36	@ 0x24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	03d09000 	.word	0x03d09000
 80056bc:	46000000 	.word	0x46000000
 80056c0:	4c742400 	.word	0x4c742400
 80056c4:	4a742400 	.word	0x4a742400
 80056c8:	4af42400 	.word	0x4af42400

080056cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b089      	sub	sp, #36	@ 0x24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056d4:	4ba1      	ldr	r3, [pc, #644]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80056de:	4b9f      	ldr	r3, [pc, #636]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	0d1b      	lsrs	r3, r3, #20
 80056e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056ea:	4b9c      	ldr	r3, [pc, #624]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	0a1b      	lsrs	r3, r3, #8
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80056f6:	4b99      	ldr	r3, [pc, #612]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fa:	08db      	lsrs	r3, r3, #3
 80056fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8111 	beq.w	800593c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b02      	cmp	r3, #2
 800571e:	f000 8083 	beq.w	8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b02      	cmp	r3, #2
 8005726:	f200 80a1 	bhi.w	800586c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d056      	beq.n	80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005736:	e099      	b.n	800586c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005738:	4b88      	ldr	r3, [pc, #544]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d02d      	beq.n	80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005744:	4b85      	ldr	r3, [pc, #532]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	08db      	lsrs	r3, r3, #3
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	4a84      	ldr	r2, [pc, #528]	@ (8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
 8005754:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576e:	4b7b      	ldr	r3, [pc, #492]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005782:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800578a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800579e:	e087      	b.n	80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b2:	4b6a      	ldr	r3, [pc, #424]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057e2:	e065      	b.n	80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800596c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f6:	4b59      	ldr	r3, [pc, #356]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005806:	ed97 6a03 	vldr	s12, [r7, #12]
 800580a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800580e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800581a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005826:	e043      	b.n	80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583a:	4b48      	ldr	r3, [pc, #288]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584a:	ed97 6a03 	vldr	s12, [r7, #12]
 800584e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800586a:	e021      	b.n	80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800596c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800587a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587e:	4b37      	ldr	r3, [pc, #220]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005892:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80058b0:	4b2a      	ldr	r3, [pc, #168]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b4:	0a5b      	lsrs	r3, r3, #9
 80058b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d6:	ee17 2a90 	vmov	r2, s15
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80058de:	4b1f      	ldr	r3, [pc, #124]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005904:	ee17 2a90 	vmov	r2, s15
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800590c:	4b13      	ldr	r3, [pc, #76]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800590e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005910:	0e1b      	lsrs	r3, r3, #24
 8005912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005926:	edd7 6a07 	vldr	s13, [r7, #28]
 800592a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800592e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005932:	ee17 2a90 	vmov	r2, s15
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800593a:	e008      	b.n	800594e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
}
 800594e:	bf00      	nop
 8005950:	3724      	adds	r7, #36	@ 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	58024400 	.word	0x58024400
 8005960:	03d09000 	.word	0x03d09000
 8005964:	46000000 	.word	0x46000000
 8005968:	4c742400 	.word	0x4c742400
 800596c:	4a742400 	.word	0x4a742400
 8005970:	4af42400 	.word	0x4af42400

08005974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005982:	4b53      	ldr	r3, [pc, #332]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b03      	cmp	r3, #3
 800598c:	d101      	bne.n	8005992 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e099      	b.n	8005ac6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005992:	4b4f      	ldr	r3, [pc, #316]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a4e      	ldr	r2, [pc, #312]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005998:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800599c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599e:	f7fb fce5 	bl	800136c <HAL_GetTick>
 80059a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059a4:	e008      	b.n	80059b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059a6:	f7fb fce1 	bl	800136c <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e086      	b.n	8005ac6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059b8:	4b45      	ldr	r3, [pc, #276]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f0      	bne.n	80059a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059c4:	4b42      	ldr	r3, [pc, #264]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	031b      	lsls	r3, r3, #12
 80059d2:	493f      	ldr	r1, [pc, #252]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	3b01      	subs	r3, #1
 80059de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	025b      	lsls	r3, r3, #9
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	061b      	lsls	r3, r3, #24
 8005a04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a08:	4931      	ldr	r1, [pc, #196]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a0e:	4b30      	ldr	r3, [pc, #192]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	492d      	ldr	r1, [pc, #180]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a20:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	f023 0220 	bic.w	r2, r3, #32
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	4928      	ldr	r1, [pc, #160]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a32:	4b27      	ldr	r3, [pc, #156]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	4a26      	ldr	r2, [pc, #152]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a38:	f023 0310 	bic.w	r3, r3, #16
 8005a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a3e:	4b24      	ldr	r3, [pc, #144]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a42:	4b24      	ldr	r3, [pc, #144]	@ (8005ad4 <RCCEx_PLL2_Config+0x160>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	69d2      	ldr	r2, [r2, #28]
 8005a4a:	00d2      	lsls	r2, r2, #3
 8005a4c:	4920      	ldr	r1, [pc, #128]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a52:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a58:	f043 0310 	orr.w	r3, r3, #16
 8005a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a64:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	4a19      	ldr	r2, [pc, #100]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a70:	e00f      	b.n	8005a92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d106      	bne.n	8005a86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a78:	4b15      	ldr	r3, [pc, #84]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7c:	4a14      	ldr	r2, [pc, #80]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a84:	e005      	b.n	8005a92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a86:	4b12      	ldr	r3, [pc, #72]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	4a11      	ldr	r2, [pc, #68]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a92:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005a98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a9e:	f7fb fc65 	bl	800136c <HAL_GetTick>
 8005aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005aa4:	e008      	b.n	8005ab8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005aa6:	f7fb fc61 	bl	800136c <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ab8:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <RCCEx_PLL2_Config+0x15c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	ffff0007 	.word	0xffff0007

08005ad8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ae6:	4b53      	ldr	r3, [pc, #332]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d101      	bne.n	8005af6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e099      	b.n	8005c2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005af6:	4b4f      	ldr	r3, [pc, #316]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a4e      	ldr	r2, [pc, #312]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b02:	f7fb fc33 	bl	800136c <HAL_GetTick>
 8005b06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b08:	e008      	b.n	8005b1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b0a:	f7fb fc2f 	bl	800136c <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e086      	b.n	8005c2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b1c:	4b45      	ldr	r3, [pc, #276]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1f0      	bne.n	8005b0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b28:	4b42      	ldr	r3, [pc, #264]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	051b      	lsls	r3, r3, #20
 8005b36:	493f      	ldr	r1, [pc, #252]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	025b      	lsls	r3, r3, #9
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	061b      	lsls	r3, r3, #24
 8005b68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b6c:	4931      	ldr	r1, [pc, #196]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b72:	4b30      	ldr	r3, [pc, #192]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	492d      	ldr	r1, [pc, #180]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b84:	4b2b      	ldr	r3, [pc, #172]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	4928      	ldr	r1, [pc, #160]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b96:	4b27      	ldr	r3, [pc, #156]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9a:	4a26      	ldr	r2, [pc, #152]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ba2:	4b24      	ldr	r3, [pc, #144]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005ba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ba6:	4b24      	ldr	r3, [pc, #144]	@ (8005c38 <RCCEx_PLL3_Config+0x160>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	69d2      	ldr	r2, [r2, #28]
 8005bae:	00d2      	lsls	r2, r2, #3
 8005bb0:	4920      	ldr	r1, [pc, #128]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	4a1e      	ldr	r2, [pc, #120]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d106      	bne.n	8005bd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	4a19      	ldr	r2, [pc, #100]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bd4:	e00f      	b.n	8005bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d106      	bne.n	8005bea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bdc:	4b15      	ldr	r3, [pc, #84]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be0:	4a14      	ldr	r2, [pc, #80]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005be2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005be6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005be8:	e005      	b.n	8005bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005bea:	4b12      	ldr	r3, [pc, #72]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	4a11      	ldr	r2, [pc, #68]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c02:	f7fb fbb3 	bl	800136c <HAL_GetTick>
 8005c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c08:	e008      	b.n	8005c1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c0a:	f7fb fbaf 	bl	800136c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e006      	b.n	8005c2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <RCCEx_PLL3_Config+0x15c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	58024400 	.word	0x58024400
 8005c38:	ffff0007 	.word	0xffff0007

08005c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e049      	b.n	8005ce2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fb f93e 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f000 f9de 	bl	800603c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d001      	beq.n	8005d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e054      	b.n	8005dae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a26      	ldr	r2, [pc, #152]	@ (8005dbc <HAL_TIM_Base_Start_IT+0xd0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d022      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2e:	d01d      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a22      	ldr	r2, [pc, #136]	@ (8005dc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d018      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a21      	ldr	r2, [pc, #132]	@ (8005dc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00e      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1e      	ldr	r2, [pc, #120]	@ (8005dcc <HAL_TIM_Base_Start_IT+0xe0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d009      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d115      	bne.n	8005d98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	4b19      	ldr	r3, [pc, #100]	@ (8005dd8 <HAL_TIM_Base_Start_IT+0xec>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b06      	cmp	r3, #6
 8005d7c:	d015      	beq.n	8005daa <HAL_TIM_Base_Start_IT+0xbe>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d84:	d011      	beq.n	8005daa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d96:	e008      	b.n	8005daa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e000      	b.n	8005dac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005daa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800
 8005dc8:	40000c00 	.word	0x40000c00
 8005dcc:	40010400 	.word	0x40010400
 8005dd0:	40001800 	.word	0x40001800
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	00010007 	.word	0x00010007

08005ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d020      	beq.n	8005e40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01b      	beq.n	8005e40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0202 	mvn.w	r2, #2
 8005e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f8e9 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8db 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8ec 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d020      	beq.n	8005e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01b      	beq.n	8005e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0204 	mvn.w	r2, #4
 8005e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2202      	movs	r2, #2
 8005e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f8c3 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005e78:	e005      	b.n	8005e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8b5 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f8c6 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d020      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01b      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0208 	mvn.w	r2, #8
 8005ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2204      	movs	r2, #4
 8005eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f89d 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f88f 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f8a0 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 0310 	and.w	r3, r3, #16
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d020      	beq.n	8005f24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0210 	mvn.w	r2, #16
 8005ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2208      	movs	r2, #8
 8005efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f877 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005f10:	e005      	b.n	8005f1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f869 	bl	8005fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f87a 	bl	8006012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00c      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0201 	mvn.w	r2, #1
 8005f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fa fe32 	bl	8000bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d104      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00c      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d007      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f9a1 	bl	80062b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00c      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d007      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f999 	bl	80062cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00c      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f834 	bl	8006026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00c      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f06f 0220 	mvn.w	r2, #32
 8005fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f961 	bl	80062a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a46      	ldr	r2, [pc, #280]	@ (8006168 <TIM_Base_SetConfig+0x12c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605a:	d00f      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a43      	ldr	r2, [pc, #268]	@ (800616c <TIM_Base_SetConfig+0x130>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00b      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a42      	ldr	r2, [pc, #264]	@ (8006170 <TIM_Base_SetConfig+0x134>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a41      	ldr	r2, [pc, #260]	@ (8006174 <TIM_Base_SetConfig+0x138>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a40      	ldr	r2, [pc, #256]	@ (8006178 <TIM_Base_SetConfig+0x13c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d108      	bne.n	800608e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a35      	ldr	r2, [pc, #212]	@ (8006168 <TIM_Base_SetConfig+0x12c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d01f      	beq.n	80060d6 <TIM_Base_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800609c:	d01b      	beq.n	80060d6 <TIM_Base_SetConfig+0x9a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a32      	ldr	r2, [pc, #200]	@ (800616c <TIM_Base_SetConfig+0x130>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d017      	beq.n	80060d6 <TIM_Base_SetConfig+0x9a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a31      	ldr	r2, [pc, #196]	@ (8006170 <TIM_Base_SetConfig+0x134>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d013      	beq.n	80060d6 <TIM_Base_SetConfig+0x9a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a30      	ldr	r2, [pc, #192]	@ (8006174 <TIM_Base_SetConfig+0x138>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00f      	beq.n	80060d6 <TIM_Base_SetConfig+0x9a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2f      	ldr	r2, [pc, #188]	@ (8006178 <TIM_Base_SetConfig+0x13c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00b      	beq.n	80060d6 <TIM_Base_SetConfig+0x9a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2e      	ldr	r2, [pc, #184]	@ (800617c <TIM_Base_SetConfig+0x140>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d007      	beq.n	80060d6 <TIM_Base_SetConfig+0x9a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006180 <TIM_Base_SetConfig+0x144>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_Base_SetConfig+0x9a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2c      	ldr	r2, [pc, #176]	@ (8006184 <TIM_Base_SetConfig+0x148>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d108      	bne.n	80060e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a16      	ldr	r2, [pc, #88]	@ (8006168 <TIM_Base_SetConfig+0x12c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00f      	beq.n	8006134 <TIM_Base_SetConfig+0xf8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a18      	ldr	r2, [pc, #96]	@ (8006178 <TIM_Base_SetConfig+0x13c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00b      	beq.n	8006134 <TIM_Base_SetConfig+0xf8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a17      	ldr	r2, [pc, #92]	@ (800617c <TIM_Base_SetConfig+0x140>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d007      	beq.n	8006134 <TIM_Base_SetConfig+0xf8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a16      	ldr	r2, [pc, #88]	@ (8006180 <TIM_Base_SetConfig+0x144>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_Base_SetConfig+0xf8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a15      	ldr	r2, [pc, #84]	@ (8006184 <TIM_Base_SetConfig+0x148>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d103      	bne.n	800613c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b01      	cmp	r3, #1
 800614c:	d105      	bne.n	800615a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f023 0201 	bic.w	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	611a      	str	r2, [r3, #16]
  }
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40010000 	.word	0x40010000
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	40010400 	.word	0x40010400
 800617c:	40014000 	.word	0x40014000
 8006180:	40014400 	.word	0x40014400
 8006184:	40014800 	.word	0x40014800

08006188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800619c:	2302      	movs	r3, #2
 800619e:	e06d      	b.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a30      	ldr	r2, [pc, #192]	@ (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d004      	beq.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2f      	ldr	r2, [pc, #188]	@ (800628c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d108      	bne.n	80061e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80061da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a20      	ldr	r2, [pc, #128]	@ (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d022      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006212:	d01d      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1d      	ldr	r2, [pc, #116]	@ (8006290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d018      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1c      	ldr	r2, [pc, #112]	@ (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d013      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1a      	ldr	r2, [pc, #104]	@ (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00e      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a15      	ldr	r2, [pc, #84]	@ (800628c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d009      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a16      	ldr	r2, [pc, #88]	@ (800629c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a15      	ldr	r2, [pc, #84]	@ (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d10c      	bne.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	4313      	orrs	r3, r2
 8006260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800
 8006298:	40000c00 	.word	0x40000c00
 800629c:	40001800 	.word	0x40001800
 80062a0:	40014000 	.word	0x40014000

080062a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e042      	b.n	8006378 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d106      	bne.n	800630a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7fa fe61 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2224      	movs	r2, #36	@ 0x24
 800630e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0201 	bic.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 fa4a 	bl	80077c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fcdf 	bl	8006cf4 <UART_SetConfig>
 8006336:	4603      	mov	r3, r0
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e01b      	b.n	8006378 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800634e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800635e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 fac9 	bl	8007908 <UART_CheckIdleState>
 8006376:	4603      	mov	r3, r0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006380:	b480      	push	{r7}
 8006382:	b091      	sub	sp, #68	@ 0x44
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	4613      	mov	r3, r2
 800638c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006394:	2b20      	cmp	r3, #32
 8006396:	d178      	bne.n	800648a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_UART_Transmit_IT+0x24>
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e071      	b.n	800648c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	88fa      	ldrh	r2, [r7, #6]
 80063b2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	88fa      	ldrh	r2, [r7, #6]
 80063ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2221      	movs	r2, #33	@ 0x21
 80063d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063dc:	d12a      	bne.n	8006434 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e6:	d107      	bne.n	80063f8 <HAL_UART_Transmit_IT+0x78>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a29      	ldr	r2, [pc, #164]	@ (8006498 <HAL_UART_Transmit_IT+0x118>)
 80063f4:	679a      	str	r2, [r3, #120]	@ 0x78
 80063f6:	e002      	b.n	80063fe <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4a28      	ldr	r2, [pc, #160]	@ (800649c <HAL_UART_Transmit_IT+0x11c>)
 80063fc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3308      	adds	r3, #8
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006414:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3308      	adds	r3, #8
 800641c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800641e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006420:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800642c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e5      	bne.n	80063fe <HAL_UART_Transmit_IT+0x7e>
 8006432:	e028      	b.n	8006486 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800643c:	d107      	bne.n	800644e <HAL_UART_Transmit_IT+0xce>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4a15      	ldr	r2, [pc, #84]	@ (80064a0 <HAL_UART_Transmit_IT+0x120>)
 800644a:	679a      	str	r2, [r3, #120]	@ 0x78
 800644c:	e002      	b.n	8006454 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a14      	ldr	r2, [pc, #80]	@ (80064a4 <HAL_UART_Transmit_IT+0x124>)
 8006452:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	613b      	str	r3, [r7, #16]
   return(result);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006472:	623b      	str	r3, [r7, #32]
 8006474:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	69f9      	ldr	r1, [r7, #28]
 8006478:	6a3a      	ldr	r2, [r7, #32]
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e6      	bne.n	8006454 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	e000      	b.n	800648c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800648a:	2302      	movs	r3, #2
  }
}
 800648c:	4618      	mov	r0, r3
 800648e:	3744      	adds	r7, #68	@ 0x44
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	080080cf 	.word	0x080080cf
 800649c:	08007fef 	.word	0x08007fef
 80064a0:	08007f2d 	.word	0x08007f2d
 80064a4:	08007e75 	.word	0x08007e75

080064a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	@ 0x28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d137      	bne.n	8006530 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_UART_Receive_IT+0x24>
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e030      	b.n	8006532 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a18      	ldr	r2, [pc, #96]	@ (800653c <HAL_UART_Receive_IT+0x94>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d01f      	beq.n	8006520 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d018      	beq.n	8006520 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	613b      	str	r3, [r7, #16]
   return(result);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	461a      	mov	r2, r3
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	623b      	str	r3, [r7, #32]
 800650e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	69f9      	ldr	r1, [r7, #28]
 8006512:	6a3a      	ldr	r2, [r7, #32]
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	61bb      	str	r3, [r7, #24]
   return(result);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e6      	bne.n	80064ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	461a      	mov	r2, r3
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f001 fb06 	bl	8007b38 <UART_Start_Receive_IT>
 800652c:	4603      	mov	r3, r0
 800652e:	e000      	b.n	8006532 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3728      	adds	r7, #40	@ 0x28
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	58000c00 	.word	0x58000c00

08006540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b0ba      	sub	sp, #232	@ 0xe8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800656a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800656e:	4013      	ands	r3, r2
 8006570:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11b      	bne.n	80065b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d015      	beq.n	80065b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d105      	bne.n	80065a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d009      	beq.n	80065b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8377 	beq.w	8006c98 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
      }
      return;
 80065b2:	e371      	b.n	8006c98 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8123 	beq.w	8006804 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80065c2:	4b8d      	ldr	r3, [pc, #564]	@ (80067f8 <HAL_UART_IRQHandler+0x2b8>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80065ce:	4b8b      	ldr	r3, [pc, #556]	@ (80067fc <HAL_UART_IRQHandler+0x2bc>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8116 	beq.w	8006804 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d011      	beq.n	8006608 <HAL_UART_IRQHandler+0xc8>
 80065e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2201      	movs	r2, #1
 80065f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fe:	f043 0201 	orr.w	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d011      	beq.n	8006638 <HAL_UART_IRQHandler+0xf8>
 8006614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2202      	movs	r2, #2
 8006626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662e:	f043 0204 	orr.w	r2, r3, #4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d011      	beq.n	8006668 <HAL_UART_IRQHandler+0x128>
 8006644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2204      	movs	r2, #4
 8006656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800665e:	f043 0202 	orr.w	r2, r3, #2
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d017      	beq.n	80066a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006680:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006684:	4b5c      	ldr	r3, [pc, #368]	@ (80067f8 <HAL_UART_IRQHandler+0x2b8>)
 8006686:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2208      	movs	r2, #8
 8006692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669a:	f043 0208 	orr.w	r2, r3, #8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d012      	beq.n	80066d6 <HAL_UART_IRQHandler+0x196>
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00c      	beq.n	80066d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066cc:	f043 0220 	orr.w	r2, r3, #32
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 82dd 	beq.w	8006c9c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d013      	beq.n	8006716 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d105      	bne.n	8006706 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800671c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672a:	2b40      	cmp	r3, #64	@ 0x40
 800672c:	d005      	beq.n	800673a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800672e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006732:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006736:	2b00      	cmp	r3, #0
 8006738:	d054      	beq.n	80067e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f001 fb1e 	bl	8007d7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674a:	2b40      	cmp	r3, #64	@ 0x40
 800674c:	d146      	bne.n	80067dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800676c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3308      	adds	r3, #8
 8006776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800677a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800677e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1d9      	bne.n	800674e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d017      	beq.n	80067d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067aa:	4a15      	ldr	r2, [pc, #84]	@ (8006800 <HAL_UART_IRQHandler+0x2c0>)
 80067ac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fb fa57 	bl	8001c68 <HAL_DMA_Abort_IT>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d019      	beq.n	80067f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80067ce:	4610      	mov	r0, r2
 80067d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d2:	e00f      	b.n	80067f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fa77 	bl	8006cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067da:	e00b      	b.n	80067f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fa73 	bl	8006cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e2:	e007      	b.n	80067f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fa6f 	bl	8006cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80067f2:	e253      	b.n	8006c9c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f4:	bf00      	nop
    return;
 80067f6:	e251      	b.n	8006c9c <HAL_UART_IRQHandler+0x75c>
 80067f8:	10000001 	.word	0x10000001
 80067fc:	04000120 	.word	0x04000120
 8006800:	08007e49 	.word	0x08007e49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006808:	2b01      	cmp	r3, #1
 800680a:	f040 81e7 	bne.w	8006bdc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 81e0 	beq.w	8006bdc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 81d9 	beq.w	8006bdc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2210      	movs	r2, #16
 8006830:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683c:	2b40      	cmp	r3, #64	@ 0x40
 800683e:	f040 8151 	bne.w	8006ae4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a96      	ldr	r2, [pc, #600]	@ (8006aa4 <HAL_UART_IRQHandler+0x564>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d068      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a93      	ldr	r2, [pc, #588]	@ (8006aa8 <HAL_UART_IRQHandler+0x568>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d061      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a91      	ldr	r2, [pc, #580]	@ (8006aac <HAL_UART_IRQHandler+0x56c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d05a      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a8e      	ldr	r2, [pc, #568]	@ (8006ab0 <HAL_UART_IRQHandler+0x570>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d053      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a8c      	ldr	r2, [pc, #560]	@ (8006ab4 <HAL_UART_IRQHandler+0x574>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d04c      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a89      	ldr	r2, [pc, #548]	@ (8006ab8 <HAL_UART_IRQHandler+0x578>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d045      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a87      	ldr	r2, [pc, #540]	@ (8006abc <HAL_UART_IRQHandler+0x57c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d03e      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a84      	ldr	r2, [pc, #528]	@ (8006ac0 <HAL_UART_IRQHandler+0x580>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d037      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a82      	ldr	r2, [pc, #520]	@ (8006ac4 <HAL_UART_IRQHandler+0x584>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d030      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a7f      	ldr	r2, [pc, #508]	@ (8006ac8 <HAL_UART_IRQHandler+0x588>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d029      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a7d      	ldr	r2, [pc, #500]	@ (8006acc <HAL_UART_IRQHandler+0x58c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d022      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a7a      	ldr	r2, [pc, #488]	@ (8006ad0 <HAL_UART_IRQHandler+0x590>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d01b      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a78      	ldr	r2, [pc, #480]	@ (8006ad4 <HAL_UART_IRQHandler+0x594>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d014      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a75      	ldr	r2, [pc, #468]	@ (8006ad8 <HAL_UART_IRQHandler+0x598>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00d      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a73      	ldr	r2, [pc, #460]	@ (8006adc <HAL_UART_IRQHandler+0x59c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d006      	beq.n	8006922 <HAL_UART_IRQHandler+0x3e2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a70      	ldr	r2, [pc, #448]	@ (8006ae0 <HAL_UART_IRQHandler+0x5a0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d106      	bne.n	8006930 <HAL_UART_IRQHandler+0x3f0>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	b29b      	uxth	r3, r3
 800692e:	e005      	b.n	800693c <HAL_UART_IRQHandler+0x3fc>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 81ab 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006950:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006954:	429a      	cmp	r2, r3
 8006956:	f080 81a3 	bcs.w	8006ca0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006960:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006970:	f000 8087 	beq.w	8006a82 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006988:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800698c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800699e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1da      	bne.n	8006974 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3308      	adds	r3, #8
 80069de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e1      	bne.n	80069be <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e3      	bne.n	80069fa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a50:	f023 0310 	bic.w	r3, r3, #16
 8006a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e4      	bne.n	8006a40 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fa fdd5 	bl	800162c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f91d 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aa2:	e0fd      	b.n	8006ca0 <HAL_UART_IRQHandler+0x760>
 8006aa4:	40020010 	.word	0x40020010
 8006aa8:	40020028 	.word	0x40020028
 8006aac:	40020040 	.word	0x40020040
 8006ab0:	40020058 	.word	0x40020058
 8006ab4:	40020070 	.word	0x40020070
 8006ab8:	40020088 	.word	0x40020088
 8006abc:	400200a0 	.word	0x400200a0
 8006ac0:	400200b8 	.word	0x400200b8
 8006ac4:	40020410 	.word	0x40020410
 8006ac8:	40020428 	.word	0x40020428
 8006acc:	40020440 	.word	0x40020440
 8006ad0:	40020458 	.word	0x40020458
 8006ad4:	40020470 	.word	0x40020470
 8006ad8:	40020488 	.word	0x40020488
 8006adc:	400204a0 	.word	0x400204a0
 8006ae0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 80cf 	beq.w	8006ca4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006b06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 80ca 	beq.w	8006ca4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b34:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e4      	bne.n	8006b10 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	623b      	str	r3, [r7, #32]
   return(result);
 8006b56:	6a3a      	ldr	r2, [r7, #32]
 8006b58:	4b55      	ldr	r3, [pc, #340]	@ (8006cb0 <HAL_UART_IRQHandler+0x770>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3308      	adds	r3, #8
 8006b66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e3      	bne.n	8006b46 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0310 	bic.w	r3, r3, #16
 8006ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	69b9      	ldr	r1, [r7, #24]
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e4      	bne.n	8006b92 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f881 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bda:	e063      	b.n	8006ca4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00e      	beq.n	8006c06 <HAL_UART_IRQHandler+0x6c6>
 8006be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d008      	beq.n	8006c06 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 f822 	bl	8008c48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c04:	e051      	b.n	8006caa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d014      	beq.n	8006c3c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d105      	bne.n	8006c2a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d008      	beq.n	8006c3c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d03a      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
    }
    return;
 8006c3a:	e035      	b.n	8006ca8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <HAL_UART_IRQHandler+0x71c>
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 faaf 	bl	80081b8 <UART_EndTransmit_IT>
    return;
 8006c5a:	e026      	b.n	8006caa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d009      	beq.n	8006c7c <HAL_UART_IRQHandler+0x73c>
 8006c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fffb 	bl	8008c70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c7a:	e016      	b.n	8006caa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d010      	beq.n	8006caa <HAL_UART_IRQHandler+0x76a>
 8006c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	da0c      	bge.n	8006caa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 ffe3 	bl	8008c5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c96:	e008      	b.n	8006caa <HAL_UART_IRQHandler+0x76a>
      return;
 8006c98:	bf00      	nop
 8006c9a:	e006      	b.n	8006caa <HAL_UART_IRQHandler+0x76a>
    return;
 8006c9c:	bf00      	nop
 8006c9e:	e004      	b.n	8006caa <HAL_UART_IRQHandler+0x76a>
      return;
 8006ca0:	bf00      	nop
 8006ca2:	e002      	b.n	8006caa <HAL_UART_IRQHandler+0x76a>
      return;
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <HAL_UART_IRQHandler+0x76a>
    return;
 8006ca8:	bf00      	nop
  }
}
 8006caa:	37e8      	adds	r7, #232	@ 0xe8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	effffffe 	.word	0xeffffffe

08006cb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf8:	b092      	sub	sp, #72	@ 0x48
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4bbe      	ldr	r3, [pc, #760]	@ (800701c <UART_SetConfig+0x328>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	6812      	ldr	r2, [r2, #0]
 8006d2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4ab3      	ldr	r2, [pc, #716]	@ (8007020 <UART_SetConfig+0x32c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	4baf      	ldr	r3, [pc, #700]	@ (8007024 <UART_SetConfig+0x330>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	6812      	ldr	r2, [r2, #0]
 8006d6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d70:	430b      	orrs	r3, r1
 8006d72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7a:	f023 010f 	bic.w	r1, r3, #15
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4aa6      	ldr	r2, [pc, #664]	@ (8007028 <UART_SetConfig+0x334>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d177      	bne.n	8006e84 <UART_SetConfig+0x190>
 8006d94:	4ba5      	ldr	r3, [pc, #660]	@ (800702c <UART_SetConfig+0x338>)
 8006d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d9c:	2b28      	cmp	r3, #40	@ 0x28
 8006d9e:	d86d      	bhi.n	8006e7c <UART_SetConfig+0x188>
 8006da0:	a201      	add	r2, pc, #4	@ (adr r2, 8006da8 <UART_SetConfig+0xb4>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006e4d 	.word	0x08006e4d
 8006dac:	08006e7d 	.word	0x08006e7d
 8006db0:	08006e7d 	.word	0x08006e7d
 8006db4:	08006e7d 	.word	0x08006e7d
 8006db8:	08006e7d 	.word	0x08006e7d
 8006dbc:	08006e7d 	.word	0x08006e7d
 8006dc0:	08006e7d 	.word	0x08006e7d
 8006dc4:	08006e7d 	.word	0x08006e7d
 8006dc8:	08006e55 	.word	0x08006e55
 8006dcc:	08006e7d 	.word	0x08006e7d
 8006dd0:	08006e7d 	.word	0x08006e7d
 8006dd4:	08006e7d 	.word	0x08006e7d
 8006dd8:	08006e7d 	.word	0x08006e7d
 8006ddc:	08006e7d 	.word	0x08006e7d
 8006de0:	08006e7d 	.word	0x08006e7d
 8006de4:	08006e7d 	.word	0x08006e7d
 8006de8:	08006e5d 	.word	0x08006e5d
 8006dec:	08006e7d 	.word	0x08006e7d
 8006df0:	08006e7d 	.word	0x08006e7d
 8006df4:	08006e7d 	.word	0x08006e7d
 8006df8:	08006e7d 	.word	0x08006e7d
 8006dfc:	08006e7d 	.word	0x08006e7d
 8006e00:	08006e7d 	.word	0x08006e7d
 8006e04:	08006e7d 	.word	0x08006e7d
 8006e08:	08006e65 	.word	0x08006e65
 8006e0c:	08006e7d 	.word	0x08006e7d
 8006e10:	08006e7d 	.word	0x08006e7d
 8006e14:	08006e7d 	.word	0x08006e7d
 8006e18:	08006e7d 	.word	0x08006e7d
 8006e1c:	08006e7d 	.word	0x08006e7d
 8006e20:	08006e7d 	.word	0x08006e7d
 8006e24:	08006e7d 	.word	0x08006e7d
 8006e28:	08006e6d 	.word	0x08006e6d
 8006e2c:	08006e7d 	.word	0x08006e7d
 8006e30:	08006e7d 	.word	0x08006e7d
 8006e34:	08006e7d 	.word	0x08006e7d
 8006e38:	08006e7d 	.word	0x08006e7d
 8006e3c:	08006e7d 	.word	0x08006e7d
 8006e40:	08006e7d 	.word	0x08006e7d
 8006e44:	08006e7d 	.word	0x08006e7d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e52:	e222      	b.n	800729a <UART_SetConfig+0x5a6>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5a:	e21e      	b.n	800729a <UART_SetConfig+0x5a6>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e62:	e21a      	b.n	800729a <UART_SetConfig+0x5a6>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e6a:	e216      	b.n	800729a <UART_SetConfig+0x5a6>
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e72:	e212      	b.n	800729a <UART_SetConfig+0x5a6>
 8006e74:	2340      	movs	r3, #64	@ 0x40
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7a:	e20e      	b.n	800729a <UART_SetConfig+0x5a6>
 8006e7c:	2380      	movs	r3, #128	@ 0x80
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e82:	e20a      	b.n	800729a <UART_SetConfig+0x5a6>
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a69      	ldr	r2, [pc, #420]	@ (8007030 <UART_SetConfig+0x33c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d130      	bne.n	8006ef0 <UART_SetConfig+0x1fc>
 8006e8e:	4b67      	ldr	r3, [pc, #412]	@ (800702c <UART_SetConfig+0x338>)
 8006e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	d826      	bhi.n	8006ee8 <UART_SetConfig+0x1f4>
 8006e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <UART_SetConfig+0x1ac>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006eb9 	.word	0x08006eb9
 8006ea4:	08006ec1 	.word	0x08006ec1
 8006ea8:	08006ec9 	.word	0x08006ec9
 8006eac:	08006ed1 	.word	0x08006ed1
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ee1 	.word	0x08006ee1
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ebe:	e1ec      	b.n	800729a <UART_SetConfig+0x5a6>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec6:	e1e8      	b.n	800729a <UART_SetConfig+0x5a6>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ece:	e1e4      	b.n	800729a <UART_SetConfig+0x5a6>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed6:	e1e0      	b.n	800729a <UART_SetConfig+0x5a6>
 8006ed8:	2320      	movs	r3, #32
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ede:	e1dc      	b.n	800729a <UART_SetConfig+0x5a6>
 8006ee0:	2340      	movs	r3, #64	@ 0x40
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee6:	e1d8      	b.n	800729a <UART_SetConfig+0x5a6>
 8006ee8:	2380      	movs	r3, #128	@ 0x80
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eee:	e1d4      	b.n	800729a <UART_SetConfig+0x5a6>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8007034 <UART_SetConfig+0x340>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d130      	bne.n	8006f5c <UART_SetConfig+0x268>
 8006efa:	4b4c      	ldr	r3, [pc, #304]	@ (800702c <UART_SetConfig+0x338>)
 8006efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d826      	bhi.n	8006f54 <UART_SetConfig+0x260>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <UART_SetConfig+0x218>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f25 	.word	0x08006f25
 8006f10:	08006f2d 	.word	0x08006f2d
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	08006f3d 	.word	0x08006f3d
 8006f1c:	08006f45 	.word	0x08006f45
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	2300      	movs	r3, #0
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2a:	e1b6      	b.n	800729a <UART_SetConfig+0x5a6>
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f32:	e1b2      	b.n	800729a <UART_SetConfig+0x5a6>
 8006f34:	2308      	movs	r3, #8
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3a:	e1ae      	b.n	800729a <UART_SetConfig+0x5a6>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f42:	e1aa      	b.n	800729a <UART_SetConfig+0x5a6>
 8006f44:	2320      	movs	r3, #32
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4a:	e1a6      	b.n	800729a <UART_SetConfig+0x5a6>
 8006f4c:	2340      	movs	r3, #64	@ 0x40
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f52:	e1a2      	b.n	800729a <UART_SetConfig+0x5a6>
 8006f54:	2380      	movs	r3, #128	@ 0x80
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5a:	e19e      	b.n	800729a <UART_SetConfig+0x5a6>
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a35      	ldr	r2, [pc, #212]	@ (8007038 <UART_SetConfig+0x344>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d130      	bne.n	8006fc8 <UART_SetConfig+0x2d4>
 8006f66:	4b31      	ldr	r3, [pc, #196]	@ (800702c <UART_SetConfig+0x338>)
 8006f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	2b05      	cmp	r3, #5
 8006f70:	d826      	bhi.n	8006fc0 <UART_SetConfig+0x2cc>
 8006f72:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <UART_SetConfig+0x284>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006f91 	.word	0x08006f91
 8006f7c:	08006f99 	.word	0x08006f99
 8006f80:	08006fa1 	.word	0x08006fa1
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fb1 	.word	0x08006fb1
 8006f8c:	08006fb9 	.word	0x08006fb9
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f96:	e180      	b.n	800729a <UART_SetConfig+0x5a6>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9e:	e17c      	b.n	800729a <UART_SetConfig+0x5a6>
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa6:	e178      	b.n	800729a <UART_SetConfig+0x5a6>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fae:	e174      	b.n	800729a <UART_SetConfig+0x5a6>
 8006fb0:	2320      	movs	r3, #32
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb6:	e170      	b.n	800729a <UART_SetConfig+0x5a6>
 8006fb8:	2340      	movs	r3, #64	@ 0x40
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fbe:	e16c      	b.n	800729a <UART_SetConfig+0x5a6>
 8006fc0:	2380      	movs	r3, #128	@ 0x80
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc6:	e168      	b.n	800729a <UART_SetConfig+0x5a6>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800703c <UART_SetConfig+0x348>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d142      	bne.n	8007058 <UART_SetConfig+0x364>
 8006fd2:	4b16      	ldr	r3, [pc, #88]	@ (800702c <UART_SetConfig+0x338>)
 8006fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	d838      	bhi.n	8007050 <UART_SetConfig+0x35c>
 8006fde:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe4 <UART_SetConfig+0x2f0>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08006ffd 	.word	0x08006ffd
 8006fe8:	08007005 	.word	0x08007005
 8006fec:	0800700d 	.word	0x0800700d
 8006ff0:	08007015 	.word	0x08007015
 8006ff4:	08007041 	.word	0x08007041
 8006ff8:	08007049 	.word	0x08007049
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007002:	e14a      	b.n	800729a <UART_SetConfig+0x5a6>
 8007004:	2304      	movs	r3, #4
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700a:	e146      	b.n	800729a <UART_SetConfig+0x5a6>
 800700c:	2308      	movs	r3, #8
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007012:	e142      	b.n	800729a <UART_SetConfig+0x5a6>
 8007014:	2310      	movs	r3, #16
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701a:	e13e      	b.n	800729a <UART_SetConfig+0x5a6>
 800701c:	cfff69f3 	.word	0xcfff69f3
 8007020:	58000c00 	.word	0x58000c00
 8007024:	11fff4ff 	.word	0x11fff4ff
 8007028:	40011000 	.word	0x40011000
 800702c:	58024400 	.word	0x58024400
 8007030:	40004400 	.word	0x40004400
 8007034:	40004800 	.word	0x40004800
 8007038:	40004c00 	.word	0x40004c00
 800703c:	40005000 	.word	0x40005000
 8007040:	2320      	movs	r3, #32
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007046:	e128      	b.n	800729a <UART_SetConfig+0x5a6>
 8007048:	2340      	movs	r3, #64	@ 0x40
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e124      	b.n	800729a <UART_SetConfig+0x5a6>
 8007050:	2380      	movs	r3, #128	@ 0x80
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007056:	e120      	b.n	800729a <UART_SetConfig+0x5a6>
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4acb      	ldr	r2, [pc, #812]	@ (800738c <UART_SetConfig+0x698>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d176      	bne.n	8007150 <UART_SetConfig+0x45c>
 8007062:	4bcb      	ldr	r3, [pc, #812]	@ (8007390 <UART_SetConfig+0x69c>)
 8007064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007066:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800706a:	2b28      	cmp	r3, #40	@ 0x28
 800706c:	d86c      	bhi.n	8007148 <UART_SetConfig+0x454>
 800706e:	a201      	add	r2, pc, #4	@ (adr r2, 8007074 <UART_SetConfig+0x380>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	08007119 	.word	0x08007119
 8007078:	08007149 	.word	0x08007149
 800707c:	08007149 	.word	0x08007149
 8007080:	08007149 	.word	0x08007149
 8007084:	08007149 	.word	0x08007149
 8007088:	08007149 	.word	0x08007149
 800708c:	08007149 	.word	0x08007149
 8007090:	08007149 	.word	0x08007149
 8007094:	08007121 	.word	0x08007121
 8007098:	08007149 	.word	0x08007149
 800709c:	08007149 	.word	0x08007149
 80070a0:	08007149 	.word	0x08007149
 80070a4:	08007149 	.word	0x08007149
 80070a8:	08007149 	.word	0x08007149
 80070ac:	08007149 	.word	0x08007149
 80070b0:	08007149 	.word	0x08007149
 80070b4:	08007129 	.word	0x08007129
 80070b8:	08007149 	.word	0x08007149
 80070bc:	08007149 	.word	0x08007149
 80070c0:	08007149 	.word	0x08007149
 80070c4:	08007149 	.word	0x08007149
 80070c8:	08007149 	.word	0x08007149
 80070cc:	08007149 	.word	0x08007149
 80070d0:	08007149 	.word	0x08007149
 80070d4:	08007131 	.word	0x08007131
 80070d8:	08007149 	.word	0x08007149
 80070dc:	08007149 	.word	0x08007149
 80070e0:	08007149 	.word	0x08007149
 80070e4:	08007149 	.word	0x08007149
 80070e8:	08007149 	.word	0x08007149
 80070ec:	08007149 	.word	0x08007149
 80070f0:	08007149 	.word	0x08007149
 80070f4:	08007139 	.word	0x08007139
 80070f8:	08007149 	.word	0x08007149
 80070fc:	08007149 	.word	0x08007149
 8007100:	08007149 	.word	0x08007149
 8007104:	08007149 	.word	0x08007149
 8007108:	08007149 	.word	0x08007149
 800710c:	08007149 	.word	0x08007149
 8007110:	08007149 	.word	0x08007149
 8007114:	08007141 	.word	0x08007141
 8007118:	2301      	movs	r3, #1
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711e:	e0bc      	b.n	800729a <UART_SetConfig+0x5a6>
 8007120:	2304      	movs	r3, #4
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e0b8      	b.n	800729a <UART_SetConfig+0x5a6>
 8007128:	2308      	movs	r3, #8
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e0b4      	b.n	800729a <UART_SetConfig+0x5a6>
 8007130:	2310      	movs	r3, #16
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007136:	e0b0      	b.n	800729a <UART_SetConfig+0x5a6>
 8007138:	2320      	movs	r3, #32
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713e:	e0ac      	b.n	800729a <UART_SetConfig+0x5a6>
 8007140:	2340      	movs	r3, #64	@ 0x40
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007146:	e0a8      	b.n	800729a <UART_SetConfig+0x5a6>
 8007148:	2380      	movs	r3, #128	@ 0x80
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714e:	e0a4      	b.n	800729a <UART_SetConfig+0x5a6>
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a8f      	ldr	r2, [pc, #572]	@ (8007394 <UART_SetConfig+0x6a0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d130      	bne.n	80071bc <UART_SetConfig+0x4c8>
 800715a:	4b8d      	ldr	r3, [pc, #564]	@ (8007390 <UART_SetConfig+0x69c>)
 800715c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	2b05      	cmp	r3, #5
 8007164:	d826      	bhi.n	80071b4 <UART_SetConfig+0x4c0>
 8007166:	a201      	add	r2, pc, #4	@ (adr r2, 800716c <UART_SetConfig+0x478>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	08007185 	.word	0x08007185
 8007170:	0800718d 	.word	0x0800718d
 8007174:	08007195 	.word	0x08007195
 8007178:	0800719d 	.word	0x0800719d
 800717c:	080071a5 	.word	0x080071a5
 8007180:	080071ad 	.word	0x080071ad
 8007184:	2300      	movs	r3, #0
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718a:	e086      	b.n	800729a <UART_SetConfig+0x5a6>
 800718c:	2304      	movs	r3, #4
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007192:	e082      	b.n	800729a <UART_SetConfig+0x5a6>
 8007194:	2308      	movs	r3, #8
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719a:	e07e      	b.n	800729a <UART_SetConfig+0x5a6>
 800719c:	2310      	movs	r3, #16
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a2:	e07a      	b.n	800729a <UART_SetConfig+0x5a6>
 80071a4:	2320      	movs	r3, #32
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071aa:	e076      	b.n	800729a <UART_SetConfig+0x5a6>
 80071ac:	2340      	movs	r3, #64	@ 0x40
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071b2:	e072      	b.n	800729a <UART_SetConfig+0x5a6>
 80071b4:	2380      	movs	r3, #128	@ 0x80
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ba:	e06e      	b.n	800729a <UART_SetConfig+0x5a6>
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a75      	ldr	r2, [pc, #468]	@ (8007398 <UART_SetConfig+0x6a4>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d130      	bne.n	8007228 <UART_SetConfig+0x534>
 80071c6:	4b72      	ldr	r3, [pc, #456]	@ (8007390 <UART_SetConfig+0x69c>)
 80071c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	2b05      	cmp	r3, #5
 80071d0:	d826      	bhi.n	8007220 <UART_SetConfig+0x52c>
 80071d2:	a201      	add	r2, pc, #4	@ (adr r2, 80071d8 <UART_SetConfig+0x4e4>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071f1 	.word	0x080071f1
 80071dc:	080071f9 	.word	0x080071f9
 80071e0:	08007201 	.word	0x08007201
 80071e4:	08007209 	.word	0x08007209
 80071e8:	08007211 	.word	0x08007211
 80071ec:	08007219 	.word	0x08007219
 80071f0:	2300      	movs	r3, #0
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f6:	e050      	b.n	800729a <UART_SetConfig+0x5a6>
 80071f8:	2304      	movs	r3, #4
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fe:	e04c      	b.n	800729a <UART_SetConfig+0x5a6>
 8007200:	2308      	movs	r3, #8
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007206:	e048      	b.n	800729a <UART_SetConfig+0x5a6>
 8007208:	2310      	movs	r3, #16
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720e:	e044      	b.n	800729a <UART_SetConfig+0x5a6>
 8007210:	2320      	movs	r3, #32
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007216:	e040      	b.n	800729a <UART_SetConfig+0x5a6>
 8007218:	2340      	movs	r3, #64	@ 0x40
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721e:	e03c      	b.n	800729a <UART_SetConfig+0x5a6>
 8007220:	2380      	movs	r3, #128	@ 0x80
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007226:	e038      	b.n	800729a <UART_SetConfig+0x5a6>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a5b      	ldr	r2, [pc, #364]	@ (800739c <UART_SetConfig+0x6a8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d130      	bne.n	8007294 <UART_SetConfig+0x5a0>
 8007232:	4b57      	ldr	r3, [pc, #348]	@ (8007390 <UART_SetConfig+0x69c>)
 8007234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b05      	cmp	r3, #5
 800723c:	d826      	bhi.n	800728c <UART_SetConfig+0x598>
 800723e:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <UART_SetConfig+0x550>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	0800725d 	.word	0x0800725d
 8007248:	08007265 	.word	0x08007265
 800724c:	0800726d 	.word	0x0800726d
 8007250:	08007275 	.word	0x08007275
 8007254:	0800727d 	.word	0x0800727d
 8007258:	08007285 	.word	0x08007285
 800725c:	2302      	movs	r3, #2
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007262:	e01a      	b.n	800729a <UART_SetConfig+0x5a6>
 8007264:	2304      	movs	r3, #4
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726a:	e016      	b.n	800729a <UART_SetConfig+0x5a6>
 800726c:	2308      	movs	r3, #8
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007272:	e012      	b.n	800729a <UART_SetConfig+0x5a6>
 8007274:	2310      	movs	r3, #16
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727a:	e00e      	b.n	800729a <UART_SetConfig+0x5a6>
 800727c:	2320      	movs	r3, #32
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007282:	e00a      	b.n	800729a <UART_SetConfig+0x5a6>
 8007284:	2340      	movs	r3, #64	@ 0x40
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728a:	e006      	b.n	800729a <UART_SetConfig+0x5a6>
 800728c:	2380      	movs	r3, #128	@ 0x80
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007292:	e002      	b.n	800729a <UART_SetConfig+0x5a6>
 8007294:	2380      	movs	r3, #128	@ 0x80
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a3f      	ldr	r2, [pc, #252]	@ (800739c <UART_SetConfig+0x6a8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	f040 80f8 	bne.w	8007496 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	dc46      	bgt.n	800733c <UART_SetConfig+0x648>
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	f2c0 8082 	blt.w	80073b8 <UART_SetConfig+0x6c4>
 80072b4:	3b02      	subs	r3, #2
 80072b6:	2b1e      	cmp	r3, #30
 80072b8:	d87e      	bhi.n	80073b8 <UART_SetConfig+0x6c4>
 80072ba:	a201      	add	r2, pc, #4	@ (adr r2, 80072c0 <UART_SetConfig+0x5cc>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	08007343 	.word	0x08007343
 80072c4:	080073b9 	.word	0x080073b9
 80072c8:	0800734b 	.word	0x0800734b
 80072cc:	080073b9 	.word	0x080073b9
 80072d0:	080073b9 	.word	0x080073b9
 80072d4:	080073b9 	.word	0x080073b9
 80072d8:	0800735b 	.word	0x0800735b
 80072dc:	080073b9 	.word	0x080073b9
 80072e0:	080073b9 	.word	0x080073b9
 80072e4:	080073b9 	.word	0x080073b9
 80072e8:	080073b9 	.word	0x080073b9
 80072ec:	080073b9 	.word	0x080073b9
 80072f0:	080073b9 	.word	0x080073b9
 80072f4:	080073b9 	.word	0x080073b9
 80072f8:	0800736b 	.word	0x0800736b
 80072fc:	080073b9 	.word	0x080073b9
 8007300:	080073b9 	.word	0x080073b9
 8007304:	080073b9 	.word	0x080073b9
 8007308:	080073b9 	.word	0x080073b9
 800730c:	080073b9 	.word	0x080073b9
 8007310:	080073b9 	.word	0x080073b9
 8007314:	080073b9 	.word	0x080073b9
 8007318:	080073b9 	.word	0x080073b9
 800731c:	080073b9 	.word	0x080073b9
 8007320:	080073b9 	.word	0x080073b9
 8007324:	080073b9 	.word	0x080073b9
 8007328:	080073b9 	.word	0x080073b9
 800732c:	080073b9 	.word	0x080073b9
 8007330:	080073b9 	.word	0x080073b9
 8007334:	080073b9 	.word	0x080073b9
 8007338:	080073ab 	.word	0x080073ab
 800733c:	2b40      	cmp	r3, #64	@ 0x40
 800733e:	d037      	beq.n	80073b0 <UART_SetConfig+0x6bc>
 8007340:	e03a      	b.n	80073b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007342:	f7fe f859 	bl	80053f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007346:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007348:	e03c      	b.n	80073c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800734a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe f868 	bl	8005424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007358:	e034      	b.n	80073c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800735a:	f107 0318 	add.w	r3, r7, #24
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe f9b4 	bl	80056cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007368:	e02c      	b.n	80073c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800736a:	4b09      	ldr	r3, [pc, #36]	@ (8007390 <UART_SetConfig+0x69c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d016      	beq.n	80073a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007376:	4b06      	ldr	r3, [pc, #24]	@ (8007390 <UART_SetConfig+0x69c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	08db      	lsrs	r3, r3, #3
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	4a07      	ldr	r2, [pc, #28]	@ (80073a0 <UART_SetConfig+0x6ac>)
 8007382:	fa22 f303 	lsr.w	r3, r2, r3
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007388:	e01c      	b.n	80073c4 <UART_SetConfig+0x6d0>
 800738a:	bf00      	nop
 800738c:	40011400 	.word	0x40011400
 8007390:	58024400 	.word	0x58024400
 8007394:	40007800 	.word	0x40007800
 8007398:	40007c00 	.word	0x40007c00
 800739c:	58000c00 	.word	0x58000c00
 80073a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80073a4:	4b9d      	ldr	r3, [pc, #628]	@ (800761c <UART_SetConfig+0x928>)
 80073a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a8:	e00c      	b.n	80073c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073aa:	4b9d      	ldr	r3, [pc, #628]	@ (8007620 <UART_SetConfig+0x92c>)
 80073ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ae:	e009      	b.n	80073c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073b6:	e005      	b.n	80073c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80073c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 81de 	beq.w	8007788 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d0:	4a94      	ldr	r2, [pc, #592]	@ (8007624 <UART_SetConfig+0x930>)
 80073d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073d6:	461a      	mov	r2, r3
 80073d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073da:	fbb3 f3f2 	udiv	r3, r3, r2
 80073de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	4413      	add	r3, r2
 80073ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d305      	bcc.n	80073fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d903      	bls.n	8007404 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007402:	e1c1      	b.n	8007788 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007406:	2200      	movs	r2, #0
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	60fa      	str	r2, [r7, #12]
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	4a84      	ldr	r2, [pc, #528]	@ (8007624 <UART_SetConfig+0x930>)
 8007412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007416:	b29b      	uxth	r3, r3
 8007418:	2200      	movs	r2, #0
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	607a      	str	r2, [r7, #4]
 800741e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007422:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007426:	f7f8 ffb3 	bl	8000390 <__aeabi_uldivmod>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4610      	mov	r0, r2
 8007430:	4619      	mov	r1, r3
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	020b      	lsls	r3, r1, #8
 800743c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007440:	0202      	lsls	r2, r0, #8
 8007442:	6979      	ldr	r1, [r7, #20]
 8007444:	6849      	ldr	r1, [r1, #4]
 8007446:	0849      	lsrs	r1, r1, #1
 8007448:	2000      	movs	r0, #0
 800744a:	460c      	mov	r4, r1
 800744c:	4605      	mov	r5, r0
 800744e:	eb12 0804 	adds.w	r8, r2, r4
 8007452:	eb43 0905 	adc.w	r9, r3, r5
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	469a      	mov	sl, r3
 800745e:	4693      	mov	fp, r2
 8007460:	4652      	mov	r2, sl
 8007462:	465b      	mov	r3, fp
 8007464:	4640      	mov	r0, r8
 8007466:	4649      	mov	r1, r9
 8007468:	f7f8 ff92 	bl	8000390 <__aeabi_uldivmod>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4613      	mov	r3, r2
 8007472:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800747a:	d308      	bcc.n	800748e <UART_SetConfig+0x79a>
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007482:	d204      	bcs.n	800748e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800748a:	60da      	str	r2, [r3, #12]
 800748c:	e17c      	b.n	8007788 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007494:	e178      	b.n	8007788 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800749e:	f040 80c5 	bne.w	800762c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80074a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	dc48      	bgt.n	800753c <UART_SetConfig+0x848>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	db7b      	blt.n	80075a6 <UART_SetConfig+0x8b2>
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d879      	bhi.n	80075a6 <UART_SetConfig+0x8b2>
 80074b2:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <UART_SetConfig+0x7c4>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	08007543 	.word	0x08007543
 80074bc:	0800754b 	.word	0x0800754b
 80074c0:	080075a7 	.word	0x080075a7
 80074c4:	080075a7 	.word	0x080075a7
 80074c8:	08007553 	.word	0x08007553
 80074cc:	080075a7 	.word	0x080075a7
 80074d0:	080075a7 	.word	0x080075a7
 80074d4:	080075a7 	.word	0x080075a7
 80074d8:	08007563 	.word	0x08007563
 80074dc:	080075a7 	.word	0x080075a7
 80074e0:	080075a7 	.word	0x080075a7
 80074e4:	080075a7 	.word	0x080075a7
 80074e8:	080075a7 	.word	0x080075a7
 80074ec:	080075a7 	.word	0x080075a7
 80074f0:	080075a7 	.word	0x080075a7
 80074f4:	080075a7 	.word	0x080075a7
 80074f8:	08007573 	.word	0x08007573
 80074fc:	080075a7 	.word	0x080075a7
 8007500:	080075a7 	.word	0x080075a7
 8007504:	080075a7 	.word	0x080075a7
 8007508:	080075a7 	.word	0x080075a7
 800750c:	080075a7 	.word	0x080075a7
 8007510:	080075a7 	.word	0x080075a7
 8007514:	080075a7 	.word	0x080075a7
 8007518:	080075a7 	.word	0x080075a7
 800751c:	080075a7 	.word	0x080075a7
 8007520:	080075a7 	.word	0x080075a7
 8007524:	080075a7 	.word	0x080075a7
 8007528:	080075a7 	.word	0x080075a7
 800752c:	080075a7 	.word	0x080075a7
 8007530:	080075a7 	.word	0x080075a7
 8007534:	080075a7 	.word	0x080075a7
 8007538:	08007599 	.word	0x08007599
 800753c:	2b40      	cmp	r3, #64	@ 0x40
 800753e:	d02e      	beq.n	800759e <UART_SetConfig+0x8aa>
 8007540:	e031      	b.n	80075a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007542:	f7fc fd23 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8007546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007548:	e033      	b.n	80075b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800754a:	f7fc fd35 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 800754e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007550:	e02f      	b.n	80075b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007556:	4618      	mov	r0, r3
 8007558:	f7fd ff64 	bl	8005424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007560:	e027      	b.n	80075b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007562:	f107 0318 	add.w	r3, r7, #24
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe f8b0 	bl	80056cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007570:	e01f      	b.n	80075b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007572:	4b2d      	ldr	r3, [pc, #180]	@ (8007628 <UART_SetConfig+0x934>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800757e:	4b2a      	ldr	r3, [pc, #168]	@ (8007628 <UART_SetConfig+0x934>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	08db      	lsrs	r3, r3, #3
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	4a24      	ldr	r2, [pc, #144]	@ (800761c <UART_SetConfig+0x928>)
 800758a:	fa22 f303 	lsr.w	r3, r2, r3
 800758e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007590:	e00f      	b.n	80075b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007592:	4b22      	ldr	r3, [pc, #136]	@ (800761c <UART_SetConfig+0x928>)
 8007594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007596:	e00c      	b.n	80075b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007598:	4b21      	ldr	r3, [pc, #132]	@ (8007620 <UART_SetConfig+0x92c>)
 800759a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800759c:	e009      	b.n	80075b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800759e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a4:	e005      	b.n	80075b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80075b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80e7 	beq.w	8007788 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075be:	4a19      	ldr	r2, [pc, #100]	@ (8007624 <UART_SetConfig+0x930>)
 80075c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075cc:	005a      	lsls	r2, r3, #1
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	085b      	lsrs	r3, r3, #1
 80075d4:	441a      	add	r2, r3
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	fbb2 f3f3 	udiv	r3, r2, r3
 80075de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e2:	2b0f      	cmp	r3, #15
 80075e4:	d916      	bls.n	8007614 <UART_SetConfig+0x920>
 80075e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ec:	d212      	bcs.n	8007614 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f023 030f 	bic.w	r3, r3, #15
 80075f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	b29a      	uxth	r2, r3
 8007604:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007606:	4313      	orrs	r3, r2
 8007608:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	e0b9      	b.n	8007788 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800761a:	e0b5      	b.n	8007788 <UART_SetConfig+0xa94>
 800761c:	03d09000 	.word	0x03d09000
 8007620:	003d0900 	.word	0x003d0900
 8007624:	08009e24 	.word	0x08009e24
 8007628:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800762c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007630:	2b20      	cmp	r3, #32
 8007632:	dc49      	bgt.n	80076c8 <UART_SetConfig+0x9d4>
 8007634:	2b00      	cmp	r3, #0
 8007636:	db7c      	blt.n	8007732 <UART_SetConfig+0xa3e>
 8007638:	2b20      	cmp	r3, #32
 800763a:	d87a      	bhi.n	8007732 <UART_SetConfig+0xa3e>
 800763c:	a201      	add	r2, pc, #4	@ (adr r2, 8007644 <UART_SetConfig+0x950>)
 800763e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007642:	bf00      	nop
 8007644:	080076cf 	.word	0x080076cf
 8007648:	080076d7 	.word	0x080076d7
 800764c:	08007733 	.word	0x08007733
 8007650:	08007733 	.word	0x08007733
 8007654:	080076df 	.word	0x080076df
 8007658:	08007733 	.word	0x08007733
 800765c:	08007733 	.word	0x08007733
 8007660:	08007733 	.word	0x08007733
 8007664:	080076ef 	.word	0x080076ef
 8007668:	08007733 	.word	0x08007733
 800766c:	08007733 	.word	0x08007733
 8007670:	08007733 	.word	0x08007733
 8007674:	08007733 	.word	0x08007733
 8007678:	08007733 	.word	0x08007733
 800767c:	08007733 	.word	0x08007733
 8007680:	08007733 	.word	0x08007733
 8007684:	080076ff 	.word	0x080076ff
 8007688:	08007733 	.word	0x08007733
 800768c:	08007733 	.word	0x08007733
 8007690:	08007733 	.word	0x08007733
 8007694:	08007733 	.word	0x08007733
 8007698:	08007733 	.word	0x08007733
 800769c:	08007733 	.word	0x08007733
 80076a0:	08007733 	.word	0x08007733
 80076a4:	08007733 	.word	0x08007733
 80076a8:	08007733 	.word	0x08007733
 80076ac:	08007733 	.word	0x08007733
 80076b0:	08007733 	.word	0x08007733
 80076b4:	08007733 	.word	0x08007733
 80076b8:	08007733 	.word	0x08007733
 80076bc:	08007733 	.word	0x08007733
 80076c0:	08007733 	.word	0x08007733
 80076c4:	08007725 	.word	0x08007725
 80076c8:	2b40      	cmp	r3, #64	@ 0x40
 80076ca:	d02e      	beq.n	800772a <UART_SetConfig+0xa36>
 80076cc:	e031      	b.n	8007732 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076ce:	f7fc fc5d 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 80076d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076d4:	e033      	b.n	800773e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076d6:	f7fc fc6f 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 80076da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076dc:	e02f      	b.n	800773e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fd fe9e 	bl	8005424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ec:	e027      	b.n	800773e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ee:	f107 0318 	add.w	r3, r7, #24
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fd ffea 	bl	80056cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076fc:	e01f      	b.n	800773e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076fe:	4b2d      	ldr	r3, [pc, #180]	@ (80077b4 <UART_SetConfig+0xac0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800770a:	4b2a      	ldr	r3, [pc, #168]	@ (80077b4 <UART_SetConfig+0xac0>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	08db      	lsrs	r3, r3, #3
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	4a28      	ldr	r2, [pc, #160]	@ (80077b8 <UART_SetConfig+0xac4>)
 8007716:	fa22 f303 	lsr.w	r3, r2, r3
 800771a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800771c:	e00f      	b.n	800773e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800771e:	4b26      	ldr	r3, [pc, #152]	@ (80077b8 <UART_SetConfig+0xac4>)
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007722:	e00c      	b.n	800773e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007724:	4b25      	ldr	r3, [pc, #148]	@ (80077bc <UART_SetConfig+0xac8>)
 8007726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007728:	e009      	b.n	800773e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800772e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007730:	e005      	b.n	800773e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800773c:	bf00      	nop
    }

    if (pclk != 0U)
 800773e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d021      	beq.n	8007788 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007748:	4a1d      	ldr	r2, [pc, #116]	@ (80077c0 <UART_SetConfig+0xacc>)
 800774a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800774e:	461a      	mov	r2, r3
 8007750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007752:	fbb3 f2f2 	udiv	r2, r3, r2
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	085b      	lsrs	r3, r3, #1
 800775c:	441a      	add	r2, r3
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	fbb2 f3f3 	udiv	r3, r2, r3
 8007766:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	2b0f      	cmp	r3, #15
 800776c:	d909      	bls.n	8007782 <UART_SetConfig+0xa8e>
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007774:	d205      	bcs.n	8007782 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	b29a      	uxth	r2, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60da      	str	r2, [r3, #12]
 8007780:	e002      	b.n	8007788 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2201      	movs	r2, #1
 800778c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2201      	movs	r2, #1
 8007794:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2200      	movs	r2, #0
 800779c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2200      	movs	r2, #0
 80077a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80077a4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3748      	adds	r7, #72	@ 0x48
 80077ac:	46bd      	mov	sp, r7
 80077ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077b2:	bf00      	nop
 80077b4:	58024400 	.word	0x58024400
 80077b8:	03d09000 	.word	0x03d09000
 80077bc:	003d0900 	.word	0x003d0900
 80077c0:	08009e24 	.word	0x08009e24

080077c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007836:	f003 0304 	and.w	r3, r3, #4
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	f003 0310 	and.w	r3, r3, #16
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01a      	beq.n	80078da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078c2:	d10a      	bne.n	80078da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	605a      	str	r2, [r3, #4]
  }
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b098      	sub	sp, #96	@ 0x60
 800790c:	af02      	add	r7, sp, #8
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007918:	f7f9 fd28 	bl	800136c <HAL_GetTick>
 800791c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b08      	cmp	r3, #8
 800792a:	d12f      	bne.n	800798c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800792c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007934:	2200      	movs	r2, #0
 8007936:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f88e 	bl	8007a5c <UART_WaitOnFlagUntilTimeout>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d022      	beq.n	800798c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800795a:	653b      	str	r3, [r7, #80]	@ 0x50
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007964:	647b      	str	r3, [r7, #68]	@ 0x44
 8007966:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800796a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e063      	b.n	8007a54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0304 	and.w	r3, r3, #4
 8007996:	2b04      	cmp	r3, #4
 8007998:	d149      	bne.n	8007a2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800799a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079a2:	2200      	movs	r2, #0
 80079a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f857 	bl	8007a5c <UART_WaitOnFlagUntilTimeout>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d03c      	beq.n	8007a2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	623b      	str	r3, [r7, #32]
   return(result);
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80079d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e6      	bne.n	80079b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f023 0301 	bic.w	r3, r3, #1
 80079fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3308      	adds	r3, #8
 8007a04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a06:	61fa      	str	r2, [r7, #28]
 8007a08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	69b9      	ldr	r1, [r7, #24]
 8007a0c:	69fa      	ldr	r2, [r7, #28]
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	617b      	str	r3, [r7, #20]
   return(result);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e5      	bne.n	80079e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e012      	b.n	8007a54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3758      	adds	r7, #88	@ 0x58
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	603b      	str	r3, [r7, #0]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a6c:	e04f      	b.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a74:	d04b      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a76:	f7f9 fc79 	bl	800136c <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d302      	bcc.n	8007a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e04e      	b.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d037      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b80      	cmp	r3, #128	@ 0x80
 8007aa2:	d034      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b40      	cmp	r3, #64	@ 0x40
 8007aa8:	d031      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d110      	bne.n	8007ada <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2208      	movs	r2, #8
 8007abe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f95b 	bl	8007d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2208      	movs	r2, #8
 8007aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e029      	b.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ae8:	d111      	bne.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f941 	bl	8007d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e00f      	b.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4013      	ands	r3, r2
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	bf0c      	ite	eq
 8007b1e:	2301      	moveq	r3, #1
 8007b20:	2300      	movne	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d0a0      	beq.n	8007a6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b0a3      	sub	sp, #140	@ 0x8c
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	88fa      	ldrh	r2, [r7, #6]
 8007b50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	88fa      	ldrh	r2, [r7, #6]
 8007b58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b6a:	d10e      	bne.n	8007b8a <UART_Start_Receive_IT+0x52>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d105      	bne.n	8007b80 <UART_Start_Receive_IT+0x48>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007b7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007b7e:	e02d      	b.n	8007bdc <UART_Start_Receive_IT+0xa4>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	22ff      	movs	r2, #255	@ 0xff
 8007b84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007b88:	e028      	b.n	8007bdc <UART_Start_Receive_IT+0xa4>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10d      	bne.n	8007bae <UART_Start_Receive_IT+0x76>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d104      	bne.n	8007ba4 <UART_Start_Receive_IT+0x6c>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	22ff      	movs	r2, #255	@ 0xff
 8007b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ba2:	e01b      	b.n	8007bdc <UART_Start_Receive_IT+0xa4>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	227f      	movs	r2, #127	@ 0x7f
 8007ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bac:	e016      	b.n	8007bdc <UART_Start_Receive_IT+0xa4>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bb6:	d10d      	bne.n	8007bd4 <UART_Start_Receive_IT+0x9c>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <UART_Start_Receive_IT+0x92>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	227f      	movs	r2, #127	@ 0x7f
 8007bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bc8:	e008      	b.n	8007bdc <UART_Start_Receive_IT+0xa4>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	223f      	movs	r2, #63	@ 0x3f
 8007bce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bd2:	e003      	b.n	8007bdc <UART_Start_Receive_IT+0xa4>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2222      	movs	r2, #34	@ 0x22
 8007be8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007bfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bfe:	f043 0301 	orr.w	r3, r3, #1
 8007c02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c10:	673a      	str	r2, [r7, #112]	@ 0x70
 8007c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007c16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007c1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e3      	bne.n	8007bec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c2c:	d14f      	bne.n	8007cce <UART_Start_Receive_IT+0x196>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d349      	bcc.n	8007cce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c42:	d107      	bne.n	8007c54 <UART_Start_Receive_IT+0x11c>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4a47      	ldr	r2, [pc, #284]	@ (8007d6c <UART_Start_Receive_IT+0x234>)
 8007c50:	675a      	str	r2, [r3, #116]	@ 0x74
 8007c52:	e002      	b.n	8007c5a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4a46      	ldr	r2, [pc, #280]	@ (8007d70 <UART_Start_Receive_IT+0x238>)
 8007c58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d01a      	beq.n	8007c98 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c86:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e4      	bne.n	8007c62 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007cb8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007cba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e5      	bne.n	8007c98 <UART_Start_Receive_IT+0x160>
 8007ccc:	e046      	b.n	8007d5c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cd6:	d107      	bne.n	8007ce8 <UART_Start_Receive_IT+0x1b0>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d103      	bne.n	8007ce8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4a24      	ldr	r2, [pc, #144]	@ (8007d74 <UART_Start_Receive_IT+0x23c>)
 8007ce4:	675a      	str	r2, [r3, #116]	@ 0x74
 8007ce6:	e002      	b.n	8007cee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4a23      	ldr	r2, [pc, #140]	@ (8007d78 <UART_Start_Receive_IT+0x240>)
 8007cec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d019      	beq.n	8007d2a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007d0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d16:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_Start_Receive_IT+0x1be>
 8007d28:	e018      	b.n	8007d5c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	613b      	str	r3, [r7, #16]
   return(result);
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f043 0320 	orr.w	r3, r3, #32
 8007d3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d48:	623b      	str	r3, [r7, #32]
 8007d4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	69f9      	ldr	r1, [r7, #28]
 8007d4e:	6a3a      	ldr	r2, [r7, #32]
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e6      	bne.n	8007d2a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	378c      	adds	r7, #140	@ 0x8c
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	080088e1 	.word	0x080088e1
 8007d70:	08008581 	.word	0x08008581
 8007d74:	080083c9 	.word	0x080083c9
 8007d78:	08008211 	.word	0x08008211

08007d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b095      	sub	sp, #84	@ 0x54
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007da2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007da4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007da8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e6      	bne.n	8007d84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8007e44 <UART_EndRxTransfer+0xc8>)
 8007dca:	4013      	ands	r3, r2
 8007dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e5      	bne.n	8007db6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d118      	bne.n	8007e24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f023 0310 	bic.w	r3, r3, #16
 8007e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	6979      	ldr	r1, [r7, #20]
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e6      	bne.n	8007df2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e38:	bf00      	nop
 8007e3a:	3754      	adds	r7, #84	@ 0x54
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	effffffe 	.word	0xeffffffe

08007e48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f7fe ff2e 	bl	8006cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b08f      	sub	sp, #60	@ 0x3c
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e82:	2b21      	cmp	r3, #33	@ 0x21
 8007e84:	d14c      	bne.n	8007f20 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d132      	bne.n	8007ef8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eb2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e6      	bne.n	8007e92 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee2:	61bb      	str	r3, [r7, #24]
 8007ee4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6979      	ldr	r1, [r7, #20]
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e6      	bne.n	8007ec4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007ef6:	e013      	b.n	8007f20 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007efc:	781a      	ldrb	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007f20:	bf00      	nop
 8007f22:	373c      	adds	r7, #60	@ 0x3c
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b091      	sub	sp, #68	@ 0x44
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f3a:	2b21      	cmp	r3, #33	@ 0x21
 8007f3c:	d151      	bne.n	8007fe2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d132      	bne.n	8007fb0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	623b      	str	r3, [r7, #32]
   return(result);
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e6      	bne.n	8007f4a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9a:	61fb      	str	r3, [r7, #28]
 8007f9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	69b9      	ldr	r1, [r7, #24]
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007fae:	e018      	b.n	8007fe2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fc4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fca:	1c9a      	adds	r2, r3, #2
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007fe2:	bf00      	nop
 8007fe4:	3744      	adds	r7, #68	@ 0x44
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b091      	sub	sp, #68	@ 0x44
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ffc:	2b21      	cmp	r3, #33	@ 0x21
 8007ffe:	d160      	bne.n	80080c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008006:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008008:	e057      	b.n	80080ba <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008010:	b29b      	uxth	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d133      	bne.n	800807e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3308      	adds	r3, #8
 800801c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	623b      	str	r3, [r7, #32]
   return(result);
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800802c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3308      	adds	r3, #8
 8008034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008036:	633a      	str	r2, [r7, #48]	@ 0x30
 8008038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800803c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e5      	bne.n	8008016 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	60fb      	str	r3, [r7, #12]
   return(result);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800805e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008068:	61fb      	str	r3, [r7, #28]
 800806a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	69b9      	ldr	r1, [r7, #24]
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	617b      	str	r3, [r7, #20]
   return(result);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e6      	bne.n	800804a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800807c:	e021      	b.n	80080c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008088:	2b00      	cmp	r3, #0
 800808a:	d013      	beq.n	80080b4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008090:	781a      	ldrb	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	3b01      	subs	r3, #1
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80080b6:	3b01      	subs	r3, #1
 80080b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80080ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1a4      	bne.n	800800a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80080c0:	e7ff      	b.n	80080c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80080c2:	bf00      	nop
 80080c4:	3744      	adds	r7, #68	@ 0x44
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b091      	sub	sp, #68	@ 0x44
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080dc:	2b21      	cmp	r3, #33	@ 0x21
 80080de:	d165      	bne.n	80081ac <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80080e8:	e05c      	b.n	80081a4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d133      	bne.n	800815e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3308      	adds	r3, #8
 80080fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	61fb      	str	r3, [r7, #28]
   return(result);
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3308      	adds	r3, #8
 8008114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008118:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800811c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e5      	bne.n	80080f6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	60bb      	str	r3, [r7, #8]
   return(result);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800813e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6979      	ldr	r1, [r7, #20]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	613b      	str	r3, [r7, #16]
   return(result);
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e6      	bne.n	800812a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800815c:	e026      	b.n	80081ac <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008168:	2b00      	cmp	r3, #0
 800816a:	d018      	beq.n	800819e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008170:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008180:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008186:	1c9a      	adds	r2, r3, #2
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008192:	b29b      	uxth	r3, r3
 8008194:	3b01      	subs	r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800819e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80081a0:	3b01      	subs	r3, #1
 80081a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80081a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d19f      	bne.n	80080ea <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80081aa:	e7ff      	b.n	80081ac <UART_TxISR_16BIT_FIFOEN+0xde>
 80081ac:	bf00      	nop
 80081ae:	3744      	adds	r7, #68	@ 0x44
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081d4:	61fb      	str	r3, [r7, #28]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	61bb      	str	r3, [r7, #24]
 80081e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6979      	ldr	r1, [r7, #20]
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	613b      	str	r3, [r7, #16]
   return(result);
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e6      	bne.n	80081c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7fe fd57 	bl	8006cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008206:	bf00      	nop
 8008208:	3720      	adds	r7, #32
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b09c      	sub	sp, #112	@ 0x70
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800821e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008228:	2b22      	cmp	r3, #34	@ 0x22
 800822a:	f040 80be 	bne.w	80083aa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008234:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008238:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800823c:	b2d9      	uxtb	r1, r3
 800823e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008242:	b2da      	uxtb	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008248:	400a      	ands	r2, r1
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800825e:	b29b      	uxth	r3, r3
 8008260:	3b01      	subs	r3, #1
 8008262:	b29a      	uxth	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008270:	b29b      	uxth	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 80a1 	bne.w	80083ba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008288:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800828c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008296:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008298:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800829c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e6      	bne.n	8008278 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082bc:	f023 0301 	bic.w	r3, r3, #1
 80082c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80082ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80082cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e5      	bne.n	80082aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a33      	ldr	r2, [pc, #204]	@ (80083c4 <UART_RxISR_8BIT+0x1b4>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d01f      	beq.n	800833c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d018      	beq.n	800833c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	623b      	str	r3, [r7, #32]
   return(result);
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800831e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008328:	633b      	str	r3, [r7, #48]	@ 0x30
 800832a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800832e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008340:	2b01      	cmp	r3, #1
 8008342:	d12e      	bne.n	80083a2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	60fb      	str	r3, [r7, #12]
   return(result);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0310 	bic.w	r3, r3, #16
 800835e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	461a      	mov	r2, r3
 8008366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008368:	61fb      	str	r3, [r7, #28]
 800836a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	69b9      	ldr	r1, [r7, #24]
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	617b      	str	r3, [r7, #20]
   return(result);
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e6      	bne.n	800834a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	f003 0310 	and.w	r3, r3, #16
 8008386:	2b10      	cmp	r3, #16
 8008388:	d103      	bne.n	8008392 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2210      	movs	r2, #16
 8008390:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7fe fc9e 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083a0:	e00b      	b.n	80083ba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7f8 fc16 	bl	8000bd4 <HAL_UART_RxCpltCallback>
}
 80083a8:	e007      	b.n	80083ba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	699a      	ldr	r2, [r3, #24]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f042 0208 	orr.w	r2, r2, #8
 80083b8:	619a      	str	r2, [r3, #24]
}
 80083ba:	bf00      	nop
 80083bc:	3770      	adds	r7, #112	@ 0x70
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	58000c00 	.word	0x58000c00

080083c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b09c      	sub	sp, #112	@ 0x70
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80083d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083e0:	2b22      	cmp	r3, #34	@ 0x22
 80083e2:	f040 80be 	bne.w	8008562 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80083f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80083fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80083fe:	4013      	ands	r3, r2
 8008400:	b29a      	uxth	r2, r3
 8008402:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008404:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800840a:	1c9a      	adds	r2, r3, #2
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008416:	b29b      	uxth	r3, r3
 8008418:	3b01      	subs	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	f040 80a1 	bne.w	8008572 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800843e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008444:	667b      	str	r3, [r7, #100]	@ 0x64
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800844e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008450:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008454:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800845c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e6      	bne.n	8008430 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	663b      	str	r3, [r7, #96]	@ 0x60
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3308      	adds	r3, #8
 8008480:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008482:	643a      	str	r2, [r7, #64]	@ 0x40
 8008484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008488:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e5      	bne.n	8008462 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a33      	ldr	r2, [pc, #204]	@ (800857c <UART_RxISR_16BIT+0x1b4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d01f      	beq.n	80084f4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d018      	beq.n	80084f4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80084d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084e2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e6      	bne.n	80084c2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d12e      	bne.n	800855a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f023 0310 	bic.w	r3, r3, #16
 8008516:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6979      	ldr	r1, [r7, #20]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	613b      	str	r3, [r7, #16]
   return(result);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e6      	bne.n	8008502 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	f003 0310 	and.w	r3, r3, #16
 800853e:	2b10      	cmp	r3, #16
 8008540:	d103      	bne.n	800854a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2210      	movs	r2, #16
 8008548:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fe fbc2 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008558:	e00b      	b.n	8008572 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7f8 fb3a 	bl	8000bd4 <HAL_UART_RxCpltCallback>
}
 8008560:	e007      	b.n	8008572 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	699a      	ldr	r2, [r3, #24]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 0208 	orr.w	r2, r2, #8
 8008570:	619a      	str	r2, [r3, #24]
}
 8008572:	bf00      	nop
 8008574:	3770      	adds	r7, #112	@ 0x70
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	58000c00 	.word	0x58000c00

08008580 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b0ac      	sub	sp, #176	@ 0xb0
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800858e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085b6:	2b22      	cmp	r3, #34	@ 0x22
 80085b8:	f040 8180 	bne.w	80088bc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80085c2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085c6:	e123      	b.n	8008810 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ce:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80085d6:	b2d9      	uxtb	r1, r3
 80085d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e2:	400a      	ands	r2, r1
 80085e4:	b2d2      	uxtb	r2, r2
 80085e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	3b01      	subs	r3, #1
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800860e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	2b00      	cmp	r3, #0
 8008618:	d053      	beq.n	80086c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800861a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d011      	beq.n	800864a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800862a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00b      	beq.n	800864a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2201      	movs	r2, #1
 8008638:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008640:	f043 0201 	orr.w	r2, r3, #1
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800864a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d011      	beq.n	800867a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00b      	beq.n	800867a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2202      	movs	r2, #2
 8008668:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008670:	f043 0204 	orr.w	r2, r3, #4
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800867a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800867e:	f003 0304 	and.w	r3, r3, #4
 8008682:	2b00      	cmp	r3, #0
 8008684:	d011      	beq.n	80086aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00b      	beq.n	80086aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2204      	movs	r2, #4
 8008698:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a0:	f043 0202 	orr.w	r2, r3, #2
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d006      	beq.n	80086c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7fe fb07 	bl	8006cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f040 80a0 	bne.w	8008810 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80086de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086f4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80086f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008700:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e4      	bne.n	80086d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008716:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008718:	4b6e      	ldr	r3, [pc, #440]	@ (80088d4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800871a:	4013      	ands	r3, r2
 800871c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3308      	adds	r3, #8
 8008726:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800872a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800872c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008730:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e3      	bne.n	8008706 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2220      	movs	r2, #32
 8008742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a60      	ldr	r2, [pc, #384]	@ (80088d8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d021      	beq.n	80087a0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01a      	beq.n	80087a0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800877a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800877e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800878c:	657b      	str	r3, [r7, #84]	@ 0x54
 800878e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008792:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800879a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e4      	bne.n	800876a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d130      	bne.n	800880a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	f023 0310 	bic.w	r3, r3, #16
 80087c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80087d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e4      	bne.n	80087ae <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	f003 0310 	and.w	r3, r3, #16
 80087ee:	2b10      	cmp	r3, #16
 80087f0:	d103      	bne.n	80087fa <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2210      	movs	r2, #16
 80087f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fe fa6a 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
 8008808:	e002      	b.n	8008810 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7f8 f9e2 	bl	8000bd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008810:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008814:	2b00      	cmp	r3, #0
 8008816:	d006      	beq.n	8008826 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800881c:	f003 0320 	and.w	r3, r3, #32
 8008820:	2b00      	cmp	r3, #0
 8008822:	f47f aed1 	bne.w	80085c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800882c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008830:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008834:	2b00      	cmp	r3, #0
 8008836:	d049      	beq.n	80088cc <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800883e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008842:	429a      	cmp	r2, r3
 8008844:	d242      	bcs.n	80088cc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	3308      	adds	r3, #8
 800884c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	e853 3f00 	ldrex	r3, [r3]
 8008854:	61fb      	str	r3, [r7, #28]
   return(result);
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800885c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3308      	adds	r3, #8
 8008866:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800886a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800886c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e3      	bne.n	8008846 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a16      	ldr	r2, [pc, #88]	@ (80088dc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008882:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	60bb      	str	r3, [r7, #8]
   return(result);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f043 0320 	orr.w	r3, r3, #32
 8008898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80088a6:	61bb      	str	r3, [r7, #24]
 80088a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6979      	ldr	r1, [r7, #20]
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	613b      	str	r3, [r7, #16]
   return(result);
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e4      	bne.n	8008884 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088ba:	e007      	b.n	80088cc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699a      	ldr	r2, [r3, #24]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0208 	orr.w	r2, r2, #8
 80088ca:	619a      	str	r2, [r3, #24]
}
 80088cc:	bf00      	nop
 80088ce:	37b0      	adds	r7, #176	@ 0xb0
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	effffffe 	.word	0xeffffffe
 80088d8:	58000c00 	.word	0x58000c00
 80088dc:	08008211 	.word	0x08008211

080088e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b0ae      	sub	sp, #184	@ 0xb8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008916:	2b22      	cmp	r3, #34	@ 0x22
 8008918:	f040 8184 	bne.w	8008c24 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008922:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008926:	e127      	b.n	8008b78 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800893a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800893e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008942:	4013      	ands	r3, r2
 8008944:	b29a      	uxth	r2, r3
 8008946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800894a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008950:	1c9a      	adds	r2, r3, #2
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800895c:	b29b      	uxth	r3, r3
 800895e:	3b01      	subs	r3, #1
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b00      	cmp	r3, #0
 800897c:	d053      	beq.n	8008a26 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800897e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d011      	beq.n	80089ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800898a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800898e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00b      	beq.n	80089ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2201      	movs	r2, #1
 800899c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089a4:	f043 0201 	orr.w	r2, r3, #1
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d011      	beq.n	80089de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80089ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00b      	beq.n	80089de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2202      	movs	r2, #2
 80089cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089d4:	f043 0204 	orr.w	r2, r3, #4
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d011      	beq.n	8008a0e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80089ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2204      	movs	r2, #4
 80089fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a04:	f043 0202 	orr.w	r2, r3, #2
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d006      	beq.n	8008a26 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7fe f955 	bl	8006cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f040 80a2 	bne.w	8008b78 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a62:	e841 2300 	strex	r3, r2, [r1]
 8008a66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1e2      	bne.n	8008a34 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a80:	4b6e      	ldr	r3, [pc, #440]	@ (8008c3c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008a82:	4013      	ands	r3, r2
 8008a84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008a92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e3      	bne.n	8008a6e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a60      	ldr	r2, [pc, #384]	@ (8008c40 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d021      	beq.n	8008b08 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01a      	beq.n	8008b08 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ada:	e853 3f00 	ldrex	r3, [r3]
 8008ade:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ae2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008af4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008af6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008afa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008afc:	e841 2300 	strex	r3, r2, [r1]
 8008b00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1e4      	bne.n	8008ad2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d130      	bne.n	8008b72 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b26:	f023 0310 	bic.w	r3, r3, #16
 8008b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e4      	bne.n	8008b16 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	f003 0310 	and.w	r3, r3, #16
 8008b56:	2b10      	cmp	r3, #16
 8008b58:	d103      	bne.n	8008b62 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2210      	movs	r2, #16
 8008b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7fe f8b6 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
 8008b70:	e002      	b.n	8008b78 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7f8 f82e 	bl	8000bd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b78:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d006      	beq.n	8008b8e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b84:	f003 0320 	and.w	r3, r3, #32
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f47f aecd 	bne.w	8008928 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b94:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d049      	beq.n	8008c34 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ba6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d242      	bcs.n	8008c34 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008bd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e3      	bne.n	8008bae <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a16      	ldr	r2, [pc, #88]	@ (8008c44 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008bea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f043 0320 	orr.w	r3, r3, #32
 8008c00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c0e:	61fb      	str	r3, [r7, #28]
 8008c10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	69b9      	ldr	r1, [r7, #24]
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	e841 2300 	strex	r3, r2, [r1]
 8008c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e4      	bne.n	8008bec <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c22:	e007      	b.n	8008c34 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 0208 	orr.w	r2, r2, #8
 8008c32:	619a      	str	r2, [r3, #24]
}
 8008c34:	bf00      	nop
 8008c36:	37b8      	adds	r7, #184	@ 0xb8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	effffffe 	.word	0xeffffffe
 8008c40:	58000c00 	.word	0x58000c00
 8008c44:	080083c9 	.word	0x080083c9

08008c48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d101      	bne.n	8008c9a <HAL_UARTEx_DisableFifoMode+0x16>
 8008c96:	2302      	movs	r3, #2
 8008c98:	e027      	b.n	8008cea <HAL_UARTEx_DisableFifoMode+0x66>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2224      	movs	r2, #36	@ 0x24
 8008ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0201 	bic.w	r2, r2, #1
 8008cc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008cc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d101      	bne.n	8008d0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e02d      	b.n	8008d6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2224      	movs	r2, #36	@ 0x24
 8008d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f022 0201 	bic.w	r2, r2, #1
 8008d34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f850 	bl	8008df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d101      	bne.n	8008d8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d86:	2302      	movs	r3, #2
 8008d88:	e02d      	b.n	8008de6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2224      	movs	r2, #36	@ 0x24
 8008d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0201 	bic.w	r2, r2, #1
 8008db0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f812 	bl	8008df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d108      	bne.n	8008e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e10:	e031      	b.n	8008e76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e12:	2310      	movs	r3, #16
 8008e14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e16:	2310      	movs	r3, #16
 8008e18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	0e5b      	lsrs	r3, r3, #25
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	0f5b      	lsrs	r3, r3, #29
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 0307 	and.w	r3, r3, #7
 8008e38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	7b3a      	ldrb	r2, [r7, #12]
 8008e3e:	4911      	ldr	r1, [pc, #68]	@ (8008e84 <UARTEx_SetNbDataToProcess+0x94>)
 8008e40:	5c8a      	ldrb	r2, [r1, r2]
 8008e42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e46:	7b3a      	ldrb	r2, [r7, #12]
 8008e48:	490f      	ldr	r1, [pc, #60]	@ (8008e88 <UARTEx_SetNbDataToProcess+0x98>)
 8008e4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	7b7a      	ldrb	r2, [r7, #13]
 8008e5c:	4909      	ldr	r1, [pc, #36]	@ (8008e84 <UARTEx_SetNbDataToProcess+0x94>)
 8008e5e:	5c8a      	ldrb	r2, [r1, r2]
 8008e60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e64:	7b7a      	ldrb	r2, [r7, #13]
 8008e66:	4908      	ldr	r1, [pc, #32]	@ (8008e88 <UARTEx_SetNbDataToProcess+0x98>)
 8008e68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008e76:	bf00      	nop
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	08009e3c 	.word	0x08009e3c
 8008e88:	08009e44 	.word	0x08009e44

08008e8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	f107 001c 	add.w	r0, r7, #28
 8008e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d121      	bne.n	8008eea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8008f68 <USB_CoreInit+0xdc>)
 8008eb8:	4013      	ands	r3, r2
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008eca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d105      	bne.n	8008ede <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 faaa 	bl	8009438 <USB_CoreReset>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]
 8008ee8:	e01b      	b.n	8008f22 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fa9e 	bl	8009438 <USB_CoreReset>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d106      	bne.n	8008f16 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f14:	e005      	b.n	8008f22 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f22:	7fbb      	ldrb	r3, [r7, #30]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d116      	bne.n	8008f56 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f36:	4b0d      	ldr	r3, [pc, #52]	@ (8008f6c <USB_CoreInit+0xe0>)
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f043 0206 	orr.w	r2, r3, #6
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f043 0220 	orr.w	r2, r3, #32
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f62:	b004      	add	sp, #16
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	ffbdffbf 	.word	0xffbdffbf
 8008f6c:	03ee0000 	.word	0x03ee0000

08008f70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f023 0201 	bic.w	r2, r3, #1
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d115      	bne.n	8008fe0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008fc0:	200a      	movs	r0, #10
 8008fc2:	f7f8 f9df 	bl	8001384 <HAL_Delay>
      ms += 10U;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	330a      	adds	r3, #10
 8008fca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fa25 	bl	800941c <USB_GetMode>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d01e      	beq.n	8009016 <USB_SetCurrentMode+0x84>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2bc7      	cmp	r3, #199	@ 0xc7
 8008fdc:	d9f0      	bls.n	8008fc0 <USB_SetCurrentMode+0x2e>
 8008fde:	e01a      	b.n	8009016 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d115      	bne.n	8009012 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ff2:	200a      	movs	r0, #10
 8008ff4:	f7f8 f9c6 	bl	8001384 <HAL_Delay>
      ms += 10U;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	330a      	adds	r3, #10
 8008ffc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fa0c 	bl	800941c <USB_GetMode>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d005      	beq.n	8009016 <USB_SetCurrentMode+0x84>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2bc7      	cmp	r3, #199	@ 0xc7
 800900e:	d9f0      	bls.n	8008ff2 <USB_SetCurrentMode+0x60>
 8009010:	e001      	b.n	8009016 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e005      	b.n	8009022 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2bc8      	cmp	r3, #200	@ 0xc8
 800901a:	d101      	bne.n	8009020 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e000      	b.n	8009022 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800902c:	b084      	sub	sp, #16
 800902e:	b580      	push	{r7, lr}
 8009030:	b086      	sub	sp, #24
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800903a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009046:	2300      	movs	r3, #0
 8009048:	613b      	str	r3, [r7, #16]
 800904a:	e009      	b.n	8009060 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	3340      	adds	r3, #64	@ 0x40
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	2200      	movs	r2, #0
 8009058:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	3301      	adds	r3, #1
 800905e:	613b      	str	r3, [r7, #16]
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2b0e      	cmp	r3, #14
 8009064:	d9f2      	bls.n	800904c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009066:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800906a:	2b00      	cmp	r3, #0
 800906c:	d11c      	bne.n	80090a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800907c:	f043 0302 	orr.w	r3, r3, #2
 8009080:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009086:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	e005      	b.n	80090b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090ba:	461a      	mov	r2, r3
 80090bc:	2300      	movs	r3, #0
 80090be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d10d      	bne.n	80090e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80090d0:	2100      	movs	r1, #0
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f968 	bl	80093a8 <USB_SetDevSpeed>
 80090d8:	e008      	b.n	80090ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090da:	2101      	movs	r1, #1
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f963 	bl	80093a8 <USB_SetDevSpeed>
 80090e2:	e003      	b.n	80090ec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090e4:	2103      	movs	r1, #3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f95e 	bl	80093a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090ec:	2110      	movs	r1, #16
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f8fa 	bl	80092e8 <USB_FlushTxFifo>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f924 	bl	800934c <USB_FlushRxFifo>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009114:	461a      	mov	r2, r3
 8009116:	2300      	movs	r3, #0
 8009118:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009120:	461a      	mov	r2, r3
 8009122:	2300      	movs	r3, #0
 8009124:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800912c:	461a      	mov	r2, r3
 800912e:	2300      	movs	r3, #0
 8009130:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009132:	2300      	movs	r3, #0
 8009134:	613b      	str	r3, [r7, #16]
 8009136:	e043      	b.n	80091c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4413      	add	r3, r2
 8009140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800914a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800914e:	d118      	bne.n	8009182 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10a      	bne.n	800916c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009162:	461a      	mov	r2, r3
 8009164:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	e013      	b.n	8009194 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009178:	461a      	mov	r2, r3
 800917a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	e008      	b.n	8009194 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800918e:	461a      	mov	r2, r3
 8009190:	2300      	movs	r3, #0
 8009192:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a0:	461a      	mov	r2, r3
 80091a2:	2300      	movs	r3, #0
 80091a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b2:	461a      	mov	r2, r3
 80091b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3301      	adds	r3, #1
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80091c4:	461a      	mov	r2, r3
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d3b5      	bcc.n	8009138 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091cc:	2300      	movs	r3, #0
 80091ce:	613b      	str	r3, [r7, #16]
 80091d0:	e043      	b.n	800925a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091e8:	d118      	bne.n	800921c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091fc:	461a      	mov	r2, r3
 80091fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	e013      	b.n	800922e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009212:	461a      	mov	r2, r3
 8009214:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	e008      	b.n	800922e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009228:	461a      	mov	r2, r3
 800922a:	2300      	movs	r3, #0
 800922c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800923a:	461a      	mov	r2, r3
 800923c:	2300      	movs	r3, #0
 800923e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800924c:	461a      	mov	r2, r3
 800924e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009252:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	3301      	adds	r3, #1
 8009258:	613b      	str	r3, [r7, #16]
 800925a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800925e:	461a      	mov	r2, r3
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	4293      	cmp	r3, r2
 8009264:	d3b5      	bcc.n	80091d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009278:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009286:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009288:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800928c:	2b00      	cmp	r3, #0
 800928e:	d105      	bne.n	800929c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	f043 0210 	orr.w	r2, r3, #16
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	699a      	ldr	r2, [r3, #24]
 80092a0:	4b0f      	ldr	r3, [pc, #60]	@ (80092e0 <USB_DevInit+0x2b4>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d005      	beq.n	80092bc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	f043 0208 	orr.w	r2, r3, #8
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d105      	bne.n	80092d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699a      	ldr	r2, [r3, #24]
 80092c8:	4b06      	ldr	r3, [pc, #24]	@ (80092e4 <USB_DevInit+0x2b8>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092dc:	b004      	add	sp, #16
 80092de:	4770      	bx	lr
 80092e0:	803c3800 	.word	0x803c3800
 80092e4:	40000004 	.word	0x40000004

080092e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009302:	d901      	bls.n	8009308 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e01b      	b.n	8009340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	daf2      	bge.n	80092f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	019b      	lsls	r3, r3, #6
 8009318:	f043 0220 	orr.w	r2, r3, #32
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3301      	adds	r3, #1
 8009324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800932c:	d901      	bls.n	8009332 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e006      	b.n	8009340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b20      	cmp	r3, #32
 800933c:	d0f0      	beq.n	8009320 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009354:	2300      	movs	r3, #0
 8009356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3301      	adds	r3, #1
 800935c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009364:	d901      	bls.n	800936a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e018      	b.n	800939c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	daf2      	bge.n	8009358 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2210      	movs	r2, #16
 800937a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3301      	adds	r3, #1
 8009380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009388:	d901      	bls.n	800938e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e006      	b.n	800939c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f003 0310 	and.w	r3, r3, #16
 8009396:	2b10      	cmp	r3, #16
 8009398:	d0f0      	beq.n	800937c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	68f9      	ldr	r1, [r7, #12]
 80093c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093c8:	4313      	orrs	r3, r2
 80093ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80093da:	b480      	push	{r7}
 80093dc:	b085      	sub	sp, #20
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093f4:	f023 0303 	bic.w	r3, r3, #3
 80093f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009408:	f043 0302 	orr.w	r3, r3, #2
 800940c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	f003 0301 	and.w	r3, r3, #1
}
 800942c:	4618      	mov	r0, r3
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3301      	adds	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009450:	d901      	bls.n	8009456 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e01b      	b.n	800948e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	daf2      	bge.n	8009444 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f043 0201 	orr.w	r2, r3, #1
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3301      	adds	r3, #1
 8009472:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800947a:	d901      	bls.n	8009480 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e006      	b.n	800948e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b01      	cmp	r3, #1
 800948a:	d0f0      	beq.n	800946e <USB_CoreReset+0x36>

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
	...

0800949c <siprintf>:
 800949c:	b40e      	push	{r1, r2, r3}
 800949e:	b500      	push	{lr}
 80094a0:	b09c      	sub	sp, #112	@ 0x70
 80094a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80094a4:	9002      	str	r0, [sp, #8]
 80094a6:	9006      	str	r0, [sp, #24]
 80094a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80094ac:	4809      	ldr	r0, [pc, #36]	@ (80094d4 <siprintf+0x38>)
 80094ae:	9107      	str	r1, [sp, #28]
 80094b0:	9104      	str	r1, [sp, #16]
 80094b2:	4909      	ldr	r1, [pc, #36]	@ (80094d8 <siprintf+0x3c>)
 80094b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b8:	9105      	str	r1, [sp, #20]
 80094ba:	6800      	ldr	r0, [r0, #0]
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	a902      	add	r1, sp, #8
 80094c0:	f000 f994 	bl	80097ec <_svfiprintf_r>
 80094c4:	9b02      	ldr	r3, [sp, #8]
 80094c6:	2200      	movs	r2, #0
 80094c8:	701a      	strb	r2, [r3, #0]
 80094ca:	b01c      	add	sp, #112	@ 0x70
 80094cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80094d0:	b003      	add	sp, #12
 80094d2:	4770      	bx	lr
 80094d4:	24000010 	.word	0x24000010
 80094d8:	ffff0208 	.word	0xffff0208

080094dc <memset>:
 80094dc:	4402      	add	r2, r0
 80094de:	4603      	mov	r3, r0
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d100      	bne.n	80094e6 <memset+0xa>
 80094e4:	4770      	bx	lr
 80094e6:	f803 1b01 	strb.w	r1, [r3], #1
 80094ea:	e7f9      	b.n	80094e0 <memset+0x4>

080094ec <__errno>:
 80094ec:	4b01      	ldr	r3, [pc, #4]	@ (80094f4 <__errno+0x8>)
 80094ee:	6818      	ldr	r0, [r3, #0]
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	24000010 	.word	0x24000010

080094f8 <__libc_init_array>:
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009530 <__libc_init_array+0x38>)
 80094fc:	4c0d      	ldr	r4, [pc, #52]	@ (8009534 <__libc_init_array+0x3c>)
 80094fe:	1b64      	subs	r4, r4, r5
 8009500:	10a4      	asrs	r4, r4, #2
 8009502:	2600      	movs	r6, #0
 8009504:	42a6      	cmp	r6, r4
 8009506:	d109      	bne.n	800951c <__libc_init_array+0x24>
 8009508:	4d0b      	ldr	r5, [pc, #44]	@ (8009538 <__libc_init_array+0x40>)
 800950a:	4c0c      	ldr	r4, [pc, #48]	@ (800953c <__libc_init_array+0x44>)
 800950c:	f000 fc66 	bl	8009ddc <_init>
 8009510:	1b64      	subs	r4, r4, r5
 8009512:	10a4      	asrs	r4, r4, #2
 8009514:	2600      	movs	r6, #0
 8009516:	42a6      	cmp	r6, r4
 8009518:	d105      	bne.n	8009526 <__libc_init_array+0x2e>
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009520:	4798      	blx	r3
 8009522:	3601      	adds	r6, #1
 8009524:	e7ee      	b.n	8009504 <__libc_init_array+0xc>
 8009526:	f855 3b04 	ldr.w	r3, [r5], #4
 800952a:	4798      	blx	r3
 800952c:	3601      	adds	r6, #1
 800952e:	e7f2      	b.n	8009516 <__libc_init_array+0x1e>
 8009530:	08009e88 	.word	0x08009e88
 8009534:	08009e88 	.word	0x08009e88
 8009538:	08009e88 	.word	0x08009e88
 800953c:	08009e8c 	.word	0x08009e8c

08009540 <__retarget_lock_acquire_recursive>:
 8009540:	4770      	bx	lr

08009542 <__retarget_lock_release_recursive>:
 8009542:	4770      	bx	lr

08009544 <_free_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4605      	mov	r5, r0
 8009548:	2900      	cmp	r1, #0
 800954a:	d041      	beq.n	80095d0 <_free_r+0x8c>
 800954c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009550:	1f0c      	subs	r4, r1, #4
 8009552:	2b00      	cmp	r3, #0
 8009554:	bfb8      	it	lt
 8009556:	18e4      	addlt	r4, r4, r3
 8009558:	f000 f8e0 	bl	800971c <__malloc_lock>
 800955c:	4a1d      	ldr	r2, [pc, #116]	@ (80095d4 <_free_r+0x90>)
 800955e:	6813      	ldr	r3, [r2, #0]
 8009560:	b933      	cbnz	r3, 8009570 <_free_r+0x2c>
 8009562:	6063      	str	r3, [r4, #4]
 8009564:	6014      	str	r4, [r2, #0]
 8009566:	4628      	mov	r0, r5
 8009568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800956c:	f000 b8dc 	b.w	8009728 <__malloc_unlock>
 8009570:	42a3      	cmp	r3, r4
 8009572:	d908      	bls.n	8009586 <_free_r+0x42>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	1821      	adds	r1, r4, r0
 8009578:	428b      	cmp	r3, r1
 800957a:	bf01      	itttt	eq
 800957c:	6819      	ldreq	r1, [r3, #0]
 800957e:	685b      	ldreq	r3, [r3, #4]
 8009580:	1809      	addeq	r1, r1, r0
 8009582:	6021      	streq	r1, [r4, #0]
 8009584:	e7ed      	b.n	8009562 <_free_r+0x1e>
 8009586:	461a      	mov	r2, r3
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	b10b      	cbz	r3, 8009590 <_free_r+0x4c>
 800958c:	42a3      	cmp	r3, r4
 800958e:	d9fa      	bls.n	8009586 <_free_r+0x42>
 8009590:	6811      	ldr	r1, [r2, #0]
 8009592:	1850      	adds	r0, r2, r1
 8009594:	42a0      	cmp	r0, r4
 8009596:	d10b      	bne.n	80095b0 <_free_r+0x6c>
 8009598:	6820      	ldr	r0, [r4, #0]
 800959a:	4401      	add	r1, r0
 800959c:	1850      	adds	r0, r2, r1
 800959e:	4283      	cmp	r3, r0
 80095a0:	6011      	str	r1, [r2, #0]
 80095a2:	d1e0      	bne.n	8009566 <_free_r+0x22>
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	6053      	str	r3, [r2, #4]
 80095aa:	4408      	add	r0, r1
 80095ac:	6010      	str	r0, [r2, #0]
 80095ae:	e7da      	b.n	8009566 <_free_r+0x22>
 80095b0:	d902      	bls.n	80095b8 <_free_r+0x74>
 80095b2:	230c      	movs	r3, #12
 80095b4:	602b      	str	r3, [r5, #0]
 80095b6:	e7d6      	b.n	8009566 <_free_r+0x22>
 80095b8:	6820      	ldr	r0, [r4, #0]
 80095ba:	1821      	adds	r1, r4, r0
 80095bc:	428b      	cmp	r3, r1
 80095be:	bf04      	itt	eq
 80095c0:	6819      	ldreq	r1, [r3, #0]
 80095c2:	685b      	ldreq	r3, [r3, #4]
 80095c4:	6063      	str	r3, [r4, #4]
 80095c6:	bf04      	itt	eq
 80095c8:	1809      	addeq	r1, r1, r0
 80095ca:	6021      	streq	r1, [r4, #0]
 80095cc:	6054      	str	r4, [r2, #4]
 80095ce:	e7ca      	b.n	8009566 <_free_r+0x22>
 80095d0:	bd38      	pop	{r3, r4, r5, pc}
 80095d2:	bf00      	nop
 80095d4:	2400093c 	.word	0x2400093c

080095d8 <sbrk_aligned>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	4e0f      	ldr	r6, [pc, #60]	@ (8009618 <sbrk_aligned+0x40>)
 80095dc:	460c      	mov	r4, r1
 80095de:	6831      	ldr	r1, [r6, #0]
 80095e0:	4605      	mov	r5, r0
 80095e2:	b911      	cbnz	r1, 80095ea <sbrk_aligned+0x12>
 80095e4:	f000 fba6 	bl	8009d34 <_sbrk_r>
 80095e8:	6030      	str	r0, [r6, #0]
 80095ea:	4621      	mov	r1, r4
 80095ec:	4628      	mov	r0, r5
 80095ee:	f000 fba1 	bl	8009d34 <_sbrk_r>
 80095f2:	1c43      	adds	r3, r0, #1
 80095f4:	d103      	bne.n	80095fe <sbrk_aligned+0x26>
 80095f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80095fa:	4620      	mov	r0, r4
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
 80095fe:	1cc4      	adds	r4, r0, #3
 8009600:	f024 0403 	bic.w	r4, r4, #3
 8009604:	42a0      	cmp	r0, r4
 8009606:	d0f8      	beq.n	80095fa <sbrk_aligned+0x22>
 8009608:	1a21      	subs	r1, r4, r0
 800960a:	4628      	mov	r0, r5
 800960c:	f000 fb92 	bl	8009d34 <_sbrk_r>
 8009610:	3001      	adds	r0, #1
 8009612:	d1f2      	bne.n	80095fa <sbrk_aligned+0x22>
 8009614:	e7ef      	b.n	80095f6 <sbrk_aligned+0x1e>
 8009616:	bf00      	nop
 8009618:	24000938 	.word	0x24000938

0800961c <_malloc_r>:
 800961c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009620:	1ccd      	adds	r5, r1, #3
 8009622:	f025 0503 	bic.w	r5, r5, #3
 8009626:	3508      	adds	r5, #8
 8009628:	2d0c      	cmp	r5, #12
 800962a:	bf38      	it	cc
 800962c:	250c      	movcc	r5, #12
 800962e:	2d00      	cmp	r5, #0
 8009630:	4606      	mov	r6, r0
 8009632:	db01      	blt.n	8009638 <_malloc_r+0x1c>
 8009634:	42a9      	cmp	r1, r5
 8009636:	d904      	bls.n	8009642 <_malloc_r+0x26>
 8009638:	230c      	movs	r3, #12
 800963a:	6033      	str	r3, [r6, #0]
 800963c:	2000      	movs	r0, #0
 800963e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009642:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009718 <_malloc_r+0xfc>
 8009646:	f000 f869 	bl	800971c <__malloc_lock>
 800964a:	f8d8 3000 	ldr.w	r3, [r8]
 800964e:	461c      	mov	r4, r3
 8009650:	bb44      	cbnz	r4, 80096a4 <_malloc_r+0x88>
 8009652:	4629      	mov	r1, r5
 8009654:	4630      	mov	r0, r6
 8009656:	f7ff ffbf 	bl	80095d8 <sbrk_aligned>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	4604      	mov	r4, r0
 800965e:	d158      	bne.n	8009712 <_malloc_r+0xf6>
 8009660:	f8d8 4000 	ldr.w	r4, [r8]
 8009664:	4627      	mov	r7, r4
 8009666:	2f00      	cmp	r7, #0
 8009668:	d143      	bne.n	80096f2 <_malloc_r+0xd6>
 800966a:	2c00      	cmp	r4, #0
 800966c:	d04b      	beq.n	8009706 <_malloc_r+0xea>
 800966e:	6823      	ldr	r3, [r4, #0]
 8009670:	4639      	mov	r1, r7
 8009672:	4630      	mov	r0, r6
 8009674:	eb04 0903 	add.w	r9, r4, r3
 8009678:	f000 fb5c 	bl	8009d34 <_sbrk_r>
 800967c:	4581      	cmp	r9, r0
 800967e:	d142      	bne.n	8009706 <_malloc_r+0xea>
 8009680:	6821      	ldr	r1, [r4, #0]
 8009682:	1a6d      	subs	r5, r5, r1
 8009684:	4629      	mov	r1, r5
 8009686:	4630      	mov	r0, r6
 8009688:	f7ff ffa6 	bl	80095d8 <sbrk_aligned>
 800968c:	3001      	adds	r0, #1
 800968e:	d03a      	beq.n	8009706 <_malloc_r+0xea>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	442b      	add	r3, r5
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	f8d8 3000 	ldr.w	r3, [r8]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	bb62      	cbnz	r2, 80096f8 <_malloc_r+0xdc>
 800969e:	f8c8 7000 	str.w	r7, [r8]
 80096a2:	e00f      	b.n	80096c4 <_malloc_r+0xa8>
 80096a4:	6822      	ldr	r2, [r4, #0]
 80096a6:	1b52      	subs	r2, r2, r5
 80096a8:	d420      	bmi.n	80096ec <_malloc_r+0xd0>
 80096aa:	2a0b      	cmp	r2, #11
 80096ac:	d917      	bls.n	80096de <_malloc_r+0xc2>
 80096ae:	1961      	adds	r1, r4, r5
 80096b0:	42a3      	cmp	r3, r4
 80096b2:	6025      	str	r5, [r4, #0]
 80096b4:	bf18      	it	ne
 80096b6:	6059      	strne	r1, [r3, #4]
 80096b8:	6863      	ldr	r3, [r4, #4]
 80096ba:	bf08      	it	eq
 80096bc:	f8c8 1000 	streq.w	r1, [r8]
 80096c0:	5162      	str	r2, [r4, r5]
 80096c2:	604b      	str	r3, [r1, #4]
 80096c4:	4630      	mov	r0, r6
 80096c6:	f000 f82f 	bl	8009728 <__malloc_unlock>
 80096ca:	f104 000b 	add.w	r0, r4, #11
 80096ce:	1d23      	adds	r3, r4, #4
 80096d0:	f020 0007 	bic.w	r0, r0, #7
 80096d4:	1ac2      	subs	r2, r0, r3
 80096d6:	bf1c      	itt	ne
 80096d8:	1a1b      	subne	r3, r3, r0
 80096da:	50a3      	strne	r3, [r4, r2]
 80096dc:	e7af      	b.n	800963e <_malloc_r+0x22>
 80096de:	6862      	ldr	r2, [r4, #4]
 80096e0:	42a3      	cmp	r3, r4
 80096e2:	bf0c      	ite	eq
 80096e4:	f8c8 2000 	streq.w	r2, [r8]
 80096e8:	605a      	strne	r2, [r3, #4]
 80096ea:	e7eb      	b.n	80096c4 <_malloc_r+0xa8>
 80096ec:	4623      	mov	r3, r4
 80096ee:	6864      	ldr	r4, [r4, #4]
 80096f0:	e7ae      	b.n	8009650 <_malloc_r+0x34>
 80096f2:	463c      	mov	r4, r7
 80096f4:	687f      	ldr	r7, [r7, #4]
 80096f6:	e7b6      	b.n	8009666 <_malloc_r+0x4a>
 80096f8:	461a      	mov	r2, r3
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	42a3      	cmp	r3, r4
 80096fe:	d1fb      	bne.n	80096f8 <_malloc_r+0xdc>
 8009700:	2300      	movs	r3, #0
 8009702:	6053      	str	r3, [r2, #4]
 8009704:	e7de      	b.n	80096c4 <_malloc_r+0xa8>
 8009706:	230c      	movs	r3, #12
 8009708:	6033      	str	r3, [r6, #0]
 800970a:	4630      	mov	r0, r6
 800970c:	f000 f80c 	bl	8009728 <__malloc_unlock>
 8009710:	e794      	b.n	800963c <_malloc_r+0x20>
 8009712:	6005      	str	r5, [r0, #0]
 8009714:	e7d6      	b.n	80096c4 <_malloc_r+0xa8>
 8009716:	bf00      	nop
 8009718:	2400093c 	.word	0x2400093c

0800971c <__malloc_lock>:
 800971c:	4801      	ldr	r0, [pc, #4]	@ (8009724 <__malloc_lock+0x8>)
 800971e:	f7ff bf0f 	b.w	8009540 <__retarget_lock_acquire_recursive>
 8009722:	bf00      	nop
 8009724:	24000934 	.word	0x24000934

08009728 <__malloc_unlock>:
 8009728:	4801      	ldr	r0, [pc, #4]	@ (8009730 <__malloc_unlock+0x8>)
 800972a:	f7ff bf0a 	b.w	8009542 <__retarget_lock_release_recursive>
 800972e:	bf00      	nop
 8009730:	24000934 	.word	0x24000934

08009734 <__ssputs_r>:
 8009734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009738:	688e      	ldr	r6, [r1, #8]
 800973a:	461f      	mov	r7, r3
 800973c:	42be      	cmp	r6, r7
 800973e:	680b      	ldr	r3, [r1, #0]
 8009740:	4682      	mov	sl, r0
 8009742:	460c      	mov	r4, r1
 8009744:	4690      	mov	r8, r2
 8009746:	d82d      	bhi.n	80097a4 <__ssputs_r+0x70>
 8009748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800974c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009750:	d026      	beq.n	80097a0 <__ssputs_r+0x6c>
 8009752:	6965      	ldr	r5, [r4, #20]
 8009754:	6909      	ldr	r1, [r1, #16]
 8009756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800975a:	eba3 0901 	sub.w	r9, r3, r1
 800975e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009762:	1c7b      	adds	r3, r7, #1
 8009764:	444b      	add	r3, r9
 8009766:	106d      	asrs	r5, r5, #1
 8009768:	429d      	cmp	r5, r3
 800976a:	bf38      	it	cc
 800976c:	461d      	movcc	r5, r3
 800976e:	0553      	lsls	r3, r2, #21
 8009770:	d527      	bpl.n	80097c2 <__ssputs_r+0x8e>
 8009772:	4629      	mov	r1, r5
 8009774:	f7ff ff52 	bl	800961c <_malloc_r>
 8009778:	4606      	mov	r6, r0
 800977a:	b360      	cbz	r0, 80097d6 <__ssputs_r+0xa2>
 800977c:	6921      	ldr	r1, [r4, #16]
 800977e:	464a      	mov	r2, r9
 8009780:	f000 fae8 	bl	8009d54 <memcpy>
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800978a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800978e:	81a3      	strh	r3, [r4, #12]
 8009790:	6126      	str	r6, [r4, #16]
 8009792:	6165      	str	r5, [r4, #20]
 8009794:	444e      	add	r6, r9
 8009796:	eba5 0509 	sub.w	r5, r5, r9
 800979a:	6026      	str	r6, [r4, #0]
 800979c:	60a5      	str	r5, [r4, #8]
 800979e:	463e      	mov	r6, r7
 80097a0:	42be      	cmp	r6, r7
 80097a2:	d900      	bls.n	80097a6 <__ssputs_r+0x72>
 80097a4:	463e      	mov	r6, r7
 80097a6:	6820      	ldr	r0, [r4, #0]
 80097a8:	4632      	mov	r2, r6
 80097aa:	4641      	mov	r1, r8
 80097ac:	f000 faa8 	bl	8009d00 <memmove>
 80097b0:	68a3      	ldr	r3, [r4, #8]
 80097b2:	1b9b      	subs	r3, r3, r6
 80097b4:	60a3      	str	r3, [r4, #8]
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	4433      	add	r3, r6
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	2000      	movs	r0, #0
 80097be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c2:	462a      	mov	r2, r5
 80097c4:	f000 fad4 	bl	8009d70 <_realloc_r>
 80097c8:	4606      	mov	r6, r0
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d1e0      	bne.n	8009790 <__ssputs_r+0x5c>
 80097ce:	6921      	ldr	r1, [r4, #16]
 80097d0:	4650      	mov	r0, sl
 80097d2:	f7ff feb7 	bl	8009544 <_free_r>
 80097d6:	230c      	movs	r3, #12
 80097d8:	f8ca 3000 	str.w	r3, [sl]
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097e2:	81a3      	strh	r3, [r4, #12]
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097e8:	e7e9      	b.n	80097be <__ssputs_r+0x8a>
	...

080097ec <_svfiprintf_r>:
 80097ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f0:	4698      	mov	r8, r3
 80097f2:	898b      	ldrh	r3, [r1, #12]
 80097f4:	061b      	lsls	r3, r3, #24
 80097f6:	b09d      	sub	sp, #116	@ 0x74
 80097f8:	4607      	mov	r7, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	d510      	bpl.n	8009822 <_svfiprintf_r+0x36>
 8009800:	690b      	ldr	r3, [r1, #16]
 8009802:	b973      	cbnz	r3, 8009822 <_svfiprintf_r+0x36>
 8009804:	2140      	movs	r1, #64	@ 0x40
 8009806:	f7ff ff09 	bl	800961c <_malloc_r>
 800980a:	6028      	str	r0, [r5, #0]
 800980c:	6128      	str	r0, [r5, #16]
 800980e:	b930      	cbnz	r0, 800981e <_svfiprintf_r+0x32>
 8009810:	230c      	movs	r3, #12
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009818:	b01d      	add	sp, #116	@ 0x74
 800981a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981e:	2340      	movs	r3, #64	@ 0x40
 8009820:	616b      	str	r3, [r5, #20]
 8009822:	2300      	movs	r3, #0
 8009824:	9309      	str	r3, [sp, #36]	@ 0x24
 8009826:	2320      	movs	r3, #32
 8009828:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800982c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009830:	2330      	movs	r3, #48	@ 0x30
 8009832:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099d0 <_svfiprintf_r+0x1e4>
 8009836:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800983a:	f04f 0901 	mov.w	r9, #1
 800983e:	4623      	mov	r3, r4
 8009840:	469a      	mov	sl, r3
 8009842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009846:	b10a      	cbz	r2, 800984c <_svfiprintf_r+0x60>
 8009848:	2a25      	cmp	r2, #37	@ 0x25
 800984a:	d1f9      	bne.n	8009840 <_svfiprintf_r+0x54>
 800984c:	ebba 0b04 	subs.w	fp, sl, r4
 8009850:	d00b      	beq.n	800986a <_svfiprintf_r+0x7e>
 8009852:	465b      	mov	r3, fp
 8009854:	4622      	mov	r2, r4
 8009856:	4629      	mov	r1, r5
 8009858:	4638      	mov	r0, r7
 800985a:	f7ff ff6b 	bl	8009734 <__ssputs_r>
 800985e:	3001      	adds	r0, #1
 8009860:	f000 80a7 	beq.w	80099b2 <_svfiprintf_r+0x1c6>
 8009864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009866:	445a      	add	r2, fp
 8009868:	9209      	str	r2, [sp, #36]	@ 0x24
 800986a:	f89a 3000 	ldrb.w	r3, [sl]
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 809f 	beq.w	80099b2 <_svfiprintf_r+0x1c6>
 8009874:	2300      	movs	r3, #0
 8009876:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800987a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800987e:	f10a 0a01 	add.w	sl, sl, #1
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	9307      	str	r3, [sp, #28]
 8009886:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800988a:	931a      	str	r3, [sp, #104]	@ 0x68
 800988c:	4654      	mov	r4, sl
 800988e:	2205      	movs	r2, #5
 8009890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009894:	484e      	ldr	r0, [pc, #312]	@ (80099d0 <_svfiprintf_r+0x1e4>)
 8009896:	f7f6 fd2b 	bl	80002f0 <memchr>
 800989a:	9a04      	ldr	r2, [sp, #16]
 800989c:	b9d8      	cbnz	r0, 80098d6 <_svfiprintf_r+0xea>
 800989e:	06d0      	lsls	r0, r2, #27
 80098a0:	bf44      	itt	mi
 80098a2:	2320      	movmi	r3, #32
 80098a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098a8:	0711      	lsls	r1, r2, #28
 80098aa:	bf44      	itt	mi
 80098ac:	232b      	movmi	r3, #43	@ 0x2b
 80098ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098b2:	f89a 3000 	ldrb.w	r3, [sl]
 80098b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80098b8:	d015      	beq.n	80098e6 <_svfiprintf_r+0xfa>
 80098ba:	9a07      	ldr	r2, [sp, #28]
 80098bc:	4654      	mov	r4, sl
 80098be:	2000      	movs	r0, #0
 80098c0:	f04f 0c0a 	mov.w	ip, #10
 80098c4:	4621      	mov	r1, r4
 80098c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098ca:	3b30      	subs	r3, #48	@ 0x30
 80098cc:	2b09      	cmp	r3, #9
 80098ce:	d94b      	bls.n	8009968 <_svfiprintf_r+0x17c>
 80098d0:	b1b0      	cbz	r0, 8009900 <_svfiprintf_r+0x114>
 80098d2:	9207      	str	r2, [sp, #28]
 80098d4:	e014      	b.n	8009900 <_svfiprintf_r+0x114>
 80098d6:	eba0 0308 	sub.w	r3, r0, r8
 80098da:	fa09 f303 	lsl.w	r3, r9, r3
 80098de:	4313      	orrs	r3, r2
 80098e0:	9304      	str	r3, [sp, #16]
 80098e2:	46a2      	mov	sl, r4
 80098e4:	e7d2      	b.n	800988c <_svfiprintf_r+0xa0>
 80098e6:	9b03      	ldr	r3, [sp, #12]
 80098e8:	1d19      	adds	r1, r3, #4
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	9103      	str	r1, [sp, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bfbb      	ittet	lt
 80098f2:	425b      	neglt	r3, r3
 80098f4:	f042 0202 	orrlt.w	r2, r2, #2
 80098f8:	9307      	strge	r3, [sp, #28]
 80098fa:	9307      	strlt	r3, [sp, #28]
 80098fc:	bfb8      	it	lt
 80098fe:	9204      	strlt	r2, [sp, #16]
 8009900:	7823      	ldrb	r3, [r4, #0]
 8009902:	2b2e      	cmp	r3, #46	@ 0x2e
 8009904:	d10a      	bne.n	800991c <_svfiprintf_r+0x130>
 8009906:	7863      	ldrb	r3, [r4, #1]
 8009908:	2b2a      	cmp	r3, #42	@ 0x2a
 800990a:	d132      	bne.n	8009972 <_svfiprintf_r+0x186>
 800990c:	9b03      	ldr	r3, [sp, #12]
 800990e:	1d1a      	adds	r2, r3, #4
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	9203      	str	r2, [sp, #12]
 8009914:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009918:	3402      	adds	r4, #2
 800991a:	9305      	str	r3, [sp, #20]
 800991c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099e0 <_svfiprintf_r+0x1f4>
 8009920:	7821      	ldrb	r1, [r4, #0]
 8009922:	2203      	movs	r2, #3
 8009924:	4650      	mov	r0, sl
 8009926:	f7f6 fce3 	bl	80002f0 <memchr>
 800992a:	b138      	cbz	r0, 800993c <_svfiprintf_r+0x150>
 800992c:	9b04      	ldr	r3, [sp, #16]
 800992e:	eba0 000a 	sub.w	r0, r0, sl
 8009932:	2240      	movs	r2, #64	@ 0x40
 8009934:	4082      	lsls	r2, r0
 8009936:	4313      	orrs	r3, r2
 8009938:	3401      	adds	r4, #1
 800993a:	9304      	str	r3, [sp, #16]
 800993c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009940:	4824      	ldr	r0, [pc, #144]	@ (80099d4 <_svfiprintf_r+0x1e8>)
 8009942:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009946:	2206      	movs	r2, #6
 8009948:	f7f6 fcd2 	bl	80002f0 <memchr>
 800994c:	2800      	cmp	r0, #0
 800994e:	d036      	beq.n	80099be <_svfiprintf_r+0x1d2>
 8009950:	4b21      	ldr	r3, [pc, #132]	@ (80099d8 <_svfiprintf_r+0x1ec>)
 8009952:	bb1b      	cbnz	r3, 800999c <_svfiprintf_r+0x1b0>
 8009954:	9b03      	ldr	r3, [sp, #12]
 8009956:	3307      	adds	r3, #7
 8009958:	f023 0307 	bic.w	r3, r3, #7
 800995c:	3308      	adds	r3, #8
 800995e:	9303      	str	r3, [sp, #12]
 8009960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009962:	4433      	add	r3, r6
 8009964:	9309      	str	r3, [sp, #36]	@ 0x24
 8009966:	e76a      	b.n	800983e <_svfiprintf_r+0x52>
 8009968:	fb0c 3202 	mla	r2, ip, r2, r3
 800996c:	460c      	mov	r4, r1
 800996e:	2001      	movs	r0, #1
 8009970:	e7a8      	b.n	80098c4 <_svfiprintf_r+0xd8>
 8009972:	2300      	movs	r3, #0
 8009974:	3401      	adds	r4, #1
 8009976:	9305      	str	r3, [sp, #20]
 8009978:	4619      	mov	r1, r3
 800997a:	f04f 0c0a 	mov.w	ip, #10
 800997e:	4620      	mov	r0, r4
 8009980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009984:	3a30      	subs	r2, #48	@ 0x30
 8009986:	2a09      	cmp	r2, #9
 8009988:	d903      	bls.n	8009992 <_svfiprintf_r+0x1a6>
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0c6      	beq.n	800991c <_svfiprintf_r+0x130>
 800998e:	9105      	str	r1, [sp, #20]
 8009990:	e7c4      	b.n	800991c <_svfiprintf_r+0x130>
 8009992:	fb0c 2101 	mla	r1, ip, r1, r2
 8009996:	4604      	mov	r4, r0
 8009998:	2301      	movs	r3, #1
 800999a:	e7f0      	b.n	800997e <_svfiprintf_r+0x192>
 800999c:	ab03      	add	r3, sp, #12
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	462a      	mov	r2, r5
 80099a2:	4b0e      	ldr	r3, [pc, #56]	@ (80099dc <_svfiprintf_r+0x1f0>)
 80099a4:	a904      	add	r1, sp, #16
 80099a6:	4638      	mov	r0, r7
 80099a8:	f3af 8000 	nop.w
 80099ac:	1c42      	adds	r2, r0, #1
 80099ae:	4606      	mov	r6, r0
 80099b0:	d1d6      	bne.n	8009960 <_svfiprintf_r+0x174>
 80099b2:	89ab      	ldrh	r3, [r5, #12]
 80099b4:	065b      	lsls	r3, r3, #25
 80099b6:	f53f af2d 	bmi.w	8009814 <_svfiprintf_r+0x28>
 80099ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099bc:	e72c      	b.n	8009818 <_svfiprintf_r+0x2c>
 80099be:	ab03      	add	r3, sp, #12
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	462a      	mov	r2, r5
 80099c4:	4b05      	ldr	r3, [pc, #20]	@ (80099dc <_svfiprintf_r+0x1f0>)
 80099c6:	a904      	add	r1, sp, #16
 80099c8:	4638      	mov	r0, r7
 80099ca:	f000 f879 	bl	8009ac0 <_printf_i>
 80099ce:	e7ed      	b.n	80099ac <_svfiprintf_r+0x1c0>
 80099d0:	08009e4c 	.word	0x08009e4c
 80099d4:	08009e56 	.word	0x08009e56
 80099d8:	00000000 	.word	0x00000000
 80099dc:	08009735 	.word	0x08009735
 80099e0:	08009e52 	.word	0x08009e52

080099e4 <_printf_common>:
 80099e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e8:	4616      	mov	r6, r2
 80099ea:	4698      	mov	r8, r3
 80099ec:	688a      	ldr	r2, [r1, #8]
 80099ee:	690b      	ldr	r3, [r1, #16]
 80099f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099f4:	4293      	cmp	r3, r2
 80099f6:	bfb8      	it	lt
 80099f8:	4613      	movlt	r3, r2
 80099fa:	6033      	str	r3, [r6, #0]
 80099fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a00:	4607      	mov	r7, r0
 8009a02:	460c      	mov	r4, r1
 8009a04:	b10a      	cbz	r2, 8009a0a <_printf_common+0x26>
 8009a06:	3301      	adds	r3, #1
 8009a08:	6033      	str	r3, [r6, #0]
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	0699      	lsls	r1, r3, #26
 8009a0e:	bf42      	ittt	mi
 8009a10:	6833      	ldrmi	r3, [r6, #0]
 8009a12:	3302      	addmi	r3, #2
 8009a14:	6033      	strmi	r3, [r6, #0]
 8009a16:	6825      	ldr	r5, [r4, #0]
 8009a18:	f015 0506 	ands.w	r5, r5, #6
 8009a1c:	d106      	bne.n	8009a2c <_printf_common+0x48>
 8009a1e:	f104 0a19 	add.w	sl, r4, #25
 8009a22:	68e3      	ldr	r3, [r4, #12]
 8009a24:	6832      	ldr	r2, [r6, #0]
 8009a26:	1a9b      	subs	r3, r3, r2
 8009a28:	42ab      	cmp	r3, r5
 8009a2a:	dc26      	bgt.n	8009a7a <_printf_common+0x96>
 8009a2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a30:	6822      	ldr	r2, [r4, #0]
 8009a32:	3b00      	subs	r3, #0
 8009a34:	bf18      	it	ne
 8009a36:	2301      	movne	r3, #1
 8009a38:	0692      	lsls	r2, r2, #26
 8009a3a:	d42b      	bmi.n	8009a94 <_printf_common+0xb0>
 8009a3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a40:	4641      	mov	r1, r8
 8009a42:	4638      	mov	r0, r7
 8009a44:	47c8      	blx	r9
 8009a46:	3001      	adds	r0, #1
 8009a48:	d01e      	beq.n	8009a88 <_printf_common+0xa4>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	6922      	ldr	r2, [r4, #16]
 8009a4e:	f003 0306 	and.w	r3, r3, #6
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	bf02      	ittt	eq
 8009a56:	68e5      	ldreq	r5, [r4, #12]
 8009a58:	6833      	ldreq	r3, [r6, #0]
 8009a5a:	1aed      	subeq	r5, r5, r3
 8009a5c:	68a3      	ldr	r3, [r4, #8]
 8009a5e:	bf0c      	ite	eq
 8009a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a64:	2500      	movne	r5, #0
 8009a66:	4293      	cmp	r3, r2
 8009a68:	bfc4      	itt	gt
 8009a6a:	1a9b      	subgt	r3, r3, r2
 8009a6c:	18ed      	addgt	r5, r5, r3
 8009a6e:	2600      	movs	r6, #0
 8009a70:	341a      	adds	r4, #26
 8009a72:	42b5      	cmp	r5, r6
 8009a74:	d11a      	bne.n	8009aac <_printf_common+0xc8>
 8009a76:	2000      	movs	r0, #0
 8009a78:	e008      	b.n	8009a8c <_printf_common+0xa8>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	4652      	mov	r2, sl
 8009a7e:	4641      	mov	r1, r8
 8009a80:	4638      	mov	r0, r7
 8009a82:	47c8      	blx	r9
 8009a84:	3001      	adds	r0, #1
 8009a86:	d103      	bne.n	8009a90 <_printf_common+0xac>
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a90:	3501      	adds	r5, #1
 8009a92:	e7c6      	b.n	8009a22 <_printf_common+0x3e>
 8009a94:	18e1      	adds	r1, r4, r3
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	2030      	movs	r0, #48	@ 0x30
 8009a9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a9e:	4422      	add	r2, r4
 8009aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009aa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009aa8:	3302      	adds	r3, #2
 8009aaa:	e7c7      	b.n	8009a3c <_printf_common+0x58>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4622      	mov	r2, r4
 8009ab0:	4641      	mov	r1, r8
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	47c8      	blx	r9
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d0e6      	beq.n	8009a88 <_printf_common+0xa4>
 8009aba:	3601      	adds	r6, #1
 8009abc:	e7d9      	b.n	8009a72 <_printf_common+0x8e>
	...

08009ac0 <_printf_i>:
 8009ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac4:	7e0f      	ldrb	r7, [r1, #24]
 8009ac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ac8:	2f78      	cmp	r7, #120	@ 0x78
 8009aca:	4691      	mov	r9, r2
 8009acc:	4680      	mov	r8, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	469a      	mov	sl, r3
 8009ad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ad6:	d807      	bhi.n	8009ae8 <_printf_i+0x28>
 8009ad8:	2f62      	cmp	r7, #98	@ 0x62
 8009ada:	d80a      	bhi.n	8009af2 <_printf_i+0x32>
 8009adc:	2f00      	cmp	r7, #0
 8009ade:	f000 80d2 	beq.w	8009c86 <_printf_i+0x1c6>
 8009ae2:	2f58      	cmp	r7, #88	@ 0x58
 8009ae4:	f000 80b9 	beq.w	8009c5a <_printf_i+0x19a>
 8009ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009aec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009af0:	e03a      	b.n	8009b68 <_printf_i+0xa8>
 8009af2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009af6:	2b15      	cmp	r3, #21
 8009af8:	d8f6      	bhi.n	8009ae8 <_printf_i+0x28>
 8009afa:	a101      	add	r1, pc, #4	@ (adr r1, 8009b00 <_printf_i+0x40>)
 8009afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b00:	08009b59 	.word	0x08009b59
 8009b04:	08009b6d 	.word	0x08009b6d
 8009b08:	08009ae9 	.word	0x08009ae9
 8009b0c:	08009ae9 	.word	0x08009ae9
 8009b10:	08009ae9 	.word	0x08009ae9
 8009b14:	08009ae9 	.word	0x08009ae9
 8009b18:	08009b6d 	.word	0x08009b6d
 8009b1c:	08009ae9 	.word	0x08009ae9
 8009b20:	08009ae9 	.word	0x08009ae9
 8009b24:	08009ae9 	.word	0x08009ae9
 8009b28:	08009ae9 	.word	0x08009ae9
 8009b2c:	08009c6d 	.word	0x08009c6d
 8009b30:	08009b97 	.word	0x08009b97
 8009b34:	08009c27 	.word	0x08009c27
 8009b38:	08009ae9 	.word	0x08009ae9
 8009b3c:	08009ae9 	.word	0x08009ae9
 8009b40:	08009c8f 	.word	0x08009c8f
 8009b44:	08009ae9 	.word	0x08009ae9
 8009b48:	08009b97 	.word	0x08009b97
 8009b4c:	08009ae9 	.word	0x08009ae9
 8009b50:	08009ae9 	.word	0x08009ae9
 8009b54:	08009c2f 	.word	0x08009c2f
 8009b58:	6833      	ldr	r3, [r6, #0]
 8009b5a:	1d1a      	adds	r2, r3, #4
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6032      	str	r2, [r6, #0]
 8009b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e09d      	b.n	8009ca8 <_printf_i+0x1e8>
 8009b6c:	6833      	ldr	r3, [r6, #0]
 8009b6e:	6820      	ldr	r0, [r4, #0]
 8009b70:	1d19      	adds	r1, r3, #4
 8009b72:	6031      	str	r1, [r6, #0]
 8009b74:	0606      	lsls	r6, r0, #24
 8009b76:	d501      	bpl.n	8009b7c <_printf_i+0xbc>
 8009b78:	681d      	ldr	r5, [r3, #0]
 8009b7a:	e003      	b.n	8009b84 <_printf_i+0xc4>
 8009b7c:	0645      	lsls	r5, r0, #25
 8009b7e:	d5fb      	bpl.n	8009b78 <_printf_i+0xb8>
 8009b80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b84:	2d00      	cmp	r5, #0
 8009b86:	da03      	bge.n	8009b90 <_printf_i+0xd0>
 8009b88:	232d      	movs	r3, #45	@ 0x2d
 8009b8a:	426d      	negs	r5, r5
 8009b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b90:	4859      	ldr	r0, [pc, #356]	@ (8009cf8 <_printf_i+0x238>)
 8009b92:	230a      	movs	r3, #10
 8009b94:	e011      	b.n	8009bba <_printf_i+0xfa>
 8009b96:	6821      	ldr	r1, [r4, #0]
 8009b98:	6833      	ldr	r3, [r6, #0]
 8009b9a:	0608      	lsls	r0, r1, #24
 8009b9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ba0:	d402      	bmi.n	8009ba8 <_printf_i+0xe8>
 8009ba2:	0649      	lsls	r1, r1, #25
 8009ba4:	bf48      	it	mi
 8009ba6:	b2ad      	uxthmi	r5, r5
 8009ba8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009baa:	4853      	ldr	r0, [pc, #332]	@ (8009cf8 <_printf_i+0x238>)
 8009bac:	6033      	str	r3, [r6, #0]
 8009bae:	bf14      	ite	ne
 8009bb0:	230a      	movne	r3, #10
 8009bb2:	2308      	moveq	r3, #8
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bba:	6866      	ldr	r6, [r4, #4]
 8009bbc:	60a6      	str	r6, [r4, #8]
 8009bbe:	2e00      	cmp	r6, #0
 8009bc0:	bfa2      	ittt	ge
 8009bc2:	6821      	ldrge	r1, [r4, #0]
 8009bc4:	f021 0104 	bicge.w	r1, r1, #4
 8009bc8:	6021      	strge	r1, [r4, #0]
 8009bca:	b90d      	cbnz	r5, 8009bd0 <_printf_i+0x110>
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	d04b      	beq.n	8009c68 <_printf_i+0x1a8>
 8009bd0:	4616      	mov	r6, r2
 8009bd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bd6:	fb03 5711 	mls	r7, r3, r1, r5
 8009bda:	5dc7      	ldrb	r7, [r0, r7]
 8009bdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009be0:	462f      	mov	r7, r5
 8009be2:	42bb      	cmp	r3, r7
 8009be4:	460d      	mov	r5, r1
 8009be6:	d9f4      	bls.n	8009bd2 <_printf_i+0x112>
 8009be8:	2b08      	cmp	r3, #8
 8009bea:	d10b      	bne.n	8009c04 <_printf_i+0x144>
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	07df      	lsls	r7, r3, #31
 8009bf0:	d508      	bpl.n	8009c04 <_printf_i+0x144>
 8009bf2:	6923      	ldr	r3, [r4, #16]
 8009bf4:	6861      	ldr	r1, [r4, #4]
 8009bf6:	4299      	cmp	r1, r3
 8009bf8:	bfde      	ittt	le
 8009bfa:	2330      	movle	r3, #48	@ 0x30
 8009bfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c00:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009c04:	1b92      	subs	r2, r2, r6
 8009c06:	6122      	str	r2, [r4, #16]
 8009c08:	f8cd a000 	str.w	sl, [sp]
 8009c0c:	464b      	mov	r3, r9
 8009c0e:	aa03      	add	r2, sp, #12
 8009c10:	4621      	mov	r1, r4
 8009c12:	4640      	mov	r0, r8
 8009c14:	f7ff fee6 	bl	80099e4 <_printf_common>
 8009c18:	3001      	adds	r0, #1
 8009c1a:	d14a      	bne.n	8009cb2 <_printf_i+0x1f2>
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c20:	b004      	add	sp, #16
 8009c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	f043 0320 	orr.w	r3, r3, #32
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	4833      	ldr	r0, [pc, #204]	@ (8009cfc <_printf_i+0x23c>)
 8009c30:	2778      	movs	r7, #120	@ 0x78
 8009c32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	6831      	ldr	r1, [r6, #0]
 8009c3a:	061f      	lsls	r7, r3, #24
 8009c3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c40:	d402      	bmi.n	8009c48 <_printf_i+0x188>
 8009c42:	065f      	lsls	r7, r3, #25
 8009c44:	bf48      	it	mi
 8009c46:	b2ad      	uxthmi	r5, r5
 8009c48:	6031      	str	r1, [r6, #0]
 8009c4a:	07d9      	lsls	r1, r3, #31
 8009c4c:	bf44      	itt	mi
 8009c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8009c52:	6023      	strmi	r3, [r4, #0]
 8009c54:	b11d      	cbz	r5, 8009c5e <_printf_i+0x19e>
 8009c56:	2310      	movs	r3, #16
 8009c58:	e7ac      	b.n	8009bb4 <_printf_i+0xf4>
 8009c5a:	4827      	ldr	r0, [pc, #156]	@ (8009cf8 <_printf_i+0x238>)
 8009c5c:	e7e9      	b.n	8009c32 <_printf_i+0x172>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	f023 0320 	bic.w	r3, r3, #32
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	e7f6      	b.n	8009c56 <_printf_i+0x196>
 8009c68:	4616      	mov	r6, r2
 8009c6a:	e7bd      	b.n	8009be8 <_printf_i+0x128>
 8009c6c:	6833      	ldr	r3, [r6, #0]
 8009c6e:	6825      	ldr	r5, [r4, #0]
 8009c70:	6961      	ldr	r1, [r4, #20]
 8009c72:	1d18      	adds	r0, r3, #4
 8009c74:	6030      	str	r0, [r6, #0]
 8009c76:	062e      	lsls	r6, r5, #24
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	d501      	bpl.n	8009c80 <_printf_i+0x1c0>
 8009c7c:	6019      	str	r1, [r3, #0]
 8009c7e:	e002      	b.n	8009c86 <_printf_i+0x1c6>
 8009c80:	0668      	lsls	r0, r5, #25
 8009c82:	d5fb      	bpl.n	8009c7c <_printf_i+0x1bc>
 8009c84:	8019      	strh	r1, [r3, #0]
 8009c86:	2300      	movs	r3, #0
 8009c88:	6123      	str	r3, [r4, #16]
 8009c8a:	4616      	mov	r6, r2
 8009c8c:	e7bc      	b.n	8009c08 <_printf_i+0x148>
 8009c8e:	6833      	ldr	r3, [r6, #0]
 8009c90:	1d1a      	adds	r2, r3, #4
 8009c92:	6032      	str	r2, [r6, #0]
 8009c94:	681e      	ldr	r6, [r3, #0]
 8009c96:	6862      	ldr	r2, [r4, #4]
 8009c98:	2100      	movs	r1, #0
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f7f6 fb28 	bl	80002f0 <memchr>
 8009ca0:	b108      	cbz	r0, 8009ca6 <_printf_i+0x1e6>
 8009ca2:	1b80      	subs	r0, r0, r6
 8009ca4:	6060      	str	r0, [r4, #4]
 8009ca6:	6863      	ldr	r3, [r4, #4]
 8009ca8:	6123      	str	r3, [r4, #16]
 8009caa:	2300      	movs	r3, #0
 8009cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cb0:	e7aa      	b.n	8009c08 <_printf_i+0x148>
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	4640      	mov	r0, r8
 8009cba:	47d0      	blx	sl
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d0ad      	beq.n	8009c1c <_printf_i+0x15c>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	079b      	lsls	r3, r3, #30
 8009cc4:	d413      	bmi.n	8009cee <_printf_i+0x22e>
 8009cc6:	68e0      	ldr	r0, [r4, #12]
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	4298      	cmp	r0, r3
 8009ccc:	bfb8      	it	lt
 8009cce:	4618      	movlt	r0, r3
 8009cd0:	e7a6      	b.n	8009c20 <_printf_i+0x160>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	4640      	mov	r0, r8
 8009cda:	47d0      	blx	sl
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d09d      	beq.n	8009c1c <_printf_i+0x15c>
 8009ce0:	3501      	adds	r5, #1
 8009ce2:	68e3      	ldr	r3, [r4, #12]
 8009ce4:	9903      	ldr	r1, [sp, #12]
 8009ce6:	1a5b      	subs	r3, r3, r1
 8009ce8:	42ab      	cmp	r3, r5
 8009cea:	dcf2      	bgt.n	8009cd2 <_printf_i+0x212>
 8009cec:	e7eb      	b.n	8009cc6 <_printf_i+0x206>
 8009cee:	2500      	movs	r5, #0
 8009cf0:	f104 0619 	add.w	r6, r4, #25
 8009cf4:	e7f5      	b.n	8009ce2 <_printf_i+0x222>
 8009cf6:	bf00      	nop
 8009cf8:	08009e5d 	.word	0x08009e5d
 8009cfc:	08009e6e 	.word	0x08009e6e

08009d00 <memmove>:
 8009d00:	4288      	cmp	r0, r1
 8009d02:	b510      	push	{r4, lr}
 8009d04:	eb01 0402 	add.w	r4, r1, r2
 8009d08:	d902      	bls.n	8009d10 <memmove+0x10>
 8009d0a:	4284      	cmp	r4, r0
 8009d0c:	4623      	mov	r3, r4
 8009d0e:	d807      	bhi.n	8009d20 <memmove+0x20>
 8009d10:	1e43      	subs	r3, r0, #1
 8009d12:	42a1      	cmp	r1, r4
 8009d14:	d008      	beq.n	8009d28 <memmove+0x28>
 8009d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d1e:	e7f8      	b.n	8009d12 <memmove+0x12>
 8009d20:	4402      	add	r2, r0
 8009d22:	4601      	mov	r1, r0
 8009d24:	428a      	cmp	r2, r1
 8009d26:	d100      	bne.n	8009d2a <memmove+0x2a>
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d32:	e7f7      	b.n	8009d24 <memmove+0x24>

08009d34 <_sbrk_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d06      	ldr	r5, [pc, #24]	@ (8009d50 <_sbrk_r+0x1c>)
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	602b      	str	r3, [r5, #0]
 8009d40:	f7f6 ffda 	bl	8000cf8 <_sbrk>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_sbrk_r+0x1a>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_sbrk_r+0x1a>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	24000930 	.word	0x24000930

08009d54 <memcpy>:
 8009d54:	440a      	add	r2, r1
 8009d56:	4291      	cmp	r1, r2
 8009d58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009d5c:	d100      	bne.n	8009d60 <memcpy+0xc>
 8009d5e:	4770      	bx	lr
 8009d60:	b510      	push	{r4, lr}
 8009d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d6a:	4291      	cmp	r1, r2
 8009d6c:	d1f9      	bne.n	8009d62 <memcpy+0xe>
 8009d6e:	bd10      	pop	{r4, pc}

08009d70 <_realloc_r>:
 8009d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	4680      	mov	r8, r0
 8009d76:	4615      	mov	r5, r2
 8009d78:	460c      	mov	r4, r1
 8009d7a:	b921      	cbnz	r1, 8009d86 <_realloc_r+0x16>
 8009d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d80:	4611      	mov	r1, r2
 8009d82:	f7ff bc4b 	b.w	800961c <_malloc_r>
 8009d86:	b92a      	cbnz	r2, 8009d94 <_realloc_r+0x24>
 8009d88:	f7ff fbdc 	bl	8009544 <_free_r>
 8009d8c:	2400      	movs	r4, #0
 8009d8e:	4620      	mov	r0, r4
 8009d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d94:	f000 f81a 	bl	8009dcc <_malloc_usable_size_r>
 8009d98:	4285      	cmp	r5, r0
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	d802      	bhi.n	8009da4 <_realloc_r+0x34>
 8009d9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009da2:	d8f4      	bhi.n	8009d8e <_realloc_r+0x1e>
 8009da4:	4629      	mov	r1, r5
 8009da6:	4640      	mov	r0, r8
 8009da8:	f7ff fc38 	bl	800961c <_malloc_r>
 8009dac:	4607      	mov	r7, r0
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d0ec      	beq.n	8009d8c <_realloc_r+0x1c>
 8009db2:	42b5      	cmp	r5, r6
 8009db4:	462a      	mov	r2, r5
 8009db6:	4621      	mov	r1, r4
 8009db8:	bf28      	it	cs
 8009dba:	4632      	movcs	r2, r6
 8009dbc:	f7ff ffca 	bl	8009d54 <memcpy>
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	4640      	mov	r0, r8
 8009dc4:	f7ff fbbe 	bl	8009544 <_free_r>
 8009dc8:	463c      	mov	r4, r7
 8009dca:	e7e0      	b.n	8009d8e <_realloc_r+0x1e>

08009dcc <_malloc_usable_size_r>:
 8009dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dd0:	1f18      	subs	r0, r3, #4
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	bfbc      	itt	lt
 8009dd6:	580b      	ldrlt	r3, [r1, r0]
 8009dd8:	18c0      	addlt	r0, r0, r3
 8009dda:	4770      	bx	lr

08009ddc <_init>:
 8009ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dde:	bf00      	nop
 8009de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de2:	bc08      	pop	{r3}
 8009de4:	469e      	mov	lr, r3
 8009de6:	4770      	bx	lr

08009de8 <_fini>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	bf00      	nop
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr
