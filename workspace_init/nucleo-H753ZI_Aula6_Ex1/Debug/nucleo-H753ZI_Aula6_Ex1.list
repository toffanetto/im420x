
nucleo-H753ZI_Aula6_Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aafc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800ad9c  0800ad9c  0000bd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af1c  0800af1c  0000bf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af24  0800af24  0000bf24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800af28  0800af28  0000bf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800af2c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800af90  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800aff0  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005218  24000124  0800b050  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400533c  0800b050  0000c33c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029ef3  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050fb  00000000  00000000  00036045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e00  00000000  00000000  0003b140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000173b  00000000  00000000  0003cf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cc6d  00000000  00000000  0003e67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000260c5  00000000  00000000  0007b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001780a0  00000000  00000000  000a13ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021944d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008470  00000000  00000000  00219490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00221900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ad84 	.word	0x0800ad84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800ad84 	.word	0x0800ad84

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000674:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <MX_ETH_Init+0x80>)
 8000676:	4a1f      	ldr	r2, [pc, #124]	@ (80006f4 <MX_ETH_Init+0x84>)
 8000678:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800067a:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <MX_ETH_Init+0x88>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000680:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <MX_ETH_Init+0x88>)
 8000682:	2280      	movs	r2, #128	@ 0x80
 8000684:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000686:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <MX_ETH_Init+0x88>)
 8000688:	22e1      	movs	r2, #225	@ 0xe1
 800068a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800068c:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_ETH_Init+0x88>)
 800068e:	2200      	movs	r2, #0
 8000690:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <MX_ETH_Init+0x88>)
 8000694:	2200      	movs	r2, #0
 8000696:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_ETH_Init+0x88>)
 800069a:	2200      	movs	r2, #0
 800069c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006a0:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <MX_ETH_Init+0x88>)
 80006a2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006ac:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <MX_ETH_Init+0x8c>)
 80006ae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	@ (8000700 <MX_ETH_Init+0x90>)
 80006b4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006b8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006be:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006c0:	f001 f97a 	bl	80019b8 <HAL_ETH_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006ca:	f000 fcf3 	bl	80010b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ce:	2238      	movs	r2, #56	@ 0x38
 80006d0:	2100      	movs	r1, #0
 80006d2:	480c      	ldr	r0, [pc, #48]	@ (8000704 <MX_ETH_Init+0x94>)
 80006d4:	f009 fe80 	bl	800a3d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_ETH_Init+0x94>)
 80006da:	2221      	movs	r2, #33	@ 0x21
 80006dc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_ETH_Init+0x94>)
 80006e0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006e4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_ETH_Init+0x94>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	24000178 	.word	0x24000178
 80006f4:	40028000 	.word	0x40028000
 80006f8:	24000228 	.word	0x24000228
 80006fc:	240000c4 	.word	0x240000c4
 8000700:	24000064 	.word	0x24000064
 8000704:	24000140 	.word	0x24000140

08000708 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08e      	sub	sp, #56	@ 0x38
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a59      	ldr	r2, [pc, #356]	@ (800088c <HAL_ETH_MspInit+0x184>)
 8000726:	4293      	cmp	r3, r2
 8000728:	f040 80ab 	bne.w	8000882 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800072c:	4b58      	ldr	r3, [pc, #352]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800072e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000732:	4a57      	ldr	r2, [pc, #348]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 8000734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000738:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800073c:	4b54      	ldr	r3, [pc, #336]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800073e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000746:	623b      	str	r3, [r7, #32]
 8000748:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800074a:	4b51      	ldr	r3, [pc, #324]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800074c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000750:	4a4f      	ldr	r2, [pc, #316]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 8000752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000756:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800075a:	4b4d      	ldr	r3, [pc, #308]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800075c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000768:	4b49      	ldr	r3, [pc, #292]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800076a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800076e:	4a48      	ldr	r2, [pc, #288]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 8000770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000774:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000778:	4b45      	ldr	r3, [pc, #276]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800077a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800077e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b42      	ldr	r3, [pc, #264]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	4a40      	ldr	r2, [pc, #256]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000796:	4b3e      	ldr	r3, [pc, #248]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	4a39      	ldr	r2, [pc, #228]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b4:	4b36      	ldr	r3, [pc, #216]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	4a31      	ldr	r2, [pc, #196]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80007fe:	2332      	movs	r3, #50	@ 0x32
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800080e:	230b      	movs	r3, #11
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <HAL_ETH_MspInit+0x18c>)
 800081a:	f001 fd01 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800081e:	2386      	movs	r3, #134	@ 0x86
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082e:	230b      	movs	r3, #11
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	4817      	ldr	r0, [pc, #92]	@ (8000898 <HAL_ETH_MspInit+0x190>)
 800083a:	f001 fcf1 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800083e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000850:	230b      	movs	r3, #11
 8000852:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4810      	ldr	r0, [pc, #64]	@ (800089c <HAL_ETH_MspInit+0x194>)
 800085c:	f001 fce0 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000860:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000872:	230b      	movs	r3, #11
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087a:	4619      	mov	r1, r3
 800087c:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <HAL_ETH_MspInit+0x198>)
 800087e:	f001 fccf 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000882:	bf00      	nop
 8000884:	3738      	adds	r7, #56	@ 0x38
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40028000 	.word	0x40028000
 8000890:	58024400 	.word	0x58024400
 8000894:	58020800 	.word	0x58020800
 8000898:	58020000 	.word	0x58020000
 800089c:	58020400 	.word	0x58020400
 80008a0:	58021800 	.word	0x58021800

080008a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueuePrint */
  QueuePrintHandle = osMessageQueueNew (16, sizeof(message_t), &QueuePrint_attributes);
 80008a8:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <MX_FREERTOS_Init+0x48>)
 80008aa:	216c      	movs	r1, #108	@ 0x6c
 80008ac:	2010      	movs	r0, #16
 80008ae:	f006 feca 	bl	8007646 <osMessageQueueNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <MX_FREERTOS_Init+0x4c>)
 80008b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80008b8:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <MX_FREERTOS_Init+0x50>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <MX_FREERTOS_Init+0x54>)
 80008be:	f006 fe15 	bl	80074ec <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a0d      	ldr	r2, [pc, #52]	@ (80008fc <MX_FREERTOS_Init+0x58>)
 80008c6:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <MX_FREERTOS_Init+0x5c>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	480d      	ldr	r0, [pc, #52]	@ (8000904 <MX_FREERTOS_Init+0x60>)
 80008ce:	f006 fe0d 	bl	80074ec <osThreadNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000908 <MX_FREERTOS_Init+0x64>)
 80008d6:	6013      	str	r3, [r2, #0]

  /* creation of TaskGateKeeper */
  TaskGateKeeperHandle = osThreadNew(StartTaskGateKeeper, NULL, &TaskGateKeeper_attributes);
 80008d8:	4a0c      	ldr	r2, [pc, #48]	@ (800090c <MX_FREERTOS_Init+0x68>)
 80008da:	2100      	movs	r1, #0
 80008dc:	480c      	ldr	r0, [pc, #48]	@ (8000910 <MX_FREERTOS_Init+0x6c>)
 80008de:	f006 fe05 	bl	80074ec <osThreadNew>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000914 <MX_FREERTOS_Init+0x70>)
 80008e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	0800ae98 	.word	0x0800ae98
 80008f0:	2400023c 	.word	0x2400023c
 80008f4:	0800ae2c 	.word	0x0800ae2c
 80008f8:	08000919 	.word	0x08000919
 80008fc:	24000230 	.word	0x24000230
 8000900:	0800ae50 	.word	0x0800ae50
 8000904:	08000965 	.word	0x08000965
 8000908:	24000234 	.word	0x24000234
 800090c:	0800ae74 	.word	0x0800ae74
 8000910:	080009b1 	.word	0x080009b1
 8000914:	24000238 	.word	0x24000238

08000918 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09e      	sub	sp, #120	@ 0x78
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */

  message_t xMes; // Creating message struct
  xMes.cNumTask = '1'; // Set the task number
 8000920:	2331      	movs	r3, #49	@ 0x31
 8000922:	733b      	strb	r3, [r7, #12]
  sprintf(&xMes.cMes[0], "Mensagem Task 1"); // Creating the message
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	3301      	adds	r3, #1
 800092a:	490c      	ldr	r1, [pc, #48]	@ (800095c <StartTask1+0x44>)
 800092c:	4618      	mov	r0, r3
 800092e:	f009 fd33 	bl	800a398 <siprintf>
  xMes.iCount = 0; // Initializing the counter variable
 8000932:	2300      	movs	r3, #0
 8000934:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Infinite loop */
  for(;;)
  {
	osMessageQueuePut(QueuePrintHandle, &xMes, 0, osWaitForever); // Send the message struct to the gatekeeper task to be printed in serial by a message queue.
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <StartTask1+0x48>)
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	f107 010c 	add.w	r1, r7, #12
 800093e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000942:	2200      	movs	r2, #0
 8000944:	f006 fef2 	bl	800772c <osMessageQueuePut>
	xMes.iCount++; // Incrementing the counter
 8000948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800094a:	3301      	adds	r3, #1
 800094c:	677b      	str	r3, [r7, #116]	@ 0x74
    osDelay(1000); // Waiting 1s to send another message
 800094e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000952:	f006 fe5d 	bl	8007610 <osDelay>
	osMessageQueuePut(QueuePrintHandle, &xMes, 0, osWaitForever); // Send the message struct to the gatekeeper task to be printed in serial by a message queue.
 8000956:	bf00      	nop
 8000958:	e7ed      	b.n	8000936 <StartTask1+0x1e>
 800095a:	bf00      	nop
 800095c:	0800adc8 	.word	0x0800adc8
 8000960:	2400023c 	.word	0x2400023c

08000964 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b09e      	sub	sp, #120	@ 0x78
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  message_t xMes; // Creating message struct
  xMes.cNumTask = '2'; // Set the task number
 800096c:	2332      	movs	r3, #50	@ 0x32
 800096e:	733b      	strb	r3, [r7, #12]
  sprintf(&xMes.cMes[0], "Mensagem Task 2"); // Creating the message
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	3301      	adds	r3, #1
 8000976:	490c      	ldr	r1, [pc, #48]	@ (80009a8 <StartTask2+0x44>)
 8000978:	4618      	mov	r0, r3
 800097a:	f009 fd0d 	bl	800a398 <siprintf>
  xMes.iCount = 0; // Initializing the counter variable
 800097e:	2300      	movs	r3, #0
 8000980:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Infinite loop */
  for(;;)
  {
	osMessageQueuePut(QueuePrintHandle, &xMes, 0, osWaitForever); // Send the message struct to the gatekeeper task to be printed in serial by a message queue.
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <StartTask2+0x48>)
 8000984:	6818      	ldr	r0, [r3, #0]
 8000986:	f107 010c 	add.w	r1, r7, #12
 800098a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800098e:	2200      	movs	r2, #0
 8000990:	f006 fecc 	bl	800772c <osMessageQueuePut>
	xMes.iCount++; // Incrementing the counter
 8000994:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000996:	3301      	adds	r3, #1
 8000998:	677b      	str	r3, [r7, #116]	@ 0x74
	osDelay(1000); // Waiting 1s to send another message
 800099a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800099e:	f006 fe37 	bl	8007610 <osDelay>
	osMessageQueuePut(QueuePrintHandle, &xMes, 0, osWaitForever); // Send the message struct to the gatekeeper task to be printed in serial by a message queue.
 80009a2:	bf00      	nop
 80009a4:	e7ed      	b.n	8000982 <StartTask2+0x1e>
 80009a6:	bf00      	nop
 80009a8:	0800add8 	.word	0x0800add8
 80009ac:	2400023c 	.word	0x2400023c

080009b0 <StartTaskGateKeeper>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGateKeeper */
void StartTaskGateKeeper(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09e      	sub	sp, #120	@ 0x78
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	osMessageQueueGet(QueuePrintHandle, &xMes, 0, osWaitForever); // Reading data for message queue
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <StartTaskGateKeeper+0x3c>)
 80009ba:	6818      	ldr	r0, [r3, #0]
 80009bc:	f107 010c 	add.w	r1, r7, #12
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009c4:	2200      	movs	r2, #0
 80009c6:	f006 ff11 	bl	80077ec <osMessageQueueGet>

	// Remake using UART_Transmit, for training use UART from FreeRTOS from scrath
	printf_("Task: %c, Msg: %s, Count = %d \n\r", xMes.cNumTask, xMes.cMes, xMes.iCount); // Printing on serial the read message.
 80009ca:	7b3b      	ldrb	r3, [r7, #12]
 80009cc:	4618      	mov	r0, r3
 80009ce:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	460b      	mov	r3, r1
 80009d8:	4601      	mov	r1, r0
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <StartTaskGateKeeper+0x40>)
 80009dc:	f000 faae 	bl	8000f3c <printf_>


	osDelay(100);
 80009e0:	2064      	movs	r0, #100	@ 0x64
 80009e2:	f006 fe15 	bl	8007610 <osDelay>
	osMessageQueueGet(QueuePrintHandle, &xMes, 0, osWaitForever); // Reading data for message queue
 80009e6:	bf00      	nop
 80009e8:	e7e6      	b.n	80009b8 <StartTaskGateKeeper+0x8>
 80009ea:	bf00      	nop
 80009ec:	2400023c 	.word	0x2400023c
 80009f0:	0800ade8 	.word	0x0800ade8

080009f4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	@ 0x30
 80009f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b62      	ldr	r3, [pc, #392]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a10:	4a60      	ldr	r2, [pc, #384]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a28:	4b5a      	ldr	r3, [pc, #360]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2e:	4a59      	ldr	r2, [pc, #356]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a38:	4b56      	ldr	r3, [pc, #344]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b53      	ldr	r3, [pc, #332]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4c:	4a51      	ldr	r2, [pc, #324]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a56:	4b4f      	ldr	r3, [pc, #316]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a64:	4b4b      	ldr	r3, [pc, #300]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6a:	4a4a      	ldr	r2, [pc, #296]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a74:	4b47      	ldr	r3, [pc, #284]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b44      	ldr	r3, [pc, #272]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	4a42      	ldr	r2, [pc, #264]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a92:	4b40      	ldr	r3, [pc, #256]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa0:	4b3c      	ldr	r3, [pc, #240]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab0:	4b38      	ldr	r3, [pc, #224]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000abe:	4b35      	ldr	r3, [pc, #212]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4a33      	ldr	r2, [pc, #204]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4b31      	ldr	r3, [pc, #196]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 0310 	and.w	r3, r3, #16
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ae2:	482d      	ldr	r0, [pc, #180]	@ (8000b98 <MX_GPIO_Init+0x1a4>)
 8000ae4:	f001 fd4c 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aee:	482b      	ldr	r0, [pc, #172]	@ (8000b9c <MX_GPIO_Init+0x1a8>)
 8000af0:	f001 fd46 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2102      	movs	r1, #2
 8000af8:	4829      	ldr	r0, [pc, #164]	@ (8000ba0 <MX_GPIO_Init+0x1ac>)
 8000afa:	f001 fd41 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4824      	ldr	r0, [pc, #144]	@ (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000b14:	f001 fb84 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b18:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4819      	ldr	r0, [pc, #100]	@ (8000b98 <MX_GPIO_Init+0x1a4>)
 8000b32:	f001 fb75 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4813      	ldr	r0, [pc, #76]	@ (8000b9c <MX_GPIO_Init+0x1a8>)
 8000b50:	f001 fb66 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b54:	2380      	movs	r3, #128	@ 0x80
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	480f      	ldr	r0, [pc, #60]	@ (8000ba8 <MX_GPIO_Init+0x1b4>)
 8000b6a:	f001 fb59 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <MX_GPIO_Init+0x1ac>)
 8000b86:	f001 fb4b 	bl	8002220 <HAL_GPIO_Init>

}
 8000b8a:	bf00      	nop
 8000b8c:	3730      	adds	r7, #48	@ 0x30
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	58024400 	.word	0x58024400
 8000b98:	58020400 	.word	0x58020400
 8000b9c:	58020c00 	.word	0x58020c00
 8000ba0:	58021000 	.word	0x58021000
 8000ba4:	58020800 	.word	0x58020800
 8000ba8:	58021800 	.word	0x58021800

08000bac <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	if (str) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00a      	beq.n	8000bd2 <printchar_+0x26>
		**str = (char)c;
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 8000bd0:	e005      	b.n	8000bde <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <printchar_+0x3c>)
 8000bda:	f004 ffd7 	bl	8005b8c <HAL_UART_Transmit>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	24000290 	.word	0x24000290

08000bec <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 8000bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000bfc:	2400      	movs	r4, #0
 8000bfe:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	dd17      	ble.n	8000c38 <prints_+0x4c>
		register int len = 0;
 8000c08:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000c0a:	68be      	ldr	r6, [r7, #8]
 8000c0c:	e001      	b.n	8000c12 <prints_+0x26>
 8000c0e:	3501      	adds	r5, #1
 8000c10:	3601      	adds	r6, #1
 8000c12:	7833      	ldrb	r3, [r6, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1fa      	bne.n	8000c0e <prints_+0x22>
		if (len >= width) width = 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	429d      	cmp	r5, r3
 8000c1c:	db02      	blt.n	8000c24 <prints_+0x38>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	e002      	b.n	8000c2a <prints_+0x3e>
		else width -= len;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	1b5b      	subs	r3, r3, r5
 8000c28:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <prints_+0x4c>
 8000c34:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d116      	bne.n	8000c70 <prints_+0x84>
		for ( ; width > 0; --width) {
 8000c42:	e007      	b.n	8000c54 <prints_+0x68>
			printchar_(out, padchar);
 8000c44:	4641      	mov	r1, r8
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f7ff ffb0 	bl	8000bac <printchar_>
			++pc;
 8000c4c:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	dcf4      	bgt.n	8000c44 <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000c5a:	e009      	b.n	8000c70 <prints_+0x84>
		printchar_(out, *string);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f7ff ffa2 	bl	8000bac <printchar_>
		++pc;
 8000c68:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f1      	bne.n	8000c5c <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 8000c78:	e007      	b.n	8000c8a <prints_+0x9e>
		printchar_(out, padchar);
 8000c7a:	4641      	mov	r1, r8
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f7ff ff95 	bl	8000bac <printchar_>
		++pc;
 8000c82:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dcf4      	bgt.n	8000c7a <prints_+0x8e>
	}

	return pc;
 8000c90:	4623      	mov	r3, r4
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c9c <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ca0:	b089      	sub	sp, #36	@ 0x24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000cac:	f04f 0900 	mov.w	r9, #0
 8000cb0:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8000cb2:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10c      	bne.n	8000cd4 <printi_+0x38>
		print_buf[0] = '0';
 8000cba:	2330      	movs	r3, #48	@ 0x30
 8000cbc:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 8000cc2:	f107 0114 	add.w	r1, r7, #20
 8000cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f7ff ff8e 	bl	8000bec <prints_>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	e04a      	b.n	8000d6a <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00a      	beq.n	8000cf0 <printi_+0x54>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0a      	cmp	r3, #10
 8000cde:	d107      	bne.n	8000cf0 <printi_+0x54>
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da04      	bge.n	8000cf0 <printi_+0x54>
		neg = 1;
 8000ce6:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	425b      	negs	r3, r3
 8000cee:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000cf0:	f107 0414 	add.w	r4, r7, #20
 8000cf4:	340b      	adds	r4, #11
	*s = '\0';
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000cfa:	e015      	b.n	8000d28 <printi_+0x8c>
		t = (unsigned int)u % b;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	fbb5 f2f3 	udiv	r2, r5, r3
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	1aeb      	subs	r3, r5, r3
 8000d08:	4698      	mov	r8, r3
		if( t >= 10 )
 8000d0a:	f1b8 0f09 	cmp.w	r8, #9
 8000d0e:	dd02      	ble.n	8000d16 <printi_+0x7a>
			t += letbase - '0' - 10;
 8000d10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d12:	3b3a      	subs	r3, #58	@ 0x3a
 8000d14:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 8000d16:	fa5f f388 	uxtb.w	r3, r8
 8000d1a:	3c01      	subs	r4, #1
 8000d1c:	3330      	adds	r3, #48	@ 0x30
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d1e7      	bne.n	8000cfc <printi_+0x60>
	}

	if (neg) {
 8000d2c:	f1b9 0f00 	cmp.w	r9, #0
 8000d30:	d013      	beq.n	8000d5a <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00d      	beq.n	8000d54 <printi_+0xb8>
 8000d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d008      	beq.n	8000d54 <printi_+0xb8>
			printchar_(out, '-');
 8000d42:	212d      	movs	r1, #45	@ 0x2d
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f7ff ff31 	bl	8000bac <printchar_>
			++pc;
 8000d4a:	3601      	adds	r6, #1
			--width;
 8000d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8000d52:	e002      	b.n	8000d5a <printi_+0xbe>
		}
		else {
			*--s = '-';
 8000d54:	3c01      	subs	r4, #1
 8000d56:	232d      	movs	r3, #45	@ 0x2d
 8000d58:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8000d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d5e:	4621      	mov	r1, r4
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f7ff ff43 	bl	8000bec <prints_>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4433      	add	r3, r6
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	@ 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d74 <print_>:

static int print_( char **out, const char *format, va_list args )
{
 8000d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d78:	b08a      	sub	sp, #40	@ 0x28
 8000d7a:	af04      	add	r7, sp, #16
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000d82:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000d84:	e0c4      	b.n	8000f10 <print_+0x19c>
		if (*format == '%') {
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b25      	cmp	r3, #37	@ 0x25
 8000d8c:	f040 80b3 	bne.w	8000ef6 <print_+0x182>
			++format;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3301      	adds	r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000d96:	2600      	movs	r6, #0
 8000d98:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80bc 	beq.w	8000f1c <print_+0x1a8>
			if (*format == '%') goto out;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b25      	cmp	r3, #37	@ 0x25
 8000daa:	f000 80a6 	beq.w	8000efa <print_+0x186>
			if (*format == '-') {
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b2d      	cmp	r3, #45	@ 0x2d
 8000db4:	d109      	bne.n	8000dca <print_+0x56>
				++format;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000dbc:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000dbe:	e004      	b.n	8000dca <print_+0x56>
				++format;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000dc6:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b30      	cmp	r3, #48	@ 0x30
 8000dd0:	d0f6      	beq.n	8000dc0 <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000dd2:	e00b      	b.n	8000dec <print_+0x78>
				width *= 10;
 8000dd4:	462b      	mov	r3, r5
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	442b      	add	r3, r5
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	461d      	mov	r5, r3
				width += *format - '0';
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3b30      	subs	r3, #48	@ 0x30
 8000de4:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000df2:	d903      	bls.n	8000dfc <print_+0x88>
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b39      	cmp	r3, #57	@ 0x39
 8000dfa:	d9eb      	bls.n	8000dd4 <print_+0x60>
			}
			if( *format == 's' ) {
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b73      	cmp	r3, #115	@ 0x73
 8000e02:	d112      	bne.n	8000e2a <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	1d1a      	adds	r2, r3, #4
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8000e0e:	f1b8 0f00 	cmp.w	r8, #0
 8000e12:	d001      	beq.n	8000e18 <print_+0xa4>
 8000e14:	4641      	mov	r1, r8
 8000e16:	e000      	b.n	8000e1a <print_+0xa6>
 8000e18:	4947      	ldr	r1, [pc, #284]	@ (8000f38 <print_+0x1c4>)
 8000e1a:	4633      	mov	r3, r6
 8000e1c:	462a      	mov	r2, r5
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f7ff fee4 	bl	8000bec <prints_>
 8000e24:	4603      	mov	r3, r0
 8000e26:	441c      	add	r4, r3
				continue;
 8000e28:	e06f      	b.n	8000f0a <print_+0x196>
			}
			if( *format == 'd' ) {
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b64      	cmp	r3, #100	@ 0x64
 8000e30:	d10f      	bne.n	8000e52 <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	1d1a      	adds	r2, r3, #4
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	6819      	ldr	r1, [r3, #0]
 8000e3a:	2361      	movs	r3, #97	@ 0x61
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	9601      	str	r6, [sp, #4]
 8000e40:	9500      	str	r5, [sp, #0]
 8000e42:	2301      	movs	r3, #1
 8000e44:	220a      	movs	r2, #10
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff ff28 	bl	8000c9c <printi_>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	441c      	add	r4, r3
				continue;
 8000e50:	e05b      	b.n	8000f0a <print_+0x196>
			}
			if( *format == 'x' ) {
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b78      	cmp	r3, #120	@ 0x78
 8000e58:	d10f      	bne.n	8000e7a <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	1d1a      	adds	r2, r3, #4
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	6819      	ldr	r1, [r3, #0]
 8000e62:	2361      	movs	r3, #97	@ 0x61
 8000e64:	9302      	str	r3, [sp, #8]
 8000e66:	9601      	str	r6, [sp, #4]
 8000e68:	9500      	str	r5, [sp, #0]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff ff14 	bl	8000c9c <printi_>
 8000e74:	4603      	mov	r3, r0
 8000e76:	441c      	add	r4, r3
				continue;
 8000e78:	e047      	b.n	8000f0a <print_+0x196>
			}
			if( *format == 'X' ) {
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b58      	cmp	r3, #88	@ 0x58
 8000e80:	d10f      	bne.n	8000ea2 <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	1d1a      	adds	r2, r3, #4
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	2341      	movs	r3, #65	@ 0x41
 8000e8c:	9302      	str	r3, [sp, #8]
 8000e8e:	9601      	str	r6, [sp, #4]
 8000e90:	9500      	str	r5, [sp, #0]
 8000e92:	2300      	movs	r3, #0
 8000e94:	2210      	movs	r2, #16
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f7ff ff00 	bl	8000c9c <printi_>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	441c      	add	r4, r3
				continue;
 8000ea0:	e033      	b.n	8000f0a <print_+0x196>
			}
			if( *format == 'u' ) {
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b75      	cmp	r3, #117	@ 0x75
 8000ea8:	d10f      	bne.n	8000eca <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	1d1a      	adds	r2, r3, #4
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	6819      	ldr	r1, [r3, #0]
 8000eb2:	2361      	movs	r3, #97	@ 0x61
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	9601      	str	r6, [sp, #4]
 8000eb8:	9500      	str	r5, [sp, #0]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	220a      	movs	r2, #10
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff feec 	bl	8000c9c <printi_>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	441c      	add	r4, r3
				continue;
 8000ec8:	e01f      	b.n	8000f0a <print_+0x196>
			}
			if( *format == 'c' ) {
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b63      	cmp	r3, #99	@ 0x63
 8000ed0:	d11b      	bne.n	8000f0a <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	1d1a      	adds	r2, r3, #4
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000ede:	2300      	movs	r3, #0
 8000ee0:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 8000ee2:	f107 0114 	add.w	r1, r7, #20
 8000ee6:	4633      	mov	r3, r6
 8000ee8:	462a      	mov	r2, r5
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff fe7e 	bl	8000bec <prints_>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	441c      	add	r4, r3
				continue;
 8000ef4:	e009      	b.n	8000f0a <print_+0x196>
			}
		}
		else {
		out:
 8000ef6:	bf00      	nop
 8000ef8:	e000      	b.n	8000efc <print_+0x188>
			if (*format == '%') goto out;
 8000efa:	bf00      	nop
			printchar_(out, *format);
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f7ff fe52 	bl	8000bac <printchar_>
			++pc;
 8000f08:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f47f af36 	bne.w	8000d86 <print_+0x12>
 8000f1a:	e000      	b.n	8000f1e <print_+0x1aa>
			if (*format == '\0') break;
 8000f1c:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <print_+0x1b8>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000f2c:	4623      	mov	r3, r4
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f38:	0800ae0c 	.word	0x0800ae0c

08000f3c <printf_>:

int printf_(const char *format, ...)
{
 8000f3c:	b40f      	push	{r0, r1, r2, r3}
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6939      	ldr	r1, [r7, #16]
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ff10 	bl	8000d74 <print_>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f60:	b004      	add	sp, #16
 8000f62:	4770      	bx	lr

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f68:	f000 fba6 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6c:	f000 f810 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f70:	f7ff fd40 	bl	80009f4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000f74:	f7ff fb7c 	bl	8000670 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f78:	f000 fa10 	bl	800139c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f7c:	f000 fac4 	bl	8001508 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f80:	f006 fa6a 	bl	8007458 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f84:	f7ff fc8e 	bl	80008a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f88:	f006 fa8a 	bl	80074a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <main+0x28>

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09c      	sub	sp, #112	@ 0x70
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9a:	224c      	movs	r2, #76	@ 0x4c
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f009 fa1a 	bl	800a3d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f009 fa14 	bl	800a3d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f001 fc2f 	bl	8002814 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b33      	ldr	r3, [pc, #204]	@ (8001088 <SystemClock_Config+0xf8>)
 8000fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fbe:	4a32      	ldr	r2, [pc, #200]	@ (8001088 <SystemClock_Config+0xf8>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fc6:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <SystemClock_Config+0xf8>)
 8000fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800108c <SystemClock_Config+0xfc>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800108c <SystemClock_Config+0xfc>)
 8000fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <SystemClock_Config+0xfc>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fec:	bf00      	nop
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <SystemClock_Config+0xfc>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ffa:	d1f8      	bne.n	8000fee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001000:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001006:	2301      	movs	r3, #1
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100a:	2340      	movs	r3, #64	@ 0x40
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	2302      	movs	r3, #2
 8001014:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800101a:	2318      	movs	r3, #24
 800101c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001022:	2304      	movs	r3, #4
 8001024:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001026:	2302      	movs	r3, #2
 8001028:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800102a:	230c      	movs	r3, #12
 800102c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800102e:	2300      	movs	r3, #0
 8001030:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103a:	4618      	mov	r0, r3
 800103c:	f001 fc34 	bl	80028a8 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001046:	f000 f835 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	233f      	movs	r3, #63	@ 0x3f
 800104c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f002 f874 	bl	800315c <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800107a:	f000 f81b 	bl	80010b4 <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3770      	adds	r7, #112	@ 0x70
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	58000400 	.word	0x58000400
 800108c:	58024800 	.word	0x58024800

08001090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010a2:	f000 fb45 	bl	8001730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40001000 	.word	0x40001000

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <Error_Handler+0x8>

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <HAL_MspInit+0x38>)
 80010c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010cc:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <HAL_MspInit+0x38>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_MspInit+0x38>)
 80010d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	210f      	movs	r1, #15
 80010e8:	f06f 0001 	mvn.w	r0, #1
 80010ec:	f000 fc3c 	bl	8001968 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	58024400 	.word	0x58024400

080010fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b090      	sub	sp, #64	@ 0x40
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	d827      	bhi.n	800115a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800110a:	2200      	movs	r2, #0
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	2036      	movs	r0, #54	@ 0x36
 8001110:	f000 fc2a 	bl	8001968 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001114:	2036      	movs	r0, #54	@ 0x36
 8001116:	f000 fc41 	bl	800199c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800111a:	4a29      	ldr	r2, [pc, #164]	@ (80011c0 <HAL_InitTick+0xc4>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001120:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <HAL_InitTick+0xc8>)
 8001122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001126:	4a27      	ldr	r2, [pc, #156]	@ (80011c4 <HAL_InitTick+0xc8>)
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001130:	4b24      	ldr	r3, [pc, #144]	@ (80011c4 <HAL_InitTick+0xc8>)
 8001132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800113e:	f107 0210 	add.w	r2, r7, #16
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fb93 	bl	8003874 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800114e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001154:	2b00      	cmp	r3, #0
 8001156:	d106      	bne.n	8001166 <HAL_InitTick+0x6a>
 8001158:	e001      	b.n	800115e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e02b      	b.n	80011b6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800115e:	f002 fb5d 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8001162:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001164:	e004      	b.n	8001170 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001166:	f002 fb59 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 800116a:	4603      	mov	r3, r0
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001172:	4a15      	ldr	r2, [pc, #84]	@ (80011c8 <HAL_InitTick+0xcc>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	0c9b      	lsrs	r3, r3, #18
 800117a:	3b01      	subs	r3, #1
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <HAL_InitTick+0xd0>)
 8001180:	4a13      	ldr	r2, [pc, #76]	@ (80011d0 <HAL_InitTick+0xd4>)
 8001182:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_InitTick+0xd0>)
 8001186:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800118a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800118c:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <HAL_InitTick+0xd0>)
 800118e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001190:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_InitTick+0xd0>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_InitTick+0xd0>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800119e:	480b      	ldr	r0, [pc, #44]	@ (80011cc <HAL_InitTick+0xd0>)
 80011a0:	f004 f9d6 	bl	8005550 <HAL_TIM_Base_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d104      	bne.n	80011b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011aa:	4808      	ldr	r0, [pc, #32]	@ (80011cc <HAL_InitTick+0xd0>)
 80011ac:	f004 fa32 	bl	8005614 <HAL_TIM_Base_Start_IT>
 80011b0:	4603      	mov	r3, r0
 80011b2:	e000      	b.n	80011b6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3740      	adds	r7, #64	@ 0x40
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	24000008 	.word	0x24000008
 80011c4:	58024400 	.word	0x58024400
 80011c8:	431bde83 	.word	0x431bde83
 80011cc:	24000240 	.word	0x24000240
 80011d0:	40001000 	.word	0x40001000

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <NMI_Handler+0x4>

080011dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <MemManage_Handler+0x4>

080011ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <TIM6_DAC_IRQHandler+0x10>)
 8001212:	f004 fa77 	bl	8005704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	24000240 	.word	0x24000240

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	@ (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f009 f920 	bl	800a494 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24080000 	.word	0x24080000
 8001280:	00000400 	.word	0x00000400
 8001284:	2400028c 	.word	0x2400028c
 8001288:	24005340 	.word	0x24005340

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001290:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <SystemInit+0xe4>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001296:	4a36      	ldr	r2, [pc, #216]	@ (8001370 <SystemInit+0xe4>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a0:	4b34      	ldr	r3, [pc, #208]	@ (8001374 <SystemInit+0xe8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	2b06      	cmp	r3, #6
 80012aa:	d807      	bhi.n	80012bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ac:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <SystemInit+0xe8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 030f 	bic.w	r3, r3, #15
 80012b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001374 <SystemInit+0xe8>)
 80012b6:	f043 0307 	orr.w	r3, r3, #7
 80012ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001378 <SystemInit+0xec>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001378 <SystemInit+0xec>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <SystemInit+0xec>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <SystemInit+0xec>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4929      	ldr	r1, [pc, #164]	@ (8001378 <SystemInit+0xec>)
 80012d4:	4b29      	ldr	r3, [pc, #164]	@ (800137c <SystemInit+0xf0>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <SystemInit+0xe8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012e6:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <SystemInit+0xe8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 030f 	bic.w	r3, r3, #15
 80012ee:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <SystemInit+0xe8>)
 80012f0:	f043 0307 	orr.w	r3, r3, #7
 80012f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <SystemInit+0xec>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <SystemInit+0xec>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <SystemInit+0xec>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001308:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <SystemInit+0xec>)
 800130a:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <SystemInit+0xf4>)
 800130c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <SystemInit+0xec>)
 8001310:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <SystemInit+0xf8>)
 8001312:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <SystemInit+0xec>)
 8001316:	4a1c      	ldr	r2, [pc, #112]	@ (8001388 <SystemInit+0xfc>)
 8001318:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800131a:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <SystemInit+0xec>)
 800131c:	2200      	movs	r2, #0
 800131e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <SystemInit+0xec>)
 8001322:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <SystemInit+0xfc>)
 8001324:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <SystemInit+0xec>)
 8001328:	2200      	movs	r2, #0
 800132a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <SystemInit+0xec>)
 800132e:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <SystemInit+0xfc>)
 8001330:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <SystemInit+0xec>)
 8001334:	2200      	movs	r2, #0
 8001336:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <SystemInit+0xec>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <SystemInit+0xec>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001342:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <SystemInit+0xec>)
 8001346:	2200      	movs	r2, #0
 8001348:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <SystemInit+0x100>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <SystemInit+0x104>)
 8001350:	4013      	ands	r3, r2
 8001352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001356:	d202      	bcs.n	800135e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <SystemInit+0x108>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <SystemInit+0x10c>)
 8001360:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001364:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	52002000 	.word	0x52002000
 8001378:	58024400 	.word	0x58024400
 800137c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001380:	02020200 	.word	0x02020200
 8001384:	01ff0000 	.word	0x01ff0000
 8001388:	01010280 	.word	0x01010280
 800138c:	5c001000 	.word	0x5c001000
 8001390:	ffff0000 	.word	0xffff0000
 8001394:	51008108 	.word	0x51008108
 8001398:	52004000 	.word	0x52004000

0800139c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013a0:	4b22      	ldr	r3, [pc, #136]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013a2:	4a23      	ldr	r2, [pc, #140]	@ (8001430 <MX_USART3_UART_Init+0x94>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013de:	4b13      	ldr	r3, [pc, #76]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013e4:	4811      	ldr	r0, [pc, #68]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013e6:	f004 fb81 	bl	8005aec <HAL_UART_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013f0:	f7ff fe60 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_USART3_UART_Init+0x90>)
 80013f8:	f005 fc17 	bl	8006c2a <HAL_UARTEx_SetTxFifoThreshold>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001402:	f7ff fe57 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4808      	ldr	r0, [pc, #32]	@ (800142c <MX_USART3_UART_Init+0x90>)
 800140a:	f005 fc4c 	bl	8006ca6 <HAL_UARTEx_SetRxFifoThreshold>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001414:	f7ff fe4e 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	@ (800142c <MX_USART3_UART_Init+0x90>)
 800141a:	f005 fbcd 	bl	8006bb8 <HAL_UARTEx_DisableFifoMode>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001424:	f7ff fe46 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	24000290 	.word	0x24000290
 8001430:	40004800 	.word	0x40004800

08001434 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0ba      	sub	sp, #232	@ 0xe8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	22c0      	movs	r2, #192	@ 0xc0
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f008 ffbf 	bl	800a3d8 <memset>
  if(uartHandle->Instance==USART3)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a27      	ldr	r2, [pc, #156]	@ (80014fc <HAL_UART_MspInit+0xc8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d146      	bne.n	80014f2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001464:	f04f 0202 	mov.w	r2, #2
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fa3c 	bl	80038f8 <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001486:	f7ff fe15 	bl	80010b4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <HAL_UART_MspInit+0xcc>)
 800148c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001490:	4a1b      	ldr	r2, [pc, #108]	@ (8001500 <HAL_UART_MspInit+0xcc>)
 8001492:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001496:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800149a:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <HAL_UART_MspInit+0xcc>)
 800149c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <HAL_UART_MspInit+0xcc>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	4a14      	ldr	r2, [pc, #80]	@ (8001500 <HAL_UART_MspInit+0xcc>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <HAL_UART_MspInit+0xcc>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e0:	2307      	movs	r3, #7
 80014e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	@ (8001504 <HAL_UART_MspInit+0xd0>)
 80014ee:	f000 fe97 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014f2:	bf00      	nop
 80014f4:	37e8      	adds	r7, #232	@ 0xe8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40004800 	.word	0x40004800
 8001500:	58024400 	.word	0x58024400
 8001504:	58020c00 	.word	0x58020c00

08001508 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800150e:	4a16      	ldr	r2, [pc, #88]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001510:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001514:	2209      	movs	r2, #9
 8001516:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800151a:	2202      	movs	r2, #2
 800151c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001520:	2200      	movs	r2, #0
 8001522:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001526:	2202      	movs	r2, #2
 8001528:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800152c:	2201      	movs	r2, #1
 800152e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001532:	2200      	movs	r2, #0
 8001534:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001538:	2200      	movs	r2, #0
 800153a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800153e:	2201      	movs	r2, #1
 8001540:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001544:	2201      	movs	r2, #1
 8001546:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800154a:	2200      	movs	r2, #0
 800154c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001550:	f001 f82f 	bl	80025b2 <HAL_PCD_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800155a:	f7ff fdab 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	24000324 	.word	0x24000324
 8001568:	40080000 	.word	0x40080000

0800156c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ba      	sub	sp, #232	@ 0xe8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	22c0      	movs	r2, #192	@ 0xc0
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f008 ff23 	bl	800a3d8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a30      	ldr	r2, [pc, #192]	@ (8001658 <HAL_PCD_MspInit+0xec>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d159      	bne.n	8001650 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800159c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80015a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 f99f 	bl	80038f8 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80015c0:	f7ff fd78 	bl	80010b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80015c4:	f001 f960 	bl	8002888 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b24      	ldr	r3, [pc, #144]	@ (800165c <HAL_PCD_MspInit+0xf0>)
 80015ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ce:	4a23      	ldr	r2, [pc, #140]	@ (800165c <HAL_PCD_MspInit+0xf0>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015d8:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_PCD_MspInit+0xf0>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015e6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80015ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001600:	230a      	movs	r3, #10
 8001602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800160a:	4619      	mov	r1, r3
 800160c:	4814      	ldr	r0, [pc, #80]	@ (8001660 <HAL_PCD_MspInit+0xf4>)
 800160e:	f000 fe07 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001612:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	@ (8001660 <HAL_PCD_MspInit+0xf4>)
 800162e:	f000 fdf7 	bl	8002220 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_PCD_MspInit+0xf0>)
 8001634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001638:	4a08      	ldr	r2, [pc, #32]	@ (800165c <HAL_PCD_MspInit+0xf0>)
 800163a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800163e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_PCD_MspInit+0xf0>)
 8001644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001650:	bf00      	nop
 8001652:	37e8      	adds	r7, #232	@ 0xe8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40080000 	.word	0x40080000
 800165c:	58024400 	.word	0x58024400
 8001660:	58020000 	.word	0x58020000

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800169c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001668:	f7ff fe10 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	@ (80016a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	@ (80016b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f008 ff05 	bl	800a4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff fc65 	bl	8000f64 <main>
  bx  lr
 800169a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016a4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80016a8:	0800af2c 	.word	0x0800af2c
  ldr r2, =_sbss
 80016ac:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80016b0:	2400533c 	.word	0x2400533c

080016b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC3_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016be:	2003      	movs	r0, #3
 80016c0:	f000 f947 	bl	8001952 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016c4:	f001 ff00 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_Init+0x68>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	4913      	ldr	r1, [pc, #76]	@ (8001724 <HAL_Init+0x6c>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <HAL_Init+0x68>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <HAL_Init+0x6c>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_Init+0x70>)
 80016fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016fc:	4a0b      	ldr	r2, [pc, #44]	@ (800172c <HAL_Init+0x74>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001702:	200f      	movs	r0, #15
 8001704:	f7ff fcfa 	bl	80010fc <HAL_InitTick>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e002      	b.n	8001718 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001712:	f7ff fcd5 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	58024400 	.word	0x58024400
 8001724:	0800aeb0 	.word	0x0800aeb0
 8001728:	24000004 	.word	0x24000004
 800172c:	24000000 	.word	0x24000000

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2400000c 	.word	0x2400000c
 8001754:	24000808 	.word	0x24000808

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	24000808 	.word	0x24000808

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2400000c 	.word	0x2400000c

080017b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <HAL_GetREVID+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0c1b      	lsrs	r3, r3, #16
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	5c001000 	.word	0x5c001000

080017d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80017e0:	4904      	ldr	r1, [pc, #16]	@ (80017f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	58000400 	.word	0x58000400

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <__NVIC_SetPriorityGrouping+0x40>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	4313      	orrs	r3, r2
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <__NVIC_SetPriorityGrouping+0x40>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00
 800183c:	05fa0000 	.word	0x05fa0000

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	@ (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	@ (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	@ 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff4c 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001976:	f7ff ff63 	bl	8001840 <__NVIC_GetPriorityGrouping>
 800197a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	6978      	ldr	r0, [r7, #20]
 8001982:	f7ff ffb3 	bl	80018ec <NVIC_EncodePriority>
 8001986:	4602      	mov	r2, r0
 8001988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff82 	bl	8001898 <__NVIC_SetPriority>
}
 8001994:	bf00      	nop
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff56 	bl	800185c <__NVIC_EnableIRQ>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0e3      	b.n	8001b92 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d106      	bne.n	80019e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2223      	movs	r2, #35	@ 0x23
 80019d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7fe fe93 	bl	8000708 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	4b6e      	ldr	r3, [pc, #440]	@ (8001b9c <HAL_ETH_Init+0x1e4>)
 80019e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019e8:	4a6c      	ldr	r2, [pc, #432]	@ (8001b9c <HAL_ETH_Init+0x1e4>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80019f2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b9c <HAL_ETH_Init+0x1e4>)
 80019f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7a1b      	ldrb	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fee1 	bl	80017d0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a0e:	e003      	b.n	8001a18 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a10:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001a14:	f7ff fedc 	bl	80017d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a18:	4b61      	ldr	r3, [pc, #388]	@ (8001ba0 <HAL_ETH_Init+0x1e8>)
 8001a1a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a34:	f7ff fe90 	bl	8001758 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a3a:	e011      	b.n	8001a60 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a3c:	f7ff fe8c 	bl	8001758 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a4a:	d909      	bls.n	8001a60 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	22e0      	movs	r2, #224	@ 0xe0
 8001a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e098      	b.n	8001b92 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e4      	bne.n	8001a3c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f89e 	bl	8001bb4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a78:	f001 fea0 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a49      	ldr	r2, [pc, #292]	@ (8001ba4 <HAL_ETH_Init+0x1ec>)
 8001a80:	fba2 2303 	umull	r2, r3, r2, r3
 8001a84:	0c9a      	lsrs	r2, r3, #18
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3a01      	subs	r2, #1
 8001a8c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fa81 	bl	8001f98 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001aa2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001aae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ab2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	22e0      	movs	r2, #224	@ 0xe0
 8001ace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e05d      	b.n	8001b92 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ade:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001ae2:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <HAL_ETH_Init+0x1f0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6952      	ldr	r2, [r2, #20]
 8001aea:	0051      	lsls	r1, r2, #1
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001af6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fae9 	bl	80020d2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fb2f 	bl	8002164 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	3305      	adds	r3, #5
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	021a      	lsls	r2, r3, #8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	3304      	adds	r3, #4
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	3303      	adds	r3, #3
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	061a      	lsls	r2, r3, #24
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	3302      	adds	r3, #2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b44:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b52:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b54:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_ETH_Init+0x1f4>)
 8001b66:	430b      	orrs	r3, r1
 8001b68:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <HAL_ETH_Init+0x1f8>)
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	58024400 	.word	0x58024400
 8001ba0:	58000400 	.word	0x58000400
 8001ba4:	431bde83 	.word	0x431bde83
 8001ba8:	ffff8001 	.word	0xffff8001
 8001bac:	0c020060 	.word	0x0c020060
 8001bb0:	0c20c000 	.word	0x0c20c000

08001bb4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001bce:	f001 fdf5 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8001bd2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c40 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d804      	bhi.n	8001be6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e022      	b.n	8001c2c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	4a16      	ldr	r2, [pc, #88]	@ (8001c44 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d204      	bcs.n	8001bf8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e019      	b.n	8001c2c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4a13      	ldr	r2, [pc, #76]	@ (8001c48 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d915      	bls.n	8001c2c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d804      	bhi.n	8001c12 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e00c      	b.n	8001c2c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d804      	bhi.n	8001c24 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e003      	b.n	8001c2c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	02160ebf 	.word	0x02160ebf
 8001c44:	03938700 	.word	0x03938700
 8001c48:	05f5e0ff 	.word	0x05f5e0ff
 8001c4c:	08f0d17f 	.word	0x08f0d17f
 8001c50:	0ee6b27f 	.word	0x0ee6b27f

08001c54 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	791b      	ldrb	r3, [r3, #4]
 8001c6c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001c6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	7b1b      	ldrb	r3, [r3, #12]
 8001c74:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	7b5b      	ldrb	r3, [r3, #13]
 8001c7c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	7b9b      	ldrb	r3, [r3, #14]
 8001c84:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	7bdb      	ldrb	r3, [r3, #15]
 8001c8c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	7c12      	ldrb	r2, [r2, #16]
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	d102      	bne.n	8001c9e <ETH_SetMACConfig+0x4a>
 8001c98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c9c:	e000      	b.n	8001ca0 <ETH_SetMACConfig+0x4c>
 8001c9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ca0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	7c52      	ldrb	r2, [r2, #17]
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	d102      	bne.n	8001cb0 <ETH_SetMACConfig+0x5c>
 8001caa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cae:	e000      	b.n	8001cb2 <ETH_SetMACConfig+0x5e>
 8001cb0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	7c9b      	ldrb	r3, [r3, #18]
 8001cb8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cba:	431a      	orrs	r2, r3
               macconf->Speed |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001cc0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001cc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	7f1b      	ldrb	r3, [r3, #28]
 8001ccc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001cce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	7f5b      	ldrb	r3, [r3, #29]
 8001cd4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001cd6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	7f92      	ldrb	r2, [r2, #30]
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d102      	bne.n	8001ce6 <ETH_SetMACConfig+0x92>
 8001ce0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ce4:	e000      	b.n	8001ce8 <ETH_SetMACConfig+0x94>
 8001ce6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001ce8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7fdb      	ldrb	r3, [r3, #31]
 8001cee:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001cf0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cf8:	2a00      	cmp	r2, #0
 8001cfa:	d102      	bne.n	8001d02 <ETH_SetMACConfig+0xae>
 8001cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d00:	e000      	b.n	8001d04 <ETH_SetMACConfig+0xb0>
 8001d02:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d04:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d12:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001d14:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b56      	ldr	r3, [pc, #344]	@ (8001e80 <ETH_SetMACConfig+0x22c>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	68f9      	ldr	r1, [r7, #12]
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d36:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d3e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d48:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001d52:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001d5c:	2a00      	cmp	r2, #0
 8001d5e:	d102      	bne.n	8001d66 <ETH_SetMACConfig+0x112>
 8001d60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d64:	e000      	b.n	8001d68 <ETH_SetMACConfig+0x114>
 8001d66:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d68:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	4b42      	ldr	r3, [pc, #264]	@ (8001e84 <ETH_SetMACConfig+0x230>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	68f9      	ldr	r1, [r7, #12]
 8001d82:	430b      	orrs	r3, r1
 8001d84:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d8c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e88 <ETH_SetMACConfig+0x234>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	68f9      	ldr	r1, [r7, #12]
 8001da6:	430b      	orrs	r3, r1
 8001da8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001db0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001db6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d101      	bne.n	8001dc6 <ETH_SetMACConfig+0x172>
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	e000      	b.n	8001dc8 <ETH_SetMACConfig+0x174>
 8001dc6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001dc8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001dda:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001dde:	4013      	ands	r3, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	430b      	orrs	r3, r1
 8001de8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001df0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001df8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e06:	f023 0103 	bic.w	r1, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001e1e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001e3a:	2a00      	cmp	r2, #0
 8001e3c:	d101      	bne.n	8001e42 <ETH_SetMACConfig+0x1ee>
 8001e3e:	2240      	movs	r2, #64	@ 0x40
 8001e40:	e000      	b.n	8001e44 <ETH_SetMACConfig+0x1f0>
 8001e42:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001e4c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001e56:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001e64:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	00048083 	.word	0x00048083
 8001e84:	c0f88000 	.word	0xc0f88000
 8001e88:	fffffef0 	.word	0xfffffef0

08001e8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <ETH_SetDMAConfig+0xf8>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	6811      	ldr	r1, [r2, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eb2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	791b      	ldrb	r3, [r3, #4]
 8001eb8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ebe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	7b1b      	ldrb	r3, [r3, #12]
 8001ec4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f88 <ETH_SetDMAConfig+0xfc>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	68f9      	ldr	r1, [r7, #12]
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ee4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	7b5b      	ldrb	r3, [r3, #13]
 8001eea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001efc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001f00:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <ETH_SetDMAConfig+0x100>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	68f9      	ldr	r1, [r7, #12]
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f10:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	7d1b      	ldrb	r3, [r3, #20]
 8001f1c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f1e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	7f5b      	ldrb	r3, [r3, #29]
 8001f24:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f32:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001f36:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <ETH_SetDMAConfig+0x104>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f46:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	7f1b      	ldrb	r3, [r3, #28]
 8001f4e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f60:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <ETH_SetDMAConfig+0x108>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f74:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	ffff87fd 	.word	0xffff87fd
 8001f88:	ffff2ffe 	.word	0xffff2ffe
 8001f8c:	fffec000 	.word	0xfffec000
 8001f90:	ffc0efef 	.word	0xffc0efef
 8001f94:	7fc0ffff 	.word	0x7fc0ffff

08001f98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b0a4      	sub	sp, #144	@ 0x90
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001ff0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001ff4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002000:	2301      	movs	r3, #1
 8002002:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002012:	2300      	movs	r3, #0
 8002014:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002016:	2300      	movs	r3, #0
 8002018:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800201a:	2300      	movs	r3, #0
 800201c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800202a:	2301      	movs	r3, #1
 800202c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002030:	2320      	movs	r3, #32
 8002032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002036:	2301      	movs	r3, #1
 8002038:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002042:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002048:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800204c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002072:	2300      	movs	r3, #0
 8002074:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800207c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fde6 	bl	8001c54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002088:	2301      	movs	r3, #1
 800208a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800208c:	2301      	movs	r3, #1
 800208e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020a2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80020a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80020b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80020b8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020be:	f107 0308 	add.w	r3, r7, #8
 80020c2:	4619      	mov	r1, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fee1 	bl	8001e8c <ETH_SetDMAConfig>
}
 80020ca:	bf00      	nop
 80020cc:	3790      	adds	r7, #144	@ 0x90
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	e01d      	b.n	800211c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68d9      	ldr	r1, [r3, #12]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	3206      	adds	r2, #6
 8002112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3301      	adds	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d9de      	bls.n	80020e0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002130:	461a      	mov	r2, r3
 8002132:	2303      	movs	r3, #3
 8002134:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002144:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002154:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e023      	b.n	80021ba <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6919      	ldr	r1, [r3, #16]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2200      	movs	r2, #0
 800218e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	3212      	adds	r2, #18
 80021b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d9d8      	bls.n	8002172 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e6:	461a      	mov	r2, r3
 80021e8:	2303      	movs	r3, #3
 80021ea:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021fa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800220e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	@ 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800222e:	4b89      	ldr	r3, [pc, #548]	@ (8002454 <HAL_GPIO_Init+0x234>)
 8002230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002232:	e194      	b.n	800255e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa01 f303 	lsl.w	r3, r1, r3
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8186 	beq.w	8002558 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d005      	beq.n	8002264 <HAL_GPIO_Init+0x44>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d130      	bne.n	80022c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800229a:	2201      	movs	r2, #1
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	f003 0201 	and.w	r2, r3, #1
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d017      	beq.n	8002302 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d123      	bne.n	8002356 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	08da      	lsrs	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3208      	adds	r2, #8
 8002350:	69b9      	ldr	r1, [r7, #24]
 8002352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0203 	and.w	r2, r3, #3
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80e0 	beq.w	8002558 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002398:	4b2f      	ldr	r3, [pc, #188]	@ (8002458 <HAL_GPIO_Init+0x238>)
 800239a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800239e:	4a2e      	ldr	r2, [pc, #184]	@ (8002458 <HAL_GPIO_Init+0x238>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002458 <HAL_GPIO_Init+0x238>)
 80023aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b6:	4a29      	ldr	r2, [pc, #164]	@ (800245c <HAL_GPIO_Init+0x23c>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a20      	ldr	r2, [pc, #128]	@ (8002460 <HAL_GPIO_Init+0x240>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d052      	beq.n	8002488 <HAL_GPIO_Init+0x268>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002464 <HAL_GPIO_Init+0x244>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d031      	beq.n	800244e <HAL_GPIO_Init+0x22e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002468 <HAL_GPIO_Init+0x248>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d02b      	beq.n	800244a <HAL_GPIO_Init+0x22a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	@ (800246c <HAL_GPIO_Init+0x24c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d025      	beq.n	8002446 <HAL_GPIO_Init+0x226>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <HAL_GPIO_Init+0x250>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01f      	beq.n	8002442 <HAL_GPIO_Init+0x222>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1b      	ldr	r2, [pc, #108]	@ (8002474 <HAL_GPIO_Init+0x254>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d019      	beq.n	800243e <HAL_GPIO_Init+0x21e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1a      	ldr	r2, [pc, #104]	@ (8002478 <HAL_GPIO_Init+0x258>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0x21a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a19      	ldr	r2, [pc, #100]	@ (800247c <HAL_GPIO_Init+0x25c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00d      	beq.n	8002436 <HAL_GPIO_Init+0x216>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a18      	ldr	r2, [pc, #96]	@ (8002480 <HAL_GPIO_Init+0x260>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x212>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a17      	ldr	r2, [pc, #92]	@ (8002484 <HAL_GPIO_Init+0x264>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_GPIO_Init+0x20e>
 800242a:	2309      	movs	r3, #9
 800242c:	e02d      	b.n	800248a <HAL_GPIO_Init+0x26a>
 800242e:	230a      	movs	r3, #10
 8002430:	e02b      	b.n	800248a <HAL_GPIO_Init+0x26a>
 8002432:	2308      	movs	r3, #8
 8002434:	e029      	b.n	800248a <HAL_GPIO_Init+0x26a>
 8002436:	2307      	movs	r3, #7
 8002438:	e027      	b.n	800248a <HAL_GPIO_Init+0x26a>
 800243a:	2306      	movs	r3, #6
 800243c:	e025      	b.n	800248a <HAL_GPIO_Init+0x26a>
 800243e:	2305      	movs	r3, #5
 8002440:	e023      	b.n	800248a <HAL_GPIO_Init+0x26a>
 8002442:	2304      	movs	r3, #4
 8002444:	e021      	b.n	800248a <HAL_GPIO_Init+0x26a>
 8002446:	2303      	movs	r3, #3
 8002448:	e01f      	b.n	800248a <HAL_GPIO_Init+0x26a>
 800244a:	2302      	movs	r3, #2
 800244c:	e01d      	b.n	800248a <HAL_GPIO_Init+0x26a>
 800244e:	2301      	movs	r3, #1
 8002450:	e01b      	b.n	800248a <HAL_GPIO_Init+0x26a>
 8002452:	bf00      	nop
 8002454:	58000080 	.word	0x58000080
 8002458:	58024400 	.word	0x58024400
 800245c:	58000400 	.word	0x58000400
 8002460:	58020000 	.word	0x58020000
 8002464:	58020400 	.word	0x58020400
 8002468:	58020800 	.word	0x58020800
 800246c:	58020c00 	.word	0x58020c00
 8002470:	58021000 	.word	0x58021000
 8002474:	58021400 	.word	0x58021400
 8002478:	58021800 	.word	0x58021800
 800247c:	58021c00 	.word	0x58021c00
 8002480:	58022000 	.word	0x58022000
 8002484:	58022400 	.word	0x58022400
 8002488:	2300      	movs	r3, #0
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	f002 0203 	and.w	r2, r2, #3
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	4093      	lsls	r3, r2
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800249a:	4938      	ldr	r1, [pc, #224]	@ (800257c <HAL_GPIO_Init+0x35c>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	3301      	adds	r3, #1
 800255c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f ae63 	bne.w	8002234 <HAL_GPIO_Init+0x14>
  }
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	3724      	adds	r7, #36	@ 0x24
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	58000400 	.word	0x58000400

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800259c:	e003      	b.n	80025a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	041a      	lsls	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	619a      	str	r2, [r3, #24]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af02      	add	r7, sp, #8
 80025b8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0fe      	b.n	80027c2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fe ffc7 	bl	800156c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2203      	movs	r2, #3
 80025e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 fc5a 	bl	8006ea4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7c1a      	ldrb	r2, [r3, #16]
 80025f8:	f88d 2000 	strb.w	r2, [sp]
 80025fc:	3304      	adds	r3, #4
 80025fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002600:	f004 fbde 	bl	8006dc0 <USB_CoreInit>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0d5      	b.n	80027c2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f004 fc52 	bl	8006ec6 <USB_SetCurrentMode>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0c6      	b.n	80027c2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e04a      	b.n	80026d0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	3315      	adds	r3, #21
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	3314      	adds	r3, #20
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	b298      	uxth	r0, r3
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	332e      	adds	r3, #46	@ 0x2e
 8002676:	4602      	mov	r2, r0
 8002678:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	3318      	adds	r3, #24
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	331c      	adds	r3, #28
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	3320      	adds	r3, #32
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	3324      	adds	r3, #36	@ 0x24
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	3301      	adds	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	791b      	ldrb	r3, [r3, #4]
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3af      	bcc.n	800263a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e044      	b.n	800276a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	3301      	adds	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	791b      	ldrb	r3, [r3, #4]
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	429a      	cmp	r2, r3
 8002772:	d3b5      	bcc.n	80026e0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7c1a      	ldrb	r2, [r3, #16]
 800277c:	f88d 2000 	strb.w	r2, [sp]
 8002780:	3304      	adds	r3, #4
 8002782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002784:	f004 fbec 	bl	8006f60 <USB_DevInit>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e013      	b.n	80027c2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7b1b      	ldrb	r3, [r3, #12]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d102      	bne.n	80027b6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f80b 	bl	80027cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 fda7 	bl	800730e <USB_DevDisconnect>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027fa:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_PCDEx_ActivateLPM+0x44>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	10000003 	.word	0x10000003

08002814 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800281c:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <HAL_PWREx_ConfigSupply+0x70>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b04      	cmp	r3, #4
 8002826:	d00a      	beq.n	800283e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002828:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <HAL_PWREx_ConfigSupply+0x70>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	d001      	beq.n	800283a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e01f      	b.n	800287a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e01d      	b.n	800287a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800283e:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <HAL_PWREx_ConfigSupply+0x70>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	490f      	ldr	r1, [pc, #60]	@ (8002884 <HAL_PWREx_ConfigSupply+0x70>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4313      	orrs	r3, r2
 800284c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800284e:	f7fe ff83 	bl	8001758 <HAL_GetTick>
 8002852:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002854:	e009      	b.n	800286a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002856:	f7fe ff7f 	bl	8001758 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002864:	d901      	bls.n	800286a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e007      	b.n	800287a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_PWREx_ConfigSupply+0x70>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002876:	d1ee      	bne.n	8002856 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	58024800 	.word	0x58024800

08002888 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a04      	ldr	r2, [pc, #16]	@ (80028a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	58024800 	.word	0x58024800

080028a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08c      	sub	sp, #48	@ 0x30
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f000 bc48 	b.w	800314c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8088 	beq.w	80029da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ca:	4b99      	ldr	r3, [pc, #612]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028d4:	4b96      	ldr	r3, [pc, #600]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 80028d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d007      	beq.n	80028f0 <HAL_RCC_OscConfig+0x48>
 80028e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e2:	2b18      	cmp	r3, #24
 80028e4:	d111      	bne.n	800290a <HAL_RCC_OscConfig+0x62>
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d10c      	bne.n	800290a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d06d      	beq.n	80029d8 <HAL_RCC_OscConfig+0x130>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d169      	bne.n	80029d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f000 bc21 	b.w	800314c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x7a>
 8002914:	4b86      	ldr	r3, [pc, #536]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a85      	ldr	r2, [pc, #532]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e02e      	b.n	8002980 <HAL_RCC_OscConfig+0xd8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0x9c>
 800292a:	4b81      	ldr	r3, [pc, #516]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a80      	ldr	r2, [pc, #512]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b7e      	ldr	r3, [pc, #504]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 800293c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e01d      	b.n	8002980 <HAL_RCC_OscConfig+0xd8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0xc0>
 800294e:	4b78      	ldr	r3, [pc, #480]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a77      	ldr	r2, [pc, #476]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	4b75      	ldr	r3, [pc, #468]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a74      	ldr	r2, [pc, #464]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0xd8>
 8002968:	4b71      	ldr	r3, [pc, #452]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a70      	ldr	r2, [pc, #448]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 800296e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b6e      	ldr	r3, [pc, #440]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a6d      	ldr	r2, [pc, #436]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 800297a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800297e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fee6 	bl	8001758 <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe fee2 	bl	8001758 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	@ 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e3d4      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029a2:	4b63      	ldr	r3, [pc, #396]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0xe8>
 80029ae:	e014      	b.n	80029da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fed2 	bl	8001758 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b8:	f7fe fece 	bl	8001758 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	@ 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e3c0      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029ca:	4b59      	ldr	r3, [pc, #356]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x110>
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80ca 	beq.w	8002b7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e8:	4b51      	ldr	r3, [pc, #324]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <HAL_RCC_OscConfig+0x166>
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	2b18      	cmp	r3, #24
 8002a02:	d156      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x20a>
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d151      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0e:	4b48      	ldr	r3, [pc, #288]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x17e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e392      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a26:	4b42      	ldr	r3, [pc, #264]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 0219 	bic.w	r2, r3, #25
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	493f      	ldr	r1, [pc, #252]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fe8e 	bl	8001758 <HAL_GetTick>
 8002a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a40:	f7fe fe8a 	bl	8001758 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e37c      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a52:	4b37      	ldr	r3, [pc, #220]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5e:	f7fe feab 	bl	80017b8 <HAL_GetREVID>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d817      	bhi.n	8002a9c <HAL_RCC_OscConfig+0x1f4>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b40      	cmp	r3, #64	@ 0x40
 8002a72:	d108      	bne.n	8002a86 <HAL_RCC_OscConfig+0x1de>
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a84:	e07a      	b.n	8002b7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	031b      	lsls	r3, r3, #12
 8002a94:	4926      	ldr	r1, [pc, #152]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9a:	e06f      	b.n	8002b7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b24      	ldr	r3, [pc, #144]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	4921      	ldr	r1, [pc, #132]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab0:	e064      	b.n	8002b7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d047      	beq.n	8002b4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002aba:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0219 	bic.w	r2, r3, #25
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	491a      	ldr	r1, [pc, #104]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe fe44 	bl	8001758 <HAL_GetTick>
 8002ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fe40 	bl	8001758 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e332      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae6:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	f7fe fe61 	bl	80017b8 <HAL_GetREVID>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d819      	bhi.n	8002b34 <HAL_RCC_OscConfig+0x28c>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b40      	cmp	r3, #64	@ 0x40
 8002b06:	d108      	bne.n	8002b1a <HAL_RCC_OscConfig+0x272>
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b10:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b16:	6053      	str	r3, [r2, #4]
 8002b18:	e030      	b.n	8002b7c <HAL_RCC_OscConfig+0x2d4>
 8002b1a:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	031b      	lsls	r3, r3, #12
 8002b28:	4901      	ldr	r1, [pc, #4]	@ (8002b30 <HAL_RCC_OscConfig+0x288>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
 8002b2e:	e025      	b.n	8002b7c <HAL_RCC_OscConfig+0x2d4>
 8002b30:	58024400 	.word	0x58024400
 8002b34:	4b9a      	ldr	r3, [pc, #616]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	4997      	ldr	r1, [pc, #604]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
 8002b48:	e018      	b.n	8002b7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4a:	4b95      	ldr	r3, [pc, #596]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a94      	ldr	r2, [pc, #592]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe fdff 	bl	8001758 <HAL_GetTick>
 8002b5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7fe fdfb 	bl	8001758 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e2ed      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b70:	4b8b      	ldr	r3, [pc, #556]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f0      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80a9 	beq.w	8002cdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8a:	4b85      	ldr	r3, [pc, #532]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b94:	4b82      	ldr	r3, [pc, #520]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d007      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x308>
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b18      	cmp	r3, #24
 8002ba4:	d13a      	bne.n	8002c1c <HAL_RCC_OscConfig+0x374>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d135      	bne.n	8002c1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x320>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	2b80      	cmp	r3, #128	@ 0x80
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e2c1      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bc8:	f7fe fdf6 	bl	80017b8 <HAL_GetREVID>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d817      	bhi.n	8002c06 <HAL_RCC_OscConfig+0x35e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x348>
 8002bde:	4b70      	ldr	r3, [pc, #448]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002be6:	4a6e      	ldr	r2, [pc, #440]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002be8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002bec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bee:	e075      	b.n	8002cdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	069b      	lsls	r3, r3, #26
 8002bfe:	4968      	ldr	r1, [pc, #416]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c04:	e06a      	b.n	8002cdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c06:	4b66      	ldr	r3, [pc, #408]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	061b      	lsls	r3, r3, #24
 8002c14:	4962      	ldr	r1, [pc, #392]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c1a:	e05f      	b.n	8002cdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d042      	beq.n	8002caa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c24:	4b5e      	ldr	r3, [pc, #376]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a5d      	ldr	r2, [pc, #372]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fd92 	bl	8001758 <HAL_GetTick>
 8002c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c38:	f7fe fd8e 	bl	8001758 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e280      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c4a:	4b55      	ldr	r3, [pc, #340]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c56:	f7fe fdaf 	bl	80017b8 <HAL_GetREVID>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d817      	bhi.n	8002c94 <HAL_RCC_OscConfig+0x3ec>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d108      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3d6>
 8002c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002c74:	4a4a      	ldr	r2, [pc, #296]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c7a:	6053      	str	r3, [r2, #4]
 8002c7c:	e02e      	b.n	8002cdc <HAL_RCC_OscConfig+0x434>
 8002c7e:	4b48      	ldr	r3, [pc, #288]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	069b      	lsls	r3, r3, #26
 8002c8c:	4944      	ldr	r1, [pc, #272]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
 8002c92:	e023      	b.n	8002cdc <HAL_RCC_OscConfig+0x434>
 8002c94:	4b42      	ldr	r3, [pc, #264]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	493f      	ldr	r1, [pc, #252]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
 8002ca8:	e018      	b.n	8002cdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002caa:	4b3d      	ldr	r3, [pc, #244]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a3c      	ldr	r2, [pc, #240]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002cb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fd4f 	bl	8001758 <HAL_GetTick>
 8002cba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fd4b 	bl	8001758 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e23d      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cd0:	4b33      	ldr	r3, [pc, #204]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f0      	bne.n	8002cbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d036      	beq.n	8002d56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d019      	beq.n	8002d24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe fd2c 	bl	8001758 <HAL_GetTick>
 8002d00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d04:	f7fe fd28 	bl	8001758 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e21a      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d16:	4b22      	ldr	r3, [pc, #136]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x45c>
 8002d22:	e018      	b.n	8002d56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d24:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d28:	4a1d      	ldr	r2, [pc, #116]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe fd12 	bl	8001758 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d38:	f7fe fd0e 	bl	8001758 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e200      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d039      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002d70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d76:	f7fe fcef 	bl	8001758 <HAL_GetTick>
 8002d7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d7e:	f7fe fceb 	bl	8001758 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1dd      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d90:	4b03      	ldr	r3, [pc, #12]	@ (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4d6>
 8002d9c:	e01b      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
 8002d9e:	bf00      	nop
 8002da0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002da4:	4b9b      	ldr	r3, [pc, #620]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a9a      	ldr	r2, [pc, #616]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002db0:	f7fe fcd2 	bl	8001758 <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002db8:	f7fe fcce 	bl	8001758 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1c0      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dca:	4b92      	ldr	r3, [pc, #584]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8081 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002de4:	4b8c      	ldr	r3, [pc, #560]	@ (8003018 <HAL_RCC_OscConfig+0x770>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a8b      	ldr	r2, [pc, #556]	@ (8003018 <HAL_RCC_OscConfig+0x770>)
 8002dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002df0:	f7fe fcb2 	bl	8001758 <HAL_GetTick>
 8002df4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df8:	f7fe fcae 	bl	8001758 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	@ 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1a0      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e0a:	4b83      	ldr	r3, [pc, #524]	@ (8003018 <HAL_RCC_OscConfig+0x770>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x584>
 8002e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	4a7c      	ldr	r2, [pc, #496]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e2a:	e02d      	b.n	8002e88 <HAL_RCC_OscConfig+0x5e0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x5a6>
 8002e34:	4b77      	ldr	r3, [pc, #476]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e38:	4a76      	ldr	r2, [pc, #472]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e40:	4b74      	ldr	r3, [pc, #464]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e44:	4a73      	ldr	r2, [pc, #460]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e46:	f023 0304 	bic.w	r3, r3, #4
 8002e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCC_OscConfig+0x5e0>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x5c8>
 8002e56:	4b6f      	ldr	r3, [pc, #444]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e62:	4b6c      	ldr	r3, [pc, #432]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e66:	4a6b      	ldr	r2, [pc, #428]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0x5e0>
 8002e70:	4b68      	ldr	r3, [pc, #416]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e74:	4a67      	ldr	r2, [pc, #412]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7c:	4b65      	ldr	r3, [pc, #404]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e80:	4a64      	ldr	r2, [pc, #400]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe fc62 	bl	8001758 <HAL_GetTick>
 8002e94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fe fc5e 	bl	8001758 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e14e      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eae:	4b59      	ldr	r3, [pc, #356]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RCC_OscConfig+0x5f0>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7fe fc4c 	bl	8001758 <HAL_GetTick>
 8002ec0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7fe fc48 	bl	8001758 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e138      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eda:	4b4e      	ldr	r3, [pc, #312]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 812d 	beq.w	800314a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ef0:	4b48      	ldr	r3, [pc, #288]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ef8:	2b18      	cmp	r3, #24
 8002efa:	f000 80bd 	beq.w	8003078 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	f040 809e 	bne.w	8003044 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f08:	4b42      	ldr	r3, [pc, #264]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a41      	ldr	r2, [pc, #260]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fc20 	bl	8001758 <HAL_GetTick>
 8002f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fc1c 	bl	8001758 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e10e      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f2e:	4b39      	ldr	r3, [pc, #228]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f3a:	4b36      	ldr	r3, [pc, #216]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f3e:	4b37      	ldr	r3, [pc, #220]	@ (800301c <HAL_RCC_OscConfig+0x774>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	4931      	ldr	r1, [pc, #196]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f62:	3b01      	subs	r3, #1
 8002f64:	025b      	lsls	r3, r3, #9
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	041b      	lsls	r3, r3, #16
 8002f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	061b      	lsls	r3, r3, #24
 8002f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002f84:	4923      	ldr	r1, [pc, #140]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002f8a:	4b22      	ldr	r3, [pc, #136]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8e:	4a21      	ldr	r2, [pc, #132]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f96:	4b1f      	ldr	r3, [pc, #124]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f9a:	4b21      	ldr	r3, [pc, #132]	@ (8003020 <HAL_RCC_OscConfig+0x778>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fa2:	00d2      	lsls	r2, r2, #3
 8002fa4:	491b      	ldr	r1, [pc, #108]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002faa:	4b1a      	ldr	r3, [pc, #104]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	f023 020c 	bic.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	4917      	ldr	r1, [pc, #92]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fbc:	4b15      	ldr	r3, [pc, #84]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	f023 0202 	bic.w	r2, r3, #2
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc8:	4912      	ldr	r1, [pc, #72]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fce:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	4a10      	ldr	r2, [pc, #64]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fda:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	4a0d      	ldr	r2, [pc, #52]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ff2:	4b08      	ldr	r3, [pc, #32]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	4a07      	ldr	r2, [pc, #28]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffe:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a04      	ldr	r2, [pc, #16]	@ (8003014 <HAL_RCC_OscConfig+0x76c>)
 8003004:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fe fba5 	bl	8001758 <HAL_GetTick>
 800300e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003010:	e011      	b.n	8003036 <HAL_RCC_OscConfig+0x78e>
 8003012:	bf00      	nop
 8003014:	58024400 	.word	0x58024400
 8003018:	58024800 	.word	0x58024800
 800301c:	fffffc0c 	.word	0xfffffc0c
 8003020:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fb98 	bl	8001758 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e08a      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003036:	4b47      	ldr	r3, [pc, #284]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x77c>
 8003042:	e082      	b.n	800314a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b43      	ldr	r3, [pc, #268]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a42      	ldr	r2, [pc, #264]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 800304a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fb82 	bl	8001758 <HAL_GetTick>
 8003054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe fb7e 	bl	8001758 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e070      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800306a:	4b3a      	ldr	r3, [pc, #232]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x7b0>
 8003076:	e068      	b.n	800314a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003078:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800307e:	4b35      	ldr	r3, [pc, #212]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	2b01      	cmp	r3, #1
 800308a:	d031      	beq.n	80030f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f003 0203 	and.w	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d12a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d122      	bne.n	80030f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d11a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	0a5b      	lsrs	r3, r3, #9
 80030be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d111      	bne.n	80030f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	0c1b      	lsrs	r3, r3, #16
 80030d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d108      	bne.n	80030f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	0e1b      	lsrs	r3, r3, #24
 80030e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e02b      	b.n	800314c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80030f4:	4b17      	ldr	r3, [pc, #92]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 80030f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f8:	08db      	lsrs	r3, r3, #3
 80030fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	429a      	cmp	r2, r3
 8003108:	d01f      	beq.n	800314a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800310a:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	4a11      	ldr	r2, [pc, #68]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003116:	f7fe fb1f 	bl	8001758 <HAL_GetTick>
 800311a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800311c:	bf00      	nop
 800311e:	f7fe fb1b 	bl	8001758 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	4293      	cmp	r3, r2
 8003128:	d0f9      	beq.n	800311e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800312a:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 800312c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800312e:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <HAL_RCC_OscConfig+0x8b0>)
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003136:	00d2      	lsls	r2, r2, #3
 8003138:	4906      	ldr	r1, [pc, #24]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 800313a:	4313      	orrs	r3, r2
 800313c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800313e:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	4a04      	ldr	r2, [pc, #16]	@ (8003154 <HAL_RCC_OscConfig+0x8ac>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3730      	adds	r7, #48	@ 0x30
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	58024400 	.word	0x58024400
 8003158:	ffff0007 	.word	0xffff0007

0800315c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e19c      	b.n	80034aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b8a      	ldr	r3, [pc, #552]	@ (800339c <HAL_RCC_ClockConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d910      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b87      	ldr	r3, [pc, #540]	@ (800339c <HAL_RCC_ClockConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 020f 	bic.w	r2, r3, #15
 8003186:	4985      	ldr	r1, [pc, #532]	@ (800339c <HAL_RCC_ClockConfig+0x240>)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b83      	ldr	r3, [pc, #524]	@ (800339c <HAL_RCC_ClockConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e184      	b.n	80034aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d010      	beq.n	80031ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	4b7b      	ldr	r3, [pc, #492]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d908      	bls.n	80031ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031bc:	4b78      	ldr	r3, [pc, #480]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	4975      	ldr	r1, [pc, #468]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d010      	beq.n	80031fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	4b70      	ldr	r3, [pc, #448]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d908      	bls.n	80031fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ea:	4b6d      	ldr	r3, [pc, #436]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	496a      	ldr	r1, [pc, #424]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b00      	cmp	r3, #0
 8003206:	d010      	beq.n	800322a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	4b64      	ldr	r3, [pc, #400]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003214:	429a      	cmp	r2, r3
 8003216:	d908      	bls.n	800322a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003218:	4b61      	ldr	r3, [pc, #388]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	495e      	ldr	r1, [pc, #376]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 8003226:	4313      	orrs	r3, r2
 8003228:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	4b59      	ldr	r3, [pc, #356]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003242:	429a      	cmp	r2, r3
 8003244:	d908      	bls.n	8003258 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003246:	4b56      	ldr	r3, [pc, #344]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4953      	ldr	r1, [pc, #332]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 8003254:	4313      	orrs	r3, r2
 8003256:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	4b4d      	ldr	r3, [pc, #308]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	429a      	cmp	r2, r3
 8003272:	d908      	bls.n	8003286 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003274:	4b4a      	ldr	r3, [pc, #296]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f023 020f 	bic.w	r2, r3, #15
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4947      	ldr	r1, [pc, #284]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 8003282:	4313      	orrs	r3, r2
 8003284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d055      	beq.n	800333e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003292:	4b43      	ldr	r3, [pc, #268]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4940      	ldr	r1, [pc, #256]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ac:	4b3c      	ldr	r3, [pc, #240]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d121      	bne.n	80032fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0f6      	b.n	80034aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c4:	4b36      	ldr	r3, [pc, #216]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d115      	bne.n	80032fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0ea      	b.n	80034aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032dc:	4b30      	ldr	r3, [pc, #192]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0de      	b.n	80034aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032ec:	4b2c      	ldr	r3, [pc, #176]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0d6      	b.n	80034aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032fc:	4b28      	ldr	r3, [pc, #160]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f023 0207 	bic.w	r2, r3, #7
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4925      	ldr	r1, [pc, #148]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 800330a:	4313      	orrs	r3, r2
 800330c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330e:	f7fe fa23 	bl	8001758 <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003314:	e00a      	b.n	800332c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003316:	f7fe fa1f 	bl	8001758 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0be      	b.n	80034aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332c:	4b1c      	ldr	r3, [pc, #112]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	429a      	cmp	r2, r3
 800333c:	d1eb      	bne.n	8003316 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	4b14      	ldr	r3, [pc, #80]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	429a      	cmp	r2, r3
 8003358:	d208      	bcs.n	800336c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335a:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f023 020f 	bic.w	r2, r3, #15
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	490e      	ldr	r1, [pc, #56]	@ (80033a0 <HAL_RCC_ClockConfig+0x244>)
 8003368:	4313      	orrs	r3, r2
 800336a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_RCC_ClockConfig+0x240>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d214      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b08      	ldr	r3, [pc, #32]	@ (800339c <HAL_RCC_ClockConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 020f 	bic.w	r2, r3, #15
 8003382:	4906      	ldr	r1, [pc, #24]	@ (800339c <HAL_RCC_ClockConfig+0x240>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b04      	ldr	r3, [pc, #16]	@ (800339c <HAL_RCC_ClockConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e086      	b.n	80034aa <HAL_RCC_ClockConfig+0x34e>
 800339c:	52002000 	.word	0x52002000
 80033a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	4b3f      	ldr	r3, [pc, #252]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033bc:	429a      	cmp	r2, r3
 80033be:	d208      	bcs.n	80033d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033c0:	4b3c      	ldr	r3, [pc, #240]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	4939      	ldr	r1, [pc, #228]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d010      	beq.n	8003400 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	4b34      	ldr	r3, [pc, #208]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d208      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033ee:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	492e      	ldr	r1, [pc, #184]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d010      	beq.n	800342e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	4b28      	ldr	r3, [pc, #160]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003418:	429a      	cmp	r2, r3
 800341a:	d208      	bcs.n	800342e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800341c:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4922      	ldr	r1, [pc, #136]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 800342a:	4313      	orrs	r3, r2
 800342c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d010      	beq.n	800345c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	4b1d      	ldr	r3, [pc, #116]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003446:	429a      	cmp	r2, r3
 8003448:	d208      	bcs.n	800345c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800344a:	4b1a      	ldr	r3, [pc, #104]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4917      	ldr	r1, [pc, #92]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 8003458:	4313      	orrs	r3, r2
 800345a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800345c:	f000 f834 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	4912      	ldr	r1, [pc, #72]	@ (80034b8 <HAL_RCC_ClockConfig+0x35c>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
 8003478:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800347a:	4b0e      	ldr	r3, [pc, #56]	@ (80034b4 <HAL_RCC_ClockConfig+0x358>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	4a0d      	ldr	r2, [pc, #52]	@ (80034b8 <HAL_RCC_ClockConfig+0x35c>)
 8003484:	5cd3      	ldrb	r3, [r2, r3]
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
 8003490:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <HAL_RCC_ClockConfig+0x360>)
 8003492:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003494:	4a0a      	ldr	r2, [pc, #40]	@ (80034c0 <HAL_RCC_ClockConfig+0x364>)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800349a:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <HAL_RCC_ClockConfig+0x368>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fe2c 	bl	80010fc <HAL_InitTick>
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	58024400 	.word	0x58024400
 80034b8:	0800aeb0 	.word	0x0800aeb0
 80034bc:	24000004 	.word	0x24000004
 80034c0:	24000000 	.word	0x24000000
 80034c4:	24000008 	.word	0x24000008

080034c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b089      	sub	sp, #36	@ 0x24
 80034cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ce:	4bb3      	ldr	r3, [pc, #716]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034d6:	2b18      	cmp	r3, #24
 80034d8:	f200 8155 	bhi.w	8003786 <HAL_RCC_GetSysClockFreq+0x2be>
 80034dc:	a201      	add	r2, pc, #4	@ (adr r2, 80034e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	08003549 	.word	0x08003549
 80034e8:	08003787 	.word	0x08003787
 80034ec:	08003787 	.word	0x08003787
 80034f0:	08003787 	.word	0x08003787
 80034f4:	08003787 	.word	0x08003787
 80034f8:	08003787 	.word	0x08003787
 80034fc:	08003787 	.word	0x08003787
 8003500:	08003787 	.word	0x08003787
 8003504:	0800356f 	.word	0x0800356f
 8003508:	08003787 	.word	0x08003787
 800350c:	08003787 	.word	0x08003787
 8003510:	08003787 	.word	0x08003787
 8003514:	08003787 	.word	0x08003787
 8003518:	08003787 	.word	0x08003787
 800351c:	08003787 	.word	0x08003787
 8003520:	08003787 	.word	0x08003787
 8003524:	08003575 	.word	0x08003575
 8003528:	08003787 	.word	0x08003787
 800352c:	08003787 	.word	0x08003787
 8003530:	08003787 	.word	0x08003787
 8003534:	08003787 	.word	0x08003787
 8003538:	08003787 	.word	0x08003787
 800353c:	08003787 	.word	0x08003787
 8003540:	08003787 	.word	0x08003787
 8003544:	0800357b 	.word	0x0800357b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003548:	4b94      	ldr	r3, [pc, #592]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003554:	4b91      	ldr	r3, [pc, #580]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	08db      	lsrs	r3, r3, #3
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	4a90      	ldr	r2, [pc, #576]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003566:	e111      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003568:	4b8d      	ldr	r3, [pc, #564]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800356a:	61bb      	str	r3, [r7, #24]
      break;
 800356c:	e10e      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800356e:	4b8d      	ldr	r3, [pc, #564]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003570:	61bb      	str	r3, [r7, #24]
      break;
 8003572:	e10b      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003574:	4b8c      	ldr	r3, [pc, #560]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003576:	61bb      	str	r3, [r7, #24]
      break;
 8003578:	e108      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800357a:	4b88      	ldr	r3, [pc, #544]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003584:	4b85      	ldr	r3, [pc, #532]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800358e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003590:	4b82      	ldr	r3, [pc, #520]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800359a:	4b80      	ldr	r3, [pc, #512]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800359c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359e:	08db      	lsrs	r3, r3, #3
 80035a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80e1 	beq.w	8003780 <HAL_RCC_GetSysClockFreq+0x2b8>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	f000 8083 	beq.w	80036cc <HAL_RCC_GetSysClockFreq+0x204>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	f200 80a1 	bhi.w	8003710 <HAL_RCC_GetSysClockFreq+0x248>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x114>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d056      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035da:	e099      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035dc:	4b6f      	ldr	r3, [pc, #444]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02d      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035e8:	4b6c      	ldr	r3, [pc, #432]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	08db      	lsrs	r3, r3, #3
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	4a6b      	ldr	r2, [pc, #428]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
 80035f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003612:	4b62      	ldr	r3, [pc, #392]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003622:	ed97 6a02 	vldr	s12, [r7, #8]
 8003626:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80037ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800362a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800363a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003642:	e087      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80037b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003656:	4b51      	ldr	r3, [pc, #324]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003666:	ed97 6a02 	vldr	s12, [r7, #8]
 800366a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80037ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800366e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800367a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003686:	e065      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80037b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369a:	4b40      	ldr	r3, [pc, #256]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80037ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80036b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036ca:	e043      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80037b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036de:	4b2f      	ldr	r3, [pc, #188]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80036f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80037ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80036f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800370e:	e021      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80037b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800371e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003722:	4b1e      	ldr	r3, [pc, #120]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003732:	ed97 6a02 	vldr	s12, [r7, #8]
 8003736:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80037ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800373a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800373e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003752:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003754:	4b11      	ldr	r3, [pc, #68]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003758:	0a5b      	lsrs	r3, r3, #9
 800375a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800375e:	3301      	adds	r3, #1
 8003760:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800376c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003778:	ee17 3a90 	vmov	r3, s15
 800377c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800377e:	e005      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	61bb      	str	r3, [r7, #24]
      break;
 8003784:	e002      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003788:	61bb      	str	r3, [r7, #24]
      break;
 800378a:	bf00      	nop
  }

  return sysclockfreq;
 800378c:	69bb      	ldr	r3, [r7, #24]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3724      	adds	r7, #36	@ 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	58024400 	.word	0x58024400
 80037a0:	03d09000 	.word	0x03d09000
 80037a4:	003d0900 	.word	0x003d0900
 80037a8:	007a1200 	.word	0x007a1200
 80037ac:	46000000 	.word	0x46000000
 80037b0:	4c742400 	.word	0x4c742400
 80037b4:	4a742400 	.word	0x4a742400
 80037b8:	4af42400 	.word	0x4af42400

080037bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037c2:	f7ff fe81 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 80037c6:	4602      	mov	r2, r0
 80037c8:	4b10      	ldr	r3, [pc, #64]	@ (800380c <HAL_RCC_GetHCLKFreq+0x50>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	490f      	ldr	r1, [pc, #60]	@ (8003810 <HAL_RCC_GetHCLKFreq+0x54>)
 80037d4:	5ccb      	ldrb	r3, [r1, r3]
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037e0:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <HAL_RCC_GetHCLKFreq+0x50>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	4a09      	ldr	r2, [pc, #36]	@ (8003810 <HAL_RCC_GetHCLKFreq+0x54>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	fa22 f303 	lsr.w	r3, r2, r3
 80037f6:	4a07      	ldr	r2, [pc, #28]	@ (8003814 <HAL_RCC_GetHCLKFreq+0x58>)
 80037f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037fa:	4a07      	ldr	r2, [pc, #28]	@ (8003818 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003800:	4b04      	ldr	r3, [pc, #16]	@ (8003814 <HAL_RCC_GetHCLKFreq+0x58>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	58024400 	.word	0x58024400
 8003810:	0800aeb0 	.word	0x0800aeb0
 8003814:	24000004 	.word	0x24000004
 8003818:	24000000 	.word	0x24000000

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003820:	f7ff ffcc 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4904      	ldr	r1, [pc, #16]	@ (8003844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	58024400 	.word	0x58024400
 8003844:	0800aeb0 	.word	0x0800aeb0

08003848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800384c:	f7ff ffb6 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b06      	ldr	r3, [pc, #24]	@ (800386c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4904      	ldr	r1, [pc, #16]	@ (8003870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	58024400 	.word	0x58024400
 8003870:	0800aeb0 	.word	0x0800aeb0

08003874 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	223f      	movs	r2, #63	@ 0x3f
 8003882:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003884:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <HAL_RCC_GetClockConfig+0x7c>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0207 	and.w	r2, r3, #7
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003890:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <HAL_RCC_GetClockConfig+0x7c>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800389c:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <HAL_RCC_GetClockConfig+0x7c>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80038a8:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <HAL_RCC_GetClockConfig+0x7c>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80038b4:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <HAL_RCC_GetClockConfig+0x7c>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80038c0:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_RCC_GetClockConfig+0x7c>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80038cc:	4b08      	ldr	r3, [pc, #32]	@ (80038f0 <HAL_RCC_GetClockConfig+0x7c>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <HAL_RCC_GetClockConfig+0x80>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	601a      	str	r2, [r3, #0]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	58024400 	.word	0x58024400
 80038f4:	52002000 	.word	0x52002000

080038f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038fc:	b0ca      	sub	sp, #296	@ 0x128
 80038fe:	af00      	add	r7, sp, #0
 8003900:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003904:	2300      	movs	r3, #0
 8003906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800390a:	2300      	movs	r3, #0
 800390c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800391c:	2500      	movs	r5, #0
 800391e:	ea54 0305 	orrs.w	r3, r4, r5
 8003922:	d049      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800392a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800392e:	d02f      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003930:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003934:	d828      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800393a:	d01a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800393c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003940:	d822      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800394a:	d007      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800394c:	e01c      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394e:	4bb8      	ldr	r3, [pc, #736]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	4ab7      	ldr	r2, [pc, #732]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800395a:	e01a      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003960:	3308      	adds	r3, #8
 8003962:	2102      	movs	r1, #2
 8003964:	4618      	mov	r0, r3
 8003966:	f001 fc8f 	bl	8005288 <RCCEx_PLL2_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003970:	e00f      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003976:	3328      	adds	r3, #40	@ 0x28
 8003978:	2102      	movs	r1, #2
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fd36 	bl	80053ec <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003986:	e004      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800399a:	4ba5      	ldr	r3, [pc, #660]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800399c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039a8:	4aa1      	ldr	r2, [pc, #644]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039aa:	430b      	orrs	r3, r1
 80039ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80039c4:	f04f 0900 	mov.w	r9, #0
 80039c8:	ea58 0309 	orrs.w	r3, r8, r9
 80039cc:	d047      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d82a      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80039d8:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	080039f5 	.word	0x080039f5
 80039e4:	08003a03 	.word	0x08003a03
 80039e8:	08003a19 	.word	0x08003a19
 80039ec:	08003a37 	.word	0x08003a37
 80039f0:	08003a37 	.word	0x08003a37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	4a8d      	ldr	r2, [pc, #564]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a00:	e01a      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a06:	3308      	adds	r3, #8
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fc3c 	bl	8005288 <RCCEx_PLL2_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a16:	e00f      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1c:	3328      	adds	r3, #40	@ 0x28
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f001 fce3 	bl	80053ec <RCCEx_PLL3_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a2c:	e004      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a34:	e000      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a40:	4b7b      	ldr	r3, [pc, #492]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	f023 0107 	bic.w	r1, r3, #7
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4e:	4a78      	ldr	r2, [pc, #480]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a54:	e003      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003a6a:	f04f 0b00 	mov.w	fp, #0
 8003a6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a72:	d04c      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7e:	d030      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a84:	d829      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a88:	d02d      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a8c:	d825      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a8e:	2b80      	cmp	r3, #128	@ 0x80
 8003a90:	d018      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003a92:	2b80      	cmp	r3, #128	@ 0x80
 8003a94:	d821      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003a9a:	2b40      	cmp	r3, #64	@ 0x40
 8003a9c:	d007      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003a9e:	e01c      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa0:	4b63      	ldr	r3, [pc, #396]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	4a62      	ldr	r2, [pc, #392]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003aac:	e01c      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 fbe6 	bl	8005288 <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ac2:	e011      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac8:	3328      	adds	r3, #40	@ 0x28
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 fc8d 	bl	80053ec <RCCEx_PLL3_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ad8:	e006      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003af0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	4a4c      	ldr	r2, [pc, #304]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b1a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003b24:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	d053      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b3a:	d035      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003b3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b40:	d82e      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b46:	d031      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b4c:	d828      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b52:	d01a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003b54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b58:	d822      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b62:	d007      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003b64:	e01c      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b66:	4b32      	ldr	r3, [pc, #200]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	4a31      	ldr	r2, [pc, #196]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b72:	e01c      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	3308      	adds	r3, #8
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 fb83 	bl	8005288 <RCCEx_PLL2_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b88:	e011      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8e:	3328      	adds	r3, #40	@ 0x28
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fc2a 	bl	80053ec <RCCEx_PLL3_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b9e:	e006      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bcc:	e003      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003be2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003bec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	d056      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c02:	d038      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c08:	d831      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c0e:	d034      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c14:	d82b      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c1a:	d01d      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c20:	d825      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c2c:	e01f      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c2e:	bf00      	nop
 8003c30:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c34:	4ba2      	ldr	r3, [pc, #648]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	4aa1      	ldr	r2, [pc, #644]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c40:	e01c      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	3308      	adds	r3, #8
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 fb1c 	bl	8005288 <RCCEx_PLL2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c56:	e011      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	3328      	adds	r3, #40	@ 0x28
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 fbc3 	bl	80053ec <RCCEx_PLL3_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c6c:	e006      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c74:	e002      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c84:	4b8e      	ldr	r3, [pc, #568]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c94:	4a8a      	ldr	r2, [pc, #552]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003cba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	d03a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	2b30      	cmp	r3, #48	@ 0x30
 8003ccc:	d01f      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003cce:	2b30      	cmp	r3, #48	@ 0x30
 8003cd0:	d819      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d00c      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d815      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d019      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d111      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce2:	4b77      	ldr	r3, [pc, #476]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	4a76      	ldr	r2, [pc, #472]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003cee:	e011      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 fac5 	bl	8005288 <RCCEx_PLL2_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d04:	e006      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d0c:	e002      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d1c:	4b68      	ldr	r3, [pc, #416]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2a:	4a65      	ldr	r2, [pc, #404]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d30:	e003      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003d46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003d50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	d051      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d64:	d035      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003d66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d6a:	d82e      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d70:	d031      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003d72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d76:	d828      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d7c:	d01a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d82:	d822      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8c:	d007      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003d8e:	e01c      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d90:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	4a4a      	ldr	r2, [pc, #296]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da2:	3308      	adds	r3, #8
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 fa6e 	bl	8005288 <RCCEx_PLL2_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003db2:	e011      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	3328      	adds	r3, #40	@ 0x28
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 fb15 	bl	80053ec <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dc8:	e006      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003de0:	4b37      	ldr	r3, [pc, #220]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dee:	4a34      	ldr	r2, [pc, #208]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003df4:	e003      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	d056      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e28:	d033      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e2e:	d82c      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e34:	d02f      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003e36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e3a:	d826      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e40:	d02b      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003e42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e46:	d820      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e4c:	d012      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003e4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e52:	d81a      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d022      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e5c:	d115      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	3308      	adds	r3, #8
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fa0e 	bl	8005288 <RCCEx_PLL2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e72:	e015      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e78:	3328      	adds	r3, #40	@ 0x28
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 fab5 	bl	80053ec <RCCEx_PLL3_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e90:	e006      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e92:	bf00      	nop
 8003e94:	e004      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10d      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eb6:	4a02      	ldr	r2, [pc, #8]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ebc:	e006      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003ebe:	bf00      	nop
 8003ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	d055      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ef8:	d033      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003efe:	d82c      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f04:	d02f      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0a:	d826      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f10:	d02b      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f16:	d820      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f1c:	d012      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f22:	d81a      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d022      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f2c:	d115      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	3308      	adds	r3, #8
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 f9a6 	bl	8005288 <RCCEx_PLL2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f42:	e015      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f48:	3328      	adds	r3, #40	@ 0x28
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f001 fa4d 	bl	80053ec <RCCEx_PLL3_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f58:	e00a      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f60:	e006      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f62:	bf00      	nop
 8003f64:	e004      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f66:	bf00      	nop
 8003f68:	e002      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f6a:	bf00      	nop
 8003f6c:	e000      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f78:	4ba3      	ldr	r3, [pc, #652]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f88:	4a9f      	ldr	r2, [pc, #636]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f8e:	e003      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	d037      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fc8:	d816      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d018      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fd2:	d111      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	4a8b      	ldr	r2, [pc, #556]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fe0:	e00f      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 f94c 	bl	8005288 <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800400a:	4b7f      	ldr	r3, [pc, #508]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800400c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a7b      	ldr	r2, [pc, #492]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800401a:	430b      	orrs	r3, r1
 800401c:	6513      	str	r3, [r2, #80]	@ 0x50
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800403e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d039      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404e:	2b03      	cmp	r3, #3
 8004050:	d81c      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004052:	a201      	add	r2, pc, #4	@ (adr r2, 8004058 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	08004095 	.word	0x08004095
 800405c:	08004069 	.word	0x08004069
 8004060:	08004077 	.word	0x08004077
 8004064:	08004095 	.word	0x08004095
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004068:	4b67      	ldr	r3, [pc, #412]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	4a66      	ldr	r2, [pc, #408]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004074:	e00f      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407a:	3308      	adds	r3, #8
 800407c:	2102      	movs	r1, #2
 800407e:	4618      	mov	r0, r3
 8004080:	f001 f902 	bl	8005288 <RCCEx_PLL2_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800408a:	e004      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004092:	e000      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800409e:	4b5a      	ldr	r3, [pc, #360]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a2:	f023 0103 	bic.w	r1, r3, #3
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ac:	4a56      	ldr	r2, [pc, #344]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ae:	430b      	orrs	r3, r1
 80040b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040b2:	e003      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80040c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	f000 809f 	beq.w	800421c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040de:	4b4b      	ldr	r3, [pc, #300]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a4a      	ldr	r2, [pc, #296]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040ea:	f7fd fb35 	bl	8001758 <HAL_GetTick>
 80040ee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040f2:	e00b      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f4:	f7fd fb30 	bl	8001758 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b64      	cmp	r3, #100	@ 0x64
 8004102:	d903      	bls.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410a:	e005      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800410c:	4b3f      	ldr	r3, [pc, #252]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ed      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411c:	2b00      	cmp	r3, #0
 800411e:	d179      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004120:	4b39      	ldr	r3, [pc, #228]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004122:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004128:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800412c:	4053      	eors	r3, r2
 800412e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004132:	2b00      	cmp	r3, #0
 8004134:	d015      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004136:	4b34      	ldr	r3, [pc, #208]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800413e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004142:	4b31      	ldr	r3, [pc, #196]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	4a30      	ldr	r2, [pc, #192]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800414e:	4b2e      	ldr	r3, [pc, #184]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	4a2d      	ldr	r2, [pc, #180]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004158:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800415a:	4a2b      	ldr	r2, [pc, #172]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800415c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004160:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800416a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800416e:	d118      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd faf2 	bl	8001758 <HAL_GetTick>
 8004174:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004178:	e00d      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417a:	f7fd faed 	bl	8001758 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004184:	1ad2      	subs	r2, r2, r3
 8004186:	f241 3388 	movw	r3, #5000	@ 0x1388
 800418a:	429a      	cmp	r2, r3
 800418c:	d903      	bls.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004194:	e005      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004196:	4b1c      	ldr	r3, [pc, #112]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0eb      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d129      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ba:	d10e      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80041bc:	4b12      	ldr	r3, [pc, #72]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041cc:	091a      	lsrs	r2, r3, #4
 80041ce:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6113      	str	r3, [r2, #16]
 80041d8:	e005      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80041da:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	4a0a      	ldr	r2, [pc, #40]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80041e4:	6113      	str	r3, [r2, #16]
 80041e6:	4b08      	ldr	r3, [pc, #32]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f6:	4a04      	ldr	r2, [pc, #16]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fc:	e00e      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004206:	e009      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004208:	58024400 	.word	0x58024400
 800420c:	58024800 	.word	0x58024800
 8004210:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f002 0301 	and.w	r3, r2, #1
 8004228:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004232:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004236:	460b      	mov	r3, r1
 8004238:	4313      	orrs	r3, r2
 800423a:	f000 8089 	beq.w	8004350 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004244:	2b28      	cmp	r3, #40	@ 0x28
 8004246:	d86b      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004248:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004329 	.word	0x08004329
 8004254:	08004321 	.word	0x08004321
 8004258:	08004321 	.word	0x08004321
 800425c:	08004321 	.word	0x08004321
 8004260:	08004321 	.word	0x08004321
 8004264:	08004321 	.word	0x08004321
 8004268:	08004321 	.word	0x08004321
 800426c:	08004321 	.word	0x08004321
 8004270:	080042f5 	.word	0x080042f5
 8004274:	08004321 	.word	0x08004321
 8004278:	08004321 	.word	0x08004321
 800427c:	08004321 	.word	0x08004321
 8004280:	08004321 	.word	0x08004321
 8004284:	08004321 	.word	0x08004321
 8004288:	08004321 	.word	0x08004321
 800428c:	08004321 	.word	0x08004321
 8004290:	0800430b 	.word	0x0800430b
 8004294:	08004321 	.word	0x08004321
 8004298:	08004321 	.word	0x08004321
 800429c:	08004321 	.word	0x08004321
 80042a0:	08004321 	.word	0x08004321
 80042a4:	08004321 	.word	0x08004321
 80042a8:	08004321 	.word	0x08004321
 80042ac:	08004321 	.word	0x08004321
 80042b0:	08004329 	.word	0x08004329
 80042b4:	08004321 	.word	0x08004321
 80042b8:	08004321 	.word	0x08004321
 80042bc:	08004321 	.word	0x08004321
 80042c0:	08004321 	.word	0x08004321
 80042c4:	08004321 	.word	0x08004321
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004321 	.word	0x08004321
 80042d0:	08004329 	.word	0x08004329
 80042d4:	08004321 	.word	0x08004321
 80042d8:	08004321 	.word	0x08004321
 80042dc:	08004321 	.word	0x08004321
 80042e0:	08004321 	.word	0x08004321
 80042e4:	08004321 	.word	0x08004321
 80042e8:	08004321 	.word	0x08004321
 80042ec:	08004321 	.word	0x08004321
 80042f0:	08004329 	.word	0x08004329
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	3308      	adds	r3, #8
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 ffc3 	bl	8005288 <RCCEx_PLL2_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004308:	e00f      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430e:	3328      	adds	r3, #40	@ 0x28
 8004310:	2101      	movs	r1, #1
 8004312:	4618      	mov	r0, r3
 8004314:	f001 f86a 	bl	80053ec <RCCEx_PLL3_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800431e:	e004      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004332:	4bbf      	ldr	r3, [pc, #764]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004336:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004340:	4abb      	ldr	r2, [pc, #748]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004342:	430b      	orrs	r3, r1
 8004344:	6553      	str	r3, [r2, #84]	@ 0x54
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f002 0302 	and.w	r3, r2, #2
 800435c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004366:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d041      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004376:	2b05      	cmp	r3, #5
 8004378:	d824      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800437a:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043cd 	.word	0x080043cd
 8004384:	08004399 	.word	0x08004399
 8004388:	080043af 	.word	0x080043af
 800438c:	080043cd 	.word	0x080043cd
 8004390:	080043cd 	.word	0x080043cd
 8004394:	080043cd 	.word	0x080043cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439c:	3308      	adds	r3, #8
 800439e:	2101      	movs	r1, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 ff71 	bl	8005288 <RCCEx_PLL2_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043ac:	e00f      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b2:	3328      	adds	r3, #40	@ 0x28
 80043b4:	2101      	movs	r1, #1
 80043b6:	4618      	mov	r0, r3
 80043b8:	f001 f818 	bl	80053ec <RCCEx_PLL3_Config>
 80043bc:	4603      	mov	r3, r0
 80043be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043c2:	e004      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043ca:	e000      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80043cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043d6:	4b96      	ldr	r3, [pc, #600]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043da:	f023 0107 	bic.w	r1, r3, #7
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043e4:	4a92      	ldr	r2, [pc, #584]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80043ea:	e003      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f002 0304 	and.w	r3, r2, #4
 8004400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004404:	2300      	movs	r3, #0
 8004406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800440a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800440e:	460b      	mov	r3, r1
 8004410:	4313      	orrs	r3, r2
 8004412:	d044      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800441c:	2b05      	cmp	r3, #5
 800441e:	d825      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004420:	a201      	add	r2, pc, #4	@ (adr r2, 8004428 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	08004475 	.word	0x08004475
 800442c:	08004441 	.word	0x08004441
 8004430:	08004457 	.word	0x08004457
 8004434:	08004475 	.word	0x08004475
 8004438:	08004475 	.word	0x08004475
 800443c:	08004475 	.word	0x08004475
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004444:	3308      	adds	r3, #8
 8004446:	2101      	movs	r1, #1
 8004448:	4618      	mov	r0, r3
 800444a:	f000 ff1d 	bl	8005288 <RCCEx_PLL2_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004454:	e00f      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445a:	3328      	adds	r3, #40	@ 0x28
 800445c:	2101      	movs	r1, #1
 800445e:	4618      	mov	r0, r3
 8004460:	f000 ffc4 	bl	80053ec <RCCEx_PLL3_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800446a:	e004      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004472:	e000      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10b      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800447e:	4b6c      	ldr	r3, [pc, #432]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004482:	f023 0107 	bic.w	r1, r3, #7
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800448e:	4a68      	ldr	r2, [pc, #416]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004490:	430b      	orrs	r3, r1
 8004492:	6593      	str	r3, [r2, #88]	@ 0x58
 8004494:	e003      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	f002 0320 	and.w	r3, r2, #32
 80044aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044b8:	460b      	mov	r3, r1
 80044ba:	4313      	orrs	r3, r2
 80044bc:	d055      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044ca:	d033      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80044cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044d0:	d82c      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d6:	d02f      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044dc:	d826      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044e2:	d02b      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80044e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044e8:	d820      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ee:	d012      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80044f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044f4:	d81a      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d022      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80044fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044fe:	d115      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004504:	3308      	adds	r3, #8
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f000 febd 	bl	8005288 <RCCEx_PLL2_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004514:	e015      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	3328      	adds	r3, #40	@ 0x28
 800451c:	2102      	movs	r1, #2
 800451e:	4618      	mov	r0, r3
 8004520:	f000 ff64 	bl	80053ec <RCCEx_PLL3_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800452a:	e00a      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004532:	e006      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004534:	bf00      	nop
 8004536:	e004      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004538:	bf00      	nop
 800453a:	e002      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800453c:	bf00      	nop
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10b      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800454a:	4b39      	ldr	r3, [pc, #228]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455a:	4a35      	ldr	r2, [pc, #212]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800455c:	430b      	orrs	r3, r1
 800455e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004560:	e003      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800457a:	2300      	movs	r3, #0
 800457c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004580:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d058      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004592:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004596:	d033      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004598:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800459c:	d82c      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a2:	d02f      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a8:	d826      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045ae:	d02b      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80045b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045b4:	d820      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ba:	d012      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80045bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c0:	d81a      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d022      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ca:	d115      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d0:	3308      	adds	r3, #8
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fe57 	bl	8005288 <RCCEx_PLL2_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045e0:	e015      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e6:	3328      	adds	r3, #40	@ 0x28
 80045e8:	2102      	movs	r1, #2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fefe 	bl	80053ec <RCCEx_PLL3_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045f6:	e00a      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045fe:	e006      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004600:	bf00      	nop
 8004602:	e004      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004604:	bf00      	nop
 8004606:	e002      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004608:	bf00      	nop
 800460a:	e000      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800460c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10e      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004616:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004626:	4a02      	ldr	r2, [pc, #8]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004628:	430b      	orrs	r3, r1
 800462a:	6593      	str	r3, [r2, #88]	@ 0x58
 800462c:	e006      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800462e:	bf00      	nop
 8004630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800464c:	2300      	movs	r3, #0
 800464e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004652:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004656:	460b      	mov	r3, r1
 8004658:	4313      	orrs	r3, r2
 800465a:	d055      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004660:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004664:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004668:	d033      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800466a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800466e:	d82c      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004674:	d02f      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800467a:	d826      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800467c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004680:	d02b      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004682:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004686:	d820      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800468c:	d012      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800468e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004692:	d81a      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d022      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800469c:	d115      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	3308      	adds	r3, #8
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fdee 	bl	8005288 <RCCEx_PLL2_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046b2:	e015      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b8:	3328      	adds	r3, #40	@ 0x28
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fe95 	bl	80053ec <RCCEx_PLL3_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046c8:	e00a      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046d0:	e006      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046d2:	bf00      	nop
 80046d4:	e004      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046d6:	bf00      	nop
 80046d8:	e002      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046e8:	4ba1      	ldr	r3, [pc, #644]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80046f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046f8:	4a9d      	ldr	r2, [pc, #628]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046fa:	430b      	orrs	r3, r1
 80046fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80046fe:	e003      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f002 0308 	and.w	r3, r2, #8
 8004714:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004718:	2300      	movs	r3, #0
 800471a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800471e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004722:	460b      	mov	r3, r1
 8004724:	4313      	orrs	r3, r2
 8004726:	d01e      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004734:	d10c      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473a:	3328      	adds	r3, #40	@ 0x28
 800473c:	2102      	movs	r1, #2
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fe54 	bl	80053ec <RCCEx_PLL3_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004750:	4b87      	ldr	r3, [pc, #540]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004754:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004760:	4a83      	ldr	r2, [pc, #524]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004762:	430b      	orrs	r3, r1
 8004764:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f002 0310 	and.w	r3, r2, #16
 8004772:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004776:	2300      	movs	r3, #0
 8004778:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800477c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004780:	460b      	mov	r3, r1
 8004782:	4313      	orrs	r3, r2
 8004784:	d01e      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800478e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004792:	d10c      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004798:	3328      	adds	r3, #40	@ 0x28
 800479a:	2102      	movs	r1, #2
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fe25 	bl	80053ec <RCCEx_PLL3_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047ae:	4b70      	ldr	r3, [pc, #448]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047be:	4a6c      	ldr	r2, [pc, #432]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80047d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047d4:	2300      	movs	r3, #0
 80047d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80047de:	460b      	mov	r3, r1
 80047e0:	4313      	orrs	r3, r2
 80047e2:	d03e      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80047e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047f0:	d022      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80047f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047f6:	d81b      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004800:	d00b      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004802:	e015      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004808:	3308      	adds	r3, #8
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fd3b 	bl	8005288 <RCCEx_PLL2_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004818:	e00f      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	3328      	adds	r3, #40	@ 0x28
 8004820:	2102      	movs	r1, #2
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fde2 	bl	80053ec <RCCEx_PLL3_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800482e:	e004      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004836:	e000      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800483a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10b      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004842:	4b4b      	ldr	r3, [pc, #300]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004846:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004852:	4a47      	ldr	r2, [pc, #284]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004854:	430b      	orrs	r3, r1
 8004856:	6593      	str	r3, [r2, #88]	@ 0x58
 8004858:	e003      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800485e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800486e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004870:	2300      	movs	r3, #0
 8004872:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004874:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004878:	460b      	mov	r3, r1
 800487a:	4313      	orrs	r3, r2
 800487c:	d03b      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800488a:	d01f      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800488c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004890:	d818      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004896:	d003      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800489c:	d007      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800489e:	e011      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a0:	4b33      	ldr	r3, [pc, #204]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a4:	4a32      	ldr	r2, [pc, #200]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80048ac:	e00f      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b2:	3328      	adds	r3, #40	@ 0x28
 80048b4:	2101      	movs	r1, #1
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fd98 	bl	80053ec <RCCEx_PLL3_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80048c2:	e004      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048ca:	e000      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80048cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048d6:	4b26      	ldr	r3, [pc, #152]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e6:	4a22      	ldr	r2, [pc, #136]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80048ec:	e003      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004902:	673b      	str	r3, [r7, #112]	@ 0x70
 8004904:	2300      	movs	r3, #0
 8004906:	677b      	str	r3, [r7, #116]	@ 0x74
 8004908:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d034      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d007      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004922:	e011      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004924:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004928:	4a11      	ldr	r2, [pc, #68]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800492a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800492e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004930:	e00e      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	3308      	adds	r3, #8
 8004938:	2102      	movs	r1, #2
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fca4 	bl	8005288 <RCCEx_PLL2_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004946:	e003      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800494e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10d      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004958:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800495a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004966:	4a02      	ldr	r2, [pc, #8]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004968:	430b      	orrs	r3, r1
 800496a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800496c:	e006      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004988:	66bb      	str	r3, [r7, #104]	@ 0x68
 800498a:	2300      	movs	r3, #0
 800498c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800498e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004992:	460b      	mov	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	d00c      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499c:	3328      	adds	r3, #40	@ 0x28
 800499e:	2102      	movs	r1, #2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fd23 	bl	80053ec <RCCEx_PLL3_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80049be:	663b      	str	r3, [r7, #96]	@ 0x60
 80049c0:	2300      	movs	r3, #0
 80049c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80049c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80049c8:	460b      	mov	r3, r1
 80049ca:	4313      	orrs	r3, r2
 80049cc:	d038      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049da:	d018      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80049dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049e0:	d811      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80049e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e6:	d014      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80049e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ec:	d80b      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d011      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80049f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f6:	d106      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f8:	4bc3      	ldr	r3, [pc, #780]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fc:	4ac2      	ldr	r2, [pc, #776]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a04:	e008      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a0c:	e004      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a0e:	bf00      	nop
 8004a10:	e002      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a20:	4bb9      	ldr	r3, [pc, #740]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a30:	4ab5      	ldr	r2, [pc, #724]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a32:	430b      	orrs	r3, r1
 8004a34:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a36:	e003      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004a4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a4e:	2300      	movs	r3, #0
 8004a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a56:	460b      	mov	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a5c:	4baa      	ldr	r3, [pc, #680]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6a:	4aa7      	ldr	r2, [pc, #668]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a7e:	2300      	movs	r3, #0
 8004a80:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004a86:	460b      	mov	r3, r1
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a8c:	4b9e      	ldr	r3, [pc, #632]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004a9c:	4a9a      	ldr	r2, [pc, #616]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004abe:	4b92      	ldr	r3, [pc, #584]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004acc:	4a8e      	ldr	r2, [pc, #568]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ae4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4313      	orrs	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aee:	4b86      	ldr	r3, [pc, #536]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	4a85      	ldr	r2, [pc, #532]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004af4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004af8:	6113      	str	r3, [r2, #16]
 8004afa:	4b83      	ldr	r3, [pc, #524]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004afc:	6919      	ldr	r1, [r3, #16]
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b06:	4a80      	ldr	r2, [pc, #512]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b1e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b28:	4b77      	ldr	r3, [pc, #476]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b36:	4a74      	ldr	r2, [pc, #464]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004b52:	460b      	mov	r3, r1
 8004b54:	4313      	orrs	r3, r2
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b58:	4b6b      	ldr	r3, [pc, #428]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b68:	4a67      	ldr	r2, [pc, #412]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	2100      	movs	r1, #0
 8004b78:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004b84:	460b      	mov	r3, r1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d011      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8e:	3308      	adds	r3, #8
 8004b90:	2100      	movs	r1, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fb78 	bl	8005288 <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6239      	str	r1, [r7, #32]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d011      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	3308      	adds	r3, #8
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fb58 	bl	8005288 <RCCEx_PLL2_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	61b9      	str	r1, [r7, #24]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c04:	460b      	mov	r3, r1
 8004c06:	4313      	orrs	r3, r2
 8004c08:	d011      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0e:	3308      	adds	r3, #8
 8004c10:	2102      	movs	r1, #2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fb38 	bl	8005288 <RCCEx_PLL2_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	2100      	movs	r1, #0
 8004c38:	6139      	str	r1, [r7, #16]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c44:	460b      	mov	r3, r1
 8004c46:	4313      	orrs	r3, r2
 8004c48:	d011      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4e:	3328      	adds	r3, #40	@ 0x28
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fbca 	bl	80053ec <RCCEx_PLL3_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	2100      	movs	r1, #0
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c84:	460b      	mov	r3, r1
 8004c86:	4313      	orrs	r3, r2
 8004c88:	d011      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8e:	3328      	adds	r3, #40	@ 0x28
 8004c90:	2101      	movs	r1, #1
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fbaa 	bl	80053ec <RCCEx_PLL3_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6039      	str	r1, [r7, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	d011      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cce:	3328      	adds	r3, #40	@ 0x28
 8004cd0:	2102      	movs	r1, #2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fb8a 	bl	80053ec <RCCEx_PLL3_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004cee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e000      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d02:	46bd      	mov	sp, r7
 8004d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d08:	58024400 	.word	0x58024400

08004d0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d10:	f7fe fd54 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b06      	ldr	r3, [pc, #24]	@ (8004d30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4904      	ldr	r1, [pc, #16]	@ (8004d34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	58024400 	.word	0x58024400
 8004d34:	0800aeb0 	.word	0x0800aeb0

08004d38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	@ 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d40:	4ba1      	ldr	r3, [pc, #644]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d4a:	4b9f      	ldr	r3, [pc, #636]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4e:	0b1b      	lsrs	r3, r3, #12
 8004d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d56:	4b9c      	ldr	r3, [pc, #624]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004d62:	4b99      	ldr	r3, [pc, #612]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d66:	08db      	lsrs	r3, r3, #3
 8004d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8111 	beq.w	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	f000 8083 	beq.w	8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	f200 80a1 	bhi.w	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d056      	beq.n	8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004da2:	e099      	b.n	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004da4:	4b88      	ldr	r3, [pc, #544]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d02d      	beq.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004db0:	4b85      	ldr	r3, [pc, #532]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	08db      	lsrs	r3, r3, #3
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	4a84      	ldr	r2, [pc, #528]	@ (8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dda:	4b7b      	ldr	r3, [pc, #492]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e0a:	e087      	b.n	8004f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e4e:	e065      	b.n	8004f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e62:	4b59      	ldr	r3, [pc, #356]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e92:	e043      	b.n	8004f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea6:	4b48      	ldr	r3, [pc, #288]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ed6:	e021      	b.n	8004f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eea:	4b37      	ldr	r3, [pc, #220]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f20:	0a5b      	lsrs	r3, r3, #9
 8004f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f42:	ee17 2a90 	vmov	r2, s15
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f70:	ee17 2a90 	vmov	r2, s15
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f78:	4b13      	ldr	r3, [pc, #76]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	0e1b      	lsrs	r3, r3, #24
 8004f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9e:	ee17 2a90 	vmov	r2, s15
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fa6:	e008      	b.n	8004fba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	609a      	str	r2, [r3, #8]
}
 8004fba:	bf00      	nop
 8004fbc:	3724      	adds	r7, #36	@ 0x24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	58024400 	.word	0x58024400
 8004fcc:	03d09000 	.word	0x03d09000
 8004fd0:	46000000 	.word	0x46000000
 8004fd4:	4c742400 	.word	0x4c742400
 8004fd8:	4a742400 	.word	0x4a742400
 8004fdc:	4af42400 	.word	0x4af42400

08004fe0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b089      	sub	sp, #36	@ 0x24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fe8:	4ba1      	ldr	r3, [pc, #644]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ff2:	4b9f      	ldr	r3, [pc, #636]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff6:	0d1b      	lsrs	r3, r3, #20
 8004ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ffc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ffe:	4b9c      	ldr	r3, [pc, #624]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800500a:	4b99      	ldr	r3, [pc, #612]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	08db      	lsrs	r3, r3, #3
 8005010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005022:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8111 	beq.w	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b02      	cmp	r3, #2
 8005032:	f000 8083 	beq.w	800513c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b02      	cmp	r3, #2
 800503a:	f200 80a1 	bhi.w	8005180 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d056      	beq.n	80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800504a:	e099      	b.n	8005180 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800504c:	4b88      	ldr	r3, [pc, #544]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02d      	beq.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005058:	4b85      	ldr	r3, [pc, #532]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	08db      	lsrs	r3, r3, #3
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	4a84      	ldr	r2, [pc, #528]	@ (8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
 8005068:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	ee07 3a90 	vmov	s15, r3
 8005070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005082:	4b7b      	ldr	r3, [pc, #492]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005092:	ed97 6a03 	vldr	s12, [r7, #12]
 8005096:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800509a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050b2:	e087      	b.n	80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800527c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80050c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050f6:	e065      	b.n	80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510a:	4b59      	ldr	r3, [pc, #356]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511a:	ed97 6a03 	vldr	s12, [r7, #12]
 800511e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800513a:	e043      	b.n	80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005146:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800514a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514e:	4b48      	ldr	r3, [pc, #288]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005162:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800517e:	e021      	b.n	80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800518e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005192:	4b37      	ldr	r3, [pc, #220]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80051c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	0a5b      	lsrs	r3, r3, #9
 80051ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051de:	edd7 6a07 	vldr	s13, [r7, #28]
 80051e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ea:	ee17 2a90 	vmov	r2, s15
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	0c1b      	lsrs	r3, r3, #16
 80051f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005204:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800520c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005218:	ee17 2a90 	vmov	r2, s15
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005220:	4b13      	ldr	r3, [pc, #76]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	0e1b      	lsrs	r3, r3, #24
 8005226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800523a:	edd7 6a07 	vldr	s13, [r7, #28]
 800523e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005246:	ee17 2a90 	vmov	r2, s15
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800524e:	e008      	b.n	8005262 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	609a      	str	r2, [r3, #8]
}
 8005262:	bf00      	nop
 8005264:	3724      	adds	r7, #36	@ 0x24
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	58024400 	.word	0x58024400
 8005274:	03d09000 	.word	0x03d09000
 8005278:	46000000 	.word	0x46000000
 800527c:	4c742400 	.word	0x4c742400
 8005280:	4a742400 	.word	0x4a742400
 8005284:	4af42400 	.word	0x4af42400

08005288 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005296:	4b53      	ldr	r3, [pc, #332]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d101      	bne.n	80052a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e099      	b.n	80053da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052a6:	4b4f      	ldr	r3, [pc, #316]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a4e      	ldr	r2, [pc, #312]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80052ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b2:	f7fc fa51 	bl	8001758 <HAL_GetTick>
 80052b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052b8:	e008      	b.n	80052cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052ba:	f7fc fa4d 	bl	8001758 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e086      	b.n	80053da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052cc:	4b45      	ldr	r3, [pc, #276]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f0      	bne.n	80052ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80052d8:	4b42      	ldr	r3, [pc, #264]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80052da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	493f      	ldr	r1, [pc, #252]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	025b      	lsls	r3, r3, #9
 80052fe:	b29b      	uxth	r3, r3
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	3b01      	subs	r3, #1
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	3b01      	subs	r3, #1
 8005316:	061b      	lsls	r3, r3, #24
 8005318:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800531c:	4931      	ldr	r1, [pc, #196]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800531e:	4313      	orrs	r3, r2
 8005320:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005322:	4b30      	ldr	r3, [pc, #192]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	492d      	ldr	r1, [pc, #180]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005330:	4313      	orrs	r3, r2
 8005332:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005334:	4b2b      	ldr	r3, [pc, #172]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	f023 0220 	bic.w	r2, r3, #32
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	4928      	ldr	r1, [pc, #160]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005342:	4313      	orrs	r3, r2
 8005344:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005346:	4b27      	ldr	r3, [pc, #156]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	4a26      	ldr	r2, [pc, #152]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800534c:	f023 0310 	bic.w	r3, r3, #16
 8005350:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005352:	4b24      	ldr	r3, [pc, #144]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005354:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005356:	4b24      	ldr	r3, [pc, #144]	@ (80053e8 <RCCEx_PLL2_Config+0x160>)
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	69d2      	ldr	r2, [r2, #28]
 800535e:	00d2      	lsls	r2, r2, #3
 8005360:	4920      	ldr	r1, [pc, #128]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005362:	4313      	orrs	r3, r2
 8005364:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005366:	4b1f      	ldr	r3, [pc, #124]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536a:	4a1e      	ldr	r2, [pc, #120]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800536c:	f043 0310 	orr.w	r3, r3, #16
 8005370:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005378:	4b1a      	ldr	r3, [pc, #104]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	4a19      	ldr	r2, [pc, #100]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800537e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005384:	e00f      	b.n	80053a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d106      	bne.n	800539a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800538c:	4b15      	ldr	r3, [pc, #84]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	4a14      	ldr	r2, [pc, #80]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 8005392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005396:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005398:	e005      	b.n	80053a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800539a:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	4a11      	ldr	r2, [pc, #68]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80053a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053a6:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a0e      	ldr	r2, [pc, #56]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80053ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b2:	f7fc f9d1 	bl	8001758 <HAL_GetTick>
 80053b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053b8:	e008      	b.n	80053cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053ba:	f7fc f9cd 	bl	8001758 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e006      	b.n	80053da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053cc:	4b05      	ldr	r3, [pc, #20]	@ (80053e4 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	58024400 	.word	0x58024400
 80053e8:	ffff0007 	.word	0xffff0007

080053ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053fa:	4b53      	ldr	r3, [pc, #332]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80053fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	2b03      	cmp	r3, #3
 8005404:	d101      	bne.n	800540a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e099      	b.n	800553e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800540a:	4b4f      	ldr	r3, [pc, #316]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a4e      	ldr	r2, [pc, #312]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005416:	f7fc f99f 	bl	8001758 <HAL_GetTick>
 800541a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800541c:	e008      	b.n	8005430 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800541e:	f7fc f99b 	bl	8001758 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e086      	b.n	800553e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005430:	4b45      	ldr	r3, [pc, #276]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800543c:	4b42      	ldr	r3, [pc, #264]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 800543e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005440:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	051b      	lsls	r3, r3, #20
 800544a:	493f      	ldr	r1, [pc, #252]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 800544c:	4313      	orrs	r3, r2
 800544e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	3b01      	subs	r3, #1
 8005456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	3b01      	subs	r3, #1
 8005460:	025b      	lsls	r3, r3, #9
 8005462:	b29b      	uxth	r3, r3
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	3b01      	subs	r3, #1
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	3b01      	subs	r3, #1
 800547a:	061b      	lsls	r3, r3, #24
 800547c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005480:	4931      	ldr	r1, [pc, #196]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005482:	4313      	orrs	r3, r2
 8005484:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005486:	4b30      	ldr	r3, [pc, #192]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	492d      	ldr	r1, [pc, #180]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005498:	4b2b      	ldr	r3, [pc, #172]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	4928      	ldr	r1, [pc, #160]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054aa:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	4a26      	ldr	r2, [pc, #152]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054b6:	4b24      	ldr	r3, [pc, #144]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ba:	4b24      	ldr	r3, [pc, #144]	@ (800554c <RCCEx_PLL3_Config+0x160>)
 80054bc:	4013      	ands	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	69d2      	ldr	r2, [r2, #28]
 80054c2:	00d2      	lsls	r2, r2, #3
 80054c4:	4920      	ldr	r1, [pc, #128]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80054ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	4a19      	ldr	r2, [pc, #100]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80054e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054e8:	e00f      	b.n	800550a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d106      	bne.n	80054fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054f0:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	4a14      	ldr	r2, [pc, #80]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 80054f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80054fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054fc:	e005      	b.n	800550a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054fe:	4b12      	ldr	r3, [pc, #72]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005502:	4a11      	ldr	r2, [pc, #68]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005508:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800550a:	4b0f      	ldr	r3, [pc, #60]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a0e      	ldr	r2, [pc, #56]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005516:	f7fc f91f 	bl	8001758 <HAL_GetTick>
 800551a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800551c:	e008      	b.n	8005530 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800551e:	f7fc f91b 	bl	8001758 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e006      	b.n	800553e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005530:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <RCCEx_PLL3_Config+0x15c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	58024400 	.word	0x58024400
 800554c:	ffff0007 	.word	0xffff0007

08005550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e049      	b.n	80055f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f841 	bl	80055fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f000 f9e8 	bl	8005964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d001      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e054      	b.n	80056d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d022      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005656:	d01d      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a22      	ldr	r2, [pc, #136]	@ (80056e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d018      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a21      	ldr	r2, [pc, #132]	@ (80056ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1f      	ldr	r2, [pc, #124]	@ (80056f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00e      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1e      	ldr	r2, [pc, #120]	@ (80056f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1c      	ldr	r2, [pc, #112]	@ (80056f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1b      	ldr	r2, [pc, #108]	@ (80056fc <HAL_TIM_Base_Start_IT+0xe8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d115      	bne.n	80056c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	4b19      	ldr	r3, [pc, #100]	@ (8005700 <HAL_TIM_Base_Start_IT+0xec>)
 800569c:	4013      	ands	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b06      	cmp	r3, #6
 80056a4:	d015      	beq.n	80056d2 <HAL_TIM_Base_Start_IT+0xbe>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ac:	d011      	beq.n	80056d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056be:	e008      	b.n	80056d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e000      	b.n	80056d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40001800 	.word	0x40001800
 80056fc:	40014000 	.word	0x40014000
 8005700:	00010007 	.word	0x00010007

08005704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d020      	beq.n	8005768 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01b      	beq.n	8005768 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0202 	mvn.w	r2, #2
 8005738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f8e9 	bl	8005926 <HAL_TIM_IC_CaptureCallback>
 8005754:	e005      	b.n	8005762 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f8db 	bl	8005912 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f8ec 	bl	800593a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d020      	beq.n	80057b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01b      	beq.n	80057b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0204 	mvn.w	r2, #4
 8005784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f8c3 	bl	8005926 <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f8b5 	bl	8005912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f8c6 	bl	800593a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d020      	beq.n	8005800 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01b      	beq.n	8005800 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0208 	mvn.w	r2, #8
 80057d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2204      	movs	r2, #4
 80057d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f89d 	bl	8005926 <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f88f 	bl	8005912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f8a0 	bl	800593a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b00      	cmp	r3, #0
 8005808:	d020      	beq.n	800584c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01b      	beq.n	800584c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0210 	mvn.w	r2, #16
 800581c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2208      	movs	r2, #8
 8005822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f877 	bl	8005926 <HAL_TIM_IC_CaptureCallback>
 8005838:	e005      	b.n	8005846 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f869 	bl	8005912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f87a 	bl	800593a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00c      	beq.n	8005870 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0201 	mvn.w	r2, #1
 8005868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fb fc10 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00c      	beq.n	800589e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f913 	bl	8005ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00c      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f90b 	bl	8005ad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00c      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f834 	bl	800594e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f06f 0220 	mvn.w	r2, #32
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f8d3 	bl	8005ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a46      	ldr	r2, [pc, #280]	@ (8005a90 <TIM_Base_SetConfig+0x12c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d013      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005982:	d00f      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a43      	ldr	r2, [pc, #268]	@ (8005a94 <TIM_Base_SetConfig+0x130>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00b      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a42      	ldr	r2, [pc, #264]	@ (8005a98 <TIM_Base_SetConfig+0x134>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a41      	ldr	r2, [pc, #260]	@ (8005a9c <TIM_Base_SetConfig+0x138>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a40      	ldr	r2, [pc, #256]	@ (8005aa0 <TIM_Base_SetConfig+0x13c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d108      	bne.n	80059b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a35      	ldr	r2, [pc, #212]	@ (8005a90 <TIM_Base_SetConfig+0x12c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01f      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c4:	d01b      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a32      	ldr	r2, [pc, #200]	@ (8005a94 <TIM_Base_SetConfig+0x130>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d017      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a31      	ldr	r2, [pc, #196]	@ (8005a98 <TIM_Base_SetConfig+0x134>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a30      	ldr	r2, [pc, #192]	@ (8005a9c <TIM_Base_SetConfig+0x138>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00f      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2f      	ldr	r2, [pc, #188]	@ (8005aa0 <TIM_Base_SetConfig+0x13c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00b      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa4 <TIM_Base_SetConfig+0x140>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa8 <TIM_Base_SetConfig+0x144>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2c      	ldr	r2, [pc, #176]	@ (8005aac <TIM_Base_SetConfig+0x148>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d108      	bne.n	8005a10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a16      	ldr	r2, [pc, #88]	@ (8005a90 <TIM_Base_SetConfig+0x12c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00f      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a18      	ldr	r2, [pc, #96]	@ (8005aa0 <TIM_Base_SetConfig+0x13c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00b      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a17      	ldr	r2, [pc, #92]	@ (8005aa4 <TIM_Base_SetConfig+0x140>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d007      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a16      	ldr	r2, [pc, #88]	@ (8005aa8 <TIM_Base_SetConfig+0x144>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a15      	ldr	r2, [pc, #84]	@ (8005aac <TIM_Base_SetConfig+0x148>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d103      	bne.n	8005a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d105      	bne.n	8005a82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	611a      	str	r2, [r3, #16]
  }
}
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40000400 	.word	0x40000400
 8005a98:	40000800 	.word	0x40000800
 8005a9c:	40000c00 	.word	0x40000c00
 8005aa0:	40010400 	.word	0x40010400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e042      	b.n	8005b84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7fb fc8f 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2224      	movs	r2, #36	@ 0x24
 8005b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fe1e 	bl	8006778 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8b3 	bl	8005ca8 <UART_SetConfig>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e01b      	b.n	8005b84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fe9d 	bl	80068bc <UART_CheckIdleState>
 8005b82:	4603      	mov	r3, r0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	@ 0x28
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d17b      	bne.n	8005c9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <HAL_UART_Transmit+0x26>
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e074      	b.n	8005ca0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2221      	movs	r2, #33	@ 0x21
 8005bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bc6:	f7fb fdc7 	bl	8001758 <HAL_GetTick>
 8005bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	88fa      	ldrh	r2, [r7, #6]
 8005bd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be4:	d108      	bne.n	8005bf8 <HAL_UART_Transmit+0x6c>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d104      	bne.n	8005bf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	e003      	b.n	8005c00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c00:	e030      	b.n	8005c64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2180      	movs	r1, #128	@ 0x80
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 feff 	bl	8006a10 <UART_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e03d      	b.n	8005ca0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	3302      	adds	r3, #2
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	e007      	b.n	8005c52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1c8      	bne.n	8005c02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2200      	movs	r2, #0
 8005c78:	2140      	movs	r1, #64	@ 0x40
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fec8 	bl	8006a10 <UART_WaitOnFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e006      	b.n	8005ca0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e000      	b.n	8005ca0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005c9e:	2302      	movs	r3, #2
  }
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cac:	b092      	sub	sp, #72	@ 0x48
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4bbe      	ldr	r3, [pc, #760]	@ (8005fd0 <UART_SetConfig+0x328>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4ab3      	ldr	r2, [pc, #716]	@ (8005fd4 <UART_SetConfig+0x32c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d10:	4313      	orrs	r3, r2
 8005d12:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	4baf      	ldr	r3, [pc, #700]	@ (8005fd8 <UART_SetConfig+0x330>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2e:	f023 010f 	bic.w	r1, r3, #15
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4aa6      	ldr	r2, [pc, #664]	@ (8005fdc <UART_SetConfig+0x334>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d177      	bne.n	8005e38 <UART_SetConfig+0x190>
 8005d48:	4ba5      	ldr	r3, [pc, #660]	@ (8005fe0 <UART_SetConfig+0x338>)
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d50:	2b28      	cmp	r3, #40	@ 0x28
 8005d52:	d86d      	bhi.n	8005e30 <UART_SetConfig+0x188>
 8005d54:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <UART_SetConfig+0xb4>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005e01 	.word	0x08005e01
 8005d60:	08005e31 	.word	0x08005e31
 8005d64:	08005e31 	.word	0x08005e31
 8005d68:	08005e31 	.word	0x08005e31
 8005d6c:	08005e31 	.word	0x08005e31
 8005d70:	08005e31 	.word	0x08005e31
 8005d74:	08005e31 	.word	0x08005e31
 8005d78:	08005e31 	.word	0x08005e31
 8005d7c:	08005e09 	.word	0x08005e09
 8005d80:	08005e31 	.word	0x08005e31
 8005d84:	08005e31 	.word	0x08005e31
 8005d88:	08005e31 	.word	0x08005e31
 8005d8c:	08005e31 	.word	0x08005e31
 8005d90:	08005e31 	.word	0x08005e31
 8005d94:	08005e31 	.word	0x08005e31
 8005d98:	08005e31 	.word	0x08005e31
 8005d9c:	08005e11 	.word	0x08005e11
 8005da0:	08005e31 	.word	0x08005e31
 8005da4:	08005e31 	.word	0x08005e31
 8005da8:	08005e31 	.word	0x08005e31
 8005dac:	08005e31 	.word	0x08005e31
 8005db0:	08005e31 	.word	0x08005e31
 8005db4:	08005e31 	.word	0x08005e31
 8005db8:	08005e31 	.word	0x08005e31
 8005dbc:	08005e19 	.word	0x08005e19
 8005dc0:	08005e31 	.word	0x08005e31
 8005dc4:	08005e31 	.word	0x08005e31
 8005dc8:	08005e31 	.word	0x08005e31
 8005dcc:	08005e31 	.word	0x08005e31
 8005dd0:	08005e31 	.word	0x08005e31
 8005dd4:	08005e31 	.word	0x08005e31
 8005dd8:	08005e31 	.word	0x08005e31
 8005ddc:	08005e21 	.word	0x08005e21
 8005de0:	08005e31 	.word	0x08005e31
 8005de4:	08005e31 	.word	0x08005e31
 8005de8:	08005e31 	.word	0x08005e31
 8005dec:	08005e31 	.word	0x08005e31
 8005df0:	08005e31 	.word	0x08005e31
 8005df4:	08005e31 	.word	0x08005e31
 8005df8:	08005e31 	.word	0x08005e31
 8005dfc:	08005e29 	.word	0x08005e29
 8005e00:	2301      	movs	r3, #1
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e222      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e21e      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e10:	2308      	movs	r3, #8
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e21a      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e216      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e20:	2320      	movs	r3, #32
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e212      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e28:	2340      	movs	r3, #64	@ 0x40
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e20e      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e30:	2380      	movs	r3, #128	@ 0x80
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e20a      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a69      	ldr	r2, [pc, #420]	@ (8005fe4 <UART_SetConfig+0x33c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d130      	bne.n	8005ea4 <UART_SetConfig+0x1fc>
 8005e42:	4b67      	ldr	r3, [pc, #412]	@ (8005fe0 <UART_SetConfig+0x338>)
 8005e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	2b05      	cmp	r3, #5
 8005e4c:	d826      	bhi.n	8005e9c <UART_SetConfig+0x1f4>
 8005e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e54 <UART_SetConfig+0x1ac>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005e6d 	.word	0x08005e6d
 8005e58:	08005e75 	.word	0x08005e75
 8005e5c:	08005e7d 	.word	0x08005e7d
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e8d 	.word	0x08005e8d
 8005e68:	08005e95 	.word	0x08005e95
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e1ec      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e74:	2304      	movs	r3, #4
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e1e8      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e1e4      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e84:	2310      	movs	r3, #16
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e1e0      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e8c:	2320      	movs	r3, #32
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e1dc      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e94:	2340      	movs	r3, #64	@ 0x40
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e1d8      	b.n	800624e <UART_SetConfig+0x5a6>
 8005e9c:	2380      	movs	r3, #128	@ 0x80
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e1d4      	b.n	800624e <UART_SetConfig+0x5a6>
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8005fe8 <UART_SetConfig+0x340>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d130      	bne.n	8005f10 <UART_SetConfig+0x268>
 8005eae:	4b4c      	ldr	r3, [pc, #304]	@ (8005fe0 <UART_SetConfig+0x338>)
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d826      	bhi.n	8005f08 <UART_SetConfig+0x260>
 8005eba:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec0 <UART_SetConfig+0x218>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005ed9 	.word	0x08005ed9
 8005ec4:	08005ee1 	.word	0x08005ee1
 8005ec8:	08005ee9 	.word	0x08005ee9
 8005ecc:	08005ef1 	.word	0x08005ef1
 8005ed0:	08005ef9 	.word	0x08005ef9
 8005ed4:	08005f01 	.word	0x08005f01
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e1b6      	b.n	800624e <UART_SetConfig+0x5a6>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e1b2      	b.n	800624e <UART_SetConfig+0x5a6>
 8005ee8:	2308      	movs	r3, #8
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e1ae      	b.n	800624e <UART_SetConfig+0x5a6>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e1aa      	b.n	800624e <UART_SetConfig+0x5a6>
 8005ef8:	2320      	movs	r3, #32
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e1a6      	b.n	800624e <UART_SetConfig+0x5a6>
 8005f00:	2340      	movs	r3, #64	@ 0x40
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e1a2      	b.n	800624e <UART_SetConfig+0x5a6>
 8005f08:	2380      	movs	r3, #128	@ 0x80
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e19e      	b.n	800624e <UART_SetConfig+0x5a6>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a35      	ldr	r2, [pc, #212]	@ (8005fec <UART_SetConfig+0x344>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d130      	bne.n	8005f7c <UART_SetConfig+0x2d4>
 8005f1a:	4b31      	ldr	r3, [pc, #196]	@ (8005fe0 <UART_SetConfig+0x338>)
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	2b05      	cmp	r3, #5
 8005f24:	d826      	bhi.n	8005f74 <UART_SetConfig+0x2cc>
 8005f26:	a201      	add	r2, pc, #4	@ (adr r2, 8005f2c <UART_SetConfig+0x284>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f45 	.word	0x08005f45
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	08005f55 	.word	0x08005f55
 8005f38:	08005f5d 	.word	0x08005f5d
 8005f3c:	08005f65 	.word	0x08005f65
 8005f40:	08005f6d 	.word	0x08005f6d
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e180      	b.n	800624e <UART_SetConfig+0x5a6>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e17c      	b.n	800624e <UART_SetConfig+0x5a6>
 8005f54:	2308      	movs	r3, #8
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e178      	b.n	800624e <UART_SetConfig+0x5a6>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e174      	b.n	800624e <UART_SetConfig+0x5a6>
 8005f64:	2320      	movs	r3, #32
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e170      	b.n	800624e <UART_SetConfig+0x5a6>
 8005f6c:	2340      	movs	r3, #64	@ 0x40
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e16c      	b.n	800624e <UART_SetConfig+0x5a6>
 8005f74:	2380      	movs	r3, #128	@ 0x80
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e168      	b.n	800624e <UART_SetConfig+0x5a6>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff0 <UART_SetConfig+0x348>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d142      	bne.n	800600c <UART_SetConfig+0x364>
 8005f86:	4b16      	ldr	r3, [pc, #88]	@ (8005fe0 <UART_SetConfig+0x338>)
 8005f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	2b05      	cmp	r3, #5
 8005f90:	d838      	bhi.n	8006004 <UART_SetConfig+0x35c>
 8005f92:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <UART_SetConfig+0x2f0>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fb1 	.word	0x08005fb1
 8005f9c:	08005fb9 	.word	0x08005fb9
 8005fa0:	08005fc1 	.word	0x08005fc1
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	08005ff5 	.word	0x08005ff5
 8005fac:	08005ffd 	.word	0x08005ffd
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e14a      	b.n	800624e <UART_SetConfig+0x5a6>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e146      	b.n	800624e <UART_SetConfig+0x5a6>
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e142      	b.n	800624e <UART_SetConfig+0x5a6>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e13e      	b.n	800624e <UART_SetConfig+0x5a6>
 8005fd0:	cfff69f3 	.word	0xcfff69f3
 8005fd4:	58000c00 	.word	0x58000c00
 8005fd8:	11fff4ff 	.word	0x11fff4ff
 8005fdc:	40011000 	.word	0x40011000
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	40004400 	.word	0x40004400
 8005fe8:	40004800 	.word	0x40004800
 8005fec:	40004c00 	.word	0x40004c00
 8005ff0:	40005000 	.word	0x40005000
 8005ff4:	2320      	movs	r3, #32
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e128      	b.n	800624e <UART_SetConfig+0x5a6>
 8005ffc:	2340      	movs	r3, #64	@ 0x40
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e124      	b.n	800624e <UART_SetConfig+0x5a6>
 8006004:	2380      	movs	r3, #128	@ 0x80
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e120      	b.n	800624e <UART_SetConfig+0x5a6>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4acb      	ldr	r2, [pc, #812]	@ (8006340 <UART_SetConfig+0x698>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d176      	bne.n	8006104 <UART_SetConfig+0x45c>
 8006016:	4bcb      	ldr	r3, [pc, #812]	@ (8006344 <UART_SetConfig+0x69c>)
 8006018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800601e:	2b28      	cmp	r3, #40	@ 0x28
 8006020:	d86c      	bhi.n	80060fc <UART_SetConfig+0x454>
 8006022:	a201      	add	r2, pc, #4	@ (adr r2, 8006028 <UART_SetConfig+0x380>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	080060cd 	.word	0x080060cd
 800602c:	080060fd 	.word	0x080060fd
 8006030:	080060fd 	.word	0x080060fd
 8006034:	080060fd 	.word	0x080060fd
 8006038:	080060fd 	.word	0x080060fd
 800603c:	080060fd 	.word	0x080060fd
 8006040:	080060fd 	.word	0x080060fd
 8006044:	080060fd 	.word	0x080060fd
 8006048:	080060d5 	.word	0x080060d5
 800604c:	080060fd 	.word	0x080060fd
 8006050:	080060fd 	.word	0x080060fd
 8006054:	080060fd 	.word	0x080060fd
 8006058:	080060fd 	.word	0x080060fd
 800605c:	080060fd 	.word	0x080060fd
 8006060:	080060fd 	.word	0x080060fd
 8006064:	080060fd 	.word	0x080060fd
 8006068:	080060dd 	.word	0x080060dd
 800606c:	080060fd 	.word	0x080060fd
 8006070:	080060fd 	.word	0x080060fd
 8006074:	080060fd 	.word	0x080060fd
 8006078:	080060fd 	.word	0x080060fd
 800607c:	080060fd 	.word	0x080060fd
 8006080:	080060fd 	.word	0x080060fd
 8006084:	080060fd 	.word	0x080060fd
 8006088:	080060e5 	.word	0x080060e5
 800608c:	080060fd 	.word	0x080060fd
 8006090:	080060fd 	.word	0x080060fd
 8006094:	080060fd 	.word	0x080060fd
 8006098:	080060fd 	.word	0x080060fd
 800609c:	080060fd 	.word	0x080060fd
 80060a0:	080060fd 	.word	0x080060fd
 80060a4:	080060fd 	.word	0x080060fd
 80060a8:	080060ed 	.word	0x080060ed
 80060ac:	080060fd 	.word	0x080060fd
 80060b0:	080060fd 	.word	0x080060fd
 80060b4:	080060fd 	.word	0x080060fd
 80060b8:	080060fd 	.word	0x080060fd
 80060bc:	080060fd 	.word	0x080060fd
 80060c0:	080060fd 	.word	0x080060fd
 80060c4:	080060fd 	.word	0x080060fd
 80060c8:	080060f5 	.word	0x080060f5
 80060cc:	2301      	movs	r3, #1
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e0bc      	b.n	800624e <UART_SetConfig+0x5a6>
 80060d4:	2304      	movs	r3, #4
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e0b8      	b.n	800624e <UART_SetConfig+0x5a6>
 80060dc:	2308      	movs	r3, #8
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e0b4      	b.n	800624e <UART_SetConfig+0x5a6>
 80060e4:	2310      	movs	r3, #16
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ea:	e0b0      	b.n	800624e <UART_SetConfig+0x5a6>
 80060ec:	2320      	movs	r3, #32
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e0ac      	b.n	800624e <UART_SetConfig+0x5a6>
 80060f4:	2340      	movs	r3, #64	@ 0x40
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e0a8      	b.n	800624e <UART_SetConfig+0x5a6>
 80060fc:	2380      	movs	r3, #128	@ 0x80
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e0a4      	b.n	800624e <UART_SetConfig+0x5a6>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a8f      	ldr	r2, [pc, #572]	@ (8006348 <UART_SetConfig+0x6a0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d130      	bne.n	8006170 <UART_SetConfig+0x4c8>
 800610e:	4b8d      	ldr	r3, [pc, #564]	@ (8006344 <UART_SetConfig+0x69c>)
 8006110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	2b05      	cmp	r3, #5
 8006118:	d826      	bhi.n	8006168 <UART_SetConfig+0x4c0>
 800611a:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <UART_SetConfig+0x478>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006139 	.word	0x08006139
 8006124:	08006141 	.word	0x08006141
 8006128:	08006149 	.word	0x08006149
 800612c:	08006151 	.word	0x08006151
 8006130:	08006159 	.word	0x08006159
 8006134:	08006161 	.word	0x08006161
 8006138:	2300      	movs	r3, #0
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e086      	b.n	800624e <UART_SetConfig+0x5a6>
 8006140:	2304      	movs	r3, #4
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e082      	b.n	800624e <UART_SetConfig+0x5a6>
 8006148:	2308      	movs	r3, #8
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e07e      	b.n	800624e <UART_SetConfig+0x5a6>
 8006150:	2310      	movs	r3, #16
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e07a      	b.n	800624e <UART_SetConfig+0x5a6>
 8006158:	2320      	movs	r3, #32
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e076      	b.n	800624e <UART_SetConfig+0x5a6>
 8006160:	2340      	movs	r3, #64	@ 0x40
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e072      	b.n	800624e <UART_SetConfig+0x5a6>
 8006168:	2380      	movs	r3, #128	@ 0x80
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e06e      	b.n	800624e <UART_SetConfig+0x5a6>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a75      	ldr	r2, [pc, #468]	@ (800634c <UART_SetConfig+0x6a4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d130      	bne.n	80061dc <UART_SetConfig+0x534>
 800617a:	4b72      	ldr	r3, [pc, #456]	@ (8006344 <UART_SetConfig+0x69c>)
 800617c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	2b05      	cmp	r3, #5
 8006184:	d826      	bhi.n	80061d4 <UART_SetConfig+0x52c>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <UART_SetConfig+0x4e4>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061a5 	.word	0x080061a5
 8006190:	080061ad 	.word	0x080061ad
 8006194:	080061b5 	.word	0x080061b5
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061c5 	.word	0x080061c5
 80061a0:	080061cd 	.word	0x080061cd
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e050      	b.n	800624e <UART_SetConfig+0x5a6>
 80061ac:	2304      	movs	r3, #4
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e04c      	b.n	800624e <UART_SetConfig+0x5a6>
 80061b4:	2308      	movs	r3, #8
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e048      	b.n	800624e <UART_SetConfig+0x5a6>
 80061bc:	2310      	movs	r3, #16
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e044      	b.n	800624e <UART_SetConfig+0x5a6>
 80061c4:	2320      	movs	r3, #32
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e040      	b.n	800624e <UART_SetConfig+0x5a6>
 80061cc:	2340      	movs	r3, #64	@ 0x40
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e03c      	b.n	800624e <UART_SetConfig+0x5a6>
 80061d4:	2380      	movs	r3, #128	@ 0x80
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e038      	b.n	800624e <UART_SetConfig+0x5a6>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a5b      	ldr	r2, [pc, #364]	@ (8006350 <UART_SetConfig+0x6a8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d130      	bne.n	8006248 <UART_SetConfig+0x5a0>
 80061e6:	4b57      	ldr	r3, [pc, #348]	@ (8006344 <UART_SetConfig+0x69c>)
 80061e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	2b05      	cmp	r3, #5
 80061f0:	d826      	bhi.n	8006240 <UART_SetConfig+0x598>
 80061f2:	a201      	add	r2, pc, #4	@ (adr r2, 80061f8 <UART_SetConfig+0x550>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	08006211 	.word	0x08006211
 80061fc:	08006219 	.word	0x08006219
 8006200:	08006221 	.word	0x08006221
 8006204:	08006229 	.word	0x08006229
 8006208:	08006231 	.word	0x08006231
 800620c:	08006239 	.word	0x08006239
 8006210:	2302      	movs	r3, #2
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e01a      	b.n	800624e <UART_SetConfig+0x5a6>
 8006218:	2304      	movs	r3, #4
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e016      	b.n	800624e <UART_SetConfig+0x5a6>
 8006220:	2308      	movs	r3, #8
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e012      	b.n	800624e <UART_SetConfig+0x5a6>
 8006228:	2310      	movs	r3, #16
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e00e      	b.n	800624e <UART_SetConfig+0x5a6>
 8006230:	2320      	movs	r3, #32
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e00a      	b.n	800624e <UART_SetConfig+0x5a6>
 8006238:	2340      	movs	r3, #64	@ 0x40
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e006      	b.n	800624e <UART_SetConfig+0x5a6>
 8006240:	2380      	movs	r3, #128	@ 0x80
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e002      	b.n	800624e <UART_SetConfig+0x5a6>
 8006248:	2380      	movs	r3, #128	@ 0x80
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a3f      	ldr	r2, [pc, #252]	@ (8006350 <UART_SetConfig+0x6a8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	f040 80f8 	bne.w	800644a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800625a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800625e:	2b20      	cmp	r3, #32
 8006260:	dc46      	bgt.n	80062f0 <UART_SetConfig+0x648>
 8006262:	2b02      	cmp	r3, #2
 8006264:	f2c0 8082 	blt.w	800636c <UART_SetConfig+0x6c4>
 8006268:	3b02      	subs	r3, #2
 800626a:	2b1e      	cmp	r3, #30
 800626c:	d87e      	bhi.n	800636c <UART_SetConfig+0x6c4>
 800626e:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <UART_SetConfig+0x5cc>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	080062f7 	.word	0x080062f7
 8006278:	0800636d 	.word	0x0800636d
 800627c:	080062ff 	.word	0x080062ff
 8006280:	0800636d 	.word	0x0800636d
 8006284:	0800636d 	.word	0x0800636d
 8006288:	0800636d 	.word	0x0800636d
 800628c:	0800630f 	.word	0x0800630f
 8006290:	0800636d 	.word	0x0800636d
 8006294:	0800636d 	.word	0x0800636d
 8006298:	0800636d 	.word	0x0800636d
 800629c:	0800636d 	.word	0x0800636d
 80062a0:	0800636d 	.word	0x0800636d
 80062a4:	0800636d 	.word	0x0800636d
 80062a8:	0800636d 	.word	0x0800636d
 80062ac:	0800631f 	.word	0x0800631f
 80062b0:	0800636d 	.word	0x0800636d
 80062b4:	0800636d 	.word	0x0800636d
 80062b8:	0800636d 	.word	0x0800636d
 80062bc:	0800636d 	.word	0x0800636d
 80062c0:	0800636d 	.word	0x0800636d
 80062c4:	0800636d 	.word	0x0800636d
 80062c8:	0800636d 	.word	0x0800636d
 80062cc:	0800636d 	.word	0x0800636d
 80062d0:	0800636d 	.word	0x0800636d
 80062d4:	0800636d 	.word	0x0800636d
 80062d8:	0800636d 	.word	0x0800636d
 80062dc:	0800636d 	.word	0x0800636d
 80062e0:	0800636d 	.word	0x0800636d
 80062e4:	0800636d 	.word	0x0800636d
 80062e8:	0800636d 	.word	0x0800636d
 80062ec:	0800635f 	.word	0x0800635f
 80062f0:	2b40      	cmp	r3, #64	@ 0x40
 80062f2:	d037      	beq.n	8006364 <UART_SetConfig+0x6bc>
 80062f4:	e03a      	b.n	800636c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062f6:	f7fe fd09 	bl	8004d0c <HAL_RCCEx_GetD3PCLK1Freq>
 80062fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062fc:	e03c      	b.n	8006378 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fd18 	bl	8004d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800630c:	e034      	b.n	8006378 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800630e:	f107 0318 	add.w	r3, r7, #24
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fe64 	bl	8004fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631c:	e02c      	b.n	8006378 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800631e:	4b09      	ldr	r3, [pc, #36]	@ (8006344 <UART_SetConfig+0x69c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d016      	beq.n	8006358 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800632a:	4b06      	ldr	r3, [pc, #24]	@ (8006344 <UART_SetConfig+0x69c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	08db      	lsrs	r3, r3, #3
 8006330:	f003 0303 	and.w	r3, r3, #3
 8006334:	4a07      	ldr	r2, [pc, #28]	@ (8006354 <UART_SetConfig+0x6ac>)
 8006336:	fa22 f303 	lsr.w	r3, r2, r3
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800633c:	e01c      	b.n	8006378 <UART_SetConfig+0x6d0>
 800633e:	bf00      	nop
 8006340:	40011400 	.word	0x40011400
 8006344:	58024400 	.word	0x58024400
 8006348:	40007800 	.word	0x40007800
 800634c:	40007c00 	.word	0x40007c00
 8006350:	58000c00 	.word	0x58000c00
 8006354:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006358:	4b9d      	ldr	r3, [pc, #628]	@ (80065d0 <UART_SetConfig+0x928>)
 800635a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800635c:	e00c      	b.n	8006378 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800635e:	4b9d      	ldr	r3, [pc, #628]	@ (80065d4 <UART_SetConfig+0x92c>)
 8006360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006362:	e009      	b.n	8006378 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800636a:	e005      	b.n	8006378 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006376:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 81de 	beq.w	800673c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	4a94      	ldr	r2, [pc, #592]	@ (80065d8 <UART_SetConfig+0x930>)
 8006386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800638a:	461a      	mov	r2, r3
 800638c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006392:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4413      	add	r3, r2
 800639e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d305      	bcc.n	80063b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d903      	bls.n	80063b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063b6:	e1c1      	b.n	800673c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ba:	2200      	movs	r2, #0
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	60fa      	str	r2, [r7, #12]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	4a84      	ldr	r2, [pc, #528]	@ (80065d8 <UART_SetConfig+0x930>)
 80063c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2200      	movs	r2, #0
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	607a      	str	r2, [r7, #4]
 80063d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063da:	f7f9 ffd1 	bl	8000380 <__aeabi_uldivmod>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4610      	mov	r0, r2
 80063e4:	4619      	mov	r1, r3
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	020b      	lsls	r3, r1, #8
 80063f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063f4:	0202      	lsls	r2, r0, #8
 80063f6:	6979      	ldr	r1, [r7, #20]
 80063f8:	6849      	ldr	r1, [r1, #4]
 80063fa:	0849      	lsrs	r1, r1, #1
 80063fc:	2000      	movs	r0, #0
 80063fe:	460c      	mov	r4, r1
 8006400:	4605      	mov	r5, r0
 8006402:	eb12 0804 	adds.w	r8, r2, r4
 8006406:	eb43 0905 	adc.w	r9, r3, r5
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	469a      	mov	sl, r3
 8006412:	4693      	mov	fp, r2
 8006414:	4652      	mov	r2, sl
 8006416:	465b      	mov	r3, fp
 8006418:	4640      	mov	r0, r8
 800641a:	4649      	mov	r1, r9
 800641c:	f7f9 ffb0 	bl	8000380 <__aeabi_uldivmod>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4613      	mov	r3, r2
 8006426:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800642e:	d308      	bcc.n	8006442 <UART_SetConfig+0x79a>
 8006430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006436:	d204      	bcs.n	8006442 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800643e:	60da      	str	r2, [r3, #12]
 8006440:	e17c      	b.n	800673c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006448:	e178      	b.n	800673c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006452:	f040 80c5 	bne.w	80065e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006456:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800645a:	2b20      	cmp	r3, #32
 800645c:	dc48      	bgt.n	80064f0 <UART_SetConfig+0x848>
 800645e:	2b00      	cmp	r3, #0
 8006460:	db7b      	blt.n	800655a <UART_SetConfig+0x8b2>
 8006462:	2b20      	cmp	r3, #32
 8006464:	d879      	bhi.n	800655a <UART_SetConfig+0x8b2>
 8006466:	a201      	add	r2, pc, #4	@ (adr r2, 800646c <UART_SetConfig+0x7c4>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	080064f7 	.word	0x080064f7
 8006470:	080064ff 	.word	0x080064ff
 8006474:	0800655b 	.word	0x0800655b
 8006478:	0800655b 	.word	0x0800655b
 800647c:	08006507 	.word	0x08006507
 8006480:	0800655b 	.word	0x0800655b
 8006484:	0800655b 	.word	0x0800655b
 8006488:	0800655b 	.word	0x0800655b
 800648c:	08006517 	.word	0x08006517
 8006490:	0800655b 	.word	0x0800655b
 8006494:	0800655b 	.word	0x0800655b
 8006498:	0800655b 	.word	0x0800655b
 800649c:	0800655b 	.word	0x0800655b
 80064a0:	0800655b 	.word	0x0800655b
 80064a4:	0800655b 	.word	0x0800655b
 80064a8:	0800655b 	.word	0x0800655b
 80064ac:	08006527 	.word	0x08006527
 80064b0:	0800655b 	.word	0x0800655b
 80064b4:	0800655b 	.word	0x0800655b
 80064b8:	0800655b 	.word	0x0800655b
 80064bc:	0800655b 	.word	0x0800655b
 80064c0:	0800655b 	.word	0x0800655b
 80064c4:	0800655b 	.word	0x0800655b
 80064c8:	0800655b 	.word	0x0800655b
 80064cc:	0800655b 	.word	0x0800655b
 80064d0:	0800655b 	.word	0x0800655b
 80064d4:	0800655b 	.word	0x0800655b
 80064d8:	0800655b 	.word	0x0800655b
 80064dc:	0800655b 	.word	0x0800655b
 80064e0:	0800655b 	.word	0x0800655b
 80064e4:	0800655b 	.word	0x0800655b
 80064e8:	0800655b 	.word	0x0800655b
 80064ec:	0800654d 	.word	0x0800654d
 80064f0:	2b40      	cmp	r3, #64	@ 0x40
 80064f2:	d02e      	beq.n	8006552 <UART_SetConfig+0x8aa>
 80064f4:	e031      	b.n	800655a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f6:	f7fd f991 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 80064fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064fc:	e033      	b.n	8006566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fe:	f7fd f9a3 	bl	8003848 <HAL_RCC_GetPCLK2Freq>
 8006502:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006504:	e02f      	b.n	8006566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe fc14 	bl	8004d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006514:	e027      	b.n	8006566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006516:	f107 0318 	add.w	r3, r7, #24
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fd60 	bl	8004fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006524:	e01f      	b.n	8006566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006526:	4b2d      	ldr	r3, [pc, #180]	@ (80065dc <UART_SetConfig+0x934>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006532:	4b2a      	ldr	r3, [pc, #168]	@ (80065dc <UART_SetConfig+0x934>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	08db      	lsrs	r3, r3, #3
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	4a24      	ldr	r2, [pc, #144]	@ (80065d0 <UART_SetConfig+0x928>)
 800653e:	fa22 f303 	lsr.w	r3, r2, r3
 8006542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006544:	e00f      	b.n	8006566 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006546:	4b22      	ldr	r3, [pc, #136]	@ (80065d0 <UART_SetConfig+0x928>)
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800654a:	e00c      	b.n	8006566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800654c:	4b21      	ldr	r3, [pc, #132]	@ (80065d4 <UART_SetConfig+0x92c>)
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006550:	e009      	b.n	8006566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006558:	e005      	b.n	8006566 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006564:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 80e7 	beq.w	800673c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006572:	4a19      	ldr	r2, [pc, #100]	@ (80065d8 <UART_SetConfig+0x930>)
 8006574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006578:	461a      	mov	r2, r3
 800657a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006580:	005a      	lsls	r2, r3, #1
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	441a      	add	r2, r3
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006592:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006596:	2b0f      	cmp	r3, #15
 8006598:	d916      	bls.n	80065c8 <UART_SetConfig+0x920>
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065a0:	d212      	bcs.n	80065c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f023 030f 	bic.w	r3, r3, #15
 80065aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ae:	085b      	lsrs	r3, r3, #1
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065ba:	4313      	orrs	r3, r2
 80065bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80065c4:	60da      	str	r2, [r3, #12]
 80065c6:	e0b9      	b.n	800673c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065ce:	e0b5      	b.n	800673c <UART_SetConfig+0xa94>
 80065d0:	03d09000 	.word	0x03d09000
 80065d4:	003d0900 	.word	0x003d0900
 80065d8:	0800aec0 	.word	0x0800aec0
 80065dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80065e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	dc49      	bgt.n	800667c <UART_SetConfig+0x9d4>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	db7c      	blt.n	80066e6 <UART_SetConfig+0xa3e>
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d87a      	bhi.n	80066e6 <UART_SetConfig+0xa3e>
 80065f0:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0x950>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	08006683 	.word	0x08006683
 80065fc:	0800668b 	.word	0x0800668b
 8006600:	080066e7 	.word	0x080066e7
 8006604:	080066e7 	.word	0x080066e7
 8006608:	08006693 	.word	0x08006693
 800660c:	080066e7 	.word	0x080066e7
 8006610:	080066e7 	.word	0x080066e7
 8006614:	080066e7 	.word	0x080066e7
 8006618:	080066a3 	.word	0x080066a3
 800661c:	080066e7 	.word	0x080066e7
 8006620:	080066e7 	.word	0x080066e7
 8006624:	080066e7 	.word	0x080066e7
 8006628:	080066e7 	.word	0x080066e7
 800662c:	080066e7 	.word	0x080066e7
 8006630:	080066e7 	.word	0x080066e7
 8006634:	080066e7 	.word	0x080066e7
 8006638:	080066b3 	.word	0x080066b3
 800663c:	080066e7 	.word	0x080066e7
 8006640:	080066e7 	.word	0x080066e7
 8006644:	080066e7 	.word	0x080066e7
 8006648:	080066e7 	.word	0x080066e7
 800664c:	080066e7 	.word	0x080066e7
 8006650:	080066e7 	.word	0x080066e7
 8006654:	080066e7 	.word	0x080066e7
 8006658:	080066e7 	.word	0x080066e7
 800665c:	080066e7 	.word	0x080066e7
 8006660:	080066e7 	.word	0x080066e7
 8006664:	080066e7 	.word	0x080066e7
 8006668:	080066e7 	.word	0x080066e7
 800666c:	080066e7 	.word	0x080066e7
 8006670:	080066e7 	.word	0x080066e7
 8006674:	080066e7 	.word	0x080066e7
 8006678:	080066d9 	.word	0x080066d9
 800667c:	2b40      	cmp	r3, #64	@ 0x40
 800667e:	d02e      	beq.n	80066de <UART_SetConfig+0xa36>
 8006680:	e031      	b.n	80066e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006682:	f7fd f8cb 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8006686:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006688:	e033      	b.n	80066f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800668a:	f7fd f8dd 	bl	8003848 <HAL_RCC_GetPCLK2Freq>
 800668e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006690:	e02f      	b.n	80066f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe fb4e 	bl	8004d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800669c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a0:	e027      	b.n	80066f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a2:	f107 0318 	add.w	r3, r7, #24
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fe fc9a 	bl	8004fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066b0:	e01f      	b.n	80066f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006768 <UART_SetConfig+0xac0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066be:	4b2a      	ldr	r3, [pc, #168]	@ (8006768 <UART_SetConfig+0xac0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	08db      	lsrs	r3, r3, #3
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	4a28      	ldr	r2, [pc, #160]	@ (800676c <UART_SetConfig+0xac4>)
 80066ca:	fa22 f303 	lsr.w	r3, r2, r3
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066d0:	e00f      	b.n	80066f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80066d2:	4b26      	ldr	r3, [pc, #152]	@ (800676c <UART_SetConfig+0xac4>)
 80066d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066d6:	e00c      	b.n	80066f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066d8:	4b25      	ldr	r3, [pc, #148]	@ (8006770 <UART_SetConfig+0xac8>)
 80066da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066dc:	e009      	b.n	80066f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066e4:	e005      	b.n	80066f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80066f0:	bf00      	nop
    }

    if (pclk != 0U)
 80066f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d021      	beq.n	800673c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006774 <UART_SetConfig+0xacc>)
 80066fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006702:	461a      	mov	r2, r3
 8006704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006706:	fbb3 f2f2 	udiv	r2, r3, r2
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	441a      	add	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	fbb2 f3f3 	udiv	r3, r2, r3
 800671a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800671c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671e:	2b0f      	cmp	r3, #15
 8006720:	d909      	bls.n	8006736 <UART_SetConfig+0xa8e>
 8006722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006728:	d205      	bcs.n	8006736 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	b29a      	uxth	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	e002      	b.n	800673c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2201      	movs	r2, #1
 8006740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2201      	movs	r2, #1
 8006748:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2200      	movs	r2, #0
 8006750:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2200      	movs	r2, #0
 8006756:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006758:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800675c:	4618      	mov	r0, r3
 800675e:	3748      	adds	r7, #72	@ 0x48
 8006760:	46bd      	mov	sp, r7
 8006762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006766:	bf00      	nop
 8006768:	58024400 	.word	0x58024400
 800676c:	03d09000 	.word	0x03d09000
 8006770:	003d0900 	.word	0x003d0900
 8006774:	0800aec0 	.word	0x0800aec0

08006778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	f003 0310 	and.w	r3, r3, #16
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01a      	beq.n	800688e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006876:	d10a      	bne.n	800688e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	605a      	str	r2, [r3, #4]
  }
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b098      	sub	sp, #96	@ 0x60
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068cc:	f7fa ff44 	bl	8001758 <HAL_GetTick>
 80068d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d12f      	bne.n	8006940 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068e8:	2200      	movs	r2, #0
 80068ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f88e 	bl	8006a10 <UART_WaitOnFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d022      	beq.n	8006940 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800690e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006918:	647b      	str	r3, [r7, #68]	@ 0x44
 800691a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800691e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e6      	bne.n	80068fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2220      	movs	r2, #32
 8006930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e063      	b.n	8006a08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b04      	cmp	r3, #4
 800694c:	d149      	bne.n	80069e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800694e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006956:	2200      	movs	r2, #0
 8006958:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f857 	bl	8006a10 <UART_WaitOnFlagUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d03c      	beq.n	80069e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	623b      	str	r3, [r7, #32]
   return(result);
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800697c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006986:	633b      	str	r3, [r7, #48]	@ 0x30
 8006988:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800698c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e6      	bne.n	8006968 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3308      	adds	r3, #8
 80069a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f023 0301 	bic.w	r3, r3, #1
 80069b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3308      	adds	r3, #8
 80069b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ba:	61fa      	str	r2, [r7, #28]
 80069bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	69b9      	ldr	r1, [r7, #24]
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	617b      	str	r3, [r7, #20]
   return(result);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e5      	bne.n	800699a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e012      	b.n	8006a08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3758      	adds	r7, #88	@ 0x58
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a20:	e04f      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a28:	d04b      	beq.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a2a:	f7fa fe95 	bl	8001758 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d302      	bcc.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e04e      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d037      	beq.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b80      	cmp	r3, #128	@ 0x80
 8006a56:	d034      	beq.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b40      	cmp	r3, #64	@ 0x40
 8006a5c:	d031      	beq.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f003 0308 	and.w	r3, r3, #8
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d110      	bne.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2208      	movs	r2, #8
 8006a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f839 	bl	8006aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e029      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a9c:	d111      	bne.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f81f 	bl	8006aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e00f      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4013      	ands	r3, r2
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	bf0c      	ite	eq
 8006ad2:	2301      	moveq	r3, #1
 8006ad4:	2300      	movne	r3, #0
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d0a0      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b095      	sub	sp, #84	@ 0x54
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e6      	bne.n	8006af4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	4b1e      	ldr	r3, [pc, #120]	@ (8006bb4 <UART_EndRxTransfer+0xc8>)
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3308      	adds	r3, #8
 8006b44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e5      	bne.n	8006b26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d118      	bne.n	8006b94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f023 0310 	bic.w	r3, r3, #16
 8006b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6979      	ldr	r1, [r7, #20]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	e841 2300 	strex	r3, r2, [r1]
 8006b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1e6      	bne.n	8006b62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ba8:	bf00      	nop
 8006baa:	3754      	adds	r7, #84	@ 0x54
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	effffffe 	.word	0xeffffffe

08006bb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_UARTEx_DisableFifoMode+0x16>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e027      	b.n	8006c1e <HAL_UARTEx_DisableFifoMode+0x66>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2224      	movs	r2, #36	@ 0x24
 8006bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0201 	bic.w	r2, r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e02d      	b.n	8006c9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2224      	movs	r2, #36	@ 0x24
 8006c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0201 	bic.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f850 	bl	8006d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e02d      	b.n	8006d1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2224      	movs	r2, #36	@ 0x24
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0201 	bic.w	r2, r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f812 	bl	8006d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d108      	bne.n	8006d46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d44:	e031      	b.n	8006daa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d46:	2310      	movs	r3, #16
 8006d48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	0e5b      	lsrs	r3, r3, #25
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	0f5b      	lsrs	r3, r3, #29
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	7b3a      	ldrb	r2, [r7, #12]
 8006d72:	4911      	ldr	r1, [pc, #68]	@ (8006db8 <UARTEx_SetNbDataToProcess+0x94>)
 8006d74:	5c8a      	ldrb	r2, [r1, r2]
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d7a:	7b3a      	ldrb	r2, [r7, #12]
 8006d7c:	490f      	ldr	r1, [pc, #60]	@ (8006dbc <UARTEx_SetNbDataToProcess+0x98>)
 8006d7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d80:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	7b7a      	ldrb	r2, [r7, #13]
 8006d90:	4909      	ldr	r1, [pc, #36]	@ (8006db8 <UARTEx_SetNbDataToProcess+0x94>)
 8006d92:	5c8a      	ldrb	r2, [r1, r2]
 8006d94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d98:	7b7a      	ldrb	r2, [r7, #13]
 8006d9a:	4908      	ldr	r1, [pc, #32]	@ (8006dbc <UARTEx_SetNbDataToProcess+0x98>)
 8006d9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	0800aed8 	.word	0x0800aed8
 8006dbc:	0800aee0 	.word	0x0800aee0

08006dc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	f107 001c 	add.w	r0, r7, #28
 8006dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d121      	bne.n	8006e1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	4b2c      	ldr	r3, [pc, #176]	@ (8006e9c <USB_CoreInit+0xdc>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d105      	bne.n	8006e12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 faaa 	bl	800736c <USB_CoreReset>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]
 8006e1c:	e01b      	b.n	8006e56 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa9e 	bl	800736c <USB_CoreReset>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e48:	e005      	b.n	8006e56 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e56:	7fbb      	ldrb	r3, [r7, #30]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d116      	bne.n	8006e8a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <USB_CoreInit+0xe0>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f043 0206 	orr.w	r2, r3, #6
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f043 0220 	orr.w	r2, r3, #32
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e96:	b004      	add	sp, #16
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	ffbdffbf 	.word	0xffbdffbf
 8006ea0:	03ee0000 	.word	0x03ee0000

08006ea4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f023 0201 	bic.w	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ee2:	78fb      	ldrb	r3, [r7, #3]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d115      	bne.n	8006f14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ef4:	200a      	movs	r0, #10
 8006ef6:	f7fa fc3b 	bl	8001770 <HAL_Delay>
      ms += 10U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	330a      	adds	r3, #10
 8006efe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fa25 	bl	8007350 <USB_GetMode>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d01e      	beq.n	8006f4a <USB_SetCurrentMode+0x84>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f10:	d9f0      	bls.n	8006ef4 <USB_SetCurrentMode+0x2e>
 8006f12:	e01a      	b.n	8006f4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d115      	bne.n	8006f46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f26:	200a      	movs	r0, #10
 8006f28:	f7fa fc22 	bl	8001770 <HAL_Delay>
      ms += 10U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	330a      	adds	r3, #10
 8006f30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa0c 	bl	8007350 <USB_GetMode>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d005      	beq.n	8006f4a <USB_SetCurrentMode+0x84>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f42:	d9f0      	bls.n	8006f26 <USB_SetCurrentMode+0x60>
 8006f44:	e001      	b.n	8006f4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e005      	b.n	8006f56 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f4e:	d101      	bne.n	8006f54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f60:	b084      	sub	sp, #16
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	e009      	b.n	8006f94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3340      	adds	r3, #64	@ 0x40
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	3301      	adds	r3, #1
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2b0e      	cmp	r3, #14
 8006f98:	d9f2      	bls.n	8006f80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d11c      	bne.n	8006fdc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fb0:	f043 0302 	orr.w	r3, r3, #2
 8006fb4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e005      	b.n	8006fe8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ff4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d10d      	bne.n	8007018 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007004:	2100      	movs	r1, #0
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f968 	bl	80072dc <USB_SetDevSpeed>
 800700c:	e008      	b.n	8007020 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800700e:	2101      	movs	r1, #1
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f963 	bl	80072dc <USB_SetDevSpeed>
 8007016:	e003      	b.n	8007020 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007018:	2103      	movs	r1, #3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f95e 	bl	80072dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007020:	2110      	movs	r1, #16
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f8fa 	bl	800721c <USB_FlushTxFifo>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f924 	bl	8007280 <USB_FlushRxFifo>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007048:	461a      	mov	r2, r3
 800704a:	2300      	movs	r3, #0
 800704c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007054:	461a      	mov	r2, r3
 8007056:	2300      	movs	r3, #0
 8007058:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007060:	461a      	mov	r2, r3
 8007062:	2300      	movs	r3, #0
 8007064:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007066:	2300      	movs	r3, #0
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	e043      	b.n	80070f4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800707e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007082:	d118      	bne.n	80070b6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007096:	461a      	mov	r2, r3
 8007098:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	e013      	b.n	80070c8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ac:	461a      	mov	r2, r3
 80070ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	e008      	b.n	80070c8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c2:	461a      	mov	r2, r3
 80070c4:	2300      	movs	r3, #0
 80070c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d4:	461a      	mov	r2, r3
 80070d6:	2300      	movs	r3, #0
 80070d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e6:	461a      	mov	r2, r3
 80070e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	3301      	adds	r3, #1
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070f8:	461a      	mov	r2, r3
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d3b5      	bcc.n	800706c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007100:	2300      	movs	r3, #0
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	e043      	b.n	800718e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800711c:	d118      	bne.n	8007150 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007130:	461a      	mov	r2, r3
 8007132:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	e013      	b.n	8007162 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007146:	461a      	mov	r2, r3
 8007148:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	e008      	b.n	8007162 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800715c:	461a      	mov	r2, r3
 800715e:	2300      	movs	r3, #0
 8007160:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716e:	461a      	mov	r2, r3
 8007170:	2300      	movs	r3, #0
 8007172:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007180:	461a      	mov	r2, r3
 8007182:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007186:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	3301      	adds	r3, #1
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007192:	461a      	mov	r2, r3
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	4293      	cmp	r3, r2
 8007198:	d3b5      	bcc.n	8007106 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80071ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d105      	bne.n	80071d0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	f043 0210 	orr.w	r2, r3, #16
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699a      	ldr	r2, [r3, #24]
 80071d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007214 <USB_DevInit+0x2b4>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f043 0208 	orr.w	r2, r3, #8
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d105      	bne.n	8007204 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	4b06      	ldr	r3, [pc, #24]	@ (8007218 <USB_DevInit+0x2b8>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007204:	7dfb      	ldrb	r3, [r7, #23]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007210:	b004      	add	sp, #16
 8007212:	4770      	bx	lr
 8007214:	803c3800 	.word	0x803c3800
 8007218:	40000004 	.word	0x40000004

0800721c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007236:	d901      	bls.n	800723c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e01b      	b.n	8007274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	daf2      	bge.n	800722a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	019b      	lsls	r3, r3, #6
 800724c:	f043 0220 	orr.w	r2, r3, #32
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007260:	d901      	bls.n	8007266 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e006      	b.n	8007274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b20      	cmp	r3, #32
 8007270:	d0f0      	beq.n	8007254 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007298:	d901      	bls.n	800729e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e018      	b.n	80072d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	daf2      	bge.n	800728c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2210      	movs	r2, #16
 80072ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072bc:	d901      	bls.n	80072c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e006      	b.n	80072d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	2b10      	cmp	r3, #16
 80072cc:	d0f0      	beq.n	80072b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072fc:	4313      	orrs	r3, r2
 80072fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007328:	f023 0303 	bic.w	r3, r3, #3
 800732c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800733c:	f043 0302 	orr.w	r3, r3, #2
 8007340:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	f003 0301 	and.w	r3, r3, #1
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007384:	d901      	bls.n	800738a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e01b      	b.n	80073c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	daf2      	bge.n	8007378 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f043 0201 	orr.w	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073ae:	d901      	bls.n	80073b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e006      	b.n	80073c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d0f0      	beq.n	80073a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <__NVIC_SetPriority>:
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80073dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	db0a      	blt.n	80073fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	490c      	ldr	r1, [pc, #48]	@ (800741c <__NVIC_SetPriority+0x4c>)
 80073ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073ee:	0112      	lsls	r2, r2, #4
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	440b      	add	r3, r1
 80073f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80073f8:	e00a      	b.n	8007410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	4908      	ldr	r1, [pc, #32]	@ (8007420 <__NVIC_SetPriority+0x50>)
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	f003 030f 	and.w	r3, r3, #15
 8007406:	3b04      	subs	r3, #4
 8007408:	0112      	lsls	r2, r2, #4
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	440b      	add	r3, r1
 800740e:	761a      	strb	r2, [r3, #24]
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	e000e100 	.word	0xe000e100
 8007420:	e000ed00 	.word	0xe000ed00

08007424 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007428:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <SysTick_Handler+0x1c>)
 800742a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800742c:	f001 ff34 	bl	8009298 <xTaskGetSchedulerState>
 8007430:	4603      	mov	r3, r0
 8007432:	2b01      	cmp	r3, #1
 8007434:	d001      	beq.n	800743a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007436:	f002 fd2f 	bl	8009e98 <xPortSysTickHandler>
  }
}
 800743a:	bf00      	nop
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	e000e010 	.word	0xe000e010

08007444 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007448:	2100      	movs	r1, #0
 800744a:	f06f 0004 	mvn.w	r0, #4
 800744e:	f7ff ffbf 	bl	80073d0 <__NVIC_SetPriority>
#endif
}
 8007452:	bf00      	nop
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800745e:	f3ef 8305 	mrs	r3, IPSR
 8007462:	603b      	str	r3, [r7, #0]
  return(result);
 8007464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800746a:	f06f 0305 	mvn.w	r3, #5
 800746e:	607b      	str	r3, [r7, #4]
 8007470:	e00c      	b.n	800748c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007472:	4b0a      	ldr	r3, [pc, #40]	@ (800749c <osKernelInitialize+0x44>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800747a:	4b08      	ldr	r3, [pc, #32]	@ (800749c <osKernelInitialize+0x44>)
 800747c:	2201      	movs	r2, #1
 800747e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007480:	2300      	movs	r3, #0
 8007482:	607b      	str	r3, [r7, #4]
 8007484:	e002      	b.n	800748c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007486:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800748a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800748c:	687b      	ldr	r3, [r7, #4]
}
 800748e:	4618      	mov	r0, r3
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	2400080c 	.word	0x2400080c

080074a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a6:	f3ef 8305 	mrs	r3, IPSR
 80074aa:	603b      	str	r3, [r7, #0]
  return(result);
 80074ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80074b2:	f06f 0305 	mvn.w	r3, #5
 80074b6:	607b      	str	r3, [r7, #4]
 80074b8:	e010      	b.n	80074dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074ba:	4b0b      	ldr	r3, [pc, #44]	@ (80074e8 <osKernelStart+0x48>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d109      	bne.n	80074d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074c2:	f7ff ffbf 	bl	8007444 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074c6:	4b08      	ldr	r3, [pc, #32]	@ (80074e8 <osKernelStart+0x48>)
 80074c8:	2202      	movs	r2, #2
 80074ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074cc:	f001 fa80 	bl	80089d0 <vTaskStartScheduler>
      stat = osOK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	607b      	str	r3, [r7, #4]
 80074d4:	e002      	b.n	80074dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074dc:	687b      	ldr	r3, [r7, #4]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	2400080c 	.word	0x2400080c

080074ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08e      	sub	sp, #56	@ 0x38
 80074f0:	af04      	add	r7, sp, #16
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fc:	f3ef 8305 	mrs	r3, IPSR
 8007500:	617b      	str	r3, [r7, #20]
  return(result);
 8007502:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007504:	2b00      	cmp	r3, #0
 8007506:	d17e      	bne.n	8007606 <osThreadNew+0x11a>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d07b      	beq.n	8007606 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800750e:	2380      	movs	r3, #128	@ 0x80
 8007510:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007512:	2318      	movs	r3, #24
 8007514:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800751a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800751e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d045      	beq.n	80075b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <osThreadNew+0x48>
        name = attr->name;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d008      	beq.n	800755a <osThreadNew+0x6e>
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	2b38      	cmp	r3, #56	@ 0x38
 800754c:	d805      	bhi.n	800755a <osThreadNew+0x6e>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <osThreadNew+0x72>
        return (NULL);
 800755a:	2300      	movs	r3, #0
 800755c:	e054      	b.n	8007608 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	089b      	lsrs	r3, r3, #2
 800756c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00e      	beq.n	8007594 <osThreadNew+0xa8>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	2ba7      	cmp	r3, #167	@ 0xa7
 800757c:	d90a      	bls.n	8007594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007582:	2b00      	cmp	r3, #0
 8007584:	d006      	beq.n	8007594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <osThreadNew+0xa8>
        mem = 1;
 800758e:	2301      	movs	r3, #1
 8007590:	61bb      	str	r3, [r7, #24]
 8007592:	e010      	b.n	80075b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10c      	bne.n	80075b6 <osThreadNew+0xca>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d108      	bne.n	80075b6 <osThreadNew+0xca>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <osThreadNew+0xca>
          mem = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	61bb      	str	r3, [r7, #24]
 80075b0:	e001      	b.n	80075b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d110      	bne.n	80075de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075c4:	9202      	str	r2, [sp, #8]
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6a3a      	ldr	r2, [r7, #32]
 80075d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f001 f808 	bl	80085e8 <xTaskCreateStatic>
 80075d8:	4603      	mov	r3, r0
 80075da:	613b      	str	r3, [r7, #16]
 80075dc:	e013      	b.n	8007606 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d110      	bne.n	8007606 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	f107 0310 	add.w	r3, r7, #16
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f001 f856 	bl	80086a8 <xTaskCreate>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d001      	beq.n	8007606 <osThreadNew+0x11a>
            hTask = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007606:	693b      	ldr	r3, [r7, #16]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3728      	adds	r7, #40	@ 0x28
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007618:	f3ef 8305 	mrs	r3, IPSR
 800761c:	60bb      	str	r3, [r7, #8]
  return(result);
 800761e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007620:	2b00      	cmp	r3, #0
 8007622:	d003      	beq.n	800762c <osDelay+0x1c>
    stat = osErrorISR;
 8007624:	f06f 0305 	mvn.w	r3, #5
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	e007      	b.n	800763c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800762c:	2300      	movs	r3, #0
 800762e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 f994 	bl	8008964 <vTaskDelay>
    }
  }

  return (stat);
 800763c:	68fb      	ldr	r3, [r7, #12]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007646:	b580      	push	{r7, lr}
 8007648:	b08a      	sub	sp, #40	@ 0x28
 800764a:	af02      	add	r7, sp, #8
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007652:	2300      	movs	r3, #0
 8007654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007656:	f3ef 8305 	mrs	r3, IPSR
 800765a:	613b      	str	r3, [r7, #16]
  return(result);
 800765c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800765e:	2b00      	cmp	r3, #0
 8007660:	d15f      	bne.n	8007722 <osMessageQueueNew+0xdc>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d05c      	beq.n	8007722 <osMessageQueueNew+0xdc>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d059      	beq.n	8007722 <osMessageQueueNew+0xdc>
    mem = -1;
 800766e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007672:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d029      	beq.n	80076ce <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d012      	beq.n	80076a8 <osMessageQueueNew+0x62>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2b4f      	cmp	r3, #79	@ 0x4f
 8007688:	d90e      	bls.n	80076a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	68b9      	ldr	r1, [r7, #8]
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	429a      	cmp	r2, r3
 80076a0:	d302      	bcc.n	80076a8 <osMessageQueueNew+0x62>
        mem = 1;
 80076a2:	2301      	movs	r3, #1
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	e014      	b.n	80076d2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d110      	bne.n	80076d2 <osMessageQueueNew+0x8c>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10c      	bne.n	80076d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d108      	bne.n	80076d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <osMessageQueueNew+0x8c>
          mem = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	e001      	b.n	80076d2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d10b      	bne.n	80076f0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	2100      	movs	r1, #0
 80076e2:	9100      	str	r1, [sp, #0]
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 fa30 	bl	8007b4c <xQueueGenericCreateStatic>
 80076ec:	61f8      	str	r0, [r7, #28]
 80076ee:	e008      	b.n	8007702 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d105      	bne.n	8007702 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80076f6:	2200      	movs	r2, #0
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 faa3 	bl	8007c46 <xQueueGenericCreate>
 8007700:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00c      	beq.n	8007722 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <osMessageQueueNew+0xd0>
        name = attr->name;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	e001      	b.n	800771a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800771a:	6979      	ldr	r1, [r7, #20]
 800771c:	69f8      	ldr	r0, [r7, #28]
 800771e:	f000 ff05 	bl	800852c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007722:	69fb      	ldr	r3, [r7, #28]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3720      	adds	r7, #32
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007740:	2300      	movs	r3, #0
 8007742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007744:	f3ef 8305 	mrs	r3, IPSR
 8007748:	617b      	str	r3, [r7, #20]
  return(result);
 800774a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800774c:	2b00      	cmp	r3, #0
 800774e:	d028      	beq.n	80077a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d005      	beq.n	8007762 <osMessageQueuePut+0x36>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <osMessageQueuePut+0x36>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007762:	f06f 0303 	mvn.w	r3, #3
 8007766:	61fb      	str	r3, [r7, #28]
 8007768:	e038      	b.n	80077dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800776a:	2300      	movs	r3, #0
 800776c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800776e:	f107 0210 	add.w	r2, r7, #16
 8007772:	2300      	movs	r3, #0
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	69b8      	ldr	r0, [r7, #24]
 8007778:	f000 fbc6 	bl	8007f08 <xQueueGenericSendFromISR>
 800777c:	4603      	mov	r3, r0
 800777e:	2b01      	cmp	r3, #1
 8007780:	d003      	beq.n	800778a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007782:	f06f 0302 	mvn.w	r3, #2
 8007786:	61fb      	str	r3, [r7, #28]
 8007788:	e028      	b.n	80077dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d025      	beq.n	80077dc <osMessageQueuePut+0xb0>
 8007790:	4b15      	ldr	r3, [pc, #84]	@ (80077e8 <osMessageQueuePut+0xbc>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	e01c      	b.n	80077dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <osMessageQueuePut+0x82>
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d103      	bne.n	80077b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80077ae:	f06f 0303 	mvn.w	r3, #3
 80077b2:	61fb      	str	r3, [r7, #28]
 80077b4:	e012      	b.n	80077dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80077b6:	2300      	movs	r3, #0
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	69b8      	ldr	r0, [r7, #24]
 80077be:	f000 faa1 	bl	8007d04 <xQueueGenericSend>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d009      	beq.n	80077dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80077ce:	f06f 0301 	mvn.w	r3, #1
 80077d2:	61fb      	str	r3, [r7, #28]
 80077d4:	e002      	b.n	80077dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80077d6:	f06f 0302 	mvn.w	r3, #2
 80077da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80077dc:	69fb      	ldr	r3, [r7, #28]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3720      	adds	r7, #32
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	e000ed04 	.word	0xe000ed04

080077ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007802:	f3ef 8305 	mrs	r3, IPSR
 8007806:	617b      	str	r3, [r7, #20]
  return(result);
 8007808:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800780a:	2b00      	cmp	r3, #0
 800780c:	d028      	beq.n	8007860 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <osMessageQueueGet+0x34>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <osMessageQueueGet+0x34>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007820:	f06f 0303 	mvn.w	r3, #3
 8007824:	61fb      	str	r3, [r7, #28]
 8007826:	e037      	b.n	8007898 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007828:	2300      	movs	r3, #0
 800782a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800782c:	f107 0310 	add.w	r3, r7, #16
 8007830:	461a      	mov	r2, r3
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	69b8      	ldr	r0, [r7, #24]
 8007836:	f000 fce7 	bl	8008208 <xQueueReceiveFromISR>
 800783a:	4603      	mov	r3, r0
 800783c:	2b01      	cmp	r3, #1
 800783e:	d003      	beq.n	8007848 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007840:	f06f 0302 	mvn.w	r3, #2
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	e027      	b.n	8007898 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d024      	beq.n	8007898 <osMessageQueueGet+0xac>
 800784e:	4b15      	ldr	r3, [pc, #84]	@ (80078a4 <osMessageQueueGet+0xb8>)
 8007850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	e01b      	b.n	8007898 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <osMessageQueueGet+0x80>
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800786c:	f06f 0303 	mvn.w	r3, #3
 8007870:	61fb      	str	r3, [r7, #28]
 8007872:	e011      	b.n	8007898 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	68b9      	ldr	r1, [r7, #8]
 8007878:	69b8      	ldr	r0, [r7, #24]
 800787a:	f000 fbe3 	bl	8008044 <xQueueReceive>
 800787e:	4603      	mov	r3, r0
 8007880:	2b01      	cmp	r3, #1
 8007882:	d009      	beq.n	8007898 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800788a:	f06f 0301 	mvn.w	r3, #1
 800788e:	61fb      	str	r3, [r7, #28]
 8007890:	e002      	b.n	8007898 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007892:	f06f 0302 	mvn.w	r3, #2
 8007896:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007898:	69fb      	ldr	r3, [r7, #28]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3720      	adds	r7, #32
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a07      	ldr	r2, [pc, #28]	@ (80078d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80078b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4a06      	ldr	r2, [pc, #24]	@ (80078d8 <vApplicationGetIdleTaskMemory+0x30>)
 80078be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2280      	movs	r2, #128	@ 0x80
 80078c4:	601a      	str	r2, [r3, #0]
}
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	24000810 	.word	0x24000810
 80078d8:	240008b8 	.word	0x240008b8

080078dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a07      	ldr	r2, [pc, #28]	@ (8007908 <vApplicationGetTimerTaskMemory+0x2c>)
 80078ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	4a06      	ldr	r2, [pc, #24]	@ (800790c <vApplicationGetTimerTaskMemory+0x30>)
 80078f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078fa:	601a      	str	r2, [r3, #0]
}
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	24000ab8 	.word	0x24000ab8
 800790c:	24000b60 	.word	0x24000b60

08007910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f103 0208 	add.w	r2, r3, #8
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f103 0208 	add.w	r2, r3, #8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f103 0208 	add.w	r2, r3, #8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079b2:	b480      	push	{r7}
 80079b4:	b085      	sub	sp, #20
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079c8:	d103      	bne.n	80079d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e00c      	b.n	80079ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3308      	adds	r3, #8
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	e002      	b.n	80079e0 <vListInsert+0x2e>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d2f6      	bcs.n	80079da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	601a      	str	r2, [r3, #0]
}
 8007a18:	bf00      	nop
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6892      	ldr	r2, [r2, #8]
 8007a3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6852      	ldr	r2, [r2, #4]
 8007a44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d103      	bne.n	8007a58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	1e5a      	subs	r2, r3, #1
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10b      	bne.n	8007aa4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a9e:	bf00      	nop
 8007aa0:	bf00      	nop
 8007aa2:	e7fd      	b.n	8007aa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007aa4:	f002 f968 	bl	8009d78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab0:	68f9      	ldr	r1, [r7, #12]
 8007ab2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ab4:	fb01 f303 	mul.w	r3, r1, r3
 8007ab8:	441a      	add	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	68f9      	ldr	r1, [r7, #12]
 8007ad8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ada:	fb01 f303 	mul.w	r3, r1, r3
 8007ade:	441a      	add	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	22ff      	movs	r2, #255	@ 0xff
 8007ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	22ff      	movs	r2, #255	@ 0xff
 8007af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d114      	bne.n	8007b24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d01a      	beq.n	8007b38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3310      	adds	r3, #16
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 fa00 	bl	8008f0c <xTaskRemoveFromEventList>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d012      	beq.n	8007b38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b12:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <xQueueGenericReset+0xd0>)
 8007b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	e009      	b.n	8007b38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3310      	adds	r3, #16
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fef1 	bl	8007910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3324      	adds	r3, #36	@ 0x24
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff feec 	bl	8007910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b38:	f002 f950 	bl	8009ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b3c:	2301      	movs	r3, #1
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08e      	sub	sp, #56	@ 0x38
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10b      	bne.n	8007b78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	e7fd      	b.n	8007b74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10b      	bne.n	8007b96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop
 8007b94:	e7fd      	b.n	8007b92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <xQueueGenericCreateStatic+0x56>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <xQueueGenericCreateStatic+0x5a>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <xQueueGenericCreateStatic+0x5c>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10b      	bne.n	8007bc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	623b      	str	r3, [r7, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	bf00      	nop
 8007bc2:	e7fd      	b.n	8007bc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d102      	bne.n	8007bd0 <xQueueGenericCreateStatic+0x84>
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <xQueueGenericCreateStatic+0x88>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <xQueueGenericCreateStatic+0x8a>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	61fb      	str	r3, [r7, #28]
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	e7fd      	b.n	8007bee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bf2:	2350      	movs	r3, #80	@ 0x50
 8007bf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b50      	cmp	r3, #80	@ 0x50
 8007bfa:	d00b      	beq.n	8007c14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	61bb      	str	r3, [r7, #24]
}
 8007c0e:	bf00      	nop
 8007c10:	bf00      	nop
 8007c12:	e7fd      	b.n	8007c10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00d      	beq.n	8007c3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	4613      	mov	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f840 	bl	8007cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3730      	adds	r7, #48	@ 0x30
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b08a      	sub	sp, #40	@ 0x28
 8007c4a:	af02      	add	r7, sp, #8
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	4613      	mov	r3, r2
 8007c52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10b      	bne.n	8007c72 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	613b      	str	r3, [r7, #16]
}
 8007c6c:	bf00      	nop
 8007c6e:	bf00      	nop
 8007c70:	e7fd      	b.n	8007c6e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	fb02 f303 	mul.w	r3, r2, r3
 8007c7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	3350      	adds	r3, #80	@ 0x50
 8007c80:	4618      	mov	r0, r3
 8007c82:	f002 f99b 	bl	8009fbc <pvPortMalloc>
 8007c86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d011      	beq.n	8007cb2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	3350      	adds	r3, #80	@ 0x50
 8007c96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ca0:	79fa      	ldrb	r2, [r7, #7]
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 f805 	bl	8007cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3720      	adds	r7, #32
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d103      	bne.n	8007cd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	e002      	b.n	8007cde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cea:	2101      	movs	r1, #1
 8007cec:	69b8      	ldr	r0, [r7, #24]
 8007cee:	f7ff fec3 	bl	8007a78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08e      	sub	sp, #56	@ 0x38
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d12:	2300      	movs	r3, #0
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10b      	bne.n	8007d38 <xQueueGenericSend+0x34>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d103      	bne.n	8007d46 <xQueueGenericSend+0x42>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <xQueueGenericSend+0x46>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e000      	b.n	8007d4c <xQueueGenericSend+0x48>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10b      	bne.n	8007d68 <xQueueGenericSend+0x64>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	e7fd      	b.n	8007d64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d103      	bne.n	8007d76 <xQueueGenericSend+0x72>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <xQueueGenericSend+0x76>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e000      	b.n	8007d7c <xQueueGenericSend+0x78>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10b      	bne.n	8007d98 <xQueueGenericSend+0x94>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	623b      	str	r3, [r7, #32]
}
 8007d92:	bf00      	nop
 8007d94:	bf00      	nop
 8007d96:	e7fd      	b.n	8007d94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d98:	f001 fa7e 	bl	8009298 <xTaskGetSchedulerState>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d102      	bne.n	8007da8 <xQueueGenericSend+0xa4>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <xQueueGenericSend+0xa8>
 8007da8:	2301      	movs	r3, #1
 8007daa:	e000      	b.n	8007dae <xQueueGenericSend+0xaa>
 8007dac:	2300      	movs	r3, #0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10b      	bne.n	8007dca <xQueueGenericSend+0xc6>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	61fb      	str	r3, [r7, #28]
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop
 8007dc8:	e7fd      	b.n	8007dc6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dca:	f001 ffd5 	bl	8009d78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d302      	bcc.n	8007de0 <xQueueGenericSend+0xdc>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d129      	bne.n	8007e34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007de6:	f000 fa91 	bl	800830c <prvCopyDataToQueue>
 8007dea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d010      	beq.n	8007e16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df6:	3324      	adds	r3, #36	@ 0x24
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 f887 	bl	8008f0c <xTaskRemoveFromEventList>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d013      	beq.n	8007e2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e04:	4b3f      	ldr	r3, [pc, #252]	@ (8007f04 <xQueueGenericSend+0x200>)
 8007e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	e00a      	b.n	8007e2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d007      	beq.n	8007e2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e1c:	4b39      	ldr	r3, [pc, #228]	@ (8007f04 <xQueueGenericSend+0x200>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e2c:	f001 ffd6 	bl	8009ddc <vPortExitCritical>
				return pdPASS;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e063      	b.n	8007efc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e3a:	f001 ffcf 	bl	8009ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	e05c      	b.n	8007efc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d106      	bne.n	8007e56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e48:	f107 0314 	add.w	r3, r7, #20
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 f8c1 	bl	8008fd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e52:	2301      	movs	r3, #1
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e56:	f001 ffc1 	bl	8009ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e5a:	f000 fe29 	bl	8008ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e5e:	f001 ff8b 	bl	8009d78 <vPortEnterCritical>
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e68:	b25b      	sxtb	r3, r3
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e6e:	d103      	bne.n	8007e78 <xQueueGenericSend+0x174>
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e7e:	b25b      	sxtb	r3, r3
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e84:	d103      	bne.n	8007e8e <xQueueGenericSend+0x18a>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e8e:	f001 ffa5 	bl	8009ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e92:	1d3a      	adds	r2, r7, #4
 8007e94:	f107 0314 	add.w	r3, r7, #20
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 f8b0 	bl	8009000 <xTaskCheckForTimeOut>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d124      	bne.n	8007ef0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ea6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ea8:	f000 fb28 	bl	80084fc <prvIsQueueFull>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d018      	beq.n	8007ee4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	3310      	adds	r3, #16
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 ffd4 	bl	8008e68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ec2:	f000 fab3 	bl	800842c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ec6:	f000 fe01 	bl	8008acc <xTaskResumeAll>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f47f af7c 	bne.w	8007dca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f04 <xQueueGenericSend+0x200>)
 8007ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	e772      	b.n	8007dca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ee4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ee6:	f000 faa1 	bl	800842c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eea:	f000 fdef 	bl	8008acc <xTaskResumeAll>
 8007eee:	e76c      	b.n	8007dca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ef2:	f000 fa9b 	bl	800842c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ef6:	f000 fde9 	bl	8008acc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007efa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3738      	adds	r7, #56	@ 0x38
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	e000ed04 	.word	0xe000ed04

08007f08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b090      	sub	sp, #64	@ 0x40
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <xQueueGenericSendFromISR+0x3e>
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <xQueueGenericSendFromISR+0x42>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueGenericSendFromISR+0x44>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10b      	bne.n	8007f68 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f62:	bf00      	nop
 8007f64:	bf00      	nop
 8007f66:	e7fd      	b.n	8007f64 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d103      	bne.n	8007f76 <xQueueGenericSendFromISR+0x6e>
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <xQueueGenericSendFromISR+0x72>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xQueueGenericSendFromISR+0x74>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10b      	bne.n	8007f98 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	623b      	str	r3, [r7, #32]
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	e7fd      	b.n	8007f94 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f98:	f001 ffce 	bl	8009f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f9c:	f3ef 8211 	mrs	r2, BASEPRI
 8007fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	61fa      	str	r2, [r7, #28]
 8007fb2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007fb4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fb6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d302      	bcc.n	8007fca <xQueueGenericSendFromISR+0xc2>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d12f      	bne.n	800802a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fe0:	f000 f994 	bl	800830c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fe4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fec:	d112      	bne.n	8008014 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d016      	beq.n	8008024 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff8:	3324      	adds	r3, #36	@ 0x24
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 ff86 	bl	8008f0c <xTaskRemoveFromEventList>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00e      	beq.n	8008024 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e007      	b.n	8008024 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008014:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008018:	3301      	adds	r3, #1
 800801a:	b2db      	uxtb	r3, r3
 800801c:	b25a      	sxtb	r2, r3
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008024:	2301      	movs	r3, #1
 8008026:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008028:	e001      	b.n	800802e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800802a:	2300      	movs	r3, #0
 800802c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800802e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008030:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008038:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800803a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800803c:	4618      	mov	r0, r3
 800803e:	3740      	adds	r7, #64	@ 0x40
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08c      	sub	sp, #48	@ 0x30
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008050:	2300      	movs	r3, #0
 8008052:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10b      	bne.n	8008076 <xQueueReceive+0x32>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	623b      	str	r3, [r7, #32]
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	e7fd      	b.n	8008072 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d103      	bne.n	8008084 <xQueueReceive+0x40>
 800807c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <xQueueReceive+0x44>
 8008084:	2301      	movs	r3, #1
 8008086:	e000      	b.n	800808a <xQueueReceive+0x46>
 8008088:	2300      	movs	r3, #0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10b      	bne.n	80080a6 <xQueueReceive+0x62>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	61fb      	str	r3, [r7, #28]
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	e7fd      	b.n	80080a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080a6:	f001 f8f7 	bl	8009298 <xTaskGetSchedulerState>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <xQueueReceive+0x72>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <xQueueReceive+0x76>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <xQueueReceive+0x78>
 80080ba:	2300      	movs	r3, #0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10b      	bne.n	80080d8 <xQueueReceive+0x94>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	61bb      	str	r3, [r7, #24]
}
 80080d2:	bf00      	nop
 80080d4:	bf00      	nop
 80080d6:	e7fd      	b.n	80080d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080d8:	f001 fe4e 	bl	8009d78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01f      	beq.n	8008128 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080e8:	68b9      	ldr	r1, [r7, #8]
 80080ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080ec:	f000 f978 	bl	80083e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	1e5a      	subs	r2, r3, #1
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00f      	beq.n	8008120 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008102:	3310      	adds	r3, #16
 8008104:	4618      	mov	r0, r3
 8008106:	f000 ff01 	bl	8008f0c <xTaskRemoveFromEventList>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d007      	beq.n	8008120 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008110:	4b3c      	ldr	r3, [pc, #240]	@ (8008204 <xQueueReceive+0x1c0>)
 8008112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008120:	f001 fe5c 	bl	8009ddc <vPortExitCritical>
				return pdPASS;
 8008124:	2301      	movs	r3, #1
 8008126:	e069      	b.n	80081fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d103      	bne.n	8008136 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800812e:	f001 fe55 	bl	8009ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008132:	2300      	movs	r3, #0
 8008134:	e062      	b.n	80081fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008138:	2b00      	cmp	r3, #0
 800813a:	d106      	bne.n	800814a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800813c:	f107 0310 	add.w	r3, r7, #16
 8008140:	4618      	mov	r0, r3
 8008142:	f000 ff47 	bl	8008fd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008146:	2301      	movs	r3, #1
 8008148:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800814a:	f001 fe47 	bl	8009ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800814e:	f000 fcaf 	bl	8008ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008152:	f001 fe11 	bl	8009d78 <vPortEnterCritical>
 8008156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008158:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800815c:	b25b      	sxtb	r3, r3
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008162:	d103      	bne.n	800816c <xQueueReceive+0x128>
 8008164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800816c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008172:	b25b      	sxtb	r3, r3
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008178:	d103      	bne.n	8008182 <xQueueReceive+0x13e>
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008182:	f001 fe2b 	bl	8009ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008186:	1d3a      	adds	r2, r7, #4
 8008188:	f107 0310 	add.w	r3, r7, #16
 800818c:	4611      	mov	r1, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f000 ff36 	bl	8009000 <xTaskCheckForTimeOut>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d123      	bne.n	80081e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800819a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800819c:	f000 f998 	bl	80084d0 <prvIsQueueEmpty>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d017      	beq.n	80081d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	3324      	adds	r3, #36	@ 0x24
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	4611      	mov	r1, r2
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fe5a 	bl	8008e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081b6:	f000 f939 	bl	800842c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081ba:	f000 fc87 	bl	8008acc <xTaskResumeAll>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d189      	bne.n	80080d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80081c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008204 <xQueueReceive+0x1c0>)
 80081c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	e780      	b.n	80080d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081d8:	f000 f928 	bl	800842c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081dc:	f000 fc76 	bl	8008acc <xTaskResumeAll>
 80081e0:	e77a      	b.n	80080d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081e4:	f000 f922 	bl	800842c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081e8:	f000 fc70 	bl	8008acc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ee:	f000 f96f 	bl	80084d0 <prvIsQueueEmpty>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f43f af6f 	beq.w	80080d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3730      	adds	r7, #48	@ 0x30
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	e000ed04 	.word	0xe000ed04

08008208 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08e      	sub	sp, #56	@ 0x38
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10b      	bne.n	8008236 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	623b      	str	r3, [r7, #32]
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	e7fd      	b.n	8008232 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <xQueueReceiveFromISR+0x3c>
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <xQueueReceiveFromISR+0x40>
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <xQueueReceiveFromISR+0x42>
 8008248:	2300      	movs	r3, #0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10b      	bne.n	8008266 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	61fb      	str	r3, [r7, #28]
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	e7fd      	b.n	8008262 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008266:	f001 fe67 	bl	8009f38 <vPortValidateInterruptPriority>
	__asm volatile
 800826a:	f3ef 8211 	mrs	r2, BASEPRI
 800826e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	61ba      	str	r2, [r7, #24]
 8008280:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008282:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008284:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800828c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	d02f      	beq.n	80082f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082a0:	f000 f89e 	bl	80083e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a6:	1e5a      	subs	r2, r3, #1
 80082a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80082ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80082b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082b4:	d112      	bne.n	80082dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d016      	beq.n	80082ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c0:	3310      	adds	r3, #16
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fe22 	bl	8008f0c <xTaskRemoveFromEventList>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00e      	beq.n	80082ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00b      	beq.n	80082ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	e007      	b.n	80082ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80082dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082e0:	3301      	adds	r3, #1
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	b25a      	sxtb	r2, r3
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80082ec:	2301      	movs	r3, #1
 80082ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f0:	e001      	b.n	80082f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f383 8811 	msr	BASEPRI, r3
}
 8008300:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008304:	4618      	mov	r0, r3
 8008306:	3738      	adds	r7, #56	@ 0x38
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008318:	2300      	movs	r3, #0
 800831a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008320:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10d      	bne.n	8008346 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d14d      	bne.n	80083ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	4618      	mov	r0, r3
 8008338:	f000 ffcc 	bl	80092d4 <xTaskPriorityDisinherit>
 800833c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	609a      	str	r2, [r3, #8]
 8008344:	e043      	b.n	80083ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d119      	bne.n	8008380 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6858      	ldr	r0, [r3, #4]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008354:	461a      	mov	r2, r3
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	f002 f8c8 	bl	800a4ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008364:	441a      	add	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	429a      	cmp	r2, r3
 8008374:	d32b      	bcc.n	80083ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	605a      	str	r2, [r3, #4]
 800837e:	e026      	b.n	80083ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68d8      	ldr	r0, [r3, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008388:	461a      	mov	r2, r3
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	f002 f8ae 	bl	800a4ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008398:	425b      	negs	r3, r3
 800839a:	441a      	add	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d207      	bcs.n	80083bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b4:	425b      	negs	r3, r3
 80083b6:	441a      	add	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d105      	bne.n	80083ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80083d6:	697b      	ldr	r3, [r7, #20]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d018      	beq.n	8008424 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fa:	441a      	add	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	429a      	cmp	r2, r3
 800840a:	d303      	bcc.n	8008414 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68d9      	ldr	r1, [r3, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841c:	461a      	mov	r2, r3
 800841e:	6838      	ldr	r0, [r7, #0]
 8008420:	f002 f864 	bl	800a4ec <memcpy>
	}
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008434:	f001 fca0 	bl	8009d78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800843e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008440:	e011      	b.n	8008466 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008446:	2b00      	cmp	r3, #0
 8008448:	d012      	beq.n	8008470 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3324      	adds	r3, #36	@ 0x24
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fd5c 	bl	8008f0c <xTaskRemoveFromEventList>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800845a:	f000 fe35 	bl	80090c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	3b01      	subs	r3, #1
 8008462:	b2db      	uxtb	r3, r3
 8008464:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800846a:	2b00      	cmp	r3, #0
 800846c:	dce9      	bgt.n	8008442 <prvUnlockQueue+0x16>
 800846e:	e000      	b.n	8008472 <prvUnlockQueue+0x46>
					break;
 8008470:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	22ff      	movs	r2, #255	@ 0xff
 8008476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800847a:	f001 fcaf 	bl	8009ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800847e:	f001 fc7b 	bl	8009d78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008488:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800848a:	e011      	b.n	80084b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d012      	beq.n	80084ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3310      	adds	r3, #16
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fd37 	bl	8008f0c <xTaskRemoveFromEventList>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084a4:	f000 fe10 	bl	80090c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dce9      	bgt.n	800848c <prvUnlockQueue+0x60>
 80084b8:	e000      	b.n	80084bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	22ff      	movs	r2, #255	@ 0xff
 80084c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80084c4:	f001 fc8a 	bl	8009ddc <vPortExitCritical>
}
 80084c8:	bf00      	nop
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084d8:	f001 fc4e 	bl	8009d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084e4:	2301      	movs	r3, #1
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	e001      	b.n	80084ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084ee:	f001 fc75 	bl	8009ddc <vPortExitCritical>

	return xReturn;
 80084f2:	68fb      	ldr	r3, [r7, #12]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008504:	f001 fc38 	bl	8009d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008510:	429a      	cmp	r2, r3
 8008512:	d102      	bne.n	800851a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e001      	b.n	800851e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800851e:	f001 fc5d 	bl	8009ddc <vPortExitCritical>

	return xReturn;
 8008522:	68fb      	ldr	r3, [r7, #12]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008536:	2300      	movs	r3, #0
 8008538:	60fb      	str	r3, [r7, #12]
 800853a:	e014      	b.n	8008566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800853c:	4a0f      	ldr	r2, [pc, #60]	@ (800857c <vQueueAddToRegistry+0x50>)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10b      	bne.n	8008560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008548:	490c      	ldr	r1, [pc, #48]	@ (800857c <vQueueAddToRegistry+0x50>)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008552:	4a0a      	ldr	r2, [pc, #40]	@ (800857c <vQueueAddToRegistry+0x50>)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	4413      	add	r3, r2
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800855e:	e006      	b.n	800856e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3301      	adds	r3, #1
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b07      	cmp	r3, #7
 800856a:	d9e7      	bls.n	800853c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	24000f60 	.word	0x24000f60

08008580 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008590:	f001 fbf2 	bl	8009d78 <vPortEnterCritical>
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800859a:	b25b      	sxtb	r3, r3
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085a0:	d103      	bne.n	80085aa <vQueueWaitForMessageRestricted+0x2a>
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085b0:	b25b      	sxtb	r3, r3
 80085b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085b6:	d103      	bne.n	80085c0 <vQueueWaitForMessageRestricted+0x40>
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085c0:	f001 fc0c 	bl	8009ddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d106      	bne.n	80085da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	3324      	adds	r3, #36	@ 0x24
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	68b9      	ldr	r1, [r7, #8]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fc6d 	bl	8008eb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085da:	6978      	ldr	r0, [r7, #20]
 80085dc:	f7ff ff26 	bl	800842c <prvUnlockQueue>
	}
 80085e0:	bf00      	nop
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08e      	sub	sp, #56	@ 0x38
 80085ec:	af04      	add	r7, sp, #16
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10b      	bne.n	8008614 <xTaskCreateStatic+0x2c>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	623b      	str	r3, [r7, #32]
}
 800860e:	bf00      	nop
 8008610:	bf00      	nop
 8008612:	e7fd      	b.n	8008610 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10b      	bne.n	8008632 <xTaskCreateStatic+0x4a>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	61fb      	str	r3, [r7, #28]
}
 800862c:	bf00      	nop
 800862e:	bf00      	nop
 8008630:	e7fd      	b.n	800862e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008632:	23a8      	movs	r3, #168	@ 0xa8
 8008634:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	2ba8      	cmp	r3, #168	@ 0xa8
 800863a:	d00b      	beq.n	8008654 <xTaskCreateStatic+0x6c>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	61bb      	str	r3, [r7, #24]
}
 800864e:	bf00      	nop
 8008650:	bf00      	nop
 8008652:	e7fd      	b.n	8008650 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008654:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01e      	beq.n	800869a <xTaskCreateStatic+0xb2>
 800865c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865e:	2b00      	cmp	r3, #0
 8008660:	d01b      	beq.n	800869a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008664:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008668:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800866a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	2202      	movs	r2, #2
 8008670:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008674:	2300      	movs	r3, #0
 8008676:	9303      	str	r3, [sp, #12]
 8008678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867a:	9302      	str	r3, [sp, #8]
 800867c:	f107 0314 	add.w	r3, r7, #20
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	68b9      	ldr	r1, [r7, #8]
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 f851 	bl	8008734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008692:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008694:	f000 f8f6 	bl	8008884 <prvAddNewTaskToReadyList>
 8008698:	e001      	b.n	800869e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800869a:	2300      	movs	r3, #0
 800869c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800869e:	697b      	ldr	r3, [r7, #20]
	}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3728      	adds	r7, #40	@ 0x28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08c      	sub	sp, #48	@ 0x30
 80086ac:	af04      	add	r7, sp, #16
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	603b      	str	r3, [r7, #0]
 80086b4:	4613      	mov	r3, r2
 80086b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086b8:	88fb      	ldrh	r3, [r7, #6]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 fc7d 	bl	8009fbc <pvPortMalloc>
 80086c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00e      	beq.n	80086e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086ca:	20a8      	movs	r0, #168	@ 0xa8
 80086cc:	f001 fc76 	bl	8009fbc <pvPortMalloc>
 80086d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80086de:	e005      	b.n	80086ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086e0:	6978      	ldr	r0, [r7, #20]
 80086e2:	f001 fd39 	bl	800a158 <vPortFree>
 80086e6:	e001      	b.n	80086ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d017      	beq.n	8008722 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086fa:	88fa      	ldrh	r2, [r7, #6]
 80086fc:	2300      	movs	r3, #0
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	9302      	str	r3, [sp, #8]
 8008704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	68b9      	ldr	r1, [r7, #8]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 f80f 	bl	8008734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008716:	69f8      	ldr	r0, [r7, #28]
 8008718:	f000 f8b4 	bl	8008884 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800871c:	2301      	movs	r3, #1
 800871e:	61bb      	str	r3, [r7, #24]
 8008720:	e002      	b.n	8008728 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008726:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008728:	69bb      	ldr	r3, [r7, #24]
	}
 800872a:	4618      	mov	r0, r3
 800872c:	3720      	adds	r7, #32
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b088      	sub	sp, #32
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008744:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	461a      	mov	r2, r3
 800874c:	21a5      	movs	r1, #165	@ 0xa5
 800874e:	f001 fe43 	bl	800a3d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800875c:	440b      	add	r3, r1
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	f023 0307 	bic.w	r3, r3, #7
 800876a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00b      	beq.n	800878e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	617b      	str	r3, [r7, #20]
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	e7fd      	b.n	800878a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01f      	beq.n	80087d4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008794:	2300      	movs	r3, #0
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	e012      	b.n	80087c0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	4413      	add	r3, r2
 80087a0:	7819      	ldrb	r1, [r3, #0]
 80087a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	4413      	add	r3, r2
 80087a8:	3334      	adds	r3, #52	@ 0x34
 80087aa:	460a      	mov	r2, r1
 80087ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	4413      	add	r3, r2
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d006      	beq.n	80087c8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	3301      	adds	r3, #1
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	2b0f      	cmp	r3, #15
 80087c4:	d9e9      	bls.n	800879a <prvInitialiseNewTask+0x66>
 80087c6:	e000      	b.n	80087ca <prvInitialiseNewTask+0x96>
			{
				break;
 80087c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087d2:	e003      	b.n	80087dc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	2b37      	cmp	r3, #55	@ 0x37
 80087e0:	d901      	bls.n	80087e6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087e2:	2337      	movs	r3, #55	@ 0x37
 80087e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f4:	2200      	movs	r2, #0
 80087f6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	3304      	adds	r3, #4
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff f8a7 	bl	8007950 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008804:	3318      	adds	r3, #24
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff f8a2 	bl	8007950 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008810:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008814:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008820:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	2200      	movs	r2, #0
 8008826:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	2200      	movs	r2, #0
 800882e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	3354      	adds	r3, #84	@ 0x54
 8008836:	224c      	movs	r2, #76	@ 0x4c
 8008838:	2100      	movs	r1, #0
 800883a:	4618      	mov	r0, r3
 800883c:	f001 fdcc 	bl	800a3d8 <memset>
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	4a0d      	ldr	r2, [pc, #52]	@ (8008878 <prvInitialiseNewTask+0x144>)
 8008844:	659a      	str	r2, [r3, #88]	@ 0x58
 8008846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008848:	4a0c      	ldr	r2, [pc, #48]	@ (800887c <prvInitialiseNewTask+0x148>)
 800884a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800884c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884e:	4a0c      	ldr	r2, [pc, #48]	@ (8008880 <prvInitialiseNewTask+0x14c>)
 8008850:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	68f9      	ldr	r1, [r7, #12]
 8008856:	69b8      	ldr	r0, [r7, #24]
 8008858:	f001 f95a 	bl	8009b10 <pxPortInitialiseStack>
 800885c:	4602      	mov	r2, r0
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800886c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800886e:	bf00      	nop
 8008870:	3720      	adds	r7, #32
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	240051f4 	.word	0x240051f4
 800887c:	2400525c 	.word	0x2400525c
 8008880:	240052c4 	.word	0x240052c4

08008884 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800888c:	f001 fa74 	bl	8009d78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008890:	4b2d      	ldr	r3, [pc, #180]	@ (8008948 <prvAddNewTaskToReadyList+0xc4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	4a2c      	ldr	r2, [pc, #176]	@ (8008948 <prvAddNewTaskToReadyList+0xc4>)
 8008898:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800889a:	4b2c      	ldr	r3, [pc, #176]	@ (800894c <prvAddNewTaskToReadyList+0xc8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088a2:	4a2a      	ldr	r2, [pc, #168]	@ (800894c <prvAddNewTaskToReadyList+0xc8>)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088a8:	4b27      	ldr	r3, [pc, #156]	@ (8008948 <prvAddNewTaskToReadyList+0xc4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d110      	bne.n	80088d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088b0:	f000 fc2e 	bl	8009110 <prvInitialiseTaskLists>
 80088b4:	e00d      	b.n	80088d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088b6:	4b26      	ldr	r3, [pc, #152]	@ (8008950 <prvAddNewTaskToReadyList+0xcc>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d109      	bne.n	80088d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088be:	4b23      	ldr	r3, [pc, #140]	@ (800894c <prvAddNewTaskToReadyList+0xc8>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d802      	bhi.n	80088d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088cc:	4a1f      	ldr	r2, [pc, #124]	@ (800894c <prvAddNewTaskToReadyList+0xc8>)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088d2:	4b20      	ldr	r3, [pc, #128]	@ (8008954 <prvAddNewTaskToReadyList+0xd0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3301      	adds	r3, #1
 80088d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008954 <prvAddNewTaskToReadyList+0xd0>)
 80088da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80088dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008954 <prvAddNewTaskToReadyList+0xd0>)
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008958 <prvAddNewTaskToReadyList+0xd4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d903      	bls.n	80088f8 <prvAddNewTaskToReadyList+0x74>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f4:	4a18      	ldr	r2, [pc, #96]	@ (8008958 <prvAddNewTaskToReadyList+0xd4>)
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4a15      	ldr	r2, [pc, #84]	@ (800895c <prvAddNewTaskToReadyList+0xd8>)
 8008906:	441a      	add	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3304      	adds	r3, #4
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f7ff f82b 	bl	800796a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008914:	f001 fa62 	bl	8009ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008918:	4b0d      	ldr	r3, [pc, #52]	@ (8008950 <prvAddNewTaskToReadyList+0xcc>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00e      	beq.n	800893e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008920:	4b0a      	ldr	r3, [pc, #40]	@ (800894c <prvAddNewTaskToReadyList+0xc8>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892a:	429a      	cmp	r2, r3
 800892c:	d207      	bcs.n	800893e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800892e:	4b0c      	ldr	r3, [pc, #48]	@ (8008960 <prvAddNewTaskToReadyList+0xdc>)
 8008930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800893e:	bf00      	nop
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	24001474 	.word	0x24001474
 800894c:	24000fa0 	.word	0x24000fa0
 8008950:	24001480 	.word	0x24001480
 8008954:	24001490 	.word	0x24001490
 8008958:	2400147c 	.word	0x2400147c
 800895c:	24000fa4 	.word	0x24000fa4
 8008960:	e000ed04 	.word	0xe000ed04

08008964 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d018      	beq.n	80089a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008976:	4b14      	ldr	r3, [pc, #80]	@ (80089c8 <vTaskDelay+0x64>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00b      	beq.n	8008996 <vTaskDelay+0x32>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	60bb      	str	r3, [r7, #8]
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	e7fd      	b.n	8008992 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008996:	f000 f88b 	bl	8008ab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800899a:	2100      	movs	r1, #0
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fd09 	bl	80093b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089a2:	f000 f893 	bl	8008acc <xTaskResumeAll>
 80089a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d107      	bne.n	80089be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80089ae:	4b07      	ldr	r3, [pc, #28]	@ (80089cc <vTaskDelay+0x68>)
 80089b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	2400149c 	.word	0x2400149c
 80089cc:	e000ed04 	.word	0xe000ed04

080089d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08a      	sub	sp, #40	@ 0x28
 80089d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089de:	463a      	mov	r2, r7
 80089e0:	1d39      	adds	r1, r7, #4
 80089e2:	f107 0308 	add.w	r3, r7, #8
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe ff5e 	bl	80078a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	9202      	str	r2, [sp, #8]
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	2300      	movs	r3, #0
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	2300      	movs	r3, #0
 80089fc:	460a      	mov	r2, r1
 80089fe:	4924      	ldr	r1, [pc, #144]	@ (8008a90 <vTaskStartScheduler+0xc0>)
 8008a00:	4824      	ldr	r0, [pc, #144]	@ (8008a94 <vTaskStartScheduler+0xc4>)
 8008a02:	f7ff fdf1 	bl	80085e8 <xTaskCreateStatic>
 8008a06:	4603      	mov	r3, r0
 8008a08:	4a23      	ldr	r2, [pc, #140]	@ (8008a98 <vTaskStartScheduler+0xc8>)
 8008a0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a0c:	4b22      	ldr	r3, [pc, #136]	@ (8008a98 <vTaskStartScheduler+0xc8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a14:	2301      	movs	r3, #1
 8008a16:	617b      	str	r3, [r7, #20]
 8008a18:	e001      	b.n	8008a1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d102      	bne.n	8008a2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a24:	f000 fd1a 	bl	800945c <xTimerCreateTimerTask>
 8008a28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d11b      	bne.n	8008a68 <vTaskStartScheduler+0x98>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	613b      	str	r3, [r7, #16]
}
 8008a42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a44:	4b15      	ldr	r3, [pc, #84]	@ (8008a9c <vTaskStartScheduler+0xcc>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3354      	adds	r3, #84	@ 0x54
 8008a4a:	4a15      	ldr	r2, [pc, #84]	@ (8008aa0 <vTaskStartScheduler+0xd0>)
 8008a4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a4e:	4b15      	ldr	r3, [pc, #84]	@ (8008aa4 <vTaskStartScheduler+0xd4>)
 8008a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a56:	4b14      	ldr	r3, [pc, #80]	@ (8008aa8 <vTaskStartScheduler+0xd8>)
 8008a58:	2201      	movs	r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a5c:	4b13      	ldr	r3, [pc, #76]	@ (8008aac <vTaskStartScheduler+0xdc>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a62:	f001 f8e5 	bl	8009c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a66:	e00f      	b.n	8008a88 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a6e:	d10b      	bne.n	8008a88 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	60fb      	str	r3, [r7, #12]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <vTaskStartScheduler+0xb4>
}
 8008a88:	bf00      	nop
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	0800ae14 	.word	0x0800ae14
 8008a94:	080090e1 	.word	0x080090e1
 8008a98:	24001498 	.word	0x24001498
 8008a9c:	24000fa0 	.word	0x24000fa0
 8008aa0:	24000014 	.word	0x24000014
 8008aa4:	24001494 	.word	0x24001494
 8008aa8:	24001480 	.word	0x24001480
 8008aac:	24001478 	.word	0x24001478

08008ab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ab4:	4b04      	ldr	r3, [pc, #16]	@ (8008ac8 <vTaskSuspendAll+0x18>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	4a03      	ldr	r2, [pc, #12]	@ (8008ac8 <vTaskSuspendAll+0x18>)
 8008abc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008abe:	bf00      	nop
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	2400149c 	.word	0x2400149c

08008acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ada:	4b42      	ldr	r3, [pc, #264]	@ (8008be4 <xTaskResumeAll+0x118>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10b      	bne.n	8008afa <xTaskResumeAll+0x2e>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	603b      	str	r3, [r7, #0]
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	e7fd      	b.n	8008af6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008afa:	f001 f93d 	bl	8009d78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008afe:	4b39      	ldr	r3, [pc, #228]	@ (8008be4 <xTaskResumeAll+0x118>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	4a37      	ldr	r2, [pc, #220]	@ (8008be4 <xTaskResumeAll+0x118>)
 8008b06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b08:	4b36      	ldr	r3, [pc, #216]	@ (8008be4 <xTaskResumeAll+0x118>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d162      	bne.n	8008bd6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b10:	4b35      	ldr	r3, [pc, #212]	@ (8008be8 <xTaskResumeAll+0x11c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d05e      	beq.n	8008bd6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b18:	e02f      	b.n	8008b7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b1a:	4b34      	ldr	r3, [pc, #208]	@ (8008bec <xTaskResumeAll+0x120>)
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3318      	adds	r3, #24
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe ff7c 	bl	8007a24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe ff77 	bl	8007a24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8008bf0 <xTaskResumeAll+0x124>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d903      	bls.n	8008b4a <xTaskResumeAll+0x7e>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b46:	4a2a      	ldr	r2, [pc, #168]	@ (8008bf0 <xTaskResumeAll+0x124>)
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4a27      	ldr	r2, [pc, #156]	@ (8008bf4 <xTaskResumeAll+0x128>)
 8008b58:	441a      	add	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4610      	mov	r0, r2
 8008b62:	f7fe ff02 	bl	800796a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6a:	4b23      	ldr	r3, [pc, #140]	@ (8008bf8 <xTaskResumeAll+0x12c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d302      	bcc.n	8008b7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008b74:	4b21      	ldr	r3, [pc, #132]	@ (8008bfc <xTaskResumeAll+0x130>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8008bec <xTaskResumeAll+0x120>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1cb      	bne.n	8008b1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b88:	f000 fb66 	bl	8009258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8008c00 <xTaskResumeAll+0x134>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d010      	beq.n	8008bba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b98:	f000 f846 	bl	8008c28 <xTaskIncrementTick>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008ba2:	4b16      	ldr	r3, [pc, #88]	@ (8008bfc <xTaskResumeAll+0x130>)
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1f1      	bne.n	8008b98 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008bb4:	4b12      	ldr	r3, [pc, #72]	@ (8008c00 <xTaskResumeAll+0x134>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bba:	4b10      	ldr	r3, [pc, #64]	@ (8008bfc <xTaskResumeAll+0x130>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c04 <xTaskResumeAll+0x138>)
 8008bc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bd6:	f001 f901 	bl	8009ddc <vPortExitCritical>

	return xAlreadyYielded;
 8008bda:	68bb      	ldr	r3, [r7, #8]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	2400149c 	.word	0x2400149c
 8008be8:	24001474 	.word	0x24001474
 8008bec:	24001434 	.word	0x24001434
 8008bf0:	2400147c 	.word	0x2400147c
 8008bf4:	24000fa4 	.word	0x24000fa4
 8008bf8:	24000fa0 	.word	0x24000fa0
 8008bfc:	24001488 	.word	0x24001488
 8008c00:	24001484 	.word	0x24001484
 8008c04:	e000ed04 	.word	0xe000ed04

08008c08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c0e:	4b05      	ldr	r3, [pc, #20]	@ (8008c24 <xTaskGetTickCount+0x1c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c14:	687b      	ldr	r3, [r7, #4]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	24001478 	.word	0x24001478

08008c28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c32:	4b4f      	ldr	r3, [pc, #316]	@ (8008d70 <xTaskIncrementTick+0x148>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f040 8090 	bne.w	8008d5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8008d74 <xTaskIncrementTick+0x14c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3301      	adds	r3, #1
 8008c42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c44:	4a4b      	ldr	r2, [pc, #300]	@ (8008d74 <xTaskIncrementTick+0x14c>)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d121      	bne.n	8008c94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c50:	4b49      	ldr	r3, [pc, #292]	@ (8008d78 <xTaskIncrementTick+0x150>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00b      	beq.n	8008c72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	603b      	str	r3, [r7, #0]
}
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
 8008c70:	e7fd      	b.n	8008c6e <xTaskIncrementTick+0x46>
 8008c72:	4b41      	ldr	r3, [pc, #260]	@ (8008d78 <xTaskIncrementTick+0x150>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	4b40      	ldr	r3, [pc, #256]	@ (8008d7c <xTaskIncrementTick+0x154>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a3e      	ldr	r2, [pc, #248]	@ (8008d78 <xTaskIncrementTick+0x150>)
 8008c7e:	6013      	str	r3, [r2, #0]
 8008c80:	4a3e      	ldr	r2, [pc, #248]	@ (8008d7c <xTaskIncrementTick+0x154>)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	4b3e      	ldr	r3, [pc, #248]	@ (8008d80 <xTaskIncrementTick+0x158>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	4a3c      	ldr	r2, [pc, #240]	@ (8008d80 <xTaskIncrementTick+0x158>)
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	f000 fae2 	bl	8009258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c94:	4b3b      	ldr	r3, [pc, #236]	@ (8008d84 <xTaskIncrementTick+0x15c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d349      	bcc.n	8008d32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c9e:	4b36      	ldr	r3, [pc, #216]	@ (8008d78 <xTaskIncrementTick+0x150>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d104      	bne.n	8008cb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ca8:	4b36      	ldr	r3, [pc, #216]	@ (8008d84 <xTaskIncrementTick+0x15c>)
 8008caa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cae:	601a      	str	r2, [r3, #0]
					break;
 8008cb0:	e03f      	b.n	8008d32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb2:	4b31      	ldr	r3, [pc, #196]	@ (8008d78 <xTaskIncrementTick+0x150>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d203      	bcs.n	8008cd2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cca:	4a2e      	ldr	r2, [pc, #184]	@ (8008d84 <xTaskIncrementTick+0x15c>)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cd0:	e02f      	b.n	8008d32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fea4 	bl	8007a24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d004      	beq.n	8008cee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	3318      	adds	r3, #24
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe fe9b 	bl	8007a24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf2:	4b25      	ldr	r3, [pc, #148]	@ (8008d88 <xTaskIncrementTick+0x160>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d903      	bls.n	8008d02 <xTaskIncrementTick+0xda>
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfe:	4a22      	ldr	r2, [pc, #136]	@ (8008d88 <xTaskIncrementTick+0x160>)
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008d8c <xTaskIncrementTick+0x164>)
 8008d10:	441a      	add	r2, r3
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	3304      	adds	r3, #4
 8008d16:	4619      	mov	r1, r3
 8008d18:	4610      	mov	r0, r2
 8008d1a:	f7fe fe26 	bl	800796a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d22:	4b1b      	ldr	r3, [pc, #108]	@ (8008d90 <xTaskIncrementTick+0x168>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d3b8      	bcc.n	8008c9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d30:	e7b5      	b.n	8008c9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d32:	4b17      	ldr	r3, [pc, #92]	@ (8008d90 <xTaskIncrementTick+0x168>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d38:	4914      	ldr	r1, [pc, #80]	@ (8008d8c <xTaskIncrementTick+0x164>)
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d901      	bls.n	8008d4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d4e:	4b11      	ldr	r3, [pc, #68]	@ (8008d94 <xTaskIncrementTick+0x16c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d007      	beq.n	8008d66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008d56:	2301      	movs	r3, #1
 8008d58:	617b      	str	r3, [r7, #20]
 8008d5a:	e004      	b.n	8008d66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008d98 <xTaskIncrementTick+0x170>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3301      	adds	r3, #1
 8008d62:	4a0d      	ldr	r2, [pc, #52]	@ (8008d98 <xTaskIncrementTick+0x170>)
 8008d64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d66:	697b      	ldr	r3, [r7, #20]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	2400149c 	.word	0x2400149c
 8008d74:	24001478 	.word	0x24001478
 8008d78:	2400142c 	.word	0x2400142c
 8008d7c:	24001430 	.word	0x24001430
 8008d80:	2400148c 	.word	0x2400148c
 8008d84:	24001494 	.word	0x24001494
 8008d88:	2400147c 	.word	0x2400147c
 8008d8c:	24000fa4 	.word	0x24000fa4
 8008d90:	24000fa0 	.word	0x24000fa0
 8008d94:	24001488 	.word	0x24001488
 8008d98:	24001484 	.word	0x24001484

08008d9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008da2:	4b2b      	ldr	r3, [pc, #172]	@ (8008e50 <vTaskSwitchContext+0xb4>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008daa:	4b2a      	ldr	r3, [pc, #168]	@ (8008e54 <vTaskSwitchContext+0xb8>)
 8008dac:	2201      	movs	r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008db0:	e047      	b.n	8008e42 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008db2:	4b28      	ldr	r3, [pc, #160]	@ (8008e54 <vTaskSwitchContext+0xb8>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db8:	4b27      	ldr	r3, [pc, #156]	@ (8008e58 <vTaskSwitchContext+0xbc>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	e011      	b.n	8008de4 <vTaskSwitchContext+0x48>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10b      	bne.n	8008dde <vTaskSwitchContext+0x42>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	607b      	str	r3, [r7, #4]
}
 8008dd8:	bf00      	nop
 8008dda:	bf00      	nop
 8008ddc:	e7fd      	b.n	8008dda <vTaskSwitchContext+0x3e>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	491d      	ldr	r1, [pc, #116]	@ (8008e5c <vTaskSwitchContext+0xc0>)
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4613      	mov	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0e3      	beq.n	8008dc0 <vTaskSwitchContext+0x24>
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4a16      	ldr	r2, [pc, #88]	@ (8008e5c <vTaskSwitchContext+0xc0>)
 8008e04:	4413      	add	r3, r2
 8008e06:	60bb      	str	r3, [r7, #8]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	605a      	str	r2, [r3, #4]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	3308      	adds	r3, #8
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d104      	bne.n	8008e28 <vTaskSwitchContext+0x8c>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	605a      	str	r2, [r3, #4]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8008e60 <vTaskSwitchContext+0xc4>)
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	4a09      	ldr	r2, [pc, #36]	@ (8008e58 <vTaskSwitchContext+0xbc>)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e38:	4b09      	ldr	r3, [pc, #36]	@ (8008e60 <vTaskSwitchContext+0xc4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3354      	adds	r3, #84	@ 0x54
 8008e3e:	4a09      	ldr	r2, [pc, #36]	@ (8008e64 <vTaskSwitchContext+0xc8>)
 8008e40:	6013      	str	r3, [r2, #0]
}
 8008e42:	bf00      	nop
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	2400149c 	.word	0x2400149c
 8008e54:	24001488 	.word	0x24001488
 8008e58:	2400147c 	.word	0x2400147c
 8008e5c:	24000fa4 	.word	0x24000fa4
 8008e60:	24000fa0 	.word	0x24000fa0
 8008e64:	24000014 	.word	0x24000014

08008e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10b      	bne.n	8008e90 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	60fb      	str	r3, [r7, #12]
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	e7fd      	b.n	8008e8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e90:	4b07      	ldr	r3, [pc, #28]	@ (8008eb0 <vTaskPlaceOnEventList+0x48>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3318      	adds	r3, #24
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7fe fd8a 	bl	80079b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	6838      	ldr	r0, [r7, #0]
 8008ea2:	f000 fa87 	bl	80093b4 <prvAddCurrentTaskToDelayedList>
}
 8008ea6:	bf00      	nop
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	24000fa0 	.word	0x24000fa0

08008eb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10b      	bne.n	8008ede <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	617b      	str	r3, [r7, #20]
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	e7fd      	b.n	8008eda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ede:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <vTaskPlaceOnEventListRestricted+0x54>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3318      	adds	r3, #24
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f7fe fd3f 	bl	800796a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d002      	beq.n	8008ef8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ef6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	68b8      	ldr	r0, [r7, #8]
 8008efc:	f000 fa5a 	bl	80093b4 <prvAddCurrentTaskToDelayedList>
	}
 8008f00:	bf00      	nop
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	24000fa0 	.word	0x24000fa0

08008f0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10b      	bne.n	8008f3a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	60fb      	str	r3, [r7, #12]
}
 8008f34:	bf00      	nop
 8008f36:	bf00      	nop
 8008f38:	e7fd      	b.n	8008f36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	3318      	adds	r3, #24
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe fd70 	bl	8007a24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f44:	4b1d      	ldr	r3, [pc, #116]	@ (8008fbc <xTaskRemoveFromEventList+0xb0>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d11d      	bne.n	8008f88 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe fd67 	bl	8007a24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f5a:	4b19      	ldr	r3, [pc, #100]	@ (8008fc0 <xTaskRemoveFromEventList+0xb4>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d903      	bls.n	8008f6a <xTaskRemoveFromEventList+0x5e>
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f66:	4a16      	ldr	r2, [pc, #88]	@ (8008fc0 <xTaskRemoveFromEventList+0xb4>)
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4a13      	ldr	r2, [pc, #76]	@ (8008fc4 <xTaskRemoveFromEventList+0xb8>)
 8008f78:	441a      	add	r2, r3
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4610      	mov	r0, r2
 8008f82:	f7fe fcf2 	bl	800796a <vListInsertEnd>
 8008f86:	e005      	b.n	8008f94 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	3318      	adds	r3, #24
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	480e      	ldr	r0, [pc, #56]	@ (8008fc8 <xTaskRemoveFromEventList+0xbc>)
 8008f90:	f7fe fceb 	bl	800796a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f98:	4b0c      	ldr	r3, [pc, #48]	@ (8008fcc <xTaskRemoveFromEventList+0xc0>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d905      	bls.n	8008fae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd0 <xTaskRemoveFromEventList+0xc4>)
 8008fa8:	2201      	movs	r2, #1
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	e001      	b.n	8008fb2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fb2:	697b      	ldr	r3, [r7, #20]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	2400149c 	.word	0x2400149c
 8008fc0:	2400147c 	.word	0x2400147c
 8008fc4:	24000fa4 	.word	0x24000fa4
 8008fc8:	24001434 	.word	0x24001434
 8008fcc:	24000fa0 	.word	0x24000fa0
 8008fd0:	24001488 	.word	0x24001488

08008fd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fdc:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <vTaskInternalSetTimeOutState+0x24>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fe4:	4b05      	ldr	r3, [pc, #20]	@ (8008ffc <vTaskInternalSetTimeOutState+0x28>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	605a      	str	r2, [r3, #4]
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	2400148c 	.word	0x2400148c
 8008ffc:	24001478 	.word	0x24001478

08009000 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10b      	bne.n	8009028 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	613b      	str	r3, [r7, #16]
}
 8009022:	bf00      	nop
 8009024:	bf00      	nop
 8009026:	e7fd      	b.n	8009024 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10b      	bne.n	8009046 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	60fb      	str	r3, [r7, #12]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009046:	f000 fe97 	bl	8009d78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800904a:	4b1d      	ldr	r3, [pc, #116]	@ (80090c0 <xTaskCheckForTimeOut+0xc0>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009062:	d102      	bne.n	800906a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009064:	2300      	movs	r3, #0
 8009066:	61fb      	str	r3, [r7, #28]
 8009068:	e023      	b.n	80090b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	4b15      	ldr	r3, [pc, #84]	@ (80090c4 <xTaskCheckForTimeOut+0xc4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d007      	beq.n	8009086 <xTaskCheckForTimeOut+0x86>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	429a      	cmp	r2, r3
 800907e:	d302      	bcc.n	8009086 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009080:	2301      	movs	r3, #1
 8009082:	61fb      	str	r3, [r7, #28]
 8009084:	e015      	b.n	80090b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	429a      	cmp	r2, r3
 800908e:	d20b      	bcs.n	80090a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	1ad2      	subs	r2, r2, r3
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff ff99 	bl	8008fd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090a2:	2300      	movs	r3, #0
 80090a4:	61fb      	str	r3, [r7, #28]
 80090a6:	e004      	b.n	80090b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2200      	movs	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090ae:	2301      	movs	r3, #1
 80090b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090b2:	f000 fe93 	bl	8009ddc <vPortExitCritical>

	return xReturn;
 80090b6:	69fb      	ldr	r3, [r7, #28]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3720      	adds	r7, #32
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	24001478 	.word	0x24001478
 80090c4:	2400148c 	.word	0x2400148c

080090c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090c8:	b480      	push	{r7}
 80090ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090cc:	4b03      	ldr	r3, [pc, #12]	@ (80090dc <vTaskMissedYield+0x14>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
}
 80090d2:	bf00      	nop
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	24001488 	.word	0x24001488

080090e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090e8:	f000 f852 	bl	8009190 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090ec:	4b06      	ldr	r3, [pc, #24]	@ (8009108 <prvIdleTask+0x28>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d9f9      	bls.n	80090e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090f4:	4b05      	ldr	r3, [pc, #20]	@ (800910c <prvIdleTask+0x2c>)
 80090f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009104:	e7f0      	b.n	80090e8 <prvIdleTask+0x8>
 8009106:	bf00      	nop
 8009108:	24000fa4 	.word	0x24000fa4
 800910c:	e000ed04 	.word	0xe000ed04

08009110 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009116:	2300      	movs	r3, #0
 8009118:	607b      	str	r3, [r7, #4]
 800911a:	e00c      	b.n	8009136 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4a12      	ldr	r2, [pc, #72]	@ (8009170 <prvInitialiseTaskLists+0x60>)
 8009128:	4413      	add	r3, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fbf0 	bl	8007910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	3301      	adds	r3, #1
 8009134:	607b      	str	r3, [r7, #4]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b37      	cmp	r3, #55	@ 0x37
 800913a:	d9ef      	bls.n	800911c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800913c:	480d      	ldr	r0, [pc, #52]	@ (8009174 <prvInitialiseTaskLists+0x64>)
 800913e:	f7fe fbe7 	bl	8007910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009142:	480d      	ldr	r0, [pc, #52]	@ (8009178 <prvInitialiseTaskLists+0x68>)
 8009144:	f7fe fbe4 	bl	8007910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009148:	480c      	ldr	r0, [pc, #48]	@ (800917c <prvInitialiseTaskLists+0x6c>)
 800914a:	f7fe fbe1 	bl	8007910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800914e:	480c      	ldr	r0, [pc, #48]	@ (8009180 <prvInitialiseTaskLists+0x70>)
 8009150:	f7fe fbde 	bl	8007910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009154:	480b      	ldr	r0, [pc, #44]	@ (8009184 <prvInitialiseTaskLists+0x74>)
 8009156:	f7fe fbdb 	bl	8007910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800915a:	4b0b      	ldr	r3, [pc, #44]	@ (8009188 <prvInitialiseTaskLists+0x78>)
 800915c:	4a05      	ldr	r2, [pc, #20]	@ (8009174 <prvInitialiseTaskLists+0x64>)
 800915e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009160:	4b0a      	ldr	r3, [pc, #40]	@ (800918c <prvInitialiseTaskLists+0x7c>)
 8009162:	4a05      	ldr	r2, [pc, #20]	@ (8009178 <prvInitialiseTaskLists+0x68>)
 8009164:	601a      	str	r2, [r3, #0]
}
 8009166:	bf00      	nop
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	24000fa4 	.word	0x24000fa4
 8009174:	24001404 	.word	0x24001404
 8009178:	24001418 	.word	0x24001418
 800917c:	24001434 	.word	0x24001434
 8009180:	24001448 	.word	0x24001448
 8009184:	24001460 	.word	0x24001460
 8009188:	2400142c 	.word	0x2400142c
 800918c:	24001430 	.word	0x24001430

08009190 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009196:	e019      	b.n	80091cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009198:	f000 fdee 	bl	8009d78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919c:	4b10      	ldr	r3, [pc, #64]	@ (80091e0 <prvCheckTasksWaitingTermination+0x50>)
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fe fc3b 	bl	8007a24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091ae:	4b0d      	ldr	r3, [pc, #52]	@ (80091e4 <prvCheckTasksWaitingTermination+0x54>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	4a0b      	ldr	r2, [pc, #44]	@ (80091e4 <prvCheckTasksWaitingTermination+0x54>)
 80091b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091b8:	4b0b      	ldr	r3, [pc, #44]	@ (80091e8 <prvCheckTasksWaitingTermination+0x58>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3b01      	subs	r3, #1
 80091be:	4a0a      	ldr	r2, [pc, #40]	@ (80091e8 <prvCheckTasksWaitingTermination+0x58>)
 80091c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091c2:	f000 fe0b 	bl	8009ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f810 	bl	80091ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091cc:	4b06      	ldr	r3, [pc, #24]	@ (80091e8 <prvCheckTasksWaitingTermination+0x58>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e1      	bne.n	8009198 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	24001448 	.word	0x24001448
 80091e4:	24001474 	.word	0x24001474
 80091e8:	2400145c 	.word	0x2400145c

080091ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3354      	adds	r3, #84	@ 0x54
 80091f8:	4618      	mov	r0, r3
 80091fa:	f001 f8f5 	bl	800a3e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009204:	2b00      	cmp	r3, #0
 8009206:	d108      	bne.n	800921a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920c:	4618      	mov	r0, r3
 800920e:	f000 ffa3 	bl	800a158 <vPortFree>
				vPortFree( pxTCB );
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 ffa0 	bl	800a158 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009218:	e019      	b.n	800924e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009220:	2b01      	cmp	r3, #1
 8009222:	d103      	bne.n	800922c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 ff97 	bl	800a158 <vPortFree>
	}
 800922a:	e010      	b.n	800924e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009232:	2b02      	cmp	r3, #2
 8009234:	d00b      	beq.n	800924e <prvDeleteTCB+0x62>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	60fb      	str	r3, [r7, #12]
}
 8009248:	bf00      	nop
 800924a:	bf00      	nop
 800924c:	e7fd      	b.n	800924a <prvDeleteTCB+0x5e>
	}
 800924e:	bf00      	nop
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800925e:	4b0c      	ldr	r3, [pc, #48]	@ (8009290 <prvResetNextTaskUnblockTime+0x38>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d104      	bne.n	8009272 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009268:	4b0a      	ldr	r3, [pc, #40]	@ (8009294 <prvResetNextTaskUnblockTime+0x3c>)
 800926a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800926e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009270:	e008      	b.n	8009284 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009272:	4b07      	ldr	r3, [pc, #28]	@ (8009290 <prvResetNextTaskUnblockTime+0x38>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	4a04      	ldr	r2, [pc, #16]	@ (8009294 <prvResetNextTaskUnblockTime+0x3c>)
 8009282:	6013      	str	r3, [r2, #0]
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	2400142c 	.word	0x2400142c
 8009294:	24001494 	.word	0x24001494

08009298 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800929e:	4b0b      	ldr	r3, [pc, #44]	@ (80092cc <xTaskGetSchedulerState+0x34>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d102      	bne.n	80092ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092a6:	2301      	movs	r3, #1
 80092a8:	607b      	str	r3, [r7, #4]
 80092aa:	e008      	b.n	80092be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ac:	4b08      	ldr	r3, [pc, #32]	@ (80092d0 <xTaskGetSchedulerState+0x38>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d102      	bne.n	80092ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092b4:	2302      	movs	r3, #2
 80092b6:	607b      	str	r3, [r7, #4]
 80092b8:	e001      	b.n	80092be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092ba:	2300      	movs	r3, #0
 80092bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092be:	687b      	ldr	r3, [r7, #4]
	}
 80092c0:	4618      	mov	r0, r3
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	24001480 	.word	0x24001480
 80092d0:	2400149c 	.word	0x2400149c

080092d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d058      	beq.n	800939c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092ea:	4b2f      	ldr	r3, [pc, #188]	@ (80093a8 <xTaskPriorityDisinherit+0xd4>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d00b      	beq.n	800930c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	60fb      	str	r3, [r7, #12]
}
 8009306:	bf00      	nop
 8009308:	bf00      	nop
 800930a:	e7fd      	b.n	8009308 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10b      	bne.n	800932c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	60bb      	str	r3, [r7, #8]
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	e7fd      	b.n	8009328 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009330:	1e5a      	subs	r2, r3, #1
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800933e:	429a      	cmp	r2, r3
 8009340:	d02c      	beq.n	800939c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009346:	2b00      	cmp	r3, #0
 8009348:	d128      	bne.n	800939c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	3304      	adds	r3, #4
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe fb68 	bl	8007a24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009360:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800936c:	4b0f      	ldr	r3, [pc, #60]	@ (80093ac <xTaskPriorityDisinherit+0xd8>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	429a      	cmp	r2, r3
 8009372:	d903      	bls.n	800937c <xTaskPriorityDisinherit+0xa8>
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009378:	4a0c      	ldr	r2, [pc, #48]	@ (80093ac <xTaskPriorityDisinherit+0xd8>)
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4a09      	ldr	r2, [pc, #36]	@ (80093b0 <xTaskPriorityDisinherit+0xdc>)
 800938a:	441a      	add	r2, r3
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	3304      	adds	r3, #4
 8009390:	4619      	mov	r1, r3
 8009392:	4610      	mov	r0, r2
 8009394:	f7fe fae9 	bl	800796a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800939c:	697b      	ldr	r3, [r7, #20]
	}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	24000fa0 	.word	0x24000fa0
 80093ac:	2400147c 	.word	0x2400147c
 80093b0:	24000fa4 	.word	0x24000fa4

080093b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093be:	4b21      	ldr	r3, [pc, #132]	@ (8009444 <prvAddCurrentTaskToDelayedList+0x90>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c4:	4b20      	ldr	r3, [pc, #128]	@ (8009448 <prvAddCurrentTaskToDelayedList+0x94>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fb2a 	bl	8007a24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093d6:	d10a      	bne.n	80093ee <prvAddCurrentTaskToDelayedList+0x3a>
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093de:	4b1a      	ldr	r3, [pc, #104]	@ (8009448 <prvAddCurrentTaskToDelayedList+0x94>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	3304      	adds	r3, #4
 80093e4:	4619      	mov	r1, r3
 80093e6:	4819      	ldr	r0, [pc, #100]	@ (800944c <prvAddCurrentTaskToDelayedList+0x98>)
 80093e8:	f7fe fabf 	bl	800796a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093ec:	e026      	b.n	800943c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4413      	add	r3, r2
 80093f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093f6:	4b14      	ldr	r3, [pc, #80]	@ (8009448 <prvAddCurrentTaskToDelayedList+0x94>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	429a      	cmp	r2, r3
 8009404:	d209      	bcs.n	800941a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009406:	4b12      	ldr	r3, [pc, #72]	@ (8009450 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <prvAddCurrentTaskToDelayedList+0x94>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3304      	adds	r3, #4
 8009410:	4619      	mov	r1, r3
 8009412:	4610      	mov	r0, r2
 8009414:	f7fe facd 	bl	80079b2 <vListInsert>
}
 8009418:	e010      	b.n	800943c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800941a:	4b0e      	ldr	r3, [pc, #56]	@ (8009454 <prvAddCurrentTaskToDelayedList+0xa0>)
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4b0a      	ldr	r3, [pc, #40]	@ (8009448 <prvAddCurrentTaskToDelayedList+0x94>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3304      	adds	r3, #4
 8009424:	4619      	mov	r1, r3
 8009426:	4610      	mov	r0, r2
 8009428:	f7fe fac3 	bl	80079b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800942c:	4b0a      	ldr	r3, [pc, #40]	@ (8009458 <prvAddCurrentTaskToDelayedList+0xa4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	429a      	cmp	r2, r3
 8009434:	d202      	bcs.n	800943c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009436:	4a08      	ldr	r2, [pc, #32]	@ (8009458 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	6013      	str	r3, [r2, #0]
}
 800943c:	bf00      	nop
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	24001478 	.word	0x24001478
 8009448:	24000fa0 	.word	0x24000fa0
 800944c:	24001460 	.word	0x24001460
 8009450:	24001430 	.word	0x24001430
 8009454:	2400142c 	.word	0x2400142c
 8009458:	24001494 	.word	0x24001494

0800945c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08a      	sub	sp, #40	@ 0x28
 8009460:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009462:	2300      	movs	r3, #0
 8009464:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009466:	f000 fb13 	bl	8009a90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800946a:	4b1d      	ldr	r3, [pc, #116]	@ (80094e0 <xTimerCreateTimerTask+0x84>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d021      	beq.n	80094b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009472:	2300      	movs	r3, #0
 8009474:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009476:	2300      	movs	r3, #0
 8009478:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800947a:	1d3a      	adds	r2, r7, #4
 800947c:	f107 0108 	add.w	r1, r7, #8
 8009480:	f107 030c 	add.w	r3, r7, #12
 8009484:	4618      	mov	r0, r3
 8009486:	f7fe fa29 	bl	80078dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	9202      	str	r2, [sp, #8]
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	2302      	movs	r3, #2
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	2300      	movs	r3, #0
 800949a:	460a      	mov	r2, r1
 800949c:	4911      	ldr	r1, [pc, #68]	@ (80094e4 <xTimerCreateTimerTask+0x88>)
 800949e:	4812      	ldr	r0, [pc, #72]	@ (80094e8 <xTimerCreateTimerTask+0x8c>)
 80094a0:	f7ff f8a2 	bl	80085e8 <xTaskCreateStatic>
 80094a4:	4603      	mov	r3, r0
 80094a6:	4a11      	ldr	r2, [pc, #68]	@ (80094ec <xTimerCreateTimerTask+0x90>)
 80094a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094aa:	4b10      	ldr	r3, [pc, #64]	@ (80094ec <xTimerCreateTimerTask+0x90>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094b2:	2301      	movs	r3, #1
 80094b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10b      	bne.n	80094d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	613b      	str	r3, [r7, #16]
}
 80094ce:	bf00      	nop
 80094d0:	bf00      	nop
 80094d2:	e7fd      	b.n	80094d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80094d4:	697b      	ldr	r3, [r7, #20]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	240014d0 	.word	0x240014d0
 80094e4:	0800ae1c 	.word	0x0800ae1c
 80094e8:	08009629 	.word	0x08009629
 80094ec:	240014d4 	.word	0x240014d4

080094f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	@ 0x28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094fe:	2300      	movs	r3, #0
 8009500:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10b      	bne.n	8009520 <xTimerGenericCommand+0x30>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	623b      	str	r3, [r7, #32]
}
 800951a:	bf00      	nop
 800951c:	bf00      	nop
 800951e:	e7fd      	b.n	800951c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009520:	4b19      	ldr	r3, [pc, #100]	@ (8009588 <xTimerGenericCommand+0x98>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d02a      	beq.n	800957e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b05      	cmp	r3, #5
 8009538:	dc18      	bgt.n	800956c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800953a:	f7ff fead 	bl	8009298 <xTaskGetSchedulerState>
 800953e:	4603      	mov	r3, r0
 8009540:	2b02      	cmp	r3, #2
 8009542:	d109      	bne.n	8009558 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009544:	4b10      	ldr	r3, [pc, #64]	@ (8009588 <xTimerGenericCommand+0x98>)
 8009546:	6818      	ldr	r0, [r3, #0]
 8009548:	f107 0110 	add.w	r1, r7, #16
 800954c:	2300      	movs	r3, #0
 800954e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009550:	f7fe fbd8 	bl	8007d04 <xQueueGenericSend>
 8009554:	6278      	str	r0, [r7, #36]	@ 0x24
 8009556:	e012      	b.n	800957e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009558:	4b0b      	ldr	r3, [pc, #44]	@ (8009588 <xTimerGenericCommand+0x98>)
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	f107 0110 	add.w	r1, r7, #16
 8009560:	2300      	movs	r3, #0
 8009562:	2200      	movs	r2, #0
 8009564:	f7fe fbce 	bl	8007d04 <xQueueGenericSend>
 8009568:	6278      	str	r0, [r7, #36]	@ 0x24
 800956a:	e008      	b.n	800957e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800956c:	4b06      	ldr	r3, [pc, #24]	@ (8009588 <xTimerGenericCommand+0x98>)
 800956e:	6818      	ldr	r0, [r3, #0]
 8009570:	f107 0110 	add.w	r1, r7, #16
 8009574:	2300      	movs	r3, #0
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	f7fe fcc6 	bl	8007f08 <xQueueGenericSendFromISR>
 800957c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009580:	4618      	mov	r0, r3
 8009582:	3728      	adds	r7, #40	@ 0x28
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	240014d0 	.word	0x240014d0

0800958c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af02      	add	r7, sp, #8
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009596:	4b23      	ldr	r3, [pc, #140]	@ (8009624 <prvProcessExpiredTimer+0x98>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	3304      	adds	r3, #4
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fe fa3d 	bl	8007a24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d023      	beq.n	8009600 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	18d1      	adds	r1, r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	6978      	ldr	r0, [r7, #20]
 80095c6:	f000 f8d5 	bl	8009774 <prvInsertTimerInActiveList>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d020      	beq.n	8009612 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095d0:	2300      	movs	r3, #0
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	2300      	movs	r3, #0
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	2100      	movs	r1, #0
 80095da:	6978      	ldr	r0, [r7, #20]
 80095dc:	f7ff ff88 	bl	80094f0 <xTimerGenericCommand>
 80095e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d114      	bne.n	8009612 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	60fb      	str	r3, [r7, #12]
}
 80095fa:	bf00      	nop
 80095fc:	bf00      	nop
 80095fe:	e7fd      	b.n	80095fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009606:	f023 0301 	bic.w	r3, r3, #1
 800960a:	b2da      	uxtb	r2, r3
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	6978      	ldr	r0, [r7, #20]
 8009618:	4798      	blx	r3
}
 800961a:	bf00      	nop
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	240014c8 	.word	0x240014c8

08009628 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009630:	f107 0308 	add.w	r3, r7, #8
 8009634:	4618      	mov	r0, r3
 8009636:	f000 f859 	bl	80096ec <prvGetNextExpireTime>
 800963a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	4619      	mov	r1, r3
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 f805 	bl	8009650 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009646:	f000 f8d7 	bl	80097f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800964a:	bf00      	nop
 800964c:	e7f0      	b.n	8009630 <prvTimerTask+0x8>
	...

08009650 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800965a:	f7ff fa29 	bl	8008ab0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800965e:	f107 0308 	add.w	r3, r7, #8
 8009662:	4618      	mov	r0, r3
 8009664:	f000 f866 	bl	8009734 <prvSampleTimeNow>
 8009668:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d130      	bne.n	80096d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10a      	bne.n	800968c <prvProcessTimerOrBlockTask+0x3c>
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	429a      	cmp	r2, r3
 800967c:	d806      	bhi.n	800968c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800967e:	f7ff fa25 	bl	8008acc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009682:	68f9      	ldr	r1, [r7, #12]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff ff81 	bl	800958c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800968a:	e024      	b.n	80096d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d008      	beq.n	80096a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009692:	4b13      	ldr	r3, [pc, #76]	@ (80096e0 <prvProcessTimerOrBlockTask+0x90>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <prvProcessTimerOrBlockTask+0x50>
 800969c:	2301      	movs	r3, #1
 800969e:	e000      	b.n	80096a2 <prvProcessTimerOrBlockTask+0x52>
 80096a0:	2300      	movs	r3, #0
 80096a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096a4:	4b0f      	ldr	r3, [pc, #60]	@ (80096e4 <prvProcessTimerOrBlockTask+0x94>)
 80096a6:	6818      	ldr	r0, [r3, #0]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	4619      	mov	r1, r3
 80096b2:	f7fe ff65 	bl	8008580 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096b6:	f7ff fa09 	bl	8008acc <xTaskResumeAll>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096c0:	4b09      	ldr	r3, [pc, #36]	@ (80096e8 <prvProcessTimerOrBlockTask+0x98>)
 80096c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	f3bf 8f6f 	isb	sy
}
 80096d0:	e001      	b.n	80096d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096d2:	f7ff f9fb 	bl	8008acc <xTaskResumeAll>
}
 80096d6:	bf00      	nop
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	240014cc 	.word	0x240014cc
 80096e4:	240014d0 	.word	0x240014d0
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009730 <prvGetNextExpireTime+0x44>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <prvGetNextExpireTime+0x16>
 80096fe:	2201      	movs	r2, #1
 8009700:	e000      	b.n	8009704 <prvGetNextExpireTime+0x18>
 8009702:	2200      	movs	r2, #0
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d105      	bne.n	800971c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009710:	4b07      	ldr	r3, [pc, #28]	@ (8009730 <prvGetNextExpireTime+0x44>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	60fb      	str	r3, [r7, #12]
 800971a:	e001      	b.n	8009720 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800971c:	2300      	movs	r3, #0
 800971e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009720:	68fb      	ldr	r3, [r7, #12]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	240014c8 	.word	0x240014c8

08009734 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800973c:	f7ff fa64 	bl	8008c08 <xTaskGetTickCount>
 8009740:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009742:	4b0b      	ldr	r3, [pc, #44]	@ (8009770 <prvSampleTimeNow+0x3c>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	429a      	cmp	r2, r3
 800974a:	d205      	bcs.n	8009758 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800974c:	f000 f93a 	bl	80099c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	e002      	b.n	800975e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800975e:	4a04      	ldr	r2, [pc, #16]	@ (8009770 <prvSampleTimeNow+0x3c>)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009764:	68fb      	ldr	r3, [r7, #12]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	240014d8 	.word	0x240014d8

08009774 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009782:	2300      	movs	r3, #0
 8009784:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	429a      	cmp	r2, r3
 8009798:	d812      	bhi.n	80097c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	1ad2      	subs	r2, r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d302      	bcc.n	80097ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097a8:	2301      	movs	r3, #1
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	e01b      	b.n	80097e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097ae:	4b10      	ldr	r3, [pc, #64]	@ (80097f0 <prvInsertTimerInActiveList+0x7c>)
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3304      	adds	r3, #4
 80097b6:	4619      	mov	r1, r3
 80097b8:	4610      	mov	r0, r2
 80097ba:	f7fe f8fa 	bl	80079b2 <vListInsert>
 80097be:	e012      	b.n	80097e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d206      	bcs.n	80097d6 <prvInsertTimerInActiveList+0x62>
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d302      	bcc.n	80097d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097d0:	2301      	movs	r3, #1
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	e007      	b.n	80097e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097d6:	4b07      	ldr	r3, [pc, #28]	@ (80097f4 <prvInsertTimerInActiveList+0x80>)
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3304      	adds	r3, #4
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f7fe f8e6 	bl	80079b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097e6:	697b      	ldr	r3, [r7, #20]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	240014cc 	.word	0x240014cc
 80097f4:	240014c8 	.word	0x240014c8

080097f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b08e      	sub	sp, #56	@ 0x38
 80097fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097fe:	e0ce      	b.n	800999e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	da19      	bge.n	800983a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009806:	1d3b      	adds	r3, r7, #4
 8009808:	3304      	adds	r3, #4
 800980a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800980c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	61fb      	str	r3, [r7, #28]
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop
 8009828:	e7fd      	b.n	8009826 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800982a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009830:	6850      	ldr	r0, [r2, #4]
 8009832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009834:	6892      	ldr	r2, [r2, #8]
 8009836:	4611      	mov	r1, r2
 8009838:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f2c0 80ae 	blt.w	800999e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d004      	beq.n	8009858 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009850:	3304      	adds	r3, #4
 8009852:	4618      	mov	r0, r3
 8009854:	f7fe f8e6 	bl	8007a24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009858:	463b      	mov	r3, r7
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff ff6a 	bl	8009734 <prvSampleTimeNow>
 8009860:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b09      	cmp	r3, #9
 8009866:	f200 8097 	bhi.w	8009998 <prvProcessReceivedCommands+0x1a0>
 800986a:	a201      	add	r2, pc, #4	@ (adr r2, 8009870 <prvProcessReceivedCommands+0x78>)
 800986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009870:	08009899 	.word	0x08009899
 8009874:	08009899 	.word	0x08009899
 8009878:	08009899 	.word	0x08009899
 800987c:	0800990f 	.word	0x0800990f
 8009880:	08009923 	.word	0x08009923
 8009884:	0800996f 	.word	0x0800996f
 8009888:	08009899 	.word	0x08009899
 800988c:	08009899 	.word	0x08009899
 8009890:	0800990f 	.word	0x0800990f
 8009894:	08009923 	.word	0x08009923
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800989e:	f043 0301 	orr.w	r3, r3, #1
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	18d1      	adds	r1, r2, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098b8:	f7ff ff5c 	bl	8009774 <prvInsertTimerInActiveList>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d06c      	beq.n	800999c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d061      	beq.n	800999c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	441a      	add	r2, r3
 80098e0:	2300      	movs	r3, #0
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	2300      	movs	r3, #0
 80098e6:	2100      	movs	r1, #0
 80098e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098ea:	f7ff fe01 	bl	80094f0 <xTimerGenericCommand>
 80098ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d152      	bne.n	800999c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	61bb      	str	r3, [r7, #24]
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	e7fd      	b.n	800990a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800990e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009914:	f023 0301 	bic.w	r3, r3, #1
 8009918:	b2da      	uxtb	r2, r3
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009920:	e03d      	b.n	800999e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009928:	f043 0301 	orr.w	r3, r3, #1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009930:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009938:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10b      	bne.n	800995a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	617b      	str	r3, [r7, #20]
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop
 8009958:	e7fd      	b.n	8009956 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800995a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995c:	699a      	ldr	r2, [r3, #24]
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	18d1      	adds	r1, r2, r3
 8009962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009968:	f7ff ff04 	bl	8009774 <prvInsertTimerInActiveList>
					break;
 800996c:	e017      	b.n	800999e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b00      	cmp	r3, #0
 800997a:	d103      	bne.n	8009984 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800997c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800997e:	f000 fbeb 	bl	800a158 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009982:	e00c      	b.n	800999e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009986:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	b2da      	uxtb	r2, r3
 8009990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009992:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009996:	e002      	b.n	800999e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009998:	bf00      	nop
 800999a:	e000      	b.n	800999e <prvProcessReceivedCommands+0x1a6>
					break;
 800999c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800999e:	4b08      	ldr	r3, [pc, #32]	@ (80099c0 <prvProcessReceivedCommands+0x1c8>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	1d39      	adds	r1, r7, #4
 80099a4:	2200      	movs	r2, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe fb4c 	bl	8008044 <xQueueReceive>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f47f af26 	bne.w	8009800 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
 80099b8:	3730      	adds	r7, #48	@ 0x30
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	240014d0 	.word	0x240014d0

080099c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099ca:	e049      	b.n	8009a60 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099cc:	4b2e      	ldr	r3, [pc, #184]	@ (8009a88 <prvSwitchTimerLists+0xc4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d6:	4b2c      	ldr	r3, [pc, #176]	@ (8009a88 <prvSwitchTimerLists+0xc4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe f81d 	bl	8007a24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d02f      	beq.n	8009a60 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	4413      	add	r3, r2
 8009a08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d90e      	bls.n	8009a30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8009a88 <prvSwitchTimerLists+0xc4>)
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3304      	adds	r3, #4
 8009a26:	4619      	mov	r1, r3
 8009a28:	4610      	mov	r0, r2
 8009a2a:	f7fd ffc2 	bl	80079b2 <vListInsert>
 8009a2e:	e017      	b.n	8009a60 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a30:	2300      	movs	r3, #0
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	2300      	movs	r3, #0
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	2100      	movs	r1, #0
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7ff fd58 	bl	80094f0 <xTimerGenericCommand>
 8009a40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10b      	bne.n	8009a60 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	603b      	str	r3, [r7, #0]
}
 8009a5a:	bf00      	nop
 8009a5c:	bf00      	nop
 8009a5e:	e7fd      	b.n	8009a5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a60:	4b09      	ldr	r3, [pc, #36]	@ (8009a88 <prvSwitchTimerLists+0xc4>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1b0      	bne.n	80099cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a6a:	4b07      	ldr	r3, [pc, #28]	@ (8009a88 <prvSwitchTimerLists+0xc4>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a70:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <prvSwitchTimerLists+0xc8>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a04      	ldr	r2, [pc, #16]	@ (8009a88 <prvSwitchTimerLists+0xc4>)
 8009a76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a78:	4a04      	ldr	r2, [pc, #16]	@ (8009a8c <prvSwitchTimerLists+0xc8>)
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	6013      	str	r3, [r2, #0]
}
 8009a7e:	bf00      	nop
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	240014c8 	.word	0x240014c8
 8009a8c:	240014cc 	.word	0x240014cc

08009a90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a96:	f000 f96f 	bl	8009d78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a9a:	4b15      	ldr	r3, [pc, #84]	@ (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d120      	bne.n	8009ae4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009aa2:	4814      	ldr	r0, [pc, #80]	@ (8009af4 <prvCheckForValidListAndQueue+0x64>)
 8009aa4:	f7fd ff34 	bl	8007910 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009aa8:	4813      	ldr	r0, [pc, #76]	@ (8009af8 <prvCheckForValidListAndQueue+0x68>)
 8009aaa:	f7fd ff31 	bl	8007910 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009aae:	4b13      	ldr	r3, [pc, #76]	@ (8009afc <prvCheckForValidListAndQueue+0x6c>)
 8009ab0:	4a10      	ldr	r2, [pc, #64]	@ (8009af4 <prvCheckForValidListAndQueue+0x64>)
 8009ab2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ab4:	4b12      	ldr	r3, [pc, #72]	@ (8009b00 <prvCheckForValidListAndQueue+0x70>)
 8009ab6:	4a10      	ldr	r2, [pc, #64]	@ (8009af8 <prvCheckForValidListAndQueue+0x68>)
 8009ab8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009aba:	2300      	movs	r3, #0
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	4b11      	ldr	r3, [pc, #68]	@ (8009b04 <prvCheckForValidListAndQueue+0x74>)
 8009ac0:	4a11      	ldr	r2, [pc, #68]	@ (8009b08 <prvCheckForValidListAndQueue+0x78>)
 8009ac2:	2110      	movs	r1, #16
 8009ac4:	200a      	movs	r0, #10
 8009ac6:	f7fe f841 	bl	8007b4c <xQueueGenericCreateStatic>
 8009aca:	4603      	mov	r3, r0
 8009acc:	4a08      	ldr	r2, [pc, #32]	@ (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009ace:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ad0:	4b07      	ldr	r3, [pc, #28]	@ (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d005      	beq.n	8009ae4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ad8:	4b05      	ldr	r3, [pc, #20]	@ (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	490b      	ldr	r1, [pc, #44]	@ (8009b0c <prvCheckForValidListAndQueue+0x7c>)
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe fd24 	bl	800852c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ae4:	f000 f97a 	bl	8009ddc <vPortExitCritical>
}
 8009ae8:	bf00      	nop
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	240014d0 	.word	0x240014d0
 8009af4:	240014a0 	.word	0x240014a0
 8009af8:	240014b4 	.word	0x240014b4
 8009afc:	240014c8 	.word	0x240014c8
 8009b00:	240014cc 	.word	0x240014cc
 8009b04:	2400157c 	.word	0x2400157c
 8009b08:	240014dc 	.word	0x240014dc
 8009b0c:	0800ae24 	.word	0x0800ae24

08009b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3b04      	subs	r3, #4
 8009b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3b04      	subs	r3, #4
 8009b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f023 0201 	bic.w	r2, r3, #1
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3b04      	subs	r3, #4
 8009b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b40:	4a0c      	ldr	r2, [pc, #48]	@ (8009b74 <pxPortInitialiseStack+0x64>)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3b14      	subs	r3, #20
 8009b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3b04      	subs	r3, #4
 8009b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f06f 0202 	mvn.w	r2, #2
 8009b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	3b20      	subs	r3, #32
 8009b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b66:	68fb      	ldr	r3, [r7, #12]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	08009b79 	.word	0x08009b79

08009b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b82:	4b13      	ldr	r3, [pc, #76]	@ (8009bd0 <prvTaskExitError+0x58>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b8a:	d00b      	beq.n	8009ba4 <prvTaskExitError+0x2c>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	60fb      	str	r3, [r7, #12]
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	e7fd      	b.n	8009ba0 <prvTaskExitError+0x28>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	60bb      	str	r3, [r7, #8]
}
 8009bb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bb8:	bf00      	nop
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d0fc      	beq.n	8009bba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bc0:	bf00      	nop
 8009bc2:	bf00      	nop
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	24000010 	.word	0x24000010
	...

08009be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009be0:	4b07      	ldr	r3, [pc, #28]	@ (8009c00 <pxCurrentTCBConst2>)
 8009be2:	6819      	ldr	r1, [r3, #0]
 8009be4:	6808      	ldr	r0, [r1, #0]
 8009be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	f380 8809 	msr	PSP, r0
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f380 8811 	msr	BASEPRI, r0
 8009bfa:	4770      	bx	lr
 8009bfc:	f3af 8000 	nop.w

08009c00 <pxCurrentTCBConst2>:
 8009c00:	24000fa0 	.word	0x24000fa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop

08009c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c08:	4808      	ldr	r0, [pc, #32]	@ (8009c2c <prvPortStartFirstTask+0x24>)
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	6800      	ldr	r0, [r0, #0]
 8009c0e:	f380 8808 	msr	MSP, r0
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8814 	msr	CONTROL, r0
 8009c1a:	b662      	cpsie	i
 8009c1c:	b661      	cpsie	f
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	df00      	svc	0
 8009c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed08 	.word	0xe000ed08

08009c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c36:	4b47      	ldr	r3, [pc, #284]	@ (8009d54 <xPortStartScheduler+0x124>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a47      	ldr	r2, [pc, #284]	@ (8009d58 <xPortStartScheduler+0x128>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d10b      	bne.n	8009c58 <xPortStartScheduler+0x28>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	613b      	str	r3, [r7, #16]
}
 8009c52:	bf00      	nop
 8009c54:	bf00      	nop
 8009c56:	e7fd      	b.n	8009c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c58:	4b3e      	ldr	r3, [pc, #248]	@ (8009d54 <xPortStartScheduler+0x124>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8009d5c <xPortStartScheduler+0x12c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d10b      	bne.n	8009c7a <xPortStartScheduler+0x4a>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	60fb      	str	r3, [r7, #12]
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	e7fd      	b.n	8009c76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c7a:	4b39      	ldr	r3, [pc, #228]	@ (8009d60 <xPortStartScheduler+0x130>)
 8009c7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	22ff      	movs	r2, #255	@ 0xff
 8009c8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	4b31      	ldr	r3, [pc, #196]	@ (8009d64 <xPortStartScheduler+0x134>)
 8009ca0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ca2:	4b31      	ldr	r3, [pc, #196]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009ca4:	2207      	movs	r2, #7
 8009ca6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ca8:	e009      	b.n	8009cbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009caa:	4b2f      	ldr	r3, [pc, #188]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009cb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc6:	2b80      	cmp	r3, #128	@ 0x80
 8009cc8:	d0ef      	beq.n	8009caa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cca:	4b27      	ldr	r3, [pc, #156]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f1c3 0307 	rsb	r3, r3, #7
 8009cd2:	2b04      	cmp	r3, #4
 8009cd4:	d00b      	beq.n	8009cee <xPortStartScheduler+0xbe>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	60bb      	str	r3, [r7, #8]
}
 8009ce8:	bf00      	nop
 8009cea:	bf00      	nop
 8009cec:	e7fd      	b.n	8009cea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cee:	4b1e      	ldr	r3, [pc, #120]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009cf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d00:	4a19      	ldr	r2, [pc, #100]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009d02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d0c:	4b17      	ldr	r3, [pc, #92]	@ (8009d6c <xPortStartScheduler+0x13c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a16      	ldr	r2, [pc, #88]	@ (8009d6c <xPortStartScheduler+0x13c>)
 8009d12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d18:	4b14      	ldr	r3, [pc, #80]	@ (8009d6c <xPortStartScheduler+0x13c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a13      	ldr	r2, [pc, #76]	@ (8009d6c <xPortStartScheduler+0x13c>)
 8009d1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d24:	f000 f8da 	bl	8009edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d28:	4b11      	ldr	r3, [pc, #68]	@ (8009d70 <xPortStartScheduler+0x140>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d2e:	f000 f8f9 	bl	8009f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d32:	4b10      	ldr	r3, [pc, #64]	@ (8009d74 <xPortStartScheduler+0x144>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a0f      	ldr	r2, [pc, #60]	@ (8009d74 <xPortStartScheduler+0x144>)
 8009d38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d3e:	f7ff ff63 	bl	8009c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d42:	f7ff f82b 	bl	8008d9c <vTaskSwitchContext>
	prvTaskExitError();
 8009d46:	f7ff ff17 	bl	8009b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	e000ed00 	.word	0xe000ed00
 8009d58:	410fc271 	.word	0x410fc271
 8009d5c:	410fc270 	.word	0x410fc270
 8009d60:	e000e400 	.word	0xe000e400
 8009d64:	240015cc 	.word	0x240015cc
 8009d68:	240015d0 	.word	0x240015d0
 8009d6c:	e000ed20 	.word	0xe000ed20
 8009d70:	24000010 	.word	0x24000010
 8009d74:	e000ef34 	.word	0xe000ef34

08009d78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	607b      	str	r3, [r7, #4]
}
 8009d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d92:	4b10      	ldr	r3, [pc, #64]	@ (8009dd4 <vPortEnterCritical+0x5c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3301      	adds	r3, #1
 8009d98:	4a0e      	ldr	r2, [pc, #56]	@ (8009dd4 <vPortEnterCritical+0x5c>)
 8009d9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd4 <vPortEnterCritical+0x5c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d110      	bne.n	8009dc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009da4:	4b0c      	ldr	r3, [pc, #48]	@ (8009dd8 <vPortEnterCritical+0x60>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00b      	beq.n	8009dc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	603b      	str	r3, [r7, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <vPortEnterCritical+0x4a>
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	24000010 	.word	0x24000010
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009de2:	4b12      	ldr	r3, [pc, #72]	@ (8009e2c <vPortExitCritical+0x50>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10b      	bne.n	8009e02 <vPortExitCritical+0x26>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	607b      	str	r3, [r7, #4]
}
 8009dfc:	bf00      	nop
 8009dfe:	bf00      	nop
 8009e00:	e7fd      	b.n	8009dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e02:	4b0a      	ldr	r3, [pc, #40]	@ (8009e2c <vPortExitCritical+0x50>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3b01      	subs	r3, #1
 8009e08:	4a08      	ldr	r2, [pc, #32]	@ (8009e2c <vPortExitCritical+0x50>)
 8009e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e0c:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <vPortExitCritical+0x50>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d105      	bne.n	8009e20 <vPortExitCritical+0x44>
 8009e14:	2300      	movs	r3, #0
 8009e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	f383 8811 	msr	BASEPRI, r3
}
 8009e1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	24000010 	.word	0x24000010

08009e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e30:	f3ef 8009 	mrs	r0, PSP
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4b15      	ldr	r3, [pc, #84]	@ (8009e90 <pxCurrentTCBConst>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	f01e 0f10 	tst.w	lr, #16
 8009e40:	bf08      	it	eq
 8009e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4a:	6010      	str	r0, [r2, #0]
 8009e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e54:	f380 8811 	msr	BASEPRI, r0
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f7fe ff9c 	bl	8008d9c <vTaskSwitchContext>
 8009e64:	f04f 0000 	mov.w	r0, #0
 8009e68:	f380 8811 	msr	BASEPRI, r0
 8009e6c:	bc09      	pop	{r0, r3}
 8009e6e:	6819      	ldr	r1, [r3, #0]
 8009e70:	6808      	ldr	r0, [r1, #0]
 8009e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e76:	f01e 0f10 	tst.w	lr, #16
 8009e7a:	bf08      	it	eq
 8009e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e80:	f380 8809 	msr	PSP, r0
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	f3af 8000 	nop.w

08009e90 <pxCurrentTCBConst>:
 8009e90:	24000fa0 	.word	0x24000fa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	607b      	str	r3, [r7, #4]
}
 8009eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009eb2:	f7fe feb9 	bl	8008c28 <xTaskIncrementTick>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ebc:	4b06      	ldr	r3, [pc, #24]	@ (8009ed8 <xPortSysTickHandler+0x40>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8009f14 <vPortSetupTimerInterrupt+0x38>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009eec:	4b0a      	ldr	r3, [pc, #40]	@ (8009f18 <vPortSetupTimerInterrupt+0x3c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8009f1c <vPortSetupTimerInterrupt+0x40>)
 8009ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef6:	099b      	lsrs	r3, r3, #6
 8009ef8:	4a09      	ldr	r2, [pc, #36]	@ (8009f20 <vPortSetupTimerInterrupt+0x44>)
 8009efa:	3b01      	subs	r3, #1
 8009efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009efe:	4b04      	ldr	r3, [pc, #16]	@ (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009f00:	2207      	movs	r2, #7
 8009f02:	601a      	str	r2, [r3, #0]
}
 8009f04:	bf00      	nop
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	e000e010 	.word	0xe000e010
 8009f14:	e000e018 	.word	0xe000e018
 8009f18:	24000000 	.word	0x24000000
 8009f1c:	10624dd3 	.word	0x10624dd3
 8009f20:	e000e014 	.word	0xe000e014

08009f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009f34 <vPortEnableVFP+0x10>
 8009f28:	6801      	ldr	r1, [r0, #0]
 8009f2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f2e:	6001      	str	r1, [r0, #0]
 8009f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f32:	bf00      	nop
 8009f34:	e000ed88 	.word	0xe000ed88

08009f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f3e:	f3ef 8305 	mrs	r3, IPSR
 8009f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	d915      	bls.n	8009f76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f4a:	4a18      	ldr	r2, [pc, #96]	@ (8009fac <vPortValidateInterruptPriority+0x74>)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f54:	4b16      	ldr	r3, [pc, #88]	@ (8009fb0 <vPortValidateInterruptPriority+0x78>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	7afa      	ldrb	r2, [r7, #11]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d20b      	bcs.n	8009f76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	607b      	str	r3, [r7, #4]
}
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
 8009f74:	e7fd      	b.n	8009f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f76:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb4 <vPortValidateInterruptPriority+0x7c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb8 <vPortValidateInterruptPriority+0x80>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d90b      	bls.n	8009f9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	603b      	str	r3, [r7, #0]
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	e7fd      	b.n	8009f9a <vPortValidateInterruptPriority+0x62>
	}
 8009f9e:	bf00      	nop
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	e000e3f0 	.word	0xe000e3f0
 8009fb0:	240015cc 	.word	0x240015cc
 8009fb4:	e000ed0c 	.word	0xe000ed0c
 8009fb8:	240015d0 	.word	0x240015d0

08009fbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08a      	sub	sp, #40	@ 0x28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fc8:	f7fe fd72 	bl	8008ab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fcc:	4b5c      	ldr	r3, [pc, #368]	@ (800a140 <pvPortMalloc+0x184>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fd4:	f000 f924 	bl	800a220 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fd8:	4b5a      	ldr	r3, [pc, #360]	@ (800a144 <pvPortMalloc+0x188>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4013      	ands	r3, r2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f040 8095 	bne.w	800a110 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d01e      	beq.n	800a02a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009fec:	2208      	movs	r2, #8
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d015      	beq.n	800a02a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f023 0307 	bic.w	r3, r3, #7
 800a004:	3308      	adds	r3, #8
 800a006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f003 0307 	and.w	r3, r3, #7
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00b      	beq.n	800a02a <pvPortMalloc+0x6e>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	617b      	str	r3, [r7, #20]
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	e7fd      	b.n	800a026 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d06f      	beq.n	800a110 <pvPortMalloc+0x154>
 800a030:	4b45      	ldr	r3, [pc, #276]	@ (800a148 <pvPortMalloc+0x18c>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	429a      	cmp	r2, r3
 800a038:	d86a      	bhi.n	800a110 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a03a:	4b44      	ldr	r3, [pc, #272]	@ (800a14c <pvPortMalloc+0x190>)
 800a03c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a03e:	4b43      	ldr	r3, [pc, #268]	@ (800a14c <pvPortMalloc+0x190>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a044:	e004      	b.n	800a050 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	429a      	cmp	r2, r3
 800a058:	d903      	bls.n	800a062 <pvPortMalloc+0xa6>
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1f1      	bne.n	800a046 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a062:	4b37      	ldr	r3, [pc, #220]	@ (800a140 <pvPortMalloc+0x184>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a068:	429a      	cmp	r2, r3
 800a06a:	d051      	beq.n	800a110 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2208      	movs	r2, #8
 800a072:	4413      	add	r3, r2
 800a074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	1ad2      	subs	r2, r2, r3
 800a086:	2308      	movs	r3, #8
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d920      	bls.n	800a0d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a08e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4413      	add	r3, r2
 800a094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00b      	beq.n	800a0b8 <pvPortMalloc+0xfc>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	613b      	str	r3, [r7, #16]
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	1ad2      	subs	r2, r2, r3
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0ca:	69b8      	ldr	r0, [r7, #24]
 800a0cc:	f000 f90a 	bl	800a2e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a148 <pvPortMalloc+0x18c>)
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	4a1b      	ldr	r2, [pc, #108]	@ (800a148 <pvPortMalloc+0x18c>)
 800a0dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0de:	4b1a      	ldr	r3, [pc, #104]	@ (800a148 <pvPortMalloc+0x18c>)
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a150 <pvPortMalloc+0x194>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d203      	bcs.n	800a0f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0ea:	4b17      	ldr	r3, [pc, #92]	@ (800a148 <pvPortMalloc+0x18c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a18      	ldr	r2, [pc, #96]	@ (800a150 <pvPortMalloc+0x194>)
 800a0f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	4b13      	ldr	r3, [pc, #76]	@ (800a144 <pvPortMalloc+0x188>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a106:	4b13      	ldr	r3, [pc, #76]	@ (800a154 <pvPortMalloc+0x198>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3301      	adds	r3, #1
 800a10c:	4a11      	ldr	r2, [pc, #68]	@ (800a154 <pvPortMalloc+0x198>)
 800a10e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a110:	f7fe fcdc 	bl	8008acc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <pvPortMalloc+0x17a>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	60fb      	str	r3, [r7, #12]
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	e7fd      	b.n	800a132 <pvPortMalloc+0x176>
	return pvReturn;
 800a136:	69fb      	ldr	r3, [r7, #28]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3728      	adds	r7, #40	@ 0x28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	240051dc 	.word	0x240051dc
 800a144:	240051f0 	.word	0x240051f0
 800a148:	240051e0 	.word	0x240051e0
 800a14c:	240051d4 	.word	0x240051d4
 800a150:	240051e4 	.word	0x240051e4
 800a154:	240051e8 	.word	0x240051e8

0800a158 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d04f      	beq.n	800a20a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a16a:	2308      	movs	r3, #8
 800a16c:	425b      	negs	r3, r3
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	4413      	add	r3, r2
 800a172:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	4b25      	ldr	r3, [pc, #148]	@ (800a214 <vPortFree+0xbc>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4013      	ands	r3, r2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10b      	bne.n	800a19e <vPortFree+0x46>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	60fb      	str	r3, [r7, #12]
}
 800a198:	bf00      	nop
 800a19a:	bf00      	nop
 800a19c:	e7fd      	b.n	800a19a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00b      	beq.n	800a1be <vPortFree+0x66>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	60bb      	str	r3, [r7, #8]
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	e7fd      	b.n	800a1ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	4b14      	ldr	r3, [pc, #80]	@ (800a214 <vPortFree+0xbc>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01e      	beq.n	800a20a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d11a      	bne.n	800a20a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a214 <vPortFree+0xbc>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	43db      	mvns	r3, r3
 800a1de:	401a      	ands	r2, r3
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1e4:	f7fe fc64 	bl	8008ab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a218 <vPortFree+0xc0>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	4a09      	ldr	r2, [pc, #36]	@ (800a218 <vPortFree+0xc0>)
 800a1f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1f6:	6938      	ldr	r0, [r7, #16]
 800a1f8:	f000 f874 	bl	800a2e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1fc:	4b07      	ldr	r3, [pc, #28]	@ (800a21c <vPortFree+0xc4>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	4a06      	ldr	r2, [pc, #24]	@ (800a21c <vPortFree+0xc4>)
 800a204:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a206:	f7fe fc61 	bl	8008acc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a20a:	bf00      	nop
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	240051f0 	.word	0x240051f0
 800a218:	240051e0 	.word	0x240051e0
 800a21c:	240051ec 	.word	0x240051ec

0800a220 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a226:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a22a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a22c:	4b27      	ldr	r3, [pc, #156]	@ (800a2cc <prvHeapInit+0xac>)
 800a22e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00c      	beq.n	800a254 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3307      	adds	r3, #7
 800a23e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 0307 	bic.w	r3, r3, #7
 800a246:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	4a1f      	ldr	r2, [pc, #124]	@ (800a2cc <prvHeapInit+0xac>)
 800a250:	4413      	add	r3, r2
 800a252:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a258:	4a1d      	ldr	r2, [pc, #116]	@ (800a2d0 <prvHeapInit+0xb0>)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a25e:	4b1c      	ldr	r3, [pc, #112]	@ (800a2d0 <prvHeapInit+0xb0>)
 800a260:	2200      	movs	r2, #0
 800a262:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	4413      	add	r3, r2
 800a26a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a26c:	2208      	movs	r2, #8
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	1a9b      	subs	r3, r3, r2
 800a272:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0307 	bic.w	r3, r3, #7
 800a27a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4a15      	ldr	r2, [pc, #84]	@ (800a2d4 <prvHeapInit+0xb4>)
 800a280:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a282:	4b14      	ldr	r3, [pc, #80]	@ (800a2d4 <prvHeapInit+0xb4>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2200      	movs	r2, #0
 800a288:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a28a:	4b12      	ldr	r3, [pc, #72]	@ (800a2d4 <prvHeapInit+0xb4>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2200      	movs	r2, #0
 800a290:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	1ad2      	subs	r2, r2, r3
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d4 <prvHeapInit+0xb4>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	4a0a      	ldr	r2, [pc, #40]	@ (800a2d8 <prvHeapInit+0xb8>)
 800a2ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	4a09      	ldr	r2, [pc, #36]	@ (800a2dc <prvHeapInit+0xbc>)
 800a2b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2b8:	4b09      	ldr	r3, [pc, #36]	@ (800a2e0 <prvHeapInit+0xc0>)
 800a2ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a2be:	601a      	str	r2, [r3, #0]
}
 800a2c0:	bf00      	nop
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	240015d4 	.word	0x240015d4
 800a2d0:	240051d4 	.word	0x240051d4
 800a2d4:	240051dc 	.word	0x240051dc
 800a2d8:	240051e4 	.word	0x240051e4
 800a2dc:	240051e0 	.word	0x240051e0
 800a2e0:	240051f0 	.word	0x240051f0

0800a2e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2ec:	4b28      	ldr	r3, [pc, #160]	@ (800a390 <prvInsertBlockIntoFreeList+0xac>)
 800a2ee:	60fb      	str	r3, [r7, #12]
 800a2f0:	e002      	b.n	800a2f8 <prvInsertBlockIntoFreeList+0x14>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d8f7      	bhi.n	800a2f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	4413      	add	r3, r2
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d108      	bne.n	800a326 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	441a      	add	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	441a      	add	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d118      	bne.n	800a36c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	4b15      	ldr	r3, [pc, #84]	@ (800a394 <prvInsertBlockIntoFreeList+0xb0>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	429a      	cmp	r2, r3
 800a344:	d00d      	beq.n	800a362 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	441a      	add	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	e008      	b.n	800a374 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a362:	4b0c      	ldr	r3, [pc, #48]	@ (800a394 <prvInsertBlockIntoFreeList+0xb0>)
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	e003      	b.n	800a374 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d002      	beq.n	800a382 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a382:	bf00      	nop
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	240051d4 	.word	0x240051d4
 800a394:	240051dc 	.word	0x240051dc

0800a398 <siprintf>:
 800a398:	b40e      	push	{r1, r2, r3}
 800a39a:	b500      	push	{lr}
 800a39c:	b09c      	sub	sp, #112	@ 0x70
 800a39e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a3a0:	9002      	str	r0, [sp, #8]
 800a3a2:	9006      	str	r0, [sp, #24]
 800a3a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3a8:	4809      	ldr	r0, [pc, #36]	@ (800a3d0 <siprintf+0x38>)
 800a3aa:	9107      	str	r1, [sp, #28]
 800a3ac:	9104      	str	r1, [sp, #16]
 800a3ae:	4909      	ldr	r1, [pc, #36]	@ (800a3d4 <siprintf+0x3c>)
 800a3b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b4:	9105      	str	r1, [sp, #20]
 800a3b6:	6800      	ldr	r0, [r0, #0]
 800a3b8:	9301      	str	r3, [sp, #4]
 800a3ba:	a902      	add	r1, sp, #8
 800a3bc:	f000 f9f8 	bl	800a7b0 <_svfiprintf_r>
 800a3c0:	9b02      	ldr	r3, [sp, #8]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	b01c      	add	sp, #112	@ 0x70
 800a3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3cc:	b003      	add	sp, #12
 800a3ce:	4770      	bx	lr
 800a3d0:	24000014 	.word	0x24000014
 800a3d4:	ffff0208 	.word	0xffff0208

0800a3d8 <memset>:
 800a3d8:	4402      	add	r2, r0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d100      	bne.n	800a3e2 <memset+0xa>
 800a3e0:	4770      	bx	lr
 800a3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3e6:	e7f9      	b.n	800a3dc <memset+0x4>

0800a3e8 <_reclaim_reent>:
 800a3e8:	4b29      	ldr	r3, [pc, #164]	@ (800a490 <_reclaim_reent+0xa8>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4283      	cmp	r3, r0
 800a3ee:	b570      	push	{r4, r5, r6, lr}
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	d04b      	beq.n	800a48c <_reclaim_reent+0xa4>
 800a3f4:	69c3      	ldr	r3, [r0, #28]
 800a3f6:	b1ab      	cbz	r3, 800a424 <_reclaim_reent+0x3c>
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	b16b      	cbz	r3, 800a418 <_reclaim_reent+0x30>
 800a3fc:	2500      	movs	r5, #0
 800a3fe:	69e3      	ldr	r3, [r4, #28]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	5959      	ldr	r1, [r3, r5]
 800a404:	2900      	cmp	r1, #0
 800a406:	d13b      	bne.n	800a480 <_reclaim_reent+0x98>
 800a408:	3504      	adds	r5, #4
 800a40a:	2d80      	cmp	r5, #128	@ 0x80
 800a40c:	d1f7      	bne.n	800a3fe <_reclaim_reent+0x16>
 800a40e:	69e3      	ldr	r3, [r4, #28]
 800a410:	4620      	mov	r0, r4
 800a412:	68d9      	ldr	r1, [r3, #12]
 800a414:	f000 f878 	bl	800a508 <_free_r>
 800a418:	69e3      	ldr	r3, [r4, #28]
 800a41a:	6819      	ldr	r1, [r3, #0]
 800a41c:	b111      	cbz	r1, 800a424 <_reclaim_reent+0x3c>
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 f872 	bl	800a508 <_free_r>
 800a424:	6961      	ldr	r1, [r4, #20]
 800a426:	b111      	cbz	r1, 800a42e <_reclaim_reent+0x46>
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 f86d 	bl	800a508 <_free_r>
 800a42e:	69e1      	ldr	r1, [r4, #28]
 800a430:	b111      	cbz	r1, 800a438 <_reclaim_reent+0x50>
 800a432:	4620      	mov	r0, r4
 800a434:	f000 f868 	bl	800a508 <_free_r>
 800a438:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a43a:	b111      	cbz	r1, 800a442 <_reclaim_reent+0x5a>
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 f863 	bl	800a508 <_free_r>
 800a442:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a444:	b111      	cbz	r1, 800a44c <_reclaim_reent+0x64>
 800a446:	4620      	mov	r0, r4
 800a448:	f000 f85e 	bl	800a508 <_free_r>
 800a44c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a44e:	b111      	cbz	r1, 800a456 <_reclaim_reent+0x6e>
 800a450:	4620      	mov	r0, r4
 800a452:	f000 f859 	bl	800a508 <_free_r>
 800a456:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a458:	b111      	cbz	r1, 800a460 <_reclaim_reent+0x78>
 800a45a:	4620      	mov	r0, r4
 800a45c:	f000 f854 	bl	800a508 <_free_r>
 800a460:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a462:	b111      	cbz	r1, 800a46a <_reclaim_reent+0x82>
 800a464:	4620      	mov	r0, r4
 800a466:	f000 f84f 	bl	800a508 <_free_r>
 800a46a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a46c:	b111      	cbz	r1, 800a474 <_reclaim_reent+0x8c>
 800a46e:	4620      	mov	r0, r4
 800a470:	f000 f84a 	bl	800a508 <_free_r>
 800a474:	6a23      	ldr	r3, [r4, #32]
 800a476:	b14b      	cbz	r3, 800a48c <_reclaim_reent+0xa4>
 800a478:	4620      	mov	r0, r4
 800a47a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a47e:	4718      	bx	r3
 800a480:	680e      	ldr	r6, [r1, #0]
 800a482:	4620      	mov	r0, r4
 800a484:	f000 f840 	bl	800a508 <_free_r>
 800a488:	4631      	mov	r1, r6
 800a48a:	e7bb      	b.n	800a404 <_reclaim_reent+0x1c>
 800a48c:	bd70      	pop	{r4, r5, r6, pc}
 800a48e:	bf00      	nop
 800a490:	24000014 	.word	0x24000014

0800a494 <__errno>:
 800a494:	4b01      	ldr	r3, [pc, #4]	@ (800a49c <__errno+0x8>)
 800a496:	6818      	ldr	r0, [r3, #0]
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	24000014 	.word	0x24000014

0800a4a0 <__libc_init_array>:
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	4d0d      	ldr	r5, [pc, #52]	@ (800a4d8 <__libc_init_array+0x38>)
 800a4a4:	4c0d      	ldr	r4, [pc, #52]	@ (800a4dc <__libc_init_array+0x3c>)
 800a4a6:	1b64      	subs	r4, r4, r5
 800a4a8:	10a4      	asrs	r4, r4, #2
 800a4aa:	2600      	movs	r6, #0
 800a4ac:	42a6      	cmp	r6, r4
 800a4ae:	d109      	bne.n	800a4c4 <__libc_init_array+0x24>
 800a4b0:	4d0b      	ldr	r5, [pc, #44]	@ (800a4e0 <__libc_init_array+0x40>)
 800a4b2:	4c0c      	ldr	r4, [pc, #48]	@ (800a4e4 <__libc_init_array+0x44>)
 800a4b4:	f000 fc66 	bl	800ad84 <_init>
 800a4b8:	1b64      	subs	r4, r4, r5
 800a4ba:	10a4      	asrs	r4, r4, #2
 800a4bc:	2600      	movs	r6, #0
 800a4be:	42a6      	cmp	r6, r4
 800a4c0:	d105      	bne.n	800a4ce <__libc_init_array+0x2e>
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c8:	4798      	blx	r3
 800a4ca:	3601      	adds	r6, #1
 800a4cc:	e7ee      	b.n	800a4ac <__libc_init_array+0xc>
 800a4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d2:	4798      	blx	r3
 800a4d4:	3601      	adds	r6, #1
 800a4d6:	e7f2      	b.n	800a4be <__libc_init_array+0x1e>
 800a4d8:	0800af24 	.word	0x0800af24
 800a4dc:	0800af24 	.word	0x0800af24
 800a4e0:	0800af24 	.word	0x0800af24
 800a4e4:	0800af28 	.word	0x0800af28

0800a4e8 <__retarget_lock_acquire_recursive>:
 800a4e8:	4770      	bx	lr

0800a4ea <__retarget_lock_release_recursive>:
 800a4ea:	4770      	bx	lr

0800a4ec <memcpy>:
 800a4ec:	440a      	add	r2, r1
 800a4ee:	4291      	cmp	r1, r2
 800a4f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a4f4:	d100      	bne.n	800a4f8 <memcpy+0xc>
 800a4f6:	4770      	bx	lr
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a502:	4291      	cmp	r1, r2
 800a504:	d1f9      	bne.n	800a4fa <memcpy+0xe>
 800a506:	bd10      	pop	{r4, pc}

0800a508 <_free_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4605      	mov	r5, r0
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d041      	beq.n	800a594 <_free_r+0x8c>
 800a510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a514:	1f0c      	subs	r4, r1, #4
 800a516:	2b00      	cmp	r3, #0
 800a518:	bfb8      	it	lt
 800a51a:	18e4      	addlt	r4, r4, r3
 800a51c:	f000 f8e0 	bl	800a6e0 <__malloc_lock>
 800a520:	4a1d      	ldr	r2, [pc, #116]	@ (800a598 <_free_r+0x90>)
 800a522:	6813      	ldr	r3, [r2, #0]
 800a524:	b933      	cbnz	r3, 800a534 <_free_r+0x2c>
 800a526:	6063      	str	r3, [r4, #4]
 800a528:	6014      	str	r4, [r2, #0]
 800a52a:	4628      	mov	r0, r5
 800a52c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a530:	f000 b8dc 	b.w	800a6ec <__malloc_unlock>
 800a534:	42a3      	cmp	r3, r4
 800a536:	d908      	bls.n	800a54a <_free_r+0x42>
 800a538:	6820      	ldr	r0, [r4, #0]
 800a53a:	1821      	adds	r1, r4, r0
 800a53c:	428b      	cmp	r3, r1
 800a53e:	bf01      	itttt	eq
 800a540:	6819      	ldreq	r1, [r3, #0]
 800a542:	685b      	ldreq	r3, [r3, #4]
 800a544:	1809      	addeq	r1, r1, r0
 800a546:	6021      	streq	r1, [r4, #0]
 800a548:	e7ed      	b.n	800a526 <_free_r+0x1e>
 800a54a:	461a      	mov	r2, r3
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	b10b      	cbz	r3, 800a554 <_free_r+0x4c>
 800a550:	42a3      	cmp	r3, r4
 800a552:	d9fa      	bls.n	800a54a <_free_r+0x42>
 800a554:	6811      	ldr	r1, [r2, #0]
 800a556:	1850      	adds	r0, r2, r1
 800a558:	42a0      	cmp	r0, r4
 800a55a:	d10b      	bne.n	800a574 <_free_r+0x6c>
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	4401      	add	r1, r0
 800a560:	1850      	adds	r0, r2, r1
 800a562:	4283      	cmp	r3, r0
 800a564:	6011      	str	r1, [r2, #0]
 800a566:	d1e0      	bne.n	800a52a <_free_r+0x22>
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	6053      	str	r3, [r2, #4]
 800a56e:	4408      	add	r0, r1
 800a570:	6010      	str	r0, [r2, #0]
 800a572:	e7da      	b.n	800a52a <_free_r+0x22>
 800a574:	d902      	bls.n	800a57c <_free_r+0x74>
 800a576:	230c      	movs	r3, #12
 800a578:	602b      	str	r3, [r5, #0]
 800a57a:	e7d6      	b.n	800a52a <_free_r+0x22>
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	1821      	adds	r1, r4, r0
 800a580:	428b      	cmp	r3, r1
 800a582:	bf04      	itt	eq
 800a584:	6819      	ldreq	r1, [r3, #0]
 800a586:	685b      	ldreq	r3, [r3, #4]
 800a588:	6063      	str	r3, [r4, #4]
 800a58a:	bf04      	itt	eq
 800a58c:	1809      	addeq	r1, r1, r0
 800a58e:	6021      	streq	r1, [r4, #0]
 800a590:	6054      	str	r4, [r2, #4]
 800a592:	e7ca      	b.n	800a52a <_free_r+0x22>
 800a594:	bd38      	pop	{r3, r4, r5, pc}
 800a596:	bf00      	nop
 800a598:	24005338 	.word	0x24005338

0800a59c <sbrk_aligned>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	4e0f      	ldr	r6, [pc, #60]	@ (800a5dc <sbrk_aligned+0x40>)
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	6831      	ldr	r1, [r6, #0]
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	b911      	cbnz	r1, 800a5ae <sbrk_aligned+0x12>
 800a5a8:	f000 fba6 	bl	800acf8 <_sbrk_r>
 800a5ac:	6030      	str	r0, [r6, #0]
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f000 fba1 	bl	800acf8 <_sbrk_r>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d103      	bne.n	800a5c2 <sbrk_aligned+0x26>
 800a5ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a5be:	4620      	mov	r0, r4
 800a5c0:	bd70      	pop	{r4, r5, r6, pc}
 800a5c2:	1cc4      	adds	r4, r0, #3
 800a5c4:	f024 0403 	bic.w	r4, r4, #3
 800a5c8:	42a0      	cmp	r0, r4
 800a5ca:	d0f8      	beq.n	800a5be <sbrk_aligned+0x22>
 800a5cc:	1a21      	subs	r1, r4, r0
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 fb92 	bl	800acf8 <_sbrk_r>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d1f2      	bne.n	800a5be <sbrk_aligned+0x22>
 800a5d8:	e7ef      	b.n	800a5ba <sbrk_aligned+0x1e>
 800a5da:	bf00      	nop
 800a5dc:	24005334 	.word	0x24005334

0800a5e0 <_malloc_r>:
 800a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	1ccd      	adds	r5, r1, #3
 800a5e6:	f025 0503 	bic.w	r5, r5, #3
 800a5ea:	3508      	adds	r5, #8
 800a5ec:	2d0c      	cmp	r5, #12
 800a5ee:	bf38      	it	cc
 800a5f0:	250c      	movcc	r5, #12
 800a5f2:	2d00      	cmp	r5, #0
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	db01      	blt.n	800a5fc <_malloc_r+0x1c>
 800a5f8:	42a9      	cmp	r1, r5
 800a5fa:	d904      	bls.n	800a606 <_malloc_r+0x26>
 800a5fc:	230c      	movs	r3, #12
 800a5fe:	6033      	str	r3, [r6, #0]
 800a600:	2000      	movs	r0, #0
 800a602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6dc <_malloc_r+0xfc>
 800a60a:	f000 f869 	bl	800a6e0 <__malloc_lock>
 800a60e:	f8d8 3000 	ldr.w	r3, [r8]
 800a612:	461c      	mov	r4, r3
 800a614:	bb44      	cbnz	r4, 800a668 <_malloc_r+0x88>
 800a616:	4629      	mov	r1, r5
 800a618:	4630      	mov	r0, r6
 800a61a:	f7ff ffbf 	bl	800a59c <sbrk_aligned>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	4604      	mov	r4, r0
 800a622:	d158      	bne.n	800a6d6 <_malloc_r+0xf6>
 800a624:	f8d8 4000 	ldr.w	r4, [r8]
 800a628:	4627      	mov	r7, r4
 800a62a:	2f00      	cmp	r7, #0
 800a62c:	d143      	bne.n	800a6b6 <_malloc_r+0xd6>
 800a62e:	2c00      	cmp	r4, #0
 800a630:	d04b      	beq.n	800a6ca <_malloc_r+0xea>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	4639      	mov	r1, r7
 800a636:	4630      	mov	r0, r6
 800a638:	eb04 0903 	add.w	r9, r4, r3
 800a63c:	f000 fb5c 	bl	800acf8 <_sbrk_r>
 800a640:	4581      	cmp	r9, r0
 800a642:	d142      	bne.n	800a6ca <_malloc_r+0xea>
 800a644:	6821      	ldr	r1, [r4, #0]
 800a646:	1a6d      	subs	r5, r5, r1
 800a648:	4629      	mov	r1, r5
 800a64a:	4630      	mov	r0, r6
 800a64c:	f7ff ffa6 	bl	800a59c <sbrk_aligned>
 800a650:	3001      	adds	r0, #1
 800a652:	d03a      	beq.n	800a6ca <_malloc_r+0xea>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	442b      	add	r3, r5
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	f8d8 3000 	ldr.w	r3, [r8]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	bb62      	cbnz	r2, 800a6bc <_malloc_r+0xdc>
 800a662:	f8c8 7000 	str.w	r7, [r8]
 800a666:	e00f      	b.n	800a688 <_malloc_r+0xa8>
 800a668:	6822      	ldr	r2, [r4, #0]
 800a66a:	1b52      	subs	r2, r2, r5
 800a66c:	d420      	bmi.n	800a6b0 <_malloc_r+0xd0>
 800a66e:	2a0b      	cmp	r2, #11
 800a670:	d917      	bls.n	800a6a2 <_malloc_r+0xc2>
 800a672:	1961      	adds	r1, r4, r5
 800a674:	42a3      	cmp	r3, r4
 800a676:	6025      	str	r5, [r4, #0]
 800a678:	bf18      	it	ne
 800a67a:	6059      	strne	r1, [r3, #4]
 800a67c:	6863      	ldr	r3, [r4, #4]
 800a67e:	bf08      	it	eq
 800a680:	f8c8 1000 	streq.w	r1, [r8]
 800a684:	5162      	str	r2, [r4, r5]
 800a686:	604b      	str	r3, [r1, #4]
 800a688:	4630      	mov	r0, r6
 800a68a:	f000 f82f 	bl	800a6ec <__malloc_unlock>
 800a68e:	f104 000b 	add.w	r0, r4, #11
 800a692:	1d23      	adds	r3, r4, #4
 800a694:	f020 0007 	bic.w	r0, r0, #7
 800a698:	1ac2      	subs	r2, r0, r3
 800a69a:	bf1c      	itt	ne
 800a69c:	1a1b      	subne	r3, r3, r0
 800a69e:	50a3      	strne	r3, [r4, r2]
 800a6a0:	e7af      	b.n	800a602 <_malloc_r+0x22>
 800a6a2:	6862      	ldr	r2, [r4, #4]
 800a6a4:	42a3      	cmp	r3, r4
 800a6a6:	bf0c      	ite	eq
 800a6a8:	f8c8 2000 	streq.w	r2, [r8]
 800a6ac:	605a      	strne	r2, [r3, #4]
 800a6ae:	e7eb      	b.n	800a688 <_malloc_r+0xa8>
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	6864      	ldr	r4, [r4, #4]
 800a6b4:	e7ae      	b.n	800a614 <_malloc_r+0x34>
 800a6b6:	463c      	mov	r4, r7
 800a6b8:	687f      	ldr	r7, [r7, #4]
 800a6ba:	e7b6      	b.n	800a62a <_malloc_r+0x4a>
 800a6bc:	461a      	mov	r2, r3
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	d1fb      	bne.n	800a6bc <_malloc_r+0xdc>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	6053      	str	r3, [r2, #4]
 800a6c8:	e7de      	b.n	800a688 <_malloc_r+0xa8>
 800a6ca:	230c      	movs	r3, #12
 800a6cc:	6033      	str	r3, [r6, #0]
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f000 f80c 	bl	800a6ec <__malloc_unlock>
 800a6d4:	e794      	b.n	800a600 <_malloc_r+0x20>
 800a6d6:	6005      	str	r5, [r0, #0]
 800a6d8:	e7d6      	b.n	800a688 <_malloc_r+0xa8>
 800a6da:	bf00      	nop
 800a6dc:	24005338 	.word	0x24005338

0800a6e0 <__malloc_lock>:
 800a6e0:	4801      	ldr	r0, [pc, #4]	@ (800a6e8 <__malloc_lock+0x8>)
 800a6e2:	f7ff bf01 	b.w	800a4e8 <__retarget_lock_acquire_recursive>
 800a6e6:	bf00      	nop
 800a6e8:	24005330 	.word	0x24005330

0800a6ec <__malloc_unlock>:
 800a6ec:	4801      	ldr	r0, [pc, #4]	@ (800a6f4 <__malloc_unlock+0x8>)
 800a6ee:	f7ff befc 	b.w	800a4ea <__retarget_lock_release_recursive>
 800a6f2:	bf00      	nop
 800a6f4:	24005330 	.word	0x24005330

0800a6f8 <__ssputs_r>:
 800a6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fc:	688e      	ldr	r6, [r1, #8]
 800a6fe:	461f      	mov	r7, r3
 800a700:	42be      	cmp	r6, r7
 800a702:	680b      	ldr	r3, [r1, #0]
 800a704:	4682      	mov	sl, r0
 800a706:	460c      	mov	r4, r1
 800a708:	4690      	mov	r8, r2
 800a70a:	d82d      	bhi.n	800a768 <__ssputs_r+0x70>
 800a70c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a710:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a714:	d026      	beq.n	800a764 <__ssputs_r+0x6c>
 800a716:	6965      	ldr	r5, [r4, #20]
 800a718:	6909      	ldr	r1, [r1, #16]
 800a71a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a71e:	eba3 0901 	sub.w	r9, r3, r1
 800a722:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a726:	1c7b      	adds	r3, r7, #1
 800a728:	444b      	add	r3, r9
 800a72a:	106d      	asrs	r5, r5, #1
 800a72c:	429d      	cmp	r5, r3
 800a72e:	bf38      	it	cc
 800a730:	461d      	movcc	r5, r3
 800a732:	0553      	lsls	r3, r2, #21
 800a734:	d527      	bpl.n	800a786 <__ssputs_r+0x8e>
 800a736:	4629      	mov	r1, r5
 800a738:	f7ff ff52 	bl	800a5e0 <_malloc_r>
 800a73c:	4606      	mov	r6, r0
 800a73e:	b360      	cbz	r0, 800a79a <__ssputs_r+0xa2>
 800a740:	6921      	ldr	r1, [r4, #16]
 800a742:	464a      	mov	r2, r9
 800a744:	f7ff fed2 	bl	800a4ec <memcpy>
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a752:	81a3      	strh	r3, [r4, #12]
 800a754:	6126      	str	r6, [r4, #16]
 800a756:	6165      	str	r5, [r4, #20]
 800a758:	444e      	add	r6, r9
 800a75a:	eba5 0509 	sub.w	r5, r5, r9
 800a75e:	6026      	str	r6, [r4, #0]
 800a760:	60a5      	str	r5, [r4, #8]
 800a762:	463e      	mov	r6, r7
 800a764:	42be      	cmp	r6, r7
 800a766:	d900      	bls.n	800a76a <__ssputs_r+0x72>
 800a768:	463e      	mov	r6, r7
 800a76a:	6820      	ldr	r0, [r4, #0]
 800a76c:	4632      	mov	r2, r6
 800a76e:	4641      	mov	r1, r8
 800a770:	f000 faa8 	bl	800acc4 <memmove>
 800a774:	68a3      	ldr	r3, [r4, #8]
 800a776:	1b9b      	subs	r3, r3, r6
 800a778:	60a3      	str	r3, [r4, #8]
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	4433      	add	r3, r6
 800a77e:	6023      	str	r3, [r4, #0]
 800a780:	2000      	movs	r0, #0
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	462a      	mov	r2, r5
 800a788:	f000 fac6 	bl	800ad18 <_realloc_r>
 800a78c:	4606      	mov	r6, r0
 800a78e:	2800      	cmp	r0, #0
 800a790:	d1e0      	bne.n	800a754 <__ssputs_r+0x5c>
 800a792:	6921      	ldr	r1, [r4, #16]
 800a794:	4650      	mov	r0, sl
 800a796:	f7ff feb7 	bl	800a508 <_free_r>
 800a79a:	230c      	movs	r3, #12
 800a79c:	f8ca 3000 	str.w	r3, [sl]
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a6:	81a3      	strh	r3, [r4, #12]
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7ac:	e7e9      	b.n	800a782 <__ssputs_r+0x8a>
	...

0800a7b0 <_svfiprintf_r>:
 800a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	4698      	mov	r8, r3
 800a7b6:	898b      	ldrh	r3, [r1, #12]
 800a7b8:	061b      	lsls	r3, r3, #24
 800a7ba:	b09d      	sub	sp, #116	@ 0x74
 800a7bc:	4607      	mov	r7, r0
 800a7be:	460d      	mov	r5, r1
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	d510      	bpl.n	800a7e6 <_svfiprintf_r+0x36>
 800a7c4:	690b      	ldr	r3, [r1, #16]
 800a7c6:	b973      	cbnz	r3, 800a7e6 <_svfiprintf_r+0x36>
 800a7c8:	2140      	movs	r1, #64	@ 0x40
 800a7ca:	f7ff ff09 	bl	800a5e0 <_malloc_r>
 800a7ce:	6028      	str	r0, [r5, #0]
 800a7d0:	6128      	str	r0, [r5, #16]
 800a7d2:	b930      	cbnz	r0, 800a7e2 <_svfiprintf_r+0x32>
 800a7d4:	230c      	movs	r3, #12
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7dc:	b01d      	add	sp, #116	@ 0x74
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e2:	2340      	movs	r3, #64	@ 0x40
 800a7e4:	616b      	str	r3, [r5, #20]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ea:	2320      	movs	r3, #32
 800a7ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7f4:	2330      	movs	r3, #48	@ 0x30
 800a7f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a994 <_svfiprintf_r+0x1e4>
 800a7fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7fe:	f04f 0901 	mov.w	r9, #1
 800a802:	4623      	mov	r3, r4
 800a804:	469a      	mov	sl, r3
 800a806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a80a:	b10a      	cbz	r2, 800a810 <_svfiprintf_r+0x60>
 800a80c:	2a25      	cmp	r2, #37	@ 0x25
 800a80e:	d1f9      	bne.n	800a804 <_svfiprintf_r+0x54>
 800a810:	ebba 0b04 	subs.w	fp, sl, r4
 800a814:	d00b      	beq.n	800a82e <_svfiprintf_r+0x7e>
 800a816:	465b      	mov	r3, fp
 800a818:	4622      	mov	r2, r4
 800a81a:	4629      	mov	r1, r5
 800a81c:	4638      	mov	r0, r7
 800a81e:	f7ff ff6b 	bl	800a6f8 <__ssputs_r>
 800a822:	3001      	adds	r0, #1
 800a824:	f000 80a7 	beq.w	800a976 <_svfiprintf_r+0x1c6>
 800a828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a82a:	445a      	add	r2, fp
 800a82c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a82e:	f89a 3000 	ldrb.w	r3, [sl]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 809f 	beq.w	800a976 <_svfiprintf_r+0x1c6>
 800a838:	2300      	movs	r3, #0
 800a83a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a83e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a842:	f10a 0a01 	add.w	sl, sl, #1
 800a846:	9304      	str	r3, [sp, #16]
 800a848:	9307      	str	r3, [sp, #28]
 800a84a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a84e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a850:	4654      	mov	r4, sl
 800a852:	2205      	movs	r2, #5
 800a854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a858:	484e      	ldr	r0, [pc, #312]	@ (800a994 <_svfiprintf_r+0x1e4>)
 800a85a:	f7f5 fd41 	bl	80002e0 <memchr>
 800a85e:	9a04      	ldr	r2, [sp, #16]
 800a860:	b9d8      	cbnz	r0, 800a89a <_svfiprintf_r+0xea>
 800a862:	06d0      	lsls	r0, r2, #27
 800a864:	bf44      	itt	mi
 800a866:	2320      	movmi	r3, #32
 800a868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a86c:	0711      	lsls	r1, r2, #28
 800a86e:	bf44      	itt	mi
 800a870:	232b      	movmi	r3, #43	@ 0x2b
 800a872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a876:	f89a 3000 	ldrb.w	r3, [sl]
 800a87a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a87c:	d015      	beq.n	800a8aa <_svfiprintf_r+0xfa>
 800a87e:	9a07      	ldr	r2, [sp, #28]
 800a880:	4654      	mov	r4, sl
 800a882:	2000      	movs	r0, #0
 800a884:	f04f 0c0a 	mov.w	ip, #10
 800a888:	4621      	mov	r1, r4
 800a88a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a88e:	3b30      	subs	r3, #48	@ 0x30
 800a890:	2b09      	cmp	r3, #9
 800a892:	d94b      	bls.n	800a92c <_svfiprintf_r+0x17c>
 800a894:	b1b0      	cbz	r0, 800a8c4 <_svfiprintf_r+0x114>
 800a896:	9207      	str	r2, [sp, #28]
 800a898:	e014      	b.n	800a8c4 <_svfiprintf_r+0x114>
 800a89a:	eba0 0308 	sub.w	r3, r0, r8
 800a89e:	fa09 f303 	lsl.w	r3, r9, r3
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	46a2      	mov	sl, r4
 800a8a8:	e7d2      	b.n	800a850 <_svfiprintf_r+0xa0>
 800a8aa:	9b03      	ldr	r3, [sp, #12]
 800a8ac:	1d19      	adds	r1, r3, #4
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	9103      	str	r1, [sp, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bfbb      	ittet	lt
 800a8b6:	425b      	neglt	r3, r3
 800a8b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a8bc:	9307      	strge	r3, [sp, #28]
 800a8be:	9307      	strlt	r3, [sp, #28]
 800a8c0:	bfb8      	it	lt
 800a8c2:	9204      	strlt	r2, [sp, #16]
 800a8c4:	7823      	ldrb	r3, [r4, #0]
 800a8c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8c8:	d10a      	bne.n	800a8e0 <_svfiprintf_r+0x130>
 800a8ca:	7863      	ldrb	r3, [r4, #1]
 800a8cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ce:	d132      	bne.n	800a936 <_svfiprintf_r+0x186>
 800a8d0:	9b03      	ldr	r3, [sp, #12]
 800a8d2:	1d1a      	adds	r2, r3, #4
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	9203      	str	r2, [sp, #12]
 800a8d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8dc:	3402      	adds	r4, #2
 800a8de:	9305      	str	r3, [sp, #20]
 800a8e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a9a4 <_svfiprintf_r+0x1f4>
 800a8e4:	7821      	ldrb	r1, [r4, #0]
 800a8e6:	2203      	movs	r2, #3
 800a8e8:	4650      	mov	r0, sl
 800a8ea:	f7f5 fcf9 	bl	80002e0 <memchr>
 800a8ee:	b138      	cbz	r0, 800a900 <_svfiprintf_r+0x150>
 800a8f0:	9b04      	ldr	r3, [sp, #16]
 800a8f2:	eba0 000a 	sub.w	r0, r0, sl
 800a8f6:	2240      	movs	r2, #64	@ 0x40
 800a8f8:	4082      	lsls	r2, r0
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	3401      	adds	r4, #1
 800a8fe:	9304      	str	r3, [sp, #16]
 800a900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a904:	4824      	ldr	r0, [pc, #144]	@ (800a998 <_svfiprintf_r+0x1e8>)
 800a906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a90a:	2206      	movs	r2, #6
 800a90c:	f7f5 fce8 	bl	80002e0 <memchr>
 800a910:	2800      	cmp	r0, #0
 800a912:	d036      	beq.n	800a982 <_svfiprintf_r+0x1d2>
 800a914:	4b21      	ldr	r3, [pc, #132]	@ (800a99c <_svfiprintf_r+0x1ec>)
 800a916:	bb1b      	cbnz	r3, 800a960 <_svfiprintf_r+0x1b0>
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	3307      	adds	r3, #7
 800a91c:	f023 0307 	bic.w	r3, r3, #7
 800a920:	3308      	adds	r3, #8
 800a922:	9303      	str	r3, [sp, #12]
 800a924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a926:	4433      	add	r3, r6
 800a928:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92a:	e76a      	b.n	800a802 <_svfiprintf_r+0x52>
 800a92c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a930:	460c      	mov	r4, r1
 800a932:	2001      	movs	r0, #1
 800a934:	e7a8      	b.n	800a888 <_svfiprintf_r+0xd8>
 800a936:	2300      	movs	r3, #0
 800a938:	3401      	adds	r4, #1
 800a93a:	9305      	str	r3, [sp, #20]
 800a93c:	4619      	mov	r1, r3
 800a93e:	f04f 0c0a 	mov.w	ip, #10
 800a942:	4620      	mov	r0, r4
 800a944:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a948:	3a30      	subs	r2, #48	@ 0x30
 800a94a:	2a09      	cmp	r2, #9
 800a94c:	d903      	bls.n	800a956 <_svfiprintf_r+0x1a6>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d0c6      	beq.n	800a8e0 <_svfiprintf_r+0x130>
 800a952:	9105      	str	r1, [sp, #20]
 800a954:	e7c4      	b.n	800a8e0 <_svfiprintf_r+0x130>
 800a956:	fb0c 2101 	mla	r1, ip, r1, r2
 800a95a:	4604      	mov	r4, r0
 800a95c:	2301      	movs	r3, #1
 800a95e:	e7f0      	b.n	800a942 <_svfiprintf_r+0x192>
 800a960:	ab03      	add	r3, sp, #12
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	462a      	mov	r2, r5
 800a966:	4b0e      	ldr	r3, [pc, #56]	@ (800a9a0 <_svfiprintf_r+0x1f0>)
 800a968:	a904      	add	r1, sp, #16
 800a96a:	4638      	mov	r0, r7
 800a96c:	f3af 8000 	nop.w
 800a970:	1c42      	adds	r2, r0, #1
 800a972:	4606      	mov	r6, r0
 800a974:	d1d6      	bne.n	800a924 <_svfiprintf_r+0x174>
 800a976:	89ab      	ldrh	r3, [r5, #12]
 800a978:	065b      	lsls	r3, r3, #25
 800a97a:	f53f af2d 	bmi.w	800a7d8 <_svfiprintf_r+0x28>
 800a97e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a980:	e72c      	b.n	800a7dc <_svfiprintf_r+0x2c>
 800a982:	ab03      	add	r3, sp, #12
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	462a      	mov	r2, r5
 800a988:	4b05      	ldr	r3, [pc, #20]	@ (800a9a0 <_svfiprintf_r+0x1f0>)
 800a98a:	a904      	add	r1, sp, #16
 800a98c:	4638      	mov	r0, r7
 800a98e:	f000 f879 	bl	800aa84 <_printf_i>
 800a992:	e7ed      	b.n	800a970 <_svfiprintf_r+0x1c0>
 800a994:	0800aee8 	.word	0x0800aee8
 800a998:	0800aef2 	.word	0x0800aef2
 800a99c:	00000000 	.word	0x00000000
 800a9a0:	0800a6f9 	.word	0x0800a6f9
 800a9a4:	0800aeee 	.word	0x0800aeee

0800a9a8 <_printf_common>:
 800a9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ac:	4616      	mov	r6, r2
 800a9ae:	4698      	mov	r8, r3
 800a9b0:	688a      	ldr	r2, [r1, #8]
 800a9b2:	690b      	ldr	r3, [r1, #16]
 800a9b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	bfb8      	it	lt
 800a9bc:	4613      	movlt	r3, r2
 800a9be:	6033      	str	r3, [r6, #0]
 800a9c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9c4:	4607      	mov	r7, r0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	b10a      	cbz	r2, 800a9ce <_printf_common+0x26>
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	6033      	str	r3, [r6, #0]
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	0699      	lsls	r1, r3, #26
 800a9d2:	bf42      	ittt	mi
 800a9d4:	6833      	ldrmi	r3, [r6, #0]
 800a9d6:	3302      	addmi	r3, #2
 800a9d8:	6033      	strmi	r3, [r6, #0]
 800a9da:	6825      	ldr	r5, [r4, #0]
 800a9dc:	f015 0506 	ands.w	r5, r5, #6
 800a9e0:	d106      	bne.n	800a9f0 <_printf_common+0x48>
 800a9e2:	f104 0a19 	add.w	sl, r4, #25
 800a9e6:	68e3      	ldr	r3, [r4, #12]
 800a9e8:	6832      	ldr	r2, [r6, #0]
 800a9ea:	1a9b      	subs	r3, r3, r2
 800a9ec:	42ab      	cmp	r3, r5
 800a9ee:	dc26      	bgt.n	800aa3e <_printf_common+0x96>
 800a9f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9f4:	6822      	ldr	r2, [r4, #0]
 800a9f6:	3b00      	subs	r3, #0
 800a9f8:	bf18      	it	ne
 800a9fa:	2301      	movne	r3, #1
 800a9fc:	0692      	lsls	r2, r2, #26
 800a9fe:	d42b      	bmi.n	800aa58 <_printf_common+0xb0>
 800aa00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa04:	4641      	mov	r1, r8
 800aa06:	4638      	mov	r0, r7
 800aa08:	47c8      	blx	r9
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d01e      	beq.n	800aa4c <_printf_common+0xa4>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	6922      	ldr	r2, [r4, #16]
 800aa12:	f003 0306 	and.w	r3, r3, #6
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	bf02      	ittt	eq
 800aa1a:	68e5      	ldreq	r5, [r4, #12]
 800aa1c:	6833      	ldreq	r3, [r6, #0]
 800aa1e:	1aed      	subeq	r5, r5, r3
 800aa20:	68a3      	ldr	r3, [r4, #8]
 800aa22:	bf0c      	ite	eq
 800aa24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa28:	2500      	movne	r5, #0
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	bfc4      	itt	gt
 800aa2e:	1a9b      	subgt	r3, r3, r2
 800aa30:	18ed      	addgt	r5, r5, r3
 800aa32:	2600      	movs	r6, #0
 800aa34:	341a      	adds	r4, #26
 800aa36:	42b5      	cmp	r5, r6
 800aa38:	d11a      	bne.n	800aa70 <_printf_common+0xc8>
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	e008      	b.n	800aa50 <_printf_common+0xa8>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4652      	mov	r2, sl
 800aa42:	4641      	mov	r1, r8
 800aa44:	4638      	mov	r0, r7
 800aa46:	47c8      	blx	r9
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d103      	bne.n	800aa54 <_printf_common+0xac>
 800aa4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa54:	3501      	adds	r5, #1
 800aa56:	e7c6      	b.n	800a9e6 <_printf_common+0x3e>
 800aa58:	18e1      	adds	r1, r4, r3
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	2030      	movs	r0, #48	@ 0x30
 800aa5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa62:	4422      	add	r2, r4
 800aa64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa6c:	3302      	adds	r3, #2
 800aa6e:	e7c7      	b.n	800aa00 <_printf_common+0x58>
 800aa70:	2301      	movs	r3, #1
 800aa72:	4622      	mov	r2, r4
 800aa74:	4641      	mov	r1, r8
 800aa76:	4638      	mov	r0, r7
 800aa78:	47c8      	blx	r9
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	d0e6      	beq.n	800aa4c <_printf_common+0xa4>
 800aa7e:	3601      	adds	r6, #1
 800aa80:	e7d9      	b.n	800aa36 <_printf_common+0x8e>
	...

0800aa84 <_printf_i>:
 800aa84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa88:	7e0f      	ldrb	r7, [r1, #24]
 800aa8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa8c:	2f78      	cmp	r7, #120	@ 0x78
 800aa8e:	4691      	mov	r9, r2
 800aa90:	4680      	mov	r8, r0
 800aa92:	460c      	mov	r4, r1
 800aa94:	469a      	mov	sl, r3
 800aa96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa9a:	d807      	bhi.n	800aaac <_printf_i+0x28>
 800aa9c:	2f62      	cmp	r7, #98	@ 0x62
 800aa9e:	d80a      	bhi.n	800aab6 <_printf_i+0x32>
 800aaa0:	2f00      	cmp	r7, #0
 800aaa2:	f000 80d2 	beq.w	800ac4a <_printf_i+0x1c6>
 800aaa6:	2f58      	cmp	r7, #88	@ 0x58
 800aaa8:	f000 80b9 	beq.w	800ac1e <_printf_i+0x19a>
 800aaac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aab0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aab4:	e03a      	b.n	800ab2c <_printf_i+0xa8>
 800aab6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aaba:	2b15      	cmp	r3, #21
 800aabc:	d8f6      	bhi.n	800aaac <_printf_i+0x28>
 800aabe:	a101      	add	r1, pc, #4	@ (adr r1, 800aac4 <_printf_i+0x40>)
 800aac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aac4:	0800ab1d 	.word	0x0800ab1d
 800aac8:	0800ab31 	.word	0x0800ab31
 800aacc:	0800aaad 	.word	0x0800aaad
 800aad0:	0800aaad 	.word	0x0800aaad
 800aad4:	0800aaad 	.word	0x0800aaad
 800aad8:	0800aaad 	.word	0x0800aaad
 800aadc:	0800ab31 	.word	0x0800ab31
 800aae0:	0800aaad 	.word	0x0800aaad
 800aae4:	0800aaad 	.word	0x0800aaad
 800aae8:	0800aaad 	.word	0x0800aaad
 800aaec:	0800aaad 	.word	0x0800aaad
 800aaf0:	0800ac31 	.word	0x0800ac31
 800aaf4:	0800ab5b 	.word	0x0800ab5b
 800aaf8:	0800abeb 	.word	0x0800abeb
 800aafc:	0800aaad 	.word	0x0800aaad
 800ab00:	0800aaad 	.word	0x0800aaad
 800ab04:	0800ac53 	.word	0x0800ac53
 800ab08:	0800aaad 	.word	0x0800aaad
 800ab0c:	0800ab5b 	.word	0x0800ab5b
 800ab10:	0800aaad 	.word	0x0800aaad
 800ab14:	0800aaad 	.word	0x0800aaad
 800ab18:	0800abf3 	.word	0x0800abf3
 800ab1c:	6833      	ldr	r3, [r6, #0]
 800ab1e:	1d1a      	adds	r2, r3, #4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	6032      	str	r2, [r6, #0]
 800ab24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e09d      	b.n	800ac6c <_printf_i+0x1e8>
 800ab30:	6833      	ldr	r3, [r6, #0]
 800ab32:	6820      	ldr	r0, [r4, #0]
 800ab34:	1d19      	adds	r1, r3, #4
 800ab36:	6031      	str	r1, [r6, #0]
 800ab38:	0606      	lsls	r6, r0, #24
 800ab3a:	d501      	bpl.n	800ab40 <_printf_i+0xbc>
 800ab3c:	681d      	ldr	r5, [r3, #0]
 800ab3e:	e003      	b.n	800ab48 <_printf_i+0xc4>
 800ab40:	0645      	lsls	r5, r0, #25
 800ab42:	d5fb      	bpl.n	800ab3c <_printf_i+0xb8>
 800ab44:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab48:	2d00      	cmp	r5, #0
 800ab4a:	da03      	bge.n	800ab54 <_printf_i+0xd0>
 800ab4c:	232d      	movs	r3, #45	@ 0x2d
 800ab4e:	426d      	negs	r5, r5
 800ab50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab54:	4859      	ldr	r0, [pc, #356]	@ (800acbc <_printf_i+0x238>)
 800ab56:	230a      	movs	r3, #10
 800ab58:	e011      	b.n	800ab7e <_printf_i+0xfa>
 800ab5a:	6821      	ldr	r1, [r4, #0]
 800ab5c:	6833      	ldr	r3, [r6, #0]
 800ab5e:	0608      	lsls	r0, r1, #24
 800ab60:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab64:	d402      	bmi.n	800ab6c <_printf_i+0xe8>
 800ab66:	0649      	lsls	r1, r1, #25
 800ab68:	bf48      	it	mi
 800ab6a:	b2ad      	uxthmi	r5, r5
 800ab6c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab6e:	4853      	ldr	r0, [pc, #332]	@ (800acbc <_printf_i+0x238>)
 800ab70:	6033      	str	r3, [r6, #0]
 800ab72:	bf14      	ite	ne
 800ab74:	230a      	movne	r3, #10
 800ab76:	2308      	moveq	r3, #8
 800ab78:	2100      	movs	r1, #0
 800ab7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab7e:	6866      	ldr	r6, [r4, #4]
 800ab80:	60a6      	str	r6, [r4, #8]
 800ab82:	2e00      	cmp	r6, #0
 800ab84:	bfa2      	ittt	ge
 800ab86:	6821      	ldrge	r1, [r4, #0]
 800ab88:	f021 0104 	bicge.w	r1, r1, #4
 800ab8c:	6021      	strge	r1, [r4, #0]
 800ab8e:	b90d      	cbnz	r5, 800ab94 <_printf_i+0x110>
 800ab90:	2e00      	cmp	r6, #0
 800ab92:	d04b      	beq.n	800ac2c <_printf_i+0x1a8>
 800ab94:	4616      	mov	r6, r2
 800ab96:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab9a:	fb03 5711 	mls	r7, r3, r1, r5
 800ab9e:	5dc7      	ldrb	r7, [r0, r7]
 800aba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aba4:	462f      	mov	r7, r5
 800aba6:	42bb      	cmp	r3, r7
 800aba8:	460d      	mov	r5, r1
 800abaa:	d9f4      	bls.n	800ab96 <_printf_i+0x112>
 800abac:	2b08      	cmp	r3, #8
 800abae:	d10b      	bne.n	800abc8 <_printf_i+0x144>
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	07df      	lsls	r7, r3, #31
 800abb4:	d508      	bpl.n	800abc8 <_printf_i+0x144>
 800abb6:	6923      	ldr	r3, [r4, #16]
 800abb8:	6861      	ldr	r1, [r4, #4]
 800abba:	4299      	cmp	r1, r3
 800abbc:	bfde      	ittt	le
 800abbe:	2330      	movle	r3, #48	@ 0x30
 800abc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abc4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800abc8:	1b92      	subs	r2, r2, r6
 800abca:	6122      	str	r2, [r4, #16]
 800abcc:	f8cd a000 	str.w	sl, [sp]
 800abd0:	464b      	mov	r3, r9
 800abd2:	aa03      	add	r2, sp, #12
 800abd4:	4621      	mov	r1, r4
 800abd6:	4640      	mov	r0, r8
 800abd8:	f7ff fee6 	bl	800a9a8 <_printf_common>
 800abdc:	3001      	adds	r0, #1
 800abde:	d14a      	bne.n	800ac76 <_printf_i+0x1f2>
 800abe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abe4:	b004      	add	sp, #16
 800abe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	f043 0320 	orr.w	r3, r3, #32
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	4833      	ldr	r0, [pc, #204]	@ (800acc0 <_printf_i+0x23c>)
 800abf4:	2778      	movs	r7, #120	@ 0x78
 800abf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	6831      	ldr	r1, [r6, #0]
 800abfe:	061f      	lsls	r7, r3, #24
 800ac00:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac04:	d402      	bmi.n	800ac0c <_printf_i+0x188>
 800ac06:	065f      	lsls	r7, r3, #25
 800ac08:	bf48      	it	mi
 800ac0a:	b2ad      	uxthmi	r5, r5
 800ac0c:	6031      	str	r1, [r6, #0]
 800ac0e:	07d9      	lsls	r1, r3, #31
 800ac10:	bf44      	itt	mi
 800ac12:	f043 0320 	orrmi.w	r3, r3, #32
 800ac16:	6023      	strmi	r3, [r4, #0]
 800ac18:	b11d      	cbz	r5, 800ac22 <_printf_i+0x19e>
 800ac1a:	2310      	movs	r3, #16
 800ac1c:	e7ac      	b.n	800ab78 <_printf_i+0xf4>
 800ac1e:	4827      	ldr	r0, [pc, #156]	@ (800acbc <_printf_i+0x238>)
 800ac20:	e7e9      	b.n	800abf6 <_printf_i+0x172>
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	f023 0320 	bic.w	r3, r3, #32
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	e7f6      	b.n	800ac1a <_printf_i+0x196>
 800ac2c:	4616      	mov	r6, r2
 800ac2e:	e7bd      	b.n	800abac <_printf_i+0x128>
 800ac30:	6833      	ldr	r3, [r6, #0]
 800ac32:	6825      	ldr	r5, [r4, #0]
 800ac34:	6961      	ldr	r1, [r4, #20]
 800ac36:	1d18      	adds	r0, r3, #4
 800ac38:	6030      	str	r0, [r6, #0]
 800ac3a:	062e      	lsls	r6, r5, #24
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	d501      	bpl.n	800ac44 <_printf_i+0x1c0>
 800ac40:	6019      	str	r1, [r3, #0]
 800ac42:	e002      	b.n	800ac4a <_printf_i+0x1c6>
 800ac44:	0668      	lsls	r0, r5, #25
 800ac46:	d5fb      	bpl.n	800ac40 <_printf_i+0x1bc>
 800ac48:	8019      	strh	r1, [r3, #0]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	6123      	str	r3, [r4, #16]
 800ac4e:	4616      	mov	r6, r2
 800ac50:	e7bc      	b.n	800abcc <_printf_i+0x148>
 800ac52:	6833      	ldr	r3, [r6, #0]
 800ac54:	1d1a      	adds	r2, r3, #4
 800ac56:	6032      	str	r2, [r6, #0]
 800ac58:	681e      	ldr	r6, [r3, #0]
 800ac5a:	6862      	ldr	r2, [r4, #4]
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f7f5 fb3e 	bl	80002e0 <memchr>
 800ac64:	b108      	cbz	r0, 800ac6a <_printf_i+0x1e6>
 800ac66:	1b80      	subs	r0, r0, r6
 800ac68:	6060      	str	r0, [r4, #4]
 800ac6a:	6863      	ldr	r3, [r4, #4]
 800ac6c:	6123      	str	r3, [r4, #16]
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac74:	e7aa      	b.n	800abcc <_printf_i+0x148>
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	4632      	mov	r2, r6
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	4640      	mov	r0, r8
 800ac7e:	47d0      	blx	sl
 800ac80:	3001      	adds	r0, #1
 800ac82:	d0ad      	beq.n	800abe0 <_printf_i+0x15c>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	079b      	lsls	r3, r3, #30
 800ac88:	d413      	bmi.n	800acb2 <_printf_i+0x22e>
 800ac8a:	68e0      	ldr	r0, [r4, #12]
 800ac8c:	9b03      	ldr	r3, [sp, #12]
 800ac8e:	4298      	cmp	r0, r3
 800ac90:	bfb8      	it	lt
 800ac92:	4618      	movlt	r0, r3
 800ac94:	e7a6      	b.n	800abe4 <_printf_i+0x160>
 800ac96:	2301      	movs	r3, #1
 800ac98:	4632      	mov	r2, r6
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	47d0      	blx	sl
 800aca0:	3001      	adds	r0, #1
 800aca2:	d09d      	beq.n	800abe0 <_printf_i+0x15c>
 800aca4:	3501      	adds	r5, #1
 800aca6:	68e3      	ldr	r3, [r4, #12]
 800aca8:	9903      	ldr	r1, [sp, #12]
 800acaa:	1a5b      	subs	r3, r3, r1
 800acac:	42ab      	cmp	r3, r5
 800acae:	dcf2      	bgt.n	800ac96 <_printf_i+0x212>
 800acb0:	e7eb      	b.n	800ac8a <_printf_i+0x206>
 800acb2:	2500      	movs	r5, #0
 800acb4:	f104 0619 	add.w	r6, r4, #25
 800acb8:	e7f5      	b.n	800aca6 <_printf_i+0x222>
 800acba:	bf00      	nop
 800acbc:	0800aef9 	.word	0x0800aef9
 800acc0:	0800af0a 	.word	0x0800af0a

0800acc4 <memmove>:
 800acc4:	4288      	cmp	r0, r1
 800acc6:	b510      	push	{r4, lr}
 800acc8:	eb01 0402 	add.w	r4, r1, r2
 800accc:	d902      	bls.n	800acd4 <memmove+0x10>
 800acce:	4284      	cmp	r4, r0
 800acd0:	4623      	mov	r3, r4
 800acd2:	d807      	bhi.n	800ace4 <memmove+0x20>
 800acd4:	1e43      	subs	r3, r0, #1
 800acd6:	42a1      	cmp	r1, r4
 800acd8:	d008      	beq.n	800acec <memmove+0x28>
 800acda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ace2:	e7f8      	b.n	800acd6 <memmove+0x12>
 800ace4:	4402      	add	r2, r0
 800ace6:	4601      	mov	r1, r0
 800ace8:	428a      	cmp	r2, r1
 800acea:	d100      	bne.n	800acee <memmove+0x2a>
 800acec:	bd10      	pop	{r4, pc}
 800acee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acf6:	e7f7      	b.n	800ace8 <memmove+0x24>

0800acf8 <_sbrk_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d06      	ldr	r5, [pc, #24]	@ (800ad14 <_sbrk_r+0x1c>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	602b      	str	r3, [r5, #0]
 800ad04:	f7f6 fa8c 	bl	8001220 <_sbrk>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_sbrk_r+0x1a>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_sbrk_r+0x1a>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	2400532c 	.word	0x2400532c

0800ad18 <_realloc_r>:
 800ad18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1c:	4680      	mov	r8, r0
 800ad1e:	4615      	mov	r5, r2
 800ad20:	460c      	mov	r4, r1
 800ad22:	b921      	cbnz	r1, 800ad2e <_realloc_r+0x16>
 800ad24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad28:	4611      	mov	r1, r2
 800ad2a:	f7ff bc59 	b.w	800a5e0 <_malloc_r>
 800ad2e:	b92a      	cbnz	r2, 800ad3c <_realloc_r+0x24>
 800ad30:	f7ff fbea 	bl	800a508 <_free_r>
 800ad34:	2400      	movs	r4, #0
 800ad36:	4620      	mov	r0, r4
 800ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad3c:	f000 f81a 	bl	800ad74 <_malloc_usable_size_r>
 800ad40:	4285      	cmp	r5, r0
 800ad42:	4606      	mov	r6, r0
 800ad44:	d802      	bhi.n	800ad4c <_realloc_r+0x34>
 800ad46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad4a:	d8f4      	bhi.n	800ad36 <_realloc_r+0x1e>
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	4640      	mov	r0, r8
 800ad50:	f7ff fc46 	bl	800a5e0 <_malloc_r>
 800ad54:	4607      	mov	r7, r0
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d0ec      	beq.n	800ad34 <_realloc_r+0x1c>
 800ad5a:	42b5      	cmp	r5, r6
 800ad5c:	462a      	mov	r2, r5
 800ad5e:	4621      	mov	r1, r4
 800ad60:	bf28      	it	cs
 800ad62:	4632      	movcs	r2, r6
 800ad64:	f7ff fbc2 	bl	800a4ec <memcpy>
 800ad68:	4621      	mov	r1, r4
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	f7ff fbcc 	bl	800a508 <_free_r>
 800ad70:	463c      	mov	r4, r7
 800ad72:	e7e0      	b.n	800ad36 <_realloc_r+0x1e>

0800ad74 <_malloc_usable_size_r>:
 800ad74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad78:	1f18      	subs	r0, r3, #4
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	bfbc      	itt	lt
 800ad7e:	580b      	ldrlt	r3, [r1, r0]
 800ad80:	18c0      	addlt	r0, r0, r3
 800ad82:	4770      	bx	lr

0800ad84 <_init>:
 800ad84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad86:	bf00      	nop
 800ad88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8a:	bc08      	pop	{r3}
 800ad8c:	469e      	mov	lr, r3
 800ad8e:	4770      	bx	lr

0800ad90 <_fini>:
 800ad90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad92:	bf00      	nop
 800ad94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad96:	bc08      	pop	{r3}
 800ad98:	469e      	mov	lr, r3
 800ad9a:	4770      	bx	lr
